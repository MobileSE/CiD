<android.widget.ViewSwitcher.ViewFactory: android.view.View makeView()>
<android.app.VoiceInteractor.ConfirmationRequest: void onConfirmationResult(boolean,android.os.Bundle)>
<android.app.VoiceInteractor.ConfirmationRequest: void <init>(android.app.VoiceInteractor.Prompt,android.os.Bundle)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,int,android.os.Handler)>
<android.hardware.SensorManager: void registerDynamicSensorCallback(android.hardware.SensorManager.DynamicSensorCallback)>
<android.hardware.SensorManager: boolean injectSensorData(android.hardware.Sensor,float[],int,long)>
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener)>
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int,boolean)>
<android.hardware.SensorManager: void getAngleChange(float[],float[],float[])>
<android.hardware.SensorManager: java.util.List getSensorList(int)>
<android.hardware.SensorManager: float[] getOrientation(float[],float[])>
<android.hardware.SensorManager: int getSensors()>
<android.hardware.SensorManager: boolean cancelTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>
<android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])>
<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.os.MemoryFile)>
<android.hardware.SensorManager: float getInclination(float[])>
<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.hardware.HardwareBuffer)>
<android.hardware.SensorManager: java.util.List getDynamicSensorList(int)>
<android.hardware.SensorManager: boolean isDynamicSensorDiscoverySupported()>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,int)>
<android.hardware.SensorManager: void getRotationMatrixFromVector(float[],float[])>
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener,int)>
<android.hardware.SensorManager: boolean flush(android.hardware.SensorEventListener)>
<android.hardware.SensorManager: void getQuaternionFromVector(float[],float[])>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>
<android.hardware.SensorManager: boolean remapCoordinateSystem(float[],int,int,float[])>
<android.hardware.SensorManager: void unregisterDynamicSensorCallback(android.hardware.SensorManager.DynamicSensorCallback)>
<android.hardware.SensorManager: float getAltitude(float,float)>
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>
<android.hardware.SensorManager: boolean initDataInjection(boolean)>
<android.hardware.SensorManager: boolean requestTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>
<android.hardware.SensorManager: void registerDynamicSensorCallback(android.hardware.SensorManager.DynamicSensorCallback,android.os.Handler)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int)>
<android.webkit.WebIconDatabase: android.webkit.WebIconDatabase getInstance()>
<android.webkit.WebIconDatabase: void releaseIconForPageUrl(java.lang.String)>
<android.webkit.WebIconDatabase: void retainIconForPageUrl(java.lang.String)>
<android.webkit.WebIconDatabase: void close()>
<android.webkit.WebIconDatabase: void bulkRequestIconForPageUrl(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase.IconListener)>
<android.webkit.WebIconDatabase: void open(java.lang.String)>
<android.webkit.WebIconDatabase: void requestIconForPageUrl(java.lang.String,android.webkit.WebIconDatabase.IconListener)>
<android.webkit.WebIconDatabase: void <init>()>
<android.webkit.WebIconDatabase: void removeAllIcons()>
<javax.crypto.interfaces.DHPrivateKey extends javax.crypto.interfaces.DHKey java.security.PrivateKey: java.math.BigInteger getX()>
<android.app.Notification.CarExtender.Builder: android.app.Notification.CarExtender.Builder addMessage(java.lang.String)>
<android.app.Notification.CarExtender.Builder: android.app.Notification.CarExtender.UnreadConversation build()>
<android.app.Notification.CarExtender.Builder: void <init>(String)>
<android.app.Notification.CarExtender.Builder: android.app.Notification.CarExtender.Builder setLatestTimestamp(long)>
<android.app.Notification.CarExtender.Builder: android.app.Notification.CarExtender.Builder setReadPendingIntent(android.app.PendingIntent)>
<android.app.Notification.CarExtender.Builder: android.app.Notification.CarExtender.Builder setReplyAction(android.app.PendingIntent,android.app.RemoteInput)>
<android.appwidget.AppWidgetProviderInfo: android.os.UserHandle getProfile()>
<android.appwidget.AppWidgetProviderInfo: void <init>()>
<android.appwidget.AppWidgetProviderInfo: android.graphics.drawable.Drawable loadPreviewImage(android.content.Context,int)>
<android.appwidget.AppWidgetProviderInfo: void writeToParcel(android.os.Parcel,int)>
<android.appwidget.AppWidgetProviderInfo: android.appwidget.AppWidgetProviderInfo clone()>
<android.appwidget.AppWidgetProviderInfo: java.lang.String loadLabel(android.content.pm.PackageManager)>
<android.appwidget.AppWidgetProviderInfo: void <init>(android.os.Parcel)>
<android.appwidget.AppWidgetProviderInfo: int describeContents()>
<android.appwidget.AppWidgetProviderInfo: android.graphics.drawable.Drawable loadIcon(android.content.Context,int)>
<android.webkit.RenderProcessGoneDetail: void <init>()>
<android.webkit.RenderProcessGoneDetail: int rendererPriorityAtExit()>
<android.webkit.RenderProcessGoneDetail: boolean didCrash()>
<android.view.ViewGroup.MarginLayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup.MarginLayoutParams: void setMarginStart(int)>
<android.view.ViewGroup.MarginLayoutParams: boolean isMarginRelative()>
<android.view.ViewGroup.MarginLayoutParams: void setMarginEnd(int)>
<android.view.ViewGroup.MarginLayoutParams: void setMargins(int,int,int,int)>
<android.view.ViewGroup.MarginLayoutParams: void <init>(android.view.ViewGroup.MarginLayoutParams)>
<android.view.ViewGroup.MarginLayoutParams: int getLayoutDirection()>
<android.view.ViewGroup.MarginLayoutParams: void setLayoutDirection(int)>
<android.view.ViewGroup.MarginLayoutParams: void <init>(int,int)>
<android.view.ViewGroup.MarginLayoutParams: int getMarginEnd()>
<android.view.ViewGroup.MarginLayoutParams: int getMarginStart()>
<android.view.ViewGroup.MarginLayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.service.autofill.augmented.PresentationParams.Area: android.graphics.Rect getBounds()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder penaltyFlashScreen()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder permitAll()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder detectDiskWrites()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder detectResourceMismatches()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder permitUnbufferedIo()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder permitNetwork()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder penaltyDeathOnNetwork()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder penaltyListener(java.util.concurrent.Executor,android.os.StrictMode.OnThreadViolationListener)>
<android.os.StrictMode.ThreadPolicy.Builder: void <init>(android.os.StrictMode.ThreadPolicy)>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder penaltyDialog()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder permitCustomSlowCalls()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder penaltyLog()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder detectUnbufferedIo()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder permitDiskReads()>
<android.os.StrictMode.ThreadPolicy.Builder: void <init>()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder detectDiskReads()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder detectExplicitGc()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder permitResourceMismatches()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder penaltyDeath()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy build()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder detectCustomSlowCalls()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder detectAll()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder detectNetwork()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder permitDiskWrites()>
<android.os.StrictMode.ThreadPolicy.Builder: android.os.StrictMode.ThreadPolicy.Builder penaltyDropBox()>
<android.content.ClipboardManager.OnPrimaryClipChangedListener: void onPrimaryClipChanged()>
<android.graphics.drawable.ColorStateListDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.ColorStateListDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,Runnable)>
<android.graphics.drawable.ColorStateListDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,Runnable,long)>
<android.graphics.drawable.ColorStateListDrawable: void setColorStateList(android.content.res.ColorStateList)>
<android.graphics.drawable.ColorStateListDrawable: void setAlpha(int)>
<android.graphics.drawable.ColorStateListDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.ColorStateListDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.ColorStateListDrawable: boolean hasFocusStateSpecified()>
<android.graphics.drawable.ColorStateListDrawable: void <init>(android.content.res.ColorStateList)>
<android.graphics.drawable.ColorStateListDrawable: int getOpacity()>
<android.graphics.drawable.ColorStateListDrawable: void clearAlpha()>
<android.graphics.drawable.ColorStateListDrawable: android.content.res.ColorStateList getColorStateList()>
<android.graphics.drawable.ColorStateListDrawable: void <init>()>
<java.security.cert.Certificate.CertificateRep: void <init>(String,byte[])>
<java.security.cert.Certificate.CertificateRep: java.lang.Object readResolve()>
<android.content.ReceiverCallNotAllowedException: void <init>(String)>
<java.security.cert.X509CRLSelector: java.security.cert.X509Certificate getCertificateChecking()>
<java.security.cert.X509CRLSelector: boolean match(java.security.cert.CRL)>
<java.security.cert.X509CRLSelector: void setIssuers(java.util.Collection)>
<java.security.cert.X509CRLSelector: void addIssuerName(byte[])>
<java.security.cert.X509CRLSelector: void setCertificateChecking(java.security.cert.X509Certificate)>
<java.security.cert.X509CRLSelector: java.math.BigInteger getMinCRL()>
<java.security.cert.X509CRLSelector: void setDateAndTime(java.util.Date)>
<java.security.cert.X509CRLSelector: java.util.Collection getIssuers()>
<java.security.cert.X509CRLSelector: void setIssuerNames(java.util.Collection)>
<java.security.cert.X509CRLSelector: java.util.Date getDateAndTime()>
<java.security.cert.X509CRLSelector: void addIssuer(javax.security.auth.x500.X500Principal)>
<java.security.cert.X509CRLSelector: void <init>()>
<java.security.cert.X509CRLSelector: java.math.BigInteger getMaxCRL()>
<java.security.cert.X509CRLSelector: void addIssuerName(java.lang.String)>
<java.security.cert.X509CRLSelector: java.lang.Object clone()>
<java.security.cert.X509CRLSelector: void setMinCRLNumber(java.math.BigInteger)>
<java.security.cert.X509CRLSelector: void setMaxCRLNumber(java.math.BigInteger)>
<java.security.cert.X509CRLSelector: java.util.Collection getIssuerNames()>
<android.renderscript.ScriptGroup.Binding: void <init>(android.renderscript.Script.FieldID,Object)>
<android.app.LocalActivityManager: android.os.Bundle saveInstanceState()>
<android.app.LocalActivityManager: android.view.Window destroyActivity(java.lang.String,boolean)>
<android.app.LocalActivityManager: void dispatchCreate(android.os.Bundle)>
<android.app.LocalActivityManager: void dispatchStop()>
<android.app.LocalActivityManager: void <init>(android.app.Activity,boolean)>
<android.app.LocalActivityManager: android.app.Activity getCurrentActivity()>
<android.app.LocalActivityManager: java.lang.String getCurrentId()>
<android.app.LocalActivityManager: void dispatchDestroy(boolean)>
<android.app.LocalActivityManager: android.view.Window startActivity(java.lang.String,android.content.Intent)>
<android.app.LocalActivityManager: void dispatchPause(boolean)>
<android.app.LocalActivityManager: void removeAllActivities()>
<android.app.LocalActivityManager: void dispatchResume()>
<android.app.LocalActivityManager: android.app.Activity getActivity(java.lang.String)>
<javax.crypto.KeyGeneratorSpi: void engineInit(int,java.security.SecureRandom)>
<javax.crypto.KeyGeneratorSpi: void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<javax.crypto.KeyGeneratorSpi: javax.crypto.SecretKey engineGenerateKey()>
<javax.crypto.KeyGeneratorSpi: void engineInit(java.security.SecureRandom)>
<javax.crypto.KeyGeneratorSpi: void <init>()>
<android.provider.ContactsContract.SearchSnippets: void <init>()>
<java.lang.CharSequence: java.util.stream.IntStream chars()>
<java.lang.CharSequence: java.util.stream.IntStream codePoints()>
<java.lang.CharSequence: int length()>
<java.lang.CharSequence: java.lang.String toString()>
<java.lang.CharSequence: CharSequence subSequence(int,int)>
<java.lang.CharSequence: char charAt(int)>
<android.app.ApplicationErrorReport.RunningServiceInfo: void dump(android.util.Printer,java.lang.String)>
<android.app.ApplicationErrorReport.RunningServiceInfo: void <init>()>
<android.app.ApplicationErrorReport.RunningServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ApplicationErrorReport.RunningServiceInfo: void <init>(android.os.Parcel)>
<android.util.EventLogTags: void <init>()>
<android.util.EventLogTags: void <init>(java.io.BufferedReader)>
<android.util.EventLogTags: android.util.EventLogTags.Description get(int)>
<android.util.EventLogTags: android.util.EventLogTags.Description get(java.lang.String)>
<android.net.wifi.p2p.WifiP2pDevice: void <init>(android.net.wifi.p2p.WifiP2pDevice)>
<android.net.wifi.p2p.WifiP2pDevice: boolean wpsKeypadSupported()>
<android.net.wifi.p2p.WifiP2pDevice: boolean isGroupOwner()>
<android.net.wifi.p2p.WifiP2pDevice: boolean wpsPbcSupported()>
<android.net.wifi.p2p.WifiP2pDevice: int describeContents()>
<android.net.wifi.p2p.WifiP2pDevice: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.p2p.WifiP2pDevice: void <init>()>
<android.net.wifi.p2p.WifiP2pDevice: boolean isServiceDiscoveryCapable()>
<android.net.wifi.p2p.WifiP2pDevice: boolean wpsDisplaySupported()>
<android.util.EventLog.Event: int getTag()>
<android.util.EventLog.Event: long getTimeNanos()>
<android.util.EventLog.Event: int getThreadId()>
<android.util.EventLog.Event: int getUid()>
<android.util.EventLog.Event: int getProcessId()>
<android.util.EventLog.Event: java.lang.Object getData()>
<android.security.keystore.recovery.KeyDerivationParams: int getAlgorithm()>
<android.security.keystore.recovery.KeyDerivationParams: android.security.keystore.recovery.KeyDerivationParams createScryptParams(byte[],int)>
<android.security.keystore.recovery.KeyDerivationParams: android.security.keystore.recovery.KeyDerivationParams createSha256Params(byte[])>
<android.security.keystore.recovery.KeyDerivationParams: int getMemoryDifficulty()>
<android.security.keystore.recovery.KeyDerivationParams: int describeContents()>
<android.security.keystore.recovery.KeyDerivationParams: void writeToParcel(android.os.Parcel,int)>
<android.security.keystore.recovery.KeyDerivationParams: byte[] getSalt()>
<android.view.View.OnLongClickListener: boolean onLongClick(android.view.View)>
<android.app.admin.DeviceAdminService: void <init>()>
<android.app.admin.DeviceAdminService: android.os.IBinder onBind(android.content.Intent)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder append(java.time.format.DateTimeFormatter)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendText(java.time.temporal.TemporalField)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendOffset(java.lang.String,java.lang.String)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatter toFormatter()>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder parseCaseInsensitive()>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder parseDefaulting(java.time.temporal.TemporalField,long)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendInstant()>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder parseStrict()>
<java.time.format.DateTimeFormatterBuilder: void <init>()>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendZoneOrOffsetId()>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendOffsetId()>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendZoneRegionId()>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendInstant(int)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendZoneText(java.time.format.TextStyle,java.util.Set)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder padNext(int)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendFraction(java.time.temporal.TemporalField,int,int,boolean)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendValue(java.time.temporal.TemporalField)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder optionalEnd()>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendChronologyId()>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendText(java.time.temporal.TemporalField,java.util.Map)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendValue(java.time.temporal.TemporalField,int,int,java.time.format.SignStyle)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder parseCaseSensitive()>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendLocalizedOffset(java.time.format.TextStyle)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendZoneText(java.time.format.TextStyle)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendPattern(java.lang.String)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendChronologyText(java.time.format.TextStyle)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder optionalStart()>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder padNext(int,char)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendZoneId()>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendText(java.time.temporal.TemporalField,java.time.format.TextStyle)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendLocalized(java.time.format.FormatStyle,java.time.format.FormatStyle)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendValue(java.time.temporal.TemporalField,int)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder parseLenient()>
<java.time.format.DateTimeFormatterBuilder: java.lang.String getLocalizedDateTimePattern(java.time.format.FormatStyle,java.time.format.FormatStyle,java.time.chrono.Chronology,java.util.Locale)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendValueReduced(java.time.temporal.TemporalField,int,int,java.time.chrono.ChronoLocalDate)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendLiteral(char)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatter toFormatter(java.util.Locale)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendOptional(java.time.format.DateTimeFormatter)>
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendValueReduced(java.time.temporal.TemporalField,int,int,int)>
<android.drm.DrmInfo: java.lang.Object get(java.lang.String)>
<android.drm.DrmInfo: void put(java.lang.String,java.lang.Object)>
<android.drm.DrmInfo: java.util.Iterator iterator()>
<android.drm.DrmInfo: void <init>(int,String,String)>
<android.drm.DrmInfo: void <init>(int,byte[],String)>
<android.drm.DrmInfo: byte[] getData()>
<android.drm.DrmInfo: int getInfoType()>
<android.drm.DrmInfo: java.util.Iterator keyIterator()>
<android.drm.DrmInfo: java.lang.String getMimeType()>
<android.location.Criteria: void <init>()>
<android.location.Criteria: void <init>(android.location.Criteria)>
<android.location.Criteria: void writeToParcel(android.os.Parcel,int)>
<android.location.Criteria: void setVerticalAccuracy(int)>
<android.location.Criteria: boolean isBearingRequired()>
<android.location.Criteria: void setSpeedRequired(boolean)>
<android.location.Criteria: void setAltitudeRequired(boolean)>
<android.location.Criteria: int describeContents()>
<android.location.Criteria: int getVerticalAccuracy()>
<android.location.Criteria: void setBearingRequired(boolean)>
<android.location.Criteria: void setPowerRequirement(int)>
<android.location.Criteria: boolean isAltitudeRequired()>
<android.location.Criteria: int getHorizontalAccuracy()>
<android.location.Criteria: boolean isCostAllowed()>
<android.location.Criteria: void setCostAllowed(boolean)>
<android.location.Criteria: int getSpeedAccuracy()>
<android.location.Criteria: int getAccuracy()>
<android.location.Criteria: boolean isSpeedRequired()>
<android.location.Criteria: void setBearingAccuracy(int)>
<android.location.Criteria: void setSpeedAccuracy(int)>
<android.location.Criteria: int getPowerRequirement()>
<android.location.Criteria: void setAccuracy(int)>
<android.location.Criteria: int getBearingAccuracy()>
<android.location.Criteria: void setHorizontalAccuracy(int)>
<android.provider.SyncStateContract.Constants: void <init>()>
<org.apache.http.params.HttpConnectionParams: void setLinger(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParams: int getSocketBufferSize(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)>
<org.apache.http.params.HttpConnectionParams: boolean isStaleCheckingEnabled(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)>
<org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)>
<java.nio.file.ProviderMismatchException: void <init>(String)>
<java.nio.file.ProviderMismatchException: void <init>()>
<android.net.wifi.rtt.WifiRttManager: void startRanging(android.net.wifi.rtt.RangingRequest,java.util.concurrent.Executor,android.net.wifi.rtt.RangingResultCallback)>
<android.net.wifi.rtt.WifiRttManager: void cancelRanging(android.os.WorkSource)>
<android.net.wifi.rtt.WifiRttManager: boolean isAvailable()>
<android.net.wifi.rtt.WifiRttManager: void startRanging(android.os.WorkSource,android.net.wifi.rtt.RangingRequest,java.util.concurrent.Executor,android.net.wifi.rtt.RangingResultCallback)>
<android.os.health.HealthStats: java.lang.String getDataType()>
<android.os.health.HealthStats: int getMeasurementsKeyCount()>
<android.os.health.HealthStats: boolean hasMeasurements(int)>
<android.os.health.HealthStats: boolean hasTimer(int)>
<android.os.health.HealthStats: android.os.health.TimerStat getTimer(int)>
<android.os.health.HealthStats: int getTimerKeyCount()>
<android.os.health.HealthStats: int getTimerCount(int)>
<android.os.health.HealthStats: java.util.Map getStats(int)>
<android.os.health.HealthStats: int getStatsKeyAt(int)>
<android.os.health.HealthStats: boolean hasMeasurement(int)>
<android.os.health.HealthStats: int getMeasurementKeyCount()>
<android.os.health.HealthStats: int getTimersKeyAt(int)>
<android.os.health.HealthStats: long getMeasurement(int)>
<android.os.health.HealthStats: long getTimerTime(int)>
<android.os.health.HealthStats: void <init>(android.os.Parcel)>
<android.os.health.HealthStats: int getTimerKeyAt(int)>
<android.os.health.HealthStats: boolean hasStats(int)>
<android.os.health.HealthStats: java.util.Map getTimers(int)>
<android.os.health.HealthStats: boolean hasTimers(int)>
<android.os.health.HealthStats: int getStatsKeyCount()>
<android.os.health.HealthStats: java.util.Map getMeasurements(int)>
<android.os.health.HealthStats: int getMeasurementKeyAt(int)>
<android.os.health.HealthStats: int getMeasurementsKeyAt(int)>
<android.os.health.HealthStats: int getTimersKeyCount()>
<java.util.Currency: java.lang.String getDisplayName()>
<java.util.Currency: java.util.Set getAvailableCurrencies()>
<java.util.Currency: java.lang.String getCurrencyCode()>
<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>
<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>
<java.util.Currency: java.lang.String getDisplayName(java.util.Locale)>
<java.util.Currency: java.lang.String getSymbol()>
<java.util.Currency: int getNumericCode()>
<java.util.Currency: java.util.Currency getInstance(java.lang.String)>
<java.util.Currency: int getDefaultFractionDigits()>
<android.content.SharedPreferences.Editor: boolean commit()>
<android.content.SharedPreferences.Editor: android.content.SharedPreferences.Editor putString(java.lang.String,java.lang.String)>
<android.content.SharedPreferences.Editor: android.content.SharedPreferences.Editor putStringSet(java.lang.String,java.util.Set)>
<android.content.SharedPreferences.Editor: android.content.SharedPreferences.Editor clear()>
<android.content.SharedPreferences.Editor: void apply()>
<android.content.SharedPreferences.Editor: android.content.SharedPreferences.Editor putFloat(java.lang.String,float)>
<android.content.SharedPreferences.Editor: android.content.SharedPreferences.Editor putLong(java.lang.String,long)>
<android.content.SharedPreferences.Editor: android.content.SharedPreferences.Editor putBoolean(java.lang.String,boolean)>
<android.content.SharedPreferences.Editor: android.content.SharedPreferences.Editor putInt(java.lang.String,int)>
<android.content.SharedPreferences.Editor: android.content.SharedPreferences.Editor remove(java.lang.String)>
<java.sql.SQLIntegrityConstraintViolationException: void <init>(String,String,int)>
<java.sql.SQLIntegrityConstraintViolationException: void <init>(String,String,Throwable)>
<java.sql.SQLIntegrityConstraintViolationException: void <init>()>
<java.sql.SQLIntegrityConstraintViolationException: void <init>(String)>
<java.sql.SQLIntegrityConstraintViolationException: void <init>(String,String,int,Throwable)>
<java.sql.SQLIntegrityConstraintViolationException: void <init>(String,String)>
<java.sql.SQLIntegrityConstraintViolationException: void <init>(String,Throwable)>
<java.sql.SQLIntegrityConstraintViolationException: void <init>(Throwable)>
<java.util.NavigableSet extends java.util.SortedSet: E floor(E)>
<java.util.NavigableSet extends java.util.SortedSet: E higher(E)>
<java.util.NavigableSet extends java.util.SortedSet: java.util.NavigableSet subSet(E,boolean,E,boolean)>
<java.util.NavigableSet extends java.util.SortedSet: E pollLast()>
<java.util.NavigableSet extends java.util.SortedSet: java.util.Iterator descendingIterator()>
<java.util.NavigableSet extends java.util.SortedSet: E ceiling(E)>
<java.util.NavigableSet extends java.util.SortedSet: E lower(E)>
<java.util.NavigableSet extends java.util.SortedSet: java.util.NavigableSet tailSet(E,boolean)>
<java.util.NavigableSet extends java.util.SortedSet: java.util.NavigableSet descendingSet()>
<java.util.NavigableSet extends java.util.SortedSet: java.util.NavigableSet headSet(E,boolean)>
<java.util.NavigableSet extends java.util.SortedSet: E pollFirst()>
<android.net.util.SocketUtils: java.net.SocketAddress makePacketSocketAddress(int,byte[])>
<android.net.util.SocketUtils: void bindSocketToInterface(java.io.FileDescriptor,java.lang.String)>
<android.net.util.SocketUtils: java.net.SocketAddress makeNetlinkSocketAddress(int,int)>
<android.net.util.SocketUtils: void closeSocket(java.io.FileDescriptor)>
<android.net.util.SocketUtils: java.net.SocketAddress makePacketSocketAddress(int,int)>
<java.util.LinkedHashMap: void <init>()>
<java.util.LinkedHashMap: void <init>(int,float)>
<java.util.LinkedHashMap: void <init>(int)>
<java.util.LinkedHashMap: void <init>(int,float,boolean)>
<java.util.LinkedHashMap: void <init>(java.util.Map)>
<java.util.LinkedHashMap: boolean removeEldestEntry(java.util.Map.Entry)>
<android.hardware.biometrics.BiometricManager: int canAuthenticate()>
<android.webkit.WebSettings: boolean getSavePassword()>
<android.webkit.WebSettings: int getDefaultFixedFontSize()>
<android.webkit.WebSettings: void setForceDark(int)>
<android.webkit.WebSettings: boolean getUseWebViewBackgroundForOverscrollBackground()>
<android.webkit.WebSettings: boolean getOffscreenPreRaster()>
<android.webkit.WebSettings: boolean getAcceptThirdPartyCookies()>
<android.webkit.WebSettings: void setVideoOverlayForEmbeddedEncryptedVideoEnabled(boolean)>
<android.webkit.WebSettings: void <init>()>
<android.webkit.WebSettings: boolean getUseWideViewPort()>
<android.webkit.WebSettings: java.lang.String getUserAgentString()>
<android.webkit.WebSettings: void setMixedContentMode(int)>
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>
<android.webkit.WebSettings: void setMinimumFontSize(int)>
<android.webkit.WebSettings: void setSupportMultipleWindows(boolean)>
<android.webkit.WebSettings: boolean getBlockNetworkLoads()>
<android.webkit.WebSettings: void setDefaultZoom(android.webkit.WebSettings.ZoomDensity)>
<android.webkit.WebSettings: void setCursiveFontFamily(java.lang.String)>
<android.webkit.WebSettings: void setMinimumLogicalFontSize(int)>
<android.webkit.WebSettings: java.lang.String getSerifFontFamily()>
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>
<android.webkit.WebSettings: void setTextSize(android.webkit.WebSettings.TextSize)>
<android.webkit.WebSettings: void setNavDump(boolean)>
<android.webkit.WebSettings: void setFixedFontFamily(java.lang.String)>
<android.webkit.WebSettings: boolean getLoadWithOverviewMode()>
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>
<android.webkit.WebSettings: boolean getAllowUniversalAccessFromFileURLs()>
<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)>
<android.webkit.WebSettings: boolean enableSmoothTransition()>
<android.webkit.WebSettings: java.lang.String getFixedFontFamily()>
<android.webkit.WebSettings: void setAppCachePath(java.lang.String)>
<android.webkit.WebSettings: int getUserAgent()>
<android.webkit.WebSettings: boolean getDatabaseEnabled()>
<android.webkit.WebSettings: boolean getMediaPlaybackRequiresUserGesture()>
<android.webkit.WebSettings: void setGeolocationDatabasePath(java.lang.String)>
<android.webkit.WebSettings: boolean supportMultipleWindows()>
<android.webkit.WebSettings: void setDisplayZoomControls(boolean)>
<android.webkit.WebSettings: void setRenderPriority(android.webkit.WebSettings.RenderPriority)>
<android.webkit.WebSettings: void setSansSerifFontFamily(java.lang.String)>
<android.webkit.WebSettings: boolean getLightTouchEnabled()>
<android.webkit.WebSettings: java.lang.String getFantasyFontFamily()>
<android.webkit.WebSettings: void setDefaultTextEncodingName(java.lang.String)>
<android.webkit.WebSettings: void setAppCacheMaxSize(long)>
<android.webkit.WebSettings: boolean getLoadsImagesAutomatically()>
<android.webkit.WebSettings: int getMixedContentMode()>
<android.webkit.WebSettings: boolean getSafeBrowsingEnabled()>
<android.webkit.WebSettings: void setPluginsEnabled(boolean)>
<android.webkit.WebSettings: java.lang.String getDefaultUserAgent(android.content.Context)>
<android.webkit.WebSettings: java.lang.String getSansSerifFontFamily()>
<android.webkit.WebSettings: boolean getDisplayZoomControls()>
<android.webkit.WebSettings: void setBlockNetworkImage(boolean)>
<android.webkit.WebSettings: java.lang.String getDatabasePath()>
<android.webkit.WebSettings: int getMinimumLogicalFontSize()>
<android.webkit.WebSettings: void setSupportZoom(boolean)>
<android.webkit.WebSettings: boolean getPluginsEnabled()>
<android.webkit.WebSettings: java.lang.String getDefaultTextEncodingName()>
<android.webkit.WebSettings: void setTextZoom(int)>
<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)>
<android.webkit.WebSettings: android.webkit.WebSettings.LayoutAlgorithm getLayoutAlgorithm()>
<android.webkit.WebSettings: boolean getVideoOverlayForEmbeddedEncryptedVideoEnabled()>
<android.webkit.WebSettings: boolean getJavaScriptCanOpenWindowsAutomatically()>
<android.webkit.WebSettings: void setNeedInitialFocus(boolean)>
<android.webkit.WebSettings: boolean getDomStorageEnabled()>
<android.webkit.WebSettings: void setMediaPlaybackRequiresUserGesture(boolean)>
<android.webkit.WebSettings: void setEnableSmoothTransition(boolean)>
<android.webkit.WebSettings: boolean getAllowContentAccess()>
<android.webkit.WebSettings: boolean getSaveFormData()>
<android.webkit.WebSettings: void setDatabasePath(java.lang.String)>
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)>
<android.webkit.WebSettings: boolean getBuiltInZoomControls()>
<android.webkit.WebSettings: void setUseWideViewPort(boolean)>
<android.webkit.WebSettings: void setSavePassword(boolean)>
<android.webkit.WebSettings: void setSaveFormData(boolean)>
<android.webkit.WebSettings: void setOffscreenPreRaster(boolean)>
<android.webkit.WebSettings: void setCacheMode(int)>
<android.webkit.WebSettings: boolean getAllowFileAccessFromFileURLs()>
<android.webkit.WebSettings: void setLoadsImagesAutomatically(boolean)>
<android.webkit.WebSettings: void setStandardFontFamily(java.lang.String)>
<android.webkit.WebSettings: void setDisabledActionModeMenuItems(int)>
<android.webkit.WebSettings: int getTextZoom()>
<android.webkit.WebSettings: android.webkit.WebSettings.ZoomDensity getDefaultZoom()>
<android.webkit.WebSettings: void setDefaultFixedFontSize(int)>
<android.webkit.WebSettings: int getDefaultFontSize()>
<android.webkit.WebSettings: void setUserAgent(int)>
<android.webkit.WebSettings: void setAllowContentAccess(boolean)>
<android.webkit.WebSettings: void setAllowUniversalAccessFromFileURLs(boolean)>
<android.webkit.WebSettings: void setLoadWithOverviewMode(boolean)>
<android.webkit.WebSettings: boolean supportZoom()>
<android.webkit.WebSettings: void setAcceptThirdPartyCookies(boolean)>
<android.webkit.WebSettings: int getMinimumFontSize()>
<android.webkit.WebSettings: boolean getBlockNetworkImage()>
<android.webkit.WebSettings: void setBlockNetworkLoads(boolean)>
<android.webkit.WebSettings: void setAllowFileAccessFromFileURLs(boolean)>
<android.webkit.WebSettings: boolean getJavaScriptEnabled()>
<android.webkit.WebSettings: void setUserAgentString(java.lang.String)>
<android.webkit.WebSettings: void setAppCacheEnabled(boolean)>
<android.webkit.WebSettings: int getForceDark()>
<android.webkit.WebSettings: void setFantasyFontFamily(java.lang.String)>
<android.webkit.WebSettings: void setPluginState(android.webkit.WebSettings.PluginState)>
<android.webkit.WebSettings: java.lang.String getCursiveFontFamily()>
<android.webkit.WebSettings: void setDatabaseEnabled(boolean)>
<android.webkit.WebSettings: android.webkit.WebSettings.TextSize getTextSize()>
<android.webkit.WebSettings: boolean getAllowFileAccess()>
<android.webkit.WebSettings: void setDefaultFontSize(int)>
<android.webkit.WebSettings: int getCacheMode()>
<android.webkit.WebSettings: void setLightTouchEnabled(boolean)>
<android.webkit.WebSettings: void setSafeBrowsingEnabled(boolean)>
<android.webkit.WebSettings: void setSerifFontFamily(java.lang.String)>
<android.webkit.WebSettings: void setAllowFileAccess(boolean)>
<android.webkit.WebSettings: int getDisabledActionModeMenuItems()>
<android.webkit.WebSettings: android.webkit.WebSettings.PluginState getPluginState()>
<android.webkit.WebSettings: java.lang.String getStandardFontFamily()>
<android.webkit.WebSettings: boolean getNavDump()>
<android.webkit.WebSettings: void setLayoutAlgorithm(android.webkit.WebSettings.LayoutAlgorithm)>
<java.time.chrono.ChronoPeriod extends java.time.temporal.TemporalAmount: int hashCode()>
<java.time.chrono.ChronoPeriod extends java.time.temporal.TemporalAmount: java.time.chrono.ChronoPeriod normalized()>
<java.time.chrono.ChronoPeriod extends java.time.temporal.TemporalAmount: boolean isNegative()>
<java.time.chrono.ChronoPeriod extends java.time.temporal.TemporalAmount: java.time.chrono.ChronoPeriod plus(java.time.temporal.TemporalAmount)>
<java.time.chrono.ChronoPeriod extends java.time.temporal.TemporalAmount: java.time.chrono.ChronoPeriod minus(java.time.temporal.TemporalAmount)>
<java.time.chrono.ChronoPeriod extends java.time.temporal.TemporalAmount: java.lang.String toString()>
<java.time.chrono.ChronoPeriod extends java.time.temporal.TemporalAmount: java.time.chrono.ChronoPeriod multipliedBy(int)>
<java.time.chrono.ChronoPeriod extends java.time.temporal.TemporalAmount: boolean isZero()>
<java.time.chrono.ChronoPeriod extends java.time.temporal.TemporalAmount: java.time.chrono.ChronoPeriod negated()>
<java.time.chrono.ChronoPeriod extends java.time.temporal.TemporalAmount: boolean equals(java.lang.Object)>
<java.time.chrono.ChronoPeriod extends java.time.temporal.TemporalAmount: java.time.chrono.ChronoPeriod between(java.time.chrono.ChronoLocalDate,java.time.chrono.ChronoLocalDate)>
<java.time.chrono.ChronoPeriod extends java.time.temporal.TemporalAmount: java.time.chrono.Chronology getChronology()>
<android.service.dreams.DreamService: void setContentView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.service.dreams.DreamService: boolean isScreenBright()>
<android.service.dreams.DreamService: android.os.IBinder onBind(android.content.Intent)>
<android.service.dreams.DreamService: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.service.dreams.DreamService: void onWindowAttributesChanged(android.view.WindowManager.LayoutParams)>
<android.service.dreams.DreamService: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.service.dreams.DreamService: void onContentChanged()>
<android.service.dreams.DreamService: void onPanelClosed(int,android.view.Menu)>
<android.service.dreams.DreamService: void finish()>
<android.service.dreams.DreamService: void onActionModeStarted(android.view.ActionMode)>
<android.service.dreams.DreamService: T requireViewById(@IdResint)>
<android.service.dreams.DreamService: void <init>()>
<android.service.dreams.DreamService: void onDreamingStarted()>
<android.service.dreams.DreamService: void onAttachedToWindow()>
<android.service.dreams.DreamService: void setInteractive(boolean)>
<android.service.dreams.DreamService: void setFullscreen(boolean)>
<android.service.dreams.DreamService: void wakeUp()>
<android.service.dreams.DreamService: T findViewById(@IdResint)>
<android.service.dreams.DreamService: boolean onSearchRequested()>
<android.service.dreams.DreamService: void setScreenBright(boolean)>
<android.service.dreams.DreamService: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.service.dreams.DreamService: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback,int)>
<android.service.dreams.DreamService: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback)>
<android.service.dreams.DreamService: void onActionModeFinished(android.view.ActionMode)>
<android.service.dreams.DreamService: void addContentView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.service.dreams.DreamService: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.service.dreams.DreamService: void onWakeUp()>
<android.service.dreams.DreamService: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<android.service.dreams.DreamService: boolean isFullscreen()>
<android.service.dreams.DreamService: boolean onCreatePanelMenu(int,android.view.Menu)>
<android.service.dreams.DreamService: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.service.dreams.DreamService: void onDetachedFromWindow()>
<android.service.dreams.DreamService: void onDreamingStopped()>
<android.service.dreams.DreamService: android.view.Window getWindow()>
<android.service.dreams.DreamService: boolean onMenuOpened(int,android.view.Menu)>
<android.service.dreams.DreamService: void setContentView(@LayoutResint)>
<android.service.dreams.DreamService: boolean onSearchRequested(android.view.SearchEvent)>
<android.service.dreams.DreamService: void onWindowFocusChanged(boolean)>
<android.service.dreams.DreamService: boolean onMenuItemSelected(int,android.view.MenuItem)>
<android.service.dreams.DreamService: boolean isInteractive()>
<android.service.dreams.DreamService: android.view.View onCreatePanelView(int)>
<android.service.dreams.DreamService: void setContentView(android.view.View)>
<android.service.dreams.DreamService: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.service.dreams.DreamService: android.view.WindowManager getWindowManager()>
<android.telephony.ims.feature.RcsFeature: void onFeatureReady()>
<android.telephony.ims.feature.RcsFeature: void changeEnabledCapabilities(android.telephony.ims.feature.CapabilityChangeRequest,android.telephony.ims.feature.ImsFeature.CapabilityCallbackProxy)>
<android.telephony.ims.feature.RcsFeature: void onFeatureRemoved()>
<android.telephony.ims.feature.RcsFeature: void <init>()>
<android.gesture.GestureStore: void load(java.io.InputStream)>
<android.gesture.GestureStore: void setOrientationStyle(int)>
<android.gesture.GestureStore: void save(java.io.OutputStream)>
<android.gesture.GestureStore: void addGesture(java.lang.String,android.gesture.Gesture)>
<android.gesture.GestureStore: int getSequenceType()>
<android.gesture.GestureStore: java.util.ArrayList getGestures(java.lang.String)>
<android.gesture.GestureStore: void removeGesture(java.lang.String,android.gesture.Gesture)>
<android.gesture.GestureStore: void removeEntry(java.lang.String)>
<android.gesture.GestureStore: void save(java.io.OutputStream,boolean)>
<android.gesture.GestureStore: boolean hasChanged()>
<android.gesture.GestureStore: void <init>()>
<android.gesture.GestureStore: void setSequenceType(int)>
<android.gesture.GestureStore: java.util.ArrayList recognize(android.gesture.Gesture)>
<android.gesture.GestureStore: int getOrientationStyle()>
<android.gesture.GestureStore: void load(java.io.InputStream,boolean)>
<android.gesture.GestureStore: java.util.Set getGestureEntries()>
<android.content.CursorLoader: void <init>(android.content.Context,android.net.Uri,String[],String,String[],String)>
<android.content.CursorLoader: java.lang.String getSelection()>
<android.content.CursorLoader: android.database.Cursor loadInBackground()>
<android.content.CursorLoader: void setProjection(java.lang.String[])>
<android.content.CursorLoader: void setUri(android.net.Uri)>
<android.content.CursorLoader: void <init>(android.content.Context)>
<android.content.CursorLoader: void setSortOrder(java.lang.String)>
<android.content.CursorLoader: android.net.Uri getUri()>
<android.content.CursorLoader: void onCanceled(android.database.Cursor)>
<android.content.CursorLoader: java.lang.String[] getProjection()>
<android.content.CursorLoader: java.lang.String getSortOrder()>
<android.content.CursorLoader: void setSelection(java.lang.String)>
<android.content.CursorLoader: java.lang.String[] getSelectionArgs()>
<android.content.CursorLoader: void setSelectionArgs(java.lang.String[])>
<android.content.CursorLoader: void deliverResult(android.database.Cursor)>
<android.provider.Contacts.Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.Contacts.Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.app.contentsuggestions.ClassificationsRequest: int describeContents()>
<android.app.contentsuggestions.ClassificationsRequest: void writeToParcel(android.os.Parcel,int)>
<android.app.contentsuggestions.ClassificationsRequest: android.os.Bundle getExtras()>
<android.app.contentsuggestions.ClassificationsRequest: java.util.List getSelections()>
<java.security.Identity: void <init>()>
<java.security.Identity: java.lang.String toString(boolean)>
<java.security.Identity: java.security.IdentityScope getScope()>
<java.security.Identity: void <init>(String)>
<java.security.Identity: java.lang.String getName()>
<java.security.Identity: boolean equals(java.lang.Object)>
<java.security.Identity: java.security.Certificate[] certificates()>
<java.security.Identity: void addCertificate(java.security.Certificate)>
<java.security.Identity: void setInfo(java.lang.String)>
<java.security.Identity: void <init>(String,java.security.IdentityScope)>
<java.security.Identity: java.lang.String getInfo()>
<java.security.Identity: void removeCertificate(java.security.Certificate)>
<java.security.Identity: java.security.PublicKey getPublicKey()>
<java.security.Identity: boolean identityEquals(java.security.Identity)>
<java.security.Identity: void setPublicKey(java.security.PublicKey)>
<android.media.AudioPresentation: java.util.Map getLabels()>
<android.media.AudioPresentation: boolean hasSpokenSubtitles()>
<android.media.AudioPresentation: boolean hasAudioDescription()>
<android.media.AudioPresentation: int getPresentationId()>
<android.media.AudioPresentation: int getMasteringIndication()>
<android.media.AudioPresentation: java.util.Locale getLocale()>
<android.media.AudioPresentation: int getProgramId()>
<android.media.AudioPresentation: boolean hasDialogueEnhancement()>
<android.content.ContentProvider.PipeDataWriter: void writeDataToPipe(android.os.ParcelFileDescriptor,android.net.Uri,java.lang.String,android.os.Bundle,T)>
<android.content.ComponentName: void <init>(android.content.Context,String)>
<android.content.ComponentName: android.content.ComponentName clone()>
<android.content.ComponentName: void <init>(String,String)>
<android.content.ComponentName: int describeContents()>
<android.content.ComponentName: java.lang.String getShortClassName()>
<android.content.ComponentName: void <init>(android.os.Parcel)>
<android.content.ComponentName: void writeToParcel(android.content.ComponentName,android.os.Parcel)>
<android.content.ComponentName: void writeToParcel(android.os.Parcel,int)>
<android.content.ComponentName: java.lang.String getClassName()>
<android.content.ComponentName: android.content.ComponentName readFromParcel(android.os.Parcel)>
<android.content.ComponentName: java.lang.String toShortString()>
<android.content.ComponentName: java.lang.String flattenToString()>
<android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>
<android.content.ComponentName: java.lang.String getPackageName()>
<android.content.ComponentName: android.content.ComponentName createRelative(java.lang.String,java.lang.String)>
<android.content.ComponentName: java.lang.String flattenToShortString()>
<android.content.ComponentName: void <init>(android.content.Context,Class)>
<android.content.ComponentName: int compareTo(android.content.ComponentName)>
<android.content.ComponentName: android.content.ComponentName createRelative(android.content.Context,java.lang.String)>
<java.util.function.ToIntFunction: int applyAsInt(T)>
<android.icu.text.SymbolTable: char[] lookup(java.lang.String)>
<android.icu.text.SymbolTable: java.lang.String parseReference(java.lang.String,java.text.ParsePosition,int)>
<android.icu.text.SymbolTable: android.icu.text.UnicodeMatcher lookupMatcher(int)>
<android.content.Intent.FilterComparison: void <init>(android.content.Intent)>
<android.content.Intent.FilterComparison: android.content.Intent getIntent()>
<android.hardware.usb.UsbPortStatus: int getSupportedRoleCombinations()>
<android.hardware.usb.UsbPortStatus: int getCurrentMode()>
<android.hardware.usb.UsbPortStatus: void writeToParcel(android.os.Parcel,int)>
<android.hardware.usb.UsbPortStatus: int getCurrentDataRole()>
<android.hardware.usb.UsbPortStatus: int describeContents()>
<android.hardware.usb.UsbPortStatus: boolean isConnected()>
<android.hardware.usb.UsbPortStatus: boolean isRoleCombinationSupported(int,int)>
<android.hardware.usb.UsbPortStatus: int getCurrentPowerRole()>
<java.util.prefs.Preferences: void putInt(java.lang.String,int)>
<java.util.prefs.Preferences: java.util.prefs.Preferences parent()>
<java.util.prefs.Preferences: void exportNode(java.io.OutputStream)>
<java.util.prefs.Preferences: void putBoolean(java.lang.String,boolean)>
<java.util.prefs.Preferences: java.util.prefs.Preferences systemRoot()>
<java.util.prefs.Preferences: void addNodeChangeListener(java.util.prefs.NodeChangeListener)>
<java.util.prefs.Preferences: void sync()>
<java.util.prefs.Preferences: int getInt(java.lang.String,int)>
<java.util.prefs.Preferences: void putLong(java.lang.String,long)>
<java.util.prefs.Preferences: java.util.prefs.Preferences node(java.lang.String)>
<java.util.prefs.Preferences: void removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener)>
<java.util.prefs.Preferences: void removeNodeChangeListener(java.util.prefs.NodeChangeListener)>
<java.util.prefs.Preferences: java.util.prefs.Preferences userNodeForPackage(java.lang.Class)>
<java.util.prefs.Preferences: void exportSubtree(java.io.OutputStream)>
<java.util.prefs.Preferences: boolean getBoolean(java.lang.String,boolean)>
<java.util.prefs.Preferences: float getFloat(java.lang.String,float)>
<java.util.prefs.Preferences: java.lang.String absolutePath()>
<java.util.prefs.Preferences: java.lang.String name()>
<java.util.prefs.Preferences: boolean nodeExists(java.lang.String)>
<java.util.prefs.Preferences: java.util.prefs.Preferences systemNodeForPackage(java.lang.Class)>
<java.util.prefs.Preferences: double getDouble(java.lang.String,double)>
<java.util.prefs.Preferences: byte[] getByteArray(java.lang.String,byte[])>
<java.util.prefs.Preferences: void putFloat(java.lang.String,float)>
<java.util.prefs.Preferences: java.lang.String toString()>
<java.util.prefs.Preferences: void clear()>
<java.util.prefs.Preferences: void put(java.lang.String,java.lang.String)>
<java.util.prefs.Preferences: void putDouble(java.lang.String,double)>
<java.util.prefs.Preferences: void flush()>
<java.util.prefs.Preferences: void importPreferences(java.io.InputStream)>
<java.util.prefs.Preferences: java.util.prefs.Preferences userRoot()>
<java.util.prefs.Preferences: void addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener)>
<java.util.prefs.Preferences: long getLong(java.lang.String,long)>
<java.util.prefs.Preferences: boolean isUserNode()>
<java.util.prefs.Preferences: void putByteArray(java.lang.String,byte[])>
<java.util.prefs.Preferences: void removeNode()>
<java.util.prefs.Preferences: java.lang.String[] childrenNames()>
<java.util.prefs.Preferences: java.lang.String get(java.lang.String,java.lang.String)>
<java.util.prefs.Preferences: void remove(java.lang.String)>
<java.util.prefs.Preferences: void <init>()>
<java.util.prefs.Preferences: java.lang.String[] keys()>
<android.database.StaleDataException: void <init>()>
<android.database.StaleDataException: void <init>(String)>
<android.telephony.CellIdentityNr: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellIdentityNr: java.lang.String getMccString()>
<android.telephony.CellIdentityNr: long getNci()>
<android.telephony.CellIdentityNr: int getNrarfcn()>
<android.telephony.CellIdentityNr: java.lang.String getMncString()>
<android.telephony.CellIdentityNr: int getPci()>
<android.telephony.CellIdentityNr: int getTac()>
<android.view.Display.Mode: int describeContents()>
<android.view.Display.Mode: float getRefreshRate()>
<android.view.Display.Mode: int getPhysicalHeight()>
<android.view.Display.Mode: int getModeId()>
<android.view.Display.Mode: int getPhysicalWidth()>
<android.view.Display.Mode: void writeToParcel(android.os.Parcel,int)>
<java.security.KeyStore.Entry: java.util.Set getAttributes()>
<javax.security.auth.AuthPermission: void <init>(String)>
<javax.security.auth.AuthPermission: void <init>(String,String)>
<android.telephony.ims.feature.CapabilityChangeRequest.CapabilityPair: int getCapability()>
<android.telephony.ims.feature.CapabilityChangeRequest.CapabilityPair: void <init>(@android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.MmTelCapability int,int)>
<android.telephony.ims.feature.CapabilityChangeRequest.CapabilityPair: int getRadioTech()>
<android.media.audiofx.DynamicsProcessing.Limiter: float getRatio()>
<android.media.audiofx.DynamicsProcessing.Limiter: float getAttackTime()>
<android.media.audiofx.DynamicsProcessing.Limiter: void setLinkGroup(int)>
<android.media.audiofx.DynamicsProcessing.Limiter: void setThreshold(float)>
<android.media.audiofx.DynamicsProcessing.Limiter: void setReleaseTime(float)>
<android.media.audiofx.DynamicsProcessing.Limiter: int getLinkGroup()>
<android.media.audiofx.DynamicsProcessing.Limiter: void setRatio(float)>
<android.media.audiofx.DynamicsProcessing.Limiter: void setAttackTime(float)>
<android.media.audiofx.DynamicsProcessing.Limiter: void <init>(boolean,boolean,int,float,float,float,float,float)>
<android.media.audiofx.DynamicsProcessing.Limiter: void setPostGain(float)>
<android.media.audiofx.DynamicsProcessing.Limiter: void <init>(android.media.audiofx.DynamicsProcessing.Limiter)>
<android.media.audiofx.DynamicsProcessing.Limiter: float getPostGain()>
<android.media.audiofx.DynamicsProcessing.Limiter: float getReleaseTime()>
<android.media.audiofx.DynamicsProcessing.Limiter: float getThreshold()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isHeldExclusively()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void acquireSharedInterruptibly(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.Collection getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean tryReleaseShared(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void <init>()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void acquire(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.Thread getFirstQueuedThread()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean tryAcquireSharedNanos(int,long)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasContended()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.Collection getSharedQueuedThreads()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean tryAcquire(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int tryAcquireShared(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getState()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void acquireShared(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean tryRelease(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void setState(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean releaseShared(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.Collection getExclusiveQueuedThreads()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasQueuedThreads()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasQueuedPredecessors()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean owns(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetState(int,int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.Collection getQueuedThreads()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isQueued(java.lang.Thread)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void acquireInterruptibly(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean release(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean tryAcquireNanos(int,long)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getQueueLength()>
<android.media.MediaRouter.RouteGroup: void setIconResource(@DrawableResint)>
<android.media.MediaRouter.RouteGroup: void setIconDrawable(android.graphics.drawable.Drawable)>
<android.media.MediaRouter.RouteGroup: void addRoute(android.media.MediaRouter.RouteInfo)>
<android.media.MediaRouter.RouteGroup: int getRouteCount()>
<android.media.MediaRouter.RouteGroup: void removeRoute(int)>
<android.media.MediaRouter.RouteGroup: void removeRoute(android.media.MediaRouter.RouteInfo)>
<android.media.MediaRouter.RouteGroup: android.media.MediaRouter.RouteInfo getRouteAt(int)>
<android.media.MediaRouter.RouteGroup: void addRoute(android.media.MediaRouter.RouteInfo,int)>
<android.net.ConnectivityManager.NetworkCallback: void onLinkPropertiesChanged(android.net.Network,android.net.LinkProperties)>
<android.net.ConnectivityManager.NetworkCallback: void <init>()>
<android.net.ConnectivityManager.NetworkCallback: void onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities)>
<android.net.ConnectivityManager.NetworkCallback: void onAvailable(android.net.Network)>
<android.net.ConnectivityManager.NetworkCallback: void onBlockedStatusChanged(android.net.Network,boolean)>
<android.net.ConnectivityManager.NetworkCallback: void onLost(android.net.Network)>
<android.net.ConnectivityManager.NetworkCallback: void onUnavailable()>
<android.net.ConnectivityManager.NetworkCallback: void onLosing(android.net.Network,int)>
<java.lang.reflect.Array: void setLong(java.lang.Object,int,long)>
<java.lang.reflect.Array: byte getByte(java.lang.Object,int)>
<java.lang.reflect.Array: void setShort(java.lang.Object,int,short)>
<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>
<java.lang.reflect.Array: double getDouble(java.lang.Object,int)>
<java.lang.reflect.Array: void setBoolean(java.lang.Object,int,boolean)>
<java.lang.reflect.Array: void setChar(java.lang.Object,int,char)>
<java.lang.reflect.Array: void setByte(java.lang.Object,int,byte)>
<java.lang.reflect.Array: float getFloat(java.lang.Object,int)>
<java.lang.reflect.Array: int getLength(java.lang.Object)>
<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>
<java.lang.reflect.Array: void setInt(java.lang.Object,int,int)>
<java.lang.reflect.Array: char getChar(java.lang.Object,int)>
<java.lang.reflect.Array: long getLong(java.lang.Object,int)>
<java.lang.reflect.Array: int getInt(java.lang.Object,int)>
<java.lang.reflect.Array: boolean getBoolean(java.lang.Object,int)>
<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int...)>
<java.lang.reflect.Array: void setDouble(java.lang.Object,int,double)>
<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
<java.lang.reflect.Array: void setFloat(java.lang.Object,int,float)>
<java.lang.reflect.Array: short getShort(java.lang.Object,int)>
<javax.net.ssl.SNIServerName: int getType()>
<javax.net.ssl.SNIServerName: void <init>(int,byte[])>
<javax.net.ssl.SNIServerName: byte[] getEncoded()>
<android.app.ActivityView.StateCallback: void onActivityViewReady(android.app.ActivityView)>
<android.app.ActivityView.StateCallback: void onTaskMovedToFront(int)>
<android.app.ActivityView.StateCallback: void onTaskCreated(int,android.content.ComponentName)>
<android.app.ActivityView.StateCallback: void <init>()>
<android.app.ActivityView.StateCallback: void onActivityViewDestroyed(android.app.ActivityView)>
<android.app.ActivityView.StateCallback: void onTaskRemovalStarted(int)>
<android.widget.NumberPicker.OnScrollListener: void onScrollStateChange(android.widget.NumberPicker,int)>
<android.hardware.SensorEventListener2 extends android.hardware.SensorEventListener: void onFlushCompleted(android.hardware.Sensor)>
<android.icu.text.MessageFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>
<android.icu.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object...)>
<android.icu.text.MessageFormat: void applyPattern(java.lang.String)>
<android.icu.text.MessageFormat: java.text.Format[] getFormatsByArgumentIndex()>
<android.icu.text.MessageFormat: void setFormatByArgumentName(java.lang.String,java.text.Format)>
<android.icu.text.MessageFormat: java.lang.StringBuffer format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.MessageFormat: void setFormats(java.text.Format[])>
<android.icu.text.MessageFormat: java.text.Format[] getFormats()>
<android.icu.text.MessageFormat: boolean usesNamedArguments()>
<android.icu.text.MessageFormat: android.icu.text.MessagePattern.ApostropheMode getApostropheMode()>
<android.icu.text.MessageFormat: java.lang.String autoQuoteApostrophe(java.lang.String)>
<android.icu.text.MessageFormat: java.text.Format getFormatByArgumentName(java.lang.String)>
<android.icu.text.MessageFormat: java.lang.StringBuffer format(java.util.Map,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.MessageFormat: void setFormatsByArgumentName(java.util.Map)>
<android.icu.text.MessageFormat: java.lang.Object[] parse(java.lang.String)>
<android.icu.text.MessageFormat: void <init>(String)>
<android.icu.text.MessageFormat: java.lang.Object[] parse(java.lang.String,java.text.ParsePosition)>
<android.icu.text.MessageFormat: java.util.Set getArgumentNames()>
<android.icu.text.MessageFormat: java.util.Locale getLocale()>
<android.icu.text.MessageFormat: void setFormat(int,java.text.Format)>
<android.icu.text.MessageFormat: void setFormatsByArgumentIndex(java.text.Format[])>
<android.icu.text.MessageFormat: java.lang.String toPattern()>
<android.icu.text.MessageFormat: void applyPattern(java.lang.String,android.icu.text.MessagePattern.ApostropheMode)>
<android.icu.text.MessageFormat: java.util.Map parseToMap(java.lang.String,java.text.ParsePosition)>
<android.icu.text.MessageFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.MessageFormat: java.util.Map parseToMap(java.lang.String)>
<android.icu.text.MessageFormat: java.lang.String format(java.lang.String,java.util.Map)>
<android.icu.text.MessageFormat: void setFormatByArgumentIndex(int,java.text.Format)>
<android.icu.text.MessageFormat: android.icu.util.ULocale getULocale()>
<android.icu.text.MessageFormat: void setLocale(java.util.Locale)>
<android.icu.text.MessageFormat: void <init>(String,java.util.Locale)>
<android.icu.text.MessageFormat: void <init>(String,android.icu.util.ULocale)>
<android.icu.text.MessageFormat: void setLocale(android.icu.util.ULocale)>
<java.util.Scanner: boolean hasNext()>
<java.util.Scanner: boolean hasNext(java.lang.String)>
<java.util.Scanner: boolean hasNextBigInteger()>
<java.util.Scanner: java.lang.String findInLine(java.lang.String)>
<java.util.Scanner: void close()>
<java.util.Scanner: boolean hasNextShort()>
<java.util.Scanner: java.math.BigInteger nextBigInteger()>
<java.util.Scanner: void <init>(java.nio.file.Path,String)>
<java.util.Scanner: java.lang.String next(java.util.regex.Pattern)>
<java.util.Scanner: double nextDouble()>
<java.util.Scanner: java.lang.String nextLine()>
<java.util.Scanner: void <init>(java.io.File)>
<java.util.Scanner: boolean hasNextBigInteger(int)>
<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>
<java.util.Scanner: void <init>(java.io.File,String)>
<java.util.Scanner: boolean hasNextBoolean()>
<java.util.Scanner: java.util.Scanner skip(java.lang.String)>
<java.util.Scanner: short nextShort()>
<java.util.Scanner: boolean hasNextLine()>
<java.util.Scanner: int nextInt()>
<java.util.Scanner: java.lang.String findWithinHorizon(java.lang.String,int)>
<java.util.Scanner: boolean hasNext(java.util.regex.Pattern)>
<java.util.Scanner: void <init>(java.io.InputStream,String)>
<java.util.Scanner: java.lang.String next(java.lang.String)>
<java.util.Scanner: java.util.Locale locale()>
<java.util.Scanner: long nextLong()>
<java.util.Scanner: boolean hasNextLong(int)>
<java.util.Scanner: java.util.Scanner reset()>
<java.util.Scanner: java.util.Scanner useLocale(java.util.Locale)>
<java.util.Scanner: boolean hasNextBigDecimal()>
<java.util.Scanner: boolean hasNextInt()>
<java.util.Scanner: java.util.Scanner skip(java.util.regex.Pattern)>
<java.util.Scanner: java.io.IOException ioException()>
<java.util.Scanner: java.lang.String findInLine(java.util.regex.Pattern)>
<java.util.Scanner: long nextLong(int)>
<java.util.Scanner: java.lang.String findWithinHorizon(java.util.regex.Pattern,int)>
<java.util.Scanner: boolean hasNextDouble()>
<java.util.Scanner: byte nextByte()>
<java.util.Scanner: void <init>(Readable)>
<java.util.Scanner: float nextFloat()>
<java.util.Scanner: void <init>(java.nio.file.Path)>
<java.util.Scanner: java.lang.String next()>
<java.util.Scanner: boolean hasNextInt(int)>
<java.util.Scanner: int nextInt(int)>
<java.util.Scanner: void <init>(String)>
<java.util.Scanner: short nextShort(int)>
<java.util.Scanner: java.math.BigDecimal nextBigDecimal()>
<java.util.Scanner: void <init>(java.nio.channels.ReadableByteChannel)>
<java.util.Scanner: java.util.regex.Pattern delimiter()>
<java.util.Scanner: java.math.BigInteger nextBigInteger(int)>
<java.util.Scanner: java.util.regex.MatchResult match()>
<java.util.Scanner: void <init>(java.io.InputStream)>
<java.util.Scanner: byte nextByte(int)>
<java.util.Scanner: boolean hasNextLong()>
<java.util.Scanner: boolean hasNextByte()>
<java.util.Scanner: boolean hasNextFloat()>
<java.util.Scanner: java.util.Scanner useRadix(int)>
<java.util.Scanner: boolean hasNextByte(int)>
<java.util.Scanner: java.util.Scanner useDelimiter(java.util.regex.Pattern)>
<java.util.Scanner: boolean hasNextShort(int)>
<java.util.Scanner: boolean nextBoolean()>
<java.util.Scanner: void <init>(java.nio.channels.ReadableByteChannel,String)>
<java.util.Scanner: int radix()>
<android.drm.DrmInfoRequest: void put(java.lang.String,java.lang.Object)>
<android.drm.DrmInfoRequest: java.lang.String getMimeType()>
<android.drm.DrmInfoRequest: java.lang.Object get(java.lang.String)>
<android.drm.DrmInfoRequest: void <init>(int,String)>
<android.drm.DrmInfoRequest: java.util.Iterator keyIterator()>
<android.drm.DrmInfoRequest: int getInfoType()>
<android.drm.DrmInfoRequest: java.util.Iterator iterator()>
<android.graphics.DiscretePathEffect: void <init>(float,float)>
<android.renderscript.Sampler.Builder: void setWrapS(android.renderscript.Sampler.Value)>
<android.renderscript.Sampler.Builder: void setMagnification(android.renderscript.Sampler.Value)>
<android.renderscript.Sampler.Builder: android.renderscript.Sampler create()>
<android.renderscript.Sampler.Builder: void setAnisotropy(float)>
<android.renderscript.Sampler.Builder: void setWrapT(android.renderscript.Sampler.Value)>
<android.renderscript.Sampler.Builder: void <init>(android.renderscript.RenderScript)>
<android.renderscript.Sampler.Builder: void setMinification(android.renderscript.Sampler.Value)>
<android.media.session.MediaSession: void <init>(android.content.Context,String,android.os.Bundle)>
<android.media.session.MediaSession: void setMetadata(android.media.MediaMetadata)>
<android.media.session.MediaSession: void setCallback(android.media.session.MediaSession.Callback)>
<android.media.session.MediaSession: void setQueueTitle(CharSequence)>
<android.media.session.MediaSession: void setCallback(android.media.session.MediaSession.Callback,android.os.Handler)>
<android.media.session.MediaSession: android.media.session.MediaSessionManager.RemoteUserInfo getCurrentControllerInfo()>
<android.media.session.MediaSession: void setPlaybackState(android.media.session.PlaybackState)>
<android.media.session.MediaSession: void setPlaybackToLocal(android.media.AudioAttributes)>
<android.media.session.MediaSession: void setPlaybackToRemote(android.media.VolumeProvider)>
<android.media.session.MediaSession: android.media.session.MediaSession.Token getSessionToken()>
<android.media.session.MediaSession: void setMediaButtonReceiver(android.app.PendingIntent)>
<android.media.session.MediaSession: void release()>
<android.media.session.MediaSession: void setActive(boolean)>
<android.media.session.MediaSession: void setFlags(int)>
<android.media.session.MediaSession: void setSessionActivity(android.app.PendingIntent)>
<android.media.session.MediaSession: void sendSessionEvent(java.lang.String,android.os.Bundle)>
<android.media.session.MediaSession: void setRatingType(int)>
<android.media.session.MediaSession: boolean isActive()>
<android.media.session.MediaSession: void <init>(android.content.Context,String)>
<android.media.session.MediaSession: void setExtras(android.os.Bundle)>
<android.media.session.MediaSession: android.media.session.MediaController getController()>
<android.media.session.MediaSession: void setQueue(java.util.List)>
<android.graphics.ComposeShader: void <init>(android.graphics.Shader,android.graphics.Shader,android.graphics.BlendMode)>
<android.graphics.ComposeShader: void <init>(android.graphics.Shader,android.graphics.Shader,android.graphics.PorterDuff.Mode)>
<android.graphics.ComposeShader: void <init>(android.graphics.Shader,android.graphics.Shader,android.graphics.Xfermode)>
<android.widget.AdapterView.AdapterContextMenuInfo: void <init>(android.view.View,int,long)>
<android.security.keystore.KeyProtection: long getBoundToSpecificSecureUserId()>
<android.security.keystore.KeyProtection: java.lang.String[] getBlockModes()>
<android.security.keystore.KeyProtection: int getUserAuthenticationValidityDurationSeconds()>
<android.security.keystore.KeyProtection: java.lang.String[] getEncryptionPaddings()>
<android.security.keystore.KeyProtection: boolean isUserAuthenticationRequired()>
<android.security.keystore.KeyProtection: boolean isUserConfirmationRequired()>
<android.security.keystore.KeyProtection: boolean isUserPresenceRequired()>
<android.security.keystore.KeyProtection: java.util.Date getKeyValidityForConsumptionEnd()>
<android.security.keystore.KeyProtection: java.util.Date getKeyValidityForOriginationEnd()>
<android.security.keystore.KeyProtection: java.lang.String[] getDigests()>
<android.security.keystore.KeyProtection: int getPurposes()>
<android.security.keystore.KeyProtection: boolean isRandomizedEncryptionRequired()>
<android.security.keystore.KeyProtection: boolean isUnlockedDeviceRequired()>
<android.security.keystore.KeyProtection: java.lang.String[] getSignaturePaddings()>
<android.security.keystore.KeyProtection: boolean isUserAuthenticationValidWhileOnBody()>
<android.security.keystore.KeyProtection: boolean isInvalidatedByBiometricEnrollment()>
<android.security.keystore.KeyProtection: boolean isDigestsSpecified()>
<android.security.keystore.KeyProtection: java.util.Date getKeyValidityStart()>
<android.content.res.AssetFileDescriptor.AutoCloseOutputStream: void <init>(android.content.res.AssetFileDescriptor)>
<android.graphics.drawable.shapes.PathShape: void <init>(android.graphics.Path,float,float)>
<android.graphics.drawable.shapes.PathShape: android.graphics.drawable.shapes.PathShape clone()>
<android.graphics.drawable.shapes.PathShape: void draw(android.graphics.Canvas,android.graphics.Paint)>
<android.widget.ExpandableListView.OnGroupExpandListener: void onGroupExpand(int)>
<java.time.chrono.JapaneseEra: java.time.chrono.JapaneseEra valueOf(java.lang.String)>
<java.time.chrono.JapaneseEra: java.time.chrono.JapaneseEra[] values()>
<java.time.chrono.JapaneseEra: int getValue()>
<java.time.chrono.JapaneseEra: java.time.chrono.JapaneseEra of(int)>
<android.content.pm.permission.RuntimePermissionPresentationInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.permission.RuntimePermissionPresentationInfo: int describeContents()>
<android.content.pm.permission.RuntimePermissionPresentationInfo: CharSequence getLabel()>
<android.content.pm.permission.RuntimePermissionPresentationInfo: void <init>(CharSequence,boolean,boolean)>
<android.content.pm.permission.RuntimePermissionPresentationInfo: boolean isGranted()>
<android.content.pm.permission.RuntimePermissionPresentationInfo: boolean isStandard()>
<android.net.RouteInfo: void <init>(android.net.IpPrefix,java.net.InetAddress,String,int)>
<android.net.RouteInfo: java.lang.String getInterface()>
<android.net.RouteInfo: boolean hasGateway()>
<android.net.RouteInfo: boolean matches(java.net.InetAddress)>
<android.net.RouteInfo: android.net.IpPrefix getDestination()>
<android.net.RouteInfo: java.net.InetAddress getGateway()>
<android.net.RouteInfo: int getType()>
<android.net.RouteInfo: void writeToParcel(android.os.Parcel,int)>
<android.net.RouteInfo: int describeContents()>
<android.net.RouteInfo: boolean isDefaultRoute()>
<android.hardware.camera2.CameraCharacteristics: java.util.List getKeysNeedingPermission()>
<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableCaptureRequestKeys()>
<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableSessionKeys()>
<android.hardware.camera2.CameraCharacteristics: java.util.Set getPhysicalCameraIds()>
<android.hardware.camera2.CameraCharacteristics: T get(android.hardware.camera2.CameraCharacteristics.Key)>
<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableCaptureResultKeys()>
<android.hardware.camera2.CameraCharacteristics: java.util.List getKeys()>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.params.RecommendedStreamConfigurationMap getRecommendedStreamConfigurationMap(int)>
<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailablePhysicalCameraRequestKeys()>
<android.telephony.mbms.vendor.MbmsGroupCallServiceBase: void onAppCallbackDied(int,int)>
<android.telephony.mbms.vendor.MbmsGroupCallServiceBase: android.os.IBinder onBind(android.content.Intent)>
<android.telephony.mbms.vendor.MbmsGroupCallServiceBase: void updateGroupCall(int,long,java.util.List,java.util.List)>
<android.telephony.mbms.vendor.MbmsGroupCallServiceBase: int initialize(android.telephony.mbms.MbmsGroupCallSessionCallback,int)>
<android.telephony.mbms.vendor.MbmsGroupCallServiceBase: int startGroupCall(int,long,java.util.List,java.util.List,android.telephony.mbms.GroupCallCallback)>
<android.telephony.mbms.vendor.MbmsGroupCallServiceBase: void <init>()>
<android.telephony.mbms.vendor.MbmsGroupCallServiceBase: void stopGroupCall(int,long)>
<android.telephony.mbms.vendor.MbmsGroupCallServiceBase: void dispose(int)>
<android.app.usage.EventStats: void <init>(android.app.usage.EventStats)>
<android.app.usage.EventStats: long getTotalTime()>
<android.app.usage.EventStats: void add(android.app.usage.EventStats)>
<android.app.usage.EventStats: long getLastEventTime()>
<android.app.usage.EventStats: int getEventType()>
<android.app.usage.EventStats: long getLastTimeStamp()>
<android.app.usage.EventStats: void writeToParcel(android.os.Parcel,int)>
<android.app.usage.EventStats: int describeContents()>
<android.app.usage.EventStats: int getCount()>
<android.app.usage.EventStats: long getFirstTimeStamp()>
<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(Runnable)>
<javax.net.ssl.SSLSessionContext: int getSessionCacheSize()>
<javax.net.ssl.SSLSessionContext: void setSessionCacheSize(int)>
<javax.net.ssl.SSLSessionContext: javax.net.ssl.SSLSession getSession(byte[])>
<javax.net.ssl.SSLSessionContext: java.util.Enumeration getIds()>
<javax.net.ssl.SSLSessionContext: int getSessionTimeout()>
<javax.net.ssl.SSLSessionContext: void setSessionTimeout(int)>
<android.service.contentcapture.ActivityEvent: int describeContents()>
<android.service.contentcapture.ActivityEvent: void writeToParcel(android.os.Parcel,int)>
<android.service.contentcapture.ActivityEvent: android.content.ComponentName getComponentName()>
<android.service.contentcapture.ActivityEvent: int getEventType()>
<java.util.SortedMap extends java.util.Map: java.util.Comparator comparator()>
<java.util.SortedMap extends java.util.Map: java.util.SortedMap subMap(K,K)>
<java.util.SortedMap extends java.util.Map: K firstKey()>
<java.util.SortedMap extends java.util.Map: java.util.SortedMap headMap(K)>
<java.util.SortedMap extends java.util.Map: java.util.SortedMap tailMap(K)>
<java.util.SortedMap extends java.util.Map: K lastKey()>
<android.telecom.CallScreeningService.CallResponse: boolean getDisallowCall()>
<android.telecom.CallScreeningService.CallResponse: boolean getSkipCallLog()>
<android.telecom.CallScreeningService.CallResponse: boolean getSilenceCall()>
<android.telecom.CallScreeningService.CallResponse: boolean getSkipNotification()>
<android.telecom.CallScreeningService.CallResponse: boolean getRejectCall()>
<android.service.autofill.FillEventHistory: android.os.Bundle getClientState()>
<android.service.autofill.FillEventHistory: int describeContents()>
<android.service.autofill.FillEventHistory: java.util.List getEvents()>
<android.service.autofill.FillEventHistory: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.p2p.WifiP2pManager.Channel: void close()>
<android.printservice.recommendation.RecommendationService: void onDisconnected()>
<android.printservice.recommendation.RecommendationService: android.os.IBinder onBind(android.content.Intent)>
<android.printservice.recommendation.RecommendationService: void <init>()>
<android.printservice.recommendation.RecommendationService: void updateRecommendations(java.util.List)>
<android.printservice.recommendation.RecommendationService: void onConnected()>
<java.security.spec.EllipticCurve: byte[] getSeed()>
<java.security.spec.EllipticCurve: void <init>(java.security.spec.ECField,java.math.BigInteger,java.math.BigInteger,byte[])>
<java.security.spec.EllipticCurve: java.math.BigInteger getB()>
<java.security.spec.EllipticCurve: java.math.BigInteger getA()>
<java.security.spec.EllipticCurve: java.security.spec.ECField getField()>
<java.security.spec.EllipticCurve: void <init>(java.security.spec.ECField,java.math.BigInteger,java.math.BigInteger)>
<android.telephony.gsm.SmsMessage.SubmitPdu: void <init>()>
<android.view.View.OnLayoutChangeListener: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)>
<android.hardware.camera2.CaptureResult: long getFrameNumber()>
<android.hardware.camera2.CaptureResult: java.util.List getKeys()>
<android.hardware.camera2.CaptureResult: T get(android.hardware.camera2.CaptureResult.Key)>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureRequest getRequest()>
<android.hardware.camera2.CaptureResult: int getSequenceId()>
<android.app.Application: void registerOnProvideAssistDataListener(android.app.Application.OnProvideAssistDataListener)>
<android.app.Application: void <init>()>
<android.app.Application: void registerActivityLifecycleCallbacks(android.app.Application.ActivityLifecycleCallbacks)>
<android.app.Application: void unregisterActivityLifecycleCallbacks(android.app.Application.ActivityLifecycleCallbacks)>
<android.app.Application: void onCreate()>
<android.app.Application: void onConfigurationChanged(android.content.res.Configuration)>
<android.app.Application: void onTrimMemory(int)>
<android.app.Application: void onTerminate()>
<android.app.Application: java.lang.String getProcessName()>
<android.app.Application: void unregisterOnProvideAssistDataListener(android.app.Application.OnProvideAssistDataListener)>
<android.app.Application: void onLowMemory()>
<java.lang.IllegalAccessError: void <init>()>
<java.lang.IllegalAccessError: void <init>(String)>
<org.w3c.dom.Element extends org.w3c.dom.Node: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)>
<org.w3c.dom.Element extends org.w3c.dom.Node: org.w3c.dom.TypeInfo getSchemaTypeInfo()>
<org.w3c.dom.Element extends org.w3c.dom.Node: void setIdAttributeNS(java.lang.String,java.lang.String,boolean)>
<org.w3c.dom.Element extends org.w3c.dom.Node: java.lang.String getAttribute(java.lang.String)>
<org.w3c.dom.Element extends org.w3c.dom.Node: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>
<org.w3c.dom.Element extends org.w3c.dom.Node: org.w3c.dom.Attr removeAttributeNode(org.w3c.dom.Attr)>
<org.w3c.dom.Element extends org.w3c.dom.Node: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>
<org.w3c.dom.Element extends org.w3c.dom.Node: org.w3c.dom.Attr getAttributeNode(java.lang.String)>
<org.w3c.dom.Element extends org.w3c.dom.Node: void setIdAttribute(java.lang.String,boolean)>
<org.w3c.dom.Element extends org.w3c.dom.Node: void removeAttributeNS(java.lang.String,java.lang.String)>
<org.w3c.dom.Element extends org.w3c.dom.Node: boolean hasAttributeNS(java.lang.String,java.lang.String)>
<org.w3c.dom.Element extends org.w3c.dom.Node: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)>
<org.w3c.dom.Element extends org.w3c.dom.Node: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>
<org.w3c.dom.Element extends org.w3c.dom.Node: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>
<org.w3c.dom.Element extends org.w3c.dom.Node: void setIdAttributeNode(org.w3c.dom.Attr,boolean)>
<org.w3c.dom.Element extends org.w3c.dom.Node: void setAttribute(java.lang.String,java.lang.String)>
<org.w3c.dom.Element extends org.w3c.dom.Node: org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)>
<org.w3c.dom.Element extends org.w3c.dom.Node: java.lang.String getTagName()>
<org.w3c.dom.Element extends org.w3c.dom.Node: boolean hasAttribute(java.lang.String)>
<org.w3c.dom.Element extends org.w3c.dom.Node: void removeAttribute(java.lang.String)>
<android.telephony.euicc.DownloadableSubscription.Builder: android.telephony.euicc.DownloadableSubscription.Builder setAccessRules(java.util.List)>
<android.telephony.euicc.DownloadableSubscription.Builder: android.telephony.euicc.DownloadableSubscription.Builder setConfirmationCode(java.lang.String)>
<android.telephony.euicc.DownloadableSubscription.Builder: android.telephony.euicc.DownloadableSubscription.Builder setEncodedActivationCode(java.lang.String)>
<android.telephony.euicc.DownloadableSubscription.Builder: android.telephony.euicc.DownloadableSubscription.Builder setCarrierName(java.lang.String)>
<android.telephony.euicc.DownloadableSubscription.Builder: void <init>()>
<android.telephony.euicc.DownloadableSubscription.Builder: void <init>(android.telephony.euicc.DownloadableSubscription)>
<android.telephony.euicc.DownloadableSubscription.Builder: android.telephony.euicc.DownloadableSubscription build()>
<android.view.KeyEvent.DispatcherState: boolean isTracking(android.view.KeyEvent)>
<android.view.KeyEvent.DispatcherState: void reset()>
<android.view.KeyEvent.DispatcherState: void <init>()>
<android.view.KeyEvent.DispatcherState: void reset(java.lang.Object)>
<android.view.KeyEvent.DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)>
<android.view.KeyEvent.DispatcherState: void performedLongPress(android.view.KeyEvent)>
<android.view.KeyEvent.DispatcherState: void handleUpEvent(android.view.KeyEvent)>
<android.provider.MediaStore.Images.Media: void <init>()>
<android.provider.MediaStore.Images.Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.provider.MediaStore.Images.Media: android.graphics.Bitmap getBitmap(android.content.ContentResolver,android.net.Uri)>
<android.provider.MediaStore.Images.Media: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore.Images.Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])>
<android.provider.MediaStore.Images.Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>
<android.provider.MediaStore.Images.Media: java.lang.String insertImage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.MediaStore.Images.Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)>
<java.lang.ArrayStoreException: void <init>()>
<java.lang.ArrayStoreException: void <init>(String)>
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: void flushGnssBatch()>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
<android.location.LocationManager: boolean registerGnssStatusCallback(android.location.GnssStatus.Callback)>
<android.location.LocationManager: java.lang.String getExtraLocationControllerPackage()>
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)>
<android.location.LocationManager: boolean isExtraLocationControllerPackageEnabled()>
<android.location.LocationManager: java.util.List getAllProviders()>
<android.location.LocationManager: void unregisterGnssNavigationMessageCallback(android.location.GnssNavigationMessage.Callback)>
<android.location.LocationManager: boolean unregisterGnssBatchedLocationCallback(android.location.BatchedLocationCallback)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: java.lang.String[] getIgnoreSettingsWhitelist()>
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void removeTestProvider(java.lang.String)>
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>
<android.location.LocationManager: void injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections)>
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)>
<android.location.LocationManager: boolean registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage.Callback)>
<android.location.LocationManager: void removeNmeaListener(android.location.OnNmeaMessageListener)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>
<android.location.LocationManager: void setExtraLocationControllerPackage(java.lang.String)>
<android.location.LocationManager: boolean isLocationEnabled()>
<android.location.LocationManager: void unregisterGnssMeasurementsCallback(android.location.GnssMeasurementsEvent.Callback)>
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus.Listener)>
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)>
<android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)>
<android.location.LocationManager: int getGnssYearOfHardware()>
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)>
<android.location.LocationManager: boolean isLocationEnabledForUser(android.os.UserHandle)>
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.LocationManager: void setExtraLocationControllerPackageEnabled(boolean)>
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>
<android.location.LocationManager: boolean isProviderEnabledForUser(java.lang.String,android.os.UserHandle)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>
<android.location.LocationManager: boolean registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage.Callback,android.os.Handler)>
<android.location.LocationManager: java.lang.String getGnssHardwareModelName()>
<android.location.LocationManager: java.util.List getProviders(boolean)>
<android.location.LocationManager: void unregisterGnssStatusCallback(android.location.GnssStatus.Callback)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)>
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>
<android.location.LocationManager: boolean registerGnssStatusCallback(android.location.GnssStatus.Callback,android.os.Handler)>
<android.location.LocationManager: boolean registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent.Callback)>
<android.location.LocationManager: boolean registerGnssBatchedLocationCallback(long,boolean,android.location.BatchedLocationCallback,android.os.Handler)>
<android.location.LocationManager: android.location.GnssCapabilities getGnssCapabilities()>
<android.location.LocationManager: java.lang.String[] getBackgroundThrottlingWhitelist()>
<android.location.LocationManager: boolean isProviderPackage(java.lang.String)>
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>
<android.location.LocationManager: void setLocationEnabledForUser(boolean,android.os.UserHandle)>
<android.location.LocationManager: java.util.List getTestProviderCurrentRequests(java.lang.String)>
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.LocationManager: boolean setProviderEnabledForUser(java.lang.String,boolean,android.os.UserHandle)>
<android.location.LocationManager: void removeProximityAlert(android.app.PendingIntent)>
<android.location.LocationManager: int getGnssBatchSize()>
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
<android.location.LocationManager: boolean registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent.Callback,android.os.Handler)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener)>
<android.location.LocationManager: void removeGpsStatusListener(android.location.GpsStatus.Listener)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>
<android.widget.CalendarView: void setSelectedDateVerticalBar(@DrawableResint)>
<android.widget.CalendarView: boolean getBoundsForDate(long,android.graphics.Rect)>
<android.widget.CalendarView: void setFocusedMonthDateColor(@ColorIntint)>
<android.widget.CalendarView: int getShownWeekCount()>
<android.widget.CalendarView: int getUnfocusedMonthDateColor()>
<android.widget.CalendarView: void setMinDate(long)>
<android.widget.CalendarView: boolean getShowWeekNumber()>
<android.widget.CalendarView: void <init>(android.content.Context,android.util.AttributeSet,@AttrRes int,@StyleRes int)>
<android.widget.CalendarView: long getMaxDate()>
<android.widget.CalendarView: void setDateTextAppearance(@StyleResint)>
<android.widget.CalendarView: void setMaxDate(long)>
<android.widget.CalendarView: void setDate(long)>
<android.widget.CalendarView: long getDate()>
<android.widget.CalendarView: int getWeekDayTextAppearance()>
<android.widget.CalendarView: void setSelectedWeekBackgroundColor(@ColorIntint)>
<android.widget.CalendarView: int getWeekNumberColor()>
<android.widget.CalendarView: void setWeekNumberColor(@ColorIntint)>
<android.widget.CalendarView: int getSelectedWeekBackgroundColor()>
<android.widget.CalendarView: void <init>(android.content.Context)>
<android.widget.CalendarView: void setWeekSeparatorLineColor(@ColorIntint)>
<android.widget.CalendarView: void setWeekDayTextAppearance(@StyleResint)>
<android.widget.CalendarView: void <init>(android.content.Context,android.util.AttributeSet,@AttrRes int)>
<android.widget.CalendarView: android.graphics.drawable.Drawable getSelectedDateVerticalBar()>
<android.widget.CalendarView: int getDateTextAppearance()>
<android.widget.CalendarView: void setOnDateChangeListener(android.widget.CalendarView.OnDateChangeListener)>
<android.widget.CalendarView: int getWeekSeparatorLineColor()>
<android.widget.CalendarView: int getFirstDayOfWeek()>
<android.widget.CalendarView: void setDate(long,boolean,boolean)>
<android.widget.CalendarView: long getMinDate()>
<android.widget.CalendarView: int getFocusedMonthDateColor()>
<android.widget.CalendarView: void setFirstDayOfWeek(int)>
<android.widget.CalendarView: void setUnfocusedMonthDateColor(@ColorIntint)>
<android.widget.CalendarView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.CalendarView: void setShownWeekCount(int)>
<android.widget.CalendarView: void setSelectedDateVerticalBar(android.graphics.drawable.Drawable)>
<android.widget.CalendarView: void setShowWeekNumber(boolean)>
<java.util.Spliterators.AbstractSpliterator: void <init>(long,int)>
<java.util.Spliterators.AbstractSpliterator: long estimateSize()>
<java.util.Spliterators.AbstractSpliterator: java.util.Spliterator trySplit()>
<java.util.Spliterators.AbstractSpliterator: int characteristics()>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: android.net.wifi.p2p.nsd.WifiP2pServiceRequest newInstance(int,java.lang.String)>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: android.net.wifi.p2p.nsd.WifiP2pServiceRequest newInstance(int)>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: int describeContents()>
<android.util.MutableDouble: void <init>(double)>
<java.util.zip.InflaterOutputStream: void finish()>
<java.util.zip.InflaterOutputStream: void <init>(java.io.OutputStream)>
<java.util.zip.InflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Inflater,int)>
<java.util.zip.InflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Inflater)>
<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>
<java.util.concurrent.atomic.AtomicBoolean: void <init>()>
<java.util.concurrent.atomic.AtomicBoolean: boolean get()>
<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>
<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>
<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>
<java.util.concurrent.atomic.AtomicBoolean: boolean weakCompareAndSet(boolean,boolean)>
<java.util.concurrent.atomic.AtomicBoolean: void lazySet(boolean)>
<android.app.PendingIntent.OnFinished: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)>
<android.text.Spanned extends java.lang.CharSequence: int getSpanStart(java.lang.Object)>
<android.text.Spanned extends java.lang.CharSequence: int nextSpanTransition(int,int,java.lang.Class)>
<android.text.Spanned extends java.lang.CharSequence: int getSpanEnd(java.lang.Object)>
<android.text.Spanned extends java.lang.CharSequence: int getSpanFlags(java.lang.Object)>
<android.text.Spanned extends java.lang.CharSequence: T[] getSpans(int,int,java.lang.Class)>
<android.net.wifi.aware.WifiAwareNetworkSpecifier: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.aware.WifiAwareNetworkSpecifier: int describeContents()>
<android.app.contentsuggestions.ContentSuggestionsManager.SelectionsCallback: void onContentSelectionsAvailable(int,java.util.List)>
<android.view.textclassifier.ConversationAction.Builder: android.view.textclassifier.ConversationAction.Builder setAction(android.app.RemoteAction)>
<android.view.textclassifier.ConversationAction.Builder: void <init>(String)>
<android.view.textclassifier.ConversationAction.Builder: android.view.textclassifier.ConversationAction.Builder setConfidenceScore(float)>
<android.view.textclassifier.ConversationAction.Builder: android.view.textclassifier.ConversationAction.Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.ConversationAction.Builder: android.view.textclassifier.ConversationAction build()>
<android.view.textclassifier.ConversationAction.Builder: android.view.textclassifier.ConversationAction.Builder setTextReply(CharSequence)>
<android.net.wifi.WifiNetworkSpecifier: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiNetworkSpecifier: int describeContents()>
<android.bluetooth.le.ScanResult: void <init>(android.bluetooth.BluetoothDevice,android.bluetooth.le.ScanRecord,int,long)>
<android.bluetooth.le.ScanResult: long getTimestampNanos()>
<android.bluetooth.le.ScanResult: int getDataStatus()>
<android.bluetooth.le.ScanResult: int getAdvertisingSid()>
<android.bluetooth.le.ScanResult: int getRssi()>
<android.bluetooth.le.ScanResult: boolean isConnectable()>
<android.bluetooth.le.ScanResult: boolean isLegacy()>
<android.bluetooth.le.ScanResult: void <init>(android.bluetooth.BluetoothDevice,int,int,int,int,int,int,int,android.bluetooth.le.ScanRecord,long)>
<android.bluetooth.le.ScanResult: int getSecondaryPhy()>
<android.bluetooth.le.ScanResult: void writeToParcel(android.os.Parcel,int)>
<android.bluetooth.le.ScanResult: android.bluetooth.le.ScanRecord getScanRecord()>
<android.bluetooth.le.ScanResult: android.bluetooth.BluetoothDevice getDevice()>
<android.bluetooth.le.ScanResult: int getPeriodicAdvertisingInterval()>
<android.bluetooth.le.ScanResult: int getTxPower()>
<android.bluetooth.le.ScanResult: int describeContents()>
<android.bluetooth.le.ScanResult: int getPrimaryPhy()>
<java.nio.channels.InterruptedByTimeoutException: void <init>()>
<java.nio.charset.IllegalCharsetNameException: void <init>(String)>
<java.nio.charset.IllegalCharsetNameException: java.lang.String getCharsetName()>
<android.os.Build: boolean is64BitAbi(java.lang.String)>
<android.os.Build: java.lang.String getRadioVersion()>
<android.os.Build: java.util.List getFingerprintedPartitions()>
<android.os.Build: void <init>()>
<android.os.Build: java.lang.String getSerial()>
<java.lang.ref.WeakReference: void <init>(T)>
<java.lang.ref.WeakReference: void <init>(T,java.lang.ref.ReferenceQueue)>
<android.hardware.radio.RadioMetadata: void writeToParcel(android.os.Parcel,int)>
<android.hardware.radio.RadioMetadata: boolean containsKey(java.lang.String)>
<android.hardware.radio.RadioMetadata: android.graphics.Bitmap getBitmap(java.lang.String)>
<android.hardware.radio.RadioMetadata: int getInt(java.lang.String)>
<android.hardware.radio.RadioMetadata: int describeContents()>
<android.hardware.radio.RadioMetadata: android.hardware.radio.RadioMetadata.Clock getClock(java.lang.String)>
<android.hardware.radio.RadioMetadata: int size()>
<android.hardware.radio.RadioMetadata: java.lang.String getString(java.lang.String)>
<android.hardware.radio.RadioMetadata: java.util.Set keySet()>
<android.print.PrintManager.PrintServiceRecommendationsChangeListener: void onPrintServiceRecommendationsChanged()>
<android.bluetooth.BluetoothHidDeviceAppSdpSettings: byte getSubclass()>
<android.bluetooth.BluetoothHidDeviceAppSdpSettings: java.lang.String getProvider()>
<android.bluetooth.BluetoothHidDeviceAppSdpSettings: void writeToParcel(android.os.Parcel,int)>
<android.bluetooth.BluetoothHidDeviceAppSdpSettings: java.lang.String getName()>
<android.bluetooth.BluetoothHidDeviceAppSdpSettings: byte[] getDescriptors()>
<android.bluetooth.BluetoothHidDeviceAppSdpSettings: int describeContents()>
<android.bluetooth.BluetoothHidDeviceAppSdpSettings: java.lang.String getDescription()>
<android.bluetooth.BluetoothHidDeviceAppSdpSettings: void <init>(String,String,String,byte,byte[])>
<java.util.UnknownFormatConversionException: java.lang.String getConversion()>
<java.util.UnknownFormatConversionException: void <init>(String)>
<android.system.Int64Ref: void <init>(long)>
<java.nio.file.attribute.BasicFileAttributes: java.lang.Object fileKey()>
<java.nio.file.attribute.BasicFileAttributes: boolean isSymbolicLink()>
<java.nio.file.attribute.BasicFileAttributes: boolean isOther()>
<java.nio.file.attribute.BasicFileAttributes: long size()>
<java.nio.file.attribute.BasicFileAttributes: boolean isRegularFile()>
<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime lastModifiedTime()>
<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime lastAccessTime()>
<java.nio.file.attribute.BasicFileAttributes: boolean isDirectory()>
<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime creationTime()>
<android.hardware.location.GeofenceHardwareRequest: double getLatitude()>
<android.hardware.location.GeofenceHardwareRequest: double getRadius()>
<android.hardware.location.GeofenceHardwareRequest: int getUnknownTimer()>
<android.hardware.location.GeofenceHardwareRequest: int getLastTransition()>
<android.hardware.location.GeofenceHardwareRequest: void setUnknownTimer(int)>
<android.hardware.location.GeofenceHardwareRequest: void setMonitorTransitions(int)>
<android.hardware.location.GeofenceHardwareRequest: int getSourceTechnologies()>
<android.hardware.location.GeofenceHardwareRequest: int getNotificationResponsiveness()>
<android.hardware.location.GeofenceHardwareRequest: android.hardware.location.GeofenceHardwareRequest createCircularGeofence(double,double,double)>
<android.hardware.location.GeofenceHardwareRequest: void setLastTransition(int)>
<android.hardware.location.GeofenceHardwareRequest: void setNotificationResponsiveness(int)>
<android.hardware.location.GeofenceHardwareRequest: void setSourceTechnologies(int)>
<android.hardware.location.GeofenceHardwareRequest: double getLongitude()>
<android.hardware.location.GeofenceHardwareRequest: void <init>()>
<android.hardware.location.GeofenceHardwareRequest: int getMonitorTransitions()>
<android.widget.Advanceable: void advance()>
<android.widget.Advanceable: void fyiWillBeAdvancedByHostKThx()>
<java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String,byte[],java.net.NetworkInterface)>
<java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String,byte[],int)>
<java.net.Inet6Address: int getScopeId()>
<java.net.Inet6Address: java.net.NetworkInterface getScopedInterface()>
<java.net.Inet6Address: boolean isIPv4CompatibleAddress()>
<android.media.ImageWriter.OnImageReleasedListener: void onImageReleased(android.media.ImageWriter)>
<android.app.Person.Builder: android.app.Person.Builder setName(CharSequence)>
<android.app.Person.Builder: android.app.Person.Builder setUri(java.lang.String)>
<android.app.Person.Builder: android.app.Person.Builder setKey(java.lang.String)>
<android.app.Person.Builder: void <init>()>
<android.app.Person.Builder: android.app.Person.Builder setBot(boolean)>
<android.app.Person.Builder: android.app.Person.Builder setIcon(android.graphics.drawable.Icon)>
<android.app.Person.Builder: android.app.Person.Builder setImportant(boolean)>
<android.app.Person.Builder: android.app.Person build()>
<java.util.IllegalFormatCodePointException: void <init>(int)>
<java.util.IllegalFormatCodePointException: int getCodePoint()>
<android.util.IntProperty: void <init>(String)>
<android.util.IntProperty: void set(T,java.lang.Integer)>
<android.util.IntProperty: void setValue(T,int)>
<android.view.SurfaceControl: void readFromParcel(android.os.Parcel)>
<android.view.SurfaceControl: void release()>
<android.view.SurfaceControl: void writeToParcel(android.os.Parcel,int)>
<android.view.SurfaceControl: boolean isValid()>
<android.view.SurfaceControl: int describeContents()>
<android.transition.Fade: void <init>()>
<android.transition.Fade: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.Fade: void <init>(int)>
<android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver.OnTouchModeChangeListener)>
<android.view.ViewTreeObserver: boolean isAlive()>
<android.view.ViewTreeObserver: void removeOnDrawListener(android.view.ViewTreeObserver.OnDrawListener)>
<android.view.ViewTreeObserver: void removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver.OnGlobalFocusChangeListener)>
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver.OnPreDrawListener)>
<android.view.ViewTreeObserver: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)>
<android.view.ViewTreeObserver: void removeOnWindowAttachListener(android.view.ViewTreeObserver.OnWindowAttachListener)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)>
<android.view.ViewTreeObserver: void addOnWindowAttachListener(android.view.ViewTreeObserver.OnWindowAttachListener)>
<android.view.ViewTreeObserver: void addOnScrollChangedListener(android.view.ViewTreeObserver.OnScrollChangedListener)>
<android.view.ViewTreeObserver: void addOnGlobalFocusChangeListener(android.view.ViewTreeObserver.OnGlobalFocusChangeListener)>
<android.view.ViewTreeObserver: void removeOnWindowFocusChangeListener(android.view.ViewTreeObserver.OnWindowFocusChangeListener)>
<android.view.ViewTreeObserver: boolean dispatchOnPreDraw()>
<android.view.ViewTreeObserver: boolean unregisterFrameCommitCallback(Runnable)>
<android.view.ViewTreeObserver: void addOnDrawListener(android.view.ViewTreeObserver.OnDrawListener)>
<android.view.ViewTreeObserver: void removeOnScrollChangedListener(android.view.ViewTreeObserver.OnScrollChangedListener)>
<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)>
<android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver.OnTouchModeChangeListener)>
<android.view.ViewTreeObserver: void registerFrameCommitCallback(Runnable)>
<android.view.ViewTreeObserver: void addOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer)>
<android.view.ViewTreeObserver: void addOnWindowFocusChangeListener(android.view.ViewTreeObserver.OnWindowFocusChangeListener)>
<android.view.ViewTreeObserver: void removeOnPreDrawListener(android.view.ViewTreeObserver.OnPreDrawListener)>
<android.view.ViewTreeObserver: void dispatchOnGlobalLayout()>
<android.view.ViewTreeObserver: void removeOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer)>
<android.view.ViewTreeObserver: void dispatchOnDraw()>
<java.util.BitSet: void set(int,int,boolean)>
<java.util.BitSet: long[] toLongArray()>
<java.util.BitSet: void set(int,boolean)>
<java.util.BitSet: boolean get(int)>
<java.util.BitSet: java.lang.Object clone()>
<java.util.BitSet: int previousClearBit(int)>
<java.util.BitSet: java.util.BitSet valueOf(java.nio.LongBuffer)>
<java.util.BitSet: void <init>()>
<java.util.BitSet: boolean intersects(java.util.BitSet)>
<java.util.BitSet: java.util.BitSet valueOf(byte[])>
<java.util.BitSet: int length()>
<java.util.BitSet: int previousSetBit(int)>
<java.util.BitSet: java.util.BitSet get(int,int)>
<java.util.BitSet: void clear()>
<java.util.BitSet: boolean isEmpty()>
<java.util.BitSet: void flip(int,int)>
<java.util.BitSet: void set(int,int)>
<java.util.BitSet: int cardinality()>
<java.util.BitSet: void or(java.util.BitSet)>
<java.util.BitSet: java.util.stream.IntStream stream()>
<java.util.BitSet: byte[] toByteArray()>
<java.util.BitSet: void and(java.util.BitSet)>
<java.util.BitSet: int nextClearBit(int)>
<java.util.BitSet: void set(int)>
<java.util.BitSet: void xor(java.util.BitSet)>
<java.util.BitSet: java.util.BitSet valueOf(long[])>
<java.util.BitSet: void clear(int)>
<java.util.BitSet: void clear(int,int)>
<java.util.BitSet: int size()>
<java.util.BitSet: java.util.BitSet valueOf(java.nio.ByteBuffer)>
<java.util.BitSet: void <init>(int)>
<java.util.BitSet: int nextSetBit(int)>
<java.util.BitSet: void andNot(java.util.BitSet)>
<java.util.BitSet: void flip(int)>
<android.security.keystore.recovery.RecoverySession: void close()>
<android.security.keystore.recovery.RecoverySession: java.util.Map recoverKeyChainSnapshot(byte[],java.util.List)>
<android.security.keystore.recovery.RecoverySession: byte[] start(java.lang.String,java.security.cert.CertPath,byte[],byte[],java.util.List)>
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate minus(long,java.time.temporal.TemporalUnit)>
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate with(java.time.temporal.TemporalField,long)>
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate now(java.time.ZoneId)>
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate with(java.time.temporal.TemporalAdjuster)>
<java.time.chrono.HijrahDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>
<java.time.chrono.HijrahDate: int getValue()>
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate now(java.time.Clock)>
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate plus(long,java.time.temporal.TemporalUnit)>
<java.time.chrono.HijrahDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>
<java.time.chrono.HijrahDate: java.time.chrono.HijrahEra getEra()>
<java.time.chrono.HijrahDate: java.time.chrono.HijrahEra of(int)>
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate minus(java.time.temporal.TemporalAmount)>
<java.time.chrono.HijrahDate: java.time.chrono.HijrahChronology getChronology()>
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate from(java.time.temporal.TemporalAccessor)>
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate of(int,int,int)>
<java.time.chrono.HijrahDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate plus(java.time.temporal.TemporalAmount)>
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate withVariant(java.time.chrono.HijrahChronology)>
<java.time.chrono.HijrahDate: int lengthOfMonth()>
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate now()>
<java.time.chrono.HijrahDate: long getLong(java.time.temporal.TemporalField)>
<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>
<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream,int)>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine(java.lang.String,int)>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getServerSessionContext()>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLParameters getSupportedSSLParameters()>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>
<javax.net.ssl.SSLContext: void <init>(javax.net.ssl.SSLContextSpi,java.security.Provider,String)>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getClientSessionContext()>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine()>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getDefault()>
<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLServerSocketFactory getServerSocketFactory()>
<javax.net.ssl.SSLContext: java.security.Provider getProvider()>
<javax.net.ssl.SSLContext: void setDefault(javax.net.ssl.SSLContext)>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLParameters getDefaultSSLParameters()>
<javax.net.ssl.SSLContext: java.lang.String getProtocol()>
<javax.net.ssl.SNIHostName: void <init>(String)>
<javax.net.ssl.SNIHostName: java.lang.String getAsciiName()>
<javax.net.ssl.SNIHostName: void <init>(byte[])>
<javax.net.ssl.SNIHostName: javax.net.ssl.SNIMatcher createSNIMatcher(java.lang.String)>
<javax.xml.datatype.DatatypeConfigurationException: void <init>(Throwable)>
<javax.xml.datatype.DatatypeConfigurationException: void <init>()>
<javax.xml.datatype.DatatypeConfigurationException: void <init>(String)>
<javax.xml.datatype.DatatypeConfigurationException: void <init>(String,Throwable)>
<android.media.tv.TvView.OnUnhandledInputEventListener: boolean onUnhandledInputEvent(android.view.InputEvent)>
<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime from(long,java.util.concurrent.TimeUnit)>
<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime fromMillis(long)>
<java.nio.file.attribute.FileTime: int compareTo(java.nio.file.attribute.FileTime)>
<java.nio.file.attribute.FileTime: long to(java.util.concurrent.TimeUnit)>
<java.nio.file.attribute.FileTime: long toMillis()>
<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime from(java.time.Instant)>
<java.nio.file.attribute.FileTime: java.time.Instant toInstant()>
<android.os.Process: void <init>()>
<android.os.Process: int myTid()>
<android.os.Process: boolean is64Bit()>
<android.os.Process: boolean isApplicationUid(int)>
<android.os.Process: int getGidForName(java.lang.String)>
<android.os.Process: int getThreadPriority(int)>
<android.os.Process: boolean supportsProcesses()>
<android.os.Process: android.os.UserHandle myUserHandle()>
<android.os.Process: int myPid()>
<android.os.Process: long getStartElapsedRealtime()>
<android.os.Process: long getStartUptimeMillis()>
<android.os.Process: int getUidForName(java.lang.String)>
<android.os.Process: void sendSignal(int,int)>
<android.os.Process: void setThreadPriority(int)>
<android.os.Process: boolean isIsolated()>
<android.os.Process: void killProcess(int)>
<android.os.Process: int[] getExclusiveCores()>
<android.os.Process: void setThreadPriority(int,int)>
<android.os.Process: int getThreadScheduler(int)>
<android.os.Process: int myUid()>
<android.os.Process: long getElapsedCpuTime()>
<android.widget.SpinnerAdapter extends android.widget.Adapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<android.app.role.OnRoleHoldersChangedListener: void onRoleHoldersChanged(java.lang.String,android.os.UserHandle)>
<android.hardware.SensorEventListener: void onAccuracyChanged(android.hardware.Sensor,int)>
<android.hardware.SensorEventListener: void onSensorChanged(android.hardware.SensorEvent)>
<android.nfc.tech.IsoDep: android.nfc.Tag getTag()>
<android.nfc.tech.IsoDep: int getTimeout()>
<android.nfc.tech.IsoDep: android.nfc.tech.IsoDep get(android.nfc.Tag)>
<android.nfc.tech.IsoDep: void setTimeout(int)>
<android.nfc.tech.IsoDep: void connect()>
<android.nfc.tech.IsoDep: byte[] getHistoricalBytes()>
<android.nfc.tech.IsoDep: boolean isExtendedLengthApduSupported()>
<android.nfc.tech.IsoDep: byte[] getHiLayerResponse()>
<android.nfc.tech.IsoDep: int getMaxTransceiveLength()>
<android.nfc.tech.IsoDep: boolean isConnected()>
<android.nfc.tech.IsoDep: void close()>
<android.nfc.tech.IsoDep: byte[] transceive(byte[])>
<javax.xml.xpath.XPathFunction: java.lang.Object evaluate(java.util.List)>
<java.util.TimerTask: void <init>()>
<java.util.TimerTask: long scheduledExecutionTime()>
<java.util.TimerTask: boolean cancel()>
<javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getG()>
<javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getP()>
<javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getX()>
<javax.crypto.spec.DHPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
<java.lang.reflect.GenericArrayType extends java.lang.reflect.Type: java.lang.reflect.Type getGenericComponentType()>
<android.view.ViewTreeObserver.OnGlobalFocusChangeListener: void onGlobalFocusChanged(android.view.View,android.view.View)>
<android.print.pdf.PrintedPdfDocument: android.graphics.Rect getPageContentRect()>
<android.print.pdf.PrintedPdfDocument: int getPageWidth()>
<android.print.pdf.PrintedPdfDocument: int getPageHeight()>
<android.print.pdf.PrintedPdfDocument: void <init>(android.content.Context,android.print.PrintAttributes)>
<android.print.pdf.PrintedPdfDocument: android.graphics.pdf.PdfDocument.Page startPage(int)>
<android.renderscript.Script: void setVar(int,android.renderscript.BaseObj)>
<android.renderscript.Script: void invoke(int,android.renderscript.FieldPacker)>
<android.renderscript.Script: void setTimeZone(java.lang.String)>
<android.renderscript.Script: boolean getVarB(int)>
<android.renderscript.Script: int getVarI(int)>
<android.renderscript.Script: void setVar(int,long)>
<android.renderscript.Script: void setVar(int,double)>
<android.renderscript.Script: void bindAllocation(android.renderscript.Allocation,int)>
<android.renderscript.Script: long getVarJ(int)>
<android.renderscript.Script: void setVar(int,boolean)>
<android.renderscript.Script: android.renderscript.Script.InvokeID createInvokeID(int)>
<android.renderscript.Script: float getVarF(int)>
<android.renderscript.Script: void setVar(int,android.renderscript.FieldPacker)>
<android.renderscript.Script: void forEach(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.FieldPacker,android.renderscript.Script.LaunchOptions)>
<android.renderscript.Script: void setVar(int,android.renderscript.FieldPacker,android.renderscript.Element,int[])>
<android.renderscript.Script: void setVar(int,float)>
<android.renderscript.Script: void forEach(int,android.renderscript.Allocation[],android.renderscript.Allocation,android.renderscript.FieldPacker,android.renderscript.Script.LaunchOptions)>
<android.renderscript.Script: void getVarV(int,android.renderscript.FieldPacker)>
<android.renderscript.Script: android.renderscript.Script.FieldID createFieldID(int,android.renderscript.Element)>
<android.renderscript.Script: android.renderscript.Script.KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>
<android.renderscript.Script: void forEach(int,android.renderscript.Allocation[],android.renderscript.Allocation,android.renderscript.FieldPacker)>
<android.renderscript.Script: double getVarD(int)>
<android.renderscript.Script: void reduce(int,android.renderscript.Allocation[],android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.Script: void setVar(int,int)>
<android.renderscript.Script: void forEach(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.FieldPacker)>
<android.renderscript.Script: void invoke(int)>
<android.text.PrecomputedText.Params.Builder: android.text.PrecomputedText.Params.Builder setTextDirection(android.text.TextDirectionHeuristic)>
<android.text.PrecomputedText.Params.Builder: void <init>(android.text.PrecomputedText.Params)>
<android.text.PrecomputedText.Params.Builder: void <init>(android.text.TextPaint)>
<android.text.PrecomputedText.Params.Builder: android.text.PrecomputedText.Params build()>
<android.text.PrecomputedText.Params.Builder: android.text.PrecomputedText.Params.Builder setBreakStrategy(int)>
<android.text.PrecomputedText.Params.Builder: android.text.PrecomputedText.Params.Builder setHyphenationFrequency(int)>
<java.security.cert.PolicyNode: java.security.cert.PolicyNode getParent()>
<java.security.cert.PolicyNode: java.util.Iterator getChildren()>
<java.security.cert.PolicyNode: int getDepth()>
<java.security.cert.PolicyNode: java.lang.String getValidPolicy()>
<java.security.cert.PolicyNode: java.util.Set getPolicyQualifiers()>
<java.security.cert.PolicyNode: java.util.Set getExpectedPolicies()>
<java.security.cert.PolicyNode: boolean isCritical()>
<java.io.UncheckedIOException: void <init>(String,java.io.IOException)>
<java.io.UncheckedIOException: void <init>(java.io.IOException)>
<java.io.UncheckedIOException: java.io.IOException getCause()>
<android.media.audiofx.Equalizer: short getCurrentPreset()>
<android.media.audiofx.Equalizer: void usePreset(short)>
<android.media.audiofx.Equalizer: short getBand(int)>
<android.media.audiofx.Equalizer: android.media.audiofx.Equalizer.Settings getProperties()>
<android.media.audiofx.Equalizer: int getCenterFreq(short)>
<android.media.audiofx.Equalizer: short getNumberOfBands()>
<android.media.audiofx.Equalizer: int[] getBandFreqRange(short)>
<android.media.audiofx.Equalizer: void setBandLevel(short,short)>
<android.media.audiofx.Equalizer: void setProperties(android.media.audiofx.Equalizer.Settings)>
<android.media.audiofx.Equalizer: short[] getBandLevelRange()>
<android.media.audiofx.Equalizer: void <init>(int,int)>
<android.media.audiofx.Equalizer: short getBandLevel(short)>
<android.media.audiofx.Equalizer: java.lang.String getPresetName(short)>
<android.media.audiofx.Equalizer: void setParameterListener(android.media.audiofx.Equalizer.OnParameterChangeListener)>
<android.media.audiofx.Equalizer: short getNumberOfPresets()>
<android.service.voice.AlwaysOnHotwordDetector.EventPayload: android.media.AudioFormat getCaptureAudioFormat()>
<android.service.voice.AlwaysOnHotwordDetector.EventPayload: byte[] getTriggerAudio()>
<android.text.format.DateFormat: char[] getDateFormatOrder(android.content.Context)>
<android.text.format.DateFormat: boolean is24HourFormat(android.content.Context)>
<android.text.format.DateFormat: CharSequence format(CharSequence,java.util.Calendar)>
<android.text.format.DateFormat: CharSequence format(CharSequence,long)>
<android.text.format.DateFormat: CharSequence format(CharSequence,java.util.Date)>
<android.text.format.DateFormat: java.text.DateFormat getLongDateFormat(android.content.Context)>
<android.text.format.DateFormat: void <init>()>
<android.text.format.DateFormat: java.lang.String getBestDateTimePattern(java.util.Locale,java.lang.String)>
<android.text.format.DateFormat: java.text.DateFormat getMediumDateFormat(android.content.Context)>
<android.text.format.DateFormat: java.text.DateFormat getTimeFormat(android.content.Context)>
<android.text.format.DateFormat: java.text.DateFormat getDateFormat(android.content.Context)>
<javax.xml.xpath.XPathVariableResolver: java.lang.Object resolveVariable(javax.xml.namespace.QName)>
<javax.xml.xpath.XPathFunctionException: void <init>(Throwable)>
<javax.xml.xpath.XPathFunctionException: void <init>(String)>
<android.media.MediaDrm.SessionException: void <init>(int,String)>
<android.media.MediaDrm.SessionException: int getErrorCode()>
<javax.net.ssl.ExtendedSSLSession: void <init>()>
<javax.net.ssl.ExtendedSSLSession: java.lang.String[] getPeerSupportedSignatureAlgorithms()>
<javax.net.ssl.ExtendedSSLSession: java.util.List getRequestedServerNames()>
<javax.net.ssl.ExtendedSSLSession: java.lang.String[] getLocalSupportedSignatureAlgorithms()>
<android.app.usage.StorageStats: int describeContents()>
<android.app.usage.StorageStats: long getAppBytes()>
<android.app.usage.StorageStats: long getCacheBytes()>
<android.app.usage.StorageStats: long getDataBytes()>
<android.app.usage.StorageStats: void writeToParcel(android.os.Parcel,int)>
<java.nio.channels.WritableByteChannel extends java.nio.channels.Channel: int write(java.nio.ByteBuffer)>
<java.nio.charset.UnsupportedCharsetException: java.lang.String getCharsetName()>
<java.nio.charset.UnsupportedCharsetException: void <init>(String)>
<android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession: void <init>()>
<android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession: java.util.List createHighSpeedRequestList(android.hardware.camera2.CaptureRequest)>
<android.telephony.ims.ImsConferenceState: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ims.ImsConferenceState: int getConnectionStateForStatus(java.lang.String)>
<android.telephony.ims.ImsConferenceState: int describeContents()>
<android.telephony.SmsMessage: int getStatusOnIcc()>
<android.telephony.SmsMessage: long getTimestampMillis()>
<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()>
<android.telephony.SmsMessage: boolean isMWIClearMessage()>
<android.telephony.SmsMessage: int getProtocolIdentifier()>
<android.telephony.SmsMessage: int getStatus()>
<android.telephony.SmsMessage: java.lang.String getMessageBody()>
<android.telephony.SmsMessage: boolean isMwiDontStore()>
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>
<android.telephony.SmsMessage: int getStatusOnSim()>
<android.telephony.SmsMessage: android.telephony.SmsMessage.SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.telephony.SmsMessage: java.lang.String getEmailFrom()>
<android.telephony.SmsMessage: int getIndexOnSim()>
<android.telephony.SmsMessage: java.lang.String getEmailBody()>
<android.telephony.SmsMessage: java.lang.String getServiceCenterAddress()>
<android.telephony.SmsMessage: android.telephony.SmsMessage.MessageClass getMessageClass()>
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[],java.lang.String)>
<android.telephony.SmsMessage: boolean isMWISetMessage()>
<android.telephony.SmsMessage: boolean isReplace()>
<android.telephony.SmsMessage: byte[] getPdu()>
<android.telephony.SmsMessage: int getIndexOnIcc()>
<android.telephony.SmsMessage: boolean isReplyPathPresent()>
<android.telephony.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)>
<android.telephony.SmsMessage: java.lang.String getPseudoSubject()>
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()>
<android.telephony.SmsMessage: int[] calculateLength(java.lang.String,boolean)>
<android.telephony.SmsMessage: boolean isCphsMwiMessage()>
<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()>
<android.telephony.SmsMessage: byte[] getUserData()>
<android.telephony.SmsMessage: boolean isStatusReportMessage()>
<android.telephony.SmsMessage: int[] calculateLength(CharSequence,boolean)>
<android.telephony.SmsMessage: android.telephony.SmsMessage.SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,short,byte[],boolean)>
<android.telephony.SmsMessage: boolean isEmail()>
<android.hardware.display.BrightnessChangeEvent: void writeToParcel(android.os.Parcel,int)>
<android.hardware.display.BrightnessChangeEvent: int describeContents()>
<android.webkit.WebViewProvider: void requestFocusNodeHref(android.os.Message)>
<android.webkit.WebViewProvider: boolean showFindDialog(java.lang.String,boolean)>
<android.webkit.WebViewProvider: android.print.PrintDocumentAdapter createPrintDocumentAdapter(java.lang.String)>
<android.webkit.WebViewProvider: void saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback)>
<android.webkit.WebViewProvider: void setRendererPriorityPolicy(int,boolean)>
<android.webkit.WebViewProvider: android.webkit.WebSettings getSettings()>
<android.webkit.WebViewProvider: void clearView()>
<android.webkit.WebViewProvider: int getRendererRequestedPriority()>
<android.webkit.WebViewProvider: void setFindListener(android.webkit.WebView.FindListener)>
<android.webkit.WebViewProvider: boolean zoomIn()>
<android.webkit.WebViewProvider: android.webkit.WebView.HitTestResult getHitTestResult()>
<android.webkit.WebViewProvider: android.webkit.WebBackForwardList restoreState(android.os.Bundle)>
<android.webkit.WebViewProvider: void goForward()>
<android.webkit.WebViewProvider: void goBackOrForward(int)>
<android.webkit.WebViewProvider: void loadUrl(java.lang.String)>
<android.webkit.WebViewProvider: boolean zoomBy(float)>
<android.webkit.WebViewProvider: java.lang.String getOriginalUrl()>
<android.webkit.WebViewProvider: void destroy()>
<android.webkit.WebViewProvider: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebViewProvider: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebViewProvider: int getVisibleTitleHeight()>
<android.webkit.WebViewProvider: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)>
<android.webkit.WebViewProvider: void clearMatches()>
<android.webkit.WebViewProvider: void evaluateJavaScript(java.lang.String,android.webkit.ValueCallback)>
<android.webkit.WebViewProvider: android.webkit.WebChromeClient getWebChromeClient()>
<android.webkit.WebViewProvider: boolean overlayVerticalScrollbar()>
<android.webkit.WebViewProvider: android.graphics.Bitmap getFavicon()>
<android.webkit.WebViewProvider: void dumpViewHierarchyWithProperties(java.io.BufferedWriter,int)>
<android.webkit.WebViewProvider: android.webkit.WebViewRenderProcessClient getWebViewRenderProcessClient()>
<android.webkit.WebViewProvider: android.view.View getZoomControls()>
<android.webkit.WebViewProvider: android.webkit.WebBackForwardList saveState(android.os.Bundle)>
<android.webkit.WebViewProvider: void setWebViewClient(android.webkit.WebViewClient)>
<android.webkit.WebViewProvider: void setHorizontalScrollbarOverlay(boolean)>
<android.webkit.WebViewProvider: android.webkit.WebBackForwardList copyBackForwardList()>
<android.webkit.WebViewProvider: void requestImageRef(android.os.Message)>
<android.webkit.WebViewProvider: android.view.textclassifier.TextClassifier getTextClassifier()>
<android.webkit.WebViewProvider: void setWebViewRenderProcessClient(java.util.concurrent.Executor,android.webkit.WebViewRenderProcessClient)>
<android.webkit.WebViewProvider: boolean canZoomIn()>
<android.webkit.WebViewProvider: boolean savePicture(android.os.Bundle,java.io.File)>
<android.webkit.WebViewProvider: void reload()>
<android.webkit.WebViewProvider: void setMapTrackballToArrowKeys(boolean)>
<android.webkit.WebViewProvider: android.webkit.WebViewProvider.ViewDelegate getViewDelegate()>
<android.webkit.WebViewProvider: boolean pageUp(boolean)>
<android.webkit.WebViewProvider: void freeMemory()>
<android.webkit.WebViewProvider: void findAllAsync(java.lang.String)>
<android.webkit.WebViewProvider: boolean overlayHorizontalScrollbar()>
<android.webkit.WebViewProvider: android.webkit.WebViewClient getWebViewClient()>
<android.webkit.WebViewProvider: void clearSslPreferences()>
<android.webkit.WebViewProvider: void setVerticalScrollbarOverlay(boolean)>
<android.webkit.WebViewProvider: int findAll(java.lang.String)>
<android.webkit.WebViewProvider: boolean pageDown(boolean)>
<android.webkit.WebViewProvider: void setInitialScale(int)>
<android.webkit.WebViewProvider: void stopLoading()>
<android.webkit.WebViewProvider: void addJavascriptInterface(java.lang.Object,java.lang.String)>
<android.webkit.WebViewProvider: void resumeTimers()>
<android.webkit.WebViewProvider: boolean canGoBackOrForward(int)>
<android.webkit.WebViewProvider: void invokeZoomPicker()>
<android.webkit.WebViewProvider: void clearCache(boolean)>
<android.webkit.WebViewProvider: void postUrl(java.lang.String,byte[])>
<android.webkit.WebViewProvider: boolean isPrivateBrowsingEnabled()>
<android.webkit.WebViewProvider: void notifyFindDialogDismissed()>
<android.webkit.WebViewProvider: void postMessageToMainFrame(android.webkit.WebMessage,android.net.Uri)>
<android.webkit.WebViewProvider: void setDownloadListener(android.webkit.DownloadListener)>
<android.webkit.WebViewProvider: void setWebChromeClient(android.webkit.WebChromeClient)>
<android.webkit.WebViewProvider: java.lang.String getTitle()>
<android.webkit.WebViewProvider: void loadData(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebViewProvider: java.lang.String getTouchIconUrl()>
<android.webkit.WebViewProvider: float getScale()>
<android.webkit.WebViewProvider: void removeJavascriptInterface(java.lang.String)>
<android.webkit.WebViewProvider: void savePassword(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebViewProvider: void setNetworkAvailable(boolean)>
<android.webkit.WebViewProvider: void onPause()>
<android.webkit.WebViewProvider: void loadUrl(java.lang.String,java.util.Map)>
<android.webkit.WebViewProvider: boolean zoomOut()>
<android.webkit.WebViewProvider: void init(java.util.Map,boolean)>
<android.webkit.WebViewProvider: boolean canZoomOut()>
<android.webkit.WebViewProvider: android.view.View findHierarchyView(java.lang.String,int)>
<android.webkit.WebViewProvider: boolean restorePicture(android.os.Bundle,java.io.File)>
<android.webkit.WebViewProvider: void setTextClassifier(android.view.textclassifier.TextClassifier)>
<android.webkit.WebViewProvider: void pauseTimers()>
<android.webkit.WebViewProvider: void documentHasImages(android.os.Message)>
<android.webkit.WebViewProvider: android.net.http.SslCertificate getCertificate()>
<android.webkit.WebViewProvider: void flingScroll(int,int)>
<android.webkit.WebViewProvider: void onResume()>
<android.webkit.WebViewProvider: boolean getRendererPriorityWaivedWhenNotVisible()>
<android.webkit.WebViewProvider: void findNext(boolean)>
<android.webkit.WebViewProvider: boolean canGoForward()>
<android.webkit.WebViewProvider: android.graphics.Picture capturePicture()>
<android.webkit.WebViewProvider: android.webkit.WebMessagePort[] createWebMessageChannel()>
<android.webkit.WebViewProvider: int getContentHeight()>
<android.webkit.WebViewProvider: android.webkit.WebViewProvider.ScrollDelegate getScrollDelegate()>
<android.webkit.WebViewProvider: void setPictureListener(android.webkit.WebView.PictureListener)>
<android.webkit.WebViewProvider: boolean canGoBack()>
<android.webkit.WebViewProvider: void insertVisualStateCallback(long,android.webkit.WebView.VisualStateCallback)>
<android.webkit.WebViewProvider: void setCertificate(android.net.http.SslCertificate)>
<android.webkit.WebViewProvider: int getContentWidth()>
<android.webkit.WebViewProvider: void goBack()>
<android.webkit.WebViewProvider: void clearFormData()>
<android.webkit.WebViewProvider: boolean isPaused()>
<android.webkit.WebViewProvider: void saveWebArchive(java.lang.String)>
<android.webkit.WebViewProvider: void clearHistory()>
<android.webkit.WebViewProvider: int getProgress()>
<android.webkit.WebViewProvider: java.lang.String getUrl()>
<android.webkit.WebViewProvider: android.webkit.WebViewRenderProcess getWebViewRenderProcess()>
<android.animation.TimeInterpolator: float getInterpolation(float)>
<android.media.MediaController2: java.lang.Object sendSessionCommand(android.media.Session2Command,android.os.Bundle)>
<android.media.MediaController2: void cancelSessionCommand(java.lang.Object)>
<android.media.MediaController2: android.media.Session2Token getConnectedToken()>
<android.media.MediaController2: boolean isPlaybackActive()>
<android.media.MediaController2: void close()>
<java.security.SignatureSpi: byte[] engineSign()>
<java.security.SignatureSpi: int engineSign(byte[],int,int)>
<java.security.SignatureSpi: boolean engineVerify(byte[])>
<java.security.SignatureSpi: boolean engineVerify(byte[],int,int)>
<java.security.SignatureSpi: java.lang.Object engineGetParameter(java.lang.String)>
<java.security.SignatureSpi: void engineUpdate(byte)>
<java.security.SignatureSpi: void engineUpdate(java.nio.ByteBuffer)>
<java.security.SignatureSpi: void engineInitSign(java.security.PrivateKey)>
<java.security.SignatureSpi: java.lang.Object clone()>
<java.security.SignatureSpi: void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)>
<java.security.SignatureSpi: void engineInitVerify(java.security.PublicKey)>
<java.security.SignatureSpi: void engineUpdate(byte[],int,int)>
<java.security.SignatureSpi: void engineSetParameter(java.lang.String,java.lang.Object)>
<java.security.SignatureSpi: java.security.AlgorithmParameters engineGetParameters()>
<java.security.SignatureSpi: void engineSetParameter(java.security.spec.AlgorithmParameterSpec)>
<java.security.SignatureSpi: void <init>()>
<android.provider.VoicemailContract.Voicemails: android.net.Uri buildSourceUri(java.lang.String)>
<android.hardware.radio.RadioManager.FmBandConfig.Builder: android.hardware.radio.RadioManager.FmBandConfig build()>
<android.hardware.radio.RadioManager.FmBandConfig.Builder: android.hardware.radio.RadioManager.FmBandConfig.Builder setEa(boolean)>
<android.hardware.radio.RadioManager.FmBandConfig.Builder: android.hardware.radio.RadioManager.FmBandConfig.Builder setAf(boolean)>
<android.hardware.radio.RadioManager.FmBandConfig.Builder: android.hardware.radio.RadioManager.FmBandConfig.Builder setTa(boolean)>
<android.hardware.radio.RadioManager.FmBandConfig.Builder: android.hardware.radio.RadioManager.FmBandConfig.Builder setRds(boolean)>
<android.hardware.radio.RadioManager.FmBandConfig.Builder: void <init>(android.hardware.radio.RadioManager.FmBandConfig)>
<android.hardware.radio.RadioManager.FmBandConfig.Builder: android.hardware.radio.RadioManager.FmBandConfig.Builder setStereo(boolean)>
<android.hardware.radio.RadioManager.FmBandConfig.Builder: void <init>(android.hardware.radio.RadioManager.FmBandDescriptor)>
<java.lang.Error: void <init>(String,Throwable,boolean,boolean)>
<java.lang.Error: void <init>()>
<java.lang.Error: void <init>(String,Throwable)>
<java.lang.Error: void <init>(String)>
<java.lang.Error: void <init>(Throwable)>
<android.graphics.BitmapFactory: void <init>()>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory.Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory.Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory.Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory.Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory.Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory.Options)>
<java.lang.AssertionError: void <init>(double)>
<java.lang.AssertionError: void <init>(String,Throwable)>
<java.lang.AssertionError: void <init>(char)>
<java.lang.AssertionError: void <init>(float)>
<java.lang.AssertionError: void <init>(long)>
<java.lang.AssertionError: void <init>()>
<java.lang.AssertionError: void <init>(boolean)>
<java.lang.AssertionError: void <init>(int)>
<java.lang.AssertionError: void <init>(Object)>
<android.hardware.camera2.CameraManager: void openCamera(java.lang.String,android.hardware.camera2.CameraDevice.StateCallback,android.os.Handler)>
<android.hardware.camera2.CameraManager: void openCamera(java.lang.String,java.util.concurrent.Executor,android.hardware.camera2.CameraDevice.StateCallback)>
<android.hardware.camera2.CameraManager: void unregisterAvailabilityCallback(android.hardware.camera2.CameraManager.AvailabilityCallback)>
<android.hardware.camera2.CameraManager: void registerAvailabilityCallback(android.hardware.camera2.CameraManager.AvailabilityCallback,android.os.Handler)>
<android.hardware.camera2.CameraManager: void setTorchMode(java.lang.String,boolean)>
<android.hardware.camera2.CameraManager: void unregisterTorchCallback(android.hardware.camera2.CameraManager.TorchCallback)>
<android.hardware.camera2.CameraManager: java.lang.String[] getCameraIdList()>
<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)>
<android.hardware.camera2.CameraManager: void registerTorchCallback(android.hardware.camera2.CameraManager.TorchCallback,android.os.Handler)>
<android.hardware.camera2.CameraManager: void registerAvailabilityCallback(java.util.concurrent.Executor,android.hardware.camera2.CameraManager.AvailabilityCallback)>
<android.hardware.camera2.CameraManager: void registerTorchCallback(java.util.concurrent.Executor,android.hardware.camera2.CameraManager.TorchCallback)>
<android.graphics.drawable.AnimationDrawable: void run()>
<android.graphics.drawable.AnimationDrawable: void <init>()>
<android.graphics.drawable.AnimationDrawable: int getDuration(int)>
<android.graphics.drawable.AnimationDrawable: void setOneShot(boolean)>
<android.graphics.drawable.AnimationDrawable: boolean isRunning()>
<android.graphics.drawable.AnimationDrawable: void stop()>
<android.graphics.drawable.AnimationDrawable: android.graphics.drawable.Drawable getFrame(int)>
<android.graphics.drawable.AnimationDrawable: boolean isOneShot()>
<android.graphics.drawable.AnimationDrawable: void addFrame(android.graphics.drawable.Drawable,int)>
<android.graphics.drawable.AnimationDrawable: int getNumberOfFrames()>
<android.graphics.drawable.AnimationDrawable: void start()>
<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,int,boolean)>
<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,int)>
<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream)>
<java.util.zip.DeflaterOutputStream: void deflate()>
<java.util.zip.DeflaterOutputStream: void finish()>
<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,boolean)>
<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,boolean)>
<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater)>
<java.util.TreeSet: java.util.Comparator comparator()>
<java.util.TreeSet: void <init>(java.util.Collection)>
<java.util.TreeSet: E floor(E)>
<java.util.TreeSet: E higher(E)>
<java.util.TreeSet: java.util.Iterator descendingIterator()>
<java.util.TreeSet: java.util.NavigableSet headSet(E,boolean)>
<java.util.TreeSet: java.util.NavigableSet subSet(E,boolean,E,boolean)>
<java.util.TreeSet: void <init>()>
<java.util.TreeSet: java.util.NavigableSet descendingSet()>
<java.util.TreeSet: java.util.SortedSet tailSet(E)>
<java.util.TreeSet: void <init>(java.util.SortedSet)>
<java.util.TreeSet: E pollLast()>
<java.util.TreeSet: void <init>(java.util.Comparator)>
<java.util.TreeSet: E first()>
<java.util.TreeSet: java.lang.Object clone()>
<java.util.TreeSet: java.util.NavigableSet tailSet(E,boolean)>
<java.util.TreeSet: java.util.Iterator iterator()>
<java.util.TreeSet: E ceiling(E)>
<java.util.TreeSet: E pollFirst()>
<java.util.TreeSet: E lower(E)>
<java.util.TreeSet: int size()>
<java.util.TreeSet: E last()>
<java.util.TreeSet: java.util.SortedSet subSet(E,E)>
<java.util.TreeSet: java.util.SortedSet headSet(E)>
<java.net.PasswordAuthentication: void <init>(String,char[])>
<java.net.PasswordAuthentication: char[] getPassword()>
<java.net.PasswordAuthentication: java.lang.String getUserName()>
<javax.sql.ConnectionEventListener extends java.util.EventListener: void connectionClosed(javax.sql.ConnectionEvent)>
<javax.sql.ConnectionEventListener extends java.util.EventListener: void connectionErrorOccurred(javax.sql.ConnectionEvent)>
<java.util.ResourceBundle: boolean containsKey(java.lang.String)>
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)>
<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>
<java.util.ResourceBundle: java.util.Locale getLocale()>
<java.util.ResourceBundle: void setParent(java.util.ResourceBundle)>
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.ResourceBundle.Control)>
<java.util.ResourceBundle: void clearCache()>
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle.Control)>
<java.util.ResourceBundle: java.util.Enumeration getKeys()>
<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>
<java.util.ResourceBundle: java.lang.String getBaseBundleName()>
<java.util.ResourceBundle: void clearCache(java.lang.ClassLoader)>
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>
<java.util.ResourceBundle: java.util.Set handleKeySet()>
<java.util.ResourceBundle: void <init>()>
<java.util.ResourceBundle: java.util.Set keySet()>
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle.Control)>
<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>
<java.util.ResourceBundle: java.lang.Object handleGetObject(java.lang.String)>
<java.util.concurrent.ThreadLocalRandom: double nextDouble(double,double)>
<java.util.concurrent.ThreadLocalRandom: int nextInt(int,int)>
<java.util.concurrent.ThreadLocalRandom: long nextLong(long,long)>
<java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom current()>
<java.util.concurrent.ThreadLocalRandom: double nextDouble(double)>
<java.util.concurrent.ThreadLocalRandom: long nextLong(long)>
<java.nio.file.WatchService extends java.io.Closeable: java.nio.file.WatchKey poll(long,java.util.concurrent.TimeUnit)>
<java.nio.file.WatchService extends java.io.Closeable: java.nio.file.WatchKey take()>
<java.nio.file.WatchService extends java.io.Closeable: java.nio.file.WatchKey poll()>
<android.graphics.pdf.PdfDocument.PageInfo: android.graphics.Rect getContentRect()>
<android.graphics.pdf.PdfDocument.PageInfo: int getPageHeight()>
<android.graphics.pdf.PdfDocument.PageInfo: int getPageWidth()>
<android.graphics.pdf.PdfDocument.PageInfo: int getPageNumber()>
<android.util.Xml: android.util.Xml.Encoding findEncodingByName(java.lang.String)>
<android.util.Xml: org.xmlpull.v1.XmlSerializer newSerializer()>
<android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>
<android.util.Xml: void parse(java.lang.String,org.xml.sax.ContentHandler)>
<android.util.Xml: void parse(java.io.InputStream,android.util.Xml.Encoding,org.xml.sax.ContentHandler)>
<android.util.Xml: void parse(java.io.Reader,org.xml.sax.ContentHandler)>
<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>
<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String)>
<java.util.Properties: void save(java.io.OutputStream,java.lang.String)>
<java.util.Properties: java.util.Set stringPropertyNames()>
<java.util.Properties: void <init>(java.util.Properties)>
<java.util.Properties: void store(java.io.Writer,java.lang.String)>
<java.util.Properties: void <init>()>
<java.util.Properties: java.lang.String getProperty(java.lang.String)>
<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>
<java.util.Properties: void load(java.io.InputStream)>
<java.util.Properties: java.util.Enumeration propertyNames()>
<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)>
<java.util.Properties: void list(java.io.PrintStream)>
<java.util.Properties: void list(java.io.PrintWriter)>
<java.util.Properties: void loadFromXML(java.io.InputStream)>
<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>
<java.util.Properties: void load(java.io.Reader)>
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>
<java.util.concurrent.Executor: void execute(Runnable)>
<java.nio.channels.SelectionKey: java.nio.channels.Selector selector()>
<java.nio.channels.SelectionKey: boolean isConnectable()>
<java.nio.channels.SelectionKey: int readyOps()>
<java.nio.channels.SelectionKey: java.nio.channels.SelectionKey interestOps(int)>
<java.nio.channels.SelectionKey: java.nio.channels.SelectableChannel channel()>
<java.nio.channels.SelectionKey: void <init>()>
<java.nio.channels.SelectionKey: void cancel()>
<java.nio.channels.SelectionKey: boolean isAcceptable()>
<java.nio.channels.SelectionKey: boolean isValid()>
<java.nio.channels.SelectionKey: boolean isReadable()>
<java.nio.channels.SelectionKey: boolean isWritable()>
<java.nio.channels.SelectionKey: java.lang.Object attachment()>
<java.nio.channels.SelectionKey: java.lang.Object attach(java.lang.Object)>
<java.nio.channels.SelectionKey: int interestOps()>
<java.io.StringWriter: void close()>
<java.io.StringWriter: java.io.StringWriter append(CharSequence,int,int)>
<java.io.StringWriter: void write(int)>
<java.io.StringWriter: java.io.StringWriter append(CharSequence)>
<java.io.StringWriter: void <init>()>
<java.io.StringWriter: java.io.StringWriter append(char)>
<java.io.StringWriter: void flush()>
<java.io.StringWriter: java.lang.StringBuffer getBuffer()>
<java.io.StringWriter: void write(char[],int,int)>
<java.io.StringWriter: void <init>(int)>
<java.io.StringWriter: void write(java.lang.String,int,int)>
<java.io.StringWriter: void write(java.lang.String)>
<android.view.textclassifier.ConversationActions.Request: int describeContents()>
<android.view.textclassifier.ConversationActions.Request: int getMaxSuggestions()>
<android.view.textclassifier.ConversationActions.Request: android.os.Bundle getExtras()>
<android.view.textclassifier.ConversationActions.Request: java.util.List getConversation()>
<android.view.textclassifier.ConversationActions.Request: java.lang.String getCallingPackageName()>
<android.view.textclassifier.ConversationActions.Request: android.view.textclassifier.TextClassifier.EntityConfig getTypeConfig()>
<android.view.textclassifier.ConversationActions.Request: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.ConversationActions.Request: java.util.List getHints()>
<android.media.tv.TvInputManager.Hardware: void overrideAudioSink(int,java.lang.String,int,int,int)>
<android.media.tv.TvInputManager.Hardware: void setStreamVolume(float)>
<android.media.tv.TvInputManager.Hardware: boolean setSurface(android.view.Surface,android.media.tv.TvStreamConfig)>
<android.icu.util.ChineseCalendar: void <init>(android.icu.util.ULocale)>
<android.icu.util.ChineseCalendar: void <init>(int,int,int,int,int)>
<android.icu.util.ChineseCalendar: int handleComputeMonthStart(int,int,boolean)>
<android.icu.util.ChineseCalendar: int handleGetLimit(int,int)>
<android.icu.util.ChineseCalendar: void <init>(android.icu.util.TimeZone,android.icu.util.ULocale)>
<android.icu.util.ChineseCalendar: void <init>(int,int,int,int,int,int,int,int)>
<android.icu.util.ChineseCalendar: void <init>(int,int,int,int,int,int,int)>
<android.icu.util.ChineseCalendar: void <init>(java.util.Locale)>
<android.icu.util.ChineseCalendar: int handleGetExtendedYear()>
<android.icu.util.ChineseCalendar: void <init>(int,int,int,int)>
<android.icu.util.ChineseCalendar: void <init>()>
<android.icu.util.ChineseCalendar: android.icu.text.DateFormat handleGetDateFormat(java.lang.String,java.lang.String,android.icu.util.ULocale)>
<android.icu.util.ChineseCalendar: void <init>(java.util.Date)>
<android.icu.util.ChineseCalendar: void <init>(android.icu.util.TimeZone)>
<android.icu.util.ChineseCalendar: void <init>(android.icu.util.TimeZone,java.util.Locale)>
<android.media.MediaDrmResetException: void <init>(String)>
<android.view.Gravity: void applyDisplay(int,android.graphics.Rect,android.graphics.Rect,int)>
<android.view.Gravity: void <init>()>
<android.view.Gravity: int getAbsoluteGravity(int,int)>
<android.view.Gravity: void applyDisplay(int,android.graphics.Rect,android.graphics.Rect)>
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int)>
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect)>
<android.view.Gravity: boolean isVertical(int)>
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect,int)>
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect)>
<android.view.Gravity: boolean isHorizontal(int)>
<android.hardware.display.BrightnessConfiguration.Builder: int getMaxCorrectionsByPackageName()>
<android.hardware.display.BrightnessConfiguration.Builder: android.hardware.display.BrightnessConfiguration.Builder addCorrectionByPackageName(java.lang.String,android.hardware.display.BrightnessCorrection)>
<android.hardware.display.BrightnessConfiguration.Builder: void <init>(float[],float[])>
<android.hardware.display.BrightnessConfiguration.Builder: android.hardware.display.BrightnessConfiguration.Builder addCorrectionByCategory(int,android.hardware.display.BrightnessCorrection)>
<android.hardware.display.BrightnessConfiguration.Builder: android.hardware.display.BrightnessConfiguration build()>
<android.hardware.display.BrightnessConfiguration.Builder: android.hardware.display.BrightnessConfiguration.Builder setDescription(java.lang.String)>
<android.hardware.display.BrightnessConfiguration.Builder: int getMaxCorrectionsByCategory()>
<android.media.midi.MidiInputPort: void close()>
<android.media.midi.MidiInputPort: int getPortNumber()>
<android.media.midi.MidiInputPort: void onSend(byte[],int,int,long)>
<android.media.MediaPlayer.NoDrmSchemeException: void <init>(String)>
<android.view.inspector.PropertyReader: void readGravity(int,int)>
<android.view.inspector.PropertyReader: void readResourceId(int,@AnyResint)>
<android.view.inspector.PropertyReader: void readByte(int,byte)>
<android.view.inspector.PropertyReader: void readIntEnum(int,int)>
<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>
<android.view.inspector.PropertyReader: void readShort(int,short)>
<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>
<android.view.inspector.PropertyReader: void readLong(int,long)>
<android.view.inspector.PropertyReader: void readColor(int,@ColorLonglong)>
<android.view.inspector.PropertyReader: void readDouble(int,double)>
<android.view.inspector.PropertyReader: void readFloat(int,float)>
<android.view.inspector.PropertyReader: void readIntFlag(int,int)>
<android.view.inspector.PropertyReader: void readColor(int,@ColorIntint)>
<android.view.inspector.PropertyReader: void readColor(int,android.graphics.Color)>
<android.view.inspector.PropertyReader: void readChar(int,char)>
<android.view.inspector.PropertyReader: void readInt(int,int)>
<java.nio.LongBuffer: int arrayOffset()>
<java.nio.LongBuffer: int compareTo(java.nio.LongBuffer)>
<java.nio.LongBuffer: java.nio.LongBuffer wrap(long[])>
<java.nio.LongBuffer: long[] array()>
<java.nio.LongBuffer: boolean hasArray()>
<java.nio.LongBuffer: java.nio.LongBuffer get(long[])>
<java.nio.LongBuffer: java.nio.ByteOrder order()>
<java.nio.LongBuffer: long get(int)>
<java.nio.LongBuffer: java.nio.LongBuffer put(int,long)>
<java.nio.LongBuffer: long get()>
<java.nio.LongBuffer: java.nio.LongBuffer put(long)>
<java.nio.LongBuffer: java.nio.LongBuffer put(long[])>
<java.nio.LongBuffer: java.nio.LongBuffer allocate(int)>
<java.nio.LongBuffer: java.nio.LongBuffer asReadOnlyBuffer()>
<java.nio.LongBuffer: java.nio.LongBuffer duplicate()>
<java.nio.LongBuffer: java.nio.LongBuffer put(java.nio.LongBuffer)>
<java.nio.LongBuffer: java.nio.LongBuffer slice()>
<java.nio.LongBuffer: java.nio.LongBuffer wrap(long[],int,int)>
<java.nio.LongBuffer: java.nio.LongBuffer compact()>
<java.nio.LongBuffer: java.nio.LongBuffer get(long[],int,int)>
<java.nio.LongBuffer: java.nio.LongBuffer put(long[],int,int)>
<android.text.NoCopySpan.Concrete: void <init>()>
<android.service.contentcapture.SnapshotData: int describeContents()>
<android.service.contentcapture.SnapshotData: android.os.Bundle getAssistData()>
<android.service.contentcapture.SnapshotData: android.app.assist.AssistStructure getAssistStructure()>
<android.service.contentcapture.SnapshotData: void writeToParcel(android.os.Parcel,int)>
<android.service.contentcapture.SnapshotData: android.app.assist.AssistContent getAssistContent()>
<java.util.ArrayDeque: boolean offerLast(E)>
<java.util.ArrayDeque: E pop()>
<java.util.ArrayDeque: E peek()>
<java.util.ArrayDeque: java.util.Iterator iterator()>
<java.util.ArrayDeque: E pollLast()>
<java.util.ArrayDeque: E removeFirst()>
<java.util.ArrayDeque: void addFirst(E)>
<java.util.ArrayDeque: void push(E)>
<java.util.ArrayDeque: E remove()>
<java.util.ArrayDeque: E peekLast()>
<java.util.ArrayDeque: void <init>(int)>
<java.util.ArrayDeque: E peekFirst()>
<java.util.ArrayDeque: boolean offerFirst(E)>
<java.util.ArrayDeque: void addLast(E)>
<java.util.ArrayDeque: int size()>
<java.util.ArrayDeque: java.util.ArrayDeque clone()>
<java.util.ArrayDeque: E getFirst()>
<java.util.ArrayDeque: boolean offer(E)>
<java.util.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)>
<java.util.ArrayDeque: E getLast()>
<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>
<java.util.ArrayDeque: E poll()>
<java.util.ArrayDeque: E removeLast()>
<java.util.ArrayDeque: E element()>
<java.util.ArrayDeque: void <init>()>
<java.util.ArrayDeque: E pollFirst()>
<java.util.ArrayDeque: void <init>(java.util.Collection)>
<java.util.ArrayDeque: java.util.Iterator descendingIterator()>
<android.app.backup.RestoreSet: void writeToParcel(android.os.Parcel,int)>
<android.app.backup.RestoreSet: void <init>()>
<android.app.backup.RestoreSet: void <init>(String,String,long)>
<android.app.backup.RestoreSet: int describeContents()>
<android.graphics.HardwareRenderer: void setContentRoot(android.graphics.RenderNode)>
<android.graphics.HardwareRenderer: void clearContent()>
<android.graphics.HardwareRenderer: void setLightSourceGeometry(float,float,float,float)>
<android.graphics.HardwareRenderer: void setSurface(android.view.Surface)>
<android.graphics.HardwareRenderer: void setOpaque(boolean)>
<android.graphics.HardwareRenderer: void start()>
<android.graphics.HardwareRenderer: android.graphics.HardwareRenderer.FrameRenderRequest createRenderRequest()>
<android.graphics.HardwareRenderer: void setName(java.lang.String)>
<android.graphics.HardwareRenderer: void setLightSourceAlpha(float,float)>
<android.graphics.HardwareRenderer: void notifyFramePending()>
<android.graphics.HardwareRenderer: void stop()>
<android.graphics.HardwareRenderer: void destroy()>
<android.graphics.HardwareRenderer: void <init>()>
<android.graphics.HardwareRenderer: boolean isOpaque()>
<java.util.Spliterators.AbstractIntSpliterator: java.util.Spliterator.OfInt trySplit()>
<java.util.Spliterators.AbstractIntSpliterator: void <init>(long,int)>
<java.util.Spliterators.AbstractIntSpliterator: long estimateSize()>
<java.util.Spliterators.AbstractIntSpliterator: int characteristics()>
<java.security.cert.X509CRLEntry: java.util.Date getRevocationDate()>
<java.security.cert.X509CRLEntry: javax.security.auth.x500.X500Principal getCertificateIssuer()>
<java.security.cert.X509CRLEntry: java.security.cert.CRLReason getRevocationReason()>
<java.security.cert.X509CRLEntry: java.math.BigInteger getSerialNumber()>
<java.security.cert.X509CRLEntry: boolean hasExtensions()>
<java.security.cert.X509CRLEntry: void <init>()>
<java.security.cert.X509CRLEntry: java.lang.String toString()>
<java.security.cert.X509CRLEntry: byte[] getEncoded()>
<android.telephony.CellSignalStrengthGsm: int getTimingAdvance()>
<android.telephony.CellSignalStrengthGsm: int getLevel()>
<android.telephony.CellSignalStrengthGsm: int describeContents()>
<android.telephony.CellSignalStrengthGsm: int getAsuLevel()>
<android.telephony.CellSignalStrengthGsm: int getBitErrorRate()>
<android.telephony.CellSignalStrengthGsm: int getDbm()>
<android.telephony.CellSignalStrengthGsm: void writeToParcel(android.os.Parcel,int)>
<java.sql.Time: java.sql.Time valueOf(java.lang.String)>
<java.sql.Time: void <init>(int,int,int)>
<java.sql.Time: void <init>(long)>
<android.telephony.LteVopsSupportInfo: void <init>(int,int)>
<android.telephony.LteVopsSupportInfo: int describeContents()>
<android.telephony.LteVopsSupportInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.LteVopsSupportInfo: int getVopsSupport()>
<android.telephony.LteVopsSupportInfo: int getEmcBearerSupport()>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setAssociationDesc(int)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setSequenceNumber(long)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setImagePixDepth(long)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setThumbPixHeight(long)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setCompressedSize(long)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setFormat(int)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo build()>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setDateCreated(long)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setThumbFormat(int)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setProtectionStatus(int)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setDateModified(long)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setImagePixWidth(long)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setKeywords(java.lang.String)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setAssociationType(int)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setName(java.lang.String)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setStorageId(int)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setThumbCompressedSize(long)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setThumbPixWidth(long)>
<android.mtp.MtpObjectInfo.Builder: void <init>()>
<android.mtp.MtpObjectInfo.Builder: void <init>(android.mtp.MtpObjectInfo)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setImagePixHeight(long)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setParent(int)>
<android.mtp.MtpObjectInfo.Builder: android.mtp.MtpObjectInfo.Builder setObjectHandle(int)>
<java.sql.SQLXML: void setString(java.lang.String)>
<java.sql.SQLXML: java.io.InputStream getBinaryStream()>
<java.sql.SQLXML: java.lang.String getString()>
<java.sql.SQLXML: T getSource(java.lang.Class)>
<java.sql.SQLXML: java.io.OutputStream setBinaryStream()>
<java.sql.SQLXML: java.io.Reader getCharacterStream()>
<java.sql.SQLXML: java.io.Writer setCharacterStream()>
<java.sql.SQLXML: void free()>
<java.sql.SQLXML: T setResult(java.lang.Class)>
<java.nio.file.ClosedDirectoryStreamException: void <init>()>
<android.preference.PreferenceScreen: android.widget.ListAdapter onCreateRootAdapter()>
<android.preference.PreferenceScreen: void onDismiss(android.content.DialogInterface)>
<android.preference.PreferenceScreen: android.widget.ListAdapter getRootAdapter()>
<android.preference.PreferenceScreen: android.app.Dialog getDialog()>
<android.preference.PreferenceScreen: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
<android.preference.PreferenceScreen: void bind(android.widget.ListView)>
<java.util.Formatter: void <init>(java.util.Locale)>
<java.util.Formatter: void <init>(Appendable,java.util.Locale)>
<java.util.Formatter: void <init>(String,String)>
<java.util.Formatter: java.util.Locale locale()>
<java.util.Formatter: void <init>(String)>
<java.util.Formatter: void <init>(java.io.File,String,java.util.Locale)>
<java.util.Formatter: void <init>()>
<java.util.Formatter: void <init>(java.io.OutputStream)>
<java.util.Formatter: void <init>(java.io.PrintStream)>
<java.util.Formatter: void <init>(java.io.OutputStream,String,java.util.Locale)>
<java.util.Formatter: java.io.IOException ioException()>
<java.util.Formatter: void <init>(String,String,java.util.Locale)>
<java.util.Formatter: Appendable out()>
<java.util.Formatter: void flush()>
<java.util.Formatter: void <init>(java.io.File,String)>
<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object...)>
<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object...)>
<java.util.Formatter: void <init>(java.io.OutputStream,String)>
<java.util.Formatter: void close()>
<java.util.Formatter: void <init>(Appendable)>
<java.util.Formatter: void <init>(java.io.File)>
<java.net.ProxySelector: java.util.List select(java.net.URI)>
<java.net.ProxySelector: void connectFailed(java.net.URI,java.net.SocketAddress,java.io.IOException)>
<java.net.ProxySelector: void setDefault(java.net.ProxySelector)>
<java.net.ProxySelector: java.net.ProxySelector getDefault()>
<java.net.ProxySelector: void <init>()>
<java.nio.file.WatchKey: boolean isValid()>
<java.nio.file.WatchKey: boolean reset()>
<java.nio.file.WatchKey: void cancel()>
<java.nio.file.WatchKey: java.util.List pollEvents()>
<java.nio.file.WatchKey: java.nio.file.Watchable watchable()>
<android.hardware.input.InputManager.InputDeviceListener: void onInputDeviceChanged(int)>
<android.hardware.input.InputManager.InputDeviceListener: void onInputDeviceRemoved(int)>
<android.hardware.input.InputManager.InputDeviceListener: void onInputDeviceAdded(int)>
<android.service.autofill.AutofillFieldClassificationService: android.os.IBinder onBind(android.content.Intent)>
<android.service.autofill.AutofillFieldClassificationService: float[][] onGetScores(java.lang.String,android.os.Bundle,java.util.List,java.util.List)>
<android.service.autofill.AutofillFieldClassificationService: float[][] onCalculateScores(java.util.List,java.util.List,java.util.List,java.lang.String,android.os.Bundle,java.util.Map,java.util.Map)>
<android.hardware.location.NanoAppState: void <init>(long,int,boolean)>
<android.hardware.location.NanoAppState: void writeToParcel(android.os.Parcel,int)>
<android.hardware.location.NanoAppState: int describeContents()>
<android.hardware.location.NanoAppState: long getNanoAppVersion()>
<android.hardware.location.NanoAppState: boolean isEnabled()>
<android.hardware.location.NanoAppState: long getNanoAppId()>
<org.json.JSONStringer: org.json.JSONStringer object()>
<org.json.JSONStringer: void <init>()>
<org.json.JSONStringer: org.json.JSONStringer value(long)>
<org.json.JSONStringer: org.json.JSONStringer value(java.lang.Object)>
<org.json.JSONStringer: org.json.JSONStringer value(boolean)>
<org.json.JSONStringer: org.json.JSONStringer endArray()>
<org.json.JSONStringer: org.json.JSONStringer array()>
<org.json.JSONStringer: org.json.JSONStringer endObject()>
<org.json.JSONStringer: org.json.JSONStringer key(java.lang.String)>
<org.json.JSONStringer: org.json.JSONStringer value(double)>
<android.opengl.EGL15: android.opengl.EGLSurface eglCreatePlatformPixmapSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,java.nio.Buffer,long[],int)>
<android.opengl.EGL15: boolean eglDestroySync(android.opengl.EGLDisplay,android.opengl.EGLSync)>
<android.opengl.EGL15: android.opengl.EGLDisplay eglGetPlatformDisplay(int,long,long[],int)>
<android.opengl.EGL15: int eglClientWaitSync(android.opengl.EGLDisplay,android.opengl.EGLSync,int,long)>
<android.opengl.EGL15: boolean eglWaitSync(android.opengl.EGLDisplay,android.opengl.EGLSync,int)>
<android.opengl.EGL15: android.opengl.EGLSync eglCreateSync(android.opengl.EGLDisplay,int,long[],int)>
<android.opengl.EGL15: boolean eglGetSyncAttrib(android.opengl.EGLDisplay,android.opengl.EGLSync,int,long[],int)>
<android.opengl.EGL15: android.opengl.EGLImage eglCreateImage(android.opengl.EGLDisplay,android.opengl.EGLContext,int,long,long[],int)>
<android.opengl.EGL15: android.opengl.EGLSurface eglCreatePlatformWindowSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,java.nio.Buffer,long[],int)>
<android.opengl.EGL15: boolean eglDestroyImage(android.opengl.EGLDisplay,android.opengl.EGLImage)>
<android.location.GnssMeasurementCorrections.Builder: android.location.GnssMeasurementCorrections.Builder setAltitudeMeters(double)>
<android.location.GnssMeasurementCorrections.Builder: void <init>()>
<android.location.GnssMeasurementCorrections.Builder: android.location.GnssMeasurementCorrections.Builder setHorizontalPositionUncertaintyMeters(double)>
<android.location.GnssMeasurementCorrections.Builder: android.location.GnssMeasurementCorrections.Builder setLongitudeDegrees(double)>
<android.location.GnssMeasurementCorrections.Builder: android.location.GnssMeasurementCorrections build()>
<android.location.GnssMeasurementCorrections.Builder: android.location.GnssMeasurementCorrections.Builder setToaGpsNanosecondsOfWeek(long)>
<android.location.GnssMeasurementCorrections.Builder: android.location.GnssMeasurementCorrections.Builder setLatitudeDegrees(double)>
<android.location.GnssMeasurementCorrections.Builder: android.location.GnssMeasurementCorrections.Builder setSingleSatelliteCorrectionList(java.util.List)>
<android.location.GnssMeasurementCorrections.Builder: android.location.GnssMeasurementCorrections.Builder setVerticalPositionUncertaintyMeters(double)>
<android.net.wifi.hotspot2.ProvisioningCallback: void <init>()>
<android.net.wifi.hotspot2.ProvisioningCallback: void onProvisioningComplete()>
<android.net.wifi.hotspot2.ProvisioningCallback: void onProvisioningStatus(int)>
<android.net.wifi.hotspot2.ProvisioningCallback: void onProvisioningFailure(int)>
<android.opengl.EGL14: android.opengl.EGLContext eglGetCurrentContext()>
<android.opengl.EGL14: boolean eglWaitNative(int)>
<android.opengl.EGL14: android.opengl.EGLSurface eglCreatePixmapSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,int,int[],int)>
<android.opengl.EGL14: int eglQueryAPI()>
<android.opengl.EGL14: boolean eglSwapInterval(android.opengl.EGLDisplay,int)>
<android.opengl.EGL14: boolean eglInitialize(android.opengl.EGLDisplay,int[],int,int[],int)>
<android.opengl.EGL14: boolean eglChooseConfig(android.opengl.EGLDisplay,int[],int,android.opengl.EGLConfig[],int,int,int[],int)>
<android.opengl.EGL14: boolean eglDestroySurface(android.opengl.EGLDisplay,android.opengl.EGLSurface)>
<android.opengl.EGL14: boolean eglReleaseThread()>
<android.opengl.EGL14: boolean eglQueryContext(android.opengl.EGLDisplay,android.opengl.EGLContext,int,int[],int)>
<android.opengl.EGL14: boolean eglReleaseTexImage(android.opengl.EGLDisplay,android.opengl.EGLSurface,int)>
<android.opengl.EGL14: android.opengl.EGLSurface eglCreatePbufferSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,int[],int)>
<android.opengl.EGL14: java.lang.String eglQueryString(android.opengl.EGLDisplay,int)>
<android.opengl.EGL14: boolean eglBindAPI(int)>
<android.opengl.EGL14: boolean eglSurfaceAttrib(android.opengl.EGLDisplay,android.opengl.EGLSurface,int,int)>
<android.opengl.EGL14: boolean eglCopyBuffers(android.opengl.EGLDisplay,android.opengl.EGLSurface,int)>
<android.opengl.EGL14: boolean eglDestroyContext(android.opengl.EGLDisplay,android.opengl.EGLContext)>
<android.opengl.EGL14: android.opengl.EGLSurface eglGetCurrentSurface(int)>
<android.opengl.EGL14: boolean eglMakeCurrent(android.opengl.EGLDisplay,android.opengl.EGLSurface,android.opengl.EGLSurface,android.opengl.EGLContext)>
<android.opengl.EGL14: boolean eglGetConfigAttrib(android.opengl.EGLDisplay,android.opengl.EGLConfig,int,int[],int)>
<android.opengl.EGL14: boolean eglQuerySurface(android.opengl.EGLDisplay,android.opengl.EGLSurface,int,int[],int)>
<android.opengl.EGL14: boolean eglWaitClient()>
<android.opengl.EGL14: void <init>()>
<android.opengl.EGL14: int eglGetError()>
<android.opengl.EGL14: boolean eglTerminate(android.opengl.EGLDisplay)>
<android.opengl.EGL14: android.opengl.EGLContext eglCreateContext(android.opengl.EGLDisplay,android.opengl.EGLConfig,android.opengl.EGLContext,int[],int)>
<android.opengl.EGL14: boolean eglSwapBuffers(android.opengl.EGLDisplay,android.opengl.EGLSurface)>
<android.opengl.EGL14: android.opengl.EGLSurface eglCreatePbufferFromClientBuffer(android.opengl.EGLDisplay,int,int,android.opengl.EGLConfig,int[],int)>
<android.opengl.EGL14: android.opengl.EGLSurface eglCreateWindowSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,java.lang.Object,int[],int)>
<android.opengl.EGL14: boolean eglWaitGL()>
<android.opengl.EGL14: android.opengl.EGLDisplay eglGetCurrentDisplay()>
<android.opengl.EGL14: boolean eglBindTexImage(android.opengl.EGLDisplay,android.opengl.EGLSurface,int)>
<android.opengl.EGL14: boolean eglGetConfigs(android.opengl.EGLDisplay,android.opengl.EGLConfig[],int,int,int[],int)>
<android.opengl.EGL14: android.opengl.EGLDisplay eglGetDisplay(int)>
<android.content.ContentProviderResult: void <init>(android.os.Parcel)>
<android.content.ContentProviderResult: void <init>(android.net.Uri)>
<android.content.ContentProviderResult: int describeContents()>
<android.content.ContentProviderResult: void writeToParcel(android.os.Parcel,int)>
<android.content.ContentProviderResult: void <init>(int)>
<javax.xml.transform.SourceLocator: int getColumnNumber()>
<javax.xml.transform.SourceLocator: java.lang.String getPublicId()>
<javax.xml.transform.SourceLocator: int getLineNumber()>
<javax.xml.transform.SourceLocator: java.lang.String getSystemId()>
<java.util.function.Predicate: boolean test(T)>
<java.util.function.Predicate: java.util.function.Predicate isEqual(java.lang.Object)>
<java.util.function.Predicate: java.util.function.Predicate negate()>
<java.util.function.Predicate: java.util.function.Predicate or(java.util.function.Predicate)>
<java.util.function.Predicate: java.util.function.Predicate and(java.util.function.Predicate)>
<android.net.metrics.IpReachabilityEvent: void <init>(int)>
<dalvik.system.DexFile: java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)>
<dalvik.system.DexFile: boolean isDexOptNeeded(java.lang.String)>
<dalvik.system.DexFile: java.util.Enumeration entries()>
<dalvik.system.DexFile: java.lang.String getName()>
<dalvik.system.DexFile: void close()>
<dalvik.system.DexFile: void <init>(String)>
<dalvik.system.DexFile: void <init>(java.io.File)>
<dalvik.system.DexFile: dalvik.system.DexFile loadDex(java.lang.String,java.lang.String,int)>
<java.io.LineNumberReader: void <init>(java.io.Reader,int)>
<java.io.LineNumberReader: void <init>(java.io.Reader)>
<java.io.LineNumberReader: void setLineNumber(int)>
<java.io.LineNumberReader: int getLineNumber()>
<android.net.RssiCurve: void <init>(int,int,byte[],int)>
<android.net.RssiCurve: void writeToParcel(android.os.Parcel,int)>
<android.net.RssiCurve: byte lookupScore(int,boolean)>
<android.net.RssiCurve: int describeContents()>
<android.net.RssiCurve: void <init>(int,int,byte[])>
<android.net.RssiCurve: byte lookupScore(int)>
<android.telephony.NetworkRegistrationInfo: java.util.List getAvailableServices()>
<android.telephony.NetworkRegistrationInfo: int getAccessNetworkTechnology()>
<android.telephony.NetworkRegistrationInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.NetworkRegistrationInfo: int describeContents()>
<android.telephony.NetworkRegistrationInfo: android.telephony.DataSpecificRegistrationInfo getDataSpecificInfo()>
<android.telephony.NetworkRegistrationInfo: android.telephony.CellIdentity getCellIdentity()>
<android.telephony.NetworkRegistrationInfo: int getTransportType()>
<android.telephony.NetworkRegistrationInfo: boolean isEmergencyEnabled()>
<android.telephony.NetworkRegistrationInfo: boolean isRoaming()>
<android.telephony.NetworkRegistrationInfo: int getRegistrationState()>
<android.telephony.NetworkRegistrationInfo: int getRejectCause()>
<android.telephony.NetworkRegistrationInfo: int getDomain()>
<android.telephony.NetworkRegistrationInfo: int getRoamingType()>
<java.security.cert.Certificate: java.lang.String toString()>
<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>
<java.security.cert.Certificate: void verify(java.security.PublicKey)>
<java.security.cert.Certificate: void verify(java.security.PublicKey,java.lang.String)>
<java.security.cert.Certificate: void <init>(String)>
<java.security.cert.Certificate: java.lang.String getType()>
<java.security.cert.Certificate: void verify(java.security.PublicKey,java.security.Provider)>
<java.security.cert.Certificate: byte[] getEncoded()>
<java.security.cert.Certificate: java.lang.Object writeReplace()>
<android.os.PatternMatcher: int getType()>
<android.os.PatternMatcher: boolean match(java.lang.String)>
<android.os.PatternMatcher: void writeToParcel(android.os.Parcel,int)>
<android.os.PatternMatcher: int describeContents()>
<android.os.PatternMatcher: void <init>(android.os.Parcel)>
<android.os.PatternMatcher: java.lang.String getPath()>
<android.os.PatternMatcher: void <init>(String,int)>
<android.graphics.drawable.RippleDrawable: void setRadius(int)>
<android.graphics.drawable.RippleDrawable: int getRadius()>
<android.graphics.drawable.RippleDrawable: void setColor(android.content.res.ColorStateList)>
<android.graphics.drawable.RippleDrawable: void <init>(android.content.res.ColorStateList,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.media.AudioManager.AudioRecordingCallback: void <init>()>
<android.media.AudioManager.AudioRecordingCallback: void onRecordingConfigChanged(java.util.List)>
<android.print.PrintDocumentInfo.Builder: android.print.PrintDocumentInfo.Builder setPageCount(int)>
<android.print.PrintDocumentInfo.Builder: android.print.PrintDocumentInfo.Builder setContentType(int)>
<android.print.PrintDocumentInfo.Builder: void <init>(String)>
<android.print.PrintDocumentInfo.Builder: android.print.PrintDocumentInfo build()>
<android.content.pm.PackageManager.NameNotFoundException: void <init>(String)>
<android.content.pm.PackageManager.NameNotFoundException: void <init>()>
<android.content.res.ObbScanner: android.content.res.ObbInfo getObbInfo(java.lang.String)>
<android.media.session.MediaController.TransportControls: void playFromMediaId(java.lang.String,android.os.Bundle)>
<android.media.session.MediaController.TransportControls: void prepareFromUri(android.net.Uri,android.os.Bundle)>
<android.media.session.MediaController.TransportControls: void prepare()>
<android.media.session.MediaController.TransportControls: void sendCustomAction(android.media.session.PlaybackState.CustomAction,android.os.Bundle)>
<android.media.session.MediaController.TransportControls: void playFromSearch(java.lang.String,android.os.Bundle)>
<android.media.session.MediaController.TransportControls: void sendCustomAction(java.lang.String,android.os.Bundle)>
<android.media.session.MediaController.TransportControls: void skipToNext()>
<android.media.session.MediaController.TransportControls: void skipToPrevious()>
<android.media.session.MediaController.TransportControls: void fastForward()>
<android.media.session.MediaController.TransportControls: void play()>
<android.media.session.MediaController.TransportControls: void skipToQueueItem(long)>
<android.media.session.MediaController.TransportControls: void prepareFromMediaId(java.lang.String,android.os.Bundle)>
<android.media.session.MediaController.TransportControls: void setRating(android.media.Rating)>
<android.media.session.MediaController.TransportControls: void prepareFromSearch(java.lang.String,android.os.Bundle)>
<android.media.session.MediaController.TransportControls: void rewind()>
<android.media.session.MediaController.TransportControls: void playFromUri(android.net.Uri,android.os.Bundle)>
<android.media.session.MediaController.TransportControls: void seekTo(long)>
<android.media.session.MediaController.TransportControls: void pause()>
<android.media.session.MediaController.TransportControls: void setPlaybackSpeed(float)>
<android.media.session.MediaController.TransportControls: void stop()>
<java.nio.BufferOverflowException: void <init>()>
<android.service.autofill.SaveCallback: void onSuccess()>
<android.service.autofill.SaveCallback: void onSuccess(android.content.IntentSender)>
<android.service.autofill.SaveCallback: void onFailure(CharSequence)>
<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>
<java.util.zip.InflaterInputStream: void fill()>
<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater,int)>
<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>
<android.graphics.BlurMaskFilter: void <init>(float,android.graphics.BlurMaskFilter.Blur)>
<javax.sql.DataSource extends javax.sql.CommonDataSource java.sql.Wrapper: java.sql.Connection getConnection(java.lang.String,java.lang.String)>
<javax.sql.DataSource extends javax.sql.CommonDataSource java.sql.Wrapper: java.sql.Connection getConnection()>
<android.content.SyncAdapterType: int describeContents()>
<android.content.SyncAdapterType: java.lang.String getSettingsActivity()>
<android.content.SyncAdapterType: boolean isUserVisible()>
<android.content.SyncAdapterType: boolean allowParallelSyncs()>
<android.content.SyncAdapterType: boolean supportsUploading()>
<android.content.SyncAdapterType: void writeToParcel(android.os.Parcel,int)>
<android.content.SyncAdapterType: void <init>(android.os.Parcel)>
<android.content.SyncAdapterType: android.content.SyncAdapterType newKey(java.lang.String,java.lang.String)>
<android.content.SyncAdapterType: boolean isAlwaysSyncable()>
<android.content.SyncAdapterType: void <init>(String,String,boolean,boolean)>
<android.app.ListFragment: void setListAdapter(android.widget.ListAdapter)>
<android.app.ListFragment: int getSelectedItemPosition()>
<android.app.ListFragment: void setSelection(int)>
<android.app.ListFragment: void <init>()>
<android.app.ListFragment: long getSelectedItemId()>
<android.app.ListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)>
<android.app.ListFragment: void setListShownNoAnimation(boolean)>
<android.app.ListFragment: android.widget.ListAdapter getListAdapter()>
<android.app.ListFragment: void setEmptyText(CharSequence)>
<android.app.ListFragment: android.widget.ListView getListView()>
<android.app.ListFragment: void setListShown(boolean)>
<java.util.concurrent.atomic.AtomicReference: V get()>
<java.util.concurrent.atomic.AtomicReference: V getAndUpdate(java.util.function.UnaryOperator)>
<java.util.concurrent.atomic.AtomicReference: void set(V)>
<java.util.concurrent.atomic.AtomicReference: V accumulateAndGet(V,java.util.function.BinaryOperator)>
<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(V,V)>
<java.util.concurrent.atomic.AtomicReference: void lazySet(V)>
<java.util.concurrent.atomic.AtomicReference: void <init>(V)>
<java.util.concurrent.atomic.AtomicReference: boolean weakCompareAndSet(V,V)>
<java.util.concurrent.atomic.AtomicReference: V getAndSet(V)>
<java.util.concurrent.atomic.AtomicReference: V getAndAccumulate(V,java.util.function.BinaryOperator)>
<java.util.concurrent.atomic.AtomicReference: V updateAndGet(java.util.function.UnaryOperator)>
<java.util.concurrent.atomic.AtomicReference: void <init>()>
<android.telecom.Connection.VideoProvider: void onSetDeviceOrientation(int)>
<android.telecom.Connection.VideoProvider: void onRequestConnectionDataUsage()>
<android.telecom.Connection.VideoProvider: void receiveSessionModifyResponse(int,android.telecom.VideoProfile,android.telecom.VideoProfile)>
<android.telecom.Connection.VideoProvider: void receiveSessionModifyRequest(android.telecom.VideoProfile)>
<android.telecom.Connection.VideoProvider: void onSetZoom(float)>
<android.telecom.Connection.VideoProvider: void onRequestCameraCapabilities()>
<android.telecom.Connection.VideoProvider: void onSendSessionModifyResponse(android.telecom.VideoProfile)>
<android.telecom.Connection.VideoProvider: void onSetDisplaySurface(android.view.Surface)>
<android.telecom.Connection.VideoProvider: void onSetPauseImage(android.net.Uri)>
<android.telecom.Connection.VideoProvider: void changeCameraCapabilities(android.telecom.VideoProfile.CameraCapabilities)>
<android.telecom.Connection.VideoProvider: void changePeerDimensions(int,int)>
<android.telecom.Connection.VideoProvider: void changeVideoQuality(int)>
<android.telecom.Connection.VideoProvider: void setCallDataUsage(long)>
<android.telecom.Connection.VideoProvider: void handleCallSessionEvent(int)>
<android.telecom.Connection.VideoProvider: void <init>()>
<android.telecom.Connection.VideoProvider: void onSetPreviewSurface(android.view.Surface)>
<android.telecom.Connection.VideoProvider: void onSendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>
<android.telecom.Connection.VideoProvider: void onSetCamera(java.lang.String)>
<android.webkit.WebMessage: java.lang.String getData()>
<android.webkit.WebMessage: android.webkit.WebMessagePort[] getPorts()>
<android.webkit.WebMessage: void <init>(String)>
<android.webkit.WebMessage: void <init>(String,android.webkit.WebMessagePort[])>
<android.bluetooth.le.TruncatedFilter: void <init>(android.bluetooth.le.ScanFilter,java.util.List)>
<android.bluetooth.le.TruncatedFilter: android.bluetooth.le.ScanFilter getFilter()>
<android.bluetooth.le.TruncatedFilter: java.util.List getStorageDescriptors()>
<javax.crypto.KeyAgreement: java.security.Provider getProvider()>
<javax.crypto.KeyAgreement: void init(java.security.Key,java.security.SecureRandom)>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String,java.security.Provider)>
<javax.crypto.KeyAgreement: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String,java.lang.String)>
<javax.crypto.KeyAgreement: void init(java.security.Key)>
<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>
<javax.crypto.KeyAgreement: javax.crypto.SecretKey generateSecret(java.lang.String)>
<javax.crypto.KeyAgreement: int generateSecret(byte[],int)>
<javax.crypto.KeyAgreement: void <init>(javax.crypto.KeyAgreementSpi,java.security.Provider,String)>
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>
<javax.crypto.KeyAgreement: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<javax.crypto.KeyAgreement: byte[] generateSecret()>
<javax.crypto.KeyAgreement: java.lang.String getAlgorithm()>
<android.widget.TextClock: void <init>(android.content.Context)>
<android.widget.TextClock: void setFormat24Hour(CharSequence)>
<android.widget.TextClock: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.TextClock: CharSequence getFormat12Hour()>
<android.widget.TextClock: boolean is24HourModeEnabled()>
<android.widget.TextClock: void setTimeZone(java.lang.String)>
<android.widget.TextClock: java.lang.String getTimeZone()>
<android.widget.TextClock: void setFormat12Hour(CharSequence)>
<android.widget.TextClock: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TextClock: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.TextClock: void disableClockTick()>
<android.widget.TextClock: CharSequence getFormat24Hour()>
<android.view.SurfaceHolder.Callback: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>
<android.view.SurfaceHolder.Callback: void surfaceCreated(android.view.SurfaceHolder)>
<android.view.SurfaceHolder.Callback: void surfaceDestroyed(android.view.SurfaceHolder)>
<java.util.jar.JarOutputStream: void <init>(java.io.OutputStream,java.util.jar.Manifest)>
<java.util.jar.JarOutputStream: void <init>(java.io.OutputStream)>
<java.security.Permissions: java.util.Enumeration elements()>
<java.security.Permissions: void <init>()>
<java.security.Permissions: void add(java.security.Permission)>
<java.security.Permissions: boolean implies(java.security.Permission)>
<java.io.OutputStream: void flush()>
<java.io.OutputStream: void write(int)>
<java.io.OutputStream: void close()>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void <init>()>
<java.io.OutputStream: void write(byte[],int,int)>
<java.security.SecureClassLoader: void <init>()>
<java.security.SecureClassLoader: void <init>(ClassLoader)>
<java.security.SecureClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.CodeSource)>
<java.security.SecureClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.CodeSource)>
<java.security.SecureClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>
<android.transition.ChangeTransform: void <init>()>
<android.transition.ChangeTransform: void captureStartValues(android.transition.TransitionValues)>
<android.transition.ChangeTransform: boolean getReparent()>
<android.transition.ChangeTransform: void setReparentWithOverlay(boolean)>
<android.transition.ChangeTransform: void setReparent(boolean)>
<android.transition.ChangeTransform: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.ChangeTransform: boolean getReparentWithOverlay()>
<android.transition.ChangeTransform: void captureEndValues(android.transition.TransitionValues)>
<android.app.FragmentManager.BackStackEntry: int getBreadCrumbTitleRes()>
<android.app.FragmentManager.BackStackEntry: int getId()>
<android.app.FragmentManager.BackStackEntry: CharSequence getBreadCrumbShortTitle()>
<android.app.FragmentManager.BackStackEntry: int getBreadCrumbShortTitleRes()>
<android.app.FragmentManager.BackStackEntry: CharSequence getBreadCrumbTitle()>
<android.app.FragmentManager.BackStackEntry: java.lang.String getName()>
<android.telecom.TelecomAnalytics.SessionTiming: void <init>(int,long)>
<android.telecom.TelecomAnalytics.SessionTiming: int describeContents()>
<android.telecom.TelecomAnalytics.SessionTiming: java.lang.Integer getKey()>
<android.telecom.TelecomAnalytics.SessionTiming: long getTime()>
<android.telecom.TelecomAnalytics.SessionTiming: void writeToParcel(android.os.Parcel,int)>
<android.graphics.PathMeasure: boolean nextContour()>
<android.graphics.PathMeasure: boolean getMatrix(float,android.graphics.Matrix,int)>
<android.graphics.PathMeasure: boolean getPosTan(float,float[],float[])>
<android.graphics.PathMeasure: boolean getSegment(float,float,android.graphics.Path,boolean)>
<android.graphics.PathMeasure: void <init>()>
<android.graphics.PathMeasure: boolean isClosed()>
<android.graphics.PathMeasure: void <init>(android.graphics.Path,boolean)>
<android.graphics.PathMeasure: void setPath(android.graphics.Path,boolean)>
<android.graphics.PathMeasure: float getLength()>
<android.view.contentcapture.DataRemovalRequest.Builder: android.view.contentcapture.DataRemovalRequest.Builder forEverything()>
<android.view.contentcapture.DataRemovalRequest.Builder: void <init>()>
<android.view.contentcapture.DataRemovalRequest.Builder: android.view.contentcapture.DataRemovalRequest.Builder addLocusId(android.content.LocusId,int)>
<android.view.contentcapture.DataRemovalRequest.Builder: android.view.contentcapture.DataRemovalRequest build()>
<android.graphics.Point: void set(int,int)>
<android.graphics.Point: void <init>()>
<android.graphics.Point: void <init>(android.graphics.Point)>
<android.graphics.Point: void offset(int,int)>
<android.graphics.Point: int describeContents()>
<android.graphics.Point: void <init>(int,int)>
<android.graphics.Point: void negate()>
<android.graphics.Point: void readFromParcel(android.os.Parcel)>
<android.graphics.Point: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Point: boolean equals(int,int)>
<org.xml.sax.helpers.ParserFactory: org.xml.sax.Parser makeParser(java.lang.String)>
<org.xml.sax.helpers.ParserFactory: org.xml.sax.Parser makeParser()>
<android.telephony.euicc.EuiccCardManager: void disableProfile(java.lang.String,java.lang.String,boolean,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void prepareDownload(java.lang.String,byte[],byte[],byte[],byte[],java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void requestProfile(java.lang.String,java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void setNickname(java.lang.String,java.lang.String,java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void setDefaultSmdpAddress(java.lang.String,java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void requestDefaultSmdpAddress(java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void authenticateServer(java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void listNotifications(java.lang.String,@android.telephony.euicc.EuiccNotification.Eventint,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void requestEuiccInfo2(java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void switchToProfile(java.lang.String,java.lang.String,boolean,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void deleteProfile(java.lang.String,java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void cancelSession(java.lang.String,byte[],@android.telephony.euicc.EuiccCardManager.CancelReasonint,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void loadBoundProfilePackage(java.lang.String,byte[],java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void resetMemory(java.lang.String,@android.telephony.euicc.EuiccCardManager.ResetOptionint,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void removeNotificationFromList(java.lang.String,int,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void retrieveNotification(java.lang.String,int,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void requestRulesAuthTable(java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void requestAllProfiles(java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void requestEuiccChallenge(java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void retrieveNotificationList(java.lang.String,@android.telephony.euicc.EuiccNotification.Eventint,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void requestEuiccInfo1(java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.telephony.euicc.EuiccCardManager: void requestSmdsAddress(java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager.ResultCallback)>
<android.media.MediaPlayer.OnVideoSizeChangedListener: void onVideoSizeChanged(android.media.MediaPlayer,int,int)>
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setHeader(android.widget.RemoteViews)>
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setFieldClassificationIds(android.view.autofill.AutofillId...)>
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setAuthentication(android.view.autofill.AutofillId[],android.content.IntentSender,android.widget.RemoteViews)>
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setIgnoredIds(android.view.autofill.AutofillId...)>
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder disableAutofill(long)>
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setClientState(android.os.Bundle)>
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setSaveInfo(android.service.autofill.SaveInfo)>
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setFooter(android.widget.RemoteViews)>
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder addDataset(android.service.autofill.Dataset)>
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse build()>
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setUserData(android.service.autofill.UserData)>
<android.service.autofill.FillResponse.Builder: android.service.autofill.FillResponse.Builder setFlags(int)>
<android.service.autofill.FillResponse.Builder: void <init>()>
<android.icu.text.SimpleDateFormat: void <init>(String,android.icu.text.DateFormatSymbols)>
<android.icu.text.SimpleDateFormat: int matchQuarterString(java.lang.String,int,int,java.lang.String[],android.icu.util.Calendar)>
<android.icu.text.SimpleDateFormat: android.icu.text.DateFormatSymbols getDateFormatSymbols()>
<android.icu.text.SimpleDateFormat: java.util.Date get2DigitYearStart()>
<android.icu.text.SimpleDateFormat: void <init>(String,String,android.icu.util.ULocale)>
<android.icu.text.SimpleDateFormat: void setDateFormatSymbols(android.icu.text.DateFormatSymbols)>
<android.icu.text.SimpleDateFormat: void <init>(String)>
<android.icu.text.SimpleDateFormat: void applyLocalizedPattern(java.lang.String)>
<android.icu.text.SimpleDateFormat: void <init>()>
<android.icu.text.SimpleDateFormat: android.icu.text.DateFormatSymbols getSymbols()>
<android.icu.text.SimpleDateFormat: int matchString(java.lang.String,int,int,java.lang.String[],android.icu.util.Calendar)>
<android.icu.text.SimpleDateFormat: void parse(java.lang.String,android.icu.util.Calendar,java.text.ParsePosition)>
<android.icu.text.SimpleDateFormat: void applyPattern(java.lang.String)>
<android.icu.text.SimpleDateFormat: int subParse(java.lang.String,int,char,int,boolean,boolean,boolean[],android.icu.util.Calendar)>
<android.icu.text.SimpleDateFormat: java.lang.String zeroPaddingNumber(long,int,int)>
<android.icu.text.SimpleDateFormat: android.icu.text.NumberFormat getNumberFormat(char)>
<android.icu.text.SimpleDateFormat: void setTimeZoneFormat(android.icu.text.TimeZoneFormat)>
<android.icu.text.SimpleDateFormat: android.icu.text.TimeZoneFormat getTimeZoneFormat()>
<android.icu.text.SimpleDateFormat: void setNumberFormat(java.lang.String,android.icu.text.NumberFormat)>
<android.icu.text.SimpleDateFormat: java.lang.String toPattern()>
<android.icu.text.SimpleDateFormat: android.icu.text.DateFormat.Field patternCharToDateFormatField(char)>
<android.icu.text.SimpleDateFormat: void <init>(String,android.icu.util.ULocale)>
<android.icu.text.SimpleDateFormat: java.lang.StringBuffer format(android.icu.util.Calendar,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.SimpleDateFormat: java.lang.String toLocalizedPattern()>
<android.icu.text.SimpleDateFormat: java.lang.String subFormat(char,int,int,java.text.FieldPosition,android.icu.text.DateFormatSymbols,android.icu.util.Calendar)>
<android.icu.text.SimpleDateFormat: void <init>(String,java.util.Locale)>
<android.icu.text.SimpleDateFormat: void set2DigitYearStart(java.util.Date)>
<android.widget.ViewFlipper: void startFlipping()>
<android.widget.ViewFlipper: void <init>(android.content.Context)>
<android.widget.ViewFlipper: void setAutoStart(boolean)>
<android.widget.ViewFlipper: void stopFlipping()>
<android.widget.ViewFlipper: void setFlipInterval(int)>
<android.widget.ViewFlipper: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ViewFlipper: boolean isAutoStart()>
<android.widget.ViewFlipper: int getFlipInterval()>
<android.widget.ViewFlipper: boolean isFlipping()>
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>
<java.net.HttpURLConnection: boolean getFollowRedirects()>
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>
<java.net.HttpURLConnection: void setChunkedStreamingMode(int)>
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>
<java.net.HttpURLConnection: void setFollowRedirects(boolean)>
<java.net.HttpURLConnection: boolean getInstanceFollowRedirects()>
<java.net.HttpURLConnection: int getResponseCode()>
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(long)>
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>
<java.net.HttpURLConnection: boolean usingProxy()>
<java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<java.net.HttpURLConnection: void <init>(java.net.URL)>
<java.net.HttpURLConnection: void disconnect()>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>
<android.provider.Settings.SettingNotFoundException: void <init>(String)>
<android.service.autofill.FillContext: android.view.autofill.AutofillId getFocusedId()>
<android.service.autofill.FillContext: int getRequestId()>
<android.service.autofill.FillContext: android.app.assist.AssistStructure getStructure()>
<android.service.autofill.FillContext: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.FillContext: int describeContents()>
<android.graphics.text.LineBreaker.Builder: android.graphics.text.LineBreaker.Builder setJustificationMode(int)>
<android.graphics.text.LineBreaker.Builder: android.graphics.text.LineBreaker.Builder setHyphenationFrequency(int)>
<android.graphics.text.LineBreaker.Builder: android.graphics.text.LineBreaker.Builder setIndents(int[])>
<android.graphics.text.LineBreaker.Builder: android.graphics.text.LineBreaker.Builder setBreakStrategy(int)>
<android.graphics.text.LineBreaker.Builder: void <init>()>
<android.graphics.text.LineBreaker.Builder: android.graphics.text.LineBreaker build()>
<java.io.Closeable extends java.lang.AutoCloseable: void close()>
<android.content.DialogInterface.OnClickListener: void onClick(android.content.DialogInterface,int)>
<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)>
<java.io.PushbackInputStream: void unread(int)>
<java.io.PushbackInputStream: void unread(byte[],int,int)>
<java.io.PushbackInputStream: void <init>(java.io.InputStream)>
<java.io.PushbackInputStream: void unread(byte[])>
<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[])>
<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel setOption(java.net.SocketOption,T)>
<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel connect(java.net.SocketAddress)>
<java.nio.channels.DatagramChannel: java.net.SocketAddress receive(java.nio.ByteBuffer)>
<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[])>
<java.nio.channels.DatagramChannel: int send(java.nio.ByteBuffer,java.net.SocketAddress)>
<java.nio.channels.DatagramChannel: int validOps()>
<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel disconnect()>
<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>
<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open(java.net.ProtocolFamily)>
<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel bind(java.net.SocketAddress)>
<java.nio.channels.DatagramChannel: boolean isConnected()>
<java.nio.channels.DatagramChannel: java.net.SocketAddress getRemoteAddress()>
<java.nio.channels.DatagramChannel: void <init>(java.nio.channels.spi.SelectorProvider)>
<java.nio.channels.DatagramChannel: java.net.DatagramSocket socket()>
<android.provider.SearchRecentSuggestions: void truncateHistory(android.content.ContentResolver,int)>
<android.provider.SearchRecentSuggestions: void clearHistory()>
<android.provider.SearchRecentSuggestions: void saveRecentQuery(java.lang.String,java.lang.String)>
<android.provider.SearchRecentSuggestions: void <init>(android.content.Context,String,int)>
<android.animation.BidirectionalTypeConverter: android.animation.BidirectionalTypeConverter invert()>
<android.animation.BidirectionalTypeConverter: T convertBack(V)>
<android.animation.BidirectionalTypeConverter: void <init>(Class,Class)>
<android.view.TouchDelegate: android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo getTouchDelegateInfo()>
<android.view.TouchDelegate: void <init>(android.graphics.Rect,android.view.View)>
<android.view.TouchDelegate: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.TouchDelegate: boolean onTouchExplorationHoverEvent(android.view.MotionEvent)>
<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: void endDocument()>
<org.xmlpull.v1.XmlSerializer: java.lang.Object getProperty(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>
<org.xmlpull.v1.XmlSerializer: void cdsect(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>
<org.xmlpull.v1.XmlSerializer: void setFeature(java.lang.String,boolean)>
<org.xmlpull.v1.XmlSerializer: void setProperty(java.lang.String,java.lang.Object)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>
<org.xmlpull.v1.XmlSerializer: void flush()>
<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>
<org.xmlpull.v1.XmlSerializer: void docdecl(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: int getDepth()>
<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.Writer)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(char[],int,int)>
<org.xmlpull.v1.XmlSerializer: void comment(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: void processingInstruction(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: java.lang.String getPrefix(java.lang.String,boolean)>
<org.xmlpull.v1.XmlSerializer: void setPrefix(java.lang.String,java.lang.String)>
<org.xmlpull.v1.XmlSerializer: java.lang.String getNamespace()>
<org.xmlpull.v1.XmlSerializer: void ignorableWhitespace(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: void entityRef(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: boolean getFeature(java.lang.String)>
<org.xmlpull.v1.XmlSerializer: java.lang.String getName()>
<android.hardware.usb.UsbDevice: java.lang.String getDeviceName(int)>
<android.hardware.usb.UsbDevice: java.lang.String getVersion()>
<android.hardware.usb.UsbDevice: int getInterfaceCount()>
<android.hardware.usb.UsbDevice: android.hardware.usb.UsbInterface getInterface(int)>
<android.hardware.usb.UsbDevice: void writeToParcel(android.os.Parcel,int)>
<android.hardware.usb.UsbDevice: int getDeviceClass()>
<android.hardware.usb.UsbDevice: int getConfigurationCount()>
<android.hardware.usb.UsbDevice: int getDeviceSubclass()>
<android.hardware.usb.UsbDevice: int describeContents()>
<android.hardware.usb.UsbDevice: java.lang.String getSerialNumber()>
<android.hardware.usb.UsbDevice: android.hardware.usb.UsbConfiguration getConfiguration(int)>
<android.hardware.usb.UsbDevice: java.lang.String getDeviceName()>
<android.hardware.usb.UsbDevice: int getProductId()>
<android.hardware.usb.UsbDevice: java.lang.String getManufacturerName()>
<android.hardware.usb.UsbDevice: int getVendorId()>
<android.hardware.usb.UsbDevice: java.lang.String getProductName()>
<android.hardware.usb.UsbDevice: int getDeviceProtocol()>
<android.hardware.usb.UsbDevice: int getDeviceId()>
<android.hardware.usb.UsbDevice: int getDeviceId(java.lang.String)>
<java.lang.CloneNotSupportedException: void <init>(String)>
<java.lang.CloneNotSupportedException: void <init>()>
<android.app.IntentService: android.os.IBinder onBind(android.content.Intent)>
<android.app.IntentService: void setIntentRedelivery(boolean)>
<android.app.IntentService: void onStart(android.content.Intent,int)>
<android.app.IntentService: void <init>(String)>
<android.app.IntentService: void onHandleIntent(android.content.Intent)>
<android.util.MutableInt: void <init>(int)>
<java.nio.channels.IllegalBlockingModeException: void <init>()>
<android.os.Handler: android.os.Message obtainMessage()>
<android.os.Handler: android.os.Message obtainMessage(int,int,int)>
<android.os.Handler: boolean postAtFrontOfQueue(Runnable)>
<android.os.Handler: void <init>(android.os.Handler.Callback)>
<android.os.Handler: boolean hasMessages(int,java.lang.Object)>
<android.os.Handler: boolean sendMessage(android.os.Message)>
<android.os.Handler: void handleMessage(android.os.Message)>
<android.os.Handler: void dump(android.util.Printer,java.lang.String)>
<android.os.Handler: void <init>(android.os.Looper,android.os.Handler.Callback)>
<android.os.Handler: boolean sendEmptyMessage(int)>
<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>
<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>
<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>
<android.os.Handler: void dispatchMessage(android.os.Message)>
<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>
<android.os.Handler: android.os.Handler createAsync(android.os.Looper)>
<android.os.Handler: boolean postDelayed(Runnable,java.lang.Object,long)>
<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>
<android.os.Handler: void <init>(android.os.Looper)>
<android.os.Handler: void removeCallbacks(Runnable,java.lang.Object)>
<android.os.Handler: void removeMessages(int)>
<android.os.Handler: void <init>()>
<android.os.Handler: android.os.Looper getLooper()>
<android.os.Handler: boolean hasMessages(int)>
<android.os.Handler: boolean postAtTime(Runnable,java.lang.Object,long)>
<android.os.Handler: android.os.Message obtainMessage(int)>
<android.os.Handler: boolean postAtTime(Runnable,long)>
<android.os.Handler: void removeMessages(int,java.lang.Object)>
<android.os.Handler: java.lang.String getMessageName(android.os.Message)>
<android.os.Handler: android.os.Handler createAsync(android.os.Looper,android.os.Handler.Callback)>
<android.os.Handler: void removeCallbacks(Runnable)>
<android.os.Handler: boolean post(Runnable)>
<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>
<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>
<android.os.Handler: boolean hasCallbacks(Runnable)>
<android.os.Handler: boolean sendEmptyMessageAtTime(int,long)>
<android.os.Handler: boolean postDelayed(Runnable,long)>
<android.graphics.Shader: void <init>()>
<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>
<android.graphics.Shader: boolean getLocalMatrix(android.graphics.Matrix)>
<java.net.JarURLConnection: java.lang.String getEntryName()>
<java.net.JarURLConnection: java.util.jar.Manifest getManifest()>
<java.net.JarURLConnection: java.net.URL getJarFileURL()>
<java.net.JarURLConnection: void <init>(java.net.URL)>
<java.net.JarURLConnection: java.security.cert.Certificate[] getCertificates()>
<java.net.JarURLConnection: java.util.jar.Attributes getAttributes()>
<java.net.JarURLConnection: java.util.jar.JarEntry getJarEntry()>
<java.net.JarURLConnection: java.util.jar.Attributes getMainAttributes()>
<java.net.JarURLConnection: java.util.jar.JarFile getJarFile()>
<android.media.midi.MidiReceiver: void flush()>
<android.media.midi.MidiReceiver: void send(byte[],int,int,long)>
<android.media.midi.MidiReceiver: void onSend(byte[],int,int,long)>
<android.media.midi.MidiReceiver: void send(byte[],int,int)>
<android.media.midi.MidiReceiver: int getMaxMessageSize()>
<android.media.midi.MidiReceiver: void onFlush()>
<android.media.midi.MidiReceiver: void <init>()>
<android.media.midi.MidiReceiver: void <init>(int)>
<android.security.ConfirmationAlreadyPresentingException: void <init>(String)>
<android.security.ConfirmationAlreadyPresentingException: void <init>()>
<java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>
<java.util.EnumSet: java.util.EnumSet copyOf(java.util.Collection)>
<java.util.EnumSet: java.util.EnumSet of(E,E,E)>
<java.util.EnumSet: java.util.EnumSet of(E)>
<java.util.EnumSet: java.util.EnumSet of(E,E)>
<java.util.EnumSet: java.util.EnumSet of(E,E,E,E,E)>
<java.util.EnumSet: java.util.EnumSet clone()>
<java.util.EnumSet: java.util.EnumSet complementOf(java.util.EnumSet)>
<java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>
<java.util.EnumSet: java.util.EnumSet of(E,E...)>
<java.util.EnumSet: java.util.EnumSet copyOf(java.util.EnumSet)>
<java.util.EnumSet: java.util.EnumSet of(E,E,E,E)>
<java.util.EnumSet: java.util.EnumSet range(E,E)>
<android.widget.Toolbar.OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>
<java.security.cert.PKIXRevocationChecker: java.util.Map getOcspResponses()>
<java.security.cert.PKIXRevocationChecker: java.util.List getOcspExtensions()>
<java.security.cert.PKIXRevocationChecker: void setOcspResponder(java.net.URI)>
<java.security.cert.PKIXRevocationChecker: java.util.Set getOptions()>
<java.security.cert.PKIXRevocationChecker: void setOptions(java.util.Set)>
<java.security.cert.PKIXRevocationChecker: java.net.URI getOcspResponder()>
<java.security.cert.PKIXRevocationChecker: java.security.cert.X509Certificate getOcspResponderCert()>
<java.security.cert.PKIXRevocationChecker: void <init>()>
<java.security.cert.PKIXRevocationChecker: void setOcspExtensions(java.util.List)>
<java.security.cert.PKIXRevocationChecker: void setOcspResponderCert(java.security.cert.X509Certificate)>
<java.security.cert.PKIXRevocationChecker: java.util.List getSoftFailExceptions()>
<java.security.cert.PKIXRevocationChecker: void setOcspResponses(java.util.Map)>
<java.security.cert.PKIXRevocationChecker: java.security.cert.PKIXRevocationChecker clone()>
<android.net.wifi.RttManager.ResponderCallback: void <init>()>
<android.net.wifi.RttManager.ResponderCallback: void onResponderEnableFailure(int)>
<android.net.wifi.RttManager.ResponderCallback: void onResponderEnabled(android.net.wifi.RttManager.ResponderConfig)>
<android.view.textclassifier.TextClassification.Request.Builder: android.view.textclassifier.TextClassification.Request.Builder setReferenceTime(java.time.ZonedDateTime)>
<android.view.textclassifier.TextClassification.Request.Builder: void <init>(from=0) int)>
<android.view.textclassifier.TextClassification.Request.Builder: android.view.textclassifier.TextClassification.Request.Builder setDefaultLocales(android.os.LocaleList)>
<android.view.textclassifier.TextClassification.Request.Builder: android.view.textclassifier.TextClassification.Request build()>
<android.view.textclassifier.TextClassification.Request.Builder: android.view.textclassifier.TextClassification.Request.Builder setExtras(android.os.Bundle)>
<android.content.ComponentCallbacks2 extends android.content.ComponentCallbacks: void onTrimMemory(int)>
<android.webkit.JsResult.ResultReceiver: void onJsResultComplete(android.webkit.JsResult)>
<android.util.proto.WireTypeMismatchException: void <init>(String)>
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setIncludeTxPower(boolean)>
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setSecondaryPhy(int)>
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setAnonymous(boolean)>
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setInterval(int)>
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setLegacyMode(boolean)>
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setPrimaryPhy(int)>
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setScannable(boolean)>
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters build()>
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setConnectable(boolean)>
<android.bluetooth.le.AdvertisingSetParameters.Builder: void <init>()>
<android.bluetooth.le.AdvertisingSetParameters.Builder: android.bluetooth.le.AdvertisingSetParameters.Builder setTxPowerLevel(int)>
<android.transition.Explode: void <init>()>
<android.transition.Explode: void <init>(android.content.Context,android.util.AttributeSet)>
<android.media.SoundPool: void finalize()>
<android.media.SoundPool: void resume(int)>
<android.media.SoundPool: void setOnLoadCompleteListener(android.media.SoundPool.OnLoadCompleteListener)>
<android.media.SoundPool: void <init>(int,int,int)>
<android.media.SoundPool: void setRate(int,float)>
<android.media.SoundPool: void setVolume(int,float,float)>
<android.media.SoundPool: int load(android.content.Context,int,int)>
<android.media.SoundPool: void release()>
<android.media.SoundPool: void setPriority(int,int)>
<android.media.SoundPool: void stop(int)>
<android.media.SoundPool: int load(java.lang.String,int)>
<android.media.SoundPool: int load(java.io.FileDescriptor,long,long,int)>
<android.media.SoundPool: void autoResume()>
<android.media.SoundPool: boolean unload(int)>
<android.media.SoundPool: void autoPause()>
<android.media.SoundPool: void setLoop(int,int)>
<android.media.SoundPool: int load(android.content.res.AssetFileDescriptor,int)>
<android.media.SoundPool: void pause(int)>
<android.media.SoundPool: int play(int,float,float,int,int,float)>
<android.text.StaticLayout.Builder: android.text.StaticLayout build()>
<android.text.StaticLayout.Builder: android.text.StaticLayout.Builder setJustificationMode(int)>
<android.text.StaticLayout.Builder: android.text.StaticLayout.Builder setAlignment(android.text.Layout.Alignment)>
<android.text.StaticLayout.Builder: android.text.StaticLayout.Builder setEllipsizedWidth(int)>
<android.text.StaticLayout.Builder: android.text.StaticLayout.Builder setEllipsize(android.text.TextUtils.TruncateAt)>
<android.text.StaticLayout.Builder: android.text.StaticLayout.Builder setMaxLines(int)>
<android.text.StaticLayout.Builder: android.text.StaticLayout.Builder setIndents(int[],int[])>
<android.text.StaticLayout.Builder: android.text.StaticLayout.Builder setUseLineSpacingFromFallbacks(boolean)>
<android.text.StaticLayout.Builder: android.text.StaticLayout.Builder obtain(CharSequence,int,int,android.text.TextPaint,int)>
<android.text.StaticLayout.Builder: android.text.StaticLayout.Builder setHyphenationFrequency(int)>
<android.text.StaticLayout.Builder: android.text.StaticLayout.Builder setLineSpacing(float,float)>
<android.text.StaticLayout.Builder: android.text.StaticLayout.Builder setTextDirection(android.text.TextDirectionHeuristic)>
<android.text.StaticLayout.Builder: android.text.StaticLayout.Builder setText(CharSequence)>
<android.text.StaticLayout.Builder: android.text.StaticLayout.Builder setBreakStrategy(int)>
<android.text.StaticLayout.Builder: android.text.StaticLayout.Builder setIncludePad(boolean)>
<java.security.spec.ECFieldFp: void <init>(java.math.BigInteger)>
<java.security.spec.ECFieldFp: java.math.BigInteger getP()>
<java.security.spec.ECFieldFp: int getFieldSize()>
<android.view.animation.AlphaAnimation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AlphaAnimation: void <init>(float,float)>
<android.media.session.MediaSessionManager.RemoteUserInfo: java.lang.String getPackageName()>
<android.media.session.MediaSessionManager.RemoteUserInfo: int getPid()>
<android.media.session.MediaSessionManager.RemoteUserInfo: void <init>(String,int,int)>
<android.media.session.MediaSessionManager.RemoteUserInfo: int getUid()>
<java.security.cert.TrustAnchor: javax.security.auth.x500.X500Principal getCA()>
<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>
<java.security.cert.TrustAnchor: java.lang.String getCAName()>
<java.security.cert.TrustAnchor: java.security.PublicKey getCAPublicKey()>
<java.security.cert.TrustAnchor: void <init>(String,java.security.PublicKey,byte[])>
<java.security.cert.TrustAnchor: void <init>(javax.security.auth.x500.X500Principal,java.security.PublicKey,byte[])>
<java.security.cert.TrustAnchor: void <init>(java.security.cert.X509Certificate,byte[])>
<java.security.cert.TrustAnchor: byte[] getNameConstraints()>
<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>
<javax.xml.transform.dom.DOMSource: java.lang.String getSystemId()>
<javax.xml.transform.dom.DOMSource: void setNode(org.w3c.dom.Node)>
<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node,String)>
<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>
<javax.xml.transform.dom.DOMSource: org.w3c.dom.Node getNode()>
<javax.xml.transform.dom.DOMSource: void setSystemId(java.lang.String)>
<javax.xml.transform.dom.DOMSource: void <init>()>
<javax.xml.xpath.XPath: javax.xml.namespace.NamespaceContext getNamespaceContext()>
<javax.xml.xpath.XPath: javax.xml.xpath.XPathVariableResolver getXPathVariableResolver()>
<javax.xml.xpath.XPath: void reset()>
<javax.xml.xpath.XPath: javax.xml.xpath.XPathFunctionResolver getXPathFunctionResolver()>
<javax.xml.xpath.XPath: java.lang.Object evaluate(java.lang.String,org.xml.sax.InputSource,javax.xml.namespace.QName)>
<javax.xml.xpath.XPath: java.lang.String evaluate(java.lang.String,org.xml.sax.InputSource)>
<javax.xml.xpath.XPath: java.lang.String evaluate(java.lang.String,java.lang.Object)>
<javax.xml.xpath.XPath: void setXPathFunctionResolver(javax.xml.xpath.XPathFunctionResolver)>
<javax.xml.xpath.XPath: javax.xml.xpath.XPathExpression compile(java.lang.String)>
<javax.xml.xpath.XPath: void setNamespaceContext(javax.xml.namespace.NamespaceContext)>
<javax.xml.xpath.XPath: java.lang.Object evaluate(java.lang.String,java.lang.Object,javax.xml.namespace.QName)>
<javax.xml.xpath.XPath: void setXPathVariableResolver(javax.xml.xpath.XPathVariableResolver)>
<android.hardware.hdmi.HdmiRecordListener.TimerStatusData: boolean isProgrammed()>
<android.hardware.hdmi.HdmiRecordListener.TimerStatusData: boolean isOverlapped()>
<android.hardware.hdmi.HdmiRecordListener.TimerStatusData: int getDurationMinute()>
<android.hardware.hdmi.HdmiRecordListener.TimerStatusData: int getMediaInfo()>
<android.hardware.hdmi.HdmiRecordListener.TimerStatusData: int getProgrammedInfo()>
<android.hardware.hdmi.HdmiRecordListener.TimerStatusData: int getDurationHour()>
<android.hardware.hdmi.HdmiRecordListener.TimerStatusData: int getNotProgammedError()>
<android.hardware.hdmi.HdmiRecordListener.TimerStatusData: int getExtraError()>
<javax.crypto.SecretKeyFactorySpi: javax.crypto.SecretKey engineTranslateKey(javax.crypto.SecretKey)>
<javax.crypto.SecretKeyFactorySpi: javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)>
<javax.crypto.SecretKeyFactorySpi: void <init>()>
<javax.crypto.SecretKeyFactorySpi: java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey,java.lang.Class)>
<android.renderscript.ScriptGroup.Closure: android.renderscript.ScriptGroup.Future getReturn()>
<android.renderscript.ScriptGroup.Closure: android.renderscript.ScriptGroup.Future getGlobal(android.renderscript.Script.FieldID)>
<android.service.autofill.augmented.FillWindow: void <init>()>
<android.service.autofill.augmented.FillWindow: boolean update(android.service.autofill.augmented.PresentationParams.Area,android.view.View,long)>
<android.service.autofill.augmented.FillWindow: void destroy()>
<android.service.autofill.FieldClassification: java.util.List getMatches()>
<android.service.quicksettings.TileService: void onClick()>
<android.service.quicksettings.TileService: boolean isLocked()>
<android.service.quicksettings.TileService: void onTileAdded()>
<android.service.quicksettings.TileService: android.os.IBinder onBind(android.content.Intent)>
<android.service.quicksettings.TileService: void setStatusIcon(android.graphics.drawable.Icon,java.lang.String)>
<android.service.quicksettings.TileService: void onStopListening()>
<android.service.quicksettings.TileService: void showDialog(android.app.Dialog)>
<android.service.quicksettings.TileService: void <init>()>
<android.service.quicksettings.TileService: void onStartListening()>
<android.service.quicksettings.TileService: void onTileRemoved()>
<android.service.quicksettings.TileService: void requestListeningState(android.content.Context,android.content.ComponentName)>
<android.service.quicksettings.TileService: boolean isQuickSettingsSupported()>
<android.service.quicksettings.TileService: void unlockAndRun(Runnable)>
<android.service.quicksettings.TileService: android.service.quicksettings.Tile getQsTile()>
<android.service.quicksettings.TileService: boolean isSecure()>
<android.service.quicksettings.TileService: void startActivityAndCollapse(android.content.Intent)>
<android.text.style.DrawableMarginSpan: void <init>(android.graphics.drawable.Drawable)>
<android.text.style.DrawableMarginSpan: int getLeadingMargin(boolean)>
<android.text.style.DrawableMarginSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,CharSequence,int,int,boolean,android.text.Layout)>
<android.text.style.DrawableMarginSpan: void chooseHeight(CharSequence,int,int,int,int,android.graphics.Paint.FontMetricsInt)>
<android.text.style.DrawableMarginSpan: void <init>(android.graphics.drawable.Drawable,int)>
<android.telephony.DataSpecificRegistrationInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.DataSpecificRegistrationInfo: int describeContents()>
<android.telephony.DataSpecificRegistrationInfo: android.telephony.LteVopsSupportInfo getLteVopsSupportInfo()>
<android.hardware.Camera.AutoFocusMoveCallback: void onAutoFocusMoving(boolean,android.hardware.Camera)>
<android.media.AudioTrack.OnPlaybackPositionUpdateListener: void onPeriodicNotification(android.media.AudioTrack)>
<android.media.AudioTrack.OnPlaybackPositionUpdateListener: void onMarkerReached(android.media.AudioTrack)>
<android.webkit.WebViewRenderProcess: boolean terminate()>
<android.webkit.WebViewRenderProcess: void <init>()>
<android.graphics.drawable.Animatable2 extends android.graphics.drawable.Animatable: void clearAnimationCallbacks()>
<android.graphics.drawable.Animatable2 extends android.graphics.drawable.Animatable: void registerAnimationCallback(android.graphics.drawable.Animatable2.AnimationCallback)>
<android.graphics.drawable.Animatable2 extends android.graphics.drawable.Animatable: boolean unregisterAnimationCallback(android.graphics.drawable.Animatable2.AnimationCallback)>
<android.graphics.drawable.ClipDrawable: void <init>(android.graphics.drawable.Drawable,int,int)>
<android.transition.TransitionValues: void <init>()>
<android.transition.TransitionValues: void <init>(android.view.View)>
<android.service.wallpaper.WallpaperService.Engine: void setOffsetNotificationsEnabled(boolean)>
<android.service.wallpaper.WallpaperService.Engine: android.content.Context getDisplayContext()>
<android.service.wallpaper.WallpaperService.Engine: void onAmbientModeChanged(boolean,long)>
<android.service.wallpaper.WallpaperService.Engine: void onCreate(android.view.SurfaceHolder)>
<android.service.wallpaper.WallpaperService.Engine: android.app.WallpaperColors onComputeColors()>
<android.service.wallpaper.WallpaperService.Engine: void onOffsetsChanged(float,float,float,float,int,int)>
<android.service.wallpaper.WallpaperService.Engine: void onApplyWindowInsets(android.view.WindowInsets)>
<android.service.wallpaper.WallpaperService.Engine: boolean isInAmbientMode()>
<android.service.wallpaper.WallpaperService.Engine: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.service.wallpaper.WallpaperService.Engine: void onDestroy()>
<android.service.wallpaper.WallpaperService.Engine: void onSurfaceChanged(android.view.SurfaceHolder,int,int,int)>
<android.service.wallpaper.WallpaperService.Engine: android.view.SurfaceHolder getSurfaceHolder()>
<android.service.wallpaper.WallpaperService.Engine: void onSurfaceRedrawNeeded(android.view.SurfaceHolder)>
<android.service.wallpaper.WallpaperService.Engine: void onTouchEvent(android.view.MotionEvent)>
<android.service.wallpaper.WallpaperService.Engine: void onVisibilityChanged(boolean)>
<android.service.wallpaper.WallpaperService.Engine: void onSurfaceCreated(android.view.SurfaceHolder)>
<android.service.wallpaper.WallpaperService.Engine: void onSurfaceDestroyed(android.view.SurfaceHolder)>
<android.service.wallpaper.WallpaperService.Engine: boolean isPreview()>
<android.service.wallpaper.WallpaperService.Engine: void setTouchEventsEnabled(boolean)>
<android.service.wallpaper.WallpaperService.Engine: void notifyColorsChanged()>
<android.service.wallpaper.WallpaperService.Engine: void onDesiredSizeChanged(int,int)>
<android.service.wallpaper.WallpaperService.Engine: int getDesiredMinimumWidth()>
<android.service.wallpaper.WallpaperService.Engine: android.os.Bundle onCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)>
<android.service.wallpaper.WallpaperService.Engine: int getDesiredMinimumHeight()>
<android.service.wallpaper.WallpaperService.Engine: void <init>()>
<android.service.wallpaper.WallpaperService.Engine: boolean isVisible()>
<android.icu.util.Calendar.WeekData: void <init>(int,int,int,int,int,int)>
<android.preference.PreferenceActivity.Header: void readFromParcel(android.os.Parcel)>
<android.preference.PreferenceActivity.Header: int describeContents()>
<android.preference.PreferenceActivity.Header: CharSequence getTitle(android.content.res.Resources)>
<android.preference.PreferenceActivity.Header: CharSequence getBreadCrumbShortTitle(android.content.res.Resources)>
<android.preference.PreferenceActivity.Header: CharSequence getBreadCrumbTitle(android.content.res.Resources)>
<android.preference.PreferenceActivity.Header: void <init>()>
<android.preference.PreferenceActivity.Header: void writeToParcel(android.os.Parcel,int)>
<android.preference.PreferenceActivity.Header: CharSequence getSummary(android.content.res.Resources)>
<java.lang.StackTraceElement: void <init>(String,String,String,int)>
<java.lang.StackTraceElement: int getLineNumber()>
<java.lang.StackTraceElement: boolean isNativeMethod()>
<java.lang.StackTraceElement: java.lang.String getClassName()>
<java.lang.StackTraceElement: java.lang.String getMethodName()>
<java.lang.StackTraceElement: java.lang.String getFileName()>
<android.os.ParcelFileDescriptor.OnCloseListener: void onClose(java.io.IOException)>
<android.widget.SimpleAdapter.ViewBinder: boolean setViewValue(android.view.View,java.lang.Object,java.lang.String)>
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)>
<android.net.sip.SipManager: boolean isVoipSupported(android.content.Context)>
<android.net.sip.SipManager: boolean isSipWifiOnly(android.content.Context)>
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: java.lang.String getCallId(android.content.Intent)>
<android.net.sip.SipManager: java.lang.String getOfferSessionDescription(android.content.Intent)>
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall.Listener,int)>
<android.net.sip.SipManager: void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)>
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall.Listener,int)>
<android.net.sip.SipManager: void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall.Listener)>
<android.net.sip.SipManager: boolean isOpened(java.lang.String)>
<android.net.sip.SipManager: boolean isIncomingCallIntent(android.content.Intent)>
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)>
<android.net.sip.SipManager: android.net.sip.SipManager newInstance(android.content.Context)>
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: void close(java.lang.String)>
<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession.Listener)>
<android.net.sip.SipManager: boolean isApiSupported(android.content.Context)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream map(java.util.function.DoubleUnaryOperator)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream skip(long)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: double[] toArray()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.OptionalDouble average()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: void forEach(java.util.function.DoubleConsumer)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream flatMap(java.util.function.DoubleFunction)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream sequential()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: long count()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream parallel()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.PrimitiveIterator.OfDouble iterator()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.OptionalDouble max()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream of(double...)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: boolean noneMatch(java.util.function.DoublePredicate)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.DoubleSummaryStatistics summaryStatistics()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.OptionalDouble findAny()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.IntStream mapToInt(java.util.function.DoubleToIntFunction)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream sorted()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream limit(long)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream empty()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream peek(java.util.function.DoubleConsumer)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.OptionalDouble reduce(java.util.function.DoubleBinaryOperator)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.OptionalDouble min()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream concat(java.util.stream.DoubleStream,java.util.stream.DoubleStream)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: R collect(java.util.function.Supplier,java.util.function.ObjDoubleConsumer,java.util.function.BiConsumer)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream generate(java.util.function.DoubleSupplier)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream iterate(double,java.util.function.DoubleUnaryOperator)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: boolean allMatch(java.util.function.DoublePredicate)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: boolean anyMatch(java.util.function.DoublePredicate)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.Stream mapToObj(java.util.function.DoubleFunction)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: double reduce(double,java.util.function.DoubleBinaryOperator)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream of(double)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream filter(java.util.function.DoublePredicate)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.OptionalDouble findFirst()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: double sum()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.LongStream mapToLong(java.util.function.DoubleToLongFunction)>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.Spliterator.OfDouble spliterator()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream distinct()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.Stream boxed()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream.Builder builder()>
<java.util.stream.DoubleStream extends java.util.stream.BaseStream: void forEachOrdered(java.util.function.DoubleConsumer)>
<android.os.UserManager: java.lang.String getSeedAccountType()>
<android.os.UserManager: java.util.List getUserProfiles()>
<android.os.UserManager: void setUserIcon(android.graphics.Bitmap)>
<android.os.UserManager: boolean requestQuietModeEnabled(boolean,android.os.UserHandle)>
<android.os.UserManager: android.os.Bundle getApplicationRestrictions(java.lang.String)>
<android.os.UserManager: long getUserCreationTime(android.os.UserHandle)>
<android.os.UserManager: boolean isUserUnlocked(android.os.UserHandle)>
<android.os.UserManager: int getUserCount()>
<android.os.UserManager: android.os.Bundle getUserRestrictions()>
<android.os.UserManager: boolean isQuietModeEnabled(android.os.UserHandle)>
<android.os.UserManager: boolean isPrimaryUser()>
<android.os.UserManager: boolean isRestrictedProfile()>
<android.os.UserManager: boolean isGuestUser()>
<android.os.UserManager: long getSerialNumberForUser(android.os.UserHandle)>
<android.os.UserManager: android.os.Bundle getUserRestrictions(android.os.UserHandle)>
<android.os.UserManager: void setUserRestriction(java.lang.String,boolean)>
<android.os.UserManager: boolean isDemoUser()>
<android.os.UserManager: void setUserRestrictions(android.os.Bundle)>
<android.os.UserManager: boolean setRestrictionsChallenge(java.lang.String)>
<android.os.UserManager: android.os.PersistableBundle getSeedAccountOptions()>
<android.os.UserManager: android.os.UserHandle getUserForSerialNumber(long)>
<android.os.UserManager: boolean isRestrictedProfile(android.os.UserHandle)>
<android.os.UserManager: boolean isUserRunningOrStopping(android.os.UserHandle)>
<android.os.UserManager: boolean supportsMultipleUsers()>
<android.os.UserManager: android.os.UserHandle getProfileParent(android.os.UserHandle)>
<android.os.UserManager: boolean isUserUnlocked()>
<android.os.UserManager: android.graphics.Bitmap getUserIcon()>
<android.os.UserManager: boolean isSplitSystemUser()>
<android.os.UserManager: void setUserName(java.lang.String)>
<android.os.UserManager: android.content.Intent createUserCreationIntent(java.lang.String,java.lang.String,java.lang.String,android.os.PersistableBundle)>
<android.os.UserManager: boolean hasUserRestriction(java.lang.String)>
<android.os.UserManager: int getUserRestrictionSource(java.lang.String,android.os.UserHandle)>
<android.os.UserManager: boolean isManagedProfile(int)>
<android.os.UserManager: int getUserSwitchability()>
<android.os.UserManager: void setUserRestrictions(android.os.Bundle,android.os.UserHandle)>
<android.os.UserManager: boolean isUserAGoat()>
<android.os.UserManager: long[] getSerialNumbersOfUsers(boolean)>
<android.os.UserManager: java.util.List getUserRestrictionSources(java.lang.String,android.os.UserHandle)>
<android.os.UserManager: java.lang.String getUserName()>
<android.os.UserManager: boolean isUserRunning(android.os.UserHandle)>
<android.os.UserManager: void clearSeedAccountData()>
<android.os.UserManager: boolean isManagedProfile()>
<android.os.UserManager: boolean hasRestrictedProfiles()>
<android.os.UserManager: boolean isSystemUser()>
<android.os.UserManager: boolean removeUser(android.os.UserHandle)>
<android.os.UserManager: boolean isAdminUser()>
<android.os.UserManager: java.lang.String getSeedAccountName()>
<android.graphics.drawable.ShapeDrawable: void setDither(boolean)>
<android.graphics.drawable.ShapeDrawable: void setAlpha(int)>
<android.graphics.drawable.ShapeDrawable: void setPadding(android.graphics.Rect)>
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.ShapeDrawable.ShaderFactory getShaderFactory()>
<android.graphics.drawable.ShapeDrawable: void setShaderFactory(android.graphics.drawable.ShapeDrawable.ShaderFactory)>
<android.graphics.drawable.ShapeDrawable: void <init>(android.graphics.drawable.shapes.Shape)>
<android.graphics.drawable.ShapeDrawable: void <init>()>
<android.graphics.drawable.ShapeDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.ShapeDrawable: void onDraw(android.graphics.drawable.shapes.Shape,android.graphics.Canvas,android.graphics.Paint)>
<android.graphics.drawable.ShapeDrawable: void setIntrinsicWidth(int)>
<android.graphics.drawable.ShapeDrawable: void setIntrinsicHeight(int)>
<android.graphics.drawable.ShapeDrawable: void setPadding(int,int,int,int)>
<android.graphics.drawable.ShapeDrawable: android.graphics.Paint getPaint()>
<android.graphics.drawable.ShapeDrawable: boolean inflateTag(java.lang.String,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<android.graphics.drawable.ShapeDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.ShapeDrawable: void setShape(android.graphics.drawable.shapes.Shape)>
<android.graphics.drawable.ShapeDrawable: void setXfermode(android.graphics.Xfermode)>
<android.graphics.drawable.ShapeDrawable: int getOpacity()>
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.shapes.Shape getShape()>
<android.graphics.SurfaceTexture.OnFrameAvailableListener: void onFrameAvailable(android.graphics.SurfaceTexture)>
<java.nio.file.attribute.AclFileAttributeView extends java.nio.file.attribute.FileOwnerAttributeView: void setAcl(java.util.List)>
<java.nio.file.attribute.AclFileAttributeView extends java.nio.file.attribute.FileOwnerAttributeView: java.util.List getAcl()>
<android.view.FrameStats: int getFrameCount()>
<android.view.FrameStats: long getFramePresentedTimeNano(int)>
<android.view.FrameStats: long getStartTimeNano()>
<android.view.FrameStats: long getEndTimeNano()>
<android.view.FrameStats: long getRefreshPeriodNano()>
<android.view.FrameStats: void <init>()>
<java.nio.channels.ClosedChannelException: void <init>()>
<android.R.style: void <init>()>
<android.telephony.euicc.EuiccRulesAuthTable: int describeContents()>
<android.telephony.euicc.EuiccRulesAuthTable: void writeToParcel(android.os.Parcel,int)>
<android.telephony.euicc.EuiccRulesAuthTable: int findIndex(@android.service.euicc.EuiccProfileInfo.PolicyRuleint,android.service.carrier.CarrierIdentifier)>
<android.telephony.euicc.EuiccRulesAuthTable: boolean hasPolicyRuleFlag(int,@android.telephony.euicc.EuiccRulesAuthTable.PolicyRuleFlagint)>
<javax.crypto.KeyAgreementSpi: javax.crypto.SecretKey engineGenerateSecret(java.lang.String)>
<javax.crypto.KeyAgreementSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<javax.crypto.KeyAgreementSpi: int engineGenerateSecret(byte[],int)>
<javax.crypto.KeyAgreementSpi: void <init>()>
<javax.crypto.KeyAgreementSpi: java.security.Key engineDoPhase(java.security.Key,boolean)>
<javax.crypto.KeyAgreementSpi: byte[] engineGenerateSecret()>
<javax.crypto.KeyAgreementSpi: void engineInit(java.security.Key,java.security.SecureRandom)>
<android.view.textclassifier.ConversationAction: android.os.Bundle getExtras()>
<android.view.textclassifier.ConversationAction: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.ConversationAction: android.app.RemoteAction getAction()>
<android.view.textclassifier.ConversationAction: float getConfidenceScore()>
<android.view.textclassifier.ConversationAction: java.lang.String getType()>
<android.view.textclassifier.ConversationAction: int describeContents()>
<android.view.textclassifier.ConversationAction: CharSequence getTextReply()>
<android.os.health.HealthStatsWriter: void <init>(android.os.health.HealthKeys.Constants)>
<android.os.health.HealthStatsWriter: void flattenToParcel(android.os.Parcel)>
<android.os.health.HealthStatsWriter: void addStats(int,java.lang.String,android.os.health.HealthStatsWriter)>
<android.os.health.HealthStatsWriter: void addTimer(int,int,long)>
<android.os.health.HealthStatsWriter: void addTimers(int,java.lang.String,android.os.health.TimerStat)>
<android.os.health.HealthStatsWriter: void addMeasurement(int,long)>
<android.os.health.HealthStatsWriter: void addMeasurements(int,java.lang.String,long)>
<android.net.NetworkKey: void writeToParcel(android.os.Parcel,int)>
<android.net.NetworkKey: int describeContents()>
<android.net.NetworkKey: void <init>(android.net.WifiKey)>
<org.w3c.dom.DOMErrorHandler: boolean handleError(org.w3c.dom.DOMError)>
<android.service.voice.VoiceInteractionSession.CompleteVoiceRequest: CharSequence getMessage()>
<android.service.voice.VoiceInteractionSession.CompleteVoiceRequest: android.app.VoiceInteractor.Prompt getVoicePrompt()>
<android.service.voice.VoiceInteractionSession.CompleteVoiceRequest: void sendCompleteResult(android.os.Bundle)>
<android.security.KeyChainException: void <init>()>
<android.security.KeyChainException: void <init>(Throwable)>
<android.security.KeyChainException: void <init>(String)>
<android.security.KeyChainException: void <init>(String,Throwable)>
<android.service.notification.NotificationListenerService.RankingMap: java.lang.String[] getOrderedKeys()>
<android.service.notification.NotificationListenerService.RankingMap: int describeContents()>
<android.service.notification.NotificationListenerService.RankingMap: void writeToParcel(android.os.Parcel,int)>
<android.service.notification.NotificationListenerService.RankingMap: boolean getRanking(java.lang.String,android.service.notification.NotificationListenerService.Ranking)>
<android.app.ActivityManager.OnUidImportanceListener: void onUidImportance(int,int)>
<android.telephony.ims.feature.MmTelFeature: void <init>()>
<android.telephony.ims.feature.MmTelFeature: android.telephony.ims.feature.MmTelFeature.MmTelCapabilities queryCapabilityStatus()>
<android.telephony.ims.feature.MmTelFeature: void onFeatureRemoved()>
<android.telephony.ims.feature.MmTelFeature: android.telephony.ims.ImsCallProfile createCallProfile(int,int)>
<android.telephony.ims.feature.MmTelFeature: android.telephony.ims.stub.ImsCallSessionImplBase createCallSession(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.feature.MmTelFeature: android.telephony.ims.stub.ImsUtImplBase getUt()>
<android.telephony.ims.feature.MmTelFeature: void setUiTtyMode(int,android.os.Message)>
<android.telephony.ims.feature.MmTelFeature: android.telephony.ims.stub.ImsMultiEndpointImplBase getMultiEndpoint()>
<android.telephony.ims.feature.MmTelFeature: android.telephony.ims.stub.ImsSmsImplBase getSmsImplementation()>
<android.telephony.ims.feature.MmTelFeature: void notifyIncomingCall(android.telephony.ims.stub.ImsCallSessionImplBase,android.os.Bundle)>
<android.telephony.ims.feature.MmTelFeature: android.telephony.ims.stub.ImsEcbmImplBase getEcbm()>
<android.telephony.ims.feature.MmTelFeature: void changeEnabledCapabilities(android.telephony.ims.feature.CapabilityChangeRequest,android.telephony.ims.feature.ImsFeature.CapabilityCallbackProxy)>
<android.telephony.ims.feature.MmTelFeature: void notifyRejectedCall(android.telephony.ims.ImsCallProfile,android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.feature.MmTelFeature: int shouldProcessCall(java.lang.String[])>
<android.telephony.ims.feature.MmTelFeature: void onFeatureReady()>
<android.telephony.ims.feature.MmTelFeature: void notifyCapabilitiesStatusChanged(android.telephony.ims.feature.MmTelFeature.MmTelCapabilities)>
<android.telephony.ims.feature.MmTelFeature: boolean queryCapabilityConfiguration(@android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.MmTelCapabilityint,int)>
<android.telephony.ims.feature.MmTelFeature: void notifyVoiceMessageCountUpdate(int)>
<android.view.inputmethod.CompletionInfo: void <init>(long,int,CharSequence,CharSequence)>
<android.view.inputmethod.CompletionInfo: CharSequence getLabel()>
<android.view.inputmethod.CompletionInfo: long getId()>
<android.view.inputmethod.CompletionInfo: int getPosition()>
<android.view.inputmethod.CompletionInfo: void <init>(long,int,CharSequence)>
<android.view.inputmethod.CompletionInfo: int describeContents()>
<android.view.inputmethod.CompletionInfo: CharSequence getText()>
<android.view.inputmethod.CompletionInfo: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Rect: java.lang.String flattenToString()>
<android.graphics.Rect: void <init>()>
<android.graphics.Rect: boolean isEmpty()>
<android.graphics.Rect: boolean contains(android.graphics.Rect)>
<android.graphics.Rect: void <init>(int,int,int,int)>
<android.graphics.Rect: void setEmpty()>
<android.graphics.Rect: float exactCenterY()>
<android.graphics.Rect: void offsetTo(int,int)>
<android.graphics.Rect: void union(int,int)>
<android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)>
<android.graphics.Rect: int centerX()>
<android.graphics.Rect: boolean intersects(int,int,int,int)>
<android.graphics.Rect: boolean contains(int,int)>
<android.graphics.Rect: void inset(int,int)>
<android.graphics.Rect: void set(int,int,int,int)>
<android.graphics.Rect: java.lang.String toShortString()>
<android.graphics.Rect: int describeContents()>
<android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>
<android.graphics.Rect: void readFromParcel(android.os.Parcel)>
<android.graphics.Rect: int width()>
<android.graphics.Rect: float exactCenterX()>
<android.graphics.Rect: void sort()>
<android.graphics.Rect: void <init>(android.graphics.Rect)>
<android.graphics.Rect: boolean intersect(int,int,int,int)>
<android.graphics.Rect: android.graphics.Rect unflattenFromString(java.lang.String)>
<android.graphics.Rect: void union(int,int,int,int)>
<android.graphics.Rect: int height()>
<android.graphics.Rect: boolean contains(int,int,int,int)>
<android.graphics.Rect: void union(android.graphics.Rect)>
<android.graphics.Rect: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Rect: int centerY()>
<android.graphics.Rect: boolean intersect(android.graphics.Rect)>
<android.graphics.Rect: void offset(int,int)>
<android.graphics.Rect: void set(android.graphics.Rect)>
<android.nfc.Tag: int describeContents()>
<android.nfc.Tag: byte[] getId()>
<android.nfc.Tag: java.lang.String[] getTechList()>
<android.nfc.Tag: void writeToParcel(android.os.Parcel,int)>
<android.widget.DialerFilter: void clearText()>
<android.widget.DialerFilter: void setFilterWatcher(android.text.TextWatcher)>
<android.widget.DialerFilter: void <init>(android.content.Context)>
<android.widget.DialerFilter: void onModeChange(int,int)>
<android.widget.DialerFilter: boolean isQwertyKeyboard()>
<android.widget.DialerFilter: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.DialerFilter: void setLettersWatcher(android.text.TextWatcher)>
<android.widget.DialerFilter: void append(java.lang.String)>
<android.widget.DialerFilter: void setDigitsWatcher(android.text.TextWatcher)>
<android.widget.DialerFilter: CharSequence getFilterText()>
<android.widget.DialerFilter: void removeFilterWatcher(android.text.TextWatcher)>
<android.widget.DialerFilter: CharSequence getDigits()>
<android.widget.DialerFilter: int getMode()>
<android.widget.DialerFilter: void setMode(int)>
<android.widget.DialerFilter: CharSequence getLetters()>
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.LinearLayout: void setMeasureWithLargestChildEnabled(boolean)>
<android.widget.LinearLayout: void setShowDividers(int)>
<android.widget.LinearLayout: android.widget.LinearLayout.LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.LinearLayout: int getDividerPadding()>
<android.widget.LinearLayout: int getShowDividers()>
<android.widget.LinearLayout: void setGravity(int)>
<android.widget.LinearLayout: android.widget.LinearLayout.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams)>
<android.widget.LinearLayout: int getGravity()>
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.LinearLayout: void setWeightSum(float)>
<android.widget.LinearLayout: float getWeightSum()>
<android.widget.LinearLayout: boolean isMeasureWithLargestChildEnabled()>
<android.widget.LinearLayout: void setBaselineAlignedChildIndex(int)>
<android.widget.LinearLayout: android.graphics.drawable.Drawable getDividerDrawable()>
<android.widget.LinearLayout: int getOrientation()>
<android.widget.LinearLayout: boolean isBaselineAligned()>
<android.widget.LinearLayout: void setBaselineAligned(boolean)>
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.LinearLayout: int getBaselineAlignedChildIndex()>
<android.widget.LinearLayout: void setOrientation(int)>
<android.widget.LinearLayout: void setDividerPadding(int)>
<android.widget.LinearLayout: void <init>(android.content.Context)>
<android.widget.LinearLayout: void setHorizontalGravity(int)>
<android.widget.LinearLayout: android.widget.LinearLayout.LayoutParams generateDefaultLayoutParams()>
<android.widget.LinearLayout: void setDividerDrawable(android.graphics.drawable.Drawable)>
<android.widget.LinearLayout: void setVerticalGravity(int)>
<java.nio.channels.AsynchronousCloseException: void <init>()>
<android.view.MotionEvent.PointerProperties: void copyFrom(android.view.MotionEvent.PointerProperties)>
<android.view.MotionEvent.PointerProperties: void <init>(android.view.MotionEvent.PointerProperties)>
<android.view.MotionEvent.PointerProperties: void clear()>
<android.view.MotionEvent.PointerProperties: void <init>()>
<android.app.LauncherActivity: android.app.LauncherActivity.ListItem itemForPosition(int)>
<android.app.LauncherActivity: java.util.List makeListItems()>
<android.app.LauncherActivity: android.content.Intent intentForPosition(int)>
<android.app.LauncherActivity: java.util.List onQueryPackageManager(android.content.Intent)>
<android.app.LauncherActivity: void <init>()>
<android.app.LauncherActivity: void onSetContentView()>
<android.app.LauncherActivity: android.content.Intent getTargetIntent()>
<android.app.Person: CharSequence getName()>
<android.app.Person: boolean isImportant()>
<android.app.Person: java.lang.String getUri()>
<android.app.Person: java.lang.String getKey()>
<android.app.Person: android.graphics.drawable.Icon getIcon()>
<android.app.Person: android.app.Person.Builder toBuilder()>
<android.app.Person: int describeContents()>
<android.app.Person: boolean isBot()>
<android.app.Person: void writeToParcel(android.os.Parcel,int)>
<android.provider.Telephony.Sms: java.lang.String getDefaultSmsPackage(android.content.Context)>
<android.content.pm.ProviderInfo: int describeContents()>
<android.content.pm.ProviderInfo: void <init>(android.content.pm.ProviderInfo)>
<android.content.pm.ProviderInfo: void <init>()>
<android.content.pm.ProviderInfo: void dump(android.util.Printer,java.lang.String)>
<android.hardware.location.ContextHubManager.Callback: void onMessageReceipt(int,int,android.hardware.location.ContextHubMessage)>
<android.hardware.location.ContextHubManager.Callback: void <init>()>
<android.hardware.biometrics.BiometricPrompt.CryptoObject: void <init>(javax.crypto.Mac)>
<android.hardware.biometrics.BiometricPrompt.CryptoObject: void <init>(javax.crypto.Cipher)>
<android.hardware.biometrics.BiometricPrompt.CryptoObject: void <init>(java.security.Signature)>
<android.hardware.biometrics.BiometricPrompt.CryptoObject: javax.crypto.Mac getMac()>
<android.hardware.biometrics.BiometricPrompt.CryptoObject: javax.crypto.Cipher getCipher()>
<android.hardware.biometrics.BiometricPrompt.CryptoObject: java.security.Signature getSignature()>
<android.net.metrics.IpManagerEvent: void <init>(int,long)>
<android.animation.FloatEvaluator: java.lang.Float evaluate(float,java.lang.Number,java.lang.Number)>
<android.animation.FloatEvaluator: void <init>()>
<android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener: void onAccessibilityStateChanged(boolean)>
<org.w3c.dom.DOMStringList: boolean contains(java.lang.String)>
<org.w3c.dom.DOMStringList: int getLength()>
<org.w3c.dom.DOMStringList: java.lang.String item(int)>
<java.lang.InstantiationException: void <init>()>
<java.lang.InstantiationException: void <init>(String)>
<javax.xml.validation.TypeInfoProvider: boolean isIdAttribute(int)>
<javax.xml.validation.TypeInfoProvider: void <init>()>
<javax.xml.validation.TypeInfoProvider: boolean isSpecified(int)>
<javax.xml.validation.TypeInfoProvider: org.w3c.dom.TypeInfo getAttributeTypeInfo(int)>
<javax.xml.validation.TypeInfoProvider: org.w3c.dom.TypeInfo getElementTypeInfo()>
<android.animation.ArgbEvaluator: java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)>
<android.animation.ArgbEvaluator: void <init>()>
<android.inputmethodservice.AbstractInputMethodService: android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl onCreateInputMethodSessionInterface()>
<android.inputmethodservice.AbstractInputMethodService: boolean onTrackballEvent(android.view.MotionEvent)>
<android.inputmethodservice.AbstractInputMethodService: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.inputmethodservice.AbstractInputMethodService: android.os.IBinder onBind(android.content.Intent)>
<android.inputmethodservice.AbstractInputMethodService: void <init>()>
<android.inputmethodservice.AbstractInputMethodService: android.view.KeyEvent.DispatcherState getKeyDispatcherState()>
<android.inputmethodservice.AbstractInputMethodService: android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodImpl onCreateInputMethodInterface()>
<android.net.nsd.NsdManager: void stopServiceDiscovery(android.net.nsd.NsdManager.DiscoveryListener)>
<android.net.nsd.NsdManager: void resolveService(android.net.nsd.NsdServiceInfo,android.net.nsd.NsdManager.ResolveListener)>
<android.net.nsd.NsdManager: void registerService(android.net.nsd.NsdServiceInfo,int,android.net.nsd.NsdManager.RegistrationListener)>
<android.net.nsd.NsdManager: void discoverServices(java.lang.String,int,android.net.nsd.NsdManager.DiscoveryListener)>
<android.net.nsd.NsdManager: void unregisterService(android.net.nsd.NsdManager.RegistrationListener)>
<android.media.MediaCas.PluginDescriptor: java.lang.String getName()>
<android.media.MediaCas.PluginDescriptor: int getSystemId()>
<android.telecom.TelecomAnalytics: int describeContents()>
<android.telecom.TelecomAnalytics: java.util.List getSessionTimings()>
<android.telecom.TelecomAnalytics: void writeToParcel(android.os.Parcel,int)>
<android.telecom.TelecomAnalytics: java.util.List getCallAnalytics()>
<android.telecom.TelecomAnalytics: void <init>(java.util.List,java.util.List)>
<android.media.soundtrigger.SoundTriggerDetectionService: void onGenericRecognitionEvent(java.util.UUID,android.os.Bundle,int,android.hardware.soundtrigger.SoundTrigger.RecognitionEvent)>
<android.media.soundtrigger.SoundTriggerDetectionService: void operationFinished(java.util.UUID,int)>
<android.media.soundtrigger.SoundTriggerDetectionService: void <init>()>
<android.media.soundtrigger.SoundTriggerDetectionService: void onDisconnected(java.util.UUID,android.os.Bundle)>
<android.media.soundtrigger.SoundTriggerDetectionService: void onConnected(java.util.UUID,android.os.Bundle)>
<android.media.soundtrigger.SoundTriggerDetectionService: void onStopOperation(java.util.UUID,android.os.Bundle,int)>
<android.media.soundtrigger.SoundTriggerDetectionService: void onError(java.util.UUID,android.os.Bundle,int,int)>
<android.text.style.TtsSpan: java.lang.String getType()>
<android.text.style.TtsSpan: int describeContents()>
<android.text.style.TtsSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.TtsSpan: void <init>(String,android.os.PersistableBundle)>
<android.text.style.TtsSpan: void <init>(android.os.Parcel)>
<android.text.style.TtsSpan: android.os.PersistableBundle getArgs()>
<android.text.style.TtsSpan: int getSpanTypeId()>
<android.view.textservice.SentenceSuggestionsInfo: int describeContents()>
<android.view.textservice.SentenceSuggestionsInfo: int getSuggestionsCount()>
<android.view.textservice.SentenceSuggestionsInfo: void <init>(android.view.textservice.SuggestionsInfo[],int[],int[])>
<android.view.textservice.SentenceSuggestionsInfo: int getOffsetAt(int)>
<android.view.textservice.SentenceSuggestionsInfo: android.view.textservice.SuggestionsInfo getSuggestionsInfoAt(int)>
<android.view.textservice.SentenceSuggestionsInfo: void <init>(android.os.Parcel)>
<android.view.textservice.SentenceSuggestionsInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.textservice.SentenceSuggestionsInfo: int getLengthAt(int)>
<java.security.SignatureException: void <init>(String)>
<java.security.SignatureException: void <init>(Throwable)>
<java.security.SignatureException: void <init>()>
<java.security.SignatureException: void <init>(String,Throwable)>
<android.telephony.mbms.MbmsStreamingSessionCallback: void onMiddlewareReady()>
<android.telephony.mbms.MbmsStreamingSessionCallback: void onError(int,java.lang.String)>
<android.telephony.mbms.MbmsStreamingSessionCallback: void <init>()>
<android.telephony.mbms.MbmsStreamingSessionCallback: void onStreamingServicesUpdated(java.util.List)>
<java.util.UUID: int clockSequence()>
<java.util.UUID: int compareTo(java.util.UUID)>
<java.util.UUID: long getMostSignificantBits()>
<java.util.UUID: long getLeastSignificantBits()>
<java.util.UUID: java.util.UUID randomUUID()>
<java.util.UUID: int version()>
<java.util.UUID: void <init>(long,long)>
<java.util.UUID: java.util.UUID fromString(java.lang.String)>
<java.util.UUID: long timestamp()>
<java.util.UUID: java.util.UUID nameUUIDFromBytes(byte[])>
<java.util.UUID: long node()>
<java.util.UUID: int variant()>
<android.telephony.SubscriptionManager.OnOpportunisticSubscriptionsChangedListener: void <init>()>
<android.telephony.SubscriptionManager.OnOpportunisticSubscriptionsChangedListener: void onOpportunisticSubscriptionsChanged()>
<android.telephony.mbms.DownloadProgressListener: void <init>()>
<android.telephony.mbms.DownloadProgressListener: void onProgressUpdated(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo,int,int,int,int)>
<android.view.SearchEvent: android.view.InputDevice getInputDevice()>
<android.view.SearchEvent: void <init>(android.view.InputDevice)>
<android.preference.PreferenceGroup: void dispatchSaveInstanceState(android.os.Bundle)>
<android.preference.PreferenceGroup: boolean addPreference(android.preference.Preference)>
<android.preference.PreferenceGroup: android.preference.Preference getPreference(int)>
<android.preference.PreferenceGroup: boolean removePreference(android.preference.Preference)>
<android.preference.PreferenceGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.PreferenceGroup: boolean onPrepareAddPreference(android.preference.Preference)>
<android.preference.PreferenceGroup: void setOrderingAsAdded(boolean)>
<android.preference.PreferenceGroup: boolean isOnSameScreenAsChildren()>
<android.preference.PreferenceGroup: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.PreferenceGroup: android.preference.Preference findPreference(CharSequence)>
<android.preference.PreferenceGroup: void dispatchRestoreInstanceState(android.os.Bundle)>
<android.preference.PreferenceGroup: int getPreferenceCount()>
<android.preference.PreferenceGroup: boolean isOrderingAsAdded()>
<android.preference.PreferenceGroup: void removeAll()>
<android.preference.PreferenceGroup: void addItemFromInflater(android.preference.Preference)>
<android.preference.PreferenceGroup: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsoluteLayout.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsoluteLayout.LayoutParams: void <init>(int,int,int,int)>
<android.widget.AbsoluteLayout.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.widget.AbsoluteLayout.LayoutParams: java.lang.String debug(java.lang.String)>
<android.service.notification.SnoozeCriterion: CharSequence getExplanation()>
<android.service.notification.SnoozeCriterion: int describeContents()>
<android.service.notification.SnoozeCriterion: CharSequence getConfirmation()>
<android.service.notification.SnoozeCriterion: java.lang.String getId()>
<android.service.notification.SnoozeCriterion: void writeToParcel(android.os.Parcel,int)>
<android.service.notification.SnoozeCriterion: void <init>(android.os.Parcel)>
<android.service.notification.SnoozeCriterion: void <init>(String,CharSequence,CharSequence)>
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setEmailArguments(java.lang.String,java.lang.String)>
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setDomain(java.lang.String)>
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setPassword(java.lang.String)>
<android.text.style.TtsSpan.ElectronicBuilder: void <init>()>
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setPath(java.lang.String)>
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setFragmentId(java.lang.String)>
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setUsername(java.lang.String)>
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setPort(int)>
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setProtocol(java.lang.String)>
<android.text.style.TtsSpan.ElectronicBuilder: android.text.style.TtsSpan.ElectronicBuilder setQueryString(java.lang.String)>
<android.media.MediaSession2.Builder: android.media.MediaSession2.Builder setExtras(android.os.Bundle)>
<android.media.MediaSession2.Builder: void <init>(android.content.Context)>
<android.media.MediaSession2.Builder: android.media.MediaSession2.Builder setId(java.lang.String)>
<android.media.MediaSession2.Builder: android.media.MediaSession2 build()>
<android.media.MediaSession2.Builder: android.media.MediaSession2.Builder setSessionCallback(java.util.concurrent.Executor,android.media.MediaSession2.SessionCallback)>
<android.media.MediaSession2.Builder: android.media.MediaSession2.Builder setSessionActivity(android.app.PendingIntent)>
<android.net.wifi.p2p.WifiP2pManager.PeerListListener: void onPeersAvailable(android.net.wifi.p2p.WifiP2pDeviceList)>
<android.telephony.SmsManager.FinancialSmsCallback: void <init>()>
<android.telephony.SmsManager.FinancialSmsCallback: void onFinancialSmsMessages(android.database.CursorWindow)>
<android.icu.util.TimeZone: java.lang.String getCanonicalID(java.lang.String,boolean[])>
<android.icu.util.TimeZone: boolean observesDaylightTime()>
<android.icu.util.TimeZone: java.lang.String getCanonicalID(java.lang.String)>
<android.icu.util.TimeZone: java.lang.String getDisplayName(boolean,int,android.icu.util.ULocale)>
<android.icu.util.TimeZone: java.lang.String getWindowsID(java.lang.String)>
<android.icu.util.TimeZone: java.lang.String getDisplayName(android.icu.util.ULocale)>
<android.icu.util.TimeZone: int countEquivalentIDs(java.lang.String)>
<android.icu.util.TimeZone: boolean hasSameRules(android.icu.util.TimeZone)>
<android.icu.util.TimeZone: java.lang.String getDisplayName(boolean,int)>
<android.icu.util.TimeZone: int getOffset(int,int,int,int,int,int)>
<android.icu.util.TimeZone: void getOffset(long,boolean,int[])>
<android.icu.util.TimeZone: java.lang.String[] getAvailableIDs(int)>
<android.icu.util.TimeZone: void setID(java.lang.String)>
<android.icu.util.TimeZone: boolean isFrozen()>
<android.icu.util.TimeZone: android.icu.util.TimeZone getFrozenTimeZone(java.lang.String)>
<android.icu.util.TimeZone: android.icu.util.TimeZone getTimeZone(java.lang.String)>
<android.icu.util.TimeZone: java.lang.String getDisplayName()>
<android.icu.util.TimeZone: java.lang.String getID()>
<android.icu.util.TimeZone: android.icu.util.TimeZone cloneAsThawed()>
<android.icu.util.TimeZone: int getOffset(long)>
<android.icu.util.TimeZone: java.lang.String[] getAvailableIDs()>
<android.icu.util.TimeZone: java.lang.String getEquivalentID(java.lang.String,int)>
<android.icu.util.TimeZone: java.lang.String getIDForWindowsID(java.lang.String,java.lang.String)>
<android.icu.util.TimeZone: java.lang.String[] getAvailableIDs(java.lang.String)>
<android.icu.util.TimeZone: int getDSTSavings()>
<android.icu.util.TimeZone: java.lang.String getDisplayName(java.util.Locale)>
<android.icu.util.TimeZone: android.icu.util.TimeZone freeze()>
<android.icu.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>
<android.icu.util.TimeZone: int getRawOffset()>
<android.icu.util.TimeZone: java.lang.String getRegion(java.lang.String)>
<android.icu.util.TimeZone: android.icu.util.TimeZone getTimeZone(java.lang.String,int)>
<android.icu.util.TimeZone: java.lang.String getTZDataVersion()>
<android.icu.util.TimeZone: boolean inDaylightTime(java.util.Date)>
<android.icu.util.TimeZone: void <init>()>
<android.icu.util.TimeZone: java.util.Set getAvailableIDs(android.icu.util.TimeZone.SystemTimeZoneType,java.lang.String,java.lang.Integer)>
<android.icu.util.TimeZone: java.lang.Object clone()>
<android.icu.util.TimeZone: void setRawOffset(int)>
<android.icu.util.TimeZone: android.icu.util.TimeZone getDefault()>
<android.icu.util.TimeZone: boolean useDaylightTime()>
<android.service.notification.ConditionProviderService: boolean isBound()>
<android.service.notification.ConditionProviderService: void notifyConditions(android.service.notification.Condition...)>
<android.service.notification.ConditionProviderService: android.os.IBinder onBind(android.content.Intent)>
<android.service.notification.ConditionProviderService: void requestRebind(android.content.ComponentName)>
<android.service.notification.ConditionProviderService: void onConnected()>
<android.service.notification.ConditionProviderService: void onRequestConditions(int)>
<android.service.notification.ConditionProviderService: void notifyCondition(android.service.notification.Condition)>
<android.service.notification.ConditionProviderService: void requestUnbind()>
<android.service.notification.ConditionProviderService: void onUnsubscribe(android.net.Uri)>
<android.service.notification.ConditionProviderService: void onSubscribe(android.net.Uri)>
<android.service.notification.ConditionProviderService: void <init>()>
<android.widget.Toolbar.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.widget.Toolbar.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Toolbar.LayoutParams: void <init>(android.widget.Toolbar.LayoutParams)>
<android.widget.Toolbar.LayoutParams: void <init>(android.app.ActionBar.LayoutParams)>
<android.widget.Toolbar.LayoutParams: void <init>(android.view.ViewGroup.MarginLayoutParams)>
<android.widget.Toolbar.LayoutParams: void <init>(int,int,int)>
<android.widget.Toolbar.LayoutParams: void <init>(int)>
<android.widget.Toolbar.LayoutParams: void <init>(int,int)>
<android.webkit.WebMessagePort: void postMessage(android.webkit.WebMessage)>
<android.webkit.WebMessagePort: void close()>
<android.webkit.WebMessagePort: void setWebMessageCallback(android.webkit.WebMessagePort.WebMessageCallback,android.os.Handler)>
<android.webkit.WebMessagePort: void setWebMessageCallback(android.webkit.WebMessagePort.WebMessageCallback)>
<android.webkit.WebMessagePort: void <init>()>
<android.telephony.data.DataService: android.telephony.data.DataService.DataServiceProvider onCreateDataServiceProvider(int)>
<android.telephony.data.DataService: android.os.IBinder onBind(android.content.Intent)>
<android.telephony.data.DataService: void <init>()>
<java.util.Base64.Decoder: int decode(byte[],byte[])>
<java.util.Base64.Decoder: byte[] decode(byte[])>
<java.util.Base64.Decoder: java.nio.ByteBuffer decode(java.nio.ByteBuffer)>
<java.util.Base64.Decoder: byte[] decode(java.lang.String)>
<java.util.Base64.Decoder: java.io.InputStream wrap(java.io.InputStream)>
<org.w3c.dom.Node: java.lang.String getNodeValue()>
<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>
<org.w3c.dom.Node: boolean hasChildNodes()>
<org.w3c.dom.Node: short compareDocumentPosition(org.w3c.dom.Node)>
<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>
<org.w3c.dom.Node: java.lang.String lookupPrefix(java.lang.String)>
<org.w3c.dom.Node: boolean isEqualNode(org.w3c.dom.Node)>
<org.w3c.dom.Node: java.lang.String getNamespaceURI()>
<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>
<org.w3c.dom.Node: java.lang.Object getFeature(java.lang.String,java.lang.String)>
<org.w3c.dom.Node: org.w3c.dom.Node getLastChild()>
<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>
<org.w3c.dom.Node: java.lang.String getTextContent()>
<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>
<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>
<org.w3c.dom.Node: boolean hasAttributes()>
<org.w3c.dom.Node: org.w3c.dom.Node cloneNode(boolean)>
<org.w3c.dom.Node: java.lang.String getBaseURI()>
<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>
<org.w3c.dom.Node: boolean isSupported(java.lang.String,java.lang.String)>
<org.w3c.dom.Node: java.lang.Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)>
<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>
<org.w3c.dom.Node: java.lang.String getPrefix()>
<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>
<org.w3c.dom.Node: java.lang.String getNodeName()>
<org.w3c.dom.Node: boolean isSameNode(org.w3c.dom.Node)>
<org.w3c.dom.Node: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>
<org.w3c.dom.Node: void setTextContent(java.lang.String)>
<org.w3c.dom.Node: java.lang.Object getUserData(java.lang.String)>
<org.w3c.dom.Node: void normalize()>
<org.w3c.dom.Node: void setNodeValue(java.lang.String)>
<org.w3c.dom.Node: boolean isDefaultNamespace(java.lang.String)>
<org.w3c.dom.Node: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)>
<org.w3c.dom.Node: java.lang.String lookupNamespaceURI(java.lang.String)>
<org.w3c.dom.Node: short getNodeType()>
<org.w3c.dom.Node: java.lang.String getLocalName()>
<org.w3c.dom.Node: void setPrefix(java.lang.String)>
<java.io.OutputStreamWriter: void flush()>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.CharsetEncoder)>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
<java.io.OutputStreamWriter: java.lang.String getEncoding()>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,String)>
<java.io.OutputStreamWriter: void close()>
<java.io.OutputStreamWriter: void write(char[],int,int)>
<java.security.spec.InvalidParameterSpecException: void <init>(String)>
<java.security.spec.InvalidParameterSpecException: void <init>()>
<org.w3c.dom.TypeInfo: java.lang.String getTypeName()>
<org.w3c.dom.TypeInfo: java.lang.String getTypeNamespace()>
<org.w3c.dom.TypeInfo: boolean isDerivedFrom(java.lang.String,java.lang.String,int)>
<android.media.session.MediaSessionManager.OnVolumeKeyLongPressListener: void onVolumeKeyLongPress(android.view.KeyEvent)>
<android.content.IntentSender.OnFinished: void onSendFinished(android.content.IntentSender,android.content.Intent,int,java.lang.String,android.os.Bundle)>
<android.service.resolver.ResolverRankerService: void <init>()>
<android.service.resolver.ResolverRankerService: android.os.IBinder onBind(android.content.Intent)>
<android.service.resolver.ResolverRankerService: void onPredictSharingProbabilities(java.util.List)>
<android.service.resolver.ResolverRankerService: void onTrainRankingModel(java.util.List,int)>
<android.text.Html.ImageGetter: android.graphics.drawable.Drawable getDrawable(java.lang.String)>
<android.media.soundtrigger.SoundTriggerManager: void updateModel(android.media.soundtrigger.SoundTriggerManager.Model)>
<android.media.soundtrigger.SoundTriggerManager: android.media.soundtrigger.SoundTriggerManager.Model getModel(java.util.UUID)>
<android.media.soundtrigger.SoundTriggerManager: void deleteModel(java.util.UUID)>
<android.media.soundtrigger.SoundTriggerManager: android.media.soundtrigger.SoundTriggerDetector createSoundTriggerDetector(java.util.UUID,android.media.soundtrigger.SoundTriggerDetector.Callback,android.os.Handler)>
<android.media.soundtrigger.SoundTriggerManager: int getDetectionServiceOperationsTimeout()>
<android.os.OperationCanceledException: void <init>()>
<android.os.OperationCanceledException: void <init>(String)>
<java.io.SequenceInputStream: void <init>(java.io.InputStream,java.io.InputStream)>
<java.io.SequenceInputStream: int read()>
<java.io.SequenceInputStream: void <init>(java.util.Enumeration)>
<java.time.zone.ZoneRulesException: void <init>(String)>
<java.time.zone.ZoneRulesException: void <init>(String,Throwable)>
<javax.security.auth.Subject: T doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>
<javax.security.auth.Subject: java.util.Set getPrincipals()>
<javax.security.auth.Subject: java.util.Set getPrincipals(java.lang.Class)>
<javax.security.auth.Subject: T doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedAction,java.security.AccessControlContext)>
<javax.security.auth.Subject: T doAs(javax.security.auth.Subject,java.security.PrivilegedExceptionAction)>
<javax.security.auth.Subject: java.util.Set getPrivateCredentials(java.lang.Class)>
<javax.security.auth.Subject: java.util.Set getPrivateCredentials()>
<javax.security.auth.Subject: java.util.Set getPublicCredentials()>
<javax.security.auth.Subject: void setReadOnly()>
<javax.security.auth.Subject: void <init>()>
<javax.security.auth.Subject: T doAs(javax.security.auth.Subject,java.security.PrivilegedAction)>
<javax.security.auth.Subject: void <init>(boolean,java.util.Set,java.util.Set,java.util.Set)>
<javax.security.auth.Subject: javax.security.auth.Subject getSubject(java.security.AccessControlContext)>
<javax.security.auth.Subject: boolean isReadOnly()>
<javax.security.auth.Subject: java.util.Set getPublicCredentials(java.lang.Class)>
<android.hardware.location.GeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)>
<android.hardware.location.GeofenceHardware: int[] getMonitoringTypes()>
<android.hardware.location.GeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)>
<android.hardware.location.GeofenceHardware: int getStatusOfMonitoringType(int)>
<android.hardware.location.GeofenceHardware: boolean addGeofence(int,int,android.hardware.location.GeofenceHardwareRequest,android.hardware.location.GeofenceHardwareCallback)>
<android.hardware.location.GeofenceHardware: boolean removeGeofence(int,int)>
<android.hardware.location.GeofenceHardware: boolean resumeGeofence(int,int,int)>
<android.hardware.location.GeofenceHardware: boolean pauseGeofence(int,int)>
<android.telephony.CellSignalStrengthTdscdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellSignalStrengthTdscdma: int getDbm()>
<android.telephony.CellSignalStrengthTdscdma: int getLevel()>
<android.telephony.CellSignalStrengthTdscdma: int getRscp()>
<android.telephony.CellSignalStrengthTdscdma: int getAsuLevel()>
<android.telephony.CellSignalStrengthTdscdma: int describeContents()>
<org.xml.sax.Parser: void parse(org.xml.sax.InputSource)>
<org.xml.sax.Parser: void setDocumentHandler(org.xml.sax.DocumentHandler)>
<org.xml.sax.Parser: void setEntityResolver(org.xml.sax.EntityResolver)>
<org.xml.sax.Parser: void setErrorHandler(org.xml.sax.ErrorHandler)>
<org.xml.sax.Parser: void parse(java.lang.String)>
<org.xml.sax.Parser: void setDTDHandler(org.xml.sax.DTDHandler)>
<org.xml.sax.Parser: void setLocale(java.util.Locale)>
<android.text.method.DateKeyListener: char[] getAcceptedChars()>
<android.text.method.DateKeyListener: int getInputType()>
<android.text.method.DateKeyListener: android.text.method.DateKeyListener getInstance(java.util.Locale)>
<android.text.method.DateKeyListener: void <init>()>
<android.text.method.DateKeyListener: void <init>(java.util.Locale)>
<android.text.method.DateKeyListener: android.text.method.DateKeyListener getInstance()>
<android.content.pm.ServiceInfo: void <init>()>
<android.content.pm.ServiceInfo: void <init>(android.content.pm.ServiceInfo)>
<android.content.pm.ServiceInfo: int getForegroundServiceType()>
<android.content.pm.ServiceInfo: int describeContents()>
<android.content.pm.ServiceInfo: void dump(android.util.Printer,java.lang.String)>
<java.util.logging.ConsoleHandler: void <init>()>
<java.util.logging.ConsoleHandler: void close()>
<android.hardware.radio.RadioManager.FmBandConfig: boolean getRds()>
<android.hardware.radio.RadioManager.FmBandConfig: boolean getStereo()>
<android.hardware.radio.RadioManager.FmBandConfig: boolean getTa()>
<android.hardware.radio.RadioManager.FmBandConfig: boolean getEa()>
<android.hardware.radio.RadioManager.FmBandConfig: boolean getAf()>
<org.json.JSONArray: org.json.JSONArray optJSONArray(int)>
<org.json.JSONArray: java.lang.Object opt(int)>
<org.json.JSONArray: java.lang.String getString(int)>
<org.json.JSONArray: java.lang.String optString(int)>
<org.json.JSONArray: org.json.JSONArray put(int)>
<org.json.JSONArray: double getDouble(int)>
<org.json.JSONArray: boolean optBoolean(int)>
<org.json.JSONArray: java.lang.String optString(int,java.lang.String)>
<org.json.JSONArray: long optLong(int,long)>
<org.json.JSONArray: org.json.JSONArray put(long)>
<org.json.JSONArray: boolean isNull(int)>
<org.json.JSONArray: double optDouble(int)>
<org.json.JSONArray: org.json.JSONArray put(int,long)>
<org.json.JSONArray: void <init>(org.json.JSONTokener)>
<org.json.JSONArray: org.json.JSONArray put(int,boolean)>
<org.json.JSONArray: org.json.JSONArray put(int,double)>
<org.json.JSONArray: java.lang.Object remove(int)>
<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>
<org.json.JSONArray: java.lang.String join(java.lang.String)>
<org.json.JSONArray: org.json.JSONArray put(int,java.lang.Object)>
<org.json.JSONArray: void <init>(String)>
<org.json.JSONArray: org.json.JSONArray put(int,int)>
<org.json.JSONArray: void <init>()>
<org.json.JSONArray: double optDouble(int,double)>
<org.json.JSONArray: org.json.JSONArray put(double)>
<org.json.JSONArray: int optInt(int,int)>
<org.json.JSONArray: boolean optBoolean(int,boolean)>
<org.json.JSONArray: int length()>
<org.json.JSONArray: int getInt(int)>
<org.json.JSONArray: org.json.JSONArray put(boolean)>
<org.json.JSONArray: org.json.JSONObject optJSONObject(int)>
<org.json.JSONArray: boolean getBoolean(int)>
<org.json.JSONArray: long getLong(int)>
<org.json.JSONArray: void <init>(Object)>
<org.json.JSONArray: long optLong(int)>
<org.json.JSONArray: void <init>(java.util.Collection)>
<org.json.JSONArray: java.lang.Object get(int)>
<org.json.JSONArray: int optInt(int)>
<org.json.JSONArray: org.json.JSONArray getJSONArray(int)>
<org.json.JSONArray: java.lang.String toString(int)>
<org.json.JSONArray: org.json.JSONObject toJSONObject(org.json.JSONArray)>
<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>
<android.R.anim: void <init>()>
<android.hardware.camera2.params.BlackLevelPattern: int getOffsetForIndex(int,int)>
<android.hardware.camera2.params.BlackLevelPattern: void copyTo(int[],int)>
<android.view.ViewManager: void addView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.view.ViewManager: void removeView(android.view.View)>
<android.view.ViewManager: void updateViewLayout(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.media.VolumeProvider: void <init>(int,int,int)>
<android.media.VolumeProvider: void onSetVolumeTo(int)>
<android.media.VolumeProvider: int getVolumeControl()>
<android.media.VolumeProvider: int getMaxVolume()>
<android.media.VolumeProvider: int getCurrentVolume()>
<android.media.VolumeProvider: void onAdjustVolume(int)>
<android.media.VolumeProvider: void setCurrentVolume(int)>
<android.widget.RadioButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.RadioButton: void <init>(android.content.Context)>
<android.widget.RadioButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RadioButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.media.FaceDetector: void <init>(int,int,int)>
<android.media.FaceDetector: int findFaces(android.graphics.Bitmap,android.media.FaceDetector.Face[])>
<android.telecom.Call.RttCall: void write(java.lang.String)>
<android.telecom.Call.RttCall: java.lang.String readImmediately()>
<android.telecom.Call.RttCall: int getRttAudioMode()>
<android.telecom.Call.RttCall: java.lang.String read()>
<android.telecom.Call.RttCall: void setRttMode(int)>
<android.media.MediaRouter.UserRouteInfo: void setVolume(int)>
<android.media.MediaRouter.UserRouteInfo: void setName(int)>
<android.media.MediaRouter.UserRouteInfo: void setVolumeCallback(android.media.MediaRouter.VolumeCallback)>
<android.media.MediaRouter.UserRouteInfo: void setStatus(CharSequence)>
<android.media.MediaRouter.UserRouteInfo: void setPlaybackStream(int)>
<android.media.MediaRouter.UserRouteInfo: void setIconDrawable(android.graphics.drawable.Drawable)>
<android.media.MediaRouter.UserRouteInfo: android.media.RemoteControlClient getRemoteControlClient()>
<android.media.MediaRouter.UserRouteInfo: void setIconResource(@DrawableResint)>
<android.media.MediaRouter.UserRouteInfo: void setName(CharSequence)>
<android.media.MediaRouter.UserRouteInfo: void setVolumeMax(int)>
<android.media.MediaRouter.UserRouteInfo: void setPlaybackType(int)>
<android.media.MediaRouter.UserRouteInfo: void setVolumeHandling(int)>
<android.media.MediaRouter.UserRouteInfo: void setDescription(CharSequence)>
<android.media.MediaRouter.UserRouteInfo: void setRemoteControlClient(android.media.RemoteControlClient)>
<java.security.cert.CertificateExpiredException: void <init>()>
<java.security.cert.CertificateExpiredException: void <init>(String)>
<android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl: void setEnabled(boolean)>
<android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl: boolean isEnabled()>
<android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl: void revokeSelf()>
<android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl: void <init>()>
<android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl: boolean isRevoked()>
<android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl: void dispatchTrackballEvent(int,android.view.MotionEvent,android.view.inputmethod.InputMethodSession.EventCallback)>
<android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl: void dispatchGenericMotionEvent(int,android.view.MotionEvent,android.view.inputmethod.InputMethodSession.EventCallback)>
<android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl: void dispatchKeyEvent(int,android.view.KeyEvent,android.view.inputmethod.InputMethodSession.EventCallback)>
<android.widget.ExpandableListView.OnGroupClickListener: boolean onGroupClick(android.widget.ExpandableListView,android.view.View,int,long)>
<android.app.ActivityManager.TaskDescription: void <init>(String,@DrawableRes int,int)>
<android.app.ActivityManager.TaskDescription: android.graphics.Bitmap getIcon()>
<android.app.ActivityManager.TaskDescription: void <init>(String,@DrawableRes int)>
<android.app.ActivityManager.TaskDescription: void <init>(String)>
<android.app.ActivityManager.TaskDescription: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager.TaskDescription: int getIconResource()>
<android.app.ActivityManager.TaskDescription: void writeToParcel(android.os.Parcel,int)>
<android.app.ActivityManager.TaskDescription: void <init>(String,android.graphics.Bitmap,int)>
<android.app.ActivityManager.TaskDescription: int getPrimaryColor()>
<android.app.ActivityManager.TaskDescription: java.lang.String getIconFilename()>
<android.app.ActivityManager.TaskDescription: void <init>(android.app.ActivityManager.TaskDescription)>
<android.app.ActivityManager.TaskDescription: void <init>(String,android.graphics.Bitmap)>
<android.app.ActivityManager.TaskDescription: void <init>()>
<android.app.ActivityManager.TaskDescription: int describeContents()>
<android.app.ActivityManager.TaskDescription: java.lang.String getLabel()>
<android.view.textservice.SpellCheckerSession: void getSuggestions(android.view.textservice.TextInfo[],int,boolean)>
<android.view.textservice.SpellCheckerSession: void getSentenceSuggestions(android.view.textservice.TextInfo[],int)>
<android.view.textservice.SpellCheckerSession: void getSuggestions(android.view.textservice.TextInfo,int)>
<android.view.textservice.SpellCheckerSession: void close()>
<android.view.textservice.SpellCheckerSession: boolean isSessionDisconnected()>
<android.view.textservice.SpellCheckerSession: void cancel()>
<android.view.textservice.SpellCheckerSession: android.view.textservice.SpellCheckerInfo getSpellChecker()>
<java.io.PrintWriter: void <init>(java.io.File,String)>
<java.io.PrintWriter: void <init>(String)>
<java.io.PrintWriter: void close()>
<java.io.PrintWriter: void print(double)>
<java.io.PrintWriter: void println()>
<java.io.PrintWriter: void <init>(java.io.OutputStream)>
<java.io.PrintWriter: java.io.PrintWriter format(java.util.Locale,java.lang.String,java.lang.Object...)>
<java.io.PrintWriter: void write(char[])>
<java.io.PrintWriter: void write(java.lang.String,int,int)>
<java.io.PrintWriter: java.io.PrintWriter append(char)>
<java.io.PrintWriter: void println(java.lang.Object)>
<java.io.PrintWriter: void print(long)>
<java.io.PrintWriter: void println(java.lang.String)>
<java.io.PrintWriter: void print(int)>
<java.io.PrintWriter: void print(boolean)>
<java.io.PrintWriter: void print(java.lang.Object)>
<java.io.PrintWriter: void write(int)>
<java.io.PrintWriter: boolean checkError()>
<java.io.PrintWriter: void println(long)>
<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>
<java.io.PrintWriter: void clearError()>
<java.io.PrintWriter: void flush()>
<java.io.PrintWriter: void <init>(String,String)>
<java.io.PrintWriter: void print(char[])>
<java.io.PrintWriter: void <init>(java.io.Writer)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: java.io.PrintWriter append(CharSequence,int,int)>
<java.io.PrintWriter: void println(boolean)>
<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>
<java.io.PrintWriter: void print(float)>
<java.io.PrintWriter: java.io.PrintWriter append(CharSequence)>
<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object...)>
<java.io.PrintWriter: void println(float)>
<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object...)>
<java.io.PrintWriter: void println(char)>
<java.io.PrintWriter: void println(double)>
<java.io.PrintWriter: void println(int)>
<java.io.PrintWriter: void <init>(java.io.File)>
<java.io.PrintWriter: java.io.PrintWriter printf(java.util.Locale,java.lang.String,java.lang.Object...)>
<java.io.PrintWriter: void write(java.lang.String)>
<java.io.PrintWriter: void setError()>
<java.io.PrintWriter: void write(char[],int,int)>
<java.io.PrintWriter: void println(char[])>
<java.io.PrintWriter: void print(char)>
<java.io.ObjectInputValidation: void validateObject()>
<android.R.integer: void <init>()>
<android.hardware.Camera.PreviewCallback: void onPreviewFrame(byte[],android.hardware.Camera)>
<javax.net.ssl.SSLException: void <init>(String)>
<javax.net.ssl.SSLException: void <init>(String,Throwable)>
<javax.net.ssl.SSLException: void <init>(Throwable)>
<java.nio.channels.UnresolvedAddressException: void <init>()>
<android.app.prediction.AppTarget.Builder: void <init>(android.app.prediction.AppTargetId,String,android.os.UserHandle)>
<android.app.prediction.AppTarget.Builder: android.app.prediction.AppTarget build()>
<android.app.prediction.AppTarget.Builder: void <init>(android.app.prediction.AppTargetId,android.content.pm.ShortcutInfo)>
<android.app.prediction.AppTarget.Builder: android.app.prediction.AppTarget.Builder setClassName(java.lang.String)>
<android.app.prediction.AppTarget.Builder: android.app.prediction.AppTarget.Builder setRank(int)>
<android.text.Html: android.text.Spanned fromHtml(java.lang.String)>
<android.text.Html: android.text.Spanned fromHtml(java.lang.String,int,android.text.Html.ImageGetter,android.text.Html.TagHandler)>
<android.text.Html: android.text.Spanned fromHtml(java.lang.String,android.text.Html.ImageGetter,android.text.Html.TagHandler)>
<android.text.Html: java.lang.String toHtml(android.text.Spanned,int)>
<android.text.Html: java.lang.String toHtml(android.text.Spanned)>
<android.text.Html: java.lang.String escapeHtml(CharSequence)>
<android.text.Html: android.text.Spanned fromHtml(java.lang.String,int)>
<java.security.Guard: void checkGuard(java.lang.Object)>
<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster lastInMonth(java.time.DayOfWeek)>
<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster lastDayOfMonth()>
<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster previousOrSame(java.time.DayOfWeek)>
<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster previous(java.time.DayOfWeek)>
<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster firstDayOfMonth()>
<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster next(java.time.DayOfWeek)>
<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster firstDayOfNextYear()>
<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster firstInMonth(java.time.DayOfWeek)>
<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster nextOrSame(java.time.DayOfWeek)>
<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster lastDayOfYear()>
<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster firstDayOfYear()>
<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster firstDayOfNextMonth()>
<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster ofDateAdjuster(java.util.function.UnaryOperator)>
<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster dayOfWeekInMonth(int,java.time.DayOfWeek)>
<javax.xml.namespace.QName: void <init>(String,String,String)>
<javax.xml.namespace.QName: boolean equals(java.lang.Object)>
<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>
<javax.xml.namespace.QName: void <init>(String,String)>
<javax.xml.namespace.QName: javax.xml.namespace.QName valueOf(java.lang.String)>
<javax.xml.namespace.QName: java.lang.String getLocalPart()>
<javax.xml.namespace.QName: java.lang.String getPrefix()>
<javax.xml.namespace.QName: void <init>(String)>
<javax.xml.namespace.QName: int hashCode()>
<android.text.InputFilter: CharSequence filter(CharSequence,int,int,android.text.Spanned,int,int)>
<android.speech.RecognitionListener: void onError(int)>
<android.speech.RecognitionListener: void onEvent(int,android.os.Bundle)>
<android.speech.RecognitionListener: void onResults(android.os.Bundle)>
<android.speech.RecognitionListener: void onBeginningOfSpeech()>
<android.speech.RecognitionListener: void onRmsChanged(float)>
<android.speech.RecognitionListener: void onEndOfSpeech()>
<android.speech.RecognitionListener: void onPartialResults(android.os.Bundle)>
<android.speech.RecognitionListener: void onBufferReceived(byte[])>
<android.speech.RecognitionListener: void onReadyForSpeech(android.os.Bundle)>
<android.telephony.RadioAccessSpecifier: int[] getChannels()>
<android.telephony.RadioAccessSpecifier: int describeContents()>
<android.telephony.RadioAccessSpecifier: int getRadioAccessNetwork()>
<android.telephony.RadioAccessSpecifier: void writeToParcel(android.os.Parcel,int)>
<android.telephony.RadioAccessSpecifier: void <init>(int,int[],int[])>
<android.telephony.RadioAccessSpecifier: int[] getBands()>
<android.os.BatterySaverPolicyConfig: boolean getDisableSoundTrigger()>
<android.os.BatterySaverPolicyConfig: boolean getEnableDataSaver()>
<android.os.BatterySaverPolicyConfig: boolean getDisableAnimation()>
<android.os.BatterySaverPolicyConfig: boolean getForceAllAppsStandby()>
<android.os.BatterySaverPolicyConfig: boolean getDisableVibration()>
<android.os.BatterySaverPolicyConfig: boolean getEnableQuickDoze()>
<android.os.BatterySaverPolicyConfig: java.util.Map getDeviceSpecificSettings()>
<android.os.BatterySaverPolicyConfig: boolean getEnableAdjustBrightness()>
<android.os.BatterySaverPolicyConfig: void writeToParcel(android.os.Parcel,int)>
<android.os.BatterySaverPolicyConfig: boolean getDisableOptionalSensors()>
<android.os.BatterySaverPolicyConfig: float getAdjustBrightnessFactor()>
<android.os.BatterySaverPolicyConfig: int describeContents()>
<android.os.BatterySaverPolicyConfig: boolean getDeferKeyValueBackup()>
<android.os.BatterySaverPolicyConfig: boolean getDisableLaunchBoost()>
<android.os.BatterySaverPolicyConfig: boolean getDeferFullBackup()>
<android.os.BatterySaverPolicyConfig: boolean getAdvertiseIsEnabled()>
<android.os.BatterySaverPolicyConfig: boolean getEnableFirewall()>
<android.os.BatterySaverPolicyConfig: int getLocationMode()>
<android.os.BatterySaverPolicyConfig: boolean getEnableNightMode()>
<android.os.BatterySaverPolicyConfig: boolean getForceBackgroundCheck()>
<android.os.BatterySaverPolicyConfig: boolean getDisableAod()>
<android.os.SystemUpdateManager: android.os.Bundle retrieveSystemUpdateInfo()>
<android.os.SystemUpdateManager: void updateSystemUpdateInfo(android.os.PersistableBundle)>
<android.bluetooth.BluetoothGattCharacteristic: void setWriteType(int)>
<android.bluetooth.BluetoothGattCharacteristic: int describeContents()>
<android.bluetooth.BluetoothGattCharacteristic: java.lang.Float getFloatValue(int,int)>
<android.bluetooth.BluetoothGattCharacteristic: boolean setValue(java.lang.String)>
<android.bluetooth.BluetoothGattCharacteristic: java.lang.String getStringValue(int)>
<android.bluetooth.BluetoothGattCharacteristic: int getProperties()>
<android.bluetooth.BluetoothGattCharacteristic: void <init>(java.util.UUID,int,int)>
<android.bluetooth.BluetoothGattCharacteristic: boolean setValue(int,int,int)>
<android.bluetooth.BluetoothGattCharacteristic: java.util.UUID getUuid()>
<android.bluetooth.BluetoothGattCharacteristic: android.bluetooth.BluetoothGattDescriptor getDescriptor(java.util.UUID)>
<android.bluetooth.BluetoothGattCharacteristic: java.util.List getDescriptors()>
<android.bluetooth.BluetoothGattCharacteristic: java.lang.Integer getIntValue(int,int)>
<android.bluetooth.BluetoothGattCharacteristic: boolean addDescriptor(android.bluetooth.BluetoothGattDescriptor)>
<android.bluetooth.BluetoothGattCharacteristic: boolean setValue(byte[])>
<android.bluetooth.BluetoothGattCharacteristic: int getWriteType()>
<android.bluetooth.BluetoothGattCharacteristic: int getPermissions()>
<android.bluetooth.BluetoothGattCharacteristic: int getInstanceId()>
<android.bluetooth.BluetoothGattCharacteristic: android.bluetooth.BluetoothGattService getService()>
<android.bluetooth.BluetoothGattCharacteristic: void writeToParcel(android.os.Parcel,int)>
<android.bluetooth.BluetoothGattCharacteristic: boolean setValue(int,int,int,int)>
<android.bluetooth.BluetoothGattCharacteristic: byte[] getValue()>
<android.hardware.hdmi.HdmiTvClient.SelectCallback: void onComplete(int)>
<android.widget.MediaController: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.MediaController: void hide()>
<android.widget.MediaController: void show()>
<android.widget.MediaController: void <init>(android.content.Context,boolean)>
<android.widget.MediaController: void show(int)>
<android.widget.MediaController: void onFinishInflate()>
<android.widget.MediaController: void setPrevNextListeners(android.view.View.OnClickListener,android.view.View.OnClickListener)>
<android.widget.MediaController: void setMediaPlayer(android.widget.MediaController.MediaPlayerControl)>
<android.widget.MediaController: void <init>(android.content.Context)>
<android.widget.MediaController: void setAnchorView(android.view.View)>
<android.widget.MediaController: boolean isShowing()>
<android.os.StrictMode.OnVmViolationListener: void onVmViolation(android.os.strictmode.Violation)>
<javax.xml.validation.Schema: void <init>()>
<javax.xml.validation.Schema: javax.xml.validation.ValidatorHandler newValidatorHandler()>
<javax.xml.validation.Schema: javax.xml.validation.Validator newValidator()>
<android.widget.ListAdapter extends android.widget.Adapter: boolean isEnabled(int)>
<android.widget.ListAdapter extends android.widget.Adapter: boolean areAllItemsEnabled()>
<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>
<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>
<android.hardware.hdmi.HdmiTvClient.HdmiMhlVendorCommandListener: void onReceived(int,int,int,byte[])>
<android.icu.text.BidiRun: int getStart()>
<android.icu.text.BidiRun: byte getEmbeddingLevel()>
<android.icu.text.BidiRun: int getLength()>
<android.icu.text.BidiRun: int getLimit()>
<android.icu.text.BidiRun: boolean isOddRun()>
<android.icu.text.BidiRun: byte getDirection()>
<android.icu.text.BidiRun: boolean isEvenRun()>
<android.provider.ContactsContract.Contacts.AggregationSuggestions.Builder: android.net.Uri build()>
<android.provider.ContactsContract.Contacts.AggregationSuggestions.Builder: android.provider.ContactsContract.Contacts.AggregationSuggestions.Builder setLimit(int)>
<android.provider.ContactsContract.Contacts.AggregationSuggestions.Builder: android.provider.ContactsContract.Contacts.AggregationSuggestions.Builder addNameParameter(java.lang.String)>
<android.provider.ContactsContract.Contacts.AggregationSuggestions.Builder: void <init>()>
<android.provider.ContactsContract.Contacts.AggregationSuggestions.Builder: android.provider.ContactsContract.Contacts.AggregationSuggestions.Builder setContactId(long)>
<android.widget.SeekBar: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.SeekBar: void <init>(android.content.Context)>
<android.widget.SeekBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.SeekBar: void setOnSeekBarChangeListener(android.widget.SeekBar.OnSeekBarChangeListener)>
<android.widget.SeekBar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.appwidget.AppWidgetHostView: android.graphics.Rect getDefaultPaddingForWidget(android.content.Context,android.content.ComponentName,android.graphics.Rect)>
<android.appwidget.AppWidgetHostView: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo()>
<android.appwidget.AppWidgetHostView: void updateAppWidget(android.widget.RemoteViews)>
<android.appwidget.AppWidgetHostView: android.view.View getDefaultView()>
<android.appwidget.AppWidgetHostView: void setOnLightBackground(boolean)>
<android.appwidget.AppWidgetHostView: int getAppWidgetId()>
<android.appwidget.AppWidgetHostView: void <init>(android.content.Context)>
<android.appwidget.AppWidgetHostView: void updateAppWidgetOptions(android.os.Bundle)>
<android.appwidget.AppWidgetHostView: void setAppWidget(int,android.appwidget.AppWidgetProviderInfo)>
<android.appwidget.AppWidgetHostView: void updateAppWidgetSize(android.os.Bundle,int,int,int,int)>
<android.appwidget.AppWidgetHostView: android.view.View getErrorView()>
<android.appwidget.AppWidgetHostView: void <init>(android.content.Context,int,int)>
<android.appwidget.AppWidgetHostView: void prepareView(android.view.View)>
<android.appwidget.AppWidgetHostView: void setExecutor(java.util.concurrent.Executor)>
<android.widget.RatingBar: void setStepSize(float)>
<android.widget.RatingBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.RatingBar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.RatingBar: int getNumStars()>
<android.widget.RatingBar: void setRating(float)>
<android.widget.RatingBar: float getRating()>
<android.widget.RatingBar: void setNumStars(int)>
<android.widget.RatingBar: void setOnRatingBarChangeListener(android.widget.RatingBar.OnRatingBarChangeListener)>
<android.widget.RatingBar: boolean isIndicator()>
<android.widget.RatingBar: float getStepSize()>
<android.widget.RatingBar: android.widget.RatingBar.OnRatingBarChangeListener getOnRatingBarChangeListener()>
<android.widget.RatingBar: void <init>(android.content.Context)>
<android.widget.RatingBar: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RatingBar: void setIsIndicator(boolean)>
<android.renderscript.Matrix3f: void <init>()>
<android.renderscript.Matrix3f: void rotate(float,float,float,float)>
<android.renderscript.Matrix3f: void translate(float,float)>
<android.renderscript.Matrix3f: float[] getArray()>
<android.renderscript.Matrix3f: void scale(float,float)>
<android.renderscript.Matrix3f: void set(int,int,float)>
<android.renderscript.Matrix3f: void loadIdentity()>
<android.renderscript.Matrix3f: void loadRotate(float)>
<android.renderscript.Matrix3f: void loadScale(float,float,float)>
<android.renderscript.Matrix3f: void load(android.renderscript.Matrix3f)>
<android.renderscript.Matrix3f: void scale(float,float,float)>
<android.renderscript.Matrix3f: void loadTranslate(float,float)>
<android.renderscript.Matrix3f: float get(int,int)>
<android.renderscript.Matrix3f: void rotate(float)>
<android.renderscript.Matrix3f: void <init>(float[])>
<android.renderscript.Matrix3f: void multiply(android.renderscript.Matrix3f)>
<android.renderscript.Matrix3f: void transpose()>
<android.renderscript.Matrix3f: void loadRotate(float,float,float,float)>
<android.renderscript.Matrix3f: void loadMultiply(android.renderscript.Matrix3f,android.renderscript.Matrix3f)>
<android.renderscript.Matrix3f: void loadScale(float,float)>
<android.service.textclassifier.TextClassifierService: android.view.textclassifier.TextClassifier getDefaultTextClassifierImplementation(android.content.Context)>
<android.service.textclassifier.TextClassifierService: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
<android.service.textclassifier.TextClassifierService: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>
<android.service.textclassifier.TextClassifierService: android.view.textclassifier.TextClassifier getLocalTextClassifier()>
<android.service.textclassifier.TextClassifierService: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification.Request,android.os.CancellationSignal,android.service.textclassifier.TextClassifierService.Callback)>
<android.service.textclassifier.TextClassifierService: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>
<android.service.textclassifier.TextClassifierService: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage.Request,android.os.CancellationSignal,android.service.textclassifier.TextClassifierService.Callback)>
<android.service.textclassifier.TextClassifierService: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks.Request,android.os.CancellationSignal,android.service.textclassifier.TextClassifierService.Callback)>
<android.service.textclassifier.TextClassifierService: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection.Request,android.os.CancellationSignal,android.service.textclassifier.TextClassifierService.Callback)>
<android.service.textclassifier.TextClassifierService: android.os.IBinder onBind(android.content.Intent)>
<android.service.textclassifier.TextClassifierService: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions.Request,android.os.CancellationSignal,android.service.textclassifier.TextClassifierService.Callback)>
<android.service.textclassifier.TextClassifierService: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)>
<android.service.textclassifier.TextClassifierService: void <init>()>
<android.content.res.Resources.Theme: android.content.res.Resources getResources()>
<android.content.res.Resources.Theme: void dump(int,java.lang.String,java.lang.String)>
<android.content.res.Resources.Theme: void applyStyle(int,boolean)>
<android.content.res.Resources.Theme: android.content.res.TypedArray obtainStyledAttributes(@StyleResint,@StyleableResint[])>
<android.content.res.Resources.Theme: void rebase()>
<android.content.res.Resources.Theme: android.graphics.drawable.Drawable getDrawable(@DrawableResint)>
<android.content.res.Resources.Theme: int[] getAttributeResolutionStack(@AttrResint,@StyleResint,@StyleResint)>
<android.content.res.Resources.Theme: int getExplicitStyle(android.util.AttributeSet)>
<android.content.res.Resources.Theme: void setTo(android.content.res.Resources.Theme)>
<android.content.res.Resources.Theme: android.content.res.TypedArray obtainStyledAttributes(@StyleableResint[])>
<android.content.res.Resources.Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,@StyleableResint[],@AttrResint,@StyleResint)>
<android.content.res.Resources.Theme: int getChangingConfigurations()>
<android.content.res.Resources.Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>
<android.nfc.FormatException: void <init>(String,Throwable)>
<android.nfc.FormatException: void <init>()>
<android.nfc.FormatException: void <init>(String)>
<android.util.Base64OutputStream: void <init>(java.io.OutputStream,int)>
<android.text.format.Formatter: java.lang.String formatIpAddress(int)>
<android.text.format.Formatter: java.lang.String formatShortFileSize(android.content.Context,long)>
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>
<android.text.format.Formatter: void <init>()>
<android.webkit.ValueCallback: void onReceiveValue(T)>
<android.webkit.TracingConfig: int getPredefinedCategories()>
<android.webkit.TracingConfig: int getTracingMode()>
<android.webkit.TracingConfig: java.util.List getCustomIncludedCategories()>
<android.provider.CallLog: void <init>()>
<android.text.style.AlignmentSpan extends android.text.style.ParagraphStyle: android.text.Layout.Alignment getAlignment()>
<android.graphics.PathDashPathEffect: void <init>(android.graphics.Path,float,float,android.graphics.PathDashPathEffect.Style)>
<android.text.TextUtils: boolean equals(CharSequence,CharSequence)>
<android.text.TextUtils: int indexOf(CharSequence,char)>
<android.text.TextUtils: boolean isGraphic(CharSequence)>
<android.text.TextUtils: boolean isGraphic(char)>
<android.text.TextUtils: int lastIndexOf(CharSequence,char,int)>
<android.text.TextUtils: CharSequence ellipsize(CharSequence,android.text.TextPaint,float,android.text.TextUtils.TruncateAt,boolean,android.text.TextUtils.EllipsizeCallback)>
<android.text.TextUtils: int indexOf(CharSequence,CharSequence,int)>
<android.text.TextUtils: java.lang.String join(CharSequence,Iterable)>
<android.text.TextUtils: int getOffsetBefore(CharSequence,int)>
<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.lang.String)>
<android.text.TextUtils: java.lang.String substring(CharSequence,int,int)>
<android.text.TextUtils: CharSequence commaEllipsize(CharSequence,android.text.TextPaint,float,java.lang.String,java.lang.String)>
<android.text.TextUtils: int getTrimmedLength(CharSequence)>
<android.text.TextUtils: int indexOf(CharSequence,char,int,int)>
<android.text.TextUtils: int getOffsetAfter(CharSequence,int)>
<android.text.TextUtils: int lastIndexOf(CharSequence,char)>
<android.text.TextUtils: CharSequence expandTemplate(CharSequence,java.lang.CharSequence...)>
<android.text.TextUtils: java.lang.String join(CharSequence,java.lang.Object[])>
<android.text.TextUtils: int indexOf(CharSequence,CharSequence,int,int)>
<android.text.TextUtils: int lastIndexOf(CharSequence,char,int,int)>
<android.text.TextUtils: int indexOf(CharSequence,CharSequence)>
<android.text.TextUtils: CharSequence stringOrSpannedString(CharSequence)>
<android.text.TextUtils: CharSequence concat(java.lang.CharSequence...)>
<android.text.TextUtils: CharSequence ellipsize(CharSequence,android.text.TextPaint,float,android.text.TextUtils.TruncateAt)>
<android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)>
<android.text.TextUtils: boolean isDigitsOnly(CharSequence)>
<android.text.TextUtils: CharSequence listEllipsize(android.content.Context,java.util.List,java.lang.String,android.text.TextPaint,float,@PluralsResint)>
<android.text.TextUtils: int indexOf(CharSequence,char,int)>
<android.text.TextUtils: void dumpSpans(CharSequence,android.util.Printer,java.lang.String)>
<android.text.TextUtils: CharSequence replace(CharSequence,java.lang.String[],CharSequence[])>
<android.text.TextUtils: CharSequence makeSafeForPresentation(java.lang.String,int,float,int)>
<android.text.TextUtils: CharSequence getReverse(CharSequence,int,int)>
<android.text.TextUtils: boolean regionMatches(CharSequence,int,CharSequence,int,int)>
<android.text.TextUtils: boolean isEmpty(CharSequence)>
<android.text.TextUtils: void getChars(CharSequence,int,int,char[],int)>
<android.text.TextUtils: java.lang.String htmlEncode(java.lang.String)>
<android.text.TextUtils: int getCapsMode(CharSequence,int,int)>
<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.util.regex.Pattern)>
<android.text.TextUtils: void writeToParcel(CharSequence,android.os.Parcel,int)>
<android.text.TextUtils: int getLayoutDirectionFromLocale(java.util.Locale)>
<java.nio.file.attribute.UserDefinedFileAttributeView extends java.nio.file.attribute.FileAttributeView: java.util.List list()>
<java.nio.file.attribute.UserDefinedFileAttributeView extends java.nio.file.attribute.FileAttributeView: void delete(java.lang.String)>
<java.nio.file.attribute.UserDefinedFileAttributeView extends java.nio.file.attribute.FileAttributeView: int write(java.lang.String,java.nio.ByteBuffer)>
<java.nio.file.attribute.UserDefinedFileAttributeView extends java.nio.file.attribute.FileAttributeView: int read(java.lang.String,java.nio.ByteBuffer)>
<java.nio.file.attribute.UserDefinedFileAttributeView extends java.nio.file.attribute.FileAttributeView: int size(java.lang.String)>
<java.util.FormatterClosedException: void <init>()>
<android.app.usage.NetworkStats.Bucket: int getState()>
<android.app.usage.NetworkStats.Bucket: long getRxPackets()>
<android.app.usage.NetworkStats.Bucket: long getTxBytes()>
<android.app.usage.NetworkStats.Bucket: int getRoaming()>
<android.app.usage.NetworkStats.Bucket: long getStartTimeStamp()>
<android.app.usage.NetworkStats.Bucket: long getTxPackets()>
<android.app.usage.NetworkStats.Bucket: int getUid()>
<android.app.usage.NetworkStats.Bucket: void <init>()>
<android.app.usage.NetworkStats.Bucket: int getDefaultNetworkStatus()>
<android.app.usage.NetworkStats.Bucket: long getEndTimeStamp()>
<android.app.usage.NetworkStats.Bucket: long getRxBytes()>
<android.app.usage.NetworkStats.Bucket: int getMetered()>
<android.app.usage.NetworkStats.Bucket: int getTag()>
<android.service.autofill.BatchUpdates.Builder: android.service.autofill.BatchUpdates.Builder updateTemplate(android.widget.RemoteViews)>
<android.service.autofill.BatchUpdates.Builder: android.service.autofill.BatchUpdates build()>
<android.service.autofill.BatchUpdates.Builder: void <init>()>
<android.service.autofill.BatchUpdates.Builder: android.service.autofill.BatchUpdates.Builder transformChild(int,android.service.autofill.Transformation)>
<org.w3c.dom.ls.LSParser: org.w3c.dom.Node parseWithContext(org.w3c.dom.ls.LSInput,org.w3c.dom.Node,short)>
<org.w3c.dom.ls.LSParser: boolean getBusy()>
<org.w3c.dom.ls.LSParser: void abort()>
<org.w3c.dom.ls.LSParser: org.w3c.dom.Document parse(org.w3c.dom.ls.LSInput)>
<org.w3c.dom.ls.LSParser: org.w3c.dom.Document parseURI(java.lang.String)>
<org.w3c.dom.ls.LSParser: boolean getAsync()>
<org.w3c.dom.ls.LSParser: org.w3c.dom.ls.LSParserFilter getFilter()>
<org.w3c.dom.ls.LSParser: void setFilter(org.w3c.dom.ls.LSParserFilter)>
<org.w3c.dom.ls.LSParser: org.w3c.dom.DOMConfiguration getDomConfig()>
<android.graphics.PorterDuffXfermode: void <init>(android.graphics.PorterDuff.Mode)>
<android.util.SparseBooleanArray: void put(int,boolean)>
<android.util.SparseBooleanArray: boolean get(int)>
<android.util.SparseBooleanArray: int indexOfKey(int)>
<android.util.SparseBooleanArray: void setValueAt(int,boolean)>
<android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()>
<android.util.SparseBooleanArray: int indexOfValue(boolean)>
<android.util.SparseBooleanArray: void <init>(int)>
<android.util.SparseBooleanArray: void <init>()>
<android.util.SparseBooleanArray: int size()>
<android.util.SparseBooleanArray: void delete(int)>
<android.util.SparseBooleanArray: int keyAt(int)>
<android.util.SparseBooleanArray: boolean valueAt(int)>
<android.util.SparseBooleanArray: void clear()>
<android.util.SparseBooleanArray: boolean get(int,boolean)>
<android.util.SparseBooleanArray: void removeAt(int)>
<android.util.SparseBooleanArray: void append(int,boolean)>
<android.provider.Contacts.Intents: void <init>()>
<android.renderscript.Matrix2f: void loadMultiply(android.renderscript.Matrix2f,android.renderscript.Matrix2f)>
<android.renderscript.Matrix2f: void <init>(float[])>
<android.renderscript.Matrix2f: void loadRotate(float)>
<android.renderscript.Matrix2f: void loadIdentity()>
<android.renderscript.Matrix2f: void load(android.renderscript.Matrix2f)>
<android.renderscript.Matrix2f: void loadScale(float,float)>
<android.renderscript.Matrix2f: void <init>()>
<android.renderscript.Matrix2f: void multiply(android.renderscript.Matrix2f)>
<android.renderscript.Matrix2f: void set(int,int,float)>
<android.renderscript.Matrix2f: float get(int,int)>
<android.renderscript.Matrix2f: void rotate(float)>
<android.renderscript.Matrix2f: void scale(float,float)>
<android.renderscript.Matrix2f: void transpose()>
<android.renderscript.Matrix2f: float[] getArray()>
<android.telephony.ims.stub.ImsCallSessionImplBase: void setListener(android.telephony.ims.ImsCallSessionListener)>
<android.telephony.ims.stub.ImsCallSessionImplBase: void inviteParticipants(java.lang.String[])>
<android.telephony.ims.stub.ImsCallSessionImplBase: void close()>
<android.telephony.ims.stub.ImsCallSessionImplBase: void sendDtmf(char,android.os.Message)>
<android.telephony.ims.stub.ImsCallSessionImplBase: void accept(int,android.telephony.ims.ImsStreamMediaProfile)>
<android.telephony.ims.stub.ImsCallSessionImplBase: android.telephony.ims.ImsCallProfile getRemoteCallProfile()>
<android.telephony.ims.stub.ImsCallSessionImplBase: void setMute(boolean)>
<android.telephony.ims.stub.ImsCallSessionImplBase: boolean isInCall()>
<android.telephony.ims.stub.ImsCallSessionImplBase: java.lang.String getCallId()>
<android.telephony.ims.stub.ImsCallSessionImplBase: void sendRttModifyResponse(boolean)>
<android.telephony.ims.stub.ImsCallSessionImplBase: android.telephony.ims.ImsVideoCallProvider getImsVideoCallProvider()>
<android.telephony.ims.stub.ImsCallSessionImplBase: void <init>()>
<android.telephony.ims.stub.ImsCallSessionImplBase: int getState()>
<android.telephony.ims.stub.ImsCallSessionImplBase: void startDtmf(char)>
<android.telephony.ims.stub.ImsCallSessionImplBase: android.telephony.ims.ImsCallProfile getCallProfile()>
<android.telephony.ims.stub.ImsCallSessionImplBase: void update(int,android.telephony.ims.ImsStreamMediaProfile)>
<android.telephony.ims.stub.ImsCallSessionImplBase: java.lang.String getProperty(java.lang.String)>
<android.telephony.ims.stub.ImsCallSessionImplBase: void reject(int)>
<android.telephony.ims.stub.ImsCallSessionImplBase: void startConference(java.lang.String[],android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.stub.ImsCallSessionImplBase: void start(java.lang.String,android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.stub.ImsCallSessionImplBase: void stopDtmf()>
<android.telephony.ims.stub.ImsCallSessionImplBase: android.telephony.ims.ImsCallProfile getLocalCallProfile()>
<android.telephony.ims.stub.ImsCallSessionImplBase: void hold(android.telephony.ims.ImsStreamMediaProfile)>
<android.telephony.ims.stub.ImsCallSessionImplBase: void deflect(java.lang.String)>
<android.telephony.ims.stub.ImsCallSessionImplBase: boolean isMultiparty()>
<android.telephony.ims.stub.ImsCallSessionImplBase: void terminate(int)>
<android.telephony.ims.stub.ImsCallSessionImplBase: void resume(android.telephony.ims.ImsStreamMediaProfile)>
<android.telephony.ims.stub.ImsCallSessionImplBase: void removeParticipants(java.lang.String[])>
<android.telephony.ims.stub.ImsCallSessionImplBase: void sendUssd(java.lang.String)>
<android.telephony.ims.stub.ImsCallSessionImplBase: void merge()>
<android.telephony.ims.stub.ImsCallSessionImplBase: void extendToConference(java.lang.String[])>
<android.telephony.ims.stub.ImsCallSessionImplBase: void sendRttMessage(java.lang.String)>
<android.telephony.ims.stub.ImsCallSessionImplBase: void sendRttModifyRequest(android.telephony.ims.ImsCallProfile)>
<android.content.res.Configuration: android.os.LocaleList getLocales()>
<android.content.res.Configuration: void writeToParcel(android.os.Parcel,int)>
<android.content.res.Configuration: void <init>(android.content.res.Configuration)>
<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>
<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>
<android.content.res.Configuration: boolean isScreenWideColorGamut()>
<android.content.res.Configuration: void readFromParcel(android.os.Parcel)>
<android.content.res.Configuration: void setTo(android.content.res.Configuration)>
<android.content.res.Configuration: boolean needNewResources(int,int)>
<android.content.res.Configuration: boolean isScreenHdr()>
<android.content.res.Configuration: int getLayoutDirection()>
<android.content.res.Configuration: int describeContents()>
<android.content.res.Configuration: void setLayoutDirection(java.util.Locale)>
<android.content.res.Configuration: void setLocale(java.util.Locale)>
<android.content.res.Configuration: void setToDefaults()>
<android.content.res.Configuration: void <init>()>
<android.content.res.Configuration: int diff(android.content.res.Configuration)>
<android.content.res.Configuration: boolean isScreenRound()>
<android.content.res.Configuration: boolean isLayoutSizeAtLeast(int)>
<android.content.res.Configuration: void setLocales(android.os.LocaleList)>
<android.content.res.Configuration: int compareTo(android.content.res.Configuration)>
<java.lang.ClassFormatError: void <init>(String)>
<java.lang.ClassFormatError: void <init>()>
<android.app.Fragment.SavedState: void writeToParcel(android.os.Parcel,int)>
<android.app.Fragment.SavedState: int describeContents()>
<android.media.MediaCodec.BufferInfo: void <init>()>
<android.media.MediaCodec.BufferInfo: void set(int,int,long,int)>
<javax.net.ssl.X509ExtendedKeyManager: void <init>()>
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)>
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)>
<android.os.DeadSystemException: void <init>()>
<android.graphics.fonts.SystemFonts: java.util.Set getAvailableFonts()>
<android.service.autofill.FieldClassification.Match: java.lang.String getCategoryId()>
<android.service.autofill.FieldClassification.Match: float getScore()>
<android.app.usage.UsageEvents.Event: android.content.res.Configuration getConfiguration()>
<android.app.usage.UsageEvents.Event: java.lang.String getTaskRootClassName()>
<android.app.usage.UsageEvents.Event: java.lang.String getClassName()>
<android.app.usage.UsageEvents.Event: int getEventType()>
<android.app.usage.UsageEvents.Event: long getTimeStamp()>
<android.app.usage.UsageEvents.Event: java.lang.String getPackageName()>
<android.app.usage.UsageEvents.Event: boolean isInstantApp()>
<android.app.usage.UsageEvents.Event: void <init>()>
<android.app.usage.UsageEvents.Event: int getInstanceId()>
<android.app.usage.UsageEvents.Event: java.lang.String getNotificationChannelId()>
<android.app.usage.UsageEvents.Event: int getAppStandbyBucket()>
<android.app.usage.UsageEvents.Event: java.lang.String getShortcutId()>
<android.app.usage.UsageEvents.Event: java.lang.String getTaskRootPackageName()>
<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery chronology()>
<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery offset()>
<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery localDate()>
<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery zoneId()>
<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery precision()>
<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery zone()>
<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery localTime()>
<java.lang.AutoCloseable: void close()>
<java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(int,float)>
<java.nio.ByteBuffer: byte get()>
<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>
<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(int,long)>
<java.nio.ByteBuffer: java.nio.CharBuffer asCharBuffer()>
<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(float)>
<java.nio.ByteBuffer: short getShort()>
<java.nio.ByteBuffer: java.nio.DoubleBuffer asDoubleBuffer()>
<java.nio.ByteBuffer: java.nio.ByteOrder order()>
<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>
<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(double)>
<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>
<java.nio.ByteBuffer: int getInt()>
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>
<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(int,double)>
<java.nio.ByteBuffer: long getLong()>
<java.nio.ByteBuffer: float getFloat()>
<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(char)>
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>
<java.nio.ByteBuffer: java.nio.LongBuffer asLongBuffer()>
<java.nio.ByteBuffer: short getShort(int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(int,short)>
<java.nio.ByteBuffer: java.nio.IntBuffer asIntBuffer()>
<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>
<java.nio.ByteBuffer: java.nio.ByteBuffer asReadOnlyBuffer()>
<java.nio.ByteBuffer: char getChar(int)>
<java.nio.ByteBuffer: double getDouble(int)>
<java.nio.ByteBuffer: int arrayOffset()>
<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>
<java.nio.ByteBuffer: int getInt(int)>
<java.nio.ByteBuffer: byte[] array()>
<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>
<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>
<java.nio.ByteBuffer: byte get(int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>
<java.nio.ByteBuffer: int compareTo(java.nio.ByteBuffer)>
<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(int,char)>
<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>
<java.nio.ByteBuffer: boolean hasArray()>
<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>
<java.nio.ByteBuffer: long getLong(int)>
<java.nio.ByteBuffer: float getFloat(int)>
<java.nio.ByteBuffer: char getChar()>
<java.nio.ByteBuffer: double getDouble()>
<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>
<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>
<android.app.RemoteInput: void setResultsSource(android.content.Intent,int)>
<android.app.RemoteInput: int getEditChoicesBeforeSending()>
<android.app.RemoteInput: void addDataResultToIntent(android.app.RemoteInput,android.content.Intent,java.util.Map)>
<android.app.RemoteInput: CharSequence[] getChoices()>
<android.app.RemoteInput: boolean getAllowFreeFormInput()>
<android.app.RemoteInput: java.lang.String getResultKey()>
<android.app.RemoteInput: android.os.Bundle getExtras()>
<android.app.RemoteInput: int getResultsSource(android.content.Intent)>
<android.app.RemoteInput: void writeToParcel(android.os.Parcel,int)>
<android.app.RemoteInput: android.os.Bundle getResultsFromIntent(android.content.Intent)>
<android.app.RemoteInput: java.util.Map getDataResultsFromIntent(android.content.Intent,java.lang.String)>
<android.app.RemoteInput: void addResultsToIntent(android.app.RemoteInput[],android.content.Intent,android.os.Bundle)>
<android.app.RemoteInput: java.util.Set getAllowedDataTypes()>
<android.app.RemoteInput: boolean isDataOnly()>
<android.app.RemoteInput: CharSequence getLabel()>
<android.app.RemoteInput: int describeContents()>
<android.telecom.PhoneAccountHandle: android.content.ComponentName getComponentName()>
<android.telecom.PhoneAccountHandle: void <init>(android.content.ComponentName,String,android.os.UserHandle)>
<android.telecom.PhoneAccountHandle: int describeContents()>
<android.telecom.PhoneAccountHandle: void writeToParcel(android.os.Parcel,int)>
<android.telecom.PhoneAccountHandle: void <init>(android.content.ComponentName,String)>
<android.telecom.PhoneAccountHandle: java.lang.String getId()>
<android.telecom.PhoneAccountHandle: android.os.UserHandle getUserHandle()>
<android.media.MediaPlayer.OnMediaTimeDiscontinuityListener: void onMediaTimeDiscontinuity(android.media.MediaPlayer,android.media.MediaTimestamp)>
<java.nio.channels.NotYetConnectedException: void <init>()>
<javax.crypto.ExemptionMechanismException: void <init>(String)>
<javax.crypto.ExemptionMechanismException: void <init>()>
<java.net.CacheResponse: java.io.InputStream getBody()>
<java.net.CacheResponse: java.util.Map getHeaders()>
<java.net.CacheResponse: void <init>()>
<android.util.AttributeSet: java.lang.String getIdAttribute()>
<android.util.AttributeSet: float getAttributeFloatValue(int,float)>
<android.util.AttributeSet: java.lang.String getAttributeValue(int)>
<android.util.AttributeSet: int getAttributeListValue(int,java.lang.String[],int)>
<android.util.AttributeSet: boolean getAttributeBooleanValue(java.lang.String,java.lang.String,boolean)>
<android.util.AttributeSet: java.lang.String getPositionDescription()>
<android.util.AttributeSet: float getAttributeFloatValue(java.lang.String,java.lang.String,float)>
<android.util.AttributeSet: java.lang.String getAttributeName(int)>
<android.util.AttributeSet: int getAttributeUnsignedIntValue(int,int)>
<android.util.AttributeSet: int getStyleAttribute()>
<android.util.AttributeSet: int getIdAttributeResourceValue(int)>
<android.util.AttributeSet: int getAttributeIntValue(java.lang.String,java.lang.String,int)>
<android.util.AttributeSet: int getAttributeResourceValue(java.lang.String,java.lang.String,int)>
<android.util.AttributeSet: int getAttributeResourceValue(int,int)>
<android.util.AttributeSet: java.lang.String getAttributeNamespace(int)>
<android.util.AttributeSet: boolean getAttributeBooleanValue(int,boolean)>
<android.util.AttributeSet: java.lang.String getClassAttribute()>
<android.util.AttributeSet: int getAttributeNameResource(int)>
<android.util.AttributeSet: int getAttributeListValue(java.lang.String,java.lang.String,java.lang.String[],int)>
<android.util.AttributeSet: int getAttributeUnsignedIntValue(java.lang.String,java.lang.String,int)>
<android.util.AttributeSet: int getAttributeCount()>
<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>
<android.util.AttributeSet: int getAttributeIntValue(int,int)>
<java.util.ResourceBundle.Control: java.util.List getFormats(java.lang.String)>
<java.util.ResourceBundle.Control: void <init>()>
<java.util.ResourceBundle.Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>
<java.util.ResourceBundle.Control: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>
<java.util.ResourceBundle.Control: java.util.ResourceBundle.Control getNoFallbackControl(java.util.List)>
<java.util.ResourceBundle.Control: long getTimeToLive(java.lang.String,java.util.Locale)>
<java.util.ResourceBundle.Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>
<java.util.ResourceBundle.Control: java.util.ResourceBundle.Control getControl(java.util.List)>
<java.util.ResourceBundle.Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>
<java.util.ResourceBundle.Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>
<java.util.ResourceBundle.Control: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)>
<android.app.NotificationChannel: int getUserLockedFields()>
<android.app.NotificationChannel: int getLightColor()>
<android.app.NotificationChannel: boolean canShowBadge()>
<android.app.NotificationChannel: void writeToParcel(android.os.Parcel,int)>
<android.app.NotificationChannel: java.lang.String getDescription()>
<android.app.NotificationChannel: boolean canBubble()>
<android.app.NotificationChannel: void setAllowBubbles(boolean)>
<android.app.NotificationChannel: void setLockscreenVisibility(int)>
<android.app.NotificationChannel: android.media.AudioAttributes getAudioAttributes()>
<android.app.NotificationChannel: void setShowBadge(boolean)>
<android.app.NotificationChannel: CharSequence getName()>
<android.app.NotificationChannel: void setImportanceLockedByCriticalDeviceFunction(boolean)>
<android.app.NotificationChannel: void enableLights(boolean)>
<android.app.NotificationChannel: boolean canBypassDnd()>
<android.app.NotificationChannel: long[] getVibrationPattern()>
<android.app.NotificationChannel: boolean shouldShowLights()>
<android.app.NotificationChannel: void setImportance(int)>
<android.app.NotificationChannel: boolean hasUserSetImportance()>
<android.app.NotificationChannel: int getImportance()>
<android.app.NotificationChannel: void setGroup(java.lang.String)>
<android.app.NotificationChannel: void setDescription(java.lang.String)>
<android.app.NotificationChannel: void writeXml(org.xmlpull.v1.XmlSerializer)>
<android.app.NotificationChannel: void setLightColor(int)>
<android.app.NotificationChannel: void setVibrationPattern(long[])>
<android.app.NotificationChannel: boolean shouldVibrate()>
<android.app.NotificationChannel: boolean isDeleted()>
<android.app.NotificationChannel: void setBypassDnd(boolean)>
<android.app.NotificationChannel: void setSound(android.net.Uri,android.media.AudioAttributes)>
<android.app.NotificationChannel: boolean isImportanceLockedByCriticalDeviceFunction()>
<android.app.NotificationChannel: android.net.Uri getSound()>
<android.app.NotificationChannel: void setImportanceLockedByOEM(boolean)>
<android.app.NotificationChannel: boolean isImportanceLockedByOEM()>
<android.app.NotificationChannel: java.lang.String getGroup()>
<android.app.NotificationChannel: org.json.JSONObject toJson()>
<android.app.NotificationChannel: void enableVibration(boolean)>
<android.app.NotificationChannel: void setName(CharSequence)>
<android.app.NotificationChannel: void <init>(String,CharSequence,int)>
<android.app.NotificationChannel: int getLockscreenVisibility()>
<android.app.NotificationChannel: int describeContents()>
<android.app.NotificationChannel: java.lang.String getId()>
<android.app.NotificationChannel: void populateFromXml(org.xmlpull.v1.XmlPullParser)>
<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>
<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getModulus()>
<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getPublicExponent()>
<android.icu.text.UnicodeSetIterator: void <init>()>
<android.icu.text.UnicodeSetIterator: java.lang.String getString()>
<android.icu.text.UnicodeSetIterator: void reset(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeSetIterator: boolean nextRange()>
<android.icu.text.UnicodeSetIterator: void <init>(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeSetIterator: boolean next()>
<android.icu.text.UnicodeSetIterator: void reset()>
<android.content.IntentSender.SendIntentException: void <init>()>
<android.content.IntentSender.SendIntentException: void <init>(String)>
<android.content.IntentSender.SendIntentException: void <init>(Exception)>
<java.text.ParseException: void <init>(String,int)>
<java.text.ParseException: int getErrorOffset()>
<android.net.ProxyInfo: java.lang.String[] getExclusionList()>
<android.net.ProxyInfo: android.net.ProxyInfo buildPacProxy(android.net.Uri)>
<android.net.ProxyInfo: int describeContents()>
<android.net.ProxyInfo: java.lang.String getHost()>
<android.net.ProxyInfo: android.net.ProxyInfo buildDirectProxy(java.lang.String,int,java.util.List)>
<android.net.ProxyInfo: int getPort()>
<android.net.ProxyInfo: android.net.ProxyInfo buildDirectProxy(java.lang.String,int)>
<android.net.ProxyInfo: android.net.Uri getPacFileUrl()>
<android.net.ProxyInfo: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssMeasurementCorrections: int describeContents()>
<android.location.GnssMeasurementCorrections: double getLatitudeDegrees()>
<android.location.GnssMeasurementCorrections: double getLongitudeDegrees()>
<android.location.GnssMeasurementCorrections: double getHorizontalPositionUncertaintyMeters()>
<android.location.GnssMeasurementCorrections: double getAltitudeMeters()>
<android.location.GnssMeasurementCorrections: double getVerticalPositionUncertaintyMeters()>
<android.location.GnssMeasurementCorrections: java.util.List getSingleSatelliteCorrectionList()>
<android.location.GnssMeasurementCorrections: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssMeasurementCorrections: long getToaGpsNanosecondsOfWeek()>
<android.app.AuthenticationRequiredException: int describeContents()>
<android.app.AuthenticationRequiredException: android.app.PendingIntent getUserAction()>
<android.app.AuthenticationRequiredException: void writeToParcel(android.os.Parcel,int)>
<android.app.AuthenticationRequiredException: void <init>(Throwable,android.app.PendingIntent)>
<java.util.concurrent.CyclicBarrier: int await()>
<java.util.concurrent.CyclicBarrier: void <init>(int,Runnable)>
<java.util.concurrent.CyclicBarrier: void reset()>
<java.util.concurrent.CyclicBarrier: int getNumberWaiting()>
<java.util.concurrent.CyclicBarrier: boolean isBroken()>
<java.util.concurrent.CyclicBarrier: int getParties()>
<java.util.concurrent.CyclicBarrier: void <init>(int)>
<java.util.concurrent.CyclicBarrier: int await(long,java.util.concurrent.TimeUnit)>
<android.text.TextUtils.SimpleStringSplitter: java.lang.String next()>
<android.text.TextUtils.SimpleStringSplitter: java.util.Iterator iterator()>
<android.text.TextUtils.SimpleStringSplitter: void <init>(char)>
<android.text.TextUtils.SimpleStringSplitter: void setString(java.lang.String)>
<android.text.TextUtils.SimpleStringSplitter: boolean hasNext()>
<android.service.autofill.UserData: java.lang.String getFieldClassificationAlgorithmForCategory(java.lang.String)>
<android.service.autofill.UserData: java.lang.String getFieldClassificationAlgorithm()>
<android.service.autofill.UserData: int getMaxFieldClassificationIdsSize()>
<android.service.autofill.UserData: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.UserData: int getMinValueLength()>
<android.service.autofill.UserData: android.util.ArrayMap getFieldClassificationAlgorithms()>
<android.service.autofill.UserData: int getMaxValueLength()>
<android.service.autofill.UserData: int describeContents()>
<android.service.autofill.UserData: int getMaxCategoryCount()>
<android.service.autofill.UserData: java.lang.String getId()>
<android.service.autofill.UserData: int getMaxUserDataSize()>
<android.app.admin.DnsEvent: java.util.List getInetAddresses()>
<android.app.admin.DnsEvent: java.lang.String getHostname()>
<android.app.admin.DnsEvent: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.DnsEvent: int getTotalResolvedAddressCount()>
<javax.security.cert.CertificateNotYetValidException: void <init>()>
<javax.security.cert.CertificateNotYetValidException: void <init>(String)>
<java.nio.file.attribute.AclEntry.Builder: java.nio.file.attribute.AclEntry.Builder setType(java.nio.file.attribute.AclEntryType)>
<java.nio.file.attribute.AclEntry.Builder: java.nio.file.attribute.AclEntry.Builder setPrincipal(java.nio.file.attribute.UserPrincipal)>
<java.nio.file.attribute.AclEntry.Builder: java.nio.file.attribute.AclEntry.Builder setFlags(java.util.Set)>
<java.nio.file.attribute.AclEntry.Builder: java.nio.file.attribute.AclEntry.Builder setPermissions(java.nio.file.attribute.AclEntryPermission...)>
<java.nio.file.attribute.AclEntry.Builder: java.nio.file.attribute.AclEntry.Builder setFlags(java.nio.file.attribute.AclEntryFlag...)>
<java.nio.file.attribute.AclEntry.Builder: java.nio.file.attribute.AclEntry.Builder setPermissions(java.util.Set)>
<java.nio.file.attribute.AclEntry.Builder: java.nio.file.attribute.AclEntry build()>
<android.widget.AbsSpinner: android.widget.SpinnerAdapter getAdapter()>
<android.widget.AbsSpinner: android.view.View getSelectedView()>
<android.widget.AbsSpinner: void setSelection(int,boolean)>
<android.widget.AbsSpinner: android.os.Parcelable onSaveInstanceState()>
<android.widget.AbsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.AbsSpinner: void onRestoreInstanceState(android.os.Parcelable)>
<android.widget.AbsSpinner: void <init>(android.content.Context)>
<android.widget.AbsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AbsSpinner: void setSelection(int)>
<android.widget.AbsSpinner: int pointToPosition(int,int)>
<android.widget.AbsSpinner: void setAdapter(android.widget.SpinnerAdapter)>
<android.widget.AbsSpinner: void <init>(android.content.Context,android.util.AttributeSet)>
<java.security.DigestOutputStream: void on(boolean)>
<java.security.DigestOutputStream: void <init>(java.io.OutputStream,java.security.MessageDigest)>
<java.security.DigestOutputStream: java.security.MessageDigest getMessageDigest()>
<java.security.DigestOutputStream: void setMessageDigest(java.security.MessageDigest)>
<android.icu.util.TaiwanCalendar: void <init>(java.util.Date)>
<android.icu.util.TaiwanCalendar: void <init>(int,int,int,int,int,int)>
<android.icu.util.TaiwanCalendar: void <init>(android.icu.util.TimeZone,java.util.Locale)>
<android.icu.util.TaiwanCalendar: void <init>(android.icu.util.ULocale)>
<android.icu.util.TaiwanCalendar: void <init>(android.icu.util.TimeZone,android.icu.util.ULocale)>
<android.icu.util.TaiwanCalendar: void <init>(android.icu.util.TimeZone)>
<android.icu.util.TaiwanCalendar: void <init>()>
<android.icu.util.TaiwanCalendar: void <init>(int,int,int)>
<android.icu.util.TaiwanCalendar: void <init>(java.util.Locale)>
<android.provider.FontsContract.FontInfo: boolean isItalic()>
<android.provider.FontsContract.FontInfo: int getResultCode()>
<android.provider.FontsContract.FontInfo: android.net.Uri getUri()>
<android.provider.FontsContract.FontInfo: int getWeight()>
<android.provider.FontsContract.FontInfo: android.graphics.fonts.FontVariationAxis[] getAxes()>
<android.provider.FontsContract.FontInfo: int getTtcIndex()>
<android.print.PrintDocumentAdapter.WriteResultCallback: void onWriteCancelled()>
<android.print.PrintDocumentAdapter.WriteResultCallback: void onWriteFinished(android.print.PageRange[])>
<android.print.PrintDocumentAdapter.WriteResultCallback: void onWriteFailed(CharSequence)>
<android.renderscript.Matrix4f: void loadMultiply(android.renderscript.Matrix4f,android.renderscript.Matrix4f)>
<android.renderscript.Matrix4f: void rotate(float,float,float,float)>
<android.renderscript.Matrix4f: float get(int,int)>
<android.renderscript.Matrix4f: boolean inverseTranspose()>
<android.renderscript.Matrix4f: void <init>(float[])>
<android.renderscript.Matrix4f: boolean inverse()>
<android.renderscript.Matrix4f: void loadFrustum(float,float,float,float,float,float)>
<android.renderscript.Matrix4f: void multiply(android.renderscript.Matrix4f)>
<android.renderscript.Matrix4f: void loadIdentity()>
<android.renderscript.Matrix4f: void load(android.renderscript.Matrix4f)>
<android.renderscript.Matrix4f: void loadTranslate(float,float,float)>
<android.renderscript.Matrix4f: void loadProjectionNormalized(int,int)>
<android.renderscript.Matrix4f: void loadRotate(float,float,float,float)>
<android.renderscript.Matrix4f: void scale(float,float,float)>
<android.renderscript.Matrix4f: void transpose()>
<android.renderscript.Matrix4f: float[] getArray()>
<android.renderscript.Matrix4f: void loadOrtho(float,float,float,float,float,float)>
<android.renderscript.Matrix4f: void <init>()>
<android.renderscript.Matrix4f: void loadOrthoWindow(int,int)>
<android.renderscript.Matrix4f: void loadPerspective(float,float,float,float)>
<android.renderscript.Matrix4f: void loadScale(float,float,float)>
<android.renderscript.Matrix4f: void set(int,int,float)>
<android.renderscript.Matrix4f: void translate(float,float,float)>
<java.lang.reflect.MalformedParameterizedTypeException: void <init>()>
<android.renderscript.Script.FieldBase: void init(android.renderscript.RenderScript,int,int)>
<android.renderscript.Script.FieldBase: void <init>()>
<android.renderscript.Script.FieldBase: android.renderscript.Allocation getAllocation()>
<android.renderscript.Script.FieldBase: android.renderscript.Element getElement()>
<android.renderscript.Script.FieldBase: void init(android.renderscript.RenderScript,int)>
<android.renderscript.Script.FieldBase: void updateAllocation()>
<android.renderscript.Script.FieldBase: android.renderscript.Type getType()>
<java.security.AccessControlException: void <init>(String)>
<java.security.AccessControlException: java.security.Permission getPermission()>
<java.security.AccessControlException: void <init>(String,java.security.Permission)>
<android.bluetooth.BluetoothGattServer: void setPreferredPhy(android.bluetooth.BluetoothDevice,int,int,int)>
<android.bluetooth.BluetoothGattServer: boolean addService(android.bluetooth.BluetoothGattService)>
<android.bluetooth.BluetoothGattServer: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothGattServer: void close()>
<android.bluetooth.BluetoothGattServer: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothGattServer: boolean removeService(android.bluetooth.BluetoothGattService)>
<android.bluetooth.BluetoothGattServer: java.util.List getServices()>
<android.bluetooth.BluetoothGattServer: boolean sendResponse(android.bluetooth.BluetoothDevice,int,int,int,byte[])>
<android.bluetooth.BluetoothGattServer: void cancelConnection(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothGattServer: android.bluetooth.BluetoothGattService getService(java.util.UUID)>
<android.bluetooth.BluetoothGattServer: boolean notifyCharacteristicChanged(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothGattCharacteristic,boolean)>
<android.bluetooth.BluetoothGattServer: boolean connect(android.bluetooth.BluetoothDevice,boolean)>
<android.bluetooth.BluetoothGattServer: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothGattServer: void readPhy(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothGattServer: void clearServices()>
<java.security.Certificate: void decode(java.io.InputStream)>
<java.security.Certificate: java.lang.String toString(boolean)>
<java.security.Certificate: java.lang.String getFormat()>
<java.security.Certificate: java.security.Principal getPrincipal()>
<java.security.Certificate: void encode(java.io.OutputStream)>
<java.security.Certificate: java.security.Principal getGuarantor()>
<java.security.Certificate: java.security.PublicKey getPublicKey()>
<android.hardware.location.ContextHubIntentEvent: int getEventType()>
<android.hardware.location.ContextHubIntentEvent: android.hardware.location.ContextHubIntentEvent fromIntent(android.content.Intent)>
<android.hardware.location.ContextHubIntentEvent: long getNanoAppId()>
<android.hardware.location.ContextHubIntentEvent: android.hardware.location.NanoAppMessage getNanoAppMessage()>
<android.hardware.location.ContextHubIntentEvent: android.hardware.location.ContextHubInfo getContextHubInfo()>
<android.hardware.location.ContextHubIntentEvent: int getNanoAppAbortCode()>
<android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()>
<android.bluetooth.BluetoothSocket: int getConnectionType()>
<android.bluetooth.BluetoothSocket: void connect()>
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothDevice getRemoteDevice()>
<android.bluetooth.BluetoothSocket: java.io.InputStream getInputStream()>
<android.bluetooth.BluetoothSocket: int getMaxReceivePacketSize()>
<android.bluetooth.BluetoothSocket: int getMaxTransmitPacketSize()>
<android.bluetooth.BluetoothSocket: boolean isConnected()>
<android.bluetooth.BluetoothSocket: void close()>
<android.app.Notification.Action.WearableExtender: android.app.Notification.Action.WearableExtender clone()>
<android.app.Notification.Action.WearableExtender: CharSequence getConfirmLabel()>
<android.app.Notification.Action.WearableExtender: android.app.Notification.Action.WearableExtender setCancelLabel(CharSequence)>
<android.app.Notification.Action.WearableExtender: void <init>()>
<android.app.Notification.Action.WearableExtender: CharSequence getInProgressLabel()>
<android.app.Notification.Action.WearableExtender: android.app.Notification.Action.WearableExtender setHintLaunchesActivity(boolean)>
<android.app.Notification.Action.WearableExtender: void <init>(android.app.Notification.Action)>
<android.app.Notification.Action.WearableExtender: android.app.Notification.Action.WearableExtender setConfirmLabel(CharSequence)>
<android.app.Notification.Action.WearableExtender: android.app.Notification.Action.WearableExtender setHintDisplayActionInline(boolean)>
<android.app.Notification.Action.WearableExtender: android.app.Notification.Action.Builder extend(android.app.Notification.Action.Builder)>
<android.app.Notification.Action.WearableExtender: boolean getHintDisplayActionInline()>
<android.app.Notification.Action.WearableExtender: android.app.Notification.Action.WearableExtender setAvailableOffline(boolean)>
<android.app.Notification.Action.WearableExtender: boolean getHintLaunchesActivity()>
<android.app.Notification.Action.WearableExtender: android.app.Notification.Action.WearableExtender setInProgressLabel(CharSequence)>
<android.app.Notification.Action.WearableExtender: boolean isAvailableOffline()>
<android.app.Notification.Action.WearableExtender: CharSequence getCancelLabel()>
<android.net.apf.ApfCapabilities: void <init>(int,int,int)>
<android.net.apf.ApfCapabilities: boolean getApfDrop8023Frames()>
<android.net.apf.ApfCapabilities: int[] getApfEtherTypeBlackList()>
<android.net.apf.ApfCapabilities: int describeContents()>
<android.net.apf.ApfCapabilities: boolean hasDataAccess()>
<android.net.apf.ApfCapabilities: void writeToParcel(android.os.Parcel,int)>
<android.opengl.GLES31Ext.DebugProcKHR: void onMessage(int,int,int,int,java.lang.String)>
<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>
<android.content.Intent: android.content.Intent putCharSequenceArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: android.content.Intent setPackage(java.lang.String)>
<android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)>
<android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)>
<android.content.Intent: android.content.Intent getIntentOld(java.lang.String)>
<android.content.Intent: void setClipData(android.content.ClipData)>
<android.content.Intent: int filterHashCode()>
<android.content.Intent: android.content.ComponentName getComponent()>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])>
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)>
<android.content.Intent: int describeContents()>
<android.content.Intent: android.content.Intent setType(java.lang.String)>
<android.content.Intent: android.content.Intent addFlags(int)>
<android.content.Intent: java.lang.String getScheme()>
<android.content.Intent: android.content.Intent cloneFilter()>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])>
<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)>
<android.content.Intent: android.content.Intent setTypeAndNormalize(java.lang.String)>
<android.content.Intent: void <init>(android.content.Context,Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.content.Intent: android.content.Intent parseUri(java.lang.String,int)>
<android.content.Intent: void setSelector(android.content.Intent)>
<android.content.Intent: long[] getLongArrayExtra(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float)>
<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)>
<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)>
<android.content.Intent: boolean filterEquals(android.content.Intent)>
<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>
<android.content.Intent: int[] getIntArrayExtra(java.lang.String)>
<android.content.Intent: android.net.Uri getData()>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])>
<android.content.Intent: android.content.Intent getIntent(java.lang.String)>
<android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)>
<android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>
<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>
<android.content.Intent: java.lang.String getAction()>
<android.content.Intent: android.content.Intent setFlags(int)>
<android.content.Intent: void writeToParcel(android.os.Parcel,int)>
<android.content.Intent: void <init>(String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)>
<android.content.Intent: android.content.Intent replaceExtras(android.os.Bundle)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>
<android.content.Intent: android.content.Intent putIntegerArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: java.util.Set getCategories()>
<android.content.Intent: android.content.Intent setDataAndTypeAndNormalize(android.net.Uri,java.lang.String)>
<android.content.Intent: boolean hasCategory(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])>
<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>
<android.content.Intent: void <init>(String,android.net.Uri)>
<android.content.Intent: android.content.Intent createChooser(android.content.Intent,CharSequence,android.content.IntentSender)>
<android.content.Intent: boolean hasExtra(java.lang.String)>
<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>
<android.content.Intent: java.lang.String resolveType(android.content.Context)>
<android.content.Intent: void <init>(android.content.Intent)>
<android.content.Intent: android.content.Intent setData(android.net.Uri)>
<android.content.Intent: boolean hasFileDescriptors()>
<android.content.Intent: void setSourceBounds(android.graphics.Rect)>
<android.content.Intent: java.lang.String getPackage()>
<android.content.Intent: float getFloatExtra(java.lang.String,float)>
<android.content.Intent: android.content.ClipData getClipData()>
<android.content.Intent: android.content.Intent getSelector()>
<android.content.Intent: android.content.Intent createChooser(android.content.Intent,CharSequence)>
<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>
<android.content.Intent: float[] getFloatArrayExtra(java.lang.String)>
<android.content.Intent: java.lang.String toURI()>
<android.content.Intent: android.content.Intent parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)>
<android.content.Intent: byte getByteExtra(java.lang.String,byte)>
<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)>
<android.content.Intent: android.content.Intent setIdentifier(java.lang.String)>
<android.content.Intent: int fillIn(android.content.Intent,int)>
<android.content.Intent: double getDoubleExtra(java.lang.String,double)>
<android.content.Intent: int getFlags()>
<android.content.Intent: android.os.Bundle getExtras()>
<android.content.Intent: short getShortExtra(java.lang.String,short)>
<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>
<android.content.Intent: java.lang.String getDataString()>
<android.content.Intent: java.lang.String getType()>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double)>
<android.content.Intent: CharSequence[] getCharSequenceArrayExtra(java.lang.String)>
<android.content.Intent: char[] getCharArrayExtra(java.lang.String)>
<android.content.Intent: short[] getShortArrayExtra(java.lang.String)>
<android.content.Intent: android.content.Intent setDataAndNormalize(android.net.Uri)>
<android.content.Intent: void removeFlags(int)>
<android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)>
<android.content.Intent: java.lang.String resolveType(android.content.ContentResolver)>
<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)>
<android.content.Intent: android.content.Intent setAction(java.lang.String)>
<android.content.Intent: java.lang.String toUri(int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,CharSequence[])>
<android.content.Intent: CharSequence getCharSequenceExtra(java.lang.String)>
<android.content.Intent: void <init>(String,android.net.Uri,android.content.Context,Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>
<android.content.Intent: void removeExtra(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short)>
<android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)>
<android.content.Intent: byte[] getByteArrayExtra(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])>
<android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)>
<android.content.Intent: char getCharExtra(java.lang.String,char)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])>
<android.content.Intent: java.lang.Object clone()>
<android.content.Intent: T getParcelableExtra(java.lang.String)>
<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>
<android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: void <init>()>
<android.content.Intent: int getIntExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char)>
<android.content.Intent: android.content.Intent addCategory(java.lang.String)>
<android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)>
<android.content.Intent: android.content.Intent putExtras(android.content.Intent)>
<android.content.Intent: java.lang.String normalizeMimeType(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,CharSequence)>
<android.content.Intent: void readFromParcel(android.os.Parcel)>
<android.content.Intent: void removeCategory(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])>
<android.content.Intent: long getLongExtra(java.lang.String,long)>
<android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)>
<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>
<android.content.Intent: java.lang.String getIdentifier()>
<android.content.Intent: android.graphics.Rect getSourceBounds()>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetTexEnvxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glBindBuffer(int,int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetTexEnvxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetClipPlanex(int,int[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetLightxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glTexParameterfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetFloatv(int,float[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetTexParameteriv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetFloatv(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetMaterialfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glClipPlanex(int,int[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glDeleteBuffers(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetMaterialfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetLightxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetLightfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glClipPlanef(int,float[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: boolean glIsBuffer(int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetTexEnviv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glTexParameteriv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glPointParameterfv(int,float[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetTexParameteriv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glPointParameterxv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glTexEnvi(int,int,int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetMaterialxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetTexParameterxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glColorPointer(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetBufferParameteriv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: boolean glIsEnabled(int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glDeleteBuffers(int,int[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glBufferSubData(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glTexParameterxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glDrawElements(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glTexEnviv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetTexParameterfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glColor4ub(byte,byte,byte,byte)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glTexEnviv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGenBuffers(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glBufferData(int,int,java.nio.Buffer,int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetClipPlanef(int,float[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glNormalPointer(int,int,int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glClipPlanef(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glVertexPointer(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetFixedv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetMaterialxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetPointerv(int,java.nio.Buffer[])>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glTexParameteri(int,int,int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glTexParameteriv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glPointParameterf(int,float)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetTexEnviv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glPointParameterxv(int,int[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetLightfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetTexParameterxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glTexCoordPointer(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glTexParameterxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glClipPlanex(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glPointParameterfv(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glPointSizePointerOES(int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetBooleanv(int,boolean[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetFixedv(int,int[],int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glTexParameterfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetClipPlanef(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetClipPlanex(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGetBooleanv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glPointParameterx(int,int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: boolean glIsTexture(int)>
<javax.microedition.khronos.opengles.GL11 extends javax.microedition.khronos.opengles.GL10: void glGenBuffers(int,int[],int)>
<android.webkit.WebViewDelegate.OnTraceEnabledChangeListener: void onTraceEnabledChange(boolean)>
<java.util.function.DoubleBinaryOperator: double applyAsDouble(double,double)>
<java.util.prefs.NodeChangeEvent: java.util.prefs.Preferences getChild()>
<java.util.prefs.NodeChangeEvent: java.util.prefs.Preferences getParent()>
<java.util.prefs.NodeChangeEvent: void <init>(java.util.prefs.Preferences,java.util.prefs.Preferences)>
<android.companion.BluetoothLeDeviceFilter.Builder: android.companion.BluetoothLeDeviceFilter build()>
<android.companion.BluetoothLeDeviceFilter.Builder: android.companion.BluetoothLeDeviceFilter.Builder setRawDataFilter(byte[],byte[])>
<android.companion.BluetoothLeDeviceFilter.Builder: android.companion.BluetoothLeDeviceFilter.Builder setScanFilter(android.bluetooth.le.ScanFilter)>
<android.companion.BluetoothLeDeviceFilter.Builder: android.companion.BluetoothLeDeviceFilter.Builder setRenameFromName(java.lang.String,java.lang.String,int,int)>
<android.companion.BluetoothLeDeviceFilter.Builder: android.companion.BluetoothLeDeviceFilter.Builder setRenameFromBytes(java.lang.String,java.lang.String,int,int,java.nio.ByteOrder)>
<android.companion.BluetoothLeDeviceFilter.Builder: android.companion.BluetoothLeDeviceFilter.Builder setNamePattern(java.util.regex.Pattern)>
<android.companion.BluetoothLeDeviceFilter.Builder: void <init>()>
<java.security.interfaces.ECPrivateKey extends java.security.PrivateKey java.security.interfaces.ECKey: java.math.BigInteger getS()>
<android.hardware.radio.Announcement.OnListUpdatedListener: void onListUpdated(java.util.Collection)>
<java.security.UnrecoverableKeyException: void <init>()>
<java.security.UnrecoverableKeyException: void <init>(String)>
<android.media.MediaPlayer.OnTimedMetaDataAvailableListener: void onTimedMetaDataAvailable(android.media.MediaPlayer,android.media.TimedMetaData)>
<android.transition.SidePropagation: void setSide(int)>
<android.transition.SidePropagation: void setPropagationSpeed(float)>
<android.transition.SidePropagation: void <init>()>
<android.transition.SidePropagation: long getStartDelay(android.view.ViewGroup,android.transition.Transition,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.gesture.GesturePoint: void <init>(float,float,long)>
<android.gesture.GesturePoint: java.lang.Object clone()>
<android.net.ssl.SSLSockets: void setUseSessionTickets(javax.net.ssl.SSLSocket,boolean)>
<android.net.ssl.SSLSockets: boolean isSupportedSocket(javax.net.ssl.SSLSocket)>
<android.view.ViewStructure.HtmlInfo: java.lang.String getTag()>
<android.view.ViewStructure.HtmlInfo: void <init>()>
<android.view.ViewStructure.HtmlInfo: java.util.List getAttributes()>
<java.awt.font.NumericShaper: boolean isContextual()>
<java.awt.font.NumericShaper: java.awt.font.NumericShaper getContextualShaper(java.util.Set)>
<java.awt.font.NumericShaper: java.util.Set getRangeSet()>
<java.awt.font.NumericShaper: java.awt.font.NumericShaper getShaper(java.awt.font.NumericShaper.Range)>
<java.awt.font.NumericShaper: java.awt.font.NumericShaper getShaper(int)>
<java.awt.font.NumericShaper: java.awt.font.NumericShaper getContextualShaper(int)>
<java.awt.font.NumericShaper: void shape(char[],int,int)>
<java.awt.font.NumericShaper: java.awt.font.NumericShaper getContextualShaper(int,int)>
<java.awt.font.NumericShaper: java.awt.font.NumericShaper getContextualShaper(java.util.Set,java.awt.font.NumericShaper.Range)>
<java.awt.font.NumericShaper: int getRanges()>
<java.awt.font.NumericShaper: void shape(char[],int,int,int)>
<java.awt.font.NumericShaper: void shape(char[],int,int,java.awt.font.NumericShaper.Range)>
<android.icu.util.EthiopicCalendar: void <init>(java.util.Locale)>
<android.icu.util.EthiopicCalendar: void <init>(int,int,int)>
<android.icu.util.EthiopicCalendar: void <init>(java.util.Date)>
<android.icu.util.EthiopicCalendar: void setAmeteAlemEra(boolean)>
<android.icu.util.EthiopicCalendar: void <init>(android.icu.util.TimeZone,java.util.Locale)>
<android.icu.util.EthiopicCalendar: void <init>(android.icu.util.TimeZone,android.icu.util.ULocale)>
<android.icu.util.EthiopicCalendar: void <init>()>
<android.icu.util.EthiopicCalendar: int handleComputeMonthStart(int,int,boolean)>
<android.icu.util.EthiopicCalendar: void <init>(int,int,int,int,int,int)>
<android.icu.util.EthiopicCalendar: int handleGetLimit(int,int)>
<android.icu.util.EthiopicCalendar: boolean isAmeteAlemEra()>
<android.icu.util.EthiopicCalendar: void handleComputeFields(int)>
<android.icu.util.EthiopicCalendar: void <init>(android.icu.util.TimeZone)>
<android.icu.util.EthiopicCalendar: void <init>(android.icu.util.ULocale)>
<android.icu.util.EthiopicCalendar: int handleGetExtendedYear()>
<android.media.RemoteController.OnClientUpdateListener: void onClientChange(boolean)>
<android.media.RemoteController.OnClientUpdateListener: void onClientPlaybackStateUpdate(int)>
<android.media.RemoteController.OnClientUpdateListener: void onClientPlaybackStateUpdate(int,long,long,float)>
<android.media.RemoteController.OnClientUpdateListener: void onClientTransportControlUpdate(int)>
<android.media.RemoteController.OnClientUpdateListener: void onClientMetadataUpdate(android.media.RemoteController.MetadataEditor)>
<android.telephony.ims.ImsSuppServiceNotification: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ims.ImsSuppServiceNotification: void <init>(int,int,int,int,String,String[])>
<android.telephony.ims.ImsSuppServiceNotification: int describeContents()>
<android.content.pm.ModuleInfo: boolean isHidden()>
<android.content.pm.ModuleInfo: int describeContents()>
<android.content.pm.ModuleInfo: CharSequence getName()>
<android.content.pm.ModuleInfo: java.lang.String getPackageName()>
<android.content.pm.ModuleInfo: void writeToParcel(android.os.Parcel,int)>
<javax.security.cert.X509Certificate: void <init>()>
<javax.security.cert.X509Certificate: void checkValidity()>
<javax.security.cert.X509Certificate: void checkValidity(java.util.Date)>
<javax.security.cert.X509Certificate: java.security.Principal getIssuerDN()>
<javax.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>
<javax.security.cert.X509Certificate: javax.security.cert.X509Certificate getInstance(byte[])>
<javax.security.cert.X509Certificate: java.util.Date getNotAfter()>
<javax.security.cert.X509Certificate: byte[] getSigAlgParams()>
<javax.security.cert.X509Certificate: javax.security.cert.X509Certificate getInstance(java.io.InputStream)>
<javax.security.cert.X509Certificate: java.security.Principal getSubjectDN()>
<javax.security.cert.X509Certificate: java.lang.String getSigAlgName()>
<javax.security.cert.X509Certificate: int getVersion()>
<javax.security.cert.X509Certificate: java.util.Date getNotBefore()>
<javax.security.cert.X509Certificate: java.lang.String getSigAlgOID()>
<android.view.Display.HdrCapabilities: int[] getSupportedHdrTypes()>
<android.view.Display.HdrCapabilities: float getDesiredMaxLuminance()>
<android.view.Display.HdrCapabilities: void writeToParcel(android.os.Parcel,int)>
<android.view.Display.HdrCapabilities: int describeContents()>
<android.view.Display.HdrCapabilities: float getDesiredMinLuminance()>
<android.view.Display.HdrCapabilities: float getDesiredMaxAverageLuminance()>
<android.telephony.ims.stub.ImsCallSessionImplBase.State: java.lang.String toString(int)>
<android.database.sqlite.SQLiteBlobTooBigException: void <init>()>
<android.database.sqlite.SQLiteBlobTooBigException: void <init>(String)>
<android.view.View.OnGenericMotionListener: boolean onGenericMotion(android.view.View,android.view.MotionEvent)>
<java.security.DomainLoadStoreParameter: java.security.KeyStore.ProtectionParameter getProtectionParameter()>
<java.security.DomainLoadStoreParameter: void <init>(java.net.URI,java.util.Map)>
<java.security.DomainLoadStoreParameter: java.util.Map getProtectionParams()>
<java.security.DomainLoadStoreParameter: java.net.URI getConfiguration()>
<java.io.FileDescriptor: boolean valid()>
<java.io.FileDescriptor: void <init>()>
<java.io.FileDescriptor: void sync()>
<java.security.NoSuchProviderException: void <init>(String)>
<java.security.NoSuchProviderException: void <init>()>
<android.service.notification.StatusBarNotification: int getUid()>
<android.service.notification.StatusBarNotification: java.lang.String getTag()>
<android.service.notification.StatusBarNotification: long getPostTime()>
<android.service.notification.StatusBarNotification: android.service.notification.StatusBarNotification clone()>
<android.service.notification.StatusBarNotification: void setOverrideGroupKey(java.lang.String)>
<android.service.notification.StatusBarNotification: void writeToParcel(android.os.Parcel,int)>
<android.service.notification.StatusBarNotification: java.lang.String getGroupKey()>
<android.service.notification.StatusBarNotification: boolean isOngoing()>
<android.service.notification.StatusBarNotification: android.app.Notification getNotification()>
<android.service.notification.StatusBarNotification: java.lang.String getPackageName()>
<android.service.notification.StatusBarNotification: void <init>(android.os.Parcel)>
<android.service.notification.StatusBarNotification: java.lang.String getOpPkg()>
<android.service.notification.StatusBarNotification: void <init>(String,String,int,String,int,int,int,android.app.Notification,android.os.UserHandle,long)>
<android.service.notification.StatusBarNotification: int getUserId()>
<android.service.notification.StatusBarNotification: int describeContents()>
<android.service.notification.StatusBarNotification: java.lang.String getKey()>
<android.service.notification.StatusBarNotification: java.lang.String getOverrideGroupKey()>
<android.service.notification.StatusBarNotification: boolean isGroup()>
<android.service.notification.StatusBarNotification: int getId()>
<android.service.notification.StatusBarNotification: android.os.UserHandle getUser()>
<android.service.notification.StatusBarNotification: boolean isClearable()>
<android.view.View.OnClickListener: void onClick(android.view.View)>
<java.security.spec.EncodedKeySpec: byte[] getEncoded()>
<java.security.spec.EncodedKeySpec: void <init>(byte[])>
<java.security.spec.EncodedKeySpec: java.lang.String getFormat()>
<java.lang.reflect.TypeVariable extends java.lang.reflect.Type: java.lang.reflect.Type[] getBounds()>
<java.lang.reflect.TypeVariable extends java.lang.reflect.Type: java.lang.String getName()>
<java.lang.reflect.TypeVariable extends java.lang.reflect.Type: D getGenericDeclaration()>
<android.os.TokenWatcher: void dump(java.io.PrintWriter)>
<android.os.TokenWatcher: void acquired()>
<android.os.TokenWatcher: void acquire(android.os.IBinder,java.lang.String)>
<android.os.TokenWatcher: void released()>
<android.os.TokenWatcher: void <init>(android.os.Handler,String)>
<android.os.TokenWatcher: void release(android.os.IBinder)>
<android.os.TokenWatcher: void dump()>
<android.os.TokenWatcher: void cleanup(android.os.IBinder,boolean)>
<android.os.TokenWatcher: boolean isAcquired()>
<java.lang.reflect.WildcardType extends java.lang.reflect.Type: java.lang.reflect.Type[] getLowerBounds()>
<java.lang.reflect.WildcardType extends java.lang.reflect.Type: java.lang.reflect.Type[] getUpperBounds()>
<android.opengl.GLES20: void glDeleteRenderbuffers(int,int[],int)>
<android.opengl.GLES20: void glBindBuffer(int,int)>
<android.opengl.GLES20: void glUniformMatrix3fv(int,int,boolean,float[],int)>
<android.opengl.GLES20: void glBindFramebuffer(int,int)>
<android.opengl.GLES20: void glViewport(int,int,int,int)>
<android.opengl.GLES20: void glGenTextures(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glPixelStorei(int,int)>
<android.opengl.GLES20: void glTexParameteri(int,int,int)>
<android.opengl.GLES20: int glGetAttribLocation(int,java.lang.String)>
<android.opengl.GLES20: java.lang.String glGetProgramInfoLog(int)>
<android.opengl.GLES20: java.lang.String glGetString(int)>
<android.opengl.GLES20: void glBlendEquationSeparate(int,int)>
<android.opengl.GLES20: java.lang.String glGetActiveAttrib(int,int,int[],int,int[],int)>
<android.opengl.GLES20: void glUseProgram(int)>
<android.opengl.GLES20: void glTexParameterfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glGenRenderbuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glCopyTexImage2D(int,int,int,int,int,int,int,int)>
<android.opengl.GLES20: int glGetError()>
<android.opengl.GLES20: void glGetAttachedShaders(int,int,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES20: void glLinkProgram(int)>
<android.opengl.GLES20: void glValidateProgram(int)>
<android.opengl.GLES20: void glGetVertexAttribiv(int,int,int[],int)>
<android.opengl.GLES20: boolean glIsTexture(int)>
<android.opengl.GLES20: void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glUniform3fv(int,int,float[],int)>
<android.opengl.GLES20: void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glStencilFuncSeparate(int,int,int,int)>
<android.opengl.GLES20: void glUniform1iv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: java.lang.String glGetShaderInfoLog(int)>
<android.opengl.GLES20: void glBindRenderbuffer(int,int)>
<android.opengl.GLES20: void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glUniform4iv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glBindTexture(int,int)>
<android.opengl.GLES20: java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetFloatv(int,java.nio.FloatBuffer)>
<android.opengl.GLES20: boolean glIsFramebuffer(int)>
<android.opengl.GLES20: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glUniform4f(int,float,float,float,float)>
<android.opengl.GLES20: int glCreateShader(int)>
<android.opengl.GLES20: void glVertexAttrib1f(int,float)>
<android.opengl.GLES20: void glGetUniformfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glVertexAttrib2f(int,float,float)>
<android.opengl.GLES20: void glBlendEquation(int)>
<android.opengl.GLES20: void glGenBuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glScissor(int,int,int,int)>
<android.opengl.GLES20: void glUniformMatrix4fv(int,int,boolean,float[],int)>
<android.opengl.GLES20: void glStencilOp(int,int,int)>
<android.opengl.GLES20: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)>
<android.opengl.GLES20: void glClearStencil(int)>
<android.opengl.GLES20: void glDeleteFramebuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glDeleteTextures(int,int[],int)>
<android.opengl.GLES20: void glDepthRangef(float,float)>
<android.opengl.GLES20: void glGetVertexAttribfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glReleaseShaderCompiler()>
<android.opengl.GLES20: void glGetIntegerv(int,int[],int)>
<android.opengl.GLES20: void glClearDepthf(float)>
<android.opengl.GLES20: void glGetShaderSource(int,int,int[],int,byte[],int)>
<android.opengl.GLES20: void glUniform2iv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: boolean glIsShader(int)>
<android.opengl.GLES20: void glStencilOpSeparate(int,int,int,int)>
<android.opengl.GLES20: void glClearColor(float,float,float,float)>
<android.opengl.GLES20: void glTexParameteriv(int,int,int[],int)>
<android.opengl.GLES20: void glEnableVertexAttribArray(int)>
<android.opengl.GLES20: void glDepthFunc(int)>
<android.opengl.GLES20: void glUniform1iv(int,int,int[],int)>
<android.opengl.GLES20: void glGetVertexAttribiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glBufferData(int,int,java.nio.Buffer,int)>
<android.opengl.GLES20: void glShaderBinary(int,int[],int,int,java.nio.Buffer,int)>
<android.opengl.GLES20: void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)>
<android.opengl.GLES20: void glDeleteTextures(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGenBuffers(int,int[],int)>
<android.opengl.GLES20: void glUniform2fv(int,int,float[],int)>
<android.opengl.GLES20: void glVertexAttrib4f(int,float,float,float,float)>
<android.opengl.GLES20: void glUniform4i(int,int,int,int,int)>
<android.opengl.GLES20: void glUniform3fv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glDrawArrays(int,int,int)>
<android.opengl.GLES20: void glTexParameterf(int,int,float)>
<android.opengl.GLES20: void glGetUniformiv(int,int,int[],int)>
<android.opengl.GLES20: boolean glIsEnabled(int)>
<android.opengl.GLES20: void glBlendFuncSeparate(int,int,int,int)>
<android.opengl.GLES20: void glUniformMatrix2fv(int,int,boolean,float[],int)>
<android.opengl.GLES20: void glStencilFunc(int,int,int)>
<android.opengl.GLES20: void glGetFramebufferAttachmentParameteriv(int,int,int,int[],int)>
<android.opengl.GLES20: void glBindAttribLocation(int,int,java.lang.String)>
<android.opengl.GLES20: void glDepthMask(boolean)>
<android.opengl.GLES20: void glStencilMaskSeparate(int,int)>
<android.opengl.GLES20: void glVertexAttribPointer(int,int,int,boolean,int,int)>
<android.opengl.GLES20: void glGenerateMipmap(int)>
<android.opengl.GLES20: void glGetShaderiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glHint(int,int)>
<android.opengl.GLES20: void glRenderbufferStorage(int,int,int,int)>
<android.opengl.GLES20: void glFlush()>
<android.opengl.GLES20: void glGetTexParameterfv(int,int,float[],int)>
<android.opengl.GLES20: void glActiveTexture(int)>
<android.opengl.GLES20: void glUniform3iv(int,int,int[],int)>
<android.opengl.GLES20: void glUniform1fv(int,int,float[],int)>
<android.opengl.GLES20: void glStencilMask(int)>
<android.opengl.GLES20: void glGetBufferParameteriv(int,int,int[],int)>
<android.opengl.GLES20: void glVertexAttrib3f(int,float,float,float)>
<android.opengl.GLES20: void glClear(int)>
<android.opengl.GLES20: boolean glIsBuffer(int)>
<android.opengl.GLES20: void glGetProgramiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glVertexAttrib4fv(int,float[],int)>
<android.opengl.GLES20: void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int)>
<android.opengl.GLES20: void glUniform3i(int,int,int,int)>
<android.opengl.GLES20: void glGetBooleanv(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetVertexAttribfv(int,int,float[],int)>
<android.opengl.GLES20: void glVertexAttrib3fv(int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glGetUniformfv(int,int,float[],int)>
<android.opengl.GLES20: void glLineWidth(float)>
<android.opengl.GLES20: void glGetRenderbufferParameteriv(int,int,int[],int)>
<android.opengl.GLES20: void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES20: void glUniform1f(int,float)>
<android.opengl.GLES20: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glFramebufferTexture2D(int,int,int,int,int)>
<android.opengl.GLES20: void glGetActiveAttrib(int,int,int,int[],int,int[],int,int[],int,byte[],int)>
<android.opengl.GLES20: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glGetBooleanv(int,boolean[],int)>
<android.opengl.GLES20: void glVertexAttrib4fv(int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glCompileShader(int)>
<android.opengl.GLES20: void glDeleteFramebuffers(int,int[],int)>
<android.opengl.GLES20: void glGetShaderiv(int,int,int[],int)>
<android.opengl.GLES20: void glUniform2fv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glCullFace(int)>
<android.opengl.GLES20: void glPolygonOffset(float,float)>
<android.opengl.GLES20: void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glVertexAttrib2fv(int,float[],int)>
<android.opengl.GLES20: int glCheckFramebufferStatus(int)>
<android.opengl.GLES20: void glUniform4fv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glVertexAttrib3fv(int,float[],int)>
<android.opengl.GLES20: void glTexParameterfv(int,int,float[],int)>
<android.opengl.GLES20: void glGenFramebuffers(int,int[],int)>
<android.opengl.GLES20: void glColorMask(boolean,boolean,boolean,boolean)>
<android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>
<android.opengl.GLES20: void glSampleCoverage(float,boolean)>
<android.opengl.GLES20: void glFinish()>
<android.opengl.GLES20: void glDeleteShader(int)>
<android.opengl.GLES20: void glGetUniformiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glUniform3iv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGenTextures(int,int[],int)>
<android.opengl.GLES20: void glVertexAttrib1fv(int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glDeleteBuffers(int,int[],int)>
<android.opengl.GLES20: void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glTexParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetFloatv(int,float[],int)>
<android.opengl.GLES20: void glFramebufferRenderbuffer(int,int,int,int)>
<android.opengl.GLES20: void glBufferSubData(int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glVertexAttrib1fv(int,float[],int)>
<android.opengl.GLES20: void glDisableVertexAttribArray(int)>
<android.opengl.GLES20: void glDeleteBuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glUniform2iv(int,int,int[],int)>
<android.opengl.GLES20: void glGenFramebuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetProgramiv(int,int,int[],int)>
<android.opengl.GLES20: void glDrawElements(int,int,int,int)>
<android.opengl.GLES20: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glGetShaderPrecisionFormat(int,int,int[],int,int[],int)>
<android.opengl.GLES20: java.lang.String glGetActiveUniform(int,int,int[],int,int[],int)>
<android.opengl.GLES20: boolean glIsRenderbuffer(int)>
<android.opengl.GLES20: void glUniform2f(int,float,float)>
<android.opengl.GLES20: void glBlendColor(float,float,float,float)>
<android.opengl.GLES20: void glDrawElements(int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glShaderSource(int,java.lang.String)>
<android.opengl.GLES20: void glDeleteProgram(int)>
<android.opengl.GLES20: void glUniform1fv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glGetTexParameteriv(int,int,int[],int)>
<android.opengl.GLES20: void glUniform3f(int,float,float,float)>
<android.opengl.GLES20: void glDetachShader(int,int)>
<android.opengl.GLES20: void glDisable(int)>
<android.opengl.GLES20: void glGetAttachedShaders(int,int,int[],int,int[],int)>
<android.opengl.GLES20: java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES20: boolean glIsProgram(int)>
<android.opengl.GLES20: void glFrontFace(int)>
<android.opengl.GLES20: void glUniform1i(int,int)>
<android.opengl.GLES20: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glGetIntegerv(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glVertexAttrib2fv(int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glGetActiveUniform(int,int,int,int[],int,int[],int,int[],int,byte[],int)>
<android.opengl.GLES20: void glAttachShader(int,int)>
<android.opengl.GLES20: void glBlendFunc(int,int)>
<android.opengl.GLES20: void glDeleteRenderbuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glUniform4iv(int,int,int[],int)>
<android.opengl.GLES20: int glCreateProgram()>
<android.opengl.GLES20: void glUniform4fv(int,int,float[],int)>
<android.opengl.GLES20: void glGetTexParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glEnable(int)>
<android.opengl.GLES20: java.lang.String glGetShaderSource(int)>
<android.opengl.GLES20: void glGenRenderbuffers(int,int[],int)>
<android.opengl.GLES20: void glUniform2i(int,int,int)>
<android.opengl.GLES20: void <init>()>
<android.content.DialogInterface.OnKeyListener: boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent)>
<android.icu.text.MessagePattern.Part: android.icu.text.MessagePattern.ArgType getArgType()>
<android.icu.text.MessagePattern.Part: android.icu.text.MessagePattern.Part.Type getType()>
<android.icu.text.MessagePattern.Part: int getLength()>
<android.icu.text.MessagePattern.Part: boolean hasNumericValue()>
<android.icu.text.MessagePattern.Part: int getIndex()>
<android.icu.text.MessagePattern.Part: int getLimit()>
<android.icu.text.MessagePattern.Part: int getValue()>
<android.service.textservice.SpellCheckerService.Session: void <init>()>
<android.service.textservice.SpellCheckerService.Session: void onClose()>
<android.service.textservice.SpellCheckerService.Session: android.os.Bundle getBundle()>
<android.service.textservice.SpellCheckerService.Session: void onCancel()>
<android.service.textservice.SpellCheckerService.Session: android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)>
<android.service.textservice.SpellCheckerService.Session: void onCreate()>
<android.service.textservice.SpellCheckerService.Session: java.lang.String getLocale()>
<android.service.textservice.SpellCheckerService.Session: android.view.textservice.SuggestionsInfo onGetSuggestions(android.view.textservice.TextInfo,int)>
<android.service.textservice.SpellCheckerService.Session: android.view.textservice.SentenceSuggestionsInfo[] onGetSentenceSuggestionsMultiple(android.view.textservice.TextInfo[],int)>
<java.time.zone.ZoneOffsetTransitionRule: java.time.DayOfWeek getDayOfWeek()>
<java.time.zone.ZoneOffsetTransitionRule: java.time.Month getMonth()>
<java.time.zone.ZoneOffsetTransitionRule: java.time.ZoneOffset getOffsetAfter()>
<java.time.zone.ZoneOffsetTransitionRule: java.time.LocalTime getLocalTime()>
<java.time.zone.ZoneOffsetTransitionRule: java.time.zone.ZoneOffsetTransitionRule.TimeDefinition getTimeDefinition()>
<java.time.zone.ZoneOffsetTransitionRule: java.time.LocalDateTime createDateTime(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneOffset)>
<java.time.zone.ZoneOffsetTransitionRule: boolean isMidnightEndOfDay()>
<java.time.zone.ZoneOffsetTransitionRule: int getDayOfMonthIndicator()>
<java.time.zone.ZoneOffsetTransitionRule: java.time.ZoneOffset getOffsetBefore()>
<java.time.zone.ZoneOffsetTransitionRule: java.time.ZoneOffset getStandardOffset()>
<java.time.zone.ZoneOffsetTransitionRule: java.time.zone.ZoneOffsetTransition createTransition(int)>
<java.time.zone.ZoneOffsetTransitionRule: java.time.zone.ZoneOffsetTransitionRule of(java.time.Month,int,java.time.DayOfWeek,java.time.LocalTime,boolean,java.time.zone.ZoneOffsetTransitionRule.TimeDefinition,java.time.ZoneOffset,java.time.ZoneOffset,java.time.ZoneOffset)>
<android.database.DatabaseUtils.InsertHelper: long insert(android.content.ContentValues)>
<android.database.DatabaseUtils.InsertHelper: long replace(android.content.ContentValues)>
<android.database.DatabaseUtils.InsertHelper: void bind(int,float)>
<android.database.DatabaseUtils.InsertHelper: void bind(int,long)>
<android.database.DatabaseUtils.InsertHelper: void bind(int,boolean)>
<android.database.DatabaseUtils.InsertHelper: void bind(int,int)>
<android.database.DatabaseUtils.InsertHelper: long execute()>
<android.database.DatabaseUtils.InsertHelper: void <init>(android.database.sqlite.SQLiteDatabase,String)>
<android.database.DatabaseUtils.InsertHelper: void bindNull(int)>
<android.database.DatabaseUtils.InsertHelper: void prepareForReplace()>
<android.database.DatabaseUtils.InsertHelper: void bind(int,byte[])>
<android.database.DatabaseUtils.InsertHelper: void close()>
<android.database.DatabaseUtils.InsertHelper: void bind(int,java.lang.String)>
<android.database.DatabaseUtils.InsertHelper: void bind(int,double)>
<android.database.DatabaseUtils.InsertHelper: int getColumnIndex(java.lang.String)>
<android.database.DatabaseUtils.InsertHelper: void prepareForInsert()>
<android.telephony.ims.ImsSsData: int describeContents()>
<android.telephony.ims.ImsSsData: int getResult()>
<android.telephony.ims.ImsSsData: void <init>(int,int,int,int,int)>
<android.telephony.ims.ImsSsData: int getRequestType()>
<android.telephony.ims.ImsSsData: int getServiceClass()>
<android.telephony.ims.ImsSsData: boolean isTypeClir()>
<android.telephony.ims.ImsSsData: boolean isTypeCw()>
<android.telephony.ims.ImsSsData: boolean isTypeClip()>
<android.telephony.ims.ImsSsData: boolean isTypeUnConditional()>
<android.telephony.ims.ImsSsData: boolean isTypeColp()>
<android.telephony.ims.ImsSsData: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ims.ImsSsData: boolean isTypeBarring()>
<android.telephony.ims.ImsSsData: boolean isTypeColr()>
<android.telephony.ims.ImsSsData: int getServiceType()>
<android.telephony.ims.ImsSsData: int getTeleserviceType()>
<android.telephony.ims.ImsSsData: java.util.List getCallForwardInfo()>
<android.telephony.ims.ImsSsData: boolean isTypeInterrogation()>
<android.telephony.ims.ImsSsData: boolean isTypeCf()>
<android.telephony.ims.ImsSsData: boolean isTypeIcb()>
<android.telephony.ims.ImsSsData: java.util.List getSuppServiceInfo()>
<android.telephony.VisualVoicemailSmsFilterSettings.Builder: android.telephony.VisualVoicemailSmsFilterSettings.Builder setDestinationPort(int)>
<android.telephony.VisualVoicemailSmsFilterSettings.Builder: android.telephony.VisualVoicemailSmsFilterSettings.Builder setOriginatingNumbers(java.util.List)>
<android.telephony.VisualVoicemailSmsFilterSettings.Builder: android.telephony.VisualVoicemailSmsFilterSettings build()>
<android.telephony.VisualVoicemailSmsFilterSettings.Builder: android.telephony.VisualVoicemailSmsFilterSettings.Builder setClientPrefix(java.lang.String)>
<android.telephony.VisualVoicemailSmsFilterSettings.Builder: void <init>()>
<android.accounts.Account: int describeContents()>
<android.accounts.Account: void <init>(android.os.Parcel)>
<android.accounts.Account: void writeToParcel(android.os.Parcel,int)>
<android.accounts.Account: void <init>(String,String)>
<android.view.ViewTreeObserver.OnPreDrawListener: boolean onPreDraw()>
<android.icu.text.RelativeDateTimeFormatter: java.lang.String formatNumeric(double,android.icu.text.RelativeDateTimeFormatter.RelativeDateTimeUnit)>
<android.icu.text.RelativeDateTimeFormatter: android.icu.text.RelativeDateTimeFormatter getInstance(java.util.Locale,android.icu.text.NumberFormat)>
<android.icu.text.RelativeDateTimeFormatter: android.icu.text.NumberFormat getNumberFormat()>
<android.icu.text.RelativeDateTimeFormatter: java.lang.String format(double,android.icu.text.RelativeDateTimeFormatter.RelativeDateTimeUnit)>
<android.icu.text.RelativeDateTimeFormatter: java.lang.String combineDateAndTime(java.lang.String,java.lang.String)>
<android.icu.text.RelativeDateTimeFormatter: android.icu.text.RelativeDateTimeFormatter getInstance(java.util.Locale)>
<android.icu.text.RelativeDateTimeFormatter: java.lang.String format(double,android.icu.text.RelativeDateTimeFormatter.Direction,android.icu.text.RelativeDateTimeFormatter.RelativeUnit)>
<android.icu.text.RelativeDateTimeFormatter: android.icu.text.RelativeDateTimeFormatter getInstance()>
<android.icu.text.RelativeDateTimeFormatter: android.icu.text.RelativeDateTimeFormatter getInstance(android.icu.util.ULocale,android.icu.text.NumberFormat)>
<android.icu.text.RelativeDateTimeFormatter: android.icu.text.RelativeDateTimeFormatter.Style getFormatStyle()>
<android.icu.text.RelativeDateTimeFormatter: android.icu.text.RelativeDateTimeFormatter getInstance(android.icu.util.ULocale,android.icu.text.NumberFormat,android.icu.text.RelativeDateTimeFormatter.Style,android.icu.text.DisplayContext)>
<android.icu.text.RelativeDateTimeFormatter: android.icu.text.RelativeDateTimeFormatter getInstance(android.icu.util.ULocale)>
<android.icu.text.RelativeDateTimeFormatter: android.icu.text.DisplayContext getCapitalizationContext()>
<android.icu.text.RelativeDateTimeFormatter: java.lang.String format(android.icu.text.RelativeDateTimeFormatter.Direction,android.icu.text.RelativeDateTimeFormatter.AbsoluteUnit)>
<java.nio.channels.UnsupportedAddressTypeException: void <init>()>
<java.util.MissingResourceException: java.lang.String getClassName()>
<java.util.MissingResourceException: void <init>(String,String,String)>
<java.util.MissingResourceException: java.lang.String getKey()>
<android.opengl.GLES10: void glLightModelfv(int,float[],int)>
<android.opengl.GLES10: void glLoadMatrixx(java.nio.IntBuffer)>
<android.opengl.GLES10: void glDrawArrays(int,int,int)>
<android.opengl.GLES10: void glStencilFunc(int,int,int)>
<android.opengl.GLES10: void glStencilMask(int)>
<android.opengl.GLES10: void glMultMatrixf(float[],int)>
<android.opengl.GLES10: void glMultiTexCoord4x(int,int,int,int,int)>
<android.opengl.GLES10: void glClearDepthx(int)>
<android.opengl.GLES10: void glOrthof(float,float,float,float,float,float)>
<android.opengl.GLES10: void glCopyTexImage2D(int,int,int,int,int,int,int,int)>
<android.opengl.GLES10: void <init>()>
<android.opengl.GLES10: void glVertexPointer(int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glOrthox(int,int,int,int,int,int)>
<android.opengl.GLES10: void glLightx(int,int,int)>
<android.opengl.GLES10: int glGetError()>
<android.opengl.GLES10: void glNormalPointer(int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glTexEnvf(int,int,float)>
<android.opengl.GLES10: void glTexEnvfv(int,int,float[],int)>
<android.opengl.GLES10: void glFogfv(int,java.nio.FloatBuffer)>
<android.opengl.GLES10: void glMaterialxv(int,int,int[],int)>
<android.opengl.GLES10: void glBlendFunc(int,int)>
<android.opengl.GLES10: void glLightfv(int,int,float[],int)>
<android.opengl.GLES10: void glMatrixMode(int)>
<android.opengl.GLES10: void glGetIntegerv(int,int[],int)>
<android.opengl.GLES10: void glDepthMask(boolean)>
<android.opengl.GLES10: void glMultMatrixf(java.nio.FloatBuffer)>
<android.opengl.GLES10: void glAlphaFunc(int,float)>
<android.opengl.GLES10: void glDeleteTextures(int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glClearColorx(int,int,int,int)>
<android.opengl.GLES10: void glRotatef(float,float,float,float)>
<android.opengl.GLES10: void glGenTextures(int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glMaterialx(int,int,int)>
<android.opengl.GLES10: void glShadeModel(int)>
<android.opengl.GLES10: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glLightModelf(int,float)>
<android.opengl.GLES10: void glScissor(int,int,int,int)>
<android.opengl.GLES10: void glBindTexture(int,int)>
<android.opengl.GLES10: void glSampleCoverage(float,boolean)>
<android.opengl.GLES10: void glSampleCoveragex(int,boolean)>
<android.opengl.GLES10: void glMultMatrixx(java.nio.IntBuffer)>
<android.opengl.GLES10: void glLoadIdentity()>
<android.opengl.GLES10: void glTranslatex(int,int,int)>
<android.opengl.GLES10: void glLoadMatrixx(int[],int)>
<android.opengl.GLES10: void glViewport(int,int,int,int)>
<android.opengl.GLES10: void glTexParameterx(int,int,int)>
<android.opengl.GLES10: void glTexParameterf(int,int,float)>
<android.opengl.GLES10: void glLineWidth(float)>
<android.opengl.GLES10: void glDepthRangex(int,int)>
<android.opengl.GLES10: void glLightf(int,int,float)>
<android.opengl.GLES10: void glTranslatef(float,float,float)>
<android.opengl.GLES10: void glDepthFunc(int)>
<android.opengl.GLES10: void glEnable(int)>
<android.opengl.GLES10: void glClearStencil(int)>
<android.opengl.GLES10: void glPointSize(float)>
<android.opengl.GLES10: void glColorMask(boolean,boolean,boolean,boolean)>
<android.opengl.GLES10: void glFogf(int,float)>
<android.opengl.GLES10: void glScalef(float,float,float)>
<android.opengl.GLES10: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glLoadMatrixf(float[],int)>
<android.opengl.GLES10: void glTexEnvxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glLogicOp(int)>
<android.opengl.GLES10: void glNormal3f(float,float,float)>
<android.opengl.GLES10: void glClearColor(float,float,float,float)>
<android.opengl.GLES10: void glFogx(int,int)>
<android.opengl.GLES10: void glColorPointer(int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glPopMatrix()>
<android.opengl.GLES10: void glDrawElements(int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)>
<android.opengl.GLES10: void glLightModelxv(int,int[],int)>
<android.opengl.GLES10: void glTexEnvx(int,int,int)>
<android.opengl.GLES10: void glNormal3x(int,int,int)>
<android.opengl.GLES10: void glTexEnvxv(int,int,int[],int)>
<android.opengl.GLES10: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glGenTextures(int,int[],int)>
<android.opengl.GLES10: void glHint(int,int)>
<android.opengl.GLES10: void glAlphaFuncx(int,int)>
<android.opengl.GLES10: void glLightfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES10: void glScalex(int,int,int)>
<android.opengl.GLES10: void glTexCoordPointer(int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glLightxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glFinish()>
<android.opengl.GLES10: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glFrustumx(int,int,int,int,int,int)>
<android.opengl.GLES10: void glGetIntegerv(int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glClear(int)>
<android.opengl.GLES10: void glLightModelx(int,int)>
<android.opengl.GLES10: void glFrustumf(float,float,float,float,float,float)>
<android.opengl.GLES10: void glActiveTexture(int)>
<android.opengl.GLES10: void glDisable(int)>
<android.opengl.GLES10: java.lang.String glGetString(int)>
<android.opengl.GLES10: void glLightxv(int,int,int[],int)>
<android.opengl.GLES10: void glFlush()>
<android.opengl.GLES10: void glMultiTexCoord4f(int,float,float,float,float)>
<android.opengl.GLES10: void glLoadMatrixf(java.nio.FloatBuffer)>
<android.opengl.GLES10: void glMaterialf(int,int,float)>
<android.opengl.GLES10: void glMaterialxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glFogfv(int,float[],int)>
<android.opengl.GLES10: void glTexEnvfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES10: void glRotatex(int,int,int,int)>
<android.opengl.GLES10: void glColor4f(float,float,float,float)>
<android.opengl.GLES10: void glColor4x(int,int,int,int)>
<android.opengl.GLES10: void glPolygonOffset(float,float)>
<android.opengl.GLES10: void glLineWidthx(int)>
<android.opengl.GLES10: void glMultMatrixx(int[],int)>
<android.opengl.GLES10: void glPixelStorei(int,int)>
<android.opengl.GLES10: void glLightModelxv(int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glDeleteTextures(int,int[],int)>
<android.opengl.GLES10: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glClientActiveTexture(int)>
<android.opengl.GLES10: void glMaterialfv(int,int,float[],int)>
<android.opengl.GLES10: void glFogxv(int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glMaterialfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES10: void glPointSizex(int)>
<android.opengl.GLES10: void glDisableClientState(int)>
<android.opengl.GLES10: void glPushMatrix()>
<android.opengl.GLES10: void glFogxv(int,int[],int)>
<android.opengl.GLES10: void glEnableClientState(int)>
<android.opengl.GLES10: void glCullFace(int)>
<android.opengl.GLES10: void glClearDepthf(float)>
<android.opengl.GLES10: void glStencilOp(int,int,int)>
<android.opengl.GLES10: void glLightModelfv(int,java.nio.FloatBuffer)>
<android.opengl.GLES10: void glFrontFace(int)>
<android.opengl.GLES10: void glDepthRangef(float,float)>
<android.opengl.GLES10: void glPolygonOffsetx(int,int)>
<android.security.KeyPairGeneratorSpec: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()>
<android.security.KeyPairGeneratorSpec: java.math.BigInteger getSerialNumber()>
<android.security.KeyPairGeneratorSpec: int getKeySize()>
<android.security.KeyPairGeneratorSpec: java.util.Date getStartDate()>
<android.security.KeyPairGeneratorSpec: java.lang.String getKeystoreAlias()>
<android.security.KeyPairGeneratorSpec: javax.security.auth.x500.X500Principal getSubjectDN()>
<android.security.KeyPairGeneratorSpec: java.lang.String getKeyType()>
<android.security.KeyPairGeneratorSpec: android.content.Context getContext()>
<android.security.KeyPairGeneratorSpec: java.util.Date getEndDate()>
<android.security.KeyPairGeneratorSpec: boolean isEncryptionRequired()>
<android.opengl.GLES11: void glGetFloatv(int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glBufferSubData(int,int,int,java.nio.Buffer)>
<android.opengl.GLES11: boolean glIsTexture(int)>
<android.opengl.GLES11: void glTexParameteri(int,int,int)>
<android.opengl.GLES11: void glGetFixedv(int,int[],int)>
<android.opengl.GLES11: void glPointParameterx(int,int)>
<android.opengl.GLES11: void glPointParameterxv(int,int[],int)>
<android.opengl.GLES11: void glGenBuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glTexEnvi(int,int,int)>
<android.opengl.GLES11: void glGetLightfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glTexParameterfv(int,int,float[],int)>
<android.opengl.GLES11: boolean glIsEnabled(int)>
<android.opengl.GLES11: void glGetClipPlanex(int,java.nio.IntBuffer)>
<android.opengl.GLES11: boolean glIsBuffer(int)>
<android.opengl.GLES11: void glBufferData(int,int,java.nio.Buffer,int)>
<android.opengl.GLES11: void glGetClipPlanef(int,float[],int)>
<android.opengl.GLES11: void glGetTexParameteriv(int,int,int[],int)>
<android.opengl.GLES11: void glPointParameterfv(int,float[],int)>
<android.opengl.GLES11: void glClipPlanef(int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glGetLightfv(int,int,float[],int)>
<android.opengl.GLES11: void glClipPlanex(int,int[],int)>
<android.opengl.GLES11: void glTexParameteriv(int,int,int[],int)>
<android.opengl.GLES11: void glTexParameterxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetTexEnvxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glNormalPointer(int,int,int)>
<android.opengl.GLES11: void glGetTexParameterfv(int,int,float[],int)>
<android.opengl.GLES11: void glPointSizePointerOES(int,int,java.nio.Buffer)>
<android.opengl.GLES11: void glGetTexParameterxv(int,int,int[],int)>
<android.opengl.GLES11: void glTexEnviv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glTexParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetClipPlanef(int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glGetBooleanv(int,boolean[],int)>
<android.opengl.GLES11: void <init>()>
<android.opengl.GLES11: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glGetMaterialxv(int,int,int[],int)>
<android.opengl.GLES11: void glGetTexEnvxv(int,int,int[],int)>
<android.opengl.GLES11: void glGetBufferParameteriv(int,int,int[],int)>
<android.opengl.GLES11: void glGetTexEnvfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glGetTexEnviv(int,int,int[],int)>
<android.opengl.GLES11: void glGetMaterialxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetFloatv(int,float[],int)>
<android.opengl.GLES11: void glGetTexEnviv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glTexEnviv(int,int,int[],int)>
<android.opengl.GLES11: void glPointParameterfv(int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glGetTexParameterxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glPointParameterf(int,float)>
<android.opengl.GLES11: void glPointParameterxv(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glColor4ub(byte,byte,byte,byte)>
<android.opengl.GLES11: void glGetLightxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glColorPointer(int,int,int,int)>
<android.opengl.GLES11: void glTexParameterfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glTexParameterxv(int,int,int[],int)>
<android.opengl.GLES11: void glGenBuffers(int,int[],int)>
<android.opengl.GLES11: void glTexCoordPointer(int,int,int,int)>
<android.opengl.GLES11: void glClipPlanef(int,float[],int)>
<android.opengl.GLES11: void glGetClipPlanex(int,int[],int)>
<android.opengl.GLES11: void glGetFixedv(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glBindBuffer(int,int)>
<android.opengl.GLES11: void glGetTexParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetMaterialfv(int,int,float[],int)>
<android.opengl.GLES11: void glGetBooleanv(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glClipPlanex(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetTexEnvfv(int,int,float[],int)>
<android.opengl.GLES11: void glDeleteBuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glDrawElements(int,int,int,int)>
<android.opengl.GLES11: void glDeleteBuffers(int,int[],int)>
<android.opengl.GLES11: void glGetLightxv(int,int,int[],int)>
<android.opengl.GLES11: void glGetMaterialfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glVertexPointer(int,int,int,int)>
<java.io.PipedWriter: void <init>()>
<java.io.PipedWriter: void write(char[],int,int)>
<java.io.PipedWriter: void <init>(java.io.PipedReader)>
<java.io.PipedWriter: void connect(java.io.PipedReader)>
<java.io.PipedWriter: void flush()>
<java.io.PipedWriter: void close()>
<android.accounts.AccountManagerFuture: boolean cancel(boolean)>
<android.accounts.AccountManagerFuture: boolean isDone()>
<android.accounts.AccountManagerFuture: boolean isCancelled()>
<android.accounts.AccountManagerFuture: V getResult()>
<android.accounts.AccountManagerFuture: V getResult(long,java.util.concurrent.TimeUnit)>
<android.provider.Contacts.Intents.Insert: void <init>()>
<java.util.prefs.AbstractPreferences: void removeNodeChangeListener(java.util.prefs.NodeChangeListener)>
<java.util.prefs.AbstractPreferences: void exportNode(java.io.OutputStream)>
<java.util.prefs.AbstractPreferences: void exportSubtree(java.io.OutputStream)>
<java.util.prefs.AbstractPreferences: void removeNode()>
<java.util.prefs.AbstractPreferences: java.lang.String[] childrenNamesSpi()>
<java.util.prefs.AbstractPreferences: boolean isRemoved()>
<java.util.prefs.AbstractPreferences: void flush()>
<java.util.prefs.AbstractPreferences: void remove(java.lang.String)>
<java.util.prefs.AbstractPreferences: double getDouble(java.lang.String,double)>
<java.util.prefs.AbstractPreferences: boolean getBoolean(java.lang.String,boolean)>
<java.util.prefs.AbstractPreferences: void <init>(java.util.prefs.AbstractPreferences,String)>
<java.util.prefs.AbstractPreferences: void addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener)>
<java.util.prefs.AbstractPreferences: void putLong(java.lang.String,long)>
<java.util.prefs.AbstractPreferences: void removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener)>
<java.util.prefs.AbstractPreferences: boolean nodeExists(java.lang.String)>
<java.util.prefs.AbstractPreferences: void addNodeChangeListener(java.util.prefs.NodeChangeListener)>
<java.util.prefs.AbstractPreferences: void putByteArray(java.lang.String,byte[])>
<java.util.prefs.AbstractPreferences: void putDouble(java.lang.String,double)>
<java.util.prefs.AbstractPreferences: void flushSpi()>
<java.util.prefs.AbstractPreferences: java.lang.String[] keysSpi()>
<java.util.prefs.AbstractPreferences: void putFloat(java.lang.String,float)>
<java.util.prefs.AbstractPreferences: java.lang.String absolutePath()>
<java.util.prefs.AbstractPreferences: java.lang.String[] keys()>
<java.util.prefs.AbstractPreferences: java.lang.String name()>
<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences getChild(java.lang.String)>
<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences[] cachedChildren()>
<java.util.prefs.AbstractPreferences: void sync()>
<java.util.prefs.AbstractPreferences: byte[] getByteArray(java.lang.String,byte[])>
<java.util.prefs.AbstractPreferences: boolean isUserNode()>
<java.util.prefs.AbstractPreferences: void put(java.lang.String,java.lang.String)>
<java.util.prefs.AbstractPreferences: void syncSpi()>
<java.util.prefs.AbstractPreferences: java.lang.String get(java.lang.String,java.lang.String)>
<java.util.prefs.AbstractPreferences: java.util.prefs.Preferences node(java.lang.String)>
<java.util.prefs.AbstractPreferences: void putInt(java.lang.String,int)>
<java.util.prefs.AbstractPreferences: void removeNodeSpi()>
<java.util.prefs.AbstractPreferences: void putBoolean(java.lang.String,boolean)>
<java.util.prefs.AbstractPreferences: void clear()>
<java.util.prefs.AbstractPreferences: float getFloat(java.lang.String,float)>
<java.util.prefs.AbstractPreferences: void removeSpi(java.lang.String)>
<java.util.prefs.AbstractPreferences: java.lang.String getSpi(java.lang.String)>
<java.util.prefs.AbstractPreferences: java.util.prefs.Preferences parent()>
<java.util.prefs.AbstractPreferences: void putSpi(java.lang.String,java.lang.String)>
<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences childSpi(java.lang.String)>
<java.util.prefs.AbstractPreferences: java.lang.String[] childrenNames()>
<java.util.prefs.AbstractPreferences: int getInt(java.lang.String,int)>
<java.util.prefs.AbstractPreferences: long getLong(java.lang.String,long)>
<android.hardware.display.ColorDisplayManager: boolean setAppSaturationLevel(java.lang.String,int)>
<android.hardware.display.ColorDisplayManager: int getTransformCapabilities()>
<android.hardware.display.ColorDisplayManager: int getNightDisplayAutoMode()>
<android.hardware.display.ColorDisplayManager: boolean setNightDisplayCustomStartTime(java.time.LocalTime)>
<android.hardware.display.ColorDisplayManager: boolean setNightDisplayAutoMode(int)>
<android.hardware.display.ColorDisplayManager: boolean setNightDisplayCustomEndTime(java.time.LocalTime)>
<android.hardware.display.ColorDisplayManager: boolean setSaturationLevel(int)>
<android.widget.SimpleCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,int,String[],int[],int,String[],int[])>
<android.widget.SimpleCursorTreeAdapter: void setViewText(android.widget.TextView,java.lang.String)>
<android.widget.SimpleCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,int,String[],int[],int,int,String[],int[])>
<android.widget.SimpleCursorTreeAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,boolean)>
<android.widget.SimpleCursorTreeAdapter: void setViewImage(android.widget.ImageView,java.lang.String)>
<android.widget.SimpleCursorTreeAdapter: void setViewBinder(android.widget.SimpleCursorTreeAdapter.ViewBinder)>
<android.widget.SimpleCursorTreeAdapter: android.widget.SimpleCursorTreeAdapter.ViewBinder getViewBinder()>
<android.widget.SimpleCursorTreeAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor,boolean)>
<android.widget.SimpleCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,String[],int[],int,String[],int[])>
<android.os.IncidentManager.IncidentReport: void <init>(android.os.Parcel)>
<android.os.IncidentManager.IncidentReport: long getPrivacyPolicy()>
<android.os.IncidentManager.IncidentReport: long getTimestamp()>
<android.os.IncidentManager.IncidentReport: int describeContents()>
<android.os.IncidentManager.IncidentReport: void writeToParcel(android.os.Parcel,int)>
<android.os.IncidentManager.IncidentReport: void close()>
<android.os.IncidentManager.IncidentReport: java.io.InputStream getInputStream()>
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityService.MagnificationController getMagnificationController()>
<android.accessibilityservice.AccessibilityService: boolean onGesture(int)>
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityButtonController getAccessibilityButtonController()>
<android.accessibilityservice.AccessibilityService: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)>
<android.accessibilityservice.AccessibilityService: void onInterrupt()>
<android.accessibilityservice.AccessibilityService: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>
<android.accessibilityservice.AccessibilityService: void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityService.SoftKeyboardController getSoftKeyboardController()>
<android.accessibilityservice.AccessibilityService: java.util.List getWindows()>
<android.accessibilityservice.AccessibilityService: void disableSelf()>
<android.accessibilityservice.AccessibilityService: boolean onKeyEvent(android.view.KeyEvent)>
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>
<android.accessibilityservice.AccessibilityService: android.os.IBinder onBind(android.content.Intent)>
<android.accessibilityservice.AccessibilityService: boolean performGlobalAction(int)>
<android.accessibilityservice.AccessibilityService: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()>
<android.accessibilityservice.AccessibilityService: void <init>()>
<android.accessibilityservice.AccessibilityService: boolean dispatchGesture(android.accessibilityservice.GestureDescription,android.accessibilityservice.AccessibilityService.GestureResultCallback,android.os.Handler)>
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.FingerprintGestureController getFingerprintGestureController()>
<android.accessibilityservice.AccessibilityService: void onServiceConnected()>
<android.icu.text.TimeZoneNames: android.icu.text.TimeZoneNames getTZDBInstance(android.icu.util.ULocale)>
<android.icu.text.TimeZoneNames: java.lang.String getExemplarLocationName(java.lang.String)>
<android.icu.text.TimeZoneNames: java.util.Set getAvailableMetaZoneIDs()>
<android.icu.text.TimeZoneNames: java.lang.String getReferenceZoneID(java.lang.String,java.lang.String)>
<android.icu.text.TimeZoneNames: java.lang.String getDisplayName(java.lang.String,android.icu.text.TimeZoneNames.NameType,long)>
<android.icu.text.TimeZoneNames: java.util.Set getAvailableMetaZoneIDs(java.lang.String)>
<android.icu.text.TimeZoneNames: java.lang.String getMetaZoneDisplayName(java.lang.String,android.icu.text.TimeZoneNames.NameType)>
<android.icu.text.TimeZoneNames: java.lang.String getTimeZoneDisplayName(java.lang.String,android.icu.text.TimeZoneNames.NameType)>
<android.icu.text.TimeZoneNames: java.lang.String getMetaZoneID(java.lang.String,long)>
<android.icu.text.TimeZoneNames: android.icu.text.TimeZoneNames getInstance(android.icu.util.ULocale)>
<android.icu.text.TimeZoneNames: android.icu.text.TimeZoneNames getInstance(java.util.Locale)>
<android.net.wifi.WifiManager.MulticastLock: void release()>
<android.net.wifi.WifiManager.MulticastLock: void setReferenceCounted(boolean)>
<android.net.wifi.WifiManager.MulticastLock: boolean isHeld()>
<android.net.wifi.WifiManager.MulticastLock: void acquire()>
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setTitle(CharSequence)>
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setNotificationVisibility(int)>
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setAllowedOverRoaming(boolean)>
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setAllowedNetworkTypes(int)>
<android.app.DownloadManager.Request: void <init>(android.net.Uri)>
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setAllowedOverMetered(boolean)>
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setVisibleInDownloadsUi(boolean)>
<android.app.DownloadManager.Request: android.app.DownloadManager.Request addRequestHeader(java.lang.String,java.lang.String)>
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setRequiresDeviceIdle(boolean)>
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setDestinationUri(android.net.Uri)>
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setDestinationInExternalFilesDir(android.content.Context,java.lang.String,java.lang.String)>
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setRequiresCharging(boolean)>
<android.app.DownloadManager.Request: void allowScanningByMediaScanner()>
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setShowRunningNotification(boolean)>
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setDestinationInExternalPublicDir(java.lang.String,java.lang.String)>
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setDescription(CharSequence)>
<android.app.DownloadManager.Request: android.app.DownloadManager.Request setMimeType(java.lang.String)>
<android.app.FragmentManager: int getBackStackEntryCount()>
<android.app.FragmentManager: android.app.Fragment findFragmentById(int)>
<android.app.FragmentManager: android.app.Fragment getFragment(android.os.Bundle,java.lang.String)>
<android.app.FragmentManager: void invalidateOptionsMenu()>
<android.app.FragmentManager: boolean isDestroyed()>
<android.app.FragmentManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.FragmentManager: void popBackStack(java.lang.String,int)>
<android.app.FragmentManager: java.util.List getFragments()>
<android.app.FragmentManager: boolean popBackStackImmediate()>
<android.app.FragmentManager: void <init>()>
<android.app.FragmentManager: void putFragment(android.os.Bundle,java.lang.String,android.app.Fragment)>
<android.app.FragmentManager: boolean isStateSaved()>
<android.app.FragmentManager: void addOnBackStackChangedListener(android.app.FragmentManager.OnBackStackChangedListener)>
<android.app.FragmentManager: void unregisterFragmentLifecycleCallbacks(android.app.FragmentManager.FragmentLifecycleCallbacks)>
<android.app.FragmentManager: void enableDebugLogging(boolean)>
<android.app.FragmentManager: void popBackStack(int,int)>
<android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()>
<android.app.FragmentManager: android.app.Fragment getPrimaryNavigationFragment()>
<android.app.FragmentManager: boolean popBackStackImmediate(int,int)>
<android.app.FragmentManager: android.app.Fragment findFragmentByTag(java.lang.String)>
<android.app.FragmentManager: void popBackStack()>
<android.app.FragmentManager: android.app.Fragment.SavedState saveFragmentInstanceState(android.app.Fragment)>
<android.app.FragmentManager: void removeOnBackStackChangedListener(android.app.FragmentManager.OnBackStackChangedListener)>
<android.app.FragmentManager: void registerFragmentLifecycleCallbacks(android.app.FragmentManager.FragmentLifecycleCallbacks,boolean)>
<android.app.FragmentManager: boolean popBackStackImmediate(java.lang.String,int)>
<android.app.FragmentManager: boolean executePendingTransactions()>
<android.app.FragmentManager: android.app.FragmentManager.BackStackEntry getBackStackEntryAt(int)>
<android.view.InputQueue.Callback: void onInputQueueDestroyed(android.view.InputQueue)>
<android.view.InputQueue.Callback: void onInputQueueCreated(android.view.InputQueue)>
<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putObject(int,java.lang.Object)>
<android.media.MediaMetadataEditor: java.lang.String getString(int,java.lang.String)>
<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putBitmap(int,android.graphics.Bitmap)>
<android.media.MediaMetadataEditor: void clear()>
<android.media.MediaMetadataEditor: int[] getEditableKeys()>
<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putString(int,java.lang.String)>
<android.media.MediaMetadataEditor: void apply()>
<android.media.MediaMetadataEditor: long getLong(int,long)>
<android.media.MediaMetadataEditor: void addEditableKey(int)>
<android.media.MediaMetadataEditor: void removeEditableKeys()>
<android.media.MediaMetadataEditor: java.lang.Object getObject(int,java.lang.Object)>
<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putLong(int,long)>
<android.media.MediaMetadataEditor: android.graphics.Bitmap getBitmap(int,android.graphics.Bitmap)>
<android.net.MacAddress: void writeToParcel(android.os.Parcel,int)>
<android.net.MacAddress: boolean isLocallyAssigned()>
<android.net.MacAddress: int getAddressType()>
<android.net.MacAddress: int describeContents()>
<android.net.MacAddress: android.net.MacAddress fromBytes(byte[])>
<android.net.MacAddress: android.net.MacAddress fromString(java.lang.String)>
<android.net.MacAddress: java.lang.String toOuiString()>
<android.net.MacAddress: byte[] toByteArray()>
<android.os.Debug.MemoryInfo: java.lang.String getMemoryStat(java.lang.String)>
<android.os.Debug.MemoryInfo: java.util.Map getMemoryStats()>
<android.os.Debug.MemoryInfo: void <init>()>
<android.os.Debug.MemoryInfo: int getTotalPss()>
<android.os.Debug.MemoryInfo: int getTotalSharedClean()>
<android.os.Debug.MemoryInfo: int describeContents()>
<android.os.Debug.MemoryInfo: int getTotalPrivateClean()>
<android.os.Debug.MemoryInfo: void readFromParcel(android.os.Parcel)>
<android.os.Debug.MemoryInfo: void writeToParcel(android.os.Parcel,int)>
<android.os.Debug.MemoryInfo: int getTotalPrivateDirty()>
<android.os.Debug.MemoryInfo: int getTotalSharedDirty()>
<android.os.Debug.MemoryInfo: int getTotalSwappablePss()>
<android.media.Rating: boolean isRated()>
<android.media.Rating: boolean isThumbUp()>
<android.media.Rating: android.media.Rating newStarRating(int,float)>
<android.media.Rating: android.media.Rating newHeartRating(boolean)>
<android.media.Rating: android.media.Rating newPercentageRating(float)>
<android.media.Rating: android.media.Rating newThumbRating(boolean)>
<android.media.Rating: android.media.Rating newUnratedRating(int)>
<android.media.Rating: float getPercentRating()>
<android.media.Rating: boolean hasHeart()>
<android.media.Rating: void writeToParcel(android.os.Parcel,int)>
<android.media.Rating: float getStarRating()>
<android.media.Rating: int describeContents()>
<android.media.Rating: int getRatingStyle()>
<android.accessibilityservice.AccessibilityService.MagnificationController: void addListener(android.accessibilityservice.AccessibilityService.MagnificationController.OnMagnificationChangedListener,android.os.Handler)>
<android.accessibilityservice.AccessibilityService.MagnificationController: boolean removeListener(android.accessibilityservice.AccessibilityService.MagnificationController.OnMagnificationChangedListener)>
<android.accessibilityservice.AccessibilityService.MagnificationController: boolean reset(boolean)>
<android.accessibilityservice.AccessibilityService.MagnificationController: boolean setScale(float,boolean)>
<android.accessibilityservice.AccessibilityService.MagnificationController: android.graphics.Region getMagnificationRegion()>
<android.accessibilityservice.AccessibilityService.MagnificationController: boolean setCenter(float,float,boolean)>
<android.accessibilityservice.AccessibilityService.MagnificationController: float getCenterX()>
<android.accessibilityservice.AccessibilityService.MagnificationController: float getScale()>
<android.accessibilityservice.AccessibilityService.MagnificationController: void addListener(android.accessibilityservice.AccessibilityService.MagnificationController.OnMagnificationChangedListener)>
<android.accessibilityservice.AccessibilityService.MagnificationController: float getCenterY()>
<android.widget.ExpandableListAdapter: void onGroupExpanded(int)>
<android.widget.ExpandableListAdapter: void onGroupCollapsed(int)>
<android.widget.ExpandableListAdapter: java.lang.Object getGroup(int)>
<android.widget.ExpandableListAdapter: long getChildId(int,int)>
<android.widget.ExpandableListAdapter: long getCombinedGroupId(long)>
<android.widget.ExpandableListAdapter: int getGroupCount()>
<android.widget.ExpandableListAdapter: boolean hasStableIds()>
<android.widget.ExpandableListAdapter: boolean isEmpty()>
<android.widget.ExpandableListAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.ExpandableListAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.ExpandableListAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.widget.ExpandableListAdapter: java.lang.Object getChild(int,int)>
<android.widget.ExpandableListAdapter: long getCombinedChildId(long,long)>
<android.widget.ExpandableListAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.ExpandableListAdapter: long getGroupId(int)>
<android.widget.ExpandableListAdapter: boolean areAllItemsEnabled()>
<android.widget.ExpandableListAdapter: boolean isChildSelectable(int,int)>
<android.widget.ExpandableListAdapter: int getChildrenCount(int)>
<android.media.ExifInterface: android.graphics.Bitmap getThumbnailBitmap()>
<android.media.ExifInterface: boolean getLatLong(float[])>
<android.media.ExifInterface: void saveAttributes()>
<android.media.ExifInterface: boolean hasAttribute(java.lang.String)>
<android.media.ExifInterface: void <init>(java.io.FileDescriptor)>
<android.media.ExifInterface: byte[] getAttributeBytes(java.lang.String)>
<android.media.ExifInterface: int getAttributeInt(java.lang.String,int)>
<android.media.ExifInterface: long[] getThumbnailRange()>
<android.media.ExifInterface: long[] getAttributeRange(java.lang.String)>
<android.media.ExifInterface: void <init>(java.io.InputStream)>
<android.media.ExifInterface: boolean hasThumbnail()>
<android.media.ExifInterface: void setAttribute(java.lang.String,java.lang.String)>
<android.media.ExifInterface: byte[] getThumbnailBytes()>
<android.media.ExifInterface: void <init>(String)>
<android.media.ExifInterface: void <init>(java.io.File)>
<android.media.ExifInterface: java.lang.String getAttribute(java.lang.String)>
<android.media.ExifInterface: double getAltitude(double)>
<android.media.ExifInterface: boolean isThumbnailCompressed()>
<android.media.ExifInterface: double getAttributeDouble(java.lang.String,double)>
<android.media.ExifInterface: byte[] getThumbnail()>
<android.view.accessibility.AccessibilityNodeInfo.CollectionInfo: int getColumnCount()>
<android.view.accessibility.AccessibilityNodeInfo.CollectionInfo: android.view.accessibility.AccessibilityNodeInfo.CollectionInfo obtain(int,int,boolean,int)>
<android.view.accessibility.AccessibilityNodeInfo.CollectionInfo: boolean isHierarchical()>
<android.view.accessibility.AccessibilityNodeInfo.CollectionInfo: int getSelectionMode()>
<android.view.accessibility.AccessibilityNodeInfo.CollectionInfo: int getRowCount()>
<android.view.accessibility.AccessibilityNodeInfo.CollectionInfo: android.view.accessibility.AccessibilityNodeInfo.CollectionInfo obtain(int,int,boolean)>
<javax.crypto.spec.OAEPParameterSpec: void <init>(String,String,java.security.spec.AlgorithmParameterSpec,javax.crypto.spec.PSource)>
<javax.crypto.spec.OAEPParameterSpec: java.lang.String getDigestAlgorithm()>
<javax.crypto.spec.OAEPParameterSpec: javax.crypto.spec.PSource getPSource()>
<javax.crypto.spec.OAEPParameterSpec: java.lang.String getMGFAlgorithm()>
<javax.crypto.spec.OAEPParameterSpec: java.security.spec.AlgorithmParameterSpec getMGFParameters()>
<android.net.wifi.WifiNetworkSuggestion: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiNetworkSuggestion: int describeContents()>
<java.net.SocketTimeoutException: void <init>()>
<java.net.SocketTimeoutException: void <init>(String)>
<android.content.pm.ActivityInfo.WindowLayout: void <init>(int,float,int,float,int,int,int)>
<android.net.UrlQuerySanitizer.ParameterValuePair: void <init>(String,String)>
<java.util.IllegalFormatWidthException: int getWidth()>
<java.util.IllegalFormatWidthException: void <init>(int)>
<android.graphics.pdf.PdfDocument.Page: android.graphics.Canvas getCanvas()>
<android.graphics.pdf.PdfDocument.Page: android.graphics.pdf.PdfDocument.PageInfo getInfo()>
<android.print.PrintJobInfo: void writeToParcel(android.os.Parcel,int)>
<android.print.PrintJobInfo: int getCopies()>
<android.print.PrintJobInfo: android.print.PrinterId getPrinterId()>
<android.print.PrintJobInfo: CharSequence getStatus(android.content.pm.PackageManager)>
<android.print.PrintJobInfo: int describeContents()>
<android.print.PrintJobInfo: android.print.PrintAttributes getAttributes()>
<android.print.PrintJobInfo: long getCreationTime()>
<android.print.PrintJobInfo: boolean hasAdvancedOption(java.lang.String)>
<android.print.PrintJobInfo: float getProgress()>
<android.print.PrintJobInfo: android.print.PageRange[] getPages()>
<android.print.PrintJobInfo: int getAdvancedIntOption(java.lang.String)>
<android.print.PrintJobInfo: int getState()>
<android.print.PrintJobInfo: java.lang.String getLabel()>
<android.print.PrintJobInfo: android.print.PrintJobId getId()>
<android.print.PrintJobInfo: java.lang.String getAdvancedStringOption(java.lang.String)>
<android.os.PowerManager.OnThermalStatusChangedListener: void onThermalStatusChanged(int)>
<android.view.textclassifier.TextClassification.Request: android.os.Bundle getExtras()>
<android.view.textclassifier.TextClassification.Request: int getStartIndex()>
<android.view.textclassifier.TextClassification.Request: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextClassification.Request: java.lang.String getCallingPackageName()>
<android.view.textclassifier.TextClassification.Request: android.os.LocaleList getDefaultLocales()>
<android.view.textclassifier.TextClassification.Request: int describeContents()>
<android.view.textclassifier.TextClassification.Request: int getEndIndex()>
<android.view.textclassifier.TextClassification.Request: java.time.ZonedDateTime getReferenceTime()>
<android.view.textclassifier.TextClassification.Request: CharSequence getText()>
<android.widget.QuickContactBadge: void setPrioritizedMimeType(java.lang.String)>
<android.widget.QuickContactBadge: void assignContactUri(android.net.Uri)>
<android.widget.QuickContactBadge: void setOverlay(android.graphics.drawable.Drawable)>
<android.widget.QuickContactBadge: void onClick(android.view.View)>
<android.widget.QuickContactBadge: void <init>(android.content.Context)>
<android.widget.QuickContactBadge: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.QuickContactBadge: void setExcludeMimes(java.lang.String[])>
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)>
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)>
<android.widget.QuickContactBadge: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)>
<android.widget.QuickContactBadge: void setMode(int)>
<android.widget.QuickContactBadge: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)>
<android.widget.QuickContactBadge: void setImageToDefault()>
<android.opengl.GLES32: void glGetTexParameterIiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glGetTexParameterIiv(int,int,int[],int)>
<android.opengl.GLES32: void glTexBuffer(int,int,int)>
<android.opengl.GLES32: void glGetSamplerParameterIuiv(int,int,int[],int)>
<android.opengl.GLES32: java.lang.String glGetObjectPtrLabel(long)>
<android.opengl.GLES32: void glTexParameterIuiv(int,int,int[],int)>
<android.opengl.GLES32: void glBlendEquationSeparatei(int,int,int)>
<android.opengl.GLES32: void glDrawElementsBaseVertex(int,int,int,java.nio.Buffer,int)>
<android.opengl.GLES32: void glReadnPixels(int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES32: void glBlendEquationi(int,int)>
<android.opengl.GLES32: void glDrawElementsInstancedBaseVertex(int,int,int,java.nio.Buffer,int,int)>
<android.opengl.GLES32: void glObjectLabel(int,int,int,java.lang.String)>
<android.opengl.GLES32: void glGetnUniformuiv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glSamplerParameterIiv(int,int,int[],int)>
<android.opengl.GLES32: void glDebugMessageControl(int,int,int,int,java.nio.IntBuffer,boolean)>
<android.opengl.GLES32: boolean glIsEnabledi(int,int)>
<android.opengl.GLES32: void glTexParameterIiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glGetSamplerParameterIiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glObjectPtrLabel(long,java.lang.String)>
<android.opengl.GLES32: void glPatchParameteri(int,int)>
<android.opengl.GLES32: java.lang.String[] glGetDebugMessageLog(int,int[],int,int[],int,int[],int,int[],int)>
<android.opengl.GLES32: void glPopDebugGroup()>
<android.opengl.GLES32: void glTexBufferRange(int,int,int,int,int)>
<android.opengl.GLES32: void glCopyImageSubData(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)>
<android.opengl.GLES32: void glFramebufferTexture(int,int,int,int)>
<android.opengl.GLES32: long glGetPointerv(int)>
<android.opengl.GLES32: void glMinSampleShading(float)>
<android.opengl.GLES32: void glBlendFuncSeparatei(int,int,int,int,int)>
<android.opengl.GLES32: void glGetnUniformiv(int,int,int,int[],int)>
<android.opengl.GLES32: void glBlendBarrier()>
<android.opengl.GLES32: void glDebugMessageCallback(android.opengl.GLES32.DebugProc)>
<android.opengl.GLES32: void glGetTexParameterIuiv(int,int,int[],int)>
<android.opengl.GLES32: void glSamplerParameterIuiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glDrawElementsInstancedBaseVertex(int,int,int,int,int,int)>
<android.opengl.GLES32: void glPushDebugGroup(int,int,int,java.lang.String)>
<android.opengl.GLES32: void glTexParameterIiv(int,int,int[],int)>
<android.opengl.GLES32: int glGetDebugMessageLog(int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.ByteBuffer)>
<android.opengl.GLES32: void glTexParameterIuiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glEnablei(int,int)>
<android.opengl.GLES32: int glGetDebugMessageLog(int,int,int[],int,int[],int,int[],int,int[],int,int[],int,byte[],int)>
<android.opengl.GLES32: void glGetnUniformuiv(int,int,int,int[],int)>
<android.opengl.GLES32: int glGetGraphicsResetStatus()>
<android.opengl.GLES32: void glTexStorage3DMultisample(int,int,int,int,int,int,boolean)>
<android.opengl.GLES32: void glDebugMessageControl(int,int,int,int,int[],int,boolean)>
<android.opengl.GLES32: void glGetnUniformfv(int,int,int,java.nio.FloatBuffer)>
<android.opengl.GLES32: java.lang.String glGetObjectLabel(int,int)>
<android.opengl.GLES32: void glDisablei(int,int)>
<android.opengl.GLES32: void glGetnUniformfv(int,int,int,float[],int)>
<android.opengl.GLES32: void glDebugMessageInsert(int,int,int,int,int,java.lang.String)>
<android.opengl.GLES32: void glGetSamplerParameterIuiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glGetTexParameterIuiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glGetnUniformiv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glPrimitiveBoundingBox(float,float,float,float,float,float,float,float)>
<android.opengl.GLES32: void glSamplerParameterIiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: java.lang.String[] glGetDebugMessageLog(int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES32: void glBlendFunci(int,int,int)>
<android.opengl.GLES32: void glDrawRangeElementsBaseVertex(int,int,int,int,int,java.nio.Buffer,int)>
<android.opengl.GLES32: void glGetSamplerParameterIiv(int,int,int[],int)>
<android.opengl.GLES32: void glColorMaski(int,boolean,boolean,boolean,boolean)>
<android.opengl.GLES32: void glSamplerParameterIuiv(int,int,int[],int)>
<android.os.storage.OnObbStateChangeListener: void onObbStateChange(java.lang.String,int)>
<android.os.storage.OnObbStateChangeListener: void <init>()>
<android.app.job.JobInfo.TriggerContentUri: void <init>(android.net.Uri,int)>
<android.app.job.JobInfo.TriggerContentUri: void writeToParcel(android.os.Parcel,int)>
<android.app.job.JobInfo.TriggerContentUri: int describeContents()>
<android.app.job.JobInfo.TriggerContentUri: int getFlags()>
<android.app.job.JobInfo.TriggerContentUri: android.net.Uri getUri()>
<android.app.FragmentManager.FragmentLifecycleCallbacks: void <init>()>
<android.app.FragmentManager.FragmentLifecycleCallbacks: void onFragmentCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>
<android.app.FragmentManager.FragmentLifecycleCallbacks: void onFragmentStopped(android.app.FragmentManager,android.app.Fragment)>
<android.app.FragmentManager.FragmentLifecycleCallbacks: void onFragmentDestroyed(android.app.FragmentManager,android.app.Fragment)>
<android.app.FragmentManager.FragmentLifecycleCallbacks: void onFragmentResumed(android.app.FragmentManager,android.app.Fragment)>
<android.app.FragmentManager.FragmentLifecycleCallbacks: void onFragmentPaused(android.app.FragmentManager,android.app.Fragment)>
<android.app.FragmentManager.FragmentLifecycleCallbacks: void onFragmentAttached(android.app.FragmentManager,android.app.Fragment,android.content.Context)>
<android.app.FragmentManager.FragmentLifecycleCallbacks: void onFragmentSaveInstanceState(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>
<android.app.FragmentManager.FragmentLifecycleCallbacks: void onFragmentStarted(android.app.FragmentManager,android.app.Fragment)>
<android.app.FragmentManager.FragmentLifecycleCallbacks: void onFragmentDetached(android.app.FragmentManager,android.app.Fragment)>
<android.app.FragmentManager.FragmentLifecycleCallbacks: void onFragmentActivityCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>
<android.app.FragmentManager.FragmentLifecycleCallbacks: void onFragmentPreCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>
<android.app.FragmentManager.FragmentLifecycleCallbacks: void onFragmentViewCreated(android.app.FragmentManager,android.app.Fragment,android.view.View,android.os.Bundle)>
<android.app.FragmentManager.FragmentLifecycleCallbacks: void onFragmentViewDestroyed(android.app.FragmentManager,android.app.Fragment)>
<android.app.FragmentManager.FragmentLifecycleCallbacks: void onFragmentPreAttached(android.app.FragmentManager,android.app.Fragment,android.content.Context)>
<android.opengl.GLES30: void glDrawRangeElements(int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES30: void glGetQueryObjectuiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glUniform2uiv(int,int,int[],int)>
<android.opengl.GLES30: void glDrawRangeElements(int,int,int,int,int,int)>
<android.opengl.GLES30: void glEndTransformFeedback()>
<android.opengl.GLES30: void glFlushMappedBufferRange(int,int,int)>
<android.opengl.GLES30: void glGenSamplers(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void <init>()>
<android.opengl.GLES30: void glBindBufferBase(int,int,int)>
<android.opengl.GLES30: void glBindSampler(int,int)>
<android.opengl.GLES30: void glGenQueries(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGenTransformFeedbacks(int,int[],int)>
<android.opengl.GLES30: void glUniform1ui(int,int)>
<android.opengl.GLES30: boolean glIsTransformFeedback(int)>
<android.opengl.GLES30: void glDeleteTransformFeedbacks(int,int[],int)>
<android.opengl.GLES30: boolean glIsSampler(int)>
<android.opengl.GLES30: void glVertexAttribDivisor(int,int)>
<android.opengl.GLES30: void glGetActiveUniformBlockiv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glProgramBinary(int,int,java.nio.Buffer,int)>
<android.opengl.GLES30: boolean glIsVertexArray(int)>
<android.opengl.GLES30: void glGetActiveUniformBlockName(int,int,java.nio.Buffer,java.nio.Buffer)>
<android.opengl.GLES30: void glUniform1uiv(int,int,int[],int)>
<android.opengl.GLES30: void glCopyBufferSubData(int,int,int,int,int)>
<android.opengl.GLES30: void glDeleteTransformFeedbacks(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glCopyTexSubImage3D(int,int,int,int,int,int,int,int,int)>
<android.opengl.GLES30: void glVertexAttribIPointer(int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES30: void glDeleteSamplers(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetActiveUniformsiv(int,int,java.nio.IntBuffer,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glUniform3ui(int,int,int,int)>
<android.opengl.GLES30: void glDrawElementsInstanced(int,int,int,int,int)>
<android.opengl.GLES30: void glUniform3uiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetInteger64v(int,long[],int)>
<android.opengl.GLES30: void glDeleteSamplers(int,int[],int)>
<android.opengl.GLES30: void glGetUniformIndices(int,java.lang.String[],java.nio.IntBuffer)>
<android.opengl.GLES30: void glRenderbufferStorageMultisample(int,int,int,int,int)>
<android.opengl.GLES30: void glPauseTransformFeedback()>
<android.opengl.GLES30: void glUniformMatrix4x2fv(int,int,boolean,float[],int)>
<android.opengl.GLES30: java.lang.String glGetTransformFeedbackVarying(int,int,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetSynciv(long,int,int,int[],int,int[],int)>
<android.opengl.GLES30: void glVertexAttribI4uiv(int,int[],int)>
<android.opengl.GLES30: void glSamplerParameterfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES30: void glTexStorage3D(int,int,int,int,int,int)>
<android.opengl.GLES30: void glClearBufferfv(int,int,float[],int)>
<android.opengl.GLES30: void glCompressedTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES30: void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES30: void glDeleteQueries(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetInteger64v(int,java.nio.LongBuffer)>
<android.opengl.GLES30: void glFramebufferTextureLayer(int,int,int,int,int)>
<android.opengl.GLES30: void glGetTransformFeedbackVarying(int,int,int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.ByteBuffer)>
<android.opengl.GLES30: boolean glIsQuery(int)>
<android.opengl.GLES30: void glCompressedTexImage3D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES30: void glTexImage3D(int,int,int,int,int,int,int,int,int,int)>
<android.opengl.GLES30: void glUniformMatrix4x3fv(int,int,boolean,float[],int)>
<android.opengl.GLES30: void glGetVertexAttribIuiv(int,int,int[],int)>
<android.opengl.GLES30: void glTransformFeedbackVaryings(int,java.lang.String[],int)>
<android.opengl.GLES30: void glUniform2uiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetSamplerParameterfv(int,int,float[],int)>
<android.opengl.GLES30: void glSamplerParameteri(int,int,int)>
<android.opengl.GLES30: void glUniformMatrix2x4fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES30: void glBindVertexArray(int)>
<android.opengl.GLES30: void glUniform1uiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glVertexAttribI4iv(int,int[],int)>
<android.opengl.GLES30: void glUniformBlockBinding(int,int,int)>
<android.opengl.GLES30: void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int)>
<android.opengl.GLES30: void glProgramParameteri(int,int,int)>
<android.opengl.GLES30: void glInvalidateFramebuffer(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glInvalidateSubFramebuffer(int,int,java.nio.IntBuffer,int,int,int,int)>
<android.opengl.GLES30: void glBeginQuery(int,int)>
<android.opengl.GLES30: void glBindTransformFeedback(int,int)>
<android.opengl.GLES30: void glDrawElementsInstanced(int,int,int,java.nio.Buffer,int)>
<android.opengl.GLES30: void glGenVertexArrays(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glInvalidateSubFramebuffer(int,int,int[],int,int,int,int,int)>
<android.opengl.GLES30: void glReadBuffer(int)>
<android.opengl.GLES30: void glDeleteVertexArrays(int,int[],int)>
<android.opengl.GLES30: void glGetInternalformativ(int,int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetSamplerParameteriv(int,int,int[],int)>
<android.opengl.GLES30: void glGetSamplerParameterfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES30: void glDeleteVertexArrays(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetUniformIndices(int,java.lang.String[],int[],int)>
<android.opengl.GLES30: void glGenSamplers(int,int[],int)>
<android.opengl.GLES30: void glReadPixels(int,int,int,int,int,int,int)>
<android.opengl.GLES30: void glGetInteger64i_v(int,int,java.nio.LongBuffer)>
<android.opengl.GLES30: void glGetProgramBinary(int,int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.Buffer)>
<android.opengl.GLES30: void glClearBufferiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetInteger64i_v(int,int,long[],int)>
<android.opengl.GLES30: void glUniformMatrix3x4fv(int,int,boolean,float[],int)>
<android.opengl.GLES30: void glGetActiveUniformsiv(int,int,int[],int,int,int[],int)>
<android.opengl.GLES30: void glUniformMatrix4x3fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES30: void glGetProgramBinary(int,int,int[],int,int[],int,java.nio.Buffer)>
<android.opengl.GLES30: void glGetUniformuiv(int,int,int[],int)>
<android.opengl.GLES30: void glUniformMatrix2x3fv(int,int,boolean,float[],int)>
<android.opengl.GLES30: void glBlitFramebuffer(int,int,int,int,int,int,int,int,int,int)>
<android.opengl.GLES30: void glBeginTransformFeedback(int)>
<android.opengl.GLES30: java.nio.Buffer glGetBufferPointerv(int,int)>
<android.opengl.GLES30: java.lang.String glGetStringi(int,int)>
<android.opengl.GLES30: void glGetVertexAttribIiv(int,int,int[],int)>
<android.opengl.GLES30: void glGetActiveUniformBlockiv(int,int,int,int[],int)>
<android.opengl.GLES30: int glGetUniformBlockIndex(int,java.lang.String)>
<android.opengl.GLES30: int glClientWaitSync(long,int,long)>
<android.opengl.GLES30: void glUniformMatrix3x2fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES30: void glVertexAttribIPointer(int,int,int,int,int)>
<android.opengl.GLES30: boolean glUnmapBuffer(int)>
<android.opengl.GLES30: void glClearBufferuiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetQueryObjectuiv(int,int,int[],int)>
<android.opengl.GLES30: void glGetInternalformativ(int,int,int,int,int[],int)>
<android.opengl.GLES30: void glGetSynciv(long,int,int,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES30: void glVertexAttribI4uiv(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glDrawBuffers(int,int[],int)>
<android.opengl.GLES30: void glGetQueryiv(int,int,int[],int)>
<android.opengl.GLES30: void glGetVertexAttribIiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetBufferParameteri64v(int,int,long[],int)>
<android.opengl.GLES30: void glSamplerParameterfv(int,int,float[],int)>
<android.opengl.GLES30: void glUniformMatrix2x4fv(int,int,boolean,float[],int)>
<android.opengl.GLES30: void glGenTransformFeedbacks(int,java.nio.IntBuffer)>
<android.opengl.GLES30: java.lang.String glGetTransformFeedbackVarying(int,int,int[],int,int[],int)>
<android.opengl.GLES30: void glGenQueries(int,int[],int)>
<android.opengl.GLES30: void glCompressedTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int)>
<android.opengl.GLES30: void glDrawArraysInstanced(int,int,int,int)>
<android.opengl.GLES30: void glClearBufferfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES30: void glVertexAttribI4i(int,int,int,int,int)>
<android.opengl.GLES30: void glWaitSync(long,int,long)>
<android.opengl.GLES30: void glDeleteQueries(int,int[],int)>
<android.opengl.GLES30: void glGenVertexArrays(int,int[],int)>
<android.opengl.GLES30: void glGetIntegeri_v(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glDrawBuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glVertexAttribI4ui(int,int,int,int,int)>
<android.opengl.GLES30: void glEndQuery(int)>
<android.opengl.GLES30: void glDeleteSync(long)>
<android.opengl.GLES30: long glFenceSync(int,int)>
<android.opengl.GLES30: void glUniform3uiv(int,int,int[],int)>
<android.opengl.GLES30: void glUniformMatrix3x4fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES30: void glGetIntegeri_v(int,int,int[],int)>
<android.opengl.GLES30: void glUniformMatrix4x2fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES30: int glGetFragDataLocation(int,java.lang.String)>
<android.opengl.GLES30: void glVertexAttribI4iv(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glSamplerParameteriv(int,int,int[],int)>
<android.opengl.GLES30: void glUniformMatrix3x2fv(int,int,boolean,float[],int)>
<android.opengl.GLES30: void glResumeTransformFeedback()>
<android.opengl.GLES30: void glClearBufferiv(int,int,int[],int)>
<android.opengl.GLES30: void glUniform2ui(int,int,int)>
<android.opengl.GLES30: void glInvalidateFramebuffer(int,int,int[],int)>
<android.opengl.GLES30: java.lang.String glGetActiveUniformBlockName(int,int)>
<android.opengl.GLES30: void glGetUniformuiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glUniformMatrix2x3fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES30: java.nio.Buffer glMapBufferRange(int,int,int,int)>
<android.opengl.GLES30: void glGetActiveUniformBlockName(int,int,int,int[],int,byte[],int)>
<android.opengl.GLES30: void glSamplerParameterf(int,int,float)>
<android.opengl.GLES30: void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES30: void glSamplerParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glClearBufferuiv(int,int,int[],int)>
<android.opengl.GLES30: void glGetTransformFeedbackVarying(int,int,int,int[],int,int[],int,int[],int,byte[],int)>
<android.opengl.GLES30: boolean glIsSync(long)>
<android.opengl.GLES30: void glGetTransformFeedbackVarying(int,int,int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,byte)>
<android.opengl.GLES30: void glGetVertexAttribIuiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glTexStorage2D(int,int,int,int,int)>
<android.opengl.GLES30: void glUniform4uiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glBindBufferRange(int,int,int,int,int)>
<android.opengl.GLES30: void glUniform4uiv(int,int,int[],int)>
<android.opengl.GLES30: void glGetSamplerParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glUniform4ui(int,int,int,int,int)>
<android.opengl.GLES30: void glGetQueryiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glClearBufferfi(int,int,float,int)>
<android.opengl.GLES30: void glCompressedTexImage3D(int,int,int,int,int,int,int,int,int)>
<android.opengl.GLES30: void glGetBufferParameteri64v(int,int,java.nio.LongBuffer)>
<android.opengl.GLES31: boolean glIsProgramPipeline(int)>
<android.opengl.GLES31: void glProgramUniform4uiv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glGetTexLevelParameteriv(int,int,int,int[],int)>
<android.opengl.GLES31: void glGetProgramInterfaceiv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glTexStorage2DMultisample(int,int,int,int,int,boolean)>
<android.opengl.GLES31: void glProgramUniformMatrix3fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glProgramUniform2iv(int,int,int,int[],int)>
<android.opengl.GLES31: void glGetFramebufferParameteriv(int,int,int[],int)>
<android.opengl.GLES31: java.lang.String glGetProgramResourceName(int,int,int)>
<android.opengl.GLES31: void glProgramUniform1uiv(int,int,int,int[],int)>
<android.opengl.GLES31: void glVertexAttribIFormat(int,int,int,int)>
<android.opengl.GLES31: void glProgramUniform1fv(int,int,int,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniform4i(int,int,int,int,int,int)>
<android.opengl.GLES31: void glGetBooleani_v(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glDeleteProgramPipelines(int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glProgramUniformMatrix3x4fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glGetProgramResourceiv(int,int,int,int,java.nio.IntBuffer,int,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES31: void glProgramUniform4iv(int,int,int,int[],int)>
<android.opengl.GLES31: void glProgramUniform2fv(int,int,int,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glGetProgramPipelineiv(int,int,int[],int)>
<android.opengl.GLES31: void glGetMultisamplefv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glGetTexLevelParameterfv(int,int,int,float[],int)>
<android.opengl.GLES31: void glProgramUniform3i(int,int,int,int,int)>
<android.opengl.GLES31: void glProgramUniformMatrix4x3fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniformMatrix4fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glProgramUniform4fv(int,int,int,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniformMatrix2x3fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glProgramUniformMatrix2x4fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniform3f(int,int,float,float,float)>
<android.opengl.GLES31: void glProgramUniformMatrix3x2fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glSampleMaski(int,int)>
<android.opengl.GLES31: void glVertexAttribFormat(int,int,int,boolean,int)>
<android.opengl.GLES31: void glProgramUniformMatrix4x2fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glDeleteProgramPipelines(int,int[],int)>
<android.opengl.GLES31: void glProgramUniform3uiv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glProgramUniform4ui(int,int,int,int,int,int)>
<android.opengl.GLES31: void glGetTexLevelParameteriv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glFramebufferParameteri(int,int,int)>
<android.opengl.GLES31: void glUseProgramStages(int,int,int)>
<android.opengl.GLES31: void glProgramUniformMatrix2x4fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glProgramUniform3uiv(int,int,int,int[],int)>
<android.opengl.GLES31: void glDrawArraysIndirect(int,long)>
<android.opengl.GLES31: void glGetFramebufferParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glProgramUniform1fv(int,int,int,float[],int)>
<android.opengl.GLES31: void glProgramUniform2iv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glProgramUniform4uiv(int,int,int,int[],int)>
<android.opengl.GLES31: void glProgramUniform1iv(int,int,int,int[],int)>
<android.opengl.GLES31: void glProgramUniform2i(int,int,int,int)>
<android.opengl.GLES31: void glBindImageTexture(int,int,int,boolean,int,int,int)>
<android.opengl.GLES31: void glProgramUniformMatrix2fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniform1f(int,int,float)>
<android.opengl.GLES31: java.lang.String glGetProgramPipelineInfoLog(int)>
<android.opengl.GLES31: void glProgramUniform1uiv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glProgramUniform3ui(int,int,int,int,int)>
<android.opengl.GLES31: void glGetMultisamplefv(int,int,float[],int)>
<android.opengl.GLES31: void glProgramUniform3fv(int,int,int,float[],int)>
<android.opengl.GLES31: void glProgramUniform2uiv(int,int,int,int[],int)>
<android.opengl.GLES31: void glProgramUniform1i(int,int,int)>
<android.opengl.GLES31: void glGetProgramPipelineiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glProgramUniformMatrix3x2fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glDrawElementsIndirect(int,int,long)>
<android.opengl.GLES31: void glProgramUniform3iv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glVertexAttribBinding(int,int)>
<android.opengl.GLES31: void glProgramUniform2f(int,int,float,float)>
<android.opengl.GLES31: void glGetBooleani_v(int,int,boolean[],int)>
<android.opengl.GLES31: void glProgramUniformMatrix3fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniformMatrix4x2fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glDispatchCompute(int,int,int)>
<android.opengl.GLES31: void glProgramUniform3fv(int,int,int,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniformMatrix2x3fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glVertexBindingDivisor(int,int)>
<android.opengl.GLES31: void glProgramUniform2fv(int,int,int,float[],int)>
<android.opengl.GLES31: void glProgramUniform3iv(int,int,int,int[],int)>
<android.opengl.GLES31: void glDispatchComputeIndirect(long)>
<android.opengl.GLES31: void glGetProgramResourceiv(int,int,int,int,int[],int,int,int[],int,int[],int)>
<android.opengl.GLES31: void glGetTexLevelParameterfv(int,int,int,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glBindVertexBuffer(int,int,long,int)>
<android.opengl.GLES31: void glBindProgramPipeline(int)>
<android.opengl.GLES31: void glProgramUniform1ui(int,int,int)>
<android.opengl.GLES31: void glGenProgramPipelines(int,java.nio.IntBuffer)>
<android.opengl.GLES31: int glGetProgramResourceLocation(int,int,java.lang.String)>
<android.opengl.GLES31: void glProgramUniform2uiv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glProgramUniform4iv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glMemoryBarrierByRegion(int)>
<android.opengl.GLES31: void glGetProgramInterfaceiv(int,int,int,int[],int)>
<android.opengl.GLES31: void glProgramUniform4fv(int,int,int,float[],int)>
<android.opengl.GLES31: void glProgramUniform4f(int,int,float,float,float,float)>
<android.opengl.GLES31: int glGetProgramResourceIndex(int,int,java.lang.String)>
<android.opengl.GLES31: void glProgramUniformMatrix4fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniformMatrix4x3fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glProgramUniform1iv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glProgramUniformMatrix3x4fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniform2ui(int,int,int,int)>
<android.opengl.GLES31: void glValidateProgramPipeline(int)>
<android.opengl.GLES31: void glGenProgramPipelines(int,int[],int)>
<android.opengl.GLES31: void glMemoryBarrier(int)>
<android.opengl.GLES31: void glProgramUniformMatrix2fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glActiveShaderProgram(int,int)>
<android.opengl.GLES31: int glCreateShaderProgramv(int,java.lang.String[])>
<android.media.JetPlayer: java.lang.Object clone()>
<android.media.JetPlayer: boolean queueJetSegment(int,int,int,int,int,byte)>
<android.media.JetPlayer: boolean setMuteFlags(int,boolean)>
<android.media.JetPlayer: boolean setMuteArray(boolean[],boolean)>
<android.media.JetPlayer: boolean pause()>
<android.media.JetPlayer: void setEventListener(android.media.JetPlayer.OnJetEventListener,android.os.Handler)>
<android.media.JetPlayer: int getMaxTracks()>
<android.media.JetPlayer: boolean queueJetSegmentMuteArray(int,int,int,int,boolean[],byte)>
<android.media.JetPlayer: boolean triggerClip(int)>
<android.media.JetPlayer: void setEventListener(android.media.JetPlayer.OnJetEventListener)>
<android.media.JetPlayer: boolean setMuteFlag(int,boolean,boolean)>
<android.media.JetPlayer: boolean play()>
<android.media.JetPlayer: boolean closeJetFile()>
<android.media.JetPlayer: android.media.JetPlayer getJetPlayer()>
<android.media.JetPlayer: boolean loadJetFile(android.content.res.AssetFileDescriptor)>
<android.media.JetPlayer: boolean clearQueue()>
<android.media.JetPlayer: void finalize()>
<android.media.JetPlayer: boolean loadJetFile(java.lang.String)>
<android.media.JetPlayer: void release()>
<java.io.StringReader: void close()>
<java.io.StringReader: void <init>(String)>
<java.io.StringReader: int read(char[],int,int)>
<android.app.Presentation: void onDisplayChanged()>
<android.app.Presentation: android.view.Display getDisplay()>
<android.app.Presentation: android.content.res.Resources getResources()>
<android.app.Presentation: void <init>(android.content.Context,android.view.Display,int)>
<android.app.Presentation: void onDisplayRemoved()>
<android.app.Presentation: void <init>(android.content.Context,android.view.Display)>
<java.text.Format.Field: void <init>(String)>
<android.widget.LinearLayout.LayoutParams: void <init>(int,int)>
<android.widget.LinearLayout.LayoutParams: void <init>(android.view.ViewGroup.MarginLayoutParams)>
<android.widget.LinearLayout.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.LinearLayout.LayoutParams: void <init>(int,int,float)>
<android.widget.LinearLayout.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.widget.LinearLayout.LayoutParams: java.lang.String debug(java.lang.String)>
<android.widget.LinearLayout.LayoutParams: void <init>(android.widget.LinearLayout.LayoutParams)>
<android.os.FileObserver: void <init>(String)>
<android.os.FileObserver: void stopWatching()>
<android.os.FileObserver: void <init>(String,int)>
<android.os.FileObserver: void finalize()>
<android.os.FileObserver: void <init>(java.util.List,int)>
<android.os.FileObserver: void <init>(java.io.File)>
<android.os.FileObserver: void <init>(java.util.List)>
<android.os.FileObserver: void onEvent(int,java.lang.String)>
<android.os.FileObserver: void startWatching()>
<android.os.FileObserver: void <init>(java.io.File,int)>
<android.icu.text.CollationKey: boolean equals(android.icu.text.CollationKey)>
<android.icu.text.CollationKey: void <init>(String,byte[])>
<android.icu.text.CollationKey: android.icu.text.CollationKey getBound(int,int)>
<android.icu.text.CollationKey: java.lang.String getSourceString()>
<android.icu.text.CollationKey: byte[] toByteArray()>
<android.icu.text.CollationKey: android.icu.text.CollationKey merge(android.icu.text.CollationKey)>
<android.icu.text.CollationKey: int compareTo(android.icu.text.CollationKey)>
<android.view.animation.ScaleAnimation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.ScaleAnimation: void <init>(float,float,float,float,float,float)>
<android.view.animation.ScaleAnimation: void <init>(float,float,float,float,int,float,int,float)>
<android.view.animation.ScaleAnimation: void <init>(float,float,float,float)>
<android.security.KeyChain: android.content.Intent createInstallIntent()>
<android.security.KeyChain: void choosePrivateKeyAlias(android.app.Activity,android.security.KeyChainAliasCallback,java.lang.String[],java.security.Principal[],java.lang.String,int,java.lang.String)>
<android.security.KeyChain: java.security.cert.X509Certificate[] getCertificateChain(android.content.Context,java.lang.String)>
<android.security.KeyChain: void choosePrivateKeyAlias(android.app.Activity,android.security.KeyChainAliasCallback,java.lang.String[],java.security.Principal[],android.net.Uri,java.lang.String)>
<android.security.KeyChain: void <init>()>
<android.security.KeyChain: java.security.PrivateKey getPrivateKey(android.content.Context,java.lang.String)>
<android.security.KeyChain: boolean isBoundKeyAlgorithm(java.lang.String)>
<android.security.KeyChain: boolean isKeyAlgorithmSupported(java.lang.String)>
<java.util.concurrent.RecursiveTask: V compute()>
<java.util.concurrent.RecursiveTask: V getRawResult()>
<java.util.concurrent.RecursiveTask: void <init>()>
<java.util.concurrent.RecursiveTask: void setRawResult(V)>
<java.util.concurrent.RecursiveTask: boolean exec()>
<java.util.PriorityQueue: int size()>
<java.util.PriorityQueue: boolean offer(E)>
<java.util.PriorityQueue: java.util.Comparator comparator()>
<java.util.PriorityQueue: java.util.Spliterator spliterator()>
<java.util.PriorityQueue: void <init>(java.util.Comparator)>
<java.util.PriorityQueue: void <init>(java.util.Collection)>
<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>
<java.util.PriorityQueue: void <init>(java.util.SortedSet)>
<java.util.PriorityQueue: E poll()>
<java.util.PriorityQueue: java.util.Iterator iterator()>
<java.util.PriorityQueue: void <init>()>
<java.util.PriorityQueue: E peek()>
<java.util.PriorityQueue: void <init>(java.util.PriorityQueue)>
<java.util.PriorityQueue: void <init>(int)>
<android.icu.text.Normalizer2: boolean hasBoundaryBefore(int)>
<android.icu.text.Normalizer2: boolean isNormalized(CharSequence)>
<android.icu.text.Normalizer2: Appendable normalize(CharSequence,Appendable)>
<android.icu.text.Normalizer2: android.icu.text.Normalizer2 getNFDInstance()>
<android.icu.text.Normalizer2: java.lang.String getRawDecomposition(int)>
<android.icu.text.Normalizer2: int spanQuickCheckYes(CharSequence)>
<android.icu.text.Normalizer2: android.icu.text.Normalizer.QuickCheckResult quickCheck(CharSequence)>
<android.icu.text.Normalizer2: int getCombiningClass(int)>
<android.icu.text.Normalizer2: android.icu.text.Normalizer2 getInstance(java.io.InputStream,java.lang.String,android.icu.text.Normalizer2.Mode)>
<android.icu.text.Normalizer2: android.icu.text.Normalizer2 getNFCInstance()>
<android.icu.text.Normalizer2: android.icu.text.Normalizer2 getNFKDInstance()>
<android.icu.text.Normalizer2: java.lang.StringBuilder normalizeSecondAndAppend(java.lang.StringBuilder,CharSequence)>
<android.icu.text.Normalizer2: java.lang.String getDecomposition(int)>
<android.icu.text.Normalizer2: java.lang.StringBuilder append(java.lang.StringBuilder,CharSequence)>
<android.icu.text.Normalizer2: android.icu.text.Normalizer2 getNFKCCasefoldInstance()>
<android.icu.text.Normalizer2: boolean hasBoundaryAfter(int)>
<android.icu.text.Normalizer2: int composePair(int,int)>
<android.icu.text.Normalizer2: android.icu.text.Normalizer2 getNFKCInstance()>
<android.icu.text.Normalizer2: boolean isInert(int)>
<android.icu.text.Normalizer2: java.lang.String normalize(CharSequence)>
<android.icu.text.Normalizer2: java.lang.StringBuilder normalize(CharSequence,java.lang.StringBuilder)>
<android.system.ErrnoException: void <init>(String,int,Throwable)>
<android.system.ErrnoException: void <init>(String,int)>
<android.widget.ZoomButtonsController.OnZoomListener: void onVisibilityChanged(boolean)>
<android.widget.ZoomButtonsController.OnZoomListener: void onZoom(boolean)>
<java.util.concurrent.PriorityBlockingQueue: void <init>()>
<java.util.concurrent.PriorityBlockingQueue: void put(E)>
<java.util.concurrent.PriorityBlockingQueue: void <init>(int,java.util.Comparator)>
<java.util.concurrent.PriorityBlockingQueue: int drainTo(java.util.Collection)>
<java.util.concurrent.PriorityBlockingQueue: E poll()>
<java.util.concurrent.PriorityBlockingQueue: java.util.Comparator comparator()>
<java.util.concurrent.PriorityBlockingQueue: boolean offer(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.PriorityBlockingQueue: void <init>(java.util.Collection)>
<java.util.concurrent.PriorityBlockingQueue: E peek()>
<java.util.concurrent.PriorityBlockingQueue: void <init>(int)>
<java.util.concurrent.PriorityBlockingQueue: boolean offer(E)>
<java.util.concurrent.PriorityBlockingQueue: int drainTo(java.util.Collection,int)>
<java.util.concurrent.PriorityBlockingQueue: java.util.Iterator iterator()>
<java.util.concurrent.PriorityBlockingQueue: E take()>
<java.util.concurrent.PriorityBlockingQueue: E poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.PriorityBlockingQueue: int size()>
<java.util.concurrent.PriorityBlockingQueue: int remainingCapacity()>
<android.location.BatchedLocationCallback: void <init>()>
<android.location.BatchedLocationCallback: void onLocationBatch(java.util.List)>
<android.util.AndroidRuntimeException: void <init>(String,Throwable)>
<android.util.AndroidRuntimeException: void <init>()>
<android.util.AndroidRuntimeException: void <init>(Exception)>
<android.util.AndroidRuntimeException: void <init>(String)>
<android.os.PowerManager.WakeLock: void acquire()>
<android.os.PowerManager.WakeLock: void acquire(long)>
<android.os.PowerManager.WakeLock: void setReferenceCounted(boolean)>
<android.os.PowerManager.WakeLock: void release()>
<android.os.PowerManager.WakeLock: void setWorkSource(android.os.WorkSource)>
<android.os.PowerManager.WakeLock: void release(int)>
<android.os.PowerManager.WakeLock: boolean isHeld()>
<java.util.concurrent.atomic.AtomicInteger: void <init>()>
<java.util.concurrent.atomic.AtomicInteger: double doubleValue()>
<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
<java.util.concurrent.atomic.AtomicInteger: int get()>
<java.util.concurrent.atomic.AtomicInteger: int getAndAccumulate(int,java.util.function.IntBinaryOperator)>
<java.util.concurrent.atomic.AtomicInteger: int getAndUpdate(java.util.function.IntUnaryOperator)>
<java.util.concurrent.atomic.AtomicInteger: int intValue()>
<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>
<java.util.concurrent.atomic.AtomicInteger: long longValue()>
<java.util.concurrent.atomic.AtomicInteger: boolean weakCompareAndSet(int,int)>
<java.util.concurrent.atomic.AtomicInteger: int updateAndGet(java.util.function.IntUnaryOperator)>
<java.util.concurrent.atomic.AtomicInteger: int getAndAdd(int)>
<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>
<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>
<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>
<java.util.concurrent.atomic.AtomicInteger: float floatValue()>
<java.util.concurrent.atomic.AtomicInteger: void set(int)>
<java.util.concurrent.atomic.AtomicInteger: int accumulateAndGet(int,java.util.function.IntBinaryOperator)>
<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()>
<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>
<java.util.concurrent.atomic.AtomicInteger: void lazySet(int)>
<javax.net.ssl.SNIMatcher: void <init>(int)>
<javax.net.ssl.SNIMatcher: boolean matches(javax.net.ssl.SNIServerName)>
<javax.net.ssl.SNIMatcher: int getType()>
<android.drm.DrmManagerClient.OnEventListener: void onEvent(android.drm.DrmManagerClient,android.drm.DrmEvent)>
<android.os.ParcelFileDescriptor.FileDescriptorDetachedException: void <init>()>
<java.lang.SecurityException: void <init>(String)>
<java.lang.SecurityException: void <init>(Throwable)>
<java.lang.SecurityException: void <init>()>
<java.lang.SecurityException: void <init>(String,Throwable)>
<android.icu.text.PluralFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>
<android.icu.text.PluralFormat: boolean equals(android.icu.text.PluralFormat)>
<android.icu.text.PluralFormat: java.lang.String toPattern()>
<android.icu.text.PluralFormat: void <init>(android.icu.util.ULocale,android.icu.text.PluralRules,String)>
<android.icu.text.PluralFormat: void <init>(android.icu.util.ULocale,android.icu.text.PluralRules)>
<android.icu.text.PluralFormat: void <init>(android.icu.text.PluralRules,String)>
<android.icu.text.PluralFormat: void applyPattern(java.lang.String)>
<android.icu.text.PluralFormat: java.lang.String format(double)>
<android.icu.text.PluralFormat: void <init>(String)>
<android.icu.text.PluralFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>
<android.icu.text.PluralFormat: void <init>(android.icu.util.ULocale,android.icu.text.PluralRules.PluralType)>
<android.icu.text.PluralFormat: void <init>(java.util.Locale)>
<android.icu.text.PluralFormat: void <init>(android.icu.text.PluralRules)>
<android.icu.text.PluralFormat: void <init>(java.util.Locale,android.icu.text.PluralRules)>
<android.icu.text.PluralFormat: void <init>(java.util.Locale,android.icu.text.PluralRules.PluralType)>
<android.icu.text.PluralFormat: void <init>(android.icu.util.ULocale,String)>
<android.icu.text.PluralFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.PluralFormat: void <init>(android.icu.util.ULocale)>
<android.icu.text.PluralFormat: void <init>()>
<android.icu.text.PluralFormat: void <init>(android.icu.util.ULocale,android.icu.text.PluralRules.PluralType,String)>
<android.icu.text.PluralFormat: void setNumberFormat(android.icu.text.NumberFormat)>
<android.net.wifi.p2p.WifiP2pManager.NetworkInfoListener: void onNetworkInfoAvailable(android.net.NetworkInfo)>
<android.widget.GridLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.GridLayout: void <init>(android.content.Context)>
<android.widget.GridLayout: android.widget.GridLayout.Spec spec(int,int,android.widget.GridLayout.Alignment,float)>
<android.widget.GridLayout: android.widget.GridLayout.Spec spec(int,float)>
<android.widget.GridLayout: android.widget.GridLayout.Spec spec(int,android.widget.GridLayout.Alignment)>
<android.widget.GridLayout: void setColumnCount(int)>
<android.widget.GridLayout: void setOrientation(int)>
<android.widget.GridLayout: int getOrientation()>
<android.widget.GridLayout: int getColumnCount()>
<android.widget.GridLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.GridLayout: android.widget.GridLayout.Spec spec(int,android.widget.GridLayout.Alignment,float)>
<android.widget.GridLayout: boolean isColumnOrderPreserved()>
<android.widget.GridLayout: android.widget.GridLayout.LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.GridLayout: boolean getUseDefaultMargins()>
<android.widget.GridLayout: android.widget.GridLayout.Spec spec(int,int,float)>
<android.widget.GridLayout: android.widget.GridLayout.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams)>
<android.widget.GridLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.GridLayout: boolean isRowOrderPreserved()>
<android.widget.GridLayout: void setAlignmentMode(int)>
<android.widget.GridLayout: android.widget.GridLayout.Spec spec(int,int)>
<android.widget.GridLayout: void setColumnOrderPreserved(boolean)>
<android.widget.GridLayout: void setUseDefaultMargins(boolean)>
<android.widget.GridLayout: android.widget.GridLayout.LayoutParams generateDefaultLayoutParams()>
<android.widget.GridLayout: int getRowCount()>
<android.widget.GridLayout: android.widget.GridLayout.Spec spec(int,int,android.widget.GridLayout.Alignment)>
<android.widget.GridLayout: void setRowOrderPreserved(boolean)>
<android.widget.GridLayout: android.widget.GridLayout.Spec spec(int)>
<android.widget.GridLayout: void setRowCount(int)>
<android.widget.GridLayout: int getAlignmentMode()>
<android.telecom.RemoteConference.Callback: void onConnectionRemoved(android.telecom.RemoteConference,android.telecom.RemoteConnection)>
<android.telecom.RemoteConference.Callback: void onDisconnected(android.telecom.RemoteConference,android.telecom.DisconnectCause)>
<android.telecom.RemoteConference.Callback: void <init>()>
<android.telecom.RemoteConference.Callback: void onDestroyed(android.telecom.RemoteConference)>
<android.telecom.RemoteConference.Callback: void onConnectionAdded(android.telecom.RemoteConference,android.telecom.RemoteConnection)>
<android.telecom.RemoteConference.Callback: void onConnectionCapabilitiesChanged(android.telecom.RemoteConference,int)>
<android.telecom.RemoteConference.Callback: void onConferenceableConnectionsChanged(android.telecom.RemoteConference,java.util.List)>
<android.telecom.RemoteConference.Callback: void onStateChanged(android.telecom.RemoteConference,int,int)>
<android.telecom.RemoteConference.Callback: void onConnectionPropertiesChanged(android.telecom.RemoteConference,int)>
<android.telecom.RemoteConference.Callback: void onExtrasChanged(android.telecom.RemoteConference,android.os.Bundle)>
<android.webkit.WebViewProviderInfo: void <init>(String,String,boolean,boolean,String[])>
<android.webkit.WebViewProviderInfo: int describeContents()>
<android.webkit.WebViewProviderInfo: void writeToParcel(android.os.Parcel,int)>
<android.os.AsyncTask: android.os.AsyncTask execute(Params...)>
<android.os.AsyncTask: void onCancelled()>
<android.os.AsyncTask: boolean cancel(boolean)>
<android.os.AsyncTask: Result get()>
<android.os.AsyncTask: void onPostExecute(Result)>
<android.os.AsyncTask: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,Params...)>
<android.os.AsyncTask: void onPreExecute()>
<android.os.AsyncTask: Result get(long,java.util.concurrent.TimeUnit)>
<android.os.AsyncTask: void execute(Runnable)>
<android.os.AsyncTask: void publishProgress(Progress...)>
<android.os.AsyncTask: void <init>()>
<android.os.AsyncTask: void onProgressUpdate(Progress...)>
<android.os.AsyncTask: android.os.AsyncTask.Status getStatus()>
<android.os.AsyncTask: Result doInBackground(Params...)>
<android.os.AsyncTask: boolean isCancelled()>
<android.os.AsyncTask: void onCancelled(Result)>
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighResolutionOutputSizes(int)>
<android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(java.lang.Class)>
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Range[] getHighSpeedVideoFpsRangesFor(android.util.Size)>
<android.hardware.camera2.params.StreamConfigurationMap: long getOutputMinFrameDuration(java.lang.Class,android.util.Size)>
<android.hardware.camera2.params.StreamConfigurationMap: int[] getValidOutputFormatsForInput(int)>
<android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(android.view.Surface)>
<android.hardware.camera2.params.StreamConfigurationMap: long getOutputStallDuration(int,android.util.Size)>
<android.hardware.camera2.params.StreamConfigurationMap: int[] getOutputFormats()>
<android.hardware.camera2.params.StreamConfigurationMap: long getOutputStallDuration(java.lang.Class,android.util.Size)>
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighSpeedVideoSizesFor(android.util.Range)>
<android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(int)>
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Range[] getHighSpeedVideoFpsRanges()>
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getInputSizes(int)>
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(java.lang.Class)>
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighSpeedVideoSizes()>
<android.hardware.camera2.params.StreamConfigurationMap: int[] getInputFormats()>
<android.hardware.camera2.params.StreamConfigurationMap: long getOutputMinFrameDuration(int,android.util.Size)>
<android.app.ApplicationErrorReport.AnrInfo: void dump(android.util.Printer,java.lang.String)>
<android.app.ApplicationErrorReport.AnrInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ApplicationErrorReport.AnrInfo: void <init>()>
<android.app.ApplicationErrorReport.AnrInfo: void <init>(android.os.Parcel)>
<android.graphics.Paint.FontMetricsInt: void <init>()>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle addAccountFromCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle startAddAccountSession(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>
<android.accounts.AbstractAccountAuthenticator: android.os.IBinder getIBinder()>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle getAccountCredentialsForCloning(android.accounts.AccountAuthenticatorResponse,android.accounts.Account)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle hasFeatures(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle startUpdateCredentialsSession(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle isCredentialsUpdateSuggested(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle updateCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle editProperties(android.accounts.AccountAuthenticatorResponse,java.lang.String)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle getAccountRemovalAllowed(android.accounts.AccountAuthenticatorResponse,android.accounts.Account)>
<android.accounts.AbstractAccountAuthenticator: java.lang.String getAuthTokenLabel(java.lang.String)>
<android.accounts.AbstractAccountAuthenticator: void <init>(android.content.Context)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle finishSession(android.accounts.AccountAuthenticatorResponse,java.lang.String,android.os.Bundle)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle confirmCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder allowAlarms(boolean)>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder disallowAllSounds()>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder allowCalls(int)>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder showInAmbientDisplay(boolean)>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder allowRepeatCallers(boolean)>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy build()>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder showInNotificationList(boolean)>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder showLights(boolean)>
<android.service.notification.ZenPolicy.Builder: void <init>()>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder showFullScreenIntent(boolean)>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder showStatusBarIcons(boolean)>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder showAllVisualEffects()>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder showPeeking(boolean)>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder allowAllSounds()>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder showBadges(boolean)>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder allowReminders(boolean)>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder allowSystem(boolean)>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder allowEvents(boolean)>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder allowMessages(int)>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder hideAllVisualEffects()>
<android.service.notification.ZenPolicy.Builder: android.service.notification.ZenPolicy.Builder allowMedia(boolean)>
<java.nio.file.FileSystemAlreadyExistsException: void <init>()>
<java.nio.file.FileSystemAlreadyExistsException: void <init>(String)>
<android.widget.BaseAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.BaseAdapter: boolean hasStableIds()>
<android.widget.BaseAdapter: boolean areAllItemsEnabled()>
<android.widget.BaseAdapter: void setAutofillOptions(java.lang.CharSequence...)>
<android.widget.BaseAdapter: void notifyDataSetInvalidated()>
<android.widget.BaseAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<android.widget.BaseAdapter: void notifyDataSetChanged()>
<android.widget.BaseAdapter: boolean isEmpty()>
<android.widget.BaseAdapter: void <init>()>
<android.widget.BaseAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.widget.BaseAdapter: int getItemViewType(int)>
<android.widget.BaseAdapter: int getViewTypeCount()>
<android.widget.BaseAdapter: boolean isEnabled(int)>
<android.hardware.camera2.CaptureRequest.Builder: android.hardware.camera2.CaptureRequest.Builder setPhysicalCameraKey(android.hardware.camera2.CaptureRequest.Key,T,java.lang.String)>
<android.hardware.camera2.CaptureRequest.Builder: void setTag(java.lang.Object)>
<android.hardware.camera2.CaptureRequest.Builder: T get(android.hardware.camera2.CaptureRequest.Key)>
<android.hardware.camera2.CaptureRequest.Builder: android.hardware.camera2.CaptureRequest build()>
<android.hardware.camera2.CaptureRequest.Builder: void set(android.hardware.camera2.CaptureRequest.Key,T)>
<android.hardware.camera2.CaptureRequest.Builder: void addTarget(android.view.Surface)>
<android.hardware.camera2.CaptureRequest.Builder: T getPhysicalCameraKey(android.hardware.camera2.CaptureRequest.Key,java.lang.String)>
<android.hardware.camera2.CaptureRequest.Builder: void removeTarget(android.view.Surface)>
<android.nfc.cardemulation.NfcFCardEmulation: java.lang.String getNfcid2ForService(android.content.ComponentName)>
<android.nfc.cardemulation.NfcFCardEmulation: java.lang.String getSystemCodeForService(android.content.ComponentName)>
<android.nfc.cardemulation.NfcFCardEmulation: android.nfc.cardemulation.NfcFCardEmulation getInstance(android.nfc.NfcAdapter)>
<android.nfc.cardemulation.NfcFCardEmulation: boolean registerSystemCodeForService(android.content.ComponentName,java.lang.String)>
<android.nfc.cardemulation.NfcFCardEmulation: boolean setNfcid2ForService(android.content.ComponentName,java.lang.String)>
<android.nfc.cardemulation.NfcFCardEmulation: boolean disableService(android.app.Activity)>
<android.nfc.cardemulation.NfcFCardEmulation: boolean enableService(android.app.Activity,android.content.ComponentName)>
<android.nfc.cardemulation.NfcFCardEmulation: boolean unregisterSystemCodeForService(android.content.ComponentName)>
<org.w3c.dom.ls.LSOutput: void setByteStream(java.io.OutputStream)>
<org.w3c.dom.ls.LSOutput: void setCharacterStream(java.io.Writer)>
<org.w3c.dom.ls.LSOutput: java.io.Writer getCharacterStream()>
<org.w3c.dom.ls.LSOutput: void setEncoding(java.lang.String)>
<org.w3c.dom.ls.LSOutput: java.lang.String getEncoding()>
<org.w3c.dom.ls.LSOutput: void setSystemId(java.lang.String)>
<org.w3c.dom.ls.LSOutput: java.io.OutputStream getByteStream()>
<org.w3c.dom.ls.LSOutput: java.lang.String getSystemId()>
<android.media.tv.TvInputInfo.TvInputSettings: void putCustomLabels(android.content.Context,java.util.Map,int)>
<android.media.tv.TvInputInfo.TvInputSettings: void putHiddenTvInputs(android.content.Context,java.util.Set,int)>
<android.media.tv.TvInputInfo.TvInputSettings: java.util.Map getCustomLabels(android.content.Context,int)>
<android.media.tv.TvInputInfo.TvInputSettings: java.util.Set getHiddenTvInputIds(android.content.Context,int)>
<android.widget.TextView.OnEditorActionListener: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)>
<android.media.MediaMuxer: void setOrientationHint(int)>
<android.media.MediaMuxer: void setLocation(float,float)>
<android.media.MediaMuxer: void release()>
<android.media.MediaMuxer: void <init>(java.io.FileDescriptor,int)>
<android.media.MediaMuxer: int addTrack(android.media.MediaFormat)>
<android.media.MediaMuxer: void start()>
<android.media.MediaMuxer: void stop()>
<android.media.MediaMuxer: void <init>(String,int)>
<android.media.MediaMuxer: void writeSampleData(int,java.nio.ByteBuffer,android.media.MediaCodec.BufferInfo)>
<java.util.Map.Entry: K getKey()>
<java.util.Map.Entry: java.util.Comparator comparingByKey()>
<java.util.Map.Entry: java.util.Comparator comparingByValue(java.util.Comparator)>
<java.util.Map.Entry: V getValue()>
<java.util.Map.Entry: int hashCode()>
<java.util.Map.Entry: java.util.Comparator comparingByKey(java.util.Comparator)>
<java.util.Map.Entry: boolean equals(java.lang.Object)>
<java.util.Map.Entry: java.util.Comparator comparingByValue()>
<java.util.Map.Entry: V setValue(V)>
<android.bluetooth.BluetoothHearingAid: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHearingAid: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothHearingAid: java.util.List getConnectedDevices()>
<android.location.Location: void set(android.location.Location)>
<android.location.Location: void setProvider(java.lang.String)>
<android.location.Location: void setSpeed(float)>
<android.location.Location: void writeToParcel(android.os.Parcel,int)>
<android.location.Location: boolean hasVerticalAccuracy()>
<android.location.Location: double getLatitude()>
<android.location.Location: boolean hasSpeed()>
<android.location.Location: long getElapsedRealtimeNanos()>
<android.location.Location: java.lang.String getProvider()>
<android.location.Location: float getSpeed()>
<android.location.Location: void removeAccuracy()>
<android.location.Location: float distanceTo(android.location.Location)>
<android.location.Location: float getBearing()>
<android.location.Location: double getElapsedRealtimeUncertaintyNanos()>
<android.location.Location: boolean hasElapsedRealtimeUncertaintyNanos()>
<android.location.Location: boolean hasAccuracy()>
<android.location.Location: void setElapsedRealtimeNanos(long)>
<android.location.Location: float getAccuracy()>
<android.location.Location: void dump(android.util.Printer,java.lang.String)>
<android.location.Location: void setVerticalAccuracyMeters(float)>
<android.location.Location: float getBearingAccuracyDegrees()>
<android.location.Location: void makeComplete()>
<android.location.Location: double getAltitude()>
<android.location.Location: double convert(java.lang.String)>
<android.location.Location: void setLongitude(double)>
<android.location.Location: void setElapsedRealtimeUncertaintyNanos(double)>
<android.location.Location: android.os.Bundle getExtras()>
<android.location.Location: boolean hasSpeedAccuracy()>
<android.location.Location: void setLatitude(double)>
<android.location.Location: boolean isFromMockProvider()>
<android.location.Location: void <init>(android.location.Location)>
<android.location.Location: long getTime()>
<android.location.Location: boolean hasBearingAccuracy()>
<android.location.Location: void setAltitude(double)>
<android.location.Location: boolean hasBearing()>
<android.location.Location: void distanceBetween(double,double,double,double,float[])>
<android.location.Location: void removeSpeed()>
<android.location.Location: void removeAltitude()>
<android.location.Location: void setIsFromMockProvider(boolean)>
<android.location.Location: int describeContents()>
<android.location.Location: void setBearing(float)>
<android.location.Location: boolean hasAltitude()>
<android.location.Location: float bearingTo(android.location.Location)>
<android.location.Location: java.lang.String convert(double,int)>
<android.location.Location: boolean isComplete()>
<android.location.Location: void reset()>
<android.location.Location: void setAccuracy(float)>
<android.location.Location: void setTime(long)>
<android.location.Location: void <init>(String)>
<android.location.Location: float getSpeedAccuracyMetersPerSecond()>
<android.location.Location: double getLongitude()>
<android.location.Location: void setBearingAccuracyDegrees(float)>
<android.location.Location: float getVerticalAccuracyMeters()>
<android.location.Location: void removeBearing()>
<android.location.Location: void setSpeedAccuracyMetersPerSecond(float)>
<android.location.Location: void setExtras(android.os.Bundle)>
<javax.crypto.spec.GCMParameterSpec: int getTLen()>
<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[],int,int)>
<javax.crypto.spec.GCMParameterSpec: byte[] getIV()>
<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>
<java.util.zip.ZipInputStream: void <init>(java.io.InputStream,java.nio.charset.Charset)>
<java.util.zip.ZipInputStream: void closeEntry()>
<java.util.zip.ZipInputStream: java.util.zip.ZipEntry createZipEntry(java.lang.String)>
<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>
<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>
<android.system.StructPollfd: void <init>()>
<android.view.inputmethod.InputMethod: void createSession(android.view.inputmethod.InputMethod.SessionCallback)>
<android.view.inputmethod.InputMethod: void restartInput(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)>
<android.view.inputmethod.InputMethod: void hideSoftInput(int,android.os.ResultReceiver)>
<android.view.inputmethod.InputMethod: void startInput(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)>
<android.view.inputmethod.InputMethod: void revokeSession(android.view.inputmethod.InputMethodSession)>
<android.view.inputmethod.InputMethod: void attachToken(android.os.IBinder)>
<android.view.inputmethod.InputMethod: void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>
<android.view.inputmethod.InputMethod: void showSoftInput(int,android.os.ResultReceiver)>
<android.view.inputmethod.InputMethod: void unbindInput()>
<android.view.inputmethod.InputMethod: void setSessionEnabled(android.view.inputmethod.InputMethodSession,boolean)>
<android.view.inputmethod.InputMethod: void bindInput(android.view.inputmethod.InputBinding)>
<android.content.pm.LauncherApps.Callback: void onPackagesUnsuspended(java.lang.String[],android.os.UserHandle)>
<android.content.pm.LauncherApps.Callback: void onPackageRemoved(java.lang.String,android.os.UserHandle)>
<android.content.pm.LauncherApps.Callback: void onPackagesSuspended(java.lang.String[],android.os.UserHandle,android.os.Bundle)>
<android.content.pm.LauncherApps.Callback: void <init>()>
<android.content.pm.LauncherApps.Callback: void onPackagesUnavailable(java.lang.String[],android.os.UserHandle,boolean)>
<android.content.pm.LauncherApps.Callback: void onPackageAdded(java.lang.String,android.os.UserHandle)>
<android.content.pm.LauncherApps.Callback: void onPackageChanged(java.lang.String,android.os.UserHandle)>
<android.content.pm.LauncherApps.Callback: void onPackagesSuspended(java.lang.String[],android.os.UserHandle)>
<android.content.pm.LauncherApps.Callback: void onShortcutsChanged(java.lang.String,java.util.List,android.os.UserHandle)>
<android.content.pm.LauncherApps.Callback: void onPackagesAvailable(java.lang.String[],android.os.UserHandle,boolean)>
<java.time.temporal.TemporalUnit: R addTo(R,long)>
<java.time.temporal.TemporalUnit: boolean isSupportedBy(java.time.temporal.Temporal)>
<java.time.temporal.TemporalUnit: long between(java.time.temporal.Temporal,java.time.temporal.Temporal)>
<java.time.temporal.TemporalUnit: java.lang.String toString()>
<java.time.temporal.TemporalUnit: java.time.Duration getDuration()>
<java.time.temporal.TemporalUnit: boolean isDurationEstimated()>
<java.time.temporal.TemporalUnit: boolean isTimeBased()>
<java.time.temporal.TemporalUnit: boolean isDateBased()>
<android.os.Binder: void <init>(String)>
<android.os.Binder: void restoreCallingWorkSource(long)>
<android.os.Binder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])>
<android.os.Binder: void setProxyTransactListener(android.os.Binder.ProxyTransactListener)>
<android.os.Binder: long clearCallingIdentity()>
<android.os.Binder: boolean unlinkToDeath(android.os.IBinder.DeathRecipient,int)>
<android.os.Binder: int getCallingUidOrThrow()>
<android.os.Binder: boolean pingBinder()>
<android.os.Binder: void <init>()>
<android.os.Binder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>
<android.os.Binder: int getCallingUid()>
<android.os.Binder: void restoreCallingIdentity(long)>
<android.os.Binder: android.os.UserHandle getCallingUserHandle()>
<android.os.Binder: void linkToDeath(android.os.IBinder.DeathRecipient,int)>
<android.os.Binder: void flushPendingCommands()>
<android.os.Binder: long setCallingWorkSourceUid(int)>
<android.os.Binder: int getCallingPid()>
<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])>
<android.os.Binder: void joinThreadPool()>
<android.os.Binder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.os.Binder: android.os.IInterface queryLocalInterface(java.lang.String)>
<android.os.Binder: void attachInterface(android.os.IInterface,java.lang.String)>
<android.os.Binder: int getCallingWorkSourceUid()>
<android.os.Binder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.os.Binder: boolean isBinderAlive()>
<android.os.Binder: long clearCallingWorkSource()>
<android.os.Binder: java.lang.String getInterfaceDescriptor()>
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setServiceSpecificInfo(byte[])>
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setTtlSec(int)>
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig build()>
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setMatchFilter(java.util.List)>
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setTerminateNotificationEnabled(boolean)>
<android.net.wifi.aware.PublishConfig.Builder: void <init>()>
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setRangingEnabled(boolean)>
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setPublishType(int)>
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setServiceName(java.lang.String)>
<android.service.carrier.ApnService: void <init>()>
<android.service.carrier.ApnService: android.os.IBinder onBind(android.content.Intent)>
<android.service.carrier.ApnService: java.util.List onRestoreApns(int)>
<android.widget.Toolbar: int getContentInsetStartWithNavigation()>
<android.widget.Toolbar: void dismissPopupMenus()>
<android.widget.Toolbar: int getContentInsetEnd()>
<android.widget.Toolbar: void setPopupTheme(@StyleResint)>
<android.widget.Toolbar: int getCurrentContentInsetLeft()>
<android.widget.Toolbar: CharSequence getNavigationContentDescription()>
<android.widget.Toolbar: boolean showOverflowMenu()>
<android.widget.Toolbar: int getCurrentContentInsetRight()>
<android.widget.Toolbar: void setOverflowIcon(android.graphics.drawable.Drawable)>
<android.widget.Toolbar: void setSubtitle(@StringResint)>
<android.widget.Toolbar: int getContentInsetRight()>
<android.widget.Toolbar: void <init>(android.content.Context)>
<android.widget.Toolbar: android.widget.Toolbar.LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Toolbar: void setSubtitleTextAppearance(android.content.Context,@StyleResint)>
<android.widget.Toolbar: int getTitleMarginStart()>
<android.widget.Toolbar: void setLogo(@DrawableResint)>
<android.widget.Toolbar: android.view.Menu getMenu()>
<android.widget.Toolbar: void setTitle(CharSequence)>
<android.widget.Toolbar: void setCollapseIcon(@DrawableResint)>
<android.widget.Toolbar: void setContentInsetsAbsolute(int,int)>
<android.widget.Toolbar: int getCurrentContentInsetStart()>
<android.widget.Toolbar: void setTitleTextAppearance(android.content.Context,@StyleResint)>
<android.widget.Toolbar: android.graphics.drawable.Drawable getLogo()>
<android.widget.Toolbar: void setSubtitleTextColor(@ColorIntint)>
<android.widget.Toolbar: int getContentInsetLeft()>
<android.widget.Toolbar: CharSequence getTitle()>
<android.widget.Toolbar: void setTitleMarginTop(int)>
<android.widget.Toolbar: void setContentInsetStartWithNavigation(int)>
<android.widget.Toolbar: int getTitleMarginEnd()>
<android.widget.Toolbar: int getContentInsetStart()>
<android.widget.Toolbar: void setCollapseIcon(android.graphics.drawable.Drawable)>
<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.Toolbar: void setTitleTextColor(@ColorIntint)>
<android.widget.Toolbar: void setNavigationIcon(@DrawableResint)>
<android.widget.Toolbar: void setLogoDescription(@StringResint)>
<android.widget.Toolbar: void setNavigationContentDescription(CharSequence)>
<android.widget.Toolbar: android.view.View getNavigationView()>
<android.widget.Toolbar: boolean isOverflowMenuShowing()>
<android.widget.Toolbar: CharSequence getCollapseContentDescription()>
<android.widget.Toolbar: android.widget.Toolbar.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams)>
<android.widget.Toolbar: int getTitleMarginTop()>
<android.widget.Toolbar: void setLogoDescription(CharSequence)>
<android.widget.Toolbar: void collapseActionView()>
<android.widget.Toolbar: void setCollapseContentDescription(CharSequence)>
<android.widget.Toolbar: void setTitleMargin(int,int,int,int)>
<android.widget.Toolbar: int getContentInsetEndWithActions()>
<android.widget.Toolbar: void setCollapseContentDescription(@StringResint)>
<android.widget.Toolbar: int getTitleMarginBottom()>
<android.widget.Toolbar: void setContentInsetsRelative(int,int)>
<android.widget.Toolbar: void setTitleMarginBottom(int)>
<android.widget.Toolbar: boolean hasExpandedActionView()>
<android.widget.Toolbar: void setTitleMarginEnd(int)>
<android.widget.Toolbar: void setContentInsetEndWithActions(int)>
<android.widget.Toolbar: void setTitleMarginStart(int)>
<android.widget.Toolbar: void inflateMenu(@MenuResint)>
<android.widget.Toolbar: android.widget.Toolbar.LayoutParams generateDefaultLayoutParams()>
<android.widget.Toolbar: void setLogo(android.graphics.drawable.Drawable)>
<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.Toolbar: android.graphics.drawable.Drawable getCollapseIcon()>
<android.widget.Toolbar: int getCurrentContentInsetEnd()>
<android.widget.Toolbar: void setOnMenuItemClickListener(android.widget.Toolbar.OnMenuItemClickListener)>
<android.widget.Toolbar: android.graphics.drawable.Drawable getNavigationIcon()>
<android.widget.Toolbar: CharSequence getSubtitle()>
<android.widget.Toolbar: int getPopupTheme()>
<android.widget.Toolbar: boolean hideOverflowMenu()>
<android.widget.Toolbar: void setSubtitle(CharSequence)>
<android.widget.Toolbar: void setNavigationIcon(android.graphics.drawable.Drawable)>
<android.widget.Toolbar: void setNavigationContentDescription(@StringResint)>
<android.widget.Toolbar: void setNavigationOnClickListener(android.view.View.OnClickListener)>
<android.widget.Toolbar: android.graphics.drawable.Drawable getOverflowIcon()>
<android.widget.Toolbar: void setTitle(@StringResint)>
<android.widget.Toolbar: CharSequence getLogoDescription()>
<java.lang.EnumConstantNotPresentException: void <init>(Class,String)>
<java.lang.EnumConstantNotPresentException: java.lang.String constantName()>
<java.lang.EnumConstantNotPresentException: java.lang.Class enumType()>
<java.time.chrono.Era extends java.time.temporal.TemporalAccessor java.time.temporal.TemporalAdjuster: long getLong(java.time.temporal.TemporalField)>
<java.time.chrono.Era extends java.time.temporal.TemporalAccessor java.time.temporal.TemporalAdjuster: boolean isSupported(java.time.temporal.TemporalField)>
<java.time.chrono.Era extends java.time.temporal.TemporalAccessor java.time.temporal.TemporalAdjuster: int getValue()>
<java.time.chrono.Era extends java.time.temporal.TemporalAccessor java.time.temporal.TemporalAdjuster: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>
<java.time.chrono.Era extends java.time.temporal.TemporalAccessor java.time.temporal.TemporalAdjuster: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>
<android.renderscript.Script.LaunchOptions: int getYStart()>
<android.renderscript.Script.LaunchOptions: void <init>()>
<android.renderscript.Script.LaunchOptions: int getZStart()>
<android.renderscript.Script.LaunchOptions: int getYEnd()>
<android.renderscript.Script.LaunchOptions: int getXStart()>
<android.renderscript.Script.LaunchOptions: int getXEnd()>
<android.renderscript.Script.LaunchOptions: android.renderscript.Script.LaunchOptions setX(int,int)>
<android.renderscript.Script.LaunchOptions: android.renderscript.Script.LaunchOptions setY(int,int)>
<android.renderscript.Script.LaunchOptions: int getZEnd()>
<android.renderscript.Script.LaunchOptions: android.renderscript.Script.LaunchOptions setZ(int,int)>
<android.location.GnssSingleSatCorrection: int getConstellationType()>
<android.location.GnssSingleSatCorrection: float getProbabilityLineOfSight()>
<android.location.GnssSingleSatCorrection: float getExcessPathLengthUncertaintyMeters()>
<android.location.GnssSingleSatCorrection: int describeContents()>
<android.location.GnssSingleSatCorrection: float getExcessPathLengthMeters()>
<android.location.GnssSingleSatCorrection: float getCarrierFrequencyHz()>
<android.location.GnssSingleSatCorrection: android.location.GnssReflectingPlane getReflectingPlane()>
<android.location.GnssSingleSatCorrection: boolean hasExcessPathLength()>
<android.location.GnssSingleSatCorrection: int getSatelliteId()>
<android.location.GnssSingleSatCorrection: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssSingleSatCorrection: boolean hasExcessPathLengthUncertainty()>
<android.location.GnssSingleSatCorrection: boolean hasReflectingPlane()>
<android.location.GnssSingleSatCorrection: boolean hasValidSatelliteLineOfSight()>
<android.location.GpsMeasurement: boolean hasCarrierFrequencyInHz()>
<android.location.GpsMeasurement: boolean hasSnrInDb()>
<android.location.GpsMeasurement: byte getLossOfLock()>
<android.location.GpsMeasurement: long getCarrierCycles()>
<android.location.GpsMeasurement: boolean hasCarrierPhase()>
<android.location.GpsMeasurement: void setTimeFromLastBitInMs(short)>
<android.location.GpsMeasurement: void setState(short)>
<android.location.GpsMeasurement: void setPseudorangeRateUncertaintyInMetersPerSec(double)>
<android.location.GpsMeasurement: void setDopplerShiftUncertaintyInHz(double)>
<android.location.GpsMeasurement: boolean hasCarrierPhaseUncertainty()>
<android.location.GpsMeasurement: double getDopplerShiftInHz()>
<android.location.GpsMeasurement: double getCn0InDbHz()>
<android.location.GpsMeasurement: boolean hasCodePhaseInChips()>
<android.location.GpsMeasurement: void resetCarrierPhaseUncertainty()>
<android.location.GpsMeasurement: long getReceivedGpsTowUncertaintyInNs()>
<android.location.GpsMeasurement: void resetPseudorangeInMeters()>
<android.location.GpsMeasurement: void resetCarrierPhase()>
<android.location.GpsMeasurement: void setCn0InDbHz(double)>
<android.location.GpsMeasurement: void setCarrierCycles(long)>
<android.location.GpsMeasurement: byte getPrn()>
<android.location.GpsMeasurement: void setAzimuthInDeg(double)>
<android.location.GpsMeasurement: void setCarrierFrequencyInHz(float)>
<android.location.GpsMeasurement: int getBitNumber()>
<android.location.GpsMeasurement: void resetElevationInDeg()>
<android.location.GpsMeasurement: short getTimeFromLastBitInMs()>
<android.location.GpsMeasurement: double getPseudorangeRateUncertaintyInMetersPerSec()>
<android.location.GpsMeasurement: double getElevationInDeg()>
<android.location.GpsMeasurement: void resetCodePhaseInChips()>
<android.location.GpsMeasurement: boolean hasTimeFromLastBitInMs()>
<android.location.GpsMeasurement: void setAccumulatedDeltaRangeUncertaintyInMeters(double)>
<android.location.GpsMeasurement: void setCodePhaseInChips(double)>
<android.location.GpsMeasurement: double getAccumulatedDeltaRangeInMeters()>
<android.location.GpsMeasurement: double getDopplerShiftUncertaintyInHz()>
<android.location.GpsMeasurement: double getPseudorangeInMeters()>
<android.location.GpsMeasurement: void setTimeOffsetInNs(double)>
<android.location.GpsMeasurement: void resetCarrierFrequencyInHz()>
<android.location.GpsMeasurement: boolean hasPseudorangeInMeters()>
<android.location.GpsMeasurement: void setCarrierPhaseUncertainty(double)>
<android.location.GpsMeasurement: double getCodePhaseInChips()>
<android.location.GpsMeasurement: void setAccumulatedDeltaRangeState(short)>
<android.location.GpsMeasurement: void setAzimuthUncertaintyInDeg(double)>
<android.location.GpsMeasurement: void setPseudorangeUncertaintyInMeters(double)>
<android.location.GpsMeasurement: void resetTimeFromLastBitInMs()>
<android.location.GpsMeasurement: void setMultipathIndicator(byte)>
<android.location.GpsMeasurement: double getPseudorangeRateInMetersPerSec()>
<android.location.GpsMeasurement: void setUsedInFix(boolean)>
<android.location.GpsMeasurement: void resetBitNumber()>
<android.location.GpsMeasurement: void resetDopplerShiftInHz()>
<android.location.GpsMeasurement: double getElevationUncertaintyInDeg()>
<android.location.GpsMeasurement: void resetAzimuthUncertaintyInDeg()>
<android.location.GpsMeasurement: void setElevationUncertaintyInDeg(double)>
<android.location.GpsMeasurement: void resetDopplerShiftUncertaintyInHz()>
<android.location.GpsMeasurement: void setBitNumber(int)>
<android.location.GpsMeasurement: void setCodePhaseUncertaintyInChips(double)>
<android.location.GpsMeasurement: boolean hasPseudorangeUncertaintyInMeters()>
<android.location.GpsMeasurement: void setPseudorangeRateInMetersPerSec(double)>
<android.location.GpsMeasurement: boolean isPseudorangeRateCorrected()>
<android.location.GpsMeasurement: short getAccumulatedDeltaRangeState()>
<android.location.GpsMeasurement: boolean hasElevationUncertaintyInDeg()>
<android.location.GpsMeasurement: double getAccumulatedDeltaRangeUncertaintyInMeters()>
<android.location.GpsMeasurement: boolean hasAzimuthUncertaintyInDeg()>
<android.location.GpsMeasurement: void setDopplerShiftInHz(double)>
<android.location.GpsMeasurement: boolean hasDopplerShiftUncertaintyInHz()>
<android.location.GpsMeasurement: void set(android.location.GpsMeasurement)>
<android.location.GpsMeasurement: void resetPseudorangeUncertaintyInMeters()>
<android.location.GpsMeasurement: boolean hasDopplerShiftInHz()>
<android.location.GpsMeasurement: void setPseudorangeInMeters(double)>
<android.location.GpsMeasurement: boolean hasElevationInDeg()>
<android.location.GpsMeasurement: void setLossOfLock(byte)>
<android.location.GpsMeasurement: void setReceivedGpsTowUncertaintyInNs(long)>
<android.location.GpsMeasurement: boolean hasCodePhaseUncertaintyInChips()>
<android.location.GpsMeasurement: void resetSnrInDb()>
<android.location.GpsMeasurement: void resetCodePhaseUncertaintyInChips()>
<android.location.GpsMeasurement: void setSnrInDb(double)>
<android.location.GpsMeasurement: double getCarrierPhase()>
<android.location.GpsMeasurement: double getPseudorangeUncertaintyInMeters()>
<android.location.GpsMeasurement: void resetElevationUncertaintyInDeg()>
<android.location.GpsMeasurement: void writeToParcel(android.os.Parcel,int)>
<android.location.GpsMeasurement: void resetCarrierCycles()>
<android.location.GpsMeasurement: boolean hasBitNumber()>
<android.location.GpsMeasurement: int describeContents()>
<android.location.GpsMeasurement: void setElevationInDeg(double)>
<android.location.GpsMeasurement: long getReceivedGpsTowInNs()>
<android.location.GpsMeasurement: boolean hasCarrierCycles()>
<android.location.GpsMeasurement: void setPrn(byte)>
<android.location.GpsMeasurement: double getSnrInDb()>
<android.location.GpsMeasurement: boolean hasAzimuthInDeg()>
<android.location.GpsMeasurement: void setAccumulatedDeltaRangeInMeters(double)>
<android.location.GpsMeasurement: void resetAzimuthInDeg()>
<android.location.GpsMeasurement: void setCarrierPhase(double)>
<android.location.GpsMeasurement: double getCodePhaseUncertaintyInChips()>
<android.location.GpsMeasurement: float getCarrierFrequencyInHz()>
<android.location.GpsMeasurement: double getTimeOffsetInNs()>
<android.location.GpsMeasurement: void reset()>
<android.location.GpsMeasurement: double getAzimuthUncertaintyInDeg()>
<android.location.GpsMeasurement: byte getMultipathIndicator()>
<android.location.GpsMeasurement: void setReceivedGpsTowInNs(long)>
<android.location.GpsMeasurement: double getAzimuthInDeg()>
<android.location.GpsMeasurement: double getCarrierPhaseUncertainty()>
<android.location.GpsMeasurement: short getState()>
<android.location.GpsMeasurement: boolean isUsedInFix()>
<android.media.RemoteControlClient.OnPlaybackPositionUpdateListener: void onPlaybackPositionUpdate(long)>
<java.time.Period: java.time.Period minusDays(long)>
<java.time.Period: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>
<java.time.Period: java.time.Period plusYears(long)>
<java.time.Period: java.time.Period from(java.time.temporal.TemporalAmount)>
<java.time.Period: java.time.Period multipliedBy(int)>
<java.time.Period: java.time.Period minusMonths(long)>
<java.time.Period: java.time.Period parse(CharSequence)>
<java.time.Period: java.time.chrono.IsoChronology getChronology()>
<java.time.Period: java.time.Period plusMonths(long)>
<java.time.Period: java.time.Period minusYears(long)>
<java.time.Period: java.time.Period withMonths(int)>
<java.time.Period: long get(java.time.temporal.TemporalUnit)>
<java.time.Period: java.time.Period plusDays(long)>
<java.time.Period: int getYears()>
<java.time.Period: java.time.Period negated()>
<java.time.Period: java.time.Period withYears(int)>
<java.time.Period: java.time.Period withDays(int)>
<java.time.Period: java.time.Period plus(java.time.temporal.TemporalAmount)>
<java.time.Period: java.time.Period ofYears(int)>
<java.time.Period: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>
<java.time.Period: java.time.Period of(int,int,int)>
<java.time.Period: java.time.Period between(java.time.LocalDate,java.time.LocalDate)>
<java.time.Period: long toTotalMonths()>
<java.time.Period: java.time.Period ofDays(int)>
<java.time.Period: java.time.Period ofMonths(int)>
<java.time.Period: java.time.Period ofWeeks(int)>
<java.time.Period: java.util.List getUnits()>
<java.time.Period: java.time.Period minus(java.time.temporal.TemporalAmount)>
<java.time.Period: int getMonths()>
<java.time.Period: java.time.Period normalized()>
<java.time.Period: int getDays()>
<android.net.wifi.rtt.ResponderConfig: android.net.wifi.rtt.ResponderConfig fromScanResult(android.net.wifi.ScanResult)>
<android.net.wifi.rtt.ResponderConfig: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.rtt.ResponderConfig: android.net.wifi.rtt.ResponderConfig fromWifiAwarePeerMacAddressWithDefaults(android.net.MacAddress)>
<android.net.wifi.rtt.ResponderConfig: int describeContents()>
<android.net.wifi.rtt.ResponderConfig: android.net.wifi.rtt.ResponderConfig fromWifiAwarePeerHandleWithDefaults(android.net.wifi.aware.PeerHandle)>
<android.net.wifi.rtt.ResponderConfig: void <init>(android.net.wifi.aware.PeerHandle,int,boolean,int,int,int,int,int)>
<android.net.wifi.rtt.ResponderConfig: void <init>(android.net.MacAddress,int,boolean,int,int,int,int,int)>
<java.util.Spliterator.OfDouble extends java.util.Spliterator.OfPrimitive: void forEachRemaining(java.util.function.Consumer)>
<java.util.Spliterator.OfDouble extends java.util.Spliterator.OfPrimitive: void forEachRemaining(java.util.function.DoubleConsumer)>
<java.util.Spliterator.OfDouble extends java.util.Spliterator.OfPrimitive: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Spliterator.OfDouble extends java.util.Spliterator.OfPrimitive: java.util.Spliterator.OfDouble trySplit()>
<java.util.Spliterator.OfDouble extends java.util.Spliterator.OfPrimitive: boolean tryAdvance(java.util.function.DoubleConsumer)>
<android.icu.text.CaseMap.Title: A apply(java.util.Locale,android.icu.text.BreakIterator,CharSequence,A,android.icu.text.Edits)>
<android.icu.text.CaseMap.Title: android.icu.text.CaseMap.Title noBreakAdjustment()>
<android.icu.text.CaseMap.Title: android.icu.text.CaseMap.Title adjustToCased()>
<android.icu.text.CaseMap.Title: android.icu.text.CaseMap.Title noLowercase()>
<android.icu.text.CaseMap.Title: android.icu.text.CaseMap.Title sentences()>
<android.icu.text.CaseMap.Title: android.icu.text.CaseMap.Title wholeString()>
<android.icu.text.CaseMap.Title: android.icu.text.CaseMap.Title omitUnchangedText()>
<android.icu.text.CaseMap.Title: java.lang.String apply(java.util.Locale,android.icu.text.BreakIterator,CharSequence)>
<android.database.CursorJoiner: void <init>(android.database.Cursor,String[],android.database.Cursor,String[])>
<android.database.CursorJoiner: android.database.CursorJoiner.Result next()>
<android.database.CursorJoiner: java.util.Iterator iterator()>
<android.database.CursorJoiner: boolean hasNext()>
<android.text.style.ScaleXSpan: int getSpanTypeId()>
<android.text.style.ScaleXSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.ScaleXSpan: int describeContents()>
<android.text.style.ScaleXSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.ScaleXSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.ScaleXSpan: void <init>(from=0) float)>
<android.text.style.ScaleXSpan: void <init>(android.os.Parcel)>
<android.text.style.ScaleXSpan: float getScaleX()>
<android.app.UiAutomation: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()>
<android.app.UiAutomation: void dropShellPermissionIdentity()>
<android.app.UiAutomation: boolean injectInputEvent(android.view.InputEvent,boolean)>
<android.app.UiAutomation: android.os.ParcelFileDescriptor executeShellCommand(java.lang.String)>
<android.app.UiAutomation: void grantRuntimePermission(java.lang.String,java.lang.String)>
<android.app.UiAutomation: boolean grantRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)>
<android.app.UiAutomation: java.util.List getWindows()>
<android.app.UiAutomation: void setOnAccessibilityEventListener(android.app.UiAutomation.OnAccessibilityEventListener)>
<android.app.UiAutomation: android.os.ParcelFileDescriptor[] executeShellCommandRw(java.lang.String)>
<android.app.UiAutomation: void adoptShellPermissionIdentity()>
<android.app.UiAutomation: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>
<android.app.UiAutomation: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>
<android.app.UiAutomation: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)>
<android.app.UiAutomation: boolean setRotation(int)>
<android.app.UiAutomation: void syncInputTransactions()>
<android.app.UiAutomation: void adoptShellPermissionIdentity(java.lang.String...)>
<android.app.UiAutomation: android.graphics.Bitmap takeScreenshot()>
<android.app.UiAutomation: android.view.WindowAnimationFrameStats getWindowAnimationFrameStats()>
<android.app.UiAutomation: boolean clearWindowContentFrameStats(int)>
<android.app.UiAutomation: android.view.WindowContentFrameStats getWindowContentFrameStats(int)>
<android.app.UiAutomation: void setRunAsMonkey(boolean)>
<android.app.UiAutomation: void destroy()>
<android.app.UiAutomation: void clearWindowAnimationFrameStats()>
<android.app.UiAutomation: void revokeRuntimePermissionAsUser(java.lang.String,java.lang.String,android.os.UserHandle)>
<android.app.UiAutomation: boolean performGlobalAction(int)>
<android.app.UiAutomation: boolean revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)>
<android.app.UiAutomation: android.view.accessibility.AccessibilityEvent executeAndWaitForEvent(Runnable,android.app.UiAutomation.AccessibilityEventFilter,long)>
<android.app.UiAutomation: void grantRuntimePermissionAsUser(java.lang.String,java.lang.String,android.os.UserHandle)>
<android.app.UiAutomation: void waitForIdle(long,long)>
<android.app.UiAutomation: void revokeRuntimePermission(java.lang.String,java.lang.String)>
<android.hardware.usb.UsbRequest: void close()>
<android.hardware.usb.UsbRequest: void setClientData(java.lang.Object)>
<android.hardware.usb.UsbRequest: boolean cancel()>
<android.hardware.usb.UsbRequest: boolean queue(java.nio.ByteBuffer,int)>
<android.hardware.usb.UsbRequest: void <init>()>
<android.hardware.usb.UsbRequest: boolean queue(java.nio.ByteBuffer)>
<android.hardware.usb.UsbRequest: android.hardware.usb.UsbEndpoint getEndpoint()>
<android.hardware.usb.UsbRequest: boolean initialize(android.hardware.usb.UsbDeviceConnection,android.hardware.usb.UsbEndpoint)>
<android.hardware.usb.UsbRequest: java.lang.Object getClientData()>
<android.media.UnsupportedSchemeException: void <init>(String)>
<android.bluetooth.le.BluetoothLeAdvertiser: void stopAdvertising(android.bluetooth.le.AdvertiseCallback)>
<android.bluetooth.le.BluetoothLeAdvertiser: void startAdvertisingSet(android.bluetooth.le.AdvertisingSetParameters,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.PeriodicAdvertisingParameters,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertisingSetCallback,android.os.Handler)>
<android.bluetooth.le.BluetoothLeAdvertiser: void startAdvertising(android.bluetooth.le.AdvertiseSettings,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseCallback)>
<android.bluetooth.le.BluetoothLeAdvertiser: void startAdvertisingSet(android.bluetooth.le.AdvertisingSetParameters,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.PeriodicAdvertisingParameters,android.bluetooth.le.AdvertiseData,int,int,android.bluetooth.le.AdvertisingSetCallback,android.os.Handler)>
<android.bluetooth.le.BluetoothLeAdvertiser: void stopAdvertisingSet(android.bluetooth.le.AdvertisingSetCallback)>
<android.bluetooth.le.BluetoothLeAdvertiser: void startAdvertising(android.bluetooth.le.AdvertiseSettings,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseCallback)>
<android.bluetooth.le.BluetoothLeAdvertiser: void startAdvertisingSet(android.bluetooth.le.AdvertisingSetParameters,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.PeriodicAdvertisingParameters,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertisingSetCallback)>
<android.bluetooth.le.BluetoothLeAdvertiser: void startAdvertisingSet(android.bluetooth.le.AdvertisingSetParameters,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.PeriodicAdvertisingParameters,android.bluetooth.le.AdvertiseData,int,int,android.bluetooth.le.AdvertisingSetCallback)>
<android.view.View.OnKeyListener: boolean onKey(android.view.View,int,android.view.KeyEvent)>
<java.net.MulticastSocket: void leaveGroup(java.net.InetAddress)>
<java.net.MulticastSocket: void joinGroup(java.net.SocketAddress,java.net.NetworkInterface)>
<java.net.MulticastSocket: int getTimeToLive()>
<java.net.MulticastSocket: void setNetworkInterface(java.net.NetworkInterface)>
<java.net.MulticastSocket: void joinGroup(java.net.InetAddress)>
<java.net.MulticastSocket: void setTTL(byte)>
<java.net.MulticastSocket: void send(java.net.DatagramPacket,byte)>
<java.net.MulticastSocket: void setTimeToLive(int)>
<java.net.MulticastSocket: byte getTTL()>
<java.net.MulticastSocket: java.net.InetAddress getInterface()>
<java.net.MulticastSocket: void <init>(int)>
<java.net.MulticastSocket: java.net.NetworkInterface getNetworkInterface()>
<java.net.MulticastSocket: void setLoopbackMode(boolean)>
<java.net.MulticastSocket: boolean getLoopbackMode()>
<java.net.MulticastSocket: void <init>(java.net.SocketAddress)>
<java.net.MulticastSocket: void setInterface(java.net.InetAddress)>
<java.net.MulticastSocket: void <init>()>
<java.net.MulticastSocket: void leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)>
<android.net.CaptivePortal: void ignoreNetwork()>
<android.net.CaptivePortal: void reportCaptivePortalDismissed()>
<android.net.CaptivePortal: void useNetwork()>
<android.net.CaptivePortal: void writeToParcel(android.os.Parcel,int)>
<android.net.CaptivePortal: int describeContents()>
<android.net.CaptivePortal: void logEvent(int,java.lang.String)>
<android.app.ActivityManager.RunningServiceInfo: void <init>()>
<android.app.ActivityManager.RunningServiceInfo: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager.RunningServiceInfo: int describeContents()>
<android.app.ActivityManager.RunningServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.widget.AnalogClock: void <init>(android.content.Context)>
<android.widget.AnalogClock: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AnalogClock: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AnalogClock: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.media.AudioRecord.Builder: android.media.AudioRecord.Builder setSessionId(int)>
<android.media.AudioRecord.Builder: android.media.AudioRecord build()>
<android.media.AudioRecord.Builder: void <init>()>
<android.media.AudioRecord.Builder: android.media.AudioRecord.Builder setBufferSizeInBytes(int)>
<android.media.AudioRecord.Builder: android.media.AudioRecord.Builder setAudioAttributes(android.media.AudioAttributes)>
<android.media.AudioRecord.Builder: android.media.AudioRecord.Builder setAudioFormat(android.media.AudioFormat)>
<android.media.AudioRecord.Builder: android.media.AudioRecord.Builder setAudioPlaybackCaptureConfig(android.media.AudioPlaybackCaptureConfiguration)>
<android.media.AudioRecord.Builder: android.media.AudioRecord.Builder setAudioSource(int)>
<android.service.autofill.AutofillService: void onConnected()>
<android.service.autofill.AutofillService: void onSaveRequest(android.service.autofill.SaveRequest,android.service.autofill.SaveCallback)>
<android.service.autofill.AutofillService: void onFillRequest(android.service.autofill.FillRequest,android.os.CancellationSignal,android.service.autofill.FillCallback)>
<android.service.autofill.AutofillService: void <init>()>
<android.service.autofill.AutofillService: android.service.autofill.FillEventHistory getFillEventHistory()>
<android.service.autofill.AutofillService: android.os.IBinder onBind(android.content.Intent)>
<android.service.autofill.AutofillService: void onDisconnected()>
<android.provider.DeviceConfig: long getLong(java.lang.String,java.lang.String,long)>
<android.provider.DeviceConfig: java.lang.String getProperty(java.lang.String,java.lang.String)>
<android.provider.DeviceConfig: java.lang.String getString(java.lang.String,java.lang.String,java.lang.String)>
<android.provider.DeviceConfig: void addOnPropertiesChangedListener(java.lang.String,java.util.concurrent.Executor,android.provider.DeviceConfig.OnPropertiesChangedListener)>
<android.provider.DeviceConfig: void resetToDefaults(int,java.lang.String)>
<android.provider.DeviceConfig: boolean setProperty(java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.provider.DeviceConfig: void removeOnPropertiesChangedListener(android.provider.DeviceConfig.OnPropertiesChangedListener)>
<android.provider.DeviceConfig: float getFloat(java.lang.String,java.lang.String,float)>
<android.provider.DeviceConfig: boolean getBoolean(java.lang.String,java.lang.String,boolean)>
<android.provider.DeviceConfig: int getInt(java.lang.String,java.lang.String,int)>
<android.renderscript.Short2: void <init>(short,short)>
<android.renderscript.Short2: void <init>()>
<android.bluetooth.le.ScanRecord: int getAdvertiseFlags()>
<android.bluetooth.le.ScanRecord: byte[] getManufacturerSpecificData(int)>
<android.bluetooth.le.ScanRecord: byte[] getServiceData(android.os.ParcelUuid)>
<android.bluetooth.le.ScanRecord: java.util.Map getServiceData()>
<android.bluetooth.le.ScanRecord: int getTxPowerLevel()>
<android.bluetooth.le.ScanRecord: java.util.List getServiceSolicitationUuids()>
<android.bluetooth.le.ScanRecord: android.util.SparseArray getManufacturerSpecificData()>
<android.bluetooth.le.ScanRecord: java.util.List getServiceUuids()>
<android.bluetooth.le.ScanRecord: byte[] getBytes()>
<android.bluetooth.le.ScanRecord: java.lang.String getDeviceName()>
<android.renderscript.Short3: void <init>()>
<android.renderscript.Short3: void <init>(short,short,short)>
<android.renderscript.Short4: void <init>(short,short,short,short)>
<android.renderscript.Short4: void <init>()>
<android.net.Uri: android.net.Uri.Builder buildUpon()>
<android.net.Uri: java.lang.String getHost()>
<android.net.Uri: java.lang.String getEncodedFragment()>
<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>
<android.net.Uri: java.util.List getQueryParameters(java.lang.String)>
<android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)>
<android.net.Uri: int compareTo(android.net.Uri)>
<android.net.Uri: java.lang.String getEncodedAuthority()>
<android.net.Uri: android.net.Uri parse(java.lang.String)>
<android.net.Uri: java.lang.String getEncodedPath()>
<android.net.Uri: boolean isRelative()>
<android.net.Uri: java.lang.String getAuthority()>
<android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)>
<android.net.Uri: android.net.Uri fromFile(java.io.File)>
<android.net.Uri: java.lang.String getFragment()>
<android.net.Uri: java.lang.String getEncodedQuery()>
<android.net.Uri: java.lang.String getSchemeSpecificPart()>
<android.net.Uri: void writeToParcel(android.os.Parcel,android.net.Uri)>
<android.net.Uri: java.lang.String getPath()>
<android.net.Uri: java.lang.String decode(java.lang.String)>
<android.net.Uri: android.net.Uri normalizeScheme()>
<android.net.Uri: int getPort()>
<android.net.Uri: java.lang.String getScheme()>
<android.net.Uri: java.lang.String toSafeString()>
<android.net.Uri: boolean isHierarchical()>
<android.net.Uri: java.lang.String getLastPathSegment()>
<android.net.Uri: java.lang.String getEncodedSchemeSpecificPart()>
<android.net.Uri: java.util.List getPathSegments()>
<android.net.Uri: java.lang.String getEncodedUserInfo()>
<android.net.Uri: java.lang.String getQuery()>
<android.net.Uri: boolean isAbsolute()>
<android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>
<android.net.Uri: java.lang.String encode(java.lang.String)>
<android.net.Uri: java.lang.String getUserInfo()>
<android.net.Uri: java.lang.String toString()>
<android.net.Uri: boolean isOpaque()>
<android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>
<android.net.Uri: java.util.Set getQueryParameterNames()>
<android.service.autofill.DateValueSanitizer: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.DateValueSanitizer: android.view.autofill.AutofillValue sanitize(android.view.autofill.AutofillValue)>
<android.service.autofill.DateValueSanitizer: void <init>(android.icu.text.DateFormat)>
<android.service.autofill.DateValueSanitizer: int describeContents()>
<android.gesture.GestureOverlayView: void setEventsInterceptionEnabled(boolean)>
<android.gesture.GestureOverlayView: void removeAllOnGesturePerformedListeners()>
<android.gesture.GestureOverlayView: void removeAllOnGesturingListeners()>
<android.gesture.GestureOverlayView: void setGesture(android.gesture.Gesture)>
<android.gesture.GestureOverlayView: void addOnGestureListener(android.gesture.GestureOverlayView.OnGestureListener)>
<android.gesture.GestureOverlayView: void removeOnGestureListener(android.gesture.GestureOverlayView.OnGestureListener)>
<android.gesture.GestureOverlayView: void setOrientation(int)>
<android.gesture.GestureOverlayView: android.graphics.Path getGesturePath()>
<android.gesture.GestureOverlayView: float getGestureStrokeLengthThreshold()>
<android.gesture.GestureOverlayView: void setGestureStrokeType(int)>
<android.gesture.GestureOverlayView: boolean isGestureVisible()>
<android.gesture.GestureOverlayView: void cancelGesture()>
<android.gesture.GestureOverlayView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.gesture.GestureOverlayView: int getOrientation()>
<android.gesture.GestureOverlayView: void setUncertainGestureColor(@ColorIntint)>
<android.gesture.GestureOverlayView: java.util.ArrayList getCurrentStroke()>
<android.gesture.GestureOverlayView: android.gesture.Gesture getGesture()>
<android.gesture.GestureOverlayView: void removeOnGesturePerformedListener(android.gesture.GestureOverlayView.OnGesturePerformedListener)>
<android.gesture.GestureOverlayView: android.graphics.Path getGesturePath(android.graphics.Path)>
<android.gesture.GestureOverlayView: void setGestureColor(@ColorIntint)>
<android.gesture.GestureOverlayView: void addOnGesturePerformedListener(android.gesture.GestureOverlayView.OnGesturePerformedListener)>
<android.gesture.GestureOverlayView: int getGestureStrokeType()>
<android.gesture.GestureOverlayView: void setGestureStrokeWidth(float)>
<android.gesture.GestureOverlayView: boolean isFadeEnabled()>
<android.gesture.GestureOverlayView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.gesture.GestureOverlayView: float getGestureStrokeAngleThreshold()>
<android.gesture.GestureOverlayView: void setFadeEnabled(boolean)>
<android.gesture.GestureOverlayView: void setGestureStrokeAngleThreshold(float)>
<android.gesture.GestureOverlayView: void setGestureVisible(boolean)>
<android.gesture.GestureOverlayView: float getGestureStrokeSquarenessTreshold()>
<android.gesture.GestureOverlayView: int getUncertainGestureColor()>
<android.gesture.GestureOverlayView: void addOnGesturingListener(android.gesture.GestureOverlayView.OnGesturingListener)>
<android.gesture.GestureOverlayView: float getGestureStrokeWidth()>
<android.gesture.GestureOverlayView: void <init>(android.content.Context)>
<android.gesture.GestureOverlayView: int getGestureColor()>
<android.gesture.GestureOverlayView: void setGestureStrokeSquarenessTreshold(float)>
<android.gesture.GestureOverlayView: void setFadeOffset(long)>
<android.gesture.GestureOverlayView: boolean isEventsInterceptionEnabled()>
<android.gesture.GestureOverlayView: void removeAllOnGestureListeners()>
<android.gesture.GestureOverlayView: void cancelClearAnimation()>
<android.gesture.GestureOverlayView: boolean isGesturing()>
<android.gesture.GestureOverlayView: void clear(boolean)>
<android.gesture.GestureOverlayView: void setGestureStrokeLengthThreshold(float)>
<android.gesture.GestureOverlayView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.gesture.GestureOverlayView: long getFadeOffset()>
<android.gesture.GestureOverlayView: void removeOnGesturingListener(android.gesture.GestureOverlayView.OnGesturingListener)>
<android.view.ViewTreeObserver.OnWindowAttachListener: void onWindowDetached()>
<android.view.ViewTreeObserver.OnWindowAttachListener: void onWindowAttached()>
<android.media.audiofx.DynamicsProcessing: void setPreEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq)>
<android.media.audiofx.DynamicsProcessing: void setInputGainbyChannel(int,float)>
<android.media.audiofx.DynamicsProcessing: void setLimiterByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Limiter)>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing.Eq getPostEqByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing: void setMbcByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Mbc)>
<android.media.audiofx.DynamicsProcessing: void <init>(int,int,android.media.audiofx.DynamicsProcessing.Config)>
<android.media.audiofx.DynamicsProcessing: float getInputGainByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing: void setPreEqBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing.EqBand)>
<android.media.audiofx.DynamicsProcessing: void setPostEqBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing.EqBand)>
<android.media.audiofx.DynamicsProcessing: void setPostEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq)>
<android.media.audiofx.DynamicsProcessing: void setMbcBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing.MbcBand)>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing.Config getConfig()>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing.Mbc getMbcByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing: void setAllChannelsTo(android.media.audiofx.DynamicsProcessing.Channel)>
<android.media.audiofx.DynamicsProcessing: void setPreEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Eq)>
<android.media.audiofx.DynamicsProcessing: void setInputGainAllChannelsTo(float)>
<android.media.audiofx.DynamicsProcessing: void setPostEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Eq)>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing.Eq getPreEqByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing: void setChannelTo(int,android.media.audiofx.DynamicsProcessing.Channel)>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing.Limiter getLimiterByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing: void setPreEqBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing.EqBand)>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing.EqBand getPreEqBandByChannelIndex(int,int)>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing.EqBand getPostEqBandByChannelIndex(int,int)>
<android.media.audiofx.DynamicsProcessing: void setPostEqBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing.EqBand)>
<android.media.audiofx.DynamicsProcessing: void setMbcBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing.MbcBand)>
<android.media.audiofx.DynamicsProcessing: void <init>(int)>
<android.media.audiofx.DynamicsProcessing: void setMbcAllChannelsTo(android.media.audiofx.DynamicsProcessing.Mbc)>
<android.media.audiofx.DynamicsProcessing: int getChannelCount()>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing.MbcBand getMbcBandByChannelIndex(int,int)>
<android.media.audiofx.DynamicsProcessing: void setLimiterAllChannelsTo(android.media.audiofx.DynamicsProcessing.Limiter)>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing.Channel getChannelByChannelIndex(int)>
<android.transition.ChangeScroll: void <init>()>
<android.transition.ChangeScroll: void captureEndValues(android.transition.TransitionValues)>
<android.transition.ChangeScroll: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.ChangeScroll: void captureStartValues(android.transition.TransitionValues)>
<android.renderscript.Type: int getYuv()>
<android.renderscript.Type: android.renderscript.Type createXYZ(android.renderscript.RenderScript,android.renderscript.Element,int,int,int)>
<android.renderscript.Type: android.renderscript.Element getElement()>
<android.renderscript.Type: int getY()>
<android.renderscript.Type: int getZ()>
<android.renderscript.Type: int getX()>
<android.renderscript.Type: android.renderscript.Type createX(android.renderscript.RenderScript,android.renderscript.Element,int)>
<android.renderscript.Type: android.renderscript.Type createXY(android.renderscript.RenderScript,android.renderscript.Element,int,int)>
<android.renderscript.Type: int getCount()>
<android.renderscript.Type: boolean hasFaces()>
<android.renderscript.Type: boolean hasMipmaps()>
<android.preference.RingtonePreference: boolean onActivityResult(int,int,android.content.Intent)>
<android.preference.RingtonePreference: boolean getShowDefault()>
<android.preference.RingtonePreference: android.net.Uri onRestoreRingtone()>
<android.preference.RingtonePreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.RingtonePreference: boolean getShowSilent()>
<android.preference.RingtonePreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.RingtonePreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.RingtonePreference: void setShowSilent(boolean)>
<android.preference.RingtonePreference: int getRingtoneType()>
<android.preference.RingtonePreference: void <init>(android.content.Context)>
<android.preference.RingtonePreference: void setShowDefault(boolean)>
<android.preference.RingtonePreference: void onPrepareRingtonePickerIntent(android.content.Intent)>
<android.preference.RingtonePreference: void onSaveRingtone(android.net.Uri)>
<android.preference.RingtonePreference: void setRingtoneType(int)>
<android.content.SyncStatusObserver: void onStatusChanged(int)>
<android.service.autofill.ValueFinder: java.lang.String findByAutofillId(android.view.autofill.AutofillId)>
<android.service.autofill.ValueFinder: android.view.autofill.AutofillValue findRawValueByAutofillId(android.view.autofill.AutofillId)>
<android.content.DialogInterface.OnCancelListener: void onCancel(android.content.DialogInterface)>
<android.graphics.Canvas: void translate(float,float)>
<android.graphics.Canvas: void drawColor(@ColorIntint,android.graphics.PorterDuff.Mode)>
<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int)>
<android.graphics.Canvas: void drawDoubleRoundRect(android.graphics.RectF,float,float,android.graphics.RectF,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawColor(@ColorIntint)>
<android.graphics.Canvas: boolean clipRect(android.graphics.RectF)>
<android.graphics.Canvas: boolean quickReject(android.graphics.RectF,android.graphics.Canvas.EdgeType)>
<android.graphics.Canvas: android.graphics.Matrix getMatrix()>
<android.graphics.Canvas: void drawOval(float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPoints(float[],int,int,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void getMatrix(android.graphics.Matrix)>
<android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void restoreToCount(int)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: boolean clipOutRect(float,float,float,float)>
<android.graphics.Canvas: void rotate(float)>
<android.graphics.Canvas: int getHeight()>
<android.graphics.Canvas: void drawArc(float,float,float,float,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)>
<android.graphics.Canvas: void setMatrix(android.graphics.Matrix)>
<android.graphics.Canvas: boolean clipOutRect(android.graphics.Rect)>
<android.graphics.Canvas: boolean clipRect(android.graphics.RectF,android.graphics.Region.Op)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void rotate(float,float,float)>
<android.graphics.Canvas: void scale(float,float,float,float)>
<android.graphics.Canvas: void skew(float,float)>
<android.graphics.Canvas: boolean clipOutPath(android.graphics.Path)>
<android.graphics.Canvas: void drawVertices(android.graphics.Canvas.VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>
<android.graphics.Canvas: boolean clipPath(android.graphics.Path)>
<android.graphics.Canvas: void disableZ()>
<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)>
<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPoints(float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawText(CharSequence,int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawColor(@ColorIntint,android.graphics.BlendMode)>
<android.graphics.Canvas: void <init>()>
<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>
<android.graphics.Canvas: void drawLines(float[],int,int,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>
<android.graphics.Canvas: android.graphics.DrawFilter getDrawFilter()>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>
<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void drawTextRun(android.graphics.text.MeasuredText,int,int,int,int,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void restore()>
<android.graphics.Canvas: boolean clipOutRect(android.graphics.RectF)>
<android.graphics.Canvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)>
<android.graphics.Canvas: int getMaximumBitmapWidth()>
<android.graphics.Canvas: int save()>
<android.graphics.Canvas: void drawPoint(float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPaint(android.graphics.Paint)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)>
<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>
<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>
<android.graphics.Canvas: boolean quickReject(float,float,float,float,android.graphics.Canvas.EdgeType)>
<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void concat(android.graphics.Matrix)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture)>
<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int)>
<android.graphics.Canvas: boolean isHardwareAccelerated()>
<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>
<android.graphics.Canvas: boolean clipRect(int,int,int,int)>
<android.graphics.Canvas: int getMaximumBitmapHeight()>
<android.graphics.Canvas: void setDensity(int)>
<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>
<android.graphics.Canvas: int getDensity()>
<android.graphics.Canvas: void setDrawFilter(android.graphics.DrawFilter)>
<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)>
<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region.Op)>
<android.graphics.Canvas: boolean quickReject(android.graphics.Path,android.graphics.Canvas.EdgeType)>
<android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)>
<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region.Op)>
<android.graphics.Canvas: boolean clipRect(float,float,float,float)>
<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>
<android.graphics.Canvas: void drawLines(float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>
<android.graphics.Canvas: void drawColor(@ColorLonglong,android.graphics.BlendMode)>
<android.graphics.Canvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)>
<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: boolean isOpaque()>
<android.graphics.Canvas: void drawARGB(int,int,int,int)>
<android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void scale(float,float)>
<android.graphics.Canvas: int getSaveCount()>
<android.graphics.Canvas: void drawRGB(int,int,int)>
<android.graphics.Canvas: void drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawRenderNode(android.graphics.RenderNode)>
<android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region.Op)>
<android.graphics.Canvas: void drawRoundRect(float,float,float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawTextRun(CharSequence,int,int,int,int,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: android.graphics.Rect getClipBounds()>
<android.graphics.Canvas: void drawColor(@ColorLonglong)>
<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: int getWidth()>
<android.graphics.Canvas: void drawDoubleRoundRect(android.graphics.RectF,float[],android.graphics.RectF,float[],android.graphics.Paint)>
<android.graphics.Canvas: void enableZ()>
<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>
<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: boolean clipOutRect(int,int,int,int)>
<android.text.ClipboardManager: boolean hasText()>
<android.text.ClipboardManager: void <init>()>
<android.text.ClipboardManager: void setText(CharSequence)>
<android.text.ClipboardManager: CharSequence getText()>
<org.w3c.dom.ls.LSSerializer: java.lang.String writeToString(org.w3c.dom.Node)>
<org.w3c.dom.ls.LSSerializer: boolean writeToURI(org.w3c.dom.Node,java.lang.String)>
<org.w3c.dom.ls.LSSerializer: void setNewLine(java.lang.String)>
<org.w3c.dom.ls.LSSerializer: boolean write(org.w3c.dom.Node,org.w3c.dom.ls.LSOutput)>
<org.w3c.dom.ls.LSSerializer: java.lang.String getNewLine()>
<org.w3c.dom.ls.LSSerializer: org.w3c.dom.DOMConfiguration getDomConfig()>
<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>
<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>
<android.view.textclassifier.TextLanguage.Builder: android.view.textclassifier.TextLanguage.Builder putLocale(android.icu.util.ULocale,float)>
<android.view.textclassifier.TextLanguage.Builder: android.view.textclassifier.TextLanguage build()>
<android.view.textclassifier.TextLanguage.Builder: android.view.textclassifier.TextLanguage.Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.TextLanguage.Builder: android.view.textclassifier.TextLanguage.Builder setId(java.lang.String)>
<android.view.textclassifier.TextLanguage.Builder: void <init>()>
<android.app.VoiceInteractor.Prompt: CharSequence getVoicePromptAt(int)>
<android.app.VoiceInteractor.Prompt: int countVoicePrompts()>
<android.app.VoiceInteractor.Prompt: int describeContents()>
<android.app.VoiceInteractor.Prompt: void <init>(CharSequence[],CharSequence)>
<android.app.VoiceInteractor.Prompt: void writeToParcel(android.os.Parcel,int)>
<android.app.VoiceInteractor.Prompt: CharSequence getVisualPrompt()>
<android.app.VoiceInteractor.Prompt: void <init>(CharSequence)>
<android.provider.SyncStateContract: void <init>()>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle arrayElementSetter(java.lang.Class)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle arrayElementGetter(java.lang.Class)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle invoker(java.lang.invoke.MethodType)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle explicitCastArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle filterArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle...)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle filterReturnValue(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle spreadInvoker(java.lang.invoke.MethodType,int)>
<java.lang.invoke.MethodHandles: T reflectAs(java.lang.Class,java.lang.invoke.MethodHandle)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles.Lookup publicLookup()>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle exactInvoker(java.lang.invoke.MethodType)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle foldArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle catchException(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle collectArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle,int,Class...)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle insertArguments(java.lang.invoke.MethodHandle,int,java.lang.Object...)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle constant(java.lang.Class,java.lang.Object)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,int...)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles.Lookup lookup()>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle guardWithTest(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle,int,java.util.List)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle throwException(java.lang.Class,java.lang.Class)>
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle identity(java.lang.Class)>
<android.net.wifi.RttManager.Capabilities: void <init>()>
<android.provider.Settings.System: android.net.Uri getUriFor(java.lang.String)>
<android.provider.Settings.System: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Settings.System: float getFloat(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings.System: void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)>
<android.provider.Settings.System: boolean putInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings.System: void getConfiguration(android.content.ContentResolver,android.content.res.Configuration)>
<android.provider.Settings.System: int getInt(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings.System: boolean canWrite(android.content.Context)>
<android.provider.Settings.System: int getInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings.System: boolean getShowGTalkServiceStatus(android.content.ContentResolver)>
<android.provider.Settings.System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings.System: long getLong(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings.System: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings.System: void <init>()>
<android.provider.Settings.System: float getFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings.System: boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)>
<android.provider.Settings.System: long getLong(android.content.ContentResolver,java.lang.String,long)>
<android.provider.Settings.System: boolean putLong(android.content.ContentResolver,java.lang.String,long)>
<android.view.ActionProvider: android.view.View onCreateActionView(android.view.MenuItem)>
<android.view.ActionProvider: void refreshVisibility()>
<android.view.ActionProvider: void setVisibilityListener(android.view.ActionProvider.VisibilityListener)>
<android.view.ActionProvider: boolean overridesItemVisibility()>
<android.view.ActionProvider: void onPrepareSubMenu(android.view.SubMenu)>
<android.view.ActionProvider: android.view.View onCreateActionView()>
<android.view.ActionProvider: boolean isVisible()>
<android.view.ActionProvider: boolean onPerformDefaultAction()>
<android.view.ActionProvider: void <init>(android.content.Context)>
<android.view.ActionProvider: boolean hasSubMenu()>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool()>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>
<java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.security.PrivilegedAction)>
<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>
<java.util.concurrent.Executors: java.util.concurrent.Callable privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>
<java.util.concurrent.Executors: java.util.concurrent.Callable privilegedCallable(java.util.concurrent.Callable)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService)>
<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)>
<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)>
<java.util.concurrent.Executors: java.util.concurrent.Callable callable(Runnable,T)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory)>
<java.util.concurrent.Executors: java.util.concurrent.Callable callable(Runnable)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newWorkStealingPool()>
<java.util.concurrent.Executors: java.util.concurrent.ThreadFactory privilegedThreadFactory()>
<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int)>
<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)>
<java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newWorkStealingPool(int)>
<java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.security.PrivilegedExceptionAction)>
<java.security.cert.CertStoreException: void <init>(String,Throwable)>
<java.security.cert.CertStoreException: void <init>(String)>
<java.security.cert.CertStoreException: void <init>()>
<java.security.cert.CertStoreException: void <init>(Throwable)>
<android.graphics.Outline: void set(android.graphics.Outline)>
<android.graphics.Outline: void setAlpha(float)>
<android.graphics.Outline: boolean canClip()>
<android.graphics.Outline: void offset(int,int)>
<android.graphics.Outline: void setRect(android.graphics.Rect)>
<android.graphics.Outline: void setRoundRect(android.graphics.Rect,float)>
<android.graphics.Outline: float getAlpha()>
<android.graphics.Outline: float getRadius()>
<android.graphics.Outline: void setEmpty()>
<android.graphics.Outline: void setRoundRect(int,int,int,int,float)>
<android.graphics.Outline: void setOval(int,int,int,int)>
<android.graphics.Outline: boolean isEmpty()>
<android.graphics.Outline: void <init>()>
<android.graphics.Outline: void setConvexPath(android.graphics.Path)>
<android.graphics.Outline: void setOval(android.graphics.Rect)>
<android.graphics.Outline: void setRect(int,int,int,int)>
<android.graphics.Outline: boolean getRect(android.graphics.Rect)>
<android.graphics.Outline: void <init>(android.graphics.Outline)>
<android.text.util.Linkify.MatchFilter: boolean acceptMatch(CharSequence,int,int)>
<android.preference.PreferenceFragment: android.preference.Preference findPreference(CharSequence)>
<android.preference.PreferenceFragment: android.preference.PreferenceManager getPreferenceManager()>
<android.preference.PreferenceFragment: void addPreferencesFromResource(@XmlResint)>
<android.preference.PreferenceFragment: android.preference.PreferenceScreen getPreferenceScreen()>
<android.preference.PreferenceFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)>
<android.preference.PreferenceFragment: void addPreferencesFromIntent(android.content.Intent)>
<android.preference.PreferenceFragment: void setPreferenceScreen(android.preference.PreferenceScreen)>
<android.preference.PreferenceFragment: void <init>()>
<javax.crypto.spec.PSource.PSpecified: byte[] getValue()>
<javax.crypto.spec.PSource.PSpecified: void <init>(byte[])>
<java.nio.file.ReadOnlyFileSystemException: void <init>()>
<android.text.SpannedString: void <init>(CharSequence)>
<android.text.SpannedString: int getSpanEnd(java.lang.Object)>
<android.text.SpannedString: T[] getSpans(int,int,java.lang.Class)>
<android.text.SpannedString: int nextSpanTransition(int,int,java.lang.Class)>
<android.text.SpannedString: int getSpanFlags(java.lang.Object)>
<android.text.SpannedString: CharSequence subSequence(int,int)>
<android.text.SpannedString: android.text.SpannedString valueOf(CharSequence)>
<android.text.SpannedString: char charAt(int)>
<android.text.SpannedString: void getChars(int,int,char[],int)>
<android.text.SpannedString: int length()>
<android.text.SpannedString: int getSpanStart(java.lang.Object)>
<android.graphics.text.MeasuredText: float getWidth(int,int)>
<android.graphics.text.MeasuredText: float getCharWidthAt(int)>
<android.graphics.text.MeasuredText: void getBounds(int,int,android.graphics.Rect)>
<android.os.HardwarePropertiesManager: android.os.CpuUsageInfo[] getCpuUsages()>
<android.os.HardwarePropertiesManager: float[] getFanSpeeds()>
<android.os.HardwarePropertiesManager: float[] getDeviceTemperatures(int,int)>
<android.net.http.SslCertificate.DName: java.lang.String getOName()>
<android.net.http.SslCertificate.DName: void <init>(String)>
<android.net.http.SslCertificate.DName: java.lang.String getUName()>
<android.net.http.SslCertificate.DName: java.lang.String getCName()>
<android.net.http.SslCertificate.DName: java.lang.String getDName()>
<android.os.Environment: java.io.File getOemDirectory()>
<android.os.Environment: java.io.File getDataDirectory()>
<android.os.Environment: java.io.File getOdmDirectory()>
<android.os.Environment: java.io.File getProductDirectory()>
<android.os.Environment: java.lang.String getExternalStorageState()>
<android.os.Environment: boolean isExternalStorageRemovable(java.io.File)>
<android.os.Environment: java.lang.String getExternalStorageState(java.io.File)>
<android.os.Environment: java.io.File getProductServicesDirectory()>
<android.os.Environment: boolean isExternalStorageLegacy()>
<android.os.Environment: boolean isExternalStorageEmulated(java.io.File)>
<android.os.Environment: boolean isExternalStorageEmulated()>
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>
<android.os.Environment: java.io.File getExternalStorageDirectory()>
<android.os.Environment: java.lang.String getStorageState(java.io.File)>
<android.os.Environment: boolean isExternalStorageRemovable()>
<android.os.Environment: boolean isExternalStorageLegacy(java.io.File)>
<android.os.Environment: java.io.File buildPath(java.io.File,java.lang.String...)>
<android.os.Environment: java.io.File getVendorDirectory()>
<android.os.Environment: java.io.File getStorageDirectory()>
<android.os.Environment: java.io.File getRootDirectory()>
<android.os.Environment: java.io.File getDownloadCacheDirectory()>
<android.os.Environment: void <init>()>
<android.media.AudioFormat: int getBytesPerSample(int)>
<android.media.AudioFormat: int getEncoding()>
<android.media.AudioFormat: boolean isEncodingLinearPcm(int)>
<android.media.AudioFormat: int getSampleRate()>
<android.media.AudioFormat: int describeContents()>
<android.media.AudioFormat: int channelCountFromOutChannelMask(int)>
<android.media.AudioFormat: int getFrameSizeInBytes()>
<android.media.AudioFormat: int channelCountFromInChannelMask(int)>
<android.media.AudioFormat: int getChannelMask()>
<android.media.AudioFormat: void writeToParcel(android.os.Parcel,int)>
<android.media.AudioFormat: int getChannelCount()>
<android.media.AudioFormat: int getChannelIndexMask()>
<android.view.accessibility.AccessibilityNodeInfo.RangeInfo: int getType()>
<android.view.accessibility.AccessibilityNodeInfo.RangeInfo: android.view.accessibility.AccessibilityNodeInfo.RangeInfo obtain(int,float,float,float)>
<android.view.accessibility.AccessibilityNodeInfo.RangeInfo: float getMin()>
<android.view.accessibility.AccessibilityNodeInfo.RangeInfo: float getCurrent()>
<android.view.accessibility.AccessibilityNodeInfo.RangeInfo: float getMax()>
<java.util.FormatFlagsConversionMismatchException: char getConversion()>
<java.util.FormatFlagsConversionMismatchException: java.lang.String getFlags()>
<java.util.FormatFlagsConversionMismatchException: void <init>(String,char)>
<android.print.PrintJob: boolean isCancelled()>
<android.print.PrintJob: boolean isFailed()>
<android.print.PrintJob: boolean isStarted()>
<android.print.PrintJob: boolean isBlocked()>
<android.print.PrintJob: boolean isQueued()>
<android.print.PrintJob: boolean isCompleted()>
<android.print.PrintJob: void restart()>
<android.print.PrintJob: android.print.PrintJobInfo getInfo()>
<android.print.PrintJob: void cancel()>
<android.print.PrintJob: android.print.PrintJobId getId()>
<android.telephony.data.DataCallResponse.Builder: android.telephony.data.DataCallResponse.Builder setPcscfAddresses(java.util.List)>
<android.telephony.data.DataCallResponse.Builder: android.telephony.data.DataCallResponse.Builder setId(int)>
<android.telephony.data.DataCallResponse.Builder: android.telephony.data.DataCallResponse.Builder setLinkStatus(int)>
<android.telephony.data.DataCallResponse.Builder: android.telephony.data.DataCallResponse.Builder setCause(int)>
<android.telephony.data.DataCallResponse.Builder: android.telephony.data.DataCallResponse.Builder setProtocolType(int)>
<android.telephony.data.DataCallResponse.Builder: void <init>()>
<android.telephony.data.DataCallResponse.Builder: android.telephony.data.DataCallResponse.Builder setDnsAddresses(java.util.List)>
<android.telephony.data.DataCallResponse.Builder: android.telephony.data.DataCallResponse.Builder setMtu(int)>
<android.telephony.data.DataCallResponse.Builder: android.telephony.data.DataCallResponse.Builder setGatewayAddresses(java.util.List)>
<android.telephony.data.DataCallResponse.Builder: android.telephony.data.DataCallResponse.Builder setAddresses(java.util.List)>
<android.telephony.data.DataCallResponse.Builder: android.telephony.data.DataCallResponse.Builder setInterfaceName(java.lang.String)>
<android.telephony.data.DataCallResponse.Builder: android.telephony.data.DataCallResponse build()>
<android.telephony.data.DataCallResponse.Builder: android.telephony.data.DataCallResponse.Builder setSuggestedRetryTime(int)>
<android.text.method.CharacterPickerDialog: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
<android.text.method.CharacterPickerDialog: void <init>(android.content.Context,android.view.View,android.text.Editable,String,boolean)>
<android.text.method.CharacterPickerDialog: void onClick(android.view.View)>
<android.telephony.UiccAccessRule: int getCarrierPrivilegeStatus(android.content.pm.PackageInfo)>
<android.telephony.UiccAccessRule: int getCarrierPrivilegeStatus(android.content.pm.Signature,java.lang.String)>
<android.telephony.UiccAccessRule: void writeToParcel(android.os.Parcel,int)>
<android.telephony.UiccAccessRule: int describeContents()>
<android.telephony.UiccAccessRule: java.lang.String getCertificateHexString()>
<android.telephony.UiccAccessRule: java.lang.String getPackageName()>
<android.telephony.UiccAccessRule: void <init>(byte[],String,long)>
<android.app.Application.OnProvideAssistDataListener: void onProvideAssistData(android.app.Activity,android.os.Bundle)>
<android.media.audiofx.BassBoost.Settings: void <init>()>
<android.media.audiofx.BassBoost.Settings: void <init>(String)>
<android.service.voice.VoiceInteractionSessionService: void <init>()>
<android.service.voice.VoiceInteractionSessionService: android.os.IBinder onBind(android.content.Intent)>
<android.service.voice.VoiceInteractionSessionService: android.service.voice.VoiceInteractionSession onNewSession(android.os.Bundle)>
<android.text.Annotation: void writeToParcel(android.os.Parcel,int)>
<android.text.Annotation: java.lang.String getValue()>
<android.text.Annotation: int getSpanTypeId()>
<android.text.Annotation: void <init>(String,String)>
<android.text.Annotation: int describeContents()>
<android.text.Annotation: java.lang.String getKey()>
<android.text.Annotation: void <init>(android.os.Parcel)>
<android.view.SurfaceHolder.Callback2 extends android.view.SurfaceHolder.Callback: void surfaceRedrawNeededAsync(android.view.SurfaceHolder,Runnable)>
<android.view.SurfaceHolder.Callback2 extends android.view.SurfaceHolder.Callback: void surfaceRedrawNeeded(android.view.SurfaceHolder)>
<android.service.attention.AttentionService.AttentionCallback: void onSuccess(int,long)>
<android.service.attention.AttentionService.AttentionCallback: void onFailure(int)>
<android.view.KeyCharacterMap.UnavailableException: void <init>(String)>
<android.os.ProxyFileDescriptorCallback: void <init>()>
<android.os.ProxyFileDescriptorCallback: int onWrite(long,int,byte[])>
<android.os.ProxyFileDescriptorCallback: void onFsync()>
<android.os.ProxyFileDescriptorCallback: long onGetSize()>
<android.os.ProxyFileDescriptorCallback: int onRead(long,int,byte[])>
<android.os.ProxyFileDescriptorCallback: void onRelease()>
<android.telecom.RemoteConference: void merge()>
<android.telecom.RemoteConference: void hold()>
<android.telecom.RemoteConference: void separate(android.telecom.RemoteConnection)>
<android.telecom.RemoteConference: void unhold()>
<android.telecom.RemoteConference: void swap()>
<android.telecom.RemoteConference: android.os.Bundle getExtras()>
<android.telecom.RemoteConference: int getConnectionProperties()>
<android.telecom.RemoteConference: void registerCallback(android.telecom.RemoteConference.Callback)>
<android.telecom.RemoteConference: int getState()>
<android.telecom.RemoteConference: int getConnectionCapabilities()>
<android.telecom.RemoteConference: void setAudioState(android.telecom.AudioState)>
<android.telecom.RemoteConference: void disconnect()>
<android.telecom.RemoteConference: java.util.List getConnections()>
<android.telecom.RemoteConference: void stopDtmfTone()>
<android.telecom.RemoteConference: void setCallAudioState(android.telecom.CallAudioState)>
<android.telecom.RemoteConference: void playDtmfTone(char)>
<android.telecom.RemoteConference: java.util.List getConferenceableConnections()>
<android.telecom.RemoteConference: void registerCallback(android.telecom.RemoteConference.Callback,android.os.Handler)>
<android.telecom.RemoteConference: void unregisterCallback(android.telecom.RemoteConference.Callback)>
<android.telecom.RemoteConference: android.telecom.DisconnectCause getDisconnectCause()>
<android.bluetooth.le.PeriodicAdvertisingParameters: int getInterval()>
<android.bluetooth.le.PeriodicAdvertisingParameters: int describeContents()>
<android.bluetooth.le.PeriodicAdvertisingParameters: void writeToParcel(android.os.Parcel,int)>
<android.bluetooth.le.PeriodicAdvertisingParameters: boolean getIncludeTxPower()>
<android.location.GnssMeasurementsEvent.Callback: void onStatusChanged(int)>
<android.location.GnssMeasurementsEvent.Callback: void <init>()>
<android.location.GnssMeasurementsEvent.Callback: void onGnssMeasurementsReceived(android.location.GnssMeasurementsEvent)>
<android.content.RestrictionsManager: android.os.Bundle getApplicationRestrictions()>
<android.content.RestrictionsManager: java.util.List getManifestRestrictions(java.lang.String)>
<android.content.RestrictionsManager: android.content.Intent createLocalApprovalIntent()>
<android.content.RestrictionsManager: void requestPermission(java.lang.String,java.lang.String,android.os.PersistableBundle)>
<android.content.RestrictionsManager: android.os.Bundle convertRestrictionsToBundle(java.util.List)>
<android.content.RestrictionsManager: boolean hasRestrictionsProvider()>
<android.content.RestrictionsManager: void notifyPermissionResponse(java.lang.String,android.os.PersistableBundle)>
<java.nio.file.DirectoryNotEmptyException: void <init>(String)>
<javax.security.auth.SubjectDomainCombiner: javax.security.auth.Subject getSubject()>
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>
<javax.security.auth.SubjectDomainCombiner: void <init>(javax.security.auth.Subject)>
<android.bluetooth.BluetoothGattCallback: void onCharacteristicWrite(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,int)>
<android.bluetooth.BluetoothGattCallback: void onCharacteristicChanged(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic)>
<android.bluetooth.BluetoothGattCallback: void onServicesDiscovered(android.bluetooth.BluetoothGatt,int)>
<android.bluetooth.BluetoothGattCallback: void <init>()>
<android.bluetooth.BluetoothGattCallback: void onDescriptorRead(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,int)>
<android.bluetooth.BluetoothGattCallback: void onDescriptorWrite(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,int)>
<android.bluetooth.BluetoothGattCallback: void onReadRemoteRssi(android.bluetooth.BluetoothGatt,int,int)>
<android.bluetooth.BluetoothGattCallback: void onPhyUpdate(android.bluetooth.BluetoothGatt,int,int,int)>
<android.bluetooth.BluetoothGattCallback: void onCharacteristicRead(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,int)>
<android.bluetooth.BluetoothGattCallback: void onMtuChanged(android.bluetooth.BluetoothGatt,int,int)>
<android.bluetooth.BluetoothGattCallback: void onReliableWriteCompleted(android.bluetooth.BluetoothGatt,int)>
<android.bluetooth.BluetoothGattCallback: void onConnectionStateChange(android.bluetooth.BluetoothGatt,int,int)>
<android.bluetooth.BluetoothGattCallback: void onPhyRead(android.bluetooth.BluetoothGatt,int,int,int)>
<android.widget.RemoteViewsService.RemoteViewsFactory: android.widget.RemoteViews getViewAt(int)>
<android.widget.RemoteViewsService.RemoteViewsFactory: int getViewTypeCount()>
<android.widget.RemoteViewsService.RemoteViewsFactory: void onCreate()>
<android.widget.RemoteViewsService.RemoteViewsFactory: void onDestroy()>
<android.widget.RemoteViewsService.RemoteViewsFactory: long getItemId(int)>
<android.widget.RemoteViewsService.RemoteViewsFactory: android.widget.RemoteViews getLoadingView()>
<android.widget.RemoteViewsService.RemoteViewsFactory: void onDataSetChanged()>
<android.widget.RemoteViewsService.RemoteViewsFactory: boolean hasStableIds()>
<android.widget.RemoteViewsService.RemoteViewsFactory: int getCount()>
<android.preference.PreferenceFragment.OnPreferenceStartFragmentCallback: boolean onPreferenceStartFragment(android.preference.PreferenceFragment,android.preference.Preference)>
<java.security.KeyStoreSpi: java.util.Enumeration engineAliases()>
<java.security.KeyStoreSpi: void engineStore(java.io.OutputStream,char[])>
<java.security.KeyStoreSpi: void engineLoad(java.io.InputStream,char[])>
<java.security.KeyStoreSpi: int engineSize()>
<java.security.KeyStoreSpi: boolean engineEntryInstanceOf(java.lang.String,java.lang.Class)>
<java.security.KeyStoreSpi: void <init>()>
<java.security.KeyStoreSpi: void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate)>
<java.security.KeyStoreSpi: boolean engineContainsAlias(java.lang.String)>
<java.security.KeyStoreSpi: java.security.Key engineGetKey(java.lang.String,char[])>
<java.security.KeyStoreSpi: java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String)>
<java.security.KeyStoreSpi: boolean engineIsCertificateEntry(java.lang.String)>
<java.security.KeyStoreSpi: void engineStore(java.security.KeyStore.LoadStoreParameter)>
<java.security.KeyStoreSpi: void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>
<java.security.KeyStoreSpi: java.lang.String engineGetCertificateAlias(java.security.cert.Certificate)>
<java.security.KeyStoreSpi: void engineSetEntry(java.lang.String,java.security.KeyStore.Entry,java.security.KeyStore.ProtectionParameter)>
<java.security.KeyStoreSpi: void engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[])>
<java.security.KeyStoreSpi: void engineLoad(java.security.KeyStore.LoadStoreParameter)>
<java.security.KeyStoreSpi: java.security.KeyStore.Entry engineGetEntry(java.lang.String,java.security.KeyStore.ProtectionParameter)>
<java.security.KeyStoreSpi: boolean engineIsKeyEntry(java.lang.String)>
<java.security.KeyStoreSpi: void engineDeleteEntry(java.lang.String)>
<java.security.KeyStoreSpi: java.util.Date engineGetCreationDate(java.lang.String)>
<java.security.KeyStoreSpi: java.security.cert.Certificate engineGetCertificate(java.lang.String)>
<android.graphics.BlendModeColorFilter: void <init>(@ColorInt int,android.graphics.BlendMode)>
<android.graphics.BlendModeColorFilter: android.graphics.BlendMode getMode()>
<android.graphics.BlendModeColorFilter: int getColor()>
<android.media.DeniedByServerException: void <init>(String)>
<android.database.MatrixCursor.RowBuilder: android.database.MatrixCursor.RowBuilder add(java.lang.Object)>
<android.database.MatrixCursor.RowBuilder: android.database.MatrixCursor.RowBuilder add(java.lang.String,java.lang.Object)>
<java.sql.SQLTransactionRollbackException: void <init>(String)>
<java.sql.SQLTransactionRollbackException: void <init>(String,String,int)>
<java.sql.SQLTransactionRollbackException: void <init>(String,String)>
<java.sql.SQLTransactionRollbackException: void <init>(String,Throwable)>
<java.sql.SQLTransactionRollbackException: void <init>(String,String,Throwable)>
<java.sql.SQLTransactionRollbackException: void <init>(Throwable)>
<java.sql.SQLTransactionRollbackException: void <init>()>
<java.sql.SQLTransactionRollbackException: void <init>(String,String,int,Throwable)>
<android.hardware.camera2.params.TonemapCurve: void copyColorCurve(int,float[],int)>
<android.hardware.camera2.params.TonemapCurve: int getPointCount(int)>
<android.hardware.camera2.params.TonemapCurve: void <init>(float[],float[],float[])>
<android.hardware.camera2.params.TonemapCurve: android.graphics.PointF getPoint(int,int)>
<android.media.CamcorderProfile: boolean hasProfile(int,int)>
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int)>
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int,int)>
<android.media.CamcorderProfile: boolean hasProfile(int)>
<android.text.style.TtsSpan.VerbatimBuilder: void <init>()>
<android.text.style.TtsSpan.VerbatimBuilder: android.text.style.TtsSpan.VerbatimBuilder setVerbatim(java.lang.String)>
<android.text.style.TtsSpan.VerbatimBuilder: void <init>(String)>
<android.app.slice.SliceManager: java.util.List getPinnedSlices()>
<android.app.slice.SliceManager: java.util.Set getPinnedSpecs(android.net.Uri)>
<android.app.slice.SliceManager: void revokeSlicePermission(java.lang.String,android.net.Uri)>
<android.app.slice.SliceManager: void grantSlicePermission(java.lang.String,android.net.Uri)>
<android.app.slice.SliceManager: android.app.slice.Slice bindSlice(android.net.Uri,java.util.Set)>
<android.app.slice.SliceManager: int checkSlicePermission(android.net.Uri,int,int)>
<android.app.slice.SliceManager: void unpinSlice(android.net.Uri)>
<android.app.slice.SliceManager: void pinSlice(android.net.Uri,java.util.Set)>
<android.app.slice.SliceManager: android.app.slice.Slice bindSlice(android.content.Intent,java.util.Set)>
<android.app.slice.SliceManager: android.net.Uri mapIntentToUri(android.content.Intent)>
<android.app.slice.SliceManager: java.util.Collection getSliceDescendants(android.net.Uri)>
<android.app.slice.SliceItem: int describeContents()>
<android.app.slice.SliceItem: java.lang.String getSubType()>
<android.app.slice.SliceItem: android.graphics.drawable.Icon getIcon()>
<android.app.slice.SliceItem: android.app.PendingIntent getAction()>
<android.app.slice.SliceItem: java.util.List getHints()>
<android.app.slice.SliceItem: int getInt()>
<android.app.slice.SliceItem: android.os.Bundle getBundle()>
<android.app.slice.SliceItem: android.app.slice.Slice getSlice()>
<android.app.slice.SliceItem: boolean hasHint(java.lang.String)>
<android.app.slice.SliceItem: android.app.RemoteInput getRemoteInput()>
<android.app.slice.SliceItem: CharSequence getText()>
<android.app.slice.SliceItem: void writeToParcel(android.os.Parcel,int)>
<android.app.slice.SliceItem: java.lang.String getFormat()>
<android.app.slice.SliceItem: long getLong()>
<android.text.format.DateUtils: java.util.Formatter formatDateRange(android.content.Context,java.util.Formatter,long,long,int,java.lang.String)>
<android.text.format.DateUtils: CharSequence getRelativeTimeSpanString(long,long,long)>
<android.text.format.DateUtils: java.lang.String formatElapsedTime(java.lang.StringBuilder,long)>
<android.text.format.DateUtils: CharSequence getRelativeDateTimeString(android.content.Context,long,long,long,int)>
<android.text.format.DateUtils: java.util.Formatter formatDateRange(android.content.Context,java.util.Formatter,long,long,int)>
<android.text.format.DateUtils: CharSequence getRelativeTimeSpanString(android.content.Context,long,boolean)>
<android.text.format.DateUtils: CharSequence getRelativeTimeSpanString(long,long,long,int)>
<android.text.format.DateUtils: CharSequence getRelativeTimeSpanString(android.content.Context,long)>
<android.text.format.DateUtils: java.lang.String getAMPMString(int)>
<android.text.format.DateUtils: boolean isToday(long)>
<android.text.format.DateUtils: CharSequence formatSameDayTime(long,long,int,int)>
<android.text.format.DateUtils: java.lang.String formatDateTime(android.content.Context,long,int)>
<android.text.format.DateUtils: CharSequence getRelativeTimeSpanString(long)>
<android.text.format.DateUtils: void <init>()>
<android.text.format.DateUtils: java.lang.String getDayOfWeekString(int,int)>
<android.text.format.DateUtils: java.lang.String formatElapsedTime(long)>
<android.text.format.DateUtils: java.lang.String getMonthString(int,int)>
<android.text.format.DateUtils: java.lang.String formatDateRange(android.content.Context,long,long,int)>
<org.w3c.dom.ProcessingInstruction extends org.w3c.dom.Node: void setData(java.lang.String)>
<org.w3c.dom.ProcessingInstruction extends org.w3c.dom.Node: java.lang.String getData()>
<org.w3c.dom.ProcessingInstruction extends org.w3c.dom.Node: java.lang.String getTarget()>
<javax.net.ssl.SSLSocket: void setEnabledProtocols(java.lang.String[])>
<javax.net.ssl.SSLSocket: void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)>
<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getHandshakeSession()>
<javax.net.ssl.SSLSocket: void setSSLParameters(javax.net.ssl.SSLParameters)>
<javax.net.ssl.SSLSocket: void setWantClientAuth(boolean)>
<javax.net.ssl.SSLSocket: boolean getUseClientMode()>
<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>
<javax.net.ssl.SSLSocket: void <init>(String,int)>
<javax.net.ssl.SSLSocket: void setUseClientMode(boolean)>
<javax.net.ssl.SSLSocket: void <init>(java.net.InetAddress,int)>
<javax.net.ssl.SSLSocket: void removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)>
<javax.net.ssl.SSLSocket: boolean getEnableSessionCreation()>
<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedProtocols()>
<javax.net.ssl.SSLSocket: void <init>()>
<javax.net.ssl.SSLSocket: java.lang.String getHandshakeApplicationProtocol()>
<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>
<javax.net.ssl.SSLSocket: void setNeedClientAuth(boolean)>
<javax.net.ssl.SSLSocket: boolean getWantClientAuth()>
<javax.net.ssl.SSLSocket: void setHandshakeApplicationProtocolSelector(java.util.function.BiFunction)>
<javax.net.ssl.SSLSocket: void <init>(String,int,java.net.InetAddress,int)>
<javax.net.ssl.SSLSocket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)>
<javax.net.ssl.SSLSocket: void startHandshake()>
<javax.net.ssl.SSLSocket: javax.net.ssl.SSLParameters getSSLParameters()>
<javax.net.ssl.SSLSocket: void setEnabledCipherSuites(java.lang.String[])>
<javax.net.ssl.SSLSocket: java.lang.String getApplicationProtocol()>
<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedCipherSuites()>
<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledProtocols()>
<javax.net.ssl.SSLSocket: boolean getNeedClientAuth()>
<javax.net.ssl.SSLSocket: void setEnableSessionCreation(boolean)>
<javax.net.ssl.SSLSocket: java.util.function.BiFunction getHandshakeApplicationProtocolSelector()>
<java.security.Security: int addProvider(java.security.Provider)>
<java.security.Security: int insertProviderAt(java.security.Provider,int)>
<java.security.Security: java.lang.String getProperty(java.lang.String)>
<java.security.Security: java.security.Provider[] getProviders(java.util.Map)>
<java.security.Security: java.security.Provider getProvider(java.lang.String)>
<java.security.Security: void removeProvider(java.lang.String)>
<java.security.Security: java.lang.String getAlgorithmProperty(java.lang.String,java.lang.String)>
<java.security.Security: java.util.Set getAlgorithms(java.lang.String)>
<java.security.Security: java.security.Provider[] getProviders(java.lang.String)>
<java.security.Security: void setProperty(java.lang.String,java.lang.String)>
<java.security.Security: java.security.Provider[] getProviders()>
<android.inputmethodservice.InputMethodService.InputMethodImpl: void <init>()>
<android.inputmethodservice.InputMethodService.InputMethodImpl: void hideSoftInput(int,android.os.ResultReceiver)>
<android.inputmethodservice.InputMethodService.InputMethodImpl: void showSoftInput(int,android.os.ResultReceiver)>
<android.inputmethodservice.InputMethodService.InputMethodImpl: void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>
<android.inputmethodservice.InputMethodService.InputMethodImpl: void restartInput(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)>
<android.inputmethodservice.InputMethodService.InputMethodImpl: void startInput(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)>
<android.inputmethodservice.InputMethodService.InputMethodImpl: void unbindInput()>
<android.inputmethodservice.InputMethodService.InputMethodImpl: void attachToken(android.os.IBinder)>
<android.inputmethodservice.InputMethodService.InputMethodImpl: void bindInput(android.view.inputmethod.InputBinding)>
<android.location.GnssMeasurement: void setCn0DbHz(double)>
<android.location.GnssMeasurement: void setTimeOffsetNanos(double)>
<android.location.GnssMeasurement: double getAccumulatedDeltaRangeUncertaintyMeters()>
<android.location.GnssMeasurement: void setAccumulatedDeltaRangeUncertaintyMeters(double)>
<android.location.GnssMeasurement: void setPseudorangeRateMetersPerSecond(double)>
<android.location.GnssMeasurement: double getPseudorangeRateUncertaintyMetersPerSecond()>
<android.location.GnssMeasurement: boolean hasCodeType()>
<android.location.GnssMeasurement: double getCarrierPhase()>
<android.location.GnssMeasurement: long getCarrierCycles()>
<android.location.GnssMeasurement: void setCarrierPhaseUncertainty(double)>
<android.location.GnssMeasurement: void resetAutomaticGainControlLevel()>
<android.location.GnssMeasurement: void setCodeType(java.lang.String)>
<android.location.GnssMeasurement: boolean hasCarrierPhase()>
<android.location.GnssMeasurement: void setAccumulatedDeltaRangeState(int)>
<android.location.GnssMeasurement: void setState(int)>
<android.location.GnssMeasurement: int getConstellationType()>
<android.location.GnssMeasurement: void resetCarrierPhase()>
<android.location.GnssMeasurement: double getPseudorangeRateMetersPerSecond()>
<android.location.GnssMeasurement: void resetCodeType()>
<android.location.GnssMeasurement: void setCarrierFrequencyHz(float)>
<android.location.GnssMeasurement: void setPseudorangeRateUncertaintyMetersPerSecond(double)>
<android.location.GnssMeasurement: void setCarrierPhase(double)>
<android.location.GnssMeasurement: float getCarrierFrequencyHz()>
<android.location.GnssMeasurement: int getAccumulatedDeltaRangeState()>
<android.location.GnssMeasurement: double getTimeOffsetNanos()>
<android.location.GnssMeasurement: void reset()>
<android.location.GnssMeasurement: void setCarrierCycles(long)>
<android.location.GnssMeasurement: void resetCarrierFrequencyHz()>
<android.location.GnssMeasurement: void resetSnrInDb()>
<android.location.GnssMeasurement: void setAutomaticGainControlLevelInDb(double)>
<android.location.GnssMeasurement: double getCn0DbHz()>
<android.location.GnssMeasurement: int getState()>
<android.location.GnssMeasurement: void setSnrInDb(double)>
<android.location.GnssMeasurement: void resetCarrierPhaseUncertainty()>
<android.location.GnssMeasurement: double getSnrInDb()>
<android.location.GnssMeasurement: void setSvid(int)>
<android.location.GnssMeasurement: void setAccumulatedDeltaRangeMeters(double)>
<android.location.GnssMeasurement: int describeContents()>
<android.location.GnssMeasurement: void set(android.location.GnssMeasurement)>
<android.location.GnssMeasurement: boolean hasCarrierFrequencyHz()>
<android.location.GnssMeasurement: java.lang.String getCodeType()>
<android.location.GnssMeasurement: long getReceivedSvTimeUncertaintyNanos()>
<android.location.GnssMeasurement: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssMeasurement: void <init>()>
<android.location.GnssMeasurement: double getAccumulatedDeltaRangeMeters()>
<android.location.GnssMeasurement: boolean hasCarrierCycles()>
<android.location.GnssMeasurement: void setConstellationType(int)>
<android.location.GnssMeasurement: boolean hasSnrInDb()>
<android.location.GnssMeasurement: int getMultipathIndicator()>
<android.location.GnssMeasurement: void setMultipathIndicator(int)>
<android.location.GnssMeasurement: int getSvid()>
<android.location.GnssMeasurement: boolean hasCarrierPhaseUncertainty()>
<android.location.GnssMeasurement: void resetCarrierCycles()>
<android.location.GnssMeasurement: void setReceivedSvTimeNanos(long)>
<android.location.GnssMeasurement: double getAutomaticGainControlLevelDb()>
<android.location.GnssMeasurement: long getReceivedSvTimeNanos()>
<android.location.GnssMeasurement: boolean hasAutomaticGainControlLevelDb()>
<android.location.GnssMeasurement: void setReceivedSvTimeUncertaintyNanos(long)>
<android.location.GnssMeasurement: double getCarrierPhaseUncertainty()>
<java.lang.NullPointerException: void <init>()>
<java.lang.NullPointerException: void <init>(String)>
<android.util.MonthDisplayHelper: int getYear()>
<android.util.MonthDisplayHelper: int getDayAt(int,int)>
<android.util.MonthDisplayHelper: int getMonth()>
<android.util.MonthDisplayHelper: int getWeekStartDay()>
<android.util.MonthDisplayHelper: void nextMonth()>
<android.util.MonthDisplayHelper: int getOffset()>
<android.util.MonthDisplayHelper: int getFirstDayOfMonth()>
<android.util.MonthDisplayHelper: int getColumnOf(int)>
<android.util.MonthDisplayHelper: int[] getDigitsForRow(int)>
<android.util.MonthDisplayHelper: int getRowOf(int)>
<android.util.MonthDisplayHelper: void <init>(int,int,int)>
<android.util.MonthDisplayHelper: void previousMonth()>
<android.util.MonthDisplayHelper: void <init>(int,int)>
<android.util.MonthDisplayHelper: int getNumberOfDaysInMonth()>
<android.util.MonthDisplayHelper: boolean isWithinCurrentMonth(int,int)>
<android.media.MediaCodecInfo: java.lang.String[] getSupportedTypes()>
<android.media.MediaCodecInfo: boolean isVendor()>
<android.media.MediaCodecInfo: android.media.MediaCodecInfo.CodecCapabilities getCapabilitiesForType(java.lang.String)>
<android.media.MediaCodecInfo: java.lang.String getName()>
<android.media.MediaCodecInfo: boolean isEncoder()>
<android.media.MediaCodecInfo: java.lang.String getCanonicalName()>
<android.media.MediaCodecInfo: boolean isHardwareAccelerated()>
<android.media.MediaCodecInfo: boolean isAlias()>
<android.media.MediaCodecInfo: boolean isSoftwareOnly()>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getInstance(android.icu.util.ULocale)>
<android.icu.text.NumberFormat: java.lang.String format(java.math.BigInteger)>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getScientificInstance()>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getNumberInstance(android.icu.util.ULocale)>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getPercentInstance(java.util.Locale)>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getNumberInstance(java.util.Locale)>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getScientificInstance(android.icu.util.ULocale)>
<android.icu.text.NumberFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.NumberFormat: java.lang.String format(android.icu.util.CurrencyAmount)>
<android.icu.text.NumberFormat: java.util.Locale[] getAvailableLocales()>
<android.icu.text.NumberFormat: boolean isParseStrict()>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getIntegerInstance()>
<android.icu.text.NumberFormat: int getMinimumFractionDigits()>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getInstance(java.util.Locale)>
<android.icu.text.NumberFormat: boolean isParseIntegerOnly()>
<android.icu.text.NumberFormat: android.icu.util.Currency getCurrency()>
<android.icu.text.NumberFormat: void setMinimumFractionDigits(int)>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getInstance(int)>
<android.icu.text.NumberFormat: void setMaximumFractionDigits(int)>
<android.icu.text.NumberFormat: java.lang.StringBuffer format(java.math.BigInteger,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.NumberFormat: void setParseStrict(boolean)>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getIntegerInstance(java.util.Locale)>
<android.icu.text.NumberFormat: void setParseIntegerOnly(boolean)>
<android.icu.text.NumberFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.NumberFormat: void setCurrency(android.icu.util.Currency)>
<android.icu.text.NumberFormat: int getMaximumIntegerDigits()>
<android.icu.text.NumberFormat: java.lang.String format(android.icu.math.BigDecimal)>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getPercentInstance()>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getNumberInstance()>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getInstance(android.icu.util.ULocale,int)>
<android.icu.text.NumberFormat: void setMinimumIntegerDigits(int)>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getScientificInstance(java.util.Locale)>
<android.icu.text.NumberFormat: java.lang.String getPattern(android.icu.util.ULocale,int)>
<android.icu.text.NumberFormat: android.icu.text.DisplayContext getContext(android.icu.text.DisplayContext.Type)>
<android.icu.text.NumberFormat: boolean isGroupingUsed()>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getIntegerInstance(android.icu.util.ULocale)>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getPercentInstance(android.icu.util.ULocale)>
<android.icu.text.NumberFormat: java.lang.StringBuffer format(android.icu.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.NumberFormat: java.lang.StringBuffer format(android.icu.util.CurrencyAmount,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getCurrencyInstance(java.util.Locale)>
<android.icu.text.NumberFormat: java.lang.String format(long)>
<android.icu.text.NumberFormat: java.lang.String format(java.math.BigDecimal)>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getCurrencyInstance()>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getCurrencyInstance(android.icu.util.ULocale)>
<android.icu.text.NumberFormat: void <init>()>
<android.icu.text.NumberFormat: void setGroupingUsed(boolean)>
<android.icu.text.NumberFormat: java.lang.String format(double)>
<android.icu.text.NumberFormat: int getMinimumIntegerDigits()>
<android.icu.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>
<android.icu.text.NumberFormat: int getRoundingMode()>
<android.icu.text.NumberFormat: void setContext(android.icu.text.DisplayContext)>
<android.icu.text.NumberFormat: java.lang.StringBuffer format(java.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.NumberFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>
<android.icu.text.NumberFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.NumberFormat: android.icu.util.CurrencyAmount parseCurrency(CharSequence,java.text.ParsePosition)>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getInstance(java.util.Locale,int)>
<android.icu.text.NumberFormat: void setRoundingMode(int)>
<android.icu.text.NumberFormat: java.lang.Number parse(java.lang.String)>
<android.icu.text.NumberFormat: int getMaximumFractionDigits()>
<android.icu.text.NumberFormat: void setMaximumIntegerDigits(int)>
<android.icu.text.NumberFormat: android.icu.text.NumberFormat getInstance()>
<android.service.vr.VrListenerService: void onCurrentVrActivityChanged(android.content.ComponentName)>
<android.service.vr.VrListenerService: boolean isVrModePackageEnabled(android.content.Context,android.content.ComponentName)>
<android.service.vr.VrListenerService: android.os.IBinder onBind(android.content.Intent)>
<android.service.vr.VrListenerService: void <init>()>
<android.net.sip.SipProfile: boolean getAutoRegistration()>
<android.net.sip.SipProfile: java.lang.String getDisplayName()>
<android.net.sip.SipProfile: java.lang.String getUriString()>
<android.net.sip.SipProfile: java.lang.String getAuthUserName()>
<android.net.sip.SipProfile: void writeToParcel(android.os.Parcel,int)>
<android.net.sip.SipProfile: int getPort()>
<android.net.sip.SipProfile: java.lang.String getUserName()>
<android.net.sip.SipProfile: boolean getSendKeepAlive()>
<android.net.sip.SipProfile: java.lang.String getSipDomain()>
<android.net.sip.SipProfile: java.lang.String getProfileName()>
<android.net.sip.SipProfile: int describeContents()>
<android.net.sip.SipProfile: java.lang.String getProxyAddress()>
<android.net.sip.SipProfile: java.lang.String getProtocol()>
<android.net.sip.SipProfile: java.lang.String getPassword()>
<android.media.AudioManager.VolumeGroupCallback: void <init>()>
<android.media.AudioManager.VolumeGroupCallback: void onAudioVolumeGroupChanged(int,int)>
<android.text.method.MovementMethod: void onTakeFocus(android.widget.TextView,android.text.Spannable,int)>
<android.text.method.MovementMethod: boolean onGenericMotionEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.MovementMethod: boolean onKeyUp(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<android.text.method.MovementMethod: boolean onTrackballEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.MovementMethod: boolean canSelectArbitrarily()>
<android.text.method.MovementMethod: boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.MovementMethod: boolean onKeyOther(android.widget.TextView,android.text.Spannable,android.view.KeyEvent)>
<android.text.method.MovementMethod: void initialize(android.widget.TextView,android.text.Spannable)>
<android.text.method.MovementMethod: boolean onKeyDown(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<android.icu.text.ListFormatter: java.lang.String format(java.lang.Object...)>
<android.icu.text.ListFormatter: android.icu.text.ListFormatter getInstance(java.util.Locale)>
<android.icu.text.ListFormatter: android.icu.text.ListFormatter getInstance(android.icu.util.ULocale)>
<android.icu.text.ListFormatter: java.lang.String getPatternForNumItems(int)>
<android.icu.text.ListFormatter: java.lang.String format(java.util.Collection)>
<android.icu.text.ListFormatter: android.icu.text.ListFormatter getInstance()>
<java.net.SecureCacheResponse: void <init>()>
<java.net.SecureCacheResponse: java.lang.String getCipherSuite()>
<java.net.SecureCacheResponse: java.util.List getServerCertificateChain()>
<java.net.SecureCacheResponse: java.security.Principal getPeerPrincipal()>
<java.net.SecureCacheResponse: java.util.List getLocalCertificateChain()>
<java.net.SecureCacheResponse: java.security.Principal getLocalPrincipal()>
<java.util.AbstractSequentialList: void <init>()>
<java.util.AbstractSequentialList: E get(int)>
<android.inputmethodservice.KeyboardView.OnKeyboardActionListener: void swipeRight()>
<android.inputmethodservice.KeyboardView.OnKeyboardActionListener: void onPress(int)>
<android.inputmethodservice.KeyboardView.OnKeyboardActionListener: void swipeDown()>
<android.inputmethodservice.KeyboardView.OnKeyboardActionListener: void onKey(int,int[])>
<android.inputmethodservice.KeyboardView.OnKeyboardActionListener: void swipeLeft()>
<android.inputmethodservice.KeyboardView.OnKeyboardActionListener: void onRelease(int)>
<android.inputmethodservice.KeyboardView.OnKeyboardActionListener: void onText(CharSequence)>
<android.inputmethodservice.KeyboardView.OnKeyboardActionListener: void swipeUp()>
<android.util.StateSet: int[] trimStateSet(int[],int)>
<android.util.StateSet: boolean stateSetMatches(int[],int[])>
<android.util.StateSet: boolean isWildCard(int[])>
<android.util.StateSet: java.lang.String dump(int[])>
<android.util.StateSet: boolean stateSetMatches(int[],int)>
<android.graphics.drawable.TransitionDrawable: void setCrossFadeEnabled(boolean)>
<android.graphics.drawable.TransitionDrawable: void startTransition(int)>
<android.graphics.drawable.TransitionDrawable: void reverseTransition(int)>
<android.graphics.drawable.TransitionDrawable: void resetTransition()>
<android.graphics.drawable.TransitionDrawable: boolean isCrossFadeEnabled()>
<android.graphics.drawable.TransitionDrawable: void <init>(android.graphics.drawable.Drawable[])>
<android.net.wifi.hotspot2.OsuProvider: int describeContents()>
<android.net.wifi.hotspot2.OsuProvider: java.lang.String getFriendlyName()>
<android.net.wifi.hotspot2.OsuProvider: android.net.Uri getServerUri()>
<android.net.wifi.hotspot2.OsuProvider: void writeToParcel(android.os.Parcel,int)>
<android.inputmethodservice.Keyboard.Row: void <init>(android.content.res.Resources,android.inputmethodservice.Keyboard,android.content.res.XmlResourceParser)>
<android.inputmethodservice.Keyboard.Row: void <init>(android.inputmethodservice.Keyboard)>
<java.security.MessageDigestSpi: void <init>()>
<java.security.MessageDigestSpi: void engineReset()>
<java.security.MessageDigestSpi: void engineUpdate(byte)>
<java.security.MessageDigestSpi: java.lang.Object clone()>
<java.security.MessageDigestSpi: int engineGetDigestLength()>
<java.security.MessageDigestSpi: byte[] engineDigest()>
<java.security.MessageDigestSpi: void engineUpdate(byte[],int,int)>
<java.security.MessageDigestSpi: int engineDigest(byte[],int,int)>
<java.security.MessageDigestSpi: void engineUpdate(java.nio.ByteBuffer)>
<android.widget.CursorAdapter: android.content.res.Resources.Theme getDropDownViewTheme()>
<android.widget.CursorAdapter: int getCount()>
<android.widget.CursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.CursorAdapter: android.database.Cursor getCursor()>
<android.widget.CursorAdapter: long getItemId(int)>
<android.widget.CursorAdapter: void setFilterQueryProvider(android.widget.FilterQueryProvider)>
<android.widget.CursorAdapter: void <init>(android.content.Context,android.database.Cursor)>
<android.widget.CursorAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)>
<android.widget.CursorAdapter: void setDropDownViewTheme(android.content.res.Resources.Theme)>
<android.widget.CursorAdapter: void init(android.content.Context,android.database.Cursor,boolean)>
<android.widget.CursorAdapter: void onContentChanged()>
<android.widget.CursorAdapter: android.database.Cursor runQueryOnBackgroundThread(CharSequence)>
<android.widget.CursorAdapter: android.widget.Filter getFilter()>
<android.widget.CursorAdapter: void <init>(android.content.Context,android.database.Cursor,boolean)>
<android.widget.CursorAdapter: void changeCursor(android.database.Cursor)>
<android.widget.CursorAdapter: java.lang.Object getItem(int)>
<android.widget.CursorAdapter: android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<android.widget.CursorAdapter: void <init>(android.content.Context,android.database.Cursor,int)>
<android.widget.CursorAdapter: CharSequence convertToString(android.database.Cursor)>
<android.widget.CursorAdapter: android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<android.widget.CursorAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()>
<android.widget.CursorAdapter: android.database.Cursor swapCursor(android.database.Cursor)>
<java.util.stream.IntStream.Builder extends java.util.function.IntConsumer: java.util.stream.IntStream.Builder add(int)>
<java.util.stream.IntStream.Builder extends java.util.function.IntConsumer: java.util.stream.IntStream build()>
<android.app.backup.RestoreSession: int restorePackages(long,android.app.backup.RestoreObserver,java.util.Set,android.app.backup.BackupManagerMonitor)>
<android.app.backup.RestoreSession: int restoreAll(long,android.app.backup.RestoreObserver)>
<android.app.backup.RestoreSession: int getAvailableRestoreSets(android.app.backup.RestoreObserver,android.app.backup.BackupManagerMonitor)>
<android.app.backup.RestoreSession: int getAvailableRestoreSets(android.app.backup.RestoreObserver)>
<android.app.backup.RestoreSession: int restorePackages(long,android.app.backup.RestoreObserver,java.util.Set)>
<android.app.backup.RestoreSession: int restorePackage(java.lang.String,android.app.backup.RestoreObserver)>
<android.app.backup.RestoreSession: int restorePackage(java.lang.String,android.app.backup.RestoreObserver,android.app.backup.BackupManagerMonitor)>
<android.app.backup.RestoreSession: int restoreAll(long,android.app.backup.RestoreObserver,android.app.backup.BackupManagerMonitor)>
<android.app.backup.RestoreSession: void endRestoreSession()>
<android.text.method.BaseMovementMethod: int getMovementMetaState(android.text.Spannable,android.view.KeyEvent)>
<android.text.method.BaseMovementMethod: boolean pageDown(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean canSelectArbitrarily()>
<android.text.method.BaseMovementMethod: boolean lineStart(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean onGenericMotionEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.BaseMovementMethod: boolean bottom(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean down(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean pageUp(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean right(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean home(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: void initialize(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean end(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.BaseMovementMethod: boolean onKeyOther(android.widget.TextView,android.text.Spannable,android.view.KeyEvent)>
<android.text.method.BaseMovementMethod: boolean onKeyUp(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<android.text.method.BaseMovementMethod: void onTakeFocus(android.widget.TextView,android.text.Spannable,int)>
<android.text.method.BaseMovementMethod: boolean handleMovementKey(android.widget.TextView,android.text.Spannable,int,int,android.view.KeyEvent)>
<android.text.method.BaseMovementMethod: boolean lineEnd(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean up(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean top(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean left(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean onTrackballEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.BaseMovementMethod: void <init>()>
<android.text.method.BaseMovementMethod: boolean onKeyDown(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<android.app.DirectAction: void writeToParcel(android.os.Parcel,int)>
<android.app.DirectAction: int describeContents()>
<android.app.DirectAction: android.os.Bundle getExtras()>
<android.app.DirectAction: java.lang.String getId()>
<android.app.DirectAction: android.content.LocusId getLocusId()>
<android.view.animation.DecelerateInterpolator: void <init>(float)>
<android.view.animation.DecelerateInterpolator: void <init>()>
<android.view.animation.DecelerateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.DecelerateInterpolator: float getInterpolation(float)>
<android.app.VoiceInteractor.Request: void onDetached()>
<android.app.VoiceInteractor.Request: void cancel()>
<android.app.VoiceInteractor.Request: void onCancel()>
<android.app.VoiceInteractor.Request: void onAttached(android.app.Activity)>
<android.app.VoiceInteractor.Request: android.app.Activity getActivity()>
<android.app.VoiceInteractor.Request: java.lang.String getName()>
<android.app.VoiceInteractor.Request: android.content.Context getContext()>
<android.accounts.AccountAuthenticatorResponse: int describeContents()>
<android.accounts.AccountAuthenticatorResponse: void <init>(android.os.Parcel)>
<android.accounts.AccountAuthenticatorResponse: void onRequestContinued()>
<android.accounts.AccountAuthenticatorResponse: void onResult(android.os.Bundle)>
<android.accounts.AccountAuthenticatorResponse: void writeToParcel(android.os.Parcel,int)>
<android.accounts.AccountAuthenticatorResponse: void onError(int,java.lang.String)>
<android.webkit.WebViewUpdateService: android.webkit.WebViewProviderInfo[] getAllWebViewPackages()>
<android.webkit.WebViewUpdateService: android.webkit.WebViewProviderInfo[] getValidWebViewPackages()>
<android.webkit.WebViewUpdateService: java.lang.String getCurrentWebViewPackageName()>
<android.graphics.pdf.PdfRenderer: int getPageCount()>
<android.graphics.pdf.PdfRenderer: void <init>(android.os.ParcelFileDescriptor)>
<android.graphics.pdf.PdfRenderer: boolean shouldScaleForPrinting()>
<android.graphics.pdf.PdfRenderer: android.graphics.pdf.PdfRenderer.Page openPage(int)>
<android.graphics.pdf.PdfRenderer: void close()>
<java.sql.SQLSyntaxErrorException: void <init>(String,String)>
<java.sql.SQLSyntaxErrorException: void <init>(Throwable)>
<java.sql.SQLSyntaxErrorException: void <init>(String)>
<java.sql.SQLSyntaxErrorException: void <init>(String,Throwable)>
<java.sql.SQLSyntaxErrorException: void <init>(String,String,Throwable)>
<java.sql.SQLSyntaxErrorException: void <init>()>
<java.sql.SQLSyntaxErrorException: void <init>(String,String,int)>
<java.sql.SQLSyntaxErrorException: void <init>(String,String,int,Throwable)>
<java.text.ParsePosition: void <init>(int)>
<java.text.ParsePosition: int getIndex()>
<java.text.ParsePosition: void setErrorIndex(int)>
<java.text.ParsePosition: void setIndex(int)>
<java.text.ParsePosition: int getErrorIndex()>
<android.webkit.DateSorter: void <init>(android.content.Context)>
<android.webkit.DateSorter: java.lang.String getLabel(int)>
<android.webkit.DateSorter: int getIndex(long)>
<android.webkit.DateSorter: long getBoundary(int)>
<android.telephony.ims.ProvisioningManager: int setProvisioningStringValue(int,java.lang.String)>
<android.telephony.ims.ProvisioningManager: java.lang.String getProvisioningStringValue(int)>
<android.telephony.ims.ProvisioningManager: boolean getProvisioningStatusForCapability(@android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.MmTelCapabilityint,int)>
<android.telephony.ims.ProvisioningManager: int setProvisioningIntValue(int,int)>
<android.telephony.ims.ProvisioningManager: void registerProvisioningChangedCallback(java.util.concurrent.Executor,android.telephony.ims.ProvisioningManager.Callback)>
<android.telephony.ims.ProvisioningManager: void unregisterProvisioningChangedCallback(android.telephony.ims.ProvisioningManager.Callback)>
<android.telephony.ims.ProvisioningManager: int getProvisioningIntValue(int)>
<android.telephony.ims.ProvisioningManager: void setProvisioningStatusForCapability(@android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.MmTelCapabilityint,int,boolean)>
<android.telephony.ims.ProvisioningManager: android.telephony.ims.ProvisioningManager createForSubscriptionId(int)>
<android.provider.SearchIndexableResource: void <init>(android.content.Context)>
<android.provider.SearchIndexableResource: void <init>(int,int,String,int)>
<java.nio.file.FileSystemLoopException: void <init>(String)>
<android.net.wifi.hotspot2.PasspointConfiguration: int describeContents()>
<android.net.wifi.hotspot2.PasspointConfiguration: void setHomeSp(android.net.wifi.hotspot2.pps.HomeSp)>
<android.net.wifi.hotspot2.PasspointConfiguration: void <init>(android.net.wifi.hotspot2.PasspointConfiguration)>
<android.net.wifi.hotspot2.PasspointConfiguration: android.net.wifi.hotspot2.pps.Credential getCredential()>
<android.net.wifi.hotspot2.PasspointConfiguration: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.hotspot2.PasspointConfiguration: void setCredential(android.net.wifi.hotspot2.pps.Credential)>
<android.net.wifi.hotspot2.PasspointConfiguration: android.net.wifi.hotspot2.pps.HomeSp getHomeSp()>
<android.net.wifi.hotspot2.PasspointConfiguration: void <init>()>
<javax.xml.transform.TransformerFactoryConfigurationError: void <init>(String)>
<javax.xml.transform.TransformerFactoryConfigurationError: Exception getException()>
<javax.xml.transform.TransformerFactoryConfigurationError: void <init>(Exception)>
<javax.xml.transform.TransformerFactoryConfigurationError: void <init>(Exception,String)>
<javax.xml.transform.TransformerFactoryConfigurationError: void <init>()>
<android.view.contentcapture.ContentCaptureContext.Builder: android.view.contentcapture.ContentCaptureContext build()>
<android.view.contentcapture.ContentCaptureContext.Builder: void <init>(android.content.LocusId)>
<android.view.contentcapture.ContentCaptureContext.Builder: android.view.contentcapture.ContentCaptureContext.Builder setExtras(android.os.Bundle)>
<java.nio.file.FileSystemNotFoundException: void <init>()>
<java.nio.file.FileSystemNotFoundException: void <init>(String)>
<android.app.contentsuggestions.ContentClassification: android.os.Bundle getExtras()>
<android.app.contentsuggestions.ContentClassification: int describeContents()>
<android.app.contentsuggestions.ContentClassification: void <init>(String,android.os.Bundle)>
<android.app.contentsuggestions.ContentClassification: java.lang.String getId()>
<android.app.contentsuggestions.ContentClassification: void writeToParcel(android.os.Parcel,int)>
<java.nio.charset.UnmappableCharacterException: int getInputLength()>
<java.nio.charset.UnmappableCharacterException: void <init>(int)>
<android.app.NotificationChannelGroup: org.json.JSONObject toJson()>
<android.app.NotificationChannelGroup: void lockFields(int)>
<android.app.NotificationChannelGroup: java.lang.String getDescription()>
<android.app.NotificationChannelGroup: void setBlocked(boolean)>
<android.app.NotificationChannelGroup: CharSequence getName()>
<android.app.NotificationChannelGroup: int getUserLockedFields()>
<android.app.NotificationChannelGroup: void setDescription(java.lang.String)>
<android.app.NotificationChannelGroup: android.app.NotificationChannelGroup clone()>
<android.app.NotificationChannelGroup: void <init>(String,CharSequence)>
<android.app.NotificationChannelGroup: int describeContents()>
<android.app.NotificationChannelGroup: java.lang.String getId()>
<android.app.NotificationChannelGroup: void writeToParcel(android.os.Parcel,int)>
<android.app.NotificationChannelGroup: java.util.List getChannels()>
<android.app.NotificationChannelGroup: boolean isBlocked()>
<android.content.pm.ResolveInfo: void <init>(android.content.pm.ResolveInfo)>
<android.content.pm.ResolveInfo: CharSequence loadLabel(android.content.pm.PackageManager)>
<android.content.pm.ResolveInfo: void <init>()>
<android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ResolveInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ResolveInfo: int getIconResource()>
<android.content.pm.ResolveInfo: int describeContents()>
<android.app.ActionBar.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.app.ActionBar.LayoutParams: void <init>(int)>
<android.app.ActionBar.LayoutParams: void <init>(android.app.ActionBar.LayoutParams)>
<android.app.ActionBar.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.app.ActionBar.LayoutParams: void <init>(int,int)>
<android.app.ActionBar.LayoutParams: void <init>(int,int,int)>
<java.security.interfaces.DSAKey: java.security.interfaces.DSAParams getParams()>
<java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance()>
<java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance(java.util.Locale)>
<java.text.DateFormatSymbols: java.lang.Object clone()>
<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>
<java.text.DateFormatSymbols: void setShortMonths(java.lang.String[])>
<java.text.DateFormatSymbols: void <init>(java.util.Locale)>
<java.text.DateFormatSymbols: void setWeekdays(java.lang.String[])>
<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>
<java.text.DateFormatSymbols: java.lang.String getLocalPatternChars()>
<java.text.DateFormatSymbols: void setEras(java.lang.String[])>
<java.text.DateFormatSymbols: void setAmPmStrings(java.lang.String[])>
<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>
<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>
<java.text.DateFormatSymbols: void setMonths(java.lang.String[])>
<java.text.DateFormatSymbols: void setShortWeekdays(java.lang.String[])>
<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>
<java.text.DateFormatSymbols: void setZoneStrings(java.lang.String[][])>
<java.text.DateFormatSymbols: void <init>()>
<java.text.DateFormatSymbols: java.lang.String[] getMonths()>
<java.text.DateFormatSymbols: void setLocalPatternChars(java.lang.String)>
<java.text.DateFormatSymbols: java.util.Locale[] getAvailableLocales()>
<java.text.DateFormatSymbols: java.lang.String[] getEras()>
<android.app.MediaRouteActionProvider: void setRouteTypes(int)>
<android.app.MediaRouteActionProvider: android.view.View onCreateActionView()>
<android.app.MediaRouteActionProvider: void setExtendedSettingsClickListener(android.view.View.OnClickListener)>
<android.app.MediaRouteActionProvider: void <init>(android.content.Context)>
<android.os.image.DynamicSystemClient: void setOnStatusChangedListener(java.util.concurrent.Executor,android.os.image.DynamicSystemClient.OnStatusChangedListener)>
<android.os.image.DynamicSystemClient: void <init>(android.content.Context)>
<android.os.image.DynamicSystemClient: void start(android.net.Uri,long)>
<android.os.image.DynamicSystemClient: void bind()>
<android.os.image.DynamicSystemClient: void setOnStatusChangedListener(android.os.image.DynamicSystemClient.OnStatusChangedListener)>
<android.os.image.DynamicSystemClient: void unbind()>
<android.os.image.DynamicSystemClient: void start(android.net.Uri,long,long)>
<android.icu.text.RuleBasedCollator: android.icu.text.CollationElementIterator getCollationElementIterator(java.lang.String)>
<android.icu.text.RuleBasedCollator: int compare(java.lang.String,java.lang.String)>
<android.icu.text.RuleBasedCollator: void setCaseLevelDefault()>
<android.icu.text.RuleBasedCollator: void setAlternateHandlingDefault()>
<android.icu.text.RuleBasedCollator: java.lang.String getRules(boolean)>
<android.icu.text.RuleBasedCollator: void setUpperCaseFirst(boolean)>
<android.icu.text.RuleBasedCollator: android.icu.text.CollationElementIterator getCollationElementIterator(java.text.CharacterIterator)>
<android.icu.text.RuleBasedCollator: boolean isUpperCaseFirst()>
<android.icu.text.RuleBasedCollator: void setCaseFirstDefault()>
<android.icu.text.RuleBasedCollator: boolean isFrenchCollation()>
<android.icu.text.RuleBasedCollator: void setDecompositionDefault()>
<android.icu.text.RuleBasedCollator: void getContractionsAndExpansions(android.icu.text.UnicodeSet,android.icu.text.UnicodeSet,boolean)>
<android.icu.text.RuleBasedCollator: android.icu.text.RuleBasedCollator cloneAsThawed()>
<android.icu.text.RuleBasedCollator: void setCaseLevel(boolean)>
<android.icu.text.RuleBasedCollator: int getVariableTop()>
<android.icu.text.RuleBasedCollator: boolean getNumericCollation()>
<android.icu.text.RuleBasedCollator: android.icu.text.CollationElementIterator getCollationElementIterator(android.icu.text.UCharacterIterator)>
<android.icu.text.RuleBasedCollator: android.icu.text.CollationKey getCollationKey(java.lang.String)>
<android.icu.text.RuleBasedCollator: boolean isAlternateHandlingShifted()>
<android.icu.text.RuleBasedCollator: boolean isLowerCaseFirst()>
<android.icu.text.RuleBasedCollator: android.icu.util.VersionInfo getVersion()>
<android.icu.text.RuleBasedCollator: void setNumericCollation(boolean)>
<android.icu.text.RuleBasedCollator: void <init>(String)>
<android.icu.text.RuleBasedCollator: void setNumericCollationDefault()>
<android.icu.text.RuleBasedCollator: boolean isCaseLevel()>
<android.icu.text.RuleBasedCollator: void setLowerCaseFirst(boolean)>
<android.icu.text.RuleBasedCollator: android.icu.util.VersionInfo getUCAVersion()>
<android.icu.text.RuleBasedCollator: void setAlternateHandlingShifted(boolean)>
<android.icu.text.RuleBasedCollator: void setFrenchCollation(boolean)>
<android.icu.text.RuleBasedCollator: android.icu.text.RuleBasedCollator setMaxVariable(int)>
<android.icu.text.RuleBasedCollator: void setFrenchCollationDefault()>
<android.icu.text.RuleBasedCollator: java.lang.String getRules()>
<android.icu.text.RuleBasedCollator: void setStrengthDefault()>
<org.xmlpull.v1.sax2.Driver: int getIndex(java.lang.String)>
<org.xmlpull.v1.sax2.Driver: java.lang.String getValue(int)>
<org.xmlpull.v1.sax2.Driver: void setDTDHandler(org.xml.sax.DTDHandler)>
<org.xmlpull.v1.sax2.Driver: void <init>()>
<org.xmlpull.v1.sax2.Driver: java.lang.String getPublicId()>
<org.xmlpull.v1.sax2.Driver: java.lang.String getValue(java.lang.String)>
<org.xmlpull.v1.sax2.Driver: boolean getFeature(java.lang.String)>
<org.xmlpull.v1.sax2.Driver: org.xml.sax.ContentHandler getContentHandler()>
<org.xmlpull.v1.sax2.Driver: int getIndex(java.lang.String,java.lang.String)>
<org.xmlpull.v1.sax2.Driver: void parse(org.xml.sax.InputSource)>
<org.xmlpull.v1.sax2.Driver: void setContentHandler(org.xml.sax.ContentHandler)>
<org.xmlpull.v1.sax2.Driver: void setErrorHandler(org.xml.sax.ErrorHandler)>
<org.xmlpull.v1.sax2.Driver: org.xml.sax.DTDHandler getDTDHandler()>
<org.xmlpull.v1.sax2.Driver: void setProperty(java.lang.String,java.lang.Object)>
<org.xmlpull.v1.sax2.Driver: java.lang.String getType(java.lang.String)>
<org.xmlpull.v1.sax2.Driver: java.lang.String getValue(java.lang.String,java.lang.String)>
<org.xmlpull.v1.sax2.Driver: int getLineNumber()>
<org.xmlpull.v1.sax2.Driver: java.lang.String getLocalName(int)>
<org.xmlpull.v1.sax2.Driver: java.lang.String getType(int)>
<org.xmlpull.v1.sax2.Driver: void startElement(java.lang.String,java.lang.String,java.lang.String)>
<org.xmlpull.v1.sax2.Driver: java.lang.String getSystemId()>
<org.xmlpull.v1.sax2.Driver: int getLength()>
<org.xmlpull.v1.sax2.Driver: void parseSubTree(org.xmlpull.v1.XmlPullParser)>
<org.xmlpull.v1.sax2.Driver: void <init>(org.xmlpull.v1.XmlPullParser)>
<org.xmlpull.v1.sax2.Driver: void parse(java.lang.String)>
<org.xmlpull.v1.sax2.Driver: org.xml.sax.ErrorHandler getErrorHandler()>
<org.xmlpull.v1.sax2.Driver: void setFeature(java.lang.String,boolean)>
<org.xmlpull.v1.sax2.Driver: java.lang.String getURI(int)>
<org.xmlpull.v1.sax2.Driver: int getColumnNumber()>
<org.xmlpull.v1.sax2.Driver: java.lang.String getQName(int)>
<org.xmlpull.v1.sax2.Driver: java.lang.String getType(java.lang.String,java.lang.String)>
<org.xmlpull.v1.sax2.Driver: java.lang.Object getProperty(java.lang.String)>
<org.xmlpull.v1.sax2.Driver: void setEntityResolver(org.xml.sax.EntityResolver)>
<org.xmlpull.v1.sax2.Driver: org.xml.sax.EntityResolver getEntityResolver()>
<android.graphics.ColorSpace: int getId()>
<android.graphics.ColorSpace: android.graphics.ColorSpace.Model getModel()>
<android.graphics.ColorSpace: boolean isSrgb()>
<android.graphics.ColorSpace: boolean isWideGamut()>
<android.graphics.ColorSpace: float getMinValue(int)>
<android.graphics.ColorSpace: android.graphics.ColorSpace adapt(android.graphics.ColorSpace,float[],android.graphics.ColorSpace.Adaptation)>
<android.graphics.ColorSpace: java.lang.String getName()>
<android.graphics.ColorSpace: android.graphics.ColorSpace match(float[],android.graphics.ColorSpace.Rgb.TransferParameters)>
<android.graphics.ColorSpace: int getComponentCount()>
<android.graphics.ColorSpace: float[] toXyz(float,float,float)>
<android.graphics.ColorSpace: float[] toXyz(float[])>
<android.graphics.ColorSpace: android.graphics.ColorSpace.Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace)>
<android.graphics.ColorSpace: float[] fromXyz(float,float,float)>
<android.graphics.ColorSpace: float[] fromXyz(float[])>
<android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace.Named)>
<android.graphics.ColorSpace: android.graphics.ColorSpace.Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace.RenderIntent)>
<android.graphics.ColorSpace: android.graphics.ColorSpace adapt(android.graphics.ColorSpace,float[])>
<android.graphics.ColorSpace: float getMaxValue(int)>
<android.graphics.ColorSpace: android.graphics.ColorSpace.Connector connect(android.graphics.ColorSpace)>
<android.graphics.ColorSpace: android.graphics.ColorSpace.Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace,android.graphics.ColorSpace.RenderIntent)>
<android.app.Notification.BigPictureStyle: void <init>()>
<android.app.Notification.BigPictureStyle: void <init>(android.app.Notification.Builder)>
<android.app.Notification.BigPictureStyle: android.app.Notification.BigPictureStyle bigLargeIcon(android.graphics.drawable.Icon)>
<android.app.Notification.BigPictureStyle: android.app.Notification.BigPictureStyle bigPicture(android.graphics.Bitmap)>
<android.app.Notification.BigPictureStyle: android.app.Notification.BigPictureStyle setSummaryText(CharSequence)>
<android.app.Notification.BigPictureStyle: android.app.Notification.BigPictureStyle bigLargeIcon(android.graphics.Bitmap)>
<android.app.Notification.BigPictureStyle: android.app.Notification.BigPictureStyle setBigContentTitle(CharSequence)>
<android.text.BoringLayout.Metrics: void <init>()>
<android.app.prediction.AppPredictionContext.Builder: android.app.prediction.AppPredictionContext.Builder setUiSurface(java.lang.String)>
<android.app.prediction.AppPredictionContext.Builder: android.app.prediction.AppPredictionContext.Builder setExtras(android.os.Bundle)>
<android.app.prediction.AppPredictionContext.Builder: android.app.prediction.AppPredictionContext.Builder setPredictedTargetCount(int)>
<android.app.prediction.AppPredictionContext.Builder: void <init>(android.content.Context)>
<android.app.prediction.AppPredictionContext.Builder: android.app.prediction.AppPredictionContext build()>
<android.provider.MediaStore.Audio.Artists: void <init>()>
<android.provider.MediaStore.Audio.Artists: android.net.Uri getContentUri(java.lang.String)>
<android.gesture.GestureStroke: void clearPath()>
<android.gesture.GestureStroke: android.gesture.OrientedBoundingBox computeOrientedBoundingBox()>
<android.gesture.GestureStroke: java.lang.Object clone()>
<android.gesture.GestureStroke: android.graphics.Path getPath()>
<android.gesture.GestureStroke: android.graphics.Path toPath(float,float,int)>
<android.gesture.GestureStroke: void <init>(java.util.ArrayList)>
<java.lang.IndexOutOfBoundsException: void <init>(String)>
<java.lang.IndexOutOfBoundsException: void <init>()>
<android.os.IHwInterface: android.os.IHwBinder asBinder()>
<android.net.rtp.AudioStream: boolean isBusy()>
<android.net.rtp.AudioStream: void setDtmfType(int)>
<android.net.rtp.AudioStream: void setCodec(android.net.rtp.AudioCodec)>
<android.net.rtp.AudioStream: int getDtmfType()>
<android.net.rtp.AudioStream: void join(android.net.rtp.AudioGroup)>
<android.net.rtp.AudioStream: android.net.rtp.AudioCodec getCodec()>
<android.net.rtp.AudioStream: void <init>(java.net.InetAddress)>
<android.net.rtp.AudioStream: android.net.rtp.AudioGroup getGroup()>
<android.telephony.data.DataServiceCallback: void onDeactivateDataCallComplete(int)>
<android.telephony.data.DataServiceCallback: void onRequestDataCallListComplete(int,java.util.List)>
<android.telephony.data.DataServiceCallback: void onSetInitialAttachApnComplete(int)>
<android.telephony.data.DataServiceCallback: void onDataCallListChanged(java.util.List)>
<android.telephony.data.DataServiceCallback: void onSetupDataCallComplete(int,android.telephony.data.DataCallResponse)>
<android.telephony.data.DataServiceCallback: void onSetDataProfileComplete(int)>
<java.security.interfaces.RSAKey: java.math.BigInteger getModulus()>
<android.view.View.OnScrollChangeListener: void onScrollChange(android.view.View,int,int,int,int)>
<java.time.ZonedDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>
<java.time.ZonedDateTime: boolean isSupported(java.time.temporal.TemporalField)>
<java.time.ZonedDateTime: java.time.ZonedDateTime plusMinutes(long)>
<java.time.ZonedDateTime: java.time.ZonedDateTime withHour(int)>
<java.time.ZonedDateTime: java.time.ZonedDateTime plusMonths(long)>
<java.time.ZonedDateTime: java.time.Month getMonth()>
<java.time.ZonedDateTime: java.time.ZoneOffset getOffset()>
<java.time.ZonedDateTime: java.time.ZonedDateTime withDayOfMonth(int)>
<java.time.ZonedDateTime: java.time.ZonedDateTime withLaterOffsetAtOverlap()>
<java.time.ZonedDateTime: java.time.ZonedDateTime withEarlierOffsetAtOverlap()>
<java.time.ZonedDateTime: java.time.ZonedDateTime of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneId)>
<java.time.ZonedDateTime: java.time.ZonedDateTime withYear(int)>
<java.time.ZonedDateTime: int getDayOfMonth()>
<java.time.ZonedDateTime: java.time.ZonedDateTime withZoneSameLocal(java.time.ZoneId)>
<java.time.ZonedDateTime: java.time.DayOfWeek getDayOfWeek()>
<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>
<java.time.ZonedDateTime: java.time.ZonedDateTime withMonth(int)>
<java.time.ZonedDateTime: java.time.ZonedDateTime plusYears(long)>
<java.time.ZonedDateTime: java.time.ZonedDateTime plusNanos(long)>
<java.time.ZonedDateTime: java.time.ZonedDateTime plusDays(long)>
<java.time.ZonedDateTime: java.time.ZonedDateTime ofLocal(java.time.LocalDateTime,java.time.ZoneId,java.time.ZoneOffset)>
<java.time.ZonedDateTime: java.time.ZonedDateTime ofInstant(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)>
<java.time.ZonedDateTime: java.time.ZonedDateTime plusHours(long)>
<java.time.ZonedDateTime: java.time.ZonedDateTime minusMinutes(long)>
<java.time.ZonedDateTime: java.time.OffsetDateTime toOffsetDateTime()>
<java.time.ZonedDateTime: java.time.ZonedDateTime truncatedTo(java.time.temporal.TemporalUnit)>
<java.time.ZonedDateTime: java.time.ZonedDateTime minusMonths(long)>
<java.time.ZonedDateTime: java.time.ZonedDateTime plusWeeks(long)>
<java.time.ZonedDateTime: java.time.ZonedDateTime with(java.time.temporal.TemporalField,long)>
<java.time.ZonedDateTime: java.time.ZoneId getZone()>
<java.time.ZonedDateTime: java.time.ZonedDateTime minus(long,java.time.temporal.TemporalUnit)>
<java.time.ZonedDateTime: java.time.ZonedDateTime of(int,int,int,int,int,int,int,java.time.ZoneId)>
<java.time.ZonedDateTime: java.time.ZonedDateTime parse(CharSequence,java.time.format.DateTimeFormatter)>
<java.time.ZonedDateTime: java.time.ZonedDateTime minusSeconds(long)>
<java.time.ZonedDateTime: java.time.ZonedDateTime minusYears(long)>
<java.time.ZonedDateTime: java.time.ZonedDateTime plusSeconds(long)>
<java.time.ZonedDateTime: java.time.LocalDate toLocalDate()>
<java.time.ZonedDateTime: int getSecond()>
<java.time.ZonedDateTime: java.time.ZonedDateTime withFixedOffsetZone()>
<java.time.ZonedDateTime: java.time.ZonedDateTime now()>
<java.time.ZonedDateTime: java.time.ZonedDateTime now(java.time.Clock)>
<java.time.ZonedDateTime: java.time.ZonedDateTime plus(long,java.time.temporal.TemporalUnit)>
<java.time.ZonedDateTime: int getMonthValue()>
<java.time.ZonedDateTime: int getYear()>
<java.time.ZonedDateTime: java.time.ZonedDateTime withDayOfYear(int)>
<java.time.ZonedDateTime: java.time.ZonedDateTime plus(java.time.temporal.TemporalAmount)>
<java.time.ZonedDateTime: java.time.ZonedDateTime of(java.time.LocalDateTime,java.time.ZoneId)>
<java.time.ZonedDateTime: java.time.ZonedDateTime minusWeeks(long)>
<java.time.ZonedDateTime: int getHour()>
<java.time.ZonedDateTime: java.time.ZonedDateTime minus(java.time.temporal.TemporalAmount)>
<java.time.ZonedDateTime: java.time.ZonedDateTime withNano(int)>
<java.time.ZonedDateTime: java.time.ZonedDateTime now(java.time.ZoneId)>
<java.time.ZonedDateTime: java.time.ZonedDateTime minusDays(long)>
<java.time.ZonedDateTime: int getNano()>
<java.time.ZonedDateTime: java.time.LocalDateTime toLocalDateTime()>
<java.time.ZonedDateTime: java.time.ZonedDateTime from(java.time.temporal.TemporalAccessor)>
<java.time.ZonedDateTime: java.time.ZonedDateTime minusNanos(long)>
<java.time.ZonedDateTime: int getDayOfYear()>
<java.time.ZonedDateTime: java.time.ZonedDateTime parse(CharSequence)>
<java.time.ZonedDateTime: java.time.ZonedDateTime ofInstant(java.time.Instant,java.time.ZoneId)>
<java.time.ZonedDateTime: java.time.ZonedDateTime withZoneSameInstant(java.time.ZoneId)>
<java.time.ZonedDateTime: java.time.ZonedDateTime withMinute(int)>
<java.time.ZonedDateTime: java.time.ZonedDateTime ofStrict(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)>
<java.time.ZonedDateTime: java.time.ZonedDateTime with(java.time.temporal.TemporalAdjuster)>
<java.time.ZonedDateTime: java.time.ZonedDateTime withSecond(int)>
<java.time.ZonedDateTime: int getMinute()>
<java.util.logging.SimpleFormatter: void <init>()>
<java.util.logging.SimpleFormatter: java.lang.String format(java.util.logging.LogRecord)>
<android.content.pm.ApplicationInfo.DisplayNameComparator: int compare(android.content.pm.ApplicationInfo,android.content.pm.ApplicationInfo)>
<android.content.pm.ApplicationInfo.DisplayNameComparator: void <init>(android.content.pm.PackageManager)>
<android.icu.text.AlphabeticIndex.Bucket: java.util.Iterator iterator()>
<android.icu.text.AlphabeticIndex.Bucket: java.lang.String getLabel()>
<android.icu.text.AlphabeticIndex.Bucket: int size()>
<android.icu.text.AlphabeticIndex.Bucket: android.icu.text.AlphabeticIndex.Bucket.LabelType getLabelType()>
<android.net.NetworkCapabilities: int describeContents()>
<android.net.NetworkCapabilities: int[] getCapabilities()>
<android.net.NetworkCapabilities: boolean hasCapability(int)>
<android.net.NetworkCapabilities: void writeToParcel(android.os.Parcel,int)>
<android.net.NetworkCapabilities: int[] getTransportTypes()>
<android.net.NetworkCapabilities: boolean satisfiedByNetworkCapabilities(android.net.NetworkCapabilities)>
<android.net.NetworkCapabilities: int getLinkDownstreamBandwidthKbps()>
<android.net.NetworkCapabilities: int getSignalStrength()>
<android.net.NetworkCapabilities: android.net.TransportInfo getTransportInfo()>
<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>
<android.net.NetworkCapabilities: boolean hasTransport(int)>
<android.net.NetworkCapabilities: int getLinkUpstreamBandwidthKbps()>
<android.net.wifi.p2p.WifiP2pDeviceList: java.util.Collection getDeviceList()>
<android.net.wifi.p2p.WifiP2pDeviceList: void <init>()>
<android.net.wifi.p2p.WifiP2pDeviceList: int describeContents()>
<android.net.wifi.p2p.WifiP2pDeviceList: android.net.wifi.p2p.WifiP2pDevice get(java.lang.String)>
<android.net.wifi.p2p.WifiP2pDeviceList: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.p2p.WifiP2pDeviceList: void <init>(android.net.wifi.p2p.WifiP2pDeviceList)>
<android.widget.RemoteViews.RemoteResponse: android.widget.RemoteViews.RemoteResponse fromFillInIntent(android.content.Intent)>
<android.widget.RemoteViews.RemoteResponse: android.widget.RemoteViews.RemoteResponse fromPendingIntent(android.app.PendingIntent)>
<android.widget.RemoteViews.RemoteResponse: void <init>()>
<android.widget.RemoteViews.RemoteResponse: android.widget.RemoteViews.RemoteResponse addSharedElement(int,java.lang.String)>
<android.app.prediction.AppTarget: android.content.pm.ShortcutInfo getShortcutInfo()>
<android.app.prediction.AppTarget: android.os.UserHandle getUser()>
<android.app.prediction.AppTarget: int describeContents()>
<android.app.prediction.AppTarget: java.lang.String getPackageName()>
<android.app.prediction.AppTarget: java.lang.String getClassName()>
<android.app.prediction.AppTarget: android.app.prediction.AppTargetId getId()>
<android.app.prediction.AppTarget: int getRank()>
<android.app.prediction.AppTarget: void writeToParcel(android.os.Parcel,int)>
<javax.net.ssl.SSLSessionBindingListener extends java.util.EventListener: void valueUnbound(javax.net.ssl.SSLSessionBindingEvent)>
<javax.net.ssl.SSLSessionBindingListener extends java.util.EventListener: void valueBound(javax.net.ssl.SSLSessionBindingEvent)>
<android.animation.LayoutTransition: void disableTransitionType(int)>
<android.animation.LayoutTransition: void setDuration(int,long)>
<android.animation.LayoutTransition: long getStagger(int)>
<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View,int)>
<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View,int)>
<android.animation.LayoutTransition: void setAnimateParentHierarchy(boolean)>
<android.animation.LayoutTransition: long getDuration(int)>
<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void setDuration(long)>
<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: boolean isRunning()>
<android.animation.LayoutTransition: boolean isChangingLayout()>
<android.animation.LayoutTransition: void addTransitionListener(android.animation.LayoutTransition.TransitionListener)>
<android.animation.LayoutTransition: long getStartDelay(int)>
<android.animation.LayoutTransition: void setStagger(int,long)>
<android.animation.LayoutTransition: void enableTransitionType(int)>
<android.animation.LayoutTransition: void setAnimator(int,android.animation.Animator)>
<android.animation.LayoutTransition: void <init>()>
<android.animation.LayoutTransition: android.animation.TimeInterpolator getInterpolator(int)>
<android.animation.LayoutTransition: boolean isTransitionTypeEnabled(int)>
<android.animation.LayoutTransition: void setStartDelay(int,long)>
<android.animation.LayoutTransition: java.util.List getTransitionListeners()>
<android.animation.LayoutTransition: void addChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void removeTransitionListener(android.animation.LayoutTransition.TransitionListener)>
<android.animation.LayoutTransition: void setInterpolator(int,android.animation.TimeInterpolator)>
<android.animation.LayoutTransition: android.animation.Animator getAnimator(int)>
<java.lang.NoSuchFieldException: void <init>()>
<java.lang.NoSuchFieldException: void <init>(String)>
<org.xml.sax.DTDHandler: void notationDecl(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.DTDHandler: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.MediaStore: android.net.Uri setRequireOriginal(android.net.Uri)>
<android.provider.MediaStore: void scanVolume(android.content.Context,java.io.File)>
<android.provider.MediaStore: void <init>()>
<android.provider.MediaStore: java.lang.String getVersion(android.content.Context,java.lang.String)>
<android.provider.MediaStore: android.net.Uri setIncludePending(android.net.Uri)>
<android.provider.MediaStore: android.net.Uri scanFileFromShell(android.content.Context,java.io.File)>
<android.provider.MediaStore: java.util.Collection getVolumeScanPaths(java.lang.String)>
<android.provider.MediaStore: java.io.File getVolumePath(java.lang.String)>
<android.provider.MediaStore: android.net.Uri getMediaScannerUri()>
<android.provider.MediaStore: android.net.Uri getDocumentUri(android.content.Context,android.net.Uri)>
<android.provider.MediaStore: long getContributedMediaSize(android.content.Context,java.lang.String,android.os.UserHandle)>
<android.provider.MediaStore: android.net.Uri scanFile(android.content.Context,java.io.File)>
<android.provider.MediaStore: java.lang.String getVersion(android.content.Context)>
<android.provider.MediaStore: void deleteContributedMedia(android.content.Context,java.lang.String,android.os.UserHandle)>
<android.provider.MediaStore: android.net.Uri getMediaUri(android.content.Context,android.net.Uri)>
<android.provider.MediaStore: java.util.Set getExternalVolumeNames(android.content.Context)>
<android.provider.MediaStore: java.lang.String getVolumeName(android.net.Uri)>
<android.view.inputmethod.ExtractedTextRequest: int describeContents()>
<android.view.inputmethod.ExtractedTextRequest: void <init>()>
<android.view.inputmethod.ExtractedTextRequest: void writeToParcel(android.os.Parcel,int)>
<android.widget.EdgeEffect: void finish()>
<android.widget.EdgeEffect: int getMaxHeight()>
<android.widget.EdgeEffect: void onRelease()>
<android.widget.EdgeEffect: void onAbsorb(int)>
<android.widget.EdgeEffect: void <init>(android.content.Context)>
<android.widget.EdgeEffect: void setSize(int,int)>
<android.widget.EdgeEffect: boolean draw(android.graphics.Canvas)>
<android.widget.EdgeEffect: void onPull(float)>
<android.widget.EdgeEffect: boolean isFinished()>
<android.widget.EdgeEffect: android.graphics.BlendMode getBlendMode()>
<android.widget.EdgeEffect: void setColor(@ColorIntint)>
<android.widget.EdgeEffect: void onPull(float,float)>
<android.widget.EdgeEffect: int getColor()>
<android.widget.EdgeEffect: void setBlendMode(android.graphics.BlendMode)>
<java.lang.ArithmeticException: void <init>()>
<java.lang.ArithmeticException: void <init>(String)>
<android.R.interpolator: void <init>()>
<android.icu.text.AlphabeticIndex.Record: V getData()>
<android.icu.text.AlphabeticIndex.Record: CharSequence getName()>
<java.security.Policy: void <init>()>
<java.security.Policy: java.security.PermissionCollection getPermissions(java.security.ProtectionDomain)>
<java.security.Policy: void setPolicy(java.security.Policy)>
<java.security.Policy: java.security.PermissionCollection getPermissions(java.security.CodeSource)>
<java.security.Policy: java.security.Policy.Parameters getParameters()>
<java.security.Policy: java.security.Policy getInstance(java.lang.String,java.security.Policy.Parameters,java.lang.String)>
<java.security.Policy: java.security.Provider getProvider()>
<java.security.Policy: java.lang.String getType()>
<java.security.Policy: java.security.Policy getInstance(java.lang.String,java.security.Policy.Parameters)>
<java.security.Policy: java.security.Policy getInstance(java.lang.String,java.security.Policy.Parameters,java.security.Provider)>
<java.security.Policy: java.security.Policy getPolicy()>
<java.security.Policy: boolean implies(java.security.ProtectionDomain,java.security.Permission)>
<java.security.Policy: void refresh()>
<android.content.IntentFilter.AuthorityEntry: void <init>(String,String)>
<android.content.IntentFilter.AuthorityEntry: int match(android.net.Uri)>
<android.content.IntentFilter.AuthorityEntry: java.lang.String getHost()>
<android.content.IntentFilter.AuthorityEntry: int getPort()>
<android.graphics.text.LineBreaker.Result: boolean hasLineTab(int)>
<android.graphics.text.LineBreaker.Result: int getLineBreakOffset(int)>
<android.graphics.text.LineBreaker.Result: float getLineAscent(int)>
<android.graphics.text.LineBreaker.Result: float getLineWidth(int)>
<android.graphics.text.LineBreaker.Result: int getStartLineHyphenEdit(int)>
<android.graphics.text.LineBreaker.Result: int getEndLineHyphenEdit(int)>
<android.graphics.text.LineBreaker.Result: int getLineCount()>
<android.graphics.text.LineBreaker.Result: float getLineDescent(int)>
<android.bluetooth.BluetoothManager: android.bluetooth.BluetoothGattServer openGattServer(android.content.Context,android.bluetooth.BluetoothGattServerCallback)>
<android.bluetooth.BluetoothManager: int getConnectionState(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothManager: java.util.List getConnectedDevices(int)>
<android.bluetooth.BluetoothManager: android.bluetooth.BluetoothAdapter getAdapter()>
<android.bluetooth.BluetoothManager: java.util.List getDevicesMatchingConnectionStates(int,int[])>
<java.io.ObjectStreamField: int compareTo(java.lang.Object)>
<java.io.ObjectStreamField: int getOffset()>
<java.io.ObjectStreamField: boolean isUnshared()>
<java.io.ObjectStreamField: java.lang.Class getType()>
<java.io.ObjectStreamField: void <init>(String,Class)>
<java.io.ObjectStreamField: char getTypeCode()>
<java.io.ObjectStreamField: java.lang.String getTypeString()>
<java.io.ObjectStreamField: boolean isPrimitive()>
<java.io.ObjectStreamField: void <init>(String,Class,boolean)>
<java.io.ObjectStreamField: java.lang.String getName()>
<java.io.ObjectStreamField: void setOffset(int)>
<java.nio.InvalidMarkException: void <init>()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributePrefix(int)>
<org.xmlpull.v1.XmlPullParser: int getEventType()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace(java.lang.String)>
<org.xmlpull.v1.XmlPullParser: boolean isWhitespace()>
<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>
<org.xmlpull.v1.XmlPullParser: int nextTag()>
<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeType(int)>
<org.xmlpull.v1.XmlPullParser: boolean getFeature(java.lang.String)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>
<org.xmlpull.v1.XmlPullParser: java.lang.Object getProperty(java.lang.String)>
<org.xmlpull.v1.XmlPullParser: void setFeature(java.lang.String,boolean)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>
<org.xmlpull.v1.XmlPullParser: int getDepth()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespaceUri(int)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getInputEncoding()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeNamespace(int)>
<org.xmlpull.v1.XmlPullParser: char[] getTextCharacters(int[])>
<org.xmlpull.v1.XmlPullParser: int getNamespaceCount(int)>
<org.xmlpull.v1.XmlPullParser: boolean isAttributeDefault(int)>
<org.xmlpull.v1.XmlPullParser: int nextToken()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespacePrefix(int)>
<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>
<org.xmlpull.v1.XmlPullParser: int next()>
<org.xmlpull.v1.XmlPullParser: boolean isEmptyElementTag()>
<org.xmlpull.v1.XmlPullParser: void defineEntityReplacementText(java.lang.String,java.lang.String)>
<org.xmlpull.v1.XmlPullParser: int getColumnNumber()>
<org.xmlpull.v1.XmlPullParser: void setProperty(java.lang.String,java.lang.Object)>
<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getPrefix()>
<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>
<org.xmlpull.v1.XmlPullParser: int getLineNumber()>
<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>
<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>
<android.view.textclassifier.TextClassifier.EntityConfig: java.util.Collection getHints()>
<android.view.textclassifier.TextClassifier.EntityConfig: android.view.textclassifier.TextClassifier.EntityConfig createWithHints(java.util.Collection)>
<android.view.textclassifier.TextClassifier.EntityConfig: int describeContents()>
<android.view.textclassifier.TextClassifier.EntityConfig: boolean shouldIncludeTypesFromTextClassifier()>
<android.view.textclassifier.TextClassifier.EntityConfig: java.util.Collection resolveEntityListModifications(java.util.Collection)>
<android.view.textclassifier.TextClassifier.EntityConfig: android.view.textclassifier.TextClassifier.EntityConfig createWithExplicitEntityList(java.util.Collection)>
<android.view.textclassifier.TextClassifier.EntityConfig: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextClassifier.EntityConfig: android.view.textclassifier.TextClassifier.EntityConfig create(java.util.Collection,java.util.Collection,java.util.Collection)>
<java.math.MathContext: void <init>(int)>
<java.math.MathContext: java.math.RoundingMode valueOf(int)>
<java.math.MathContext: void <init>(int,java.math.RoundingMode)>
<java.math.MathContext: int getPrecision()>
<java.math.MathContext: java.math.RoundingMode getRoundingMode()>
<java.math.MathContext: void <init>(String)>
<javax.net.ssl.SSLHandshakeException: void <init>(String)>
<android.view.FocusFinder: android.view.View findNearestTouchable(android.view.ViewGroup,int,int,int,int[])>
<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>
<android.view.FocusFinder: android.view.View findNextFocusFromRect(android.view.ViewGroup,android.graphics.Rect,int)>
<android.view.FocusFinder: android.view.View findNextKeyboardNavigationCluster(android.view.View,android.view.View,int)>
<android.view.FocusFinder: void sort(android.view.View[],int,int,android.view.ViewGroup,boolean)>
<android.view.FocusFinder: android.view.FocusFinder getInstance()>
<java.util.PropertyResourceBundle: void <init>(java.io.InputStream)>
<java.util.PropertyResourceBundle: java.lang.Object handleGetObject(java.lang.String)>
<java.util.PropertyResourceBundle: void <init>(java.io.Reader)>
<java.util.PropertyResourceBundle: java.util.Enumeration getKeys()>
<javax.net.ssl.SSLPermission: void <init>(String)>
<javax.net.ssl.SSLPermission: void <init>(String,String)>
<org.w3c.dom.ls.LSParserFilter: int getWhatToShow()>
<org.w3c.dom.ls.LSParserFilter: short acceptNode(org.w3c.dom.Node)>
<org.w3c.dom.ls.LSParserFilter: short startElement(org.w3c.dom.Element)>
<android.media.MediaPlayer.OnDrmConfigHelper: void onDrmConfig(android.media.MediaPlayer)>
<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>
<java.security.spec.X509EncodedKeySpec: java.lang.String getFormat()>
<java.time.ZoneId: java.util.Set getAvailableZoneIds()>
<java.time.ZoneId: java.time.ZoneId of(java.lang.String)>
<java.time.ZoneId: java.time.zone.ZoneRules getRules()>
<java.time.ZoneId: java.time.ZoneId from(java.time.temporal.TemporalAccessor)>
<java.time.ZoneId: java.time.ZoneId of(java.lang.String,java.util.Map)>
<java.time.ZoneId: java.time.ZoneId systemDefault()>
<java.time.ZoneId: java.time.ZoneId ofOffset(java.lang.String,java.time.ZoneOffset)>
<java.time.ZoneId: java.lang.String getId()>
<java.time.ZoneId: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>
<java.time.ZoneId: java.time.ZoneId normalized()>
<android.net.WebAddress: void <init>(String)>
<android.preference.ListPreference: CharSequence[] getEntries()>
<android.preference.ListPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.ListPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.ListPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.ListPreference: java.lang.String getValue()>
<android.preference.ListPreference: CharSequence[] getEntryValues()>
<android.preference.ListPreference: void <init>(android.content.Context)>
<android.preference.ListPreference: void setEntries(CharSequence[])>
<android.preference.ListPreference: void setEntryValues(@ArrayResint)>
<android.preference.ListPreference: int findIndexOfValue(java.lang.String)>
<android.preference.ListPreference: void setValueIndex(int)>
<android.preference.ListPreference: void setEntries(@ArrayResint)>
<android.preference.ListPreference: void setValue(java.lang.String)>
<android.preference.ListPreference: CharSequence getEntry()>
<android.preference.ListPreference: void setEntryValues(CharSequence[])>
<java.util.concurrent.atomic.LongAccumulator: long getThenReset()>
<java.util.concurrent.atomic.LongAccumulator: void accumulate(long)>
<java.util.concurrent.atomic.LongAccumulator: long longValue()>
<java.util.concurrent.atomic.LongAccumulator: void <init>(java.util.function.LongBinaryOperator,long)>
<java.util.concurrent.atomic.LongAccumulator: int intValue()>
<java.util.concurrent.atomic.LongAccumulator: long get()>
<java.util.concurrent.atomic.LongAccumulator: double doubleValue()>
<java.util.concurrent.atomic.LongAccumulator: float floatValue()>
<java.util.concurrent.atomic.LongAccumulator: void reset()>
<java.security.Permission: java.lang.String getName()>
<java.security.Permission: java.security.PermissionCollection newPermissionCollection()>
<java.security.Permission: void <init>(String)>
<java.security.Permission: java.lang.String getActions()>
<java.security.Permission: boolean implies(java.security.Permission)>
<java.security.Permission: void checkGuard(java.lang.Object)>
<android.database.sqlite.SQLiteTableLockedException: void <init>()>
<android.database.sqlite.SQLiteTableLockedException: void <init>(String)>
<android.text.style.SuperscriptSpan: int getSpanTypeId()>
<android.text.style.SuperscriptSpan: int describeContents()>
<android.text.style.SuperscriptSpan: void <init>()>
<android.text.style.SuperscriptSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.SuperscriptSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.SuperscriptSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.SuperscriptSpan: void <init>(android.os.Parcel)>
<android.webkit.WebViewRenderProcessClient: void onRenderProcessUnresponsive(android.webkit.WebView,android.webkit.WebViewRenderProcess)>
<android.webkit.WebViewRenderProcessClient: void onRenderProcessResponsive(android.webkit.WebView,android.webkit.WebViewRenderProcess)>
<android.webkit.WebViewRenderProcessClient: void <init>()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.StringBuilder: void <init>(CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(double)>
<java.lang.StringBuilder: int capacity()>
<java.lang.StringBuilder: int indexOf(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[])>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[],int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder reverse()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.Object)>
<java.lang.StringBuilder: int length()>
<java.lang.StringBuilder: void <init>()>
<java.lang.StringBuilder: int offsetByCodePoints(int,int)>
<java.lang.StringBuilder: CharSequence subSequence(int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,CharSequence,int,int)>
<java.lang.StringBuilder: java.lang.String substring(int)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>
<java.lang.StringBuilder: void ensureCapacity(int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<java.lang.StringBuilder: void <init>(int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>
<java.lang.StringBuilder: void <init>(String)>
<java.lang.StringBuilder: int codePointCount(int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<java.lang.StringBuilder: void getChars(int,int,char[],int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,float)>
<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>
<java.lang.StringBuilder: void trimToSize()>
<java.lang.StringBuilder: java.lang.StringBuilder append(CharSequence,int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(float)>
<java.lang.StringBuilder: int codePointAt(int)>
<java.lang.StringBuilder: int lastIndexOf(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,long)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,boolean)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,CharSequence)>
<java.lang.StringBuilder: void setCharAt(int,char)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>
<java.lang.StringBuilder: void setLength(int)>
<java.lang.StringBuilder: int lastIndexOf(java.lang.String,int)>
<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>
<java.lang.StringBuilder: char charAt(int)>
<java.lang.StringBuilder: int indexOf(java.lang.String,int)>
<java.lang.StringBuilder: int codePointBefore(int)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,double)>
<java.lang.StringBuilder: java.lang.String substring(int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>
<android.media.MediaDrm.KeyStatus: int getStatusCode()>
<android.media.MediaDrm.KeyStatus: byte[] getKeyId()>
<android.telephony.MbmsGroupCallSession: android.telephony.mbms.GroupCall startGroupCall(long,java.util.List,java.util.List,java.util.concurrent.Executor,android.telephony.mbms.GroupCallCallback)>
<android.telephony.MbmsGroupCallSession: android.telephony.MbmsGroupCallSession create(android.content.Context,java.util.concurrent.Executor,android.telephony.mbms.MbmsGroupCallSessionCallback)>
<android.telephony.MbmsGroupCallSession: void close()>
<android.telephony.MbmsGroupCallSession: android.telephony.MbmsGroupCallSession create(android.content.Context,int,java.util.concurrent.Executor,android.telephony.mbms.MbmsGroupCallSessionCallback)>
<java.security.cert.CertificateEncodingException: void <init>(String,Throwable)>
<java.security.cert.CertificateEncodingException: void <init>(String)>
<java.security.cert.CertificateEncodingException: void <init>()>
<java.security.cert.CertificateEncodingException: void <init>(Throwable)>
<java.util.concurrent.Delayed extends java.lang.Comparable: long getDelay(java.util.concurrent.TimeUnit)>
<android.transition.Visibility: void <init>()>
<android.transition.Visibility: void captureStartValues(android.transition.TransitionValues)>
<android.transition.Visibility: android.animation.Animator onAppear(android.view.ViewGroup,android.transition.TransitionValues,int,android.transition.TransitionValues,int)>
<android.transition.Visibility: android.animation.Animator onAppear(android.view.ViewGroup,android.view.View,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.transition.Visibility: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.Visibility: int getMode()>
<android.transition.Visibility: void captureEndValues(android.transition.TransitionValues)>
<android.transition.Visibility: boolean isVisible(android.transition.TransitionValues)>
<android.transition.Visibility: android.animation.Animator onDisappear(android.view.ViewGroup,android.view.View,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.transition.Visibility: android.animation.Animator onDisappear(android.view.ViewGroup,android.transition.TransitionValues,int,android.transition.TransitionValues,int)>
<android.transition.Visibility: void setMode(int)>
<java.sql.BatchUpdateException: void <init>(int[])>
<java.sql.BatchUpdateException: int[] getUpdateCounts()>
<java.sql.BatchUpdateException: void <init>(Throwable)>
<java.sql.BatchUpdateException: void <init>(String,String,int[],Throwable)>
<java.sql.BatchUpdateException: void <init>(String,int[],Throwable)>
<java.sql.BatchUpdateException: void <init>(int[],Throwable)>
<java.sql.BatchUpdateException: void <init>(String,String,int,int[],Throwable)>
<java.sql.BatchUpdateException: void <init>(String,String,int,int[])>
<java.sql.BatchUpdateException: void <init>()>
<java.sql.BatchUpdateException: void <init>(String,String,int[])>
<java.sql.BatchUpdateException: void <init>(String,int[])>
<android.nfc.TagLostException: void <init>()>
<android.nfc.TagLostException: void <init>(String)>
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setAutoRegistration(boolean)>
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile build()>
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setProfileName(java.lang.String)>
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setOutboundProxy(java.lang.String)>
<android.net.sip.SipProfile.Builder: void <init>(android.net.sip.SipProfile)>
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setAuthUserName(java.lang.String)>
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setDisplayName(java.lang.String)>
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setSendKeepAlive(boolean)>
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setProtocol(java.lang.String)>
<android.net.sip.SipProfile.Builder: void <init>(String,String)>
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setPassword(java.lang.String)>
<android.net.sip.SipProfile.Builder: android.net.sip.SipProfile.Builder setPort(int)>
<android.net.sip.SipProfile.Builder: void <init>(String)>
<android.provider.ContactsContract.CommonDataKinds.Email: int getTypeLabelResource(int)>
<android.provider.ContactsContract.CommonDataKinds.Email: CharSequence getTypeLabel(android.content.res.Resources,int,CharSequence)>
<android.view.InputDevice: void writeToParcel(android.os.Parcel,int)>
<android.view.InputDevice: java.lang.String getName()>
<android.view.InputDevice: int getKeyboardType()>
<android.view.InputDevice: boolean isVirtual()>
<android.view.InputDevice: int getControllerNumber()>
<android.view.InputDevice: boolean supportsSource(int)>
<android.view.InputDevice: int getProductId()>
<android.view.InputDevice: int getVendorId()>
<android.view.InputDevice: java.lang.String getDescriptor()>
<android.view.InputDevice: java.util.List getMotionRanges()>
<android.view.InputDevice: boolean isExternal()>
<android.view.InputDevice: int getId()>
<android.view.InputDevice: int getSources()>
<android.view.InputDevice: boolean isEnabled()>
<android.view.InputDevice: android.view.InputDevice.MotionRange getMotionRange(int,int)>
<android.view.InputDevice: boolean hasMicrophone()>
<android.view.InputDevice: void disable()>
<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()>
<android.view.InputDevice: void enable()>
<android.view.InputDevice: int describeContents()>
<android.view.InputDevice: android.view.InputDevice.MotionRange getMotionRange(int)>
<android.view.InputDevice: boolean[] hasKeys(int...)>
<android.view.InputDevice: int[] getDeviceIds()>
<android.view.InputDevice: android.os.Vibrator getVibrator()>
<android.view.InputDevice: android.view.InputDevice getDevice(int)>
<android.icu.text.NumberFormat.Field: void <init>(String)>
<android.permissionpresenterservice.RuntimePermissionPresenterService: void <init>()>
<android.permissionpresenterservice.RuntimePermissionPresenterService: void attachBaseContext(android.content.Context)>
<android.permissionpresenterservice.RuntimePermissionPresenterService: java.util.List onGetAppPermissions(java.lang.String)>
<android.permissionpresenterservice.RuntimePermissionPresenterService: android.os.IBinder onBind(android.content.Intent)>
<java.lang.ref.SoftReference: void <init>(T,java.lang.ref.ReferenceQueue)>
<java.lang.ref.SoftReference: void <init>(T)>
<android.content.ContextWrapper: java.lang.String[] databaseList()>
<android.content.ContextWrapper: void clearWallpaper()>
<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>
<android.content.ContextWrapper: boolean stopService(android.content.Intent)>
<android.content.ContextWrapper: java.io.File getExternalCacheDir()>
<android.content.ContextWrapper: android.os.Looper getMainLooper()>
<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()>
<android.content.ContextWrapper: java.lang.String getPackageResourcePath()>
<android.content.ContextWrapper: java.lang.String[] fileList()>
<android.content.ContextWrapper: void startActivities(android.content.Intent[],android.os.Bundle)>
<android.content.ContextWrapper: boolean deleteDatabase(java.lang.String)>
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,int)>
<android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
<android.content.ContextWrapper: java.io.File[] getObbDirs()>
<android.content.ContextWrapper: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>
<android.content.ContextWrapper: java.io.File getObbDir()>
<android.content.ContextWrapper: boolean isDeviceProtectedStorage()>
<android.content.ContextWrapper: void setTheme(int)>
<android.content.ContextWrapper: void unbindService(android.content.ServiceConnection)>
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>
<android.content.ContextWrapper: android.view.Display getDisplay()>
<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()>
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: android.content.Context createConfigurationContext(android.content.res.Configuration)>
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>
<android.content.ContextWrapper: java.io.File getDataDir()>
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: boolean isCredentialProtectedStorage()>
<android.content.ContextWrapper: int checkCallingPermission(java.lang.String)>
<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,int,int,int)>
<android.content.ContextWrapper: boolean deleteFile(java.lang.String)>
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>
<android.content.ContextWrapper: void revokeUriPermission(android.net.Uri,int)>
<android.content.ContextWrapper: android.content.Context getApplicationContext()>
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>
<android.content.ContextWrapper: boolean deleteSharedPreferences(java.lang.String)>
<android.content.ContextWrapper: boolean moveSharedPreferencesFrom(android.content.Context,java.lang.String)>
<android.content.ContextWrapper: android.content.res.Resources getResources()>
<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()>
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)>
<android.content.ContextWrapper: java.io.File getCacheDir()>
<android.content.ContextWrapper: java.lang.String getPackageCodePath()>
<android.content.ContextWrapper: android.graphics.drawable.Drawable getWallpaper()>
<android.content.ContextWrapper: android.content.Context createDisplayContext(android.view.Display)>
<android.content.ContextWrapper: int getDisplayId()>
<android.content.ContextWrapper: java.lang.String getPackageName()>
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)>
<android.content.ContextWrapper: android.content.Context createDeviceProtectedStorageContext()>
<android.content.ContextWrapper: android.content.res.AssetManager getAssets()>
<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
<android.content.ContextWrapper: android.content.res.Resources.Theme getTheme()>
<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>
<android.content.ContextWrapper: void startActivity(android.content.Intent,android.os.Bundle)>
<android.content.ContextWrapper: int checkCallingUriPermission(android.net.Uri,int)>
<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase.CursorFactory,android.database.DatabaseErrorHandler)>
<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>
<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>
<android.content.ContextWrapper: android.content.Context createContextForSplit(java.lang.String)>
<android.content.ContextWrapper: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>
<android.content.ContextWrapper: void attachBaseContext(android.content.Context)>
<android.content.ContextWrapper: int checkCallingOrSelfUriPermission(android.net.Uri,int)>
<android.content.ContextWrapper: void grantUriPermission(java.lang.String,android.net.Uri,int)>
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>
<android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)>
<android.content.ContextWrapper: int checkSelfPermission(java.lang.String)>
<android.content.ContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.ContextWrapper: java.io.File[] getExternalFilesDirs(java.lang.String)>
<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase.CursorFactory)>
<android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)>
<android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)>
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>
<android.content.ContextWrapper: android.graphics.drawable.Drawable peekWallpaper()>
<android.content.ContextWrapper: java.io.File[] getExternalMediaDirs()>
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: java.io.File getPreloadsFileCache()>
<android.content.ContextWrapper: void startActivity(android.content.Intent)>
<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>
<android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)>
<android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.content.ContextWrapper: void enforcePermission(java.lang.String,int,int,java.lang.String)>
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>
<android.content.ContextWrapper: java.io.File[] getExternalCacheDirs()>
<android.content.ContextWrapper: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>
<android.content.ContextWrapper: android.content.Context getBaseContext()>
<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>
<android.content.ContextWrapper: void startActivities(android.content.Intent[])>
<android.content.ContextWrapper: java.io.File getCodeCacheDir()>
<android.content.ContextWrapper: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: void revokeUriPermission(java.lang.String,android.net.Uri,int)>
<android.content.ContextWrapper: java.io.File getNoBackupFilesDir()>
<android.content.ContextWrapper: java.lang.String getSystemServiceName(java.lang.Class)>
<android.content.ContextWrapper: java.io.File getExternalFilesDir(java.lang.String)>
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: void enforceCallingPermission(java.lang.String,java.lang.String)>
<android.content.ContextWrapper: java.io.File getFilesDir()>
<android.content.ContextWrapper: int checkPermission(java.lang.String,int,int)>
<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)>
<android.content.ContextWrapper: android.content.ComponentName startForegroundService(android.content.Intent)>
<android.content.ContextWrapper: void <init>(android.content.Context)>
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>
<android.content.ContextWrapper: int checkCallingOrSelfPermission(java.lang.String)>
<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: android.content.Context createCredentialProtectedStorageContext()>
<android.content.ContextWrapper: boolean moveDatabaseFrom(android.content.Context,java.lang.String)>
<android.bluetooth.le.AdvertiseData: int describeContents()>
<android.bluetooth.le.AdvertiseData: android.util.SparseArray getManufacturerSpecificData()>
<android.bluetooth.le.AdvertiseData: boolean getIncludeDeviceName()>
<android.bluetooth.le.AdvertiseData: java.util.List getServiceUuids()>
<android.bluetooth.le.AdvertiseData: boolean getIncludeTxPowerLevel()>
<android.bluetooth.le.AdvertiseData: java.util.Map getServiceData()>
<android.bluetooth.le.AdvertiseData: void writeToParcel(android.os.Parcel,int)>
<android.media.MediaCodecInfo.EncoderCapabilities: boolean isBitrateModeSupported(int)>
<android.media.MediaCodecInfo.EncoderCapabilities: android.util.Range getQualityRange()>
<android.media.MediaCodecInfo.EncoderCapabilities: android.util.Range getComplexityRange()>
<java.security.spec.MGF1ParameterSpec: java.lang.String getDigestAlgorithm()>
<java.security.spec.MGF1ParameterSpec: void <init>(String)>
<android.widget.AdapterViewFlipper: void <init>(android.content.Context)>
<android.widget.AdapterViewFlipper: int getFlipInterval()>
<android.widget.AdapterViewFlipper: boolean isAutoStart()>
<android.widget.AdapterViewFlipper: boolean isFlipping()>
<android.widget.AdapterViewFlipper: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.AdapterViewFlipper: void setAutoStart(boolean)>
<android.widget.AdapterViewFlipper: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AdapterViewFlipper: void startFlipping()>
<android.widget.AdapterViewFlipper: void stopFlipping()>
<android.widget.AdapterViewFlipper: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AdapterViewFlipper: void setFlipInterval(int)>
<android.app.Notification.DecoratedMediaCustomViewStyle: void <init>()>
<java.lang.IncompatibleClassChangeError: void <init>()>
<java.lang.IncompatibleClassChangeError: void <init>(String)>
<android.media.projection.MediaProjection.Callback: void <init>()>
<android.media.projection.MediaProjection.Callback: void onStop()>
<android.provider.ContactsContract.Intents: void <init>()>
<android.net.sip.SipException: void <init>(String)>
<android.net.sip.SipException: void <init>(String,Throwable)>
<android.net.sip.SipException: void <init>()>
<android.service.media.MediaBrowserService.BrowserRoot: android.os.Bundle getExtras()>
<android.service.media.MediaBrowserService.BrowserRoot: java.lang.String getRootId()>
<android.service.media.MediaBrowserService.BrowserRoot: void <init>(String,android.os.Bundle)>
<android.service.euicc.GetDownloadableSubscriptionMetadataResult: android.telephony.euicc.DownloadableSubscription getDownloadableSubscription()>
<android.service.euicc.GetDownloadableSubscriptionMetadataResult: int describeContents()>
<android.service.euicc.GetDownloadableSubscriptionMetadataResult: void <init>(int,android.telephony.euicc.DownloadableSubscription)>
<android.service.euicc.GetDownloadableSubscriptionMetadataResult: int getResult()>
<android.service.euicc.GetDownloadableSubscriptionMetadataResult: void writeToParcel(android.os.Parcel,int)>
<android.util.Base64DataException: void <init>(String)>
<android.widget.AutoCompleteTextView: int getDropDownHeight()>
<android.widget.AutoCompleteTextView: int getDropDownHorizontalOffset()>
<android.widget.AutoCompleteTextView: int getDropDownAnchor()>
<android.widget.AutoCompleteTextView: boolean isPopupShowing()>
<android.widget.AutoCompleteTextView: void setDropDownBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.AutoCompleteTextView: void refreshAutoCompleteResults()>
<android.widget.AutoCompleteTextView: void replaceText(CharSequence)>
<android.widget.AutoCompleteTextView: android.widget.AdapterView.OnItemSelectedListener getItemSelectedListener()>
<android.widget.AutoCompleteTextView: void setOnDismissListener(android.widget.AutoCompleteTextView.OnDismissListener)>
<android.widget.AutoCompleteTextView: void setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)>
<android.widget.AutoCompleteTextView: boolean isPerformingCompletion()>
<android.widget.AutoCompleteTextView: android.widget.AdapterView.OnItemClickListener getOnItemClickListener()>
<android.widget.AutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.AutoCompleteTextView: android.widget.ListAdapter getAdapter()>
<android.widget.AutoCompleteTextView: CharSequence convertSelectionToString(java.lang.Object)>
<android.widget.AutoCompleteTextView: void setThreshold(int)>
<android.widget.AutoCompleteTextView: void setAdapter(T)>
<android.widget.AutoCompleteTextView: int getThreshold()>
<android.widget.AutoCompleteTextView: void onFilterComplete(int)>
<android.widget.AutoCompleteTextView: void dismissDropDown()>
<android.widget.AutoCompleteTextView: void performCompletion()>
<android.widget.AutoCompleteTextView: void setDropDownHeight(int)>
<android.widget.AutoCompleteTextView: android.widget.Filter getFilter()>
<android.widget.AutoCompleteTextView: void setInputMethodMode(int)>
<android.widget.AutoCompleteTextView: void setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)>
<android.widget.AutoCompleteTextView: boolean enoughToFilter()>
<android.widget.AutoCompleteTextView: void clearListSelection()>
<android.widget.AutoCompleteTextView: int getListSelection()>
<android.widget.AutoCompleteTextView: CharSequence getCompletionHint()>
<android.widget.AutoCompleteTextView: android.widget.AdapterView.OnItemSelectedListener getOnItemSelectedListener()>
<android.widget.AutoCompleteTextView: android.graphics.drawable.Drawable getDropDownBackground()>
<android.widget.AutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AutoCompleteTextView: void setValidator(android.widget.AutoCompleteTextView.Validator)>
<android.widget.AutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AutoCompleteTextView: void <init>(android.content.Context)>
<android.widget.AutoCompleteTextView: void setDropDownAnchor(int)>
<android.widget.AutoCompleteTextView: int getDropDownWidth()>
<android.widget.AutoCompleteTextView: android.widget.AdapterView.OnItemClickListener getItemClickListener()>
<android.widget.AutoCompleteTextView: void setDropDownBackgroundResource(@DrawableResint)>
<android.widget.AutoCompleteTextView: void setDropDownVerticalOffset(int)>
<android.widget.AutoCompleteTextView: void setText(CharSequence,boolean)>
<android.widget.AutoCompleteTextView: void showDropDown()>
<android.widget.AutoCompleteTextView: void setListSelection(int)>
<android.widget.AutoCompleteTextView: int getDropDownVerticalOffset()>
<android.widget.AutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet,int,int,android.content.res.Resources.Theme)>
<android.widget.AutoCompleteTextView: android.widget.AutoCompleteTextView.Validator getValidator()>
<android.widget.AutoCompleteTextView: void setDropDownWidth(int)>
<android.widget.AutoCompleteTextView: void performFiltering(CharSequence,int)>
<android.widget.AutoCompleteTextView: void performValidation()>
<android.widget.AutoCompleteTextView: void setCompletionHint(CharSequence)>
<android.widget.AutoCompleteTextView: int getInputMethodMode()>
<android.widget.AutoCompleteTextView: void setDropDownHorizontalOffset(int)>
<java.nio.file.ClosedWatchServiceException: void <init>()>
<android.widget.ViewAnimator: void setAnimateFirstView(boolean)>
<android.widget.ViewAnimator: android.view.animation.Animation getInAnimation()>
<android.widget.ViewAnimator: void setDisplayedChild(int)>
<android.widget.ViewAnimator: android.view.animation.Animation getOutAnimation()>
<android.widget.ViewAnimator: void showNext()>
<android.widget.ViewAnimator: void <init>(android.content.Context)>
<android.widget.ViewAnimator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ViewAnimator: android.view.View getCurrentView()>
<android.widget.ViewAnimator: int getDisplayedChild()>
<android.widget.ViewAnimator: boolean getAnimateFirstView()>
<android.widget.ViewAnimator: void setInAnimation(android.content.Context,@AnimResint)>
<android.widget.ViewAnimator: void setOutAnimation(android.content.Context,@AnimResint)>
<android.widget.ViewAnimator: void setInAnimation(android.view.animation.Animation)>
<android.widget.ViewAnimator: void showPrevious()>
<android.widget.ViewAnimator: void setOutAnimation(android.view.animation.Animation)>
<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)>
<org.apache.http.params.HttpParams: boolean isParameterFalse(java.lang.String)>
<org.apache.http.params.HttpParams: boolean removeParameter(java.lang.String)>
<org.apache.http.params.HttpParams: long getLongParameter(java.lang.String,long)>
<org.apache.http.params.HttpParams: double getDoubleParameter(java.lang.String,double)>
<org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
<org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setDoubleParameter(java.lang.String,double)>
<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
<android.hardware.display.VirtualDisplay.Callback: void <init>()>
<android.hardware.display.VirtualDisplay.Callback: void onPaused()>
<android.hardware.display.VirtualDisplay.Callback: void onResumed()>
<android.hardware.display.VirtualDisplay.Callback: void onStopped()>
<android.view.animation.Transformation: void compose(android.view.animation.Transformation)>
<android.view.animation.Transformation: float getAlpha()>
<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>
<android.view.animation.Transformation: int getTransformationType()>
<android.view.animation.Transformation: void clear()>
<android.view.animation.Transformation: void <init>()>
<android.view.animation.Transformation: java.lang.String toShortString()>
<android.view.animation.Transformation: void set(android.view.animation.Transformation)>
<android.view.animation.Transformation: void setAlpha(float)>
<android.view.animation.Transformation: void setTransformationType(int)>
<android.webkit.WebIconDatabase.IconListener: void onReceivedIcon(java.lang.String,android.graphics.Bitmap)>
<android.permission.PermissionControllerManager.OnRevokeRuntimePermissionsCallback: void <init>()>
<android.permission.PermissionControllerManager.OnRevokeRuntimePermissionsCallback: void onRevokeRuntimePermissions(java.util.Map)>
<android.media.MediaSession2.ControllerInfo: int getUid()>
<android.media.MediaSession2.ControllerInfo: android.media.session.MediaSessionManager.RemoteUserInfo getRemoteUserInfo()>
<android.media.MediaSession2.ControllerInfo: android.os.Bundle getConnectionHints()>
<android.media.MediaSession2.ControllerInfo: java.lang.String getPackageName()>
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset build()>
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,android.widget.RemoteViews)>
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,java.util.regex.Pattern)>
<android.service.autofill.Dataset.Builder: void <init>(android.widget.RemoteViews)>
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue)>
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,java.util.regex.Pattern,android.widget.RemoteViews)>
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setAuthentication(android.content.IntentSender)>
<android.service.autofill.Dataset.Builder: void <init>()>
<android.service.autofill.Dataset.Builder: android.service.autofill.Dataset.Builder setId(java.lang.String)>
<android.app.prediction.AppPredictionSessionId: void writeToParcel(android.os.Parcel,int)>
<android.app.prediction.AppPredictionSessionId: int describeContents()>
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.EditText: void <init>(android.content.Context)>
<android.widget.EditText: void setSelection(int,int)>
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.EditText: void selectAll()>
<android.widget.EditText: android.text.Editable getText()>
<android.widget.EditText: void setSelection(int)>
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.EditText: void extendSelection(int)>
<android.net.wifi.aware.Characteristics: int getMaxServiceNameLength()>
<android.net.wifi.aware.Characteristics: int getMaxMatchFilterLength()>
<android.net.wifi.aware.Characteristics: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.aware.Characteristics: int describeContents()>
<android.net.wifi.aware.Characteristics: int getMaxServiceSpecificInfoLength()>
<android.widget.ExpandableListView.ExpandableListContextMenuInfo: void <init>(android.view.View,long,long)>
<java.lang.Character.UnicodeBlock: java.lang.Character.UnicodeScript of(int)>
<java.lang.Character.UnicodeBlock: java.lang.Character.UnicodeBlock of(int)>
<java.lang.Character.UnicodeBlock: java.lang.Character.UnicodeBlock forName(java.lang.String)>
<java.lang.Character.UnicodeBlock: java.lang.Character.UnicodeScript forName(java.lang.String)>
<java.lang.Character.UnicodeBlock: java.lang.Character.UnicodeBlock of(char)>
<java.net.SocketOption: java.lang.String name()>
<java.net.SocketOption: java.lang.Class type()>
<android.graphics.drawable.LevelListDrawable: void <init>()>
<android.graphics.drawable.LevelListDrawable: void addLevel(int,int,android.graphics.drawable.Drawable)>
<javax.sql.PooledConnection: java.sql.Connection getConnection()>
<javax.sql.PooledConnection: void close()>
<javax.sql.PooledConnection: void addConnectionEventListener(javax.sql.ConnectionEventListener)>
<javax.sql.PooledConnection: void addStatementEventListener(javax.sql.StatementEventListener)>
<javax.sql.PooledConnection: void removeConnectionEventListener(javax.sql.ConnectionEventListener)>
<javax.sql.PooledConnection: void removeStatementEventListener(javax.sql.StatementEventListener)>
<android.telephony.mbms.vendor.MbmsStreamingServiceBase: void <init>()>
<android.telephony.mbms.vendor.MbmsStreamingServiceBase: int startStreaming(int,java.lang.String,android.telephony.mbms.StreamingServiceCallback)>
<android.telephony.mbms.vendor.MbmsStreamingServiceBase: void dispose(int)>
<android.telephony.mbms.vendor.MbmsStreamingServiceBase: void stopStreaming(int,java.lang.String)>
<android.telephony.mbms.vendor.MbmsStreamingServiceBase: android.os.IBinder asBinder()>
<android.telephony.mbms.vendor.MbmsStreamingServiceBase: android.net.Uri getPlaybackUri(int,java.lang.String)>
<android.telephony.mbms.vendor.MbmsStreamingServiceBase: int initialize(android.telephony.mbms.MbmsStreamingSessionCallback,int)>
<android.telephony.mbms.vendor.MbmsStreamingServiceBase: int requestUpdateStreamingServices(int,java.util.List)>
<android.telephony.mbms.vendor.MbmsStreamingServiceBase: void onAppCallbackDied(int,int)>
<android.telephony.mbms.vendor.MbmsStreamingServiceBase: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<javax.xml.xpath.XPathFactoryConfigurationException: void <init>(Throwable)>
<javax.xml.xpath.XPathFactoryConfigurationException: void <init>(String)>
<android.drm.DrmStore.RightsStatus: void <init>()>
<android.bluetooth.BluetoothClass.Device.Major: void <init>()>
<java.security.cert.CRL: java.lang.String toString()>
<java.security.cert.CRL: void <init>(String)>
<java.security.cert.CRL: java.lang.String getType()>
<java.security.cert.CRL: boolean isRevoked(java.security.cert.Certificate)>
<android.bluetooth.le.AdvertiseData.Builder: void <init>()>
<android.bluetooth.le.AdvertiseData.Builder: android.bluetooth.le.AdvertiseData build()>
<android.bluetooth.le.AdvertiseData.Builder: android.bluetooth.le.AdvertiseData.Builder addServiceData(android.os.ParcelUuid,byte[])>
<android.bluetooth.le.AdvertiseData.Builder: android.bluetooth.le.AdvertiseData.Builder addManufacturerData(int,byte[])>
<android.bluetooth.le.AdvertiseData.Builder: android.bluetooth.le.AdvertiseData.Builder addServiceUuid(android.os.ParcelUuid)>
<android.bluetooth.le.AdvertiseData.Builder: android.bluetooth.le.AdvertiseData.Builder setIncludeTxPowerLevel(boolean)>
<android.bluetooth.le.AdvertiseData.Builder: android.bluetooth.le.AdvertiseData.Builder setIncludeDeviceName(boolean)>
<android.view.textclassifier.TextClassificationSessionId: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextClassificationSessionId: int describeContents()>
<android.net.StaticIpConfiguration.Builder: android.net.StaticIpConfiguration.Builder setDnsServers(Iterable)>
<android.net.StaticIpConfiguration.Builder: android.net.StaticIpConfiguration build()>
<android.net.StaticIpConfiguration.Builder: android.net.StaticIpConfiguration.Builder setIpAddress(android.net.LinkAddress)>
<android.net.StaticIpConfiguration.Builder: android.net.StaticIpConfiguration.Builder setDomains(java.lang.String)>
<android.net.StaticIpConfiguration.Builder: android.net.StaticIpConfiguration.Builder setGateway(java.net.InetAddress)>
<android.net.StaticIpConfiguration.Builder: void <init>()>
<android.widget.RatingBar.OnRatingBarChangeListener: void onRatingChanged(android.widget.RatingBar,float,boolean)>
<java.lang.ThreadLocal: T get()>
<java.lang.ThreadLocal: void remove()>
<java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>
<java.lang.ThreadLocal: void <init>()>
<java.lang.ThreadLocal: void set(T)>
<java.lang.ThreadLocal: T initialValue()>
<android.app.backup.SharedPreferencesBackupHelper: void writeNewStateDescription(android.os.ParcelFileDescriptor)>
<android.app.backup.SharedPreferencesBackupHelper: void <init>(android.content.Context,java.lang.String...)>
<android.app.backup.SharedPreferencesBackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)>
<android.app.backup.SharedPreferencesBackupHelper: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<android.app.RemoteAction: android.app.PendingIntent getActionIntent()>
<android.app.RemoteAction: boolean shouldShowIcon()>
<android.app.RemoteAction: android.app.RemoteAction clone()>
<android.app.RemoteAction: void <init>(android.graphics.drawable.Icon,CharSequence,CharSequence,android.app.PendingIntent)>
<android.app.RemoteAction: void setEnabled(boolean)>
<android.app.RemoteAction: boolean isEnabled()>
<android.app.RemoteAction: CharSequence getContentDescription()>
<android.app.RemoteAction: CharSequence getTitle()>
<android.app.RemoteAction: void setShouldShowIcon(boolean)>
<android.app.RemoteAction: void writeToParcel(android.os.Parcel,int)>
<android.app.RemoteAction: android.graphics.drawable.Icon getIcon()>
<android.app.RemoteAction: int describeContents()>
<android.app.RemoteAction: void dump(java.lang.String,java.io.PrintWriter)>
<javax.net.ssl.SSLSessionBindingEvent: void <init>(javax.net.ssl.SSLSession,String)>
<javax.net.ssl.SSLSessionBindingEvent: java.lang.String getName()>
<javax.net.ssl.SSLSessionBindingEvent: javax.net.ssl.SSLSession getSession()>
<java.lang.reflect.GenericDeclaration extends java.lang.reflect.AnnotatedElement: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.security.DomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>
<android.os.RemoteCallbackList: void onCallbackDied(E)>
<android.os.RemoteCallbackList: boolean register(E,java.lang.Object)>
<android.os.RemoteCallbackList: void onCallbackDied(E,java.lang.Object)>
<android.os.RemoteCallbackList: boolean unregister(E)>
<android.os.RemoteCallbackList: void finishBroadcast()>
<android.os.RemoteCallbackList: void kill()>
<android.os.RemoteCallbackList: void <init>()>
<android.os.RemoteCallbackList: int getRegisteredCallbackCount()>
<android.os.RemoteCallbackList: java.lang.Object getBroadcastCookie(int)>
<android.os.RemoteCallbackList: java.lang.Object getRegisteredCallbackCookie(int)>
<android.os.RemoteCallbackList: E getRegisteredCallbackItem(int)>
<android.os.RemoteCallbackList: boolean register(E)>
<android.os.RemoteCallbackList: int beginBroadcast()>
<android.os.RemoteCallbackList: E getBroadcastItem(int)>
<java.time.Instant: java.time.Instant minusSeconds(long)>
<java.time.Instant: java.time.Instant truncatedTo(java.time.temporal.TemporalUnit)>
<java.time.Instant: java.time.Instant minus(java.time.temporal.TemporalAmount)>
<java.time.Instant: int compareTo(java.time.Instant)>
<java.time.Instant: boolean isAfter(java.time.Instant)>
<java.time.Instant: long getLong(java.time.temporal.TemporalField)>
<java.time.Instant: long toEpochMilli()>
<java.time.Instant: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>
<java.time.Instant: java.time.Instant minusMillis(long)>
<java.time.Instant: long getEpochSecond()>
<java.time.Instant: java.time.Instant now()>
<java.time.Instant: java.time.Instant with(java.time.temporal.TemporalField,long)>
<java.time.Instant: java.time.Instant minus(long,java.time.temporal.TemporalUnit)>
<java.time.Instant: java.time.Instant plus(java.time.temporal.TemporalAmount)>
<java.time.Instant: java.time.Instant plusSeconds(long)>
<java.time.Instant: java.time.Instant ofEpochSecond(long,long)>
<java.time.Instant: java.time.Instant ofEpochMilli(long)>
<java.time.Instant: java.time.Instant plusMillis(long)>
<java.time.Instant: boolean isBefore(java.time.Instant)>
<java.time.Instant: boolean isSupported(java.time.temporal.TemporalUnit)>
<java.time.Instant: java.time.OffsetDateTime atOffset(java.time.ZoneOffset)>
<java.time.Instant: java.time.Instant minusNanos(long)>
<java.time.Instant: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>
<java.time.Instant: java.time.Instant with(java.time.temporal.TemporalAdjuster)>
<java.time.Instant: int getNano()>
<java.time.Instant: java.time.ZonedDateTime atZone(java.time.ZoneId)>
<java.time.Instant: java.time.Instant parse(CharSequence)>
<java.time.Instant: java.time.Instant now(java.time.Clock)>
<java.time.Instant: java.time.Instant plus(long,java.time.temporal.TemporalUnit)>
<java.time.Instant: java.time.Instant from(java.time.temporal.TemporalAccessor)>
<java.time.Instant: java.time.Instant ofEpochSecond(long)>
<java.time.Instant: boolean isSupported(java.time.temporal.TemporalField)>
<java.time.Instant: java.time.Instant plusNanos(long)>
<android.media.audiofx.AcousticEchoCanceler: boolean isAvailable()>
<android.media.audiofx.AcousticEchoCanceler: android.media.audiofx.AcousticEchoCanceler create(int)>
<android.text.style.LineHeightSpan.WithDensity extends android.text.style.LineHeightSpan: void chooseHeight(CharSequence,int,int,int,int,android.graphics.Paint.FontMetricsInt,android.text.TextPaint)>
<android.hardware.location.NanoApp: int getNeededReadMemBytes()>
<android.hardware.location.NanoApp: void <init>(int,byte[])>
<android.hardware.location.NanoApp: void <init>()>
<android.hardware.location.NanoApp: long getAppId()>
<android.hardware.location.NanoApp: int getNeededWriteMemBytes()>
<android.hardware.location.NanoApp: void writeToParcel(android.os.Parcel,int)>
<android.hardware.location.NanoApp: void setNeededReadMemBytes(int)>
<android.hardware.location.NanoApp: int getNeededExecMemBytes()>
<android.hardware.location.NanoApp: void setAppVersion(int)>
<android.hardware.location.NanoApp: int[] getNeededSensors()>
<android.hardware.location.NanoApp: void setNeededWriteMemBytes(int)>
<android.hardware.location.NanoApp: void setAppBinary(byte[])>
<android.hardware.location.NanoApp: void setAppId(long)>
<android.hardware.location.NanoApp: void setNeededSensors(int[])>
<android.hardware.location.NanoApp: byte[] getAppBinary()>
<android.hardware.location.NanoApp: int getAppVersion()>
<android.hardware.location.NanoApp: int describeContents()>
<android.hardware.location.NanoApp: int[] getOutputEvents()>
<android.hardware.location.NanoApp: void setNeededExecMemBytes(int)>
<android.hardware.location.NanoApp: java.lang.String getName()>
<android.hardware.location.NanoApp: void setPublisher(java.lang.String)>
<android.hardware.location.NanoApp: void setName(java.lang.String)>
<android.hardware.location.NanoApp: java.lang.String getPublisher()>
<android.hardware.location.NanoApp: void setOutputEvents(int[])>
<android.hardware.location.NanoApp: void <init>(long,byte[])>
<android.system.StructStat: void <init>(long,long,int,long,int,int,long,long,long,long,long,long,long)>
<android.system.StructStat: void <init>(long,long,int,long,int,int,long,long,android.system.StructTimespec,android.system.StructTimespec,android.system.StructTimespec,long,long)>
<android.media.audiopolicy.AudioMix.Builder: android.media.audiopolicy.AudioMix.Builder setDevice(android.media.AudioDeviceInfo)>
<android.media.audiopolicy.AudioMix.Builder: android.media.audiopolicy.AudioMix build()>
<android.media.audiopolicy.AudioMix.Builder: android.media.audiopolicy.AudioMix.Builder setRouteFlags(int)>
<android.media.audiopolicy.AudioMix.Builder: android.media.audiopolicy.AudioMix.Builder setFormat(android.media.AudioFormat)>
<android.media.audiopolicy.AudioMix.Builder: void <init>(android.media.audiopolicy.AudioMixingRule)>
<android.transition.PatternPathMotion: void <init>()>
<android.transition.PatternPathMotion: void <init>(android.graphics.Path)>
<android.transition.PatternPathMotion: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.PatternPathMotion: void setPatternPath(android.graphics.Path)>
<android.transition.PatternPathMotion: android.graphics.Path getPatternPath()>
<android.transition.PatternPathMotion: android.graphics.Path getPath(float,float,float,float)>
<java.lang.BootstrapMethodError: void <init>(String)>
<java.lang.BootstrapMethodError: void <init>()>
<java.lang.BootstrapMethodError: void <init>(String,Throwable)>
<java.lang.BootstrapMethodError: void <init>(Throwable)>
<android.widget.TabWidget: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.TabWidget: void setDividerDrawable(@DrawableResint)>
<android.widget.TabWidget: int getTabCount()>
<android.widget.TabWidget: void onFocusChange(android.view.View,boolean)>
<android.widget.TabWidget: void setRightStripDrawable(android.graphics.drawable.Drawable)>
<android.widget.TabWidget: void setRightStripDrawable(@DrawableResint)>
<android.widget.TabWidget: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TabWidget: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.TabWidget: void setLeftStripDrawable(@DrawableResint)>
<android.widget.TabWidget: void <init>(android.content.Context)>
<android.widget.TabWidget: void setLeftStripDrawable(android.graphics.drawable.Drawable)>
<android.widget.TabWidget: android.graphics.drawable.Drawable getRightStripDrawable()>
<android.widget.TabWidget: boolean isStripEnabled()>
<android.widget.TabWidget: android.graphics.drawable.Drawable getLeftStripDrawable()>
<android.widget.TabWidget: void setStripEnabled(boolean)>
<android.widget.TabWidget: void setCurrentTab(int)>
<android.widget.TabWidget: void dispatchDraw(android.graphics.Canvas)>
<android.widget.TabWidget: void focusCurrentTab(int)>
<android.widget.TabWidget: android.view.View getChildTabViewAt(int)>
<android.app.RecoverableSecurityException: void <init>(Throwable,CharSequence,android.app.RemoteAction)>
<android.app.RecoverableSecurityException: void writeToParcel(android.os.Parcel,int)>
<android.app.RecoverableSecurityException: int describeContents()>
<android.app.RecoverableSecurityException: android.app.RemoteAction getUserAction()>
<android.app.RecoverableSecurityException: CharSequence getUserMessage()>
<android.app.ZygotePreload: void doPreload(android.content.pm.ApplicationInfo)>
<android.icu.text.SearchIterator: android.icu.text.SearchIterator.ElementComparisonType getElementComparisonType()>
<android.icu.text.SearchIterator: void reset()>
<android.icu.text.SearchIterator: void setTarget(java.text.CharacterIterator)>
<android.icu.text.SearchIterator: int getMatchLength()>
<android.icu.text.SearchIterator: void setIndex(int)>
<android.icu.text.SearchIterator: android.icu.text.BreakIterator getBreakIterator()>
<android.icu.text.SearchIterator: int handleNext(int)>
<android.icu.text.SearchIterator: void setElementComparisonType(android.icu.text.SearchIterator.ElementComparisonType)>
<android.icu.text.SearchIterator: int last()>
<android.icu.text.SearchIterator: java.text.CharacterIterator getTarget()>
<android.icu.text.SearchIterator: void setMatchLength(int)>
<android.icu.text.SearchIterator: void <init>(java.text.CharacterIterator,android.icu.text.BreakIterator)>
<android.icu.text.SearchIterator: int previous()>
<android.icu.text.SearchIterator: int next()>
<android.icu.text.SearchIterator: void setOverlapping(boolean)>
<android.icu.text.SearchIterator: int getIndex()>
<android.icu.text.SearchIterator: java.lang.String getMatchedText()>
<android.icu.text.SearchIterator: int preceding(int)>
<android.icu.text.SearchIterator: void setBreakIterator(android.icu.text.BreakIterator)>
<android.icu.text.SearchIterator: int handlePrevious(int)>
<android.icu.text.SearchIterator: int first()>
<android.icu.text.SearchIterator: int following(int)>
<android.icu.text.SearchIterator: boolean isOverlapping()>
<android.icu.text.SearchIterator: int getMatchStart()>
<android.view.Window: void setClipToOutline(boolean)>
<android.view.Window: void setLocalFocus(boolean,boolean)>
<android.view.Window: void makeActive()>
<android.view.Window: void setNavigationBarColor(@ColorIntint)>
<android.view.Window: void closePanel(int)>
<android.view.Window: android.transition.Transition getReturnTransition()>
<android.view.Window: void setAllowEnterTransitionOverlap(boolean)>
<android.view.Window: boolean hasChildren()>
<android.view.Window: android.transition.Transition getReenterTransition()>
<android.view.Window: void setElevation(float)>
<android.view.Window: void addSystemFlags(@android.view.WindowManager.LayoutParams.SystemFlagsint)>
<android.view.Window: int getFeatures()>
<android.view.Window: boolean isWideColorGamut()>
<android.view.Window: boolean isStatusBarContrastEnforced()>
<android.view.Window: void setContainer(android.view.Window)>
<android.view.Window: android.content.res.TypedArray getWindowStyle()>
<android.view.Window: boolean superDispatchGenericMotionEvent(android.view.MotionEvent)>
<android.view.Window: void setStatusBarColor(@ColorIntint)>
<android.view.Window: void onActive()>
<android.view.Window: void setContentView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.view.Window: void setAllowReturnTransitionOverlap(boolean)>
<android.view.Window: boolean superDispatchTrackballEvent(android.view.MotionEvent)>
<android.view.Window: void onConfigurationChanged(android.content.res.Configuration)>
<android.view.Window: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.view.Window: long getTransitionBackgroundFadeDuration()>
<android.view.Window: void setContentView(android.view.View)>
<android.view.Window: void setEnterTransition(android.transition.Transition)>
<android.view.Window: void setSharedElementExitTransition(android.transition.Transition)>
<android.view.Window: boolean hasFeature(int)>
<android.view.Window: void setBackgroundDrawableResource(@DrawableResint)>
<android.view.Window: android.view.WindowManager getWindowManager()>
<android.view.Window: android.transition.Transition getExitTransition()>
<android.view.Window: void setReenterTransition(android.transition.Transition)>
<android.view.Window: void setSharedElementsUseOverlay(boolean)>
<android.view.Window: android.transition.TransitionManager getTransitionManager()>
<android.view.Window: android.view.Window.Callback getCallback()>
<android.view.Window: void addContentView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.view.Window: void openPanel(int,android.view.KeyEvent)>
<android.view.Window: void setLayout(int,int)>
<android.view.Window: void setMediaController(android.media.session.MediaController)>
<android.view.Window: boolean performContextMenuIdentifierAction(int,int)>
<android.view.Window: void setSharedElementReenterTransition(android.transition.Transition)>
<android.view.Window: int getVolumeControlStream()>
<android.view.Window: boolean isNavigationBarContrastEnforced()>
<android.view.Window: T requireViewById(@IdResint)>
<android.view.Window: void setStatusBarContrastEnforced(boolean)>
<android.view.Window: void addFlags(int)>
<android.view.Window: void setUiOptions(int,int)>
<android.view.Window: void setSharedElementEnterTransition(android.transition.Transition)>
<android.view.Window: android.view.View peekDecorView()>
<android.view.Window: void setAttributes(android.view.WindowManager.LayoutParams)>
<android.view.Window: void clearFlags(int)>
<android.view.Window: void setContentView(@LayoutResint)>
<android.view.Window: void setFeatureDrawableResource(int,@DrawableResint)>
<android.view.Window: android.content.Context getContext()>
<android.view.Window: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>
<android.view.Window: void setSharedElementReturnTransition(android.transition.Transition)>
<android.view.Window: android.transition.Transition getSharedElementEnterTransition()>
<android.view.Window: void setCallback(android.view.Window.Callback)>
<android.view.Window: void setWindowAnimations(@StyleResint)>
<android.view.Window: void setReturnTransition(android.transition.Transition)>
<android.view.Window: void setResizingCaptionDrawable(android.graphics.drawable.Drawable)>
<android.view.Window: boolean performPanelIdentifierAction(int,int,int)>
<android.view.Window: int getLocalFeatures()>
<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String)>
<android.view.Window: void takeInputQueue(android.view.InputQueue.Callback)>
<android.view.Window: int getDefaultFeatures(android.content.Context)>
<android.view.Window: android.transition.Transition getSharedElementReenterTransition()>
<android.view.Window: void removeOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener)>
<android.view.Window: int getNavigationBarColor()>
<android.view.Window: void setTransitionManager(android.transition.TransitionManager)>
<android.view.Window: void setDecorCaptionShade(int)>
<android.view.Window: boolean superDispatchTouchEvent(android.view.MotionEvent)>
<android.view.Window: void togglePanel(int,android.view.KeyEvent)>
<android.view.Window: boolean isShortcutKey(int,android.view.KeyEvent)>
<android.view.Window: void setSystemGestureExclusionRects(java.util.List)>
<android.view.Window: void takeSurface(android.view.SurfaceHolder.Callback2)>
<android.view.Window: void closeAllPanels()>
<android.view.Window: int getColorMode()>
<android.view.Window: boolean isActive()>
<android.view.Window: boolean getSharedElementsUseOverlay()>
<android.view.Window: void setIcon(@DrawableResint)>
<android.view.Window: java.util.List getSystemGestureExclusionRects()>
<android.view.Window: boolean superDispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.view.Window: void setType(int)>
<android.view.Window: android.view.WindowManager.LayoutParams getAttributes()>
<android.view.Window: void setDimAmount(float)>
<android.view.Window: boolean getAllowReturnTransitionOverlap()>
<android.view.Window: void setDefaultWindowFormat(int)>
<android.view.Window: void <init>(android.content.Context)>
<android.view.Window: boolean requestFeature(int)>
<android.view.Window: void setFeatureDrawableAlpha(int,int)>
<android.view.Window: void setNavigationBarContrastEnforced(boolean)>
<android.view.Window: void takeKeyEvents(boolean)>
<android.view.Window: boolean superDispatchKeyEvent(android.view.KeyEvent)>
<android.view.Window: void setSoftInputMode(int)>
<android.view.Window: android.view.View getCurrentFocus()>
<android.view.Window: android.transition.Transition getSharedElementReturnTransition()>
<android.view.Window: void addOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener,android.os.Handler)>
<android.view.Window: void setChildInt(int,int)>
<android.view.Window: int getForcedWindowFlags()>
<android.view.Window: void injectInputEvent(android.view.InputEvent)>
<android.view.Window: int getStatusBarColor()>
<android.view.Window: boolean getAllowEnterTransitionOverlap()>
<android.view.Window: android.view.View getDecorView()>
<android.view.Window: android.media.session.MediaController getMediaController()>
<android.view.Window: void setColorMode(int)>
<android.view.Window: void setNavigationBarDividerColor(@ColorIntint)>
<android.view.Window: void setLogo(@DrawableResint)>
<android.view.Window: void setFlags(int,int)>
<android.view.Window: android.transition.Transition getSharedElementExitTransition()>
<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String,boolean)>
<android.view.Window: android.view.LayoutInflater getLayoutInflater()>
<android.view.Window: void setUiOptions(int)>
<android.view.Window: android.transition.Transition getEnterTransition()>
<android.view.Window: void invalidatePanelMenu(int)>
<android.view.Window: void setExitTransition(android.transition.Transition)>
<android.view.Window: boolean hasSoftInputMode()>
<android.view.Window: void setFormat(int)>
<android.view.Window: int getNavigationBarDividerColor()>
<android.view.Window: void setFeatureDrawableUri(int,android.net.Uri)>
<android.view.Window: boolean performPanelShortcut(int,int,android.view.KeyEvent,int)>
<android.view.Window: void setFeatureInt(int,int)>
<android.view.Window: void setVolumeControlStream(int)>
<android.view.Window: void setSustainedPerformanceMode(boolean)>
<android.view.Window: void setRestrictedCaptionAreaListener(android.view.Window.OnRestrictedCaptionAreaChangedListener)>
<android.view.Window: void restoreHierarchyState(android.os.Bundle)>
<android.view.Window: void setTitle(CharSequence)>
<android.view.Window: android.transition.Scene getContentScene()>
<android.view.Window: void setTransitionBackgroundFadeDuration(long)>
<android.view.Window: boolean isFloating()>
<android.view.Window: void setChildDrawable(int,android.graphics.drawable.Drawable)>
<android.view.Window: T findViewById(@IdResint)>
<android.view.Window: android.os.Bundle saveHierarchyState()>
<android.view.Window: void setGravity(int)>
<android.view.Window: android.view.Window getContainer()>
<android.view.Window: void setTitleColor(@ColorIntint)>
<android.telephony.ims.ImsCallSessionListener: void callSessionMayHandover(int,int)>
<android.telephony.ims.ImsCallSessionListener: void callSessionRttModifyResponseReceived(int)>
<android.telephony.ims.ImsCallSessionListener: void callSessionInitiated(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.ImsCallSessionListener: void callSessionHandover(int,int,android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.ImsCallSessionListener: void callSessionTerminated(android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.ImsCallSessionListener: void callSessionInviteParticipantsRequestFailed(android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.ImsCallSessionListener: void callSessionRttMessageReceived(java.lang.String)>
<android.telephony.ims.ImsCallSessionListener: void callSessionConferenceExtended(android.telephony.ims.stub.ImsCallSessionImplBase,android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.ImsCallSessionListener: void callSessionRttAudioIndicatorChanged(android.telephony.ims.ImsStreamMediaProfile)>
<android.telephony.ims.ImsCallSessionListener: void callSessionHeld(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.ImsCallSessionListener: void callSessionMergeComplete(android.telephony.ims.stub.ImsCallSessionImplBase)>
<android.telephony.ims.ImsCallSessionListener: void callSessionTtyModeReceived(int)>
<android.telephony.ims.ImsCallSessionListener: void callSessionMultipartyStateChanged(boolean)>
<android.telephony.ims.ImsCallSessionListener: void callSessionSuppServiceReceived(android.telephony.ims.ImsSuppServiceNotification)>
<android.telephony.ims.ImsCallSessionListener: void callSessionUpdateReceived(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.ImsCallSessionListener: void callSessionUssdMessageReceived(int,java.lang.String)>
<android.telephony.ims.ImsCallSessionListener: void callSessionMergeStarted(android.telephony.ims.stub.ImsCallSessionImplBase,android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.ImsCallSessionListener: void callSessionResumeReceived(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.ImsCallSessionListener: void callSessionMergeFailed(android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.ImsCallSessionListener: void callSessionRemoveParticipantsRequestDelivered()>
<android.telephony.ims.ImsCallSessionListener: void callSessionConferenceExtendReceived(android.telephony.ims.stub.ImsCallSessionImplBase,android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.ImsCallSessionListener: void callQualityChanged(android.telephony.CallQuality)>
<android.telephony.ims.ImsCallSessionListener: void callSessionUpdateFailed(android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.ImsCallSessionListener: void callSessionRemoveParticipantsRequestFailed(android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.ImsCallSessionListener: void callSessionConferenceStateUpdated(android.telephony.ims.ImsConferenceState)>
<android.telephony.ims.ImsCallSessionListener: void callSessionHandoverFailed(int,int,android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.ImsCallSessionListener: void callSessionResumed(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.ImsCallSessionListener: void callSessionConferenceExtendFailed(android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.ImsCallSessionListener: void callSessionResumeFailed(android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.ImsCallSessionListener: void callSessionUpdated(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.ImsCallSessionListener: void callSessionRttModifyRequestReceived(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.ImsCallSessionListener: void callSessionHoldFailed(android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.ImsCallSessionListener: void callSessionInitiatedFailed(android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.ImsCallSessionListener: void callSessionInviteParticipantsRequestDelivered()>
<android.telephony.ims.ImsCallSessionListener: void callSessionProgressing(android.telephony.ims.ImsStreamMediaProfile)>
<android.telephony.ims.ImsCallSessionListener: void callSessionHoldReceived(android.telephony.ims.ImsCallProfile)>
<android.content.res.Resources.NotFoundException: void <init>()>
<android.content.res.Resources.NotFoundException: void <init>(String,Exception)>
<android.content.res.Resources.NotFoundException: void <init>(String)>
<java.util.concurrent.atomic.AtomicStampedReference: void set(V,int)>
<java.util.concurrent.atomic.AtomicStampedReference: boolean attemptStamp(V,int)>
<java.util.concurrent.atomic.AtomicStampedReference: boolean compareAndSet(V,V,int,int)>
<java.util.concurrent.atomic.AtomicStampedReference: int getStamp()>
<java.util.concurrent.atomic.AtomicStampedReference: void <init>(V,int)>
<java.util.concurrent.atomic.AtomicStampedReference: V get(int[])>
<java.util.concurrent.atomic.AtomicStampedReference: V getReference()>
<java.util.concurrent.atomic.AtomicStampedReference: boolean weakCompareAndSet(V,V,int,int)>
<android.app.ActivityManager: int getLauncherLargeIconDensity()>
<android.app.ActivityManager: void scheduleApplicationInfoChanged(java.util.List,int)>
<android.app.ActivityManager: void forceStopPackage(java.lang.String)>
<android.app.ActivityManager: int getLauncherLargeIconSize()>
<android.app.ActivityManager: android.os.Debug.MemoryInfo[] getProcessMemoryInfo(int[])>
<android.app.ActivityManager: java.util.List getRunningTasks(int)>
<android.app.ActivityManager: boolean isInLockTaskMode()>
<android.app.ActivityManager: int getPackageImportance(java.lang.String)>
<android.app.ActivityManager: java.util.List getRecentTasks(int,int)>
<android.app.ActivityManager: android.util.Size getAppTaskThumbnailSize()>
<android.app.ActivityManager: void dumpPackageState(java.io.FileDescriptor,java.lang.String)>
<android.app.ActivityManager: java.util.List getRunningServices(int)>
<android.app.ActivityManager: int getUidImportance(int)>
<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)>
<android.app.ActivityManager: void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)>
<android.app.ActivityManager: boolean isLowRamDevice()>
<android.app.ActivityManager: java.util.List getProcessesInErrorState()>
<android.app.ActivityManager: boolean isRunningInUserTestHarness()>
<android.app.ActivityManager: boolean clearApplicationUserData()>
<android.app.ActivityManager: boolean isUserAMonkey()>
<android.app.ActivityManager: int getMemoryClass()>
<android.app.ActivityManager: void restartPackage(java.lang.String)>
<android.app.ActivityManager: int getLockTaskModeState()>
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager.MemoryInfo)>
<android.app.ActivityManager: java.util.Collection getSupportedLocales()>
<android.app.ActivityManager: void removeOnUidImportanceListener(android.app.ActivityManager.OnUidImportanceListener)>
<android.app.ActivityManager: boolean switchUser(android.os.UserHandle)>
<android.app.ActivityManager: void resumeAppSwitches()>
<android.app.ActivityManager: void getMyMemoryState(android.app.ActivityManager.RunningAppProcessInfo)>
<android.app.ActivityManager: void setWatchHeapLimit(long)>
<android.app.ActivityManager: boolean isActivityStartAllowedOnDisplay(android.content.Context,int,android.content.Intent)>
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>
<android.app.ActivityManager: void setDeviceLocales(android.os.LocaleList)>
<android.app.ActivityManager: void setVrThread(int)>
<android.app.ActivityManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>
<android.app.ActivityManager: void moveTaskToFront(int,int)>
<android.app.ActivityManager: int getCurrentUser()>
<android.app.ActivityManager: java.util.List getRunningAppProcesses()>
<android.app.ActivityManager: int addAppTask(android.app.Activity,android.content.Intent,android.app.ActivityManager.TaskDescription,android.graphics.Bitmap)>
<android.app.ActivityManager: void clearWatchHeapLimit()>
<android.app.ActivityManager: java.util.List getAppTasks()>
<android.app.ActivityManager: boolean isRunningInTestHarness()>
<android.app.ActivityManager: void addOnUidImportanceListener(android.app.ActivityManager.OnUidImportanceListener,int)>
<android.app.ActivityManager: int getLargeMemoryClass()>
<android.app.ActivityManager: long getTotalRam()>
<android.app.ActivityManager: boolean isBackgroundRestricted()>
<android.app.ActivityManager: void killUid(int,java.lang.String)>
<android.app.ActivityManager: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)>
<android.app.ActivityManager: void setPersistentVrThread(int)>
<android.app.prediction.AppTargetId: void writeToParcel(android.os.Parcel,int)>
<android.app.prediction.AppTargetId: int describeContents()>
<android.app.prediction.AppTargetId: void <init>(String)>
<java.nio.channels.AlreadyConnectedException: void <init>()>
<android.telephony.MbmsDownloadSession: java.io.File getTempFileRootDirectory()>
<android.telephony.MbmsDownloadSession: void setTempFileRootDirectory(java.io.File)>
<android.telephony.MbmsDownloadSession: void close()>
<android.telephony.MbmsDownloadSession: android.telephony.MbmsDownloadSession create(android.content.Context,java.util.concurrent.Executor,android.telephony.mbms.MbmsDownloadSessionCallback)>
<android.telephony.MbmsDownloadSession: java.util.List listPendingDownloads()>
<android.telephony.MbmsDownloadSession: void addStatusListener(android.telephony.mbms.DownloadRequest,java.util.concurrent.Executor,android.telephony.mbms.DownloadStatusListener)>
<android.telephony.MbmsDownloadSession: void cancelDownload(android.telephony.mbms.DownloadRequest)>
<android.telephony.MbmsDownloadSession: void requestUpdateFileServices(java.util.List)>
<android.telephony.MbmsDownloadSession: void removeProgressListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.DownloadProgressListener)>
<android.telephony.MbmsDownloadSession: void download(android.telephony.mbms.DownloadRequest)>
<android.telephony.MbmsDownloadSession: void requestDownloadState(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo)>
<android.telephony.MbmsDownloadSession: void resetDownloadKnowledge(android.telephony.mbms.DownloadRequest)>
<android.telephony.MbmsDownloadSession: void addProgressListener(android.telephony.mbms.DownloadRequest,java.util.concurrent.Executor,android.telephony.mbms.DownloadProgressListener)>
<android.telephony.MbmsDownloadSession: android.telephony.MbmsDownloadSession create(android.content.Context,java.util.concurrent.Executor,int,android.telephony.mbms.MbmsDownloadSessionCallback)>
<android.telephony.MbmsDownloadSession: void removeStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.DownloadStatusListener)>
<android.net.wifi.WifiScanner.ParcelableScanResults: void <init>(android.net.wifi.ScanResult[])>
<android.net.wifi.WifiScanner.ParcelableScanResults: android.net.wifi.ScanResult[] getResults()>
<android.view.MenuItem: android.view.MenuItem setEnabled(boolean)>
<android.view.MenuItem: android.view.ContextMenu.ContextMenuInfo getMenuInfo()>
<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char)>
<android.view.MenuItem: android.view.MenuItem setShortcut(char,char,int,int)>
<android.view.MenuItem: android.view.MenuItem setOnActionExpandListener(android.view.MenuItem.OnActionExpandListener)>
<android.view.MenuItem: android.content.res.ColorStateList getIconTintList()>
<android.view.MenuItem: android.view.SubMenu getSubMenu()>
<android.view.MenuItem: boolean hasSubMenu()>
<android.view.MenuItem: android.content.Intent getIntent()>
<android.view.MenuItem: void setShowAsAction(int)>
<android.view.MenuItem: android.view.MenuItem setContentDescription(CharSequence)>
<android.view.MenuItem: int getAlphabeticModifiers()>
<android.view.MenuItem: boolean collapseActionView()>
<android.view.MenuItem: android.view.MenuItem setShowAsActionFlags(int)>
<android.view.MenuItem: android.graphics.drawable.Drawable getIcon()>
<android.view.MenuItem: boolean isEnabled()>
<android.view.MenuItem: android.graphics.BlendMode getIconTintBlendMode()>
<android.view.MenuItem: boolean isCheckable()>
<android.view.MenuItem: boolean isVisible()>
<android.view.MenuItem: int getItemId()>
<android.view.MenuItem: android.view.MenuItem setShortcut(char,char)>
<android.view.MenuItem: char getAlphabeticShortcut()>
<android.view.MenuItem: android.view.MenuItem setIconTintBlendMode(android.graphics.BlendMode)>
<android.view.MenuItem: android.view.MenuItem setCheckable(boolean)>
<android.view.MenuItem: android.view.MenuItem setNumericShortcut(char,int)>
<android.view.MenuItem: android.view.View getActionView()>
<android.view.MenuItem: android.view.MenuItem setTitle(CharSequence)>
<android.view.MenuItem: android.view.MenuItem setIcon(@DrawableResint)>
<android.view.MenuItem: android.view.ActionProvider getActionProvider()>
<android.view.MenuItem: android.view.MenuItem setTitle(@StringResint)>
<android.view.MenuItem: boolean isActionViewExpanded()>
<android.view.MenuItem: char getNumericShortcut()>
<android.view.MenuItem: boolean expandActionView()>
<android.view.MenuItem: android.graphics.PorterDuff.Mode getIconTintMode()>
<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char,int)>
<android.view.MenuItem: int getGroupId()>
<android.view.MenuItem: CharSequence getContentDescription()>
<android.view.MenuItem: android.view.MenuItem setActionView(@LayoutResint)>
<android.view.MenuItem: android.view.MenuItem setActionView(android.view.View)>
<android.view.MenuItem: int getNumericModifiers()>
<android.view.MenuItem: android.view.MenuItem setChecked(boolean)>
<android.view.MenuItem: android.view.MenuItem setIconTintMode(android.graphics.PorterDuff.Mode)>
<android.view.MenuItem: android.view.MenuItem setIntent(android.content.Intent)>
<android.view.MenuItem: android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem.OnMenuItemClickListener)>
<android.view.MenuItem: CharSequence getTitle()>
<android.view.MenuItem: CharSequence getTooltipText()>
<android.view.MenuItem: android.view.MenuItem setVisible(boolean)>
<android.view.MenuItem: CharSequence getTitleCondensed()>
<android.view.MenuItem: android.view.MenuItem setActionProvider(android.view.ActionProvider)>
<android.view.MenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)>
<android.view.MenuItem: android.view.MenuItem setTooltipText(CharSequence)>
<android.view.MenuItem: int getOrder()>
<android.view.MenuItem: android.view.MenuItem setTitleCondensed(CharSequence)>
<android.view.MenuItem: android.view.MenuItem setIconTintList(android.content.res.ColorStateList)>
<android.view.MenuItem: android.view.MenuItem setNumericShortcut(char)>
<android.view.MenuItem: boolean isChecked()>
<java.util.jar.JarEntry: void <init>(java.util.zip.ZipEntry)>
<java.util.jar.JarEntry: java.util.jar.Attributes getAttributes()>
<java.util.jar.JarEntry: java.security.cert.Certificate[] getCertificates()>
<java.util.jar.JarEntry: java.security.CodeSigner[] getCodeSigners()>
<java.util.jar.JarEntry: void <init>(String)>
<java.util.jar.JarEntry: void <init>(java.util.jar.JarEntry)>
<android.widget.AbsSeekBar: void setThumbTintBlendMode(android.graphics.BlendMode)>
<android.widget.AbsSeekBar: void setThumbTintList(android.content.res.ColorStateList)>
<android.widget.AbsSeekBar: void setThumbOffset(int)>
<android.widget.AbsSeekBar: void setKeyProgressIncrement(int)>
<android.widget.AbsSeekBar: android.graphics.PorterDuff.Mode getTickMarkTintMode()>
<android.widget.AbsSeekBar: void setTickMarkTintList(android.content.res.ColorStateList)>
<android.widget.AbsSeekBar: void setTickMarkTintBlendMode(android.graphics.BlendMode)>
<android.widget.AbsSeekBar: android.content.res.ColorStateList getTickMarkTintList()>
<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getThumb()>
<android.widget.AbsSeekBar: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsSeekBar: android.graphics.BlendMode getTickMarkTintBlendMode()>
<android.widget.AbsSeekBar: void setSplitTrack(boolean)>
<android.widget.AbsSeekBar: android.graphics.BlendMode getThumbTintBlendMode()>
<android.widget.AbsSeekBar: android.graphics.PorterDuff.Mode getThumbTintMode()>
<android.widget.AbsSeekBar: android.content.res.ColorStateList getThumbTintList()>
<android.widget.AbsSeekBar: void setTickMarkTintMode(android.graphics.PorterDuff.Mode)>
<android.widget.AbsSeekBar: void setThumb(android.graphics.drawable.Drawable)>
<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getTickMark()>
<android.widget.AbsSeekBar: int getKeyProgressIncrement()>
<android.widget.AbsSeekBar: void <init>(android.content.Context)>
<android.widget.AbsSeekBar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AbsSeekBar: int getThumbOffset()>
<android.widget.AbsSeekBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.AbsSeekBar: void setThumbTintMode(android.graphics.PorterDuff.Mode)>
<android.widget.AbsSeekBar: boolean getSplitTrack()>
<android.widget.AbsSeekBar: void setTickMark(android.graphics.drawable.Drawable)>
<android.hardware.location.NanoAppInstanceInfo: java.lang.String getPublisher()>
<android.hardware.location.NanoAppInstanceInfo: long getAppId()>
<android.hardware.location.NanoAppInstanceInfo: int getHandle()>
<android.hardware.location.NanoAppInstanceInfo: void writeToParcel(android.os.Parcel,int)>
<android.hardware.location.NanoAppInstanceInfo: java.lang.String getName()>
<android.hardware.location.NanoAppInstanceInfo: int getNeededWriteMemBytes()>
<android.hardware.location.NanoAppInstanceInfo: void <init>()>
<android.hardware.location.NanoAppInstanceInfo: int[] getOutputEvents()>
<android.hardware.location.NanoAppInstanceInfo: int getNeededExecMemBytes()>
<android.hardware.location.NanoAppInstanceInfo: int getAppVersion()>
<android.hardware.location.NanoAppInstanceInfo: int getNeededReadMemBytes()>
<android.hardware.location.NanoAppInstanceInfo: int getContexthubId()>
<android.hardware.location.NanoAppInstanceInfo: int[] getNeededSensors()>
<android.hardware.location.NanoAppInstanceInfo: int describeContents()>
<android.speech.tts.Voice: void writeToParcel(android.os.Parcel,int)>
<android.speech.tts.Voice: int getQuality()>
<android.speech.tts.Voice: java.util.Locale getLocale()>
<android.speech.tts.Voice: int getLatency()>
<android.speech.tts.Voice: java.lang.String getName()>
<android.speech.tts.Voice: void <init>(String,java.util.Locale,int,int,boolean,java.util.Set)>
<android.speech.tts.Voice: boolean isNetworkConnectionRequired()>
<android.speech.tts.Voice: java.util.Set getFeatures()>
<android.speech.tts.Voice: int describeContents()>
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothA2dp: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothA2dp: void finalize()>
<android.icu.text.Normalizer: int compare(int,java.lang.String,int)>
<android.icu.text.Normalizer: int compare(int,int,int)>
<android.icu.text.Normalizer: java.lang.Object clone()>
<android.icu.text.Normalizer: int compare(java.lang.String,java.lang.String,int)>
<android.icu.text.Normalizer: int compare(char[],char[],int)>
<android.icu.text.Normalizer: int compare(char[],int,int,char[],int,int,int)>
<java.io.NotActiveException: void <init>(String)>
<java.io.NotActiveException: void <init>()>
<android.media.MediaCodec.CryptoInfo: void <init>()>
<android.media.MediaCodec.CryptoInfo: void setPattern(android.media.MediaCodec.CryptoInfo.Pattern)>
<android.media.MediaCodec.CryptoInfo: void set(int,int[],int[],byte[],byte[],int)>
<java.lang.invoke.WrongMethodTypeException: void <init>(String)>
<java.lang.invoke.WrongMethodTypeException: void <init>()>
<android.service.euicc.EuiccService: int onDownloadSubscription(int,android.telephony.euicc.DownloadableSubscription,boolean,boolean)>
<android.service.euicc.EuiccService: int onUpdateSubscriptionNickname(int,java.lang.String,java.lang.String)>
<android.service.euicc.EuiccService: android.os.IBinder onBind(android.content.Intent)>
<android.service.euicc.EuiccService: int onRetainSubscriptionsForFactoryReset(int)>
<android.service.euicc.EuiccService: void onStartOtaIfNecessary(int,android.service.euicc.EuiccService.OtaStatusChangedCallback)>
<android.service.euicc.EuiccService: int onDeleteSubscription(int,java.lang.String)>
<android.service.euicc.EuiccService: android.service.euicc.GetEuiccProfileInfoListResult onGetEuiccProfileInfoList(int)>
<android.service.euicc.EuiccService: java.lang.String onGetEid(int)>
<android.service.euicc.EuiccService: int onGetOtaStatus(int)>
<android.service.euicc.EuiccService: android.service.euicc.GetDownloadableSubscriptionMetadataResult onGetDownloadableSubscriptionMetadata(int,android.telephony.euicc.DownloadableSubscription,boolean)>
<android.service.euicc.EuiccService: android.telephony.euicc.EuiccInfo onGetEuiccInfo(int)>
<android.service.euicc.EuiccService: void <init>()>
<android.service.euicc.EuiccService: android.service.euicc.DownloadSubscriptionResult onDownloadSubscription(int,android.telephony.euicc.DownloadableSubscription,boolean,boolean,android.os.Bundle)>
<android.service.euicc.EuiccService: int onSwitchToSubscription(int,java.lang.String,boolean)>
<android.service.euicc.EuiccService: android.service.euicc.GetDefaultDownloadableSubscriptionListResult onGetDefaultDownloadableSubscriptionList(int,boolean)>
<android.service.euicc.EuiccService: int onEraseSubscriptions(int)>
<org.w3c.dom.NodeList: int getLength()>
<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>
<android.bluetooth.BluetoothGattService: android.bluetooth.BluetoothGattCharacteristic getCharacteristic(java.util.UUID)>
<android.bluetooth.BluetoothGattService: void writeToParcel(android.os.Parcel,int)>
<android.bluetooth.BluetoothGattService: boolean addCharacteristic(android.bluetooth.BluetoothGattCharacteristic)>
<android.bluetooth.BluetoothGattService: int getInstanceId()>
<android.bluetooth.BluetoothGattService: int getType()>
<android.bluetooth.BluetoothGattService: java.util.List getIncludedServices()>
<android.bluetooth.BluetoothGattService: void <init>(java.util.UUID,int)>
<android.bluetooth.BluetoothGattService: boolean addService(android.bluetooth.BluetoothGattService)>
<android.bluetooth.BluetoothGattService: int describeContents()>
<android.bluetooth.BluetoothGattService: java.util.UUID getUuid()>
<android.bluetooth.BluetoothGattService: java.util.List getCharacteristics()>
<javax.crypto.interfaces.PBEKey extends javax.crypto.SecretKey: int getIterationCount()>
<javax.crypto.interfaces.PBEKey extends javax.crypto.SecretKey: char[] getPassword()>
<javax.crypto.interfaces.PBEKey extends javax.crypto.SecretKey: byte[] getSalt()>
<android.provider.ContactsContract.CommonDataKinds.Contactables: void <init>()>
<java.lang.Appendable: Appendable append(CharSequence,int,int)>
<java.lang.Appendable: Appendable append(CharSequence)>
<java.lang.Appendable: Appendable append(char)>
<java.util.IllegalFormatConversionException: java.lang.Class getArgumentClass()>
<java.util.IllegalFormatConversionException: void <init>(char,Class)>
<java.util.IllegalFormatConversionException: char getConversion()>
<android.view.Choreographer: long getFrameDelay()>
<android.view.Choreographer: void removeCallbacks(int,Runnable,java.lang.Object)>
<android.view.Choreographer: void postCallbackDelayed(int,Runnable,java.lang.Object,long)>
<android.view.Choreographer: void postFrameCallback(android.view.Choreographer.FrameCallback)>
<android.view.Choreographer: void removeFrameCallback(android.view.Choreographer.FrameCallback)>
<android.view.Choreographer: void postFrameCallbackDelayed(android.view.Choreographer.FrameCallback,long)>
<android.view.Choreographer: void setFrameDelay(long)>
<android.view.Choreographer: void postCallback(int,Runnable,java.lang.Object)>
<android.view.Choreographer: android.view.Choreographer getInstance()>
<android.hardware.HardwareBuffer: long getUsage()>
<android.hardware.HardwareBuffer: boolean isClosed()>
<android.hardware.HardwareBuffer: int getHeight()>
<android.hardware.HardwareBuffer: void close()>
<android.hardware.HardwareBuffer: int getWidth()>
<android.hardware.HardwareBuffer: int describeContents()>
<android.hardware.HardwareBuffer: void writeToParcel(android.os.Parcel,int)>
<android.hardware.HardwareBuffer: android.hardware.HardwareBuffer create(int,int,int,int,long)>
<android.hardware.HardwareBuffer: int getLayers()>
<android.hardware.HardwareBuffer: boolean isSupported(int,int,int,int,long)>
<android.hardware.HardwareBuffer: int getFormat()>
<android.text.style.IconMarginSpan: void <init>(from=0) int)>
<android.text.style.IconMarginSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,CharSequence,int,int,boolean,android.text.Layout)>
<android.text.style.IconMarginSpan: void <init>(android.graphics.Bitmap)>
<android.text.style.IconMarginSpan: void chooseHeight(CharSequence,int,int,int,int,android.graphics.Paint.FontMetricsInt)>
<android.text.style.IconMarginSpan: int getLeadingMargin(boolean)>
<android.net.metrics.ApfStats.Builder: android.net.metrics.ApfStats.Builder setProgramUpdatesAllowingMulticast(int)>
<android.net.metrics.ApfStats.Builder: void <init>()>
<android.net.metrics.ApfStats.Builder: android.net.metrics.ApfStats.Builder setProgramUpdates(int)>
<android.net.metrics.ApfStats.Builder: android.net.metrics.ApfStats.Builder setMaxProgramSize(int)>
<android.net.metrics.ApfStats.Builder: android.net.metrics.ApfStats.Builder setZeroLifetimeRas(int)>
<android.net.metrics.ApfStats.Builder: android.net.metrics.ApfStats.Builder setProgramUpdatesAll(int)>
<android.net.metrics.ApfStats.Builder: android.net.metrics.ApfStats.Builder setDroppedRas(int)>
<android.net.metrics.ApfStats.Builder: android.net.metrics.ApfStats.Builder setParseErrors(int)>
<android.net.metrics.ApfStats.Builder: android.net.metrics.ApfStats build()>
<android.net.metrics.ApfStats.Builder: android.net.metrics.ApfStats.Builder setDurationMs(long)>
<android.net.metrics.ApfStats.Builder: android.net.metrics.ApfStats.Builder setMatchingRas(int)>
<android.net.metrics.ApfStats.Builder: android.net.metrics.ApfStats.Builder setReceivedRas(int)>
<javax.crypto.spec.RC2ParameterSpec: void <init>(int,byte[])>
<javax.crypto.spec.RC2ParameterSpec: byte[] getIV()>
<javax.crypto.spec.RC2ParameterSpec: int getEffectiveKeyBits()>
<javax.crypto.spec.RC2ParameterSpec: void <init>(int,byte[],int)>
<javax.crypto.spec.RC2ParameterSpec: void <init>(int)>
<java.util.Spliterator.OfInt extends java.util.Spliterator.OfPrimitive: void forEachRemaining(java.util.function.Consumer)>
<java.util.Spliterator.OfInt extends java.util.Spliterator.OfPrimitive: boolean tryAdvance(java.util.function.IntConsumer)>
<java.util.Spliterator.OfInt extends java.util.Spliterator.OfPrimitive: void forEachRemaining(java.util.function.IntConsumer)>
<java.util.Spliterator.OfInt extends java.util.Spliterator.OfPrimitive: java.util.Spliterator.OfInt trySplit()>
<java.util.Spliterator.OfInt extends java.util.Spliterator.OfPrimitive: boolean tryAdvance(java.util.function.Consumer)>
<android.os.StatFs: int getBlockSize()>
<android.os.StatFs: int getAvailableBlocks()>
<android.os.StatFs: long getBlockCountLong()>
<android.os.StatFs: long getAvailableBytes()>
<android.os.StatFs: long getFreeBlocksLong()>
<android.os.StatFs: long getFreeBytes()>
<android.os.StatFs: int getBlockCount()>
<android.os.StatFs: void restat(java.lang.String)>
<android.os.StatFs: int getFreeBlocks()>
<android.os.StatFs: long getTotalBytes()>
<android.os.StatFs: void <init>(String)>
<android.os.StatFs: long getAvailableBlocksLong()>
<android.os.StatFs: long getBlockSizeLong()>
<android.hardware.usb.UsbDeviceConnection: android.hardware.usb.UsbRequest requestWait(long)>
<android.hardware.usb.UsbDeviceConnection: boolean setConfiguration(android.hardware.usb.UsbConfiguration)>
<android.hardware.usb.UsbDeviceConnection: java.lang.String getSerial()>
<android.hardware.usb.UsbDeviceConnection: int getFileDescriptor()>
<android.hardware.usb.UsbDeviceConnection: boolean claimInterface(android.hardware.usb.UsbInterface,boolean)>
<android.hardware.usb.UsbDeviceConnection: void close()>
<android.hardware.usb.UsbDeviceConnection: boolean releaseInterface(android.hardware.usb.UsbInterface)>
<android.hardware.usb.UsbDeviceConnection: int bulkTransfer(android.hardware.usb.UsbEndpoint,byte[],int,int,int)>
<android.hardware.usb.UsbDeviceConnection: android.hardware.usb.UsbRequest requestWait()>
<android.hardware.usb.UsbDeviceConnection: boolean resetDevice()>
<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int)>
<android.hardware.usb.UsbDeviceConnection: int bulkTransfer(android.hardware.usb.UsbEndpoint,byte[],int,int)>
<android.hardware.usb.UsbDeviceConnection: byte[] getRawDescriptors()>
<android.hardware.usb.UsbDeviceConnection: boolean setInterface(android.hardware.usb.UsbInterface)>
<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int,int)>
<java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory: java.util.concurrent.ForkJoinWorkerThread newThread(java.util.concurrent.ForkJoinPool)>
<android.app.admin.SystemUpdatePolicy.ValidationFailedException: int describeContents()>
<android.app.admin.SystemUpdatePolicy.ValidationFailedException: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.SystemUpdatePolicy.ValidationFailedException: int getErrorCode()>
<java.util.concurrent.ConcurrentSkipListSet: E pollLast()>
<java.util.concurrent.ConcurrentSkipListSet: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentSkipListSet: java.util.NavigableSet tailSet(E)>
<java.util.concurrent.ConcurrentSkipListSet: void <init>(java.util.Comparator)>
<java.util.concurrent.ConcurrentSkipListSet: java.util.NavigableSet headSet(E,boolean)>
<java.util.concurrent.ConcurrentSkipListSet: java.util.NavigableSet tailSet(E,boolean)>
<java.util.concurrent.ConcurrentSkipListSet: java.util.Iterator descendingIterator()>
<java.util.concurrent.ConcurrentSkipListSet: E first()>
<java.util.concurrent.ConcurrentSkipListSet: E lower(E)>
<java.util.concurrent.ConcurrentSkipListSet: void <init>(java.util.Collection)>
<java.util.concurrent.ConcurrentSkipListSet: E pollFirst()>
<java.util.concurrent.ConcurrentSkipListSet: int size()>
<java.util.concurrent.ConcurrentSkipListSet: java.util.Comparator comparator()>
<java.util.concurrent.ConcurrentSkipListSet: java.util.NavigableSet descendingSet()>
<java.util.concurrent.ConcurrentSkipListSet: java.util.NavigableSet subSet(E,boolean,E,boolean)>
<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentSkipListSet clone()>
<java.util.concurrent.ConcurrentSkipListSet: E floor(E)>
<java.util.concurrent.ConcurrentSkipListSet: java.util.NavigableSet subSet(E,E)>
<java.util.concurrent.ConcurrentSkipListSet: java.util.NavigableSet headSet(E)>
<java.util.concurrent.ConcurrentSkipListSet: void <init>()>
<java.util.concurrent.ConcurrentSkipListSet: void <init>(java.util.SortedSet)>
<java.util.concurrent.ConcurrentSkipListSet: E higher(E)>
<java.util.concurrent.ConcurrentSkipListSet: E last()>
<java.util.concurrent.ConcurrentSkipListSet: E ceiling(E)>
<android.view.animation.OvershootInterpolator: void <init>()>
<android.view.animation.OvershootInterpolator: void <init>(float)>
<android.view.animation.OvershootInterpolator: float getInterpolation(float)>
<android.view.animation.OvershootInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.KeyCharacterMap: char getMatch(int,char[])>
<android.view.KeyCharacterMap: int getKeyboardType()>
<android.view.KeyCharacterMap: int get(int,int)>
<android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)>
<android.view.KeyCharacterMap: int getDeadChar(int,int)>
<android.view.KeyCharacterMap: boolean getKeyData(int,android.view.KeyCharacterMap.KeyData)>
<android.view.KeyCharacterMap: char getNumber(int)>
<android.view.KeyCharacterMap: boolean isPrintingKey(int)>
<android.view.KeyCharacterMap: int getModifierBehavior()>
<android.view.KeyCharacterMap: boolean[] deviceHasKeys(int[])>
<android.view.KeyCharacterMap: boolean deviceHasKey(int)>
<android.view.KeyCharacterMap: char getDisplayLabel(int)>
<android.view.KeyCharacterMap: int describeContents()>
<android.view.KeyCharacterMap: void writeToParcel(android.os.Parcel,int)>
<android.view.KeyCharacterMap: char getMatch(int,char[],int)>
<android.view.KeyCharacterMap: android.view.KeyEvent[] getEvents(char[])>
<java.lang.Object: java.lang.Class getClass()>
<java.lang.Object: void notifyAll()>
<java.lang.Object: void <init>()>
<java.lang.Object: void wait()>
<java.lang.Object: java.lang.Object clone()>
<java.lang.Object: boolean equals(java.lang.Object)>
<java.lang.Object: void finalize()>
<java.lang.Object: java.lang.String toString()>
<java.lang.Object: void notify()>
<java.lang.Object: int hashCode()>
<java.lang.Object: void wait(long)>
<java.lang.Object: void wait(long,int)>
<java.util.function.DoublePredicate: java.util.function.DoublePredicate or(java.util.function.DoublePredicate)>
<java.util.function.DoublePredicate: java.util.function.DoublePredicate and(java.util.function.DoublePredicate)>
<java.util.function.DoublePredicate: java.util.function.DoublePredicate negate()>
<java.util.function.DoublePredicate: boolean test(double)>
<android.media.SoundPool.Builder: android.media.SoundPool.Builder setMaxStreams(int)>
<android.media.SoundPool.Builder: void <init>()>
<android.media.SoundPool.Builder: android.media.SoundPool.Builder setAudioAttributes(android.media.AudioAttributes)>
<android.media.SoundPool.Builder: android.media.SoundPool build()>
<android.content.SyncContext: android.os.IBinder getSyncContextBinder()>
<android.content.SyncContext: void onFinished(android.content.SyncResult)>
<android.text.method.MultiTapKeyListener: void <init>(android.text.method.TextKeyListener.Capitalize,boolean)>
<android.text.method.MultiTapKeyListener: void onSpanRemoved(android.text.Spannable,java.lang.Object,int,int)>
<android.text.method.MultiTapKeyListener: void onSpanChanged(android.text.Spannable,java.lang.Object,int,int,int,int)>
<android.text.method.MultiTapKeyListener: int getInputType()>
<android.text.method.MultiTapKeyListener: android.text.method.MultiTapKeyListener getInstance(boolean,android.text.method.TextKeyListener.Capitalize)>
<android.text.method.MultiTapKeyListener: void onSpanAdded(android.text.Spannable,java.lang.Object,int,int)>
<android.view.View.OnSystemUiVisibilityChangeListener: void onSystemUiVisibilityChange(int)>
<android.hardware.camera2.params.ColorSpaceTransform: android.util.Rational getElement(int,int)>
<android.hardware.camera2.params.ColorSpaceTransform: void <init>(int[])>
<android.hardware.camera2.params.ColorSpaceTransform: void <init>(android.util.Rational[])>
<android.hardware.camera2.params.ColorSpaceTransform: void copyElements(int[],int)>
<android.hardware.camera2.params.ColorSpaceTransform: void copyElements(android.util.Rational[],int)>
<android.text.style.AbsoluteSizeSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.AbsoluteSizeSpan: void <init>(int,boolean)>
<android.text.style.AbsoluteSizeSpan: int describeContents()>
<android.text.style.AbsoluteSizeSpan: boolean getDip()>
<android.text.style.AbsoluteSizeSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.AbsoluteSizeSpan: void <init>(int)>
<android.text.style.AbsoluteSizeSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.AbsoluteSizeSpan: int getSize()>
<android.text.style.AbsoluteSizeSpan: int getSpanTypeId()>
<android.text.style.AbsoluteSizeSpan: void <init>(android.os.Parcel)>
<android.view.GestureDetector.OnGestureListener: void onLongPress(android.view.MotionEvent)>
<android.view.GestureDetector.OnGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.view.GestureDetector.OnGestureListener: void onShowPress(android.view.MotionEvent)>
<android.view.GestureDetector.OnGestureListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.view.GestureDetector.OnGestureListener: boolean onSingleTapUp(android.view.MotionEvent)>
<android.view.GestureDetector.OnGestureListener: boolean onDown(android.view.MotionEvent)>
<android.location.GpsNavigationMessage: byte[] getData()>
<android.location.GpsNavigationMessage: void reset()>
<android.location.GpsNavigationMessage: void writeToParcel(android.os.Parcel,int)>
<android.location.GpsNavigationMessage: void setSubmessageId(short)>
<android.location.GpsNavigationMessage: short getMessageId()>
<android.location.GpsNavigationMessage: void setData(byte[])>
<android.location.GpsNavigationMessage: void setPrn(byte)>
<android.location.GpsNavigationMessage: byte getType()>
<android.location.GpsNavigationMessage: void setMessageId(short)>
<android.location.GpsNavigationMessage: int describeContents()>
<android.location.GpsNavigationMessage: short getStatus()>
<android.location.GpsNavigationMessage: void set(android.location.GpsNavigationMessage)>
<android.location.GpsNavigationMessage: byte getPrn()>
<android.location.GpsNavigationMessage: short getSubmessageId()>
<android.location.GpsNavigationMessage: void setStatus(short)>
<android.location.GpsNavigationMessage: void setType(byte)>
<android.view.contentcapture.ViewNode: android.view.autofill.AutofillId getParentAutofillId()>
<android.view.contentcapture.ViewNode: android.view.contentcapture.ViewNode readFromParcel(android.os.Parcel)>
<android.view.contentcapture.ViewNode: void writeToParcel(android.os.Parcel,android.view.contentcapture.ViewNode,int)>
<java.net.URLClassLoader: void close()>
<java.net.URLClassLoader: java.util.Enumeration findResources(java.lang.String)>
<java.net.URLClassLoader: java.net.URLClassLoader newInstance(java.net.URL[],java.lang.ClassLoader)>
<java.net.URLClassLoader: void addURL(java.net.URL)>
<java.net.URLClassLoader: void <init>(java.net.URL[],ClassLoader)>
<java.net.URLClassLoader: void <init>(java.net.URL[],ClassLoader,java.net.URLStreamHandlerFactory)>
<java.net.URLClassLoader: java.lang.Package definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>
<java.net.URLClassLoader: java.net.URLClassLoader newInstance(java.net.URL[])>
<java.net.URLClassLoader: void <init>(java.net.URL[])>
<java.net.URLClassLoader: java.net.URL[] getURLs()>
<java.net.URLClassLoader: java.net.URL findResource(java.lang.String)>
<android.webkit.CookieManager: void flush()>
<android.webkit.CookieManager: java.lang.String getCookie(java.lang.String)>
<android.webkit.CookieManager: boolean hasCookies()>
<android.webkit.CookieManager: void setAcceptThirdPartyCookies(android.webkit.WebView,boolean)>
<android.webkit.CookieManager: void removeExpiredCookie()>
<android.webkit.CookieManager: boolean allowFileSchemeCookiesImpl()>
<android.webkit.CookieManager: java.lang.String getCookie(android.net.WebAddress)>
<android.webkit.CookieManager: void removeAllCookies(android.webkit.ValueCallback)>
<android.webkit.CookieManager: void setAcceptFileSchemeCookiesImpl(boolean)>
<android.webkit.CookieManager: boolean acceptCookie()>
<android.webkit.CookieManager: void setAcceptCookie(boolean)>
<android.webkit.CookieManager: java.lang.String getCookie(java.lang.String,boolean)>
<android.webkit.CookieManager: void removeSessionCookie()>
<android.webkit.CookieManager: void removeSessionCookies(android.webkit.ValueCallback)>
<android.webkit.CookieManager: android.webkit.CookieManager getInstance()>
<android.webkit.CookieManager: void setAcceptFileSchemeCookies(boolean)>
<android.webkit.CookieManager: void removeAllCookie()>
<android.webkit.CookieManager: void <init>()>
<android.webkit.CookieManager: void setCookie(java.lang.String,java.lang.String)>
<android.webkit.CookieManager: boolean acceptThirdPartyCookies(android.webkit.WebView)>
<android.webkit.CookieManager: boolean allowFileSchemeCookies()>
<android.webkit.CookieManager: boolean hasCookies(boolean)>
<android.webkit.CookieManager: void setCookie(java.lang.String,java.lang.String,android.webkit.ValueCallback)>
<android.view.animation.TranslateAnimation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.TranslateAnimation: void <init>(int,float,int,float,int,float,int,float)>
<android.view.animation.TranslateAnimation: void <init>(float,float,float,float)>
<android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction: void <init>(int,CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction: int getId()>
<android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction: CharSequence getLabel()>
<android.telephony.PreciseCallState: int getRingingCallState()>
<android.telephony.PreciseCallState: void writeToParcel(android.os.Parcel,int)>
<android.telephony.PreciseCallState: int describeContents()>
<android.telephony.PreciseCallState: int getBackgroundCallState()>
<android.telephony.PreciseCallState: int getForegroundCallState()>
<android.app.VoiceInteractor.CommandRequest: void onCommandResult(boolean,android.os.Bundle)>
<android.app.VoiceInteractor.CommandRequest: void <init>(String,android.os.Bundle)>
<android.view.KeyboardShortcutInfo: void <init>(CharSequence,char,int)>
<android.view.KeyboardShortcutInfo: int getModifiers()>
<android.view.KeyboardShortcutInfo: int getKeycode()>
<android.view.KeyboardShortcutInfo: void <init>(CharSequence,int,int)>
<android.view.KeyboardShortcutInfo: char getBaseCharacter()>
<android.view.KeyboardShortcutInfo: int describeContents()>
<android.view.KeyboardShortcutInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.KeyboardShortcutInfo: CharSequence getLabel()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.ResultSetMetaData getMetaData()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.io.InputStream getUnicodeStream(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBlob(int,java.io.InputStream,long)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateAsciiStream(int,java.io.InputStream,int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateNCharacterStream(java.lang.String,java.io.Reader,long)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateArray(java.lang.String,java.sql.Array)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBlob(java.lang.String,java.sql.Blob)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Clob getClob(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Timestamp getTimestamp(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: int getInt(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateNCharacterStream(java.lang.String,java.io.Reader)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateCharacterStream(int,java.io.Reader,long)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateShort(int,short)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.math.BigDecimal getBigDecimal(java.lang.String,int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Date getDate(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBinaryStream(java.lang.String,java.io.InputStream,int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Timestamp getTimestamp(int,java.util.Calendar)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateNClob(int,java.io.Reader)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void refreshRow()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateDouble(java.lang.String,double)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.SQLWarning getWarnings()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBlob(int,java.sql.Blob)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void moveToInsertRow()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBlob(java.lang.String,java.io.InputStream,long)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateCharacterStream(int,java.io.Reader)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateClob(int,java.io.Reader)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: int getType()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateNClob(int,java.io.Reader,long)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBoolean(int,boolean)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.SQLXML getSQLXML(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateNClob(java.lang.String,java.io.Reader)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: int getHoldability()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: boolean isBeforeFirst()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: int getFetchDirection()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: int getInt(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void setFetchSize(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.io.Reader getCharacterStream(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Array getArray(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateAsciiStream(java.lang.String,java.io.InputStream)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateCharacterStream(java.lang.String,java.io.Reader)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.lang.Object getObject(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.lang.String getString(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateNClob(int,java.sql.NClob)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateNClob(java.lang.String,java.io.Reader,long)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateFloat(java.lang.String,float)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateLong(int,long)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: boolean first()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: boolean previous()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBinaryStream(int,java.io.InputStream,long)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateString(int,java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.io.InputStream getAsciiStream(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: boolean getBoolean(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateDouble(int,double)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: boolean rowDeleted()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateInt(int,int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateClob(java.lang.String,java.sql.Clob)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateObject(int,java.lang.Object)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateNClob(java.lang.String,java.sql.NClob)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateAsciiStream(int,java.io.InputStream,long)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Ref getRef(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: boolean isLast()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateFloat(int,float)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Array getArray(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Clob getClob(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateNull(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Time getTime(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBinaryStream(java.lang.String,java.io.InputStream)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateRef(int,java.sql.Ref)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Date getDate(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: boolean last()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: boolean getBoolean(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateCharacterStream(java.lang.String,java.io.Reader,int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateClob(int,java.sql.Clob)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: byte getByte(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: float getFloat(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: short getShort(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Ref getRef(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateClob(java.lang.String,java.io.Reader)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateNCharacterStream(int,java.io.Reader,long)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Date getDate(java.lang.String,java.util.Calendar)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: boolean rowUpdated()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateTime(int,java.sql.Time)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateObject(java.lang.String,java.lang.Object,int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.lang.String getString(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateNString(int,java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateSQLXML(int,java.sql.SQLXML)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBlob(java.lang.String,java.io.InputStream)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateObject(java.lang.String,java.lang.Object)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.io.InputStream getBinaryStream(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateNCharacterStream(int,java.io.Reader)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void setFetchDirection(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateLong(java.lang.String,long)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateTimestamp(int,java.sql.Timestamp)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateTimestamp(java.lang.String,java.sql.Timestamp)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBlob(int,java.io.InputStream)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBoolean(java.lang.String,boolean)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.lang.Object getObject(int,java.util.Map)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateCharacterStream(java.lang.String,java.io.Reader,long)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateRowId(int,java.sql.RowId)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Date getDate(int,java.util.Calendar)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: short getShort(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.net.URL getURL(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: boolean relative(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateByte(int,byte)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBigDecimal(int,java.math.BigDecimal)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBytes(int,byte[])>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateAsciiStream(int,java.io.InputStream)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateClob(java.lang.String,java.io.Reader,long)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateNull(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBinaryStream(int,java.io.InputStream)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.math.BigDecimal getBigDecimal(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.lang.String getNString(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.RowId getRowId(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: float getFloat(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.NClob getNClob(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateArray(int,java.sql.Array)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBinaryStream(java.lang.String,java.io.InputStream,long)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateNString(java.lang.String,java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: boolean wasNull()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.io.InputStream getBinaryStream(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateInt(java.lang.String,int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: byte getByte(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Blob getBlob(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: byte[] getBytes(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateCharacterStream(int,java.io.Reader,int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateRowId(java.lang.String,java.sql.RowId)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Timestamp getTimestamp(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void afterLast()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.RowId getRowId(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: byte[] getBytes(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.NClob getNClob(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateClob(int,java.io.Reader,long)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateTime(java.lang.String,java.sql.Time)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Time getTime(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Blob getBlob(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: boolean next()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.lang.String getCursorName()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.io.Reader getNCharacterStream(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBigDecimal(java.lang.String,java.math.BigDecimal)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: long getLong(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateByte(java.lang.String,byte)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void deleteRow()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.SQLXML getSQLXML(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Time getTime(java.lang.String,java.util.Calendar)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.math.BigDecimal getBigDecimal(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Time getTime(int,java.util.Calendar)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void clearWarnings()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: boolean absolute(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: int getFetchSize()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.net.URL getURL(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateAsciiStream(java.lang.String,java.io.InputStream,int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: boolean isClosed()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void moveToCurrentRow()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBytes(java.lang.String,byte[])>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: int getConcurrency()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.io.Reader getNCharacterStream(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.math.BigDecimal getBigDecimal(int,int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateDate(java.lang.String,java.sql.Date)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.lang.Object getObject(java.lang.String,java.util.Map)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateBinaryStream(int,java.io.InputStream,int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateDate(int,java.sql.Date)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Statement getStatement()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void beforeFirst()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateRow()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.io.Reader getCharacterStream(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: int getRow()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: int findColumn(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateString(java.lang.String,java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void cancelRowUpdates()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateShort(java.lang.String,short)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void insertRow()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.lang.String getNString(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: boolean isFirst()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: boolean rowInserted()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateAsciiStream(java.lang.String,java.io.InputStream,long)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: boolean isAfterLast()>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: long getLong(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: double getDouble(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: double getDouble(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.io.InputStream getAsciiStream(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.lang.Object getObject(int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateObject(int,java.lang.Object,int)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateRef(java.lang.String,java.sql.Ref)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: java.io.InputStream getUnicodeStream(java.lang.String)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void updateSQLXML(java.lang.String,java.sql.SQLXML)>
<java.sql.ResultSet extends java.sql.Wrapper java.lang.AutoCloseable: void close()>
<android.icu.text.DecimalFormat: int getSecondaryGroupingSize()>
<android.icu.text.DecimalFormat: android.icu.text.DecimalFormatSymbols getDecimalFormatSymbols()>
<android.icu.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.DecimalFormat: java.math.BigDecimal getRoundingIncrement()>
<android.icu.text.DecimalFormat: void setMinimumSignificantDigits(int)>
<android.icu.text.DecimalFormat: void setPositiveSuffix(java.lang.String)>
<android.icu.text.DecimalFormat: void <init>(String,android.icu.text.DecimalFormatSymbols)>
<android.icu.text.DecimalFormat: void setParseBigDecimal(boolean)>
<android.icu.text.DecimalFormat: int getMaximumSignificantDigits()>
<android.icu.text.DecimalFormat: void setMinimumExponentDigits(byte)>
<android.icu.text.DecimalFormat: void <init>()>
<android.icu.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>
<android.icu.text.DecimalFormat: void setMaximumSignificantDigits(int)>
<android.icu.text.DecimalFormat: void setDecimalFormatSymbols(android.icu.text.DecimalFormatSymbols)>
<android.icu.text.DecimalFormat: void setMathContext(java.math.MathContext)>
<android.icu.text.DecimalFormat: void setSecondaryGroupingSize(int)>
<android.icu.text.DecimalFormat: void setRoundingIncrement(java.math.BigDecimal)>
<android.icu.text.DecimalFormat: void setPadPosition(int)>
<android.icu.text.DecimalFormat: void setPositivePrefix(java.lang.String)>
<android.icu.text.DecimalFormat: void setRoundingIncrement(double)>
<android.icu.text.DecimalFormat: int getGroupingSize()>
<android.icu.text.DecimalFormat: void setScientificNotation(boolean)>
<android.icu.text.DecimalFormat: void applyPattern(java.lang.String)>
<android.icu.text.DecimalFormat: int getFormatWidth()>
<android.icu.text.DecimalFormat: java.lang.String getPositiveSuffix()>
<android.icu.text.DecimalFormat: byte getMinimumExponentDigits()>
<android.icu.text.DecimalFormat: void setNegativePrefix(java.lang.String)>
<android.icu.text.DecimalFormat: void setMathContextICU(android.icu.math.MathContext)>
<android.icu.text.DecimalFormat: java.lang.String toPattern()>
<android.icu.text.DecimalFormat: void <init>(String,android.icu.text.DecimalFormatSymbols,android.icu.text.CurrencyPluralInfo,int)>
<android.icu.text.DecimalFormat: boolean isScientificNotation()>
<android.icu.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.DecimalFormat: void setPadCharacter(char)>
<android.icu.text.DecimalFormat: void setGroupingSize(int)>
<android.icu.text.DecimalFormat: java.lang.StringBuffer format(android.icu.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.DecimalFormat: void setDecimalPatternMatchRequired(boolean)>
<android.icu.text.DecimalFormat: void setSignificantDigitsUsed(boolean)>
<android.icu.text.DecimalFormat: boolean isDecimalPatternMatchRequired()>
<android.icu.text.DecimalFormat: java.lang.String getNegativeSuffix()>
<android.icu.text.DecimalFormat: boolean isExponentSignAlwaysShown()>
<android.icu.text.DecimalFormat: void setCurrencyPluralInfo(android.icu.text.CurrencyPluralInfo)>
<android.icu.text.DecimalFormat: java.lang.String toLocalizedPattern()>
<android.icu.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.DecimalFormat: void applyLocalizedPattern(java.lang.String)>
<android.icu.text.DecimalFormat: java.lang.String getNegativePrefix()>
<android.icu.text.DecimalFormat: int getParseMaxDigits()>
<android.icu.text.DecimalFormat: android.icu.text.CurrencyPluralInfo getCurrencyPluralInfo()>
<android.icu.text.DecimalFormat: char getPadCharacter()>
<android.icu.text.DecimalFormat: void <init>(String)>
<android.icu.text.DecimalFormat: java.lang.String getPositivePrefix()>
<android.icu.text.DecimalFormat: android.icu.util.Currency.CurrencyUsage getCurrencyUsage()>
<android.icu.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigInteger,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.DecimalFormat: void setParseMaxDigits(int)>
<android.icu.text.DecimalFormat: int getMultiplier()>
<android.icu.text.DecimalFormat: void setExponentSignAlwaysShown(boolean)>
<android.icu.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>
<android.icu.text.DecimalFormat: void setCurrencyUsage(android.icu.util.Currency.CurrencyUsage)>
<android.icu.text.DecimalFormat: int getMinimumSignificantDigits()>
<android.icu.text.DecimalFormat: void setMultiplier(int)>
<android.icu.text.DecimalFormat: void setFormatWidth(int)>
<android.icu.text.DecimalFormat: java.math.MathContext getMathContext()>
<android.icu.text.DecimalFormat: boolean isDecimalSeparatorAlwaysShown()>
<android.icu.text.DecimalFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>
<android.icu.text.DecimalFormat: boolean areSignificantDigitsUsed()>
<android.icu.text.DecimalFormat: boolean isParseBigDecimal()>
<android.icu.text.DecimalFormat: int getPadPosition()>
<android.icu.text.DecimalFormat: void setRoundingIncrement(android.icu.math.BigDecimal)>
<android.icu.text.DecimalFormat: android.icu.math.MathContext getMathContextICU()>
<android.os.DropBoxManager: void <init>()>
<android.os.DropBoxManager: void addFile(java.lang.String,java.io.File,int)>
<android.os.DropBoxManager: void addData(java.lang.String,byte[],int)>
<android.os.DropBoxManager: boolean isTagEnabled(java.lang.String)>
<android.os.DropBoxManager: void addText(java.lang.String,java.lang.String)>
<android.os.DropBoxManager: android.os.DropBoxManager.Entry getNextEntry(java.lang.String,long)>
<android.provider.CalendarContract.Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
<android.system.StructTimespec: void <init>(long,long)>
<android.system.StructTimespec: int compareTo(android.system.StructTimespec)>
<android.telephony.CellIdentityWcdma: int getLac()>
<android.telephony.CellIdentityWcdma: int getMnc()>
<android.telephony.CellIdentityWcdma: java.lang.String getMncString()>
<android.telephony.CellIdentityWcdma: int getPsc()>
<android.telephony.CellIdentityWcdma: int getCid()>
<android.telephony.CellIdentityWcdma: int getMcc()>
<android.telephony.CellIdentityWcdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellIdentityWcdma: java.lang.String getMobileNetworkOperator()>
<android.telephony.CellIdentityWcdma: java.lang.String getMccString()>
<android.telephony.CellIdentityWcdma: int getUarfcn()>
<android.graphics.drawable.Animatable2.AnimationCallback: void onAnimationStart(android.graphics.drawable.Drawable)>
<android.graphics.drawable.Animatable2.AnimationCallback: void <init>()>
<android.graphics.drawable.Animatable2.AnimationCallback: void onAnimationEnd(android.graphics.drawable.Drawable)>
<android.speech.tts.TextToSpeech.OnUtteranceCompletedListener: void onUtteranceCompleted(java.lang.String)>
<dalvik.system.PathClassLoader: void <init>(String,String,ClassLoader)>
<dalvik.system.PathClassLoader: void <init>(String,ClassLoader)>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: void <init>()>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: java.lang.String getImsi()>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: void <init>(android.net.wifi.hotspot2.pps.Credential.SimCredential)>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: int getEapType()>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: void setEapType(int)>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: int describeContents()>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: void setImsi(java.lang.String)>
<android.os.DeviceIdleManager: java.lang.String[] getSystemPowerWhitelist()>
<android.os.DeviceIdleManager: java.lang.String[] getSystemPowerWhitelistExceptIdle()>
<android.media.session.MediaSessionManager: java.util.List getSession2Tokens()>
<android.media.session.MediaSessionManager: void removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener)>
<android.media.session.MediaSessionManager: java.util.List getActiveSessions(android.content.ComponentName)>
<android.media.session.MediaSessionManager: void removeOnSession2TokensChangedListener(android.media.session.MediaSessionManager.OnSession2TokensChangedListener)>
<android.media.session.MediaSessionManager: void notifySession2Created(android.media.Session2Token)>
<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener,android.content.ComponentName)>
<android.media.session.MediaSessionManager: boolean isTrustedForMediaControl(android.media.session.MediaSessionManager.RemoteUserInfo)>
<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager.OnSession2TokensChangedListener,android.os.Handler)>
<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager.OnSession2TokensChangedListener)>
<android.media.session.MediaSessionManager: void setOnMediaKeyListener(android.media.session.MediaSessionManager.OnMediaKeyListener,android.os.Handler)>
<android.media.session.MediaSessionManager: void setOnVolumeKeyLongPressListener(android.media.session.MediaSessionManager.OnVolumeKeyLongPressListener,android.os.Handler)>
<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener,android.content.ComponentName,android.os.Handler)>
<android.content.ClipData.Item: void <init>(CharSequence,String,android.content.Intent,android.net.Uri)>
<android.content.ClipData.Item: java.lang.String coerceToHtmlText(android.content.Context)>
<android.content.ClipData.Item: CharSequence coerceToStyledText(android.content.Context)>
<android.content.ClipData.Item: void <init>(android.content.Intent)>
<android.content.ClipData.Item: android.content.Intent getIntent()>
<android.content.ClipData.Item: CharSequence coerceToText(android.content.Context)>
<android.content.ClipData.Item: void <init>(CharSequence,android.content.Intent,android.net.Uri)>
<android.content.ClipData.Item: void <init>(CharSequence)>
<android.content.ClipData.Item: void <init>(CharSequence,String)>
<android.content.ClipData.Item: java.lang.String getHtmlText()>
<android.content.ClipData.Item: android.net.Uri getUri()>
<android.content.ClipData.Item: CharSequence getText()>
<android.content.ClipData.Item: void <init>(android.net.Uri)>
<android.view.accessibility.AccessibilityEventSource: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>
<android.view.accessibility.AccessibilityEventSource: void sendAccessibilityEvent(int)>
<android.graphics.pdf.PdfDocument: void <init>()>
<android.graphics.pdf.PdfDocument: java.util.List getPages()>
<android.graphics.pdf.PdfDocument: android.graphics.pdf.PdfDocument.Page startPage(android.graphics.pdf.PdfDocument.PageInfo)>
<android.graphics.pdf.PdfDocument: void finishPage(android.graphics.pdf.PdfDocument.Page)>
<android.graphics.pdf.PdfDocument: void writeTo(java.io.OutputStream)>
<android.graphics.pdf.PdfDocument: void close()>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndUpdate(T,java.util.function.IntUnaryOperator)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int addAndGet(T,int)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndSet(T,int)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean weakCompareAndSet(T,int,int)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void <init>()>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndAccumulate(T,int,java.util.function.IntBinaryOperator)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void lazySet(T,int)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void set(T,int)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int updateAndGet(T,java.util.function.IntUnaryOperator)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndDecrement(T)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(T)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int decrementAndGet(T)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int incrementAndGet(T)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(T,int,int)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndAdd(T,int)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int accumulateAndGet(T,int,java.util.function.IntBinaryOperator)>
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndIncrement(T)>
<android.icu.text.Edits: android.icu.text.Edits.Iterator getCoarseIterator()>
<android.icu.text.Edits: void addReplace(int,int)>
<android.icu.text.Edits: void addUnchanged(int)>
<android.icu.text.Edits: int numberOfChanges()>
<android.icu.text.Edits: boolean hasChanges()>
<android.icu.text.Edits: void reset()>
<android.icu.text.Edits: android.icu.text.Edits.Iterator getCoarseChangesIterator()>
<android.icu.text.Edits: void <init>()>
<android.icu.text.Edits: android.icu.text.Edits.Iterator getFineIterator()>
<android.icu.text.Edits: int lengthDelta()>
<android.icu.text.Edits: android.icu.text.Edits.Iterator getFineChangesIterator()>
<android.icu.text.Edits: android.icu.text.Edits mergeAndAppend(android.icu.text.Edits,android.icu.text.Edits)>
<android.renderscript.Element.Builder: void <init>(android.renderscript.RenderScript)>
<android.renderscript.Element.Builder: android.renderscript.Element.Builder add(android.renderscript.Element,java.lang.String,int)>
<android.renderscript.Element.Builder: android.renderscript.Element create()>
<android.renderscript.Element.Builder: android.renderscript.Element.Builder add(android.renderscript.Element,java.lang.String)>
<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>
<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])>
<android.database.sqlite.SQLiteProgram: void bindNull(int)>
<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>
<android.database.sqlite.SQLiteProgram: void bindAllArgsAsStrings(java.lang.String[])>
<android.database.sqlite.SQLiteProgram: int getUniqueId()>
<android.database.sqlite.SQLiteProgram: void onAllReferencesReleased()>
<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)>
<android.database.sqlite.SQLiteProgram: void clearBindings()>
<android.telephony.CellIdentity: CharSequence getOperatorAlphaShort()>
<android.telephony.CellIdentity: CharSequence getOperatorAlphaLong()>
<android.telephony.CellIdentity: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellIdentity: int describeContents()>
<android.icu.text.AlphabeticIndex: android.icu.text.AlphabeticIndex addLabels(android.icu.util.ULocale...)>
<android.icu.text.AlphabeticIndex: android.icu.text.AlphabeticIndex addLabels(java.util.Locale...)>
<android.icu.text.AlphabeticIndex: int getBucketIndex(CharSequence)>
<android.icu.text.AlphabeticIndex: android.icu.text.RuleBasedCollator getCollator()>
<android.icu.text.AlphabeticIndex: android.icu.text.AlphabeticIndex.ImmutableIndex buildImmutableIndex()>
<android.icu.text.AlphabeticIndex: int getRecordCount()>
<android.icu.text.AlphabeticIndex: void <init>(android.icu.util.ULocale)>
<android.icu.text.AlphabeticIndex: java.lang.String getUnderflowLabel()>
<android.icu.text.AlphabeticIndex: android.icu.text.AlphabeticIndex setMaxLabelCount(int)>
<android.icu.text.AlphabeticIndex: int getBucketCount()>
<android.icu.text.AlphabeticIndex: java.lang.String getOverflowLabel()>
<android.icu.text.AlphabeticIndex: android.icu.text.AlphabeticIndex setUnderflowLabel(java.lang.String)>
<android.icu.text.AlphabeticIndex: java.util.List getBucketLabels()>
<android.icu.text.AlphabeticIndex: void <init>(android.icu.text.RuleBasedCollator)>
<android.icu.text.AlphabeticIndex: java.util.Iterator iterator()>
<android.icu.text.AlphabeticIndex: android.icu.text.AlphabeticIndex setOverflowLabel(java.lang.String)>
<android.icu.text.AlphabeticIndex: android.icu.text.AlphabeticIndex addRecord(CharSequence,V)>
<android.icu.text.AlphabeticIndex: java.lang.String getInflowLabel()>
<android.icu.text.AlphabeticIndex: android.icu.text.AlphabeticIndex setInflowLabel(java.lang.String)>
<android.icu.text.AlphabeticIndex: void <init>(java.util.Locale)>
<android.icu.text.AlphabeticIndex: android.icu.text.AlphabeticIndex clearRecords()>
<android.icu.text.AlphabeticIndex: int getMaxLabelCount()>
<android.icu.text.AlphabeticIndex: android.icu.text.AlphabeticIndex addLabels(android.icu.text.UnicodeSet)>
<java.util.function.ObjIntConsumer: void accept(T,int)>
<javax.xml.transform.Source: void setSystemId(java.lang.String)>
<javax.xml.transform.Source: java.lang.String getSystemId()>
<android.webkit.WebViewFactory: void <init>()>
<android.webkit.WebViewFactory: int loadWebViewNativeLibraryFromPackage(java.lang.String,java.lang.ClassLoader)>
<android.webkit.WebViewFactory: void prepareWebViewInZygote()>
<android.webkit.WebViewFactory: android.content.pm.PackageInfo getLoadedPackageInfo()>
<android.hardware.fingerprint.FingerprintManager.AuthenticationResult: android.hardware.fingerprint.FingerprintManager.CryptoObject getCryptoObject()>
<android.location.OnNmeaMessageListener: void onNmeaMessage(java.lang.String,long)>
<android.app.backup.BackupDataInputStream: int read()>
<android.app.backup.BackupDataInputStream: int size()>
<android.app.backup.BackupDataInputStream: java.lang.String getKey()>
<org.xml.sax.helpers.XMLReaderAdapter: void endDocument()>
<org.xml.sax.helpers.XMLReaderAdapter: void endPrefixMapping(java.lang.String)>
<org.xml.sax.helpers.XMLReaderAdapter: void setDocumentHandler(org.xml.sax.DocumentHandler)>
<org.xml.sax.helpers.XMLReaderAdapter: void <init>(org.xml.sax.XMLReader)>
<org.xml.sax.helpers.XMLReaderAdapter: void processingInstruction(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.XMLReaderAdapter: void startPrefixMapping(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.XMLReaderAdapter: void setLocale(java.util.Locale)>
<org.xml.sax.helpers.XMLReaderAdapter: void setErrorHandler(org.xml.sax.ErrorHandler)>
<org.xml.sax.helpers.XMLReaderAdapter: void ignorableWhitespace(char[],int,int)>
<org.xml.sax.helpers.XMLReaderAdapter: void setDocumentLocator(org.xml.sax.Locator)>
<org.xml.sax.helpers.XMLReaderAdapter: void setDTDHandler(org.xml.sax.DTDHandler)>
<org.xml.sax.helpers.XMLReaderAdapter: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>
<org.xml.sax.helpers.XMLReaderAdapter: void endElement(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.XMLReaderAdapter: void skippedEntity(java.lang.String)>
<org.xml.sax.helpers.XMLReaderAdapter: void parse(org.xml.sax.InputSource)>
<org.xml.sax.helpers.XMLReaderAdapter: void parse(java.lang.String)>
<org.xml.sax.helpers.XMLReaderAdapter: void startDocument()>
<org.xml.sax.helpers.XMLReaderAdapter: void <init>()>
<org.xml.sax.helpers.XMLReaderAdapter: void characters(char[],int,int)>
<org.xml.sax.helpers.XMLReaderAdapter: void setEntityResolver(org.xml.sax.EntityResolver)>
<java.lang.VirtualMachineError: void <init>(String)>
<java.lang.VirtualMachineError: void <init>(Throwable)>
<java.lang.VirtualMachineError: void <init>()>
<java.lang.VirtualMachineError: void <init>(String,Throwable)>
<android.media.AudioManager.AudioPlaybackCallback: void <init>()>
<android.media.AudioManager.AudioPlaybackCallback: void onPlaybackConfigChanged(java.util.List)>
<android.os.health.SystemHealthManager: android.os.health.HealthStats[] takeUidSnapshots(int[])>
<android.os.health.SystemHealthManager: android.os.health.HealthStats takeMyUidSnapshot()>
<android.os.health.SystemHealthManager: android.os.health.HealthStats takeUidSnapshot(int)>
<android.os.UserHandle: void <init>(android.os.Parcel)>
<android.os.UserHandle: void writeToParcel(android.os.Parcel,int)>
<android.os.UserHandle: boolean isSystem()>
<android.os.UserHandle: boolean isApp(int)>
<android.os.UserHandle: void writeToParcel(android.os.UserHandle,android.os.Parcel)>
<android.os.UserHandle: int getAppId(int)>
<android.os.UserHandle: boolean isOwner()>
<android.os.UserHandle: int getIdentifier()>
<android.os.UserHandle: int myUserId()>
<android.os.UserHandle: int describeContents()>
<android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)>
<android.os.UserHandle: android.os.UserHandle readFromParcel(android.os.Parcel)>
<android.os.UserHandle: android.os.UserHandle of(int)>
<android.app.FragmentManager.OnBackStackChangedListener: void onBackStackChanged()>
<android.graphics.SweepGradient: void <init>(float,float,@ColorInt int,@ColorInt int)>
<android.graphics.SweepGradient: void <init>(float,float,@ColorLong long[],float[])>
<android.graphics.SweepGradient: void <init>(float,float,@ColorLong long,@ColorLong long)>
<android.graphics.SweepGradient: void <init>(float,float,@ColorInt int[],float[])>
<java.security.Signer: void <init>()>
<java.security.Signer: void <init>(String)>
<java.security.Signer: void setKeyPair(java.security.KeyPair)>
<java.security.Signer: java.security.PrivateKey getPrivateKey()>
<java.security.Signer: void <init>(String,java.security.IdentityScope)>
<android.media.AudioTrack.OnRoutingChangedListener extends android.media.AudioRouting.OnRoutingChangedListener: void onRoutingChanged(android.media.AudioTrack)>
<android.media.AudioTrack.OnRoutingChangedListener extends android.media.AudioRouting.OnRoutingChangedListener: void onRoutingChanged(android.media.AudioRouting)>
<android.net.wifi.WifiScanner.ParcelableScanData: void <init>(android.net.wifi.WifiScanner.ScanData[])>
<android.net.wifi.WifiScanner.ParcelableScanData: android.net.wifi.WifiScanner.ScanData[] getResults()>
<android.security.keystore.KeyInfo: java.util.Date getKeyValidityStart()>
<android.security.keystore.KeyInfo: java.lang.String[] getDigests()>
<android.security.keystore.KeyInfo: java.lang.String[] getBlockModes()>
<android.security.keystore.KeyInfo: boolean isInsideSecureHardware()>
<android.security.keystore.KeyInfo: boolean isUserAuthenticationValidWhileOnBody()>
<android.security.keystore.KeyInfo: java.lang.String[] getSignaturePaddings()>
<android.security.keystore.KeyInfo: int getUserAuthenticationValidityDurationSeconds()>
<android.security.keystore.KeyInfo: int getOrigin()>
<android.security.keystore.KeyInfo: java.util.Date getKeyValidityForOriginationEnd()>
<android.security.keystore.KeyInfo: java.lang.String getKeystoreAlias()>
<android.security.keystore.KeyInfo: int getPurposes()>
<android.security.keystore.KeyInfo: boolean isUserConfirmationRequired()>
<android.security.keystore.KeyInfo: int getKeySize()>
<android.security.keystore.KeyInfo: java.util.Date getKeyValidityForConsumptionEnd()>
<android.security.keystore.KeyInfo: boolean isTrustedUserPresenceRequired()>
<android.security.keystore.KeyInfo: boolean isUserAuthenticationRequired()>
<android.security.keystore.KeyInfo: java.lang.String[] getEncryptionPaddings()>
<android.security.keystore.KeyInfo: boolean isInvalidatedByBiometricEnrollment()>
<android.security.keystore.KeyInfo: boolean isUserAuthenticationRequirementEnforcedBySecureHardware()>
<android.accessibilityservice.AccessibilityService.MagnificationController.OnMagnificationChangedListener: void onMagnificationChanged(android.accessibilityservice.AccessibilityService.MagnificationController,android.graphics.Region,float,float,float)>
<javax.net.ssl.HttpsURLConnection: void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier()>
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>
<javax.net.ssl.HttpsURLConnection: java.security.cert.Certificate[] getServerCertificates()>
<javax.net.ssl.HttpsURLConnection: void <init>(java.net.URL)>
<javax.net.ssl.HttpsURLConnection: java.security.Principal getPeerPrincipal()>
<javax.net.ssl.HttpsURLConnection: void setHostnameVerifier(javax.net.ssl.HostnameVerifier)>
<javax.net.ssl.HttpsURLConnection: java.security.cert.Certificate[] getLocalCertificates()>
<javax.net.ssl.HttpsURLConnection: java.security.Principal getLocalPrincipal()>
<javax.net.ssl.HttpsURLConnection: void setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>
<javax.net.ssl.HttpsURLConnection: void setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)>
<javax.net.ssl.HttpsURLConnection: java.lang.String getCipherSuite()>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: android.database.sqlite.SQLiteDatabase.CursorFactory getCursorFactory()>
<android.database.sqlite.SQLiteQueryBuilder: java.util.Map getProjectionMap()>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String getTables()>
<android.database.sqlite.SQLiteQueryBuilder: boolean isStrict()>
<android.database.sqlite.SQLiteQueryBuilder: boolean isDistinct()>
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: void setStrict(boolean)>
<android.database.sqlite.SQLiteQueryBuilder: void setCursorFactory(android.database.sqlite.SQLiteDatabase.CursorFactory)>
<android.database.sqlite.SQLiteQueryBuilder: void <init>()>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: void appendWhereEscapeString(java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: int update(android.database.sqlite.SQLiteDatabase,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteQueryBuilder: void setDistinct(boolean)>
<android.database.sqlite.SQLiteQueryBuilder: void setProjectionMap(java.util.Map)>
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: void appendColumns(java.lang.StringBuilder,java.lang.String[])>
<android.database.sqlite.SQLiteQueryBuilder: int delete(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteQueryBuilder: void appendWhere(CharSequence)>
<android.database.sqlite.SQLiteQueryBuilder: void appendWhereStandalone(CharSequence)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set,int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionQuery(java.lang.String[],java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQueryString(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.inputmethodservice.Keyboard: java.util.List getKeys()>
<android.inputmethodservice.Keyboard: int getHorizontalGap()>
<android.inputmethodservice.Keyboard: boolean setShifted(boolean)>
<android.inputmethodservice.Keyboard: void <init>(android.content.Context,@XmlRes int,int,int,int)>
<android.inputmethodservice.Keyboard: int getVerticalGap()>
<android.inputmethodservice.Keyboard: void setKeyHeight(int)>
<android.inputmethodservice.Keyboard: int getHeight()>
<android.inputmethodservice.Keyboard: int getShiftKeyIndex()>
<android.inputmethodservice.Keyboard: void <init>(android.content.Context,int)>
<android.inputmethodservice.Keyboard: int getKeyWidth()>
<android.inputmethodservice.Keyboard: void setKeyWidth(int)>
<android.inputmethodservice.Keyboard: int getKeyHeight()>
<android.inputmethodservice.Keyboard: android.inputmethodservice.Keyboard.Row createRowFromXml(android.content.res.Resources,android.content.res.XmlResourceParser)>
<android.inputmethodservice.Keyboard: int getMinWidth()>
<android.inputmethodservice.Keyboard: void <init>(android.content.Context,@XmlRes int,int)>
<android.inputmethodservice.Keyboard: boolean isShifted()>
<android.inputmethodservice.Keyboard: void setHorizontalGap(int)>
<android.inputmethodservice.Keyboard: android.inputmethodservice.Keyboard.Key createKeyFromXml(android.content.res.Resources,android.inputmethodservice.Keyboard.Row,int,int,android.content.res.XmlResourceParser)>
<android.inputmethodservice.Keyboard: java.util.List getModifierKeys()>
<android.inputmethodservice.Keyboard: void setVerticalGap(int)>
<android.inputmethodservice.Keyboard: void <init>(android.content.Context,int,CharSequence,int,int)>
<android.inputmethodservice.Keyboard: int[] getNearestKeys(int,int)>
<android.R.fraction: void <init>()>
<android.app.FragmentController: void dispatchResume()>
<android.app.FragmentController: void dispatchLowMemory()>
<android.app.FragmentController: void dispatchPictureInPictureModeChanged(boolean,android.content.res.Configuration)>
<android.app.FragmentController: void restoreLoaderNonConfig(android.util.ArrayMap)>
<android.app.FragmentController: void dispatchPictureInPictureModeChanged(boolean)>
<android.app.FragmentController: void dispatchStop()>
<android.app.FragmentController: void dumpLoaders(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.FragmentController: android.app.FragmentManagerNonConfig retainNestedNonConfig()>
<android.app.FragmentController: void dispatchMultiWindowModeChanged(boolean)>
<android.app.FragmentController: void dispatchTrimMemory(int)>
<android.app.FragmentController: android.app.Fragment findFragmentByWho(java.lang.String)>
<android.app.FragmentController: void dispatchPause()>
<android.app.FragmentController: void dispatchCreate()>
<android.app.FragmentController: void dispatchConfigurationChanged(android.content.res.Configuration)>
<android.app.FragmentController: java.util.List retainNonConfig()>
<android.app.FragmentController: void doLoaderStart()>
<android.app.FragmentController: void doLoaderStop(boolean)>
<android.app.FragmentController: void restoreAllState(android.os.Parcelable,java.util.List)>
<android.app.FragmentController: void dispatchStart()>
<android.app.FragmentController: void dispatchDestroyView()>
<android.app.FragmentController: void restoreAllState(android.os.Parcelable,android.app.FragmentManagerNonConfig)>
<android.app.FragmentController: boolean dispatchOptionsItemSelected(android.view.MenuItem)>
<android.app.FragmentController: android.os.Parcelable saveAllState()>
<android.app.FragmentController: android.app.FragmentController createController(android.app.FragmentHostCallback)>
<android.app.FragmentController: void dispatchMultiWindowModeChanged(boolean,android.content.res.Configuration)>
<android.app.FragmentController: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>
<android.app.FragmentController: android.app.LoaderManager getLoaderManager()>
<android.app.FragmentController: boolean execPendingActions()>
<android.app.FragmentController: void dispatchActivityCreated()>
<android.app.FragmentController: boolean dispatchContextItemSelected(android.view.MenuItem)>
<android.app.FragmentController: void dispatchOptionsMenuClosed(android.view.Menu)>
<android.app.FragmentController: void doLoaderDestroy()>
<android.app.FragmentController: void noteStateNotSaved()>
<android.app.FragmentController: void attachHost(android.app.Fragment)>
<android.app.FragmentController: android.util.ArrayMap retainLoaderNonConfig()>
<android.app.FragmentController: boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
<android.app.FragmentController: android.app.FragmentManager getFragmentManager()>
<android.app.FragmentController: boolean dispatchPrepareOptionsMenu(android.view.Menu)>
<android.app.FragmentController: void reportLoaderStart()>
<android.app.FragmentController: void dispatchDestroy()>
<android.widget.TabHost.OnTabChangeListener: void onTabChanged(java.lang.String)>
<android.media.audiofx.AudioEffect.OnEnableStatusChangeListener: void onEnableStatusChange(android.media.audiofx.AudioEffect,boolean)>
<android.provider.MediaStore.Video.Media: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore.Video.Media: void <init>()>
<android.telephony.euicc.EuiccNotification: int getEvent()>
<android.telephony.euicc.EuiccNotification: byte[] getData()>
<android.telephony.euicc.EuiccNotification: void <init>(int,String,@android.telephony.euicc.EuiccNotification.Event int,byte[])>
<android.telephony.euicc.EuiccNotification: void writeToParcel(android.os.Parcel,int)>
<android.telephony.euicc.EuiccNotification: int describeContents()>
<android.telephony.euicc.EuiccNotification: int getSeq()>
<android.telephony.euicc.EuiccNotification: java.lang.String getTargetAddr()>
<android.accessibilityservice.FingerprintGestureController: void unregisterFingerprintGestureCallback(android.accessibilityservice.FingerprintGestureController.FingerprintGestureCallback)>
<android.accessibilityservice.FingerprintGestureController: void registerFingerprintGestureCallback(android.accessibilityservice.FingerprintGestureController.FingerprintGestureCallback,android.os.Handler)>
<android.accessibilityservice.FingerprintGestureController: boolean isGestureDetectionAvailable()>
<android.icu.text.MessagePattern: void clearPatternAndSetApostropheMode(android.icu.text.MessagePattern.ApostropheMode)>
<android.icu.text.MessagePattern: android.icu.text.MessagePattern.ApostropheMode getApostropheMode()>
<android.icu.text.MessagePattern: boolean isFrozen()>
<android.icu.text.MessagePattern: java.lang.String getPatternString()>
<android.icu.text.MessagePattern: java.lang.String autoQuoteApostropheDeep()>
<android.icu.text.MessagePattern: android.icu.text.MessagePattern cloneAsThawed()>
<android.icu.text.MessagePattern: void <init>()>
<android.icu.text.MessagePattern: android.icu.text.MessagePattern parseSelectStyle(java.lang.String)>
<android.icu.text.MessagePattern: int getLimitPartIndex(int)>
<android.icu.text.MessagePattern: boolean hasNumberedArguments()>
<android.icu.text.MessagePattern: android.icu.text.MessagePattern parse(java.lang.String)>
<android.icu.text.MessagePattern: int getPatternIndex(int)>
<android.icu.text.MessagePattern: android.icu.text.MessagePattern parseChoiceStyle(java.lang.String)>
<android.icu.text.MessagePattern: android.icu.text.MessagePattern parsePluralStyle(java.lang.String)>
<android.icu.text.MessagePattern: boolean partSubstringMatches(android.icu.text.MessagePattern.Part,java.lang.String)>
<android.icu.text.MessagePattern: java.lang.Object clone()>
<android.icu.text.MessagePattern: int countParts()>
<android.icu.text.MessagePattern: android.icu.text.MessagePattern.Part.Type getPartType(int)>
<android.icu.text.MessagePattern: double getPluralOffset(int)>
<android.icu.text.MessagePattern: boolean hasPluralStyle()>
<android.icu.text.MessagePattern: android.icu.text.MessagePattern.Part getPart(int)>
<android.icu.text.MessagePattern: void <init>(android.icu.text.MessagePattern.ApostropheMode)>
<android.icu.text.MessagePattern: int validateArgumentName(java.lang.String)>
<android.icu.text.MessagePattern: double getNumericValue(android.icu.text.MessagePattern.Part)>
<android.icu.text.MessagePattern: boolean hasNamedArguments()>
<android.icu.text.MessagePattern: void <init>(String)>
<android.icu.text.MessagePattern: java.lang.String getSubstring(android.icu.text.MessagePattern.Part)>
<android.icu.text.MessagePattern: android.icu.text.MessagePattern freeze()>
<android.icu.text.MessagePattern: void clear()>
<java.util.logging.XMLFormatter: void <init>()>
<java.util.logging.XMLFormatter: java.lang.String format(java.util.logging.LogRecord)>
<android.hardware.usb.UsbEndpoint: int getEndpointNumber()>
<android.hardware.usb.UsbEndpoint: int getType()>
<android.hardware.usb.UsbEndpoint: int describeContents()>
<android.hardware.usb.UsbEndpoint: int getInterval()>
<android.hardware.usb.UsbEndpoint: void writeToParcel(android.os.Parcel,int)>
<android.hardware.usb.UsbEndpoint: int getMaxPacketSize()>
<android.hardware.usb.UsbEndpoint: int getAddress()>
<android.hardware.usb.UsbEndpoint: int getDirection()>
<android.hardware.usb.UsbEndpoint: int getAttributes()>
<android.media.RingtoneManager: android.content.res.AssetFileDescriptor openDefaultRingtoneUri(android.content.Context,android.net.Uri)>
<android.media.RingtoneManager: void <init>(android.app.Activity)>
<android.media.RingtoneManager: boolean isDefault(android.net.Uri)>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)>
<android.media.RingtoneManager: void <init>(android.content.Context)>
<android.media.RingtoneManager: void setIncludeDrm(boolean)>
<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)>
<android.media.RingtoneManager: android.net.Uri getValidRingtoneUri(android.content.Context)>
<android.media.RingtoneManager: boolean getIncludeDrm()>
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)>
<android.media.RingtoneManager: boolean getStopPreviousRingtone()>
<android.media.RingtoneManager: void setStopPreviousRingtone(boolean)>
<android.media.RingtoneManager: int inferStreamType()>
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>
<android.media.RingtoneManager: int getDefaultType(android.net.Uri)>
<android.media.RingtoneManager: boolean hasHapticChannels(android.net.Uri)>
<android.media.RingtoneManager: void stopPreviousRingtone()>
<android.media.RingtoneManager: android.database.Cursor getCursor()>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>
<android.media.RingtoneManager: boolean hasHapticChannels(int)>
<android.media.RingtoneManager: int getRingtonePosition(android.net.Uri)>
<android.media.RingtoneManager: void setType(int)>
<java.security.AlgorithmConstraints: boolean permits(java.util.Set,java.lang.String,java.security.AlgorithmParameters)>
<java.security.AlgorithmConstraints: boolean permits(java.util.Set,java.lang.String,java.security.Key,java.security.AlgorithmParameters)>
<java.security.AlgorithmConstraints: boolean permits(java.util.Set,java.security.Key)>
<java.security.DigestInputStream: void setMessageDigest(java.security.MessageDigest)>
<java.security.DigestInputStream: void <init>(java.io.InputStream,java.security.MessageDigest)>
<java.security.DigestInputStream: java.security.MessageDigest getMessageDigest()>
<java.security.DigestInputStream: void on(boolean)>
<android.system.StructStatVfs: void <init>(long,long,long,long,long,long,long,long,long,long,long)>
<android.app.prediction.AppTargetEvent.Builder: android.app.prediction.AppTargetEvent build()>
<android.app.prediction.AppTargetEvent.Builder: void <init>(android.app.prediction.AppTarget,int)>
<android.app.prediction.AppTargetEvent.Builder: android.app.prediction.AppTargetEvent.Builder setLaunchLocation(java.lang.String)>
<android.hardware.radio.ProgramList.ListCallback: void <init>()>
<android.hardware.radio.ProgramList.ListCallback: void onItemChanged(android.hardware.radio.ProgramSelector.Identifier)>
<android.hardware.radio.ProgramList.ListCallback: void onItemRemoved(android.hardware.radio.ProgramSelector.Identifier)>
<android.net.wifi.RttManager.RttResult: void <init>()>
<android.widget.Switch: android.graphics.drawable.Drawable getThumbDrawable()>
<android.widget.Switch: void setTextOn(CharSequence)>
<android.widget.Switch: void setTrackTintBlendMode(android.graphics.BlendMode)>
<android.widget.Switch: void setSwitchTypeface(android.graphics.Typeface,int)>
<android.widget.Switch: android.content.res.ColorStateList getThumbTintList()>
<android.widget.Switch: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.Switch: void setTextOff(CharSequence)>
<android.widget.Switch: android.graphics.PorterDuff.Mode getTrackTintMode()>
<android.widget.Switch: android.graphics.BlendMode getThumbTintBlendMode()>
<android.widget.Switch: void setSwitchTypeface(android.graphics.Typeface)>
<android.widget.Switch: void <init>(android.content.Context)>
<android.widget.Switch: android.graphics.BlendMode getTrackTintBlendMode()>
<android.widget.Switch: android.graphics.drawable.Drawable getTrackDrawable()>
<android.widget.Switch: void setTrackResource(@DrawableResint)>
<android.widget.Switch: void setTrackDrawable(android.graphics.drawable.Drawable)>
<android.widget.Switch: void setThumbTintMode(android.graphics.PorterDuff.Mode)>
<android.widget.Switch: void setSplitTrack(boolean)>
<android.widget.Switch: void setTrackTintList(android.content.res.ColorStateList)>
<android.widget.Switch: boolean getShowText()>
<android.widget.Switch: boolean getSplitTrack()>
<android.widget.Switch: int getSwitchPadding()>
<android.widget.Switch: void setShowText(boolean)>
<android.widget.Switch: void setThumbTintBlendMode(android.graphics.BlendMode)>
<android.widget.Switch: void setThumbDrawable(android.graphics.drawable.Drawable)>
<android.widget.Switch: int getThumbTextPadding()>
<android.widget.Switch: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Switch: CharSequence getTextOff()>
<android.widget.Switch: void setThumbResource(@DrawableResint)>
<android.widget.Switch: CharSequence getTextOn()>
<android.widget.Switch: void setThumbTextPadding(int)>
<android.widget.Switch: void setThumbTintList(android.content.res.ColorStateList)>
<android.widget.Switch: void setTrackTintMode(android.graphics.PorterDuff.Mode)>
<android.widget.Switch: int getSwitchMinWidth()>
<android.widget.Switch: android.content.res.ColorStateList getTrackTintList()>
<android.widget.Switch: void setSwitchTextAppearance(android.content.Context,@StyleResint)>
<android.widget.Switch: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.Switch: android.graphics.PorterDuff.Mode getThumbTintMode()>
<android.widget.Switch: void setSwitchMinWidth(int)>
<android.widget.Switch: void setSwitchPadding(int)>
<android.widget.Switch: void onMeasure(int,int)>
<android.app.AppOpsManager: java.lang.String[] getOpStrs()>
<android.app.AppOpsManager: java.util.List getPackagesForOps(java.lang.String[])>
<android.app.AppOpsManager: void addHistoricalOps(android.app.AppOpsManager.HistoricalOps)>
<android.app.AppOpsManager: void setMode(int,int,java.lang.String,int)>
<android.app.AppOpsManager: int unsafeCheckOpRawNoThrow(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int opToDefaultMode(java.lang.String)>
<android.app.AppOpsManager: int noteOpNoThrow(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: void startWatchingMode(java.lang.String,java.lang.String,android.app.AppOpsManager.OnOpChangedListener)>
<android.app.AppOpsManager: int unsafeCheckOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: java.util.List getOpsForPackage(int,java.lang.String,java.lang.String...)>
<android.app.AppOpsManager: void resetHistoryParameters()>
<android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String)>
<android.app.AppOpsManager: void finishOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: boolean isOperationActive(int,int,java.lang.String)>
<android.app.AppOpsManager: void setHistoryParameters(int,long,int)>
<android.app.AppOpsManager: void startWatchingMode(java.lang.String,java.lang.String,int,android.app.AppOpsManager.OnOpChangedListener)>
<android.app.AppOpsManager: void getHistoricalOps(android.app.AppOpsManager.HistoricalOpsRequest,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>
<android.app.AppOpsManager: void startWatchingActive(int[],android.app.AppOpsManager.OnOpActiveChangedListener)>
<android.app.AppOpsManager: int startOpNoThrow(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int unsafeCheckOpNoThrow(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: java.lang.String opToPermission(int)>
<android.app.AppOpsManager: void offsetHistory(long)>
<android.app.AppOpsManager: void reloadNonHistoricalState()>
<android.app.AppOpsManager: int getNumOps()>
<android.app.AppOpsManager: void clearHistory()>
<android.app.AppOpsManager: int strOpToOp(java.lang.String)>
<android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String,int)>
<android.app.AppOpsManager: int startOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: void getHistoricalOpsFromDiskRaw(android.app.AppOpsManager.HistoricalOpsRequest,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.app.AppOpsManager: int unsafeCheckOpRaw(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: void setMode(java.lang.String,int,java.lang.String,int)>
<android.app.AppOpsManager: void setUidMode(java.lang.String,int,int)>
<android.app.AppOpsManager: int noteProxyOp(java.lang.String,java.lang.String)>
<android.app.AppOpsManager: void stopWatchingMode(android.app.AppOpsManager.OnOpChangedListener)>
<android.app.AppOpsManager: int checkOpNoThrow(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int permissionToOpCode(java.lang.String)>
<android.app.AppOpsManager: int checkOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: java.lang.String opToPermission(java.lang.String)>
<android.app.AppOpsManager: void stopWatchingActive(android.app.AppOpsManager.OnOpActiveChangedListener)>
<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: java.lang.String permissionToOp(java.lang.String)>
<android.hardware.location.ContextHubTransaction: android.hardware.location.ContextHubTransaction.Response waitForResponse(long,java.util.concurrent.TimeUnit)>
<android.hardware.location.ContextHubTransaction: int getType()>
<android.hardware.location.ContextHubTransaction: void setOnCompleteListener(android.hardware.location.ContextHubTransaction.OnCompleteListener,java.util.concurrent.Executor)>
<android.hardware.location.ContextHubTransaction: java.lang.String typeToString(int,boolean)>
<android.hardware.location.ContextHubTransaction: void setOnCompleteListener(android.hardware.location.ContextHubTransaction.OnCompleteListener)>
<android.graphics.drawable.AdaptiveIconDrawable: void setDither(boolean)>
<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.Drawable getForeground()>
<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Region getSafeZone()>
<android.graphics.drawable.AdaptiveIconDrawable: int getOpacity()>
<android.graphics.drawable.AdaptiveIconDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,Runnable,long)>
<android.graphics.drawable.AdaptiveIconDrawable: void setAlpha(int)>
<android.graphics.drawable.AdaptiveIconDrawable: void <init>(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path getIconMask()>
<android.graphics.drawable.AdaptiveIconDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.AdaptiveIconDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.AdaptiveIconDrawable: float getExtraInsetFraction()>
<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.Drawable getBackground()>
<android.graphics.drawable.AdaptiveIconDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,Runnable)>
<android.graphics.drawable.AdaptiveIconDrawable: void setOpacity(int)>
<android.graphics.drawable.AdaptiveIconDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)>
<java.net.URL: void <init>(String,String,String)>
<java.net.URL: java.net.URI toURI()>
<java.net.URL: java.lang.String getAuthority()>
<java.net.URL: java.lang.String getPath()>
<java.net.URL: java.lang.String getHost()>
<java.net.URL: void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)>
<java.net.URL: java.lang.Object getContent(java.lang.Class[])>
<java.net.URL: java.lang.String getRef()>
<java.net.URL: java.lang.Object getContent()>
<java.net.URL: boolean sameFile(java.net.URL)>
<java.net.URL: java.lang.String toExternalForm()>
<java.net.URL: java.lang.String getUserInfo()>
<java.net.URL: void <init>(String,String,int,String,java.net.URLStreamHandler)>
<java.net.URL: int getPort()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>
<java.net.URL: java.lang.String getProtocol()>
<java.net.URL: java.net.URLConnection openConnection()>
<java.net.URL: java.lang.String getFile()>
<java.net.URL: java.lang.String getQuery()>
<java.net.URL: void <init>(String)>
<java.net.URL: void <init>(java.net.URL,String)>
<java.net.URL: java.io.InputStream openStream()>
<java.net.URL: void <init>(String,String,int,String)>
<java.net.URL: void <init>(java.net.URL,String,java.net.URLStreamHandler)>
<java.net.URL: int getDefaultPort()>
<android.util.Range: android.util.Range extend(T)>
<android.util.Range: T clamp(T)>
<android.util.Range: android.util.Range extend(android.util.Range)>
<android.util.Range: boolean contains(android.util.Range)>
<android.util.Range: void <init>(T,T)>
<android.util.Range: android.util.Range intersect(T,T)>
<android.util.Range: android.util.Range intersect(android.util.Range)>
<android.util.Range: boolean contains(T)>
<android.util.Range: T getUpper()>
<android.util.Range: android.util.Range extend(T,T)>
<android.util.Range: T getLower()>
<android.util.Range: android.util.Range create(T,T)>
<java.util.regex.MatchResult: int groupCount()>
<java.util.regex.MatchResult: int end()>
<java.util.regex.MatchResult: int start()>
<java.util.regex.MatchResult: java.lang.String group(int)>
<java.util.regex.MatchResult: int end(int)>
<java.util.regex.MatchResult: int start(int)>
<java.util.regex.MatchResult: java.lang.String group()>
<android.widget.SimpleExpandableListAdapter: boolean hasStableIds()>
<android.widget.SimpleExpandableListAdapter: android.view.View newGroupView(boolean,android.view.ViewGroup)>
<android.widget.SimpleExpandableListAdapter: void <init>(android.content.Context,java.util.List,int,String[],int[],java.util.List,int,String[],int[])>
<android.widget.SimpleExpandableListAdapter: boolean isChildSelectable(int,int)>
<android.widget.SimpleExpandableListAdapter: long getChildId(int,int)>
<android.widget.SimpleExpandableListAdapter: void <init>(android.content.Context,java.util.List,int,int,String[],int[],java.util.List,int,String[],int[])>
<android.widget.SimpleExpandableListAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.SimpleExpandableListAdapter: android.view.View newChildView(boolean,android.view.ViewGroup)>
<android.widget.SimpleExpandableListAdapter: int getGroupCount()>
<android.widget.SimpleExpandableListAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.SimpleExpandableListAdapter: int getChildrenCount(int)>
<android.widget.SimpleExpandableListAdapter: long getGroupId(int)>
<android.widget.SimpleExpandableListAdapter: void <init>(android.content.Context,java.util.List,int,int,String[],int[],java.util.List,int,int,String[],int[])>
<android.widget.SimpleExpandableListAdapter: java.lang.Object getChild(int,int)>
<android.widget.SimpleExpandableListAdapter: java.lang.Object getGroup(int)>
<android.app.backup.BackupDataInput: void <init>(java.io.FileDescriptor)>
<android.app.backup.BackupDataInput: boolean readNextHeader()>
<android.app.backup.BackupDataInput: void skipEntityData()>
<android.app.backup.BackupDataInput: int readEntityData(byte[],int,int)>
<android.app.backup.BackupDataInput: int getDataSize()>
<android.app.backup.BackupDataInput: java.lang.String getKey()>
<java.nio.channels.FileLockInterruptionException: void <init>()>
<android.widget.SlidingDrawer.OnDrawerCloseListener: void onDrawerClosed()>
<java.nio.channels.AsynchronousByteChannel extends java.nio.channels.AsynchronousChannel: void read(java.nio.ByteBuffer,A,java.nio.channels.CompletionHandler)>
<java.nio.channels.AsynchronousByteChannel extends java.nio.channels.AsynchronousChannel: void write(java.nio.ByteBuffer,A,java.nio.channels.CompletionHandler)>
<java.nio.channels.AsynchronousByteChannel extends java.nio.channels.AsynchronousChannel: java.util.concurrent.Future read(java.nio.ByteBuffer)>
<java.nio.channels.AsynchronousByteChannel extends java.nio.channels.AsynchronousChannel: java.util.concurrent.Future write(java.nio.ByteBuffer)>
<dalvik.system.InMemoryDexClassLoader: void <init>(java.nio.ByteBuffer[],String,ClassLoader)>
<dalvik.system.InMemoryDexClassLoader: void <init>(java.nio.ByteBuffer[],ClassLoader)>
<dalvik.system.InMemoryDexClassLoader: void <init>(java.nio.ByteBuffer,ClassLoader)>
<java.lang.Enum: java.lang.Object clone()>
<java.lang.Enum: void <init>(String,int)>
<java.lang.Enum: java.lang.Class getDeclaringClass()>
<java.lang.Enum: int compareTo(E)>
<java.lang.Enum: T valueOf(java.lang.Class,java.lang.String)>
<java.lang.Enum: int ordinal()>
<java.lang.Enum: int hashCode()>
<java.lang.Enum: boolean equals(java.lang.Object)>
<java.lang.Enum: void finalize()>
<java.lang.Enum: java.lang.String name()>
<android.graphics.drawable.StateListDrawable: void <init>()>
<android.graphics.drawable.StateListDrawable: int findStateDrawableIndex(int[])>
<android.graphics.drawable.StateListDrawable: android.graphics.drawable.Drawable getStateDrawable(int)>
<android.graphics.drawable.StateListDrawable: int getStateCount()>
<android.graphics.drawable.StateListDrawable: void addState(int[],android.graphics.drawable.Drawable)>
<android.graphics.drawable.StateListDrawable: int[] getStateSet(int)>
<android.opengl.GLSurfaceView.Renderer: void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig)>
<android.opengl.GLSurfaceView.Renderer: void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int)>
<android.opengl.GLSurfaceView.Renderer: void onDrawFrame(javax.microedition.khronos.opengles.GL10)>
<java.nio.file.PathMatcher: boolean matches(java.nio.file.Path)>
<android.hardware.hdmi.HdmiDeviceInfo: int idForMhlDevice(int)>
<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>
<android.hardware.hdmi.HdmiDeviceInfo: int getDeviceId()>
<android.hardware.hdmi.HdmiDeviceInfo: boolean isSourceType()>
<android.hardware.hdmi.HdmiDeviceInfo: int getAdopterId()>
<android.hardware.hdmi.HdmiDeviceInfo: int idForCecDevice(int)>
<android.hardware.hdmi.HdmiDeviceInfo: boolean isInactivated()>
<android.hardware.hdmi.HdmiDeviceInfo: void writeToParcel(android.os.Parcel,int)>
<android.hardware.hdmi.HdmiDeviceInfo: int getDevicePowerStatus()>
<android.hardware.hdmi.HdmiDeviceInfo: int describeContents()>
<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>
<android.hardware.hdmi.HdmiDeviceInfo: int getPortId()>
<android.hardware.hdmi.HdmiDeviceInfo: int getDeviceType()>
<android.hardware.hdmi.HdmiDeviceInfo: java.lang.String getDisplayName()>
<android.hardware.hdmi.HdmiDeviceInfo: int getVendorId()>
<android.hardware.hdmi.HdmiDeviceInfo: void <init>()>
<android.hardware.hdmi.HdmiDeviceInfo: int idForHardware(int)>
<android.hardware.hdmi.HdmiDeviceInfo: boolean isMhlDevice()>
<android.hardware.hdmi.HdmiDeviceInfo: int getId()>
<android.hardware.hdmi.HdmiDeviceInfo: boolean isCecDevice()>
<android.transition.Transition: android.transition.Transition.EpicenterCallback getEpicenterCallback()>
<android.transition.Transition: void <init>()>
<android.transition.Transition: android.transition.Transition excludeTarget(android.view.View,boolean)>
<android.transition.Transition: android.transition.Transition addTarget(java.lang.String)>
<android.transition.Transition: android.transition.Transition removeTarget(java.lang.String)>
<android.transition.Transition: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.Transition: android.transition.Transition clone()>
<android.transition.Transition: java.lang.String[] getTransitionProperties()>
<android.transition.Transition: android.transition.Transition setInterpolator(android.animation.TimeInterpolator)>
<android.transition.Transition: android.animation.TimeInterpolator getInterpolator()>
<android.transition.Transition: java.util.List getTargetIds()>
<android.transition.Transition: android.transition.Transition excludeChildren(int,boolean)>
<android.transition.Transition: java.util.List getTargetNames()>
<android.transition.Transition: android.transition.TransitionValues getTransitionValues(android.view.View,boolean)>
<android.transition.Transition: android.animation.Animator createAnimator(android.view.ViewGroup,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.transition.Transition: android.graphics.Rect getEpicenter()>
<android.transition.Transition: void captureStartValues(android.transition.TransitionValues)>
<android.transition.Transition: boolean canRemoveViews()>
<android.transition.Transition: long getStartDelay()>
<android.transition.Transition: android.transition.Transition addTarget(int)>
<android.transition.Transition: void setPropagation(android.transition.TransitionPropagation)>
<android.transition.Transition: android.transition.Transition removeTarget(int)>
<android.transition.Transition: long getDuration()>
<android.transition.Transition: boolean isTransitionRequired(android.transition.TransitionValues,android.transition.TransitionValues)>
<android.transition.Transition: android.transition.Transition addTarget(android.view.View)>
<android.transition.Transition: android.transition.Transition addTarget(java.lang.Class)>
<android.transition.Transition: android.transition.Transition excludeTarget(int,boolean)>
<android.transition.Transition: android.transition.Transition excludeTarget(java.lang.Class,boolean)>
<android.transition.Transition: android.transition.Transition removeTarget(android.view.View)>
<android.transition.Transition: android.transition.PathMotion getPathMotion()>
<android.transition.Transition: android.transition.TransitionPropagation getPropagation()>
<android.transition.Transition: android.transition.Transition setDuration(long)>
<android.transition.Transition: android.transition.Transition excludeTarget(java.lang.String,boolean)>
<android.transition.Transition: java.lang.String getName()>
<android.transition.Transition: java.util.List getTargets()>
<android.transition.Transition: android.transition.Transition removeTarget(java.lang.Class)>
<android.transition.Transition: android.transition.Transition setStartDelay(long)>
<android.transition.Transition: void setEpicenterCallback(android.transition.Transition.EpicenterCallback)>
<android.transition.Transition: android.transition.Transition excludeChildren(java.lang.Class,boolean)>
<android.transition.Transition: void captureEndValues(android.transition.TransitionValues)>
<android.transition.Transition: android.transition.Transition removeListener(android.transition.Transition.TransitionListener)>
<android.transition.Transition: android.transition.Transition excludeChildren(android.view.View,boolean)>
<android.transition.Transition: java.util.List getTargetTypes()>
<android.transition.Transition: void setPathMotion(android.transition.PathMotion)>
<android.transition.Transition: android.transition.Transition addListener(android.transition.Transition.TransitionListener)>
<android.transition.Transition: void setMatchOrder(int...)>
<java.net.URI: boolean isAbsolute()>
<java.net.URI: int compareTo(java.net.URI)>
<java.net.URI: java.lang.String getRawQuery()>
<java.net.URI: java.lang.String getFragment()>
<java.net.URI: void <init>(String,String,String,String,String)>
<java.net.URI: void <init>(String,String,String)>
<java.net.URI: boolean isOpaque()>
<java.net.URI: java.lang.String getPath()>
<java.net.URI: void <init>(String,String,String,int,String,String,String)>
<java.net.URI: java.lang.String getUserInfo()>
<java.net.URI: int getPort()>
<java.net.URI: java.lang.String getRawFragment()>
<java.net.URI: java.net.URI relativize(java.net.URI)>
<java.net.URI: void <init>(String)>
<java.net.URI: java.net.URI resolve(java.lang.String)>
<java.net.URI: java.lang.String getRawAuthority()>
<java.net.URI: java.lang.String getRawSchemeSpecificPart()>
<java.net.URI: java.net.URI resolve(java.net.URI)>
<java.net.URI: java.lang.String getSchemeSpecificPart()>
<java.net.URI: java.lang.String getRawPath()>
<java.net.URI: java.net.URI create(java.lang.String)>
<java.net.URI: java.lang.String getRawUserInfo()>
<java.net.URI: java.lang.String getHost()>
<java.net.URI: java.lang.String getQuery()>
<java.net.URI: void <init>(String,String,String,String)>
<java.net.URI: java.net.URI parseServerAuthority()>
<java.net.URI: java.lang.String getScheme()>
<java.net.URI: java.lang.String toASCIIString()>
<java.net.URI: java.net.URL toURL()>
<java.net.URI: java.net.URI normalize()>
<java.net.URI: java.lang.String getAuthority()>
<android.hardware.hdmi.HdmiHotplugEvent: boolean isConnected()>
<android.hardware.hdmi.HdmiHotplugEvent: int getPort()>
<android.hardware.hdmi.HdmiHotplugEvent: int describeContents()>
<android.hardware.hdmi.HdmiHotplugEvent: void writeToParcel(android.os.Parcel,int)>
<android.telephony.data.DataProfile.Builder: void <init>()>
<android.telephony.data.DataProfile.Builder: android.telephony.data.DataProfile.Builder setApn(java.lang.String)>
<android.telephony.data.DataProfile.Builder: android.telephony.data.DataProfile build()>
<android.telephony.data.DataProfile.Builder: android.telephony.data.DataProfile.Builder setSupportedApnTypesBitmask(int)>
<android.telephony.data.DataProfile.Builder: android.telephony.data.DataProfile.Builder setPassword(java.lang.String)>
<android.telephony.data.DataProfile.Builder: android.telephony.data.DataProfile.Builder setAuthType(int)>
<android.telephony.data.DataProfile.Builder: android.telephony.data.DataProfile.Builder setUserName(java.lang.String)>
<android.telephony.data.DataProfile.Builder: android.telephony.data.DataProfile.Builder setProtocolType(int)>
<android.telephony.data.DataProfile.Builder: android.telephony.data.DataProfile.Builder enable(boolean)>
<android.telephony.data.DataProfile.Builder: android.telephony.data.DataProfile.Builder setBearerBitmask(int)>
<android.telephony.data.DataProfile.Builder: android.telephony.data.DataProfile.Builder setPersistent(boolean)>
<android.telephony.data.DataProfile.Builder: android.telephony.data.DataProfile.Builder setRoamingProtocolType(int)>
<android.telephony.data.DataProfile.Builder: android.telephony.data.DataProfile.Builder setProfileId(int)>
<android.telephony.data.DataProfile.Builder: android.telephony.data.DataProfile.Builder setMtu(int)>
<android.telephony.data.DataProfile.Builder: android.telephony.data.DataProfile.Builder setType(int)>
<android.telephony.data.DataProfile.Builder: android.telephony.data.DataProfile.Builder setPreferred(boolean)>
<android.icu.text.StringPrepParseException: void <init>(String,int,String,int)>
<android.icu.text.StringPrepParseException: void <init>(String,int)>
<android.icu.text.StringPrepParseException: int getError()>
<android.icu.text.StringPrepParseException: void <init>(String,int,String,int,int)>
<java.security.interfaces.DSAPublicKey extends java.security.interfaces.DSAKey java.security.PublicKey: java.math.BigInteger getY()>
<android.util.proto.EncodedBuffer: void rewindRead()>
<android.util.proto.EncodedBuffer: int getRawVarint32Size(int)>
<android.util.proto.EncodedBuffer: void rewindWriteTo(int)>
<android.util.proto.EncodedBuffer: byte readRawByte()>
<android.util.proto.EncodedBuffer: void writeRawZigZag32(int)>
<android.util.proto.EncodedBuffer: void writeRawVarint64(long)>
<android.util.proto.EncodedBuffer: void skipRead(int)>
<android.util.proto.EncodedBuffer: void editRawFixed32(int,int)>
<android.util.proto.EncodedBuffer: void writeRawVarint32(int)>
<android.util.proto.EncodedBuffer: int getWritePos()>
<android.util.proto.EncodedBuffer: void writeRawFixed64(long)>
<android.util.proto.EncodedBuffer: void writeRawZigZag64(long)>
<android.util.proto.EncodedBuffer: void dumpByteString(java.lang.String,java.lang.String,byte[])>
<android.util.proto.EncodedBuffer: int getRawZigZag32Size(int)>
<android.util.proto.EncodedBuffer: byte[] getBytes(int)>
<android.util.proto.EncodedBuffer: int readRawFixed32()>
<android.util.proto.EncodedBuffer: int getSize()>
<android.util.proto.EncodedBuffer: void writeRawBuffer(byte[])>
<android.util.proto.EncodedBuffer: void startEditing()>
<android.util.proto.EncodedBuffer: void <init>()>
<android.util.proto.EncodedBuffer: int getRawFixed32At(int)>
<android.util.proto.EncodedBuffer: void writeFromThisBuffer(int,int)>
<android.util.proto.EncodedBuffer: int getReadPos()>
<android.util.proto.EncodedBuffer: void writeRawFixed32(int)>
<android.util.proto.EncodedBuffer: int getChunkCount()>
<android.util.proto.EncodedBuffer: int getWriteBufIndex()>
<android.util.proto.EncodedBuffer: void writeRawBuffer(byte[],int,int)>
<android.util.proto.EncodedBuffer: void dumpBuffers(java.lang.String)>
<android.util.proto.EncodedBuffer: java.lang.String getDebugString()>
<android.util.proto.EncodedBuffer: long readRawUnsigned()>
<android.util.proto.EncodedBuffer: int getReadableSize()>
<android.util.proto.EncodedBuffer: int getWriteIndex()>
<android.util.proto.EncodedBuffer: void <init>(int)>
<android.util.proto.EncodedBuffer: int getRawZigZag64Size(long)>
<android.util.proto.EncodedBuffer: void writeRawByte(byte)>
<android.util.proto.EncodedBuffer: int getRawVarint64Size(long)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofPropertyValuesHolder(java.lang.Object,android.animation.PropertyValuesHolder...)>
<android.animation.ObjectAnimator: void <init>()>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofMultiFloat(java.lang.Object,java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,T...)>
<android.animation.ObjectAnimator: java.lang.Object getTarget()>
<android.animation.ObjectAnimator: java.lang.String getPropertyName()>
<android.animation.ObjectAnimator: void setAutoCancel(boolean)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float...)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofMultiFloat(java.lang.Object,java.lang.String,float[][])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(java.lang.Object,java.lang.String,android.animation.TypeEvaluator,java.lang.Object...)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofMultiInt(java.lang.Object,java.lang.String,int[][])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofMultiInt(java.lang.Object,java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,T...)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(T,android.util.Property,android.animation.TypeConverter,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofMultiFloat(java.lang.Object,java.lang.String,android.graphics.Path)>
<android.animation.ObjectAnimator: void setPropertyName(java.lang.String)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(T,android.util.Property,float...)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(T,android.util.Property,int...)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,java.lang.String,java.lang.String,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofArgb(T,android.util.Property,int...)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(T,android.util.Property,android.util.Property,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator clone()>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,java.lang.String,android.graphics.Path)>
<android.animation.ObjectAnimator: void setProperty(android.util.Property)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(T,android.util.Property,android.animation.TypeConverter,android.animation.TypeEvaluator,V...)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofArgb(java.lang.Object,java.lang.String,int...)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,java.lang.String,int...)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(T,android.util.Property,android.animation.TypeEvaluator,V...)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(java.lang.Object,java.lang.String,android.animation.TypeConverter,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(T,android.util.Property,android.util.Property,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofMultiInt(java.lang.Object,java.lang.String,android.graphics.Path)>
<android.os.CancellationSignal: boolean isCanceled()>
<android.os.CancellationSignal: void throwIfCanceled()>
<android.os.CancellationSignal: void <init>()>
<android.os.CancellationSignal: void cancel()>
<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal.OnCancelListener)>
<android.app.prediction.AppPredictionManager: android.app.prediction.AppPredictor createAppPredictionSession(android.app.prediction.AppPredictionContext)>
<android.telephony.TelephonyScanManager: void <init>()>
<android.telephony.emergency.EmergencyNumber: boolean isInEmergencyServiceCategories(int)>
<android.telephony.emergency.EmergencyNumber: int getEmergencyCallRouting()>
<android.telephony.emergency.EmergencyNumber: java.util.List getEmergencyNumberSources()>
<android.telephony.emergency.EmergencyNumber: java.lang.String getCountryIso()>
<android.telephony.emergency.EmergencyNumber: java.lang.String getNumber()>
<android.telephony.emergency.EmergencyNumber: int describeContents()>
<android.telephony.emergency.EmergencyNumber: java.lang.String getMnc()>
<android.telephony.emergency.EmergencyNumber: int compareTo(android.telephony.emergency.EmergencyNumber)>
<android.telephony.emergency.EmergencyNumber: java.util.List getEmergencyServiceCategories()>
<android.telephony.emergency.EmergencyNumber: java.util.List getEmergencyUrns()>
<android.telephony.emergency.EmergencyNumber: void writeToParcel(android.os.Parcel,int)>
<android.telephony.emergency.EmergencyNumber: boolean isFromSources(int)>
<android.database.ContentObserver: void onChange(boolean)>
<android.database.ContentObserver: void <init>(android.os.Handler)>
<android.database.ContentObserver: void dispatchChange(boolean,android.net.Uri)>
<android.database.ContentObserver: void dispatchChange(boolean)>
<android.database.ContentObserver: void onChange(boolean,android.net.Uri)>
<android.database.ContentObserver: boolean deliverSelfNotifications()>
<android.icu.util.RangeValueIterator.Element: void <init>()>
<android.service.carrier.CarrierMessagingService.SendMultipartSmsResult: void <init>(int,int[])>
<android.service.carrier.CarrierMessagingService.SendMultipartSmsResult: int getSendStatus()>
<android.service.carrier.CarrierMessagingService.SendMultipartSmsResult: int[] getMessageRefs()>
<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>
<java.net.URLStreamHandler: java.net.InetAddress getHostAddress(java.net.URL)>
<java.net.URLStreamHandler: boolean sameFile(java.net.URL,java.net.URL)>
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.net.URLStreamHandler: boolean hostsEqual(java.net.URL,java.net.URL)>
<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL)>
<java.net.URLStreamHandler: void <init>()>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<java.net.URLStreamHandler: boolean equals(java.net.URL,java.net.URL)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>
<java.net.URLStreamHandler: int getDefaultPort()>
<java.net.URLStreamHandler: int hashCode(java.net.URL)>
<android.media.session.PlaybackState: int describeContents()>
<android.media.session.PlaybackState: CharSequence getErrorMessage()>
<android.media.session.PlaybackState: void writeToParcel(android.os.Parcel,int)>
<android.media.session.PlaybackState: long getPosition()>
<android.media.session.PlaybackState: long getActions()>
<android.media.session.PlaybackState: long getBufferedPosition()>
<android.media.session.PlaybackState: java.util.List getCustomActions()>
<android.media.session.PlaybackState: long getLastPositionUpdateTime()>
<android.media.session.PlaybackState: float getPlaybackSpeed()>
<android.media.session.PlaybackState: long getActiveQueueItemId()>
<android.media.session.PlaybackState: int getState()>
<android.media.session.PlaybackState: android.os.Bundle getExtras()>
<android.util.MutableLong: void <init>(long)>
<java.util.Optional: boolean isPresent()>
<java.util.Optional: T get()>
<java.util.Optional: T orElseThrow(java.util.function.Supplier)>
<java.util.Optional: java.util.Optional empty()>
<java.util.Optional: void ifPresent(java.util.function.Consumer)>
<java.util.Optional: java.util.Optional flatMap(java.util.function.Function)>
<java.util.Optional: T orElse(T)>
<java.util.Optional: java.util.Optional map(java.util.function.Function)>
<java.util.Optional: java.util.Optional of(T)>
<java.util.Optional: java.util.Optional filter(java.util.function.Predicate)>
<java.util.Optional: T orElseGet(java.util.function.Supplier)>
<java.util.Optional: java.util.Optional ofNullable(T)>
<android.os.strictmode.InstanceCountViolation: long getNumberOfInstances()>
<android.util.MutableFloat: void <init>(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alphaBy(float)>
<android.view.ViewPropertyAnimator: void cancel()>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationZBy(float)>
<android.view.ViewPropertyAnimator: android.animation.TimeInterpolator getInterpolator()>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withEndAction(Runnable)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationXBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleXBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setStartDelay(long)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator yBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleX(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator xBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationXBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleY(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleYBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationX(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationY(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator.AnimatorListener)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withLayer()>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationZ(float)>
<android.view.ViewPropertyAnimator: long getStartDelay()>
<android.view.ViewPropertyAnimator: void start()>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationX(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotation(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withStartAction(Runnable)>
<android.view.ViewPropertyAnimator: long getDuration()>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationY(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationYBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator y(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator x(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator zBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator z(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setUpdateListener(android.animation.ValueAnimator.AnimatorUpdateListener)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationYBy(float)>
<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>
<android.content.pm.ApplicationInfo: boolean isSystemApp()>
<android.content.pm.ApplicationInfo: boolean isProfileableByShell()>
<android.content.pm.ApplicationInfo: boolean isResourceOverlay()>
<android.content.pm.ApplicationInfo: CharSequence getCategoryTitle(android.content.Context,int)>
<android.content.pm.ApplicationInfo: boolean isPrivilegedApp()>
<android.content.pm.ApplicationInfo: void <init>()>
<android.content.pm.ApplicationInfo: boolean isEncryptionAware()>
<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ApplicationInfo: CharSequence loadDescription(android.content.pm.PackageManager)>
<android.content.pm.ApplicationInfo: boolean isVirtualPreload()>
<android.content.pm.ApplicationInfo: int describeContents()>
<android.content.pm.ApplicationInfo: boolean isInstantApp()>
<android.provider.ContactsContract.Presence: void <init>()>
<android.util.StringBuilderPrinter: void <init>(StringBuilder)>
<android.util.StringBuilderPrinter: void println(java.lang.String)>
<java.nio.file.WatchEvent.Modifier: java.lang.String name()>
<android.widget.Filter.FilterListener: void onFilterComplete(int)>
<android.view.inputmethod.InputConnection: boolean sendKeyEvent(android.view.KeyEvent)>
<android.view.inputmethod.InputConnection: boolean setComposingText(CharSequence,int)>
<android.view.inputmethod.InputConnection: CharSequence getTextBeforeCursor(int,int)>
<android.view.inputmethod.InputConnection: boolean requestCursorUpdates(int)>
<android.view.inputmethod.InputConnection: void closeConnection()>
<android.view.inputmethod.InputConnection: boolean deleteSurroundingText(int,int)>
<android.view.inputmethod.InputConnection: boolean finishComposingText()>
<android.view.inputmethod.InputConnection: boolean commitCorrection(android.view.inputmethod.CorrectionInfo)>
<android.view.inputmethod.InputConnection: boolean commitText(CharSequence,int)>
<android.view.inputmethod.InputConnection: int getCursorCapsMode(int)>
<android.view.inputmethod.InputConnection: boolean deleteSurroundingTextInCodePoints(int,int)>
<android.view.inputmethod.InputConnection: CharSequence getTextAfterCursor(int,int)>
<android.view.inputmethod.InputConnection: boolean beginBatchEdit()>
<android.view.inputmethod.InputConnection: boolean reportFullscreenMode(boolean)>
<android.view.inputmethod.InputConnection: boolean endBatchEdit()>
<android.view.inputmethod.InputConnection: boolean setSelection(int,int)>
<android.view.inputmethod.InputConnection: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>
<android.view.inputmethod.InputConnection: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>
<android.view.inputmethod.InputConnection: boolean performContextMenuAction(int)>
<android.view.inputmethod.InputConnection: boolean setComposingRegion(int,int)>
<android.view.inputmethod.InputConnection: boolean commitCompletion(android.view.inputmethod.CompletionInfo)>
<android.view.inputmethod.InputConnection: boolean clearMetaKeyStates(int)>
<android.view.inputmethod.InputConnection: android.os.Handler getHandler()>
<android.view.inputmethod.InputConnection: CharSequence getSelectedText(int)>
<android.view.inputmethod.InputConnection: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>
<android.view.inputmethod.InputConnection: boolean performEditorAction(int)>
<java.net.ContentHandlerFactory: java.net.ContentHandler createContentHandler(java.lang.String)>
<android.text.LoginFilter: CharSequence filter(CharSequence,int,int,android.text.Spanned,int,int)>
<android.text.LoginFilter: void onStop()>
<android.text.LoginFilter: boolean isAllowed(char)>
<android.text.LoginFilter: void onStart()>
<android.text.LoginFilter: void onInvalidCharacter(char)>
<android.util.PrintWriterPrinter: void println(java.lang.String)>
<android.util.PrintWriterPrinter: void <init>(java.io.PrintWriter)>
<android.os.RecoverySystem: void installPackage(android.content.Context,java.io.File)>
<android.os.RecoverySystem: void cancelScheduledUpdate(android.content.Context)>
<android.os.RecoverySystem: void processPackage(android.content.Context,java.io.File,android.os.RecoverySystem.ProgressListener,android.os.Handler)>
<android.os.RecoverySystem: void rebootWipeAb(android.content.Context,java.io.File,java.lang.String)>
<android.os.RecoverySystem: void processPackage(android.content.Context,java.io.File,android.os.RecoverySystem.ProgressListener)>
<android.os.RecoverySystem: void scheduleUpdateOnBoot(android.content.Context,java.io.File)>
<android.os.RecoverySystem: boolean verifyPackageCompatibility(java.io.File)>
<android.os.RecoverySystem: void rebootWipeUserData(android.content.Context)>
<android.os.RecoverySystem: void verifyPackage(java.io.File,android.os.RecoverySystem.ProgressListener,java.io.File)>
<android.os.RecoverySystem: void installPackage(android.content.Context,java.io.File,boolean)>
<android.os.RecoverySystem: void rebootWipeCache(android.content.Context)>
<android.accessibilityservice.GestureDescription.StrokeDescription: boolean willContinue()>
<android.accessibilityservice.GestureDescription.StrokeDescription: android.accessibilityservice.GestureDescription.StrokeDescription continueStroke(android.graphics.Path,long,long,boolean)>
<android.accessibilityservice.GestureDescription.StrokeDescription: void <init>(from=0) long)>
<android.accessibilityservice.GestureDescription.StrokeDescription: long getStartTime()>
<android.accessibilityservice.GestureDescription.StrokeDescription: long getDuration()>
<android.accessibilityservice.GestureDescription.StrokeDescription: void <init>(from=0) long,boolean)>
<android.accessibilityservice.GestureDescription.StrokeDescription: android.graphics.Path getPath()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: boolean canConstantState()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: void computeConstantSize()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int getOpacity()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int getExitFadeDuration()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: boolean isStateful()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: void setVariablePadding(boolean)>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int addChild(android.graphics.drawable.Drawable)>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: void setEnterFadeDuration(int)>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: android.graphics.Rect getConstantPadding()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: void growArray(int,int)>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int getConstantWidth()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: void setExitFadeDuration(int)>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: android.graphics.drawable.Drawable getChild(int)>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int getConstantHeight()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: boolean isConstantSize()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int getChildCount()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int getConstantMinimumHeight()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int getConstantMinimumWidth()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int getChangingConfigurations()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: void setConstantSize(boolean)>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: android.graphics.drawable.Drawable[] getChildren()>
<android.graphics.drawable.DrawableContainer.DrawableContainerState: int getEnterFadeDuration()>
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,int)>
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,int,java.util.function.Function)>
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String)>
<android.text.util.Linkify: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)>
<android.text.util.Linkify: void <init>()>
<android.text.util.Linkify: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)>
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)>
<android.text.util.Linkify: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String)>
<android.text.util.Linkify: boolean addLinks(android.widget.TextView,int)>
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)>
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter,java.util.function.Function)>
<java.util.AbstractMap.SimpleImmutableEntry: V setValue(V)>
<java.util.AbstractMap.SimpleImmutableEntry: K getKey()>
<java.util.AbstractMap.SimpleImmutableEntry: V getValue()>
<java.util.AbstractMap.SimpleImmutableEntry: void <init>(java.util.Map.Entry)>
<java.util.AbstractMap.SimpleImmutableEntry: void <init>(K,V)>
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent: int getRelativeWordStartIndex()>
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent: int getRelativeSuggestedWordStartIndex()>
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent: int getRelativeWordEndIndex()>
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent: int getRelativeSuggestedWordEndIndex()>
<java.security.cert.CertPathBuilderResult extends java.lang.Cloneable: java.security.cert.CertPath getCertPath()>
<java.security.cert.CertPathBuilderResult extends java.lang.Cloneable: java.lang.Object clone()>
<java.net.CookieHandler: void put(java.net.URI,java.util.Map)>
<java.net.CookieHandler: void <init>()>
<java.net.CookieHandler: java.util.Map get(java.net.URI,java.util.Map)>
<java.net.CookieHandler: void setDefault(java.net.CookieHandler)>
<java.net.CookieHandler: java.net.CookieHandler getDefault()>
<android.icu.text.MessageFormat.Field: void <init>(String)>
<android.util.ArraySet: boolean retainAll(java.util.Collection)>
<android.util.ArraySet: E valueAt(int)>
<android.util.ArraySet: boolean isEmpty()>
<android.util.ArraySet: boolean remove(java.lang.Object)>
<android.util.ArraySet: java.lang.Object[] toArray()>
<android.util.ArraySet: int size()>
<android.util.ArraySet: void <init>(android.util.ArraySet)>
<android.util.ArraySet: boolean containsAll(java.util.Collection)>
<android.util.ArraySet: void <init>()>
<android.util.ArraySet: void clear()>
<android.util.ArraySet: boolean contains(java.lang.Object)>
<android.util.ArraySet: void <init>(int)>
<android.util.ArraySet: boolean addAll(java.util.Collection)>
<android.util.ArraySet: int indexOf(java.lang.Object)>
<android.util.ArraySet: E valueAtUnchecked(int)>
<android.util.ArraySet: void addAll(android.util.ArraySet)>
<android.util.ArraySet: void ensureCapacity(int)>
<android.util.ArraySet: E removeAt(int)>
<android.util.ArraySet: boolean removeAll(java.util.Collection)>
<android.util.ArraySet: boolean removeAll(android.util.ArraySet)>
<android.util.ArraySet: void <init>(java.util.Collection)>
<android.util.ArraySet: boolean add(E)>
<android.util.ArraySet: java.util.Iterator iterator()>
<android.util.ArraySet: T[] toArray(T[])>
<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>
<android.database.sqlite.SQLiteStatement: android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor()>
<android.database.sqlite.SQLiteStatement: void execute()>
<android.database.sqlite.SQLiteStatement: long executeInsert()>
<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>
<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()>
<android.app.LoaderManager: android.content.Loader getLoader(int)>
<android.app.LoaderManager: void destroyLoader(int)>
<android.app.LoaderManager: void enableDebugLogging(boolean)>
<android.app.LoaderManager: android.content.Loader restartLoader(int,android.os.Bundle,android.app.LoaderManager.LoaderCallbacks)>
<android.app.LoaderManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.LoaderManager: void <init>()>
<android.app.LoaderManager: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager.LoaderCallbacks)>
<java.util.Hashtable: boolean containsValue(java.lang.Object)>
<java.util.Hashtable: void rehash()>
<java.util.Hashtable: void <init>(int)>
<java.util.Hashtable: java.lang.Object clone()>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>
<java.util.Hashtable: V put(K,V)>
<java.util.Hashtable: V remove(java.lang.Object)>
<java.util.Hashtable: java.util.Enumeration elements()>
<java.util.Hashtable: java.util.Collection values()>
<java.util.Hashtable: void <init>()>
<java.util.Hashtable: void <init>(int,float)>
<java.util.Hashtable: void <init>(java.util.Map)>
<java.util.Hashtable: int size()>
<java.util.Hashtable: void clear()>
<java.util.Hashtable: boolean contains(java.lang.Object)>
<java.util.Hashtable: java.util.Set keySet()>
<java.util.Hashtable: java.util.Enumeration keys()>
<java.util.Hashtable: V get(java.lang.Object)>
<java.util.Hashtable: boolean isEmpty()>
<java.util.Hashtable: void putAll(java.util.Map)>
<java.util.Hashtable: java.util.Set entrySet()>
<java.security.interfaces.RSAMultiPrimePrivateCrtKey extends java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrimeExponentQ()>
<java.security.interfaces.RSAMultiPrimePrivateCrtKey extends java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrimeExponentP()>
<java.security.interfaces.RSAMultiPrimePrivateCrtKey extends java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrimeP()>
<java.security.interfaces.RSAMultiPrimePrivateCrtKey extends java.security.interfaces.RSAPrivateKey: java.security.spec.RSAOtherPrimeInfo[] getOtherPrimeInfo()>
<java.security.interfaces.RSAMultiPrimePrivateCrtKey extends java.security.interfaces.RSAPrivateKey: java.math.BigInteger getCrtCoefficient()>
<java.security.interfaces.RSAMultiPrimePrivateCrtKey extends java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPublicExponent()>
<java.security.interfaces.RSAMultiPrimePrivateCrtKey extends java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrimeQ()>
<android.media.FaceDetector.Face: float confidence()>
<android.media.FaceDetector.Face: float pose(int)>
<android.media.FaceDetector.Face: float eyesDistance()>
<android.media.FaceDetector.Face: void getMidPoint(android.graphics.PointF)>
<android.view.textclassifier.TextLinks.Builder: android.view.textclassifier.TextLinks.Builder addLink(int,int,java.util.Map)>
<android.view.textclassifier.TextLinks.Builder: android.view.textclassifier.TextLinks.Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.TextLinks.Builder: android.view.textclassifier.TextLinks.Builder clearTextLinks()>
<android.view.textclassifier.TextLinks.Builder: android.view.textclassifier.TextLinks.Builder addLink(int,int,java.util.Map,android.os.Bundle)>
<android.view.textclassifier.TextLinks.Builder: void <init>(String)>
<android.view.textclassifier.TextLinks.Builder: android.view.textclassifier.TextLinks build()>
<android.security.ConfirmationCallback: void <init>()>
<android.security.ConfirmationCallback: void onDismissed()>
<android.security.ConfirmationCallback: void onCanceled()>
<android.security.ConfirmationCallback: void onError(java.lang.Throwable)>
<android.security.ConfirmationCallback: void onConfirmed(byte[])>
<android.view.inputmethod.InputMethodSystemProperty: android.view.inspector.InspectableProperty.ValueType valueType()>
<android.view.inputmethod.InputMethodSystemProperty: int value()>
<android.view.inputmethod.InputMethodSystemProperty: int target()>
<android.view.inputmethod.InputMethodSystemProperty: int attributeId()>
<android.view.inputmethod.InputMethodSystemProperty: int mask()>
<android.view.inputmethod.InputMethodSystemProperty: boolean hasAttributeId()>
<android.view.inputmethod.InputMethodSystemProperty: java.lang.String name()>
<android.view.inputmethod.InputMethodSystemProperty: void <init>()>
<android.view.inputmethod.InputMethodSystemProperty: android.view.inspector.InspectableProperty.EnumEntry[] enumMapping()>
<android.view.inputmethod.InputMethodSystemProperty: android.view.inspector.InspectableProperty.FlagEntry[] flagMapping()>
<javax.net.ssl.KeyManagerFactory: void <init>(javax.net.ssl.KeyManagerFactorySpi,java.security.Provider,String)>
<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>
<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String,java.security.Provider)>
<javax.net.ssl.KeyManagerFactory: java.security.Provider getProvider()>
<javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>
<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>
<javax.net.ssl.KeyManagerFactory: java.lang.String getAlgorithm()>
<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>
<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String,java.lang.String)>
<javax.net.ssl.KeyManagerFactory: void init(javax.net.ssl.ManagerFactoryParameters)>
<android.os.Messenger: void send(android.os.Message)>
<android.os.Messenger: int describeContents()>
<android.os.Messenger: void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)>
<android.os.Messenger: void <init>(android.os.IBinder)>
<android.os.Messenger: android.os.IBinder getBinder()>
<android.os.Messenger: android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel)>
<android.os.Messenger: void <init>(android.os.Handler)>
<android.os.Messenger: void writeToParcel(android.os.Parcel,int)>
<android.provider.Contacts.ContactMethods: java.lang.String encodePredefinedImProtocol(int)>
<android.provider.Contacts.ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>
<android.provider.Contacts.ContactMethods: java.lang.String encodeCustomImProtocol(java.lang.String)>
<android.provider.Contacts.ContactMethods: CharSequence getDisplayLabel(android.content.Context,int,int,CharSequence)>
<android.provider.Contacts.ContactMethods: java.lang.Object decodeImProtocol(java.lang.String)>
<android.view.accessibility.AccessibilityRequestPreparer: android.view.View getView()>
<android.view.accessibility.AccessibilityRequestPreparer: void onPrepareExtraData(int,java.lang.String,android.os.Bundle,android.os.Message)>
<android.view.accessibility.AccessibilityRequestPreparer: void <init>(android.view.View,int)>
<android.content.pm.SharedLibraryInfo: int describeContents()>
<android.content.pm.SharedLibraryInfo: java.lang.String getName()>
<android.content.pm.SharedLibraryInfo: long getLongVersion()>
<android.content.pm.SharedLibraryInfo: android.content.pm.VersionedPackage getDeclaringPackage()>
<android.content.pm.SharedLibraryInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.SharedLibraryInfo: java.util.List getDependentPackages()>
<android.content.pm.SharedLibraryInfo: int getType()>
<android.content.pm.SharedLibraryInfo: int getVersion()>
<android.renderscript.Type.Builder: android.renderscript.Type create()>
<android.renderscript.Type.Builder: android.renderscript.Type.Builder setX(int)>
<android.renderscript.Type.Builder: void <init>(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.Type.Builder: android.renderscript.Type.Builder setMipmaps(boolean)>
<android.renderscript.Type.Builder: android.renderscript.Type.Builder setFaces(boolean)>
<android.renderscript.Type.Builder: android.renderscript.Type.Builder setZ(int)>
<android.renderscript.Type.Builder: android.renderscript.Type.Builder setY(int)>
<android.renderscript.Type.Builder: android.renderscript.Type.Builder setYuvFormat(int)>
<android.view.WindowManager.BadTokenException: void <init>(String)>
<android.view.WindowManager.BadTokenException: void <init>()>
<android.icu.text.CurrencyPluralInfo: void <init>(java.util.Locale)>
<android.icu.text.CurrencyPluralInfo: void <init>()>
<android.icu.text.CurrencyPluralInfo: android.icu.text.CurrencyPluralInfo getInstance()>
<android.icu.text.CurrencyPluralInfo: android.icu.text.CurrencyPluralInfo getInstance(java.util.Locale)>
<android.icu.text.CurrencyPluralInfo: void setPluralRules(java.lang.String)>
<android.icu.text.CurrencyPluralInfo: void <init>(android.icu.util.ULocale)>
<android.icu.text.CurrencyPluralInfo: android.icu.util.ULocale getLocale()>
<android.icu.text.CurrencyPluralInfo: android.icu.text.PluralRules getPluralRules()>
<android.icu.text.CurrencyPluralInfo: android.icu.text.CurrencyPluralInfo getInstance(android.icu.util.ULocale)>
<android.icu.text.CurrencyPluralInfo: java.lang.String getCurrencyPluralPattern(java.lang.String)>
<android.icu.text.CurrencyPluralInfo: java.lang.Object clone()>
<android.icu.text.CurrencyPluralInfo: void setLocale(android.icu.util.ULocale)>
<android.icu.text.CurrencyPluralInfo: void setCurrencyPluralPattern(java.lang.String,java.lang.String)>
<android.view.inputmethod.InputMethod.SessionCallback: void sessionCreated(android.view.inputmethod.InputMethodSession)>
<android.content.ContentUris: void <init>()>
<android.content.ContentUris: android.net.Uri removeId(android.net.Uri)>
<android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>
<android.content.ContentUris: android.net.Uri.Builder appendId(android.net.Uri.Builder,long)>
<android.content.ContentUris: long parseId(android.net.Uri)>
<android.content.pm.ChangedPackages: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ChangedPackages: int describeContents()>
<android.content.pm.ChangedPackages: int getSequenceNumber()>
<android.content.pm.ChangedPackages: java.util.List getPackageNames()>
<android.content.pm.ChangedPackages: void <init>(int,java.util.List)>
<java.io.RandomAccessFile: short readShort()>
<java.io.RandomAccessFile: void writeShort(int)>
<java.io.RandomAccessFile: void readFully(byte[])>
<java.io.RandomAccessFile: void readFully(byte[],int,int)>
<java.io.RandomAccessFile: void writeFloat(float)>
<java.io.RandomAccessFile: void writeUTF(java.lang.String)>
<java.io.RandomAccessFile: void writeByte(int)>
<java.io.RandomAccessFile: void writeBoolean(boolean)>
<java.io.RandomAccessFile: int skipBytes(int)>
<java.io.RandomAccessFile: java.io.FileDescriptor getFD()>
<java.io.RandomAccessFile: void setLength(long)>
<java.io.RandomAccessFile: void writeDouble(double)>
<java.io.RandomAccessFile: long getFilePointer()>
<java.io.RandomAccessFile: byte readByte()>
<java.io.RandomAccessFile: float readFloat()>
<java.io.RandomAccessFile: void writeChars(java.lang.String)>
<java.io.RandomAccessFile: int read(byte[],int,int)>
<java.io.RandomAccessFile: void write(byte[])>
<java.io.RandomAccessFile: double readDouble()>
<java.io.RandomAccessFile: void <init>(java.io.File,String)>
<java.io.RandomAccessFile: long readLong()>
<java.io.RandomAccessFile: int readUnsignedShort()>
<java.io.RandomAccessFile: void seek(long)>
<java.io.RandomAccessFile: char readChar()>
<java.io.RandomAccessFile: java.lang.String readUTF()>
<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>
<java.io.RandomAccessFile: int readInt()>
<java.io.RandomAccessFile: void write(int)>
<java.io.RandomAccessFile: long length()>
<java.io.RandomAccessFile: java.lang.String readLine()>
<java.io.RandomAccessFile: int read(byte[])>
<java.io.RandomAccessFile: void write(byte[],int,int)>
<java.io.RandomAccessFile: void writeLong(long)>
<java.io.RandomAccessFile: void close()>
<java.io.RandomAccessFile: void writeInt(int)>
<java.io.RandomAccessFile: int readUnsignedByte()>
<java.io.RandomAccessFile: boolean readBoolean()>
<java.io.RandomAccessFile: void <init>(String,String)>
<java.io.RandomAccessFile: void writeBytes(java.lang.String)>
<java.io.RandomAccessFile: void writeChar(int)>
<java.io.RandomAccessFile: int read()>
<android.permission.PermissionManager: int getRuntimePermissionsVersion()>
<android.permission.PermissionManager: void setRuntimePermissionsVersion(int)>
<android.permission.PermissionManager: java.util.List getSplitPermissions()>
<java.security.KeyException: void <init>(Throwable)>
<java.security.KeyException: void <init>()>
<java.security.KeyException: void <init>(String)>
<java.security.KeyException: void <init>(String,Throwable)>
<android.provider.MediaStore.Audio: java.lang.String keyFor(java.lang.String)>
<android.provider.MediaStore.Audio: void <init>()>
<android.app.usage.NetworkStats: boolean getNextBucket(android.app.usage.NetworkStats.Bucket)>
<android.app.usage.NetworkStats: void close()>
<android.app.usage.NetworkStats: boolean hasNextBucket()>
<org.json.JSONException: void <init>(String)>
<org.json.JSONException: void <init>(Throwable)>
<org.json.JSONException: void <init>(String,Throwable)>
<android.media.audiofx.Virtualizer: boolean getStrengthSupported()>
<android.media.audiofx.Virtualizer: void setStrength(short)>
<android.media.audiofx.Virtualizer: android.media.audiofx.Virtualizer.Settings getProperties()>
<android.media.audiofx.Virtualizer: void setProperties(android.media.audiofx.Virtualizer.Settings)>
<android.media.audiofx.Virtualizer: boolean getSpeakerAngles(int,int,int[])>
<android.media.audiofx.Virtualizer: boolean forceVirtualizationMode(int)>
<android.media.audiofx.Virtualizer: short getRoundedStrength()>
<android.media.audiofx.Virtualizer: boolean canVirtualize(int,int)>
<android.media.audiofx.Virtualizer: int getVirtualizationMode()>
<android.media.audiofx.Virtualizer: void <init>(int,int)>
<android.media.audiofx.Virtualizer: void setParameterListener(android.media.audiofx.Virtualizer.OnParameterChangeListener)>
<android.net.DnsResolver.Callback: void onAnswer(T,int)>
<android.net.DnsResolver.Callback: void onError(android.net.DnsResolver.DnsException)>
<android.opengl.GLUtils: int getType(android.graphics.Bitmap)>
<android.opengl.GLUtils: int getInternalFormat(android.graphics.Bitmap)>
<android.opengl.GLUtils: void texImage2D(int,int,int,android.graphics.Bitmap,int,int)>
<android.opengl.GLUtils: void texImage2D(int,int,int,android.graphics.Bitmap,int)>
<android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>
<android.opengl.GLUtils: void texImage2D(int,int,android.graphics.Bitmap,int)>
<android.opengl.GLUtils: void texSubImage2D(int,int,int,int,android.graphics.Bitmap,int,int)>
<android.opengl.GLUtils: void texSubImage2D(int,int,int,int,android.graphics.Bitmap)>
<android.text.SpanWatcher extends android.text.NoCopySpan: void onSpanAdded(android.text.Spannable,java.lang.Object,int,int)>
<android.text.SpanWatcher extends android.text.NoCopySpan: void onSpanChanged(android.text.Spannable,java.lang.Object,int,int,int,int)>
<android.text.SpanWatcher extends android.text.NoCopySpan: void onSpanRemoved(android.text.Spannable,java.lang.Object,int,int)>
<android.net.ConnectivityManager.OnNetworkActiveListener: void onNetworkActive()>
<android.view.MotionEvent.PointerCoords: void copyFrom(android.view.MotionEvent.PointerCoords)>
<android.view.MotionEvent.PointerCoords: float getAxisValue(int)>
<android.view.MotionEvent.PointerCoords: void <init>()>
<android.view.MotionEvent.PointerCoords: void clear()>
<android.view.MotionEvent.PointerCoords: void <init>(android.view.MotionEvent.PointerCoords)>
<android.view.MotionEvent.PointerCoords: void setAxisValue(int,float)>
<java.util.concurrent.atomic.AtomicIntegerArray: void <init>(int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int addAndGet(int,int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int updateAndGet(int,java.util.function.IntUnaryOperator)>
<java.util.concurrent.atomic.AtomicIntegerArray: int getAndAdd(int,int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int getAndDecrement(int)>
<java.util.concurrent.atomic.AtomicIntegerArray: void <init>(int[])>
<java.util.concurrent.atomic.AtomicIntegerArray: void lazySet(int,int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int getAndAccumulate(int,int,java.util.function.IntBinaryOperator)>
<java.util.concurrent.atomic.AtomicIntegerArray: int length()>
<java.util.concurrent.atomic.AtomicIntegerArray: boolean weakCompareAndSet(int,int,int)>
<java.util.concurrent.atomic.AtomicIntegerArray: void set(int,int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int getAndUpdate(int,java.util.function.IntUnaryOperator)>
<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int getAndSet(int,int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int incrementAndGet(int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int decrementAndGet(int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int accumulateAndGet(int,int,java.util.function.IntBinaryOperator)>
<java.util.concurrent.atomic.AtomicIntegerArray: int getAndIncrement(int)>
<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.lang.String toString()>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.lang.String getCalendarType()>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.Chronology of(java.lang.String)>
<java.time.chrono.Chronology extends java.lang.Comparable: int prolepticYear(java.time.chrono.Era,int)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.ChronoLocalDate date(java.time.temporal.TemporalAccessor)>
<java.time.chrono.Chronology extends java.lang.Comparable: boolean equals(java.lang.Object)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.ChronoLocalDate dateYearDay(int,int)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.ChronoPeriod period(int,int,int)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.ChronoLocalDate date(java.time.chrono.Era,int,int,int)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.util.Set getAvailableChronologies()>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.Chronology ofLocale(java.util.Locale)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.ChronoLocalDate dateYearDay(java.time.chrono.Era,int,int)>
<java.time.chrono.Chronology extends java.lang.Comparable: int hashCode()>
<java.time.chrono.Chronology extends java.lang.Comparable: java.lang.String getId()>
<java.time.chrono.Chronology extends java.lang.Comparable: boolean isLeapYear(long)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.ChronoLocalDate date(int,int,int)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.ChronoLocalDate dateNow()>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.ChronoLocalDate dateNow(java.time.Clock)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.util.List eras()>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.ChronoLocalDate dateEpochDay(long)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.Era eraOf(int)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.ChronoLocalDate dateNow(java.time.ZoneId)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>
<java.time.chrono.Chronology extends java.lang.Comparable: int compareTo(java.time.chrono.Chronology)>
<java.time.chrono.Chronology extends java.lang.Comparable: java.time.chrono.Chronology from(java.time.temporal.TemporalAccessor)>
<android.net.DnsResolver: void query(android.net.Network,java.lang.String,int,java.util.concurrent.Executor,android.os.CancellationSignal,android.net.DnsResolver.Callback)>
<android.net.DnsResolver: void query(android.net.Network,java.lang.String,int,int,java.util.concurrent.Executor,android.os.CancellationSignal,android.net.DnsResolver.Callback)>
<android.net.DnsResolver: android.net.DnsResolver getInstance()>
<android.net.DnsResolver: void rawQuery(android.net.Network,java.lang.String,int,int,int,java.util.concurrent.Executor,android.os.CancellationSignal,android.net.DnsResolver.Callback)>
<android.net.DnsResolver: void rawQuery(android.net.Network,byte[],int,java.util.concurrent.Executor,android.os.CancellationSignal,android.net.DnsResolver.Callback)>
<java.time.temporal.TemporalField: R adjustInto(R,long)>
<java.time.temporal.TemporalField: java.lang.String getDisplayName(java.util.Locale)>
<java.time.temporal.TemporalField: java.time.temporal.TemporalAccessor resolve(java.util.Map,java.time.temporal.TemporalAccessor,java.time.format.ResolverStyle)>
<java.time.temporal.TemporalField: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>
<java.time.temporal.TemporalField: java.time.temporal.ValueRange range()>
<java.time.temporal.TemporalField: java.time.temporal.TemporalUnit getRangeUnit()>
<java.time.temporal.TemporalField: boolean isTimeBased()>
<java.time.temporal.TemporalField: java.time.temporal.ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)>
<java.time.temporal.TemporalField: java.time.temporal.TemporalUnit getBaseUnit()>
<java.time.temporal.TemporalField: java.lang.String toString()>
<java.time.temporal.TemporalField: long getFrom(java.time.temporal.TemporalAccessor)>
<java.time.temporal.TemporalField: boolean isDateBased()>
<java.util.concurrent.CopyOnWriteArraySet: void <init>(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
<java.util.concurrent.CopyOnWriteArraySet: void forEach(java.util.function.Consumer)>
<java.util.concurrent.CopyOnWriteArraySet: void <init>()>
<java.util.concurrent.CopyOnWriteArraySet: int size()>
<android.media.MediaCodec.CodecException: boolean isRecoverable()>
<android.media.MediaCodec.CodecException: java.lang.String getDiagnosticInfo()>
<android.media.MediaCodec.CodecException: int getErrorCode()>
<android.media.MediaCodec.CodecException: boolean isTransient()>
<android.hardware.SensorManager.DynamicSensorCallback: void <init>()>
<android.hardware.SensorManager.DynamicSensorCallback: void onDynamicSensorConnected(android.hardware.Sensor)>
<android.hardware.SensorManager.DynamicSensorCallback: void onDynamicSensorDisconnected(android.hardware.Sensor)>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest: android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest newInstance()>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest: android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest newInstance(java.lang.String)>
<java.io.SyncFailedException: void <init>(String)>
<java.security.interfaces.RSAPrivateKey extends java.security.PrivateKey java.security.interfaces.RSAKey: java.math.BigInteger getPrivateExponent()>
<android.util.LogPrinter: void <init>(int,String)>
<android.util.LogPrinter: void println(java.lang.String)>
<java.util.function.ToDoubleFunction: double applyAsDouble(T)>
<android.media.audiofx.Visualizer: int getSamplingRate()>
<android.media.audiofx.Visualizer: int getCaptureSize()>
<android.media.audiofx.Visualizer: int setMeasurementMode(int)>
<android.media.audiofx.Visualizer: boolean getEnabled()>
<android.media.audiofx.Visualizer: void release()>
<android.media.audiofx.Visualizer: int getMaxCaptureRate()>
<android.media.audiofx.Visualizer: int getMeasurementMode()>
<android.media.audiofx.Visualizer: int setEnabled(boolean)>
<android.media.audiofx.Visualizer: int[] getCaptureSizeRange()>
<android.media.audiofx.Visualizer: int getScalingMode()>
<android.media.audiofx.Visualizer: int setCaptureSize(int)>
<android.media.audiofx.Visualizer: int getWaveForm(byte[])>
<android.media.audiofx.Visualizer: void <init>(int)>
<android.media.audiofx.Visualizer: int setScalingMode(int)>
<android.media.audiofx.Visualizer: int getFft(byte[])>
<android.media.audiofx.Visualizer: void finalize()>
<android.media.audiofx.Visualizer: int getMeasurementPeakRms(android.media.audiofx.Visualizer.MeasurementPeakRms)>
<android.media.audiofx.Visualizer: int setDataCaptureListener(android.media.audiofx.Visualizer.OnDataCaptureListener,int,boolean,boolean)>
<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>
<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream,boolean)>
<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream,int)>
<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream,int,boolean)>
<java.security.SecureRandomSpi: void engineSetSeed(byte[])>
<java.security.SecureRandomSpi: void engineNextBytes(byte[])>
<java.security.SecureRandomSpi: void <init>()>
<java.security.SecureRandomSpi: byte[] engineGenerateSeed(int)>
<javax.crypto.SealedObject: java.lang.Object getObject(java.security.Key)>
<javax.crypto.SealedObject: void <init>(java.io.Serializable,javax.crypto.Cipher)>
<javax.crypto.SealedObject: java.lang.String getAlgorithm()>
<javax.crypto.SealedObject: java.lang.Object getObject(java.security.Key,java.lang.String)>
<javax.crypto.SealedObject: java.lang.Object getObject(javax.crypto.Cipher)>
<javax.crypto.SealedObject: void <init>(javax.crypto.SealedObject)>
<java.lang.Character.Subset: boolean equals(java.lang.Object)>
<java.lang.Character.Subset: java.lang.String toString()>
<java.lang.Character.Subset: void <init>(String)>
<java.lang.Character.Subset: int hashCode()>
<android.view.View.OnTouchListener: boolean onTouch(android.view.View,android.view.MotionEvent)>
<java.io.ByteArrayOutputStream: void write(int)>
<java.io.ByteArrayOutputStream: void write(byte[],int,int)>
<java.io.ByteArrayOutputStream: void <init>()>
<java.io.ByteArrayOutputStream: int size()>
<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>
<java.io.ByteArrayOutputStream: byte[] toByteArray()>
<java.io.ByteArrayOutputStream: java.lang.String toString(int)>
<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>
<java.io.ByteArrayOutputStream: void <init>(int)>
<java.io.ByteArrayOutputStream: void reset()>
<android.telephony.mbms.ServiceInfo: CharSequence getNameForLocale(java.util.Locale)>
<android.telephony.mbms.ServiceInfo: java.util.Set getNamedContentLocales()>
<android.telephony.mbms.ServiceInfo: java.lang.String getServiceId()>
<android.telephony.mbms.ServiceInfo: java.util.List getLocales()>
<android.telephony.mbms.ServiceInfo: java.lang.String getServiceClassName()>
<android.telephony.mbms.ServiceInfo: java.util.Date getSessionEndTime()>
<android.telephony.mbms.ServiceInfo: java.util.Date getSessionStartTime()>
<android.security.keystore.DeviceIdAttestationException: void <init>(String)>
<android.security.keystore.DeviceIdAttestationException: void <init>(String,Throwable)>
<android.media.audiofx.DynamicsProcessing.Config: int getMbcBandCount()>
<android.media.audiofx.DynamicsProcessing.Config: void setPreEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Eq)>
<android.media.audiofx.DynamicsProcessing.Config: android.media.audiofx.DynamicsProcessing.EqBand getPreEqBandByChannelIndex(int,int)>
<android.media.audiofx.DynamicsProcessing.Config: void setPostEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq)>
<android.media.audiofx.DynamicsProcessing.Config: void setMbcByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Mbc)>
<android.media.audiofx.DynamicsProcessing.Config: void setPreEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq)>
<android.media.audiofx.DynamicsProcessing.Config: float getInputGainByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing.Config: int getPostEqBandCount()>
<android.media.audiofx.DynamicsProcessing.Config: android.media.audiofx.DynamicsProcessing.MbcBand getMbcBandByChannelIndex(int,int)>
<android.media.audiofx.DynamicsProcessing.Config: boolean isPostEqInUse()>
<android.media.audiofx.DynamicsProcessing.Config: void setMbcBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing.MbcBand)>
<android.media.audiofx.DynamicsProcessing.Config: void setChannelTo(int,android.media.audiofx.DynamicsProcessing.Channel)>
<android.media.audiofx.DynamicsProcessing.Config: void setLimiterAllChannelsTo(android.media.audiofx.DynamicsProcessing.Limiter)>
<android.media.audiofx.DynamicsProcessing.Config: android.media.audiofx.DynamicsProcessing.Limiter getLimiterByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing.Config: int getVariant()>
<android.media.audiofx.DynamicsProcessing.Config: float getPreferredFrameDuration()>
<android.media.audiofx.DynamicsProcessing.Config: void setInputGainByChannelIndex(int,float)>
<android.media.audiofx.DynamicsProcessing.Config: void setPostEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Eq)>
<android.media.audiofx.DynamicsProcessing.Config: android.media.audiofx.DynamicsProcessing.Channel getChannelByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing.Config: void setAllChannelsTo(android.media.audiofx.DynamicsProcessing.Channel)>
<android.media.audiofx.DynamicsProcessing.Config: void setMbcBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing.MbcBand)>
<android.media.audiofx.DynamicsProcessing.Config: android.media.audiofx.DynamicsProcessing.Eq getPreEqByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing.Config: void setMbcAllChannelsTo(android.media.audiofx.DynamicsProcessing.Mbc)>
<android.media.audiofx.DynamicsProcessing.Config: boolean isLimiterInUse()>
<android.media.audiofx.DynamicsProcessing.Config: void setLimiterByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Limiter)>
<android.media.audiofx.DynamicsProcessing.Config: int getPreEqBandCount()>
<android.media.audiofx.DynamicsProcessing.Config: void setPostEqBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing.EqBand)>
<android.media.audiofx.DynamicsProcessing.Config: boolean isMbcInUse()>
<android.media.audiofx.DynamicsProcessing.Config: void setInputGainAllChannelsTo(float)>
<android.media.audiofx.DynamicsProcessing.Config: void setPreEqBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing.EqBand)>
<android.media.audiofx.DynamicsProcessing.Config: void setPreEqBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing.EqBand)>
<android.media.audiofx.DynamicsProcessing.Config: android.media.audiofx.DynamicsProcessing.Mbc getMbcByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing.Config: boolean isPreEqInUse()>
<android.media.audiofx.DynamicsProcessing.Config: void setPostEqBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing.EqBand)>
<android.media.audiofx.DynamicsProcessing.Config: android.media.audiofx.DynamicsProcessing.EqBand getPostEqBandByChannelIndex(int,int)>
<android.media.audiofx.DynamicsProcessing.Config: android.media.audiofx.DynamicsProcessing.Eq getPostEqByChannelIndex(int)>
<android.os.SystemClock: java.time.Clock currentGnssTimeClock()>
<android.os.SystemClock: boolean setCurrentTimeMillis(long)>
<android.os.SystemClock: void sleep(long)>
<android.os.SystemClock: long elapsedRealtimeNanos()>
<android.os.SystemClock: long elapsedRealtime()>
<android.os.SystemClock: long uptimeMillis()>
<android.os.SystemClock: long currentThreadTimeMillis()>
<android.content.pm.LauncherApps.PinItemRequest: android.os.Bundle getExtras()>
<android.content.pm.LauncherApps.PinItemRequest: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.LauncherApps.PinItemRequest: android.content.pm.ShortcutInfo getShortcutInfo()>
<android.content.pm.LauncherApps.PinItemRequest: boolean isValid()>
<android.content.pm.LauncherApps.PinItemRequest: int describeContents()>
<android.content.pm.LauncherApps.PinItemRequest: boolean accept(android.os.Bundle)>
<android.content.pm.LauncherApps.PinItemRequest: boolean accept()>
<android.content.pm.LauncherApps.PinItemRequest: android.appwidget.AppWidgetProviderInfo getAppWidgetProviderInfo(android.content.Context)>
<android.content.pm.LauncherApps.PinItemRequest: int getRequestType()>
<java.util.Calendar: boolean before(java.lang.Object)>
<java.util.Calendar: int getMinimalDaysInFirstWeek()>
<java.util.Calendar: int getLeastMaximum(int)>
<java.util.Calendar: java.util.TimeZone getTimeZone()>
<java.util.Calendar: int getWeeksInWeekYear()>
<java.util.Calendar: int getMinimum(int)>
<java.util.Calendar: boolean after(java.lang.Object)>
<java.util.Calendar: boolean isLenient()>
<java.util.Calendar: int getFirstDayOfWeek()>
<java.util.Calendar: int getActualMinimum(int)>
<java.util.Calendar: int compareTo(java.util.Calendar)>
<java.util.Calendar: void <init>()>
<java.util.Calendar: long getTimeInMillis()>
<java.util.Calendar: void clear()>
<java.util.Calendar: void add(int,int)>
<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>
<java.util.Calendar: java.util.Calendar getInstance()>
<java.util.Calendar: void computeFields()>
<java.util.Calendar: boolean isSet(int)>
<java.util.Calendar: void setTimeZone(java.util.TimeZone)>
<java.util.Calendar: void clear(int)>
<java.util.Calendar: void <init>(java.util.TimeZone,java.util.Locale)>
<java.util.Calendar: void computeTime()>
<java.util.Calendar: void setFirstDayOfWeek(int)>
<java.util.Calendar: void set(int,int,int,int,int)>
<java.util.Calendar: int get(int)>
<java.util.Calendar: java.util.Locale[] getAvailableLocales()>
<java.util.Calendar: void set(int,int,int,int,int,int)>
<java.util.Calendar: int getActualMaximum(int)>
<java.util.Calendar: boolean isWeekDateSupported()>
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>
<java.util.Calendar: java.lang.String getCalendarType()>
<java.util.Calendar: int getGreatestMinimum(int)>
<java.util.Calendar: void roll(int,int)>
<java.util.Calendar: java.util.Date getTime()>
<java.util.Calendar: void setLenient(boolean)>
<java.util.Calendar: java.util.Set getAvailableCalendarTypes()>
<java.util.Calendar: void roll(int,boolean)>
<java.util.Calendar: java.lang.Object clone()>
<java.util.Calendar: void setTime(java.util.Date)>
<java.util.Calendar: void setTimeInMillis(long)>
<java.util.Calendar: java.time.Instant toInstant()>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>
<java.util.Calendar: java.lang.String getDisplayName(int,int,java.util.Locale)>
<java.util.Calendar: int getMaximum(int)>
<java.util.Calendar: void setWeekDate(int,int,int)>
<java.util.Calendar: void set(int,int,int)>
<java.util.Calendar: void set(int,int)>
<java.util.Calendar: void setMinimalDaysInFirstWeek(int)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>
<java.util.Calendar: int internalGet(int)>
<java.util.Calendar: int getWeekYear()>
<java.util.Calendar: void complete()>
<java.util.concurrent.BlockingDeque extends java.util.concurrent.BlockingQueue java.util.Deque: void putFirst(E)>
<java.util.concurrent.BlockingDeque extends java.util.concurrent.BlockingQueue java.util.Deque: boolean offerFirst(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.BlockingDeque extends java.util.concurrent.BlockingQueue java.util.Deque: E takeLast()>
<java.util.concurrent.BlockingDeque extends java.util.concurrent.BlockingQueue java.util.Deque: E pollFirst(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.BlockingDeque extends java.util.concurrent.BlockingQueue java.util.Deque: E pollLast(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.BlockingDeque extends java.util.concurrent.BlockingQueue java.util.Deque: boolean offerLast(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.BlockingDeque extends java.util.concurrent.BlockingQueue java.util.Deque: void putLast(E)>
<java.util.concurrent.BlockingDeque extends java.util.concurrent.BlockingQueue java.util.Deque: E takeFirst()>
<android.media.audiopolicy.AudioPolicy.AudioPolicyVolumeCallback: void <init>()>
<android.media.audiopolicy.AudioPolicy.AudioPolicyVolumeCallback: void onVolumeAdjustment(int)>
<java.text.AttributedCharacterIterator.Attribute: java.lang.String getName()>
<java.text.AttributedCharacterIterator.Attribute: boolean equals(java.lang.Object)>
<java.text.AttributedCharacterIterator.Attribute: void <init>(String)>
<java.text.AttributedCharacterIterator.Attribute: int hashCode()>
<java.text.AttributedCharacterIterator.Attribute: java.lang.Object readResolve()>
<android.app.LauncherActivity.ListItem: void <init>()>
<android.os.RemoteCallback.OnResultListener: void onResult(android.os.Bundle)>
<android.os.Parcelable: int describeContents()>
<android.os.Parcelable: void writeToParcel(android.os.Parcel,int)>
<android.app.Notification.DecoratedCustomViewStyle: void <init>()>
<android.text.style.StyleSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.StyleSpan: int getStyle()>
<android.text.style.StyleSpan: int describeContents()>
<android.text.style.StyleSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.StyleSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.StyleSpan: void <init>(android.os.Parcel)>
<android.text.style.StyleSpan: void <init>(int)>
<android.text.style.StyleSpan: int getSpanTypeId()>
<android.accounts.OperationCanceledException: void <init>()>
<android.accounts.OperationCanceledException: void <init>(String,Throwable)>
<android.accounts.OperationCanceledException: void <init>(Throwable)>
<android.accounts.OperationCanceledException: void <init>(String)>
<android.hardware.radio.ProgramList.Filter: int describeContents()>
<android.hardware.radio.ProgramList.Filter: void <init>(java.util.Set,java.util.Set,boolean,boolean)>
<android.hardware.radio.ProgramList.Filter: java.util.Set getIdentifierTypes()>
<android.hardware.radio.ProgramList.Filter: boolean areModificationsExcluded()>
<android.hardware.radio.ProgramList.Filter: void writeToParcel(android.os.Parcel,int)>
<android.hardware.radio.ProgramList.Filter: boolean areCategoriesIncluded()>
<android.hardware.radio.ProgramList.Filter: java.util.Set getIdentifiers()>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: boolean eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[],int,int[])>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: javax.microedition.khronos.egl.EGLDisplay eglGetDisplay(java.lang.Object)>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: javax.microedition.khronos.egl.EGLSurface eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: boolean eglWaitNative(int,java.lang.Object)>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: javax.microedition.khronos.egl.EGLSurface eglGetCurrentSurface(int)>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: boolean eglTerminate(javax.microedition.khronos.egl.EGLDisplay)>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: javax.microedition.khronos.egl.EGLSurface eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int[])>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: java.lang.String eglQueryString(javax.microedition.khronos.egl.EGLDisplay,int)>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: boolean eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay,int[])>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay,int[],javax.microedition.khronos.egl.EGLConfig[],int,int[])>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: javax.microedition.khronos.egl.EGLSurface eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: javax.microedition.khronos.egl.EGLDisplay eglGetCurrentDisplay()>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: javax.microedition.khronos.egl.EGLContext eglGetCurrentContext()>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: boolean eglQuerySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,int,int[])>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: boolean eglCopyBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,java.lang.Object)>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: javax.microedition.khronos.egl.EGLContext eglCreateContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,javax.microedition.khronos.egl.EGLContext,int[])>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: int eglGetError()>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: boolean eglWaitGL()>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: boolean eglQueryContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext,int,int[])>
<javax.microedition.khronos.egl.EGL10 extends javax.microedition.khronos.egl.EGL: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>
<android.view.ViewStructure.HtmlInfo.Builder: android.view.ViewStructure.HtmlInfo build()>
<android.view.ViewStructure.HtmlInfo.Builder: void <init>()>
<android.view.ViewStructure.HtmlInfo.Builder: android.view.ViewStructure.HtmlInfo.Builder addAttribute(java.lang.String,java.lang.String)>
<android.app.role.RoleManager: boolean isRoleHeld(java.lang.String)>
<android.app.role.RoleManager: void clearRoleHoldersAsUser(java.lang.String,int,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.app.role.RoleManager: java.util.List getRoleHoldersAsUser(java.lang.String,android.os.UserHandle)>
<android.app.role.RoleManager: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.app.role.RoleManager: android.content.Intent createRequestRoleIntent(java.lang.String)>
<android.app.role.RoleManager: java.util.List getHeldRolesFromController(java.lang.String)>
<android.app.role.RoleManager: void setRoleNamesFromController(java.util.List)>
<android.app.role.RoleManager: boolean removeRoleHolderFromController(java.lang.String,java.lang.String)>
<android.app.role.RoleManager: java.util.List getRoleHolders(java.lang.String)>
<android.app.role.RoleManager: void removeOnRoleHoldersChangedListenerAsUser(android.app.role.OnRoleHoldersChangedListener,android.os.UserHandle)>
<android.app.role.RoleManager: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.app.role.RoleManager: boolean addRoleHolderFromController(java.lang.String,java.lang.String)>
<android.app.role.RoleManager: boolean isRoleAvailable(java.lang.String)>
<android.app.role.RoleManager: void addOnRoleHoldersChangedListenerAsUser(java.util.concurrent.Executor,android.app.role.OnRoleHoldersChangedListener,android.os.UserHandle)>
<java.io.ObjectStreamException: void <init>(String)>
<java.io.ObjectStreamException: void <init>()>
<java.util.TreeMap: K lastKey()>
<java.util.TreeMap: K lowerKey(K)>
<java.util.TreeMap: java.util.NavigableMap headMap(K,boolean)>
<java.util.TreeMap: java.util.Map.Entry ceilingEntry(K)>
<java.util.TreeMap: void <init>(java.util.SortedMap)>
<java.util.TreeMap: java.util.Map.Entry firstEntry()>
<java.util.TreeMap: java.util.NavigableSet navigableKeySet()>
<java.util.TreeMap: void <init>()>
<java.util.TreeMap: java.util.Map.Entry higherEntry(K)>
<java.util.TreeMap: java.util.NavigableMap tailMap(K,boolean)>
<java.util.TreeMap: K ceilingKey(K)>
<java.util.TreeMap: java.util.Map.Entry lowerEntry(K)>
<java.util.TreeMap: java.util.Map.Entry pollLastEntry()>
<java.util.TreeMap: java.util.Map.Entry lastEntry()>
<java.util.TreeMap: void <init>(java.util.Map)>
<java.util.TreeMap: java.util.SortedMap tailMap(K)>
<java.util.TreeMap: java.util.NavigableMap descendingMap()>
<java.util.TreeMap: java.util.Map.Entry floorEntry(K)>
<java.util.TreeMap: K floorKey(K)>
<java.util.TreeMap: java.util.NavigableSet descendingKeySet()>
<java.util.TreeMap: java.util.Set entrySet()>
<java.util.TreeMap: java.util.Map.Entry pollFirstEntry()>
<java.util.TreeMap: K higherKey(K)>
<java.util.TreeMap: java.util.SortedMap subMap(K,K)>
<java.util.TreeMap: java.util.SortedMap headMap(K)>
<java.util.TreeMap: void <init>(java.util.Comparator)>
<java.util.TreeMap: java.util.Comparator comparator()>
<java.util.TreeMap: K firstKey()>
<java.util.TreeMap: java.util.NavigableMap subMap(K,boolean,K,boolean)>
<java.util.TreeMap: java.lang.Object clone()>
<android.media.MediaPlayer.DrmInfo: java.util.UUID[] getSupportedSchemes()>
<android.media.MediaPlayer.DrmInfo: java.util.Map getPssh()>
<android.widget.TableRow: void <init>(android.content.Context)>
<android.widget.TableRow: int getVirtualChildCount()>
<android.widget.TableRow: android.view.View getVirtualChildAt(int)>
<android.widget.TableRow: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TableRow: android.widget.TableRow.LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.media.Session2CommandGroup: boolean hasCommand(int)>
<android.media.Session2CommandGroup: int describeContents()>
<android.media.Session2CommandGroup: boolean hasCommand(android.media.Session2Command)>
<android.media.Session2CommandGroup: java.util.Set getCommands()>
<android.media.Session2CommandGroup: void writeToParcel(android.os.Parcel,int)>
<java.time.YearMonth: boolean isBefore(java.time.YearMonth)>
<java.time.YearMonth: java.time.YearMonth now(java.time.Clock)>
<java.time.YearMonth: java.time.YearMonth from(java.time.temporal.TemporalAccessor)>
<java.time.YearMonth: boolean isLeapYear()>
<java.time.YearMonth: boolean isSupported(java.time.temporal.TemporalField)>
<java.time.YearMonth: java.time.YearMonth now(java.time.ZoneId)>
<java.time.YearMonth: java.time.YearMonth parse(CharSequence,java.time.format.DateTimeFormatter)>
<java.time.YearMonth: int getMonthValue()>
<java.time.YearMonth: int lengthOfMonth()>
<java.time.YearMonth: java.time.LocalDate atDay(int)>
<java.time.YearMonth: java.time.LocalDate atEndOfMonth()>
<java.time.YearMonth: java.time.YearMonth minusYears(long)>
<java.time.YearMonth: java.time.YearMonth parse(CharSequence)>
<java.time.YearMonth: java.time.YearMonth minusMonths(long)>
<java.time.YearMonth: boolean isValidDay(int)>
<java.time.YearMonth: int lengthOfYear()>
<java.time.YearMonth: java.time.YearMonth with(java.time.temporal.TemporalAdjuster)>
<java.time.YearMonth: java.time.YearMonth minus(long,java.time.temporal.TemporalUnit)>
<java.time.YearMonth: int getYear()>
<java.time.YearMonth: java.time.Month getMonth()>
<java.time.YearMonth: java.time.YearMonth plusMonths(long)>
<java.time.YearMonth: java.time.YearMonth withYear(int)>
<java.time.YearMonth: java.time.YearMonth with(java.time.temporal.TemporalField,long)>
<java.time.YearMonth: java.time.YearMonth plus(long,java.time.temporal.TemporalUnit)>
<java.time.YearMonth: java.time.YearMonth of(int,int)>
<java.time.YearMonth: java.time.YearMonth plus(java.time.temporal.TemporalAmount)>
<java.time.YearMonth: java.time.YearMonth minus(java.time.temporal.TemporalAmount)>
<java.time.YearMonth: java.time.YearMonth withMonth(int)>
<java.time.YearMonth: java.lang.String format(java.time.format.DateTimeFormatter)>
<java.time.YearMonth: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>
<java.time.YearMonth: int compareTo(java.time.YearMonth)>
<java.time.YearMonth: long getLong(java.time.temporal.TemporalField)>
<java.time.YearMonth: java.time.YearMonth of(int,java.time.Month)>
<java.time.YearMonth: java.time.YearMonth plusYears(long)>
<java.time.YearMonth: boolean isSupported(java.time.temporal.TemporalUnit)>
<java.time.YearMonth: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>
<java.time.YearMonth: boolean isAfter(java.time.YearMonth)>
<java.time.YearMonth: java.time.YearMonth now()>
<javax.xml.transform.TransformerFactory: boolean getFeature(java.lang.String)>
<javax.xml.transform.TransformerFactory: void <init>()>
<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer()>
<javax.xml.transform.TransformerFactory: void setURIResolver(javax.xml.transform.URIResolver)>
<javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>
<javax.xml.transform.TransformerFactory: javax.xml.transform.URIResolver getURIResolver()>
<javax.xml.transform.TransformerFactory: void setAttribute(java.lang.String,java.lang.Object)>
<javax.xml.transform.TransformerFactory: javax.xml.transform.ErrorListener getErrorListener()>
<javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance(java.lang.String,java.lang.ClassLoader)>
<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer(javax.xml.transform.Source)>
<javax.xml.transform.TransformerFactory: javax.xml.transform.Source getAssociatedStylesheet(javax.xml.transform.Source,java.lang.String,java.lang.String,java.lang.String)>
<javax.xml.transform.TransformerFactory: java.lang.Object getAttribute(java.lang.String)>
<javax.xml.transform.TransformerFactory: javax.xml.transform.Templates newTemplates(javax.xml.transform.Source)>
<javax.xml.transform.TransformerFactory: void setFeature(java.lang.String,boolean)>
<javax.xml.transform.TransformerFactory: void setErrorListener(javax.xml.transform.ErrorListener)>
<android.graphics.fonts.Font: android.graphics.fonts.FontVariationAxis[] getAxes()>
<android.graphics.fonts.Font: android.graphics.fonts.FontStyle getStyle()>
<android.graphics.fonts.Font: java.nio.ByteBuffer getBuffer()>
<android.graphics.fonts.Font: java.io.File getFile()>
<android.graphics.fonts.Font: android.os.LocaleList getLocaleList()>
<android.graphics.fonts.Font: int getTtcIndex()>
<java.nio.ReadOnlyBufferException: void <init>()>
<android.app.KeyguardManager: boolean getPrivateNotificationsAllowed()>
<android.app.KeyguardManager: android.content.Intent createConfirmDeviceCredentialIntent(CharSequence,CharSequence)>
<android.app.KeyguardManager: boolean isDeviceSecure()>
<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()>
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager.OnKeyguardExitResult)>
<android.app.KeyguardManager: boolean isDeviceLocked()>
<android.app.KeyguardManager: android.app.KeyguardManager.KeyguardLock newKeyguardLock(java.lang.String)>
<android.app.KeyguardManager: void requestDismissKeyguard(android.app.Activity,android.app.KeyguardManager.KeyguardDismissCallback)>
<android.app.KeyguardManager: android.content.Intent createConfirmFactoryResetCredentialIntent(CharSequence,CharSequence,CharSequence)>
<android.app.KeyguardManager: void requestDismissKeyguard(android.app.Activity,CharSequence,android.app.KeyguardManager.KeyguardDismissCallback)>
<android.app.KeyguardManager: boolean isKeyguardLocked()>
<android.app.KeyguardManager: void setPrivateNotificationsAllowed(boolean)>
<android.app.KeyguardManager: boolean isKeyguardSecure()>
<java.security.cert.X509Certificate: void checkValidity()>
<java.security.cert.X509Certificate: int getVersion()>
<java.security.cert.X509Certificate: void checkValidity(java.util.Date)>
<java.security.cert.X509Certificate: byte[] getTBSCertificate()>
<java.security.cert.X509Certificate: java.util.Collection getIssuerAlternativeNames()>
<java.security.cert.X509Certificate: byte[] getSigAlgParams()>
<java.security.cert.X509Certificate: java.lang.String getSigAlgOID()>
<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>
<java.security.cert.X509Certificate: java.util.Date getNotAfter()>
<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>
<java.security.cert.X509Certificate: boolean[] getSubjectUniqueID()>
<java.security.cert.X509Certificate: java.util.List getExtendedKeyUsage()>
<java.security.cert.X509Certificate: int getBasicConstraints()>
<java.security.cert.X509Certificate: boolean[] getIssuerUniqueID()>
<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()>
<java.security.cert.X509Certificate: java.lang.String getSigAlgName()>
<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>
<java.security.cert.X509Certificate: void <init>()>
<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>
<java.security.cert.X509Certificate: boolean[] getKeyUsage()>
<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>
<java.security.cert.X509Certificate: java.util.Date getNotBefore()>
<java.security.cert.X509Certificate: byte[] getSignature()>
<android.net.Credentials: int getPid()>
<android.net.Credentials: void <init>(int,int,int)>
<android.net.Credentials: int getUid()>
<android.net.Credentials: int getGid()>
<javax.xml.xpath.XPathExpressionException: void <init>(String)>
<javax.xml.xpath.XPathExpressionException: void <init>(Throwable)>
<android.icu.lang.UCharacter: boolean isTitleCase(int)>
<android.icu.lang.UCharacter: boolean isWhitespace(int)>
<android.icu.lang.UCharacter: boolean isLetterOrDigit(int)>
<android.icu.lang.UCharacter: java.lang.String getExtendedName(int)>
<android.icu.lang.UCharacter: boolean isULowercase(int)>
<android.icu.lang.UCharacter: int getDirection(int)>
<android.icu.lang.UCharacter: int codePointBefore(char[],int,int)>
<android.icu.lang.UCharacter: boolean isLowSurrogate(char)>
<android.icu.lang.UCharacter: int toUpperCase(int)>
<android.icu.lang.UCharacter: boolean isISOControl(int)>
<android.icu.lang.UCharacter: android.icu.util.RangeValueIterator getTypeIterator()>
<android.icu.lang.UCharacter: boolean isJavaIdentifierStart(int)>
<android.icu.lang.UCharacter: boolean isLetter(int)>
<android.icu.lang.UCharacter: java.lang.String getName(int)>
<android.icu.lang.UCharacter: java.lang.String toTitleCase(android.icu.util.ULocale,java.lang.String,android.icu.text.BreakIterator,int)>
<android.icu.lang.UCharacter: int getIntPropertyValue(int,int)>
<android.icu.lang.UCharacter: int foldCase(int,boolean)>
<android.icu.lang.UCharacter: boolean isSpaceChar(int)>
<android.icu.lang.UCharacter: java.lang.String foldCase(java.lang.String,int)>
<android.icu.lang.UCharacter: char forDigit(int,int)>
<android.icu.lang.UCharacter: boolean isUnicodeIdentifierStart(int)>
<android.icu.lang.UCharacter: int toTitleCase(int)>
<android.icu.lang.UCharacter: java.lang.String toString(int)>
<android.icu.lang.UCharacter: int getIntPropertyMinValue(int)>
<android.icu.lang.UCharacter: boolean isJavaIdentifierPart(int)>
<android.icu.lang.UCharacter: int getCombiningClass(int)>
<android.icu.lang.UCharacter: java.lang.String toUpperCase(java.util.Locale,java.lang.String)>
<android.icu.lang.UCharacter: int getCharFromExtendedName(java.lang.String)>
<android.icu.lang.UCharacter: java.lang.String toTitleCase(java.lang.String,android.icu.text.BreakIterator)>
<android.icu.lang.UCharacter: int getMirror(int)>
<android.icu.lang.UCharacter: java.lang.String toLowerCase(java.util.Locale,java.lang.String)>
<android.icu.lang.UCharacter: java.lang.String getName(java.lang.String,java.lang.String)>
<android.icu.lang.UCharacter: android.icu.util.VersionInfo getUnicodeVersion()>
<android.icu.lang.UCharacter: double getUnicodeNumericValue(int)>
<android.icu.lang.UCharacter: boolean isUpperCase(int)>
<android.icu.lang.UCharacter: boolean isUWhiteSpace(int)>
<android.icu.lang.UCharacter: java.lang.String toTitleCase(android.icu.util.ULocale,java.lang.String,android.icu.text.BreakIterator)>
<android.icu.lang.UCharacter: boolean isUAlphabetic(int)>
<android.icu.lang.UCharacter: int getBidiPairedBracket(int)>
<android.icu.lang.UCharacter: java.lang.String toTitleCase(java.util.Locale,java.lang.String,android.icu.text.BreakIterator,int)>
<android.icu.lang.UCharacter: boolean isUnicodeIdentifierPart(int)>
<android.icu.lang.UCharacter: char[] toChars(int)>
<android.icu.lang.UCharacter: android.icu.util.ValueIterator getExtendedNameIterator()>
<android.icu.lang.UCharacter: boolean isLegal(java.lang.String)>
<android.icu.lang.UCharacter: int codePointCount(char[],int,int)>
<android.icu.lang.UCharacter: boolean isBaseForm(int)>
<android.icu.lang.UCharacter: boolean isHighSurrogate(char)>
<android.icu.lang.UCharacter: boolean isSurrogatePair(char,char)>
<android.icu.lang.UCharacter: java.lang.String toLowerCase(android.icu.util.ULocale,java.lang.String)>
<android.icu.lang.UCharacter: android.icu.util.VersionInfo getAge(int)>
<android.icu.lang.UCharacter: java.lang.String toTitleCase(java.util.Locale,java.lang.String,android.icu.text.BreakIterator)>
<android.icu.lang.UCharacter: int charCount(int)>
<android.icu.lang.UCharacter: int codePointBefore(char[],int)>
<android.icu.lang.UCharacter: int getCharFromNameAlias(java.lang.String)>
<android.icu.lang.UCharacter: int getHanNumericValue(int)>
<android.icu.lang.UCharacter: byte getDirectionality(int)>
<android.icu.lang.UCharacter: boolean isDigit(int)>
<android.icu.lang.UCharacter: boolean isBMP(int)>
<android.icu.lang.UCharacter: boolean isLegal(int)>
<android.icu.lang.UCharacter: android.icu.util.ValueIterator getNameIterator()>
<android.icu.lang.UCharacter: int codePointAt(char[],int,int)>
<android.icu.lang.UCharacter: boolean isPrintable(int)>
<android.icu.lang.UCharacter: boolean isSupplementaryCodePoint(int)>
<android.icu.lang.UCharacter: boolean isSupplementary(int)>
<android.icu.lang.UCharacter: java.lang.String toUpperCase(java.lang.String)>
<android.icu.lang.UCharacter: boolean isUUppercase(int)>
<android.icu.lang.UCharacter: int toChars(int,char[],int)>
<android.icu.lang.UCharacter: boolean isDefined(int)>
<android.icu.lang.UCharacter: boolean isMirrored(int)>
<android.icu.lang.UCharacter: int getIntPropertyMaxValue(int)>
<android.icu.lang.UCharacter: int getType(int)>
<android.icu.lang.UCharacter: java.lang.String toUpperCase(android.icu.util.ULocale,java.lang.String)>
<android.icu.lang.UCharacter: int toLowerCase(int)>
<android.icu.lang.UCharacter: boolean isValidCodePoint(int)>
<android.icu.lang.UCharacter: boolean hasBinaryProperty(int,int)>
<android.icu.lang.UCharacter: boolean isIdentifierIgnorable(int)>
<android.icu.lang.UCharacter: int codePointBefore(CharSequence,int)>
<android.icu.lang.UCharacter: int getCodePoint(char)>
<android.icu.lang.UCharacter: boolean isLowerCase(int)>
<android.icu.lang.UCharacter: int digit(int,int)>
<android.icu.lang.UCharacter: int getPropertyEnum(CharSequence)>
<android.icu.lang.UCharacter: java.lang.String getPropertyName(int,int)>
<android.icu.lang.UCharacter: java.lang.String getPropertyValueName(int,int,int)>
<android.icu.lang.UCharacter: java.lang.String toLowerCase(java.lang.String)>
<android.icu.lang.UCharacter: int codePointAt(CharSequence,int)>
<android.icu.lang.UCharacter: java.lang.String getNameAlias(int)>
<android.icu.lang.UCharacter: int getCodePoint(char,char)>
<android.icu.lang.UCharacter: int toCodePoint(char,char)>
<android.icu.lang.UCharacter: int getNumericValue(int)>
<android.icu.lang.UCharacter: int getCharFromName(java.lang.String)>
<android.icu.lang.UCharacter: int foldCase(int,int)>
<android.icu.lang.UCharacter: java.lang.String foldCase(java.lang.String,boolean)>
<android.icu.lang.UCharacter: int codePointCount(CharSequence,int,int)>
<android.icu.lang.UCharacter: int getPropertyValueEnum(int,CharSequence)>
<android.icu.lang.UCharacter: int offsetByCodePoints(CharSequence,int,int)>
<android.icu.lang.UCharacter: int digit(int)>
<android.icu.lang.UCharacter: int codePointAt(char[],int)>
<android.icu.lang.UCharacter: int offsetByCodePoints(char[],int,int,int,int)>
<java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy: void <init>()>
<java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy: void rejectedExecution(Runnable,java.util.concurrent.ThreadPoolExecutor)>
<android.hardware.hdmi.HdmiSwitchClient.OnSelectListener: void onSelect(@android.hardware.hdmi.HdmiControlManager.ControlCallbackResultint)>
<android.icu.text.DateFormat: void parse(java.lang.String,android.icu.util.Calendar,java.text.ParsePosition)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getDateInstance(int)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getPatternInstance(java.lang.String)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getTimeInstance(int,java.util.Locale)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getTimeInstance(android.icu.util.Calendar,int,java.util.Locale)>
<android.icu.text.DateFormat: boolean isCalendarLenient()>
<android.icu.text.DateFormat: android.icu.text.DateFormat getPatternInstance(android.icu.util.Calendar,java.lang.String,java.util.Locale)>
<android.icu.text.DateFormat: void setContext(android.icu.text.DisplayContext)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getDateTimeInstance(int,int)>
<android.icu.text.DateFormat: void setLenient(boolean)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getTimeInstance(int)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getDateInstance(android.icu.util.Calendar,int)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getDateInstance()>
<android.icu.text.DateFormat: android.icu.text.DateFormat getInstanceForSkeleton(android.icu.util.Calendar,java.lang.String,java.util.Locale)>
<android.icu.text.DateFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>
<android.icu.text.DateFormat: void setTimeZone(android.icu.util.TimeZone)>
<android.icu.text.DateFormat: void setCalendar(android.icu.util.Calendar)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getTimeInstance(android.icu.util.Calendar,int)>
<android.icu.text.DateFormat: java.util.Locale[] getAvailableLocales()>
<android.icu.text.DateFormat: boolean getBooleanAttribute(android.icu.text.DateFormat.BooleanAttribute)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getDateInstance(android.icu.util.Calendar,int,android.icu.util.ULocale)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getTimeInstance(android.icu.util.Calendar,int,android.icu.util.ULocale)>
<android.icu.text.DateFormat: java.util.Date parse(java.lang.String)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getPatternInstance(java.lang.String,java.util.Locale)>
<android.icu.text.DateFormat: android.icu.text.DateFormat setBooleanAttribute(android.icu.text.DateFormat.BooleanAttribute,boolean)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getDateTimeInstance(int,int,android.icu.util.ULocale)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getDateTimeInstance(android.icu.util.Calendar,int,int,android.icu.util.ULocale)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getTimeInstance(int,android.icu.util.ULocale)>
<android.icu.text.DateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>
<android.icu.text.DateFormat: void setCalendarLenient(boolean)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getInstance()>
<android.icu.text.DateFormat: android.icu.text.DateFormat getDateInstance(android.icu.util.Calendar,int,java.util.Locale)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getDateTimeInstance(android.icu.util.Calendar,int,int,java.util.Locale)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getPatternInstance(java.lang.String,android.icu.util.ULocale)>
<android.icu.text.DateFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.DateFormat: android.icu.util.TimeZone getTimeZone()>
<android.icu.text.DateFormat: void setNumberFormat(android.icu.text.NumberFormat)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getInstanceForSkeleton(android.icu.util.Calendar,java.lang.String,android.icu.util.ULocale)>
<android.icu.text.DateFormat: android.icu.util.Calendar getCalendar()>
<android.icu.text.DateFormat: android.icu.text.DateFormat getDateTimeInstance()>
<android.icu.text.DateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getPatternInstance(android.icu.util.Calendar,java.lang.String,android.icu.util.ULocale)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getDateInstance(int,java.util.Locale)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getInstanceForSkeleton(java.lang.String,java.util.Locale)>
<android.icu.text.DateFormat: java.lang.String format(java.util.Date)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getDateInstance(int,android.icu.util.ULocale)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getInstanceForSkeleton(java.lang.String)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getInstance(android.icu.util.Calendar,java.util.Locale)>
<android.icu.text.DateFormat: android.icu.text.DisplayContext getContext(android.icu.text.DisplayContext.Type)>
<android.icu.text.DateFormat: android.icu.text.DateFormat getTimeInstance()>
<android.icu.text.DateFormat: android.icu.text.DateFormat getInstance(android.icu.util.Calendar)>
<android.icu.text.DateFormat: void <init>()>
<android.icu.text.DateFormat: java.lang.StringBuffer format(android.icu.util.Calendar,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.DateFormat: android.icu.text.NumberFormat getNumberFormat()>
<android.icu.text.DateFormat: android.icu.text.DateFormat getDateTimeInstance(android.icu.util.Calendar,int,int)>
<android.icu.text.DateFormat: boolean isLenient()>
<android.icu.text.DateFormat: android.icu.text.DateFormat getInstanceForSkeleton(java.lang.String,android.icu.util.ULocale)>
<javax.xml.transform.Result: java.lang.String getSystemId()>
<javax.xml.transform.Result: void setSystemId(java.lang.String)>
<android.provider.UserDictionary: void <init>()>
<android.view.textclassifier.TextClassifierEvent: int getEventType()>
<android.view.textclassifier.TextClassifierEvent: int[] getActionIndices()>
<android.view.textclassifier.TextClassifierEvent: java.lang.String[] getEntityTypes()>
<android.view.textclassifier.TextClassifierEvent: android.os.Bundle getExtras()>
<android.view.textclassifier.TextClassifierEvent: float[] getScores()>
<android.view.textclassifier.TextClassifierEvent: java.lang.String getModelName()>
<android.view.textclassifier.TextClassifierEvent: int describeContents()>
<android.view.textclassifier.TextClassifierEvent: android.icu.util.ULocale getLocale()>
<android.view.textclassifier.TextClassifierEvent: int getEventIndex()>
<android.view.textclassifier.TextClassifierEvent: int getEventCategory()>
<android.view.textclassifier.TextClassifierEvent: android.view.textclassifier.TextClassificationContext getEventContext()>
<android.view.textclassifier.TextClassifierEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextClassifierEvent: java.lang.String getResultId()>
<java.lang.NoSuchFieldError: void <init>()>
<java.lang.NoSuchFieldError: void <init>(String)>
<android.permission.RuntimePermissionPresentationInfo: CharSequence getLabel()>
<android.permission.RuntimePermissionPresentationInfo: void <init>(CharSequence,boolean,boolean)>
<android.permission.RuntimePermissionPresentationInfo: int describeContents()>
<android.permission.RuntimePermissionPresentationInfo: boolean isGranted()>
<android.permission.RuntimePermissionPresentationInfo: boolean isStandard()>
<android.permission.RuntimePermissionPresentationInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setUser(java.lang.String)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setMvnoType(int)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setCarrierEnabled(boolean)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setPassword(java.lang.String)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setCarrierId(int)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setAuthType(int)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setApnTypeBitmask(int)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setMmsProxyPort(int)>
<android.telephony.data.ApnSetting.Builder: void <init>()>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setRoamingProtocol(int)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting build()>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setEntryName(java.lang.String)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setProxyAddress(java.net.InetAddress)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setMmsc(android.net.Uri)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setProtocol(int)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setMmsProxyAddress(java.lang.String)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setOperatorNumeric(java.lang.String)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setProxyAddress(java.lang.String)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setMmsProxyAddress(java.net.InetAddress)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setProxyPort(int)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setApnName(java.lang.String)>
<android.telephony.data.ApnSetting.Builder: android.telephony.data.ApnSetting.Builder setNetworkTypeBitmask(int)>
<android.provider.ContactsContract.StatusUpdates: int getPresenceIconResourceId(int)>
<android.provider.ContactsContract.StatusUpdates: int getPresencePrecedence(int)>
<android.renderscript.Allocation: void setOnBufferAvailableListener(android.renderscript.Allocation.OnBufferAvailableListener)>
<android.renderscript.Allocation: void copyTo(android.graphics.Bitmap)>
<android.renderscript.Allocation: android.renderscript.Allocation[] createAllocations(android.renderscript.RenderScript,android.renderscript.Type,int,int)>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,java.lang.Object)>
<android.renderscript.Allocation: void copy3DRangeTo(int,int,int,int,int,int,java.lang.Object)>
<android.renderscript.Allocation: void copyFrom(float[])>
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>
<android.renderscript.Allocation: void copyFromUnchecked(float[])>
<android.renderscript.Allocation: void copyTo(short[])>
<android.renderscript.Allocation: void setFromFieldPacker(int,int,android.renderscript.FieldPacker)>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,byte[])>
<android.renderscript.Allocation: void setFromFieldPacker(int,android.renderscript.FieldPacker)>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,int[])>
<android.renderscript.Allocation: void generateMipmaps()>
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int)>
<android.renderscript.Allocation: void copyTo(int[])>
<android.renderscript.Allocation: void setAutoPadding(boolean)>
<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,float[])>
<android.renderscript.Allocation: void copy1DRangeTo(int,int,int[])>
<android.renderscript.Allocation: void copy3DRangeFrom(int,int,int,int,int,int,android.renderscript.Allocation,int,int,int)>
<android.renderscript.Allocation: void ioReceive()>
<android.renderscript.Allocation: void copy2DRangeTo(int,int,int,int,byte[])>
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,android.renderscript.Allocation.MipmapControl,int)>
<android.renderscript.Allocation: void copy1DRangeFrom(int,int,short[])>
<android.renderscript.Allocation: android.renderscript.Type getType()>
<android.renderscript.Allocation: void copy1DRangeFrom(int,int,byte[])>
<android.renderscript.Allocation: void copyFrom(java.lang.Object)>
<android.renderscript.Allocation: void copyFromUnchecked(short[])>
<android.renderscript.Allocation: void resize(int)>
<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,short[])>
<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,byte[])>
<android.renderscript.Allocation: void copy1DRangeTo(int,int,float[])>
<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,float[])>
<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,byte[])>
<android.renderscript.Allocation: int getBytesSize()>
<android.renderscript.Allocation: void copy1DRangeTo(int,int,short[])>
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)>
<android.renderscript.Allocation: void setSurface(android.view.Surface)>
<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,short[])>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation.MipmapControl,int)>
<android.renderscript.Allocation: void copy1DRangeFrom(int,int,android.renderscript.Allocation,int)>
<android.renderscript.Allocation: void copyFrom(android.renderscript.Allocation)>
<android.renderscript.Allocation: void copy2DRangeTo(int,int,int,int,short[])>
<android.renderscript.Allocation: void copy2DRangeTo(int,int,int,int,java.lang.Object)>
<android.renderscript.Allocation: void copyFromUnchecked(java.lang.Object)>
<android.renderscript.Allocation: void copy1DRangeFrom(int,int,float[])>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,float[])>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,android.renderscript.Allocation,int,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)>
<android.renderscript.Allocation: void copy2DRangeTo(int,int,int,int,float[])>
<android.renderscript.Allocation: void setFromFieldPacker(int,int,int,int,android.renderscript.FieldPacker)>
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type)>
<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,java.lang.Object)>
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int)>
<android.renderscript.Allocation: long getTimeStamp()>
<android.renderscript.Allocation: void copyFrom(byte[])>
<android.renderscript.Allocation: void copyTo(float[])>
<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,java.lang.Object)>
<android.renderscript.Allocation: android.view.Surface getSurface()>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,android.graphics.Bitmap)>
<android.renderscript.Allocation: void copyTo(byte[])>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,short[])>
<android.renderscript.Allocation: void copyFromUnchecked(byte[])>
<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,int[])>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation.MipmapControl,int)>
<android.renderscript.Allocation: void ioSend()>
<android.renderscript.Allocation: void copyFrom(android.graphics.Bitmap)>
<android.renderscript.Allocation: void copy3DRangeFrom(int,int,int,int,int,int,java.lang.Object)>
<android.renderscript.Allocation: void copy1DRangeFrom(int,int,int[])>
<android.renderscript.Allocation: void copyFrom(int[])>
<android.renderscript.Allocation: void copy2DRangeTo(int,int,int,int,int[])>
<android.renderscript.Allocation: void copy1DRangeTo(int,int,byte[])>
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation.MipmapControl,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation.MipmapControl,int)>
<android.renderscript.Allocation: long getStride()>
<android.renderscript.Allocation: android.renderscript.Allocation createFromString(android.renderscript.RenderScript,java.lang.String,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)>
<android.renderscript.Allocation: void copy1DRangeTo(int,int,java.lang.Object)>
<android.renderscript.Allocation: void copyTo(java.lang.Object)>
<android.renderscript.Allocation: java.nio.ByteBuffer getByteBuffer()>
<android.renderscript.Allocation: int getUsage()>
<android.renderscript.Allocation: void copyFromUnchecked(int[])>
<android.renderscript.Allocation: void copyFrom(short[])>
<android.renderscript.Allocation: void copy1DRangeFrom(int,int,java.lang.Object)>
<android.renderscript.Allocation: android.renderscript.Element getElement()>
<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,int[])>
<android.renderscript.Allocation: void copyFrom(android.renderscript.BaseObj[])>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>
<android.renderscript.Allocation: void syncAll(int)>
<javax.crypto.spec.RC5ParameterSpec: void <init>(int,int,int,byte[],int)>
<javax.crypto.spec.RC5ParameterSpec: void <init>(int,int,int)>
<javax.crypto.spec.RC5ParameterSpec: byte[] getIV()>
<javax.crypto.spec.RC5ParameterSpec: int getVersion()>
<javax.crypto.spec.RC5ParameterSpec: int getWordSize()>
<javax.crypto.spec.RC5ParameterSpec: int getRounds()>
<javax.crypto.spec.RC5ParameterSpec: void <init>(int,int,int,byte[])>
<android.print.PrintManager.PrintServicesChangeListener: void onPrintServicesChanged()>
<android.widget.AdapterView: android.widget.AdapterView.OnItemClickListener getOnItemClickListener()>
<android.widget.AdapterView: void setOnItemLongClickListener(android.widget.AdapterView.OnItemLongClickListener)>
<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AdapterView: void setSelection(int)>
<android.widget.AdapterView: int getPositionForView(android.view.View)>
<android.widget.AdapterView: long getSelectedItemId()>
<android.widget.AdapterView: android.view.View getEmptyView()>
<android.widget.AdapterView: int getCount()>
<android.widget.AdapterView: int getLastVisiblePosition()>
<android.widget.AdapterView: java.lang.Object getItemAtPosition(int)>
<android.widget.AdapterView: android.view.View getSelectedView()>
<android.widget.AdapterView: T getAdapter()>
<android.widget.AdapterView: void <init>(android.content.Context)>
<android.widget.AdapterView: java.lang.Object getSelectedItem()>
<android.widget.AdapterView: boolean performItemClick(android.view.View,int,long)>
<android.widget.AdapterView: void setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)>
<android.widget.AdapterView: android.widget.AdapterView.OnItemLongClickListener getOnItemLongClickListener()>
<android.widget.AdapterView: long getItemIdAtPosition(int)>
<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.AdapterView: void setAdapter(T)>
<android.widget.AdapterView: void setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)>
<android.widget.AdapterView: int getSelectedItemPosition()>
<android.widget.AdapterView: int getFirstVisiblePosition()>
<android.widget.AdapterView: android.widget.AdapterView.OnItemSelectedListener getOnItemSelectedListener()>
<android.widget.AdapterView: void setEmptyView(android.view.View)>
<java.net.SocketPermission: void <init>(String,String)>
<java.net.SocketPermission: boolean implies(java.security.Permission)>
<java.net.SocketPermission: java.lang.String getActions()>
<java.security.cert.CertPathValidatorException: java.security.cert.CertPathValidatorException.Reason getReason()>
<java.security.cert.CertPathValidatorException: void <init>(Throwable)>
<java.security.cert.CertPathValidatorException: void <init>(String)>
<java.security.cert.CertPathValidatorException: void <init>(String,Throwable)>
<java.security.cert.CertPathValidatorException: void <init>(String,Throwable,java.security.cert.CertPath,int)>
<java.security.cert.CertPathValidatorException: java.security.cert.CertPath getCertPath()>
<java.security.cert.CertPathValidatorException: void <init>()>
<java.security.cert.CertPathValidatorException: int getIndex()>
<java.security.cert.CertPathValidatorException: void <init>(String,Throwable,java.security.cert.CertPath,int,java.security.cert.CertPathValidatorException.Reason)>
<android.drm.DrmUtils: void <init>()>
<android.drm.DrmUtils: android.drm.DrmUtils.ExtendedMetadataParser getExtendedMetadataParser(byte[])>
<android.media.midi.MidiDevice.MidiConnection: void close()>
<java.util.function.LongToDoubleFunction: double applyAsDouble(long)>
<android.widget.ViewSwitcher: void <init>(android.content.Context)>
<android.widget.ViewSwitcher: void reset()>
<android.widget.ViewSwitcher: android.view.View getNextView()>
<android.widget.ViewSwitcher: void setFactory(android.widget.ViewSwitcher.ViewFactory)>
<android.widget.ViewSwitcher: void <init>(android.content.Context,android.util.AttributeSet)>
<android.animation.IntEvaluator: java.lang.Integer evaluate(float,java.lang.Integer,java.lang.Integer)>
<android.animation.IntEvaluator: void <init>()>
<android.media.MediaRecorder.OnErrorListener: void onError(android.media.MediaRecorder,int,int)>
<android.os.Parcelable.Creator: T createFromParcel(android.os.Parcel)>
<android.os.Parcelable.Creator: T[] newArray(int)>
<android.graphics.PorterDuff: void <init>()>
<android.sax.EndElementListener: void end()>
<org.xml.sax.ext.DefaultHandler2: void endCDATA()>
<org.xml.sax.ext.DefaultHandler2: void endDTD()>
<org.xml.sax.ext.DefaultHandler2: void startEntity(java.lang.String)>
<org.xml.sax.ext.DefaultHandler2: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.ext.DefaultHandler2: void comment(char[],int,int)>
<org.xml.sax.ext.DefaultHandler2: void internalEntityDecl(java.lang.String,java.lang.String)>
<org.xml.sax.ext.DefaultHandler2: org.xml.sax.InputSource getExternalSubset(java.lang.String,java.lang.String)>
<org.xml.sax.ext.DefaultHandler2: void elementDecl(java.lang.String,java.lang.String)>
<org.xml.sax.ext.DefaultHandler2: void endEntity(java.lang.String)>
<org.xml.sax.ext.DefaultHandler2: void startDTD(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.ext.DefaultHandler2: void startCDATA()>
<org.xml.sax.ext.DefaultHandler2: void externalEntityDecl(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.ext.DefaultHandler2: void <init>()>
<org.xml.sax.ext.DefaultHandler2: void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.media.MediaDrm.OnSessionLostStateListener: void onSessionLostState(android.media.MediaDrm,byte[])>
<android.telephony.TelephonyScanManager.NetworkScanCallback: void onComplete()>
<android.telephony.TelephonyScanManager.NetworkScanCallback: void onError(int)>
<android.telephony.TelephonyScanManager.NetworkScanCallback: void onResults(java.util.List)>
<android.telephony.TelephonyScanManager.NetworkScanCallback: void <init>()>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float,byte[])>
<java.nio.charset.CharsetEncoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: boolean canEncode(CharSequence)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>
<java.nio.charset.CharsetEncoder: void implReset()>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()>
<java.nio.charset.CharsetEncoder: boolean isLegalReplacement(byte[])>
<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction()>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder replaceWith(byte[])>
<java.nio.charset.CharsetEncoder: float averageBytesPerChar()>
<java.nio.charset.CharsetEncoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: void implReplaceWith(byte[])>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>
<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()>
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer,java.nio.ByteBuffer)>
<java.nio.charset.CharsetEncoder: byte[] replacement()>
<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>
<java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)>
<java.nio.charset.CharsetEncoder: boolean canEncode(char)>
<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult implFlush(java.nio.ByteBuffer)>
<android.content.ActivityNotFoundException: void <init>(String)>
<android.content.ActivityNotFoundException: void <init>()>
<org.w3c.dom.DOMImplementationList: int getLength()>
<org.w3c.dom.DOMImplementationList: org.w3c.dom.DOMImplementation item(int)>
<android.media.MediaActionSound: void <init>()>
<android.media.MediaActionSound: void play(int)>
<android.media.MediaActionSound: void load(int)>
<android.media.MediaActionSound: void release()>
<android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()>
<android.view.accessibility.AccessibilityRecord: boolean isChecked()>
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View,int)>
<android.view.accessibility.AccessibilityRecord: int getFromIndex()>
<android.view.accessibility.AccessibilityRecord: void recycle()>
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)>
<android.view.accessibility.AccessibilityRecord: java.util.List getText()>
<android.view.accessibility.AccessibilityRecord: void setAddedCount(int)>
<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)>
<android.view.accessibility.AccessibilityRecord: void setScrollDeltaY(int)>
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()>
<android.view.accessibility.AccessibilityRecord: boolean isScrollable()>
<android.view.accessibility.AccessibilityRecord: int getWindowId()>
<android.view.accessibility.AccessibilityRecord: int getScrollY()>
<android.view.accessibility.AccessibilityRecord: CharSequence getClassName()>
<android.view.accessibility.AccessibilityRecord: int getItemCount()>
<android.view.accessibility.AccessibilityRecord: CharSequence getContentDescription()>
<android.view.accessibility.AccessibilityRecord: int getScrollDeltaX()>
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain()>
<android.view.accessibility.AccessibilityRecord: void setMaxScrollX(int)>
<android.view.accessibility.AccessibilityRecord: boolean isFullScreen()>
<android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)>
<android.view.accessibility.AccessibilityRecord: int getRemovedCount()>
<android.view.accessibility.AccessibilityRecord: void setToIndex(int)>
<android.view.accessibility.AccessibilityRecord: void setClassName(CharSequence)>
<android.view.accessibility.AccessibilityRecord: int getScrollX()>
<android.view.accessibility.AccessibilityRecord: int getToIndex()>
<android.view.accessibility.AccessibilityRecord: int getScrollDeltaY()>
<android.view.accessibility.AccessibilityRecord: int getAddedCount()>
<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)>
<android.view.accessibility.AccessibilityRecord: boolean isEnabled()>
<android.view.accessibility.AccessibilityRecord: void setScrollDeltaX(int)>
<android.view.accessibility.AccessibilityRecord: void setScrollX(int)>
<android.view.accessibility.AccessibilityRecord: void setBeforeText(CharSequence)>
<android.view.accessibility.AccessibilityRecord: int getMaxScrollX()>
<android.view.accessibility.AccessibilityRecord: void setFromIndex(int)>
<android.view.accessibility.AccessibilityRecord: CharSequence getBeforeText()>
<android.view.accessibility.AccessibilityRecord: void setMaxScrollY(int)>
<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()>
<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)>
<android.view.accessibility.AccessibilityRecord: void setContentDescription(CharSequence)>
<android.view.accessibility.AccessibilityRecord: boolean isPassword()>
<android.view.accessibility.AccessibilityRecord: void setScrollY(int)>
<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)>
<android.view.accessibility.AccessibilityRecord: void setParcelableData(android.os.Parcelable)>
<android.view.accessibility.AccessibilityRecord: void setRemovedCount(int)>
<android.view.accessibility.AccessibilityRecord: void setItemCount(int)>
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain(android.view.accessibility.AccessibilityRecord)>
<android.view.accessibility.AccessibilityRecord: int getMaxScrollY()>
<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)>
<android.service.attention.AttentionService: void onCheckAttention(android.service.attention.AttentionService.AttentionCallback)>
<android.service.attention.AttentionService: android.os.IBinder onBind(android.content.Intent)>
<android.service.attention.AttentionService: void onCancelAttentionCheck(android.service.attention.AttentionService.AttentionCallback)>
<android.service.attention.AttentionService: void <init>()>
<android.app.prediction.AppPredictionContext: void writeToParcel(android.os.Parcel,int)>
<android.app.prediction.AppPredictionContext: int getPredictedTargetCount()>
<android.app.prediction.AppPredictionContext: int describeContents()>
<android.app.prediction.AppPredictionContext: java.lang.String getPackageName()>
<android.app.prediction.AppPredictionContext: java.lang.String getUiSurface()>
<android.app.prediction.AppPredictionContext: android.os.Bundle getExtras()>
<android.content.AutofillOptions: android.content.AutofillOptions forWhitelistingItself()>
<android.content.AutofillOptions: void <init>(int,boolean)>
<android.content.AutofillOptions: int describeContents()>
<android.content.AutofillOptions: boolean isAugmentedAutofillEnabled(android.content.Context)>
<android.content.AutofillOptions: void writeToParcel(android.os.Parcel,int)>
<android.media.MediaCrypto: void finalize()>
<android.media.MediaCrypto: void release()>
<android.media.MediaCrypto: boolean requiresSecureDecoderComponent(java.lang.String)>
<android.media.MediaCrypto: void setMediaDrmSession(byte[])>
<android.media.MediaCrypto: void <init>(java.util.UUID,byte[])>
<android.media.MediaCrypto: boolean isCryptoSchemeSupported(java.util.UUID)>
<android.mtp.MtpDeviceInfo: boolean isOperationSupported(int)>
<android.mtp.MtpDeviceInfo: java.lang.String getModel()>
<android.mtp.MtpDeviceInfo: int[] getOperationsSupported()>
<android.mtp.MtpDeviceInfo: boolean isEventSupported(int)>
<android.mtp.MtpDeviceInfo: java.lang.String getManufacturer()>
<android.mtp.MtpDeviceInfo: java.lang.String getVersion()>
<android.mtp.MtpDeviceInfo: int[] getEventsSupported()>
<android.mtp.MtpDeviceInfo: java.lang.String getSerialNumber()>
<android.view.ViewStub.OnInflateListener: void onInflate(android.view.ViewStub,android.view.View)>
<java.io.DataInputStream: java.lang.String readUTF()>
<java.io.DataInputStream: char readChar()>
<java.io.DataInputStream: java.lang.String readLine()>
<java.io.DataInputStream: int read(byte[],int,int)>
<java.io.DataInputStream: double readDouble()>
<java.io.DataInputStream: boolean readBoolean()>
<java.io.DataInputStream: int read(byte[])>
<java.io.DataInputStream: short readShort()>
<java.io.DataInputStream: void readFully(byte[],int,int)>
<java.io.DataInputStream: byte readByte()>
<java.io.DataInputStream: void <init>(java.io.InputStream)>
<java.io.DataInputStream: float readFloat()>
<java.io.DataInputStream: int readUnsignedByte()>
<java.io.DataInputStream: int readUnsignedShort()>
<java.io.DataInputStream: int skipBytes(int)>
<java.io.DataInputStream: long readLong()>
<java.io.DataInputStream: int readInt()>
<java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)>
<java.io.DataInputStream: void readFully(byte[])>
<android.service.autofill.ImageTransformation.Builder: android.service.autofill.ImageTransformation.Builder addOption(java.util.regex.Pattern,@DrawableResint)>
<android.service.autofill.ImageTransformation.Builder: android.service.autofill.ImageTransformation.Builder addOption(java.util.regex.Pattern,@DrawableResint,CharSequence)>
<android.service.autofill.ImageTransformation.Builder: android.service.autofill.ImageTransformation build()>
<android.service.autofill.ImageTransformation.Builder: void <init>(android.view.autofill.AutofillId,java.util.regex.Pattern,@DrawableRes int,CharSequence)>
<android.service.autofill.ImageTransformation.Builder: void <init>(android.view.autofill.AutofillId,java.util.regex.Pattern,@DrawableRes int)>
<android.app.DownloadManager.Query: void <init>()>
<android.app.DownloadManager.Query: android.app.DownloadManager.Query setFilterByStatus(int)>
<android.app.DownloadManager.Query: android.app.DownloadManager.Query setFilterById(long...)>
<javax.crypto.AEADBadTagException: void <init>()>
<javax.crypto.AEADBadTagException: void <init>(String)>
<android.content.pm.IntentFilterVerificationInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.IntentFilterVerificationInfo: int getStatus()>
<android.content.pm.IntentFilterVerificationInfo: java.util.Set getDomains()>
<android.content.pm.IntentFilterVerificationInfo: int describeContents()>
<android.content.pm.IntentFilterVerificationInfo: java.lang.String getPackageName()>
<android.net.wifi.WifiManager.LocalOnlyHotspotReservation: void close()>
<android.net.wifi.WifiManager.LocalOnlyHotspotReservation: android.net.wifi.WifiConfiguration getWifiConfiguration()>
<javax.crypto.spec.DESedeKeySpec: void <init>(byte[],int)>
<javax.crypto.spec.DESedeKeySpec: void <init>(byte[])>
<javax.crypto.spec.DESedeKeySpec: boolean isParityAdjusted(byte[],int)>
<javax.crypto.spec.DESedeKeySpec: byte[] getKey()>
<android.app.Notification.Style: void internalSetSummaryText(CharSequence)>
<android.app.Notification.Style: void setBuilder(android.app.Notification.Builder)>
<android.app.Notification.Style: void <init>()>
<android.app.Notification.Style: android.widget.RemoteViews getStandardView(int)>
<android.app.Notification.Style: void internalSetBigContentTitle(CharSequence)>
<android.app.Notification.Style: void checkBuilder()>
<android.app.Notification.Style: android.app.Notification build()>
<java.nio.channels.spi.AbstractSelector: void end()>
<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeys()>
<java.nio.channels.spi.AbstractSelector: boolean isOpen()>
<java.nio.channels.spi.AbstractSelector: java.nio.channels.SelectionKey register(java.nio.channels.spi.AbstractSelectableChannel,int,java.lang.Object)>
<java.nio.channels.spi.AbstractSelector: java.nio.channels.spi.SelectorProvider provider()>
<java.nio.channels.spi.AbstractSelector: void deregister(java.nio.channels.spi.AbstractSelectionKey)>
<java.nio.channels.spi.AbstractSelector: void <init>(java.nio.channels.spi.SelectorProvider)>
<java.nio.channels.spi.AbstractSelector: void implCloseSelector()>
<java.nio.channels.spi.AbstractSelector: void close()>
<java.nio.channels.spi.AbstractSelector: void begin()>
<android.net.IpSecTransform: void close()>
<android.graphics.MaskFilter: void <init>()>
<android.service.chooser.ChooserTargetService: void <init>()>
<android.service.chooser.ChooserTargetService: android.os.IBinder onBind(android.content.Intent)>
<android.service.chooser.ChooserTargetService: java.util.List onGetChooserTargets(android.content.ComponentName,android.content.IntentFilter)>
<java.io.ObjectOutput extends java.io.DataOutput java.lang.AutoCloseable: void flush()>
<java.io.ObjectOutput extends java.io.DataOutput java.lang.AutoCloseable: void writeObject(java.lang.Object)>
<java.io.ObjectOutput extends java.io.DataOutput java.lang.AutoCloseable: void close()>
<java.lang.Package: A getDeclaredAnnotation(java.lang.Class)>
<java.lang.Package: java.lang.String getName()>
<java.lang.Package: java.lang.String getImplementationVendor()>
<java.lang.Package: java.lang.String getSpecificationVendor()>
<java.lang.Package: java.lang.annotation.Annotation[] getAnnotations()>
<java.lang.Package: java.lang.Package getPackage(java.lang.String)>
<java.lang.Package: java.lang.String getSpecificationTitle()>
<java.lang.Package: A[] getDeclaredAnnotationsByType(java.lang.Class)>
<java.lang.Package: boolean isCompatibleWith(java.lang.String)>
<java.lang.Package: java.lang.String getImplementationTitle()>
<java.lang.Package: java.lang.Package[] getPackages()>
<java.lang.Package: boolean isSealed(java.net.URL)>
<java.lang.Package: java.lang.String getImplementationVersion()>
<java.lang.Package: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.Package: java.lang.String getSpecificationVersion()>
<java.lang.Package: A getAnnotation(java.lang.Class)>
<java.lang.Package: boolean isSealed()>
<java.lang.Package: A[] getAnnotationsByType(java.lang.Class)>
<java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>
<java.nio.channels.Channels: java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream)>
<java.nio.channels.Channels: java.io.InputStream newInputStream(java.nio.channels.AsynchronousByteChannel)>
<java.nio.channels.Channels: java.io.OutputStream newOutputStream(java.nio.channels.AsynchronousByteChannel)>
<java.nio.channels.Channels: java.io.Writer newWriter(java.nio.channels.WritableByteChannel,java.nio.charset.CharsetEncoder,int)>
<java.nio.channels.Channels: java.io.Writer newWriter(java.nio.channels.WritableByteChannel,java.lang.String)>
<java.nio.channels.Channels: java.io.Reader newReader(java.nio.channels.ReadableByteChannel,java.nio.charset.CharsetDecoder,int)>
<java.nio.channels.Channels: java.io.InputStream newInputStream(java.nio.channels.ReadableByteChannel)>
<java.nio.channels.Channels: java.io.OutputStream newOutputStream(java.nio.channels.WritableByteChannel)>
<java.nio.channels.Channels: java.io.Reader newReader(java.nio.channels.ReadableByteChannel,java.lang.String)>
<android.service.autofill.InternalTransformation: boolean batchApply(android.service.autofill.ValueFinder,android.widget.RemoteViews,java.util.ArrayList)>
<android.service.autofill.InternalTransformation: void <init>()>
<android.os.IncidentManager.PendingReport: int getFlags()>
<android.os.IncidentManager.PendingReport: java.lang.String getRequestingPackage()>
<android.os.IncidentManager.PendingReport: long getTimestamp()>
<android.os.IncidentManager.PendingReport: void <init>(android.net.Uri)>
<android.os.IncidentManager.PendingReport: android.net.Uri getUri()>
<android.content.pm.FeatureGroupInfo: void <init>()>
<android.content.pm.FeatureGroupInfo: void <init>(android.content.pm.FeatureGroupInfo)>
<android.content.pm.FeatureGroupInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.FeatureGroupInfo: int describeContents()>
<java.security.cert.PKIXParameters: java.util.Set getTrustAnchors()>
<java.security.cert.PKIXParameters: void setPolicyMappingInhibited(boolean)>
<java.security.cert.PKIXParameters: void <init>(java.util.Set)>
<java.security.cert.PKIXParameters: java.security.cert.CertSelector getTargetCertConstraints()>
<java.security.cert.PKIXParameters: void <init>(java.security.KeyStore)>
<java.security.cert.PKIXParameters: java.util.List getCertStores()>
<java.security.cert.PKIXParameters: void setDate(java.util.Date)>
<java.security.cert.PKIXParameters: java.lang.String getSigProvider()>
<java.security.cert.PKIXParameters: void setAnyPolicyInhibited(boolean)>
<java.security.cert.PKIXParameters: void addCertPathChecker(java.security.cert.PKIXCertPathChecker)>
<java.security.cert.PKIXParameters: boolean isRevocationEnabled()>
<java.security.cert.PKIXParameters: boolean isAnyPolicyInhibited()>
<java.security.cert.PKIXParameters: boolean isPolicyMappingInhibited()>
<java.security.cert.PKIXParameters: void addCertStore(java.security.cert.CertStore)>
<java.security.cert.PKIXParameters: void setPolicyQualifiersRejected(boolean)>
<java.security.cert.PKIXParameters: void setTargetCertConstraints(java.security.cert.CertSelector)>
<java.security.cert.PKIXParameters: void setExplicitPolicyRequired(boolean)>
<java.security.cert.PKIXParameters: void setTrustAnchors(java.util.Set)>
<java.security.cert.PKIXParameters: boolean getPolicyQualifiersRejected()>
<java.security.cert.PKIXParameters: java.util.List getCertPathCheckers()>
<java.security.cert.PKIXParameters: void setRevocationEnabled(boolean)>
<java.security.cert.PKIXParameters: void setSigProvider(java.lang.String)>
<java.security.cert.PKIXParameters: java.util.Set getInitialPolicies()>
<java.security.cert.PKIXParameters: boolean isExplicitPolicyRequired()>
<java.security.cert.PKIXParameters: void setCertStores(java.util.List)>
<java.security.cert.PKIXParameters: java.lang.Object clone()>
<java.security.cert.PKIXParameters: void setCertPathCheckers(java.util.List)>
<java.security.cert.PKIXParameters: void setInitialPolicies(java.util.Set)>
<java.security.cert.PKIXParameters: java.util.Date getDate()>
<java.sql.SQLTransientConnectionException: void <init>(String,String,int)>
<java.sql.SQLTransientConnectionException: void <init>(String)>
<java.sql.SQLTransientConnectionException: void <init>(Throwable)>
<java.sql.SQLTransientConnectionException: void <init>(String,String,Throwable)>
<java.sql.SQLTransientConnectionException: void <init>(String,String)>
<java.sql.SQLTransientConnectionException: void <init>(String,String,int,Throwable)>
<java.sql.SQLTransientConnectionException: void <init>()>
<java.sql.SQLTransientConnectionException: void <init>(String,Throwable)>
<android.view.animation.BaseInterpolator: void <init>()>
<java.util.concurrent.ConcurrentLinkedDeque: boolean removeFirstOccurrence(java.lang.Object)>
<java.util.concurrent.ConcurrentLinkedDeque: E removeFirst()>
<java.util.concurrent.ConcurrentLinkedDeque: E removeLast()>
<java.util.concurrent.ConcurrentLinkedDeque: boolean removeLastOccurrence(java.lang.Object)>
<java.util.concurrent.ConcurrentLinkedDeque: E getFirst()>
<java.util.concurrent.ConcurrentLinkedDeque: E peek()>
<java.util.concurrent.ConcurrentLinkedDeque: boolean offerLast(E)>
<java.util.concurrent.ConcurrentLinkedDeque: E element()>
<java.util.concurrent.ConcurrentLinkedDeque: void push(E)>
<java.util.concurrent.ConcurrentLinkedDeque: E peekFirst()>
<java.util.concurrent.ConcurrentLinkedDeque: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentLinkedDeque: boolean offerFirst(E)>
<java.util.concurrent.ConcurrentLinkedDeque: boolean offer(E)>
<java.util.concurrent.ConcurrentLinkedDeque: java.util.Iterator descendingIterator()>
<java.util.concurrent.ConcurrentLinkedDeque: void <init>(java.util.Collection)>
<java.util.concurrent.ConcurrentLinkedDeque: void addFirst(E)>
<java.util.concurrent.ConcurrentLinkedDeque: E remove()>
<java.util.concurrent.ConcurrentLinkedDeque: E peekLast()>
<java.util.concurrent.ConcurrentLinkedDeque: E getLast()>
<java.util.concurrent.ConcurrentLinkedDeque: void <init>()>
<java.util.concurrent.ConcurrentLinkedDeque: E pop()>
<java.util.concurrent.ConcurrentLinkedDeque: void addLast(E)>
<java.util.concurrent.ConcurrentLinkedDeque: E pollLast()>
<java.util.concurrent.ConcurrentLinkedDeque: int size()>
<java.util.concurrent.ConcurrentLinkedDeque: E poll()>
<java.util.concurrent.ConcurrentLinkedDeque: E pollFirst()>
<javax.xml.parsers.FactoryConfigurationError: void <init>()>
<javax.xml.parsers.FactoryConfigurationError: Exception getException()>
<javax.xml.parsers.FactoryConfigurationError: void <init>(Exception,String)>
<javax.xml.parsers.FactoryConfigurationError: void <init>(String)>
<javax.xml.parsers.FactoryConfigurationError: void <init>(Exception)>
<java.util.function.Consumer: java.util.function.Consumer andThen(java.util.function.Consumer)>
<java.util.function.Consumer: void accept(T)>
<android.hardware.camera2.CameraManager.AvailabilityCallback: void onCameraAvailable(java.lang.String)>
<android.hardware.camera2.CameraManager.AvailabilityCallback: void onCameraUnavailable(java.lang.String)>
<android.hardware.camera2.CameraManager.AvailabilityCallback: void <init>()>
<android.hardware.camera2.CameraManager.AvailabilityCallback: void onCameraAccessPrioritiesChanged()>
<android.os.HandlerThread: void <init>(String,int)>
<android.os.HandlerThread: void onLooperPrepared()>
<android.os.HandlerThread: void <init>(String)>
<android.os.HandlerThread: android.os.Looper getLooper()>
<android.os.HandlerThread: boolean quit()>
<android.os.HandlerThread: int getThreadId()>
<android.os.HandlerThread: boolean quitSafely()>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverFields(java.time.temporal.TemporalField...)>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String)>
<java.time.format.DateTimeFormatter: java.time.temporal.TemporalQuery parsedLeapSecond()>
<java.time.format.DateTimeFormatter: java.text.Format toFormat(java.time.temporal.TemporalQuery)>
<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parse(CharSequence)>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDateTime(java.time.format.FormatStyle,java.time.format.FormatStyle)>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverFields(java.util.Set)>
<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parseBest(CharSequence,java.time.temporal.TemporalQuery...)>
<java.time.format.DateTimeFormatter: java.text.Format toFormat()>
<java.time.format.DateTimeFormatter: java.lang.String format(java.time.temporal.TemporalAccessor)>
<java.time.format.DateTimeFormatter: java.time.format.DecimalStyle getDecimalStyle()>
<java.time.format.DateTimeFormatter: java.time.chrono.Chronology getChronology()>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDate(java.time.format.FormatStyle)>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withLocale(java.util.Locale)>
<java.time.format.DateTimeFormatter: java.time.temporal.TemporalQuery parsedExcessDays()>
<java.time.format.DateTimeFormatter: java.util.Set getResolverFields()>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDateTime(java.time.format.FormatStyle)>
<java.time.format.DateTimeFormatter: java.time.ZoneId getZone()>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverStyle(java.time.format.ResolverStyle)>
<java.time.format.DateTimeFormatter: T parse(CharSequence,java.time.temporal.TemporalQuery)>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withDecimalStyle(java.time.format.DecimalStyle)>
<java.time.format.DateTimeFormatter: java.util.Locale getLocale()>
<java.time.format.DateTimeFormatter: java.time.format.ResolverStyle getResolverStyle()>
<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parseUnresolved(CharSequence,java.text.ParsePosition)>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String,java.util.Locale)>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withChronology(java.time.chrono.Chronology)>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withZone(java.time.ZoneId)>
<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedTime(java.time.format.FormatStyle)>
<java.time.format.DateTimeFormatter: void formatTo(java.time.temporal.TemporalAccessor,Appendable)>
<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parse(CharSequence,java.text.ParsePosition)>
<android.widget.TextSwitcher: void <init>(android.content.Context)>
<android.widget.TextSwitcher: void setText(CharSequence)>
<android.widget.TextSwitcher: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TextSwitcher: void setCurrentText(CharSequence)>
<android.app.slice.SliceProvider: void <init>()>
<android.app.slice.SliceProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.app.slice.SliceProvider: android.app.PendingIntent onCreatePermissionRequest(android.net.Uri)>
<android.app.slice.SliceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.app.slice.SliceProvider: void <init>(java.lang.String...)>
<android.app.slice.SliceProvider: android.app.slice.Slice onBindSlice(android.net.Uri,java.util.Set)>
<android.app.slice.SliceProvider: void onSlicePinned(android.net.Uri)>
<android.app.slice.SliceProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>
<android.app.slice.SliceProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.app.slice.SliceProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.app.slice.SliceProvider: void onSliceUnpinned(android.net.Uri)>
<android.app.slice.SliceProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.app.slice.SliceProvider: java.lang.String getType(android.net.Uri)>
<android.app.slice.SliceProvider: java.util.Collection onGetSliceDescendants(android.net.Uri)>
<android.app.slice.SliceProvider: android.net.Uri onMapIntentToUri(android.content.Intent)>
<android.app.ActivityTaskManager: void removeStacksWithActivityTypes(int[])>
<android.app.ActivityTaskManager: java.lang.String listAllStacks()>
<android.app.ActivityTaskManager: void resizeStack(int,android.graphics.Rect,boolean)>
<android.app.ActivityTaskManager: void startSystemLockTaskMode(int)>
<android.app.ActivityTaskManager: void setTaskWindowingModeSplitScreenPrimary(int,int,boolean,boolean,android.graphics.Rect,boolean)>
<android.app.ActivityTaskManager: void stopSystemLockTaskMode()>
<android.app.ActivityTaskManager: void resizeStack(int,android.graphics.Rect)>
<android.app.ActivityTaskManager: void resizeTask(int,android.graphics.Rect)>
<android.app.ActivityTaskManager: void setTaskWindowingMode(int,int,boolean)>
<android.app.ActivityTaskManager: void removeStacksInWindowingModes(int[])>
<android.app.ActivityTaskManager: void moveTaskToStack(int,int,boolean)>
<android.app.ActivityTaskManager: void setDisplayToSingleTaskInstance(int)>
<android.app.ActivityTaskManager: boolean supportsSplitScreenMultiWindow(android.content.Context)>
<android.app.ActivityTaskManager: void clearLaunchParamsForPackages(java.util.List)>
<android.app.ActivityTaskManager: boolean moveTopActivityToPinnedStack(int,android.graphics.Rect)>
<android.app.ActivityTaskManager: void resizeDockedStack(android.graphics.Rect,android.graphics.Rect)>
<android.app.ActivityTaskManager: boolean supportsMultiWindow(android.content.Context)>
<android.text.style.SuggestionSpan: void <init>(android.content.Context,String[],int)>
<android.text.style.SuggestionSpan: void setFlags(int)>
<android.text.style.SuggestionSpan: java.lang.String getLocale()>
<android.text.style.SuggestionSpan: void <init>(android.os.Parcel)>
<android.text.style.SuggestionSpan: java.util.Locale getLocaleObject()>
<android.text.style.SuggestionSpan: java.lang.String[] getSuggestions()>
<android.text.style.SuggestionSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.SuggestionSpan: void <init>(java.util.Locale,String[],int)>
<android.text.style.SuggestionSpan: int getFlags()>
<android.text.style.SuggestionSpan: int describeContents()>
<android.text.style.SuggestionSpan: void <init>(android.content.Context,java.util.Locale,String[],int,Class)>
<android.text.style.SuggestionSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.SuggestionSpan: int getSpanTypeId()>
<android.text.style.SuggestionSpan: int getUnderlineColor()>
<java.security.KeyPair: java.security.PublicKey getPublic()>
<java.security.KeyPair: java.security.PrivateKey getPrivate()>
<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>
<android.media.audiofx.EnvironmentalReverb.OnParameterChangeListener: void onParameterChange(android.media.audiofx.EnvironmentalReverb,int,int,int)>
<android.media.MediaPlayer.OnTimedTextListener: void onTimedText(android.media.MediaPlayer,android.media.TimedText)>
<android.os.NetworkOnMainThreadException: void <init>()>
<android.hardware.camera2.params.LensShadingMap: void copyGainFactors(float[],int)>
<android.hardware.camera2.params.LensShadingMap: int getGainFactorCount()>
<android.hardware.camera2.params.LensShadingMap: int getColumnCount()>
<android.hardware.camera2.params.LensShadingMap: int getRowCount()>
<android.hardware.camera2.params.LensShadingMap: float getGainFactor(int,int,int)>
<android.hardware.camera2.params.LensShadingMap: android.hardware.camera2.params.RggbChannelVector getGainFactorVector(int,int)>
<android.text.Selection: boolean extendLeft(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean moveRight(android.text.Spannable,android.text.Layout)>
<android.text.Selection: int getSelectionEnd(CharSequence)>
<android.text.Selection: boolean moveToLeftEdge(android.text.Spannable,android.text.Layout)>
<android.text.Selection: void removeSelection(android.text.Spannable)>
<android.text.Selection: int getSelectionStart(CharSequence)>
<android.text.Selection: void setSelection(android.text.Spannable,int,int)>
<android.text.Selection: boolean moveDown(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean extendRight(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean moveToRightEdge(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean extendUp(android.text.Spannable,android.text.Layout)>
<android.text.Selection: void setSelection(android.text.Spannable,int)>
<android.text.Selection: boolean extendToLeftEdge(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean moveUp(android.text.Spannable,android.text.Layout)>
<android.text.Selection: void selectAll(android.text.Spannable)>
<android.text.Selection: boolean extendToRightEdge(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean extendDown(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean moveLeft(android.text.Spannable,android.text.Layout)>
<android.text.Selection: void extendSelection(android.text.Spannable,int)>
<java.util.concurrent.atomic.AtomicReferenceArray: E accumulateAndGet(int,E,java.util.function.BinaryOperator)>
<java.util.concurrent.atomic.AtomicReferenceArray: int length()>
<java.util.concurrent.atomic.AtomicReferenceArray: boolean weakCompareAndSet(int,E,E)>
<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,E)>
<java.util.concurrent.atomic.AtomicReferenceArray: E get(int)>
<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>
<java.util.concurrent.atomic.AtomicReferenceArray: E updateAndGet(int,java.util.function.UnaryOperator)>
<java.util.concurrent.atomic.AtomicReferenceArray: E getAndUpdate(int,java.util.function.UnaryOperator)>
<java.util.concurrent.atomic.AtomicReferenceArray: void lazySet(int,E)>
<java.util.concurrent.atomic.AtomicReferenceArray: E getAndSet(int,E)>
<java.util.concurrent.atomic.AtomicReferenceArray: boolean compareAndSet(int,E,E)>
<java.util.concurrent.atomic.AtomicReferenceArray: E getAndAccumulate(int,E,java.util.function.BinaryOperator)>
<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(E[])>
<android.net.nsd.NsdManager.ResolveListener: void onServiceResolved(android.net.nsd.NsdServiceInfo)>
<android.net.nsd.NsdManager.ResolveListener: void onResolveFailed(android.net.nsd.NsdServiceInfo,int)>
<android.service.euicc.EuiccService.OtaStatusChangedCallback: void onOtaStatusChanged(int)>
<android.service.euicc.EuiccService.OtaStatusChangedCallback: void <init>()>
<android.view.textservice.SpellCheckerSession.SpellCheckerSessionListener: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])>
<android.view.textservice.SpellCheckerSession.SpellCheckerSessionListener: void onGetSentenceSuggestions(android.view.textservice.SentenceSuggestionsInfo[])>
<android.icu.text.LocaleDisplayNames.UiListItem: void <init>(android.icu.util.ULocale,android.icu.util.ULocale,String,String)>
<android.icu.text.LocaleDisplayNames.UiListItem: java.util.Comparator getComparator(java.util.Comparator,boolean)>
<android.widget.ExpandableListView.OnChildClickListener: boolean onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)>
<android.os.Looper: void setMessageLogging(android.util.Printer)>
<android.os.Looper: void quit()>
<android.os.Looper: android.os.MessageQueue myQueue()>
<android.os.Looper: void quitSafely()>
<android.os.Looper: android.os.MessageQueue getQueue()>
<android.os.Looper: void prepareMainLooper()>
<android.os.Looper: void dump(android.util.Printer,java.lang.String)>
<android.os.Looper: java.lang.Thread getThread()>
<android.os.Looper: void loop()>
<android.os.Looper: void prepare()>
<android.os.Looper: boolean isCurrentThread()>
<android.os.Looper: android.os.Looper myLooper()>
<android.os.Looper: android.os.Looper getMainLooper()>
<android.text.Editable.Factory: void <init>()>
<android.text.Editable.Factory: android.text.Editable newEditable(CharSequence)>
<android.text.Editable.Factory: android.text.Editable.Factory getInstance()>
<java.nio.file.Watchable: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind...)>
<java.nio.file.Watchable: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind[],java.nio.file.WatchEvent.Modifier...)>
<android.net.Uri.Builder: android.net.Uri.Builder encodedAuthority(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder encodedOpaquePart(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder encodedFragment(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder clearQuery()>
<android.net.Uri.Builder: android.net.Uri.Builder encodedPath(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder path(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder encodedQuery(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder query(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder opaquePart(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder scheme(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder authority(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder fragment(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder appendPath(java.lang.String)>
<android.net.Uri.Builder: android.net.Uri.Builder appendQueryParameter(java.lang.String,java.lang.String)>
<android.net.Uri.Builder: android.net.Uri build()>
<android.net.Uri.Builder: android.net.Uri.Builder appendEncodedPath(java.lang.String)>
<android.net.Uri.Builder: void <init>()>
<android.preference.PreferenceManager.OnActivityResultListener: boolean onActivityResult(int,int,android.content.Intent)>
<org.w3c.dom.DOMImplementation: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,org.w3c.dom.DocumentType)>
<org.w3c.dom.DOMImplementation: org.w3c.dom.DocumentType createDocumentType(java.lang.String,java.lang.String,java.lang.String)>
<org.w3c.dom.DOMImplementation: java.lang.Object getFeature(java.lang.String,java.lang.String)>
<org.w3c.dom.DOMImplementation: boolean hasFeature(java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: void removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>
<android.accounts.AccountManager: boolean removeAccountExplicitly(android.accounts.Account)>
<android.accounts.AccountManager: java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture startAddAccountSession(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture finishSession(android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture startUpdateCredentialsSession(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)>
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture finishSessionAsUser(android.os.Bundle,android.app.Activity,android.os.UserHandle,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture isCredentialsUpdateSuggested(android.accounts.Account,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.util.Map getAccountsAndVisibilityForPackage(java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()>
<android.accounts.AccountManager: void clearPassword(android.accounts.Account)>
<android.accounts.AccountManager: int getAccountVisibility(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.List,java.lang.String[],java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.accounts.AccountManager: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture renameAccount(android.accounts.Account,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean,java.lang.String[])>
<android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.ArrayList,java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)>
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.lang.String getPreviousName(android.accounts.Account)>
<android.accounts.AccountManager: boolean notifyAccountAuthenticated(android.accounts.Account)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<java.util.EnumMap: java.util.EnumMap clone()>
<java.util.EnumMap: void <init>(Class)>
<java.util.EnumMap: java.util.Set entrySet()>
<java.util.EnumMap: void <init>(java.util.EnumMap)>
<java.util.EnumMap: void <init>(java.util.Map)>
<android.view.SurfaceHolder.BadSurfaceTypeException: void <init>(String)>
<android.view.SurfaceHolder.BadSurfaceTypeException: void <init>()>
<android.telecom.VideoProfile.CameraCapabilities: int getWidth()>
<android.telecom.VideoProfile.CameraCapabilities: int getHeight()>
<android.telecom.VideoProfile.CameraCapabilities: boolean isZoomSupported()>
<android.telecom.VideoProfile.CameraCapabilities: void <init>(from=1.0f) float)>
<android.telecom.VideoProfile.CameraCapabilities: int describeContents()>
<android.telecom.VideoProfile.CameraCapabilities: void <init>(from=0) int)>
<android.telecom.VideoProfile.CameraCapabilities: float getMaxZoom()>
<android.telecom.VideoProfile.CameraCapabilities: void writeToParcel(android.os.Parcel,int)>
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)>
<java.lang.Runtime: void loadLibrary(java.lang.String)>
<java.lang.Runtime: java.lang.Process exec(java.lang.String)>
<java.lang.Runtime: java.lang.Runtime getRuntime()>
<java.lang.Runtime: void runFinalizersOnExit(boolean)>
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[])>
<java.lang.Runtime: void runFinalization()>
<java.lang.Runtime: void traceInstructions(boolean)>
<java.lang.Runtime: long freeMemory()>
<java.lang.Runtime: void traceMethodCalls(boolean)>
<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)>
<java.lang.Runtime: java.io.OutputStream getLocalizedOutputStream(java.io.OutputStream)>
<java.lang.Runtime: boolean removeShutdownHook(java.lang.Thread)>
<java.lang.Runtime: void exit(int)>
<java.lang.Runtime: java.io.InputStream getLocalizedInputStream(java.io.InputStream)>
<java.lang.Runtime: long totalMemory()>
<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>
<java.lang.Runtime: void halt(int)>
<java.lang.Runtime: void load(java.lang.String)>
<java.lang.Runtime: long maxMemory()>
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[])>
<java.lang.Runtime: int availableProcessors()>
<java.lang.Runtime: void gc()>
<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>
<javax.crypto.spec.DHParameterSpec: int getL()>
<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>
<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,int)>
<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>
<android.view.ScaleGestureDetector: float getCurrentSpanY()>
<android.view.ScaleGestureDetector: long getEventTime()>
<android.view.ScaleGestureDetector: float getCurrentSpanX()>
<android.view.ScaleGestureDetector: float getFocusX()>
<android.view.ScaleGestureDetector: float getFocusY()>
<android.view.ScaleGestureDetector: float getCurrentSpan()>
<android.view.ScaleGestureDetector: void <init>(android.content.Context,android.view.ScaleGestureDetector.OnScaleGestureListener,android.os.Handler)>
<android.view.ScaleGestureDetector: boolean isStylusScaleEnabled()>
<android.view.ScaleGestureDetector: void setQuickScaleEnabled(boolean)>
<android.view.ScaleGestureDetector: void <init>(android.content.Context,android.view.ScaleGestureDetector.OnScaleGestureListener)>
<android.view.ScaleGestureDetector: boolean isInProgress()>
<android.view.ScaleGestureDetector: float getScaleFactor()>
<android.view.ScaleGestureDetector: float getPreviousSpan()>
<android.view.ScaleGestureDetector: float getPreviousSpanY()>
<android.view.ScaleGestureDetector: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.ScaleGestureDetector: float getPreviousSpanX()>
<android.view.ScaleGestureDetector: void setStylusScaleEnabled(boolean)>
<android.view.ScaleGestureDetector: boolean isQuickScaleEnabled()>
<android.view.ScaleGestureDetector: long getTimeDelta()>
<android.inputmethodservice.Keyboard.Key: int squaredDistanceFrom(int,int)>
<android.inputmethodservice.Keyboard.Key: void onPressed()>
<android.inputmethodservice.Keyboard.Key: int[] getCurrentDrawableState()>
<android.inputmethodservice.Keyboard.Key: void <init>(android.content.res.Resources,android.inputmethodservice.Keyboard.Row,int,int,android.content.res.XmlResourceParser)>
<android.inputmethodservice.Keyboard.Key: void <init>(android.inputmethodservice.Keyboard.Row)>
<android.inputmethodservice.Keyboard.Key: boolean isInside(int,int)>
<android.inputmethodservice.Keyboard.Key: void onReleased(boolean)>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceInfo: android.net.wifi.p2p.nsd.WifiP2pUpnpServiceInfo newInstance(java.lang.String,java.lang.String,java.util.List)>
<android.provider.MediaStore.Audio.Playlists: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore.Audio.Playlists: void <init>()>
<android.telephony.SubscriptionManager.OnSubscriptionsChangedListener: void <init>()>
<android.telephony.SubscriptionManager.OnSubscriptionsChangedListener: void onSubscriptionsChanged()>
<android.graphics.RecordingCanvas: void drawPatch(android.graphics.NinePatch,android.graphics.Rect,android.graphics.Paint)>
<android.graphics.RecordingCanvas: void drawPatch(android.graphics.NinePatch,android.graphics.RectF,android.graphics.Paint)>
<android.telephony.CellSignalStrength: int hashCode()>
<android.telephony.CellSignalStrength: int getLevel()>
<android.telephony.CellSignalStrength: int getAsuLevel()>
<android.telephony.CellSignalStrength: boolean equals(java.lang.Object)>
<android.telephony.CellSignalStrength: int getDbm()>
<android.content.RestrictionEntry: java.lang.String getKey()>
<android.content.RestrictionEntry: void writeToParcel(android.os.Parcel,int)>
<android.content.RestrictionEntry: int getIntValue()>
<android.content.RestrictionEntry: void setSelectedState(boolean)>
<android.content.RestrictionEntry: boolean getSelectedState()>
<android.content.RestrictionEntry: void <init>(String,String)>
<android.content.RestrictionEntry: java.lang.String getTitle()>
<android.content.RestrictionEntry: int getType()>
<android.content.RestrictionEntry: void setSelectedString(java.lang.String)>
<android.content.RestrictionEntry: void setTitle(java.lang.String)>
<android.content.RestrictionEntry: void <init>(String,int)>
<android.content.RestrictionEntry: void setAllSelectedStrings(java.lang.String[])>
<android.content.RestrictionEntry: int describeContents()>
<android.content.RestrictionEntry: android.content.RestrictionEntry[] getRestrictions()>
<android.content.RestrictionEntry: java.lang.String getDescription()>
<android.content.RestrictionEntry: android.content.RestrictionEntry createBundleArrayEntry(java.lang.String,android.content.RestrictionEntry[])>
<android.content.RestrictionEntry: java.lang.String[] getAllSelectedStrings()>
<android.content.RestrictionEntry: java.lang.String[] getChoiceValues()>
<android.content.RestrictionEntry: void setChoiceEntries(java.lang.String[])>
<android.content.RestrictionEntry: void setChoiceEntries(android.content.Context,@ArrayResint)>
<android.content.RestrictionEntry: void setChoiceValues(java.lang.String[])>
<android.content.RestrictionEntry: void setRestrictions(android.content.RestrictionEntry[])>
<android.content.RestrictionEntry: void <init>(String,String[])>
<android.content.RestrictionEntry: void <init>(android.os.Parcel)>
<android.content.RestrictionEntry: void setChoiceValues(android.content.Context,@ArrayResint)>
<android.content.RestrictionEntry: void <init>(int,String)>
<android.content.RestrictionEntry: java.lang.String[] getChoiceEntries()>
<android.content.RestrictionEntry: android.content.RestrictionEntry createBundleEntry(java.lang.String,android.content.RestrictionEntry[])>
<android.content.RestrictionEntry: void setType(int)>
<android.content.RestrictionEntry: void setIntValue(int)>
<android.content.RestrictionEntry: void setDescription(java.lang.String)>
<android.content.RestrictionEntry: java.lang.String getSelectedString()>
<android.content.RestrictionEntry: void <init>(String,boolean)>
<android.sax.StartElementListener: void start(org.xml.sax.Attributes)>
<android.app.Notification.Action.Builder: android.app.Notification.Action.Builder setContextual(boolean)>
<android.app.Notification.Action.Builder: void <init>(android.graphics.drawable.Icon,CharSequence,android.app.PendingIntent)>
<android.app.Notification.Action.Builder: void <init>(android.app.Notification.Action)>
<android.app.Notification.Action.Builder: android.app.Notification.Action.Builder addRemoteInput(android.app.RemoteInput)>
<android.app.Notification.Action.Builder: void <init>(int,CharSequence,android.app.PendingIntent)>
<android.app.Notification.Action.Builder: android.app.Notification.Action.Builder setAllowGeneratedReplies(boolean)>
<android.app.Notification.Action.Builder: android.app.Notification.Action.Builder addExtras(android.os.Bundle)>
<android.app.Notification.Action.Builder: android.app.Notification.Action build()>
<android.app.Notification.Action.Builder: android.app.Notification.Action.Builder setSemanticAction(int)>
<android.app.Notification.Action.Builder: android.app.Notification.Action.Builder extend(android.app.Notification.Action.Extender)>
<android.app.Notification.Action.Builder: android.os.Bundle getExtras()>
<android.media.MediaPlayer.OnCompletionListener: void onCompletion(android.media.MediaPlayer)>
<android.transition.PathMotion: android.graphics.Path getPath(float,float,float,float)>
<android.transition.PathMotion: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.PathMotion: void <init>()>
<android.hardware.radio.ProgramSelector.Identifier: void <init>(@android.hardware.radio.ProgramSelector.IdentifierType int,long)>
<android.hardware.radio.ProgramSelector.Identifier: long getValue()>
<android.hardware.radio.ProgramSelector.Identifier: void writeToParcel(android.os.Parcel,int)>
<android.hardware.radio.ProgramSelector.Identifier: int describeContents()>
<android.hardware.radio.ProgramSelector.Identifier: int getType()>
<android.media.tv.TvInputHardwareInfo: int getCableConnectionStatus()>
<android.media.tv.TvInputHardwareInfo: void readFromParcel(android.os.Parcel)>
<android.media.tv.TvInputHardwareInfo: java.lang.String getAudioAddress()>
<android.media.tv.TvInputHardwareInfo: int describeContents()>
<android.media.tv.TvInputHardwareInfo: int getHdmiPortId()>
<android.media.tv.TvInputHardwareInfo: void writeToParcel(android.os.Parcel,int)>
<android.media.tv.TvInputHardwareInfo: int getAudioType()>
<android.media.tv.TvInputHardwareInfo: int getDeviceId()>
<android.media.tv.TvInputHardwareInfo: int getType()>
<android.text.method.QwertyKeyListener: android.text.method.QwertyKeyListener getInstanceForFullKeyboard()>
<android.text.method.QwertyKeyListener: int getInputType()>
<android.text.method.QwertyKeyListener: android.text.method.QwertyKeyListener getInstance(boolean,android.text.method.TextKeyListener.Capitalize)>
<android.text.method.QwertyKeyListener: void <init>(android.text.method.TextKeyListener.Capitalize,boolean)>
<android.text.method.QwertyKeyListener: void markAsReplaced(android.text.Spannable,int,int,java.lang.String)>
<android.media.tv.TvRecordingClient.RecordingCallback: void onError(int)>
<android.media.tv.TvRecordingClient.RecordingCallback: void onTuned(android.net.Uri)>
<android.media.tv.TvRecordingClient.RecordingCallback: void onDisconnected(java.lang.String)>
<android.media.tv.TvRecordingClient.RecordingCallback: void <init>()>
<android.media.tv.TvRecordingClient.RecordingCallback: void onConnectionFailed(java.lang.String)>
<android.media.tv.TvRecordingClient.RecordingCallback: void onRecordingStopped(android.net.Uri)>
<android.media.tv.TvRecordingClient.RecordingCallback: void onEvent(java.lang.String,java.lang.String,android.os.Bundle)>
<android.app.ActivityView: void <init>(android.content.Context)>
<android.app.ActivityView: void onLocationChanged()>
<android.app.ActivityView: void startActivity(android.app.PendingIntent)>
<android.app.ActivityView: void performBackPress()>
<android.app.ActivityView: int getVirtualDisplayId()>
<android.app.ActivityView: void onLayout(boolean,int,int,int,int)>
<android.app.ActivityView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)>
<android.app.ActivityView: void startActivity(android.content.Intent)>
<android.app.ActivityView: void release()>
<android.app.ActivityView: void startActivity(android.content.Intent,android.os.UserHandle)>
<android.app.ActivityView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.app.ActivityView: void setForwardedInsets(android.graphics.Insets)>
<android.app.ActivityView: void startActivity(android.app.PendingIntent,android.app.ActivityOptions)>
<android.app.ActivityView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.app.ActivityView: void setCallback(android.app.ActivityView.StateCallback)>
<android.graphics.drawable.AnimatedVectorDrawable: void setAlpha(int)>
<android.graphics.drawable.AnimatedVectorDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.AnimatedVectorDrawable: void reset()>
<android.graphics.drawable.AnimatedVectorDrawable: void stop()>
<android.graphics.drawable.AnimatedVectorDrawable: void clearAnimationCallbacks()>
<android.graphics.drawable.AnimatedVectorDrawable: void registerAnimationCallback(android.graphics.drawable.Animatable2.AnimationCallback)>
<android.graphics.drawable.AnimatedVectorDrawable: boolean unregisterAnimationCallback(android.graphics.drawable.Animatable2.AnimationCallback)>
<android.graphics.drawable.AnimatedVectorDrawable: int getOpacity()>
<android.graphics.drawable.AnimatedVectorDrawable: boolean isRunning()>
<android.graphics.drawable.AnimatedVectorDrawable: void <init>()>
<android.graphics.drawable.AnimatedVectorDrawable: void start()>
<android.graphics.drawable.AnimatedVectorDrawable: void draw(android.graphics.Canvas)>
<android.provider.ContactsContract.Groups: android.content.EntityIterator newEntityIterator(android.database.Cursor)>
<android.os.Parcel: android.os.Parcel obtain()>
<android.os.Parcel: android.util.ArrayMap createTypedArrayMap(android.os.Parcelable.Creator)>
<android.os.Parcel: java.util.List readParcelableList(java.util.List,java.lang.ClassLoader)>
<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)>
<android.os.Parcel: void writeString(java.lang.String)>
<android.os.Parcel: boolean hasFileDescriptors()>
<android.os.Parcel: void readFloatArray(float[])>
<android.os.Parcel: void readBinderList(java.util.List)>
<android.os.Parcel: java.io.Serializable readSerializable()>
<android.os.Parcel: void writeTypedList(java.util.List)>
<android.os.Parcel: void writeFloat(float)>
<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)>
<android.os.Parcel: android.util.SizeF readSizeF()>
<android.os.Parcel: void writeTypedSparseArray(android.util.SparseArray,int)>
<android.os.Parcel: void appendFrom(android.os.Parcel,int,int)>
<android.os.Parcel: java.util.ArrayList createStringArrayList()>
<android.os.Parcel: void readStringArray(java.lang.String[])>
<android.os.Parcel: int readExceptionCode()>
<android.os.Parcel: android.util.Size readSize()>
<android.os.Parcel: void writeMap(java.util.Map)>
<android.os.Parcel: void writeDoubleArray(double[])>
<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)>
<android.os.Parcel: void writeByteArray(byte[])>
<android.os.Parcel: java.util.ArrayList createBinderArrayList()>
<android.os.Parcel: void writeByte(byte)>
<android.os.Parcel: void recycle()>
<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>
<android.os.Parcel: void writeIntArray(int[])>
<android.os.Parcel: void readDoubleArray(double[])>
<android.os.Parcel: void writeBinderList(java.util.List)>
<android.os.Parcel: double[] createDoubleArray()>
<android.os.Parcel: void writeTypedObject(T,int)>
<android.os.Parcel: void writeException(Exception)>
<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>
<android.os.Parcel: void writeTypedArray(T[],int)>
<android.os.Parcel: int dataPosition()>
<android.os.Parcel: int readInt()>
<android.os.Parcel: float readFloat()>
<android.os.Parcel: void readByteArray(byte[])>
<android.os.Parcel: void readTypedArray(T[],android.os.Parcelable.Creator)>
<android.os.Parcel: java.lang.String readString()>
<android.os.Parcel: void readStringList(java.util.List)>
<android.os.Parcel: void writeInterfaceToken(java.lang.String)>
<android.os.Parcel: void writeParcelableList(java.util.List,int)>
<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)>
<android.os.Parcel: boolean[] createBooleanArray()>
<android.os.Parcel: byte[] createByteArray()>
<android.os.Parcel: void writeList(java.util.List)>
<android.os.Parcel: void enforceInterface(java.lang.String)>
<android.os.Parcel: android.util.SparseArray createTypedSparseArray(android.os.Parcelable.Creator)>
<android.os.Parcel: void readIntArray(int[])>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.os.Parcel: long[] createLongArray()>
<android.os.Parcel: void writeSparseArray(android.util.SparseArray)>
<android.os.Parcel: void writeLong(long)>
<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)>
<android.os.Parcel: android.os.PersistableBundle readPersistableBundle()>
<android.os.Parcel: byte readByte()>
<android.os.Parcel: void readLongArray(long[])>
<android.os.Parcel: T readParcelable(java.lang.ClassLoader)>
<android.os.Parcel: long readLong()>
<android.os.Parcel: void setDataPosition(int)>
<android.os.Parcel: void writeDouble(double)>
<android.os.Parcel: void readException()>
<android.os.Parcel: void writeSerializable(java.io.Serializable)>
<android.os.Parcel: int[] createIntArray()>
<android.os.Parcel: T[] createTypedArray(android.os.Parcelable.Creator)>
<android.os.Parcel: void writeCharArray(char[])>
<android.os.Parcel: void writeValue(java.lang.Object)>
<android.os.Parcel: void writeStringArray(java.lang.String[])>
<android.os.Parcel: void writeInt(int)>
<android.os.Parcel: void unmarshall(byte[],int,int)>
<android.os.Parcel: void writeSize(android.util.Size)>
<android.os.Parcel: void writeSizeF(android.util.SizeF)>
<android.os.Parcel: void setDataSize(int)>
<android.os.Parcel: void setDataCapacity(int)>
<android.os.Parcel: double readDouble()>
<android.os.Parcel: int dataSize()>
<android.os.Parcel: void writeBinderArray(android.os.IBinder[])>
<android.os.Parcel: void writeLongArray(long[])>
<android.os.Parcel: void readBooleanArray(boolean[])>
<android.os.Parcel: void writeTypedArrayMap(android.util.ArrayMap,int)>
<android.os.Parcel: void writeByteArray(byte[],int,int)>
<android.os.Parcel: void writeParcelableArray(T[],int)>
<android.os.Parcel: void writeFloatArray(float[])>
<android.os.Parcel: java.lang.String[] createStringArray()>
<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)>
<android.os.Parcel: void writeArray(java.lang.Object[])>
<android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)>
<android.os.Parcel: void writePersistableBundle(android.os.PersistableBundle)>
<android.os.Parcel: void readCharArray(char[])>
<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>
<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>
<android.os.Parcel: void writeBoolean(boolean)>
<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)>
<android.os.Parcel: android.os.IBinder readStrongBinder()>
<android.os.Parcel: byte[] marshall()>
<android.os.Parcel: void readBinderArray(android.os.IBinder[])>
<android.os.Parcel: android.os.IBinder[] createBinderArray()>
<android.os.Parcel: boolean readBoolean()>
<android.os.Parcel: float[] createFloatArray()>
<android.os.Parcel: int dataAvail()>
<android.os.Parcel: void readException(int,java.lang.String)>
<android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable.Creator)>
<android.os.Parcel: android.os.Bundle readBundle()>
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>
<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()>
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable.Creator)>
<android.os.Parcel: char[] createCharArray()>
<android.os.Parcel: int dataCapacity()>
<android.os.Parcel: void writeStringList(java.util.List)>
<android.os.Parcel: void readMap(java.util.Map,java.lang.ClassLoader)>
<android.os.Parcel: void writeNoException()>
<android.os.Parcel: T readTypedObject(android.os.Parcelable.Creator)>
<android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)>
<android.os.Parcel: void writeBooleanArray(boolean[])>
<android.os.Parcel: android.os.PersistableBundle readPersistableBundle(java.lang.ClassLoader)>
<java.util.InvalidPropertiesFormatException: void <init>(String)>
<java.util.InvalidPropertiesFormatException: void <init>(Throwable)>
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder setPort(int)>
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: void <init>(android.net.wifi.aware.DiscoverySession,android.net.wifi.aware.PeerHandle)>
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: android.net.wifi.aware.WifiAwareNetworkSpecifier build()>
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder setPmk(byte[])>
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder setPskPassphrase(java.lang.String)>
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder setTransportProtocol(int)>
<android.net.http.HttpResponseCache: android.net.http.HttpResponseCache install(java.io.File,long)>
<android.net.http.HttpResponseCache: java.net.CacheRequest put(java.net.URI,java.net.URLConnection)>
<android.net.http.HttpResponseCache: int getNetworkCount()>
<android.net.http.HttpResponseCache: long size()>
<android.net.http.HttpResponseCache: void close()>
<android.net.http.HttpResponseCache: java.net.CacheResponse get(java.net.URI,java.lang.String,java.util.Map)>
<android.net.http.HttpResponseCache: int getHitCount()>
<android.net.http.HttpResponseCache: long maxSize()>
<android.net.http.HttpResponseCache: void flush()>
<android.net.http.HttpResponseCache: int getRequestCount()>
<android.net.http.HttpResponseCache: void delete()>
<android.net.http.HttpResponseCache: android.net.http.HttpResponseCache getInstalled()>
<java.util.function.ToIntBiFunction: int applyAsInt(T,U)>
<android.os.VibrationEffect: android.os.VibrationEffect createWaveform(long[],int)>
<android.os.VibrationEffect: android.os.VibrationEffect get(android.net.Uri,android.content.Context)>
<android.os.VibrationEffect: android.os.VibrationEffect createWaveform(long[],int[],int)>
<android.os.VibrationEffect: long getDuration()>
<android.os.VibrationEffect: android.os.VibrationEffect createPredefined(int)>
<android.os.VibrationEffect: int scale(int,float,int)>
<android.os.VibrationEffect: android.os.VibrationEffect get(int,boolean)>
<android.os.VibrationEffect: android.os.VibrationEffect get(int)>
<android.os.VibrationEffect: android.os.VibrationEffect createOneShot(long,int)>
<android.os.VibrationEffect: int describeContents()>
<android.media.MediaPlayer.OnSubtitleDataListener: void onSubtitleData(android.media.MediaPlayer,android.media.SubtitleData)>
<java.lang.reflect.Parameter: boolean isVarArgs()>
<java.lang.reflect.Parameter: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.reflect.Parameter: int getModifiers()>
<java.lang.reflect.Parameter: java.lang.Class getType()>
<java.lang.reflect.Parameter: java.lang.annotation.Annotation[] getAnnotations()>
<java.lang.reflect.Parameter: T getAnnotation(java.lang.Class)>
<java.lang.reflect.Parameter: java.lang.reflect.Type getParameterizedType()>
<java.lang.reflect.Parameter: boolean isImplicit()>
<java.lang.reflect.Parameter: java.lang.String getName()>
<java.lang.reflect.Parameter: boolean isNamePresent()>
<java.lang.reflect.Parameter: java.lang.reflect.Executable getDeclaringExecutable()>
<java.lang.reflect.Parameter: boolean isSynthetic()>
<android.hardware.hdmi.HdmiTimerRecordSources: android.hardware.hdmi.HdmiTimerRecordSources.TimerRecordSource ofDigitalSource(android.hardware.hdmi.HdmiTimerRecordSources.TimerInfo,android.hardware.hdmi.HdmiRecordSources.DigitalServiceSource)>
<android.hardware.hdmi.HdmiTimerRecordSources: android.hardware.hdmi.HdmiTimerRecordSources.TimerInfo timerInfoOf(int,int,android.hardware.hdmi.HdmiTimerRecordSources.Time,android.hardware.hdmi.HdmiTimerRecordSources.Duration,int)>
<android.hardware.hdmi.HdmiTimerRecordSources: android.hardware.hdmi.HdmiTimerRecordSources.TimerRecordSource ofExternalPhysicalAddress(android.hardware.hdmi.HdmiTimerRecordSources.TimerInfo,android.hardware.hdmi.HdmiRecordSources.ExternalPhysicalAddress)>
<android.hardware.hdmi.HdmiTimerRecordSources: android.hardware.hdmi.HdmiTimerRecordSources.Duration durationOf(int,int)>
<android.hardware.hdmi.HdmiTimerRecordSources: android.hardware.hdmi.HdmiTimerRecordSources.TimerRecordSource ofAnalogueSource(android.hardware.hdmi.HdmiTimerRecordSources.TimerInfo,android.hardware.hdmi.HdmiRecordSources.AnalogueServiceSource)>
<android.hardware.hdmi.HdmiTimerRecordSources: android.hardware.hdmi.HdmiTimerRecordSources.Time timeOf(int,int)>
<android.hardware.hdmi.HdmiTimerRecordSources: boolean checkTimerRecordSource(int,byte[])>
<android.hardware.hdmi.HdmiTimerRecordSources: android.hardware.hdmi.HdmiTimerRecordSources.TimerRecordSource ofExternalPlug(android.hardware.hdmi.HdmiTimerRecordSources.TimerInfo,android.hardware.hdmi.HdmiRecordSources.ExternalPlugData)>
<android.telephony.data.DataCallResponse: java.util.List getGatewayAddresses()>
<android.telephony.data.DataCallResponse: int getSuggestedRetryTime()>
<android.telephony.data.DataCallResponse: java.util.List getDnsAddresses()>
<android.telephony.data.DataCallResponse: int describeContents()>
<android.telephony.data.DataCallResponse: int getLinkStatus()>
<android.telephony.data.DataCallResponse: void writeToParcel(android.os.Parcel,int)>
<android.telephony.data.DataCallResponse: int getCause()>
<android.telephony.data.DataCallResponse: java.lang.String getInterfaceName()>
<android.telephony.data.DataCallResponse: java.util.List getAddresses()>
<android.telephony.data.DataCallResponse: int getId()>
<android.telephony.data.DataCallResponse: int getMtu()>
<android.telephony.data.DataCallResponse: int getProtocolType()>
<android.telephony.data.DataCallResponse: java.util.List getPcscfAddresses()>
<android.view.inspector.StaticInspectionCompanionProvider: android.view.inspector.InspectionCompanion provide(java.lang.Class)>
<android.view.inspector.StaticInspectionCompanionProvider: void <init>()>
<android.os.StrictMode.ViolationInfo: java.lang.Class getViolationClass()>
<android.os.StrictMode.ViolationInfo: void dump(android.util.Printer,java.lang.String)>
<android.os.StrictMode.ViolationInfo: void <init>(android.os.Parcel)>
<android.os.StrictMode.ViolationInfo: java.lang.String getStackTrace()>
<android.os.StrictMode.ViolationInfo: int describeContents()>
<android.os.StrictMode.ViolationInfo: void writeToParcel(android.os.Parcel,int)>
<android.os.StrictMode.ViolationInfo: void <init>(android.os.Parcel,boolean)>
<android.os.StrictMode.ViolationInfo: java.lang.String getViolationDetails()>
<android.hardware.Camera.Parameters: void setGpsLatitude(double)>
<android.hardware.Camera.Parameters: boolean getAutoExposureLock()>
<android.hardware.Camera.Parameters: java.util.List getSupportedSceneModes()>
<android.hardware.Camera.Parameters: java.lang.String getFocusMode()>
<android.hardware.Camera.Parameters: java.util.List getSupportedPictureFormats()>
<android.hardware.Camera.Parameters: void setGpsTimestamp(long)>
<android.hardware.Camera.Parameters: java.util.List getZoomRatios()>
<android.hardware.Camera.Parameters: boolean isVideoSnapshotSupported()>
<android.hardware.Camera.Parameters: android.hardware.Camera.Size getPreferredPreviewSizeForVideo()>
<android.hardware.Camera.Parameters: java.lang.String getColorEffect()>
<android.hardware.Camera.Parameters: void setGpsLongitude(double)>
<android.hardware.Camera.Parameters: boolean isZoomSupported()>
<android.hardware.Camera.Parameters: java.util.List getSupportedPreviewFrameRates()>
<android.hardware.Camera.Parameters: void setFlashMode(java.lang.String)>
<android.hardware.Camera.Parameters: java.lang.String getAntibanding()>
<android.hardware.Camera.Parameters: void setJpegQuality(int)>
<android.hardware.Camera.Parameters: void setPreviewSize(int,int)>
<android.hardware.Camera.Parameters: void unflatten(java.lang.String)>
<android.hardware.Camera.Parameters: int getInt(java.lang.String)>
<android.hardware.Camera.Parameters: void setPreviewFormat(int)>
<android.hardware.Camera.Parameters: void setFocusMode(java.lang.String)>
<android.hardware.Camera.Parameters: int getMaxNumMeteringAreas()>
<android.hardware.Camera.Parameters: android.hardware.Camera.Size getPreviewSize()>
<android.hardware.Camera.Parameters: void setZoom(int)>
<android.hardware.Camera.Parameters: void setAntibanding(java.lang.String)>
<android.hardware.Camera.Parameters: java.util.List getSupportedFlashModes()>
<android.hardware.Camera.Parameters: boolean getAutoWhiteBalanceLock()>
<android.hardware.Camera.Parameters: java.lang.String getFlashMode()>
<android.hardware.Camera.Parameters: void setAutoWhiteBalanceLock(boolean)>
<android.hardware.Camera.Parameters: java.lang.String flatten()>
<android.hardware.Camera.Parameters: android.hardware.Camera.Size getPictureSize()>
<android.hardware.Camera.Parameters: void setPreviewFpsRange(int,int)>
<android.hardware.Camera.Parameters: void setPictureSize(int,int)>
<android.hardware.Camera.Parameters: void setMeteringAreas(java.util.List)>
<android.hardware.Camera.Parameters: java.util.List getFocusAreas()>
<android.hardware.Camera.Parameters: java.lang.String getSceneMode()>
<android.hardware.Camera.Parameters: int getExposureCompensation()>
<android.hardware.Camera.Parameters: float getFocalLength()>
<android.hardware.Camera.Parameters: void setWhiteBalance(java.lang.String)>
<android.hardware.Camera.Parameters: void setVideoStabilization(boolean)>
<android.hardware.Camera.Parameters: android.hardware.Camera.Size getJpegThumbnailSize()>
<android.hardware.Camera.Parameters: void setPreviewFrameRate(int)>
<android.hardware.Camera.Parameters: void setFocusAreas(java.util.List)>
<android.hardware.Camera.Parameters: int getMinExposureCompensation()>
<android.hardware.Camera.Parameters: int getJpegQuality()>
<android.hardware.Camera.Parameters: java.util.List getSupportedVideoSizes()>
<android.hardware.Camera.Parameters: void setAutoExposureLock(boolean)>
<android.hardware.Camera.Parameters: void getPreviewFpsRange(int[])>
<android.hardware.Camera.Parameters: void getFocusDistances(float[])>
<android.hardware.Camera.Parameters: boolean getVideoStabilization()>
<android.hardware.Camera.Parameters: int getMaxNumDetectedFaces()>
<android.hardware.Camera.Parameters: java.util.List getSupportedAntibanding()>
<android.hardware.Camera.Parameters: java.util.List getSupportedWhiteBalance()>
<android.hardware.Camera.Parameters: void setGpsProcessingMethod(java.lang.String)>
<android.hardware.Camera.Parameters: java.lang.String get(java.lang.String)>
<android.hardware.Camera.Parameters: boolean isAutoWhiteBalanceLockSupported()>
<android.hardware.Camera.Parameters: boolean isSmoothZoomSupported()>
<android.hardware.Camera.Parameters: java.util.List getSupportedColorEffects()>
<android.hardware.Camera.Parameters: java.util.List getSupportedPreviewFormats()>
<android.hardware.Camera.Parameters: int getZoom()>
<android.hardware.Camera.Parameters: int getPictureFormat()>
<android.hardware.Camera.Parameters: int getMaxZoom()>
<android.hardware.Camera.Parameters: void removeGpsData()>
<android.hardware.Camera.Parameters: void set(java.lang.String,java.lang.String)>
<android.hardware.Camera.Parameters: float getExposureCompensationStep()>
<android.hardware.Camera.Parameters: void remove(java.lang.String)>
<android.hardware.Camera.Parameters: java.util.List getSupportedPreviewSizes()>
<android.hardware.Camera.Parameters: java.util.List getSupportedPreviewFpsRange()>
<android.hardware.Camera.Parameters: boolean isAutoExposureLockSupported()>
<android.hardware.Camera.Parameters: void setColorEffect(java.lang.String)>
<android.hardware.Camera.Parameters: void setJpegThumbnailQuality(int)>
<android.hardware.Camera.Parameters: int getMaxExposureCompensation()>
<android.hardware.Camera.Parameters: void setRecordingHint(boolean)>
<android.hardware.Camera.Parameters: java.lang.String getWhiteBalance()>
<android.hardware.Camera.Parameters: java.util.List getSupportedFocusModes()>
<android.hardware.Camera.Parameters: int getJpegThumbnailQuality()>
<android.hardware.Camera.Parameters: java.util.List getSupportedPictureSizes()>
<android.hardware.Camera.Parameters: float getVerticalViewAngle()>
<android.hardware.Camera.Parameters: int getPreviewFormat()>
<android.hardware.Camera.Parameters: float getHorizontalViewAngle()>
<android.hardware.Camera.Parameters: int getMaxNumFocusAreas()>
<android.hardware.Camera.Parameters: java.util.List getSupportedJpegThumbnailSizes()>
<android.hardware.Camera.Parameters: void set(java.lang.String,int)>
<android.hardware.Camera.Parameters: void setGpsAltitude(double)>
<android.hardware.Camera.Parameters: void setJpegThumbnailSize(int,int)>
<android.hardware.Camera.Parameters: void setPictureFormat(int)>
<android.hardware.Camera.Parameters: int getPreviewFrameRate()>
<android.hardware.Camera.Parameters: void setRotation(int)>
<android.hardware.Camera.Parameters: void setExposureCompensation(int)>
<android.hardware.Camera.Parameters: void setSceneMode(java.lang.String)>
<android.hardware.Camera.Parameters: boolean isVideoStabilizationSupported()>
<android.hardware.Camera.Parameters: java.util.List getMeteringAreas()>
<java.util.LinkedHashSet: void <init>(int,float)>
<java.util.LinkedHashSet: void <init>(int)>
<java.util.LinkedHashSet: void <init>(java.util.Collection)>
<java.util.LinkedHashSet: void <init>()>
<android.service.voice.VoiceInteractionService: android.service.voice.AlwaysOnHotwordDetector createAlwaysOnHotwordDetector(java.lang.String,java.util.Locale,android.service.voice.AlwaysOnHotwordDetector.Callback)>
<android.service.voice.VoiceInteractionService: void onShutdown()>
<android.service.voice.VoiceInteractionService: android.os.IBinder onBind(android.content.Intent)>
<android.service.voice.VoiceInteractionService: boolean isActiveService(android.content.Context,android.content.ComponentName)>
<android.service.voice.VoiceInteractionService: int getDisabledShowContext()>
<android.service.voice.VoiceInteractionService: void setUiHints(android.os.Bundle)>
<android.service.voice.VoiceInteractionService: void setDisabledShowContext(int)>
<android.service.voice.VoiceInteractionService: void showSession(android.os.Bundle,int)>
<android.service.voice.VoiceInteractionService: java.util.Set onGetSupportedVoiceActions(java.util.Set)>
<android.service.voice.VoiceInteractionService: void <init>()>
<android.service.voice.VoiceInteractionService: void onLaunchVoiceAssistFromKeyguard()>
<android.service.voice.VoiceInteractionService: void onReady()>
<android.system.OsConstants: boolean S_ISSOCK(int)>
<android.system.OsConstants: boolean S_ISFIFO(int)>
<android.system.OsConstants: boolean S_ISBLK(int)>
<android.system.OsConstants: boolean WIFSIGNALED(int)>
<android.system.OsConstants: int WEXITSTATUS(int)>
<android.system.OsConstants: java.lang.String gaiName(int)>
<android.system.OsConstants: boolean WIFEXITED(int)>
<android.system.OsConstants: int WSTOPSIG(int)>
<android.system.OsConstants: boolean S_ISDIR(int)>
<android.system.OsConstants: boolean WIFSTOPPED(int)>
<android.system.OsConstants: int WTERMSIG(int)>
<android.system.OsConstants: boolean WCOREDUMP(int)>
<android.system.OsConstants: java.lang.String errnoName(int)>
<android.system.OsConstants: boolean S_ISCHR(int)>
<android.system.OsConstants: boolean S_ISLNK(int)>
<android.system.OsConstants: boolean S_ISREG(int)>
<android.app.Notification.Builder: android.app.Notification build()>
<android.app.Notification.Builder: android.app.Notification.Builder setFullScreenIntent(android.app.PendingIntent,boolean)>
<android.app.Notification.Builder: android.app.Notification.Builder setGroup(java.lang.String)>
<android.app.Notification.Builder: android.app.Notification.Builder setContentInfo(CharSequence)>
<android.app.Notification.Builder: android.app.Notification.Builder setBadgeIconType(int)>
<android.app.Notification.Builder: android.app.Notification.Builder setPublicVersion(android.app.Notification)>
<android.app.Notification.Builder: void <init>(android.content.Context)>
<android.app.Notification.Builder: android.app.Notification.Builder setColorized(boolean)>
<android.app.Notification.Builder: android.app.Notification.Builder setCustomContentView(android.widget.RemoteViews)>
<android.app.Notification.Builder: android.app.Notification.Builder setSubText(CharSequence)>
<android.app.Notification.Builder: android.app.Notification.Builder addPerson(android.app.Person)>
<android.app.Notification.Builder: android.app.Notification.Builder setGroupAlertBehavior(int)>
<android.app.Notification.Builder: android.app.Notification.Builder setWhen(long)>
<android.app.Notification.Builder: android.app.Notification.Builder setLargeIcon(android.graphics.drawable.Icon)>
<android.app.Notification.Builder: android.app.Notification.Builder setDeleteIntent(android.app.PendingIntent)>
<android.app.Notification.Builder: android.app.Notification.Builder setColor(@ColorIntint)>
<android.app.Notification.Builder: android.app.Notification.Builder setContentText(CharSequence)>
<android.app.Notification.Builder: android.app.Notification.Builder setLargeIcon(android.graphics.Bitmap)>
<android.app.Notification.Builder: android.app.Notification.Builder setSound(android.net.Uri,int)>
<android.app.Notification.Builder: android.app.Notification getNotification()>
<android.app.Notification.Builder: android.app.Notification.Builder setProgress(int,int,boolean)>
<android.app.Notification.Builder: android.widget.RemoteViews createHeadsUpContentView()>
<android.app.Notification.Builder: android.app.Notification.Builder setAutoCancel(boolean)>
<android.app.Notification.Builder: android.app.Notification.Builder setChronometerCountDown(boolean)>
<android.app.Notification.Builder: android.app.Notification.Builder addPerson(java.lang.String)>
<android.app.Notification.Builder: android.app.Notification.Builder addAction(android.app.Notification.Action)>
<android.app.Notification.Builder: android.app.Notification.Builder setLocalOnly(boolean)>
<android.app.Notification.Builder: android.app.Notification.Builder setUsesChronometer(boolean)>
<android.app.Notification.Builder: android.app.Notification.Builder recoverBuilder(android.content.Context,android.app.Notification)>
<android.app.Notification.Builder: android.widget.RemoteViews createContentView()>
<android.app.Notification.Builder: android.app.Notification.Builder setChannelId(java.lang.String)>
<android.app.Notification.Builder: android.app.Notification.Builder setContent(android.widget.RemoteViews)>
<android.app.Notification.Builder: android.app.Notification.Builder setDefaults(int)>
<android.app.Notification.Builder: android.app.Notification.Builder setSmallIcon(android.graphics.drawable.Icon)>
<android.app.Notification.Builder: android.app.Notification.Builder setAllowSystemGeneratedContextualActions(boolean)>
<android.app.Notification.Builder: android.app.Notification.Builder setRemoteInputHistory(CharSequence[])>
<android.app.Notification.Builder: android.app.Notification.Builder setVibrate(long[])>
<android.app.Notification.Builder: android.app.Notification.Builder setSmallIcon(@DrawableResint,int)>
<android.app.Notification.Builder: android.app.Notification.Builder setTimeoutAfter(long)>
<android.app.Notification.Builder: android.app.Notification.Builder setSettingsText(CharSequence)>
<android.app.Notification.Builder: android.app.Notification.Builder setVisibility(int)>
<android.app.Notification.Builder: android.app.Notification.Builder setStyle(android.app.Notification.Style)>
<android.app.Notification.Builder: void <init>(android.content.Context,String)>
<android.app.Notification.Builder: android.app.Notification.Builder setActions(android.app.Notification.Action...)>
<android.app.Notification.Builder: android.app.Notification.Style getStyle()>
<android.app.Notification.Builder: android.app.Notification.Builder setExtras(android.os.Bundle)>
<android.app.Notification.Builder: android.app.Notification.Builder addExtras(android.os.Bundle)>
<android.app.Notification.Builder: android.app.Notification.Builder addAction(int,CharSequence,android.app.PendingIntent)>
<android.app.Notification.Builder: android.app.Notification.Builder setLocusId(android.content.LocusId)>
<android.app.Notification.Builder: android.app.Notification.Builder setTicker(CharSequence)>
<android.app.Notification.Builder: android.app.Notification.Builder setCustomBigContentView(android.widget.RemoteViews)>
<android.app.Notification.Builder: android.app.Notification.Builder setCategory(java.lang.String)>
<android.app.Notification.Builder: android.app.Notification.Builder setContentIntent(android.app.PendingIntent)>
<android.app.Notification.Builder: android.app.Notification.Builder setPriority(int)>
<android.app.Notification.Builder: android.app.Notification.Builder setOnlyAlertOnce(boolean)>
<android.app.Notification.Builder: android.app.Notification.Builder setTicker(CharSequence,android.widget.RemoteViews)>
<android.app.Notification.Builder: android.app.Notification.Builder setSmallIcon(@DrawableResint)>
<android.app.Notification.Builder: android.app.Notification.Builder setSound(android.net.Uri)>
<android.app.Notification.Builder: android.app.Notification.Builder setSortKey(java.lang.String)>
<android.app.Notification.Builder: android.app.Notification.Builder setSound(android.net.Uri,android.media.AudioAttributes)>
<android.app.Notification.Builder: android.app.Notification.Builder setNumber(int)>
<android.app.Notification.Builder: android.app.Notification.Builder setLights(@ColorIntint,int,int)>
<android.app.Notification.Builder: android.app.Notification.Builder setCustomHeadsUpContentView(android.widget.RemoteViews)>
<android.app.Notification.Builder: android.app.Notification.Builder setGroupSummary(boolean)>
<android.app.Notification.Builder: android.app.Notification.Builder extend(android.app.Notification.Extender)>
<android.app.Notification.Builder: android.app.Notification.Builder setContentTitle(CharSequence)>
<android.app.Notification.Builder: android.app.Notification.Builder setOngoing(boolean)>
<android.app.Notification.Builder: android.widget.RemoteViews createBigContentView()>
<android.app.Notification.Builder: android.app.Notification.Builder setBubbleMetadata(android.app.Notification.BubbleMetadata)>
<android.app.Notification.Builder: android.app.Notification.Builder setShowWhen(boolean)>
<android.app.Notification.Builder: android.app.Notification.Builder setShortcutId(java.lang.String)>
<android.app.Notification.Builder: android.os.Bundle getExtras()>
<android.widget.TabHost: int getCurrentTab()>
<android.widget.TabHost: void setOnTabChangedListener(android.widget.TabHost.OnTabChangeListener)>
<android.widget.TabHost: android.widget.TabHost.TabSpec newTabSpec(java.lang.String)>
<android.widget.TabHost: java.lang.String getCurrentTabTag()>
<android.widget.TabHost: void addTab(android.widget.TabHost.TabSpec)>
<android.widget.TabHost: void setup()>
<android.widget.TabHost: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>
<android.widget.TabHost: void setCurrentTab(int)>
<android.widget.TabHost: void setCurrentTabByTag(java.lang.String)>
<android.widget.TabHost: void <init>(android.content.Context)>
<android.widget.TabHost: void clearAllTabs()>
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>
<android.widget.TabHost: void setup(android.app.LocalActivityManager)>
<android.widget.TabHost: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.TabHost: android.view.View getCurrentTabView()>
<android.widget.TabHost: void onTouchModeChanged(boolean)>
<android.widget.TabHost: android.view.View getCurrentView()>
<android.widget.TabHost: void <init>(android.content.Context,android.util.AttributeSet)>
<java.sql.DriverPropertyInfo: void <init>(String,String)>
<android.telephony.mbms.vendor.VendorUtils: android.content.ComponentName getAppReceiverFromPackageName(android.content.Context,java.lang.String)>
<android.telephony.mbms.vendor.VendorUtils: void <init>()>
<android.net.sip.SipAudioCall.Listener: void onCallEstablished(android.net.sip.SipAudioCall)>
<android.net.sip.SipAudioCall.Listener: void onRinging(android.net.sip.SipAudioCall,android.net.sip.SipProfile)>
<android.net.sip.SipAudioCall.Listener: void onCallEnded(android.net.sip.SipAudioCall)>
<android.net.sip.SipAudioCall.Listener: void onCalling(android.net.sip.SipAudioCall)>
<android.net.sip.SipAudioCall.Listener: void <init>()>
<android.net.sip.SipAudioCall.Listener: void onRingingBack(android.net.sip.SipAudioCall)>
<android.net.sip.SipAudioCall.Listener: void onChanged(android.net.sip.SipAudioCall)>
<android.net.sip.SipAudioCall.Listener: void onCallHeld(android.net.sip.SipAudioCall)>
<android.net.sip.SipAudioCall.Listener: void onReadyToCall(android.net.sip.SipAudioCall)>
<android.net.sip.SipAudioCall.Listener: void onCallBusy(android.net.sip.SipAudioCall)>
<android.net.sip.SipAudioCall.Listener: void onError(android.net.sip.SipAudioCall,int,java.lang.String)>
<android.webkit.PermissionRequest: void deny()>
<android.webkit.PermissionRequest: android.net.Uri getOrigin()>
<android.webkit.PermissionRequest: java.lang.String[] getResources()>
<android.webkit.PermissionRequest: void <init>()>
<android.webkit.PermissionRequest: void grant(java.lang.String[])>
<android.util.TypedValue: void setTo(android.util.TypedValue)>
<android.util.TypedValue: void <init>()>
<android.util.TypedValue: float complexToDimension(int,android.util.DisplayMetrics)>
<android.util.TypedValue: int complexToDimensionPixelSize(int,android.util.DisplayMetrics)>
<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>
<android.util.TypedValue: int complexToDimensionPixelOffset(int,android.util.DisplayMetrics)>
<android.util.TypedValue: float complexToFraction(int,float,float)>
<android.util.TypedValue: int getComplexUnit()>
<android.util.TypedValue: CharSequence coerceToString()>
<android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>
<android.util.TypedValue: float complexToFloat(int)>
<android.util.TypedValue: float getFloat()>
<android.util.TypedValue: float getFraction(float,float)>
<android.util.TypedValue: boolean isColorType()>
<android.util.TypedValue: java.lang.String coerceToString(int,int)>
<java.util.concurrent.ForkJoinPool: long getStealCount()>
<java.util.concurrent.ForkJoinPool: void <init>()>
<java.util.concurrent.ForkJoinPool: void <init>(int)>
<java.util.concurrent.ForkJoinPool: boolean isTerminating()>
<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinTask pollSubmission()>
<java.util.concurrent.ForkJoinPool: void execute(java.util.concurrent.ForkJoinTask)>
<java.util.concurrent.ForkJoinPool: boolean isShutdown()>
<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinTask submit(java.util.concurrent.Callable)>
<java.util.concurrent.ForkJoinPool: int getCommonPoolParallelism()>
<java.util.concurrent.ForkJoinPool: T invoke(java.util.concurrent.ForkJoinTask)>
<java.util.concurrent.ForkJoinPool: java.lang.Thread.UncaughtExceptionHandler getUncaughtExceptionHandler()>
<java.util.concurrent.ForkJoinPool: void shutdown()>
<java.util.concurrent.ForkJoinPool: void managedBlock(java.util.concurrent.ForkJoinPool.ManagedBlocker)>
<java.util.concurrent.ForkJoinPool: java.util.List invokeAll(java.util.Collection)>
<java.util.concurrent.ForkJoinPool: int getActiveThreadCount()>
<java.util.concurrent.ForkJoinPool: boolean getAsyncMode()>
<java.util.concurrent.ForkJoinPool: int getQueuedSubmissionCount()>
<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinTask submit(java.util.concurrent.ForkJoinTask)>
<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory getFactory()>
<java.util.concurrent.ForkJoinPool: void <init>(int,java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory,java.lang.Thread.UncaughtExceptionHandler,boolean)>
<java.util.concurrent.ForkJoinPool: int getParallelism()>
<java.util.concurrent.ForkJoinPool: int getRunningThreadCount()>
<java.util.concurrent.ForkJoinPool: void execute(Runnable)>
<java.util.concurrent.ForkJoinPool: java.util.List shutdownNow()>
<java.util.concurrent.ForkJoinPool: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ForkJoinPool: boolean isQuiescent()>
<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinTask submit(Runnable,T)>
<java.util.concurrent.ForkJoinPool: int drainTasksTo(java.util.Collection)>
<java.util.concurrent.ForkJoinPool: long getQueuedTaskCount()>
<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool commonPool()>
<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinTask submit(Runnable)>
<java.util.concurrent.ForkJoinPool: boolean awaitQuiescence(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ForkJoinPool: int getPoolSize()>
<java.util.concurrent.ForkJoinPool: boolean hasQueuedSubmissions()>
<java.util.concurrent.ForkJoinPool: boolean isTerminated()>
<android.text.style.StrikethroughSpan: void <init>(android.os.Parcel)>
<android.text.style.StrikethroughSpan: int describeContents()>
<android.text.style.StrikethroughSpan: int getSpanTypeId()>
<android.text.style.StrikethroughSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.StrikethroughSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.StrikethroughSpan: void <init>()>
<android.security.keystore.recovery.WrappedApplicationKey.Builder: android.security.keystore.recovery.WrappedApplicationKey build()>
<android.security.keystore.recovery.WrappedApplicationKey.Builder: android.security.keystore.recovery.WrappedApplicationKey.Builder setMetadata(byte[])>
<android.security.keystore.recovery.WrappedApplicationKey.Builder: android.security.keystore.recovery.WrappedApplicationKey.Builder setEncryptedKeyMaterial(byte[])>
<android.security.keystore.recovery.WrappedApplicationKey.Builder: void <init>()>
<android.security.keystore.recovery.WrappedApplicationKey.Builder: android.security.keystore.recovery.WrappedApplicationKey.Builder setAlias(java.lang.String)>
<java.lang.ClassNotFoundException: void <init>(String)>
<java.lang.ClassNotFoundException: void <init>(String,Throwable)>
<java.lang.ClassNotFoundException: void <init>()>
<java.lang.ClassNotFoundException: java.lang.Throwable getException()>
<android.app.prediction.AppPredictor.Callback: void onTargetsAvailable(java.util.List)>
<android.telephony.CellInfoLte: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellInfoLte: android.telephony.CellIdentityLte getCellIdentity()>
<android.telephony.CellInfoLte: android.telephony.CellSignalStrengthLte getCellSignalStrength()>
<android.view.textclassifier.TextSelection.Request: CharSequence getText()>
<android.view.textclassifier.TextSelection.Request: java.lang.String getCallingPackageName()>
<android.view.textclassifier.TextSelection.Request: int describeContents()>
<android.view.textclassifier.TextSelection.Request: int getEndIndex()>
<android.view.textclassifier.TextSelection.Request: int getStartIndex()>
<android.view.textclassifier.TextSelection.Request: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextSelection.Request: android.os.Bundle getExtras()>
<android.view.textclassifier.TextSelection.Request: android.os.LocaleList getDefaultLocales()>
<android.media.soundtrigger.SoundTriggerDetector.EventPayload: byte[] getTriggerAudio()>
<android.media.soundtrigger.SoundTriggerDetector.EventPayload: android.media.AudioFormat getCaptureAudioFormat()>
<android.telephony.UiccSlotInfo: int getLogicalSlotIdx()>
<android.telephony.UiccSlotInfo: java.lang.String getCardId()>
<android.telephony.UiccSlotInfo: void <init>(boolean,boolean,String,int,int,boolean)>
<android.telephony.UiccSlotInfo: boolean getIsEuicc()>
<android.telephony.UiccSlotInfo: int describeContents()>
<android.telephony.UiccSlotInfo: int getCardStateInfo()>
<android.telephony.UiccSlotInfo: boolean getIsActive()>
<android.telephony.UiccSlotInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.UiccSlotInfo: boolean getIsExtendedApduSupported()>
<android.telephony.UiccSlotInfo: boolean isRemovable()>
<android.util.StatsLog: boolean logEvent(int)>
<android.util.StatsLog: boolean logBinaryPushStateChanged(java.lang.String,long,int,int,long[])>
<android.util.StatsLog: boolean logStart(int)>
<android.util.StatsLog: void writeRaw(byte[],int)>
<android.util.StatsLog: boolean logStop(int)>
<android.icu.text.DateTimePatternGenerator.PatternInfo: void <init>()>
<android.media.MediaPlayer.ProvisioningNetworkErrorException: void <init>(String)>
<android.webkit.ConsoleMessage: java.lang.String message()>
<android.webkit.ConsoleMessage: int lineNumber()>
<android.webkit.ConsoleMessage: java.lang.String sourceId()>
<android.webkit.ConsoleMessage: android.webkit.ConsoleMessage.MessageLevel messageLevel()>
<android.webkit.ConsoleMessage: void <init>(String,String,int,android.webkit.ConsoleMessage.MessageLevel)>
<javax.net.ssl.KeyStoreBuilderParameters: void <init>(java.util.List)>
<javax.net.ssl.KeyStoreBuilderParameters: void <init>(java.security.KeyStore.Builder)>
<javax.net.ssl.KeyStoreBuilderParameters: java.util.List getParameters()>
<android.print.PrintJobId: void writeToParcel(android.os.Parcel,int)>
<android.print.PrintJobId: int describeContents()>
<android.hardware.biometrics.BiometricPrompt.Builder: android.hardware.biometrics.BiometricPrompt.Builder setConfirmationRequired(boolean)>
<android.hardware.biometrics.BiometricPrompt.Builder: android.hardware.biometrics.BiometricPrompt build()>
<android.hardware.biometrics.BiometricPrompt.Builder: android.hardware.biometrics.BiometricPrompt.Builder setTitle(CharSequence)>
<android.hardware.biometrics.BiometricPrompt.Builder: android.hardware.biometrics.BiometricPrompt.Builder setDescription(CharSequence)>
<android.hardware.biometrics.BiometricPrompt.Builder: android.hardware.biometrics.BiometricPrompt.Builder setSubtitle(CharSequence)>
<android.hardware.biometrics.BiometricPrompt.Builder: android.hardware.biometrics.BiometricPrompt.Builder setNegativeButton(CharSequence,java.util.concurrent.Executor,android.content.DialogInterface.OnClickListener)>
<android.hardware.biometrics.BiometricPrompt.Builder: android.hardware.biometrics.BiometricPrompt.Builder setDeviceCredentialAllowed(boolean)>
<android.hardware.biometrics.BiometricPrompt.Builder: void <init>(android.content.Context)>
<java.util.PropertyPermission: void <init>(String,String)>
<android.preference.EditTextPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.EditTextPreference: java.lang.String getText()>
<android.preference.EditTextPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.EditTextPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.EditTextPreference: void <init>(android.content.Context)>
<android.preference.EditTextPreference: android.widget.EditText getEditText()>
<android.preference.EditTextPreference: void onAddEditTextToDialogView(android.view.View,android.widget.EditText)>
<android.preference.EditTextPreference: void setText(java.lang.String)>
<android.provider.ContactsContract.CommonDataKinds.Callable: void <init>()>
<android.view.ContextThemeWrapper: void setTheme(android.content.res.Resources.Theme)>
<android.view.ContextThemeWrapper: void applyOverrideConfiguration(android.content.res.Configuration)>
<android.view.ContextThemeWrapper: void <init>(android.content.Context,@StyleRes int)>
<android.view.ContextThemeWrapper: void <init>(android.content.Context,android.content.res.Resources.Theme)>
<android.view.ContextThemeWrapper: void onApplyThemeResource(android.content.res.Resources.Theme,int,boolean)>
<android.view.ContextThemeWrapper: void <init>()>
<android.hardware.TriggerEventListener: void <init>()>
<android.hardware.TriggerEventListener: void onTrigger(android.hardware.TriggerEvent)>
<android.media.session.MediaSession.Token: int describeContents()>
<android.media.session.MediaSession.Token: void writeToParcel(android.os.Parcel,int)>
<android.speech.tts.TextToSpeech.Engine: void <init>()>
<android.app.backup.SelectBackupTransportCallback: void <init>()>
<android.app.backup.SelectBackupTransportCallback: void onSuccess(java.lang.String)>
<android.app.backup.SelectBackupTransportCallback: void onFailure(int)>
<android.transition.TransitionSet: android.transition.TransitionSet setInterpolator(android.animation.TimeInterpolator)>
<android.transition.TransitionSet: android.transition.TransitionSet addListener(android.transition.Transition.TransitionListener)>
<android.transition.TransitionSet: android.transition.TransitionSet addTarget(android.view.View)>
<android.transition.TransitionSet: android.transition.TransitionSet clone()>
<android.transition.TransitionSet: int getOrdering()>
<android.transition.TransitionSet: int getTransitionCount()>
<android.transition.TransitionSet: android.transition.TransitionSet removeTarget(java.lang.Class)>
<android.transition.TransitionSet: android.transition.TransitionSet setDuration(long)>
<android.transition.TransitionSet: android.transition.TransitionSet addTransition(android.transition.Transition)>
<android.transition.TransitionSet: void captureEndValues(android.transition.TransitionValues)>
<android.transition.TransitionSet: void <init>()>
<android.transition.TransitionSet: android.transition.TransitionSet removeTarget(android.view.View)>
<android.transition.TransitionSet: android.transition.TransitionSet addTarget(int)>
<android.transition.TransitionSet: android.transition.TransitionSet removeTarget(java.lang.String)>
<android.transition.TransitionSet: android.transition.TransitionSet setOrdering(int)>
<android.transition.TransitionSet: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.TransitionSet: android.transition.TransitionSet addTarget(java.lang.String)>
<android.transition.TransitionSet: android.transition.TransitionSet removeTransition(android.transition.Transition)>
<android.transition.TransitionSet: android.transition.TransitionSet addTarget(java.lang.Class)>
<android.transition.TransitionSet: void captureStartValues(android.transition.TransitionValues)>
<android.transition.TransitionSet: android.transition.TransitionSet removeListener(android.transition.Transition.TransitionListener)>
<android.transition.TransitionSet: android.transition.TransitionSet setStartDelay(long)>
<android.transition.TransitionSet: android.transition.Transition getTransitionAt(int)>
<android.transition.TransitionSet: android.transition.TransitionSet removeTarget(int)>
<android.permission.RuntimePermissionUsageInfo: java.lang.String getName()>
<android.permission.RuntimePermissionUsageInfo: int getAppAccessCount()>
<android.permission.RuntimePermissionUsageInfo: int describeContents()>
<android.permission.RuntimePermissionUsageInfo: void writeToParcel(android.os.Parcel,int)>
<android.permission.RuntimePermissionUsageInfo: void <init>(String,int)>
<java.time.OffsetTime: java.time.OffsetTime plusHours(long)>
<java.time.OffsetTime: java.time.OffsetTime minusNanos(long)>
<java.time.OffsetTime: boolean isAfter(java.time.OffsetTime)>
<java.time.OffsetTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>
<java.time.OffsetTime: java.time.OffsetTime plusSeconds(long)>
<java.time.OffsetTime: java.time.OffsetTime parse(CharSequence,java.time.format.DateTimeFormatter)>
<java.time.OffsetTime: java.time.OffsetTime parse(CharSequence)>
<java.time.OffsetTime: java.time.OffsetTime now(java.time.Clock)>
<java.time.OffsetTime: java.time.OffsetTime from(java.time.temporal.TemporalAccessor)>
<java.time.OffsetTime: java.time.OffsetTime plus(java.time.temporal.TemporalAmount)>
<java.time.OffsetTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>
<java.time.OffsetTime: java.time.OffsetTime minusMinutes(long)>
<java.time.OffsetTime: java.lang.String format(java.time.format.DateTimeFormatter)>
<java.time.OffsetTime: java.time.OffsetTime plusNanos(long)>
<java.time.OffsetTime: java.time.OffsetTime with(java.time.temporal.TemporalAdjuster)>
<java.time.OffsetTime: java.time.OffsetTime minusSeconds(long)>
<java.time.OffsetTime: java.time.ZoneOffset getOffset()>
<java.time.OffsetTime: int getHour()>
<java.time.OffsetTime: java.time.OffsetTime withMinute(int)>
<java.time.OffsetTime: java.time.OffsetTime withOffsetSameInstant(java.time.ZoneOffset)>
<java.time.OffsetTime: java.time.OffsetDateTime atDate(java.time.LocalDate)>
<java.time.OffsetTime: boolean isSupported(java.time.temporal.TemporalField)>
<java.time.OffsetTime: long getLong(java.time.temporal.TemporalField)>
<java.time.OffsetTime: boolean isBefore(java.time.OffsetTime)>
<java.time.OffsetTime: boolean isEqual(java.time.OffsetTime)>
<java.time.OffsetTime: java.time.OffsetTime withNano(int)>
<java.time.OffsetTime: java.time.OffsetTime of(int,int,int,int,java.time.ZoneOffset)>
<java.time.OffsetTime: java.time.OffsetTime truncatedTo(java.time.temporal.TemporalUnit)>
<java.time.OffsetTime: int compareTo(java.time.OffsetTime)>
<java.time.OffsetTime: java.time.OffsetTime minus(long,java.time.temporal.TemporalUnit)>
<java.time.OffsetTime: java.time.OffsetTime of(java.time.LocalTime,java.time.ZoneOffset)>
<java.time.OffsetTime: java.time.LocalTime toLocalTime()>
<java.time.OffsetTime: boolean isSupported(java.time.temporal.TemporalUnit)>
<java.time.OffsetTime: java.time.OffsetTime with(java.time.temporal.TemporalField,long)>
<java.time.OffsetTime: java.time.OffsetTime withOffsetSameLocal(java.time.ZoneOffset)>
<java.time.OffsetTime: java.time.OffsetTime minusHours(long)>
<java.time.OffsetTime: java.time.OffsetTime withSecond(int)>
<java.time.OffsetTime: java.time.OffsetTime plus(long,java.time.temporal.TemporalUnit)>
<java.time.OffsetTime: java.time.OffsetTime now(java.time.ZoneId)>
<java.time.OffsetTime: int getMinute()>
<java.time.OffsetTime: int getNano()>
<java.time.OffsetTime: java.time.OffsetTime minus(java.time.temporal.TemporalAmount)>
<java.time.OffsetTime: int getSecond()>
<java.time.OffsetTime: java.time.OffsetTime now()>
<java.time.OffsetTime: java.time.OffsetTime plusMinutes(long)>
<java.time.OffsetTime: java.time.OffsetTime withHour(int)>
<java.time.OffsetTime: java.time.OffsetTime ofInstant(java.time.Instant,java.time.ZoneId)>
<android.provider.MediaStore.Files: void <init>()>
<android.provider.MediaStore.Files: android.net.Uri getContentUri(java.lang.String,long)>
<android.provider.MediaStore.Files: android.net.Uri getContentUri(java.lang.String)>
<javax.security.auth.callback.PasswordCallback: boolean isEchoOn()>
<javax.security.auth.callback.PasswordCallback: java.lang.String getPrompt()>
<javax.security.auth.callback.PasswordCallback: char[] getPassword()>
<javax.security.auth.callback.PasswordCallback: void <init>(String,boolean)>
<javax.security.auth.callback.PasswordCallback: void clearPassword()>
<javax.security.auth.callback.PasswordCallback: void setPassword(char[])>
<java.nio.CharBuffer: char get(int)>
<java.nio.CharBuffer: java.nio.CharBuffer get(char[])>
<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>
<java.nio.CharBuffer: char[] array()>
<java.nio.CharBuffer: boolean hasArray()>
<java.nio.CharBuffer: int compareTo(java.nio.CharBuffer)>
<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>
<java.nio.CharBuffer: java.nio.CharBuffer put(int,char)>
<java.nio.CharBuffer: java.nio.CharBuffer append(char)>
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)>
<java.nio.CharBuffer: java.nio.CharBuffer duplicate()>
<java.nio.CharBuffer: char charAt(int)>
<java.nio.CharBuffer: java.nio.CharBuffer append(CharSequence,int,int)>
<java.nio.CharBuffer: int length()>
<java.nio.CharBuffer: java.nio.ByteOrder order()>
<java.nio.CharBuffer: java.nio.CharBuffer compact()>
<java.nio.CharBuffer: int read(java.nio.CharBuffer)>
<java.nio.CharBuffer: java.nio.CharBuffer wrap(CharSequence)>
<java.nio.CharBuffer: java.nio.CharBuffer get(char[],int,int)>
<java.nio.CharBuffer: java.nio.CharBuffer put(char[])>
<java.nio.CharBuffer: int arrayOffset()>
<java.nio.CharBuffer: java.nio.CharBuffer wrap(CharSequence,int,int)>
<java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>
<java.nio.CharBuffer: java.nio.CharBuffer put(char)>
<java.nio.CharBuffer: java.nio.CharBuffer subSequence(int,int)>
<java.nio.CharBuffer: java.nio.CharBuffer append(CharSequence)>
<java.nio.CharBuffer: java.nio.CharBuffer asReadOnlyBuffer()>
<java.nio.CharBuffer: char get()>
<java.nio.CharBuffer: java.nio.CharBuffer put(char[],int,int)>
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>
<java.nio.CharBuffer: java.nio.CharBuffer slice()>
<java.nio.CharBuffer: java.nio.CharBuffer put(java.nio.CharBuffer)>
<java.util.Spliterator.OfLong extends java.util.Spliterator.OfPrimitive: void forEachRemaining(java.util.function.Consumer)>
<java.util.Spliterator.OfLong extends java.util.Spliterator.OfPrimitive: java.util.Spliterator.OfLong trySplit()>
<java.util.Spliterator.OfLong extends java.util.Spliterator.OfPrimitive: boolean tryAdvance(java.util.function.LongConsumer)>
<java.util.Spliterator.OfLong extends java.util.Spliterator.OfPrimitive: boolean tryAdvance(java.util.function.Consumer)>
<java.util.Spliterator.OfLong extends java.util.Spliterator.OfPrimitive: void forEachRemaining(java.util.function.LongConsumer)>
<android.app.PendingIntent.CanceledException: void <init>()>
<android.app.PendingIntent.CanceledException: void <init>(String)>
<android.app.PendingIntent.CanceledException: void <init>(Exception)>
<android.util.FeatureFlagUtils: boolean isEnabled(android.content.Context,java.lang.String)>
<android.util.FeatureFlagUtils: void <init>()>
<android.util.FeatureFlagUtils: java.util.Map getAllFeatureFlags()>
<android.util.FeatureFlagUtils: void setEnabled(android.content.Context,java.lang.String,boolean)>
<android.hardware.biometrics.BiometricPrompt.AuthenticationCallback: void onAuthenticationFailed()>
<android.hardware.biometrics.BiometricPrompt.AuthenticationCallback: void <init>()>
<android.hardware.biometrics.BiometricPrompt.AuthenticationCallback: void onAuthenticationHelp(int,CharSequence)>
<android.hardware.biometrics.BiometricPrompt.AuthenticationCallback: void onAuthenticationSucceeded(android.hardware.biometrics.BiometricPrompt.AuthenticationResult)>
<android.hardware.biometrics.BiometricPrompt.AuthenticationCallback: void onAuthenticationError(int,CharSequence)>
<java.net.CookiePolicy: boolean shouldAccept(java.net.URI,java.net.HttpCookie)>
<android.text.style.SubscriptSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.SubscriptSpan: void <init>(android.os.Parcel)>
<android.text.style.SubscriptSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.SubscriptSpan: int describeContents()>
<android.text.style.SubscriptSpan: int getSpanTypeId()>
<android.text.style.SubscriptSpan: void <init>()>
<android.text.style.SubscriptSpan: void updateDrawState(android.text.TextPaint)>
<android.widget.RelativeLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.RelativeLayout: int getIgnoreGravity()>
<android.widget.RelativeLayout: void setVerticalGravity(int)>
<android.widget.RelativeLayout: void <init>(android.content.Context)>
<android.widget.RelativeLayout: void setIgnoreGravity(int)>
<android.widget.RelativeLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RelativeLayout: int getGravity()>
<android.widget.RelativeLayout: android.widget.RelativeLayout.LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.RelativeLayout: void setGravity(int)>
<android.widget.RelativeLayout: void setHorizontalGravity(int)>
<android.widget.RelativeLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.icu.util.JapaneseCalendar: void <init>(int,int,int,int,int,int)>
<android.icu.util.JapaneseCalendar: void <init>()>
<android.icu.util.JapaneseCalendar: void <init>(android.icu.util.ULocale)>
<android.icu.util.JapaneseCalendar: void <init>(android.icu.util.TimeZone,java.util.Locale)>
<android.icu.util.JapaneseCalendar: void <init>(android.icu.util.TimeZone,android.icu.util.ULocale)>
<android.icu.util.JapaneseCalendar: void <init>(int,int,int)>
<android.icu.util.JapaneseCalendar: void <init>(int,int,int,int)>
<android.icu.util.JapaneseCalendar: void <init>(java.util.Locale)>
<android.icu.util.JapaneseCalendar: void <init>(android.icu.util.TimeZone)>
<android.icu.util.JapaneseCalendar: void <init>(java.util.Date)>
<android.view.FrameMetrics: void <init>(android.view.FrameMetrics)>
<android.view.FrameMetrics: long getMetric(int)>
<android.view.textclassifier.TextLinks: int describeContents()>
<android.view.textclassifier.TextLinks: android.os.Bundle getExtras()>
<android.view.textclassifier.TextLinks: int apply(android.text.Spannable,int,java.util.function.Function)>
<android.view.textclassifier.TextLinks: java.util.Collection getLinks()>
<android.view.textclassifier.TextLinks: void writeToParcel(android.os.Parcel,int)>
<android.icu.text.Edits.Iterator: boolean findDestinationIndex(int)>
<android.icu.text.Edits.Iterator: boolean hasChange()>
<android.icu.text.Edits.Iterator: int sourceIndex()>
<android.icu.text.Edits.Iterator: boolean next()>
<android.icu.text.Edits.Iterator: int sourceIndexFromDestinationIndex(int)>
<android.icu.text.Edits.Iterator: boolean findSourceIndex(int)>
<android.icu.text.Edits.Iterator: int oldLength()>
<android.icu.text.Edits.Iterator: int destinationIndexFromSourceIndex(int)>
<android.icu.text.Edits.Iterator: int destinationIndex()>
<android.icu.text.Edits.Iterator: int replacementIndex()>
<android.icu.text.Edits.Iterator: int newLength()>
<java.util.Collection extends java.lang.Iterable: boolean removeAll(java.util.Collection)>
<java.util.Collection extends java.lang.Iterable: java.util.Spliterator spliterator()>
<java.util.Collection extends java.lang.Iterable: boolean remove(java.lang.Object)>
<java.util.Collection extends java.lang.Iterable: boolean containsAll(java.util.Collection)>
<java.util.Collection extends java.lang.Iterable: java.util.Iterator iterator()>
<java.util.Collection extends java.lang.Iterable: boolean removeIf(java.util.function.Predicate)>
<java.util.Collection extends java.lang.Iterable: int size()>
<java.util.Collection extends java.lang.Iterable: boolean equals(java.lang.Object)>
<java.util.Collection extends java.lang.Iterable: int hashCode()>
<java.util.Collection extends java.lang.Iterable: boolean retainAll(java.util.Collection)>
<java.util.Collection extends java.lang.Iterable: boolean add(E)>
<java.util.Collection extends java.lang.Iterable: boolean isEmpty()>
<java.util.Collection extends java.lang.Iterable: T[] toArray(T[])>
<java.util.Collection extends java.lang.Iterable: void clear()>
<java.util.Collection extends java.lang.Iterable: boolean contains(java.lang.Object)>
<java.util.Collection extends java.lang.Iterable: java.util.stream.Stream parallelStream()>
<java.util.Collection extends java.lang.Iterable: java.util.stream.Stream stream()>
<java.util.Collection extends java.lang.Iterable: java.lang.Object[] toArray()>
<java.util.Collection extends java.lang.Iterable: boolean addAll(java.util.Collection)>
<java.util.AbstractSet: void <init>()>
<android.printservice.PrintService: void onPrintJobQueued(android.printservice.PrintJob)>
<android.printservice.PrintService: void onRequestCancelPrintJob(android.printservice.PrintJob)>
<android.printservice.PrintService: void attachBaseContext(android.content.Context)>
<android.printservice.PrintService: void <init>()>
<android.printservice.PrintService: android.printservice.PrinterDiscoverySession onCreatePrinterDiscoverySession()>
<android.printservice.PrintService: android.print.PrinterId generatePrinterId(java.lang.String)>
<android.printservice.PrintService: void onDisconnected()>
<android.printservice.PrintService: void onConnected()>
<android.printservice.PrintService: java.util.List getActivePrintJobs()>
<android.printservice.PrintService: android.os.IBinder onBind(android.content.Intent)>
<java.beans.PropertyChangeListener extends java.util.EventListener: void propertyChange(java.beans.PropertyChangeEvent)>
<android.content.res.TypedArray: java.lang.String getNonResourceString(@StyleableResint)>
<android.content.res.TypedArray: CharSequence getText(@StyleableResint)>
<android.content.res.TypedArray: android.util.TypedValue peekValue(@StyleableResint)>
<android.content.res.TypedArray: int getColor(@StyleableResint,@ColorIntint)>
<android.content.res.TypedArray: java.lang.String getPositionDescription()>
<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(@StyleableResint)>
<android.content.res.TypedArray: android.graphics.Typeface getFont(@StyleableResint)>
<android.content.res.TypedArray: float getFraction(@StyleableResint,int,int,float)>
<android.content.res.TypedArray: android.content.res.Resources getResources()>
<android.content.res.TypedArray: int length()>
<android.content.res.TypedArray: boolean getBoolean(@StyleableResint,boolean)>
<android.content.res.TypedArray: int getResourceId(@StyleableResint,int)>
<android.content.res.TypedArray: CharSequence[] getTextArray(@StyleableResint)>
<android.content.res.TypedArray: void recycle()>
<android.content.res.TypedArray: int getType(@StyleableResint)>
<android.content.res.TypedArray: int getLayoutDimension(@StyleableResint,int)>
<android.content.res.TypedArray: boolean hasValueOrEmpty(@StyleableResint)>
<android.content.res.TypedArray: int getIndex(int)>
<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(@StyleableResint)>
<android.content.res.TypedArray: int getSourceResourceId(@StyleableResint,@AnyResint)>
<android.content.res.TypedArray: float getFloat(@StyleableResint,float)>
<android.content.res.TypedArray: boolean getValue(@StyleableResint,android.util.TypedValue)>
<android.content.res.TypedArray: int getIndexCount()>
<android.content.res.TypedArray: int getChangingConfigurations()>
<android.content.res.TypedArray: int getInt(@StyleableResint,int)>
<android.content.res.TypedArray: int getDimensionPixelOffset(@StyleableResint,int)>
<android.content.res.TypedArray: int getLayoutDimension(@StyleableResint,java.lang.String)>
<android.content.res.TypedArray: java.lang.String getString(@StyleableResint)>
<android.content.res.TypedArray: boolean hasValue(@StyleableResint)>
<android.content.res.TypedArray: float getDimension(@StyleableResint,float)>
<android.content.res.TypedArray: int getInteger(@StyleableResint,int)>
<android.content.res.TypedArray: int getDimensionPixelSize(@StyleableResint,int)>
<java.security.cert.LDAPCertStoreParameters: void <init>(String)>
<java.security.cert.LDAPCertStoreParameters: java.lang.Object clone()>
<java.security.cert.LDAPCertStoreParameters: int getPort()>
<java.security.cert.LDAPCertStoreParameters: java.lang.String getServerName()>
<java.security.cert.LDAPCertStoreParameters: void <init>(String,int)>
<java.security.cert.LDAPCertStoreParameters: void <init>()>
<android.media.tv.TvInputInfo.Builder: android.media.tv.TvInputInfo.Builder setIcon(android.graphics.drawable.Icon)>
<android.media.tv.TvInputInfo.Builder: void <init>(android.content.Context,android.content.ComponentName)>
<android.media.tv.TvInputInfo.Builder: android.media.tv.TvInputInfo build()>
<android.media.tv.TvInputInfo.Builder: android.media.tv.TvInputInfo.Builder setTunerCount(int)>
<android.media.tv.TvInputInfo.Builder: android.media.tv.TvInputInfo.Builder setIcon(android.graphics.drawable.Icon,int)>
<android.media.tv.TvInputInfo.Builder: android.media.tv.TvInputInfo.Builder setTvInputHardwareInfo(android.media.tv.TvInputHardwareInfo)>
<android.media.tv.TvInputInfo.Builder: android.media.tv.TvInputInfo.Builder setExtras(android.os.Bundle)>
<android.media.tv.TvInputInfo.Builder: android.media.tv.TvInputInfo.Builder setHdmiDeviceInfo(android.hardware.hdmi.HdmiDeviceInfo)>
<android.media.tv.TvInputInfo.Builder: android.media.tv.TvInputInfo.Builder setLabel(CharSequence)>
<android.media.tv.TvInputInfo.Builder: android.media.tv.TvInputInfo.Builder setCanRecord(boolean)>
<android.media.tv.TvInputInfo.Builder: android.media.tv.TvInputInfo.Builder setLabel(@StringResint)>
<android.media.tv.TvInputInfo.Builder: android.media.tv.TvInputInfo.Builder setParentId(java.lang.String)>
<android.inputmethodservice.KeyboardView: void swipeDown()>
<android.inputmethodservice.KeyboardView: void setPopupParent(android.view.View)>
<android.inputmethodservice.KeyboardView: void setPopupOffset(int,int)>
<android.inputmethodservice.KeyboardView: void swipeUp()>
<android.inputmethodservice.KeyboardView: android.inputmethodservice.Keyboard getKeyboard()>
<android.inputmethodservice.KeyboardView: void swipeLeft()>
<android.inputmethodservice.KeyboardView: void onSizeChanged(int,int,int,int)>
<android.inputmethodservice.KeyboardView: void onDetachedFromWindow()>
<android.inputmethodservice.KeyboardView: void invalidateAllKeys()>
<android.inputmethodservice.KeyboardView: void swipeRight()>
<android.inputmethodservice.KeyboardView: void setPreviewEnabled(boolean)>
<android.inputmethodservice.KeyboardView: android.inputmethodservice.KeyboardView.OnKeyboardActionListener getOnKeyboardActionListener()>
<android.inputmethodservice.KeyboardView: boolean isShifted()>
<android.inputmethodservice.KeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)>
<android.inputmethodservice.KeyboardView: void setProximityCorrectionEnabled(boolean)>
<android.inputmethodservice.KeyboardView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.inputmethodservice.KeyboardView: boolean isPreviewEnabled()>
<android.inputmethodservice.KeyboardView: void closing()>
<android.inputmethodservice.KeyboardView: void invalidateKey(int)>
<android.inputmethodservice.KeyboardView: boolean handleBack()>
<android.inputmethodservice.KeyboardView: void setVerticalCorrection(int)>
<android.inputmethodservice.KeyboardView: boolean setShifted(boolean)>
<android.inputmethodservice.KeyboardView: void setOnKeyboardActionListener(android.inputmethodservice.KeyboardView.OnKeyboardActionListener)>
<android.inputmethodservice.KeyboardView: boolean isProximityCorrectionEnabled()>
<android.inputmethodservice.KeyboardView: void onMeasure(int,int)>
<android.inputmethodservice.KeyboardView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.inputmethodservice.KeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard.Key)>
<android.inputmethodservice.KeyboardView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.inputmethodservice.KeyboardView: void onClick(android.view.View)>
<android.inputmethodservice.KeyboardView: void onDraw(android.graphics.Canvas)>
<android.view.VelocityTracker: float getYVelocity(int)>
<android.view.VelocityTracker: void recycle()>
<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)>
<android.view.VelocityTracker: void computeCurrentVelocity(int,float)>
<android.view.VelocityTracker: float getXVelocity(int)>
<android.view.VelocityTracker: float getYVelocity()>
<android.view.VelocityTracker: void clear()>
<android.view.VelocityTracker: android.view.VelocityTracker obtain()>
<android.view.VelocityTracker: void computeCurrentVelocity(int)>
<android.view.VelocityTracker: float getXVelocity()>
<java.beans.PropertyChangeEvent: void setPropagationId(java.lang.Object)>
<java.beans.PropertyChangeEvent: java.lang.Object getOldValue()>
<java.beans.PropertyChangeEvent: java.lang.Object getNewValue()>
<java.beans.PropertyChangeEvent: void <init>(Object,String,Object,Object)>
<java.beans.PropertyChangeEvent: java.lang.Object getPropagationId()>
<java.beans.PropertyChangeEvent: java.lang.String getPropertyName()>
<android.os.ServiceSpecificException: void <init>(int,String)>
<android.os.ServiceSpecificException: void <init>(int)>
<android.app.ActionBar: void setLogo(@DrawableResint)>
<android.app.ActionBar: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.app.ActionBar: android.app.ActionBar.Tab getTabAt(int)>
<android.app.ActionBar: void setSubtitle(CharSequence)>
<android.app.ActionBar: android.content.Context getThemedContext()>
<android.app.ActionBar: void setListNavigationCallbacks(android.widget.SpinnerAdapter,android.app.ActionBar.OnNavigationListener)>
<android.app.ActionBar: void setDisplayOptions(int,int)>
<android.app.ActionBar: void setDisplayOptions(int)>
<android.app.ActionBar: void removeTab(android.app.ActionBar.Tab)>
<android.app.ActionBar: void setNavigationMode(int)>
<android.app.ActionBar: void setSelectedNavigationItem(int)>
<android.app.ActionBar: void setTitle(@StringResint)>
<android.app.ActionBar: CharSequence getTitle()>
<android.app.ActionBar: void removeAllTabs()>
<android.app.ActionBar: int getNavigationItemCount()>
<android.app.ActionBar: void setCustomView(android.view.View,android.app.ActionBar.LayoutParams)>
<android.app.ActionBar: void show()>
<android.app.ActionBar: int getSelectedNavigationIndex()>
<android.app.ActionBar: void <init>()>
<android.app.ActionBar: android.app.ActionBar.Tab getSelectedTab()>
<android.app.ActionBar: android.view.View getCustomView()>
<android.app.ActionBar: void setIcon(android.graphics.drawable.Drawable)>
<android.app.ActionBar: void setDisplayShowTitleEnabled(boolean)>
<android.app.ActionBar: void setDisplayShowCustomEnabled(boolean)>
<android.app.ActionBar: void setElevation(float)>
<android.app.ActionBar: void setCustomView(android.view.View)>
<android.app.ActionBar: void removeTabAt(int)>
<android.app.ActionBar: void addTab(android.app.ActionBar.Tab,int)>
<android.app.ActionBar: void addTab(android.app.ActionBar.Tab)>
<android.app.ActionBar: float getElevation()>
<android.app.ActionBar: void setDisplayShowHomeEnabled(boolean)>
<android.app.ActionBar: void setHomeAsUpIndicator(@DrawableResint)>
<android.app.ActionBar: void setHomeAsUpIndicator(android.graphics.drawable.Drawable)>
<android.app.ActionBar: void removeOnMenuVisibilityListener(android.app.ActionBar.OnMenuVisibilityListener)>
<android.app.ActionBar: int getHideOffset()>
<android.app.ActionBar: CharSequence getSubtitle()>
<android.app.ActionBar: boolean isShowing()>
<android.app.ActionBar: int getTabCount()>
<android.app.ActionBar: void setDisplayUseLogoEnabled(boolean)>
<android.app.ActionBar: void setHomeActionContentDescription(@StringResint)>
<android.app.ActionBar: void setIcon(@DrawableResint)>
<android.app.ActionBar: void addOnMenuVisibilityListener(android.app.ActionBar.OnMenuVisibilityListener)>
<android.app.ActionBar: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.app.ActionBar: android.app.ActionBar.Tab newTab()>
<android.app.ActionBar: void addTab(android.app.ActionBar.Tab,int,boolean)>
<android.app.ActionBar: int getDisplayOptions()>
<android.app.ActionBar: void setLogo(android.graphics.drawable.Drawable)>
<android.app.ActionBar: void setSubtitle(@StringResint)>
<android.app.ActionBar: void setCustomView(@LayoutResint)>
<android.app.ActionBar: void setHomeActionContentDescription(CharSequence)>
<android.app.ActionBar: void addTab(android.app.ActionBar.Tab,boolean)>
<android.app.ActionBar: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.app.ActionBar: int getHeight()>
<android.app.ActionBar: void setHomeButtonEnabled(boolean)>
<android.app.ActionBar: void hide()>
<android.app.ActionBar: void setHideOnContentScrollEnabled(boolean)>
<android.app.ActionBar: void setHideOffset(int)>
<android.app.ActionBar: int getNavigationMode()>
<android.app.ActionBar: boolean isHideOnContentScrollEnabled()>
<android.app.ActionBar: void selectTab(android.app.ActionBar.Tab)>
<android.app.ActionBar: void setDisplayHomeAsUpEnabled(boolean)>
<android.app.ActionBar: void setTitle(CharSequence)>
<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>
<android.graphics.SurfaceTexture: void <init>(int)>
<android.graphics.SurfaceTexture: boolean isReleased()>
<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture.OnFrameAvailableListener)>
<android.graphics.SurfaceTexture: void <init>(boolean)>
<android.graphics.SurfaceTexture: void attachToGLContext(int)>
<android.graphics.SurfaceTexture: void <init>(int,boolean)>
<android.graphics.SurfaceTexture: void releaseTexImage()>
<android.graphics.SurfaceTexture: void detachFromGLContext()>
<android.graphics.SurfaceTexture: void release()>
<android.graphics.SurfaceTexture: long getTimestamp()>
<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>
<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture.OnFrameAvailableListener,android.os.Handler)>
<android.graphics.SurfaceTexture: void updateTexImage()>
<android.graphics.drawable.AnimatedStateListDrawable: void <init>()>
<android.graphics.drawable.AnimatedStateListDrawable: void addTransition(int,int,T,boolean)>
<android.graphics.drawable.AnimatedStateListDrawable: void addState(int[],android.graphics.drawable.Drawable,int)>
<android.bluetooth.BluetoothAdapter: boolean enableNoAutoConnect()>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()>
<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)>
<android.bluetooth.BluetoothAdapter: int getState()>
<android.bluetooth.BluetoothAdapter: boolean isDiscovering()>
<android.bluetooth.BluetoothAdapter: boolean disableBLE()>
<android.bluetooth.BluetoothAdapter: boolean isLeCodedPhySupported()>
<android.bluetooth.BluetoothAdapter: boolean startLeScan(android.bluetooth.BluetoothAdapter.LeScanCallback)>
<android.bluetooth.BluetoothAdapter: boolean isOffloadedScanBatchingSupported()>
<android.bluetooth.BluetoothAdapter: boolean startLeScan(java.util.UUID[],android.bluetooth.BluetoothAdapter.LeScanCallback)>
<android.bluetooth.BluetoothAdapter: boolean disable()>
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()>
<android.bluetooth.BluetoothAdapter: boolean isLePeriodicAdvertisingSupported()>
<android.bluetooth.BluetoothAdapter: int getLeMaximumAdvertisingDataLength()>
<android.bluetooth.BluetoothAdapter: boolean enableBLE()>
<android.bluetooth.BluetoothAdapter: boolean enable()>
<android.bluetooth.BluetoothAdapter: boolean isLeExtendedAdvertisingSupported()>
<android.bluetooth.BluetoothAdapter: boolean isEnabled()>
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)>
<android.bluetooth.BluetoothAdapter: boolean isBleScanAlwaysAvailable()>
<android.bluetooth.BluetoothAdapter: boolean removeOnMetadataChangedListener(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothAdapter.OnMetadataChangedListener)>
<android.bluetooth.BluetoothAdapter: boolean isLe2MPhySupported()>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)>
<android.bluetooth.BluetoothAdapter: boolean isLeEnabled()>
<android.bluetooth.BluetoothAdapter: java.lang.String getName()>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)>
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)>
<android.bluetooth.BluetoothAdapter: android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser()>
<android.bluetooth.BluetoothAdapter: boolean isMultipleAdvertisementSupported()>
<android.bluetooth.BluetoothAdapter: boolean addOnMetadataChangedListener(android.bluetooth.BluetoothDevice,java.util.concurrent.Executor,android.bluetooth.BluetoothAdapter.OnMetadataChangedListener)>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(byte[])>
<android.bluetooth.BluetoothAdapter: boolean checkBluetoothAddress(java.lang.String)>
<android.bluetooth.BluetoothAdapter: int getScanMode()>
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()>
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureL2capChannel()>
<android.bluetooth.BluetoothAdapter: void closeProfileProxy(int,android.bluetooth.BluetoothProfile)>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingL2capChannel()>
<android.bluetooth.BluetoothAdapter: boolean isOffloadedFilteringSupported()>
<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile.ServiceListener,int)>
<android.bluetooth.BluetoothAdapter: void stopLeScan(android.bluetooth.BluetoothAdapter.LeScanCallback)>
<android.bluetooth.BluetoothAdapter: android.bluetooth.le.BluetoothLeScanner getBluetoothLeScanner()>
<android.webkit.PluginStub: android.view.View getFullScreenView(int,android.content.Context)>
<android.webkit.PluginStub: android.view.View getEmbeddedView(int,android.content.Context)>
<java.io.NotSerializableException: void <init>()>
<java.io.NotSerializableException: void <init>(String)>
<android.service.autofill.FillCallback: void onSuccess(android.service.autofill.FillResponse)>
<android.service.autofill.FillCallback: void onFailure(CharSequence)>
<android.graphics.drawable.shapes.RoundRectShape: void <init>(float[],android.graphics.RectF,float[])>
<android.graphics.drawable.shapes.RoundRectShape: android.graphics.drawable.shapes.RoundRectShape clone()>
<android.view.animation.GridLayoutAnimationController.AnimationParameters: void <init>()>
<android.telephony.CellIdentityLte: int getCi()>
<android.telephony.CellIdentityLte: int getEarfcn()>
<android.telephony.CellIdentityLte: int getBandwidth()>
<android.telephony.CellIdentityLte: int getPci()>
<android.telephony.CellIdentityLte: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellIdentityLte: int getMcc()>
<android.telephony.CellIdentityLte: java.lang.String getMobileNetworkOperator()>
<android.telephony.CellIdentityLte: java.lang.String getMccString()>
<android.telephony.CellIdentityLte: int getTac()>
<android.telephony.CellIdentityLte: java.lang.String getMncString()>
<android.telephony.CellIdentityLte: int getMnc()>
<java.security.Timestamp: void <init>(java.util.Date,java.security.cert.CertPath)>
<java.security.Timestamp: java.security.cert.CertPath getSignerCertPath()>
<java.security.Timestamp: java.util.Date getTimestamp()>
<java.util.jar.Manifest: void <init>(java.io.InputStream)>
<java.util.jar.Manifest: java.util.jar.Attributes getAttributes(java.lang.String)>
<java.util.jar.Manifest: void read(java.io.InputStream)>
<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>
<java.util.jar.Manifest: void <init>(java.util.jar.Manifest)>
<java.util.jar.Manifest: void clear()>
<java.util.jar.Manifest: void <init>()>
<java.util.jar.Manifest: java.lang.Object clone()>
<java.util.jar.Manifest: java.util.Map getEntries()>
<java.util.jar.Manifest: void write(java.io.OutputStream)>
<android.service.media.CameraPrewarmService: void <init>()>
<android.service.media.CameraPrewarmService: void onPrewarm()>
<android.service.media.CameraPrewarmService: android.os.IBinder onBind(android.content.Intent)>
<android.service.media.CameraPrewarmService: void onCooldown(boolean)>
<java.lang.invoke.VolatileCallSite: java.lang.invoke.MethodHandle getTarget()>
<java.lang.invoke.VolatileCallSite: void <init>(java.lang.invoke.MethodType)>
<java.lang.invoke.VolatileCallSite: java.lang.invoke.MethodHandle dynamicInvoker()>
<java.lang.invoke.VolatileCallSite: void setTarget(java.lang.invoke.MethodHandle)>
<java.lang.invoke.VolatileCallSite: void <init>(java.lang.invoke.MethodHandle)>
<java.nio.charset.MalformedInputException: void <init>(int)>
<java.nio.charset.MalformedInputException: int getInputLength()>
<android.os.RemoteCallback: void <init>(android.os.RemoteCallback.OnResultListener)>
<android.os.RemoteCallback: void <init>(android.os.RemoteCallback.OnResultListener,android.os.Handler)>
<android.os.RemoteCallback: int describeContents()>
<android.os.RemoteCallback: void sendResult(android.os.Bundle)>
<android.os.RemoteCallback: void writeToParcel(android.os.Parcel,int)>
<android.database.AbstractCursor: int getColumnIndex(java.lang.String)>
<android.database.AbstractCursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>
<android.database.AbstractCursor: boolean onMove(int,int)>
<android.database.AbstractCursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)>
<android.database.AbstractCursor: boolean moveToLast()>
<android.database.AbstractCursor: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.database.AbstractCursor: boolean requery()>
<android.database.AbstractCursor: int getPosition()>
<android.database.AbstractCursor: java.lang.String getColumnName(int)>
<android.database.AbstractCursor: boolean moveToPosition(int)>
<android.database.AbstractCursor: void onChange(boolean)>
<android.database.AbstractCursor: int getType(int)>
<android.database.AbstractCursor: android.os.Bundle getExtras()>
<android.database.AbstractCursor: void <init>()>
<android.database.AbstractCursor: void deactivate()>
<android.database.AbstractCursor: void unregisterContentObserver(android.database.ContentObserver)>
<android.database.AbstractCursor: byte[] getBlob(int)>
<android.database.AbstractCursor: java.lang.Object getUpdatedField(int)>
<android.database.AbstractCursor: boolean moveToPrevious()>
<android.database.AbstractCursor: void close()>
<android.database.AbstractCursor: boolean move(int)>
<android.database.AbstractCursor: boolean getWantsAllOnMoveCalls()>
<android.database.AbstractCursor: void checkPosition()>
<android.database.AbstractCursor: android.os.Bundle respond(android.os.Bundle)>
<android.database.AbstractCursor: boolean isFieldUpdated(int)>
<android.database.AbstractCursor: void registerContentObserver(android.database.ContentObserver)>
<android.database.AbstractCursor: boolean moveToNext()>
<android.database.AbstractCursor: void fillWindow(int,android.database.CursorWindow)>
<android.database.AbstractCursor: boolean isFirst()>
<android.database.AbstractCursor: boolean isBeforeFirst()>
<android.database.AbstractCursor: android.database.CursorWindow getWindow()>
<android.database.AbstractCursor: int getColumnCount()>
<android.database.AbstractCursor: boolean isLast()>
<android.database.AbstractCursor: void registerDataSetObserver(android.database.DataSetObserver)>
<android.database.AbstractCursor: boolean isAfterLast()>
<android.database.AbstractCursor: void finalize()>
<android.database.AbstractCursor: boolean isClosed()>
<android.database.AbstractCursor: void setExtras(android.os.Bundle)>
<android.database.AbstractCursor: boolean moveToFirst()>
<android.database.AbstractCursor: int getColumnIndexOrThrow(java.lang.String)>
<android.database.AbstractCursor: android.net.Uri getNotificationUri()>
<android.icu.util.CurrencyAmount: void <init>(Number,java.util.Currency)>
<android.icu.util.CurrencyAmount: android.icu.util.Currency getCurrency()>
<android.icu.util.CurrencyAmount: void <init>(Number,android.icu.util.Currency)>
<android.icu.util.CurrencyAmount: void <init>(double,android.icu.util.Currency)>
<android.icu.util.CurrencyAmount: void <init>(double,java.util.Currency)>
<android.print.PrintAttributes: android.print.PrintAttributes.MediaSize getMediaSize()>
<android.print.PrintAttributes: int getColorMode()>
<android.print.PrintAttributes: android.print.PrintAttributes.Resolution getResolution()>
<android.print.PrintAttributes: void writeToParcel(android.os.Parcel,int)>
<android.print.PrintAttributes: int getDuplexMode()>
<android.print.PrintAttributes: int describeContents()>
<android.print.PrintAttributes: android.print.PrintAttributes.Margins getMinMargins()>
<javax.xml.transform.sax.SAXResult: void setHandler(org.xml.sax.ContentHandler)>
<javax.xml.transform.sax.SAXResult: void <init>()>
<javax.xml.transform.sax.SAXResult: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)>
<javax.xml.transform.sax.SAXResult: void setSystemId(java.lang.String)>
<javax.xml.transform.sax.SAXResult: void <init>(org.xml.sax.ContentHandler)>
<javax.xml.transform.sax.SAXResult: org.xml.sax.ContentHandler getHandler()>
<javax.xml.transform.sax.SAXResult: org.xml.sax.ext.LexicalHandler getLexicalHandler()>
<javax.xml.transform.sax.SAXResult: java.lang.String getSystemId()>
<android.view.textclassifier.ConversationActions.Request.Builder: android.view.textclassifier.ConversationActions.Request.Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.ConversationActions.Request.Builder: android.view.textclassifier.ConversationActions.Request.Builder setMaxSuggestions(int)>
<android.view.textclassifier.ConversationActions.Request.Builder: void <init>(java.util.List)>
<android.view.textclassifier.ConversationActions.Request.Builder: android.view.textclassifier.ConversationActions.Request.Builder setHints(java.util.List)>
<android.view.textclassifier.ConversationActions.Request.Builder: android.view.textclassifier.ConversationActions.Request.Builder setTypeConfig(android.view.textclassifier.TextClassifier.EntityConfig)>
<android.view.textclassifier.ConversationActions.Request.Builder: android.view.textclassifier.ConversationActions.Request build()>
<java.net.ServerSocket: void setSocketFactory(java.net.SocketImplFactory)>
<java.net.ServerSocket: java.net.InetAddress getInetAddress()>
<java.net.ServerSocket: int getSoTimeout()>
<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>
<java.net.ServerSocket: void <init>()>
<java.net.ServerSocket: void close()>
<java.net.ServerSocket: void bind(java.net.SocketAddress)>
<java.net.ServerSocket: java.nio.channels.ServerSocketChannel getChannel()>
<java.net.ServerSocket: void setSoTimeout(int)>
<java.net.ServerSocket: void <init>(int,int)>
<java.net.ServerSocket: java.net.SocketAddress getLocalSocketAddress()>
<java.net.ServerSocket: void setReceiveBufferSize(int)>
<java.net.ServerSocket: int getReceiveBufferSize()>
<java.net.ServerSocket: boolean isBound()>
<java.net.ServerSocket: void <init>(int)>
<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>
<java.net.ServerSocket: void implAccept(java.net.Socket)>
<java.net.ServerSocket: boolean getReuseAddress()>
<java.net.ServerSocket: java.net.Socket accept()>
<java.net.ServerSocket: int getLocalPort()>
<java.net.ServerSocket: boolean isClosed()>
<java.net.ServerSocket: void setPerformancePreferences(int,int,int)>
<java.net.ServerSocket: void setReuseAddress(boolean)>
<android.widget.HorizontalScrollView: int getLeftEdgeEffectColor()>
<android.widget.HorizontalScrollView: void setFillViewport(boolean)>
<android.widget.HorizontalScrollView: int computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect)>
<android.widget.HorizontalScrollView: void setRightEdgeEffectColor(@ColorIntint)>
<android.widget.HorizontalScrollView: void setSmoothScrollingEnabled(boolean)>
<android.widget.HorizontalScrollView: boolean fullScroll(int)>
<android.widget.HorizontalScrollView: boolean executeKeyEvent(android.view.KeyEvent)>
<android.widget.HorizontalScrollView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.HorizontalScrollView: boolean pageScroll(int)>
<android.widget.HorizontalScrollView: void smoothScrollTo(int,int)>
<android.widget.HorizontalScrollView: int getMaxScrollAmount()>
<android.widget.HorizontalScrollView: int getRightEdgeEffectColor()>
<android.widget.HorizontalScrollView: boolean isFillViewport()>
<android.widget.HorizontalScrollView: void smoothScrollBy(int,int)>
<android.widget.HorizontalScrollView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.HorizontalScrollView: void setEdgeEffectColor(@ColorIntint)>
<android.widget.HorizontalScrollView: void fling(int)>
<android.widget.HorizontalScrollView: void <init>(android.content.Context)>
<android.widget.HorizontalScrollView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.HorizontalScrollView: boolean isSmoothScrollingEnabled()>
<android.widget.HorizontalScrollView: boolean arrowScroll(int)>
<android.widget.HorizontalScrollView: void setLeftEdgeEffectColor(@ColorIntint)>
<android.webkit.SslErrorHandler: void <init>()>
<android.webkit.SslErrorHandler: void cancel()>
<android.webkit.SslErrorHandler: void proceed()>
<android.service.textclassifier.TextClassifierService.Callback: void onSuccess(T)>
<android.service.textclassifier.TextClassifierService.Callback: void onFailure(CharSequence)>
<java.time.Duration: int compareTo(java.time.Duration)>
<java.time.Duration: java.time.Duration plusMinutes(long)>
<java.time.Duration: java.time.Duration of(long,java.time.temporal.TemporalUnit)>
<java.time.Duration: java.time.Duration plusNanos(long)>
<java.time.Duration: java.time.Duration minusMinutes(long)>
<java.time.Duration: java.time.Duration minus(java.time.Duration)>
<java.time.Duration: java.time.Duration multipliedBy(long)>
<java.time.Duration: java.util.List getUnits()>
<java.time.Duration: java.time.Duration minusHours(long)>
<java.time.Duration: java.time.Duration ofSeconds(long,long)>
<java.time.Duration: java.time.Duration minusMillis(long)>
<java.time.Duration: long toMinutes()>
<java.time.Duration: java.time.Duration plusSeconds(long)>
<java.time.Duration: long toMillis()>
<java.time.Duration: long toNanos()>
<java.time.Duration: long toHours()>
<java.time.Duration: boolean isZero()>
<java.time.Duration: java.time.Duration parse(CharSequence)>
<java.time.Duration: java.time.Duration between(java.time.temporal.Temporal,java.time.temporal.Temporal)>
<java.time.Duration: java.time.Duration plusDays(long)>
<java.time.Duration: java.time.Duration ofMillis(long)>
<java.time.Duration: java.time.Duration from(java.time.temporal.TemporalAmount)>
<java.time.Duration: java.time.Duration plus(long,java.time.temporal.TemporalUnit)>
<java.time.Duration: java.time.Duration plusHours(long)>
<java.time.Duration: boolean isNegative()>
<java.time.Duration: java.time.Duration withNanos(int)>
<java.time.Duration: long get(java.time.temporal.TemporalUnit)>
<java.time.Duration: java.time.Duration withSeconds(long)>
<java.time.Duration: int getNano()>
<java.time.Duration: java.time.Duration abs()>
<java.time.Duration: java.time.Duration minus(long,java.time.temporal.TemporalUnit)>
<java.time.Duration: java.time.Duration ofNanos(long)>
<java.time.Duration: java.time.Duration plus(java.time.Duration)>
<java.time.Duration: java.time.Duration negated()>
<java.time.Duration: java.time.Duration plusMillis(long)>
<java.time.Duration: java.time.Duration ofHours(long)>
<java.time.Duration: long getSeconds()>
<java.time.Duration: java.time.Duration ofSeconds(long)>
<java.time.Duration: java.time.Duration ofDays(long)>
<java.time.Duration: java.time.Duration ofMinutes(long)>
<java.time.Duration: java.time.Duration dividedBy(long)>
<java.time.Duration: java.time.Duration minusDays(long)>
<java.time.Duration: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>
<java.time.Duration: long toDays()>
<java.time.Duration: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>
<java.time.Duration: java.time.Duration minusSeconds(long)>
<java.time.Duration: java.time.Duration minusNanos(long)>
<java.time.ZoneOffset: java.time.ZoneOffset ofTotalSeconds(int)>
<java.time.ZoneOffset: java.time.zone.ZoneRules getRules()>
<java.time.ZoneOffset: boolean isSupported(java.time.temporal.TemporalField)>
<java.time.ZoneOffset: int compareTo(java.time.ZoneOffset)>
<java.time.ZoneOffset: java.time.ZoneOffset of(java.lang.String)>
<java.time.ZoneOffset: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>
<java.time.ZoneOffset: java.time.ZoneOffset ofHours(int)>
<java.time.ZoneOffset: java.time.ZoneOffset from(java.time.temporal.TemporalAccessor)>
<java.time.ZoneOffset: int getTotalSeconds()>
<java.time.ZoneOffset: java.lang.String getId()>
<java.time.ZoneOffset: long getLong(java.time.temporal.TemporalField)>
<java.time.ZoneOffset: java.time.ZoneOffset ofHoursMinutes(int,int)>
<java.time.ZoneOffset: java.time.ZoneOffset ofHoursMinutesSeconds(int,int,int)>
<android.speech.RecognitionService: void onCancel(android.speech.RecognitionService.Callback)>
<android.speech.RecognitionService: void <init>()>
<android.speech.RecognitionService: void onStopListening(android.speech.RecognitionService.Callback)>
<android.speech.RecognitionService: void onStartListening(android.content.Intent,android.speech.RecognitionService.Callback)>
<android.speech.RecognitionService: android.os.IBinder onBind(android.content.Intent)>
<java.util.concurrent.locks.AbstractOwnableSynchronizer: void <init>()>
<java.util.concurrent.locks.AbstractOwnableSynchronizer: java.lang.Thread getExclusiveOwnerThread()>
<java.util.concurrent.locks.AbstractOwnableSynchronizer: void setExclusiveOwnerThread(java.lang.Thread)>
<android.sax.Element: android.sax.Element getChild(java.lang.String,java.lang.String)>
<android.sax.Element: android.sax.Element requireChild(java.lang.String)>
<android.sax.Element: android.sax.Element requireChild(java.lang.String,java.lang.String)>
<android.sax.Element: void setTextElementListener(android.sax.TextElementListener)>
<android.sax.Element: void setEndElementListener(android.sax.EndElementListener)>
<android.sax.Element: void setEndTextElementListener(android.sax.EndTextElementListener)>
<android.sax.Element: void setElementListener(android.sax.ElementListener)>
<android.sax.Element: void setStartElementListener(android.sax.StartElementListener)>
<android.sax.Element: android.sax.Element getChild(java.lang.String)>
<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>
<java.util.GregorianCalendar: void <init>(int,int,int,int,int)>
<java.util.GregorianCalendar: int getMaximum(int)>
<java.util.GregorianCalendar: int getGreatestMinimum(int)>
<java.util.GregorianCalendar: void setGregorianChange(java.util.Date)>
<java.util.GregorianCalendar: void <init>()>
<java.util.GregorianCalendar: java.time.ZonedDateTime toZonedDateTime()>
<java.util.GregorianCalendar: int getLeastMaximum(int)>
<java.util.GregorianCalendar: void roll(int,boolean)>
<java.util.GregorianCalendar: void <init>(java.util.Locale)>
<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>
<java.util.GregorianCalendar: void <init>(int,int,int)>
<java.util.GregorianCalendar: void computeTime()>
<java.util.GregorianCalendar: java.util.Date getGregorianChange()>
<java.util.GregorianCalendar: int getMinimum(int)>
<java.util.GregorianCalendar: void <init>(int,int,int,int,int,int)>
<java.util.GregorianCalendar: void add(int,int)>
<java.util.GregorianCalendar: boolean isLeapYear(int)>
<java.util.GregorianCalendar: void computeFields()>
<java.util.GregorianCalendar: java.util.GregorianCalendar from(java.time.ZonedDateTime)>
<java.util.GregorianCalendar: boolean isWeekDateSupported()>
<android.text.method.ScrollingMovementMethod: android.text.method.MovementMethod getInstance()>
<android.text.method.ScrollingMovementMethod: void <init>()>
<java.util.concurrent.RecursiveAction: java.lang.Void getRawResult()>
<java.util.concurrent.RecursiveAction: boolean exec()>
<java.util.concurrent.RecursiveAction: void <init>()>
<java.util.concurrent.RecursiveAction: void compute()>
<java.util.concurrent.RecursiveAction: void setRawResult(java.lang.Void)>
<android.view.InflateException: void <init>()>
<android.view.InflateException: void <init>(String,Throwable)>
<android.view.InflateException: void <init>(Throwable)>
<android.view.InflateException: void <init>(String)>
<android.view.WindowManager.LayoutParams: void <init>(int,int,int,int,int,int,int)>
<android.view.WindowManager.LayoutParams: java.lang.String debug(java.lang.String)>
<android.view.WindowManager.LayoutParams: void <init>(int,int,int)>
<android.view.WindowManager.LayoutParams: long getUserActivityTimeout()>
<android.view.WindowManager.LayoutParams: int copyFrom(android.view.WindowManager.LayoutParams)>
<android.view.WindowManager.LayoutParams: int describeContents()>
<android.view.WindowManager.LayoutParams: void setUserActivityTimeout(long)>
<android.view.WindowManager.LayoutParams: void <init>(int,int)>
<android.view.WindowManager.LayoutParams: void <init>(android.os.Parcel)>
<android.view.WindowManager.LayoutParams: void setColorMode(int)>
<android.view.WindowManager.LayoutParams: void <init>(int,int,int,int,int)>
<android.view.WindowManager.LayoutParams: void <init>()>
<android.view.WindowManager.LayoutParams: int getColorMode()>
<android.view.WindowManager.LayoutParams: void setTitle(CharSequence)>
<android.view.WindowManager.LayoutParams: void writeToParcel(android.os.Parcel,int)>
<android.view.WindowManager.LayoutParams: void <init>(int)>
<android.view.WindowManager.LayoutParams: CharSequence getTitle()>
<android.view.WindowManager.LayoutParams: boolean mayUseInputMethod(int)>
<org.xmlpull.v1.XmlPullParserFactory: boolean getFeature(java.lang.String)>
<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParser newPullParser()>
<org.xmlpull.v1.XmlPullParserFactory: void <init>()>
<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParserFactory newInstance(java.lang.String,java.lang.Class)>
<org.xmlpull.v1.XmlPullParserFactory: boolean isNamespaceAware()>
<org.xmlpull.v1.XmlPullParserFactory: boolean isValidating()>
<org.xmlpull.v1.XmlPullParserFactory: void setValidating(boolean)>
<org.xmlpull.v1.XmlPullParserFactory: void setFeature(java.lang.String,boolean)>
<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParserFactory newInstance()>
<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlSerializer newSerializer()>
<org.xmlpull.v1.XmlPullParserFactory: void setNamespaceAware(boolean)>
<android.location.LocationProvider: int getPowerRequirement()>
<android.location.LocationProvider: boolean supportsSpeed()>
<android.location.LocationProvider: boolean requiresNetwork()>
<android.location.LocationProvider: boolean requiresSatellite()>
<android.location.LocationProvider: boolean meetsCriteria(android.location.Criteria)>
<android.location.LocationProvider: int getAccuracy()>
<android.location.LocationProvider: boolean supportsBearing()>
<android.location.LocationProvider: boolean supportsAltitude()>
<android.location.LocationProvider: java.lang.String getName()>
<android.location.LocationProvider: boolean hasMonetaryCost()>
<android.location.LocationProvider: boolean requiresCell()>
<android.media.effect.EffectContext: android.media.effect.EffectFactory getFactory()>
<android.media.effect.EffectContext: android.media.effect.EffectContext createWithCurrentGlContext()>
<android.media.effect.EffectContext: void release()>
<android.hardware.radio.RadioManager.ProgramInfo: android.hardware.radio.ProgramSelector.Identifier getPhysicallyTunedTo()>
<android.hardware.radio.RadioManager.ProgramInfo: void writeToParcel(android.os.Parcel,int)>
<android.hardware.radio.RadioManager.ProgramInfo: android.hardware.radio.ProgramSelector getSelector()>
<android.hardware.radio.RadioManager.ProgramInfo: int describeContents()>
<android.hardware.radio.RadioManager.ProgramInfo: int getSignalStrength()>
<android.hardware.radio.RadioManager.ProgramInfo: boolean isLive()>
<android.hardware.radio.RadioManager.ProgramInfo: boolean isDigital()>
<android.hardware.radio.RadioManager.ProgramInfo: boolean isMuted()>
<android.hardware.radio.RadioManager.ProgramInfo: int getChannel()>
<android.hardware.radio.RadioManager.ProgramInfo: java.util.Map getVendorInfo()>
<android.hardware.radio.RadioManager.ProgramInfo: int getSubChannel()>
<android.hardware.radio.RadioManager.ProgramInfo: boolean isStereo()>
<android.hardware.radio.RadioManager.ProgramInfo: android.hardware.radio.RadioMetadata getMetadata()>
<android.hardware.radio.RadioManager.ProgramInfo: java.util.Collection getRelatedContent()>
<android.hardware.radio.RadioManager.ProgramInfo: boolean isTrafficAnnouncementActive()>
<android.hardware.radio.RadioManager.ProgramInfo: android.hardware.radio.ProgramSelector.Identifier getLogicallyTunedTo()>
<android.hardware.radio.RadioManager.ProgramInfo: boolean isTrafficProgram()>
<android.hardware.radio.RadioManager.ProgramInfo: boolean isTuned()>
<java.nio.channels.IllegalChannelGroupException: void <init>()>
<java.nio.channels.AsynchronousChannelGroup: void <init>(java.nio.channels.spi.AsynchronousChannelProvider)>
<java.nio.channels.AsynchronousChannelGroup: java.nio.channels.AsynchronousChannelGroup withThreadPool(java.util.concurrent.ExecutorService)>
<java.nio.channels.AsynchronousChannelGroup: boolean isShutdown()>
<java.nio.channels.AsynchronousChannelGroup: java.nio.channels.spi.AsynchronousChannelProvider provider()>
<java.nio.channels.AsynchronousChannelGroup: java.nio.channels.AsynchronousChannelGroup withCachedThreadPool(java.util.concurrent.ExecutorService,int)>
<java.nio.channels.AsynchronousChannelGroup: boolean isTerminated()>
<java.nio.channels.AsynchronousChannelGroup: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>
<java.nio.channels.AsynchronousChannelGroup: void shutdownNow()>
<java.nio.channels.AsynchronousChannelGroup: void shutdown()>
<java.nio.channels.AsynchronousChannelGroup: java.nio.channels.AsynchronousChannelGroup withFixedThreadPool(int,java.util.concurrent.ThreadFactory)>
<javax.sql.CommonDataSource: int getLoginTimeout()>
<javax.sql.CommonDataSource: void setLoginTimeout(int)>
<javax.sql.CommonDataSource: java.io.PrintWriter getLogWriter()>
<javax.sql.CommonDataSource: void setLogWriter(java.io.PrintWriter)>
<javax.sql.CommonDataSource: java.util.logging.Logger getParentLogger()>
<android.printservice.PrintJob: boolean complete()>
<android.printservice.PrintJob: int getAdvancedIntOption(java.lang.String)>
<android.printservice.PrintJob: java.lang.String getAdvancedStringOption(java.lang.String)>
<android.printservice.PrintJob: void setStatus(@StringResint)>
<android.printservice.PrintJob: boolean fail(java.lang.String)>
<android.printservice.PrintJob: boolean isCancelled()>
<android.printservice.PrintJob: boolean isQueued()>
<android.printservice.PrintJob: boolean isFailed()>
<android.printservice.PrintJob: android.print.PrintJobInfo getInfo()>
<android.printservice.PrintJob: boolean isStarted()>
<android.printservice.PrintJob: boolean block(java.lang.String)>
<android.printservice.PrintJob: boolean hasAdvancedOption(java.lang.String)>
<android.printservice.PrintJob: void setStatus(CharSequence)>
<android.printservice.PrintJob: boolean cancel()>
<android.printservice.PrintJob: android.printservice.PrintDocument getDocument()>
<android.printservice.PrintJob: boolean isCompleted()>
<android.printservice.PrintJob: void setProgress(float)>
<android.printservice.PrintJob: boolean setTag(java.lang.String)>
<android.printservice.PrintJob: boolean start()>
<android.printservice.PrintJob: android.print.PrintJobId getId()>
<android.printservice.PrintJob: java.lang.String getTag()>
<android.printservice.PrintJob: boolean isBlocked()>
<android.preference.PreferenceCategory: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.PreferenceCategory: void <init>(android.content.Context)>
<android.preference.PreferenceCategory: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.PreferenceCategory: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<java.nio.channels.Selector: java.nio.channels.Selector wakeup()>
<java.nio.channels.Selector: int select()>
<java.nio.channels.Selector: java.util.Set keys()>
<java.nio.channels.Selector: void <init>()>
<java.nio.channels.Selector: java.nio.channels.Selector open()>
<java.nio.channels.Selector: int select(long)>
<java.nio.channels.Selector: java.nio.channels.spi.SelectorProvider provider()>
<java.nio.channels.Selector: java.util.Set selectedKeys()>
<java.nio.channels.Selector: boolean isOpen()>
<java.nio.channels.Selector: int selectNow()>
<java.util.function.DoubleFunction: R apply(double)>
<android.security.ConfirmationNotAvailableException: void <init>()>
<android.security.ConfirmationNotAvailableException: void <init>(String)>
<android.os.RemoteException: void <init>()>
<android.os.RemoteException: void <init>(String)>
<android.telephony.TelephonyManager.CellInfoCallback: void onCellInfo(java.util.List)>
<android.telephony.TelephonyManager.CellInfoCallback: void onError(int,java.lang.Throwable)>
<android.telephony.TelephonyManager.CellInfoCallback: void <init>()>
<android.media.tv.TvContentRatingSystemInfo: void writeToParcel(android.os.Parcel,int)>
<android.media.tv.TvContentRatingSystemInfo: android.net.Uri getXmlUri()>
<android.media.tv.TvContentRatingSystemInfo: android.media.tv.TvContentRatingSystemInfo createTvContentRatingSystemInfo(int,android.content.pm.ApplicationInfo)>
<android.media.tv.TvContentRatingSystemInfo: int describeContents()>
<android.media.tv.TvContentRatingSystemInfo: boolean isSystemDefined()>
<android.database.sqlite.SQLiteTransactionListener: void onCommit()>
<android.database.sqlite.SQLiteTransactionListener: void onBegin()>
<android.database.sqlite.SQLiteTransactionListener: void onRollback()>
<org.xml.sax.Locator: int getLineNumber()>
<org.xml.sax.Locator: java.lang.String getSystemId()>
<org.xml.sax.Locator: int getColumnNumber()>
<org.xml.sax.Locator: java.lang.String getPublicId()>
<android.text.SpannableStringBuilder: android.text.InputFilter[] getFilters()>
<android.text.SpannableStringBuilder: int getSpanFlags(java.lang.Object)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(CharSequence,int,int)>
<android.text.SpannableStringBuilder: void clearSpans()>
<android.text.SpannableStringBuilder: int nextSpanTransition(int,int,java.lang.Class)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder delete(int,int)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(CharSequence)>
<android.text.SpannableStringBuilder: void <init>(CharSequence,int,int)>
<android.text.SpannableStringBuilder: void clear()>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,CharSequence)>
<android.text.SpannableStringBuilder: int getTextWatcherDepth()>
<android.text.SpannableStringBuilder: void <init>(CharSequence)>
<android.text.SpannableStringBuilder: char charAt(int)>
<android.text.SpannableStringBuilder: void removeSpan(java.lang.Object)>
<android.text.SpannableStringBuilder: int length()>
<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>
<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>
<android.text.SpannableStringBuilder: CharSequence subSequence(int,int)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,CharSequence,int,int)>
<android.text.SpannableStringBuilder: void getChars(int,int,char[],int)>
<android.text.SpannableStringBuilder: void <init>()>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(CharSequence,java.lang.Object,int)>
<android.text.SpannableStringBuilder: int getTextRunCursor(int,int,int,int,int,android.graphics.Paint)>
<android.text.SpannableStringBuilder: int getSpanEnd(java.lang.Object)>
<android.text.SpannableStringBuilder: void setFilters(android.text.InputFilter[])>
<android.text.SpannableStringBuilder: T[] getSpans(int,int,java.lang.Class)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(char)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,CharSequence,int,int)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder valueOf(CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,CharSequence)>
<java.util.StringTokenizer: int countTokens()>
<java.util.StringTokenizer: void <init>(String)>
<java.util.StringTokenizer: void <init>(String,String,boolean)>
<java.util.StringTokenizer: boolean hasMoreElements()>
<java.util.StringTokenizer: boolean hasMoreTokens()>
<java.util.StringTokenizer: java.lang.Object nextElement()>
<java.util.StringTokenizer: java.lang.String nextToken(java.lang.String)>
<java.util.StringTokenizer: java.lang.String nextToken()>
<java.util.StringTokenizer: void <init>(String,String)>
<android.app.StatsManager.StatsUnavailableException: void <init>(String,Throwable)>
<android.app.StatsManager.StatsUnavailableException: void <init>(String)>
<android.webkit.WebViewProvider.ScrollDelegate: int computeHorizontalScrollOffset()>
<android.webkit.WebViewProvider.ScrollDelegate: int computeVerticalScrollExtent()>
<android.webkit.WebViewProvider.ScrollDelegate: int computeHorizontalScrollRange()>
<android.webkit.WebViewProvider.ScrollDelegate: int computeVerticalScrollOffset()>
<android.webkit.WebViewProvider.ScrollDelegate: int computeVerticalScrollRange()>
<android.webkit.WebViewProvider.ScrollDelegate: void computeScroll()>
<java.security.KeyStore.LoadStoreParameter: java.security.KeyStore.ProtectionParameter getProtectionParameter()>
<android.net.NetworkRequest.Builder: android.net.NetworkRequest.Builder addCapability(int)>
<android.net.NetworkRequest.Builder: void <init>()>
<android.net.NetworkRequest.Builder: android.net.NetworkRequest.Builder removeCapability(int)>
<android.net.NetworkRequest.Builder: android.net.NetworkRequest.Builder addTransportType(int)>
<android.net.NetworkRequest.Builder: android.net.NetworkRequest.Builder removeTransportType(int)>
<android.net.NetworkRequest.Builder: android.net.NetworkRequest build()>
<android.net.NetworkRequest.Builder: android.net.NetworkRequest.Builder setSignalStrength(int)>
<android.net.NetworkRequest.Builder: android.net.NetworkRequest.Builder setNetworkSpecifier(java.lang.String)>
<android.net.NetworkRequest.Builder: android.net.NetworkRequest.Builder setNetworkSpecifier(android.net.NetworkSpecifier)>
<java.security.SecurityPermission: void <init>(String)>
<java.security.SecurityPermission: void <init>(String,String)>
<android.os.health.HealthStatsParceler: void writeToParcel(android.os.Parcel,int)>
<android.os.health.HealthStatsParceler: android.os.health.HealthStats getHealthStats()>
<android.os.health.HealthStatsParceler: int describeContents()>
<android.os.health.HealthStatsParceler: void <init>(android.os.health.HealthStatsWriter)>
<android.os.health.HealthStatsParceler: void <init>(android.os.Parcel)>
<android.content.pm.InstantAppInfo: void <init>(android.content.pm.ApplicationInfo,String[],String[])>
<android.content.pm.InstantAppInfo: java.lang.String[] getRequestedPermissions()>
<android.content.pm.InstantAppInfo: java.lang.String[] getGrantedPermissions()>
<android.content.pm.InstantAppInfo: void <init>(String,CharSequence,String[],String[])>
<android.content.pm.InstantAppInfo: CharSequence loadLabel(android.content.pm.PackageManager)>
<android.content.pm.InstantAppInfo: int describeContents()>
<android.content.pm.InstantAppInfo: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.content.pm.InstantAppInfo: java.lang.String getPackageName()>
<android.content.pm.InstantAppInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.content.pm.InstantAppInfo: void writeToParcel(android.os.Parcel,int)>
<javax.xml.transform.TransformerConfigurationException: void <init>(Throwable)>
<javax.xml.transform.TransformerConfigurationException: void <init>(String)>
<javax.xml.transform.TransformerConfigurationException: void <init>(String,javax.xml.transform.SourceLocator,Throwable)>
<javax.xml.transform.TransformerConfigurationException: void <init>()>
<javax.xml.transform.TransformerConfigurationException: void <init>(String,Throwable)>
<javax.xml.transform.TransformerConfigurationException: void <init>(String,javax.xml.transform.SourceLocator)>
<android.hardware.Camera.ErrorCallback: void onError(int,android.hardware.Camera)>
<android.telephony.ims.ImsCallForwardInfo: int getServiceClass()>
<android.telephony.ims.ImsCallForwardInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ims.ImsCallForwardInfo: int describeContents()>
<android.telephony.ims.ImsCallForwardInfo: int getCondition()>
<android.telephony.ims.ImsCallForwardInfo: int getStatus()>
<android.telephony.ims.ImsCallForwardInfo: java.lang.String getNumber()>
<android.telephony.ims.ImsCallForwardInfo: void <init>(int,int,int,int,String,int)>
<android.telephony.ims.ImsCallForwardInfo: int getTimeSeconds()>
<android.telephony.ims.ImsCallForwardInfo: int getToA()>
<org.xml.sax.helpers.XMLFilterImpl: void parse(org.xml.sax.InputSource)>
<org.xml.sax.helpers.XMLFilterImpl: void setDocumentLocator(org.xml.sax.Locator)>
<org.xml.sax.helpers.XMLFilterImpl: void setEntityResolver(org.xml.sax.EntityResolver)>
<org.xml.sax.helpers.XMLFilterImpl: void error(org.xml.sax.SAXParseException)>
<org.xml.sax.helpers.XMLFilterImpl: void <init>()>
<org.xml.sax.helpers.XMLFilterImpl: void startDocument()>
<org.xml.sax.helpers.XMLFilterImpl: org.xml.sax.DTDHandler getDTDHandler()>
<org.xml.sax.helpers.XMLFilterImpl: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: void setProperty(java.lang.String,java.lang.Object)>
<org.xml.sax.helpers.XMLFilterImpl: void startPrefixMapping(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: org.xml.sax.XMLReader getParent()>
<org.xml.sax.helpers.XMLFilterImpl: java.lang.Object getProperty(java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: void endElement(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: void setParent(org.xml.sax.XMLReader)>
<org.xml.sax.helpers.XMLFilterImpl: void skippedEntity(java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: void setFeature(java.lang.String,boolean)>
<org.xml.sax.helpers.XMLFilterImpl: void characters(char[],int,int)>
<org.xml.sax.helpers.XMLFilterImpl: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: void endPrefixMapping(java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: org.xml.sax.EntityResolver getEntityResolver()>
<org.xml.sax.helpers.XMLFilterImpl: void fatalError(org.xml.sax.SAXParseException)>
<org.xml.sax.helpers.XMLFilterImpl: void parse(java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: org.xml.sax.ErrorHandler getErrorHandler()>
<org.xml.sax.helpers.XMLFilterImpl: void endDocument()>
<org.xml.sax.helpers.XMLFilterImpl: void processingInstruction(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: void <init>(org.xml.sax.XMLReader)>
<org.xml.sax.helpers.XMLFilterImpl: void ignorableWhitespace(char[],int,int)>
<org.xml.sax.helpers.XMLFilterImpl: void setContentHandler(org.xml.sax.ContentHandler)>
<org.xml.sax.helpers.XMLFilterImpl: org.xml.sax.ContentHandler getContentHandler()>
<org.xml.sax.helpers.XMLFilterImpl: void warning(org.xml.sax.SAXParseException)>
<org.xml.sax.helpers.XMLFilterImpl: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>
<org.xml.sax.helpers.XMLFilterImpl: void setErrorHandler(org.xml.sax.ErrorHandler)>
<org.xml.sax.helpers.XMLFilterImpl: boolean getFeature(java.lang.String)>
<org.xml.sax.helpers.XMLFilterImpl: void setDTDHandler(org.xml.sax.DTDHandler)>
<org.xml.sax.helpers.XMLFilterImpl: void notationDecl(java.lang.String,java.lang.String,java.lang.String)>
<android.net.TestNetworkManager: android.net.TestNetworkInterface createTunInterface(android.net.LinkAddress[])>
<android.net.TestNetworkManager: android.net.TestNetworkInterface createTapInterface()>
<android.net.TestNetworkManager: void teardownTestNetwork(android.net.Network)>
<android.net.TestNetworkManager: void setupTestNetwork(java.lang.String,android.os.IBinder)>
<java.io.InputStreamReader: void close()>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)>
<java.io.InputStreamReader: void <init>(java.io.InputStream)>
<java.io.InputStreamReader: java.lang.String getEncoding()>
<java.io.InputStreamReader: void <init>(java.io.InputStream,String)>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>
<java.io.InputStreamReader: int read(char[],int,int)>
<android.os.BugreportManager: void startBugreport(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.BugreportParams,java.util.concurrent.Executor,android.os.BugreportManager.BugreportCallback)>
<android.os.BugreportManager: void cancelBugreport()>
<android.view.WindowManager extends android.view.ViewManager: android.graphics.Region getCurrentImeTouchRegion()>
<android.view.WindowManager extends android.view.ViewManager: android.view.Display getDefaultDisplay()>
<android.view.WindowManager extends android.view.ViewManager: void removeViewImmediate(android.view.View)>
<android.view.WindowManager extends android.view.ViewManager: void setShouldShowWithInsecureKeyguard(int,boolean)>
<android.view.WindowManager extends android.view.ViewManager: boolean shouldShowIme(int)>
<android.view.WindowManager extends android.view.ViewManager: void setShouldShowIme(int,boolean)>
<android.view.WindowManager extends android.view.ViewManager: void setShouldShowSystemDecors(int,boolean)>
<android.view.WindowManager extends android.view.ViewManager: boolean shouldShowSystemDecors(int)>
<android.media.browse.MediaBrowser.SubscriptionCallback: void onChildrenLoaded(java.lang.String,java.util.List)>
<android.media.browse.MediaBrowser.SubscriptionCallback: void <init>()>
<android.media.browse.MediaBrowser.SubscriptionCallback: void onError(java.lang.String)>
<android.media.browse.MediaBrowser.SubscriptionCallback: void onChildrenLoaded(java.lang.String,java.util.List,android.os.Bundle)>
<android.media.browse.MediaBrowser.SubscriptionCallback: void onError(java.lang.String,android.os.Bundle)>
<android.text.LoginFilter.PasswordFilterGMail: void <init>()>
<android.text.LoginFilter.PasswordFilterGMail: boolean isAllowed(char)>
<android.text.LoginFilter.PasswordFilterGMail: void <init>(boolean)>
<java.util.concurrent.atomic.AtomicLong: long longValue()>
<java.util.concurrent.atomic.AtomicLong: void set(long)>
<java.util.concurrent.atomic.AtomicLong: long accumulateAndGet(long,java.util.function.LongBinaryOperator)>
<java.util.concurrent.atomic.AtomicLong: int intValue()>
<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>
<java.util.concurrent.atomic.AtomicLong: double doubleValue()>
<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>
<java.util.concurrent.atomic.AtomicLong: long getAndDecrement()>
<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>
<java.util.concurrent.atomic.AtomicLong: void <init>(long)>
<java.util.concurrent.atomic.AtomicLong: void lazySet(long)>
<java.util.concurrent.atomic.AtomicLong: long getAndUpdate(java.util.function.LongUnaryOperator)>
<java.util.concurrent.atomic.AtomicLong: float floatValue()>
<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>
<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>
<java.util.concurrent.atomic.AtomicLong: long getAndAccumulate(long,java.util.function.LongBinaryOperator)>
<java.util.concurrent.atomic.AtomicLong: boolean weakCompareAndSet(long,long)>
<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>
<java.util.concurrent.atomic.AtomicLong: long get()>
<java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>
<java.util.concurrent.atomic.AtomicLong: void <init>()>
<java.util.concurrent.atomic.AtomicLong: long updateAndGet(java.util.function.LongUnaryOperator)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getAllButNulAndAngleBracketsLegal()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getAmpLegal()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getSpaceLegal()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getAllButNulLegal()>
<android.net.UrlQuerySanitizer: java.util.List getParameterList()>
<android.net.UrlQuerySanitizer: void parseUrl(java.lang.String)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getUrlLegal()>
<android.net.UrlQuerySanitizer: void addSanitizedEntry(java.lang.String,java.lang.String)>
<android.net.UrlQuerySanitizer: void setAllowUnregisteredParamaters(boolean)>
<android.net.UrlQuerySanitizer: int decodeHexDigit(char)>
<android.net.UrlQuerySanitizer: void setUnregisteredParameterValueSanitizer(android.net.UrlQuerySanitizer.ValueSanitizer)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getEffectiveValueSanitizer(java.lang.String)>
<android.net.UrlQuerySanitizer: void registerParameters(java.lang.String[],android.net.UrlQuerySanitizer.ValueSanitizer)>
<android.net.UrlQuerySanitizer: java.lang.String unescape(java.lang.String)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getUnregisteredParameterValueSanitizer()>
<android.net.UrlQuerySanitizer: void <init>()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getAllButWhitespaceLegal()>
<android.net.UrlQuerySanitizer: void parseQuery(java.lang.String)>
<android.net.UrlQuerySanitizer: java.util.Set getParameterSet()>
<android.net.UrlQuerySanitizer: boolean getPreferFirstRepeatedParameter()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getValueSanitizer(java.lang.String)>
<android.net.UrlQuerySanitizer: void registerParameter(java.lang.String,android.net.UrlQuerySanitizer.ValueSanitizer)>
<android.net.UrlQuerySanitizer: void setPreferFirstRepeatedParameter(boolean)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getAllIllegal()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getAmpAndSpaceLegal()>
<android.net.UrlQuerySanitizer: java.lang.String getValue(java.lang.String)>
<android.net.UrlQuerySanitizer: boolean hasParameter(java.lang.String)>
<android.net.UrlQuerySanitizer: void clear()>
<android.net.UrlQuerySanitizer: boolean isHexDigit(char)>
<android.net.UrlQuerySanitizer: boolean getAllowUnregisteredParamaters()>
<android.net.UrlQuerySanitizer: void parseEntry(java.lang.String,java.lang.String)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer.ValueSanitizer getUrlAndSpaceLegal()>
<android.net.UrlQuerySanitizer: void <init>(String)>
<android.hardware.soundtrigger.SoundTrigger.RecognitionEvent: android.media.AudioFormat getCaptureFormat()>
<android.hardware.soundtrigger.SoundTrigger.RecognitionEvent: boolean isCaptureAvailable()>
<android.hardware.soundtrigger.SoundTrigger.RecognitionEvent: int getCaptureSession()>
<android.hardware.soundtrigger.SoundTrigger.RecognitionEvent: byte[] getData()>
<android.net.wifi.p2p.WifiP2pConfig: int describeContents()>
<android.net.wifi.p2p.WifiP2pConfig: void <init>(android.net.wifi.p2p.WifiP2pConfig)>
<android.net.wifi.p2p.WifiP2pConfig: void <init>()>
<android.net.wifi.p2p.WifiP2pConfig: void writeToParcel(android.os.Parcel,int)>
<java.util.function.LongUnaryOperator: java.util.function.LongUnaryOperator identity()>
<java.util.function.LongUnaryOperator: java.util.function.LongUnaryOperator andThen(java.util.function.LongUnaryOperator)>
<java.util.function.LongUnaryOperator: java.util.function.LongUnaryOperator compose(java.util.function.LongUnaryOperator)>
<java.util.function.LongUnaryOperator: long applyAsLong(long)>
<android.provider.CallLog.Calls: void <init>()>
<android.provider.CallLog.Calls: java.lang.String getLastOutgoingCall(android.content.Context)>
<android.media.AudioPlaybackConfiguration: int getPlayerInterfaceId()>
<android.media.AudioPlaybackConfiguration: int getPlayerState()>
<android.media.AudioPlaybackConfiguration: int describeContents()>
<android.media.AudioPlaybackConfiguration: int getClientPid()>
<android.media.AudioPlaybackConfiguration: void writeToParcel(android.os.Parcel,int)>
<android.media.AudioPlaybackConfiguration: int getPlayerType()>
<android.media.AudioPlaybackConfiguration: android.media.PlayerProxy getPlayerProxy()>
<android.media.AudioPlaybackConfiguration: android.media.AudioAttributes getAudioAttributes()>
<android.media.AudioPlaybackConfiguration: int getClientUid()>
<android.service.autofill.DateTransformation: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.DateTransformation: void <init>(android.view.autofill.AutofillId,android.icu.text.DateFormat)>
<android.service.autofill.DateTransformation: int describeContents()>
<android.service.autofill.DateTransformation: void apply(android.service.autofill.ValueFinder,android.widget.RemoteViews,int)>
<android.service.watchdog.ExplicitHealthCheckService: void onCancelHealthCheck(java.lang.String)>
<android.service.watchdog.ExplicitHealthCheckService: void notifyHealthCheckPassed(java.lang.String)>
<android.service.watchdog.ExplicitHealthCheckService: android.os.IBinder onBind(android.content.Intent)>
<android.service.watchdog.ExplicitHealthCheckService: void onRequestHealthCheck(java.lang.String)>
<android.service.watchdog.ExplicitHealthCheckService: java.util.List onGetRequestedPackages()>
<android.service.watchdog.ExplicitHealthCheckService: java.util.List onGetSupportedPackages()>
<android.service.watchdog.ExplicitHealthCheckService: void <init>()>
<java.util.Spliterators: java.util.Iterator iterator(java.util.Spliterator)>
<java.util.Spliterators: java.util.Spliterator spliterator(java.util.Collection,int)>
<java.util.Spliterators: java.util.Spliterator.OfDouble spliteratorUnknownSize(java.util.PrimitiveIterator.OfDouble,int)>
<java.util.Spliterators: java.util.Spliterator spliterator(java.lang.Object[],int)>
<java.util.Spliterators: java.util.Spliterator.OfInt spliterator(int[],int)>
<java.util.Spliterators: java.util.Spliterator.OfLong spliterator(long[],int,int,int)>
<java.util.Spliterators: java.util.Spliterator.OfDouble spliterator(double[],int,int,int)>
<java.util.Spliterators: java.util.Spliterator.OfInt spliterator(int[],int,int,int)>
<java.util.Spliterators: java.util.Spliterator.OfLong spliterator(java.util.PrimitiveIterator.OfLong,long,int)>
<java.util.Spliterators: java.util.Spliterator.OfLong spliteratorUnknownSize(java.util.PrimitiveIterator.OfLong,int)>
<java.util.Spliterators: java.util.Spliterator.OfInt emptyIntSpliterator()>
<java.util.Spliterators: java.util.Spliterator.OfLong spliterator(long[],int)>
<java.util.Spliterators: java.util.Spliterator spliteratorUnknownSize(java.util.Iterator,int)>
<java.util.Spliterators: java.util.Spliterator.OfLong emptyLongSpliterator()>
<java.util.Spliterators: java.util.Spliterator.OfDouble spliterator(double[],int)>
<java.util.Spliterators: java.util.Spliterator.OfDouble spliterator(java.util.PrimitiveIterator.OfDouble,long,int)>
<java.util.Spliterators: java.util.Spliterator spliterator(java.util.Iterator,long,int)>
<java.util.Spliterators: java.util.Spliterator emptySpliterator()>
<java.util.Spliterators: java.util.Spliterator.OfDouble emptyDoubleSpliterator()>
<java.util.Spliterators: java.util.PrimitiveIterator.OfInt iterator(java.util.Spliterator.OfInt)>
<java.util.Spliterators: java.util.Spliterator.OfInt spliteratorUnknownSize(java.util.PrimitiveIterator.OfInt,int)>
<java.util.Spliterators: java.util.PrimitiveIterator.OfDouble iterator(java.util.Spliterator.OfDouble)>
<java.util.Spliterators: java.util.Spliterator.OfInt spliterator(java.util.PrimitiveIterator.OfInt,long,int)>
<java.util.Spliterators: java.util.PrimitiveIterator.OfLong iterator(java.util.Spliterator.OfLong)>
<java.util.Spliterators: java.util.Spliterator spliterator(java.lang.Object[],int,int,int)>
<android.net.wifi.aware.WifiAwareNetworkInfo: int getTransportProtocol()>
<android.net.wifi.aware.WifiAwareNetworkInfo: java.net.Inet6Address getPeerIpv6Addr()>
<android.net.wifi.aware.WifiAwareNetworkInfo: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.aware.WifiAwareNetworkInfo: int describeContents()>
<android.net.wifi.aware.WifiAwareNetworkInfo: int getPort()>
<android.app.LauncherActivity.IconResizer: void <init>()>
<android.app.LauncherActivity.IconResizer: android.graphics.drawable.Drawable createIconThumbnail(android.graphics.drawable.Drawable)>
<android.widget.SearchView.OnSuggestionListener: boolean onSuggestionSelect(int)>
<android.widget.SearchView.OnSuggestionListener: boolean onSuggestionClick(int)>
<java.util.Spliterators.AbstractLongSpliterator: int characteristics()>
<java.util.Spliterators.AbstractLongSpliterator: void <init>(long,int)>
<java.util.Spliterators.AbstractLongSpliterator: java.util.Spliterator.OfLong trySplit()>
<java.util.Spliterators.AbstractLongSpliterator: long estimateSize()>
<android.location.GnssClock: double getBiasUncertaintyNanos()>
<android.location.GnssClock: long getTimeNanos()>
<android.location.GnssClock: void resetBiasUncertaintyNanos()>
<android.location.GnssClock: long getElapsedRealtimeNanos()>
<android.location.GnssClock: boolean hasElapsedRealtimeNanos()>
<android.location.GnssClock: void setLeapSecond(int)>
<android.location.GnssClock: void setFullBiasNanos(long)>
<android.location.GnssClock: void setTimeUncertaintyNanos(double)>
<android.location.GnssClock: double getDriftNanosPerSecond()>
<android.location.GnssClock: void reset()>
<android.location.GnssClock: boolean hasBiasUncertaintyNanos()>
<android.location.GnssClock: void resetLeapSecond()>
<android.location.GnssClock: void setDriftUncertaintyNanosPerSecond(double)>
<android.location.GnssClock: void resetElapsedRealtimeNanos()>
<android.location.GnssClock: boolean hasBiasNanos()>
<android.location.GnssClock: boolean hasLeapSecond()>
<android.location.GnssClock: void setHardwareClockDiscontinuityCount(int)>
<android.location.GnssClock: void set(android.location.GnssClock)>
<android.location.GnssClock: int getLeapSecond()>
<android.location.GnssClock: void setBiasUncertaintyNanos(double)>
<android.location.GnssClock: int getHardwareClockDiscontinuityCount()>
<android.location.GnssClock: double getDriftUncertaintyNanosPerSecond()>
<android.location.GnssClock: void <init>()>
<android.location.GnssClock: double getTimeUncertaintyNanos()>
<android.location.GnssClock: void setDriftNanosPerSecond(double)>
<android.location.GnssClock: double getElapsedRealtimeUncertaintyNanos()>
<android.location.GnssClock: double getBiasNanos()>
<android.location.GnssClock: boolean hasDriftUncertaintyNanosPerSecond()>
<android.location.GnssClock: boolean hasFullBiasNanos()>
<android.location.GnssClock: int describeContents()>
<android.location.GnssClock: void setElapsedRealtimeNanos(long)>
<android.location.GnssClock: boolean hasElapsedRealtimeUncertaintyNanos()>
<android.location.GnssClock: long getFullBiasNanos()>
<android.location.GnssClock: void setBiasNanos(double)>
<android.location.GnssClock: void setTimeNanos(long)>
<android.location.GnssClock: void setElapsedRealtimeUncertaintyNanos(double)>
<android.location.GnssClock: boolean hasDriftNanosPerSecond()>
<android.location.GnssClock: boolean hasTimeUncertaintyNanos()>
<android.location.GnssClock: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssClock: void resetDriftUncertaintyNanosPerSecond()>
<android.location.GnssClock: void resetTimeUncertaintyNanos()>
<android.location.GnssClock: void resetBiasNanos()>
<android.location.GnssClock: void resetDriftNanosPerSecond()>
<android.location.GnssClock: void resetFullBiasNanos()>
<android.location.GnssClock: void resetElapsedRealtimeUncertaintyNanos()>
<android.os.IHwBinder: void transact(int,android.os.HwParcel,android.os.HwParcel,int)>
<android.os.IHwBinder: boolean linkToDeath(android.os.IHwBinder.DeathRecipient,long)>
<android.os.IHwBinder: android.os.IHwInterface queryLocalInterface(java.lang.String)>
<android.os.IHwBinder: boolean unlinkToDeath(android.os.IHwBinder.DeathRecipient)>
<android.app.DatePickerDialog: android.widget.DatePicker getDatePicker()>
<android.app.DatePickerDialog: void onClick(android.content.DialogInterface,int)>
<android.app.DatePickerDialog: void onDateChanged(android.widget.DatePicker,int,int,int)>
<android.app.DatePickerDialog: void setOnDateSetListener(android.app.DatePickerDialog.OnDateSetListener)>
<android.app.DatePickerDialog: void <init>(android.content.Context)>
<android.app.DatePickerDialog: void <init>(android.content.Context,android.app.DatePickerDialog.OnDateSetListener,int,int,int)>
<android.app.DatePickerDialog: void <init>(android.content.Context,@StyleRes int,android.app.DatePickerDialog.OnDateSetListener,int,int,int)>
<android.app.DatePickerDialog: void updateDate(int,int,int)>
<android.app.DatePickerDialog: void <init>(android.content.Context,@StyleRes int)>
<org.xml.sax.helpers.LocatorImpl: java.lang.String getPublicId()>
<org.xml.sax.helpers.LocatorImpl: void setColumnNumber(int)>
<org.xml.sax.helpers.LocatorImpl: void setLineNumber(int)>
<org.xml.sax.helpers.LocatorImpl: int getLineNumber()>
<org.xml.sax.helpers.LocatorImpl: void <init>(org.xml.sax.Locator)>
<org.xml.sax.helpers.LocatorImpl: void setPublicId(java.lang.String)>
<org.xml.sax.helpers.LocatorImpl: java.lang.String getSystemId()>
<org.xml.sax.helpers.LocatorImpl: void setSystemId(java.lang.String)>
<org.xml.sax.helpers.LocatorImpl: void <init>()>
<org.xml.sax.helpers.LocatorImpl: int getColumnNumber()>
<android.hardware.radio.RadioManager: void addAnnouncementListener(java.util.concurrent.Executor,java.util.Set,android.hardware.radio.Announcement.OnListUpdatedListener)>
<android.hardware.radio.RadioManager: void addAnnouncementListener(java.util.Set,android.hardware.radio.Announcement.OnListUpdatedListener)>
<android.hardware.radio.RadioManager: android.hardware.radio.RadioTuner openTuner(int,android.hardware.radio.RadioManager.BandConfig,boolean,android.hardware.radio.RadioTuner.Callback,android.os.Handler)>
<android.hardware.radio.RadioManager: int listModules(java.util.List)>
<android.hardware.radio.RadioManager: void removeAnnouncementListener(android.hardware.radio.Announcement.OnListUpdatedListener)>
<android.telephony.VisualVoicemailSms: java.lang.String getPrefix()>
<android.telephony.VisualVoicemailSms: android.os.Bundle getFields()>
<android.telephony.VisualVoicemailSms: int describeContents()>
<android.telephony.VisualVoicemailSms: java.lang.String getMessageBody()>
<android.telephony.VisualVoicemailSms: android.telecom.PhoneAccountHandle getPhoneAccountHandle()>
<android.telephony.VisualVoicemailSms: void writeToParcel(android.os.Parcel,int)>
<android.text.style.TtsSpan.TimeBuilder: void <init>()>
<android.text.style.TtsSpan.TimeBuilder: void <init>(int,int)>
<android.text.style.TtsSpan.TimeBuilder: android.text.style.TtsSpan.TimeBuilder setHours(int)>
<android.text.style.TtsSpan.TimeBuilder: android.text.style.TtsSpan.TimeBuilder setMinutes(int)>
<android.view.SubMenu extends android.view.Menu: android.view.SubMenu setHeaderIcon(@DrawableResint)>
<android.view.SubMenu extends android.view.Menu: void clearHeader()>
<android.view.SubMenu extends android.view.Menu: android.view.SubMenu setIcon(android.graphics.drawable.Drawable)>
<android.view.SubMenu extends android.view.Menu: android.view.SubMenu setIcon(@DrawableResint)>
<android.view.SubMenu extends android.view.Menu: android.view.SubMenu setHeaderView(android.view.View)>
<android.view.SubMenu extends android.view.Menu: android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable)>
<android.view.SubMenu extends android.view.Menu: android.view.MenuItem getItem()>
<android.view.SubMenu extends android.view.Menu: android.view.SubMenu setHeaderTitle(CharSequence)>
<android.view.SubMenu extends android.view.Menu: android.view.SubMenu setHeaderTitle(@StringResint)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glEnableClientState(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glTexParameterf(int,int,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLightxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glPixelStorei(int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glDisableClientState(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glMaterialfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glTexEnvfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glSampleCoverage(float,boolean)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLightf(int,int,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glPushMatrix()>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glGetIntegerv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glSampleCoveragex(int,boolean)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLightModelxv(int,int[],int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLightModelx(int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glTexEnvxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glFogxv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glFrontFace(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glFrustumf(float,float,float,float,float,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: int glGetError()>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glClearStencil(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glBlendFunc(int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLoadIdentity()>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glPolygonOffsetx(int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: java.lang.String glGetString(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glMaterialfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glNormal3f(float,float,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLightModelfv(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glColorMask(boolean,boolean,boolean,boolean)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glClearColorx(int,int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glColor4f(float,float,float,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glDisable(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glClear(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glMultMatrixx(int[],int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glMatrixMode(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLoadMatrixx(java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glDepthRangex(int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLogicOp(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glDepthMask(boolean)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLineWidthx(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glVertexPointer(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glDepthFunc(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glNormalPointer(int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glTexEnvfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glTranslatef(float,float,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glMultMatrixf(java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glRotatex(int,int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glMaterialf(int,int,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glDeleteTextures(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glStencilMask(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glPopMatrix()>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glDepthRangef(float,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glColor4x(int,int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glCullFace(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glOrthox(int,int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glClientActiveTexture(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLightxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glGetIntegerv(int,int[],int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glStencilOp(int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glMultiTexCoord4x(int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glPointSize(float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glPolygonOffset(float,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glGenTextures(int,int[],int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glFogx(int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glMultMatrixf(float[],int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glTranslatex(int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glAlphaFuncx(int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLineWidth(float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glScalex(int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glFogfv(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glScalef(float,float,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glDrawElements(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glHint(int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glTexEnvf(int,int,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glFogfv(int,float[],int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glClearDepthx(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glFlush()>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLoadMatrixf(java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glFogxv(int,int[],int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLightModelxv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glGenTextures(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLightfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLightx(int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glFrustumx(int,int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glMultMatrixx(java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glActiveTexture(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glStencilFunc(int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLightModelfv(int,float[],int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glPointSizex(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glTexEnvx(int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLightfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glDrawArrays(int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glEnable(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glCopyTexImage2D(int,int,int,int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glFogf(int,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glMaterialx(int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLoadMatrixf(float[],int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glMultiTexCoord4f(int,float,float,float,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glTexParameterx(int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glBindTexture(int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLoadMatrixx(int[],int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glScissor(int,int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glMaterialxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glOrthof(float,float,float,float,float,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glDeleteTextures(int,int[],int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glColorPointer(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glLightModelf(int,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glViewport(int,int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glShadeModel(int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glAlphaFunc(int,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glClearDepthf(float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glRotatef(float,float,float,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glTexEnvxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glClearColor(float,float,float,float)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glFinish()>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glNormal3x(int,int,int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glMaterialxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL10 extends javax.microedition.khronos.opengles.GL: void glTexCoordPointer(int,int,int,java.nio.Buffer)>
<android.widget.TableLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TableLayout: boolean isColumnCollapsed(int)>
<android.widget.TableLayout: void setColumnStretchable(int,boolean)>
<android.widget.TableLayout: boolean isColumnStretchable(int)>
<android.widget.TableLayout: boolean isStretchAllColumns()>
<android.widget.TableLayout: void setStretchAllColumns(boolean)>
<android.widget.TableLayout: void setColumnShrinkable(int,boolean)>
<android.widget.TableLayout: void setShrinkAllColumns(boolean)>
<android.widget.TableLayout: boolean isShrinkAllColumns()>
<android.widget.TableLayout: boolean isColumnShrinkable(int)>
<android.widget.TableLayout: android.widget.TableLayout.LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.TableLayout: void <init>(android.content.Context)>
<android.widget.TableLayout: void setColumnCollapsed(int,boolean)>
<java.util.concurrent.SynchronousQueue: E peek()>
<java.util.concurrent.SynchronousQueue: E poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.SynchronousQueue: E take()>
<java.util.concurrent.SynchronousQueue: void <init>()>
<java.util.concurrent.SynchronousQueue: int drainTo(java.util.Collection,int)>
<java.util.concurrent.SynchronousQueue: int drainTo(java.util.Collection)>
<java.util.concurrent.SynchronousQueue: java.util.Iterator iterator()>
<java.util.concurrent.SynchronousQueue: E poll()>
<java.util.concurrent.SynchronousQueue: int remainingCapacity()>
<java.util.concurrent.SynchronousQueue: int size()>
<java.util.concurrent.SynchronousQueue: boolean offer(E)>
<java.util.concurrent.SynchronousQueue: boolean offer(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.SynchronousQueue: void put(E)>
<java.util.concurrent.SynchronousQueue: void <init>(boolean)>
<java.util.prefs.PreferencesFactory: java.util.prefs.Preferences systemRoot()>
<java.util.prefs.PreferencesFactory: java.util.prefs.Preferences userRoot()>
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.RunnableScheduledFuture decorateTask(java.util.concurrent.Callable,java.util.concurrent.RunnableScheduledFuture)>
<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.RunnableScheduledFuture decorateTask(Runnable,java.util.concurrent.RunnableScheduledFuture)>
<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getRemoveOnCancelPolicy()>
<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.ThreadFactory)>
<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getExecuteExistingDelayedTasksAfterShutdownPolicy()>
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int)>
<java.util.concurrent.ScheduledThreadPoolExecutor: void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)>
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(Runnable,long,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.RejectedExecutionHandler)>
<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getContinueExistingPeriodicTasksAfterShutdownPolicy()>
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(Runnable,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(Runnable,long,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledThreadPoolExecutor: void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)>
<java.util.concurrent.ScheduledThreadPoolExecutor: void setRemoveOnCancelPolicy(boolean)>
<java.nio.file.FileSystem: java.nio.file.WatchService newWatchService()>
<java.nio.file.FileSystem: java.lang.String getSeparator()>
<java.nio.file.FileSystem: java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService()>
<java.nio.file.FileSystem: void <init>()>
<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String...)>
<java.nio.file.FileSystem: java.util.Set supportedFileAttributeViews()>
<java.nio.file.FileSystem: Iterable getFileStores()>
<java.nio.file.FileSystem: java.nio.file.spi.FileSystemProvider provider()>
<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>
<java.nio.file.FileSystem: boolean isReadOnly()>
<java.nio.file.FileSystem: Iterable getRootDirectories()>
<java.nio.file.FileSystem: boolean isOpen()>
<android.provider.ContactsContract.CommonDataKinds.SipAddress: CharSequence getTypeLabel(android.content.res.Resources,int,CharSequence)>
<android.provider.ContactsContract.CommonDataKinds.SipAddress: int getTypeLabelResource(int)>
<android.util.DisplayMetrics: void setToDefaults()>
<android.util.DisplayMetrics: void <init>()>
<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)>
<android.util.DisplayMetrics: boolean equals(android.util.DisplayMetrics)>
<android.widget.AbsListView.OnScrollListener: void onScrollStateChanged(android.widget.AbsListView,int)>
<android.widget.AbsListView.OnScrollListener: void onScroll(android.widget.AbsListView,int,int,int)>
<android.renderscript.Double2: void <init>(double,double)>
<android.renderscript.Double2: void <init>()>
<android.text.InputFilter.AllCaps: CharSequence filter(CharSequence,int,int,android.text.Spanned,int,int)>
<android.text.InputFilter.AllCaps: void <init>()>
<android.text.InputFilter.AllCaps: void <init>(java.util.Locale)>
<android.renderscript.Double4: void <init>()>
<android.renderscript.Double4: void <init>(double,double,double,double)>
<android.renderscript.Double3: void <init>(double,double,double)>
<android.renderscript.Double3: void <init>()>
<android.hardware.location.MemoryRegion: void <init>(android.os.Parcel)>
<android.hardware.location.MemoryRegion: int getFreeCapacityBytes()>
<android.hardware.location.MemoryRegion: boolean isReadable()>
<android.hardware.location.MemoryRegion: boolean isExecutable()>
<android.hardware.location.MemoryRegion: void writeToParcel(android.os.Parcel,int)>
<android.hardware.location.MemoryRegion: int describeContents()>
<android.hardware.location.MemoryRegion: int getCapacityBytes()>
<android.hardware.location.MemoryRegion: boolean isWritable()>
<android.media.tv.TvInputService.HardwareSession: boolean onSetSurface(android.view.Surface)>
<android.media.tv.TvInputService.HardwareSession: java.lang.String getHardwareInputId()>
<android.media.tv.TvInputService.HardwareSession: void onHardwareVideoUnavailable(int)>
<android.media.tv.TvInputService.HardwareSession: void <init>(android.content.Context)>
<android.media.tv.TvInputService.HardwareSession: void onHardwareVideoAvailable()>
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder setPassphrase(java.lang.String)>
<android.net.wifi.p2p.WifiP2pConfig.Builder: void <init>()>
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder enablePersistentMode(boolean)>
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder setNetworkName(java.lang.String)>
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder setGroupOperatingBand(int)>
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig build()>
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder setDeviceAddress(android.net.MacAddress)>
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder setGroupOperatingFrequency(int)>
<android.app.BroadcastOptions: android.os.Bundle toBundle()>
<android.app.BroadcastOptions: android.app.BroadcastOptions makeBasic()>
<android.app.BroadcastOptions: void setBackgroundActivityStartsAllowed(boolean)>
<android.app.BroadcastOptions: void setTemporaryAppWhitelistDuration(long)>
<android.app.BroadcastOptions: void setDontSendToRestrictedApps(boolean)>
<android.text.method.DigitsKeyListener: int getInputType()>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(java.util.Locale)>
<android.text.method.DigitsKeyListener: void <init>()>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(boolean,boolean)>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance()>
<android.text.method.DigitsKeyListener: void <init>(boolean,boolean)>
<android.text.method.DigitsKeyListener: void <init>(java.util.Locale)>
<android.text.method.DigitsKeyListener: char[] getAcceptedChars()>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(java.lang.String)>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(java.util.Locale,boolean,boolean)>
<android.text.method.DigitsKeyListener: void <init>(java.util.Locale,boolean,boolean)>
<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetType()>
<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetVersion()>
<android.view.textclassifier.TextClassificationContext: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextClassificationContext: int describeContents()>
<android.view.textclassifier.TextClassificationContext: java.lang.String getPackageName()>
<java.util.Spliterator: java.util.Comparator getComparator()>
<java.util.Spliterator: int characteristics()>
<java.util.Spliterator: long estimateSize()>
<java.util.Spliterator: java.util.Spliterator trySplit()>
<java.util.Spliterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.Spliterator: boolean hasCharacteristics(int)>
<java.util.Spliterator: long getExactSizeIfKnown()>
<java.util.Spliterator: boolean tryAdvance(java.util.function.Consumer)>
<android.webkit.WebViewDatabase: void clearUsernamePassword()>
<android.webkit.WebViewDatabase: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebViewDatabase: void clearHttpAuthUsernamePassword()>
<android.webkit.WebViewDatabase: android.webkit.WebViewDatabase getInstance(android.content.Context)>
<android.webkit.WebViewDatabase: boolean hasHttpAuthUsernamePassword()>
<android.webkit.WebViewDatabase: void <init>()>
<android.webkit.WebViewDatabase: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)>
<android.webkit.WebViewDatabase: void clearFormData()>
<android.webkit.WebViewDatabase: boolean hasUsernamePassword()>
<android.webkit.WebViewDatabase: boolean hasFormData()>
<android.icu.util.ValueIterator: void setRange(int,int)>
<android.icu.util.ValueIterator: void reset()>
<android.icu.util.ValueIterator: boolean next(android.icu.util.ValueIterator.Element)>
<android.telecom.Conference: android.telecom.DisconnectCause getDisconnectCause()>
<android.telecom.Conference: void removeExtras(java.util.List)>
<android.telecom.Conference: void onConnectionAdded(android.telecom.Connection)>
<android.telecom.Conference: void setActive()>
<android.telecom.Conference: void setDisconnected(android.telecom.DisconnectCause)>
<android.telecom.Conference: void <init>(android.telecom.PhoneAccountHandle)>
<android.telecom.Conference: int getConnectionProperties()>
<android.telecom.Conference: void setStatusHints(android.telecom.StatusHints)>
<android.telecom.Conference: android.telecom.Connection getPrimaryConnection()>
<android.telecom.Conference: void onSeparate(android.telecom.Connection)>
<android.telecom.Conference: void setConnectionCapabilities(int)>
<android.telecom.Conference: android.telecom.StatusHints getStatusHints()>
<android.telecom.Conference: void setConnectionTime(long)>
<android.telecom.Conference: void setDialing()>
<android.telecom.Conference: void onPlayDtmfTone(char)>
<android.telecom.Conference: android.telecom.CallAudioState getCallAudioState()>
<android.telecom.Conference: void onDisconnect()>
<android.telecom.Conference: void setVideoProvider(android.telecom.Connection,android.telecom.Connection.VideoProvider)>
<android.telecom.Conference: boolean addConnection(android.telecom.Connection)>
<android.telecom.Conference: void setVideoState(android.telecom.Connection,int)>
<android.telecom.Conference: int getVideoState()>
<android.telecom.Conference: void onMerge()>
<android.telecom.Conference: int getConnectionCapabilities()>
<android.telecom.Conference: void onMerge(android.telecom.Connection)>
<android.telecom.Conference: long getConnectTimeMillis()>
<android.telecom.Conference: android.telecom.PhoneAccountHandle getPhoneAccountHandle()>
<android.telecom.Conference: void setConnectionStartElapsedRealTime(long)>
<android.telecom.Conference: android.os.Bundle getExtras()>
<android.telecom.Conference: void removeConnection(android.telecom.Connection)>
<android.telecom.Conference: void setConferenceableConnections(java.util.List)>
<android.telecom.Conference: void setConnectionProperties(int)>
<android.telecom.Conference: void setOnHold()>
<android.telecom.Conference: void onExtrasChanged(android.os.Bundle)>
<android.telecom.Conference: void onHold()>
<android.telecom.Conference: void setExtras(android.os.Bundle)>
<android.telecom.Conference: void onStopDtmfTone()>
<android.telecom.Conference: void onUnhold()>
<android.telecom.Conference: void destroy()>
<android.telecom.Conference: int getState()>
<android.telecom.Conference: void removeExtras(java.lang.String...)>
<android.telecom.Conference: java.util.List getConferenceableConnections()>
<android.telecom.Conference: android.telecom.Connection.VideoProvider getVideoProvider()>
<android.telecom.Conference: void setConnectTimeMillis(long)>
<android.telecom.Conference: void onCallAudioStateChanged(android.telecom.CallAudioState)>
<android.telecom.Conference: android.telecom.AudioState getAudioState()>
<android.telecom.Conference: long getConnectionTime()>
<android.telecom.Conference: java.util.List getConnections()>
<android.telecom.Conference: void onSwap()>
<android.telecom.Conference: void putExtras(android.os.Bundle)>
<android.telecom.Conference: void onAudioStateChanged(android.telecom.AudioState)>
<android.hardware.Camera.Size: void <init>(int,int)>
<android.view.OrientationListener: void disable()>
<android.view.OrientationListener: void enable()>
<android.view.OrientationListener: void onSensorChanged(int,float[])>
<android.view.OrientationListener: void <init>(android.content.Context,int)>
<android.view.OrientationListener: void <init>(android.content.Context)>
<android.view.OrientationListener: void onOrientationChanged(int)>
<android.view.OrientationListener: void onAccuracyChanged(int,int)>
<android.widget.AbsListView.SelectionBoundsAdjuster: void adjustListItemSelectionBounds(android.graphics.Rect)>
<android.opengl.EGLObjectHandle: void <init>(int)>
<android.opengl.EGLObjectHandle: long getNativeHandle()>
<android.opengl.EGLObjectHandle: int getHandle()>
<android.opengl.EGLObjectHandle: void <init>(long)>
<java.util.Stack: int search(java.lang.Object)>
<java.util.Stack: E push(E)>
<java.util.Stack: boolean empty()>
<java.util.Stack: E pop()>
<java.util.Stack: void <init>()>
<java.util.Stack: E peek()>
<java.util.function.DoubleUnaryOperator: java.util.function.DoubleUnaryOperator compose(java.util.function.DoubleUnaryOperator)>
<java.util.function.DoubleUnaryOperator: java.util.function.DoubleUnaryOperator andThen(java.util.function.DoubleUnaryOperator)>
<java.util.function.DoubleUnaryOperator: java.util.function.DoubleUnaryOperator identity()>
<java.util.function.DoubleUnaryOperator: double applyAsDouble(double)>
<android.media.AudioManager: boolean isStreamMute(int)>
<android.media.AudioManager: java.util.List getAudioProductStrategies()>
<android.media.AudioManager: void adjustStreamVolume(int,int,int)>
<android.media.AudioManager: void registerRemoteControlClient(android.media.RemoteControlClient)>
<android.media.AudioManager: boolean isHapticPlaybackSupported()>
<android.media.AudioManager: void setParameters(java.lang.String)>
<android.media.AudioManager: void unregisterRemoteController(android.media.RemoteController)>
<android.media.AudioManager: java.util.List getActiveRecordingConfigurations()>
<android.media.AudioManager: int registerAudioPolicy(android.media.audiopolicy.AudioPolicy)>
<android.media.AudioManager: int getAllowedCapturePolicy()>
<android.media.AudioManager: void unregisterAudioPlaybackCallback(android.media.AudioManager.AudioPlaybackCallback)>
<android.media.AudioManager: void playSoundEffect(int,float)>
<android.media.AudioManager: boolean hasRegisteredDynamicPolicy()>
<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)>
<android.media.AudioManager: int dispatchAudioFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.AudioPolicy)>
<android.media.AudioManager: java.lang.String getParameters(java.lang.String)>
<android.media.AudioManager: void unregisterMediaButtonEventReceiver(android.app.PendingIntent)>
<android.media.AudioManager: boolean isMicrophoneMute()>
<android.media.AudioManager: boolean isSpeakerphoneOn()>
<android.media.AudioManager: int getVolumeIndexForAttributes(android.media.AudioAttributes)>
<android.media.AudioManager: void playSoundEffect(int)>
<android.media.AudioManager: void registerMediaButtonEventReceiver(android.app.PendingIntent)>
<android.media.AudioManager: void setBluetoothA2dpOn(boolean)>
<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener,android.media.AudioAttributes,int,int)>
<android.media.AudioManager: void setAudioServerStateCallback(java.util.concurrent.Executor,android.media.AudioManager.AudioServerStateCallback)>
<android.media.AudioManager: float getStreamVolumeDb(int,int,int)>
<android.media.AudioManager: int abandonAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener,android.media.AudioAttributes)>
<android.media.AudioManager: void setVibrateSetting(int,int)>
<android.media.AudioManager: boolean shouldVibrate(int)>
<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener,int,int)>
<android.media.AudioManager: void setStreamMute(int,boolean)>
<android.media.AudioManager: void setMode(int)>
<android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
<android.media.AudioManager: int getStreamVolume(int)>
<android.media.AudioManager: void setStreamVolume(int,int,int)>
<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener,android.media.AudioAttributes,int,int,android.media.audiopolicy.AudioPolicy)>
<android.media.AudioManager: void registerAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback,android.os.Handler)>
<android.media.AudioManager: int getStreamMaxVolume(int)>
<android.media.AudioManager: void stopBluetoothSco()>
<android.media.AudioManager: void unloadSoundEffects()>
<android.media.AudioManager: boolean isWiredHeadsetOn()>
<android.media.AudioManager: boolean isOffloadedPlaybackSupported(android.media.AudioFormat,android.media.AudioAttributes)>
<android.media.AudioManager: void setMicrophoneMute(boolean)>
<android.media.AudioManager: int getVibrateSetting(int)>
<android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
<android.media.AudioManager: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int)>
<android.media.AudioManager: boolean isAudioServerRunning()>
<android.media.AudioManager: void loadSoundEffects()>
<android.media.AudioManager: void setWiredHeadsetOn(boolean)>
<android.media.AudioManager: int getMode()>
<android.media.AudioManager: void registerMediaButtonEventReceiver(android.content.ComponentName)>
<android.media.AudioManager: void clearAudioServerStateCallback()>
<android.media.AudioManager: boolean isBluetoothScoOn()>
<android.media.AudioManager: boolean isHdmiSystemAudioSupported()>
<android.media.AudioManager: void setFocusRequestResult(android.media.AudioFocusInfo,int,android.media.audiopolicy.AudioPolicy)>
<android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest,android.media.audiopolicy.AudioPolicy)>
<android.media.AudioManager: int getMinVolumeIndexForAttributes(android.media.AudioAttributes)>
<android.media.AudioManager: void unregisterAudioPolicy(android.media.audiopolicy.AudioPolicy)>
<android.media.AudioManager: void registerAudioDeviceCallback(android.media.AudioDeviceCallback,android.os.Handler)>
<android.media.AudioManager: void setRingerMode(int)>
<android.media.AudioManager: void unregisterAudioPolicyAsync(android.media.audiopolicy.AudioPolicy)>
<android.media.AudioManager: void unregisterMediaButtonEventReceiver(android.content.ComponentName)>
<android.media.AudioManager: java.util.List getAudioVolumeGroups()>
<android.media.AudioManager: void setStreamSolo(int,boolean)>
<android.media.AudioManager: void setSpeakerphoneOn(boolean)>
<android.media.AudioManager: boolean isBluetoothScoAvailableOffCall()>
<android.media.AudioManager: void setBluetoothScoOn(boolean)>
<android.media.AudioManager: int generateAudioSessionId()>
<android.media.AudioManager: int getMaxVolumeIndexForAttributes(android.media.AudioAttributes)>
<android.media.AudioManager: void adjustVolume(int,int)>
<android.media.AudioManager: int getRingerMode()>
<android.media.AudioManager: void registerAudioPlaybackCallback(android.media.AudioManager.AudioPlaybackCallback,android.os.Handler)>
<android.media.AudioManager: void startBluetoothSco()>
<android.media.AudioManager: boolean registerRemoteController(android.media.RemoteController)>
<android.media.AudioManager: int getRouting(int)>
<android.media.AudioManager: java.util.List getMicrophones()>
<android.media.AudioManager: android.media.AudioDeviceInfo[] getDevices(int)>
<android.media.AudioManager: void unregisterRemoteControlClient(android.media.RemoteControlClient)>
<android.media.AudioManager: void dispatchMediaKeyEvent(android.view.KeyEvent)>
<android.media.AudioManager: int getStreamMinVolume(int)>
<android.media.AudioManager: boolean isBluetoothA2dpOn()>
<android.media.AudioManager: void setRouting(int,int,int)>
<android.media.AudioManager: java.util.List getActivePlaybackConfigurations()>
<android.media.AudioManager: void unregisterVolumeGroupCallback(android.media.AudioManager.VolumeGroupCallback)>
<android.media.AudioManager: boolean isMusicActive()>
<android.media.AudioManager: int abandonAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener)>
<android.media.AudioManager: void setAllowedCapturePolicy(int)>
<android.media.AudioManager: void unregisterAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback)>
<android.media.AudioManager: java.lang.String getProperty(java.lang.String)>
<android.media.AudioManager: void registerVolumeGroupCallback(java.util.concurrent.Executor,android.media.AudioManager.VolumeGroupCallback)>
<android.media.AudioManager: boolean isVolumeFixed()>
<android.media.AudioManager: void unregisterAudioDeviceCallback(android.media.AudioDeviceCallback)>
<android.net.wifi.WifiManager.WpsCallback: void onFailed(int)>
<android.net.wifi.WifiManager.WpsCallback: void onSucceeded()>
<android.net.wifi.WifiManager.WpsCallback: void onStarted(java.lang.String)>
<android.net.wifi.WifiManager.WpsCallback: void <init>()>
<java.util.logging.Level: void <init>(String,int,String)>
<java.util.logging.Level: java.lang.String getResourceBundleName()>
<java.util.logging.Level: java.lang.String getName()>
<java.util.logging.Level: int intValue()>
<java.util.logging.Level: java.lang.String toString()>
<java.util.logging.Level: java.lang.String getLocalizedName()>
<java.util.logging.Level: java.util.logging.Level parse(java.lang.String)>
<java.util.logging.Level: void <init>(String,int)>
<android.app.admin.DeviceAdminReceiver: void onPasswordChanged(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: void onReceive(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onDisabled(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void <init>()>
<android.app.admin.DeviceAdminReceiver: void onUserStopped(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: java.lang.String onChoosePrivateKeyAlias(android.content.Context,android.content.Intent,int,android.net.Uri,java.lang.String)>
<android.app.admin.DeviceAdminReceiver: void onSecurityLogsAvailable(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onPasswordFailed(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onEnabled(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onTransferAffiliatedProfileOwnershipComplete(android.content.Context,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: void onReadyForUserInitialization(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onBugreportShared(android.content.Context,android.content.Intent,java.lang.String)>
<android.app.admin.DeviceAdminReceiver: void onNetworkLogsAvailable(android.content.Context,android.content.Intent,long,int)>
<android.app.admin.DeviceAdminReceiver: void onUserAdded(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: CharSequence onDisableRequested(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onLockTaskModeEntering(android.content.Context,android.content.Intent,java.lang.String)>
<android.app.admin.DeviceAdminReceiver: void onUserRemoved(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: void onProfileProvisioningComplete(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: android.app.admin.DevicePolicyManager getManager(android.content.Context)>
<android.app.admin.DeviceAdminReceiver: void onPasswordExpiring(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: void onTransferOwnershipComplete(android.content.Context,android.os.PersistableBundle)>
<android.app.admin.DeviceAdminReceiver: void onPasswordSucceeded(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: void onBugreportFailed(android.content.Context,android.content.Intent,int)>
<android.app.admin.DeviceAdminReceiver: android.content.ComponentName getWho(android.content.Context)>
<android.app.admin.DeviceAdminReceiver: void onBugreportSharingDeclined(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onLockTaskModeExiting(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onUserStarted(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: void onPasswordChanged(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onUserSwitched(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: void onPasswordSucceeded(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onPasswordExpiring(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onPasswordFailed(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: void onSystemUpdatePending(android.content.Context,android.content.Intent,long)>
<android.media.AudioAttributes: int describeContents()>
<android.media.AudioAttributes: int getContentType()>
<android.media.AudioAttributes: int getAllFlags()>
<android.media.AudioAttributes: boolean areHapticChannelsMuted()>
<android.media.AudioAttributes: int getAllowedCapturePolicy()>
<android.media.AudioAttributes: android.os.Bundle getBundle()>
<android.media.AudioAttributes: int getUsage()>
<android.media.AudioAttributes: int getCapturePreset()>
<android.media.AudioAttributes: void writeToParcel(android.os.Parcel,int)>
<android.media.AudioAttributes: int getFlags()>
<android.media.AudioAttributes: int getVolumeControlStream()>
<android.provider.FontsContract: void requestFonts(android.content.Context,android.provider.FontRequest,android.os.Handler,android.os.CancellationSignal,android.provider.FontsContract.FontRequestCallback)>
<android.provider.FontsContract: android.provider.FontsContract.FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,android.provider.FontRequest)>
<android.provider.FontsContract: android.graphics.Typeface buildTypeface(android.content.Context,android.os.CancellationSignal,android.provider.FontsContract.FontInfo[])>
<android.hardware.hdmi.HdmiTvClient: void setRecordListener(android.hardware.hdmi.HdmiRecordListener)>
<android.hardware.hdmi.HdmiTvClient: void clearTimerRecording(int,int,android.hardware.hdmi.HdmiTimerRecordSources.TimerRecordSource)>
<android.hardware.hdmi.HdmiTvClient: int getDeviceType()>
<android.hardware.hdmi.HdmiTvClient: void setSystemAudioMode(boolean,android.hardware.hdmi.HdmiTvClient.SelectCallback)>
<android.hardware.hdmi.HdmiTvClient: void setHdmiMhlVendorCommandListener(android.hardware.hdmi.HdmiTvClient.HdmiMhlVendorCommandListener)>
<android.hardware.hdmi.HdmiTvClient: void setSystemAudioMute(boolean)>
<android.hardware.hdmi.HdmiTvClient: void setSystemAudioVolume(int,int,int)>
<android.hardware.hdmi.HdmiTvClient: java.util.List getDeviceList()>
<android.hardware.hdmi.HdmiTvClient: void sendStandby(int)>
<android.hardware.hdmi.HdmiTvClient: void startOneTouchRecord(int,android.hardware.hdmi.HdmiRecordSources.RecordSource)>
<android.hardware.hdmi.HdmiTvClient: void deviceSelect(int,android.hardware.hdmi.HdmiTvClient.SelectCallback)>
<android.hardware.hdmi.HdmiTvClient: void stopOneTouchRecord(int)>
<android.hardware.hdmi.HdmiTvClient: void sendMhlVendorCommand(int,int,int,byte[])>
<android.hardware.hdmi.HdmiTvClient: void portSelect(int,android.hardware.hdmi.HdmiTvClient.SelectCallback)>
<android.hardware.hdmi.HdmiTvClient: void setInputChangeListener(android.hardware.hdmi.HdmiTvClient.InputChangeListener)>
<android.hardware.hdmi.HdmiTvClient: void startTimerRecording(int,int,android.hardware.hdmi.HdmiTimerRecordSources.TimerRecordSource)>
<android.os.UpdateEngine.ErrorCodeConstants: void <init>()>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.app.Activity)>
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int)>
<android.app.TaskStackBuilder: android.content.Intent[] getIntents()>
<android.app.TaskStackBuilder: android.content.Intent editIntentAt(int)>
<android.app.TaskStackBuilder: int getIntentCount()>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntentWithParentStack(android.content.Intent)>
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle)>
<android.app.TaskStackBuilder: void startActivities()>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder create(android.content.Context)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.content.ComponentName)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntent(android.content.Intent)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(java.lang.Class)>
<android.app.TaskStackBuilder: void startActivities(android.os.Bundle)>
<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>
<java.security.spec.PKCS8EncodedKeySpec: java.lang.String getFormat()>
<android.location.GpsSatellite: int getPrn()>
<android.location.GpsSatellite: boolean usedInFix()>
<android.location.GpsSatellite: float getSnr()>
<android.location.GpsSatellite: float getElevation()>
<android.location.GpsSatellite: float getAzimuth()>
<android.location.GpsSatellite: boolean hasEphemeris()>
<android.location.GpsSatellite: boolean hasAlmanac()>
<android.net.sip.SipSession.State: java.lang.String toString(int)>
<android.webkit.WebResourceError: int getErrorCode()>
<android.webkit.WebResourceError: void <init>()>
<android.webkit.WebResourceError: CharSequence getDescription()>
<android.view.textclassifier.TextSelection.Request.Builder: void <init>(from=0) int)>
<android.view.textclassifier.TextSelection.Request.Builder: android.view.textclassifier.TextSelection.Request build()>
<android.view.textclassifier.TextSelection.Request.Builder: android.view.textclassifier.TextSelection.Request.Builder setDefaultLocales(android.os.LocaleList)>
<android.view.textclassifier.TextSelection.Request.Builder: android.view.textclassifier.TextSelection.Request.Builder setExtras(android.os.Bundle)>
<android.location.GpsStatus: Iterable getSatellites()>
<android.location.GpsStatus: int getMaxSatellites()>
<android.location.GpsStatus: int getTimeToFirstFix()>
<java.util.concurrent.locks.Condition: void await()>
<java.util.concurrent.locks.Condition: boolean await(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.locks.Condition: long awaitNanos(long)>
<java.util.concurrent.locks.Condition: void signal()>
<java.util.concurrent.locks.Condition: boolean awaitUntil(java.util.Date)>
<java.util.concurrent.locks.Condition: void signalAll()>
<java.util.concurrent.locks.Condition: void awaitUninterruptibly()>
<javax.security.cert.CertificateException: void <init>()>
<javax.security.cert.CertificateException: void <init>(String)>
<android.database.MatrixCursor: void addRow(Iterable)>
<android.database.MatrixCursor: void <init>(String[])>
<android.database.MatrixCursor: int getCount()>
<android.database.MatrixCursor: float getFloat(int)>
<android.database.MatrixCursor: void addRow(java.lang.Object[])>
<android.database.MatrixCursor: int getInt(int)>
<android.database.MatrixCursor: void <init>(String[],int)>
<android.database.MatrixCursor: short getShort(int)>
<android.database.MatrixCursor: java.lang.String[] getColumnNames()>
<android.database.MatrixCursor: long getLong(int)>
<android.database.MatrixCursor: android.database.MatrixCursor.RowBuilder newRow()>
<android.database.MatrixCursor: double getDouble(int)>
<android.database.MatrixCursor: java.lang.String getString(int)>
<android.database.MatrixCursor: boolean isNull(int)>
<java.util.Comparator: boolean equals(java.lang.Object)>
<java.util.Comparator: java.util.Comparator comparingDouble(java.util.function.ToDoubleFunction)>
<java.util.Comparator: java.util.Comparator comparingLong(java.util.function.ToLongFunction)>
<java.util.Comparator: java.util.Comparator nullsFirst(java.util.Comparator)>
<java.util.Comparator: java.util.Comparator thenComparing(java.util.function.Function)>
<java.util.Comparator: java.util.Comparator thenComparingDouble(java.util.function.ToDoubleFunction)>
<java.util.Comparator: java.util.Comparator reverseOrder()>
<java.util.Comparator: java.util.Comparator comparing(java.util.function.Function,java.util.Comparator)>
<java.util.Comparator: java.util.Comparator thenComparingLong(java.util.function.ToLongFunction)>
<java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>
<java.util.Comparator: java.util.Comparator naturalOrder()>
<java.util.Comparator: java.util.Comparator nullsLast(java.util.Comparator)>
<java.util.Comparator: java.util.Comparator reversed()>
<java.util.Comparator: java.util.Comparator thenComparing(java.util.function.Function,java.util.Comparator)>
<java.util.Comparator: java.util.Comparator thenComparing(java.util.Comparator)>
<java.util.Comparator: java.util.Comparator thenComparingInt(java.util.function.ToIntFunction)>
<java.util.Comparator: int compare(T,T)>
<java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>
<java.util.concurrent.ConcurrentHashMap.KeySetView: T[] toArray(T[])>
<java.util.concurrent.ConcurrentHashMap.KeySetView: java.util.Spliterator spliterator()>
<java.util.concurrent.ConcurrentHashMap.KeySetView: boolean contains(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap.KeySetView: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap.KeySetView: boolean remove(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap.KeySetView: java.lang.String toString()>
<java.util.concurrent.ConcurrentHashMap.KeySetView: V getMappedValue()>
<java.util.concurrent.ConcurrentHashMap.KeySetView: boolean add(K)>
<java.util.concurrent.ConcurrentHashMap.KeySetView: boolean removeAll(java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap.KeySetView: java.lang.Object[] toArray()>
<java.util.concurrent.ConcurrentHashMap.KeySetView: boolean containsAll(java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap.KeySetView: boolean isEmpty()>
<java.util.concurrent.ConcurrentHashMap.KeySetView: void clear()>
<java.util.concurrent.ConcurrentHashMap.KeySetView: int size()>
<java.util.concurrent.ConcurrentHashMap.KeySetView: java.util.concurrent.ConcurrentHashMap getMap()>
<java.util.concurrent.ConcurrentHashMap.KeySetView: boolean addAll(java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap.KeySetView: boolean retainAll(java.util.Collection)>
<java.util.concurrent.ConcurrentHashMap.KeySetView: void forEach(java.util.function.Consumer)>
<android.os.ParcelFileDescriptor: boolean canDetectErrors()>
<android.os.ParcelFileDescriptor: int getFd()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>
<android.os.ParcelFileDescriptor: long getStatSize()>
<android.os.ParcelFileDescriptor: void <init>(android.os.ParcelFileDescriptor)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createSocketPair()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>
<android.os.ParcelFileDescriptor: int detachFd()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromFd(int)>
<android.os.ParcelFileDescriptor: void writeToParcel(android.os.Parcel,int)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromDatagramSocket(java.net.DatagramSocket)>
<android.os.ParcelFileDescriptor: java.io.File getFile(java.io.FileDescriptor)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)>
<android.os.ParcelFileDescriptor: void checkError()>
<android.os.ParcelFileDescriptor: void close()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliableSocketPair()>
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>
<android.os.ParcelFileDescriptor: int parseMode(java.lang.String)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int,android.os.Handler,android.os.ParcelFileDescriptor.OnCloseListener)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliablePipe()>
<android.os.ParcelFileDescriptor: void closeWithError(java.lang.String)>
<android.os.ParcelFileDescriptor: int describeContents()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()>
<android.accessibilityservice.AccessibilityService.SoftKeyboardController: int getShowMode()>
<android.accessibilityservice.AccessibilityService.SoftKeyboardController: void addOnShowModeChangedListener(android.accessibilityservice.AccessibilityService.SoftKeyboardController.OnShowModeChangedListener,android.os.Handler)>
<android.accessibilityservice.AccessibilityService.SoftKeyboardController: void addOnShowModeChangedListener(android.accessibilityservice.AccessibilityService.SoftKeyboardController.OnShowModeChangedListener)>
<android.accessibilityservice.AccessibilityService.SoftKeyboardController: boolean removeOnShowModeChangedListener(android.accessibilityservice.AccessibilityService.SoftKeyboardController.OnShowModeChangedListener)>
<android.accessibilityservice.AccessibilityService.SoftKeyboardController: boolean setShowMode(int)>
<android.telephony.euicc.EuiccInfo: void <init>(String)>
<android.telephony.euicc.EuiccInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.euicc.EuiccInfo: java.lang.String getOsVersion()>
<android.telephony.euicc.EuiccInfo: int describeContents()>
<java.security.SignedObject: java.lang.Object getObject()>
<java.security.SignedObject: byte[] getSignature()>
<java.security.SignedObject: boolean verify(java.security.PublicKey,java.security.Signature)>
<java.security.SignedObject: java.lang.String getAlgorithm()>
<java.security.SignedObject: void <init>(java.io.Serializable,java.security.PrivateKey,java.security.Signature)>
<java.security.spec.ECPublicKeySpec: java.security.spec.ECParameterSpec getParams()>
<java.security.spec.ECPublicKeySpec: void <init>(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)>
<java.security.spec.ECPublicKeySpec: java.security.spec.ECPoint getW()>
<java.util.DoubleSummaryStatistics: void accept(double)>
<java.util.DoubleSummaryStatistics: double getAverage()>
<java.util.DoubleSummaryStatistics: double getSum()>
<java.util.DoubleSummaryStatistics: double getMax()>
<java.util.DoubleSummaryStatistics: double getMin()>
<java.util.DoubleSummaryStatistics: long getCount()>
<java.util.DoubleSummaryStatistics: void <init>()>
<java.util.DoubleSummaryStatistics: void combine(java.util.DoubleSummaryStatistics)>
<android.net.wifi.WifiScanner.ScanData: android.net.wifi.ScanResult[] getResults()>
<android.net.wifi.WifiScanner.ScanData: void <init>(android.net.wifi.WifiScanner.ScanData)>
<android.net.wifi.WifiScanner.ScanData: int getId()>
<android.net.wifi.WifiScanner.ScanData: int getFlags()>
<android.net.wifi.WifiScanner.ScanData: void <init>(int,int,android.net.wifi.ScanResult[])>
<android.app.WallpaperManager: boolean isWallpaperSupported()>
<android.app.WallpaperManager: int getWallpaperId(int)>
<android.app.WallpaperManager: android.graphics.drawable.Drawable peekFastDrawable()>
<android.app.WallpaperManager: void suggestDesiredDimensions(int,int)>
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)>
<android.app.WallpaperManager: int setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int)>
<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int,int,boolean,float,float)>
<android.app.WallpaperManager: void clearWallpaper(int,int)>
<android.app.WallpaperManager: boolean hasResourceWallpaper(@RawResint)>
<android.app.WallpaperManager: android.app.WallpaperColors getWallpaperColors(int)>
<android.app.WallpaperManager: int setResource(@RawResint,int)>
<android.app.WallpaperManager: void clear(int)>
<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int,int,boolean,float,float,int)>
<android.app.WallpaperManager: android.graphics.drawable.Drawable peekDrawable()>
<android.app.WallpaperManager: void addOnColorsChangedListener(android.app.WallpaperManager.OnColorsChangedListener,android.os.Handler)>
<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable()>
<android.app.WallpaperManager: boolean setWallpaperComponent(android.content.ComponentName)>
<android.app.WallpaperManager: void clearWallpaperOffsets(android.os.IBinder)>
<android.app.WallpaperManager: int setStream(java.io.InputStream,android.graphics.Rect,boolean)>
<android.app.WallpaperManager: int setStream(java.io.InputStream,android.graphics.Rect,boolean,int)>
<android.app.WallpaperManager: int getDesiredMinimumWidth()>
<android.app.WallpaperManager: void setResource(@RawResint)>
<android.app.WallpaperManager: android.app.WallpaperInfo getWallpaperInfo()>
<android.app.WallpaperManager: int getDesiredMinimumHeight()>
<android.app.WallpaperManager: void clear()>
<android.app.WallpaperManager: android.content.Intent getCropAndSetWallpaperIntent(android.net.Uri)>
<android.app.WallpaperManager: int setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean)>
<android.app.WallpaperManager: android.graphics.drawable.Drawable getFastDrawable()>
<android.app.WallpaperManager: android.app.WallpaperManager getInstance(android.content.Context)>
<android.app.WallpaperManager: boolean isSetWallpaperAllowed()>
<android.app.WallpaperManager: void forgetLoadedWallpaper()>
<android.app.WallpaperManager: android.graphics.drawable.Drawable getDrawable()>
<android.app.WallpaperManager: void setDisplayOffset(android.os.IBinder,int,int)>
<android.app.WallpaperManager: void setDisplayPadding(android.graphics.Rect)>
<android.app.WallpaperManager: void setStream(java.io.InputStream)>
<android.app.WallpaperManager: void removeOnColorsChangedListener(android.app.WallpaperManager.OnColorsChangedListener)>
<android.app.WallpaperManager: void setWallpaperOffsets(android.os.IBinder,float,float)>
<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int)>
<android.app.WallpaperManager: void clearWallpaper()>
<android.app.WallpaperManager: android.os.ParcelFileDescriptor getWallpaperFile(int)>
<android.app.WallpaperManager: void setWallpaperOffsetSteps(float,float)>
<android.app.WallpaperManager: void sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>
<android.graphics.RadialGradient: void <init>(float,float,float,@ColorInt int,@ColorInt int,android.graphics.Shader.TileMode)>
<android.graphics.RadialGradient: void <init>(float,float,float,@ColorInt int[],float[],android.graphics.Shader.TileMode)>
<android.graphics.RadialGradient: void <init>(float,float,float,@ColorLong long[],float[],android.graphics.Shader.TileMode)>
<android.graphics.RadialGradient: void <init>(float,float,float,@ColorLong long,@ColorLong long,android.graphics.Shader.TileMode)>
<android.telephony.AvailableNetworkInfo: java.util.List getBands()>
<android.telephony.AvailableNetworkInfo: int getPriority()>
<android.telephony.AvailableNetworkInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.AvailableNetworkInfo: int getSubId()>
<android.telephony.AvailableNetworkInfo: void <init>(int,int,java.util.List,java.util.List)>
<android.telephony.AvailableNetworkInfo: int describeContents()>
<android.telephony.AvailableNetworkInfo: java.util.List getMccMncs()>
<java.util.concurrent.RejectedExecutionHandler: void rejectedExecution(Runnable,java.util.concurrent.ThreadPoolExecutor)>
<android.view.textclassifier.TextSelection.Builder: android.view.textclassifier.TextSelection.Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.TextSelection.Builder: void <init>(from=0) int)>
<android.view.textclassifier.TextSelection.Builder: android.view.textclassifier.TextSelection.Builder setId(java.lang.String)>
<android.view.textclassifier.TextSelection.Builder: android.view.textclassifier.TextSelection.Builder setEntityType(java.lang.String,float)>
<android.view.textclassifier.TextSelection.Builder: android.view.textclassifier.TextSelection build()>
<java.io.FilePermission: void <init>(String,String)>
<java.io.FilePermission: boolean implies(java.security.Permission)>
<java.io.FilePermission: java.lang.String getActions()>
<android.app.KeyguardManager.KeyguardDismissCallback: void onDismissError()>
<android.app.KeyguardManager.KeyguardDismissCallback: void <init>()>
<android.app.KeyguardManager.KeyguardDismissCallback: void onDismissCancelled()>
<android.app.KeyguardManager.KeyguardDismissCallback: void onDismissSucceeded()>
<android.database.sqlite.SQLiteReadOnlyDatabaseException: void <init>(String)>
<android.database.sqlite.SQLiteReadOnlyDatabaseException: void <init>()>
<android.icu.text.Replaceable: void replace(int,int,java.lang.String)>
<android.icu.text.Replaceable: int length()>
<android.icu.text.Replaceable: int char32At(int)>
<android.icu.text.Replaceable: char charAt(int)>
<android.icu.text.Replaceable: void copy(int,int,int)>
<android.icu.text.Replaceable: void getChars(int,int,char[],int)>
<android.icu.text.Replaceable: boolean hasMetaData()>
<android.icu.text.Replaceable: void replace(int,int,char[],int,int)>
<android.text.style.ForegroundColorSpan: int getSpanTypeId()>
<android.text.style.ForegroundColorSpan: int getForegroundColor()>
<android.text.style.ForegroundColorSpan: void <init>(@ColorInt int)>
<android.text.style.ForegroundColorSpan: int describeContents()>
<android.text.style.ForegroundColorSpan: void <init>(android.os.Parcel)>
<android.text.style.ForegroundColorSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.ForegroundColorSpan: void writeToParcel(android.os.Parcel,int)>
<android.icu.text.DateFormat.Field: int getCalendarField()>
<android.icu.text.DateFormat.Field: void <init>(String,int)>
<android.icu.text.DateFormat.Field: android.icu.text.DateFormat.Field ofCalendarField(int)>
<android.app.AppComponentFactory: android.app.Application instantiateApplication(java.lang.ClassLoader,java.lang.String)>
<android.app.AppComponentFactory: void <init>()>
<android.app.AppComponentFactory: android.app.Activity instantiateActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)>
<android.app.AppComponentFactory: android.content.ContentProvider instantiateProvider(java.lang.ClassLoader,java.lang.String)>
<android.app.AppComponentFactory: android.app.Service instantiateService(java.lang.ClassLoader,java.lang.String,android.content.Intent)>
<android.app.AppComponentFactory: android.content.BroadcastReceiver instantiateReceiver(java.lang.ClassLoader,java.lang.String,android.content.Intent)>
<android.app.AppComponentFactory: java.lang.ClassLoader instantiateClassLoader(java.lang.ClassLoader,android.content.pm.ApplicationInfo)>
<android.telephony.ims.ImsSsInfo: java.lang.String getIcbNum()>
<android.telephony.ims.ImsSsInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ims.ImsSsInfo: int getClirInterrogationStatus()>
<android.telephony.ims.ImsSsInfo: int getClirOutgoingState()>
<android.telephony.ims.ImsSsInfo: int getProvisionStatus()>
<android.telephony.ims.ImsSsInfo: void <init>(int,String)>
<android.telephony.ims.ImsSsInfo: int getStatus()>
<android.telephony.ims.ImsSsInfo: int describeContents()>
<android.telephony.ims.ImsSsInfo: java.lang.String getIncomingCommunicationBarringNumber()>
<android.view.animation.PathInterpolator: void <init>(float,float,float,float)>
<android.view.animation.PathInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.PathInterpolator: void <init>(android.graphics.Path)>
<android.view.animation.PathInterpolator: void <init>(float,float)>
<android.view.animation.PathInterpolator: float getInterpolation(float)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityPostResumed(android.app.Activity)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityPreResumed(android.app.Activity)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityPostStopped(android.app.Activity)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityStopped(android.app.Activity)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityPostSaveInstanceState(android.app.Activity,android.os.Bundle)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityPostStarted(android.app.Activity)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityPaused(android.app.Activity)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityResumed(android.app.Activity)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityPreStarted(android.app.Activity)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityPrePaused(android.app.Activity)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityPreSaveInstanceState(android.app.Activity,android.os.Bundle)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityDestroyed(android.app.Activity)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityPreStopped(android.app.Activity)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityPostPaused(android.app.Activity)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityStarted(android.app.Activity)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityPostDestroyed(android.app.Activity)>
<android.app.Application.ActivityLifecycleCallbacks: void onActivityPreCreated(android.app.Activity,android.os.Bundle)>
<java.net.InterfaceAddress: java.net.InetAddress getAddress()>
<java.net.InterfaceAddress: short getNetworkPrefixLength()>
<java.net.InterfaceAddress: java.net.InetAddress getBroadcast()>
<android.telecom.Call.Listener: void <init>()>
<android.R.animator: void <init>()>
<android.provider.ContactsContract.DataUsageFeedback: void <init>()>
<android.app.VoiceInteractor.PickOptionRequest.Option: void <init>(CharSequence,int)>
<android.app.VoiceInteractor.PickOptionRequest.Option: android.os.Bundle getExtras()>
<android.app.VoiceInteractor.PickOptionRequest.Option: int countSynonyms()>
<android.app.VoiceInteractor.PickOptionRequest.Option: void writeToParcel(android.os.Parcel,int)>
<android.app.VoiceInteractor.PickOptionRequest.Option: void setExtras(android.os.Bundle)>
<android.app.VoiceInteractor.PickOptionRequest.Option: android.app.VoiceInteractor.PickOptionRequest.Option addSynonym(CharSequence)>
<android.app.VoiceInteractor.PickOptionRequest.Option: int describeContents()>
<android.app.VoiceInteractor.PickOptionRequest.Option: CharSequence getSynonymAt(int)>
<android.app.VoiceInteractor.PickOptionRequest.Option: CharSequence getLabel()>
<android.app.VoiceInteractor.PickOptionRequest.Option: int getIndex()>
<android.printservice.PrintServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.printservice.PrintServiceInfo: android.content.ComponentName getComponentName()>
<android.printservice.PrintServiceInfo: int describeContents()>
<java.security.PrivilegedExceptionAction: T run()>
<android.graphics.text.LineBreaker: android.graphics.text.LineBreaker.Result computeLineBreaks(android.graphics.text.MeasuredText,android.graphics.text.LineBreaker.ParagraphConstraints,int)>
<android.graphics.Camera: void rotateY(float)>
<android.graphics.Camera: void translate(float,float,float)>
<android.graphics.Camera: void applyToCanvas(android.graphics.Canvas)>
<android.graphics.Camera: float getLocationZ()>
<android.graphics.Camera: void rotateX(float)>
<android.graphics.Camera: void <init>()>
<android.graphics.Camera: float getLocationY()>
<android.graphics.Camera: void restore()>
<android.graphics.Camera: float getLocationX()>
<android.graphics.Camera: void save()>
<android.graphics.Camera: void rotate(float,float,float)>
<android.graphics.Camera: void rotateZ(float)>
<android.graphics.Camera: float dotWithNormal(float,float,float)>
<android.graphics.Camera: void getMatrix(android.graphics.Matrix)>
<android.graphics.Camera: void setLocation(float,float,float)>
<android.preference.PreferenceManager.OnActivityStopListener: void onActivityStop()>
<android.renderscript.RSDriverException: void <init>(String)>
<java.security.KeyStore.Entry.Attribute: java.lang.String getValue()>
<java.security.KeyStore.Entry.Attribute: java.lang.String getName()>
<java.sql.SQLInput: java.sql.Timestamp readTimestamp()>
<java.sql.SQLInput: java.sql.Array readArray()>
<java.sql.SQLInput: java.lang.Object readObject()>
<java.sql.SQLInput: java.sql.SQLXML readSQLXML()>
<java.sql.SQLInput: java.lang.String readNString()>
<java.sql.SQLInput: java.io.InputStream readBinaryStream()>
<java.sql.SQLInput: byte[] readBytes()>
<java.sql.SQLInput: java.sql.NClob readNClob()>
<java.sql.SQLInput: java.sql.Time readTime()>
<java.sql.SQLInput: short readShort()>
<java.sql.SQLInput: java.io.InputStream readAsciiStream()>
<java.sql.SQLInput: long readLong()>
<java.sql.SQLInput: byte readByte()>
<java.sql.SQLInput: java.sql.Blob readBlob()>
<java.sql.SQLInput: java.sql.Date readDate()>
<java.sql.SQLInput: java.math.BigDecimal readBigDecimal()>
<java.sql.SQLInput: boolean readBoolean()>
<java.sql.SQLInput: java.io.Reader readCharacterStream()>
<java.sql.SQLInput: int readInt()>
<java.sql.SQLInput: java.lang.String readString()>
<java.sql.SQLInput: java.sql.RowId readRowId()>
<java.sql.SQLInput: float readFloat()>
<java.sql.SQLInput: double readDouble()>
<java.sql.SQLInput: java.sql.Ref readRef()>
<java.sql.SQLInput: java.net.URL readURL()>
<java.sql.SQLInput: java.sql.Clob readClob()>
<java.sql.SQLInput: boolean wasNull()>
<android.app.backup.BackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)>
<android.app.backup.BackupHelper: void writeNewStateDescription(android.os.ParcelFileDescriptor)>
<android.app.backup.BackupHelper: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<android.graphics.PorterDuffColorFilter: void <init>(@ColorInt int,android.graphics.PorterDuff.Mode)>
<android.media.tv.TvInputManager: void registerCallback(android.media.tv.TvInputManager.TvInputCallback,android.os.Handler)>
<android.media.tv.TvInputManager: android.media.tv.TvInputInfo getTvInputInfo(java.lang.String)>
<android.media.tv.TvInputManager: void setParentalControlsEnabled(boolean)>
<android.media.tv.TvInputManager: java.util.List getHardwareList()>
<android.media.tv.TvInputManager: int getInputState(java.lang.String)>
<android.media.tv.TvInputManager: boolean isParentalControlsEnabled()>
<android.media.tv.TvInputManager: boolean isSingleSessionActive()>
<android.media.tv.TvInputManager: void unregisterCallback(android.media.tv.TvInputManager.TvInputCallback)>
<android.media.tv.TvInputManager: java.util.List getAvailableTvStreamConfigList(java.lang.String)>
<android.media.tv.TvInputManager: java.util.List getBlockedRatings()>
<android.media.tv.TvInputManager: boolean captureFrame(java.lang.String,android.view.Surface,android.media.tv.TvStreamConfig)>
<android.media.tv.TvInputManager: void notifyPreviewProgramAddedToWatchNext(java.lang.String,long,long)>
<android.media.tv.TvInputManager: void removeBlockedRating(android.media.tv.TvContentRating)>
<android.media.tv.TvInputManager: android.media.tv.TvInputManager.Hardware acquireTvInputHardware(int,android.media.tv.TvInputInfo,android.media.tv.TvInputManager.HardwareCallback)>
<android.media.tv.TvInputManager: void notifyPreviewProgramBrowsableDisabled(java.lang.String,long)>
<android.media.tv.TvInputManager: boolean isRatingBlocked(android.media.tv.TvContentRating)>
<android.media.tv.TvInputManager: void notifyWatchNextProgramBrowsableDisabled(java.lang.String,long)>
<android.media.tv.TvInputManager: java.util.List getTvContentRatingSystemList()>
<android.media.tv.TvInputManager: void addBlockedRating(android.media.tv.TvContentRating)>
<android.media.tv.TvInputManager: void updateTvInputInfo(android.media.tv.TvInputInfo)>
<android.media.tv.TvInputManager: java.util.List getTvInputList()>
<android.media.tv.TvInputManager: void releaseTvInputHardware(int,android.media.tv.TvInputManager.Hardware)>
<android.media.midi.MidiDeviceInfo: int describeContents()>
<android.media.midi.MidiDeviceInfo: int getId()>
<android.media.midi.MidiDeviceInfo: int getType()>
<android.media.midi.MidiDeviceInfo: int getInputPortCount()>
<android.media.midi.MidiDeviceInfo: android.os.Bundle getProperties()>
<android.media.midi.MidiDeviceInfo: void writeToParcel(android.os.Parcel,int)>
<android.media.midi.MidiDeviceInfo: android.media.midi.MidiDeviceInfo.PortInfo[] getPorts()>
<android.media.midi.MidiDeviceInfo: int getOutputPortCount()>
<android.media.midi.MidiDeviceInfo: boolean isPrivate()>
<java.util.concurrent.ConcurrentNavigableMap extends java.util.concurrent.ConcurrentMap java.util.NavigableMap: java.util.concurrent.ConcurrentNavigableMap headMap(K)>
<java.util.concurrent.ConcurrentNavigableMap extends java.util.concurrent.ConcurrentMap java.util.NavigableMap: java.util.concurrent.ConcurrentNavigableMap tailMap(K)>
<java.util.concurrent.ConcurrentNavigableMap extends java.util.concurrent.ConcurrentMap java.util.NavigableMap: java.util.concurrent.ConcurrentNavigableMap headMap(K,boolean)>
<java.util.concurrent.ConcurrentNavigableMap extends java.util.concurrent.ConcurrentMap java.util.NavigableMap: java.util.concurrent.ConcurrentNavigableMap descendingMap()>
<java.util.concurrent.ConcurrentNavigableMap extends java.util.concurrent.ConcurrentMap java.util.NavigableMap: java.util.concurrent.ConcurrentNavigableMap tailMap(K,boolean)>
<java.util.concurrent.ConcurrentNavigableMap extends java.util.concurrent.ConcurrentMap java.util.NavigableMap: java.util.concurrent.ConcurrentNavigableMap subMap(K,boolean,K,boolean)>
<java.util.concurrent.ConcurrentNavigableMap extends java.util.concurrent.ConcurrentMap java.util.NavigableMap: java.util.NavigableSet keySet()>
<java.util.concurrent.ConcurrentNavigableMap extends java.util.concurrent.ConcurrentMap java.util.NavigableMap: java.util.concurrent.ConcurrentNavigableMap subMap(K,K)>
<android.net.metrics.ApfProgramEvent.Builder: void <init>()>
<android.net.metrics.ApfProgramEvent.Builder: android.net.metrics.ApfProgramEvent.Builder setCurrentRas(int)>
<android.net.metrics.ApfProgramEvent.Builder: android.net.metrics.ApfProgramEvent.Builder setActualLifetime(long)>
<android.net.metrics.ApfProgramEvent.Builder: android.net.metrics.ApfProgramEvent.Builder setLifetime(long)>
<android.net.metrics.ApfProgramEvent.Builder: android.net.metrics.ApfProgramEvent build()>
<android.net.metrics.ApfProgramEvent.Builder: android.net.metrics.ApfProgramEvent.Builder setFilteredRas(int)>
<android.net.metrics.ApfProgramEvent.Builder: android.net.metrics.ApfProgramEvent.Builder setProgramLength(int)>
<android.net.metrics.ApfProgramEvent.Builder: android.net.metrics.ApfProgramEvent.Builder setFlags(boolean,boolean)>
<android.graphics.RegionIterator: void <init>(android.graphics.Region)>
<android.graphics.RegionIterator: boolean next(android.graphics.Rect)>
<android.widget.Chronometer.OnChronometerTickListener: void onChronometerTick(android.widget.Chronometer)>
<android.graphics.Typeface.Builder: android.graphics.Typeface build()>
<android.graphics.Typeface.Builder: void <init>(String)>
<android.graphics.Typeface.Builder: android.graphics.Typeface.Builder setFallback(java.lang.String)>
<android.graphics.Typeface.Builder: android.graphics.Typeface.Builder setTtcIndex(int)>
<android.graphics.Typeface.Builder: android.graphics.Typeface.Builder setFontVariationSettings(java.lang.String)>
<android.graphics.Typeface.Builder: void <init>(java.io.File)>
<android.graphics.Typeface.Builder: android.graphics.Typeface.Builder setFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>
<android.graphics.Typeface.Builder: void <init>(android.content.res.AssetManager,String)>
<android.graphics.Typeface.Builder: android.graphics.Typeface.Builder setWeight(int)>
<android.graphics.Typeface.Builder: android.graphics.Typeface.Builder setItalic(boolean)>
<android.graphics.Typeface.Builder: void <init>(java.io.FileDescriptor)>
<android.icu.text.CollationElementIterator: int previous()>
<android.icu.text.CollationElementIterator: void reset()>
<android.icu.text.CollationElementIterator: int getOffset()>
<android.icu.text.CollationElementIterator: int primaryOrder(int)>
<android.icu.text.CollationElementIterator: int secondaryOrder(int)>
<android.icu.text.CollationElementIterator: int tertiaryOrder(int)>
<android.icu.text.CollationElementIterator: void setText(java.text.CharacterIterator)>
<android.icu.text.CollationElementIterator: int getMaxExpansion(int)>
<android.icu.text.CollationElementIterator: void setText(java.lang.String)>
<android.icu.text.CollationElementIterator: void setOffset(int)>
<android.icu.text.CollationElementIterator: int next()>
<android.icu.text.CollationElementIterator: void setText(android.icu.text.UCharacterIterator)>
<android.util.DebugUtils: boolean isObjectSelected(java.lang.Object)>
<android.R.layout: void <init>()>
<android.graphics.drawable.GradientDrawable: float getGradientCenterX()>
<android.graphics.drawable.GradientDrawable: boolean getUseLevel()>
<android.graphics.drawable.GradientDrawable: int[] getColors()>
<android.graphics.drawable.GradientDrawable: void setColor(android.content.res.ColorStateList)>
<android.graphics.drawable.GradientDrawable: void setOrientation(android.graphics.drawable.GradientDrawable.Orientation)>
<android.graphics.drawable.GradientDrawable: void setAlpha(int)>
<android.graphics.drawable.GradientDrawable: void setColors(@ColorIntint[],float[])>
<android.graphics.drawable.GradientDrawable: int getShape()>
<android.graphics.drawable.GradientDrawable: void setStroke(int,@ColorIntint)>
<android.graphics.drawable.GradientDrawable: void setCornerRadii(float[])>
<android.graphics.drawable.GradientDrawable: void <init>()>
<android.graphics.drawable.GradientDrawable: android.content.res.ColorStateList getColor()>
<android.graphics.drawable.GradientDrawable: void setInnerRadius(@Pxint)>
<android.graphics.drawable.GradientDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.GradientDrawable: float[] getCornerRadii()>
<android.graphics.drawable.GradientDrawable: void setStroke(int,@ColorIntint,float,float)>
<android.graphics.drawable.GradientDrawable: float getThicknessRatio()>
<android.graphics.drawable.GradientDrawable: void setShape(int)>
<android.graphics.drawable.GradientDrawable: void setStroke(int,android.content.res.ColorStateList,float,float)>
<android.graphics.drawable.GradientDrawable: void setGradientRadius(float)>
<android.graphics.drawable.GradientDrawable: void setSize(int,int)>
<android.graphics.drawable.GradientDrawable: void setInnerRadiusRatio(float)>
<android.graphics.drawable.GradientDrawable: void setThickness(@Pxint)>
<android.graphics.drawable.GradientDrawable: void setUseLevel(boolean)>
<android.graphics.drawable.GradientDrawable: float getGradientRadius()>
<android.graphics.drawable.GradientDrawable: android.graphics.drawable.GradientDrawable.Orientation getOrientation()>
<android.graphics.drawable.GradientDrawable: float getGradientCenterY()>
<android.graphics.drawable.GradientDrawable: int getThickness()>
<android.graphics.drawable.GradientDrawable: void setGradientType(int)>
<android.graphics.drawable.GradientDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.GradientDrawable: int getInnerRadius()>
<android.graphics.drawable.GradientDrawable: float getCornerRadius()>
<android.graphics.drawable.GradientDrawable: void <init>(android.graphics.drawable.GradientDrawable.Orientation,@ColorInt int[])>
<android.graphics.drawable.GradientDrawable: int getGradientType()>
<android.graphics.drawable.GradientDrawable: float getInnerRadiusRatio()>
<android.graphics.drawable.GradientDrawable: void setCornerRadius(float)>
<android.graphics.drawable.GradientDrawable: void setThicknessRatio(float)>
<android.graphics.drawable.GradientDrawable: void setPadding(@Pxint,@Pxint,@Pxint,@Pxint)>
<android.graphics.drawable.GradientDrawable: void setColor(@ColorIntint)>
<android.graphics.drawable.GradientDrawable: void setGradientCenter(float,float)>
<android.graphics.drawable.GradientDrawable: void setColors(@ColorIntint[])>
<android.graphics.drawable.GradientDrawable: void setDither(boolean)>
<android.graphics.drawable.GradientDrawable: int getOpacity()>
<android.graphics.drawable.GradientDrawable: void setStroke(int,android.content.res.ColorStateList)>
<java.nio.file.DirectoryStream.Filter: boolean accept(T)>
<android.service.euicc.DownloadSubscriptionResult: int getResolvableErrors()>
<android.service.euicc.DownloadSubscriptionResult: void <init>(int,int,int)>
<android.service.euicc.DownloadSubscriptionResult: void writeToParcel(android.os.Parcel,int)>
<android.service.euicc.DownloadSubscriptionResult: int describeContents()>
<android.service.euicc.DownloadSubscriptionResult: int getResult()>
<android.service.euicc.DownloadSubscriptionResult: int getCardId()>
<android.os.Handler.Callback: boolean handleMessage(android.os.Message)>
<android.net.wifi.WifiScanner.ChannelSpec: void <init>(int)>
<android.app.DialogFragment: void setStyle(int,int)>
<android.app.DialogFragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)>
<android.app.DialogFragment: void setCancelable(boolean)>
<android.app.DialogFragment: void <init>()>
<android.app.DialogFragment: boolean getShowsDialog()>
<android.app.DialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<android.app.DialogFragment: void onDismiss(android.content.DialogInterface)>
<android.app.DialogFragment: boolean isCancelable()>
<android.app.DialogFragment: void dismissAllowingStateLoss()>
<android.app.DialogFragment: int show(android.app.FragmentTransaction,java.lang.String)>
<android.app.DialogFragment: android.app.Dialog getDialog()>
<android.app.DialogFragment: int getTheme()>
<android.app.DialogFragment: void onCancel(android.content.DialogInterface)>
<android.app.DialogFragment: void setShowsDialog(boolean)>
<android.app.DialogFragment: void show(android.app.FragmentManager,java.lang.String)>
<android.app.DialogFragment: void dismiss()>
<android.media.audiopolicy.AudioPolicy.Builder: android.media.audiopolicy.AudioPolicy.Builder setIsAudioFocusPolicy(boolean)>
<android.media.audiopolicy.AudioPolicy.Builder: void setAudioPolicyStatusListener(android.media.audiopolicy.AudioPolicy.AudioPolicyStatusListener)>
<android.media.audiopolicy.AudioPolicy.Builder: android.media.audiopolicy.AudioPolicy.Builder addMix(android.media.audiopolicy.AudioMix)>
<android.media.audiopolicy.AudioPolicy.Builder: void <init>(android.content.Context)>
<android.media.audiopolicy.AudioPolicy.Builder: android.media.audiopolicy.AudioPolicy.Builder setAudioPolicyVolumeCallback(android.media.audiopolicy.AudioPolicy.AudioPolicyVolumeCallback)>
<android.media.audiopolicy.AudioPolicy.Builder: void setAudioPolicyFocusListener(android.media.audiopolicy.AudioPolicy.AudioPolicyFocusListener)>
<android.media.audiopolicy.AudioPolicy.Builder: android.media.audiopolicy.AudioPolicy build()>
<android.media.audiopolicy.AudioPolicy.Builder: android.media.audiopolicy.AudioPolicy.Builder setLooper(android.os.Looper)>
<android.media.audiopolicy.AudioPolicy.Builder: android.media.audiopolicy.AudioPolicy.Builder setIsTestFocusPolicy(boolean)>
<android.util.proto.ProtoStream: java.lang.String getWireTypeString(int)>
<android.util.proto.ProtoStream: int getDepthFromToken(long)>
<android.util.proto.ProtoStream: java.lang.String getFieldIdString(long)>
<android.util.proto.ProtoStream: int getTagSizeFromToken(long)>
<android.util.proto.ProtoStream: long makeFieldId(int,long)>
<android.util.proto.ProtoStream: int getOffsetFromToken(long)>
<android.util.proto.ProtoStream: java.lang.String getFieldCountString(long)>
<android.util.proto.ProtoStream: int convertObjectIdToOrdinal(int)>
<android.util.proto.ProtoStream: boolean getRepeatedFromToken(long)>
<android.util.proto.ProtoStream: java.lang.String token2String(long)>
<android.util.proto.ProtoStream: void <init>()>
<android.util.proto.ProtoStream: java.lang.String getFieldTypeString(long)>
<android.util.proto.ProtoStream: long makeToken(int,boolean,int,int,int)>
<android.util.proto.ProtoStream: int getObjectIdFromToken(long)>
<java.lang.NegativeArraySizeException: void <init>(String)>
<java.lang.NegativeArraySizeException: void <init>()>
<android.media.PlayerProxy: void setStartDelayMs(int)>
<android.media.PlayerProxy: void setVolume(float)>
<android.media.PlayerProxy: void setPan(float)>
<android.media.PlayerProxy: void pause()>
<android.media.PlayerProxy: void stop()>
<android.media.PlayerProxy: void start()>
<android.widget.SearchView: void setOnSearchClickListener(android.view.View.OnClickListener)>
<android.widget.SearchView: void setOnSuggestionListener(android.widget.SearchView.OnSuggestionListener)>
<android.widget.SearchView: int getImeOptions()>
<android.widget.SearchView: void setSearchableInfo(android.app.SearchableInfo)>
<android.widget.SearchView: int getMaxWidth()>
<android.widget.SearchView: void onActionViewExpanded()>
<android.widget.SearchView: void <init>(android.content.Context)>
<android.widget.SearchView: void setQueryHint(CharSequence)>
<android.widget.SearchView: void setIconified(boolean)>
<android.widget.SearchView: void setIconifiedByDefault(boolean)>
<android.widget.SearchView: void setOnCloseListener(android.widget.SearchView.OnCloseListener)>
<android.widget.SearchView: void setQuery(CharSequence,boolean)>
<android.widget.SearchView: void onActionViewCollapsed()>
<android.widget.SearchView: void setQueryRefinementEnabled(boolean)>
<android.widget.SearchView: int getInputType()>
<android.widget.SearchView: boolean isIconified()>
<android.widget.SearchView: void setMaxWidth(int)>
<android.widget.SearchView: boolean isIconifiedByDefault()>
<android.widget.SearchView: void setImeOptions(int)>
<android.widget.SearchView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.SearchView: void setSuggestionsAdapter(android.widget.CursorAdapter)>
<android.widget.SearchView: void setOnQueryTextFocusChangeListener(android.view.View.OnFocusChangeListener)>
<android.widget.SearchView: CharSequence getQueryHint()>
<android.widget.SearchView: boolean isQueryRefinementEnabled()>
<android.widget.SearchView: boolean isSubmitButtonEnabled()>
<android.widget.SearchView: CharSequence getQuery()>
<android.widget.SearchView: void setOnQueryTextListener(android.widget.SearchView.OnQueryTextListener)>
<android.widget.SearchView: void setInputType(int)>
<android.widget.SearchView: void setSubmitButtonEnabled(boolean)>
<android.widget.SearchView: android.widget.CursorAdapter getSuggestionsAdapter()>
<android.widget.SearchView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.SearchView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.SearchView: boolean isIconfiedByDefault()>
<android.media.Session2Token: java.lang.String getServiceName()>
<android.media.Session2Token: int describeContents()>
<android.media.Session2Token: int getUid()>
<android.media.Session2Token: android.os.Bundle getExtras()>
<android.media.Session2Token: void writeToParcel(android.os.Parcel,int)>
<android.media.Session2Token: int getType()>
<android.media.Session2Token: void <init>(android.content.Context,android.content.ComponentName)>
<android.media.Session2Token: java.lang.String getPackageName()>
<android.database.sqlite.SQLiteDoneException: void <init>()>
<android.database.sqlite.SQLiteDoneException: void <init>(String)>
<java.io.FileOutputStream: void <init>(String)>
<java.io.FileOutputStream: void finalize()>
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>
<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>
<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>
<java.io.FileOutputStream: void <init>(String,boolean)>
<java.io.FileOutputStream: java.io.FileDescriptor getFD()>
<java.io.FileOutputStream: void write(int)>
<java.io.FileOutputStream: void <init>(java.io.File)>
<java.util.concurrent.ExecutorService extends java.util.concurrent.Executor: boolean isTerminated()>
<java.util.concurrent.ExecutorService extends java.util.concurrent.Executor: T invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ExecutorService extends java.util.concurrent.Executor: T invokeAny(java.util.Collection)>
<java.util.concurrent.ExecutorService extends java.util.concurrent.Executor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ExecutorService extends java.util.concurrent.Executor: java.util.List shutdownNow()>
<java.util.concurrent.ExecutorService extends java.util.concurrent.Executor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>
<java.util.concurrent.ExecutorService extends java.util.concurrent.Executor: java.util.concurrent.Future submit(Runnable)>
<java.util.concurrent.ExecutorService extends java.util.concurrent.Executor: java.util.List invokeAll(java.util.Collection)>
<java.util.concurrent.ExecutorService extends java.util.concurrent.Executor: void shutdown()>
<java.util.concurrent.ExecutorService extends java.util.concurrent.Executor: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ExecutorService extends java.util.concurrent.Executor: boolean isShutdown()>
<java.util.concurrent.ExecutorService extends java.util.concurrent.Executor: java.util.concurrent.Future submit(Runnable,T)>
<android.bluetooth.le.AdvertisingSetParameters: boolean isScannable()>
<android.bluetooth.le.AdvertisingSetParameters: boolean includeTxPower()>
<android.bluetooth.le.AdvertisingSetParameters: void writeToParcel(android.os.Parcel,int)>
<android.bluetooth.le.AdvertisingSetParameters: int getPrimaryPhy()>
<android.bluetooth.le.AdvertisingSetParameters: boolean isConnectable()>
<android.bluetooth.le.AdvertisingSetParameters: boolean isLegacy()>
<android.bluetooth.le.AdvertisingSetParameters: boolean isAnonymous()>
<android.bluetooth.le.AdvertisingSetParameters: int describeContents()>
<android.bluetooth.le.AdvertisingSetParameters: int getSecondaryPhy()>
<android.bluetooth.le.AdvertisingSetParameters: int getTxPowerLevel()>
<android.bluetooth.le.AdvertisingSetParameters: int getInterval()>
<java.io.File: java.io.File getAbsoluteFile()>
<java.io.File: java.net.URL toURL()>
<java.io.File: boolean isAbsolute()>
<java.io.File: boolean setLastModified(long)>
<java.io.File: boolean renameTo(java.io.File)>
<java.io.File: java.lang.String[] list()>
<java.io.File: boolean isDirectory()>
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>
<java.io.File: long getTotalSpace()>
<java.io.File: void <init>(java.net.URI)>
<java.io.File: long lastModified()>
<java.io.File: boolean canExecute()>
<java.io.File: long length()>
<java.io.File: boolean setExecutable(boolean,boolean)>
<java.io.File: java.net.URI toURI()>
<java.io.File: void <init>(java.io.File,String)>
<java.io.File: java.io.File[] listRoots()>
<java.io.File: int compareTo(java.io.File)>
<java.io.File: java.lang.String getName()>
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>
<java.io.File: java.lang.String getPath()>
<java.io.File: boolean setWritable(boolean,boolean)>
<java.io.File: boolean mkdir()>
<java.io.File: java.lang.String getCanonicalPath()>
<java.io.File: long getFreeSpace()>
<java.io.File: boolean setExecutable(boolean)>
<java.io.File: boolean isFile()>
<java.io.File: boolean exists()>
<java.io.File: java.lang.String getParent()>
<java.io.File: boolean setReadable(boolean,boolean)>
<java.io.File: boolean setWritable(boolean)>
<java.io.File: boolean isHidden()>
<java.io.File: boolean createNewFile()>
<java.io.File: long getUsableSpace()>
<java.io.File: java.nio.file.Path toPath()>
<java.io.File: boolean setReadable(boolean)>
<java.io.File: void <init>(String)>
<java.io.File: boolean delete()>
<java.io.File: java.io.File[] listFiles()>
<java.io.File: boolean setReadOnly()>
<java.io.File: void <init>(String,String)>
<java.io.File: void deleteOnExit()>
<java.io.File: boolean canWrite()>
<java.io.File: java.io.File getCanonicalFile()>
<java.io.File: java.lang.String getAbsolutePath()>
<java.io.File: boolean canRead()>
<java.io.File: java.io.File getParentFile()>
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>
<java.io.File: boolean mkdirs()>
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>
<android.widget.PopupMenu.OnDismissListener: void onDismiss(android.widget.PopupMenu)>
<android.net.wifi.WifiScanner.WifiChangeListener extends android.net.wifi.WifiScanner.ActionListener: void onQuiescence(android.net.wifi.ScanResult[])>
<android.net.wifi.WifiScanner.WifiChangeListener extends android.net.wifi.WifiScanner.ActionListener: void onChanging(android.net.wifi.ScanResult[])>
<android.accessibilityservice.AccessibilityService.GestureResultCallback: void onCancelled(android.accessibilityservice.GestureDescription)>
<android.accessibilityservice.AccessibilityService.GestureResultCallback: void onCompleted(android.accessibilityservice.GestureDescription)>
<android.accessibilityservice.AccessibilityService.GestureResultCallback: void <init>()>
<java.util.concurrent.LinkedBlockingDeque: E poll()>
<java.util.concurrent.LinkedBlockingDeque: E peekFirst()>
<java.util.concurrent.LinkedBlockingDeque: int drainTo(java.util.Collection,int)>
<java.util.concurrent.LinkedBlockingDeque: E removeFirst()>
<java.util.concurrent.LinkedBlockingDeque: boolean offerFirst(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedBlockingDeque: E pop()>
<java.util.concurrent.LinkedBlockingDeque: java.util.Iterator iterator()>
<java.util.concurrent.LinkedBlockingDeque: E pollLast()>
<java.util.concurrent.LinkedBlockingDeque: void <init>(int)>
<java.util.concurrent.LinkedBlockingDeque: E peekLast()>
<java.util.concurrent.LinkedBlockingDeque: void putLast(E)>
<java.util.concurrent.LinkedBlockingDeque: void <init>(java.util.Collection)>
<java.util.concurrent.LinkedBlockingDeque: void addFirst(E)>
<java.util.concurrent.LinkedBlockingDeque: int drainTo(java.util.Collection)>
<java.util.concurrent.LinkedBlockingDeque: int size()>
<java.util.concurrent.LinkedBlockingDeque: boolean removeLastOccurrence(java.lang.Object)>
<java.util.concurrent.LinkedBlockingDeque: E getLast()>
<java.util.concurrent.LinkedBlockingDeque: boolean removeFirstOccurrence(java.lang.Object)>
<java.util.concurrent.LinkedBlockingDeque: E pollFirst()>
<java.util.concurrent.LinkedBlockingDeque: E take()>
<java.util.concurrent.LinkedBlockingDeque: E pollFirst(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedBlockingDeque: E removeLast()>
<java.util.concurrent.LinkedBlockingDeque: void <init>()>
<java.util.concurrent.LinkedBlockingDeque: E getFirst()>
<java.util.concurrent.LinkedBlockingDeque: void put(E)>
<java.util.concurrent.LinkedBlockingDeque: E pollLast(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedBlockingDeque: boolean offerLast(E)>
<java.util.concurrent.LinkedBlockingDeque: boolean offerFirst(E)>
<java.util.concurrent.LinkedBlockingDeque: E poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedBlockingDeque: boolean offer(E)>
<java.util.concurrent.LinkedBlockingDeque: boolean offerLast(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedBlockingDeque: void addLast(E)>
<java.util.concurrent.LinkedBlockingDeque: void putFirst(E)>
<java.util.concurrent.LinkedBlockingDeque: E takeLast()>
<java.util.concurrent.LinkedBlockingDeque: java.util.Iterator descendingIterator()>
<java.util.concurrent.LinkedBlockingDeque: int remainingCapacity()>
<java.util.concurrent.LinkedBlockingDeque: boolean offer(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedBlockingDeque: E takeFirst()>
<java.util.concurrent.LinkedBlockingDeque: E peek()>
<java.util.concurrent.LinkedBlockingDeque: void push(E)>
<java.time.format.DecimalStyle: long checkValidValue(long)>
<java.time.format.DecimalStyle: R addTo(R,long)>
<java.time.format.DecimalStyle: char getZeroDigit()>
<java.time.format.DecimalStyle: long getFrom(java.time.temporal.TemporalAccessor)>
<java.time.format.DecimalStyle: java.time.temporal.TemporalUnit getBaseUnit()>
<java.time.format.DecimalStyle: java.time.format.TextStyle asStandalone()>
<java.time.format.DecimalStyle: java.time.format.TextStyle asNormal()>
<java.time.format.DecimalStyle: boolean isStandalone()>
<java.time.format.DecimalStyle: boolean isDateBased()>
<java.time.format.DecimalStyle: java.util.Set getAvailableLocales()>
<java.time.format.DecimalStyle: java.time.temporal.TemporalUnit getRangeUnit()>
<java.time.format.DecimalStyle: java.time.temporal.ValueRange range()>
<java.time.format.DecimalStyle: java.time.format.DecimalStyle ofDefaultLocale()>
<java.time.format.DecimalStyle: java.time.format.DecimalStyle withDecimalSeparator(char)>
<java.time.format.DecimalStyle: java.time.format.DecimalStyle withZeroDigit(char)>
<java.time.format.DecimalStyle: java.time.format.DecimalStyle of(java.util.Locale)>
<java.time.format.DecimalStyle: boolean isDurationEstimated()>
<java.time.format.DecimalStyle: char getDecimalSeparator()>
<java.time.format.DecimalStyle: long between(java.time.temporal.Temporal,java.time.temporal.Temporal)>
<java.time.format.DecimalStyle: java.time.temporal.ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)>
<java.time.format.DecimalStyle: R adjustInto(R,long)>
<java.time.format.DecimalStyle: char getNegativeSign()>
<java.time.format.DecimalStyle: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>
<java.time.format.DecimalStyle: char getPositiveSign()>
<java.time.format.DecimalStyle: int checkValidIntValue(long)>
<java.time.format.DecimalStyle: java.time.format.DecimalStyle withPositiveSign(char)>
<java.time.format.DecimalStyle: java.time.format.DecimalStyle withNegativeSign(char)>
<java.time.format.DecimalStyle: boolean isTimeBased()>
<java.time.format.DecimalStyle: java.time.Duration getDuration()>
<java.net.SocketImpl: boolean supportsUrgentData()>
<java.net.SocketImpl: int available()>
<java.net.SocketImpl: void create(boolean)>
<java.net.SocketImpl: java.net.InetAddress getInetAddress()>
<java.net.SocketImpl: void bind(java.net.InetAddress,int)>
<java.net.SocketImpl: void connect(java.net.InetAddress,int)>
<java.net.SocketImpl: void listen(int)>
<java.net.SocketImpl: int getPort()>
<java.net.SocketImpl: void shutdownInput()>
<java.net.SocketImpl: void accept(java.net.SocketImpl)>
<java.net.SocketImpl: void sendUrgentData(int)>
<java.net.SocketImpl: void connect(java.lang.String,int)>
<java.net.SocketImpl: int getLocalPort()>
<java.net.SocketImpl: void shutdownOutput()>
<java.net.SocketImpl: void connect(java.net.SocketAddress,int)>
<java.net.SocketImpl: java.io.InputStream getInputStream()>
<java.net.SocketImpl: java.io.OutputStream getOutputStream()>
<java.net.SocketImpl: void close()>
<java.net.SocketImpl: void setPerformancePreferences(int,int,int)>
<java.net.SocketImpl: java.io.FileDescriptor getFileDescriptor()>
<java.net.SocketImpl: void <init>()>
<java.lang.IllegalStateException: void <init>(Throwable)>
<java.lang.IllegalStateException: void <init>(String,Throwable)>
<java.lang.IllegalStateException: void <init>(String)>
<java.lang.IllegalStateException: void <init>()>
<javax.xml.transform.Transformer: java.lang.String getOutputProperty(java.lang.String)>
<javax.xml.transform.Transformer: void setErrorListener(javax.xml.transform.ErrorListener)>
<javax.xml.transform.Transformer: javax.xml.transform.URIResolver getURIResolver()>
<javax.xml.transform.Transformer: javax.xml.transform.ErrorListener getErrorListener()>
<javax.xml.transform.Transformer: void setOutputProperties(java.util.Properties)>
<javax.xml.transform.Transformer: void clearParameters()>
<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>
<javax.xml.transform.Transformer: void setParameter(java.lang.String,java.lang.Object)>
<javax.xml.transform.Transformer: void setURIResolver(javax.xml.transform.URIResolver)>
<javax.xml.transform.Transformer: java.util.Properties getOutputProperties()>
<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>
<javax.xml.transform.Transformer: void reset()>
<javax.xml.transform.Transformer: void <init>()>
<javax.xml.transform.Transformer: java.lang.Object getParameter(java.lang.String)>
<android.icu.text.NumberingSystem: android.icu.text.NumberingSystem getInstance(int,boolean,java.lang.String)>
<android.icu.text.NumberingSystem: android.icu.text.NumberingSystem getInstance(java.util.Locale)>
<android.icu.text.NumberingSystem: android.icu.text.NumberingSystem getInstanceByName(java.lang.String)>
<android.icu.text.NumberingSystem: boolean isAlgorithmic()>
<android.icu.text.NumberingSystem: void <init>()>
<android.icu.text.NumberingSystem: android.icu.text.NumberingSystem getInstance()>
<android.icu.text.NumberingSystem: java.lang.String getDescription()>
<android.icu.text.NumberingSystem: boolean isValidDigitString(java.lang.String)>
<android.icu.text.NumberingSystem: android.icu.text.NumberingSystem getInstance(android.icu.util.ULocale)>
<android.icu.text.NumberingSystem: java.lang.String[] getAvailableNames()>
<android.icu.text.NumberingSystem: java.lang.String getName()>
<android.icu.text.NumberingSystem: int getRadix()>
<java.security.KeyPairGeneratorSpi: void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<java.security.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()>
<java.security.KeyPairGeneratorSpi: void <init>()>
<java.security.KeyPairGeneratorSpi: void initialize(int,java.security.SecureRandom)>
<javax.xml.transform.Templates: java.util.Properties getOutputProperties()>
<javax.xml.transform.Templates: javax.xml.transform.Transformer newTransformer()>
<android.transition.Scene: void enter()>
<android.transition.Scene: android.transition.Scene getCurrentScene(android.view.ViewGroup)>
<android.transition.Scene: void <init>(android.view.ViewGroup,android.view.View)>
<android.transition.Scene: void <init>(android.view.ViewGroup)>
<android.transition.Scene: android.transition.Scene getSceneForLayout(android.view.ViewGroup,int,android.content.Context)>
<android.transition.Scene: android.view.ViewGroup getSceneRoot()>
<android.transition.Scene: void exit()>
<android.transition.Scene: void setEnterAction(Runnable)>
<android.transition.Scene: void setExitAction(Runnable)>
<android.transition.Scene: void <init>(android.view.ViewGroup,android.view.ViewGroup)>
<javax.sql.RowSetMetaData extends java.sql.ResultSetMetaData: void setSearchable(int,boolean)>
<javax.sql.RowSetMetaData extends java.sql.ResultSetMetaData: void setSigned(int,boolean)>
<javax.sql.RowSetMetaData extends java.sql.ResultSetMetaData: void setCaseSensitive(int,boolean)>
<javax.sql.RowSetMetaData extends java.sql.ResultSetMetaData: void setColumnLabel(int,java.lang.String)>
<javax.sql.RowSetMetaData extends java.sql.ResultSetMetaData: void setPrecision(int,int)>
<javax.sql.RowSetMetaData extends java.sql.ResultSetMetaData: void setSchemaName(int,java.lang.String)>
<javax.sql.RowSetMetaData extends java.sql.ResultSetMetaData: void setCatalogName(int,java.lang.String)>
<javax.sql.RowSetMetaData extends java.sql.ResultSetMetaData: void setColumnTypeName(int,java.lang.String)>
<javax.sql.RowSetMetaData extends java.sql.ResultSetMetaData: void setColumnType(int,int)>
<javax.sql.RowSetMetaData extends java.sql.ResultSetMetaData: void setNullable(int,int)>
<javax.sql.RowSetMetaData extends java.sql.ResultSetMetaData: void setTableName(int,java.lang.String)>
<javax.sql.RowSetMetaData extends java.sql.ResultSetMetaData: void setCurrency(int,boolean)>
<javax.sql.RowSetMetaData extends java.sql.ResultSetMetaData: void setColumnCount(int)>
<javax.sql.RowSetMetaData extends java.sql.ResultSetMetaData: void setColumnName(int,java.lang.String)>
<javax.sql.RowSetMetaData extends java.sql.ResultSetMetaData: void setAutoIncrement(int,boolean)>
<javax.sql.RowSetMetaData extends java.sql.ResultSetMetaData: void setColumnDisplaySize(int,int)>
<javax.sql.RowSetMetaData extends java.sql.ResultSetMetaData: void setScale(int,int)>
<android.database.sqlite.SQLiteCantOpenDatabaseException: void <init>(String)>
<android.database.sqlite.SQLiteCantOpenDatabaseException: void <init>()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean hasContended()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void acquire(long)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.Collection getQueuedThreads()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.lang.Thread getFirstQueuedThread()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void acquireInterruptibly(long)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.Collection getExclusiveQueuedThreads()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean compareAndSetState(long,long)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void acquireShared(long)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean isQueued(java.lang.Thread)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean tryAcquire(long)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean tryAcquireSharedNanos(long,long)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean releaseShared(long)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void setState(long)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean hasQueuedPredecessors()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void acquireSharedInterruptibly(long)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean hasQueuedThreads()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean isHeldExclusively()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean owns(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.Collection getWaitingThreads(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void <init>()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean release(long)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: int getQueueLength()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long tryAcquireShared(long)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean tryAcquireNanos(long,long)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean tryRelease(long)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: long getState()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: java.util.Collection getSharedQueuedThreads()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: boolean tryReleaseShared(long)>
<android.provider.Browser: void sendString(android.content.Context,java.lang.String)>
<android.provider.Browser: void <init>()>
<android.nfc.NfcAdapter.ReaderCallback: void onTagDiscovered(android.nfc.Tag)>
<android.hardware.camera2.params.RggbChannelVector: float getGreenOdd()>
<android.hardware.camera2.params.RggbChannelVector: void copyTo(float[],int)>
<android.hardware.camera2.params.RggbChannelVector: void <init>(float,float,float,float)>
<android.hardware.camera2.params.RggbChannelVector: float getGreenEven()>
<android.hardware.camera2.params.RggbChannelVector: float getComponent(int)>
<android.hardware.camera2.params.RggbChannelVector: float getRed()>
<android.hardware.camera2.params.RggbChannelVector: float getBlue()>
<android.os.Binder.ProxyTransactListener: void onTransactEnded(java.lang.Object)>
<android.os.Binder.ProxyTransactListener: java.lang.Object onTransactStarted(android.os.IBinder,int)>
<android.net.wifi.rtt.ResponderLocation: java.lang.String getMapImageMimeType()>
<android.net.wifi.rtt.ResponderLocation: boolean isZaxisSubelementValid()>
<android.net.wifi.rtt.ResponderLocation: double getLatitudeUncertainty()>
<android.net.wifi.rtt.ResponderLocation: java.util.List getColocatedBssids()>
<android.net.wifi.rtt.ResponderLocation: double getFloorNumber()>
<android.net.wifi.rtt.ResponderLocation: double getLongitude()>
<android.net.wifi.rtt.ResponderLocation: android.net.Uri getMapImageUri()>
<android.net.wifi.rtt.ResponderLocation: boolean getExtraInfoOnAssociationIndication()>
<android.net.wifi.rtt.ResponderLocation: android.location.Location toLocation()>
<android.net.wifi.rtt.ResponderLocation: boolean getRegisteredLocationAgreementIndication()>
<android.net.wifi.rtt.ResponderLocation: int getAltitudeType()>
<android.net.wifi.rtt.ResponderLocation: android.location.Address toCivicLocationAddress()>
<android.net.wifi.rtt.ResponderLocation: int describeContents()>
<android.net.wifi.rtt.ResponderLocation: int getExpectedToMove()>
<android.net.wifi.rtt.ResponderLocation: double getHeightAboveFloorMeters()>
<android.net.wifi.rtt.ResponderLocation: double getLongitudeUncertainty()>
<android.net.wifi.rtt.ResponderLocation: double getLatitude()>
<android.net.wifi.rtt.ResponderLocation: android.util.SparseArray toCivicLocationSparseArray()>
<android.net.wifi.rtt.ResponderLocation: double getAltitude()>
<android.net.wifi.rtt.ResponderLocation: double getHeightAboveFloorUncertaintyMeters()>
<android.net.wifi.rtt.ResponderLocation: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.rtt.ResponderLocation: int getDatum()>
<android.net.wifi.rtt.ResponderLocation: int getLciVersion()>
<android.net.wifi.rtt.ResponderLocation: boolean isLciSubelementValid()>
<android.net.wifi.rtt.ResponderLocation: double getAltitudeUncertainty()>
<org.xml.sax.DocumentHandler: void endDocument()>
<org.xml.sax.DocumentHandler: void ignorableWhitespace(char[],int,int)>
<org.xml.sax.DocumentHandler: void characters(char[],int,int)>
<org.xml.sax.DocumentHandler: void startElement(java.lang.String,org.xml.sax.AttributeList)>
<org.xml.sax.DocumentHandler: void endElement(java.lang.String)>
<org.xml.sax.DocumentHandler: void processingInstruction(java.lang.String,java.lang.String)>
<org.xml.sax.DocumentHandler: void setDocumentLocator(org.xml.sax.Locator)>
<org.xml.sax.DocumentHandler: void startDocument()>
<android.widget.ZoomButtonsController: void setFocusable(boolean)>
<android.widget.ZoomButtonsController: void setVisible(boolean)>
<android.widget.ZoomButtonsController: void <init>(android.view.View)>
<android.widget.ZoomButtonsController: void setOnZoomListener(android.widget.ZoomButtonsController.OnZoomListener)>
<android.widget.ZoomButtonsController: boolean isAutoDismissed()>
<android.widget.ZoomButtonsController: void setZoomInEnabled(boolean)>
<android.widget.ZoomButtonsController: android.view.ViewGroup getContainer()>
<android.widget.ZoomButtonsController: boolean isVisible()>
<android.widget.ZoomButtonsController: boolean onTouch(android.view.View,android.view.MotionEvent)>
<android.widget.ZoomButtonsController: void setZoomSpeed(long)>
<android.widget.ZoomButtonsController: void setZoomOutEnabled(boolean)>
<android.widget.ZoomButtonsController: android.view.View getZoomControls()>
<android.widget.ZoomButtonsController: void setAutoDismissed(boolean)>
<java.lang.Byte: int intValue()>
<java.lang.Byte: void <init>(byte)>
<java.lang.Byte: byte parseByte(java.lang.String)>
<java.lang.Byte: long longValue()>
<java.lang.Byte: double doubleValue()>
<java.lang.Byte: float floatValue()>
<java.lang.Byte: void <init>(String)>
<java.lang.Byte: int toUnsignedInt(byte)>
<java.lang.Byte: byte parseByte(java.lang.String,int)>
<java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)>
<java.lang.Byte: java.lang.Byte decode(java.lang.String)>
<java.lang.Byte: java.lang.String toString(byte)>
<java.lang.Byte: java.lang.Byte valueOf(java.lang.String)>
<java.lang.Byte: long toUnsignedLong(byte)>
<java.lang.Byte: java.lang.Byte valueOf(byte)>
<java.lang.Byte: int hashCode(byte)>
<java.lang.Byte: int compareTo(java.lang.Byte)>
<java.lang.Byte: int compare(byte,byte)>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getType(java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getType(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: int getLength()>
<org.xml.sax.helpers.AttributesImpl: void setAttributes(org.xml.sax.Attributes)>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getValue(java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: int getIndex(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: void setAttribute(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: void setLocalName(int,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: void setQName(int,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: void removeAttribute(int)>
<org.xml.sax.helpers.AttributesImpl: void setURI(int,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: void <init>(org.xml.sax.Attributes)>
<org.xml.sax.helpers.AttributesImpl: void clear()>
<org.xml.sax.helpers.AttributesImpl: void setValue(int,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getType(int)>
<org.xml.sax.helpers.AttributesImpl: int getIndex(java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: void setType(int,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getValue(int)>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getValue(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getQName(int)>
<org.xml.sax.helpers.AttributesImpl: void <init>()>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getURI(int)>
<org.xml.sax.helpers.AttributesImpl: java.lang.String getLocalName(int)>
<android.print.PrintAttributes.Resolution: int getHorizontalDpi()>
<android.print.PrintAttributes.Resolution: int getVerticalDpi()>
<android.print.PrintAttributes.Resolution: void <init>(from=1) int)>
<android.print.PrintAttributes.Resolution: java.lang.String getLabel()>
<android.print.PrintAttributes.Resolution: java.lang.String getId()>
<android.provider.ContactsContract.SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.ContactsContract.SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract.SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract.SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<android.app.assist.AssistContent: void setStructuredData(java.lang.String)>
<android.app.assist.AssistContent: void setWebUri(android.net.Uri)>
<android.app.assist.AssistContent: android.os.Bundle getExtras()>
<android.app.assist.AssistContent: int describeContents()>
<android.app.assist.AssistContent: android.net.Uri getWebUri()>
<android.app.assist.AssistContent: void setClipData(android.content.ClipData)>
<android.app.assist.AssistContent: void setIntent(android.content.Intent)>
<android.app.assist.AssistContent: void <init>()>
<android.app.assist.AssistContent: boolean isAppProvidedWebUri()>
<android.app.assist.AssistContent: void writeToParcel(android.os.Parcel,int)>
<android.app.assist.AssistContent: java.lang.String getStructuredData()>
<android.app.assist.AssistContent: boolean isAppProvidedIntent()>
<android.app.assist.AssistContent: android.content.Intent getIntent()>
<android.app.assist.AssistContent: android.content.ClipData getClipData()>
<java.security.acl.NotOwnerException: void <init>()>
<android.text.method.Touch: int getInitialScrollY(android.widget.TextView,android.text.Spannable)>
<android.text.method.Touch: int getInitialScrollX(android.widget.TextView,android.text.Spannable)>
<android.text.method.Touch: boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.Touch: void scrollTo(android.widget.TextView,android.text.Layout,int,int)>
<java.security.ProviderException: void <init>(String)>
<java.security.ProviderException: void <init>(Throwable)>
<java.security.ProviderException: void <init>()>
<java.security.ProviderException: void <init>(String,Throwable)>
<java.util.concurrent.CompletionException: void <init>(Throwable)>
<java.util.concurrent.CompletionException: void <init>()>
<java.util.concurrent.CompletionException: void <init>(String,Throwable)>
<java.util.concurrent.CompletionException: void <init>(String)>
<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.Bitmap)>
<android.graphics.drawable.BitmapDrawable: void <init>()>
<android.graphics.drawable.BitmapDrawable: android.graphics.Shader.TileMode getTileModeX()>
<android.graphics.drawable.BitmapDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.BitmapDrawable: void setTileModeX(android.graphics.Shader.TileMode)>
<android.graphics.drawable.BitmapDrawable: int getGravity()>
<android.graphics.drawable.BitmapDrawable: boolean isAutoMirrored()>
<android.graphics.drawable.BitmapDrawable: void setTargetDensity(int)>
<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.Drawable.ConstantState getConstantState()>
<android.graphics.drawable.BitmapDrawable: void setAntiAlias(boolean)>
<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>
<android.graphics.drawable.BitmapDrawable: android.graphics.Shader.TileMode getTileModeY()>
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,String)>
<android.graphics.drawable.BitmapDrawable: void setTargetDensity(android.util.DisplayMetrics)>
<android.graphics.drawable.BitmapDrawable: void setTileModeY(android.graphics.Shader.TileMode)>
<android.graphics.drawable.BitmapDrawable: void setDither(boolean)>
<android.graphics.drawable.BitmapDrawable: void setTileModeXY(android.graphics.Shader.TileMode,android.graphics.Shader.TileMode)>
<android.graphics.drawable.BitmapDrawable: void <init>(String)>
<android.graphics.drawable.BitmapDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.BitmapDrawable: void setAlpha(int)>
<android.graphics.drawable.BitmapDrawable: void <init>(java.io.InputStream)>
<android.graphics.drawable.BitmapDrawable: android.graphics.Paint getPaint()>
<android.graphics.drawable.BitmapDrawable: boolean hasAntiAlias()>
<android.graphics.drawable.BitmapDrawable: boolean hasMipMap()>
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources)>
<android.graphics.drawable.BitmapDrawable: void setGravity(int)>
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,java.io.InputStream)>
<android.graphics.drawable.BitmapDrawable: void setTargetDensity(android.graphics.Canvas)>
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>
<android.graphics.drawable.BitmapDrawable: int getOpacity()>
<android.graphics.drawable.BitmapDrawable: void setMipMap(boolean)>
<android.graphics.drawable.Animatable: void start()>
<android.graphics.drawable.Animatable: boolean isRunning()>
<android.graphics.drawable.Animatable: void stop()>
<android.view.inspector.InspectionCompanionProvider: android.view.inspector.InspectionCompanion provide(java.lang.Class)>
<android.app.Vr2dDisplayProperties: int describeContents()>
<android.app.Vr2dDisplayProperties: void <init>(int,int,int)>
<android.app.Vr2dDisplayProperties: int getDpi()>
<android.app.Vr2dDisplayProperties: void writeToParcel(android.os.Parcel,int)>
<android.app.Vr2dDisplayProperties: int getHeight()>
<android.app.Vr2dDisplayProperties: void dump(java.io.PrintWriter,java.lang.String)>
<android.app.Vr2dDisplayProperties: int getWidth()>
<android.app.Vr2dDisplayProperties: int getAddedFlags()>
<android.app.Vr2dDisplayProperties: int getRemovedFlags()>
<java.time.OffsetDateTime: java.time.OffsetDateTime plusWeeks(long)>
<java.time.OffsetDateTime: boolean isEqual(java.time.OffsetDateTime)>
<java.time.OffsetDateTime: java.time.ZoneOffset getOffset()>
<java.time.OffsetDateTime: boolean isSupported(java.time.temporal.TemporalField)>
<java.time.OffsetDateTime: java.time.Instant toInstant()>
<java.time.OffsetDateTime: java.time.ZonedDateTime toZonedDateTime()>
<java.time.OffsetDateTime: java.time.OffsetDateTime withSecond(int)>
<java.time.OffsetDateTime: java.time.OffsetDateTime now(java.time.ZoneId)>
<java.time.OffsetDateTime: java.time.OffsetDateTime withMonth(int)>
<java.time.OffsetDateTime: java.time.OffsetDateTime minusYears(long)>
<java.time.OffsetDateTime: java.time.OffsetDateTime plusSeconds(long)>
<java.time.OffsetDateTime: java.time.Month getMonth()>
<java.time.OffsetDateTime: java.time.OffsetDateTime of(java.time.LocalDateTime,java.time.ZoneOffset)>
<java.time.OffsetDateTime: java.time.OffsetDateTime parse(CharSequence)>
<java.time.OffsetDateTime: java.time.OffsetDateTime plusDays(long)>
<java.time.OffsetDateTime: java.time.OffsetDateTime minusSeconds(long)>
<java.time.OffsetDateTime: long toEpochSecond()>
<java.time.OffsetDateTime: int getMonthValue()>
<java.time.OffsetDateTime: java.time.OffsetDateTime truncatedTo(java.time.temporal.TemporalUnit)>
<java.time.OffsetDateTime: int compareTo(java.time.OffsetDateTime)>
<java.time.OffsetDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>
<java.time.OffsetDateTime: boolean isAfter(java.time.OffsetDateTime)>
<java.time.OffsetDateTime: boolean isBefore(java.time.OffsetDateTime)>
<java.time.OffsetDateTime: java.time.OffsetDateTime minusWeeks(long)>
<java.time.OffsetDateTime: java.util.Comparator timeLineOrder()>
<java.time.OffsetDateTime: java.time.OffsetDateTime withNano(int)>
<java.time.OffsetDateTime: java.time.OffsetDateTime of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneOffset)>
<java.time.OffsetDateTime: java.time.OffsetDateTime parse(CharSequence,java.time.format.DateTimeFormatter)>
<java.time.OffsetDateTime: java.time.LocalTime toLocalTime()>
<java.time.OffsetDateTime: java.time.OffsetDateTime withOffsetSameLocal(java.time.ZoneOffset)>
<java.time.OffsetDateTime: java.time.ZonedDateTime atZoneSameInstant(java.time.ZoneId)>
<java.time.OffsetDateTime: java.time.OffsetDateTime minusHours(long)>
<java.time.OffsetDateTime: java.time.OffsetDateTime plusHours(long)>
<java.time.OffsetDateTime: int getYear()>
<java.time.OffsetDateTime: java.time.OffsetDateTime of(int,int,int,int,int,int,int,java.time.ZoneOffset)>
<java.time.OffsetDateTime: java.time.OffsetDateTime plusMinutes(long)>
<java.time.OffsetDateTime: java.time.OffsetDateTime minusMonths(long)>
<java.time.OffsetDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>
<java.time.OffsetDateTime: java.time.OffsetDateTime plusYears(long)>
<java.time.OffsetDateTime: java.time.OffsetDateTime withHour(int)>
<java.time.OffsetDateTime: int getSecond()>
<java.time.OffsetDateTime: java.time.OffsetDateTime withOffsetSameInstant(java.time.ZoneOffset)>
<java.time.OffsetDateTime: int getMinute()>
<java.time.OffsetDateTime: java.time.OffsetDateTime now()>
<java.time.OffsetDateTime: int getDayOfMonth()>
<java.time.OffsetDateTime: java.time.OffsetDateTime from(java.time.temporal.TemporalAccessor)>
<java.time.OffsetDateTime: java.time.OffsetDateTime minus(java.time.temporal.TemporalAmount)>
<java.time.OffsetDateTime: java.time.OffsetDateTime withYear(int)>
<java.time.OffsetDateTime: java.time.DayOfWeek getDayOfWeek()>
<java.time.OffsetDateTime: java.time.OffsetDateTime minus(long,java.time.temporal.TemporalUnit)>
<java.time.OffsetDateTime: java.time.OffsetDateTime with(java.time.temporal.TemporalField,long)>
<java.time.OffsetDateTime: java.time.OffsetDateTime plus(java.time.temporal.TemporalAmount)>
<java.time.OffsetDateTime: java.time.OffsetDateTime plus(long,java.time.temporal.TemporalUnit)>
<java.time.OffsetDateTime: java.time.LocalDateTime toLocalDateTime()>
<java.time.OffsetDateTime: int getDayOfYear()>
<java.time.OffsetDateTime: java.time.OffsetDateTime minusNanos(long)>
<java.time.OffsetDateTime: int getNano()>
<java.time.OffsetDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>
<java.time.OffsetDateTime: java.time.ZonedDateTime atZoneSimilarLocal(java.time.ZoneId)>
<java.time.OffsetDateTime: int getHour()>
<java.time.OffsetDateTime: long getLong(java.time.temporal.TemporalField)>
<java.time.OffsetDateTime: java.time.OffsetDateTime plusMonths(long)>
<java.time.OffsetDateTime: java.time.OffsetDateTime minusMinutes(long)>
<java.time.OffsetDateTime: java.time.OffsetDateTime with(java.time.temporal.TemporalAdjuster)>
<java.time.OffsetDateTime: java.time.OffsetTime toOffsetTime()>
<java.time.OffsetDateTime: java.time.OffsetDateTime withDayOfMonth(int)>
<java.time.OffsetDateTime: java.time.OffsetDateTime minusDays(long)>
<java.time.OffsetDateTime: java.time.OffsetDateTime plusNanos(long)>
<java.time.OffsetDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>
<java.time.OffsetDateTime: java.time.OffsetDateTime ofInstant(java.time.Instant,java.time.ZoneId)>
<java.time.OffsetDateTime: java.time.OffsetDateTime now(java.time.Clock)>
<java.time.OffsetDateTime: java.time.OffsetDateTime withDayOfYear(int)>
<java.time.OffsetDateTime: java.time.OffsetDateTime withMinute(int)>
<java.time.OffsetDateTime: java.time.LocalDate toLocalDate()>
<java.lang.reflect.Modifier: boolean isSynchronized(int)>
<java.lang.reflect.Modifier: boolean isFinal(int)>
<java.lang.reflect.Modifier: boolean isVolatile(int)>
<java.lang.reflect.Modifier: boolean isProtected(int)>
<java.lang.reflect.Modifier: void <init>()>
<java.lang.reflect.Modifier: int interfaceModifiers()>
<java.lang.reflect.Modifier: boolean isAbstract(int)>
<java.lang.reflect.Modifier: int classModifiers()>
<java.lang.reflect.Modifier: boolean isTransient(int)>
<java.lang.reflect.Modifier: boolean isStatic(int)>
<java.lang.reflect.Modifier: boolean isInterface(int)>
<java.lang.reflect.Modifier: boolean isStrict(int)>
<java.lang.reflect.Modifier: boolean isPublic(int)>
<java.lang.reflect.Modifier: int fieldModifiers()>
<java.lang.reflect.Modifier: int methodModifiers()>
<java.lang.reflect.Modifier: int constructorModifiers()>
<java.lang.reflect.Modifier: boolean isPrivate(int)>
<java.lang.reflect.Modifier: boolean isNative(int)>
<java.lang.reflect.Modifier: int parameterModifiers()>
<java.lang.reflect.Modifier: java.lang.String toString(int)>
<android.net.wifi.aware.SubscribeDiscoverySession: void updateSubscribe(android.net.wifi.aware.SubscribeConfig)>
<android.widget.TableLayout.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TableLayout.LayoutParams: void <init>(int,int,float)>
<android.widget.TableLayout.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.widget.TableLayout.LayoutParams: void <init>(int,int)>
<android.widget.TableLayout.LayoutParams: void <init>()>
<android.widget.TableLayout.LayoutParams: void <init>(android.view.ViewGroup.MarginLayoutParams)>
<android.nfc.NfcAdapter: void disableForegroundDispatch(android.app.Activity)>
<android.nfc.NfcAdapter: boolean enableNdefPush()>
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter(android.content.Context)>
<android.nfc.NfcAdapter: void setNdefPushMessageCallback(android.nfc.NfcAdapter.CreateNdefMessageCallback,android.app.Activity,android.app.Activity...)>
<android.nfc.NfcAdapter: void disableReaderMode(android.app.Activity)>
<android.nfc.NfcAdapter: boolean disableNdefPush()>
<android.nfc.NfcAdapter: boolean enableSecureNfc(boolean)>
<android.nfc.NfcAdapter: void enableReaderMode(android.app.Activity,android.nfc.NfcAdapter.ReaderCallback,int,android.os.Bundle)>
<android.nfc.NfcAdapter: boolean addNfcUnlockHandler(android.nfc.NfcAdapter.NfcUnlockHandler,java.lang.String[])>
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity...)>
<android.nfc.NfcAdapter: boolean ignore(android.nfc.Tag,int,android.nfc.NfcAdapter.OnTagRemovedListener,android.os.Handler)>
<android.nfc.NfcAdapter: boolean isEnabled()>
<android.nfc.NfcAdapter: boolean isSecureNfcEnabled()>
<android.nfc.NfcAdapter: void setBeamPushUrisCallback(android.nfc.NfcAdapter.CreateBeamUrisCallback,android.app.Activity)>
<android.nfc.NfcAdapter: boolean disable()>
<android.nfc.NfcAdapter: void disableForegroundNdefPush(android.app.Activity)>
<android.nfc.NfcAdapter: void setOnNdefPushCompleteCallback(android.nfc.NfcAdapter.OnNdefPushCompleteCallback,android.app.Activity,android.app.Activity...)>
<android.nfc.NfcAdapter: boolean invokeBeam(android.app.Activity)>
<android.nfc.NfcAdapter: boolean removeNfcUnlockHandler(android.nfc.NfcAdapter.NfcUnlockHandler)>
<android.nfc.NfcAdapter: boolean isSecureNfcSupported()>
<android.nfc.NfcAdapter: void setBeamPushUris(android.net.Uri[],android.app.Activity)>
<android.nfc.NfcAdapter: boolean enable()>
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])>
<android.nfc.NfcAdapter: void enableForegroundNdefPush(android.app.Activity,android.nfc.NdefMessage)>
<android.nfc.NfcAdapter: boolean disable(boolean)>
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,int)>
<android.nfc.NfcAdapter: boolean isNdefPushEnabled()>
<android.os.StatsDimensionsValue: boolean getBooleanValue()>
<android.os.StatsDimensionsValue: int getValueType()>
<android.os.StatsDimensionsValue: java.util.List getTupleValueList()>
<android.os.StatsDimensionsValue: boolean isValueType(int)>
<android.os.StatsDimensionsValue: int getField()>
<android.os.StatsDimensionsValue: int getIntValue()>
<android.os.StatsDimensionsValue: long getLongValue()>
<android.os.StatsDimensionsValue: float getFloatValue()>
<android.os.StatsDimensionsValue: int describeContents()>
<android.os.StatsDimensionsValue: java.lang.String getStringValue()>
<android.os.StatsDimensionsValue: void writeToParcel(android.os.Parcel,int)>
<android.app.DirectAction.Builder: void <init>(String)>
<android.app.DirectAction.Builder: android.app.DirectAction.Builder setLocusId(android.content.LocusId)>
<android.app.DirectAction.Builder: android.app.DirectAction.Builder setExtras(android.os.Bundle)>
<android.app.DirectAction.Builder: android.app.DirectAction build()>
<android.view.KeyEvent: int getSource()>
<android.view.KeyEvent: int getUnicodeChar(int)>
<android.view.KeyEvent: int getAction()>
<android.view.KeyEvent: int getDeadChar(int,int)>
<android.view.KeyEvent: boolean metaStateHasNoModifiers(int)>
<android.view.KeyEvent: char getMatch(char[],int)>
<android.view.KeyEvent: int getScanCode()>
<android.view.KeyEvent: int getModifiers()>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int)>
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent.Callback,android.view.KeyEvent.DispatcherState,java.lang.Object)>
<android.view.KeyEvent: void <init>(long,long,int,int,int)>
<android.view.KeyEvent: boolean isTracking()>
<android.view.KeyEvent: int getUnicodeChar()>
<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>
<android.view.KeyEvent: boolean isGamepadButton(int)>
<android.view.KeyEvent: void <init>(long,String,int,int)>
<android.view.KeyEvent: int getDeviceId()>
<android.view.KeyEvent: long getEventTime()>
<android.view.KeyEvent: boolean isSymPressed()>
<android.view.KeyEvent: java.lang.String keyCodeToString(int)>
<android.view.KeyEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.KeyEvent: android.view.KeyEvent changeFlags(android.view.KeyEvent,int)>
<android.view.KeyEvent: boolean isSystem()>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int,int)>
<android.view.KeyEvent: java.lang.String getCharacters()>
<android.view.KeyEvent: long getDownTime()>
<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int)>
<android.view.KeyEvent: boolean isMetaPressed()>
<android.view.KeyEvent: boolean isFunctionPressed()>
<android.view.KeyEvent: boolean isCapsLockOn()>
<android.view.KeyEvent: android.view.KeyEvent changeAction(android.view.KeyEvent,int)>
<android.view.KeyEvent: char getMatch(char[])>
<android.view.KeyEvent: void startTracking()>
<android.view.KeyEvent: boolean hasModifiers(int)>
<android.view.KeyEvent: int getModifierMetaStateMask()>
<android.view.KeyEvent: int normalizeMetaState(int)>
<android.view.KeyEvent: void <init>(android.view.KeyEvent)>
<android.view.KeyEvent: boolean isAltPressed()>
<android.view.KeyEvent: boolean getKeyData(android.view.KeyCharacterMap.KeyData)>
<android.view.KeyEvent: void setSource(int)>
<android.view.KeyEvent: boolean hasNoModifiers()>
<android.view.KeyEvent: boolean isCanceled()>
<android.view.KeyEvent: boolean isNumLockOn()>
<android.view.KeyEvent: boolean isModifierKey(int)>
<android.view.KeyEvent: int getFlags()>
<android.view.KeyEvent: boolean isShiftPressed()>
<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int,int)>
<android.view.KeyEvent: void setDisplayId(int)>
<android.view.KeyEvent: boolean isCtrlPressed()>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int)>
<android.view.KeyEvent: int getRepeatCount()>
<android.view.KeyEvent: boolean isLongPress()>
<android.view.KeyEvent: void <init>(int,int)>
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent.Callback)>
<android.view.KeyEvent: char getNumber()>
<android.view.KeyEvent: char getDisplayLabel()>
<android.view.KeyEvent: int getMaxKeyCode()>
<android.view.KeyEvent: void <init>(android.view.KeyEvent,long,int)>
<android.view.KeyEvent: boolean isScrollLockOn()>
<android.view.KeyEvent: int keyCodeFromString(java.lang.String)>
<android.view.KeyEvent: boolean metaStateHasModifiers(int,int)>
<android.view.KeyEvent: boolean isPrintingKey()>
<android.view.KeyEvent: int getKeyCode()>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int)>
<android.view.KeyEvent: int getMetaState()>
<android.view.KeyEvent: java.lang.String actionToString(int)>
<android.drm.DrmStore.Action: void <init>()>
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String,java.util.Map)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtIndex(int,android.media.MediaMetadataRetriever.BitmapParams)>
<android.media.MediaMetadataRetriever: java.util.List getFramesAtIndex(int,int)>
<android.media.MediaMetadataRetriever: java.lang.String extractMetadata(int)>
<android.media.MediaMetadataRetriever: byte[] getEmbeddedPicture()>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long,int)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getScaledFrameAtTime(long,int,int,int)>
<android.media.MediaMetadataRetriever: void release()>
<android.media.MediaMetadataRetriever: java.util.List getFramesAtIndex(int,int,android.media.MediaMetadataRetriever.BitmapParams)>
<android.media.MediaMetadataRetriever: void setDataSource(android.media.MediaDataSource)>
<android.media.MediaMetadataRetriever: void <init>()>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getPrimaryImage()>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtIndex(int)>
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime()>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getImageAtIndex(int,android.media.MediaMetadataRetriever.BitmapParams)>
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String)>
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor,long,long)>
<android.media.MediaMetadataRetriever: void close()>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getPrimaryImage(android.media.MediaMetadataRetriever.BitmapParams)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getImageAtIndex(int)>
<java.lang.reflect.GenericSignatureFormatError: void <init>(String)>
<java.lang.reflect.GenericSignatureFormatError: void <init>()>
<android.hardware.camera2.CameraCaptureSession.StateCallback: void <init>()>
<android.hardware.camera2.CameraCaptureSession.StateCallback: void onReady(android.hardware.camera2.CameraCaptureSession)>
<android.hardware.camera2.CameraCaptureSession.StateCallback: void onClosed(android.hardware.camera2.CameraCaptureSession)>
<android.hardware.camera2.CameraCaptureSession.StateCallback: void onSurfacePrepared(android.hardware.camera2.CameraCaptureSession,android.view.Surface)>
<android.hardware.camera2.CameraCaptureSession.StateCallback: void onConfigureFailed(android.hardware.camera2.CameraCaptureSession)>
<android.hardware.camera2.CameraCaptureSession.StateCallback: void onConfigured(android.hardware.camera2.CameraCaptureSession)>
<android.hardware.camera2.CameraCaptureSession.StateCallback: void onActive(android.hardware.camera2.CameraCaptureSession)>
<android.hardware.camera2.CameraCaptureSession.StateCallback: void onCaptureQueueEmpty(android.hardware.camera2.CameraCaptureSession)>
<android.service.voice.VoiceInteractionSession.Request: void cancel()>
<android.service.voice.VoiceInteractionSession.Request: int getCallingUid()>
<android.service.voice.VoiceInteractionSession.Request: java.lang.String getCallingPackage()>
<android.service.voice.VoiceInteractionSession.Request: boolean isActive()>
<android.service.voice.VoiceInteractionSession.Request: android.os.Bundle getExtras()>
<android.view.textservice.SuggestionsInfo: void <init>(int,String[],int,int)>
<android.view.textservice.SuggestionsInfo: java.lang.String getSuggestionAt(int)>
<android.view.textservice.SuggestionsInfo: int getCookie()>
<android.view.textservice.SuggestionsInfo: void <init>(int,String[])>
<android.view.textservice.SuggestionsInfo: int getSuggestionsAttributes()>
<android.view.textservice.SuggestionsInfo: int getSequence()>
<android.view.textservice.SuggestionsInfo: int getSuggestionsCount()>
<android.view.textservice.SuggestionsInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.textservice.SuggestionsInfo: void <init>(android.os.Parcel)>
<android.view.textservice.SuggestionsInfo: void setCookieAndSequence(int,int)>
<android.view.textservice.SuggestionsInfo: int describeContents()>
<android.app.ExpandableListActivity: boolean onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)>
<android.app.ExpandableListActivity: void setSelectedGroup(int)>
<android.app.ExpandableListActivity: long getSelectedPosition()>
<android.app.ExpandableListActivity: void onGroupCollapse(int)>
<android.app.ExpandableListActivity: void onGroupExpand(int)>
<android.app.ExpandableListActivity: void <init>()>
<android.app.ExpandableListActivity: android.widget.ExpandableListAdapter getExpandableListAdapter()>
<android.app.ExpandableListActivity: long getSelectedId()>
<android.app.ExpandableListActivity: void setListAdapter(android.widget.ExpandableListAdapter)>
<android.app.ExpandableListActivity: android.widget.ExpandableListView getExpandableListView()>
<android.app.ExpandableListActivity: boolean setSelectedChild(int,int,boolean)>
<java.util.HashMap: java.util.Set entrySet()>
<java.util.HashMap: void <init>()>
<java.util.HashMap: void <init>(int)>
<java.util.HashMap: void <init>(int,float)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.util.HashMap: java.lang.Object clone()>
<android.media.AudioTrack: void finalize()>
<android.media.AudioTrack: void setOffloadDelayPadding(int,int)>
<android.media.AudioTrack: boolean isOffloadedPlayback()>
<android.media.AudioTrack: void <init>(int,int,int,int,int,int,int)>
<android.media.AudioTrack: float getMinVolume()>
<android.media.AudioTrack: void addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,android.os.Handler)>
<android.media.AudioTrack: int setPresentation(android.media.AudioPresentation)>
<android.media.AudioTrack: android.media.AudioFormat getFormat()>
<android.media.AudioTrack: float getMaxVolume()>
<android.media.AudioTrack: int setLoopPoints(int,int,int)>
<android.media.AudioTrack: void pause()>
<android.media.AudioTrack: void play()>
<android.media.AudioTrack: boolean isDirectPlaybackSupported(android.media.AudioFormat,android.media.AudioAttributes)>
<android.media.AudioTrack: void unregisterStreamEventCallback(android.media.AudioTrack.StreamEventCallback)>
<android.media.AudioTrack: void stop()>
<android.media.AudioTrack: int getChannelCount()>
<android.media.AudioTrack: void setPlaybackPositionUpdateListener(android.media.AudioTrack.OnPlaybackPositionUpdateListener)>
<android.media.AudioTrack: int setPlaybackRate(int)>
<android.media.AudioTrack: int write(float[],int,int,int)>
<android.media.AudioTrack: int write(short[],int,int)>
<android.media.AudioTrack: int getPlaybackHeadPosition()>
<android.media.AudioTrack: int write(byte[],int,int,int)>
<android.media.AudioTrack: void flush()>
<android.media.AudioTrack: int getPlaybackRate()>
<android.media.AudioTrack: int getNativeFrameCount()>
<android.media.AudioTrack: int setStereoVolume(float,float)>
<android.media.AudioTrack: android.media.AudioAttributes getAudioAttributes()>
<android.media.AudioTrack: int write(byte[],int,int)>
<android.media.AudioTrack: int getNotificationMarkerPosition()>
<android.media.AudioTrack: int setPlaybackHeadPosition(int)>
<android.media.AudioTrack: int getOffloadPadding()>
<android.media.AudioTrack: int getPerformanceMode()>
<android.media.AudioTrack: int write(short[],int,int,int)>
<android.media.AudioTrack: int getBufferCapacityInFrames()>
<android.media.AudioTrack: void <init>(int,int,int,int,int,int)>
<android.media.AudioTrack: int getOffloadDelay()>
<android.media.AudioTrack: int attachAuxEffect(int)>
<android.media.AudioTrack: android.media.AudioDeviceInfo getPreferredDevice()>
<android.media.AudioTrack: int reloadStaticData()>
<android.media.AudioTrack: void addOnRoutingChangedListener(android.media.AudioTrack.OnRoutingChangedListener,android.os.Handler)>
<android.media.AudioTrack: boolean setPreferredDevice(android.media.AudioDeviceInfo)>
<android.media.AudioTrack: int getMinBufferSize(int,int,int)>
<android.media.AudioTrack: int getAudioFormat()>
<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int)>
<android.media.AudioTrack: android.media.PlaybackParams getPlaybackParams()>
<android.media.AudioTrack: void setOffloadEndOfStream()>
<android.media.AudioTrack: int setBufferSizeInFrames(int)>
<android.media.AudioTrack: int setNotificationMarkerPosition(int)>
<android.media.AudioTrack: void setPlaybackParams(android.media.PlaybackParams)>
<android.media.AudioTrack: void <init>(android.media.AudioAttributes,android.media.AudioFormat,int,int,int)>
<android.media.AudioTrack: int getStreamType()>
<android.media.AudioTrack: android.os.PersistableBundle getMetrics()>
<android.media.AudioTrack: void removeOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener)>
<android.media.AudioTrack: int getNativeOutputSampleRate(int)>
<android.media.AudioTrack: int getChannelConfiguration()>
<android.media.AudioTrack: int getPlayState()>
<android.media.AudioTrack: android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper.Configuration)>
<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int,long)>
<android.media.AudioTrack: int setVolume(float)>
<android.media.AudioTrack: int getSampleRate()>
<android.media.AudioTrack: void release()>
<android.media.AudioTrack: void registerStreamEventCallback(java.util.concurrent.Executor,android.media.AudioTrack.StreamEventCallback)>
<android.media.AudioTrack: int getState()>
<android.media.AudioTrack: int getUnderrunCount()>
<android.media.AudioTrack: void setState(int)>
<android.media.AudioTrack: android.media.AudioDeviceInfo getRoutedDevice()>
<android.media.AudioTrack: int getBufferSizeInFrames()>
<android.media.AudioTrack: void removeOnRoutingChangedListener(android.media.AudioTrack.OnRoutingChangedListener)>
<android.media.AudioTrack: int setAuxEffectSendLevel(float)>
<android.media.AudioTrack: void setPlaybackPositionUpdateListener(android.media.AudioTrack.OnPlaybackPositionUpdateListener,android.os.Handler)>
<android.media.AudioTrack: boolean getTimestamp(android.media.AudioTimestamp)>
<android.media.AudioTrack: int setPositionNotificationPeriod(int)>
<android.media.AudioTrack: int getPositionNotificationPeriod()>
<android.media.AudioTrack: int getAudioSessionId()>
<java.net.BindException: void <init>()>
<java.net.BindException: void <init>(String)>
<java.util.concurrent.RejectedExecutionException: void <init>(Throwable)>
<java.util.concurrent.RejectedExecutionException: void <init>(String)>
<java.util.concurrent.RejectedExecutionException: void <init>()>
<java.util.concurrent.RejectedExecutionException: void <init>(String,Throwable)>
<android.telephony.SubscriptionInfo: int getMnc()>
<android.telephony.SubscriptionInfo: java.lang.String getMccString()>
<android.telephony.SubscriptionInfo: int getSimSlotIndex()>
<android.telephony.SubscriptionInfo: int getSubscriptionId()>
<android.telephony.SubscriptionInfo: java.lang.String getNumber()>
<android.telephony.SubscriptionInfo: CharSequence getDisplayName()>
<android.telephony.SubscriptionInfo: java.util.List getAccessRules()>
<android.telephony.SubscriptionInfo: int getDataRoaming()>
<android.telephony.SubscriptionInfo: android.os.ParcelUuid getGroupUuid()>
<android.telephony.SubscriptionInfo: boolean isEmbedded()>
<android.telephony.SubscriptionInfo: java.lang.String getIccId()>
<android.telephony.SubscriptionInfo: CharSequence getCarrierName()>
<android.telephony.SubscriptionInfo: java.lang.String getCountryIso()>
<android.telephony.SubscriptionInfo: int getMcc()>
<android.telephony.SubscriptionInfo: int getCarrierId()>
<android.telephony.SubscriptionInfo: int getIconTint()>
<android.telephony.SubscriptionInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.SubscriptionInfo: int getCardId()>
<android.telephony.SubscriptionInfo: java.lang.String getMncString()>
<android.telephony.SubscriptionInfo: android.graphics.Bitmap createIconBitmap(android.content.Context)>
<android.telephony.SubscriptionInfo: int getSubscriptionType()>
<android.telephony.SubscriptionInfo: int getProfileClass()>
<android.telephony.SubscriptionInfo: boolean isOpportunistic()>
<android.telephony.SubscriptionInfo: int describeContents()>
<android.opengl.GLES11Ext: void glGetRenderbufferParameterivOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetTexParameterxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glLightxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetTexGenfvOES(int,int,float[],int)>
<android.opengl.GLES11Ext: void glGetFramebufferAttachmentParameterivOES(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glTranslatexOES(int,int,int)>
<android.opengl.GLES11Ext: void glAlphaFuncxOES(int,int)>
<android.opengl.GLES11Ext: void glLoadMatrixxOES(java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glColor4xOES(int,int,int,int)>
<android.opengl.GLES11Ext: void glGenFramebuffersOES(int,int[],int)>
<android.opengl.GLES11Ext: void glGetTexParameterxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glDrawTexfOES(float,float,float,float,float)>
<android.opengl.GLES11Ext: void glLoadPaletteFromModelViewMatrixOES()>
<android.opengl.GLES11Ext: void glOrthoxOES(int,int,int,int,int,int)>
<android.opengl.GLES11Ext: void glPointSizexOES(int)>
<android.opengl.GLES11Ext: void glSampleCoveragexOES(int,boolean)>
<android.opengl.GLES11Ext: void glTexParameterxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glLineWidthxOES(int)>
<android.opengl.GLES11Ext: void glTexGenfvOES(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11Ext: void glDrawTexfvOES(float[],int)>
<android.opengl.GLES11Ext: void glDrawTexsOES(short,short,short,short,short)>
<android.opengl.GLES11Ext: void glTexGenxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetClipPlanexOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glTexGenfvOES(int,int,float[],int)>
<android.opengl.GLES11Ext: void glLightModelxOES(int,int)>
<android.opengl.GLES11Ext: void glClipPlanexOES(int,int[],int)>
<android.opengl.GLES11Ext: void glTexGenfOES(int,int,float)>
<android.opengl.GLES11Ext: void glRotatexOES(int,int,int,int)>
<android.opengl.GLES11Ext: void glTexParameterxOES(int,int,int)>
<android.opengl.GLES11Ext: void glPolygonOffsetxOES(int,int)>
<android.opengl.GLES11Ext: void glGetRenderbufferParameterivOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glFogxOES(int,int)>
<android.opengl.GLES11Ext: void glFogxvOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetFixedvOES(int,int[],int)>
<android.opengl.GLES11Ext: void glGenRenderbuffersOES(int,int[],int)>
<android.opengl.GLES11Ext: void glClipPlanexOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetFramebufferAttachmentParameterivOES(int,int,int,int[],int)>
<android.opengl.GLES11Ext: void glTexEnvxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetLightxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glMaterialxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glDeleteFramebuffersOES(int,int[],int)>
<android.opengl.GLES11Ext: void glDrawTexiOES(int,int,int,int,int)>
<android.opengl.GLES11Ext: void glTexGenxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glWeightPointerOES(int,int,int,java.nio.Buffer)>
<android.opengl.GLES11Ext: void glGetTexGenxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glPointParameterxvOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetTexEnvxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glBlendEquationOES(int)>
<android.opengl.GLES11Ext: void glDeleteRenderbuffersOES(int,int[],int)>
<android.opengl.GLES11Ext: void glBindRenderbufferOES(int,int)>
<android.opengl.GLES11Ext: void glMultMatrixxOES(java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glTexEnvxOES(int,int,int)>
<android.opengl.GLES11Ext: void glGetTexEnvxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetTexGenfvOES(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11Ext: void glDrawTexxvOES(int[],int)>
<android.opengl.GLES11Ext: void glGetMaterialxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glGenFramebuffersOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glNormal3xOES(int,int,int)>
<android.opengl.GLES11Ext: void glLightModelxvOES(int,int[],int)>
<android.opengl.GLES11Ext: void glTexGenivOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glDrawTexfvOES(java.nio.FloatBuffer)>
<android.opengl.GLES11Ext: void glLightxOES(int,int,int)>
<android.opengl.GLES11Ext: void glDeleteFramebuffersOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetTexGenxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetMaterialxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glMaterialxOES(int,int,int)>
<android.opengl.GLES11Ext: void glTexGenivOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glDrawTexivOES(java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetClipPlanefOES(int,java.nio.FloatBuffer)>
<android.opengl.GLES11Ext: void glGetTexGenivOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glFramebufferTexture2DOES(int,int,int,int,int)>
<android.opengl.GLES11Ext: void glDrawTexxvOES(java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glMaterialxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glClearColorxOES(int,int,int,int)>
<android.opengl.GLES11Ext: void glDrawTexivOES(int[],int)>
<android.opengl.GLES11Ext: int glCheckFramebufferStatusOES(int)>
<android.opengl.GLES11Ext: void glEGLImageTargetTexture2DOES(int,java.nio.Buffer)>
<android.opengl.GLES11Ext: void glFrustumfOES(float,float,float,float,float,float)>
<android.opengl.GLES11Ext: void glGetFixedvOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glDepthRangexOES(int,int)>
<android.opengl.GLES11Ext: void glGetClipPlanexOES(int,int[],int)>
<android.opengl.GLES11Ext: void glFogxvOES(int,int[],int)>
<android.opengl.GLES11Ext: void glClipPlanefOES(int,float[],int)>
<android.opengl.GLES11Ext: void glClipPlanefOES(int,java.nio.FloatBuffer)>
<android.opengl.GLES11Ext: void glDrawTexsvOES(short[],int)>
<android.opengl.GLES11Ext: void glFrustumxOES(int,int,int,int,int,int)>
<android.opengl.GLES11Ext: void glTexGenxOES(int,int,int)>
<android.opengl.GLES11Ext: void glPointParameterxOES(int,int)>
<android.opengl.GLES11Ext: void glDrawTexsvOES(java.nio.ShortBuffer)>
<android.opengl.GLES11Ext: void glDrawTexxOES(int,int,int,int,int)>
<android.opengl.GLES11Ext: void glMultMatrixxOES(int[],int)>
<android.opengl.GLES11Ext: void glGenerateMipmapOES(int)>
<android.opengl.GLES11Ext: void glTexEnvxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetLightxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glOrthofOES(float,float,float,float,float,float)>
<android.opengl.GLES11Ext: void glLightModelxvOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glDeleteRenderbuffersOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glBindFramebufferOES(int,int)>
<android.opengl.GLES11Ext: void glGetClipPlanefOES(int,float[],int)>
<android.opengl.GLES11Ext: boolean glIsRenderbufferOES(int)>
<android.opengl.GLES11Ext: void glRenderbufferStorageOES(int,int,int,int)>
<android.opengl.GLES11Ext: void glClearDepthxOES(int)>
<android.opengl.GLES11Ext: void glScalexOES(int,int,int)>
<android.opengl.GLES11Ext: void glClearDepthfOES(float)>
<android.opengl.GLES11Ext: void glGetTexGenivOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glEGLImageTargetRenderbufferStorageOES(int,java.nio.Buffer)>
<android.opengl.GLES11Ext: void glGenRenderbuffersOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glMultiTexCoord4xOES(int,int,int,int,int)>
<android.opengl.GLES11Ext: void <init>()>
<android.opengl.GLES11Ext: void glTexParameterxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glLoadMatrixxOES(int[],int)>
<android.opengl.GLES11Ext: void glFramebufferRenderbufferOES(int,int,int,int)>
<android.opengl.GLES11Ext: void glCurrentPaletteMatrixOES(int)>
<android.opengl.GLES11Ext: void glLightxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glBlendFuncSeparateOES(int,int,int,int)>
<android.opengl.GLES11Ext: void glDepthRangefOES(float,float)>
<android.opengl.GLES11Ext: void glTexGeniOES(int,int,int)>
<android.opengl.GLES11Ext: void glMatrixIndexPointerOES(int,int,int,java.nio.Buffer)>
<android.opengl.GLES11Ext: void glPointParameterxvOES(int,int[],int)>
<android.opengl.GLES11Ext: boolean glIsFramebufferOES(int)>
<android.opengl.GLES11Ext: void glBlendEquationSeparateOES(int,int)>
<android.telecom.GatewayInfo: int describeContents()>
<android.telecom.GatewayInfo: android.net.Uri getGatewayAddress()>
<android.telecom.GatewayInfo: java.lang.String getGatewayProviderPackageName()>
<android.telecom.GatewayInfo: android.net.Uri getOriginalAddress()>
<android.telecom.GatewayInfo: void writeToParcel(android.os.Parcel,int)>
<android.telecom.GatewayInfo: void <init>(String,android.net.Uri,android.net.Uri)>
<android.telecom.GatewayInfo: boolean isEmpty()>
<java.lang.IllegalThreadStateException: void <init>()>
<java.lang.IllegalThreadStateException: void <init>(String)>
<android.view.ViewStub: void setOnInflateListener(android.view.ViewStub.OnInflateListener)>
<android.view.ViewStub: int getLayoutResource()>
<android.view.ViewStub: void <init>(android.content.Context,@LayoutRes int)>
<android.view.ViewStub: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.view.ViewStub: void setLayoutInflater(android.view.LayoutInflater)>
<android.view.ViewStub: void <init>(android.content.Context)>
<android.view.ViewStub: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.ViewStub: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.view.ViewStub: void setInflatedId(@IdResint)>
<android.view.ViewStub: int getInflatedId()>
<android.view.ViewStub: android.view.View inflate()>
<android.view.ViewStub: android.view.LayoutInflater getLayoutInflater()>
<android.view.ViewStub: void setLayoutResource(@LayoutResint)>
<android.app.AlarmManager: void setTime(long)>
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>
<android.app.AlarmManager: void set(int,long,java.lang.String,android.app.AlarmManager.OnAlarmListener,android.os.Handler)>
<android.app.AlarmManager: void setExact(int,long,java.lang.String,android.app.AlarmManager.OnAlarmListener,android.os.Handler)>
<android.app.AlarmManager: void setExact(int,long,android.app.PendingIntent)>
<android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)>
<android.app.AlarmManager: void setWindow(int,long,long,java.lang.String,android.app.AlarmManager.OnAlarmListener,android.os.Handler)>
<android.app.AlarmManager: void set(int,long,long,long,android.app.AlarmManager.OnAlarmListener,android.os.Handler,android.os.WorkSource)>
<android.app.AlarmManager: void cancel(android.app.AlarmManager.OnAlarmListener)>
<android.app.AlarmManager: void setAlarmClock(android.app.AlarmManager.AlarmClockInfo,android.app.PendingIntent)>
<android.app.AlarmManager: android.app.AlarmManager.AlarmClockInfo getNextAlarmClock()>
<android.app.AlarmManager: void setTimeZone(java.lang.String)>
<android.app.AlarmManager: void setWindow(int,long,long,android.app.PendingIntent)>
<android.app.AlarmManager: void setAndAllowWhileIdle(int,long,android.app.PendingIntent)>
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>
<android.app.AlarmManager: void set(int,long,long,long,android.app.PendingIntent,android.os.WorkSource)>
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>
<android.app.AlarmManager: void setExactAndAllowWhileIdle(int,long,android.app.PendingIntent)>
<android.app.ActivityManager.ProcessErrorStateInfo: void <init>()>
<android.app.ActivityManager.ProcessErrorStateInfo: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager.ProcessErrorStateInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ActivityManager.ProcessErrorStateInfo: int describeContents()>
<android.content.rollback.RollbackManager: java.util.List getAvailableRollbacks()>
<android.content.rollback.RollbackManager: java.util.List getRecentlyCommittedRollbacks()>
<android.content.rollback.RollbackManager: void expireRollbackForPackage(java.lang.String)>
<android.content.rollback.RollbackManager: void reloadPersistedData()>
<android.content.rollback.RollbackManager: void commitRollback(int,java.util.List,android.content.IntentSender)>
<android.media.ImageReader: void setOnImageAvailableListener(android.media.ImageReader.OnImageAvailableListener,android.os.Handler)>
<android.media.ImageReader: void close()>
<android.media.ImageReader: int getHeight()>
<android.media.ImageReader: android.view.Surface getSurface()>
<android.media.ImageReader: int getWidth()>
<android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int,long)>
<android.media.ImageReader: android.media.Image acquireNextImage()>
<android.media.ImageReader: android.media.Image acquireLatestImage()>
<android.media.ImageReader: void discardFreeBuffers()>
<android.media.ImageReader: int getImageFormat()>
<android.media.ImageReader: int getMaxImages()>
<android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int)>
<java.security.cert.CertPath: java.util.List getCertificates()>
<java.security.cert.CertPath: void <init>(String)>
<java.security.cert.CertPath: java.lang.String getType()>
<java.security.cert.CertPath: java.lang.Object writeReplace()>
<java.security.cert.CertPath: byte[] getEncoded(java.lang.String)>
<java.security.cert.CertPath: byte[] getEncoded()>
<java.security.cert.CertPath: java.util.Iterator getEncodings()>
<java.lang.IllegalArgumentException: void <init>(Throwable)>
<java.lang.IllegalArgumentException: void <init>(String,Throwable)>
<java.lang.IllegalArgumentException: void <init>(String)>
<java.lang.IllegalArgumentException: void <init>()>
<android.print.PrintJobInfo.Builder: void setCopies(int)>
<android.print.PrintJobInfo.Builder: void <init>(android.print.PrintJobInfo)>
<android.print.PrintJobInfo.Builder: android.print.PrintJobInfo build()>
<android.print.PrintJobInfo.Builder: void putAdvancedOption(java.lang.String,int)>
<android.print.PrintJobInfo.Builder: void putAdvancedOption(java.lang.String,java.lang.String)>
<android.print.PrintJobInfo.Builder: void setAttributes(android.print.PrintAttributes)>
<android.print.PrintJobInfo.Builder: void setPages(android.print.PageRange[])>
<java.nio.channels.ServerSocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>
<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel open()>
<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress,int)>
<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel setOption(java.net.SocketOption,T)>
<java.nio.channels.ServerSocketChannel: java.nio.channels.SocketChannel accept()>
<java.nio.channels.ServerSocketChannel: int validOps()>
<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress)>
<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>
<android.database.MergeCursor: void <init>(android.database.Cursor[])>
<android.database.MergeCursor: int getInt(int)>
<android.database.MergeCursor: double getDouble(int)>
<android.database.MergeCursor: long getLong(int)>
<android.database.MergeCursor: boolean isNull(int)>
<android.database.MergeCursor: java.lang.String[] getColumnNames()>
<android.database.MergeCursor: java.lang.String getString(int)>
<android.database.MergeCursor: int getCount()>
<android.database.MergeCursor: float getFloat(int)>
<android.database.MergeCursor: short getShort(int)>
<android.app.slice.Slice: java.util.List getHints()>
<android.app.slice.Slice: android.app.slice.SliceSpec getSpec()>
<android.app.slice.Slice: boolean isCallerNeeded()>
<android.app.slice.Slice: void <init>(android.os.Parcel)>
<android.app.slice.Slice: java.util.List getItems()>
<android.app.slice.Slice: int describeContents()>
<android.app.slice.Slice: android.net.Uri getUri()>
<android.app.slice.Slice: void writeToParcel(android.os.Parcel,int)>
<android.print.PrintAttributes.Builder: android.print.PrintAttributes.Builder setDuplexMode(int)>
<android.print.PrintAttributes.Builder: void <init>()>
<android.print.PrintAttributes.Builder: android.print.PrintAttributes.Builder setResolution(android.print.PrintAttributes.Resolution)>
<android.print.PrintAttributes.Builder: android.print.PrintAttributes.Builder setMinMargins(android.print.PrintAttributes.Margins)>
<android.print.PrintAttributes.Builder: android.print.PrintAttributes build()>
<android.print.PrintAttributes.Builder: android.print.PrintAttributes.Builder setColorMode(int)>
<android.print.PrintAttributes.Builder: android.print.PrintAttributes.Builder setMediaSize(android.print.PrintAttributes.MediaSize)>
<java.lang.InterruptedException: void <init>()>
<java.lang.InterruptedException: void <init>(String)>
<android.os.UpdateEngine: void resetStatus()>
<android.os.UpdateEngine: boolean unbind()>
<android.os.UpdateEngine: void <init>()>
<android.os.UpdateEngine: boolean bind(android.os.UpdateEngineCallback,android.os.Handler)>
<android.os.UpdateEngine: void cancel()>
<android.os.UpdateEngine: void suspend()>
<android.os.UpdateEngine: boolean verifyPayloadMetadata(java.lang.String)>
<android.os.UpdateEngine: void applyPayload(java.lang.String,long,long,java.lang.String[])>
<android.os.UpdateEngine: boolean bind(android.os.UpdateEngineCallback)>
<android.os.UpdateEngine: void resume()>
<org.w3c.dom.Notation extends org.w3c.dom.Node: java.lang.String getSystemId()>
<org.w3c.dom.Notation extends org.w3c.dom.Node: java.lang.String getPublicId()>
<android.text.util.Linkify.TransformFilter: java.lang.String transformUrl(java.util.regex.Matcher,java.lang.String)>
<android.widget.SearchView.OnQueryTextListener: boolean onQueryTextSubmit(java.lang.String)>
<android.widget.SearchView.OnQueryTextListener: boolean onQueryTextChange(java.lang.String)>
<java.util.Collections: java.util.Set checkedSet(java.util.Set,java.lang.Class)>
<java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>
<java.util.Collections: java.util.SortedSet synchronizedSortedSet(java.util.SortedSet)>
<java.util.Collections: boolean disjoint(java.util.Collection,java.util.Collection)>
<java.util.Collections: java.util.Iterator emptyIterator()>
<java.util.Collections: int binarySearch(java.util.List,T)>
<java.util.Collections: java.util.Collection checkedCollection(java.util.Collection,java.lang.Class)>
<java.util.Collections: java.util.NavigableMap synchronizedNavigableMap(java.util.NavigableMap)>
<java.util.Collections: java.util.List nCopies(int,T)>
<java.util.Collections: java.util.ListIterator emptyListIterator()>
<java.util.Collections: java.util.List synchronizedList(java.util.List)>
<java.util.Collections: java.util.NavigableSet synchronizedNavigableSet(java.util.NavigableSet)>
<java.util.Collections: java.util.NavigableMap unmodifiableNavigableMap(java.util.NavigableMap)>
<java.util.Collections: java.util.SortedSet checkedSortedSet(java.util.SortedSet,java.lang.Class)>
<java.util.Collections: T min(java.util.Collection)>
<java.util.Collections: java.util.Collection synchronizedCollection(java.util.Collection)>
<java.util.Collections: java.util.Enumeration emptyEnumeration()>
<java.util.Collections: void sort(java.util.List)>
<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.Collections: T min(java.util.Collection,java.util.Comparator)>
<java.util.Collections: void reverse(java.util.List)>
<java.util.Collections: java.util.List emptyList()>
<java.util.Collections: java.util.NavigableSet unmodifiableNavigableSet(java.util.NavigableSet)>
<java.util.Collections: java.util.SortedMap checkedSortedMap(java.util.SortedMap,java.lang.Class,java.lang.Class)>
<java.util.Collections: boolean replaceAll(java.util.List,T,T)>
<java.util.Collections: boolean addAll(java.util.Collection,T...)>
<java.util.Collections: java.util.Queue checkedQueue(java.util.Queue,java.lang.Class)>
<java.util.Collections: int frequency(java.util.Collection,java.lang.Object)>
<java.util.Collections: java.util.Map singletonMap(K,V)>
<java.util.Collections: java.util.Comparator reverseOrder()>
<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
<java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<java.util.Collections: java.util.Queue asLifoQueue(java.util.Deque)>
<java.util.Collections: java.util.NavigableSet emptyNavigableSet()>
<java.util.Collections: int lastIndexOfSubList(java.util.List,java.util.List)>
<java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<java.util.Collections: java.util.Set emptySet()>
<java.util.Collections: java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)>
<java.util.Collections: void fill(java.util.List,T)>
<java.util.Collections: T max(java.util.Collection)>
<java.util.Collections: int binarySearch(java.util.List,T,java.util.Comparator)>
<java.util.Collections: java.util.Comparator reverseOrder(java.util.Comparator)>
<java.util.Collections: java.util.NavigableSet checkedNavigableSet(java.util.NavigableSet,java.lang.Class)>
<java.util.Collections: void shuffle(java.util.List,java.util.Random)>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<java.util.Collections: java.util.Map checkedMap(java.util.Map,java.lang.Class,java.lang.Class)>
<java.util.Collections: void copy(java.util.List,java.util.List)>
<java.util.Collections: void shuffle(java.util.List)>
<java.util.Collections: java.util.Set singleton(T)>
<java.util.Collections: T max(java.util.Collection,java.util.Comparator)>
<java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>
<java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>
<java.util.Collections: java.util.Map emptyMap()>
<java.util.Collections: java.util.SortedMap synchronizedSortedMap(java.util.SortedMap)>
<java.util.Collections: java.util.List checkedList(java.util.List,java.lang.Class)>
<java.util.Collections: void rotate(java.util.List,int)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>
<java.util.Collections: void swap(java.util.List,int,int)>
<java.util.Collections: java.util.NavigableMap checkedNavigableMap(java.util.NavigableMap,java.lang.Class,java.lang.Class)>
<java.util.Collections: java.util.SortedSet emptySortedSet()>
<java.util.Collections: int indexOfSubList(java.util.List,java.util.List)>
<java.util.Collections: java.util.NavigableMap emptyNavigableMap()>
<java.util.Collections: java.util.List singletonList(T)>
<java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>
<java.util.Collections: java.util.SortedMap emptySortedMap()>
<android.provider.CalendarContract.EventsEntity: android.content.EntityIterator newEntityIterator(android.database.Cursor,android.content.ContentResolver)>
<android.provider.CalendarContract.EventsEntity: android.content.EntityIterator newEntityIterator(android.database.Cursor,android.content.ContentProviderClient)>
<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer force()>
<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer load()>
<java.nio.MappedByteBuffer: boolean isLoaded()>
<android.app.contentsuggestions.ContentSuggestionsManager: void classifyContentSelections(android.app.contentsuggestions.ClassificationsRequest,java.util.concurrent.Executor,android.app.contentsuggestions.ContentSuggestionsManager.ClassificationsCallback)>
<android.app.contentsuggestions.ContentSuggestionsManager: boolean isEnabled()>
<android.app.contentsuggestions.ContentSuggestionsManager: void notifyInteraction(java.lang.String,android.os.Bundle)>
<android.app.contentsuggestions.ContentSuggestionsManager: void provideContextImage(int,android.os.Bundle)>
<android.app.contentsuggestions.ContentSuggestionsManager: void suggestContentSelections(android.app.contentsuggestions.SelectionsRequest,java.util.concurrent.Executor,android.app.contentsuggestions.ContentSuggestionsManager.SelectionsCallback)>
<org.w3c.dom.DOMImplementationSource: org.w3c.dom.DOMImplementationList getDOMImplementationList(java.lang.String)>
<org.w3c.dom.DOMImplementationSource: org.w3c.dom.DOMImplementation getDOMImplementation(java.lang.String)>
<android.widget.ProgressBar: android.graphics.PorterDuff.Mode getProgressTintMode()>
<android.widget.ProgressBar: void setMinWidth(@Pxint)>
<android.widget.ProgressBar: void setMax(int)>
<android.widget.ProgressBar: void setProgressBackgroundTintList(android.content.res.ColorStateList)>
<android.widget.ProgressBar: void setMinHeight(@Pxint)>
<android.widget.ProgressBar: boolean isAnimating()>
<android.widget.ProgressBar: boolean isIndeterminate()>
<android.widget.ProgressBar: void setMaxWidth(@Pxint)>
<android.widget.ProgressBar: void setProgressTintList(android.content.res.ColorStateList)>
<android.widget.ProgressBar: android.view.animation.Interpolator getInterpolator()>
<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ProgressBar: void setIndeterminateTintMode(android.graphics.PorterDuff.Mode)>
<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ProgressBar: void setProgressDrawableTiled(android.graphics.drawable.Drawable)>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getCurrentDrawable()>
<android.widget.ProgressBar: int getProgress()>
<android.widget.ProgressBar: void setProgressBackgroundTintMode(android.graphics.PorterDuff.Mode)>
<android.widget.ProgressBar: void incrementProgressBy(int)>
<android.widget.ProgressBar: void setSecondaryProgressTintMode(android.graphics.PorterDuff.Mode)>
<android.widget.ProgressBar: int getMax()>
<android.widget.ProgressBar: void setProgressTintMode(android.graphics.PorterDuff.Mode)>
<android.widget.ProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)>
<android.widget.ProgressBar: void setProgress(int)>
<android.widget.ProgressBar: void setMin(int)>
<android.widget.ProgressBar: void setIndeterminate(boolean)>
<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ProgressBar: void setInterpolator(android.content.Context,@InterpolatorResint)>
<android.widget.ProgressBar: int getSecondaryProgress()>
<android.widget.ProgressBar: void setIndeterminateTintList(android.content.res.ColorStateList)>
<android.widget.ProgressBar: android.content.res.ColorStateList getProgressBackgroundTintList()>
<android.widget.ProgressBar: void onRestoreInstanceState(android.os.Parcelable)>
<android.widget.ProgressBar: void setInterpolator(android.view.animation.Interpolator)>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getProgressDrawable()>
<android.widget.ProgressBar: void setIndeterminateDrawableTiled(android.graphics.drawable.Drawable)>
<android.widget.ProgressBar: android.graphics.BlendMode getIndeterminateTintBlendMode()>
<android.widget.ProgressBar: int getMaxWidth()>
<android.widget.ProgressBar: void incrementSecondaryProgressBy(int)>
<android.widget.ProgressBar: android.content.res.ColorStateList getIndeterminateTintList()>
<android.widget.ProgressBar: void setIndeterminateDrawable(android.graphics.drawable.Drawable)>
<android.widget.ProgressBar: android.graphics.BlendMode getProgressBackgroundTintBlendMode()>
<android.widget.ProgressBar: int getMinHeight()>
<android.widget.ProgressBar: void setSecondaryProgressTintBlendMode(android.graphics.BlendMode)>
<android.widget.ProgressBar: android.content.res.ColorStateList getProgressTintList()>
<android.widget.ProgressBar: void setProgressBackgroundTintBlendMode(android.graphics.BlendMode)>
<android.widget.ProgressBar: void setSecondaryProgressTintList(android.content.res.ColorStateList)>
<android.widget.ProgressBar: int getMin()>
<android.widget.ProgressBar: android.content.res.ColorStateList getSecondaryProgressTintList()>
<android.widget.ProgressBar: void setIndeterminateTintBlendMode(android.graphics.BlendMode)>
<android.widget.ProgressBar: void setProgressTintBlendMode(android.graphics.BlendMode)>
<android.widget.ProgressBar: int getMaxHeight()>
<android.widget.ProgressBar: android.graphics.PorterDuff.Mode getSecondaryProgressTintMode()>
<android.widget.ProgressBar: android.os.Parcelable onSaveInstanceState()>
<android.widget.ProgressBar: void setProgress(int,boolean)>
<android.widget.ProgressBar: void <init>(android.content.Context)>
<android.widget.ProgressBar: android.graphics.BlendMode getSecondaryProgressTintBlendMode()>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getIndeterminateDrawable()>
<android.widget.ProgressBar: void setSecondaryProgress(int)>
<android.widget.ProgressBar: android.graphics.PorterDuff.Mode getProgressBackgroundTintMode()>
<android.widget.ProgressBar: int getMinWidth()>
<android.widget.ProgressBar: void setMaxHeight(@Pxint)>
<android.widget.ProgressBar: android.graphics.BlendMode getProgressTintBlendMode()>
<android.widget.ProgressBar: android.graphics.PorterDuff.Mode getIndeterminateTintMode()>
<android.app.NativeActivity: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>
<android.app.NativeActivity: void surfaceCreated(android.view.SurfaceHolder)>
<android.app.NativeActivity: void onGlobalLayout()>
<android.app.NativeActivity: void surfaceDestroyed(android.view.SurfaceHolder)>
<android.app.NativeActivity: void surfaceRedrawNeeded(android.view.SurfaceHolder)>
<android.app.NativeActivity: void <init>()>
<android.app.NativeActivity: void onInputQueueCreated(android.view.InputQueue)>
<android.app.NativeActivity: void onInputQueueDestroyed(android.view.InputQueue)>
<android.net.wifi.p2p.WifiP2pManager.DeviceInfoListener: void onDeviceInfoAvailable(android.net.wifi.p2p.WifiP2pDevice)>
<android.content.ComponentCallbacks: void onConfigurationChanged(android.content.res.Configuration)>
<android.content.ComponentCallbacks: void onLowMemory()>
<android.drm.ProcessedData: java.lang.String getAccountId()>
<android.drm.ProcessedData: byte[] getData()>
<android.drm.ProcessedData: java.lang.String getSubscriptionId()>
<java.io.FilterReader: int read(char[],int,int)>
<java.io.FilterReader: void <init>(java.io.Reader)>
<java.io.FilterReader: void close()>
<android.text.style.TabStopSpan extends android.text.style.ParagraphStyle: int getTabStop()>
<java.security.KeyStore.CallbackHandlerProtection: javax.security.auth.callback.CallbackHandler getCallbackHandler()>
<java.security.KeyStore.CallbackHandlerProtection: void <init>(javax.security.auth.callback.CallbackHandler)>
<java.util.concurrent.Future: V get(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.Future: boolean isDone()>
<java.util.concurrent.Future: boolean isCancelled()>
<java.util.concurrent.Future: V get()>
<java.util.concurrent.Future: boolean cancel(boolean)>
<java.security.spec.ECFieldF2m: void <init>(int,int[])>
<java.security.spec.ECFieldF2m: java.math.BigInteger getReductionPolynomial()>
<java.security.spec.ECFieldF2m: int[] getMidTermsOfReductionPolynomial()>
<java.security.spec.ECFieldF2m: int getM()>
<java.security.spec.ECFieldF2m: int getFieldSize()>
<java.security.spec.ECFieldF2m: void <init>(int)>
<java.security.spec.ECFieldF2m: void <init>(int,java.math.BigInteger)>
<java.lang.Thread: void interrupt()>
<java.lang.Thread: void <init>()>
<java.lang.Thread: void <init>(ThreadGroup,Runnable,String)>
<java.lang.Thread: boolean isDaemon()>
<java.lang.Thread: void join(long,int)>
<java.lang.Thread: void sleep(long)>
<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<java.lang.Thread: void join()>
<java.lang.Thread: void <init>(String)>
<java.lang.Thread: void <init>(ThreadGroup,Runnable)>
<java.lang.Thread: java.util.Map getAllStackTraces()>
<java.lang.Thread: void resume()>
<java.lang.Thread: void <init>(Runnable)>
<java.lang.Thread: boolean isInterrupted()>
<java.lang.Thread: long getId()>
<java.lang.Thread: void setPriority(int)>
<java.lang.Thread: void yield()>
<java.lang.Thread: void <init>(Runnable,String)>
<java.lang.Thread: int countStackFrames()>
<java.lang.Thread: boolean isAlive()>
<java.lang.Thread: void checkAccess()>
<java.lang.Thread: java.lang.String getName()>
<java.lang.Thread: void setName(java.lang.String)>
<java.lang.Thread: void join(long)>
<java.lang.Thread: int getPriority()>
<java.lang.Thread: void run()>
<java.lang.Thread: java.lang.Thread.State getState()>
<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<java.lang.Thread: boolean interrupted()>
<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)>
<java.lang.Thread: void stop(java.lang.Throwable)>
<java.lang.Thread: void suspend()>
<java.lang.Thread: int activeCount()>
<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)>
<java.lang.Thread: void <init>(ThreadGroup,Runnable,String,long)>
<java.lang.Thread: int enumerate(java.lang.Thread[])>
<java.lang.Thread: void stop()>
<java.lang.Thread: void destroy()>
<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>
<java.lang.Thread: void sleep(long,int)>
<java.lang.Thread: void dumpStack()>
<java.lang.Thread: void start()>
<java.lang.Thread: void <init>(ThreadGroup,String)>
<java.lang.Thread: java.lang.Thread currentThread()>
<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<java.lang.Thread: void setDaemon(boolean)>
<java.lang.Thread: java.lang.Thread.UncaughtExceptionHandler getUncaughtExceptionHandler()>
<java.lang.Thread: java.lang.Thread.UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>
<java.lang.Thread: boolean holdsLock(java.lang.Object)>
<android.provider.ContactsContract.CommonDataKinds.Im: int getProtocolLabelResource(int)>
<android.provider.ContactsContract.CommonDataKinds.Im: int getTypeLabelResource(int)>
<android.provider.ContactsContract.CommonDataKinds.Im: CharSequence getProtocolLabel(android.content.res.Resources,int,CharSequence)>
<android.provider.ContactsContract.CommonDataKinds.Im: CharSequence getTypeLabel(android.content.res.Resources,int,CharSequence)>
<android.text.AutoText: int getSize(android.view.View)>
<android.text.AutoText: java.lang.String get(CharSequence,int,int,android.view.View)>
<android.security.AttestedKeyPair: java.util.List getAttestationRecord()>
<android.security.AttestedKeyPair: java.security.KeyPair getKeyPair()>
<android.service.carrier.CarrierIdentifier: int getCarrierId()>
<android.service.carrier.CarrierIdentifier: java.lang.String getMnc()>
<android.service.carrier.CarrierIdentifier: int getSpecificCarrierId()>
<android.service.carrier.CarrierIdentifier: void <init>(String,String,String,String,String,String,int,int)>
<android.service.carrier.CarrierIdentifier: int describeContents()>
<android.service.carrier.CarrierIdentifier: void writeToParcel(android.os.Parcel,int)>
<android.service.carrier.CarrierIdentifier: java.lang.String getGid1()>
<android.service.carrier.CarrierIdentifier: java.lang.String getGid2()>
<android.service.carrier.CarrierIdentifier: java.lang.String getSpn()>
<android.service.carrier.CarrierIdentifier: void <init>(byte[],String,String)>
<android.service.carrier.CarrierIdentifier: void <init>(String,String,String,String,String,String)>
<android.service.carrier.CarrierIdentifier: java.lang.String getImsi()>
<android.service.carrier.CarrierIdentifier: java.lang.String getMcc()>
<android.media.session.PlaybackState.CustomAction: java.lang.String getAction()>
<android.media.session.PlaybackState.CustomAction: android.os.Bundle getExtras()>
<android.media.session.PlaybackState.CustomAction: CharSequence getName()>
<android.media.session.PlaybackState.CustomAction: void writeToParcel(android.os.Parcel,int)>
<android.media.session.PlaybackState.CustomAction: int describeContents()>
<android.media.session.PlaybackState.CustomAction: int getIcon()>
<android.nfc.NdefMessage: void <init>(android.nfc.NdefRecord,android.nfc.NdefRecord...)>
<android.nfc.NdefMessage: int describeContents()>
<android.nfc.NdefMessage: int getByteArrayLength()>
<android.nfc.NdefMessage: void <init>(byte[])>
<android.nfc.NdefMessage: void writeToParcel(android.os.Parcel,int)>
<android.nfc.NdefMessage: byte[] toByteArray()>
<android.nfc.NdefMessage: android.nfc.NdefRecord[] getRecords()>
<android.nfc.NdefMessage: void <init>(android.nfc.NdefRecord[])>
<android.app.AppOpsManager.HistoricalUidOps: int getUid()>
<android.app.AppOpsManager.HistoricalUidOps: int getPackageCount()>
<android.app.AppOpsManager.HistoricalUidOps: void writeToParcel(android.os.Parcel,int)>
<android.app.AppOpsManager.HistoricalUidOps: android.app.AppOpsManager.HistoricalPackageOps getPackageOps(java.lang.String)>
<android.app.AppOpsManager.HistoricalUidOps: android.app.AppOpsManager.HistoricalPackageOps getPackageOpsAt(int)>
<android.app.AppOpsManager.HistoricalUidOps: int describeContents()>
<java.lang.StringIndexOutOfBoundsException: void <init>(String)>
<java.lang.StringIndexOutOfBoundsException: void <init>()>
<java.lang.StringIndexOutOfBoundsException: java.lang.String[] value()>
<java.lang.StringIndexOutOfBoundsException: void <init>(int)>
<dalvik.system.BaseDexClassLoader: java.lang.String findLibrary(java.lang.String)>
<dalvik.system.BaseDexClassLoader: java.util.Enumeration findResources(java.lang.String)>
<dalvik.system.BaseDexClassLoader: void <init>(String,java.io.File,String,ClassLoader)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decodeLoop(java.nio.ByteBuffer,java.nio.CharBuffer)>
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>
<java.nio.charset.CharsetDecoder: void implReplaceWith(java.lang.String)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction malformedInputAction()>
<java.nio.charset.CharsetDecoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: boolean isCharsetDetected()>
<java.nio.charset.CharsetDecoder: java.lang.String replacement()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult implFlush(java.nio.CharBuffer)>
<java.nio.charset.CharsetDecoder: float maxCharsPerByte()>
<java.nio.charset.CharsetDecoder: void <init>(java.nio.charset.Charset,float,float)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder replaceWith(java.lang.String)>
<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>
<java.nio.charset.CharsetDecoder: boolean isAutoDetecting()>
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset detectedCharset()>
<java.nio.charset.CharsetDecoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>
<java.nio.charset.CharsetDecoder: void implReset()>
<java.nio.charset.CharsetDecoder: float averageCharsPerByte()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<android.media.MediaRecorder: void setOutputFile(java.io.File)>
<android.media.MediaRecorder: void setAudioEncoder(int)>
<android.media.MediaRecorder: void setAudioEncodingBitRate(int)>
<android.media.MediaRecorder: void setOnErrorListener(android.media.MediaRecorder.OnErrorListener)>
<android.media.MediaRecorder: void prepare()>
<android.media.MediaRecorder: void setLocation(float,float)>
<android.media.MediaRecorder: void setVideoEncodingProfileLevel(int,int)>
<android.media.MediaRecorder: int getMaxAmplitude()>
<android.media.MediaRecorder: void unregisterAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback)>
<android.media.MediaRecorder: void registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager.AudioRecordingCallback)>
<android.media.MediaRecorder: void addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,android.os.Handler)>
<android.media.MediaRecorder: android.view.Surface getSurface()>
<android.media.MediaRecorder: void release()>
<android.media.MediaRecorder: java.util.List getActiveMicrophones()>
<android.media.MediaRecorder: void pause()>
<android.media.MediaRecorder: void setVideoFrameRate(int)>
<android.media.MediaRecorder: void setVideoSource(int)>
<android.media.MediaRecorder: void setAudioSamplingRate(int)>
<android.media.MediaRecorder: void setOrientationHint(int)>
<android.media.MediaRecorder: void stop()>
<android.media.MediaRecorder: void setVideoEncoder(int)>
<android.media.MediaRecorder: void setVideoEncodingBitRate(int)>
<android.media.MediaRecorder: void setNextOutputFile(java.io.File)>
<android.media.MediaRecorder: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()>
<android.media.MediaRecorder: android.os.PersistableBundle getMetrics()>
<android.media.MediaRecorder: void setNextOutputFile(java.io.FileDescriptor)>
<android.media.MediaRecorder: void setVideoSize(int,int)>
<android.media.MediaRecorder: int getAudioSourceMax()>
<android.media.MediaRecorder: void setMaxFileSize(long)>
<android.media.MediaRecorder: void setProfile(android.media.CamcorderProfile)>
<android.media.MediaRecorder: void finalize()>
<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)>
<android.media.MediaRecorder: void setCamera(android.hardware.Camera)>
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder.OnInfoListener)>
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>
<android.media.MediaRecorder: void setAudioChannels(int)>
<android.media.MediaRecorder: void start()>
<android.media.MediaRecorder: android.media.AudioDeviceInfo getRoutedDevice()>
<android.media.MediaRecorder: boolean setPreferredMicrophoneDirection(int)>
<android.media.MediaRecorder: boolean setPreferredMicrophoneFieldDimension(float)>
<android.media.MediaRecorder: boolean setPreferredDevice(android.media.AudioDeviceInfo)>
<android.media.MediaRecorder: void resume()>
<android.media.MediaRecorder: void setInputSurface(android.view.Surface)>
<android.media.MediaRecorder: void setAudioSource(int)>
<android.media.MediaRecorder: void removeOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener)>
<android.media.MediaRecorder: void setMaxDuration(int)>
<android.media.MediaRecorder: void reset()>
<android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)>
<android.media.MediaRecorder: void <init>()>
<android.media.MediaRecorder: void setOutputFormat(int)>
<android.media.MediaRecorder: android.media.AudioDeviceInfo getPreferredDevice()>
<android.media.MediaRecorder: void setCaptureRate(double)>
<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase getDatabase()>
<android.database.sqlite.SQLiteCursor: void setFillWindowForwardOnly(boolean)>
<android.database.sqlite.SQLiteCursor: void <init>(android.database.sqlite.SQLiteCursorDriver,String,android.database.sqlite.SQLiteQuery)>
<android.database.sqlite.SQLiteCursor: void setSelectionArguments(java.lang.String[])>
<android.database.sqlite.SQLiteCursor: int getCount()>
<android.database.sqlite.SQLiteCursor: void <init>(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,String,android.database.sqlite.SQLiteQuery)>
<android.database.sqlite.SQLiteCursor: java.lang.String[] getColumnNames()>
<android.net.wifi.p2p.WifiP2pManager.P2pStateListener: void onP2pStateAvailable(int)>
<javax.xml.parsers.DocumentBuilderFactory: boolean isExpandEntityReferences()>
<javax.xml.parsers.DocumentBuilderFactory: java.lang.Object getAttribute(java.lang.String)>
<javax.xml.parsers.DocumentBuilderFactory: void setExpandEntityReferences(boolean)>
<javax.xml.parsers.DocumentBuilderFactory: void setFeature(java.lang.String,boolean)>
<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>
<javax.xml.parsers.DocumentBuilderFactory: void setIgnoringElementContentWhitespace(boolean)>
<javax.xml.parsers.DocumentBuilderFactory: void <init>()>
<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance(java.lang.String,java.lang.ClassLoader)>
<javax.xml.parsers.DocumentBuilderFactory: boolean isIgnoringComments()>
<javax.xml.parsers.DocumentBuilderFactory: boolean isNamespaceAware()>
<javax.xml.parsers.DocumentBuilderFactory: void setSchema(javax.xml.validation.Schema)>
<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>
<javax.xml.parsers.DocumentBuilderFactory: void setIgnoringComments(boolean)>
<javax.xml.parsers.DocumentBuilderFactory: boolean isIgnoringElementContentWhitespace()>
<javax.xml.parsers.DocumentBuilderFactory: boolean getFeature(java.lang.String)>
<javax.xml.parsers.DocumentBuilderFactory: boolean isXIncludeAware()>
<javax.xml.parsers.DocumentBuilderFactory: javax.xml.validation.Schema getSchema()>
<javax.xml.parsers.DocumentBuilderFactory: boolean isValidating()>
<javax.xml.parsers.DocumentBuilderFactory: boolean isCoalescing()>
<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>
<javax.xml.parsers.DocumentBuilderFactory: void setXIncludeAware(boolean)>
<javax.xml.parsers.DocumentBuilderFactory: void setCoalescing(boolean)>
<javax.xml.parsers.DocumentBuilderFactory: void setValidating(boolean)>
<javax.xml.parsers.DocumentBuilderFactory: void setAttribute(java.lang.String,java.lang.Object)>
<java.util.EventListenerProxy: void <init>(T)>
<java.util.EventListenerProxy: T getListener()>
<javax.security.cert.Certificate: void <init>()>
<javax.security.cert.Certificate: byte[] getEncoded()>
<javax.security.cert.Certificate: void verify(java.security.PublicKey)>
<javax.security.cert.Certificate: void verify(java.security.PublicKey,java.lang.String)>
<javax.security.cert.Certificate: java.lang.String toString()>
<javax.security.cert.Certificate: java.security.PublicKey getPublicKey()>
<android.hardware.hdmi.HdmiControlManager: void setStandbyMode(boolean)>
<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiClient getClient(int)>
<android.hardware.hdmi.HdmiControlManager: boolean isDeviceConnected(android.hardware.hdmi.HdmiDeviceInfo)>
<android.hardware.hdmi.HdmiControlManager: void removeHotplugEventListener(android.hardware.hdmi.HdmiControlManager.HotplugEventListener)>
<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiPlaybackClient getPlaybackClient()>
<android.hardware.hdmi.HdmiControlManager: void powerOffDevice(android.hardware.hdmi.HdmiDeviceInfo)>
<android.hardware.hdmi.HdmiControlManager: int getPhysicalAddress()>
<android.hardware.hdmi.HdmiControlManager: void setActiveSource(android.hardware.hdmi.HdmiDeviceInfo)>
<android.hardware.hdmi.HdmiControlManager: java.util.List getConnectedDevices()>
<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiSwitchClient getSwitchClient()>
<android.hardware.hdmi.HdmiControlManager: void addHotplugEventListener(android.hardware.hdmi.HdmiControlManager.HotplugEventListener)>
<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiTvClient getTvClient()>
<android.service.autofill.RegexValidator: void <init>(android.view.autofill.AutofillId,java.util.regex.Pattern)>
<android.service.autofill.RegexValidator: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.RegexValidator: int describeContents()>
<android.service.autofill.RegexValidator: boolean isValid(android.service.autofill.ValueFinder)>
<java.lang.invoke.MethodHandle: java.lang.Object invoke(java.lang.Object...)>
<java.lang.invoke.MethodHandle: boolean isVarargsCollector()>
<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asSpreader(java.lang.Class,int)>
<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asCollector(java.lang.Class,int)>
<java.lang.invoke.MethodHandle: java.lang.Object invokeExact(java.lang.Object...)>
<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle bindTo(java.lang.Object)>
<java.lang.invoke.MethodHandle: java.lang.invoke.MethodType type()>
<java.lang.invoke.MethodHandle: java.lang.Object invokeWithArguments(java.util.List)>
<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asFixedArity()>
<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>
<java.lang.invoke.MethodHandle: java.lang.Object invokeWithArguments(java.lang.Object...)>
<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asVarargsCollector(java.lang.Class)>
<java.security.KeyFactorySpi: void <init>()>
<java.security.KeyFactorySpi: java.security.Key engineTranslateKey(java.security.Key)>
<java.security.KeyFactorySpi: T engineGetKeySpec(java.security.Key,java.lang.Class)>
<java.security.KeyFactorySpi: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>
<java.security.KeyFactorySpi: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>
<java.security.interfaces.ECKey: java.security.spec.ECParameterSpec getParams()>
<javax.net.ssl.SSLParameters: void <init>(String[])>
<javax.net.ssl.SSLParameters: java.util.Collection getSNIMatchers()>
<javax.net.ssl.SSLParameters: void setApplicationProtocols(java.lang.String[])>
<javax.net.ssl.SSLParameters: void setUseCipherSuitesOrder(boolean)>
<javax.net.ssl.SSLParameters: java.security.AlgorithmConstraints getAlgorithmConstraints()>
<javax.net.ssl.SSLParameters: java.lang.String[] getCipherSuites()>
<javax.net.ssl.SSLParameters: java.util.List getServerNames()>
<javax.net.ssl.SSLParameters: boolean getUseCipherSuitesOrder()>
<javax.net.ssl.SSLParameters: void setEndpointIdentificationAlgorithm(java.lang.String)>
<javax.net.ssl.SSLParameters: java.lang.String getEndpointIdentificationAlgorithm()>
<javax.net.ssl.SSLParameters: void setAlgorithmConstraints(java.security.AlgorithmConstraints)>
<javax.net.ssl.SSLParameters: java.lang.String[] getApplicationProtocols()>
<javax.net.ssl.SSLParameters: void setServerNames(java.util.List)>
<javax.net.ssl.SSLParameters: boolean getNeedClientAuth()>
<javax.net.ssl.SSLParameters: void setCipherSuites(java.lang.String[])>
<javax.net.ssl.SSLParameters: void setSNIMatchers(java.util.Collection)>
<javax.net.ssl.SSLParameters: boolean getWantClientAuth()>
<javax.net.ssl.SSLParameters: void setProtocols(java.lang.String[])>
<javax.net.ssl.SSLParameters: void setWantClientAuth(boolean)>
<javax.net.ssl.SSLParameters: void setNeedClientAuth(boolean)>
<javax.net.ssl.SSLParameters: java.lang.String[] getProtocols()>
<javax.net.ssl.SSLParameters: void <init>()>
<javax.net.ssl.SSLParameters: void <init>(String[],String[])>
<android.media.audiofx.DynamicsProcessing.BandBase: void setEnabled(boolean)>
<android.media.audiofx.DynamicsProcessing.BandBase: float getCutoffFrequency()>
<android.media.audiofx.DynamicsProcessing.BandBase: void <init>(boolean,float)>
<android.media.audiofx.DynamicsProcessing.BandBase: boolean isEnabled()>
<android.media.audiofx.DynamicsProcessing.BandBase: void setCutoffFrequency(float)>
<android.provider.DocumentsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openDocumentThumbnail(java.lang.String,android.graphics.Point,android.os.CancellationSignal)>
<android.provider.DocumentsProvider: void revokeDocumentPermission(java.lang.String)>
<android.provider.DocumentsProvider: android.database.Cursor queryDocument(java.lang.String,java.lang.String[])>
<android.provider.DocumentsProvider: android.database.Cursor queryRecentDocuments(java.lang.String,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>
<android.provider.DocumentsProvider: android.database.Cursor queryRoots(java.lang.String[])>
<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>
<android.provider.DocumentsProvider: void ejectRoot(java.lang.String)>
<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.provider.DocumentsProvider: android.provider.DocumentsContract.Path findDocumentPath(java.lang.String,java.lang.String)>
<android.provider.DocumentsProvider: void <init>()>
<android.provider.DocumentsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>
<android.provider.DocumentsProvider: java.lang.String getDocumentType(java.lang.String)>
<android.provider.DocumentsProvider: boolean isChildDocument(java.lang.String,java.lang.String)>
<android.provider.DocumentsProvider: android.content.IntentSender createWebLinkIntent(java.lang.String,android.os.Bundle)>
<android.provider.DocumentsProvider: android.database.Cursor queryRecentDocuments(java.lang.String,java.lang.String[])>
<android.provider.DocumentsProvider: android.database.Cursor queryChildDocuments(java.lang.String,java.lang.String[],android.os.Bundle)>
<android.provider.DocumentsProvider: java.lang.String getType(android.net.Uri)>
<android.provider.DocumentsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>
<android.provider.DocumentsProvider: android.database.Cursor queryChildDocuments(java.lang.String,java.lang.String[],java.lang.String)>
<android.provider.DocumentsProvider: java.lang.String copyDocument(java.lang.String,java.lang.String)>
<android.provider.DocumentsProvider: android.os.Bundle getDocumentMetadata(java.lang.String)>
<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>
<android.provider.DocumentsProvider: java.lang.String renameDocument(java.lang.String,java.lang.String)>
<android.provider.DocumentsProvider: java.lang.String createDocument(java.lang.String,java.lang.String,java.lang.String)>
<android.provider.DocumentsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.provider.DocumentsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.provider.DocumentsProvider: java.lang.String moveDocument(java.lang.String,java.lang.String,java.lang.String)>
<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openTypedDocument(java.lang.String,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>
<android.provider.DocumentsProvider: void deleteDocument(java.lang.String)>
<android.provider.DocumentsProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.provider.DocumentsProvider: android.database.Cursor querySearchDocuments(java.lang.String,java.lang.String[],android.os.Bundle)>
<android.provider.DocumentsProvider: java.lang.String[] getDocumentStreamTypes(java.lang.String,java.lang.String)>
<android.provider.DocumentsProvider: android.database.Cursor querySearchDocuments(java.lang.String,java.lang.String,java.lang.String[])>
<android.provider.DocumentsProvider: android.os.ParcelFileDescriptor openDocument(java.lang.String,java.lang.String,android.os.CancellationSignal)>
<android.provider.DocumentsProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<android.provider.DocumentsProvider: void removeDocument(java.lang.String,java.lang.String)>
<android.hardware.radio.RadioMetadata.Builder: void <init>()>
<android.hardware.radio.RadioMetadata.Builder: android.hardware.radio.RadioMetadata.Builder putBitmap(java.lang.String,android.graphics.Bitmap)>
<android.hardware.radio.RadioMetadata.Builder: android.hardware.radio.RadioMetadata.Builder putString(java.lang.String,java.lang.String)>
<android.hardware.radio.RadioMetadata.Builder: android.hardware.radio.RadioMetadata.Builder putClock(java.lang.String,long,int)>
<android.hardware.radio.RadioMetadata.Builder: android.hardware.radio.RadioMetadata build()>
<android.hardware.radio.RadioMetadata.Builder: android.hardware.radio.RadioMetadata.Builder putInt(java.lang.String,int)>
<android.hardware.radio.RadioMetadata.Builder: void <init>(android.hardware.radio.RadioMetadata)>
<java.nio.charset.CoderMalfunctionError: void <init>(Exception)>
<android.os.SharedMemory: java.nio.ByteBuffer mapReadOnly()>
<android.os.SharedMemory: void close()>
<android.os.SharedMemory: void writeToParcel(android.os.Parcel,int)>
<android.os.SharedMemory: int describeContents()>
<android.os.SharedMemory: java.nio.ByteBuffer mapReadWrite()>
<android.os.SharedMemory: java.nio.ByteBuffer map(int,int,int)>
<android.os.SharedMemory: void unmap(java.nio.ByteBuffer)>
<android.os.SharedMemory: android.os.SharedMemory create(java.lang.String,int)>
<android.os.SharedMemory: boolean setProtect(int)>
<android.os.SharedMemory: int getSize()>
<java.time.zone.ZoneRules: boolean isValidOffset(java.time.LocalDateTime,java.time.ZoneOffset)>
<java.time.zone.ZoneRules: java.util.List getTransitionRules()>
<java.time.zone.ZoneRules: java.time.ZoneOffset getStandardOffset(java.time.Instant)>
<java.time.zone.ZoneRules: boolean isDaylightSavings(java.time.Instant)>
<java.time.zone.ZoneRules: java.time.zone.ZoneRules of(java.time.ZoneOffset)>
<java.time.zone.ZoneRules: java.util.List getTransitions()>
<java.time.zone.ZoneRules: java.time.Duration getDaylightSavings(java.time.Instant)>
<java.time.zone.ZoneRules: boolean isFixedOffset()>
<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition getTransition(java.time.LocalDateTime)>
<java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.Instant)>
<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition previousTransition(java.time.Instant)>
<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition nextTransition(java.time.Instant)>
<java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.LocalDateTime)>
<java.time.zone.ZoneRules: java.util.List getValidOffsets(java.time.LocalDateTime)>
<java.time.zone.ZoneRules: java.time.zone.ZoneRules of(java.time.ZoneOffset,java.time.ZoneOffset,java.util.List,java.util.List,java.util.List)>
<android.media.DrmInitData: android.media.DrmInitData.SchemeInitData get(java.util.UUID)>
<android.media.ResourceBusyException: void <init>(String)>
<java.net.ConnectException: void <init>(String)>
<java.net.ConnectException: void <init>()>
<android.hardware.camera2.params.MandatoryStreamCombination.MandatoryStreamInformation: java.util.List getAvailableSizes()>
<android.hardware.camera2.params.MandatoryStreamCombination.MandatoryStreamInformation: int getFormat()>
<android.hardware.camera2.params.MandatoryStreamCombination.MandatoryStreamInformation: boolean isInput()>
<android.hardware.radio.ProgramList: android.hardware.radio.RadioManager.ProgramInfo get(android.hardware.radio.ProgramSelector.Identifier)>
<android.hardware.radio.ProgramList: void addOnCompleteListener(java.util.concurrent.Executor,android.hardware.radio.ProgramList.OnCompleteListener)>
<android.hardware.radio.ProgramList: void removeOnCompleteListener(android.hardware.radio.ProgramList.OnCompleteListener)>
<android.hardware.radio.ProgramList: void addOnCompleteListener(android.hardware.radio.ProgramList.OnCompleteListener)>
<android.hardware.radio.ProgramList: void unregisterListCallback(android.hardware.radio.ProgramList.ListCallback)>
<android.hardware.radio.ProgramList: void close()>
<android.hardware.radio.ProgramList: void registerListCallback(java.util.concurrent.Executor,android.hardware.radio.ProgramList.ListCallback)>
<android.hardware.radio.ProgramList: void registerListCallback(android.hardware.radio.ProgramList.ListCallback)>
<android.hardware.radio.ProgramList: java.util.List toList()>
<android.bluetooth.BluetoothProfile: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothProfile: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothProfile: java.util.List getConnectedDevices()>
<java.util.concurrent.ThreadPoolExecutor.DiscardPolicy: long toMillis(long)>
<java.util.concurrent.ThreadPoolExecutor.DiscardPolicy: void sleep(long)>
<java.util.concurrent.ThreadPoolExecutor.DiscardPolicy: long toNanos(long)>
<java.util.concurrent.ThreadPoolExecutor.DiscardPolicy: long toDays(long)>
<java.util.concurrent.ThreadPoolExecutor.DiscardPolicy: long toSeconds(long)>
<java.util.concurrent.ThreadPoolExecutor.DiscardPolicy: void rejectedExecution(Runnable,java.util.concurrent.ThreadPoolExecutor)>
<java.util.concurrent.ThreadPoolExecutor.DiscardPolicy: long toHours(long)>
<java.util.concurrent.ThreadPoolExecutor.DiscardPolicy: void timedJoin(java.lang.Thread,long)>
<java.util.concurrent.ThreadPoolExecutor.DiscardPolicy: void timedWait(java.lang.Object,long)>
<java.util.concurrent.ThreadPoolExecutor.DiscardPolicy: long toMicros(long)>
<java.util.concurrent.ThreadPoolExecutor.DiscardPolicy: long toMinutes(long)>
<java.util.concurrent.ThreadPoolExecutor.DiscardPolicy: void <init>()>
<java.util.concurrent.ThreadPoolExecutor.DiscardPolicy: long convert(long,java.util.concurrent.TimeUnit)>
<java.text.Collator: int getStrength()>
<java.text.Collator: java.text.Collator getInstance(java.util.Locale)>
<java.text.Collator: java.text.CollationKey getCollationKey(java.lang.String)>
<java.text.Collator: int getDecomposition()>
<java.text.Collator: int hashCode()>
<java.text.Collator: java.util.Locale[] getAvailableLocales()>
<java.text.Collator: java.text.Collator getInstance()>
<java.text.Collator: java.lang.Object clone()>
<java.text.Collator: void setDecomposition(int)>
<java.text.Collator: int compare(java.lang.String,java.lang.String)>
<java.text.Collator: void <init>()>
<java.text.Collator: boolean equals(java.lang.String,java.lang.String)>
<java.text.Collator: int compare(java.lang.Object,java.lang.Object)>
<java.text.Collator: void setStrength(int)>
<android.hardware.Camera.ShutterCallback: void onShutter()>
<android.print.PrintDocumentAdapter.LayoutResultCallback: void onLayoutFailed(CharSequence)>
<android.print.PrintDocumentAdapter.LayoutResultCallback: void onLayoutCancelled()>
<android.print.PrintDocumentAdapter.LayoutResultCallback: void onLayoutFinished(android.print.PrintDocumentInfo,boolean)>
<java.security.PKCS12Attribute: void <init>(byte[])>
<java.security.PKCS12Attribute: byte[] getEncoded()>
<java.security.PKCS12Attribute: java.lang.String getName()>
<java.security.PKCS12Attribute: void <init>(String,String)>
<java.security.PKCS12Attribute: java.lang.String getValue()>
<android.service.autofill.ImageTransformation: int describeContents()>
<android.service.autofill.ImageTransformation: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.ImageTransformation: void apply(android.service.autofill.ValueFinder,android.widget.RemoteViews,int)>
<android.security.keystore.SecureKeyImportUnavailableException: void <init>(Throwable)>
<android.security.keystore.SecureKeyImportUnavailableException: void <init>()>
<android.security.keystore.SecureKeyImportUnavailableException: void <init>(String)>
<android.security.keystore.SecureKeyImportUnavailableException: void <init>(String,Throwable)>
<java.util.zip.ZipError: void <init>(String)>
<android.webkit.TokenBindingService: void <init>()>
<android.telephony.ims.ProvisioningManager.Callback: void onProvisioningStringChanged(int,java.lang.String)>
<android.telephony.ims.ProvisioningManager.Callback: void <init>()>
<android.telephony.ims.ProvisioningManager.Callback: void onProvisioningIntChanged(int,int)>
<android.telecom.PhoneAccount: int getCapabilities()>
<android.telecom.PhoneAccount: boolean isEnabled()>
<android.telecom.PhoneAccount: android.telecom.PhoneAccount.Builder toBuilder()>
<android.telecom.PhoneAccount: java.util.List getSupportedUriSchemes()>
<android.telecom.PhoneAccount: int describeContents()>
<android.telecom.PhoneAccount: int getHighlightColor()>
<android.telecom.PhoneAccount: boolean supportsUriScheme(java.lang.String)>
<android.telecom.PhoneAccount: android.net.Uri getAddress()>
<android.telecom.PhoneAccount: android.graphics.drawable.Icon getIcon()>
<android.telecom.PhoneAccount: CharSequence getShortDescription()>
<android.telecom.PhoneAccount: void writeToParcel(android.os.Parcel,int)>
<android.telecom.PhoneAccount: android.net.Uri getSubscriptionAddress()>
<android.telecom.PhoneAccount: android.telecom.PhoneAccountHandle getAccountHandle()>
<android.telecom.PhoneAccount: CharSequence getLabel()>
<android.telecom.PhoneAccount: boolean hasCapabilities(int)>
<android.telecom.PhoneAccount: android.os.Bundle getExtras()>
<android.telecom.PhoneAccount: android.telecom.PhoneAccount.Builder builder(android.telecom.PhoneAccountHandle,CharSequence)>
<android.media.MediaDrm.CryptoSession: byte[] encrypt(byte[],byte[],byte[])>
<android.media.MediaDrm.CryptoSession: byte[] sign(byte[],byte[])>
<android.media.MediaDrm.CryptoSession: boolean verify(byte[],byte[],byte[])>
<android.media.MediaDrm.CryptoSession: byte[] decrypt(byte[],byte[],byte[])>
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setManufacturerData(int,byte[],byte[])>
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setServiceSolicitationUuid(android.os.ParcelUuid,android.os.ParcelUuid)>
<android.bluetooth.le.ScanFilter.Builder: void <init>()>
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setServiceUuid(android.os.ParcelUuid)>
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setServiceSolicitationUuid(android.os.ParcelUuid)>
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setManufacturerData(int,byte[])>
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setServiceUuid(android.os.ParcelUuid,android.os.ParcelUuid)>
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setServiceData(android.os.ParcelUuid,byte[])>
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setServiceData(android.os.ParcelUuid,byte[],byte[])>
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setDeviceAddress(java.lang.String)>
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter.Builder setDeviceName(java.lang.String)>
<android.bluetooth.le.ScanFilter.Builder: android.bluetooth.le.ScanFilter build()>
<java.security.interfaces.DSAParams: java.math.BigInteger getG()>
<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>
<java.security.interfaces.DSAParams: java.math.BigInteger getP()>
<android.telecom.ConnectionService: void connectionServiceFocusReleased()>
<android.telecom.ConnectionService: android.telecom.Connection onCreateOutgoingHandoverConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: void onCreateOutgoingConnectionFailed(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: void onConference(android.telecom.Connection,android.telecom.Connection)>
<android.telecom.ConnectionService: java.util.Collection getAllConferences()>
<android.telecom.ConnectionService: android.telecom.Connection onCreateIncomingHandoverConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: android.telecom.Connection onCreateOutgoingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: void onRemoteExistingConnectionAdded(android.telecom.RemoteConnection)>
<android.telecom.ConnectionService: void onHandoverFailed(android.telecom.ConnectionRequest,int)>
<android.telecom.ConnectionService: void onCreateIncomingConnectionFailed(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: void <init>()>
<android.telecom.ConnectionService: android.telecom.RemoteConnection createRemoteOutgoingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: android.telecom.Connection onCreateIncomingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: void addConference(android.telecom.Conference)>
<android.telecom.ConnectionService: android.telecom.RemoteConnection createRemoteIncomingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: void addExistingConnection(android.telecom.PhoneAccountHandle,android.telecom.Connection)>
<android.telecom.ConnectionService: java.util.Collection getAllConnections()>
<android.telecom.ConnectionService: android.os.IBinder onBind(android.content.Intent)>
<android.telecom.ConnectionService: void onRemoteConferenceAdded(android.telecom.RemoteConference)>
<android.telecom.ConnectionService: void onConnectionServiceFocusGained()>
<android.telecom.ConnectionService: void onConnectionServiceFocusLost()>
<android.telecom.ConnectionService: void conferenceRemoteConnections(android.telecom.RemoteConnection,android.telecom.RemoteConnection)>
<java.nio.file.ProviderNotFoundException: void <init>()>
<java.nio.file.ProviderNotFoundException: void <init>(String)>
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: android.database.sqlite.SQLiteDatabase.OpenParams.Builder setLookasideConfig(int,int)>
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: android.database.sqlite.SQLiteDatabase.OpenParams.Builder setOpenFlags(int)>
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: android.database.sqlite.SQLiteDatabase.OpenParams.Builder setIdleConnectionTimeout(long)>
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: android.database.sqlite.SQLiteDatabase.OpenParams.Builder setErrorHandler(android.database.DatabaseErrorHandler)>
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: void <init>(android.database.sqlite.SQLiteDatabase.OpenParams)>
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: android.database.sqlite.SQLiteDatabase.OpenParams.Builder setCursorFactory(android.database.sqlite.SQLiteDatabase.CursorFactory)>
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: void <init>()>
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: android.database.sqlite.SQLiteDatabase.OpenParams.Builder addOpenFlags(int)>
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: android.database.sqlite.SQLiteDatabase.OpenParams.Builder setSynchronousMode(java.lang.String)>
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: android.database.sqlite.SQLiteDatabase.OpenParams.Builder setJournalMode(java.lang.String)>
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: android.database.sqlite.SQLiteDatabase.OpenParams.Builder removeOpenFlags(int)>
<android.database.sqlite.SQLiteDatabase.OpenParams.Builder: android.database.sqlite.SQLiteDatabase.OpenParams build()>
<java.nio.file.NoSuchFileException: void <init>(String,String,String)>
<java.nio.file.NoSuchFileException: void <init>(String)>
<android.widget.GridView: int getStretchMode()>
<android.widget.GridView: int getHorizontalSpacing()>
<android.widget.GridView: int getVerticalSpacing()>
<android.widget.GridView: void smoothScrollByOffset(int)>
<android.widget.GridView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.GridView: int getColumnWidth()>
<android.widget.GridView: void setStretchMode(int)>
<android.widget.GridView: void setGravity(int)>
<android.widget.GridView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.GridView: void setHorizontalSpacing(int)>
<android.widget.GridView: void setSelection(int)>
<android.widget.GridView: android.widget.ListAdapter getAdapter()>
<android.widget.GridView: int getRequestedColumnWidth()>
<android.widget.GridView: void setColumnWidth(int)>
<android.widget.GridView: void setVerticalSpacing(int)>
<android.widget.GridView: void setNumColumns(int)>
<android.widget.GridView: void <init>(android.content.Context)>
<android.widget.GridView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.GridView: int getNumColumns()>
<android.widget.GridView: int getGravity()>
<android.widget.GridView: int getRequestedHorizontalSpacing()>
<android.text.style.ClickableSpan: void <init>()>
<android.text.style.ClickableSpan: void onClick(android.view.View)>
<android.text.style.ClickableSpan: void updateDrawState(android.text.TextPaint)>
<android.animation.Animator: void resume()>
<android.animation.Animator: void cancel()>
<android.animation.Animator: void start()>
<android.animation.Animator: long getTotalDuration()>
<android.animation.Animator: void pause()>
<android.animation.Animator: long getDuration()>
<android.animation.Animator: void setStartDelay(long)>
<android.animation.Animator: boolean isPaused()>
<android.animation.Animator: android.animation.TimeInterpolator getInterpolator()>
<android.animation.Animator: android.animation.Animator clone()>
<android.animation.Animator: void addListener(android.animation.Animator.AnimatorListener)>
<android.animation.Animator: void removePauseListener(android.animation.Animator.AnimatorPauseListener)>
<android.animation.Animator: java.util.ArrayList getListeners()>
<android.animation.Animator: boolean isStarted()>
<android.animation.Animator: void setInterpolator(android.animation.TimeInterpolator)>
<android.animation.Animator: void <init>()>
<android.animation.Animator: void addPauseListener(android.animation.Animator.AnimatorPauseListener)>
<android.animation.Animator: void removeAllListeners()>
<android.animation.Animator: android.animation.Animator setDuration(long)>
<android.animation.Animator: void setTarget(java.lang.Object)>
<android.animation.Animator: void removeListener(android.animation.Animator.AnimatorListener)>
<android.animation.Animator: void setupStartValues()>
<android.animation.Animator: void end()>
<android.animation.Animator: long getStartDelay()>
<android.animation.Animator: boolean isRunning()>
<android.animation.Animator: void setupEndValues()>
<android.app.backup.BackupAgentHelper: void <init>()>
<android.app.backup.BackupAgentHelper: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<android.app.backup.BackupAgentHelper: void addHelper(java.lang.String,android.app.backup.BackupHelper)>
<android.app.backup.BackupAgentHelper: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>
<android.provider.MediaStore.Audio.Genres: android.net.Uri getContentUriForAudioId(java.lang.String,int)>
<android.provider.MediaStore.Audio.Genres: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore.Audio.Genres: void <init>()>
<java.sql.Array: java.lang.Object getArray(java.util.Map)>
<java.sql.Array: int getBaseType()>
<java.sql.Array: java.sql.ResultSet getResultSet(java.util.Map)>
<java.sql.Array: java.sql.ResultSet getResultSet(long,int)>
<java.sql.Array: java.sql.ResultSet getResultSet(long,int,java.util.Map)>
<java.sql.Array: void free()>
<java.sql.Array: java.sql.ResultSet getResultSet()>
<java.sql.Array: java.lang.Object getArray()>
<java.sql.Array: java.lang.Object getArray(long,int,java.util.Map)>
<java.sql.Array: java.lang.String getBaseTypeName()>
<java.sql.Array: java.lang.Object getArray(long,int)>
<java.io.LineNumberInputStream: void setLineNumber(int)>
<java.io.LineNumberInputStream: void <init>(java.io.InputStream)>
<java.io.LineNumberInputStream: int getLineNumber()>
<android.telecom.InCallService: android.telecom.Phone getPhone()>
<android.telecom.InCallService: void <init>()>
<android.telecom.InCallService: void onCanAddCallChanged(boolean)>
<android.telecom.InCallService: void requestBluetoothAudio(android.bluetooth.BluetoothDevice)>
<android.telecom.InCallService: void onSilenceRinger()>
<android.telecom.InCallService: void onPhoneCreated(android.telecom.Phone)>
<android.telecom.InCallService: void onCallRemoved(android.telecom.Call)>
<android.telecom.InCallService: void onPhoneDestroyed(android.telecom.Phone)>
<android.telecom.InCallService: void setMuted(boolean)>
<android.telecom.InCallService: android.telecom.CallAudioState getCallAudioState()>
<android.telecom.InCallService: void setAudioRoute(int)>
<android.telecom.InCallService: void onBringToForeground(boolean)>
<android.telecom.InCallService: android.os.IBinder onBind(android.content.Intent)>
<android.telecom.InCallService: void onCallAdded(android.telecom.Call)>
<android.telecom.InCallService: void onConnectionEvent(android.telecom.Call,java.lang.String,android.os.Bundle)>
<android.telecom.InCallService: java.util.List getCalls()>
<android.telecom.InCallService: boolean canAddCall()>
<android.telecom.InCallService: void onCallAudioStateChanged(android.telecom.CallAudioState)>
<android.telecom.ParcelableCallAnalytics: boolean isCreatedFromExistingConnection()>
<android.telecom.ParcelableCallAnalytics: void <init>(long,long,int,boolean,boolean,int,int,boolean,String,boolean,java.util.List,java.util.List)>
<android.telecom.ParcelableCallAnalytics: long getCallDurationMillis()>
<android.telecom.ParcelableCallAnalytics: long getStartTimeMillis()>
<android.telecom.ParcelableCallAnalytics: java.lang.String getConnectionService()>
<android.telecom.ParcelableCallAnalytics: void <init>(android.os.Parcel)>
<android.telecom.ParcelableCallAnalytics: boolean isAdditionalCall()>
<android.telecom.ParcelableCallAnalytics: boolean isInterrupted()>
<android.telecom.ParcelableCallAnalytics: int getCallTerminationCode()>
<android.telecom.ParcelableCallAnalytics: int getCallTechnologies()>
<android.telecom.ParcelableCallAnalytics: int describeContents()>
<android.telecom.ParcelableCallAnalytics: java.util.List analyticsEvents()>
<android.telecom.ParcelableCallAnalytics: java.util.List getEventTimings()>
<android.telecom.ParcelableCallAnalytics: boolean isEmergencyCall()>
<android.telecom.ParcelableCallAnalytics: int getCallType()>
<android.telecom.ParcelableCallAnalytics: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.CharSequenceTransformation.Builder: void <init>(android.view.autofill.AutofillId,java.util.regex.Pattern,String)>
<android.service.autofill.CharSequenceTransformation.Builder: android.service.autofill.CharSequenceTransformation build()>
<android.service.autofill.CharSequenceTransformation.Builder: android.service.autofill.CharSequenceTransformation.Builder addField(android.view.autofill.AutofillId,java.util.regex.Pattern,java.lang.String)>
<org.xml.sax.ext.Locator2Impl: void <init>(org.xml.sax.Locator)>
<org.xml.sax.ext.Locator2Impl: void setEncoding(java.lang.String)>
<org.xml.sax.ext.Locator2Impl: java.lang.String getXMLVersion()>
<org.xml.sax.ext.Locator2Impl: void <init>()>
<org.xml.sax.ext.Locator2Impl: void setXMLVersion(java.lang.String)>
<org.xml.sax.ext.Locator2Impl: java.lang.String getEncoding()>
<android.webkit.WebMessagePort.WebMessageCallback: void <init>()>
<android.webkit.WebMessagePort.WebMessageCallback: void onMessage(android.webkit.WebMessagePort,android.webkit.WebMessage)>
<android.app.admin.FreezePeriod: void <init>(java.time.MonthDay,java.time.MonthDay)>
<android.app.admin.FreezePeriod: java.time.MonthDay getStart()>
<android.app.admin.FreezePeriod: java.time.MonthDay getEnd()>
<java.lang.reflect.Method: java.lang.String toGenericString()>
<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object...)>
<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>
<java.lang.reflect.Method: int getModifiers()>
<java.lang.reflect.Method: boolean isBridge()>
<java.lang.reflect.Method: java.lang.Class getReturnType()>
<java.lang.reflect.Method: java.lang.Object getDefaultValue()>
<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>
<java.lang.reflect.Method: java.lang.annotation.Annotation[][] getParameterAnnotations()>
<java.lang.reflect.Method: boolean isDefault()>
<java.lang.reflect.Method: java.lang.String getName()>
<android.media.midi.MidiDeviceInfo.PortInfo: java.lang.String getName()>
<android.media.midi.MidiDeviceInfo.PortInfo: int getType()>
<android.media.midi.MidiDeviceInfo.PortInfo: int getPortNumber()>
<java.lang.annotation.AnnotationTypeMismatchException: java.lang.String foundType()>
<java.lang.annotation.AnnotationTypeMismatchException: void <init>(java.lang.reflect.Method,String)>
<java.lang.annotation.AnnotationTypeMismatchException: java.lang.reflect.Method element()>
<java.lang.Process: int waitFor()>
<java.lang.Process: java.io.OutputStream getOutputStream()>
<java.lang.Process: int exitValue()>
<java.lang.Process: void destroy()>
<java.lang.Process: java.io.InputStream getErrorStream()>
<java.lang.Process: boolean waitFor(long,java.util.concurrent.TimeUnit)>
<java.lang.Process: java.io.InputStream getInputStream()>
<java.lang.Process: java.lang.Process destroyForcibly()>
<java.lang.Process: void <init>()>
<java.lang.Process: boolean isAlive()>
<android.net.IpSecManager: android.net.IpSecManager.SecurityParameterIndex allocateSecurityParameterIndex(java.net.InetAddress,int)>
<android.net.IpSecManager: void removeTransportModeTransforms(java.net.DatagramSocket)>
<android.net.IpSecManager: void applyTransportModeTransform(java.io.FileDescriptor,int,android.net.IpSecTransform)>
<android.net.IpSecManager: void applyTransportModeTransform(java.net.DatagramSocket,int,android.net.IpSecTransform)>
<android.net.IpSecManager: android.net.IpSecManager.UdpEncapsulationSocket openUdpEncapsulationSocket(int)>
<android.net.IpSecManager: android.net.IpSecManager.UdpEncapsulationSocket openUdpEncapsulationSocket()>
<android.net.IpSecManager: void removeTransportModeTransforms(java.net.Socket)>
<android.net.IpSecManager: android.net.IpSecManager.IpSecTunnelInterface createIpSecTunnelInterface(java.net.InetAddress,java.net.InetAddress,android.net.Network)>
<android.net.IpSecManager: void applyTransportModeTransform(java.net.Socket,int,android.net.IpSecTransform)>
<android.net.IpSecManager: void applyTunnelModeTransform(android.net.IpSecManager.IpSecTunnelInterface,int,android.net.IpSecTransform)>
<android.net.IpSecManager: android.net.IpSecManager.SecurityParameterIndex allocateSecurityParameterIndex(java.net.InetAddress)>
<android.net.IpSecManager: void removeTransportModeTransforms(java.io.FileDescriptor)>
<android.service.voice.VoiceInteractionSession.AbortVoiceRequest: void sendAbortResult(android.os.Bundle)>
<android.service.voice.VoiceInteractionSession.AbortVoiceRequest: android.app.VoiceInteractor.Prompt getVoicePrompt()>
<android.service.voice.VoiceInteractionSession.AbortVoiceRequest: CharSequence getMessage()>
<android.view.WindowManager.InvalidDisplayException: void <init>()>
<android.view.WindowManager.InvalidDisplayException: void <init>(String)>
<android.widget.Checkable: boolean isChecked()>
<android.widget.Checkable: void toggle()>
<android.widget.Checkable: void setChecked(boolean)>
<android.content.pm.LauncherApps: boolean isActivityEnabled(android.content.ComponentName,android.os.UserHandle)>
<android.content.pm.LauncherApps: void unregisterCallback(android.content.pm.LauncherApps.Callback)>
<android.content.pm.LauncherApps: void registerCallback(android.content.pm.LauncherApps.Callback,android.os.Handler)>
<android.content.pm.LauncherApps: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,android.os.UserHandle)>
<android.content.pm.LauncherApps: void startShortcut(android.content.pm.ShortcutInfo,android.graphics.Rect,android.os.Bundle)>
<android.content.pm.LauncherApps: java.util.List getShortcutConfigActivityList(java.lang.String,android.os.UserHandle)>
<android.content.pm.LauncherApps: boolean shouldHideFromSuggestions(java.lang.String,android.os.UserHandle)>
<android.content.pm.LauncherApps: void startMainActivity(android.content.ComponentName,android.os.UserHandle,android.graphics.Rect,android.os.Bundle)>
<android.content.pm.LauncherApps: void registerCallback(android.content.pm.LauncherApps.Callback)>
<android.content.pm.LauncherApps: boolean hasShortcutHostPermission()>
<android.content.pm.LauncherApps: void pinShortcuts(java.lang.String,java.util.List,android.os.UserHandle)>
<android.content.pm.LauncherApps: java.util.List getShortcuts(android.content.pm.LauncherApps.ShortcutQuery,android.os.UserHandle)>
<android.content.pm.LauncherApps: android.content.pm.LauncherApps.PinItemRequest getPinItemRequest(android.content.Intent)>
<android.content.pm.LauncherApps: boolean isPackageEnabled(java.lang.String,android.os.UserHandle)>
<android.content.pm.LauncherApps: void registerPackageInstallerSessionCallback(java.util.concurrent.Executor,android.content.pm.PackageInstaller.SessionCallback)>
<android.content.pm.LauncherApps: void startShortcut(java.lang.String,java.lang.String,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
<android.content.pm.LauncherApps: void startPackageInstallerSessionDetailsActivity(android.content.pm.PackageInstaller.SessionInfo,android.graphics.Rect,android.os.Bundle)>
<android.content.pm.LauncherApps: android.content.pm.LauncherActivityInfo resolveActivity(android.content.Intent,android.os.UserHandle)>
<android.content.pm.LauncherApps: android.graphics.drawable.Drawable getShortcutIconDrawable(android.content.pm.ShortcutInfo,int)>
<android.content.pm.LauncherApps: void <init>(android.content.Context)>
<android.content.pm.LauncherApps: java.util.List getProfiles()>
<android.content.pm.LauncherApps: java.util.List getActivityList(java.lang.String,android.os.UserHandle)>
<android.content.pm.LauncherApps: void startAppDetailsActivity(android.content.ComponentName,android.os.UserHandle,android.graphics.Rect,android.os.Bundle)>
<android.content.pm.LauncherApps: android.os.Bundle getSuspendedPackageLauncherExtras(java.lang.String,android.os.UserHandle)>
<android.content.pm.LauncherApps: android.content.IntentSender getShortcutConfigActivityIntent(android.content.pm.LauncherActivityInfo)>
<android.content.pm.LauncherApps: java.util.List getAllPackageInstallerSessions()>
<android.content.pm.LauncherApps: android.content.pm.LauncherApps.AppUsageLimit getAppUsageLimit(java.lang.String,android.os.UserHandle)>
<android.content.pm.LauncherApps: void unregisterPackageInstallerSessionCallback(android.content.pm.PackageInstaller.SessionCallback)>
<android.content.pm.LauncherApps: android.graphics.drawable.Drawable getShortcutBadgedIconDrawable(android.content.pm.ShortcutInfo,int)>
<android.app.AppOpsManager.PackageOps: void writeToParcel(android.os.Parcel,int)>
<android.app.AppOpsManager.PackageOps: int getUid()>
<android.app.AppOpsManager.PackageOps: java.lang.String getPackageName()>
<android.app.AppOpsManager.PackageOps: java.util.List getOps()>
<android.app.AppOpsManager.PackageOps: int describeContents()>
<android.net.wifi.WifiManager.OnWifiUsabilityStatsListener: void onWifiUsabilityStats(int,boolean,android.net.wifi.WifiUsabilityStatsEntry)>
<android.media.audiopolicy.AudioMix: int getMixState()>
<android.view.inputmethod.InputContentInfo: int describeContents()>
<android.view.inputmethod.InputContentInfo: android.content.ClipDescription getDescription()>
<android.view.inputmethod.InputContentInfo: android.net.Uri getLinkUri()>
<android.view.inputmethod.InputContentInfo: void <init>(android.net.Uri,android.content.ClipDescription)>
<android.view.inputmethod.InputContentInfo: void requestPermission()>
<android.view.inputmethod.InputContentInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.InputContentInfo: void <init>(android.net.Uri,android.content.ClipDescription,android.net.Uri)>
<android.view.inputmethod.InputContentInfo: android.net.Uri getContentUri()>
<android.view.inputmethod.InputContentInfo: void releasePermission()>
<android.icu.text.DateIntervalInfo: android.icu.text.DateIntervalInfo.PatternInfo getIntervalPattern(java.lang.String,int)>
<android.icu.text.DateIntervalInfo: void <init>(java.util.Locale)>
<android.icu.text.DateIntervalInfo: void setIntervalPattern(java.lang.String,int,java.lang.String)>
<android.icu.text.DateIntervalInfo: void <init>(android.icu.util.ULocale)>
<android.icu.text.DateIntervalInfo: java.lang.Object clone()>
<android.icu.text.DateIntervalInfo: void setFallbackIntervalPattern(java.lang.String)>
<android.icu.text.DateIntervalInfo: java.lang.String getFallbackIntervalPattern()>
<android.icu.text.DateIntervalInfo: android.icu.text.DateIntervalInfo cloneAsThawed()>
<android.icu.text.DateIntervalInfo: android.icu.text.DateIntervalInfo freeze()>
<android.icu.text.DateIntervalInfo: boolean getDefaultOrder()>
<android.icu.text.DateIntervalInfo: boolean isFrozen()>
<android.R.array: void <init>()>
<android.accessibilityservice.GestureDescription: int getMaxStrokeCount()>
<android.accessibilityservice.GestureDescription: android.accessibilityservice.GestureDescription.StrokeDescription getStroke(int)>
<android.accessibilityservice.GestureDescription: int getStrokeCount()>
<android.accessibilityservice.GestureDescription: long getMaxGestureDuration()>
<android.content.res.XmlResourceParser extends org.xmlpull.v1.XmlPullParser android.util.AttributeSet java.lang.AutoCloseable: void close()>
<android.webkit.DownloadListener: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)>
<android.Manifest.permission_group: void <init>()>
<android.media.MediaPlayer: void clearOnMediaTimeDiscontinuityListener()>
<android.media.MediaPlayer: void prepareAsync()>
<android.media.MediaPlayer: byte[] provideKeyResponse(byte[],byte[])>
<android.media.MediaPlayer: void stop()>
<android.media.MediaPlayer: void clearOnSubtitleDataListener()>
<android.media.MediaPlayer: void deselectTrack(int)>
<android.media.MediaPlayer: void setOnSubtitleDataListener(android.media.MediaPlayer.OnSubtitleDataListener,android.os.Handler)>
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener)>
<android.media.MediaPlayer: void start()>
<android.media.MediaPlayer: void setOnDrmPreparedListener(android.media.MediaPlayer.OnDrmPreparedListener,android.os.Handler)>
<android.media.MediaPlayer: int getDuration()>
<android.media.MediaPlayer: void setLooping(boolean)>
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>
<android.media.MediaPlayer: void addTimedTextSource(android.content.Context,android.net.Uri,java.lang.String)>
<android.media.MediaPlayer: int getAudioSessionId()>
<android.media.MediaPlayer: void releaseDrm()>
<android.media.MediaPlayer: void finalize()>
<android.media.MediaPlayer: android.media.MediaPlayer.DrmInfo getDrmInfo()>
<android.media.MediaPlayer: void prepare()>
<android.media.MediaPlayer: void pause()>
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer.OnBufferingUpdateListener)>
<android.media.MediaPlayer: void setOnDrmPreparedListener(android.media.MediaPlayer.OnDrmPreparedListener)>
<android.media.MediaPlayer: void setAuxEffectSendLevel(float)>
<android.media.MediaPlayer: boolean isLooping()>
<android.media.MediaPlayer: void addTimedTextSource(java.lang.String,java.lang.String)>
<android.media.MediaPlayer: void setVolume(float,float)>
<android.media.MediaPlayer: int getCurrentPosition()>
<android.media.MediaPlayer: void attachAuxEffect(int)>
<android.media.MediaPlayer: void <init>()>
<android.media.MediaPlayer: android.os.PersistableBundle getMetrics()>
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>
<android.media.MediaPlayer: android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper.Configuration)>
<android.media.MediaPlayer: void addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,android.os.Handler)>
<android.media.MediaPlayer: boolean isPlaying()>
<android.media.MediaPlayer: void setAudioSessionId(int)>
<android.media.MediaPlayer: void setDataSource(android.media.MediaDataSource)>
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer.OnInfoListener)>
<android.media.MediaPlayer: android.media.AudioDeviceInfo getRoutedDevice()>
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer.OnVideoSizeChangedListener)>
<android.media.MediaPlayer: void setPlaybackParams(android.media.PlaybackParams)>
<android.media.MediaPlayer: void setSurface(android.view.Surface)>
<android.media.MediaPlayer: int getVideoHeight()>
<android.media.MediaPlayer: void setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer.OnMediaTimeDiscontinuityListener,android.os.Handler)>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder,android.media.AudioAttributes,int)>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int,android.media.AudioAttributes,int)>
<android.media.MediaPlayer: void seekTo(int)>
<android.media.MediaPlayer: java.lang.String getDrmPropertyString(java.lang.String)>
<android.media.MediaPlayer: void prepareDrm(java.util.UUID)>
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map,java.util.List)>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri)>
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,long,long,java.lang.String)>
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)>
<android.media.MediaPlayer: void setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer.OnMediaTimeDiscontinuityListener)>
<android.media.MediaPlayer: void setOnSeekCompleteListener(android.media.MediaPlayer.OnSeekCompleteListener)>
<android.media.MediaPlayer: void setOnTimedMetaDataAvailableListener(android.media.MediaPlayer.OnTimedMetaDataAvailableListener)>
<android.media.MediaPlayer: void removeOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener)>
<android.media.MediaPlayer: void setAudioAttributes(android.media.AudioAttributes)>
<android.media.MediaPlayer: android.media.MediaPlayer.TrackInfo[] getTrackInfo()>
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>
<android.media.MediaPlayer: void setVideoScalingMode(int)>
<android.media.MediaPlayer: void setOnTimedTextListener(android.media.MediaPlayer.OnTimedTextListener)>
<android.media.MediaPlayer: android.media.PlaybackParams getPlaybackParams()>
<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)>
<android.media.MediaPlayer: boolean setPreferredDevice(android.media.AudioDeviceInfo)>
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>
<android.media.MediaPlayer: void reset()>
<android.media.MediaPlayer: void setOnSubtitleDataListener(android.media.MediaPlayer.OnSubtitleDataListener)>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)>
<android.media.MediaPlayer: void setDrmPropertyString(java.lang.String,java.lang.String)>
<android.media.MediaPlayer: android.media.SyncParams getSyncParams()>
<android.media.MediaPlayer: void setOnDrmInfoListener(android.media.MediaPlayer.OnDrmInfoListener,android.os.Handler)>
<android.media.MediaPlayer: android.media.MediaDrm.KeyRequest getKeyRequest(byte[],byte[],java.lang.String,int,java.util.Map)>
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>
<android.media.MediaPlayer: void seekTo(long,int)>
<android.media.MediaPlayer: void restoreKeys(byte[])>
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer.OnErrorListener)>
<android.media.MediaPlayer: void setDataSource(android.content.res.AssetFileDescriptor)>
<android.media.MediaPlayer: int getVideoWidth()>
<android.media.MediaPlayer: void setSyncParams(android.media.SyncParams)>
<android.media.MediaPlayer: void setAudioStreamType(int)>
<android.media.MediaPlayer: int getSelectedTrack(int)>
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer.OnCompletionListener)>
<android.media.MediaPlayer: void release()>
<android.media.MediaPlayer: void setNextMediaPlayer(android.media.MediaPlayer)>
<android.media.MediaPlayer: void setOnDrmConfigHelper(android.media.MediaPlayer.OnDrmConfigHelper)>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>
<android.media.MediaPlayer: android.media.AudioDeviceInfo getPreferredDevice()>
<android.media.MediaPlayer: void setDataSource(java.lang.String)>
<android.media.MediaPlayer: void setOnDrmInfoListener(android.media.MediaPlayer.OnDrmInfoListener)>
<android.media.MediaPlayer: android.media.MediaTimestamp getTimestamp()>
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,java.lang.String)>
<android.media.MediaPlayer: void selectTrack(int)>
<android.database.sqlite.SQLiteDebug: android.database.sqlite.SQLiteDebug.PagerStats getDatabaseInfo()>
<android.database.sqlite.SQLiteDebug: void dump(android.util.Printer,java.lang.String[])>
<java.io.StringBufferInputStream: long skip(long)>
<java.io.StringBufferInputStream: int read(byte[],int,int)>
<java.io.StringBufferInputStream: void reset()>
<java.io.StringBufferInputStream: void <init>(String)>
<java.io.StringBufferInputStream: int read()>
<java.io.StringBufferInputStream: int available()>
<android.icu.text.CaseMap.Lower: android.icu.text.CaseMap.Lower omitUnchangedText()>
<android.icu.text.CaseMap.Lower: A apply(java.util.Locale,CharSequence,A,android.icu.text.Edits)>
<android.icu.text.CaseMap.Lower: java.lang.String apply(java.util.Locale,CharSequence)>
<javax.xml.transform.sax.SAXTransformerFactory: javax.xml.transform.sax.TransformerHandler newTransformerHandler(javax.xml.transform.Source)>
<javax.xml.transform.sax.SAXTransformerFactory: org.xml.sax.XMLFilter newXMLFilter(javax.xml.transform.Templates)>
<javax.xml.transform.sax.SAXTransformerFactory: javax.xml.transform.sax.TransformerHandler newTransformerHandler()>
<javax.xml.transform.sax.SAXTransformerFactory: void <init>()>
<javax.xml.transform.sax.SAXTransformerFactory: javax.xml.transform.sax.TransformerHandler newTransformerHandler(javax.xml.transform.Templates)>
<javax.xml.transform.sax.SAXTransformerFactory: org.xml.sax.XMLFilter newXMLFilter(javax.xml.transform.Source)>
<javax.xml.transform.sax.SAXTransformerFactory: javax.xml.transform.sax.TemplatesHandler newTemplatesHandler()>
<android.service.autofill.SaveRequest: android.os.Bundle getClientState()>
<android.service.autofill.SaveRequest: java.util.List getFillContexts()>
<android.service.autofill.SaveRequest: int describeContents()>
<android.service.autofill.SaveRequest: java.util.List getDatasetIds()>
<android.service.autofill.SaveRequest: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ims.stub.ImsFeatureConfiguration.Builder: android.telephony.ims.stub.ImsFeatureConfiguration build()>
<android.telephony.ims.stub.ImsFeatureConfiguration.Builder: void <init>()>
<android.telephony.ims.stub.ImsFeatureConfiguration.Builder: android.telephony.ims.stub.ImsFeatureConfiguration.Builder addFeature(int,int)>
<android.nfc.NdefRecord: void <init>(short,byte[],byte[],byte[])>
<android.nfc.NdefRecord: android.nfc.NdefRecord createMime(java.lang.String,byte[])>
<android.nfc.NdefRecord: android.nfc.NdefRecord createApplicationRecord(java.lang.String)>
<android.nfc.NdefRecord: void <init>(byte[])>
<android.nfc.NdefRecord: byte[] toByteArray()>
<android.nfc.NdefRecord: android.nfc.NdefRecord createExternal(java.lang.String,java.lang.String,byte[])>
<android.nfc.NdefRecord: android.net.Uri toUri()>
<android.nfc.NdefRecord: android.nfc.NdefRecord createTextRecord(java.lang.String,java.lang.String)>
<android.nfc.NdefRecord: java.lang.String toMimeType()>
<android.nfc.NdefRecord: byte[] getId()>
<android.nfc.NdefRecord: byte[] getType()>
<android.nfc.NdefRecord: byte[] getPayload()>
<android.nfc.NdefRecord: void writeToParcel(android.os.Parcel,int)>
<android.nfc.NdefRecord: int describeContents()>
<android.nfc.NdefRecord: short getTnf()>
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(android.net.Uri)>
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(java.lang.String)>
<android.graphics.drawable.DrawableContainer: void setDither(boolean)>
<android.graphics.drawable.DrawableContainer: void setExitFadeDuration(int)>
<android.graphics.drawable.DrawableContainer: void scheduleDrawable(android.graphics.drawable.Drawable,Runnable,long)>
<android.graphics.drawable.DrawableContainer: void <init>()>
<android.graphics.drawable.DrawableContainer: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.DrawableContainer: void setAlpha(int)>
<android.graphics.drawable.DrawableContainer: boolean selectDrawable(int)>
<android.graphics.drawable.DrawableContainer: void unscheduleDrawable(android.graphics.drawable.Drawable,Runnable)>
<android.graphics.drawable.DrawableContainer: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.DrawableContainer: void setEnterFadeDuration(int)>
<android.graphics.drawable.DrawableContainer: void setConstantState(android.graphics.drawable.DrawableContainer.DrawableContainerState)>
<android.graphics.drawable.DrawableContainer: int getOpacity()>
<android.graphics.drawable.DrawableContainer: void draw(android.graphics.Canvas)>
<android.widget.Scroller: void abortAnimation()>
<android.widget.Scroller: void <init>(android.content.Context)>
<android.widget.Scroller: int getStartX()>
<android.widget.Scroller: void setFriction(float)>
<android.widget.Scroller: int getStartY()>
<android.widget.Scroller: boolean isFinished()>
<android.widget.Scroller: void fling(int,int,int,int,int,int,int,int)>
<android.widget.Scroller: int getFinalX()>
<android.widget.Scroller: int getFinalY()>
<android.widget.Scroller: void setFinalY(int)>
<android.widget.Scroller: void setFinalX(int)>
<android.widget.Scroller: void startScroll(int,int,int,int,int)>
<android.widget.Scroller: boolean computeScrollOffset()>
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator)>
<android.widget.Scroller: void forceFinished(boolean)>
<android.widget.Scroller: void extendDuration(int)>
<android.widget.Scroller: float getCurrVelocity()>
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator,boolean)>
<android.widget.Scroller: int getDuration()>
<android.widget.Scroller: void startScroll(int,int,int,int)>
<android.widget.Scroller: int timePassed()>
<android.widget.Scroller: int getCurrX()>
<android.widget.Scroller: int getCurrY()>
<android.media.session.MediaSessionManager.OnActiveSessionsChangedListener: void onActiveSessionsChanged(java.util.List)>
<android.webkit.URLUtil: java.lang.String guessUrl(java.lang.String)>
<android.webkit.URLUtil: java.lang.String stripAnchor(java.lang.String)>
<android.webkit.URLUtil: boolean isDataUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isJavaScriptUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isFileUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isHttpUrl(java.lang.String)>
<android.webkit.URLUtil: byte[] decode(byte[])>
<android.webkit.URLUtil: boolean isAboutUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isCookielessProxyUrl(java.lang.String)>
<android.webkit.URLUtil: void <init>()>
<android.webkit.URLUtil: boolean isHttpsUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isNetworkUrl(java.lang.String)>
<android.webkit.URLUtil: java.lang.String guessFileName(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.URLUtil: boolean isAssetUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isContentUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isValidUrl(java.lang.String)>
<android.webkit.URLUtil: java.lang.String composeSearchUrl(java.lang.String,java.lang.String,java.lang.String)>
<java.nio.DoubleBuffer: double get(int)>
<java.nio.DoubleBuffer: double[] array()>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double)>
<java.nio.DoubleBuffer: int compareTo(java.nio.DoubleBuffer)>
<java.nio.DoubleBuffer: int arrayOffset()>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer asReadOnlyBuffer()>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer duplicate()>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[],int,int)>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(java.nio.DoubleBuffer)>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[])>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[])>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[],int,int)>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(int,double)>
<java.nio.DoubleBuffer: java.nio.ByteOrder order()>
<java.nio.DoubleBuffer: boolean hasArray()>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer slice()>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[],int,int)>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer compact()>
<java.nio.DoubleBuffer: double get()>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer allocate(int)>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[])>
<android.hardware.location.ContextHubClientCallback: void onNanoAppEnabled(android.hardware.location.ContextHubClient,long)>
<android.hardware.location.ContextHubClientCallback: void onMessageFromNanoApp(android.hardware.location.ContextHubClient,android.hardware.location.NanoAppMessage)>
<android.hardware.location.ContextHubClientCallback: void <init>()>
<android.hardware.location.ContextHubClientCallback: void onNanoAppAborted(android.hardware.location.ContextHubClient,long,int)>
<android.hardware.location.ContextHubClientCallback: void onNanoAppLoaded(android.hardware.location.ContextHubClient,long)>
<android.hardware.location.ContextHubClientCallback: void onNanoAppUnloaded(android.hardware.location.ContextHubClient,long)>
<android.hardware.location.ContextHubClientCallback: void onHubReset(android.hardware.location.ContextHubClient)>
<android.hardware.location.ContextHubClientCallback: void onNanoAppDisabled(android.hardware.location.ContextHubClient,long)>
<java.text.DecimalFormat: void setGroupingSize(int)>
<java.text.DecimalFormat: void <init>(String,java.text.DecimalFormatSymbols)>
<java.text.DecimalFormat: boolean isDecimalSeparatorAlwaysShown()>
<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.DecimalFormat: void setMultiplier(int)>
<java.text.DecimalFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>
<java.text.DecimalFormat: java.lang.String getNegativePrefix()>
<java.text.DecimalFormat: void setPositiveSuffix(java.lang.String)>
<java.text.DecimalFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.DecimalFormat: void <init>()>
<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)>
<java.text.DecimalFormat: java.lang.String getPositivePrefix()>
<java.text.DecimalFormat: java.lang.String getNegativeSuffix()>
<java.text.DecimalFormat: java.lang.String getPositiveSuffix()>
<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>
<java.text.DecimalFormat: void setParseBigDecimal(boolean)>
<java.text.DecimalFormat: void applyLocalizedPattern(java.lang.String)>
<java.text.DecimalFormat: void <init>(String)>
<java.text.DecimalFormat: java.lang.String toLocalizedPattern()>
<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>
<java.text.DecimalFormat: void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)>
<java.text.DecimalFormat: void applyPattern(java.lang.String)>
<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>
<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>
<java.text.DecimalFormat: boolean isParseBigDecimal()>
<java.text.DecimalFormat: int getGroupingSize()>
<java.text.DecimalFormat: java.lang.String toPattern()>
<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.DecimalFormat: int getMultiplier()>
<android.icu.util.CopticCalendar: int handleGetLimit(int,int)>
<android.icu.util.CopticCalendar: void <init>(android.icu.util.TimeZone,java.util.Locale)>
<android.icu.util.CopticCalendar: void <init>(java.util.Date)>
<android.icu.util.CopticCalendar: int handleComputeMonthStart(int,int,boolean)>
<android.icu.util.CopticCalendar: void <init>()>
<android.icu.util.CopticCalendar: void <init>(android.icu.util.ULocale)>
<android.icu.util.CopticCalendar: void handleComputeFields(int)>
<android.icu.util.CopticCalendar: void <init>(int,int,int)>
<android.icu.util.CopticCalendar: void <init>(android.icu.util.TimeZone,android.icu.util.ULocale)>
<android.icu.util.CopticCalendar: void <init>(int,int,int,int,int,int)>
<android.icu.util.CopticCalendar: void <init>(android.icu.util.TimeZone)>
<android.icu.util.CopticCalendar: void <init>(java.util.Locale)>
<android.icu.util.CopticCalendar: int handleGetExtendedYear()>
<android.graphics.Color: boolean isSrgb()>
<android.graphics.Color: android.graphics.Color valueOf(float,float,float)>
<android.graphics.Color: int blue(int)>
<android.graphics.Color: long convert(float,float,float,float,android.graphics.ColorSpace.Connector)>
<android.graphics.Color: float getComponent(int)>
<android.graphics.Color: float alpha(@ColorLonglong)>
<android.graphics.Color: boolean isSrgb(@ColorLonglong)>
<android.graphics.Color: void RGBToHSV(int,int,int,float[])>
<android.graphics.Color: long pack(@ColorIntint)>
<android.graphics.Color: long pack(float,float,float)>
<android.graphics.Color: float luminance()>
<android.graphics.Color: void colorToHSV(@ColorIntint,float[])>
<android.graphics.Color: int alpha(int)>
<android.graphics.Color: int argb(int,int,int,int)>
<android.graphics.Color: android.graphics.ColorSpace.Model getModel()>
<android.graphics.Color: float blue()>
<android.graphics.Color: int parseColor(java.lang.String)>
<android.graphics.Color: float luminance(@ColorLonglong)>
<android.graphics.Color: long pack()>
<android.graphics.Color: android.graphics.ColorSpace colorSpace(@ColorLonglong)>
<android.graphics.Color: long convert(@ColorLonglong,android.graphics.ColorSpace)>
<android.graphics.Color: int rgb(float,float,float)>
<android.graphics.Color: float red(@ColorLonglong)>
<android.graphics.Color: android.graphics.Color valueOf(float,float,float,float)>
<android.graphics.Color: android.graphics.Color valueOf(@ColorIntint)>
<android.graphics.Color: float green()>
<android.graphics.Color: long convert(float,float,float,float,android.graphics.ColorSpace,android.graphics.ColorSpace)>
<android.graphics.Color: android.graphics.ColorSpace getColorSpace()>
<android.graphics.Color: android.graphics.Color valueOf(@ColorLonglong)>
<android.graphics.Color: android.graphics.Color convert(android.graphics.ColorSpace)>
<android.graphics.Color: int toArgb()>
<android.graphics.Color: float[] getComponents()>
<android.graphics.Color: android.graphics.Color valueOf(float,float,float,float,android.graphics.ColorSpace)>
<android.graphics.Color: float[] getComponents(float[])>
<android.graphics.Color: float blue(@ColorLonglong)>
<android.graphics.Color: int HSVToColor(float[])>
<android.graphics.Color: boolean isInColorSpace(@ColorLonglong,android.graphics.ColorSpace)>
<android.graphics.Color: int rgb(int,int,int)>
<android.graphics.Color: long convert(@ColorIntint,android.graphics.ColorSpace)>
<android.graphics.Color: float luminance(@ColorIntint)>
<android.graphics.Color: float green(@ColorLonglong)>
<android.graphics.Color: long pack(float,float,float,float)>
<android.graphics.Color: int green(int)>
<android.graphics.Color: android.graphics.Color valueOf(float[],android.graphics.ColorSpace)>
<android.graphics.Color: void <init>()>
<android.graphics.Color: boolean isWideGamut(@ColorLonglong)>
<android.graphics.Color: int HSVToColor(int,float[])>
<android.graphics.Color: float red()>
<android.graphics.Color: int argb(float,float,float,float)>
<android.graphics.Color: int toArgb(@ColorLonglong)>
<android.graphics.Color: int red(int)>
<android.graphics.Color: long pack(float,float,float,float,android.graphics.ColorSpace)>
<android.graphics.Color: int getComponentCount()>
<android.graphics.Color: long convert(@ColorLonglong,android.graphics.ColorSpace.Connector)>
<android.graphics.Color: boolean isWideGamut()>
<android.graphics.Color: float alpha()>
<android.hardware.fingerprint.FingerprintManager.AuthenticationCallback: void onAuthenticationError(int,CharSequence)>
<android.hardware.fingerprint.FingerprintManager.AuthenticationCallback: void onAuthenticationSucceeded(android.hardware.fingerprint.FingerprintManager.AuthenticationResult)>
<android.hardware.fingerprint.FingerprintManager.AuthenticationCallback: void onAuthenticationFailed()>
<android.hardware.fingerprint.FingerprintManager.AuthenticationCallback: void onAuthenticationHelp(int,CharSequence)>
<android.hardware.fingerprint.FingerprintManager.AuthenticationCallback: void <init>()>
<android.app.job.JobService: boolean onStartJob(android.app.job.JobParameters)>
<android.app.job.JobService: void jobFinished(android.app.job.JobParameters,boolean)>
<android.app.job.JobService: void <init>()>
<android.app.job.JobService: boolean onStopJob(android.app.job.JobParameters)>
<android.app.job.JobService: android.os.IBinder onBind(android.content.Intent)>
<android.widget.StackView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.StackView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.StackView: void <init>(android.content.Context)>
<android.widget.StackView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.net.wifi.hotspot2.ConfigParser: android.net.wifi.hotspot2.PasspointConfiguration parsePasspointConfig(java.lang.String,byte[])>
<android.provider.Contacts.Organizations: CharSequence getDisplayLabel(android.content.Context,int,CharSequence)>
<javax.xml.transform.sax.SAXSource: org.xml.sax.InputSource sourceToInputSource(javax.xml.transform.Source)>
<javax.xml.transform.sax.SAXSource: void setInputSource(org.xml.sax.InputSource)>
<javax.xml.transform.sax.SAXSource: org.xml.sax.XMLReader getXMLReader()>
<javax.xml.transform.sax.SAXSource: void <init>()>
<javax.xml.transform.sax.SAXSource: void <init>(org.xml.sax.XMLReader,org.xml.sax.InputSource)>
<javax.xml.transform.sax.SAXSource: void setSystemId(java.lang.String)>
<javax.xml.transform.sax.SAXSource: void <init>(org.xml.sax.InputSource)>
<javax.xml.transform.sax.SAXSource: java.lang.String getSystemId()>
<javax.xml.transform.sax.SAXSource: org.xml.sax.InputSource getInputSource()>
<javax.xml.transform.sax.SAXSource: void setXMLReader(org.xml.sax.XMLReader)>
<java.security.cert.PKIXCertPathBuilderResult: void <init>(java.security.cert.CertPath,java.security.cert.TrustAnchor,java.security.cert.PolicyNode,java.security.PublicKey)>
<java.security.cert.PKIXCertPathBuilderResult: java.security.cert.CertPath getCertPath()>
<android.hardware.camera2.CameraAccessException: void <init>(int,String,Throwable)>
<android.hardware.camera2.CameraAccessException: void <init>(int)>
<android.hardware.camera2.CameraAccessException: void <init>(int,Throwable)>
<android.hardware.camera2.CameraAccessException: int getReason()>
<android.hardware.camera2.CameraAccessException: void <init>(int,String)>
<android.util.NoSuchPropertyException: void <init>(String)>
<android.nfc.NfcManager: android.nfc.NfcAdapter getDefaultAdapter()>
<android.text.style.LeadingMarginSpan extends android.text.style.ParagraphStyle: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,CharSequence,int,int,boolean,android.text.Layout)>
<android.text.style.LeadingMarginSpan extends android.text.style.ParagraphStyle: int getLeadingMargin(boolean)>
<android.service.voice.VoiceInteractionSession.CommandRequest: java.lang.String getCommand()>
<android.service.voice.VoiceInteractionSession.CommandRequest: void sendResult(android.os.Bundle)>
<android.service.voice.VoiceInteractionSession.CommandRequest: void sendIntermediateResult(android.os.Bundle)>
<android.webkit.WebViewFactoryProvider.Statics: java.lang.String getDefaultUserAgent(android.content.Context)>
<android.webkit.WebViewFactoryProvider.Statics: java.lang.String findAddress(java.lang.String)>
<android.webkit.WebViewFactoryProvider.Statics: android.net.Uri getSafeBrowsingPrivacyPolicyUrl()>
<android.webkit.WebViewFactoryProvider.Statics: void setSafeBrowsingWhitelist(java.util.List,android.webkit.ValueCallback)>
<android.webkit.WebViewFactoryProvider.Statics: void clearClientCertPreferences(Runnable)>
<android.webkit.WebViewFactoryProvider.Statics: android.net.Uri[] parseFileChooserResult(int,android.content.Intent)>
<android.webkit.WebViewFactoryProvider.Statics: void enableSlowWholeDocumentDraw()>
<android.webkit.WebViewFactoryProvider.Statics: void initSafeBrowsing(android.content.Context,android.webkit.ValueCallback)>
<android.webkit.WebViewFactoryProvider.Statics: void freeMemoryForTests()>
<android.webkit.WebViewFactoryProvider.Statics: void setWebContentsDebuggingEnabled(boolean)>
<android.telephony.mbms.MbmsDownloadSessionCallback: void <init>()>
<android.telephony.mbms.MbmsDownloadSessionCallback: void onFileServicesUpdated(java.util.List)>
<android.telephony.mbms.MbmsDownloadSessionCallback: void onError(int,java.lang.String)>
<android.telephony.mbms.MbmsDownloadSessionCallback: void onMiddlewareReady()>
<android.transition.ArcMotion: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.ArcMotion: float getMaximumAngle()>
<android.transition.ArcMotion: float getMinimumHorizontalAngle()>
<android.transition.ArcMotion: android.graphics.Path getPath(float,float,float,float)>
<android.transition.ArcMotion: void setMaximumAngle(float)>
<android.transition.ArcMotion: void setMinimumHorizontalAngle(float)>
<android.transition.ArcMotion: void <init>()>
<android.transition.ArcMotion: float getMinimumVerticalAngle()>
<android.transition.ArcMotion: void setMinimumVerticalAngle(float)>
<android.webkit.WebChromeClient.CustomViewCallback: void onCustomViewHidden()>
<android.drm.DrmStore.DrmObjectType: void <init>()>
<android.widget.RadioGroup.OnCheckedChangeListener: void onCheckedChanged(android.widget.RadioGroup,@IdResint)>
<android.bluetooth.le.AdvertiseSettings: int describeContents()>
<android.bluetooth.le.AdvertiseSettings: int getMode()>
<android.bluetooth.le.AdvertiseSettings: int getTimeout()>
<android.bluetooth.le.AdvertiseSettings: boolean isConnectable()>
<android.bluetooth.le.AdvertiseSettings: void writeToParcel(android.os.Parcel,int)>
<android.bluetooth.le.AdvertiseSettings: int getTxPowerLevel()>
<android.widget.MultiAutoCompleteTextView: void setTokenizer(android.widget.MultiAutoCompleteTextView.Tokenizer)>
<android.widget.MultiAutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.MultiAutoCompleteTextView: void performFiltering(CharSequence,int,int,int)>
<android.widget.MultiAutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.MultiAutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.MultiAutoCompleteTextView: void <init>(android.content.Context)>
<android.database.sqlite.SQLiteCursorDriver: android.database.Cursor query(android.database.sqlite.SQLiteDatabase.CursorFactory,java.lang.String[])>
<android.database.sqlite.SQLiteCursorDriver: void cursorClosed()>
<android.database.sqlite.SQLiteCursorDriver: void cursorDeactivated()>
<android.database.sqlite.SQLiteCursorDriver: void setBindArguments(java.lang.String[])>
<android.database.sqlite.SQLiteCursorDriver: void cursorRequeried(android.database.Cursor)>
<android.service.settings.suggestions.SuggestionService: void <init>()>
<android.service.settings.suggestions.SuggestionService: void onSuggestionLaunched(android.service.settings.suggestions.Suggestion)>
<android.service.settings.suggestions.SuggestionService: android.os.IBinder onBind(android.content.Intent)>
<android.service.settings.suggestions.SuggestionService: void onSuggestionDismissed(android.service.settings.suggestions.Suggestion)>
<android.service.settings.suggestions.SuggestionService: java.util.List onGetSuggestions()>
<android.net.metrics.IpConnectivityLog: boolean log(android.net.metrics.IpConnectivityLog.Event)>
<android.net.metrics.IpConnectivityLog: boolean log(android.net.Network,int[],android.net.metrics.IpConnectivityLog.Event)>
<android.net.metrics.IpConnectivityLog: boolean log(java.lang.String,android.net.metrics.IpConnectivityLog.Event)>
<android.net.metrics.IpConnectivityLog: boolean log(int,int[],android.net.metrics.IpConnectivityLog.Event)>
<android.net.metrics.IpConnectivityLog: void <init>()>
<android.net.metrics.IpConnectivityLog: boolean log(long,android.net.metrics.IpConnectivityLog.Event)>
<android.content.ContentQueryMap: void <init>(android.database.Cursor,String,boolean,android.os.Handler)>
<android.content.ContentQueryMap: android.content.ContentValues getValues(java.lang.String)>
<android.content.ContentQueryMap: void setKeepUpdated(boolean)>
<android.content.ContentQueryMap: void requery()>
<android.content.ContentQueryMap: void close()>
<android.content.ContentQueryMap: java.util.Map getRows()>
<android.animation.StateListAnimator: void <init>()>
<android.animation.StateListAnimator: void addState(int[],android.animation.Animator)>
<android.animation.StateListAnimator: void jumpToCurrentState()>
<android.animation.StateListAnimator: android.animation.StateListAnimator clone()>
<android.hardware.ConsumerIrManager: void transmit(int,int[])>
<android.hardware.ConsumerIrManager: android.hardware.ConsumerIrManager.CarrierFrequencyRange[] getCarrierFrequencies()>
<android.hardware.ConsumerIrManager: boolean hasIrEmitter()>
<android.location.GpsNavigationMessageEvent.Listener: void onStatusChanged(int)>
<android.location.GpsNavigationMessageEvent.Listener: void onGpsNavigationMessageReceived(android.location.GpsNavigationMessageEvent)>
<android.os.VibrationEffect.Waveform: int getRepeatIndex()>
<android.os.VibrationEffect.Waveform: void <init>(android.os.Parcel)>
<android.os.VibrationEffect.Waveform: void validate()>
<android.os.VibrationEffect.Waveform: int[] getAmplitudes()>
<android.os.VibrationEffect.Waveform: long[] getTimings()>
<android.os.VibrationEffect.Waveform: void writeToParcel(android.os.Parcel,int)>
<android.os.VibrationEffect.Waveform: void <init>(long[],int[],int)>
<android.os.VibrationEffect.Waveform: android.os.VibrationEffect.Waveform scale(float,int)>
<android.os.VibrationEffect.Waveform: long getDuration()>
<android.renderscript.ScriptIntrinsicBlend: void forEachMultiply(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSubtract(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachAdd(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDSrcIn()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDSubtract()>
<android.renderscript.ScriptIntrinsicBlend: void forEachClear(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrc(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcOut(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcOver(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDst(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDstAtop(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDDstIn()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.ScriptIntrinsicBlend create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDstIn(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcOver(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcAtop(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDstOut(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachXor(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDstAtop(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachClear(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSubtract(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDstOver(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachAdd(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcOut(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDClear()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDDstOver()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDAdd()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDMultiply()>
<android.renderscript.ScriptIntrinsicBlend: void forEachDst(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrc(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDSrcOver()>
<android.renderscript.ScriptIntrinsicBlend: void forEachDstOut(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDstOver(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDstIn(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcAtop(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDDstAtop()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDXor()>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcIn(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDDstOut()>
<android.renderscript.ScriptIntrinsicBlend: void forEachMultiply(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDSrc()>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcIn(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDDst()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDSrcAtop()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script.KernelID getKernelIDSrcOut()>
<android.renderscript.ScriptIntrinsicBlend: void forEachXor(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.net.wifi.WifiConfiguration: android.net.ProxyInfo getHttpProxy()>
<android.net.wifi.WifiConfiguration: int describeContents()>
<android.net.wifi.WifiConfiguration: android.net.MacAddress getRandomizedMacAddress()>
<android.net.wifi.WifiConfiguration: boolean hasNoInternetAccess()>
<android.net.wifi.WifiConfiguration: boolean isNoInternetAccessExpected()>
<android.net.wifi.WifiConfiguration: void setHttpProxy(android.net.ProxyInfo)>
<android.net.wifi.WifiConfiguration: void <init>()>
<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiConfiguration: boolean isEphemeral()>
<android.net.wifi.WifiConfiguration: boolean isPasspoint()>
<android.icu.util.RangeValueIterator: boolean next(android.icu.util.RangeValueIterator.Element)>
<android.icu.util.RangeValueIterator: void reset()>
<java.security.AlgorithmParameterGeneratorSpi: void <init>()>
<java.security.AlgorithmParameterGeneratorSpi: void engineInit(int,java.security.SecureRandom)>
<java.security.AlgorithmParameterGeneratorSpi: void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<java.security.AlgorithmParameterGeneratorSpi: java.security.AlgorithmParameters engineGenerateParameters()>
<java.util.Spliterators.AbstractDoubleSpliterator: void <init>(long,int)>
<java.util.Spliterators.AbstractDoubleSpliterator: java.util.Spliterator.OfDouble trySplit()>
<java.util.Spliterators.AbstractDoubleSpliterator: int characteristics()>
<java.util.Spliterators.AbstractDoubleSpliterator: long estimateSize()>
<javax.security.auth.DestroyFailedException: void <init>(String)>
<javax.security.auth.DestroyFailedException: void <init>()>
<java.util.concurrent.CancellationException: void <init>(String)>
<java.util.concurrent.CancellationException: void <init>()>
<android.graphics.drawable.NinePatchDrawable: void <init>(android.content.res.Resources,android.graphics.NinePatch)>
<android.graphics.drawable.NinePatchDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.NinePatchDrawable: void setTargetDensity(int)>
<android.graphics.drawable.NinePatchDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap,byte[],android.graphics.Rect,String)>
<android.graphics.drawable.NinePatchDrawable: void <init>(android.graphics.NinePatch)>
<android.graphics.drawable.NinePatchDrawable: android.graphics.Paint getPaint()>
<android.graphics.drawable.NinePatchDrawable: void setDither(boolean)>
<android.graphics.drawable.NinePatchDrawable: int getOpacity()>
<android.graphics.drawable.NinePatchDrawable: void setTargetDensity(android.graphics.Canvas)>
<android.graphics.drawable.NinePatchDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.NinePatchDrawable: void setAlpha(int)>
<android.graphics.drawable.NinePatchDrawable: void setTargetDensity(android.util.DisplayMetrics)>
<android.graphics.drawable.NinePatchDrawable: void <init>(android.graphics.Bitmap,byte[],android.graphics.Rect,String)>
<android.app.ActivityGroup: void <init>()>
<android.app.ActivityGroup: void <init>(boolean)>
<android.app.ActivityGroup: android.app.LocalActivityManager getLocalActivityManager()>
<android.app.ActivityGroup: android.app.Activity getCurrentActivity()>
<android.media.audiofx.DynamicsProcessing.Stage: void setEnabled(boolean)>
<android.media.audiofx.DynamicsProcessing.Stage: void <init>(boolean,boolean)>
<android.media.audiofx.DynamicsProcessing.Stage: boolean isEnabled()>
<android.media.audiofx.DynamicsProcessing.Stage: boolean isInUse()>
<android.graphics.Region: android.graphics.Path getBoundaryPath()>
<android.graphics.Region: android.graphics.Rect getBounds()>
<android.graphics.Region: boolean quickReject(int,int,int,int)>
<android.graphics.Region: void translate(int,int,android.graphics.Region)>
<android.graphics.Region: boolean quickContains(int,int,int,int)>
<android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)>
<android.graphics.Region: boolean set(android.graphics.Region)>
<android.graphics.Region: boolean union(android.graphics.Rect)>
<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region.Op)>
<android.graphics.Region: void <init>(android.graphics.Rect)>
<android.graphics.Region: void translate(int,int)>
<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region.Op)>
<android.graphics.Region: void <init>()>
<android.graphics.Region: boolean getBounds(android.graphics.Rect)>
<android.graphics.Region: void setEmpty()>
<android.graphics.Region: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Region: boolean isRect()>
<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region.Op)>
<android.graphics.Region: void <init>(android.graphics.Region)>
<android.graphics.Region: boolean contains(int,int)>
<android.graphics.Region: boolean quickContains(android.graphics.Rect)>
<android.graphics.Region: boolean set(android.graphics.Rect)>
<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region.Op)>
<android.graphics.Region: int describeContents()>
<android.graphics.Region: boolean set(int,int,int,int)>
<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region.Op)>
<android.graphics.Region: boolean isEmpty()>
<android.graphics.Region: boolean isComplex()>
<android.graphics.Region: boolean quickReject(android.graphics.Region)>
<android.graphics.Region: void <init>(int,int,int,int)>
<android.graphics.Region: boolean getBoundaryPath(android.graphics.Path)>
<android.graphics.Region: boolean quickReject(android.graphics.Rect)>
<android.provider.Telephony.Threads: long getOrCreateThreadId(android.content.Context,java.util.Set)>
<android.provider.Telephony.Threads: long getOrCreateThreadId(android.content.Context,java.lang.String)>
<java.lang.Exception: void <init>()>
<java.lang.Exception: void <init>(String)>
<java.lang.Exception: void <init>(Throwable)>
<java.lang.Exception: void <init>(String,Throwable)>
<java.lang.Exception: void <init>(String,Throwable,boolean,boolean)>
<android.nfc.cardemulation.OffHostApduService: void <init>()>
<android.graphics.drawable.ShapeDrawable.ShaderFactory: void <init>()>
<android.graphics.drawable.ShapeDrawable.ShaderFactory: android.graphics.Shader resize(int,int)>
<java.sql.RowId: int hashCode()>
<java.sql.RowId: java.lang.String toString()>
<java.sql.RowId: boolean equals(java.lang.Object)>
<java.sql.RowId: byte[] getBytes()>
<java.security.InvalidKeyException: void <init>(String)>
<java.security.InvalidKeyException: void <init>(String,Throwable)>
<java.security.InvalidKeyException: void <init>()>
<java.security.InvalidKeyException: void <init>(Throwable)>
<android.text.style.TtsSpan.TextBuilder: android.text.style.TtsSpan.TextBuilder setText(java.lang.String)>
<android.text.style.TtsSpan.TextBuilder: void <init>(String)>
<android.text.style.TtsSpan.TextBuilder: void <init>()>
<java.security.AccessController: T doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction)>
<java.security.AccessController: T doPrivileged(java.security.PrivilegedExceptionAction)>
<java.security.AccessController: java.security.AccessControlContext getContext()>
<java.security.AccessController: T doPrivileged(java.security.PrivilegedAction)>
<java.security.AccessController: T doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>
<java.security.AccessController: void checkPermission(java.security.Permission)>
<java.security.AccessController: T doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>
<java.security.AccessController: T doPrivilegedWithCombiner(java.security.PrivilegedAction)>
<java.util.logging.MemoryHandler: void push()>
<java.util.logging.MemoryHandler: void <init>(java.util.logging.Handler,int,java.util.logging.Level)>
<java.util.logging.MemoryHandler: void setPushLevel(java.util.logging.Level)>
<java.util.logging.MemoryHandler: void close()>
<java.util.logging.MemoryHandler: void <init>()>
<java.util.logging.MemoryHandler: void flush()>
<java.util.logging.MemoryHandler: java.util.logging.Level getPushLevel()>
<java.util.logging.MemoryHandler: void publish(java.util.logging.LogRecord)>
<java.lang.reflect.AnnotatedElement: T getAnnotation(java.lang.Class)>
<java.lang.reflect.AnnotatedElement: T[] getDeclaredAnnotationsByType(java.lang.Class)>
<java.lang.reflect.AnnotatedElement: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.reflect.AnnotatedElement: boolean isAnnotationPresent(java.lang.Class)>
<java.lang.reflect.AnnotatedElement: T getDeclaredAnnotation(java.lang.Class)>
<java.lang.reflect.AnnotatedElement: java.lang.annotation.Annotation[] getAnnotations()>
<java.lang.reflect.AnnotatedElement: T[] getAnnotationsByType(java.lang.Class)>
<android.provider.CalendarContract.Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
<java.nio.file.attribute.FileOwnerAttributeView extends java.nio.file.attribute.FileAttributeView: void setOwner(java.nio.file.attribute.UserPrincipal)>
<java.nio.file.attribute.FileOwnerAttributeView extends java.nio.file.attribute.FileAttributeView: java.nio.file.attribute.UserPrincipal getOwner()>
<java.security.spec.PSSParameterSpec: java.lang.String getMGFAlgorithm()>
<java.security.spec.PSSParameterSpec: void <init>(int)>
<java.security.spec.PSSParameterSpec: java.lang.String getDigestAlgorithm()>
<java.security.spec.PSSParameterSpec: int getSaltLength()>
<java.security.spec.PSSParameterSpec: java.security.spec.AlgorithmParameterSpec getMGFParameters()>
<java.security.spec.PSSParameterSpec: int getTrailerField()>
<java.security.spec.PSSParameterSpec: void <init>(String,String,java.security.spec.AlgorithmParameterSpec,int,int)>
<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool getPool()>
<java.util.concurrent.ForkJoinWorkerThread: void onTermination(java.lang.Throwable)>
<java.util.concurrent.ForkJoinWorkerThread: int getPoolIndex()>
<java.util.concurrent.ForkJoinWorkerThread: void <init>(java.util.concurrent.ForkJoinPool)>
<java.util.concurrent.ForkJoinWorkerThread: void onStart()>
<android.media.soundtrigger.SoundTriggerDetector: boolean startRecognition(int)>
<android.media.soundtrigger.SoundTriggerDetector: boolean stopRecognition()>
<java.util.concurrent.Callable: V call()>
<android.app.Instrumentation: android.app.Application newApplication(java.lang.ClassLoader,java.lang.String,android.content.Context)>
<android.app.Instrumentation: android.content.Context getContext()>
<android.app.Instrumentation: void endPerformanceSnapshot()>
<android.app.Instrumentation: void callActivityOnNewIntent(android.app.Activity,android.content.Intent)>
<android.app.Instrumentation: boolean checkMonitorHit(android.app.Instrumentation.ActivityMonitor,int)>
<android.app.Instrumentation: void sendTrackballEventSync(android.view.MotionEvent)>
<android.app.Instrumentation: void callActivityOnPause(android.app.Activity)>
<android.app.Instrumentation: void callActivityOnDestroy(android.app.Activity)>
<android.app.Instrumentation: android.app.UiAutomation getUiAutomation(int)>
<android.app.Instrumentation: void stopProfiling()>
<android.app.Instrumentation: void finish(int,android.os.Bundle)>
<android.app.Instrumentation: void sendStringSync(java.lang.String)>
<android.app.Instrumentation: void setAutomaticPerformanceSnapshots()>
<android.app.Instrumentation: android.content.Context getTargetContext()>
<android.app.Instrumentation: void startAllocCounting()>
<android.app.Instrumentation: boolean isProfiling()>
<android.app.Instrumentation: android.os.TestLooperManager acquireLooperManager(android.os.Looper)>
<android.app.Instrumentation: void callActivityOnCreate(android.app.Activity,android.os.Bundle,android.os.PersistableBundle)>
<android.app.Instrumentation: void sendCharacterSync(int)>
<android.app.Instrumentation: void callActivityOnPostCreate(android.app.Activity,android.os.Bundle,android.os.PersistableBundle)>
<android.app.Instrumentation: void setInTouchMode(boolean)>
<android.app.Instrumentation: void addMonitor(android.app.Instrumentation.ActivityMonitor)>
<android.app.Instrumentation: android.app.UiAutomation getUiAutomation()>
<android.app.Instrumentation: android.app.Activity waitForMonitor(android.app.Instrumentation.ActivityMonitor)>
<android.app.Instrumentation: void onDestroy()>
<android.app.Instrumentation: void onCreate(android.os.Bundle)>
<android.app.Instrumentation: boolean onException(java.lang.Object,java.lang.Throwable)>
<android.app.Instrumentation: void start()>
<android.app.Instrumentation: void sendStatus(int,android.os.Bundle)>
<android.app.Instrumentation: android.app.Activity newActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)>
<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent,android.os.Bundle)>
<android.app.Instrumentation: void callActivityOnRestoreInstanceState(android.app.Activity,android.os.Bundle,android.os.PersistableBundle)>
<android.app.Instrumentation: boolean invokeContextMenuAction(android.app.Activity,int,int)>
<android.app.Instrumentation: void callActivityOnCreate(android.app.Activity,android.os.Bundle)>
<android.app.Instrumentation: void callActivityOnRestart(android.app.Activity)>
<android.app.Instrumentation: android.app.Application newApplication(java.lang.Class,android.content.Context)>
<android.app.Instrumentation: void startProfiling()>
<android.app.Instrumentation: void stopAllocCounting()>
<android.app.Instrumentation: void callActivityOnStart(android.app.Activity)>
<android.app.Instrumentation: android.os.Bundle getBinderCounts()>
<android.app.Instrumentation: java.lang.String getProcessName()>
<android.app.Instrumentation: void waitForIdle(Runnable)>
<android.app.Instrumentation: void startPerformanceSnapshot()>
<android.app.Instrumentation: void sendKeySync(android.view.KeyEvent)>
<android.app.Instrumentation: android.content.ComponentName getComponentName()>
<android.app.Instrumentation: void callActivityOnStop(android.app.Activity)>
<android.app.Instrumentation: android.app.Instrumentation.ActivityMonitor addMonitor(java.lang.String,android.app.Instrumentation.ActivityResult,boolean)>
<android.app.Instrumentation: android.app.Activity waitForMonitorWithTimeout(android.app.Instrumentation.ActivityMonitor,long)>
<android.app.Instrumentation: void callApplicationOnCreate(android.app.Application)>
<android.app.Instrumentation: void removeMonitor(android.app.Instrumentation.ActivityMonitor)>
<android.app.Instrumentation: void waitForIdleSync()>
<android.app.Instrumentation: void callActivityOnResume(android.app.Activity)>
<android.app.Instrumentation: android.os.Bundle getAllocCounts()>
<android.app.Instrumentation: void <init>()>
<android.app.Instrumentation: void callActivityOnPostCreate(android.app.Activity,android.os.Bundle)>
<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>
<android.app.Instrumentation: android.app.Activity newActivity(java.lang.Class,android.content.Context,android.os.IBinder,android.app.Application,android.content.Intent,android.content.pm.ActivityInfo,CharSequence,android.app.Activity,java.lang.String,java.lang.Object)>
<android.app.Instrumentation: void addResults(android.os.Bundle)>
<android.app.Instrumentation: void callActivityOnSaveInstanceState(android.app.Activity,android.os.Bundle,android.os.PersistableBundle)>
<android.app.Instrumentation: void sendKeyDownUpSync(int)>
<android.app.Instrumentation: void callActivityOnRestoreInstanceState(android.app.Activity,android.os.Bundle)>
<android.app.Instrumentation: void callActivityOnSaveInstanceState(android.app.Activity,android.os.Bundle)>
<android.app.Instrumentation: void callActivityOnUserLeaving(android.app.Activity)>
<android.app.Instrumentation: void runOnMainSync(Runnable)>
<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent)>
<android.app.Instrumentation: android.app.Instrumentation.ActivityMonitor addMonitor(android.content.IntentFilter,android.app.Instrumentation.ActivityResult,boolean)>
<android.app.Instrumentation: boolean invokeMenuActionSync(android.app.Activity,int,int)>
<android.app.Instrumentation: void onStart()>
<java.security.InvalidAlgorithmParameterException: void <init>(Throwable)>
<java.security.InvalidAlgorithmParameterException: void <init>(String,Throwable)>
<java.security.InvalidAlgorithmParameterException: void <init>()>
<java.security.InvalidAlgorithmParameterException: void <init>(String)>
<java.util.ArrayList: void <init>(java.util.Collection)>
<java.util.ArrayList: void trimToSize()>
<java.util.ArrayList: void <init>(int)>
<java.util.ArrayList: E get(int)>
<java.util.ArrayList: void <init>()>
<java.util.ArrayList: java.lang.Object clone()>
<java.util.ArrayList: void ensureCapacity(int)>
<java.util.ArrayList: int size()>
<java.util.ArrayList: void forEach(java.util.function.Consumer)>
<java.lang.IllegalMonitorStateException: void <init>(String)>
<java.lang.IllegalMonitorStateException: void <init>()>
<java.security.spec.ECGenParameterSpec: void <init>(String)>
<java.security.spec.ECGenParameterSpec: java.lang.String getName()>
<android.view.animation.AccelerateInterpolator: float getInterpolation(float)>
<android.view.animation.AccelerateInterpolator: void <init>(float)>
<android.view.animation.AccelerateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AccelerateInterpolator: void <init>()>
<android.R.transition: void <init>()>
<android.accounts.AuthenticatorDescription: void writeToParcel(android.os.Parcel,int)>
<android.accounts.AuthenticatorDescription: android.accounts.AuthenticatorDescription newKey(java.lang.String)>
<android.accounts.AuthenticatorDescription: void <init>(String,String,int,int,int,int)>
<android.accounts.AuthenticatorDescription: int describeContents()>
<android.accounts.AuthenticatorDescription: void <init>(String,String,int,int,int,int,boolean)>
<android.app.admin.ConnectEvent: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.ConnectEvent: java.net.InetAddress getInetAddress()>
<android.app.admin.ConnectEvent: int getPort()>
<android.webkit.WebViewFragment: void <init>()>
<android.webkit.WebViewFragment: android.webkit.WebView getWebView()>
<android.widget.TwoLineListItem: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TwoLineListItem: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.TwoLineListItem: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.TwoLineListItem: android.widget.TextView getText2()>
<android.widget.TwoLineListItem: void <init>(android.content.Context)>
<android.widget.TwoLineListItem: android.widget.TextView getText1()>
<java.util.PrimitiveIterator.OfDouble extends java.util.PrimitiveIterator: java.lang.Double next()>
<java.util.PrimitiveIterator.OfDouble extends java.util.PrimitiveIterator: double nextDouble()>
<java.util.PrimitiveIterator.OfDouble extends java.util.PrimitiveIterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.PrimitiveIterator.OfDouble extends java.util.PrimitiveIterator: void forEachRemaining(java.util.function.DoubleConsumer)>
<java.util.TooManyListenersException: void <init>()>
<java.util.TooManyListenersException: void <init>(String)>
<android.media.audiofx.DynamicsProcessing.Mbc: void <init>(boolean,boolean,int)>
<android.media.audiofx.DynamicsProcessing.Mbc: void <init>(android.media.audiofx.DynamicsProcessing.Mbc)>
<android.media.audiofx.DynamicsProcessing.Mbc: void setBand(int,android.media.audiofx.DynamicsProcessing.MbcBand)>
<android.media.audiofx.DynamicsProcessing.Mbc: android.media.audiofx.DynamicsProcessing.MbcBand getBand(int)>
<android.net.wifi.aware.PublishConfig: int describeContents()>
<android.net.wifi.aware.PublishConfig: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ShortcutManager: boolean updateShortcuts(java.util.List)>
<android.content.pm.ShortcutManager: java.util.List getManifestShortcuts()>
<android.content.pm.ShortcutManager: void removeAllDynamicShortcuts()>
<android.content.pm.ShortcutManager: void <init>(android.content.Context)>
<android.content.pm.ShortcutManager: boolean setDynamicShortcuts(java.util.List)>
<android.content.pm.ShortcutManager: int getIconMaxHeight()>
<android.content.pm.ShortcutManager: int getMaxShortcutCountPerActivity()>
<android.content.pm.ShortcutManager: boolean requestPinShortcut(android.content.pm.ShortcutInfo,android.content.IntentSender)>
<android.content.pm.ShortcutManager: boolean addDynamicShortcuts(java.util.List)>
<android.content.pm.ShortcutManager: void enableShortcuts(java.util.List)>
<android.content.pm.ShortcutManager: android.content.Intent createShortcutResultIntent(android.content.pm.ShortcutInfo)>
<android.content.pm.ShortcutManager: java.util.List getDynamicShortcuts()>
<android.content.pm.ShortcutManager: void removeDynamicShortcuts(java.util.List)>
<android.content.pm.ShortcutManager: int getIconMaxWidth()>
<android.content.pm.ShortcutManager: java.util.List getPinnedShortcuts()>
<android.content.pm.ShortcutManager: boolean isRequestPinShortcutSupported()>
<android.content.pm.ShortcutManager: boolean hasShareTargets(java.lang.String)>
<android.content.pm.ShortcutManager: java.util.List getShareTargets(android.content.IntentFilter)>
<android.content.pm.ShortcutManager: void disableShortcuts(java.util.List)>
<android.content.pm.ShortcutManager: boolean isRateLimitingActive()>
<android.content.pm.ShortcutManager: void disableShortcuts(java.util.List,CharSequence)>
<android.content.pm.ShortcutManager: void reportShortcutUsed(java.lang.String)>
<java.security.cert.CRLSelector extends java.lang.Cloneable: java.lang.Object clone()>
<java.security.cert.CRLSelector extends java.lang.Cloneable: boolean match(java.security.cert.CRL)>
<android.hardware.camera2.CaptureResult.Key: void <init>(String,Class)>
<android.hardware.camera2.CaptureResult.Key: java.lang.String getName()>
<java.util.IllformedLocaleException: int getErrorIndex()>
<java.util.IllformedLocaleException: void <init>(String,int)>
<java.util.IllformedLocaleException: void <init>()>
<java.util.IllformedLocaleException: void <init>(String)>
<android.database.DefaultDatabaseErrorHandler: void onCorruption(android.database.sqlite.SQLiteDatabase)>
<android.database.DefaultDatabaseErrorHandler: void <init>()>
<android.os.IHwBinder.DeathRecipient: void serviceDied(long)>
<android.view.ViewStructure: void setDimens(int,int,int,int,int,int)>
<android.view.ViewStructure: CharSequence getText()>
<android.view.ViewStructure: void setTextLines(int[],int[])>
<android.view.ViewStructure: CharSequence getHint()>
<android.view.ViewStructure: void setImportantForAutofill(int)>
<android.view.ViewStructure: void setText(CharSequence,int,int)>
<android.view.ViewStructure: void setText(CharSequence)>
<android.view.ViewStructure: void setMinTextEms(int)>
<android.view.ViewStructure: void setInputType(int)>
<android.view.ViewStructure: android.view.autofill.AutofillId getAutofillId()>
<android.view.ViewStructure: void setAutofillValue(android.view.autofill.AutofillValue)>
<android.view.ViewStructure: void setElevation(float)>
<android.view.ViewStructure: void setAccessibilityFocused(boolean)>
<android.view.ViewStructure: void setMaxTextLength(int)>
<android.view.ViewStructure: void setSelected(boolean)>
<android.view.ViewStructure: void setContextClickable(boolean)>
<android.view.ViewStructure: void setLocaleList(android.os.LocaleList)>
<android.view.ViewStructure: android.os.Bundle getExtras()>
<android.view.ViewStructure: void <init>()>
<android.view.ViewStructure: void setHint(CharSequence)>
<android.view.ViewStructure: void setAutofillOptions(CharSequence[])>
<android.view.ViewStructure: int getTextSelectionEnd()>
<android.view.ViewStructure: void setFocusable(boolean)>
<android.view.ViewStructure: void setAutofillType(int)>
<android.view.ViewStructure: void setTextIdEntry(java.lang.String)>
<android.view.ViewStructure: void setVisibility(int)>
<android.view.ViewStructure: boolean hasExtras()>
<android.view.ViewStructure: void setChecked(boolean)>
<android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId)>
<android.view.ViewStructure: void setCheckable(boolean)>
<android.view.ViewStructure: void setClassName(java.lang.String)>
<android.view.ViewStructure: void setWebDomain(java.lang.String)>
<android.view.ViewStructure: int getChildCount()>
<android.view.ViewStructure: void setAlpha(float)>
<android.view.ViewStructure: void setEnabled(boolean)>
<android.view.ViewStructure: void setHtmlInfo(android.view.ViewStructure.HtmlInfo)>
<android.view.ViewStructure: android.view.ViewStructure.HtmlInfo.Builder newHtmlInfoBuilder(java.lang.String)>
<android.view.ViewStructure: void setClickable(boolean)>
<android.view.ViewStructure: void setTextStyle(float,int,int,int)>
<android.view.ViewStructure: void setContentDescription(CharSequence)>
<android.view.ViewStructure: void setActivated(boolean)>
<android.view.ViewStructure: void setAutofillHints(java.lang.String[])>
<android.view.ViewStructure: void setOpaque(boolean)>
<android.view.ViewStructure: android.view.ViewStructure newChild(int)>
<android.view.ViewStructure: void asyncCommit()>
<android.view.ViewStructure: android.view.ViewStructure asyncNewChild(int)>
<android.view.ViewStructure: void setMaxTextEms(int)>
<android.view.ViewStructure: int getTextSelectionStart()>
<android.view.ViewStructure: void setFocused(boolean)>
<android.view.ViewStructure: void setChildCount(int)>
<android.view.ViewStructure: void setLongClickable(boolean)>
<android.view.ViewStructure: void setTransformation(android.graphics.Matrix)>
<android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId,int)>
<android.view.ViewStructure: void setId(int,java.lang.String,java.lang.String,java.lang.String)>
<android.view.ViewStructure: void setDataIsSensitive(boolean)>
<android.view.ViewStructure: int addChildCount(int)>
<android.app.FragmentBreadCrumbs.OnBreadCrumbClickListener: boolean onBreadCrumbClick(android.app.FragmentManager.BackStackEntry,int)>
<android.icu.util.IllformedLocaleException: void <init>(String)>
<android.icu.util.IllformedLocaleException: void <init>(String,int)>
<android.icu.util.IllformedLocaleException: int getErrorIndex()>
<android.icu.util.IllformedLocaleException: void <init>()>
<android.app.Activity.TranslucentConversionListener: void onTranslucentConversionComplete(boolean)>
<android.view.accessibility.AccessibilityWindowInfo: boolean isActive()>
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo obtain()>
<android.view.accessibility.AccessibilityWindowInfo: void setNumInstancesInUseCounter(java.util.concurrent.atomic.AtomicInteger)>
<android.view.accessibility.AccessibilityWindowInfo: int describeContents()>
<android.view.accessibility.AccessibilityWindowInfo: boolean isFocused()>
<android.view.accessibility.AccessibilityWindowInfo: void recycle()>
<android.view.accessibility.AccessibilityWindowInfo: int getChildCount()>
<android.view.accessibility.AccessibilityWindowInfo: CharSequence getTitle()>
<android.view.accessibility.AccessibilityWindowInfo: boolean isAccessibilityFocused()>
<android.view.accessibility.AccessibilityWindowInfo: boolean isInPictureInPictureMode()>
<android.view.accessibility.AccessibilityWindowInfo: int getId()>
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getChild(int)>
<android.view.accessibility.AccessibilityWindowInfo: void getBoundsInScreen(android.graphics.Rect)>
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot()>
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getParent()>
<android.view.accessibility.AccessibilityWindowInfo: int getType()>
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getAnchor()>
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo obtain(android.view.accessibility.AccessibilityWindowInfo)>
<android.view.accessibility.AccessibilityWindowInfo: int getLayer()>
<android.view.accessibility.AccessibilityWindowInfo: void writeToParcel(android.os.Parcel,int)>
<android.hardware.radio.RadioManager.FmBandDescriptor: boolean isRdsSupported()>
<android.hardware.radio.RadioManager.FmBandDescriptor: boolean isAfSupported()>
<android.hardware.radio.RadioManager.FmBandDescriptor: boolean isEaSupported()>
<android.hardware.radio.RadioManager.FmBandDescriptor: boolean isTaSupported()>
<android.hardware.radio.RadioManager.FmBandDescriptor: boolean isStereoSupported()>
<android.media.MediaExtractor.CasInfo: byte[] getPrivateData()>
<android.media.MediaExtractor.CasInfo: android.media.MediaCas.Session getSession()>
<android.media.MediaExtractor.CasInfo: int getSystemId()>
<java.nio.channels.AsynchronousServerSocketChannel: java.util.concurrent.Future accept()>
<java.nio.channels.AsynchronousServerSocketChannel: java.nio.channels.AsynchronousServerSocketChannel setOption(java.net.SocketOption,T)>
<java.nio.channels.AsynchronousServerSocketChannel: void accept(A,java.nio.channels.CompletionHandler)>
<java.nio.channels.AsynchronousServerSocketChannel: java.nio.channels.AsynchronousServerSocketChannel bind(java.net.SocketAddress,int)>
<java.nio.channels.AsynchronousServerSocketChannel: java.nio.channels.AsynchronousServerSocketChannel open(java.nio.channels.AsynchronousChannelGroup)>
<java.nio.channels.AsynchronousServerSocketChannel: java.nio.channels.AsynchronousServerSocketChannel open()>
<java.nio.channels.AsynchronousServerSocketChannel: java.nio.channels.AsynchronousServerSocketChannel bind(java.net.SocketAddress)>
<java.nio.channels.AsynchronousServerSocketChannel: void <init>(java.nio.channels.spi.AsynchronousChannelProvider)>
<java.nio.channels.AsynchronousServerSocketChannel: java.nio.channels.spi.AsynchronousChannelProvider provider()>
<android.bluetooth.le.ResultStorageDescriptor: int getLength()>
<android.bluetooth.le.ResultStorageDescriptor: int describeContents()>
<android.bluetooth.le.ResultStorageDescriptor: void writeToParcel(android.os.Parcel,int)>
<android.bluetooth.le.ResultStorageDescriptor: int getType()>
<android.bluetooth.le.ResultStorageDescriptor: int getOffset()>
<android.bluetooth.le.ResultStorageDescriptor: void <init>(int,int,int)>
<android.telephony.CellSignalStrengthCdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellSignalStrengthCdma: int getAsuLevel()>
<android.telephony.CellSignalStrengthCdma: int getCdmaEcio()>
<android.telephony.CellSignalStrengthCdma: int getCdmaDbm()>
<android.telephony.CellSignalStrengthCdma: int getCdmaLevel()>
<android.telephony.CellSignalStrengthCdma: int getDbm()>
<android.telephony.CellSignalStrengthCdma: int getEvdoSnr()>
<android.telephony.CellSignalStrengthCdma: int describeContents()>
<android.telephony.CellSignalStrengthCdma: int getEvdoDbm()>
<android.telephony.CellSignalStrengthCdma: int getEvdoLevel()>
<android.telephony.CellSignalStrengthCdma: int getLevel()>
<android.telephony.CellSignalStrengthCdma: int getEvdoEcio()>
<android.service.voice.VoiceInteractionSession: void onHandleScreenshot(android.graphics.Bitmap)>
<android.service.voice.VoiceInteractionSession: void onAssistStructureFailure(java.lang.Throwable)>
<android.service.voice.VoiceInteractionSession: void onPrepareShow(android.os.Bundle,int)>
<android.service.voice.VoiceInteractionSession: void onRequestConfirmation(android.service.voice.VoiceInteractionSession.ConfirmationRequest)>
<android.service.voice.VoiceInteractionSession: boolean onKeyDown(int,android.view.KeyEvent)>
<android.service.voice.VoiceInteractionSession: void startAssistantActivity(android.content.Intent)>
<android.service.voice.VoiceInteractionSession: void onComputeInsets(android.service.voice.VoiceInteractionSession.Insets)>
<android.service.voice.VoiceInteractionSession: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.service.voice.VoiceInteractionSession: void onShow(android.os.Bundle,int)>
<android.service.voice.VoiceInteractionSession: void onHandleAssist(android.service.voice.VoiceInteractionSession.AssistState)>
<android.service.voice.VoiceInteractionSession: void <init>(android.content.Context)>
<android.service.voice.VoiceInteractionSession: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.service.voice.VoiceInteractionSession: void onHandleAssist(android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent)>
<android.service.voice.VoiceInteractionSession: void onTrimMemory(int)>
<android.service.voice.VoiceInteractionSession: void onHide()>
<android.service.voice.VoiceInteractionSession: void setUiEnabled(boolean)>
<android.service.voice.VoiceInteractionSession: void onDirectActionsInvalidated(android.service.voice.VoiceInteractionSession.ActivityId)>
<android.service.voice.VoiceInteractionSession: void onLowMemory()>
<android.service.voice.VoiceInteractionSession: void performDirectAction(android.app.DirectAction,android.os.Bundle,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.service.voice.VoiceInteractionSession: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.service.voice.VoiceInteractionSession: void onHandleAssistSecondary(android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,int,int)>
<android.service.voice.VoiceInteractionSession: void onRequestAbortVoice(android.service.voice.VoiceInteractionSession.AbortVoiceRequest)>
<android.service.voice.VoiceInteractionSession: boolean onKeyUp(int,android.view.KeyEvent)>
<android.service.voice.VoiceInteractionSession: int getDisabledShowContext()>
<android.service.voice.VoiceInteractionSession: void setTheme(int)>
<android.service.voice.VoiceInteractionSession: void onRequestCommand(android.service.voice.VoiceInteractionSession.CommandRequest)>
<android.service.voice.VoiceInteractionSession: void onRequestCompleteVoice(android.service.voice.VoiceInteractionSession.CompleteVoiceRequest)>
<android.service.voice.VoiceInteractionSession: void onDestroy()>
<android.service.voice.VoiceInteractionSession: void setDisabledShowContext(int)>
<android.service.voice.VoiceInteractionSession: void onTaskFinished(android.content.Intent,int)>
<android.service.voice.VoiceInteractionSession: void onLockscreenShown()>
<android.service.voice.VoiceInteractionSession: void show(android.os.Bundle,int)>
<android.service.voice.VoiceInteractionSession: void onCreate()>
<android.service.voice.VoiceInteractionSession: void startVoiceActivity(android.content.Intent)>
<android.service.voice.VoiceInteractionSession: void setContentView(android.view.View)>
<android.service.voice.VoiceInteractionSession: android.content.Context getContext()>
<android.service.voice.VoiceInteractionSession: android.app.Dialog getWindow()>
<android.service.voice.VoiceInteractionSession: int getUserDisabledShowContext()>
<android.service.voice.VoiceInteractionSession: void hide()>
<android.service.voice.VoiceInteractionSession: void onRequestPickOption(android.service.voice.VoiceInteractionSession.PickOptionRequest)>
<android.service.voice.VoiceInteractionSession: void onConfigurationChanged(android.content.res.Configuration)>
<android.service.voice.VoiceInteractionSession: void onTaskStarted(android.content.Intent,int)>
<android.service.voice.VoiceInteractionSession: void onBackPressed()>
<android.service.voice.VoiceInteractionSession: void finish()>
<android.service.voice.VoiceInteractionSession: boolean[] onGetSupportedCommands(java.lang.String[])>
<android.service.voice.VoiceInteractionSession: void requestDirectActions(android.service.voice.VoiceInteractionSession.ActivityId,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.service.voice.VoiceInteractionSession: android.view.LayoutInflater getLayoutInflater()>
<android.service.voice.VoiceInteractionSession: void onCloseSystemDialogs()>
<android.service.voice.VoiceInteractionSession: android.view.View onCreateContentView()>
<android.service.voice.VoiceInteractionSession: void <init>(android.content.Context,android.os.Handler)>
<android.service.voice.VoiceInteractionSession: void closeSystemDialogs()>
<android.service.voice.VoiceInteractionSession: void onCancelRequest(android.service.voice.VoiceInteractionSession.Request)>
<android.service.voice.VoiceInteractionSession: void setKeepAwake(boolean)>
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.security.Provider)>
<javax.crypto.KeyGenerator: void init(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<javax.crypto.KeyGenerator: void <init>(javax.crypto.KeyGeneratorSpi,java.security.Provider,String)>
<javax.crypto.KeyGenerator: void init(java.security.SecureRandom)>
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>
<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>
<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>
<javax.crypto.KeyGenerator: java.security.Provider getProvider()>
<javax.crypto.KeyGenerator: void init(int)>
<javax.crypto.KeyGenerator: java.lang.String getAlgorithm()>
<javax.crypto.KeyGenerator: void init(java.security.spec.AlgorithmParameterSpec)>
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>
<android.icu.text.StringSearch: void <init>(String,java.text.CharacterIterator,java.util.Locale)>
<android.icu.text.StringSearch: java.lang.String getPattern()>
<android.icu.text.StringSearch: int getIndex()>
<android.icu.text.StringSearch: void setCanonical(boolean)>
<android.icu.text.StringSearch: void setCollator(android.icu.text.RuleBasedCollator)>
<android.icu.text.StringSearch: void setPattern(java.lang.String)>
<android.icu.text.StringSearch: boolean isCanonical()>
<android.icu.text.StringSearch: int handleNext(int)>
<android.icu.text.StringSearch: android.icu.text.RuleBasedCollator getCollator()>
<android.icu.text.StringSearch: void <init>(String,java.text.CharacterIterator,android.icu.text.RuleBasedCollator,android.icu.text.BreakIterator)>
<android.icu.text.StringSearch: void <init>(String,String)>
<android.icu.text.StringSearch: int handlePrevious(int)>
<android.icu.text.StringSearch: void <init>(String,java.text.CharacterIterator,android.icu.util.ULocale)>
<android.icu.text.StringSearch: void <init>(String,java.text.CharacterIterator,android.icu.text.RuleBasedCollator)>
<android.view.View.OnDragListener: boolean onDrag(android.view.View,android.view.DragEvent)>
<java.util.IllegalFormatPrecisionException: void <init>(int)>
<java.util.IllegalFormatPrecisionException: int getPrecision()>
<javax.xml.datatype.Duration: javax.xml.namespace.QName getXMLSchemaType()>
<javax.xml.datatype.Duration: int hashCode()>
<javax.xml.datatype.Duration: int getHours()>
<javax.xml.datatype.Duration: void addTo(java.util.Calendar)>
<javax.xml.datatype.Duration: void <init>()>
<javax.xml.datatype.Duration: int getSeconds()>
<javax.xml.datatype.Duration: javax.xml.datatype.Duration negate()>
<javax.xml.datatype.Duration: int getYears()>
<javax.xml.datatype.Duration: javax.xml.datatype.Duration multiply(java.math.BigDecimal)>
<javax.xml.datatype.Duration: int getMonths()>
<javax.xml.datatype.Duration: int getDays()>
<javax.xml.datatype.Duration: int getSign()>
<javax.xml.datatype.Duration: long getTimeInMillis(java.util.Calendar)>
<javax.xml.datatype.Duration: java.lang.Number getField(javax.xml.datatype.DatatypeConstants.Field)>
<javax.xml.datatype.Duration: javax.xml.datatype.Duration normalizeWith(java.util.Calendar)>
<javax.xml.datatype.Duration: javax.xml.datatype.Duration add(javax.xml.datatype.Duration)>
<javax.xml.datatype.Duration: int compare(javax.xml.datatype.Duration)>
<javax.xml.datatype.Duration: long getTimeInMillis(java.util.Date)>
<javax.xml.datatype.Duration: void addTo(java.util.Date)>
<javax.xml.datatype.Duration: boolean isLongerThan(javax.xml.datatype.Duration)>
<javax.xml.datatype.Duration: javax.xml.datatype.Duration multiply(int)>
<javax.xml.datatype.Duration: int getMinutes()>
<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants.Field)>
<javax.xml.datatype.Duration: javax.xml.datatype.Duration subtract(javax.xml.datatype.Duration)>
<javax.xml.datatype.Duration: boolean isShorterThan(javax.xml.datatype.Duration)>
<android.telephony.ims.stub.ImsConfigImplBase: void <init>()>
<android.telephony.ims.stub.ImsConfigImplBase: int getConfigInt(int)>
<android.telephony.ims.stub.ImsConfigImplBase: java.lang.String getConfigString(int)>
<android.telephony.ims.stub.ImsConfigImplBase: int setConfig(int,int)>
<android.telephony.ims.stub.ImsConfigImplBase: void notifyProvisionedValueChanged(int,int)>
<android.telephony.ims.stub.ImsConfigImplBase: void notifyProvisionedValueChanged(int,java.lang.String)>
<android.telephony.ims.stub.ImsConfigImplBase: int setConfig(int,java.lang.String)>
<android.media.MediaSession2.SessionCallback: void onDisconnected(android.media.MediaSession2,android.media.MediaSession2.ControllerInfo)>
<android.media.MediaSession2.SessionCallback: android.media.Session2CommandGroup onConnect(android.media.MediaSession2,android.media.MediaSession2.ControllerInfo)>
<android.media.MediaSession2.SessionCallback: android.media.Session2Command.Result onSessionCommand(android.media.MediaSession2,android.media.MediaSession2.ControllerInfo,android.media.Session2Command,android.os.Bundle)>
<android.media.MediaSession2.SessionCallback: void <init>()>
<android.media.MediaSession2.SessionCallback: void onCommandResult(android.media.MediaSession2,android.media.MediaSession2.ControllerInfo,java.lang.Object,android.media.Session2Command,android.media.Session2Command.Result)>
<android.media.MediaSession2.SessionCallback: void onPostConnect(android.media.MediaSession2,android.media.MediaSession2.ControllerInfo)>
<android.os.IBinder.DeathRecipient: void binderDied()>
<java.lang.invoke.MethodHandleInfo: java.lang.invoke.MethodType getMethodType()>
<java.lang.invoke.MethodHandleInfo: boolean refKindIsValid(int)>
<java.lang.invoke.MethodHandleInfo: java.lang.String toString(int,java.lang.Class,java.lang.String,java.lang.invoke.MethodType)>
<java.lang.invoke.MethodHandleInfo: java.lang.String getName()>
<java.lang.invoke.MethodHandleInfo: T reflectAs(java.lang.Class,java.lang.invoke.MethodHandles.Lookup)>
<java.lang.invoke.MethodHandleInfo: boolean isVarArgs()>
<java.lang.invoke.MethodHandleInfo: boolean refKindIsField(int)>
<java.lang.invoke.MethodHandleInfo: java.lang.Class getDeclaringClass()>
<java.lang.invoke.MethodHandleInfo: int getModifiers()>
<java.lang.invoke.MethodHandleInfo: int getReferenceKind()>
<java.lang.invoke.MethodHandleInfo: java.lang.String refKindName(int)>
<java.lang.invoke.MethodHandleInfo: java.lang.String referenceKindToString(int)>
<javax.microedition.khronos.opengles.GL10Ext extends javax.microedition.khronos.opengles.GL: int glQueryMatrixxOES(java.nio.IntBuffer,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10Ext extends javax.microedition.khronos.opengles.GL: int glQueryMatrixxOES(int[],int,int[],int)>
<android.telephony.mbms.StreamingService: void close()>
<android.telephony.mbms.StreamingService: android.net.Uri getPlaybackUri()>
<android.telephony.mbms.StreamingService: android.telephony.mbms.StreamingServiceInfo getInfo()>
<android.telephony.SubscriptionPlan: int describeContents()>
<android.telephony.SubscriptionPlan: CharSequence getSummary()>
<android.telephony.SubscriptionPlan: java.util.Iterator cycleIterator()>
<android.telephony.SubscriptionPlan: long getDataLimitBytes()>
<android.telephony.SubscriptionPlan: long getDataUsageBytes()>
<android.telephony.SubscriptionPlan: int getDataLimitBehavior()>
<android.telephony.SubscriptionPlan: void writeToParcel(android.os.Parcel,int)>
<android.telephony.SubscriptionPlan: CharSequence getTitle()>
<android.telephony.SubscriptionPlan: long getDataUsageTime()>
<android.view.animation.Animation: void scaleCurrentDuration(float)>
<android.view.animation.Animation: void setFillBefore(boolean)>
<android.view.animation.Animation: void setDetachWallpaper(boolean)>
<android.view.animation.Animation: long computeDurationHint()>
<android.view.animation.Animation: void setInterpolator(android.content.Context,@AnimRes@InterpolatorResint)>
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)>
<android.view.animation.Animation: void setBackgroundColor(@ColorIntint)>
<android.view.animation.Animation: void ensureInterpolator()>
<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>
<android.view.animation.Animation: boolean willChangeBounds()>
<android.view.animation.Animation: void reset()>
<android.view.animation.Animation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.Animation: boolean getFillBefore()>
<android.view.animation.Animation: long getStartTime()>
<android.view.animation.Animation: void applyTransformation(float,android.view.animation.Transformation)>
<android.view.animation.Animation: int getRepeatCount()>
<android.view.animation.Animation: boolean getFillAfter()>
<android.view.animation.Animation: void cancel()>
<android.view.animation.Animation: float getScaleFactor()>
<android.view.animation.Animation: long getStartOffset()>
<android.view.animation.Animation: void setZAdjustment(int)>
<android.view.animation.Animation: int getRepeatMode()>
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation)>
<android.view.animation.Animation: void initialize(int,int,int,int)>
<android.view.animation.Animation: void setFillEnabled(boolean)>
<android.view.animation.Animation: void setRepeatCount(int)>
<android.view.animation.Animation: boolean getDetachWallpaper()>
<android.view.animation.Animation: void setFillAfter(boolean)>
<android.view.animation.Animation: boolean isInitialized()>
<android.view.animation.Animation: void restrictDuration(long)>
<android.view.animation.Animation: void setStartOffset(long)>
<android.view.animation.Animation: boolean hasEnded()>
<android.view.animation.Animation: void setStartTime(long)>
<android.view.animation.Animation: void setDuration(long)>
<android.view.animation.Animation: void setRepeatMode(int)>
<android.view.animation.Animation: void start()>
<android.view.animation.Animation: android.view.animation.Animation clone()>
<android.view.animation.Animation: long getDuration()>
<android.view.animation.Animation: int getZAdjustment()>
<android.view.animation.Animation: boolean willChangeTransformationMatrix()>
<android.view.animation.Animation: boolean isFillEnabled()>
<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation.AnimationListener)>
<android.view.animation.Animation: int getBackgroundColor()>
<android.view.animation.Animation: void startNow()>
<android.view.animation.Animation: boolean hasStarted()>
<android.view.animation.Animation: float resolveSize(int,float,int,int)>
<android.view.animation.Animation: android.view.animation.Interpolator getInterpolator()>
<android.view.animation.Animation: void <init>()>
<android.webkit.WebView: android.webkit.WebViewClient getWebViewClient()>
<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)>
<android.webkit.WebView: void requestFocusNodeHref(android.os.Message)>
<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)>
<android.webkit.WebView: void <init>(android.content.Context)>
<android.webkit.WebView: java.lang.String getTitle()>
<android.webkit.WebView: android.print.PrintDocumentAdapter createPrintDocumentAdapter()>
<android.webkit.WebView: boolean pageUp(boolean)>
<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)>
<android.webkit.WebView: void clearCache(boolean)>
<android.webkit.WebView: android.os.Looper getWebViewLooper()>
<android.webkit.WebView: void setFindListener(android.webkit.WebView.FindListener)>
<android.webkit.WebView: android.webkit.WebMessagePort[] createWebMessageChannel()>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.webkit.WebView: void clearSslPreferences()>
<android.webkit.WebView: android.webkit.WebViewRenderProcessClient getWebViewRenderProcessClient()>
<android.webkit.WebView: void reload()>
<android.webkit.WebView: void loadUrl(java.lang.String)>
<android.webkit.WebView: void onChildViewRemoved(android.view.View,android.view.View)>
<android.webkit.WebView: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebView: void clearMatches()>
<android.webkit.WebView: boolean canGoBackOrForward(int)>
<android.webkit.WebView: boolean canGoForward()>
<android.webkit.WebView: void resumeTimers()>
<android.webkit.WebView: void invokeZoomPicker()>
<android.webkit.WebView: void setWebViewRenderProcessClient(android.webkit.WebViewRenderProcessClient)>
<android.webkit.WebView: float getScale()>
<android.webkit.WebView: void onPause()>
<android.webkit.WebView: boolean canZoomIn()>
<android.webkit.WebView: void savePassword(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebView: int getProgress()>
<android.webkit.WebView: int getRendererRequestedPriority()>
<android.webkit.WebView: android.webkit.WebViewProvider getWebViewProvider()>
<android.webkit.WebView: boolean shouldDelayChildPressedState()>
<android.webkit.WebView: void clearFormData()>
<android.webkit.WebView: void clearView()>
<android.webkit.WebView: void startSafeBrowsing(android.content.Context,android.webkit.ValueCallback)>
<android.webkit.WebView: void enableSlowWholeDocumentDraw()>
<android.webkit.WebView: void pauseTimers()>
<android.webkit.WebView: void setPictureListener(android.webkit.WebView.PictureListener)>
<android.webkit.WebView: void onGlobalFocusChanged(android.view.View,android.view.View)>
<android.webkit.WebView: android.webkit.WebView.HitTestResult getHitTestResult()>
<android.webkit.WebView: android.webkit.WebChromeClient getWebChromeClient()>
<android.webkit.WebView: void documentHasImages(android.os.Message)>
<android.webkit.WebView: android.webkit.WebBackForwardList saveState(android.os.Bundle)>
<android.webkit.WebView: android.content.pm.PackageInfo getCurrentWebViewPackage()>
<android.webkit.WebView: void zoomBy(float)>
<android.webkit.WebView: android.net.http.SslCertificate getCertificate()>
<android.webkit.WebView: void setWebContentsDebuggingEnabled(boolean)>
<android.webkit.WebView: boolean getRendererPriorityWaivedWhenNotVisible()>
<android.webkit.WebView: boolean isPrivateBrowsingEnabled()>
<android.webkit.WebView: void clearClientCertPreferences(Runnable)>
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>
<android.webkit.WebView: void stopLoading()>
<android.webkit.WebView: java.lang.String findAddress(java.lang.String)>
<android.webkit.WebView: void setMapTrackballToArrowKeys(boolean)>
<android.webkit.WebView: void setDownloadListener(android.webkit.DownloadListener)>
<android.webkit.WebView: android.webkit.WebSettings getSettings()>
<android.webkit.WebView: void setInitialScale(int)>
<android.webkit.WebView: void findNext(boolean)>
<android.webkit.WebView: android.graphics.Bitmap getFavicon()>
<android.webkit.WebView: boolean zoomOut()>
<android.webkit.WebView: void onChildViewAdded(android.view.View,android.view.View)>
<android.webkit.WebView: boolean pageDown(boolean)>
<android.webkit.WebView: int getContentHeight()>
<android.webkit.WebView: java.lang.ClassLoader getWebViewClassLoader()>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)>
<android.webkit.WebView: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)>
<android.webkit.WebView: void requestImageRef(android.os.Message)>
<android.webkit.WebView: void setTextClassifier(android.view.textclassifier.TextClassifier)>
<android.webkit.WebView: int findAll(java.lang.String)>
<android.webkit.WebView: void goBack()>
<android.webkit.WebView: void removeJavascriptInterface(java.lang.String)>
<android.webkit.WebView: void postVisualStateCallback(long,android.webkit.WebView.VisualStateCallback)>
<android.webkit.WebView: boolean canGoBack()>
<android.webkit.WebView: void setRendererPriorityPolicy(int,boolean)>
<android.webkit.WebView: boolean zoomIn()>
<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebView: void goForward()>
<android.webkit.WebView: boolean overlayVerticalScrollbar()>
<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)>
<android.webkit.WebView: boolean overlayHorizontalScrollbar()>
<android.webkit.WebView: android.webkit.WebBackForwardList copyBackForwardList()>
<android.webkit.WebView: void postWebMessage(android.webkit.WebMessage,android.net.Uri)>
<android.webkit.WebView: void destroy()>
<android.webkit.WebView: android.graphics.Picture capturePicture()>
<android.webkit.WebView: void findAllAsync(java.lang.String)>
<android.webkit.WebView: void setCertificate(android.net.http.SslCertificate)>
<android.webkit.WebView: void onResume()>
<android.webkit.WebView: android.net.Uri getSafeBrowsingPrivacyPolicyUrl()>
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebView: java.lang.String getUrl()>
<android.webkit.WebView: android.webkit.WebViewRenderProcess getWebViewRenderProcess()>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.webkit.WebView: android.print.PrintDocumentAdapter createPrintDocumentAdapter(java.lang.String)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.webkit.WebView: void evaluateJavascript(java.lang.String,android.webkit.ValueCallback)>
<android.webkit.WebView: void flingScroll(int,int)>
<android.webkit.WebView: java.lang.String getOriginalUrl()>
<android.webkit.WebView: void goBackOrForward(int)>
<android.webkit.WebView: void freeMemory()>
<android.webkit.WebView: void clearHistory()>
<android.webkit.WebView: void setDataDirectorySuffix(java.lang.String)>
<android.webkit.WebView: void setNetworkAvailable(boolean)>
<android.webkit.WebView: void setWebChromeClient(android.webkit.WebChromeClient)>
<android.webkit.WebView: void setWebViewRenderProcessClient(java.util.concurrent.Executor,android.webkit.WebViewRenderProcessClient)>
<android.webkit.WebView: void disableWebView()>
<android.webkit.WebView: void saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback)>
<android.webkit.WebView: boolean showFindDialog(java.lang.String,boolean)>
<android.webkit.WebView: void setWebViewClient(android.webkit.WebViewClient)>
<android.webkit.WebView: android.view.textclassifier.TextClassifier getTextClassifier()>
<android.webkit.WebView: void setSafeBrowsingWhitelist(java.util.List,android.webkit.ValueCallback)>
<android.webkit.WebView: boolean canZoomOut()>
<android.webkit.WebView: void saveWebArchive(java.lang.String)>
<android.webkit.WebView: void setVerticalScrollbarOverlay(boolean)>
<java.text.DateFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>
<java.text.DateFormat: void <init>()>
<java.text.DateFormat: void setNumberFormat(java.text.NumberFormat)>
<java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>
<java.text.DateFormat: void setCalendar(java.util.Calendar)>
<java.text.DateFormat: java.util.Locale[] getAvailableLocales()>
<java.text.DateFormat: java.text.DateFormat getInstance()>
<java.text.DateFormat: java.lang.String format(java.util.Date)>
<java.text.DateFormat: boolean isLenient()>
<java.text.DateFormat: java.util.Calendar getCalendar()>
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>
<java.text.DateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int)>
<java.text.DateFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.DateFormat: void setLenient(boolean)>
<java.text.DateFormat: java.text.DateFormat getDateInstance(int)>
<java.text.DateFormat: java.text.DateFormat getDateInstance()>
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance()>
<java.text.DateFormat: java.util.TimeZone getTimeZone()>
<java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)>
<java.text.DateFormat: java.text.DateFormat getTimeInstance(int)>
<java.text.DateFormat: java.text.DateFormat getTimeInstance()>
<java.text.DateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.DateFormat: java.util.Date parse(java.lang.String)>
<java.text.DateFormat: java.text.NumberFormat getNumberFormat()>
<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>
<java.time.DateTimeException: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>
<java.time.DateTimeException: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>
<java.time.DateTimeException: java.time.DayOfWeek from(java.time.temporal.TemporalAccessor)>
<java.time.DateTimeException: java.time.DayOfWeek minus(long)>
<java.time.DateTimeException: int getValue()>
<java.time.DateTimeException: boolean isSupported(java.time.temporal.TemporalField)>
<java.time.DateTimeException: java.time.DayOfWeek of(int)>
<java.time.DateTimeException: void <init>(String)>
<java.time.DateTimeException: long getLong(java.time.temporal.TemporalField)>
<java.time.DateTimeException: void <init>(String,Throwable)>
<java.time.DateTimeException: java.time.DayOfWeek plus(long)>
<android.service.autofill.Dataset: int describeContents()>
<android.service.autofill.Dataset: void writeToParcel(android.os.Parcel,int)>
<android.icu.text.DateIntervalInfo.PatternInfo: boolean firstDateInPtnIsLaterDate()>
<android.icu.text.DateIntervalInfo.PatternInfo: java.lang.String getFirstPart()>
<android.icu.text.DateIntervalInfo.PatternInfo: java.lang.String getSecondPart()>
<android.icu.text.DateIntervalInfo.PatternInfo: void <init>(String,String,boolean)>
<android.telephony.VisualVoicemailSmsFilterSettings: int describeContents()>
<android.telephony.VisualVoicemailSmsFilterSettings: void writeToParcel(android.os.Parcel,int)>
<android.view.inspector.PropertyReader.PropertyTypeMismatchException: void <init>(int,String,String,String)>
<android.view.inspector.PropertyReader.PropertyTypeMismatchException: void <init>(int,String,String)>
<android.accessibilityservice.AccessibilityButtonController.AccessibilityButtonCallback: void onClicked(android.accessibilityservice.AccessibilityButtonController)>
<android.accessibilityservice.AccessibilityButtonController.AccessibilityButtonCallback: void <init>()>
<android.accessibilityservice.AccessibilityButtonController.AccessibilityButtonCallback: void onAvailabilityChanged(android.accessibilityservice.AccessibilityButtonController,boolean)>
<android.companion.BluetoothDeviceFilter.Builder: android.companion.BluetoothDeviceFilter.Builder addServiceUuid(android.os.ParcelUuid,android.os.ParcelUuid)>
<android.companion.BluetoothDeviceFilter.Builder: void <init>()>
<android.companion.BluetoothDeviceFilter.Builder: android.companion.BluetoothDeviceFilter.Builder setAddress(java.lang.String)>
<android.companion.BluetoothDeviceFilter.Builder: android.companion.BluetoothDeviceFilter build()>
<android.companion.BluetoothDeviceFilter.Builder: android.companion.BluetoothDeviceFilter.Builder setNamePattern(java.util.regex.Pattern)>
<android.icu.util.Freezable extends java.lang.Cloneable: T freeze()>
<android.icu.util.Freezable extends java.lang.Cloneable: T cloneAsThawed()>
<android.icu.util.Freezable extends java.lang.Cloneable: boolean isFrozen()>
<android.net.IpPrefix: java.net.InetAddress getAddress()>
<android.net.IpPrefix: byte[] getRawAddress()>
<android.net.IpPrefix: void writeToParcel(android.os.Parcel,int)>
<android.net.IpPrefix: void <init>(from=0,to=128) int)>
<android.net.IpPrefix: int getPrefixLength()>
<android.net.IpPrefix: void <init>(String)>
<android.net.IpPrefix: boolean contains(java.net.InetAddress)>
<android.net.IpPrefix: int describeContents()>
<android.telephony.data.DataService.DataServiceProvider: int getSlotIndex()>
<android.telephony.data.DataService.DataServiceProvider: void notifyDataCallListChanged(java.util.List)>
<android.telephony.data.DataService.DataServiceProvider: void <init>(int)>
<android.telephony.data.DataService.DataServiceProvider: void setDataProfile(java.util.List,boolean,android.telephony.data.DataServiceCallback)>
<android.telephony.data.DataService.DataServiceProvider: void close()>
<android.telephony.data.DataService.DataServiceProvider: void requestDataCallList(android.telephony.data.DataServiceCallback)>
<android.telephony.data.DataService.DataServiceProvider: void setupDataCall(int,android.telephony.data.DataProfile,boolean,boolean,int,android.net.LinkProperties,android.telephony.data.DataServiceCallback)>
<android.telephony.data.DataService.DataServiceProvider: void deactivateDataCall(int,int,android.telephony.data.DataServiceCallback)>
<android.telephony.data.DataService.DataServiceProvider: void setInitialAttachApn(android.telephony.data.DataProfile,boolean,android.telephony.data.DataServiceCallback)>
<android.text.Html.TagHandler: void handleTag(boolean,java.lang.String,android.text.Editable,org.xml.sax.XMLReader)>
<android.media.audiofx.DynamicsProcessing.BandStage: void <init>(boolean,boolean,int)>
<android.media.audiofx.DynamicsProcessing.BandStage: int getBandCount()>
<android.util.proto.ProtoParseException: void <init>(String)>
<java.nio.file.spi.FileTypeDetector: void <init>()>
<java.nio.file.spi.FileTypeDetector: java.lang.String probeContentType(java.nio.file.Path)>
<javax.net.SocketFactory: java.net.Socket createSocket()>
<javax.net.SocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>
<javax.net.SocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>
<javax.net.SocketFactory: void <init>()>
<javax.net.SocketFactory: javax.net.SocketFactory getDefault()>
<javax.net.SocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>
<javax.net.SocketFactory: java.net.Socket createSocket(java.lang.String,int)>
<android.widget.AdapterView.OnItemSelectedListener: void onNothingSelected(android.widget.AdapterView)>
<android.widget.AdapterView.OnItemSelectedListener: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate minus(java.time.temporal.TemporalAmount)>
<java.time.chrono.MinguoDate: java.time.chrono.MinguoChronology getChronology()>
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate from(java.time.temporal.TemporalAccessor)>
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate now()>
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate plus(java.time.temporal.TemporalAmount)>
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate now(java.time.Clock)>
<java.time.chrono.MinguoDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate of(int,int,int)>
<java.time.chrono.MinguoDate: int getValue()>
<java.time.chrono.MinguoDate: java.time.chrono.MinguoEra of(int)>
<java.time.chrono.MinguoDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>
<java.time.chrono.MinguoDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate now(java.time.ZoneId)>
<java.time.chrono.MinguoDate: int lengthOfMonth()>
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate with(java.time.temporal.TemporalField,long)>
<java.time.chrono.MinguoDate: long getLong(java.time.temporal.TemporalField)>
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate minus(long,java.time.temporal.TemporalUnit)>
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate with(java.time.temporal.TemporalAdjuster)>
<java.time.chrono.MinguoDate: java.time.chrono.MinguoEra getEra()>
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate plus(long,java.time.temporal.TemporalUnit)>
<android.media.audiofx.DynamicsProcessing.Channel: android.media.audiofx.DynamicsProcessing.EqBand getPreEqBand(int)>
<android.media.audiofx.DynamicsProcessing.Channel: android.media.audiofx.DynamicsProcessing.EqBand getPostEqBand(int)>
<android.media.audiofx.DynamicsProcessing.Channel: void setMbcBand(int,android.media.audiofx.DynamicsProcessing.MbcBand)>
<android.media.audiofx.DynamicsProcessing.Channel: android.media.audiofx.DynamicsProcessing.Limiter getLimiter()>
<android.media.audiofx.DynamicsProcessing.Channel: android.media.audiofx.DynamicsProcessing.Eq getPreEq()>
<android.media.audiofx.DynamicsProcessing.Channel: android.media.audiofx.DynamicsProcessing.Mbc getMbc()>
<android.media.audiofx.DynamicsProcessing.Channel: android.media.audiofx.DynamicsProcessing.MbcBand getMbcBand(int)>
<android.media.audiofx.DynamicsProcessing.Channel: void setPreEqBand(int,android.media.audiofx.DynamicsProcessing.EqBand)>
<android.media.audiofx.DynamicsProcessing.Channel: void <init>(android.media.audiofx.DynamicsProcessing.Channel)>
<android.media.audiofx.DynamicsProcessing.Channel: void <init>(float,boolean,int,boolean,int,boolean,int,boolean)>
<android.media.audiofx.DynamicsProcessing.Channel: void setLimiter(android.media.audiofx.DynamicsProcessing.Limiter)>
<android.media.audiofx.DynamicsProcessing.Channel: void setPostEqBand(int,android.media.audiofx.DynamicsProcessing.EqBand)>
<android.media.audiofx.DynamicsProcessing.Channel: void setMbc(android.media.audiofx.DynamicsProcessing.Mbc)>
<android.media.audiofx.DynamicsProcessing.Channel: void setPreEq(android.media.audiofx.DynamicsProcessing.Eq)>
<android.media.audiofx.DynamicsProcessing.Channel: android.media.audiofx.DynamicsProcessing.Eq getPostEq()>
<android.media.audiofx.DynamicsProcessing.Channel: float getInputGain()>
<android.media.audiofx.DynamicsProcessing.Channel: void setInputGain(float)>
<android.media.audiofx.DynamicsProcessing.Channel: void setPostEq(android.media.audiofx.DynamicsProcessing.Eq)>
<android.preference.PreferenceManager.OnActivityDestroyListener: void onActivityDestroy()>
<android.view.textclassifier.TextClassifierEvent.ConversationActionsEvent.Builder: android.view.textclassifier.TextClassifierEvent.ConversationActionsEvent build()>
<android.view.textclassifier.TextClassifierEvent.ConversationActionsEvent.Builder: void <init>(int)>
<org.xml.sax.SAXException: void <init>(String)>
<org.xml.sax.SAXException: void <init>(String,Exception)>
<org.xml.sax.SAXException: Exception getException()>
<org.xml.sax.SAXException: void <init>()>
<org.xml.sax.SAXException: void <init>(Exception)>
<android.net.wifi.WifiManager.WifiLock: void acquire()>
<android.net.wifi.WifiManager.WifiLock: boolean isHeld()>
<android.net.wifi.WifiManager.WifiLock: void setReferenceCounted(boolean)>
<android.net.wifi.WifiManager.WifiLock: void release()>
<android.net.wifi.WifiManager.WifiLock: void setWorkSource(android.os.WorkSource)>
<java.util.regex.Pattern: java.lang.String[] split(CharSequence,int)>
<java.util.regex.Pattern: java.util.stream.Stream splitAsStream(CharSequence)>
<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>
<java.util.regex.Pattern: java.util.regex.Matcher matcher(CharSequence)>
<java.util.regex.Pattern: int flags()>
<java.util.regex.Pattern: boolean matches(java.lang.String,CharSequence)>
<java.util.regex.Pattern: java.util.function.Predicate asPredicate()>
<java.util.regex.Pattern: java.lang.String quote(java.lang.String)>
<java.util.regex.Pattern: java.lang.String pattern()>
<java.util.regex.Pattern: java.lang.String[] split(CharSequence)>
<javax.sql.RowSetReader: void readData(javax.sql.RowSetInternal)>
<android.webkit.SafeBrowsingResponse: void backToSafety(boolean)>
<android.webkit.SafeBrowsingResponse: void showInterstitial(boolean)>
<android.webkit.SafeBrowsingResponse: void proceed(boolean)>
<android.webkit.SafeBrowsingResponse: void <init>()>
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification.Builder setIntent(android.content.Intent)>
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification.Builder addAction(android.app.RemoteAction)>
<android.view.textclassifier.TextClassification.Builder: void <init>()>
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification.Builder setIcon(android.graphics.drawable.Drawable)>
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification.Builder setId(java.lang.String)>
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification.Builder setText(java.lang.String)>
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification.Builder setEntityType(java.lang.String,float)>
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification.Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification build()>
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification.Builder setLabel(java.lang.String)>
<android.view.textclassifier.TextClassification.Builder: android.view.textclassifier.TextClassification.Builder setOnClickListener(android.view.View.OnClickListener)>
<android.widget.Adapter: int getViewTypeCount()>
<android.widget.Adapter: CharSequence[] getAutofillOptions()>
<android.widget.Adapter: int getCount()>
<android.widget.Adapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.Adapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.widget.Adapter: java.lang.Object getItem(int)>
<android.widget.Adapter: long getItemId(int)>
<android.widget.Adapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.Adapter: boolean hasStableIds()>
<android.widget.Adapter: int getItemViewType(int)>
<android.widget.Adapter: boolean isEmpty()>
<android.net.wifi.WpsInfo: void <init>(android.net.wifi.WpsInfo)>
<android.net.wifi.WpsInfo: void <init>()>
<android.net.wifi.WpsInfo: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WpsInfo: int describeContents()>
<android.net.wifi.p2p.WifiP2pManager.UpnpServiceResponseListener: void onUpnpServiceAvailable(java.util.List,android.net.wifi.p2p.WifiP2pDevice)>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getFields()>
<java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class)>
<java.io.ObjectStreamClass: java.lang.String getName()>
<java.io.ObjectStreamClass: java.io.ObjectStreamField getField(java.lang.String)>
<java.io.ObjectStreamClass: long getSerialVersionUID()>
<java.io.ObjectStreamClass: java.io.ObjectStreamClass lookupAny(java.lang.Class)>
<java.io.ObjectStreamClass: java.lang.Class forClass()>
<java.security.cert.CertPath.CertPathRep: java.lang.Object readResolve()>
<java.security.cert.CertPath.CertPathRep: void <init>(String,byte[])>
<android.bluetooth.BluetoothAdapter.OnMetadataChangedListener: void onMetadataChanged(android.bluetooth.BluetoothDevice,int,byte[])>
<android.net.metrics.ValidationProbeEvent.Builder: void <init>()>
<android.net.metrics.ValidationProbeEvent.Builder: android.net.metrics.ValidationProbeEvent build()>
<android.net.metrics.ValidationProbeEvent.Builder: android.net.metrics.ValidationProbeEvent.Builder setProbeType(int,boolean)>
<android.net.metrics.ValidationProbeEvent.Builder: android.net.metrics.ValidationProbeEvent.Builder setDurationMs(long)>
<android.net.metrics.ValidationProbeEvent.Builder: android.net.metrics.ValidationProbeEvent.Builder setReturnCode(int)>
<android.hardware.radio.ProgramList.OnCompleteListener: void onComplete()>
<org.xml.sax.XMLFilter extends org.xml.sax.XMLReader: org.xml.sax.XMLReader getParent()>
<org.xml.sax.XMLFilter extends org.xml.sax.XMLReader: void setParent(org.xml.sax.XMLReader)>
<android.icu.text.UnicodeSetSpanner: android.icu.text.UnicodeSet getUnicodeSet()>
<android.icu.text.UnicodeSetSpanner: CharSequence trim(CharSequence,android.icu.text.UnicodeSetSpanner.TrimOption)>
<android.icu.text.UnicodeSetSpanner: int countIn(CharSequence,android.icu.text.UnicodeSetSpanner.CountMethod)>
<android.icu.text.UnicodeSetSpanner: java.lang.String replaceFrom(CharSequence,CharSequence)>
<android.icu.text.UnicodeSetSpanner: java.lang.String deleteFrom(CharSequence,android.icu.text.UnicodeSet.SpanCondition)>
<android.icu.text.UnicodeSetSpanner: int countIn(CharSequence,android.icu.text.UnicodeSetSpanner.CountMethod,android.icu.text.UnicodeSet.SpanCondition)>
<android.icu.text.UnicodeSetSpanner: CharSequence trim(CharSequence)>
<android.icu.text.UnicodeSetSpanner: java.lang.String replaceFrom(CharSequence,CharSequence,android.icu.text.UnicodeSetSpanner.CountMethod,android.icu.text.UnicodeSet.SpanCondition)>
<android.icu.text.UnicodeSetSpanner: int countIn(CharSequence)>
<android.icu.text.UnicodeSetSpanner: CharSequence trim(CharSequence,android.icu.text.UnicodeSetSpanner.TrimOption,android.icu.text.UnicodeSet.SpanCondition)>
<android.icu.text.UnicodeSetSpanner: void <init>(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeSetSpanner: java.lang.String deleteFrom(CharSequence)>
<android.icu.text.UnicodeSetSpanner: java.lang.String replaceFrom(CharSequence,CharSequence,android.icu.text.UnicodeSetSpanner.CountMethod)>
<android.content.res.ObbInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.res.ObbInfo: int describeContents()>
<android.hardware.Camera.OnZoomChangeListener: void onZoomChange(int,boolean,android.hardware.Camera)>
<android.app.Instrumentation.ActivityMonitor: android.app.Activity waitForActivity()>
<android.app.Instrumentation.ActivityMonitor: void <init>(String,android.app.Instrumentation.ActivityResult,boolean)>
<android.app.Instrumentation.ActivityMonitor: void <init>()>
<android.app.Instrumentation.ActivityMonitor: int getHits()>
<android.app.Instrumentation.ActivityMonitor: android.content.IntentFilter getFilter()>
<android.app.Instrumentation.ActivityMonitor: android.app.Instrumentation.ActivityResult onStartActivity(android.content.Intent)>
<android.app.Instrumentation.ActivityMonitor: android.app.Activity waitForActivityWithTimeout(long)>
<android.app.Instrumentation.ActivityMonitor: void <init>(android.content.IntentFilter,android.app.Instrumentation.ActivityResult,boolean)>
<android.app.Instrumentation.ActivityMonitor: android.app.Instrumentation.ActivityResult getResult()>
<android.app.Instrumentation.ActivityMonitor: android.app.Activity getLastActivity()>
<android.app.Instrumentation.ActivityMonitor: boolean isBlocking()>
<android.hardware.usb.UsbInterface: java.lang.String getName()>
<android.hardware.usb.UsbInterface: int getAlternateSetting()>
<android.hardware.usb.UsbInterface: int describeContents()>
<android.hardware.usb.UsbInterface: int getInterfaceClass()>
<android.hardware.usb.UsbInterface: void writeToParcel(android.os.Parcel,int)>
<android.hardware.usb.UsbInterface: android.hardware.usb.UsbEndpoint getEndpoint(int)>
<android.hardware.usb.UsbInterface: int getInterfaceSubclass()>
<android.hardware.usb.UsbInterface: int getEndpointCount()>
<android.hardware.usb.UsbInterface: int getId()>
<android.hardware.usb.UsbInterface: int getInterfaceProtocol()>
<java.util.LongSummaryStatistics: void combine(java.util.LongSummaryStatistics)>
<java.util.LongSummaryStatistics: long getCount()>
<java.util.LongSummaryStatistics: void <init>()>
<java.util.LongSummaryStatistics: double getAverage()>
<java.util.LongSummaryStatistics: long getSum()>
<java.util.LongSummaryStatistics: void accept(int)>
<java.util.LongSummaryStatistics: void accept(long)>
<java.util.LongSummaryStatistics: long getMax()>
<java.util.LongSummaryStatistics: long getMin()>
<android.view.inspector.InspectionCompanion.UninitializedPropertyMapException: void <init>()>
<android.hardware.hdmi.HdmiRecordListener: android.hardware.hdmi.HdmiRecordSources.RecordSource onOneTouchRecordSourceRequested(int)>
<android.hardware.hdmi.HdmiRecordListener: void <init>()>
<android.hardware.hdmi.HdmiRecordListener: void onTimerRecordingResult(int,android.hardware.hdmi.HdmiRecordListener.TimerStatusData)>
<android.hardware.hdmi.HdmiRecordListener: void onOneTouchRecordResult(int,int)>
<android.hardware.hdmi.HdmiRecordListener: void onClearTimerRecordingResult(int,int)>
<android.text.style.BulletSpan: int getSpanTypeId()>
<android.text.style.BulletSpan: void <init>(int,@ColorInt int)>
<android.text.style.BulletSpan: int getLeadingMargin(boolean)>
<android.text.style.BulletSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,CharSequence,int,int,boolean,android.text.Layout)>
<android.text.style.BulletSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.BulletSpan: int getColor()>
<android.text.style.BulletSpan: void <init>(from=0) int)>
<android.text.style.BulletSpan: int describeContents()>
<android.text.style.BulletSpan: void <init>()>
<android.text.style.BulletSpan: void <init>(int)>
<android.text.style.BulletSpan: int getGapWidth()>
<android.text.style.BulletSpan: void <init>(android.os.Parcel)>
<android.text.style.BulletSpan: int getBulletRadius()>
<android.widget.ThemedSpinnerAdapter extends android.widget.SpinnerAdapter: void setDropDownViewTheme(android.content.res.Resources.Theme)>
<android.widget.ThemedSpinnerAdapter extends android.widget.SpinnerAdapter: android.content.res.Resources.Theme getDropDownViewTheme()>
<android.hardware.display.VirtualDisplay: void resize(int,int,int)>
<android.hardware.display.VirtualDisplay: android.view.Display getDisplay()>
<android.hardware.display.VirtualDisplay: android.view.Surface getSurface()>
<android.hardware.display.VirtualDisplay: void release()>
<android.hardware.display.VirtualDisplay: void setSurface(android.view.Surface)>
<android.os.TestLooperManager: void release()>
<android.os.TestLooperManager: void recycle(android.os.Message)>
<android.os.TestLooperManager: android.os.MessageQueue getMessageQueue()>
<android.os.TestLooperManager: boolean hasMessages(android.os.Handler,java.lang.Object,int)>
<android.os.TestLooperManager: boolean hasMessages(android.os.Handler,java.lang.Object,Runnable)>
<android.os.TestLooperManager: void execute(android.os.Message)>
<android.os.TestLooperManager: android.os.Message next()>
<android.icu.text.IDNA.Info: boolean hasErrors()>
<android.icu.text.IDNA.Info: java.util.Set getErrors()>
<android.icu.text.IDNA.Info: boolean isTransitionalDifferent()>
<android.icu.text.IDNA.Info: void <init>()>
<java.lang.SecurityManager: void checkAccept(java.lang.String,int)>
<java.lang.SecurityManager: int classLoaderDepth()>
<java.lang.SecurityManager: void checkAwtEventQueueAccess()>
<java.lang.SecurityManager: void checkMemberAccess(java.lang.Class,int)>
<java.lang.SecurityManager: void checkListen(int)>
<java.lang.SecurityManager: void checkPrintJobAccess()>
<java.lang.SecurityManager: void checkPermission(java.security.Permission,java.lang.Object)>
<java.lang.SecurityManager: void checkAccess(java.lang.ThreadGroup)>
<java.lang.SecurityManager: void checkConnect(java.lang.String,int,java.lang.Object)>
<java.lang.SecurityManager: java.lang.ClassLoader currentClassLoader()>
<java.lang.SecurityManager: void checkAccess(java.lang.Thread)>
<java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<java.lang.SecurityManager: boolean checkTopLevelWindow(java.lang.Object)>
<java.lang.SecurityManager: void checkCreateClassLoader()>
<java.lang.SecurityManager: boolean inClassLoader()>
<java.lang.SecurityManager: void checkRead(java.lang.String)>
<java.lang.SecurityManager: void checkSetFactory()>
<java.lang.SecurityManager: void checkLink(java.lang.String)>
<java.lang.SecurityManager: boolean getInCheck()>
<java.lang.SecurityManager: void checkPackageDefinition(java.lang.String)>
<java.lang.SecurityManager: void checkSystemClipboardAccess()>
<java.lang.SecurityManager: void checkRead(java.io.FileDescriptor)>
<java.lang.SecurityManager: void checkWrite(java.io.FileDescriptor)>
<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()>
<java.lang.SecurityManager: void <init>()>
<java.lang.SecurityManager: void checkExit(int)>
<java.lang.SecurityManager: java.lang.Object getSecurityContext()>
<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>
<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>
<java.lang.SecurityManager: int classDepth(java.lang.String)>
<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress)>
<java.lang.SecurityManager: void checkDelete(java.lang.String)>
<java.lang.SecurityManager: void checkRead(java.lang.String,java.lang.Object)>
<java.lang.SecurityManager: java.lang.Class currentLoadedClass()>
<java.lang.SecurityManager: void checkSecurityAccess(java.lang.String)>
<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress,byte)>
<java.lang.SecurityManager: void checkPropertiesAccess()>
<java.lang.SecurityManager: java.lang.Class[] getClassContext()>
<java.lang.SecurityManager: boolean inClass(java.lang.String)>
<java.lang.SecurityManager: void checkExec(java.lang.String)>
<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<java.lang.SecurityManager: void checkWrite(java.lang.String)>
<android.widget.Spinner: int getDropDownHorizontalOffset()>
<android.widget.Spinner: void setPopupBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.Spinner: void setPromptId(int)>
<android.widget.Spinner: void setDropDownHorizontalOffset(int)>
<android.widget.Spinner: boolean isPopupShowing()>
<android.widget.Spinner: void setPopupBackgroundResource(@DrawableResint)>
<android.widget.Spinner: int getDropDownWidth()>
<android.widget.Spinner: android.content.Context getPopupContext()>
<android.widget.Spinner: void onClick(android.content.DialogInterface,int)>
<android.widget.Spinner: int getGravity()>
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet,int,int,int)>
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet,int,int,int,android.content.res.Resources.Theme)>
<android.widget.Spinner: void <init>(android.content.Context)>
<android.widget.Spinner: int getDropDownVerticalOffset()>
<android.widget.Spinner: void setDropDownWidth(int)>
<android.widget.Spinner: void setPrompt(CharSequence)>
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.Spinner: void setGravity(int)>
<android.widget.Spinner: void <init>(android.content.Context,int)>
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Spinner: CharSequence getPrompt()>
<android.widget.Spinner: android.graphics.drawable.Drawable getPopupBackground()>
<android.widget.Spinner: void setDropDownVerticalOffset(int)>
<android.os.health.TimerStat: void setTime(long)>
<android.os.health.TimerStat: void setCount(int)>
<android.os.health.TimerStat: int describeContents()>
<android.os.health.TimerStat: void <init>(android.os.Parcel)>
<android.os.health.TimerStat: int getCount()>
<android.os.health.TimerStat: void <init>()>
<android.os.health.TimerStat: void <init>(int,long)>
<android.os.health.TimerStat: long getTime()>
<android.os.health.TimerStat: void writeToParcel(android.os.Parcel,int)>
<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate date(java.time.chrono.Era,int,int,int)>
<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate dateNow(java.time.Clock)>
<java.time.chrono.JapaneseChronology: boolean isLeapYear(long)>
<java.time.chrono.JapaneseChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>
<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate dateNow()>
<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate dateYearDay(java.time.chrono.Era,int,int)>
<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate dateNow(java.time.ZoneId)>
<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseEra eraOf(int)>
<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate dateEpochDay(long)>
<java.time.chrono.JapaneseChronology: java.lang.String getId()>
<java.time.chrono.JapaneseChronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>
<java.time.chrono.JapaneseChronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>
<java.time.chrono.JapaneseChronology: int prolepticYear(java.time.chrono.Era,int)>
<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate date(java.time.temporal.TemporalAccessor)>
<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate date(int,int,int)>
<java.time.chrono.JapaneseChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>
<java.time.chrono.JapaneseChronology: java.util.List eras()>
<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate dateYearDay(int,int)>
<java.time.chrono.JapaneseChronology: java.lang.String getCalendarType()>
<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>
<javax.xml.parsers.ParserConfigurationException: void <init>()>
<javax.xml.parsers.ParserConfigurationException: void <init>(String)>
<android.telephony.CellSignalStrengthWcdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellSignalStrengthWcdma: int describeContents()>
<android.telephony.CellSignalStrengthWcdma: int getLevel()>
<android.telephony.CellSignalStrengthWcdma: int getAsuLevel()>
<android.telephony.CellSignalStrengthWcdma: int getDbm()>
<java.util.logging.LoggingMXBean: java.lang.String getLoggerLevel(java.lang.String)>
<java.util.logging.LoggingMXBean: void setLoggerLevel(java.lang.String,java.lang.String)>
<java.util.logging.LoggingMXBean: java.lang.String getParentLoggerName(java.lang.String)>
<java.util.logging.LoggingMXBean: java.util.List getLoggerNames()>
<android.app.Notification.Extender: android.app.Notification.Builder extend(android.app.Notification.Builder)>
<javax.xml.transform.dom.DOMResult: void <init>(org.w3c.dom.Node)>
<javax.xml.transform.dom.DOMResult: java.lang.String getSystemId()>
<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node getNextSibling()>
<javax.xml.transform.dom.DOMResult: void setSystemId(java.lang.String)>
<javax.xml.transform.dom.DOMResult: void <init>(org.w3c.dom.Node,org.w3c.dom.Node,String)>
<javax.xml.transform.dom.DOMResult: void setNode(org.w3c.dom.Node)>
<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node getNode()>
<javax.xml.transform.dom.DOMResult: void <init>()>
<javax.xml.transform.dom.DOMResult: void <init>(org.w3c.dom.Node,String)>
<javax.xml.transform.dom.DOMResult: void setNextSibling(org.w3c.dom.Node)>
<javax.xml.transform.dom.DOMResult: void <init>(org.w3c.dom.Node,org.w3c.dom.Node)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setRequiredNetworkType(int)>
<android.app.job.JobInfo.Builder: void <init>(int,android.content.ComponentName)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setBackoffCriteria(long,int)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setTriggerContentMaxDelay(long)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo build()>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setRequiredNetwork(android.net.NetworkRequest)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setOverrideDeadline(long)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setRequiresBatteryNotLow(boolean)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setRequiresDeviceIdle(boolean)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setExtras(android.os.PersistableBundle)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setTransientExtras(android.os.Bundle)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setMinimumLatency(long)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setPeriodic(long,long)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setEstimatedNetworkBytes(long,long)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder addTriggerContentUri(android.app.job.JobInfo.TriggerContentUri)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setImportantWhileForeground(boolean)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setPersisted(boolean)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setRequiresCharging(boolean)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setRequiresStorageNotLow(boolean)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setTriggerContentUpdateDelay(long)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setClipData(android.content.ClipData,int)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setPrefetch(boolean)>
<android.app.job.JobInfo.Builder: android.app.job.JobInfo.Builder setPeriodic(long)>
<java.io.InputStream: int read(byte[])>
<java.io.InputStream: long skip(long)>
<java.io.InputStream: int read()>
<java.io.InputStream: int read(byte[],int,int)>
<java.io.InputStream: void close()>
<java.io.InputStream: void <init>()>
<java.io.InputStream: void reset()>
<java.io.InputStream: int available()>
<java.io.InputStream: boolean markSupported()>
<java.io.InputStream: void mark(int)>
<android.media.ThumbnailUtils: void <init>()>
<android.media.ThumbnailUtils: android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap,int,int,int)>
<android.media.ThumbnailUtils: android.graphics.Bitmap createVideoThumbnail(java.lang.String,int)>
<android.media.ThumbnailUtils: android.graphics.Bitmap createImageThumbnail(java.lang.String,int)>
<android.media.ThumbnailUtils: android.graphics.Bitmap createAudioThumbnail(java.lang.String,int)>
<android.media.ThumbnailUtils: android.graphics.Bitmap createImageThumbnail(java.io.File,android.util.Size,android.os.CancellationSignal)>
<android.media.ThumbnailUtils: android.graphics.Bitmap createVideoThumbnail(java.io.File,android.util.Size,android.os.CancellationSignal)>
<android.media.ThumbnailUtils: android.graphics.Bitmap createAudioThumbnail(java.io.File,android.util.Size,android.os.CancellationSignal)>
<android.media.ThumbnailUtils: android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap,int,int)>
<android.print.PrintManager: void addPrintServicesChangeListener(android.print.PrintManager.PrintServicesChangeListener,android.os.Handler)>
<android.print.PrintManager: android.print.PrintJob print(java.lang.String,android.print.PrintDocumentAdapter,android.print.PrintAttributes)>
<android.print.PrintManager: java.util.List getPrintJobs()>
<android.print.PrintManager: java.util.List getPrintServices(int)>
<android.print.PrintManager: void removePrintServiceRecommendationsChangeListener(android.print.PrintManager.PrintServiceRecommendationsChangeListener)>
<android.print.PrintManager: void removePrintServicesChangeListener(android.print.PrintManager.PrintServicesChangeListener)>
<android.print.PrintManager: java.util.List getPrintServiceRecommendations()>
<android.print.PrintManager: void addPrintServiceRecommendationsChangeListener(android.print.PrintManager.PrintServiceRecommendationsChangeListener,android.os.Handler)>
<android.os.Bundle: void <init>(android.os.PersistableBundle)>
<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)>
<android.os.Bundle: void putShortArray(java.lang.String,short[])>
<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)>
<android.os.Bundle: void <init>(int)>
<android.os.Bundle: void putCharArray(java.lang.String,char[])>
<android.os.Bundle: short getShort(java.lang.String)>
<android.os.Bundle: float[] getFloatArray(java.lang.String)>
<android.os.Bundle: java.lang.ClassLoader getClassLoader()>
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>
<android.os.Bundle: CharSequence[] getCharSequenceArray(java.lang.String)>
<android.os.Bundle: void putCharSequenceArray(java.lang.String,CharSequence[])>
<android.os.Bundle: void putFloatArray(java.lang.String,float[])>
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>
<android.os.Bundle: void putChar(java.lang.String,char)>
<android.os.Bundle: float getFloat(java.lang.String)>
<android.os.Bundle: short getShort(java.lang.String,short)>
<android.os.Bundle: android.util.SizeF getSizeF(java.lang.String)>
<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>
<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>
<android.os.Bundle: void writeToParcel(android.os.Parcel,int)>
<android.os.Bundle: void putSizeF(java.lang.String,android.util.SizeF)>
<android.os.Bundle: char getChar(java.lang.String)>
<android.os.Bundle: char[] getCharArray(java.lang.String)>
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>
<android.os.Bundle: android.os.Bundle deepCopy()>
<android.os.Bundle: byte getByte(java.lang.String)>
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>
<android.os.Bundle: void putByte(java.lang.String,byte)>
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>
<android.os.Bundle: android.util.Size getSize(java.lang.String)>
<android.os.Bundle: void putAll(android.os.Bundle)>
<android.os.Bundle: void <init>(ClassLoader)>
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>
<android.os.Bundle: CharSequence getCharSequence(java.lang.String,CharSequence)>
<android.os.Bundle: android.os.IBinder getBinder(java.lang.String)>
<android.os.Bundle: byte[] getByteArray(java.lang.String)>
<android.os.Bundle: char getChar(java.lang.String,char)>
<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: float getFloat(java.lang.String,float)>
<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)>
<android.os.Bundle: void putShort(java.lang.String,short)>
<android.os.Bundle: void readFromParcel(android.os.Parcel)>
<android.os.Bundle: T getParcelable(java.lang.String)>
<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: void putByteArray(java.lang.String,byte[])>
<android.os.Bundle: CharSequence getCharSequence(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>
<android.os.Bundle: void <init>()>
<android.os.Bundle: void <init>(android.os.Bundle)>
<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>
<android.os.Bundle: void putFloat(java.lang.String,float)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Bundle: boolean hasFileDescriptors()>
<android.os.Bundle: short[] getShortArray(java.lang.String)>
<android.os.Bundle: void putSize(java.lang.String,android.util.Size)>
<android.os.Bundle: int describeContents()>
<android.os.Bundle: java.lang.Object clone()>
<android.os.Bundle: void putCharSequence(java.lang.String,CharSequence)>
<android.media.MediaCodecInfo.CodecProfileLevel: void <init>()>
<android.service.notification.NotificationListenerService.Ranking: java.util.List getSmartReplies()>
<android.service.notification.NotificationListenerService.Ranking: CharSequence getImportanceExplanation()>
<android.service.notification.NotificationListenerService.Ranking: android.app.NotificationChannel getChannel()>
<android.service.notification.NotificationListenerService.Ranking: int getRank()>
<android.service.notification.NotificationListenerService.Ranking: long getLastAudiblyAlertedMillis()>
<android.service.notification.NotificationListenerService.Ranking: boolean matchesInterruptionFilter()>
<android.service.notification.NotificationListenerService.Ranking: void <init>()>
<android.service.notification.NotificationListenerService.Ranking: int getSuppressedVisualEffects()>
<android.service.notification.NotificationListenerService.Ranking: boolean canShowBadge()>
<android.service.notification.NotificationListenerService.Ranking: int getImportance()>
<android.service.notification.NotificationListenerService.Ranking: java.lang.String getKey()>
<android.service.notification.NotificationListenerService.Ranking: boolean canBubble()>
<android.service.notification.NotificationListenerService.Ranking: boolean isSuspended()>
<android.service.notification.NotificationListenerService.Ranking: boolean isAmbient()>
<android.service.notification.NotificationListenerService.Ranking: java.util.List getSmartActions()>
<android.service.notification.NotificationListenerService.Ranking: int getUserSentiment()>
<android.service.notification.NotificationListenerService.Ranking: java.lang.String getOverrideGroupKey()>
<android.service.autofill.FillEventHistory.Event: java.util.Map getManuallyEnteredField()>
<android.service.autofill.FillEventHistory.Event: int getType()>
<android.service.autofill.FillEventHistory.Event: java.util.Map getFieldsClassification()>
<android.service.autofill.FillEventHistory.Event: java.util.Set getIgnoredDatasetIds()>
<android.service.autofill.FillEventHistory.Event: java.util.Map getChangedFields()>
<android.service.autofill.FillEventHistory.Event: java.util.Set getSelectedDatasetIds()>
<android.service.autofill.FillEventHistory.Event: java.lang.String getDatasetId()>
<android.service.autofill.FillEventHistory.Event: android.os.Bundle getClientState()>
<android.app.ApplicationErrorReport.BatteryInfo: void <init>(android.os.Parcel)>
<android.app.ApplicationErrorReport.BatteryInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ApplicationErrorReport.BatteryInfo: void <init>()>
<android.app.ApplicationErrorReport.BatteryInfo: void dump(android.util.Printer,java.lang.String)>
<android.renderscript.Sampler: android.renderscript.Sampler CLAMP_NEAREST(android.renderscript.RenderScript)>
<android.renderscript.Sampler: android.renderscript.Sampler MIRRORED_REPEAT_NEAREST(android.renderscript.RenderScript)>
<android.renderscript.Sampler: android.renderscript.Sampler WRAP_NEAREST(android.renderscript.RenderScript)>
<android.renderscript.Sampler: float getAnisotropy()>
<android.renderscript.Sampler: android.renderscript.Sampler WRAP_LINEAR_MIP_LINEAR(android.renderscript.RenderScript)>
<android.renderscript.Sampler: android.renderscript.Sampler CLAMP_LINEAR(android.renderscript.RenderScript)>
<android.renderscript.Sampler: android.renderscript.Sampler MIRRORED_REPEAT_LINEAR_MIP_LINEAR(android.renderscript.RenderScript)>
<android.renderscript.Sampler: android.renderscript.Sampler.Value getMagnification()>
<android.renderscript.Sampler: android.renderscript.Sampler MIRRORED_REPEAT_LINEAR(android.renderscript.RenderScript)>
<android.renderscript.Sampler: android.renderscript.Sampler.Value getMinification()>
<android.renderscript.Sampler: android.renderscript.Sampler.Value getWrapT()>
<android.renderscript.Sampler: android.renderscript.Sampler.Value getWrapS()>
<android.renderscript.Sampler: android.renderscript.Sampler CLAMP_LINEAR_MIP_LINEAR(android.renderscript.RenderScript)>
<android.renderscript.Sampler: android.renderscript.Sampler WRAP_LINEAR(android.renderscript.RenderScript)>
<android.text.format.Time: void set(android.text.format.Time)>
<android.text.format.Time: java.lang.String getCurrentTimezone()>
<android.text.format.Time: int getJulianMondayFromWeeksSinceEpoch(int)>
<android.text.format.Time: boolean parse3339(java.lang.String)>
<android.text.format.Time: boolean before(android.text.format.Time)>
<android.text.format.Time: int compare(android.text.format.Time,android.text.format.Time)>
<android.text.format.Time: boolean parse(java.lang.String)>
<android.text.format.Time: void set(long)>
<android.text.format.Time: void switchTimezone(java.lang.String)>
<android.text.format.Time: java.lang.String format2445()>
<android.text.format.Time: boolean isEpoch(android.text.format.Time)>
<android.text.format.Time: int getJulianDay(long,long)>
<android.text.format.Time: int getActualMaximum(int)>
<android.text.format.Time: void <init>()>
<android.text.format.Time: int getWeeksSinceEpochFromJulianDay(int,int)>
<android.text.format.Time: void setToNow()>
<android.text.format.Time: long toMillis(boolean)>
<android.text.format.Time: boolean after(android.text.format.Time)>
<android.text.format.Time: java.lang.String format3339(boolean)>
<android.text.format.Time: void set(int,int,int,int,int,int)>
<android.text.format.Time: void set(int,int,int)>
<android.text.format.Time: long setJulianDay(int)>
<android.text.format.Time: void <init>(String)>
<android.text.format.Time: int getWeekNumber()>
<android.text.format.Time: void clear(java.lang.String)>
<android.text.format.Time: void <init>(android.text.format.Time)>
<android.text.format.Time: java.lang.String format(java.lang.String)>
<android.text.format.Time: long normalize(boolean)>
<android.app.FragmentContainer: void <init>()>
<android.app.FragmentContainer: T onFindViewById(@IdResint)>
<android.app.FragmentContainer: boolean onHasView()>
<android.media.ImageReader.OnImageAvailableListener: void onImageAvailable(android.media.ImageReader)>
<android.media.MediaSync.Callback: void onAudioBufferConsumed(android.media.MediaSync,java.nio.ByteBuffer,int)>
<android.media.MediaSync.Callback: void <init>()>
<java.util.function.DoubleConsumer: void accept(double)>
<java.util.function.DoubleConsumer: java.util.function.DoubleConsumer andThen(java.util.function.DoubleConsumer)>
<android.text.style.TtsSpan.Builder: void <init>(String)>
<android.text.style.TtsSpan.Builder: C setStringArgument(java.lang.String,java.lang.String)>
<android.text.style.TtsSpan.Builder: C setLongArgument(java.lang.String,long)>
<android.text.style.TtsSpan.Builder: android.text.style.TtsSpan build()>
<android.text.style.TtsSpan.Builder: C setIntArgument(java.lang.String,int)>
<android.util.Property: boolean isReadOnly()>
<android.util.Property: void set(T,V)>
<android.util.Property: java.lang.String getName()>
<android.util.Property: android.util.Property of(java.lang.Class,java.lang.Class,java.lang.String)>
<android.util.Property: void <init>(Class,String)>
<android.util.Property: V get(T)>
<android.util.Property: java.lang.Class getType()>
<java.security.AuthProvider: void <init>(String,double,String)>
<java.security.AuthProvider: void login(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler)>
<java.security.AuthProvider: void logout()>
<java.security.AuthProvider: void setCallbackHandler(javax.security.auth.callback.CallbackHandler)>
<java.security.GeneralSecurityException: void <init>(String)>
<java.security.GeneralSecurityException: void <init>()>
<java.security.GeneralSecurityException: void <init>(String,Throwable)>
<java.security.GeneralSecurityException: void <init>(Throwable)>
<java.util.concurrent.CountedCompleter: void <init>()>
<java.util.concurrent.CountedCompleter: void <init>(java.util.concurrent.CountedCompleter,int)>
<java.util.concurrent.CountedCompleter: void complete(T)>
<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter getCompleter()>
<java.util.concurrent.CountedCompleter: void setRawResult(T)>
<java.util.concurrent.CountedCompleter: void quietlyCompleteRoot()>
<java.util.concurrent.CountedCompleter: void <init>(java.util.concurrent.CountedCompleter)>
<java.util.concurrent.CountedCompleter: void compute()>
<java.util.concurrent.CountedCompleter: void propagateCompletion()>
<java.util.concurrent.CountedCompleter: void tryComplete()>
<java.util.concurrent.CountedCompleter: T getRawResult()>
<java.util.concurrent.CountedCompleter: void addToPendingCount(int)>
<java.util.concurrent.CountedCompleter: void helpComplete(int)>
<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter firstComplete()>
<java.util.concurrent.CountedCompleter: void onCompletion(java.util.concurrent.CountedCompleter)>
<java.util.concurrent.CountedCompleter: void setPendingCount(int)>
<java.util.concurrent.CountedCompleter: boolean compareAndSetPendingCount(int,int)>
<java.util.concurrent.CountedCompleter: int decrementPendingCountUnlessZero()>
<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter nextComplete()>
<java.util.concurrent.CountedCompleter: boolean exec()>
<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter getRoot()>
<java.util.concurrent.CountedCompleter: int getPendingCount()>
<java.util.concurrent.CountedCompleter: boolean onExceptionalCompletion(java.lang.Throwable,java.util.concurrent.CountedCompleter)>
<android.view.contentcapture.DataRemovalRequest: int describeContents()>
<android.view.contentcapture.DataRemovalRequest: boolean isForEverything()>
<android.view.contentcapture.DataRemovalRequest: void writeToParcel(android.os.Parcel,int)>
<android.view.contentcapture.DataRemovalRequest: java.util.List getLocusIdRequests()>
<android.view.contentcapture.DataRemovalRequest: java.lang.String getPackageName()>
<java.util.Map: V computeIfAbsent(K,java.util.function.Function)>
<java.util.Map: V computeIfPresent(K,java.util.function.BiFunction)>
<java.util.Map: void clear()>
<java.util.Map: int hashCode()>
<java.util.Map: void forEach(java.util.function.BiConsumer)>
<java.util.Map: V replace(K,V)>
<java.util.Map: boolean equals(java.lang.Object)>
<java.util.Map: V getOrDefault(java.lang.Object,V)>
<java.util.Map: V put(K,V)>
<java.util.Map: boolean remove(java.lang.Object,java.lang.Object)>
<java.util.Map: java.util.Collection values()>
<java.util.Map: boolean isEmpty()>
<java.util.Map: boolean containsValue(java.lang.Object)>
<java.util.Map: java.util.Set entrySet()>
<java.util.Map: V merge(K,V,java.util.function.BiFunction)>
<java.util.Map: boolean containsKey(java.lang.Object)>
<java.util.Map: void replaceAll(java.util.function.BiFunction)>
<java.util.Map: boolean replace(K,V,V)>
<java.util.Map: V compute(K,java.util.function.BiFunction)>
<java.util.Map: V get(java.lang.Object)>
<java.util.Map: java.util.Set keySet()>
<java.util.Map: int size()>
<java.util.Map: V putIfAbsent(K,V)>
<java.util.Map: void putAll(java.util.Map)>
<java.util.Map: V remove(java.lang.Object)>
<android.provider.MediaStore.Audio.Albums: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore.Audio.Albums: void <init>()>
<android.media.tv.TvContract: android.net.Uri buildProgramsUriForChannel(android.net.Uri)>
<android.media.tv.TvContract: boolean isChannelUriForPassthroughInput(android.net.Uri)>
<android.media.tv.TvContract: android.net.Uri buildChannelLogoUri(long)>
<android.media.tv.TvContract: void requestChannelBrowsable(android.content.Context,long)>
<android.media.tv.TvContract: boolean isChannelUriForTunerInput(android.net.Uri)>
<android.media.tv.TvContract: android.net.Uri buildChannelLogoUri(android.net.Uri)>
<android.media.tv.TvContract: android.net.Uri buildProgramUri(long)>
<android.media.tv.TvContract: boolean isRecordedProgramUri(android.net.Uri)>
<android.media.tv.TvContract: android.net.Uri buildChannelUriForPassthroughInput(java.lang.String)>
<android.media.tv.TvContract: android.net.Uri buildWatchNextProgramUri(long)>
<android.media.tv.TvContract: android.net.Uri buildChannelsUriForInput(java.lang.String,java.lang.String,boolean)>
<android.media.tv.TvContract: android.net.Uri buildChannelUri(long)>
<android.media.tv.TvContract: android.net.Uri buildChannelsUriForInput(java.lang.String)>
<android.media.tv.TvContract: boolean isProgramUri(android.net.Uri)>
<android.media.tv.TvContract: boolean isChannelUri(android.net.Uri)>
<android.media.tv.TvContract: android.net.Uri buildProgramsUriForChannel(long,long,long)>
<android.media.tv.TvContract: android.net.Uri buildProgramsUriForChannel(android.net.Uri,long,long)>
<android.media.tv.TvContract: android.net.Uri buildRecordedProgramUri(long)>
<android.media.tv.TvContract: android.net.Uri buildProgramsUriForChannel(long)>
<android.media.tv.TvContract: android.net.Uri buildChannelsUriForInput(java.lang.String,boolean)>
<android.media.tv.TvContract: android.net.Uri buildPreviewProgramsUriForChannel(long)>
<android.media.tv.TvContract: java.lang.String buildInputId(android.content.ComponentName)>
<android.media.tv.TvContract: android.net.Uri buildPreviewProgramUri(long)>
<android.media.tv.TvContract: android.net.Uri buildPreviewProgramsUriForChannel(android.net.Uri)>
<android.os.StrictMode.ViolationLogger: void log(android.os.StrictMode.ViolationInfo)>
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation build()>
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation.Builder withValueBackReferences(android.content.ContentValues)>
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation.Builder withExpectedCount(int)>
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation.Builder withSelection(java.lang.String,java.lang.String[])>
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation.Builder withSelectionBackReference(int,int)>
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation.Builder withValueBackReference(java.lang.String,int)>
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation.Builder withValues(android.content.ContentValues)>
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation.Builder withValue(java.lang.String,java.lang.Object)>
<android.content.ContentProviderOperation.Builder: android.content.ContentProviderOperation.Builder withYieldAllowed(boolean)>
<android.app.TabActivity: void setDefaultTab(java.lang.String)>
<android.app.TabActivity: void setDefaultTab(int)>
<android.app.TabActivity: void <init>()>
<android.app.TabActivity: android.widget.TabWidget getTabWidget()>
<android.app.TabActivity: android.widget.TabHost getTabHost()>
<android.mtp.MtpEvent: int getStorageId()>
<android.mtp.MtpEvent: int getObjectFormatCode()>
<android.mtp.MtpEvent: int getObjectPropCode()>
<android.mtp.MtpEvent: int getTransactionId()>
<android.mtp.MtpEvent: int getObjectHandle()>
<android.mtp.MtpEvent: int getParameter2()>
<android.mtp.MtpEvent: int getEventCode()>
<android.mtp.MtpEvent: int getParameter1()>
<android.mtp.MtpEvent: int getParameter3()>
<android.mtp.MtpEvent: int getDevicePropCode()>
<android.os.MessageQueue.IdleHandler: boolean queueIdle()>
<android.security.keystore.StrongBoxUnavailableException: void <init>(String,Throwable)>
<android.security.keystore.StrongBoxUnavailableException: void <init>(Throwable)>
<android.security.keystore.StrongBoxUnavailableException: void <init>()>
<android.security.keystore.StrongBoxUnavailableException: void <init>(String)>
<android.net.WifiKey: int describeContents()>
<android.net.WifiKey: void writeToParcel(android.os.Parcel,int)>
<android.net.WifiKey: void <init>(String,String)>
<java.util.stream.LongStream.Builder extends java.util.function.LongConsumer: java.util.stream.LongStream build()>
<java.util.stream.LongStream.Builder extends java.util.function.LongConsumer: java.util.stream.LongStream.Builder add(long)>
<android.content.pm.InstantAppIntentFilter: java.util.List getFilters()>
<android.content.pm.InstantAppIntentFilter: void <init>(String,java.util.List)>
<android.content.pm.InstantAppIntentFilter: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.InstantAppIntentFilter: int describeContents()>
<android.content.pm.InstantAppIntentFilter: java.lang.String getSplitName()>
<java.time.format.DateTimeParseException: int getErrorIndex()>
<java.time.format.DateTimeParseException: void <init>(String,CharSequence,int,Throwable)>
<java.time.format.DateTimeParseException: java.lang.String getParsedString()>
<java.time.format.DateTimeParseException: void <init>(String,CharSequence,int)>
<android.hardware.display.BrightnessCorrection: int describeContents()>
<android.hardware.display.BrightnessCorrection: void writeToParcel(android.os.Parcel,int)>
<android.hardware.display.BrightnessCorrection: android.hardware.display.BrightnessCorrection createScaleAndTranslateLog(float,float)>
<android.hardware.display.BrightnessCorrection: float apply(float)>
<android.service.autofill.augmented.FillResponse.Builder: android.service.autofill.augmented.FillResponse.Builder setFillWindow(android.service.autofill.augmented.FillWindow)>
<android.service.autofill.augmented.FillResponse.Builder: void <init>()>
<android.service.autofill.augmented.FillResponse.Builder: android.service.autofill.augmented.FillResponse build()>
<java.nio.channels.ReadPendingException: void <init>()>
<android.graphics.CornerPathEffect: void <init>(float)>
<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)>
<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)>
<java.lang.ClassLoader: void <init>()>
<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>
<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>
<java.lang.ClassLoader: java.lang.Class defineClass(byte[],int,int)>
<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>
<java.lang.ClassLoader: java.util.Enumeration findResources(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class findClass(java.lang.String)>
<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>
<java.lang.ClassLoader: void resolveClass(java.lang.Class)>
<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>
<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
<java.lang.ClassLoader: void <init>(ClassLoader)>
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>
<java.lang.ClassLoader: java.lang.String findLibrary(java.lang.String)>
<java.lang.ClassLoader: java.lang.ClassLoader getParent()>
<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>
<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>
<java.lang.ClassLoader: void setSigners(java.lang.Class,java.lang.Object[])>
<java.lang.ClassLoader: boolean registerAsParallelCapable()>
<java.lang.ClassLoader: void clearAssertionStatus()>
<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>
<java.lang.ClassLoader: java.lang.Class findSystemClass(java.lang.String)>
<java.lang.ClassLoader: java.lang.Package[] getPackages()>
<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>
<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>
<android.util.LongSparseArray: int indexOfKey(long)>
<android.util.LongSparseArray: int size()>
<android.util.LongSparseArray: E get(long)>
<android.util.LongSparseArray: void removeAt(int)>
<android.util.LongSparseArray: int indexOfValue(E)>
<android.util.LongSparseArray: void <init>(int)>
<android.util.LongSparseArray: void append(long,E)>
<android.util.LongSparseArray: android.util.LongSparseArray clone()>
<android.util.LongSparseArray: void setValueAt(int,E)>
<android.util.LongSparseArray: void <init>()>
<android.util.LongSparseArray: void clear()>
<android.util.LongSparseArray: void remove(long)>
<android.util.LongSparseArray: void delete(long)>
<android.util.LongSparseArray: void put(long,E)>
<android.util.LongSparseArray: E valueAt(int)>
<android.util.LongSparseArray: long keyAt(int)>
<android.util.LongSparseArray: E get(long,E)>
<java.nio.file.AccessDeniedException: void <init>(String)>
<java.nio.file.AccessDeniedException: void <init>(String,String,String)>
<java.util.ConcurrentModificationException: void <init>()>
<java.util.ConcurrentModificationException: void <init>(String,Throwable)>
<java.util.ConcurrentModificationException: void <init>(String)>
<java.util.ConcurrentModificationException: void <init>(Throwable)>
<android.app.Vr2dDisplayProperties.Builder: android.app.Vr2dDisplayProperties.Builder addFlags(int)>
<android.app.Vr2dDisplayProperties.Builder: android.app.Vr2dDisplayProperties.Builder removeFlags(int)>
<android.app.Vr2dDisplayProperties.Builder: android.app.Vr2dDisplayProperties.Builder setDimensions(int,int,int)>
<android.app.Vr2dDisplayProperties.Builder: android.app.Vr2dDisplayProperties build()>
<android.app.Vr2dDisplayProperties.Builder: void <init>()>
<android.app.Vr2dDisplayProperties.Builder: android.app.Vr2dDisplayProperties.Builder setEnabled(boolean)>
<android.security.keystore.recovery.WrappedApplicationKey: int describeContents()>
<android.security.keystore.recovery.WrappedApplicationKey: void writeToParcel(android.os.Parcel,int)>
<android.security.keystore.recovery.WrappedApplicationKey: byte[] getEncryptedKeyMaterial()>
<android.security.keystore.recovery.WrappedApplicationKey: java.lang.String getAlias()>
<android.security.keystore.recovery.WrappedApplicationKey: byte[] getMetadata()>
<android.media.audiofx.LoudnessEnhancer: void <init>(int)>
<android.media.audiofx.LoudnessEnhancer: float getTargetGain()>
<android.media.audiofx.LoudnessEnhancer: void setTargetGain(int)>
<android.text.method.DialerKeyListener: char[] getAcceptedChars()>
<android.text.method.DialerKeyListener: int getInputType()>
<android.text.method.DialerKeyListener: android.text.method.DialerKeyListener getInstance()>
<android.text.method.DialerKeyListener: void <init>()>
<android.app.contentsuggestions.ContentSuggestionsManager.ClassificationsCallback: void onContentClassificationsAvailable(int,java.util.List)>
<android.widget.SearchView.OnCloseListener: boolean onClose()>
<android.widget.TableRow.LayoutParams: void <init>(int,int)>
<android.widget.TableRow.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TableRow.LayoutParams: void <init>(int,int,float)>
<android.widget.TableRow.LayoutParams: void <init>()>
<android.widget.TableRow.LayoutParams: void <init>(int)>
<android.widget.TableRow.LayoutParams: void <init>(android.view.ViewGroup.MarginLayoutParams)>
<android.widget.TableRow.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.media.Session2Command.Result: void <init>(int,android.os.Bundle)>
<android.media.Session2Command.Result: int getResultCode()>
<android.media.Session2Command.Result: android.os.Bundle getResultData()>
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeExponentQ()>
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeExponentP()>
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeP()>
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeQ()>
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPublicExponent()>
<java.security.spec.RSAPrivateCrtKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getCrtCoefficient()>
<android.location.GpsClock: long getTimeInNs()>
<android.location.GpsClock: double getBiasUncertaintyInNs()>
<android.location.GpsClock: void writeToParcel(android.os.Parcel,int)>
<android.location.GpsClock: double getBiasInNs()>
<android.location.GpsClock: void setLeapSecond(short)>
<android.location.GpsClock: void setBiasUncertaintyInNs(double)>
<android.location.GpsClock: double getDriftInNsPerSec()>
<android.location.GpsClock: boolean hasLeapSecond()>
<android.location.GpsClock: void setFullBiasInNs(long)>
<android.location.GpsClock: void resetBiasUncertaintyInNs()>
<android.location.GpsClock: void resetTimeUncertaintyInNs()>
<android.location.GpsClock: double getTimeUncertaintyInNs()>
<android.location.GpsClock: int describeContents()>
<android.location.GpsClock: double getDriftUncertaintyInNsPerSec()>
<android.location.GpsClock: void setDriftInNsPerSec(double)>
<android.location.GpsClock: void set(android.location.GpsClock)>
<android.location.GpsClock: void resetFullBiasInNs()>
<android.location.GpsClock: void setDriftUncertaintyInNsPerSec(double)>
<android.location.GpsClock: short getLeapSecond()>
<android.location.GpsClock: void resetBiasInNs()>
<android.location.GpsClock: byte getType()>
<android.location.GpsClock: void resetLeapSecond()>
<android.location.GpsClock: boolean hasDriftInNsPerSec()>
<android.location.GpsClock: boolean hasBiasInNs()>
<android.location.GpsClock: boolean hasDriftUncertaintyInNsPerSec()>
<android.location.GpsClock: void reset()>
<android.location.GpsClock: boolean hasFullBiasInNs()>
<android.location.GpsClock: long getFullBiasInNs()>
<android.location.GpsClock: void setBiasInNs(double)>
<android.location.GpsClock: void setTimeUncertaintyInNs(double)>
<android.location.GpsClock: boolean hasTimeUncertaintyInNs()>
<android.location.GpsClock: void setType(byte)>
<android.location.GpsClock: boolean hasBiasUncertaintyInNs()>
<android.location.GpsClock: void setTimeInNs(long)>
<android.location.GpsClock: void resetDriftInNsPerSec()>
<android.location.GpsClock: void resetDriftUncertaintyInNsPerSec()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsANSI92FullSQL()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsExtendedSQLGrammar()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getJDBCMinorVersion()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getDefaultTransactionIsolation()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxColumnsInGroupBy()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsSelectForUpdate()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsOpenStatementsAcrossRollback()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsCoreSQLGrammar()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsANSI92IntermediateSQL()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsPositionedUpdate()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsResultSetHoldability(int)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsColumnAliasing()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsCatalogsInDataManipulation()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxColumnsInTable()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getDatabaseProductName()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getSQLKeywords()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsFullOuterJoins()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsSubqueriesInQuantifieds()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getFunctionColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxSchemaNameLength()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsExpressionsInOrderBy()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getUDTs(java.lang.String,java.lang.String,java.lang.String,int[])>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsStatementPooling()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getSystemFunctions()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsConvert()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxColumnsInOrderBy()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getCatalogs()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsSavepoints()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsGroupByBeyondSelect()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean dataDefinitionCausesTransactionCommit()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean dataDefinitionIgnoredInTransactions()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean othersInsertsAreVisible(int)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsBatchUpdates()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean locatorsUpdateCopy()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsCatalogsInPrivilegeDefinitions()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxColumnNameLength()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsSchemasInDataManipulation()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getJDBCMajorVersion()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getSchemaTerm()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean nullsAreSortedLow()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean allProceduresAreCallable()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxStatementLength()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsResultSetConcurrency(int,int)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean usesLocalFiles()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean allTablesAreSelectable()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsAlterTableWithDropColumn()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean ownInsertsAreVisible(int)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxCharLiteralLength()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsSubqueriesInComparisons()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsAlterTableWithAddColumn()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsOpenCursorsAcrossRollback()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean insertsAreDetected(int)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getSQLStateType()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsANSI92EntryLevelSQL()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsMultipleOpenResults()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getResultSetHoldability()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsCatalogsInProcedureCalls()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getURL()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getDatabaseProductVersion()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean storesUpperCaseIdentifiers()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsPositionedDelete()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsDataDefinitionAndDataManipulationTransactions()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean usesLocalFilePerTable()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsIntegrityEnhancementFacility()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsTransactions()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxTableNameLength()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean storesUpperCaseQuotedIdentifiers()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean othersDeletesAreVisible(int)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean storesMixedCaseQuotedIdentifiers()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxConnections()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getExtraNameCharacters()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxIndexLength()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getSuperTypes(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsCatalogsInTableDefinitions()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsResultSetType(int)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsSubqueriesInExists()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.RowIdLifetime getRowIdLifetime()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean ownDeletesAreVisible(int)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsDifferentTableCorrelationNames()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsGetGeneratedKeys()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean isReadOnly()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxColumnsInSelect()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getDriverName()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getProcedureTerm()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean ownUpdatesAreVisible(int)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getClientInfoProperties()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean autoCommitFailureClosesAllResultSets()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean storesLowerCaseQuotedIdentifiers()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsOpenStatementsAcrossCommit()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsOrderByUnrelated()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getFunctions(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getUserName()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsSchemasInIndexDefinitions()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsTransactionIsolationLevel(int)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getDriverVersion()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getCatalogSeparator()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getProcedures(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getSchemas(java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean doesMaxRowSizeIncludeBlobs()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsGroupByUnrelated()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getVersionColumns(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxUserNameLength()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getStringFunctions()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsNamedParameters()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsOuterJoins()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsGroupBy()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getIdentifierQuoteString()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsCorrelatedSubqueries()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getTypeInfo()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsDataManipulationTransactionsOnly()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean nullsAreSortedAtEnd()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxColumnsInIndex()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsNonNullableColumns()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsOpenCursorsAcrossCommit()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsLikeEscapeClause()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getSearchStringEscape()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean storesMixedCaseIdentifiers()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsUnionAll()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsTableCorrelationNames()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsCatalogsInIndexDefinitions()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getNumericFunctions()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsSubqueriesInIns()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsSchemasInProcedureCalls()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxCursorNameLength()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsUnion()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxCatalogNameLength()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsMultipleResultSets()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getAttributes(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean nullPlusNonNullIsNull()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean updatesAreDetected(int)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean deletesAreDetected(int)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.Connection getConnection()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getDatabaseMajorVersion()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsSchemasInTableDefinitions()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getDriverMinorVersion()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean isCatalogAtStart()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean othersUpdatesAreVisible(int)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getDatabaseMinorVersion()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean nullsAreSortedHigh()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getDriverMajorVersion()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxTablesInSelect()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsMultipleTransactions()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsLimitedOuterJoins()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsConvert(int,int)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getCatalogTerm()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsStoredProcedures()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsMinimumSQLGrammar()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsMixedCaseQuotedIdentifiers()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getSuperTables(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsMixedCaseIdentifiers()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean storesLowerCaseIdentifiers()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxProcedureNameLength()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxStatements()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsStoredFunctionsUsingCallSyntax()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean nullsAreSortedAtStart()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: boolean supportsSchemasInPrivilegeDefinitions()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxRowSize()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: int getMaxBinaryLiteralLength()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getTableTypes()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.sql.ResultSet getSchemas()>
<java.sql.DatabaseMetaData extends java.sql.Wrapper: java.lang.String getTimeDateFunctions()>
<android.preference.CheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.CheckBoxPreference: void <init>(android.content.Context)>
<android.preference.CheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.CheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.Magnifier: android.graphics.Bitmap getContent()>
<android.widget.Magnifier: int getWidth()>
<android.widget.Magnifier: android.graphics.drawable.Drawable getOverlay()>
<android.widget.Magnifier: void setZoom(float)>
<android.widget.Magnifier: void show(float,float,float,float)>
<android.widget.Magnifier: android.graphics.Point getSourcePosition()>
<android.widget.Magnifier: int getSourceWidth()>
<android.widget.Magnifier: void <init>(android.view.View)>
<android.widget.Magnifier: int getSourceHeight()>
<android.widget.Magnifier: void update()>
<android.widget.Magnifier: void dismiss()>
<android.widget.Magnifier: android.graphics.Bitmap getOriginalContent()>
<android.widget.Magnifier: float getCornerRadius()>
<android.widget.Magnifier: float getElevation()>
<android.widget.Magnifier: int getDefaultVerticalSourceToMagnifierOffset()>
<android.widget.Magnifier: int getHeight()>
<android.widget.Magnifier: float getZoom()>
<android.widget.Magnifier: void setOnOperationCompleteCallback(android.widget.Magnifier.Callback)>
<android.widget.Magnifier: void show(float,float)>
<android.widget.Magnifier: android.graphics.PointF getMagnifierDefaultSize()>
<android.widget.Magnifier: int getDefaultHorizontalSourceToMagnifierOffset()>
<android.widget.Magnifier: android.graphics.Point getPosition()>
<android.widget.Magnifier: boolean isClippingEnabled()>
<java.net.DatagramSocket: int getLocalPort()>
<java.net.DatagramSocket: boolean getReuseAddress()>
<java.net.DatagramSocket: void send(java.net.DatagramPacket)>
<java.net.DatagramSocket: java.net.InetAddress getInetAddress()>
<java.net.DatagramSocket: void <init>(int)>
<java.net.DatagramSocket: void setSoTimeout(int)>
<java.net.DatagramSocket: void setTrafficClass(int)>
<java.net.DatagramSocket: void bind(java.net.SocketAddress)>
<java.net.DatagramSocket: void close()>
<java.net.DatagramSocket: boolean isClosed()>
<java.net.DatagramSocket: int getPort()>
<java.net.DatagramSocket: int getSoTimeout()>
<java.net.DatagramSocket: void setReuseAddress(boolean)>
<java.net.DatagramSocket: int getSendBufferSize()>
<java.net.DatagramSocket: java.nio.channels.DatagramChannel getChannel()>
<java.net.DatagramSocket: java.net.SocketAddress getLocalSocketAddress()>
<java.net.DatagramSocket: void <init>(java.net.DatagramSocketImpl)>
<java.net.DatagramSocket: void connect(java.net.SocketAddress)>
<java.net.DatagramSocket: java.net.SocketAddress getRemoteSocketAddress()>
<java.net.DatagramSocket: void setBroadcast(boolean)>
<java.net.DatagramSocket: void setReceiveBufferSize(int)>
<java.net.DatagramSocket: void disconnect()>
<java.net.DatagramSocket: int getTrafficClass()>
<java.net.DatagramSocket: boolean isBound()>
<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>
<java.net.DatagramSocket: void <init>()>
<java.net.DatagramSocket: boolean isConnected()>
<java.net.DatagramSocket: void <init>(java.net.SocketAddress)>
<java.net.DatagramSocket: int getReceiveBufferSize()>
<java.net.DatagramSocket: void setSendBufferSize(int)>
<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()>
<java.net.DatagramSocket: void <init>(int,java.net.InetAddress)>
<java.net.DatagramSocket: void connect(java.net.InetAddress,int)>
<java.net.DatagramSocket: void setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory)>
<java.net.DatagramSocket: boolean getBroadcast()>
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey translateKey(javax.crypto.SecretKey)>
<javax.crypto.SecretKeyFactory: java.lang.String getAlgorithm()>
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.security.Provider)>
<javax.crypto.SecretKeyFactory: java.security.Provider getProvider()>
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>
<javax.crypto.SecretKeyFactory: void <init>(javax.crypto.SecretKeyFactorySpi,java.security.Provider,String)>
<javax.crypto.SecretKeyFactory: java.security.spec.KeySpec getKeySpec(javax.crypto.SecretKey,java.lang.Class)>
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>
<org.w3c.dom.DOMConfiguration: boolean canSetParameter(java.lang.String,java.lang.Object)>
<org.w3c.dom.DOMConfiguration: org.w3c.dom.DOMStringList getParameterNames()>
<org.w3c.dom.DOMConfiguration: void setParameter(java.lang.String,java.lang.Object)>
<org.w3c.dom.DOMConfiguration: java.lang.Object getParameter(java.lang.String)>
<android.renderscript.ScriptIntrinsicResize: android.renderscript.ScriptIntrinsicResize create(android.renderscript.RenderScript)>
<android.renderscript.ScriptIntrinsicResize: void forEach_bicubic(android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicResize: void setInput(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicResize: android.renderscript.Script.FieldID getFieldID_Input()>
<android.renderscript.ScriptIntrinsicResize: void forEach_bicubic(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicResize: android.renderscript.Script.KernelID getKernelID_bicubic()>
<android.telephony.mbms.MbmsDownloadReceiver: void onReceive(android.content.Context,android.content.Intent)>
<android.telephony.mbms.MbmsDownloadReceiver: void <init>()>
<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>
<javax.crypto.spec.IvParameterSpec: byte[] getIV()>
<android.drm.DrmEvent: int getType()>
<android.drm.DrmEvent: java.lang.Object getAttribute(java.lang.String)>
<android.drm.DrmEvent: void <init>(int,int,String)>
<android.drm.DrmEvent: void <init>(int,int,String,java.util.HashMap)>
<android.drm.DrmEvent: java.lang.String getMessage()>
<android.drm.DrmEvent: int getUniqueId()>
<javax.net.ssl.X509TrustManager extends javax.net.ssl.TrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>
<javax.net.ssl.X509TrustManager extends javax.net.ssl.TrustManager: java.security.cert.X509Certificate[] getAcceptedIssuers()>
<javax.net.ssl.X509TrustManager extends javax.net.ssl.TrustManager: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)>
<android.widget.NumberPicker.Formatter: java.lang.String format(int)>
<java.nio.channels.ConnectionPendingException: void <init>()>
<android.graphics.drawable.shapes.Shape: float getHeight()>
<android.graphics.drawable.shapes.Shape: void onResize(float,float)>
<android.graphics.drawable.shapes.Shape: void getOutline(android.graphics.Outline)>
<android.graphics.drawable.shapes.Shape: void resize(float,float)>
<android.graphics.drawable.shapes.Shape: android.graphics.drawable.shapes.Shape clone()>
<android.graphics.drawable.shapes.Shape: float getWidth()>
<android.graphics.drawable.shapes.Shape: void draw(android.graphics.Canvas,android.graphics.Paint)>
<android.graphics.drawable.shapes.Shape: boolean hasAlpha()>
<android.graphics.drawable.shapes.Shape: void <init>()>
<android.provider.Settings: void <init>()>
<android.provider.Settings: boolean canDrawOverlays(android.content.Context)>
<android.media.MediaExtractor: long getSampleSize()>
<android.media.MediaExtractor: void setDataSource(android.content.res.AssetFileDescriptor)>
<android.media.MediaExtractor: android.media.MediaFormat getTrackFormat(int)>
<android.media.MediaExtractor: java.util.Map getPsshInfo()>
<android.media.MediaExtractor: long getCachedDuration()>
<android.media.MediaExtractor: void setDataSource(java.lang.String)>
<android.media.MediaExtractor: long getSampleTime()>
<android.media.MediaExtractor: void setMediaCas(android.media.MediaCas)>
<android.media.MediaExtractor: android.media.MediaExtractor.CasInfo getCasInfo(int)>
<android.media.MediaExtractor: android.os.PersistableBundle getMetrics()>
<android.media.MediaExtractor: boolean getSampleCryptoInfo(android.media.MediaCodec.CryptoInfo)>
<android.media.MediaExtractor: boolean advance()>
<android.media.MediaExtractor: void <init>()>
<android.media.MediaExtractor: void seekTo(long,int)>
<android.media.MediaExtractor: int getSampleFlags()>
<android.media.MediaExtractor: int getTrackCount()>
<android.media.MediaExtractor: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)>
<android.media.MediaExtractor: java.util.List getAudioPresentations(int)>
<android.media.MediaExtractor: int readSampleData(java.nio.ByteBuffer,int)>
<android.media.MediaExtractor: void setDataSource(java.io.FileDescriptor,long,long)>
<android.media.MediaExtractor: int getSampleTrackIndex()>
<android.media.MediaExtractor: void finalize()>
<android.media.MediaExtractor: void release()>
<android.media.MediaExtractor: void setDataSource(android.media.MediaDataSource)>
<android.media.MediaExtractor: void setDataSource(java.lang.String,java.util.Map)>
<android.media.MediaExtractor: boolean hasCacheReachedEndOfStream()>
<android.media.MediaExtractor: android.media.DrmInitData getDrmInitData()>
<android.media.MediaExtractor: void selectTrack(int)>
<android.media.MediaExtractor: void setDataSource(java.io.FileDescriptor)>
<android.media.MediaExtractor: void unselectTrack(int)>
<android.service.restrictions.RestrictionsReceiver: void onRequestPermission(android.content.Context,java.lang.String,java.lang.String,java.lang.String,android.os.PersistableBundle)>
<android.service.restrictions.RestrictionsReceiver: void onReceive(android.content.Context,android.content.Intent)>
<android.service.restrictions.RestrictionsReceiver: void <init>()>
<android.widget.AdapterView.OnItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
<android.graphics.LinearGradient: void <init>(float,float,float,float,@ColorLong long[],float[],android.graphics.Shader.TileMode)>
<android.graphics.LinearGradient: void <init>(float,float,float,float,@ColorInt int[],float[],android.graphics.Shader.TileMode)>
<android.graphics.LinearGradient: void <init>(float,float,float,float,@ColorInt int,@ColorInt int,android.graphics.Shader.TileMode)>
<android.graphics.LinearGradient: void <init>(float,float,float,float,@ColorLong long,@ColorLong long,android.graphics.Shader.TileMode)>
<android.text.style.URLSpan: int describeContents()>
<android.text.style.URLSpan: int getSpanTypeId()>
<android.text.style.URLSpan: java.lang.String getURL()>
<android.text.style.URLSpan: void onClick(android.view.View)>
<android.text.style.URLSpan: void <init>(String)>
<android.text.style.URLSpan: void <init>(android.os.Parcel)>
<android.text.style.URLSpan: void writeToParcel(android.os.Parcel,int)>
<android.telecom.CallScreeningService.CallResponse.Builder: void <init>()>
<android.telecom.CallScreeningService.CallResponse.Builder: android.telecom.CallScreeningService.CallResponse.Builder setSilenceCall(boolean)>
<android.telecom.CallScreeningService.CallResponse.Builder: android.telecom.CallScreeningService.CallResponse.Builder setSkipCallLog(boolean)>
<android.telecom.CallScreeningService.CallResponse.Builder: android.telecom.CallScreeningService.CallResponse.Builder setDisallowCall(boolean)>
<android.telecom.CallScreeningService.CallResponse.Builder: android.telecom.CallScreeningService.CallResponse build()>
<android.telecom.CallScreeningService.CallResponse.Builder: android.telecom.CallScreeningService.CallResponse.Builder setSkipNotification(boolean)>
<android.telecom.CallScreeningService.CallResponse.Builder: android.telecom.CallScreeningService.CallResponse.Builder setRejectCall(boolean)>
<android.telephony.ims.stub.ImsUtImplBase: int queryColp()>
<android.telephony.ims.stub.ImsUtImplBase: int updateCallWaiting(boolean,int)>
<android.telephony.ims.stub.ImsUtImplBase: int queryColr()>
<android.telephony.ims.stub.ImsUtImplBase: int queryCallBarring(int)>
<android.telephony.ims.stub.ImsUtImplBase: void close()>
<android.telephony.ims.stub.ImsUtImplBase: int queryCallBarringForServiceClass(int,int)>
<android.telephony.ims.stub.ImsUtImplBase: int updateCallBarring(int,int,java.lang.String[])>
<android.telephony.ims.stub.ImsUtImplBase: int queryClip()>
<android.telephony.ims.stub.ImsUtImplBase: void <init>()>
<android.telephony.ims.stub.ImsUtImplBase: int queryClir()>
<android.telephony.ims.stub.ImsUtImplBase: int queryCallWaiting()>
<android.telephony.ims.stub.ImsUtImplBase: int updateColp(boolean)>
<android.telephony.ims.stub.ImsUtImplBase: int updateClip(boolean)>
<android.telephony.ims.stub.ImsUtImplBase: int updateClir(int)>
<android.telephony.ims.stub.ImsUtImplBase: int updateCallForward(int,int,java.lang.String,int,int)>
<android.telephony.ims.stub.ImsUtImplBase: int queryCallForward(int,java.lang.String)>
<android.telephony.ims.stub.ImsUtImplBase: int updateColr(int)>
<android.telephony.ims.stub.ImsUtImplBase: int updateCallBarringForServiceClass(int,int,java.lang.String[],int)>
<android.telephony.ims.stub.ImsUtImplBase: void setListener(android.telephony.ims.ImsUtListener)>
<android.telephony.ims.stub.ImsUtImplBase: int transact(android.os.Bundle)>
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionActionEvent(int,int,int,android.view.textclassifier.TextClassification)>
<android.view.textclassifier.SelectionEvent: long getDurationSincePreviousEvent()>
<android.view.textclassifier.SelectionEvent: int getSmartEnd()>
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.TextClassificationSessionId getSessionId()>
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionActionEvent(int,int,int)>
<android.view.textclassifier.SelectionEvent: int getEventType()>
<android.view.textclassifier.SelectionEvent: int getSmartStart()>
<android.view.textclassifier.SelectionEvent: int getEnd()>
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionStartedEvent(int,int)>
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int,android.view.textclassifier.TextSelection)>
<android.view.textclassifier.SelectionEvent: java.lang.String getEntityType()>
<android.view.textclassifier.SelectionEvent: int getEventIndex()>
<android.view.textclassifier.SelectionEvent: java.lang.String getPackageName()>
<android.view.textclassifier.SelectionEvent: java.lang.String getWidgetType()>
<android.view.textclassifier.SelectionEvent: boolean isTerminal(int)>
<android.view.textclassifier.SelectionEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.SelectionEvent: java.lang.String getWidgetVersion()>
<android.view.textclassifier.SelectionEvent: int describeContents()>
<android.view.textclassifier.SelectionEvent: java.lang.String getResultId()>
<android.view.textclassifier.SelectionEvent: long getEventTime()>
<android.view.textclassifier.SelectionEvent: int getInvocationMethod()>
<android.view.textclassifier.SelectionEvent: int getStart()>
<android.view.textclassifier.SelectionEvent: long getDurationSinceSessionStart()>
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int)>
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int,android.view.textclassifier.TextClassification)>
<android.content.Entity.NamedContentValues: void <init>(android.net.Uri,android.content.ContentValues)>
<android.graphics.drawable.PictureDrawable: android.graphics.Picture getPicture()>
<android.graphics.drawable.PictureDrawable: void <init>(android.graphics.Picture)>
<android.graphics.drawable.PictureDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.PictureDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.PictureDrawable: int getOpacity()>
<android.graphics.drawable.PictureDrawable: void setPicture(android.graphics.Picture)>
<android.graphics.drawable.PictureDrawable: void setAlpha(int)>
<android.service.autofill.UserData.Builder: android.service.autofill.UserData.Builder setFieldClassificationAlgorithm(java.lang.String,android.os.Bundle)>
<android.service.autofill.UserData.Builder: void <init>(String,String,String)>
<android.service.autofill.UserData.Builder: android.service.autofill.UserData build()>
<android.service.autofill.UserData.Builder: android.service.autofill.UserData.Builder add(java.lang.String,java.lang.String)>
<android.service.autofill.UserData.Builder: android.service.autofill.UserData.Builder setFieldClassificationAlgorithmForCategory(java.lang.String,java.lang.String,android.os.Bundle)>
<android.provider.MediaStore.Images: void <init>()>
<android.view.inputmethod.InputConnectionWrapper: boolean performEditorAction(int)>
<android.view.inputmethod.InputConnectionWrapper: boolean setComposingText(CharSequence,int)>
<android.view.inputmethod.InputConnectionWrapper: void closeConnection()>
<android.view.inputmethod.InputConnectionWrapper: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>
<android.view.inputmethod.InputConnectionWrapper: boolean requestCursorUpdates(int)>
<android.view.inputmethod.InputConnectionWrapper: boolean reportFullscreenMode(boolean)>
<android.view.inputmethod.InputConnectionWrapper: boolean setComposingRegion(int,int)>
<android.view.inputmethod.InputConnectionWrapper: boolean finishComposingText()>
<android.view.inputmethod.InputConnectionWrapper: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>
<android.view.inputmethod.InputConnectionWrapper: void setTarget(android.view.inputmethod.InputConnection)>
<android.view.inputmethod.InputConnectionWrapper: CharSequence getSelectedText(int)>
<android.view.inputmethod.InputConnectionWrapper: CharSequence getTextBeforeCursor(int,int)>
<android.view.inputmethod.InputConnectionWrapper: boolean endBatchEdit()>
<android.view.inputmethod.InputConnectionWrapper: android.os.Handler getHandler()>
<android.view.inputmethod.InputConnectionWrapper: boolean deleteSurroundingTextInCodePoints(int,int)>
<android.view.inputmethod.InputConnectionWrapper: boolean commitCorrection(android.view.inputmethod.CorrectionInfo)>
<android.view.inputmethod.InputConnectionWrapper: boolean deleteSurroundingText(int,int)>
<android.view.inputmethod.InputConnectionWrapper: boolean setSelection(int,int)>
<android.view.inputmethod.InputConnectionWrapper: boolean clearMetaKeyStates(int)>
<android.view.inputmethod.InputConnectionWrapper: void <init>(android.view.inputmethod.InputConnection,boolean)>
<android.view.inputmethod.InputConnectionWrapper: boolean commitCompletion(android.view.inputmethod.CompletionInfo)>
<android.view.inputmethod.InputConnectionWrapper: boolean commitText(CharSequence,int)>
<android.view.inputmethod.InputConnectionWrapper: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>
<android.view.inputmethod.InputConnectionWrapper: boolean beginBatchEdit()>
<android.view.inputmethod.InputConnectionWrapper: int getCursorCapsMode(int)>
<android.view.inputmethod.InputConnectionWrapper: CharSequence getTextAfterCursor(int,int)>
<android.view.inputmethod.InputConnectionWrapper: boolean performContextMenuAction(int)>
<android.view.inputmethod.InputConnectionWrapper: boolean sendKeyEvent(android.view.KeyEvent)>
<android.app.backup.FullBackupDataOutput: long getQuota()>
<android.app.backup.FullBackupDataOutput: int getTransportFlags()>
<android.os.UserManager.UserOperationException: int getUserOperationResult()>
<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>
<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,ClassLoader,java.security.Principal[])>
<java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()>
<java.security.ProtectionDomain: boolean implies(java.security.Permission)>
<java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()>
<java.security.ProtectionDomain: java.security.Principal[] getPrincipals()>
<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection)>
<android.provider.DocumentsContract: android.net.Uri copyDocument(android.content.ContentResolver,android.net.Uri,android.net.Uri)>
<android.provider.DocumentsContract: java.lang.String getSearchDocumentsQuery(android.net.Uri)>
<android.provider.DocumentsContract: android.net.Uri buildRootsUri(java.lang.String)>
<android.provider.DocumentsContract: android.content.IntentSender createWebLinkIntent(android.content.ContentResolver,android.net.Uri,android.os.Bundle)>
<android.provider.DocumentsContract: boolean isRootUri(android.content.Context,android.net.Uri)>
<android.provider.DocumentsContract: android.net.Uri setManageMode(android.net.Uri)>
<android.provider.DocumentsContract: boolean isChildDocument(android.content.ContentResolver,android.net.Uri,android.net.Uri)>
<android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>
<android.provider.DocumentsContract: android.net.Uri buildChildDocumentsUri(java.lang.String,java.lang.String)>
<android.provider.DocumentsContract: java.lang.String getRootId(android.net.Uri)>
<android.provider.DocumentsContract: boolean isManageMode(android.net.Uri)>
<android.provider.DocumentsContract: android.net.Uri moveDocument(android.content.ContentResolver,android.net.Uri,android.net.Uri,android.net.Uri)>
<android.provider.DocumentsContract: boolean removeDocument(android.content.ContentResolver,android.net.Uri,android.net.Uri)>
<android.provider.DocumentsContract: java.lang.String getTreeDocumentId(android.net.Uri)>
<android.provider.DocumentsContract: android.net.Uri buildChildDocumentsUriUsingTree(android.net.Uri,java.lang.String)>
<android.provider.DocumentsContract: boolean isRootsUri(android.content.Context,android.net.Uri)>
<android.provider.DocumentsContract: android.provider.DocumentsContract.Path findDocumentPath(android.content.ContentResolver,android.net.Uri)>
<android.provider.DocumentsContract: boolean isTreeUri(android.net.Uri)>
<android.provider.DocumentsContract: boolean deleteDocument(android.content.ContentResolver,android.net.Uri)>
<android.provider.DocumentsContract: android.net.Uri buildDocumentUri(java.lang.String,java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri renameDocument(android.content.ContentResolver,android.net.Uri,java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri buildTreeDocumentUri(java.lang.String,java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri buildDocumentUriUsingTree(android.net.Uri,java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri buildRecentDocumentsUri(java.lang.String,java.lang.String)>
<android.provider.DocumentsContract: void ejectRoot(android.content.ContentResolver,android.net.Uri)>
<android.provider.DocumentsContract: android.net.Uri createDocument(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String)>
<android.provider.DocumentsContract: android.graphics.Bitmap getDocumentThumbnail(android.content.ContentResolver,android.net.Uri,android.graphics.Point,android.os.CancellationSignal)>
<android.provider.DocumentsContract: boolean isDocumentUri(android.content.Context,android.net.Uri)>
<android.provider.DocumentsContract: android.net.Uri buildRootUri(java.lang.String,java.lang.String)>
<android.provider.DocumentsContract: android.os.Bundle getDocumentMetadata(android.content.ContentResolver,android.net.Uri)>
<android.provider.DocumentsContract: android.net.Uri buildSearchDocumentsUri(java.lang.String,java.lang.String,java.lang.String)>
<android.telephony.PhoneNumberRange: void <init>(String,String,String,String)>
<android.telephony.PhoneNumberRange: void writeToParcel(android.os.Parcel,int)>
<android.telephony.PhoneNumberRange: boolean matches(java.lang.String)>
<android.telephony.PhoneNumberRange: int describeContents()>
<org.xml.sax.ext.Locator2 extends org.xml.sax.Locator: java.lang.String getEncoding()>
<org.xml.sax.ext.Locator2 extends org.xml.sax.Locator: java.lang.String getXMLVersion()>
<android.telephony.gsm.GsmCellLocation: void setStateInvalid()>
<android.telephony.gsm.GsmCellLocation: int getPsc()>
<android.telephony.gsm.GsmCellLocation: void <init>()>
<android.telephony.gsm.GsmCellLocation: void <init>(android.os.Bundle)>
<android.telephony.gsm.GsmCellLocation: int getCid()>
<android.telephony.gsm.GsmCellLocation: int getLac()>
<android.telephony.gsm.GsmCellLocation: void fillInNotifierBundle(android.os.Bundle)>
<android.telephony.gsm.GsmCellLocation: void setLacAndCid(int,int)>
<android.media.midi.MidiManager.OnDeviceOpenedListener: void onDeviceOpened(android.media.midi.MidiDevice)>
<android.provider.ContactsContract.Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<java.nio.FloatBuffer: float[] array()>
<java.nio.FloatBuffer: java.nio.FloatBuffer duplicate()>
<java.nio.FloatBuffer: java.nio.FloatBuffer slice()>
<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>
<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>
<java.nio.FloatBuffer: boolean hasArray()>
<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[],int,int)>
<java.nio.FloatBuffer: java.nio.FloatBuffer allocate(int)>
<java.nio.FloatBuffer: java.nio.ByteOrder order()>
<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>
<java.nio.FloatBuffer: float get()>
<java.nio.FloatBuffer: float get(int)>
<java.nio.FloatBuffer: java.nio.FloatBuffer compact()>
<java.nio.FloatBuffer: int compareTo(java.nio.FloatBuffer)>
<java.nio.FloatBuffer: java.nio.FloatBuffer put(java.nio.FloatBuffer)>
<java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[],int,int)>
<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[])>
<java.nio.FloatBuffer: int arrayOffset()>
<java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[])>
<java.nio.FloatBuffer: java.nio.FloatBuffer asReadOnlyBuffer()>
<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[],int,int)>
<java.util.logging.LogManager: void <init>()>
<java.util.logging.LogManager: void removePropertyChangeListener(java.beans.PropertyChangeListener)>
<java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>
<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>
<java.util.logging.LogManager: void addPropertyChangeListener(java.beans.PropertyChangeListener)>
<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>
<java.util.logging.LogManager: void reset()>
<java.util.logging.LogManager: java.util.Enumeration getLoggerNames()>
<java.util.logging.LogManager: java.util.logging.LoggingMXBean getLoggingMXBean()>
<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>
<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>
<java.util.logging.LogManager: void readConfiguration()>
<java.util.logging.LogManager: void checkAccess()>
<android.telephony.NetworkService: android.telephony.NetworkService.NetworkServiceProvider onCreateNetworkServiceProvider(int)>
<android.telephony.NetworkService: void <init>()>
<android.telephony.NetworkService: android.os.IBinder onBind(android.content.Intent)>
<android.icu.text.DateFormatSymbols: void initializeData(android.icu.util.ULocale,java.lang.String)>
<android.icu.text.DateFormatSymbols: void setEraNames(java.lang.String[])>
<android.icu.text.DateFormatSymbols: java.util.Locale[] getAvailableLocales()>
<android.icu.text.DateFormatSymbols: void setZoneStrings(java.lang.String[][])>
<android.icu.text.DateFormatSymbols: java.lang.String getLocalPatternChars()>
<android.icu.text.DateFormatSymbols: android.icu.text.DateFormatSymbols getInstance(java.util.Locale)>
<android.icu.text.DateFormatSymbols: void <init>(android.icu.util.Calendar,android.icu.util.ULocale)>
<android.icu.text.DateFormatSymbols: void setAmPmStrings(java.lang.String[])>
<android.icu.text.DateFormatSymbols: java.lang.String[] getZodiacNames(int,int)>
<android.icu.text.DateFormatSymbols: void setQuarters(java.lang.String[],int,int)>
<android.icu.text.DateFormatSymbols: void setShortWeekdays(java.lang.String[])>
<android.icu.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>
<android.icu.text.DateFormatSymbols: void <init>(Class,java.util.Locale)>
<android.icu.text.DateFormatSymbols: java.lang.String[] getEraNames()>
<android.icu.text.DateFormatSymbols: android.icu.text.DateFormatSymbols getInstance()>
<android.icu.text.DateFormatSymbols: void <init>(Class,android.icu.util.ULocale)>
<android.icu.text.DateFormatSymbols: void setYearNames(java.lang.String[],int,int)>
<android.icu.text.DateFormatSymbols: java.lang.Object clone()>
<android.icu.text.DateFormatSymbols: java.lang.String[] getMonths(int,int)>
<android.icu.text.DateFormatSymbols: void setZodiacNames(java.lang.String[],int,int)>
<android.icu.text.DateFormatSymbols: void <init>(android.icu.util.Calendar,java.util.Locale)>
<android.icu.text.DateFormatSymbols: java.lang.String[] getEras()>
<android.icu.text.DateFormatSymbols: void setEras(java.lang.String[])>
<android.icu.text.DateFormatSymbols: java.lang.String[] getYearNames(int,int)>
<android.icu.text.DateFormatSymbols: java.lang.String[] getQuarters(int,int)>
<android.icu.text.DateFormatSymbols: android.icu.text.DateFormatSymbols getInstance(android.icu.util.ULocale)>
<android.icu.text.DateFormatSymbols: void setWeekdays(java.lang.String[],int,int)>
<android.icu.text.DateFormatSymbols: void setWeekdays(java.lang.String[])>
<android.icu.text.DateFormatSymbols: void <init>(java.util.ResourceBundle,java.util.Locale)>
<android.icu.text.DateFormatSymbols: java.lang.String[] getMonths()>
<android.icu.text.DateFormatSymbols: void setLocalPatternChars(java.lang.String)>
<android.icu.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>
<android.icu.text.DateFormatSymbols: void <init>(java.util.Locale)>
<android.icu.text.DateFormatSymbols: void <init>()>
<android.icu.text.DateFormatSymbols: void setMonths(java.lang.String[])>
<android.icu.text.DateFormatSymbols: java.lang.String[] getShortMonths()>
<android.icu.text.DateFormatSymbols: java.lang.String[] getWeekdays()>
<android.icu.text.DateFormatSymbols: java.lang.String[] getWeekdays(int,int)>
<android.icu.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>
<android.icu.text.DateFormatSymbols: void setShortMonths(java.lang.String[])>
<android.icu.text.DateFormatSymbols: void <init>(android.icu.util.ULocale)>
<android.icu.text.DateFormatSymbols: void <init>(java.util.ResourceBundle,android.icu.util.ULocale)>
<android.icu.text.DateFormatSymbols: void setMonths(java.lang.String[],int,int)>
<android.provider.MediaStore.Images.Thumbnails: void <init>()>
<android.provider.MediaStore.Images.Thumbnails: void cancelThumbnailRequest(android.content.ContentResolver,long,long)>
<android.provider.MediaStore.Images.Thumbnails: android.database.Cursor queryMiniThumbnail(android.content.ContentResolver,long,int,java.lang.String[])>
<android.provider.MediaStore.Images.Thumbnails: void cancelThumbnailRequest(android.content.ContentResolver,long)>
<android.provider.MediaStore.Images.Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory.Options)>
<android.provider.MediaStore.Images.Thumbnails: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])>
<android.provider.MediaStore.Images.Thumbnails: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore.Images.Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory.Options)>
<android.provider.MediaStore.Images.Thumbnails: android.database.Cursor queryMiniThumbnails(android.content.ContentResolver,android.net.Uri,int,java.lang.String[])>
<java.util.concurrent.CompletionService: java.util.concurrent.Future submit(Runnable,V)>
<java.util.concurrent.CompletionService: java.util.concurrent.Future poll()>
<java.util.concurrent.CompletionService: java.util.concurrent.Future poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.CompletionService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>
<java.util.concurrent.CompletionService: java.util.concurrent.Future take()>
<android.renderscript.AllocationAdapter: android.renderscript.AllocationAdapter create1D(android.renderscript.RenderScript,android.renderscript.Allocation)>
<android.renderscript.AllocationAdapter: void setZ(int)>
<android.renderscript.AllocationAdapter: android.renderscript.AllocationAdapter create2D(android.renderscript.RenderScript,android.renderscript.Allocation)>
<android.renderscript.AllocationAdapter: void setLOD(int)>
<android.renderscript.AllocationAdapter: void resize(int)>
<android.renderscript.AllocationAdapter: android.renderscript.AllocationAdapter createTyped(android.renderscript.RenderScript,android.renderscript.Allocation,android.renderscript.Type)>
<android.renderscript.AllocationAdapter: void setFace(android.renderscript.Type.CubemapFace)>
<android.renderscript.AllocationAdapter: void setX(int)>
<android.renderscript.AllocationAdapter: void setY(int)>
<android.service.voice.AlwaysOnHotwordDetector.Callback: void <init>()>
<android.service.voice.AlwaysOnHotwordDetector.Callback: void onAvailabilityChanged(int)>
<android.service.voice.AlwaysOnHotwordDetector.Callback: void onRecognitionPaused()>
<android.service.voice.AlwaysOnHotwordDetector.Callback: void onError()>
<android.service.voice.AlwaysOnHotwordDetector.Callback: void onDetected(android.service.voice.AlwaysOnHotwordDetector.EventPayload)>
<android.service.voice.AlwaysOnHotwordDetector.Callback: void onRecognitionResumed()>
<org.xml.sax.ext.LexicalHandler: void endCDATA()>
<org.xml.sax.ext.LexicalHandler: void endEntity(java.lang.String)>
<org.xml.sax.ext.LexicalHandler: void startCDATA()>
<org.xml.sax.ext.LexicalHandler: void endDTD()>
<org.xml.sax.ext.LexicalHandler: void comment(char[],int,int)>
<org.xml.sax.ext.LexicalHandler: void startDTD(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.ext.LexicalHandler: void startEntity(java.lang.String)>
<android.icu.lang.UCharacter.UnicodeBlock: android.icu.lang.UCharacter.UnicodeBlock forName(java.lang.String)>
<android.icu.lang.UCharacter.UnicodeBlock: int getID()>
<android.icu.lang.UCharacter.UnicodeBlock: android.icu.lang.UCharacter.UnicodeBlock getInstance(int)>
<android.icu.lang.UCharacter.UnicodeBlock: android.icu.lang.UCharacter.UnicodeBlock of(int)>
<android.icu.util.UniversalTimeScale: android.icu.math.BigDecimal toBigDecimal(long,int)>
<android.icu.util.UniversalTimeScale: android.icu.math.BigDecimal bigDecimalFrom(double,int)>
<android.icu.util.UniversalTimeScale: android.icu.math.BigDecimal toBigDecimal(android.icu.math.BigDecimal,int)>
<android.icu.util.UniversalTimeScale: android.icu.math.BigDecimal bigDecimalFrom(android.icu.math.BigDecimal,int)>
<android.icu.util.UniversalTimeScale: long toLong(long,int)>
<android.icu.util.UniversalTimeScale: android.icu.math.BigDecimal bigDecimalFrom(long,int)>
<android.icu.util.UniversalTimeScale: long from(long,int)>
<android.icu.util.UniversalTimeScale: long getTimeScaleValue(int,int)>
<android.security.keystore.recovery.KeyChainProtectionParams.Builder: android.security.keystore.recovery.KeyChainProtectionParams.Builder setKeyDerivationParams(android.security.keystore.recovery.KeyDerivationParams)>
<android.security.keystore.recovery.KeyChainProtectionParams.Builder: android.security.keystore.recovery.KeyChainProtectionParams.Builder setLockScreenUiFormat(int)>
<android.security.keystore.recovery.KeyChainProtectionParams.Builder: android.security.keystore.recovery.KeyChainProtectionParams build()>
<android.security.keystore.recovery.KeyChainProtectionParams.Builder: android.security.keystore.recovery.KeyChainProtectionParams.Builder setSecret(byte[])>
<android.security.keystore.recovery.KeyChainProtectionParams.Builder: void <init>()>
<android.security.keystore.recovery.KeyChainProtectionParams.Builder: android.security.keystore.recovery.KeyChainProtectionParams.Builder setUserSecretType(int)>
<android.media.RemoteController: boolean setSynchronizationMode(int)>
<android.media.RemoteController: android.media.RemoteController.MetadataEditor editMetadata()>
<android.media.RemoteController: void <init>(android.content.Context,android.media.RemoteController.OnClientUpdateListener,android.os.Looper)>
<android.media.RemoteController: boolean sendMediaKeyEvent(android.view.KeyEvent)>
<android.media.RemoteController: boolean clearArtworkConfiguration()>
<android.media.RemoteController: long getEstimatedMediaPosition()>
<android.media.RemoteController: boolean seekTo(long)>
<android.media.RemoteController: void <init>(android.content.Context,android.media.RemoteController.OnClientUpdateListener)>
<android.media.RemoteController: boolean setArtworkConfiguration(int,int)>
<android.text.PrecomputedText: char charAt(int)>
<android.text.PrecomputedText: int getSpanEnd(java.lang.Object)>
<android.text.PrecomputedText: int nextSpanTransition(int,int,java.lang.Class)>
<android.text.PrecomputedText: int length()>
<android.text.PrecomputedText: int getParagraphCount()>
<android.text.PrecomputedText: int getParagraphEnd(int)>
<android.text.PrecomputedText: android.text.PrecomputedText.Params getParams()>
<android.text.PrecomputedText: int getParagraphStart(int)>
<android.text.PrecomputedText: CharSequence subSequence(int,int)>
<android.text.PrecomputedText: void getBounds(int,int,android.graphics.Rect)>
<android.text.PrecomputedText: int getSpanFlags(java.lang.Object)>
<android.text.PrecomputedText: T[] getSpans(int,int,java.lang.Class)>
<android.text.PrecomputedText: android.text.PrecomputedText create(CharSequence,android.text.PrecomputedText.Params)>
<android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
<android.text.PrecomputedText: int getSpanStart(java.lang.Object)>
<android.text.PrecomputedText: float getWidth(int,int)>
<android.text.PrecomputedText: void removeSpan(java.lang.Object)>
<java.security.DigestException: void <init>()>
<java.security.DigestException: void <init>(String,Throwable)>
<java.security.DigestException: void <init>(String)>
<java.security.DigestException: void <init>(Throwable)>
<android.content.pm.LabeledIntent: CharSequence loadLabel(android.content.pm.PackageManager)>
<android.content.pm.LabeledIntent: int getLabelResource()>
<android.content.pm.LabeledIntent: void <init>(String,int,int)>
<android.content.pm.LabeledIntent: void <init>(String,CharSequence,int)>
<android.content.pm.LabeledIntent: int getIconResource()>
<android.content.pm.LabeledIntent: CharSequence getNonLocalizedLabel()>
<android.content.pm.LabeledIntent: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.content.pm.LabeledIntent: void <init>(android.content.Intent,String,int,int)>
<android.content.pm.LabeledIntent: java.lang.String getSourcePackage()>
<android.content.pm.LabeledIntent: void <init>(android.content.Intent,String,CharSequence,int)>
<android.system.StructUtsname: void <init>(String,String,String,String,String)>
<android.companion.CompanionDeviceManager: java.util.List getAssociations()>
<android.companion.CompanionDeviceManager: void associate(android.companion.AssociationRequest,android.companion.CompanionDeviceManager.Callback,android.os.Handler)>
<android.companion.CompanionDeviceManager: void disassociate(java.lang.String)>
<android.companion.CompanionDeviceManager: void requestNotificationAccess(android.content.ComponentName)>
<android.companion.CompanionDeviceManager: boolean hasNotificationAccess(android.content.ComponentName)>
<android.media.AudioRecordingMonitor: void unregisterAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback)>
<android.media.AudioRecordingMonitor: void registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager.AudioRecordingCallback)>
<android.media.AudioRecordingMonitor: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()>
<android.hardware.radio.RadioManager.AmBandDescriptor: boolean isStereoSupported()>
<java.util.PrimitiveIterator.OfLong extends java.util.PrimitiveIterator: java.lang.Long next()>
<java.util.PrimitiveIterator.OfLong extends java.util.PrimitiveIterator: long nextLong()>
<java.util.PrimitiveIterator.OfLong extends java.util.PrimitiveIterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.PrimitiveIterator.OfLong extends java.util.PrimitiveIterator: void forEachRemaining(java.util.function.LongConsumer)>
<java.util.concurrent.ConcurrentHashMap: void forEach(long,java.util.function.BiConsumer)>
<java.util.concurrent.ConcurrentHashMap: void forEachKey(long,java.util.function.Function,java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap: U reduce(long,java.util.function.BiFunction,java.util.function.BiFunction)>
<java.util.concurrent.ConcurrentHashMap: void forEach(long,java.util.function.BiFunction,java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap: void forEachEntry(long,java.util.function.Function,java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap.KeySetView newKeySet(int)>
<java.util.concurrent.ConcurrentHashMap: V reduceValues(long,java.util.function.BiFunction)>
<java.util.concurrent.ConcurrentHashMap: void <init>(int)>
<java.util.concurrent.ConcurrentHashMap: K reduceKeys(long,java.util.function.BiFunction)>
<java.util.concurrent.ConcurrentHashMap: int reduceKeysToInt(long,java.util.function.ToIntFunction,int,java.util.function.IntBinaryOperator)>
<java.util.concurrent.ConcurrentHashMap: long reduceKeysToLong(long,java.util.function.ToLongFunction,long,java.util.function.LongBinaryOperator)>
<java.util.concurrent.ConcurrentHashMap: double reduceToDouble(long,java.util.function.ToDoubleBiFunction,double,java.util.function.DoubleBinaryOperator)>
<java.util.concurrent.ConcurrentHashMap: U searchKeys(long,java.util.function.Function)>
<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap.KeySetView newKeySet()>
<java.util.concurrent.ConcurrentHashMap: void <init>(java.util.Map)>
<java.util.concurrent.ConcurrentHashMap: java.util.Map.Entry reduceEntries(long,java.util.function.BiFunction)>
<java.util.concurrent.ConcurrentHashMap: U reduceEntries(long,java.util.function.Function,java.util.function.BiFunction)>
<java.util.concurrent.ConcurrentHashMap: java.util.Enumeration keys()>
<java.util.concurrent.ConcurrentHashMap: void forEachEntry(long,java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap: long mappingCount()>
<java.util.concurrent.ConcurrentHashMap: long reduceEntriesToLong(long,java.util.function.ToLongFunction,long,java.util.function.LongBinaryOperator)>
<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap.KeySetView keySet(V)>
<java.util.concurrent.ConcurrentHashMap: void <init>(int,float)>
<java.util.concurrent.ConcurrentHashMap: void forEachValue(long,java.util.function.Function,java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap: boolean contains(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: void <init>()>
<java.util.concurrent.ConcurrentHashMap: U reduceValues(long,java.util.function.Function,java.util.function.BiFunction)>
<java.util.concurrent.ConcurrentHashMap: U searchEntries(long,java.util.function.Function)>
<java.util.concurrent.ConcurrentHashMap: long reduceValuesToLong(long,java.util.function.ToLongFunction,long,java.util.function.LongBinaryOperator)>
<java.util.concurrent.ConcurrentHashMap: double reduceKeysToDouble(long,java.util.function.ToDoubleFunction,double,java.util.function.DoubleBinaryOperator)>
<java.util.concurrent.ConcurrentHashMap: java.util.Enumeration elements()>
<java.util.concurrent.ConcurrentHashMap: void forEachKey(long,java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap: void forEachValue(long,java.util.function.Consumer)>
<java.util.concurrent.ConcurrentHashMap: U searchValues(long,java.util.function.Function)>
<java.util.concurrent.ConcurrentHashMap: long reduceToLong(long,java.util.function.ToLongBiFunction,long,java.util.function.LongBinaryOperator)>
<java.util.concurrent.ConcurrentHashMap: U reduceKeys(long,java.util.function.Function,java.util.function.BiFunction)>
<java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>
<java.util.concurrent.ConcurrentHashMap: U search(long,java.util.function.BiFunction)>
<java.util.concurrent.ConcurrentHashMap: double reduceEntriesToDouble(long,java.util.function.ToDoubleFunction,double,java.util.function.DoubleBinaryOperator)>
<java.util.concurrent.ConcurrentHashMap: int reduceEntriesToInt(long,java.util.function.ToIntFunction,int,java.util.function.IntBinaryOperator)>
<java.util.concurrent.ConcurrentHashMap: int reduceToInt(long,java.util.function.ToIntBiFunction,int,java.util.function.IntBinaryOperator)>
<java.util.concurrent.ConcurrentHashMap: int reduceValuesToInt(long,java.util.function.ToIntFunction,int,java.util.function.IntBinaryOperator)>
<java.util.concurrent.ConcurrentHashMap: double reduceValuesToDouble(long,java.util.function.ToDoubleFunction,double,java.util.function.DoubleBinaryOperator)>
<android.media.MediaPlayer.OnSeekCompleteListener: void onSeekComplete(android.media.MediaPlayer)>
<org.xmlpull.v1.XmlPullParserException: void <init>(String,org.xmlpull.v1.XmlPullParser,Throwable)>
<org.xmlpull.v1.XmlPullParserException: int getColumnNumber()>
<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>
<org.xmlpull.v1.XmlPullParserException: int getLineNumber()>
<org.xmlpull.v1.XmlPullParserException: void <init>(String)>
<android.app.SearchManager.OnDismissListener: void onDismiss()>
<android.media.MediaRouter: void selectRoute(int,android.media.MediaRouter.RouteInfo)>
<android.media.MediaRouter: android.media.MediaRouter.UserRouteInfo createUserRoute(android.media.MediaRouter.RouteCategory)>
<android.media.MediaRouter: int getRouteCount()>
<android.media.MediaRouter: android.media.MediaRouter.RouteCategory createRouteCategory(CharSequence,boolean)>
<android.media.MediaRouter: android.media.MediaRouter.RouteInfo getSelectedRoute(int)>
<android.media.MediaRouter: void removeCallback(android.media.MediaRouter.Callback)>
<android.media.MediaRouter: android.media.MediaRouter.RouteCategory getCategoryAt(int)>
<android.media.MediaRouter: android.media.MediaRouter.RouteCategory createRouteCategory(int,boolean)>
<android.media.MediaRouter: int getCategoryCount()>
<android.media.MediaRouter: android.media.MediaRouter.RouteInfo getDefaultRoute()>
<android.media.MediaRouter: android.media.MediaRouter.RouteInfo getRouteAt(int)>
<android.media.MediaRouter: void addCallback(int,android.media.MediaRouter.Callback)>
<android.media.MediaRouter: void clearUserRoutes()>
<android.media.MediaRouter: void addCallback(int,android.media.MediaRouter.Callback,int)>
<android.media.MediaRouter: void removeUserRoute(android.media.MediaRouter.UserRouteInfo)>
<android.media.MediaRouter: void addUserRoute(android.media.MediaRouter.UserRouteInfo)>
<android.graphics.YuvImage: boolean compressToJpeg(android.graphics.Rect,int,java.io.OutputStream)>
<android.graphics.YuvImage: int getWidth()>
<android.graphics.YuvImage: int getHeight()>
<android.graphics.YuvImage: byte[] getYuvData()>
<android.graphics.YuvImage: int[] getStrides()>
<android.graphics.YuvImage: int getYuvFormat()>
<android.graphics.YuvImage: void <init>(byte[],int,int,int,int[])>
<android.widget.AlphabetIndexer: void <init>(android.database.Cursor,int,CharSequence)>
<android.widget.AlphabetIndexer: void setCursor(android.database.Cursor)>
<android.widget.AlphabetIndexer: java.lang.Object[] getSections()>
<android.widget.AlphabetIndexer: int getPositionForSection(int)>
<android.widget.AlphabetIndexer: int compare(java.lang.String,java.lang.String)>
<android.widget.AlphabetIndexer: int getSectionForPosition(int)>
<android.media.tv.TvInputService: java.lang.String onHardwareRemoved(android.media.tv.TvInputHardwareInfo)>
<android.media.tv.TvInputService: java.lang.String onHdmiDeviceRemoved(android.hardware.hdmi.HdmiDeviceInfo)>
<android.media.tv.TvInputService: android.media.tv.TvInputService.Session onCreateSession(java.lang.String)>
<android.media.tv.TvInputService: void <init>()>
<android.media.tv.TvInputService: android.media.tv.TvInputService.RecordingSession onCreateRecordingSession(java.lang.String)>
<android.media.tv.TvInputService: android.media.tv.TvInputInfo onHardwareAdded(android.media.tv.TvInputHardwareInfo)>
<android.media.tv.TvInputService: android.os.IBinder onBind(android.content.Intent)>
<android.media.tv.TvInputService: android.media.tv.TvInputInfo onHdmiDeviceAdded(android.hardware.hdmi.HdmiDeviceInfo)>
<android.telephony.NumberVerificationCallback: void onCallReceived(java.lang.String)>
<android.telephony.NumberVerificationCallback: void onVerificationFailed(int)>
<android.database.sqlite.SQLiteDiskIOException: void <init>()>
<android.database.sqlite.SQLiteDiskIOException: void <init>(String)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterEither(java.util.concurrent.CompletionStage,Runnable)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenAcceptAsync(java.util.function.Consumer)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterBothAsync(java.util.concurrent.CompletionStage,Runnable)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAsync(Runnable,java.util.concurrent.Executor)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenApply(java.util.function.Function)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenRunAsync(Runnable)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture anyOf(java.util.concurrent.CompletableFuture...)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture supplyAsync(java.util.function.Supplier)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenCombine(java.util.concurrent.CompletionStage,java.util.function.BiFunction)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture supplyAsync(java.util.function.Supplier,java.util.concurrent.Executor)>
<java.util.concurrent.CompletableFuture: void obtrudeValue(T)>
<java.util.concurrent.CompletableFuture: boolean isCompletedExceptionally()>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture handleAsync(java.util.function.BiFunction)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture applyToEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Function)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenApplyAsync(java.util.function.Function)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture applyToEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Function,java.util.concurrent.Executor)>
<java.util.concurrent.CompletableFuture: void obtrudeException(java.lang.Throwable)>
<java.util.concurrent.CompletableFuture: boolean isDone()>
<java.util.concurrent.CompletableFuture: boolean cancel(boolean)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenCombineAsync(java.util.concurrent.CompletionStage,java.util.function.BiFunction)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenAccept(java.util.function.Consumer)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenAcceptBothAsync(java.util.concurrent.CompletionStage,java.util.function.BiConsumer)>
<java.util.concurrent.CompletableFuture: T get()>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterEitherAsync(java.util.concurrent.CompletionStage,Runnable)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenAcceptBothAsync(java.util.concurrent.CompletionStage,java.util.function.BiConsumer,java.util.concurrent.Executor)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture allOf(java.util.concurrent.CompletableFuture...)>
<java.util.concurrent.CompletableFuture: boolean completeExceptionally(java.lang.Throwable)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenApplyAsync(java.util.function.Function,java.util.concurrent.Executor)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture whenCompleteAsync(java.util.function.BiConsumer)>
<java.util.concurrent.CompletableFuture: boolean isCancelled()>
<java.util.concurrent.CompletableFuture: T get(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterBothAsync(java.util.concurrent.CompletionStage,Runnable,java.util.concurrent.Executor)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture whenCompleteAsync(java.util.function.BiConsumer,java.util.concurrent.Executor)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenRunAsync(Runnable,java.util.concurrent.Executor)>
<java.util.concurrent.CompletableFuture: boolean complete(T)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture toCompletableFuture()>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture completedFuture(U)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterEitherAsync(java.util.concurrent.CompletionStage,Runnable,java.util.concurrent.Executor)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenComposeAsync(java.util.function.Function)>
<java.util.concurrent.CompletableFuture: T getNow(T)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture acceptEither(java.util.concurrent.CompletionStage,java.util.function.Consumer)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture whenComplete(java.util.function.BiConsumer)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture acceptEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Consumer,java.util.concurrent.Executor)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture applyToEither(java.util.concurrent.CompletionStage,java.util.function.Function)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture exceptionally(java.util.function.Function)>
<java.util.concurrent.CompletableFuture: T join()>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterBoth(java.util.concurrent.CompletionStage,Runnable)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAsync(Runnable)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenAcceptBoth(java.util.concurrent.CompletionStage,java.util.function.BiConsumer)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture handleAsync(java.util.function.BiFunction,java.util.concurrent.Executor)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenCompose(java.util.function.Function)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenCombineAsync(java.util.concurrent.CompletionStage,java.util.function.BiFunction,java.util.concurrent.Executor)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenAcceptAsync(java.util.function.Consumer,java.util.concurrent.Executor)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenRun(Runnable)>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture handle(java.util.function.BiFunction)>
<java.util.concurrent.CompletableFuture: int getNumberOfDependents()>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenComposeAsync(java.util.function.Function,java.util.concurrent.Executor)>
<java.util.concurrent.CompletableFuture: void <init>()>
<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture acceptEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Consumer)>
<android.telephony.ims.feature.ImsFeature.CapabilityCallbackProxy: void onChangeCapabilityConfigurationError(int,int,int)>
<android.media.audiofx.DynamicsProcessing.MbcBand: float getPreGain()>
<android.media.audiofx.DynamicsProcessing.MbcBand: float getRatio()>
<android.media.audiofx.DynamicsProcessing.MbcBand: float getReleaseTime()>
<android.media.audiofx.DynamicsProcessing.MbcBand: void setKneeWidth(float)>
<android.media.audiofx.DynamicsProcessing.MbcBand: float getNoiseGateThreshold()>
<android.media.audiofx.DynamicsProcessing.MbcBand: float getKneeWidth()>
<android.media.audiofx.DynamicsProcessing.MbcBand: float getPostGain()>
<android.media.audiofx.DynamicsProcessing.MbcBand: void setReleaseTime(float)>
<android.media.audiofx.DynamicsProcessing.MbcBand: void setThreshold(float)>
<android.media.audiofx.DynamicsProcessing.MbcBand: void setRatio(float)>
<android.media.audiofx.DynamicsProcessing.MbcBand: void setAttackTime(float)>
<android.media.audiofx.DynamicsProcessing.MbcBand: void setNoiseGateThreshold(float)>
<android.media.audiofx.DynamicsProcessing.MbcBand: void setPreGain(float)>
<android.media.audiofx.DynamicsProcessing.MbcBand: void setExpanderRatio(float)>
<android.media.audiofx.DynamicsProcessing.MbcBand: float getThreshold()>
<android.media.audiofx.DynamicsProcessing.MbcBand: void setPostGain(float)>
<android.media.audiofx.DynamicsProcessing.MbcBand: void <init>(android.media.audiofx.DynamicsProcessing.MbcBand)>
<android.media.audiofx.DynamicsProcessing.MbcBand: float getExpanderRatio()>
<android.media.audiofx.DynamicsProcessing.MbcBand: void <init>(boolean,float,float,float,float,float,float,float,float,float,float)>
<android.media.audiofx.DynamicsProcessing.MbcBand: float getAttackTime()>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)>
<javax.crypto.Cipher: int doFinal(byte[],int,int,byte[])>
<javax.crypto.Cipher: byte[] doFinal(byte[])>
<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>
<javax.crypto.Cipher: void updateAAD(java.nio.ByteBuffer)>
<javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)>
<javax.crypto.Cipher: int update(java.nio.ByteBuffer,java.nio.ByteBuffer)>
<javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom)>
<javax.crypto.Cipher: java.lang.String getAlgorithm()>
<javax.crypto.Cipher: void init(int,java.security.cert.Certificate)>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>
<javax.crypto.Cipher: void updateAAD(byte[])>
<javax.crypto.Cipher: int getOutputSize(int)>
<javax.crypto.Cipher: void init(int,java.security.Key)>
<javax.crypto.Cipher: void <init>(javax.crypto.CipherSpi,java.security.Provider,String)>
<javax.crypto.Cipher: byte[] update(byte[],int,int)>
<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>
<javax.crypto.Cipher: int doFinal(byte[],int)>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<javax.crypto.Cipher: int getBlockSize()>
<javax.crypto.Cipher: java.security.Provider getProvider()>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>
<javax.crypto.Cipher: void updateAAD(byte[],int,int)>
<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
<javax.crypto.Cipher: int update(byte[],int,int,byte[])>
<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()>
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int)>
<javax.crypto.Cipher: byte[] getIV()>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<javax.crypto.Cipher: byte[] wrap(java.security.Key)>
<javax.crypto.Cipher: int getMaxAllowedKeyLength(java.lang.String)>
<javax.crypto.Cipher: byte[] update(byte[])>
<javax.crypto.Cipher: java.security.spec.AlgorithmParameterSpec getMaxAllowedParameterSpec(java.lang.String)>
<javax.crypto.Cipher: byte[] doFinal()>
<javax.crypto.Cipher: javax.crypto.ExemptionMechanism getExemptionMechanism()>
<javax.net.ssl.X509KeyManager extends javax.net.ssl.KeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)>
<javax.net.ssl.X509KeyManager extends javax.net.ssl.KeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)>
<javax.net.ssl.X509KeyManager extends javax.net.ssl.KeyManager: java.lang.String[] getClientAliases(java.lang.String,java.security.Principal[])>
<javax.net.ssl.X509KeyManager extends javax.net.ssl.KeyManager: java.lang.String[] getServerAliases(java.lang.String,java.security.Principal[])>
<javax.net.ssl.X509KeyManager extends javax.net.ssl.KeyManager: java.lang.String chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)>
<javax.net.ssl.X509KeyManager extends javax.net.ssl.KeyManager: java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)>
<android.security.keystore.KeyExpiredException: void <init>(String)>
<android.security.keystore.KeyExpiredException: void <init>(String,Throwable)>
<android.security.keystore.KeyExpiredException: void <init>()>
<android.view.contentcapture.ContentCaptureSession: void destroy()>
<android.view.contentcapture.ContentCaptureSession: void close()>
<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureContext getContentCaptureContext()>
<android.view.contentcapture.ContentCaptureSession: void notifyViewAppeared(android.view.ViewStructure)>
<android.view.contentcapture.ContentCaptureSession: android.view.ViewStructure newViewStructure(android.view.View)>
<android.view.contentcapture.ContentCaptureSession: android.view.ViewStructure newVirtualViewStructure(android.view.autofill.AutofillId,long)>
<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureSessionId getContentCaptureSessionId()>
<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureSession createContentCaptureSession(android.view.contentcapture.ContentCaptureContext)>
<android.view.contentcapture.ContentCaptureSession: void setContentCaptureContext(android.view.contentcapture.ContentCaptureContext)>
<android.view.contentcapture.ContentCaptureSession: void notifyViewsDisappeared(android.view.autofill.AutofillId,long[])>
<android.view.contentcapture.ContentCaptureSession: void notifyViewTextChanged(android.view.autofill.AutofillId,CharSequence)>
<android.view.contentcapture.ContentCaptureSession: android.view.autofill.AutofillId newAutofillId(android.view.autofill.AutofillId,long)>
<android.view.contentcapture.ContentCaptureSession: void notifyViewDisappeared(android.view.autofill.AutofillId)>
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getCrtCoefficient()>
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.security.spec.RSAOtherPrimeInfo[])>
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPrimeExponentP()>
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPrimeP()>
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.security.spec.RSAOtherPrimeInfo[] getOtherPrimeInfo()>
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPrimeExponentQ()>
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPrimeQ()>
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPublicExponent()>
<android.telephony.TelephonyManager: android.telephony.TelephonyManager createForSubscriptionId(int)>
<android.telephony.TelephonyManager: int[] supplyPinReportResult(java.lang.String)>
<android.telephony.TelephonyManager: long getPreferredNetworkTypeBitmask()>
<android.telephony.TelephonyManager: boolean isConcurrentVoiceAndDataSupported()>
<android.telephony.TelephonyManager: boolean supplyPin(java.lang.String)>
<android.telephony.TelephonyManager: int getCallState()>
<android.telephony.TelephonyManager: boolean isTtyModeSupported()>
<android.telephony.TelephonyManager: java.lang.String getIsimDomain()>
<android.telephony.TelephonyManager: int getPreferredOpportunisticDataSubscription()>
<android.telephony.TelephonyManager: boolean handlePinMmi(java.lang.String)>
<android.telephony.TelephonyManager: int getSimApplicationState()>
<android.telephony.TelephonyManager: boolean switchSlots(int[])>
<android.telephony.TelephonyManager: void setNetworkSelectionModeAutomatic()>
<android.telephony.TelephonyManager: java.lang.String getTypeAllocationCode(int)>
<android.telephony.TelephonyManager: boolean iccCloseLogicalChannelBySlot(int,int)>
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduBasicChannelBySlot(int,int,int,int,int,int,java.lang.String)>
<android.telephony.TelephonyManager: java.lang.String getCdmaMdn()>
<android.telephony.TelephonyManager: java.util.List getCarrierPackageNamesForIntent(android.content.Intent)>
<android.telephony.TelephonyManager: boolean needsOtaServiceProvisioning()>
<android.telephony.TelephonyManager: boolean isDataConnectivityPossible()>
<android.telephony.TelephonyManager: java.lang.String getTypeAllocationCode()>
<android.telephony.TelephonyManager: boolean isVisualVoicemailEnabled(android.telecom.PhoneAccountHandle)>
<android.telephony.TelephonyManager: java.lang.String getImei(int)>
<android.telephony.TelephonyManager: CharSequence getSimCarrierIdName()>
<android.telephony.TelephonyManager: int getSimCarrierId()>
<android.telephony.TelephonyManager: int checkCarrierPrivilegesForPackageAnyPhone(java.lang.String)>
<android.telephony.TelephonyManager: void setCarrierTestOverride(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String)>
<android.telephony.TelephonyManager: long getMaxNumberVerificationTimeoutMillis()>
<android.telephony.TelephonyManager: java.util.Locale getSimLocale()>
<android.telephony.TelephonyManager: int setAllowedCarriers(int,java.util.List)>
<android.telephony.TelephonyManager: java.lang.String getDeviceId(int)>
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>
<android.telephony.TelephonyManager: boolean setVoiceMailNumber(java.lang.String,java.lang.String)>
<android.telephony.TelephonyManager: android.telephony.ServiceState getServiceState()>
<android.telephony.TelephonyManager: void enableVideoCalling(boolean)>
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>
<android.telephony.TelephonyManager: java.lang.String[] getForbiddenPlmns()>
<android.telephony.TelephonyManager: void setCarrierDataEnabled(boolean)>
<android.telephony.TelephonyManager: android.telephony.SignalStrength getSignalStrength()>
<android.telephony.TelephonyManager: boolean canChangeDtmfToneLength()>
<android.telephony.TelephonyManager: int getSimState(int)>
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String)>
<android.telephony.TelephonyManager: java.lang.String getIccAuthentication(int,int,java.lang.String)>
<android.telephony.TelephonyManager: boolean setRadio(boolean)>
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>
<android.telephony.TelephonyManager: int[] supplyPukReportResult(java.lang.String,java.lang.String)>
<android.telephony.TelephonyManager: boolean setLine1NumberForDisplay(java.lang.String,java.lang.String)>
<android.telephony.TelephonyManager: void refreshUiccProfile()>
<android.telephony.TelephonyManager: boolean isDataRoamingEnabled()>
<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannelBySlot(int,java.lang.String,int)>
<android.telephony.TelephonyManager: int getPhoneCount()>
<android.telephony.TelephonyManager: boolean hasIccCard()>
<android.telephony.TelephonyManager: boolean resetRadioConfig()>
<android.telephony.TelephonyManager: java.lang.String getMeid(int)>
<android.telephony.TelephonyManager: int getCarrierIdListVersion()>
<android.telephony.TelephonyManager: boolean isOffhook()>
<android.telephony.TelephonyManager: boolean isRadioOn()>
<android.telephony.TelephonyManager: java.util.List getUiccCardsInfo()>
<android.telephony.TelephonyManager: java.lang.String sendEnvelopeWithStatus(java.lang.String)>
<android.telephony.TelephonyManager: boolean isRttSupported()>
<android.telephony.TelephonyManager: void sendUssdRequest(java.lang.String,android.telephony.TelephonyManager.UssdResponseCallback,android.os.Handler)>
<android.telephony.TelephonyManager: boolean isIdle()>
<android.telephony.TelephonyManager: int isMultiSimSupported()>
<android.telephony.TelephonyManager: int getCarrierIdFromSimMccMnc()>
<android.telephony.TelephonyManager: java.util.Map getEmergencyNumberList()>
<android.telephony.TelephonyManager: java.lang.String getNai()>
<android.telephony.TelephonyManager: java.lang.String getMmsUserAgent()>
<android.telephony.TelephonyManager: int checkCarrierPrivilegesForPackage(java.lang.String)>
<android.telephony.TelephonyManager: void setVoiceActivationState(int)>
<android.telephony.TelephonyManager: boolean setRadioPower(boolean)>
<android.telephony.TelephonyManager: android.util.Pair getRadioHalVersion()>
<android.telephony.TelephonyManager: boolean setPreferredNetworkTypeBitmask(long)>
<android.telephony.TelephonyManager: int getDataState()>
<android.telephony.TelephonyManager: boolean getEmergencyCallbackMode()>
<android.telephony.TelephonyManager: boolean handlePinMmiForSubscriber(int,java.lang.String)>
<android.telephony.TelephonyManager: boolean isVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle)>
<android.telephony.TelephonyManager: void updateServiceLocation()>
<android.telephony.TelephonyManager: int getVoiceActivationState()>
<android.telephony.TelephonyManager: boolean isVideoCallingEnabled()>
<android.telephony.TelephonyManager: java.lang.String getCdmaMin()>
<android.telephony.TelephonyManager: java.lang.String getManufacturerCode(int)>
<android.telephony.TelephonyManager: android.telephony.CarrierRestrictionRules getCarrierRestrictionRules()>
<android.telephony.TelephonyManager: boolean isRinging()>
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()>
<android.telephony.TelephonyManager: void setCarrierTestOverride(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.telephony.TelephonyManager: int getDataActivity()>
<android.telephony.TelephonyManager: java.util.List getTelephonyHistograms()>
<android.telephony.TelephonyManager: void setPreferredOpportunisticDataSubscription(int,boolean,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.telephony.TelephonyManager: void updateAvailableNetworks(java.util.List,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.telephony.TelephonyManager: java.lang.String getManufacturerCode()>
<android.telephony.TelephonyManager: boolean isNetworkRoaming()>
<android.telephony.TelephonyManager: boolean supplyPuk(java.lang.String,java.lang.String)>
<android.telephony.TelephonyManager: boolean getDataEnabled()>
<android.telephony.TelephonyManager: int getSimCardState()>
<android.telephony.TelephonyManager: void requestNumberVerification(android.telephony.PhoneNumberRange,long,java.util.concurrent.Executor,android.telephony.NumberVerificationCallback)>
<android.telephony.TelephonyManager: boolean rebootRadio()>
<android.telephony.TelephonyManager: boolean doesSwitchMultiSimConfigTriggerReboot()>
<android.telephony.TelephonyManager: boolean isWorldPhone()>
<android.telephony.TelephonyManager: boolean setNetworkSelectionModeManual(java.lang.String,boolean)>
<android.telephony.TelephonyManager: long getSupportedRadioAccessFamily()>
<android.telephony.TelephonyManager: void switchMultiSimConfig(int)>
<android.telephony.TelephonyManager: void setSimPowerStateForSlot(int,int)>
<android.telephony.TelephonyManager: byte[] iccExchangeSimIO(int,int,int,int,int,java.lang.String)>
<android.telephony.TelephonyManager: boolean enableDataConnectivity()>
<android.telephony.TelephonyManager: java.lang.String getCdmaPrlVersion()>
<android.telephony.TelephonyManager: void requestCellInfoUpdate(android.os.WorkSource,java.util.concurrent.Executor,android.telephony.TelephonyManager.CellInfoCallback)>
<android.telephony.TelephonyManager: boolean getDataEnabled(int)>
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()>
<android.telephony.TelephonyManager: void sendVisualVoicemailSms(java.lang.String,int,java.lang.String,android.app.PendingIntent)>
<android.telephony.TelephonyManager: java.lang.String getCdmaMin(int)>
<android.telephony.TelephonyManager: int getCardIdForDefaultEuicc()>
<android.telephony.TelephonyManager: void setVoicemailRingtoneUri(android.telecom.PhoneAccountHandle,android.net.Uri)>
<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1()>
<android.telephony.TelephonyManager: boolean isPotentialEmergencyNumber(java.lang.String)>
<android.telephony.TelephonyManager: java.lang.String getNetworkSpecifier()>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>
<android.telephony.TelephonyManager: int setCarrierRestrictionRules(android.telephony.CarrierRestrictionRules)>
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>
<android.telephony.TelephonyManager: java.util.Map getLogicalToPhysicalSlotMapping()>
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>
<android.telephony.TelephonyManager: int getPhoneType()>
<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String,int)>
<android.telephony.TelephonyManager: java.lang.String getCdmaMdn(int)>
<android.telephony.TelephonyManager: boolean isEmergencyAssistanceEnabled()>
<android.telephony.TelephonyManager: java.lang.String getMmsUAProfUrl()>
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
<android.telephony.TelephonyManager: java.lang.String getMeid()>
<android.telephony.TelephonyManager: void dial(java.lang.String)>
<android.telephony.TelephonyManager: android.telephony.UiccSlotInfo[] getUiccSlotsInfo()>
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()>
<android.telephony.TelephonyManager: android.net.Uri getVoicemailRingtoneUri(android.telecom.PhoneAccountHandle)>
<android.telephony.TelephonyManager: CharSequence getSimSpecificCarrierIdName()>
<android.telephony.TelephonyManager: java.lang.String getImei()>
<android.telephony.TelephonyManager: java.lang.String getIsimIst()>
<android.telephony.TelephonyManager: void setSimPowerState(int)>
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>
<android.telephony.TelephonyManager: int getSimState()>
<android.telephony.TelephonyManager: boolean isDataEnabled()>
<android.telephony.TelephonyManager: java.util.List getCarrierPackageNamesForIntentAndPhone(android.content.Intent,int)>
<android.telephony.TelephonyManager: android.os.Bundle getVisualVoicemailSettings()>
<android.telephony.TelephonyManager: void setDataRoamingEnabled(boolean)>
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String)>
<android.telephony.TelephonyManager: int getDataActivationState()>
<android.telephony.TelephonyManager: void setDataEnabled(int,boolean)>
<android.telephony.TelephonyManager: boolean hasCarrierPrivileges()>
<android.telephony.TelephonyManager: boolean isHearingAidCompatibilitySupported()>
<android.telephony.TelephonyManager: int getRadioPowerState()>
<android.telephony.TelephonyManager: void setVisualVoicemailEnabled(android.telecom.PhoneAccountHandle,boolean)>
<android.telephony.TelephonyManager: void toggleRadioOnOff()>
<android.telephony.TelephonyManager: boolean setOperatorBrandOverride(java.lang.String)>
<android.telephony.TelephonyManager: void setDataEnabled(boolean)>
<android.telephony.TelephonyManager: java.util.Map getEmergencyNumberList(int)>
<android.telephony.TelephonyManager: java.lang.String getVisualVoicemailPackageName()>
<android.telephony.TelephonyManager: boolean enableModemForSlot(int,boolean)>
<android.telephony.TelephonyManager: void setVisualVoicemailSmsFilterSettings(android.telephony.VisualVoicemailSmsFilterSettings)>
<android.telephony.TelephonyManager: android.telephony.TelephonyManager createForPhoneAccountHandle(android.telecom.PhoneAccountHandle)>
<android.telephony.TelephonyManager: android.telephony.NetworkScan requestNetworkScan(android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager.NetworkScanCallback)>
<android.telephony.TelephonyManager: java.util.List getAllowedCarriers(int)>
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>
<android.telephony.TelephonyManager: boolean setPreferredNetworkTypeToGlobal()>
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>
<android.telephony.TelephonyManager: int getSimSpecificCarrierId()>
<android.telephony.TelephonyManager: boolean isVoiceCapable()>
<android.telephony.TelephonyManager: int getCurrentPhoneType()>
<android.telephony.TelephonyManager: android.os.PersistableBundle getCarrierConfig()>
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>
<android.telephony.TelephonyManager: void requestCellInfoUpdate(java.util.concurrent.Executor,android.telephony.TelephonyManager.CellInfoCallback)>
<android.telephony.TelephonyManager: int getCurrentPhoneType(int)>
<android.telephony.TelephonyManager: java.lang.String getAidForAppType(int)>
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduLogicalChannelBySlot(int,int,int,int,int,int,int,java.lang.String)>
<android.telephony.TelephonyManager: void sendDialerSpecialCode(java.lang.String)>
<android.telephony.TelephonyManager: int getVoiceNetworkType()>
<android.telephony.TelephonyManager: boolean isEmergencyNumber(java.lang.String)>
<android.telephony.TelephonyManager: int getNetworkType()>
<android.telephony.TelephonyManager: void setVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle,boolean)>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>
<android.telephony.TelephonyManager: int getDataNetworkType()>
<android.telephony.TelephonyManager: boolean iccCloseLogicalChannel(int)>
<android.telephony.TelephonyManager: void call(java.lang.String,java.lang.String)>
<android.telephony.TelephonyManager: void setDataActivationState(int)>
<android.telephony.TelephonyManager: boolean disableDataConnectivity()>
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>
<android.telephony.TelephonyManager: void setMultiSimCarrierRestriction(boolean)>
<android.telephony.TelephonyManager: boolean isSmsCapable()>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setUserAuthenticationValidityDurationSeconds(int)>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setDigests(java.lang.String...)>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setKeyValidityForConsumptionEnd(java.util.Date)>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setRandomizedEncryptionRequired(boolean)>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setUserConfirmationRequired(boolean)>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setUserAuthenticationRequired(boolean)>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setBoundToSpecificSecureUserId(long)>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setEncryptionPaddings(java.lang.String...)>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setUserAuthenticationValidWhileOnBody(boolean)>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setBlockModes(java.lang.String...)>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setKeyValidityStart(java.util.Date)>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection build()>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setKeyValidityForOriginationEnd(java.util.Date)>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setKeyValidityEnd(java.util.Date)>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setUserPresenceRequired(boolean)>
<android.security.keystore.KeyProtection.Builder: void <init>(int)>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setInvalidatedByBiometricEnrollment(boolean)>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setSignaturePaddings(java.lang.String...)>
<android.security.keystore.KeyProtection.Builder: android.security.keystore.KeyProtection.Builder setUnlockedDeviceRequired(boolean)>
<android.speech.tts.SynthesisCallback: int getMaxBufferSize()>
<android.speech.tts.SynthesisCallback: void error(int)>
<android.speech.tts.SynthesisCallback: int audioAvailable(byte[],int,int)>
<android.speech.tts.SynthesisCallback: boolean hasStarted()>
<android.speech.tts.SynthesisCallback: void rangeStart(int,int,int)>
<android.speech.tts.SynthesisCallback: int start(int,int,int)>
<android.speech.tts.SynthesisCallback: int done()>
<android.speech.tts.SynthesisCallback: boolean hasFinished()>
<android.speech.tts.SynthesisCallback: void error()>
<android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setWillPauseWhenDucked(boolean)>
<android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest build()>
<android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAcceptsDelayedFocusGain(boolean)>
<android.media.AudioFocusRequest.Builder: void <init>(int)>
<android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setForceDucking(boolean)>
<android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setFocusGain(int)>
<android.media.AudioFocusRequest.Builder: void <init>(android.media.AudioFocusRequest)>
<android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener,android.os.Handler)>
<android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setLocksFocus(boolean)>
<android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setAudioAttributes(android.media.AudioAttributes)>
<android.media.AudioFocusRequest.Builder: android.media.AudioFocusRequest.Builder setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)>
<java.util.function.IntSupplier: int getAsInt()>
<android.util.ArrayMap: void ensureCapacity(int)>
<android.util.ArrayMap: void <init>(int)>
<android.util.ArrayMap: boolean containsValue(java.lang.Object)>
<android.util.ArrayMap: V remove(java.lang.Object)>
<android.util.ArrayMap: java.util.Set entrySet()>
<android.util.ArrayMap: int indexOfKey(java.lang.Object)>
<android.util.ArrayMap: void <init>(android.util.ArrayMap)>
<android.util.ArrayMap: V get(java.lang.Object)>
<android.util.ArrayMap: java.util.Set keySet()>
<android.util.ArrayMap: void clear()>
<android.util.ArrayMap: boolean containsAll(java.util.Collection)>
<android.util.ArrayMap: V removeAt(int)>
<android.util.ArrayMap: void <init>()>
<android.util.ArrayMap: K keyAt(int)>
<android.util.ArrayMap: void putAll(android.util.ArrayMap)>
<android.util.ArrayMap: boolean isEmpty()>
<android.util.ArrayMap: V setValueAt(int,V)>
<android.util.ArrayMap: java.util.Collection values()>
<android.util.ArrayMap: V valueAt(int)>
<android.util.ArrayMap: int indexOfValue(java.lang.Object)>
<android.util.ArrayMap: boolean retainAll(java.util.Collection)>
<android.util.ArrayMap: V put(K,V)>
<android.util.ArrayMap: int size()>
<android.util.ArrayMap: boolean removeAll(java.util.Collection)>
<android.util.ArrayMap: void putAll(java.util.Map)>
<android.util.ArrayMap: boolean containsKey(java.lang.Object)>
<android.widget.FrameLayout.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.widget.FrameLayout.LayoutParams: void <init>(int,int)>
<android.widget.FrameLayout.LayoutParams: void <init>(android.view.ViewGroup.MarginLayoutParams)>
<android.widget.FrameLayout.LayoutParams: void <init>(android.widget.FrameLayout.LayoutParams)>
<android.widget.FrameLayout.LayoutParams: void <init>(int,int,int)>
<android.widget.FrameLayout.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.renderscript.Long3: void <init>()>
<android.renderscript.Long3: void <init>(long,long,long)>
<android.renderscript.Long2: void <init>(long,long)>
<android.renderscript.Long2: void <init>()>
<android.app.admin.SystemUpdateInfo: int describeContents()>
<android.app.admin.SystemUpdateInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.SystemUpdateInfo: int getSecurityPatchState()>
<android.app.admin.SystemUpdateInfo: long getReceivedTime()>
<android.renderscript.Long4: void <init>(long,long,long,long)>
<android.renderscript.Long4: void <init>()>
<android.graphics.pdf.PdfRenderer.Page: int getWidth()>
<android.graphics.pdf.PdfRenderer.Page: int getIndex()>
<android.graphics.pdf.PdfRenderer.Page: void render(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Matrix,int)>
<android.graphics.pdf.PdfRenderer.Page: int getHeight()>
<android.graphics.pdf.PdfRenderer.Page: void close()>
<android.view.GestureDetector.OnDoubleTapListener: boolean onSingleTapConfirmed(android.view.MotionEvent)>
<android.view.GestureDetector.OnDoubleTapListener: boolean onDoubleTap(android.view.MotionEvent)>
<android.view.GestureDetector.OnDoubleTapListener: boolean onDoubleTapEvent(android.view.MotionEvent)>
<android.text.style.BackgroundColorSpan: void <init>(@ColorInt int)>
<android.text.style.BackgroundColorSpan: int describeContents()>
<android.text.style.BackgroundColorSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.BackgroundColorSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.BackgroundColorSpan: void <init>(android.os.Parcel)>
<android.text.style.BackgroundColorSpan: int getBackgroundColor()>
<android.text.style.BackgroundColorSpan: int getSpanTypeId()>
<android.transition.Slide: void <init>()>
<android.transition.Slide: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.Slide: void <init>(int)>
<android.transition.Slide: void setSlideEdge(int)>
<android.transition.Slide: int getSlideEdge()>
<android.view.inputmethod.ExtractedText: int describeContents()>
<android.view.inputmethod.ExtractedText: void <init>()>
<android.view.inputmethod.ExtractedText: void writeToParcel(android.os.Parcel,int)>
<android.view.TextureView: void unlockCanvasAndPost(android.graphics.Canvas)>
<android.view.TextureView: android.graphics.SurfaceTexture getSurfaceTexture()>
<android.view.TextureView: void setSurfaceTexture(android.graphics.SurfaceTexture)>
<android.view.TextureView: void onDraw(android.graphics.Canvas)>
<android.view.TextureView: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.view.TextureView: android.graphics.Bitmap getBitmap(android.graphics.Bitmap)>
<android.view.TextureView: void <init>(android.content.Context)>
<android.view.TextureView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.view.TextureView: void draw(android.graphics.Canvas)>
<android.view.TextureView: android.view.TextureView.SurfaceTextureListener getSurfaceTextureListener()>
<android.view.TextureView: android.graphics.Matrix getTransform(android.graphics.Matrix)>
<android.view.TextureView: void setSurfaceTextureListener(android.view.TextureView.SurfaceTextureListener)>
<android.view.TextureView: android.graphics.Bitmap getBitmap()>
<android.view.TextureView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.view.TextureView: android.graphics.Bitmap getBitmap(int,int)>
<android.view.TextureView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.TextureView: boolean isAvailable()>
<android.view.TextureView: void setTransform(android.graphics.Matrix)>
<android.view.TextureView: android.graphics.Canvas lockCanvas(android.graphics.Rect)>
<android.view.TextureView: void setOpaque(boolean)>
<android.view.TextureView: android.graphics.Canvas lockCanvas()>
<android.hardware.display.AmbientBrightnessDayStats: float[] getBucketBoundaries()>
<android.hardware.display.AmbientBrightnessDayStats: float[] getStats()>
<android.hardware.display.AmbientBrightnessDayStats: void writeToParcel(android.os.Parcel,int)>
<android.hardware.display.AmbientBrightnessDayStats: java.time.LocalDate getLocalDate()>
<android.hardware.display.AmbientBrightnessDayStats: int describeContents()>
<android.mtp.MtpConstants: void <init>()>
<android.mtp.MtpConstants: boolean isAbstractObject(int)>
<android.media.AudioRecord.OnRoutingChangedListener extends android.media.AudioRouting.OnRoutingChangedListener: void onRoutingChanged(android.media.AudioRouting)>
<android.media.AudioRecord.OnRoutingChangedListener extends android.media.AudioRouting.OnRoutingChangedListener: void onRoutingChanged(android.media.AudioRecord)>
<android.database.sqlite.SQLiteMisuseException: void <init>()>
<android.database.sqlite.SQLiteMisuseException: void <init>(String)>
<java.beans.IndexedPropertyChangeEvent: void <init>(Object,String,Object,Object,int)>
<java.beans.IndexedPropertyChangeEvent: int getIndex()>
<android.util.Base64: java.lang.String encodeToString(byte[],int)>
<android.util.Base64: java.lang.String encodeToString(byte[],int,int,int)>
<android.util.Base64: byte[] decode(byte[],int,int,int)>
<android.util.Base64: byte[] encode(byte[],int,int,int)>
<android.util.Base64: byte[] decode(java.lang.String,int)>
<android.util.Base64: byte[] decode(byte[],int)>
<android.util.Base64: byte[] encode(byte[],int)>
<android.opengl.Matrix: void <init>()>
<android.opengl.Matrix: void scaleM(float[],int,float[],int,float,float,float)>
<android.opengl.Matrix: void setLookAtM(float[],int,float,float,float,float,float,float,float,float,float)>
<android.opengl.Matrix: void multiplyMV(float[],int,float[],int,float[],int)>
<android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>
<android.opengl.Matrix: void setRotateM(float[],int,float,float,float,float)>
<android.opengl.Matrix: void perspectiveM(float[],int,float,float,float,float)>
<android.opengl.Matrix: void rotateM(float[],int,float,float,float,float)>
<android.opengl.Matrix: void rotateM(float[],int,float[],int,float,float,float,float)>
<android.opengl.Matrix: boolean invertM(float[],int,float[],int)>
<android.opengl.Matrix: void translateM(float[],int,float[],int,float,float,float)>
<android.opengl.Matrix: void orthoM(float[],int,float,float,float,float,float,float)>
<android.opengl.Matrix: void setIdentityM(float[],int)>
<android.opengl.Matrix: void transposeM(float[],int,float[],int)>
<android.opengl.Matrix: void frustumM(float[],int,float,float,float,float,float,float)>
<android.opengl.Matrix: void setRotateEulerM(float[],int,float,float,float)>
<android.opengl.Matrix: void scaleM(float[],int,float,float,float)>
<android.opengl.Matrix: void translateM(float[],int,float,float,float)>
<android.opengl.Matrix: float length(float,float,float)>
<android.app.Activity: void unregisterForContextMenu(android.view.View)>
<android.app.Activity: void setVisible(boolean)>
<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode.Callback,int)>
<android.app.Activity: boolean onCreateThumbnail(android.graphics.Bitmap,android.graphics.Canvas)>
<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode.Callback)>
<android.app.Activity: void onStart()>
<android.app.Activity: void onDestroy()>
<android.app.Activity: boolean releaseInstance()>
<android.app.Activity: void setEnterSharedElementCallback(android.app.SharedElementCallback)>
<android.app.Activity: void onGetDirectActions(android.os.CancellationSignal,java.util.function.Consumer)>
<android.app.Activity: void startLockTask()>
<android.app.Activity: boolean isDestroyed()>
<android.app.Activity: void finishActivity(int)>
<android.app.Activity: void onPerformDirectAction(java.lang.String,android.os.Bundle,android.os.CancellationSignal,java.util.function.Consumer)>
<android.app.Activity: void onPostResume()>
<android.app.Activity: void onChildTitleChanged(android.app.Activity,CharSequence)>
<android.app.Activity: boolean showAssist(android.os.Bundle)>
<android.app.Activity: int getMaxNumPictureInPictureActions()>
<android.app.Activity: void onActionModeStarted(android.view.ActionMode)>
<android.app.Activity: boolean isInMultiWindowMode()>
<android.app.Activity: android.view.WindowManager getWindowManager()>
<android.app.Activity: boolean onSearchRequested(android.view.SearchEvent)>
<android.app.Activity: void onVisibleBehindCanceled()>
<android.app.Activity: boolean isActivityTransitionRunning()>
<android.app.Activity: android.net.Uri onProvideReferrer()>
<android.app.Activity: void setVrModeEnabled(boolean,android.content.ComponentName)>
<android.app.Activity: void setTitle(int)>
<android.app.Activity: boolean moveTaskToBack(boolean)>
<android.app.Activity: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)>
<android.app.Activity: android.app.ActionBar getActionBar()>
<android.app.Activity: void stopLocalVoiceInteraction()>
<android.app.Activity: android.content.Intent getParentActivityIntent()>
<android.app.Activity: android.view.View onCreatePanelView(int)>
<android.app.Activity: void <init>()>
<android.app.Activity: void onActionModeFinished(android.view.ActionMode)>
<android.app.Activity: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()>
<android.app.Activity: void registerForContextMenu(android.view.View)>
<android.app.Activity: android.transition.Scene getContentScene()>
<android.app.Activity: void requestShowKeyboardShortcuts()>
<android.app.Activity: boolean onPrepareOptionsMenu(android.view.Menu)>
<android.app.Activity: void showLockTaskEscapeMessage()>
<android.app.Activity: boolean enterPictureInPictureMode(android.app.PictureInPictureParams)>
<android.app.Activity: void setFeatureDrawableUri(int,android.net.Uri)>
<android.app.Activity: boolean startNextMatchingActivity(@RequiresPermissionandroid.content.Intent)>
<android.app.Activity: void setInheritShowWhenLocked(boolean)>
<android.app.Activity: void startActivityFromChild(android.app.Activity,@RequiresPermissionandroid.content.Intent,int)>
<android.app.Activity: int getChangingConfigurations()>
<android.app.Activity: void setProgressBarIndeterminate(boolean)>
<android.app.Activity: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.app.Activity: boolean convertToTranslucent(android.app.Activity.TranslucentConversionListener,android.app.ActivityOptions)>
<android.app.Activity: void openContextMenu(android.view.View)>
<android.app.Activity: void setExitSharedElementCallback(android.app.SharedElementCallback)>
<android.app.Activity: void enterPictureInPictureMode()>
<android.app.Activity: boolean onKeyDown(int,android.view.KeyEvent)>
<android.app.Activity: android.content.ComponentName getCallingActivity()>
<android.app.Activity: void onLowMemory()>
<android.app.Activity: void onSaveInstanceState(android.os.Bundle)>
<android.app.Activity: void startLocalVoiceInteraction(android.os.Bundle)>
<android.app.Activity: void requestPermissions(java.lang.String[],int)>
<android.app.Activity: void onPause()>
<android.app.Activity: android.view.View getCurrentFocus()>
<android.app.Activity: boolean onTrackballEvent(android.view.MotionEvent)>
<android.app.Activity: void unregisterActivityLifecycleCallbacks(android.app.Application.ActivityLifecycleCallbacks)>
<android.app.Activity: void setIntent(android.content.Intent)>
<android.app.Activity: void onResume()>
<android.app.Activity: void onRestart()>
<android.app.Activity: void onPrepareDialog(int,android.app.Dialog,android.os.Bundle)>
<android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback,int)>
<android.app.Activity: void registerActivityLifecycleCallbacks(android.app.Application.ActivityLifecycleCallbacks)>
<android.app.Activity: void setProgress(int)>
<android.app.Activity: boolean onNavigateUpFromChild(android.app.Activity)>
<android.app.Activity: android.content.Intent getIntent()>
<android.app.Activity: android.app.Activity getParent()>
<android.app.Activity: CharSequence onCreateDescription()>
<android.app.Activity: void setSecondaryProgress(int)>
<android.app.Activity: void setDefaultKeyMode(int)>
<android.app.Activity: void finishAffinity()>
<android.app.Activity: boolean navigateUpTo(android.content.Intent)>
<android.app.Activity: void setMediaController(android.media.session.MediaController)>
<android.app.Activity: android.app.Application getApplication()>
<android.app.Activity: void onAttachFragment(android.app.Fragment)>
<android.app.Activity: int getVolumeControlStream()>
<android.app.Activity: void setTurnScreenOn(boolean)>
<android.app.Activity: void onBackPressed()>
<android.app.Activity: boolean onCreatePanelMenu(int,android.view.Menu)>
<android.app.Activity: void finishAndRemoveTask()>
<android.app.Activity: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.app.Activity: void onConfigurationChanged(android.content.res.Configuration)>
<android.app.Activity: void startPostponedEnterTransition()>
<android.app.Activity: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.app.Activity: T requireViewById(@IdResint)>
<android.app.Activity: boolean onContextItemSelected(android.view.MenuItem)>
<android.app.Activity: void setTitle(CharSequence)>
<android.app.Activity: void dismissDialog(int)>
<android.app.Activity: void onWindowAttributesChanged(android.view.WindowManager.LayoutParams)>
<android.app.Activity: java.lang.Object onRetainNonConfigurationInstance()>
<android.app.Activity: void setContentView(android.view.View)>
<android.app.Activity: CharSequence getTitle()>
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,@RequiresPermissionandroid.content.Intent,int,android.os.Bundle)>
<android.app.Activity: void setResult(int)>
<android.app.Activity: void onCreate(android.os.Bundle,android.os.PersistableBundle)>
<android.app.Activity: android.view.Window getWindow()>
<android.app.Activity: android.app.LoaderManager getLoaderManager()>
<android.app.Activity: void onEnterAnimationComplete()>
<android.app.Activity: void setVolumeControlStream(int)>
<android.app.Activity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)>
<android.app.Activity: void onMovedToDisplay(int,android.content.res.Configuration)>
<android.app.Activity: android.content.SharedPreferences getPreferences(int)>
<android.app.Activity: void onActivityReenter(int,android.content.Intent)>
<android.app.Activity: void onLocalVoiceInteractionStopped()>
<android.app.Activity: void setProgressBarVisibility(boolean)>
<android.app.Activity: boolean hasWindowFocus()>
<android.app.Activity: void onOptionsMenuClosed(android.view.Menu)>
<android.app.Activity: boolean startActivityIfNeeded(@RequiresPermissionandroid.content.Intent,int,android.os.Bundle)>
<android.app.Activity: int getRequestedOrientation()>
<android.app.Activity: void setContentTransitionManager(android.transition.TransitionManager)>
<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.app.Activity: android.app.PendingIntent createPendingResult(int,android.content.Intent,int)>
<android.app.Activity: void setImmersive(boolean)>
<android.app.Activity: boolean isImmersive()>
<android.app.Activity: boolean startNextMatchingActivity(@RequiresPermissionandroid.content.Intent,android.os.Bundle)>
<android.app.Activity: T findViewById(@IdResint)>
<android.app.Activity: void convertFromTranslucent()>
<android.app.Activity: void onMultiWindowModeChanged(boolean)>
<android.app.Activity: void onSaveInstanceState(android.os.Bundle,android.os.PersistableBundle)>
<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)>
<android.app.Activity: void onUserLeaveHint()>
<android.app.Activity: void onProvideAssistContent(android.app.assist.AssistContent)>
<android.app.Activity: boolean onSearchRequested()>
<android.app.Activity: boolean onTouchEvent(android.view.MotionEvent)>
<android.app.Activity: void onUserInteraction()>
<android.app.Activity: void takeKeyEvents(boolean)>
<android.app.Activity: void setActionBar(android.widget.Toolbar)>
<android.app.Activity: boolean onNavigateUp()>
<android.app.Activity: void onCreate(android.os.Bundle)>
<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.Activity: void setFeatureDrawableAlpha(int,int)>
<android.app.Activity: void finishActivityFromChild(android.app.Activity,int)>
<android.app.Activity: void removeDialog(int)>
<android.app.Activity: int getTaskId()>
<android.app.Activity: void setTaskDescription(android.app.ActivityManager.TaskDescription)>
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>
<android.app.Activity: void recreate()>
<android.app.Activity: void postponeEnterTransition()>
<android.app.Activity: void overridePendingTransition(int,int)>
<android.app.Activity: void showDialog(int)>
<android.app.Activity: void stopLockTask()>
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>
<android.app.Activity: boolean shouldUpRecreateTask(android.content.Intent)>
<android.app.Activity: void stopManagingCursor(android.database.Cursor)>
<android.app.Activity: void finishAfterTransition()>
<android.app.Activity: void onTrimMemory(int)>
<android.app.Activity: void addContentView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)>
<android.app.Activity: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.app.Activity: void onDetachedFromWindow()>
<android.app.Activity: void onStateNotSaved()>
<android.app.Activity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.app.Activity: boolean onMenuItemSelected(int,android.view.MenuItem)>
<android.app.Activity: void onPictureInPictureModeChanged(boolean)>
<android.app.Activity: void triggerSearch(java.lang.String,android.os.Bundle)>
<android.app.Activity: void closeContextMenu()>
<android.app.Activity: android.view.MenuInflater getMenuInflater()>
<android.app.Activity: boolean isVoiceInteraction()>
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle,android.os.PersistableBundle)>
<android.app.Activity: boolean shouldShowRequestPermissionRationale(java.lang.String)>
<android.app.Activity: void setTitleColor(int)>
<android.app.Activity: void onPrepareDialog(int,android.app.Dialog)>
<android.app.Activity: boolean navigateUpToFromChild(android.app.Activity,android.content.Intent)>
<android.app.Activity: android.view.LayoutInflater getLayoutInflater()>
<android.app.Activity: void onPostCreate(android.os.Bundle,android.os.PersistableBundle)>
<android.app.Activity: void reportFullyDrawn()>
<android.app.Activity: android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent)>
<android.app.Activity: void startActivityForResult(@RequiresPermissionandroid.content.Intent,int)>
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,@RequiresPermissionandroid.content.Intent,int)>
<android.app.Activity: android.media.session.MediaController getMediaController()>
<android.app.Activity: void onPanelClosed(int,android.view.Menu)>
<android.app.Activity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>
<android.app.Activity: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.app.Activity: boolean isTaskRoot()>
<android.app.Activity: void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder)>
<android.app.Activity: void onLocalVoiceInteractionStarted()>
<android.app.Activity: int getTitleColor()>
<android.app.Activity: void onStop()>
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)>
<android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback)>
<android.app.Activity: void onPostCreate(android.os.Bundle)>
<android.app.Activity: android.app.VoiceInteractor getVoiceInteractor()>
<android.app.Activity: android.app.Dialog onCreateDialog(int)>
<android.app.Activity: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.app.Activity: void setRequestedOrientation(int)>
<android.app.Activity: void startActivityForResult(@RequiresPermissionandroid.content.Intent,int,android.os.Bundle)>
<android.app.Activity: boolean isFinishing()>
<android.app.Activity: boolean onKeyUp(int,android.view.KeyEvent)>
<android.app.Activity: boolean isChild()>
<android.app.Activity: android.content.ComponentName getComponentName()>
<android.app.Activity: void startActivityFromChild(android.app.Activity,@RequiresPermissionandroid.content.Intent,int,android.os.Bundle)>
<android.app.Activity: void onWindowFocusChanged(boolean)>
<android.app.Activity: void onPictureInPictureModeChanged(boolean,android.content.res.Configuration)>
<android.app.Activity: void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder)>
<android.app.Activity: void runOnUiThread(Runnable)>
<android.app.Activity: boolean isVoiceInteractionRoot()>
<android.app.Activity: void setFinishOnTouchOutside(boolean)>
<android.app.Activity: boolean isLocalVoiceInteractionSupported()>
<android.app.Activity: void invalidateOptionsMenu()>
<android.app.Activity: boolean onCreateOptionsMenu(android.view.Menu)>
<android.app.Activity: void closeOptionsMenu()>
<android.app.Activity: void onActivityResult(int,int,android.content.Intent)>
<android.app.Activity: void onTopResumedActivityChanged(boolean)>
<android.app.Activity: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>
<android.app.Activity: boolean onMenuOpened(int,android.view.Menu)>
<android.app.Activity: boolean isChangingConfigurations()>
<android.app.Activity: boolean isInPictureInPictureMode()>
<android.app.Activity: boolean isBackgroundVisibleBehind()>
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)>
<android.app.Activity: void onContentChanged()>
<android.app.Activity: void onMultiWindowModeChanged(boolean,android.content.res.Configuration)>
<android.app.Activity: void onNewIntent(android.content.Intent)>
<android.app.Activity: void openOptionsMenu()>
<android.app.Activity: android.view.SearchEvent getSearchEvent()>
<android.app.Activity: boolean requestVisibleBehind(boolean)>
<android.app.Activity: void dismissKeyboardShortcutsHelper()>
<android.app.Activity: void finish()>
<android.app.Activity: android.net.Uri getReferrer()>
<android.app.Activity: void onContextMenuClosed(android.view.Menu)>
<android.app.Activity: android.app.FragmentManager getFragmentManager()>
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>
<android.app.Activity: void setShowWhenLocked(boolean)>
<android.app.Activity: boolean showDialog(int,android.os.Bundle)>
<android.app.Activity: void onAttachedToWindow()>
<android.app.Activity: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<android.app.Activity: void onProvideAssistData(android.os.Bundle)>
<android.app.Activity: void setFeatureDrawableResource(int,@DrawableResint)>
<android.app.Activity: void startManagingCursor(android.database.Cursor)>
<android.app.Activity: void setPictureInPictureParams(android.app.PictureInPictureParams)>
<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)>
<android.app.Activity: android.transition.TransitionManager getContentTransitionManager()>
<android.app.Activity: void onBackgroundVisibleBehindChanged(boolean)>
<android.app.Activity: android.app.Dialog onCreateDialog(int,android.os.Bundle)>
<android.app.Activity: void onTitleChanged(CharSequence,int)>
<android.app.Activity: java.lang.String getLocalClassName()>
<android.app.Activity: void setResult(int,android.content.Intent)>
<android.app.Activity: boolean requestWindowFeature(int)>
<android.app.Activity: void setContentView(@LayoutResint)>
<android.app.Activity: void onRequestPermissionsResult(int,java.lang.String[],int[])>
<android.app.Activity: void setContentView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.app.Activity: boolean startActivityIfNeeded(@RequiresPermissionandroid.content.Intent,int)>
<android.app.Activity: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.app.Activity: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.app.Activity: void finishFromChild(android.app.Activity)>
<android.app.Activity: java.lang.String getCallingPackage()>
<android.app.VoiceInteractor.PickOptionRequest: void onPickOptionResult(boolean,android.app.VoiceInteractor.PickOptionRequest.Option[],android.os.Bundle)>
<android.app.VoiceInteractor.PickOptionRequest: void <init>(android.app.VoiceInteractor.Prompt,android.app.VoiceInteractor.PickOptionRequest.Option[],android.os.Bundle)>
<javax.microedition.khronos.egl.EGLContext: javax.microedition.khronos.opengles.GL getGL()>
<javax.microedition.khronos.egl.EGLContext: void <init>()>
<javax.microedition.khronos.egl.EGLContext: javax.microedition.khronos.egl.EGL getEGL()>
<android.icu.text.Transliterator: void setFilter(android.icu.text.UnicodeFilter)>
<android.icu.text.Transliterator: void filteredTransliterate(android.icu.text.Replaceable,android.icu.text.Transliterator.Position,boolean)>
<android.icu.text.Transliterator: android.icu.text.UnicodeSet getTargetSet()>
<android.icu.text.Transliterator: android.icu.text.Transliterator createFromRules(java.lang.String,java.lang.String,int)>
<android.icu.text.Transliterator: android.icu.text.UnicodeFilter getFilter()>
<android.icu.text.Transliterator: void transliterate(android.icu.text.Replaceable,android.icu.text.Transliterator.Position,int)>
<android.icu.text.Transliterator: android.icu.text.Transliterator getInstance(java.lang.String,int)>
<android.icu.text.Transliterator: int getMaximumContextLength()>
<android.icu.text.Transliterator: java.lang.String getDisplayName(java.lang.String,android.icu.util.ULocale)>
<android.icu.text.Transliterator: int transliterate(android.icu.text.Replaceable,int,int)>
<android.icu.text.Transliterator: java.lang.String getID()>
<android.icu.text.Transliterator: void transliterate(android.icu.text.Replaceable,android.icu.text.Transliterator.Position)>
<android.icu.text.Transliterator: java.util.Enumeration getAvailableIDs()>
<android.icu.text.Transliterator: java.lang.String getDisplayName(java.lang.String)>
<android.icu.text.Transliterator: android.icu.text.Transliterator getInstance(java.lang.String)>
<android.icu.text.Transliterator: java.lang.String transliterate(java.lang.String)>
<android.icu.text.Transliterator: java.lang.String toRules(boolean)>
<android.icu.text.Transliterator: java.util.Enumeration getAvailableVariants(java.lang.String,java.lang.String)>
<android.icu.text.Transliterator: void finishTransliteration(android.icu.text.Replaceable,android.icu.text.Transliterator.Position)>
<android.icu.text.Transliterator: java.util.Enumeration getAvailableSources()>
<android.icu.text.Transliterator: java.lang.String getDisplayName(java.lang.String,java.util.Locale)>
<android.icu.text.Transliterator: java.util.Enumeration getAvailableTargets(java.lang.String)>
<android.icu.text.Transliterator: void transliterate(android.icu.text.Replaceable)>
<android.icu.text.Transliterator: android.icu.text.Transliterator[] getElements()>
<android.icu.text.Transliterator: android.icu.text.Transliterator getInverse()>
<android.icu.text.Transliterator: android.icu.text.UnicodeSet getSourceSet()>
<android.icu.text.Transliterator: void transliterate(android.icu.text.Replaceable,android.icu.text.Transliterator.Position,java.lang.String)>
<java.nio.channels.OverlappingFileLockException: void <init>()>
<android.service.settings.suggestions.Suggestion.Builder: android.service.settings.suggestions.Suggestion build()>
<android.service.settings.suggestions.Suggestion.Builder: android.service.settings.suggestions.Suggestion.Builder setPendingIntent(android.app.PendingIntent)>
<android.service.settings.suggestions.Suggestion.Builder: android.service.settings.suggestions.Suggestion.Builder setSummary(CharSequence)>
<android.service.settings.suggestions.Suggestion.Builder: android.service.settings.suggestions.Suggestion.Builder setFlags(int)>
<android.service.settings.suggestions.Suggestion.Builder: android.service.settings.suggestions.Suggestion.Builder setIcon(android.graphics.drawable.Icon)>
<android.service.settings.suggestions.Suggestion.Builder: android.service.settings.suggestions.Suggestion.Builder setTitle(CharSequence)>
<android.service.settings.suggestions.Suggestion.Builder: void <init>(String)>
<android.telephony.CallQuality: int getCodecType()>
<android.telephony.CallQuality: int getCallDuration()>
<android.telephony.CallQuality: int getNumRtpPacketsReceived()>
<android.telephony.CallQuality: int describeContents()>
<android.telephony.CallQuality: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CallQuality: int getNumRtpPacketsNotReceived()>
<android.telephony.CallQuality: int getAverageRelativeJitter()>
<android.telephony.CallQuality: void <init>(int,int,int,int,int,int,int,int,int,int,int)>
<android.telephony.CallQuality: int getUplinkCallQualityLevel()>
<android.telephony.CallQuality: int getDownlinkCallQualityLevel()>
<android.telephony.CallQuality: int getMaxRelativeJitter()>
<android.telephony.CallQuality: int getAverageRoundTripTime()>
<android.telephony.CallQuality: int getNumRtpPacketsTransmittedLost()>
<android.telephony.CallQuality: int getNumRtpPacketsTransmitted()>
<android.webkit.JsResult: void confirm()>
<android.webkit.JsResult: void cancel()>
<android.webkit.JsResult: boolean getResult()>
<android.webkit.JsResult: void <init>(android.webkit.JsResult.ResultReceiver)>
<android.database.sqlite.SQLiteAbortException: void <init>()>
<android.database.sqlite.SQLiteAbortException: void <init>(String)>
<android.media.session.PlaybackState.CustomAction.Builder: void <init>(String,CharSequence,@DrawableRes int)>
<android.media.session.PlaybackState.CustomAction.Builder: android.media.session.PlaybackState.CustomAction build()>
<android.media.session.PlaybackState.CustomAction.Builder: android.media.session.PlaybackState.CustomAction.Builder setExtras(android.os.Bundle)>
<android.content.pm.ConfigurationInfo: void <init>(android.content.pm.ConfigurationInfo)>
<android.content.pm.ConfigurationInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ConfigurationInfo: void <init>()>
<android.content.pm.ConfigurationInfo: int describeContents()>
<android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()>
<java.lang.System: java.lang.String getProperty(java.lang.String)>
<java.lang.System: java.util.Map getenv()>
<java.lang.System: java.lang.SecurityManager getSecurityManager()>
<java.lang.System: void loadLibrary(java.lang.String)>
<java.lang.System: java.lang.String getenv(java.lang.String)>
<java.lang.System: void setOut(java.io.PrintStream)>
<java.lang.System: void runFinalizersOnExit(boolean)>
<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>
<java.lang.System: java.lang.String lineSeparator()>
<java.lang.System: void load(java.lang.String)>
<java.lang.System: java.lang.String mapLibraryName(java.lang.String)>
<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<java.lang.System: long currentTimeMillis()>
<java.lang.System: void exit(int)>
<java.lang.System: void gc()>
<java.lang.System: void setProperties(java.util.Properties)>
<java.lang.System: long nanoTime()>
<java.lang.System: void setSecurityManager(java.lang.SecurityManager)>
<java.lang.System: void setErr(java.io.PrintStream)>
<java.lang.System: java.nio.channels.Channel inheritedChannel()>
<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.lang.System: java.lang.String clearProperty(java.lang.String)>
<java.lang.System: void runFinalization()>
<java.lang.System: int identityHashCode(java.lang.Object)>
<java.lang.System: java.io.Console console()>
<java.lang.System: java.util.Properties getProperties()>
<java.lang.System: void setIn(java.io.InputStream)>
<android.widget.FrameLayout: void <init>(android.content.Context)>
<android.widget.FrameLayout: void setMeasureAllChildren(boolean)>
<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()>
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.FrameLayout: boolean getMeasureAllChildren()>
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,@AttrRes int,@StyleRes int)>
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,@AttrRes int)>
<android.widget.FrameLayout: android.widget.FrameLayout.LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.FrameLayout: android.widget.FrameLayout.LayoutParams generateDefaultLayoutParams()>
<java.security.cert.X509CRL: byte[] getSignature()>
<java.security.cert.X509CRL: byte[] getTBSCertList()>
<java.security.cert.X509CRL: int getVersion()>
<java.security.cert.X509CRL: void verify(java.security.PublicKey)>
<java.security.cert.X509CRL: byte[] getEncoded()>
<java.security.cert.X509CRL: java.util.Set getRevokedCertificates()>
<java.security.cert.X509CRL: javax.security.auth.x500.X500Principal getIssuerX500Principal()>
<java.security.cert.X509CRL: java.util.Date getNextUpdate()>
<java.security.cert.X509CRL: byte[] getSigAlgParams()>
<java.security.cert.X509CRL: java.lang.String getSigAlgOID()>
<java.security.cert.X509CRL: java.security.Principal getIssuerDN()>
<java.security.cert.X509CRL: void verify(java.security.PublicKey,java.lang.String)>
<java.security.cert.X509CRL: java.security.cert.X509CRLEntry getRevokedCertificate(java.security.cert.X509Certificate)>
<java.security.cert.X509CRL: java.lang.String getSigAlgName()>
<java.security.cert.X509CRL: void <init>()>
<java.security.cert.X509CRL: java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger)>
<java.security.cert.X509CRL: java.util.Date getThisUpdate()>
<java.security.cert.X509CRL: void verify(java.security.PublicKey,java.security.Provider)>
<javax.security.auth.callback.UnsupportedCallbackException: void <init>(javax.security.auth.callback.Callback,String)>
<javax.security.auth.callback.UnsupportedCallbackException: void <init>(javax.security.auth.callback.Callback)>
<javax.security.auth.callback.UnsupportedCallbackException: javax.security.auth.callback.Callback getCallback()>
<android.app.admin.DelegatedAdminReceiver: java.lang.String onChoosePrivateKeyAlias(android.content.Context,android.content.Intent,int,android.net.Uri,java.lang.String)>
<android.app.admin.DelegatedAdminReceiver: void <init>()>
<android.app.admin.DelegatedAdminReceiver: void onNetworkLogsAvailable(android.content.Context,android.content.Intent,long,int)>
<android.app.admin.DelegatedAdminReceiver: void onReceive(android.content.Context,android.content.Intent)>
<android.text.method.TransformationMethod: void onFocusChanged(android.view.View,CharSequence,boolean,int,android.graphics.Rect)>
<android.text.method.TransformationMethod: CharSequence getTransformation(CharSequence,android.view.View)>
<android.util.SparseLongArray: long get(int,long)>
<android.util.SparseLongArray: void clear()>
<android.util.SparseLongArray: int indexOfKey(int)>
<android.util.SparseLongArray: void removeAt(int)>
<android.util.SparseLongArray: long get(int)>
<android.util.SparseLongArray: void put(int,long)>
<android.util.SparseLongArray: void delete(int)>
<android.util.SparseLongArray: int indexOfValue(long)>
<android.util.SparseLongArray: void <init>()>
<android.util.SparseLongArray: int keyAt(int)>
<android.util.SparseLongArray: void append(int,long)>
<android.util.SparseLongArray: int size()>
<android.util.SparseLongArray: void <init>(int)>
<android.util.SparseLongArray: android.util.SparseLongArray clone()>
<android.util.SparseLongArray: long valueAt(int)>
<android.media.VolumeAutomation: android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper.Configuration)>
<android.telephony.gsm.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>
<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()>
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<java.util.regex.Matcher: int regionEnd()>
<java.util.regex.Matcher: int groupCount()>
<java.util.regex.Matcher: boolean hasAnchoringBounds()>
<java.util.regex.Matcher: java.lang.String group(java.lang.String)>
<java.util.regex.Matcher: boolean hitEnd()>
<java.util.regex.Matcher: int end(java.lang.String)>
<java.util.regex.Matcher: int regionStart()>
<java.util.regex.Matcher: java.util.regex.Matcher useTransparentBounds(boolean)>
<java.util.regex.Matcher: java.util.regex.Matcher reset()>
<java.util.regex.Matcher: java.util.regex.Matcher reset(CharSequence)>
<java.util.regex.Matcher: int start()>
<java.util.regex.Matcher: int start(int)>
<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>
<java.util.regex.Matcher: java.lang.String group()>
<java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)>
<java.util.regex.Matcher: boolean requireEnd()>
<java.util.regex.Matcher: int start(java.lang.String)>
<java.util.regex.Matcher: boolean find()>
<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>
<java.util.regex.Matcher: boolean hasTransparentBounds()>
<java.util.regex.Matcher: boolean matches()>
<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>
<java.util.regex.Matcher: java.util.regex.Matcher useAnchoringBounds(boolean)>
<java.util.regex.Matcher: java.util.regex.MatchResult toMatchResult()>
<java.util.regex.Matcher: int end(int)>
<java.util.regex.Matcher: int end()>
<java.util.regex.Matcher: boolean lookingAt()>
<java.util.regex.Matcher: boolean find(int)>
<java.util.regex.Matcher: java.lang.String group(int)>
<java.util.regex.Matcher: java.util.regex.Pattern pattern()>
<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>
<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>
<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>
<java.text.FieldPosition: void setBeginIndex(int)>
<java.text.FieldPosition: void <init>(java.text.Format.Field)>
<java.text.FieldPosition: int getField()>
<java.text.FieldPosition: java.text.Format.Field getFieldAttribute()>
<java.text.FieldPosition: int getBeginIndex()>
<java.text.FieldPosition: void setEndIndex(int)>
<java.text.FieldPosition: void <init>(java.text.Format.Field,int)>
<java.text.FieldPosition: void <init>(int)>
<java.text.FieldPosition: int getEndIndex()>
<android.media.effect.EffectFactory: android.media.effect.Effect createEffect(java.lang.String)>
<android.media.effect.EffectFactory: boolean isEffectSupported(java.lang.String)>
<android.util.TimeUtils: java.util.TimeZone getTimeZone(int,boolean,long,java.lang.String)>
<android.util.TimeUtils: java.lang.String getTimeZoneDatabaseVersion()>
<android.util.TimeUtils: java.util.List getTimeZoneIdsForCountryCode(java.lang.String)>
<android.util.TimeUtils: java.lang.String formatDuration(long)>
<android.telephony.NetworkServiceCallback: void onRequestNetworkRegistrationInfoComplete(int,android.telephony.NetworkRegistrationInfo)>
<android.telephony.mbms.StreamingServiceCallback: void onMediaDescriptionUpdated()>
<android.telephony.mbms.StreamingServiceCallback: void onStreamStateUpdated(int,int)>
<android.telephony.mbms.StreamingServiceCallback: void <init>()>
<android.telephony.mbms.StreamingServiceCallback: void onStreamMethodUpdated(int)>
<android.telephony.mbms.StreamingServiceCallback: void onError(int,java.lang.String)>
<android.telephony.mbms.StreamingServiceCallback: void onBroadcastSignalStrengthUpdated(int)>
<java.util.DuplicateFormatFlagsException: void <init>(String)>
<java.util.DuplicateFormatFlagsException: java.lang.String getFlags()>
<android.view.animation.BounceInterpolator: void <init>()>
<android.view.animation.BounceInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.BounceInterpolator: float getInterpolation(float)>
<java.util.MissingFormatWidthException: void <init>(String)>
<java.util.MissingFormatWidthException: java.lang.String getFormatSpecifier()>
<javax.xml.xpath.XPathFunctionResolver: javax.xml.xpath.XPathFunction resolveFunction(javax.xml.namespace.QName,int)>
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String)>
<java.security.cert.CertPathValidator: java.security.Provider getProvider()>
<java.security.cert.CertPathValidator: java.lang.String getDefaultType()>
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String,java.lang.String)>
<java.security.cert.CertPathValidator: java.security.cert.CertPathChecker getRevocationChecker()>
<java.security.cert.CertPathValidator: void <init>(java.security.cert.CertPathValidatorSpi,java.security.Provider,String)>
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String,java.security.Provider)>
<java.security.cert.CertPathValidator: java.lang.String getAlgorithm()>
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidatorResult validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)>
<java.io.Reader: void mark(int)>
<java.io.Reader: boolean ready()>
<java.io.Reader: int read()>
<java.io.Reader: int read(char[])>
<java.io.Reader: void <init>(Object)>
<java.io.Reader: void reset()>
<java.io.Reader: long skip(long)>
<java.io.Reader: void <init>()>
<java.io.Reader: int read(java.nio.CharBuffer)>
<java.io.Reader: boolean markSupported()>
<java.io.Reader: int read(char[],int,int)>
<java.nio.file.DirectoryIteratorException: void <init>(java.io.IOException)>
<java.nio.file.DirectoryIteratorException: java.io.IOException getCause()>
<java.lang.reflect.InvocationTargetException: void <init>(Throwable)>
<java.lang.reflect.InvocationTargetException: void <init>(Throwable,String)>
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>
<java.lang.reflect.InvocationTargetException: void <init>()>
<android.service.carrier.CarrierMessagingService.SendMmsResult: byte[] getSendConfPdu()>
<android.service.carrier.CarrierMessagingService.SendMmsResult: int getSendStatus()>
<android.service.carrier.CarrierMessagingService.SendMmsResult: void <init>(int,byte[])>
<android.app.backup.BackupDataOutput: long getQuota()>
<android.app.backup.BackupDataOutput: int getTransportFlags()>
<android.app.backup.BackupDataOutput: void <init>(java.io.FileDescriptor,long)>
<android.app.backup.BackupDataOutput: void <init>(java.io.FileDescriptor)>
<android.app.backup.BackupDataOutput: int writeEntityData(byte[],int)>
<android.app.backup.BackupDataOutput: int writeEntityHeader(java.lang.String,int)>
<android.opengl.GLSurfaceView.EGLConfigChooser: javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay)>
<java.security.PolicySpi: java.security.PermissionCollection engineGetPermissions(java.security.CodeSource)>
<java.security.PolicySpi: java.security.PermissionCollection engineGetPermissions(java.security.ProtectionDomain)>
<java.security.PolicySpi: void engineRefresh()>
<java.security.PolicySpi: void <init>()>
<java.security.PolicySpi: boolean engineImplies(java.security.ProtectionDomain,java.security.Permission)>
<android.app.FragmentHostCallback: boolean onHasWindowAnimations()>
<android.app.FragmentHostCallback: void <init>(android.content.Context,android.os.Handler,int)>
<android.app.FragmentHostCallback: void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.FragmentHostCallback: E onGetHost()>
<android.app.FragmentHostCallback: boolean onShouldSaveFragmentState(android.app.Fragment)>
<android.app.FragmentHostCallback: void onStartIntentSenderFromFragment(android.app.Fragment,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>
<android.app.FragmentHostCallback: boolean onHasView()>
<android.app.FragmentHostCallback: int onGetWindowAnimations()>
<android.app.FragmentHostCallback: boolean onUseFragmentManagerInflaterFactory()>
<android.app.FragmentHostCallback: void onInvalidateOptionsMenu()>
<android.app.FragmentHostCallback: android.view.LayoutInflater onGetLayoutInflater()>
<android.app.FragmentHostCallback: T onFindViewById(int)>
<android.app.FragmentHostCallback: void onAttachFragment(android.app.Fragment)>
<android.app.FragmentHostCallback: void onRequestPermissionsFromFragment(android.app.Fragment,java.lang.String[],int)>
<android.app.FragmentHostCallback: void onStartActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)>
<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()>
<android.telephony.CellLocation: void <init>()>
<android.telephony.CellLocation: void requestLocationUpdate()>
<java.nio.charset.CharacterCodingException: void <init>()>
<android.content.DialogInterface.OnMultiChoiceClickListener: void onClick(android.content.DialogInterface,int,boolean)>
<android.net.ConnectivityManager.OnTetheringEventCallback: void <init>()>
<android.net.ConnectivityManager.OnTetheringEventCallback: void onUpstreamChanged(android.net.Network)>
<java.lang.TypeNotPresentException: void <init>(String,Throwable)>
<java.lang.TypeNotPresentException: java.lang.String typeName()>
<java.util.concurrent.ScheduledExecutorService extends java.util.concurrent.ExecutorService: java.util.concurrent.ScheduledFuture schedule(Runnable,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledExecutorService extends java.util.concurrent.ExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(Runnable,long,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledExecutorService extends java.util.concurrent.ExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(Runnable,long,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledExecutorService extends java.util.concurrent.ExecutorService: java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.FutureTask: void <init>(Runnable,V)>
<java.util.concurrent.FutureTask: V get()>
<java.util.concurrent.FutureTask: boolean runAndReset()>
<java.util.concurrent.FutureTask: boolean cancel(boolean)>
<java.util.concurrent.FutureTask: void run()>
<java.util.concurrent.FutureTask: void done()>
<java.util.concurrent.FutureTask: void setException(java.lang.Throwable)>
<java.util.concurrent.FutureTask: boolean isDone()>
<java.util.concurrent.FutureTask: void set(V)>
<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>
<java.util.concurrent.FutureTask: boolean isCancelled()>
<java.util.concurrent.FutureTask: V get(long,java.util.concurrent.TimeUnit)>
<java.util.prefs.BackingStoreException: void <init>(Throwable)>
<java.util.prefs.BackingStoreException: void <init>(String)>
<android.service.autofill.CompositeUserData: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.CompositeUserData: java.lang.String getFieldClassificationAlgorithm()>
<android.service.autofill.CompositeUserData: android.util.ArrayMap getFieldClassificationArgs()>
<android.service.autofill.CompositeUserData: java.lang.String[] getCategoryIds()>
<android.service.autofill.CompositeUserData: java.lang.String[] getValues()>
<android.service.autofill.CompositeUserData: int describeContents()>
<android.service.autofill.CompositeUserData: android.os.Bundle getDefaultFieldClassificationArgs()>
<android.service.autofill.CompositeUserData: java.lang.String getFieldClassificationAlgorithmForCategory(java.lang.String)>
<android.service.autofill.CompositeUserData: void <init>(android.service.autofill.UserData,android.service.autofill.UserData)>
<android.service.autofill.CompositeUserData: android.util.ArrayMap getFieldClassificationAlgorithms()>
<java.nio.file.spi.FileSystemProvider: void <init>()>
<java.nio.file.spi.FileSystemProvider: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute...)>
<java.nio.file.spi.FileSystemProvider: boolean isHidden(java.nio.file.Path)>
<java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>
<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem getFileSystem(java.net.URI)>
<java.nio.file.spi.FileSystemProvider: java.util.Map readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption...)>
<java.nio.file.spi.FileSystemProvider: java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute...)>
<java.nio.file.spi.FileSystemProvider: boolean isSameFile(java.nio.file.Path,java.nio.file.Path)>
<java.nio.file.spi.FileSystemProvider: boolean deleteIfExists(java.nio.file.Path)>
<java.nio.file.spi.FileSystemProvider: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption...)>
<java.nio.file.spi.FileSystemProvider: void move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)>
<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map)>
<java.nio.file.spi.FileSystemProvider: void createLink(java.nio.file.Path,java.nio.file.Path)>
<java.nio.file.spi.FileSystemProvider: void delete(java.nio.file.Path)>
<java.nio.file.spi.FileSystemProvider: A readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption...)>
<java.nio.file.spi.FileSystemProvider: void checkAccess(java.nio.file.Path,java.nio.file.AccessMode...)>
<java.nio.file.spi.FileSystemProvider: java.nio.file.Path readSymbolicLink(java.nio.file.Path)>
<java.nio.file.spi.FileSystemProvider: java.lang.String getScheme()>
<java.nio.file.spi.FileSystemProvider: java.nio.channels.FileChannel newFileChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute...)>
<java.nio.file.spi.FileSystemProvider: java.nio.file.Path getPath(java.net.URI)>
<java.nio.file.spi.FileSystemProvider: void createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute...)>
<java.nio.file.spi.FileSystemProvider: void setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption...)>
<java.nio.file.spi.FileSystemProvider: void copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)>
<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.nio.file.Path,java.util.Map)>
<java.nio.file.spi.FileSystemProvider: java.nio.file.FileStore getFileStore(java.nio.file.Path)>
<java.nio.file.spi.FileSystemProvider: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption...)>
<java.nio.file.spi.FileSystemProvider: V getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption...)>
<java.nio.file.spi.FileSystemProvider: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream.Filter)>
<java.nio.file.spi.FileSystemProvider: void createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)>
<android.graphics.Paint.FontMetrics: void <init>()>
<android.app.AppOpsManager.OpEntry: long getLastRejectTime(int)>
<android.app.AppOpsManager.OpEntry: boolean isRunning()>
<android.app.AppOpsManager.OpEntry: java.lang.String getOpStr()>
<android.app.AppOpsManager.OpEntry: long getLastAccessForegroundTime(int)>
<android.app.AppOpsManager.OpEntry: long getLastDuration(int,int,int)>
<android.app.AppOpsManager.OpEntry: int describeContents()>
<android.app.AppOpsManager.OpEntry: long getLastAccessBackgroundTime(int)>
<android.app.AppOpsManager.OpEntry: long getLastForegroundDuration(int)>
<android.app.AppOpsManager.OpEntry: java.lang.String getProxyPackageName()>
<android.app.AppOpsManager.OpEntry: int getProxyUid()>
<android.app.AppOpsManager.OpEntry: int getMode()>
<android.app.AppOpsManager.OpEntry: long getLastRejectTime(int,int,int)>
<android.app.AppOpsManager.OpEntry: long getLastBackgroundDuration(int)>
<android.app.AppOpsManager.OpEntry: long getLastAccessTime(int,int,int)>
<android.app.AppOpsManager.OpEntry: void writeToParcel(android.os.Parcel,int)>
<android.app.AppOpsManager.OpEntry: java.lang.String getProxyPackageName(int,int)>
<android.app.AppOpsManager.OpEntry: long getDuration()>
<android.app.AppOpsManager.OpEntry: int getProxyUid(int,int)>
<android.app.AppOpsManager.OpEntry: long getLastAccessTime(int)>
<android.app.AppOpsManager.OpEntry: long getLastRejectForegroundTime(int)>
<android.app.AppOpsManager.OpEntry: long getLastRejectBackgroundTime(int)>
<org.xml.sax.XMLReader: void setErrorHandler(org.xml.sax.ErrorHandler)>
<org.xml.sax.XMLReader: void setFeature(java.lang.String,boolean)>
<org.xml.sax.XMLReader: void setEntityResolver(org.xml.sax.EntityResolver)>
<org.xml.sax.XMLReader: void setProperty(java.lang.String,java.lang.Object)>
<org.xml.sax.XMLReader: org.xml.sax.EntityResolver getEntityResolver()>
<org.xml.sax.XMLReader: boolean getFeature(java.lang.String)>
<org.xml.sax.XMLReader: void setDTDHandler(org.xml.sax.DTDHandler)>
<org.xml.sax.XMLReader: org.xml.sax.DTDHandler getDTDHandler()>
<org.xml.sax.XMLReader: void setContentHandler(org.xml.sax.ContentHandler)>
<org.xml.sax.XMLReader: org.xml.sax.ContentHandler getContentHandler()>
<org.xml.sax.XMLReader: void parse(java.lang.String)>
<org.xml.sax.XMLReader: org.xml.sax.ErrorHandler getErrorHandler()>
<org.xml.sax.XMLReader: java.lang.Object getProperty(java.lang.String)>
<org.xml.sax.XMLReader: void parse(org.xml.sax.InputSource)>
<java.nio.file.InvalidPathException: java.lang.String getReason()>
<java.nio.file.InvalidPathException: java.lang.String getInput()>
<java.nio.file.InvalidPathException: void <init>(String,String)>
<java.nio.file.InvalidPathException: int getIndex()>
<java.nio.file.InvalidPathException: void <init>(String,String,int)>
<android.provider.ContactsContract.CommonDataKinds.Event: CharSequence getTypeLabel(android.content.res.Resources,int,CharSequence)>
<android.provider.ContactsContract.CommonDataKinds.Event: int getTypeResource(java.lang.Integer)>
<android.os.ParcelFormatException: void <init>()>
<android.os.ParcelFormatException: void <init>(String)>
<java.sql.SQLInvalidAuthorizationSpecException: void <init>(String,String,int)>
<java.sql.SQLInvalidAuthorizationSpecException: void <init>(Throwable)>
<java.sql.SQLInvalidAuthorizationSpecException: void <init>(String)>
<java.sql.SQLInvalidAuthorizationSpecException: void <init>(String,Throwable)>
<java.sql.SQLInvalidAuthorizationSpecException: void <init>(String,String)>
<java.sql.SQLInvalidAuthorizationSpecException: void <init>(String,String,int,Throwable)>
<java.sql.SQLInvalidAuthorizationSpecException: void <init>()>
<java.sql.SQLInvalidAuthorizationSpecException: void <init>(String,String,Throwable)>
<java.util.logging.StreamHandler: void close()>
<java.util.logging.StreamHandler: void <init>(java.io.OutputStream,java.util.logging.Formatter)>
<java.util.logging.StreamHandler: void publish(java.util.logging.LogRecord)>
<java.util.logging.StreamHandler: void <init>()>
<java.util.logging.StreamHandler: void flush()>
<java.util.logging.StreamHandler: void setOutputStream(java.io.OutputStream)>
<java.lang.Number: long longValue()>
<java.lang.Number: short shortValue()>
<java.lang.Number: int intValue()>
<java.lang.Number: float floatValue()>
<java.lang.Number: void <init>()>
<java.lang.Number: byte byteValue()>
<java.lang.Number: double doubleValue()>
<android.service.autofill.InternalSanitizer: android.view.autofill.AutofillValue sanitize(android.view.autofill.AutofillValue)>
<android.service.autofill.InternalSanitizer: void <init>()>
<android.webkit.WebStorage.Origin: java.lang.String getOrigin()>
<android.webkit.WebStorage.Origin: long getUsage()>
<android.webkit.WebStorage.Origin: void <init>(String,long,long)>
<android.webkit.WebStorage.Origin: long getQuota()>
<android.bluetooth.BluetoothClass: int getDeviceClass()>
<android.bluetooth.BluetoothClass: void writeToParcel(android.os.Parcel,int)>
<android.bluetooth.BluetoothClass: int getMajorDeviceClass()>
<android.bluetooth.BluetoothClass: int describeContents()>
<android.bluetooth.BluetoothClass: boolean hasService(int)>
<android.bluetooth.BluetoothClass: int getClassOfDevice()>
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetManager getInstance(android.content.Context)>
<android.appwidget.AppWidgetManager: void updateAppWidget(int[],android.widget.RemoteViews)>
<android.appwidget.AppWidgetManager: void updateAppWidgetOptions(int,android.os.Bundle)>
<android.appwidget.AppWidgetManager: void partiallyUpdateAppWidget(int[],android.widget.RemoteViews)>
<android.appwidget.AppWidgetManager: boolean requestPinAppWidget(android.content.ComponentName,android.os.Bundle,android.app.PendingIntent)>
<android.appwidget.AppWidgetManager: boolean bindAppWidgetIdIfAllowed(int,android.content.ComponentName)>
<android.appwidget.AppWidgetManager: boolean isRequestPinAppWidgetSupported()>
<android.appwidget.AppWidgetManager: java.util.List getInstalledProvidersForProfile(android.os.UserHandle)>
<android.appwidget.AppWidgetManager: void notifyAppWidgetViewDataChanged(int,int)>
<android.appwidget.AppWidgetManager: void updateAppWidget(int,android.widget.RemoteViews)>
<android.appwidget.AppWidgetManager: void updateAppWidget(android.content.ComponentName,android.widget.RemoteViews)>
<android.appwidget.AppWidgetManager: void partiallyUpdateAppWidget(int,android.widget.RemoteViews)>
<android.appwidget.AppWidgetManager: android.os.Bundle getAppWidgetOptions(int)>
<android.appwidget.AppWidgetManager: int[] getAppWidgetIds(android.content.ComponentName)>
<android.appwidget.AppWidgetManager: boolean bindAppWidgetIdIfAllowed(int,android.content.ComponentName,android.os.Bundle)>
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)>
<android.appwidget.AppWidgetManager: java.util.List getInstalledProviders()>
<android.appwidget.AppWidgetManager: boolean bindAppWidgetIdIfAllowed(int,android.os.UserHandle,android.content.ComponentName,android.os.Bundle)>
<android.appwidget.AppWidgetManager: java.util.List getInstalledProvidersForPackage(java.lang.String,android.os.UserHandle)>
<android.appwidget.AppWidgetManager: void notifyAppWidgetViewDataChanged(int[],int)>
<android.appwidget.AppWidgetManager: void updateAppWidgetProviderInfo(android.content.ComponentName,java.lang.String)>
<android.content.OperationApplicationException: void <init>(String)>
<android.content.OperationApplicationException: int getNumSuccessfulYieldPoints()>
<android.content.OperationApplicationException: void <init>()>
<android.content.OperationApplicationException: void <init>(int)>
<android.content.OperationApplicationException: void <init>(String,int)>
<android.content.OperationApplicationException: void <init>(Throwable)>
<android.content.OperationApplicationException: void <init>(String,Throwable)>
<java.io.IOError: void <init>(Throwable)>
<android.telephony.SignalStrength: int getGsmBitErrorRate()>
<android.telephony.SignalStrength: int getEvdoDbm()>
<android.telephony.SignalStrength: int getEvdoSnr()>
<android.telephony.SignalStrength: int getGsmSignalStrength()>
<android.telephony.SignalStrength: int getCdmaDbm()>
<android.telephony.SignalStrength: java.util.List getCellSignalStrengths(java.lang.Class)>
<android.telephony.SignalStrength: int describeContents()>
<android.telephony.SignalStrength: boolean isGsm()>
<android.telephony.SignalStrength: int getCdmaEcio()>
<android.telephony.SignalStrength: int getLevel()>
<android.telephony.SignalStrength: int getEvdoEcio()>
<android.telephony.SignalStrength: void writeToParcel(android.os.Parcel,int)>
<android.telephony.SignalStrength: java.util.List getCellSignalStrengths()>
<java.sql.SQLData: void readSQL(java.sql.SQLInput,java.lang.String)>
<java.sql.SQLData: void writeSQL(java.sql.SQLOutput)>
<java.sql.SQLData: java.lang.String getSQLTypeName()>
<android.net.wifi.rtt.RangingResult: long getRangingTimestampMillis()>
<android.net.wifi.rtt.RangingResult: int getNumAttemptedMeasurements()>
<android.net.wifi.rtt.RangingResult: byte[] getLci()>
<android.net.wifi.rtt.RangingResult: android.net.MacAddress getMacAddress()>
<android.net.wifi.rtt.RangingResult: android.net.wifi.rtt.ResponderLocation getUnverifiedResponderLocation()>
<android.net.wifi.rtt.RangingResult: byte[] getLcr()>
<android.net.wifi.rtt.RangingResult: int getDistanceStdDevMm()>
<android.net.wifi.rtt.RangingResult: android.net.wifi.aware.PeerHandle getPeerHandle()>
<android.net.wifi.rtt.RangingResult: int getDistanceMm()>
<android.net.wifi.rtt.RangingResult: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.rtt.RangingResult: int describeContents()>
<android.net.wifi.rtt.RangingResult: int getStatus()>
<android.net.wifi.rtt.RangingResult: int getNumSuccessfulMeasurements()>
<android.net.wifi.rtt.RangingResult: int getRssi()>
<android.location.GpsStatus.NmeaListener: void onNmeaReceived(long,java.lang.String)>
<android.media.audiofx.Equalizer.OnParameterChangeListener: void onParameterChange(android.media.audiofx.Equalizer,int,int,int,int)>
<android.media.audiopolicy.AudioPolicy.AudioPolicyFocusListener: void onAudioFocusGrant(android.media.AudioFocusInfo,int)>
<android.media.audiopolicy.AudioPolicy.AudioPolicyFocusListener: void onAudioFocusRequest(android.media.AudioFocusInfo,int)>
<android.media.audiopolicy.AudioPolicy.AudioPolicyFocusListener: void <init>()>
<android.media.audiopolicy.AudioPolicy.AudioPolicyFocusListener: void onAudioFocusAbandon(android.media.AudioFocusInfo)>
<android.media.audiopolicy.AudioPolicy.AudioPolicyFocusListener: void onAudioFocusLoss(android.media.AudioFocusInfo,boolean)>
<android.os.ResultReceiver: int describeContents()>
<android.os.ResultReceiver: void onReceiveResult(int,android.os.Bundle)>
<android.os.ResultReceiver: void <init>(android.os.Handler)>
<android.os.ResultReceiver: void writeToParcel(android.os.Parcel,int)>
<android.os.ResultReceiver: void send(int,android.os.Bundle)>
<android.hardware.camera2.CaptureRequest: T get(android.hardware.camera2.CaptureRequest.Key)>
<android.hardware.camera2.CaptureRequest: java.util.List getKeys()>
<android.hardware.camera2.CaptureRequest: java.lang.Object getTag()>
<android.hardware.camera2.CaptureRequest: boolean isReprocess()>
<android.hardware.camera2.CaptureRequest: int describeContents()>
<android.hardware.camera2.CaptureRequest: void writeToParcel(android.os.Parcel,int)>
<javax.xml.transform.sax.TemplatesHandler extends org.xml.sax.ContentHandler: java.lang.String getSystemId()>
<javax.xml.transform.sax.TemplatesHandler extends org.xml.sax.ContentHandler: javax.xml.transform.Templates getTemplates()>
<javax.xml.transform.sax.TemplatesHandler extends org.xml.sax.ContentHandler: void setSystemId(java.lang.String)>
<java.util.concurrent.locks.StampedLock: long tryConvertToOptimisticRead(long)>
<java.util.concurrent.locks.StampedLock: void <init>()>
<java.util.concurrent.locks.StampedLock: java.util.concurrent.locks.Lock asReadLock()>
<java.util.concurrent.locks.StampedLock: long readLockInterruptibly()>
<java.util.concurrent.locks.StampedLock: long tryReadLock()>
<java.util.concurrent.locks.StampedLock: long tryConvertToWriteLock(long)>
<java.util.concurrent.locks.StampedLock: java.util.concurrent.locks.Lock asWriteLock()>
<java.util.concurrent.locks.StampedLock: long tryOptimisticRead()>
<java.util.concurrent.locks.StampedLock: long tryConvertToReadLock(long)>
<java.util.concurrent.locks.StampedLock: void unlockRead(long)>
<java.util.concurrent.locks.StampedLock: long readLock()>
<java.util.concurrent.locks.StampedLock: boolean tryUnlockWrite()>
<java.util.concurrent.locks.StampedLock: void unlock(long)>
<java.util.concurrent.locks.StampedLock: boolean isWriteLocked()>
<java.util.concurrent.locks.StampedLock: long tryReadLock(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.locks.StampedLock: java.util.concurrent.locks.ReadWriteLock asReadWriteLock()>
<java.util.concurrent.locks.StampedLock: long tryWriteLock(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.locks.StampedLock: void unlockWrite(long)>
<java.util.concurrent.locks.StampedLock: boolean tryUnlockRead()>
<java.util.concurrent.locks.StampedLock: boolean validate(long)>
<java.util.concurrent.locks.StampedLock: long tryWriteLock()>
<java.util.concurrent.locks.StampedLock: int getReadLockCount()>
<java.util.concurrent.locks.StampedLock: long writeLock()>
<java.util.concurrent.locks.StampedLock: long writeLockInterruptibly()>
<java.util.concurrent.locks.StampedLock: boolean isReadLocked()>
<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>
<android.animation.ValueAnimator: long getFrameDelay()>
<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator.AnimatorUpdateListener)>
<android.animation.ValueAnimator: void removeAllUpdateListeners()>
<android.animation.ValueAnimator: void setEvaluator(android.animation.TypeEvaluator)>
<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder...)>
<android.animation.ValueAnimator: void removeUpdateListener(android.animation.ValueAnimator.AnimatorUpdateListener)>
<android.animation.ValueAnimator: void setIntValues(int...)>
<android.animation.ValueAnimator: android.animation.ValueAnimator ofPropertyValuesHolder(android.animation.PropertyValuesHolder...)>
<android.animation.ValueAnimator: long getStartDelay()>
<android.animation.ValueAnimator: android.animation.ValueAnimator ofInt(int...)>
<android.animation.ValueAnimator: void setCurrentFraction(float)>
<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>
<android.animation.ValueAnimator: void setRepeatMode(int)>
<android.animation.ValueAnimator: int getRepeatMode()>
<android.animation.ValueAnimator: void setCurrentPlayTime(long)>
<android.animation.ValueAnimator: void setObjectValues(java.lang.Object...)>
<android.animation.ValueAnimator: void setRepeatCount(int)>
<android.animation.ValueAnimator: android.animation.ValueAnimator clone()>
<android.animation.ValueAnimator: void reverse()>
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue(java.lang.String)>
<android.animation.ValueAnimator: boolean areAnimatorsEnabled()>
<android.animation.ValueAnimator: float getAnimatedFraction()>
<android.animation.ValueAnimator: void setFrameDelay(long)>
<android.animation.ValueAnimator: android.animation.ValueAnimator ofArgb(int...)>
<android.animation.ValueAnimator: void setFloatValues(float...)>
<android.animation.ValueAnimator: float getDurationScale()>
<android.animation.ValueAnimator: long getDuration()>
<android.animation.ValueAnimator: int getRepeatCount()>
<android.animation.ValueAnimator: long getCurrentPlayTime()>
<android.animation.ValueAnimator: void setStartDelay(long)>
<android.animation.ValueAnimator: boolean isRunning()>
<android.animation.ValueAnimator: void <init>()>
<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] getValues()>
<android.animation.ValueAnimator: android.animation.ValueAnimator ofFloat(float...)>
<android.animation.ValueAnimator: android.animation.ValueAnimator ofObject(android.animation.TypeEvaluator,java.lang.Object...)>
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue()>
<android.animation.ValueAnimator: void setDurationScale(float)>
<android.net.metrics.DhcpClientEvent.Builder: android.net.metrics.DhcpClientEvent.Builder setMsg(java.lang.String)>
<android.net.metrics.DhcpClientEvent.Builder: void <init>()>
<android.net.metrics.DhcpClientEvent.Builder: android.net.metrics.DhcpClientEvent build()>
<android.net.metrics.DhcpClientEvent.Builder: android.net.metrics.DhcpClientEvent.Builder setDurationMs(int)>
<android.telecom.VideoProfile: boolean isVideo(int)>
<android.telecom.VideoProfile: java.lang.String videoStateToString(int)>
<android.telecom.VideoProfile: boolean isPaused(int)>
<android.telecom.VideoProfile: boolean isBidirectional(int)>
<android.telecom.VideoProfile: boolean isReceptionEnabled(int)>
<android.telecom.VideoProfile: int getVideoState()>
<android.telecom.VideoProfile: void writeToParcel(android.os.Parcel,int)>
<android.telecom.VideoProfile: void <init>(int)>
<android.telecom.VideoProfile: boolean isTransmissionEnabled(int)>
<android.telecom.VideoProfile: boolean isAudioOnly(int)>
<android.telecom.VideoProfile: void <init>(int,int)>
<android.telecom.VideoProfile: int describeContents()>
<android.telecom.VideoProfile: int getQuality()>
<java.time.chrono.JapaneseDate: int lengthOfMonth()>
<java.time.chrono.JapaneseDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate with(java.time.temporal.TemporalField,long)>
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate minus(long,java.time.temporal.TemporalUnit)>
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate of(int,int,int)>
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate with(java.time.temporal.TemporalAdjuster)>
<java.time.chrono.JapaneseDate: long getLong(java.time.temporal.TemporalField)>
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseChronology getChronology()>
<java.time.chrono.JapaneseDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate plus(java.time.temporal.TemporalAmount)>
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseEra getEra()>
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate plus(long,java.time.temporal.TemporalUnit)>
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate from(java.time.temporal.TemporalAccessor)>
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate minus(java.time.temporal.TemporalAmount)>
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate now(java.time.Clock)>
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate now()>
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate now(java.time.ZoneId)>
<java.time.chrono.JapaneseDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate of(java.time.chrono.JapaneseEra,int,int,int)>
<android.media.MediaCodec.OnFrameRenderedListener: void onFrameRendered(android.media.MediaCodec,long,long)>
<java.security.spec.ECField: int getFieldSize()>
<java.util.concurrent.TransferQueue extends java.util.concurrent.BlockingQueue: boolean tryTransfer(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.TransferQueue extends java.util.concurrent.BlockingQueue: boolean tryTransfer(E)>
<java.util.concurrent.TransferQueue extends java.util.concurrent.BlockingQueue: int getWaitingConsumerCount()>
<java.util.concurrent.TransferQueue extends java.util.concurrent.BlockingQueue: boolean hasWaitingConsumer()>
<java.util.concurrent.TransferQueue extends java.util.concurrent.BlockingQueue: void transfer(E)>
<java.sql.SQLTimeoutException: void <init>(Throwable)>
<java.sql.SQLTimeoutException: void <init>(String,String,Throwable)>
<java.sql.SQLTimeoutException: void <init>(String,String)>
<java.sql.SQLTimeoutException: void <init>(String,String,int,Throwable)>
<java.sql.SQLTimeoutException: void <init>(String)>
<java.sql.SQLTimeoutException: void <init>()>
<java.sql.SQLTimeoutException: void <init>(String,String,int)>
<java.sql.SQLTimeoutException: void <init>(String,Throwable)>
<android.location.GnssMeasurementsEvent: int describeContents()>
<android.location.GnssMeasurementsEvent: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssMeasurementsEvent: void <init>(android.location.GnssClock,android.location.GnssMeasurement[])>
<android.location.GnssMeasurementsEvent: java.util.Collection getMeasurements()>
<android.location.GnssMeasurementsEvent: android.location.GnssClock getClock()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Clob createClob()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.DatabaseMetaData getMetaData()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: boolean getAutoCommit()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.SQLWarning getWarnings()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: void setTypeMap(java.util.Map)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Struct createStruct(java.lang.String,java.lang.Object[])>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Statement createStatement(int,int,int)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.CallableStatement prepareCall(java.lang.String,int,int)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.NClob createNClob()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.lang.String nativeSQL(java.lang.String)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: boolean isClosed()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[])>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Statement createStatement(int,int)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.lang.String getCatalog()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.util.Map getTypeMap()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.util.Properties getClientInfo()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: boolean isReadOnly()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.SQLXML createSQLXML()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.PreparedStatement prepareStatement(java.lang.String)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Blob createBlob()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: boolean isValid(int)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: int getHoldability()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: void releaseSavepoint(java.sql.Savepoint)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.PreparedStatement prepareStatement(java.lang.String,int)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: void setCatalog(java.lang.String)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: void setClientInfo(java.lang.String,java.lang.String)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: void commit()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: void setAutoCommit(boolean)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Statement createStatement()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: void clearWarnings()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.CallableStatement prepareCall(java.lang.String)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Savepoint setSavepoint()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: void setTransactionIsolation(int)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.lang.String getClientInfo(java.lang.String)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: void rollback()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.CallableStatement prepareCall(java.lang.String,int,int,int)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: void close()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: int getTransactionIsolation()>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: void rollback(java.sql.Savepoint)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: void setClientInfo(java.util.Properties)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Array createArrayOf(java.lang.String,java.lang.Object[])>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.PreparedStatement prepareStatement(java.lang.String,int[])>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: void setReadOnly(boolean)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: void setHoldability(int)>
<java.sql.Connection extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Savepoint setSavepoint(java.lang.String)>
<java.util.Timer: void <init>(String,boolean)>
<java.util.Timer: int purge()>
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>
<java.util.Timer: void <init>()>
<java.util.Timer: void <init>(boolean)>
<java.util.Timer: void cancel()>
<java.util.Timer: void schedule(java.util.TimerTask,long)>
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>
<java.util.Timer: void <init>(String)>
<java.util.Timer: void schedule(java.util.TimerTask,java.util.Date,long)>
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,java.util.Date,long)>
<java.util.Timer: void schedule(java.util.TimerTask,java.util.Date)>
<android.app.PendingIntent: void send()>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int,android.os.Bundle)>
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)>
<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: int getCreatorUid()>
<android.app.PendingIntent: android.os.UserHandle getCreatorUserHandle()>
<android.app.PendingIntent: void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)>
<android.app.PendingIntent: android.content.IntentSender getIntentSender()>
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent.OnFinished,android.os.Handler,java.lang.String)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)>
<android.app.PendingIntent: void send(int,android.app.PendingIntent.OnFinished,android.os.Handler)>
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent.OnFinished,android.os.Handler)>
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)>
<android.app.PendingIntent: android.app.PendingIntent getForegroundService(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: android.app.PendingIntent readPendingIntentOrNullFromParcel(android.os.Parcel)>
<android.app.PendingIntent: int describeContents()>
<android.app.PendingIntent: void cancel()>
<android.app.PendingIntent: java.lang.String getTargetPackage()>
<android.app.PendingIntent: java.lang.String getCreatorPackage()>
<android.app.PendingIntent: void send(int)>
<android.app.PendingIntent: void writeToParcel(android.os.Parcel,int)>
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent.OnFinished,android.os.Handler,java.lang.String,android.os.Bundle)>
<java.util.concurrent.ThreadPoolExecutor.AbortPolicy: void rejectedExecution(Runnable,java.util.concurrent.ThreadPoolExecutor)>
<java.util.concurrent.ThreadPoolExecutor.AbortPolicy: void <init>()>
<android.telecom.Call.Details: boolean can(int,int)>
<android.telecom.Call.Details: int getCallDirection()>
<android.telecom.Call.Details: java.lang.String propertiesToString(int)>
<android.telecom.Call.Details: android.net.Uri getHandle()>
<android.telecom.Call.Details: android.telecom.StatusHints getStatusHints()>
<android.telecom.Call.Details: int getCallProperties()>
<android.telecom.Call.Details: android.os.Bundle getIntentExtras()>
<android.telecom.Call.Details: java.lang.String capabilitiesToString(int)>
<android.telecom.Call.Details: java.lang.String getCallerDisplayName()>
<android.telecom.Call.Details: long getConnectTimeMillis()>
<android.telecom.Call.Details: android.telecom.GatewayInfo getGatewayInfo()>
<android.telecom.Call.Details: int getVideoState()>
<android.telecom.Call.Details: boolean hasProperty(int,int)>
<android.telecom.Call.Details: long getCreationTimeMillis()>
<android.telecom.Call.Details: int getHandlePresentation()>
<android.telecom.Call.Details: android.telecom.DisconnectCause getDisconnectCause()>
<android.telecom.Call.Details: boolean hasProperty(int)>
<android.telecom.Call.Details: android.telecom.PhoneAccountHandle getAccountHandle()>
<android.telecom.Call.Details: int getCallCapabilities()>
<android.telecom.Call.Details: boolean can(int)>
<android.telecom.Call.Details: int getCallerDisplayNamePresentation()>
<android.telecom.Call.Details: android.os.Bundle getExtras()>
<android.os.PowerManager: boolean setDynamicPowerSaveHint(boolean,int)>
<android.os.PowerManager: boolean isSustainedPerformanceModeSupported()>
<android.os.PowerManager: int getPowerSaveModeTrigger()>
<android.os.PowerManager: boolean forceSuspend()>
<android.os.PowerManager: boolean setAdaptivePowerSavePolicy(android.os.BatterySaverPolicyConfig)>
<android.os.PowerManager: boolean isIgnoringBatteryOptimizations(java.lang.String)>
<android.os.PowerManager: void removeThermalStatusListener(android.os.PowerManager.OnThermalStatusChangedListener)>
<android.os.PowerManager: boolean isDeviceIdleMode()>
<android.os.PowerManager: void reboot(java.lang.String)>
<android.os.PowerManager: boolean isPowerSaveMode()>
<android.os.PowerManager: android.os.PowerManager.WakeLock newWakeLock(int,java.lang.String)>
<android.os.PowerManager: boolean isWakeLockLevelSupported(int)>
<android.os.PowerManager: boolean setAdaptivePowerSaveEnabled(boolean)>
<android.os.PowerManager: boolean setPowerSaveModeEnabled(boolean)>
<android.os.PowerManager: int getLocationPowerSaveMode()>
<android.os.PowerManager: void dream(long)>
<android.os.PowerManager: void addThermalStatusListener(java.util.concurrent.Executor,android.os.PowerManager.OnThermalStatusChangedListener)>
<android.os.PowerManager: void addThermalStatusListener(android.os.PowerManager.OnThermalStatusChangedListener)>
<android.os.PowerManager: void userActivity(long,int,int)>
<android.os.PowerManager: boolean isScreenOn()>
<android.os.PowerManager: int getCurrentThermalStatus()>
<android.os.PowerManager: boolean isInteractive()>
<android.security.keystore.recovery.RecoveryController: java.security.Key importKey(java.lang.String,byte[],byte[])>
<android.security.keystore.recovery.RecoveryController: java.security.Key generateKey(java.lang.String)>
<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.KeyChainSnapshot getKeyChainSnapshot()>
<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.RecoverySession createRecoverySession()>
<android.security.keystore.recovery.RecoveryController: boolean isRecoverableKeyStoreEnabled(android.content.Context)>
<android.security.keystore.recovery.RecoveryController: int getRecoveryStatus(java.lang.String)>
<android.security.keystore.recovery.RecoveryController: java.util.Map getRootCertificates()>
<android.security.keystore.recovery.RecoveryController: java.security.Key importKey(java.lang.String,byte[])>
<android.security.keystore.recovery.RecoveryController: void setRecoveryStatus(java.lang.String,int)>
<android.security.keystore.recovery.RecoveryController: void initRecoveryService(java.lang.String,byte[],byte[])>
<android.security.keystore.recovery.RecoveryController: int[] getRecoverySecretTypes()>
<android.security.keystore.recovery.RecoveryController: void setRecoverySecretTypes(int[])>
<android.security.keystore.recovery.RecoveryController: java.util.List getAliases()>
<android.security.keystore.recovery.RecoveryController: void removeKey(java.lang.String)>
<android.security.keystore.recovery.RecoveryController: void setServerParams(byte[])>
<android.security.keystore.recovery.RecoveryController: java.security.Key generateKey(java.lang.String,byte[])>
<android.security.keystore.recovery.RecoveryController: java.security.Key getKey(java.lang.String)>
<android.security.keystore.recovery.RecoveryController: void setSnapshotCreatedPendingIntent(android.app.PendingIntent)>
<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.RecoveryController getInstance(android.content.Context)>
<java.nio.file.WatchEvent.Kind: java.lang.Class type()>
<java.nio.file.WatchEvent.Kind: java.lang.String name()>
<android.text.AlteredCharSequence: void getChars(int,int,char[],int)>
<android.text.AlteredCharSequence: CharSequence subSequence(int,int)>
<android.text.AlteredCharSequence: int length()>
<android.text.AlteredCharSequence: char charAt(int)>
<android.text.AlteredCharSequence: android.text.AlteredCharSequence make(CharSequence,char[],int,int)>
<android.printservice.CustomPrinterIconCallback: boolean onCustomPrinterIconLoaded(android.graphics.drawable.Icon)>
<android.view.ViewTreeObserver.OnGlobalLayoutListener: void onGlobalLayout()>
<android.view.animation.AnimationSet: void <init>(boolean)>
<android.view.animation.AnimationSet: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AnimationSet: java.util.List getAnimations()>
<android.view.animation.AnimationSet: android.view.animation.AnimationSet clone()>
<android.view.animation.AnimationSet: void addAnimation(android.view.animation.Animation)>
<android.app.VrManager: void setPersistentVrModeEnabled(boolean)>
<android.app.VrManager: int getVr2dDisplayId()>
<android.app.VrManager: void registerVrStateCallback(java.util.concurrent.Executor,android.app.VrStateCallback)>
<android.app.VrManager: void setStandbyEnabled(boolean)>
<android.app.VrManager: void setVrInputMethod(android.content.ComponentName)>
<android.app.VrManager: boolean isVrModeEnabled()>
<android.app.VrManager: void unregisterVrStateCallback(android.app.VrStateCallback)>
<android.app.VrManager: boolean isPersistentVrModeEnabled()>
<android.app.VrManager: void setAndBindVrCompositor(android.content.ComponentName)>
<android.app.VrManager: void setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)>
<android.widget.ListPopupWindow: void setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)>
<android.widget.ListPopupWindow: int getWidth()>
<android.widget.ListPopupWindow: void setAnimationStyle(@StyleResint)>
<android.widget.ListPopupWindow: android.view.View.OnTouchListener createDragToOpenListener(android.view.View)>
<android.widget.ListPopupWindow: int getVerticalOffset()>
<android.widget.ListPopupWindow: void setSelection(int)>
<android.widget.ListPopupWindow: boolean isShowing()>
<android.widget.ListPopupWindow: void setAnchorView(android.view.View)>
<android.widget.ListPopupWindow: void setContentWidth(int)>
<android.widget.ListPopupWindow: long getSelectedItemId()>
<android.widget.ListPopupWindow: void setPromptPosition(int)>
<android.widget.ListPopupWindow: void setSoftInputMode(int)>
<android.widget.ListPopupWindow: int getInputMethodMode()>
<android.widget.ListPopupWindow: android.graphics.Rect getEpicenterBounds()>
<android.widget.ListPopupWindow: int getHeight()>
<android.widget.ListPopupWindow: int getHorizontalOffset()>
<android.widget.ListPopupWindow: void dismiss()>
<android.widget.ListPopupWindow: void setInputMethodMode(int)>
<android.widget.ListPopupWindow: boolean isModal()>
<android.widget.ListPopupWindow: void setWidth(int)>
<android.widget.ListPopupWindow: void clearListSelection()>
<android.widget.ListPopupWindow: boolean onKeyPreIme(int,android.view.KeyEvent)>
<android.widget.ListPopupWindow: void setListSelector(android.graphics.drawable.Drawable)>
<android.widget.ListPopupWindow: void setWindowLayoutType(int)>
<android.widget.ListPopupWindow: void setOnDismissListener(android.widget.PopupWindow.OnDismissListener)>
<android.widget.ListPopupWindow: int getAnimationStyle()>
<android.widget.ListPopupWindow: void <init>(android.content.Context)>
<android.widget.ListPopupWindow: void postShow()>
<android.widget.ListPopupWindow: java.lang.Object getSelectedItem()>
<android.widget.ListPopupWindow: boolean performItemClick(int)>
<android.widget.ListPopupWindow: void setHorizontalOffset(int)>
<android.widget.ListPopupWindow: android.view.View getAnchorView()>
<android.widget.ListPopupWindow: void show()>
<android.widget.ListPopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.ListPopupWindow: void setVerticalOffset(int)>
<android.widget.ListPopupWindow: android.view.View getSelectedView()>
<android.widget.ListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,@AttrRes int)>
<android.widget.ListPopupWindow: android.widget.ListView getListView()>
<android.widget.ListPopupWindow: int getSoftInputMode()>
<android.widget.ListPopupWindow: void setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)>
<android.widget.ListPopupWindow: void setDropDownGravity(int)>
<android.widget.ListPopupWindow: void setEpicenterBounds(android.graphics.Rect)>
<android.widget.ListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ListPopupWindow: void setModal(boolean)>
<android.widget.ListPopupWindow: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.ListPopupWindow: int getPromptPosition()>
<android.widget.ListPopupWindow: boolean onKeyDown(int,android.view.KeyEvent)>
<android.widget.ListPopupWindow: void setHeight(int)>
<android.widget.ListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,@AttrRes int,@StyleRes int)>
<android.widget.ListPopupWindow: void setAdapter(android.widget.ListAdapter)>
<android.widget.ListPopupWindow: void setPromptView(android.view.View)>
<android.widget.ListPopupWindow: int getSelectedItemPosition()>
<android.widget.ListPopupWindow: android.graphics.drawable.Drawable getBackground()>
<android.widget.ListPopupWindow: boolean isInputMethodNotNeeded()>
<android.net.wifi.RttManager.RttListener: void onAborted()>
<android.net.wifi.RttManager.RttListener: void onFailure(int,java.lang.String)>
<android.net.wifi.RttManager.RttListener: void onSuccess(android.net.wifi.RttManager.RttResult[])>
<java.lang.IllegalAccessException: void <init>()>
<java.lang.IllegalAccessException: void <init>(String)>
<javax.crypto.spec.PSource: void <init>(String)>
<javax.crypto.spec.PSource: java.lang.String getAlgorithm()>
<android.content.pm.ShortcutManager.ShareShortcutInfo: android.content.pm.ShortcutInfo getShortcutInfo()>
<android.content.pm.ShortcutManager.ShareShortcutInfo: int describeContents()>
<android.content.pm.ShortcutManager.ShareShortcutInfo: android.content.ComponentName getTargetComponent()>
<android.content.pm.ShortcutManager.ShareShortcutInfo: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.BatchUpdates: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.BatchUpdates: int describeContents()>
<android.telecom.CallRedirectionService: void onPlaceCall(android.net.Uri,android.telecom.PhoneAccountHandle,boolean)>
<android.telecom.CallRedirectionService: void placeCallUnmodified()>
<android.telecom.CallRedirectionService: void cancelCall()>
<android.telecom.CallRedirectionService: android.os.IBinder onBind(android.content.Intent)>
<android.telecom.CallRedirectionService: boolean onUnbind(android.content.Intent)>
<android.telecom.CallRedirectionService: void redirectCall(android.net.Uri,android.telecom.PhoneAccountHandle,boolean)>
<android.telecom.CallRedirectionService: void <init>()>
<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect,android.graphics.Paint)>
<android.graphics.NinePatch: void <init>(android.graphics.Bitmap,byte[],String)>
<android.graphics.NinePatch: android.graphics.Paint getPaint()>
<android.graphics.NinePatch: boolean hasAlpha()>
<android.graphics.NinePatch: android.graphics.Bitmap getBitmap()>
<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect)>
<android.graphics.NinePatch: int getDensity()>
<android.graphics.NinePatch: void <init>(android.graphics.Bitmap,byte[])>
<android.graphics.NinePatch: int getWidth()>
<android.graphics.NinePatch: int getHeight()>
<android.graphics.NinePatch: java.lang.String getName()>
<android.graphics.NinePatch: android.graphics.Region getTransparentRegion(android.graphics.Rect)>
<android.graphics.NinePatch: void setPaint(android.graphics.Paint)>
<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.RectF)>
<android.graphics.NinePatch: boolean isNinePatchChunk(byte[])>
<android.database.AbstractCursor.SelfContentObserver: void <init>(android.database.AbstractCursor)>
<android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setFlags(int)>
<android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setInternalCapturePreset(int)>
<android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setHapticChannelsMuted(boolean)>
<android.media.AudioAttributes.Builder: void <init>()>
<android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder addBundle(android.os.Bundle)>
<android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setContentType(int)>
<android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setLegacyStreamType(int)>
<android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setAllowedCapturePolicy(int)>
<android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setCapturePreset(int)>
<android.media.AudioAttributes.Builder: android.media.AudioAttributes.Builder setUsage(int)>
<android.media.AudioAttributes.Builder: void <init>(android.media.AudioAttributes)>
<android.media.AudioAttributes.Builder: android.media.AudioAttributes build()>
<android.app.contentsuggestions.SelectionsRequest.Builder: android.app.contentsuggestions.SelectionsRequest.Builder setExtras(android.os.Bundle)>
<android.app.contentsuggestions.SelectionsRequest.Builder: android.app.contentsuggestions.SelectionsRequest.Builder setInterestPoint(android.graphics.Point)>
<android.app.contentsuggestions.SelectionsRequest.Builder: void <init>(int)>
<android.app.contentsuggestions.SelectionsRequest.Builder: android.app.contentsuggestions.SelectionsRequest build()>
<android.view.ViewGroup.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.ViewGroup.LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>
<android.view.ViewGroup.LayoutParams: void resolveLayoutDirection(int)>
<android.view.ViewGroup.LayoutParams: void <init>(int,int)>
<android.widget.TextView: android.os.Bundle getInputExtras(boolean)>
<android.widget.TextView: void setFilters(android.text.InputFilter[])>
<android.widget.TextView: void setMaxHeight(int)>
<android.widget.TextView: void setTextSelectHandleRight(@DrawableResint)>
<android.widget.TextView: int getMinEms()>
<android.widget.TextView: void setTextSelectHandleLeft(@DrawableResint)>
<android.widget.TextView: boolean setFontVariationSettings(java.lang.String)>
<android.widget.TextView: void setHyphenationFrequency(int)>
<android.widget.TextView: int getFirstBaselineToTopHeight()>
<android.widget.TextView: void setMinWidth(int)>
<android.widget.TextView: void setText(char[],int,int)>
<android.widget.TextView: int getAutoLinkMask()>
<android.widget.TextView: void onCommitCorrection(android.view.inputmethod.CorrectionInfo)>
<android.widget.TextView: void setHeight(int)>
<android.widget.TextView: boolean isHorizontallyScrollable()>
<android.widget.TextView: void append(CharSequence)>
<android.widget.TextView: android.os.LocaleList getTextLocales()>
<android.widget.TextView: void setMinLines(int)>
<android.widget.TextView: int getGravity()>
<android.widget.TextView: void setTextClassifier(android.view.textclassifier.TextClassifier)>
<android.widget.TextView: int getAutoSizeStepGranularity()>
<android.widget.TextView: float getShadowDy()>
<android.widget.TextView: int getOffsetForPosition(float,float)>
<android.widget.TextView: android.text.TextDirectionHeuristic getTextDirectionHeuristic()>
<android.widget.TextView: int getLineBounds(int,android.graphics.Rect)>
<android.widget.TextView: CharSequence getText()>
<android.widget.TextView: boolean onPrivateIMECommand(java.lang.String,android.os.Bundle)>
<android.widget.TextView: int getLineCount()>
<android.widget.TextView: void beginBatchEdit()>
<android.widget.TextView: void setLetterSpacing(float)>
<android.widget.TextView: void setShowSoftInputOnFocus(boolean)>
<android.widget.TextView: void setCustomSelectionActionModeCallback(android.view.ActionMode.Callback)>
<android.widget.TextView: void setLinksClickable(boolean)>
<android.widget.TextView: android.content.res.ColorStateList getTextColors()>
<android.widget.TextView: void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int)>
<android.widget.TextView: int[] getAutoSizeTextAvailableSizes()>
<android.widget.TextView: int getCompoundPaddingEnd()>
<android.widget.TextView: void setElegantTextHeight(boolean)>
<android.widget.TextView: boolean getFreezesText()>
<android.widget.TextView: int getSelectionStart()>
<android.widget.TextView: int getMinHeight()>
<android.widget.TextView: void setTextCursorDrawable(@DrawableResint)>
<android.widget.TextView: int getMaxHeight()>
<android.widget.TextView: android.text.InputFilter[] getFilters()>
<android.widget.TextView: void setTextColor(@ColorIntint)>
<android.widget.TextView: void setFreezesText(boolean)>
<android.widget.TextView: android.text.Layout getLayout()>
<android.widget.TextView: int getExtendedPaddingTop()>
<android.widget.TextView: void setTextCursorDrawable(android.graphics.drawable.Drawable)>
<android.widget.TextView: void setMinHeight(int)>
<android.widget.TextView: java.lang.String getPrivateImeOptions()>
<android.widget.TextView: android.text.method.KeyListener getKeyListener()>
<android.widget.TextView: java.lang.String getFontFeatureSettings()>
<android.widget.TextView: void setCompoundDrawablesRelative(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setHorizontallyScrolling(boolean)>
<android.widget.TextView: void setHintTextColor(android.content.res.ColorStateList)>
<android.widget.TextView: void setHint(CharSequence)>
<android.widget.TextView: void setTextSelectHandleLeft(android.graphics.drawable.Drawable)>
<android.widget.TextView: void setScroller(android.widget.Scroller)>
<android.widget.TextView: int getMaxLines()>
<android.widget.TextView: void setCompoundDrawableTintMode(android.graphics.PorterDuff.Mode)>
<android.widget.TextView: void setBreakStrategy(int)>
<android.widget.TextView: void setLineSpacing(float,float)>
<android.widget.TextView: void setAllCaps(boolean)>
<android.widget.TextView: float getShadowDx()>
<android.widget.TextView: int getTotalPaddingBottom()>
<android.widget.TextView: void setTextAppearance(android.content.Context,@StyleResint)>
<android.widget.TextView: void setTextScaleX(float)>
<android.widget.TextView: int getBreakStrategy()>
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.TextView: void setCompoundDrawableTintBlendMode(android.graphics.BlendMode)>
<android.widget.TextView: android.text.style.URLSpan[] getUrls()>
<android.widget.TextView: boolean isAllCaps()>
<android.widget.TextView: void clearComposingText()>
<android.widget.TextView: void setAutoSizeTextTypeWithDefaults(int)>
<android.widget.TextView: android.text.Editable getEditableText()>
<android.widget.TextView: void setCursorVisible(boolean)>
<android.widget.TextView: void setEllipsize(android.text.TextUtils.TruncateAt)>
<android.widget.TextView: android.text.TextUtils.TruncateAt getEllipsize()>
<android.widget.TextView: void setTextLocale(java.util.Locale)>
<android.widget.TextView: void setTransformationMethod(android.text.method.TransformationMethod)>
<android.widget.TextView: void setTypeface(android.graphics.Typeface,int)>
<android.widget.TextView: void onRestoreInstanceState(android.os.Parcelable)>
<android.widget.TextView: void setTextKeepState(CharSequence,android.widget.TextView.BufferType)>
<android.widget.TextView: android.content.res.ColorStateList getCompoundDrawableTintList()>
<android.widget.TextView: int getCurrentTextColor()>
<android.widget.TextView: int getHighlightColor()>
<android.widget.TextView: void setImeHintLocales(android.os.LocaleList)>
<android.widget.TextView: int getShadowColor()>
<android.widget.TextView: int getCompoundPaddingRight()>
<android.widget.TextView: int getCompoundDrawablePadding()>
<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandleLeft()>
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.TextView: void setSingleLine()>
<android.widget.TextView: void onEditorAction(int)>
<android.widget.TextView: android.graphics.drawable.Drawable getTextCursorDrawable()>
<android.widget.TextView: android.content.res.ColorStateList getLinkTextColors()>
<android.widget.TextView: float getShadowRadius()>
<android.widget.TextView: boolean onPreDraw()>
<android.widget.TextView: void setCompoundDrawableTintList(android.content.res.ColorStateList)>
<android.widget.TextView: android.text.method.MovementMethod getDefaultMovementMethod()>
<android.widget.TextView: void setCustomInsertionActionModeCallback(android.view.ActionMode.Callback)>
<android.widget.TextView: int getCompoundPaddingStart()>
<android.widget.TextView: float getLineSpacingMultiplier()>
<android.widget.TextView: void setMaxLines(int)>
<android.widget.TextView: java.util.Locale getTextLocale()>
<android.widget.TextView: void setSelectAllOnFocus(boolean)>
<android.widget.TextView: void endBatchEdit()>
<android.widget.TextView: boolean bringPointIntoView(int)>
<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandle()>
<android.widget.TextView: void setPrivateImeOptions(java.lang.String)>
<android.widget.TextView: void <init>(android.content.Context)>
<android.widget.TextView: void setError(CharSequence)>
<android.widget.TextView: void setWidth(int)>
<android.widget.TextView: int getMaxWidth()>
<android.widget.TextView: android.view.textclassifier.TextClassifier getTextClassifier()>
<android.widget.TextView: int getPaintFlags()>
<android.widget.TextView: void setFontFeatureSettings(java.lang.String)>
<android.widget.TextView: CharSequence getImeActionLabel()>
<android.widget.TextView: void debug(int)>
<android.widget.TextView: int getExtendedPaddingBottom()>
<android.widget.TextView: boolean isInputMethodTarget()>
<android.widget.TextView: void setMaxEms(int)>
<android.widget.TextView: void setTextColor(android.content.res.ColorStateList)>
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TextView: boolean setFrame(int,int,int,int)>
<android.widget.TextView: void append(CharSequence,int,int)>
<android.widget.TextView: boolean isSingleLine()>
<android.widget.TextView: int getTotalPaddingLeft()>
<android.widget.TextView: android.view.ActionMode.Callback getCustomInsertionActionModeCallback()>
<android.widget.TextView: android.text.method.MovementMethod getMovementMethod()>
<android.widget.TextView: void setMaxWidth(int)>
<android.widget.TextView: void setOnEditorActionListener(android.widget.TextView.OnEditorActionListener)>
<android.widget.TextView: void setTextSelectHandle(@DrawableResint)>
<android.widget.TextView: void setTextSize(int,float)>
<android.widget.TextView: int getTotalPaddingTop()>
<android.widget.TextView: void setAutoSizeTextTypeUniformWithPresetSizes(int[],int)>
<android.widget.TextView: CharSequence getHint()>
<android.widget.TextView: android.graphics.Typeface getTypeface()>
<android.widget.TextView: void setTextKeepState(CharSequence)>
<android.widget.TextView: void setInputExtras(@XmlResint)>
<android.widget.TextView: int getLineHeight()>
<android.widget.TextView: boolean getLinksClickable()>
<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandleRight()>
<android.widget.TextView: android.graphics.BlendMode getCompoundDrawableTintBlendMode()>
<android.widget.TextView: int getSelectionEnd()>
<android.widget.TextView: void setInputType(int)>
<android.widget.TextView: int length()>
<android.widget.TextView: void setImeOptions(int)>
<android.widget.TextView: void setPaintFlags(int)>
<android.widget.TextView: boolean isTextSelectable()>
<android.widget.TextView: boolean isCursorVisible()>
<android.widget.TextView: void addTextChangedListener(android.text.TextWatcher)>
<android.widget.TextView: void setMarqueeRepeatLimit(int)>
<android.widget.TextView: void setHighlightColor(@ColorIntint)>
<android.widget.TextView: void setTextAppearance(@StyleResint)>
<android.widget.TextView: void setFallbackLineSpacing(boolean)>
<android.widget.TextView: boolean moveCursorToVisibleOffset()>
<android.widget.TextView: int getAutoSizeMaxTextSize()>
<android.widget.TextView: void setTextMetricsParams(android.text.PrecomputedText.Params)>
<android.widget.TextView: void setText(@StringResint,android.widget.TextView.BufferType)>
<android.widget.TextView: int getCompoundPaddingBottom()>
<android.widget.TextView: void setExtractedText(android.view.inputmethod.ExtractedText)>
<android.widget.TextView: int getCurrentHintTextColor()>
<android.widget.TextView: float getTextScaleX()>
<android.widget.TextView: boolean onTextContextMenuItem(int)>
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setIncludeFontPadding(boolean)>
<android.widget.TextView: int getTotalPaddingRight()>
<android.widget.TextView: void setLines(int)>
<android.widget.TextView: void setText(@StringResint)>
<android.widget.TextView: android.graphics.PorterDuff.Mode getCompoundDrawableTintMode()>
<android.widget.TextView: void onEndBatchEdit()>
<android.widget.TextView: void setError(CharSequence,android.graphics.drawable.Drawable)>
<android.widget.TextView: void onTextChanged(CharSequence,int,int,int)>
<android.widget.TextView: void setRawInputType(int)>
<android.widget.TextView: int getTotalPaddingStart()>
<android.widget.TextView: int getJustificationMode()>
<android.widget.TextView: boolean getShowSoftInputOnFocus()>
<android.widget.TextView: void setMinEms(int)>
<android.widget.TextView: int getAutoSizeTextType()>
<android.widget.TextView: void setCompoundDrawablePadding(int)>
<android.widget.TextView: void setAutoLinkMask(int)>
<android.widget.TextView: java.lang.String getFontVariationSettings()>
<android.widget.TextView: void setLinkTextColor(@ColorIntint)>
<android.widget.TextView: void setTextLocales(android.os.LocaleList)>
<android.widget.TextView: int getImeActionId()>
<android.widget.TextView: int getHyphenationFrequency()>
<android.widget.TextView: void onBeginBatchEdit()>
<android.widget.TextView: void setFirstBaselineToTopHeight(@Pxint)>
<android.widget.TextView: void setText(CharSequence)>
<android.widget.TextView: void setTextSelectHandle(android.graphics.drawable.Drawable)>
<android.widget.TextView: int getAutoSizeMinTextSize()>
<android.widget.TextView: boolean didTouchFocusSelect()>
<android.widget.TextView: int getCompoundPaddingLeft()>
<android.widget.TextView: void setTextIsSelectable(boolean)>
<android.widget.TextView: boolean getIncludeFontPadding()>
<android.widget.TextView: int getImeOptions()>
<android.widget.TextView: int getTotalPaddingEnd()>
<android.widget.TextView: void setTypeface(android.graphics.Typeface)>
<android.widget.TextView: int getMaxEms()>
<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setSingleLine(boolean)>
<android.widget.TextView: void setLastBaselineToBottomHeight(@Pxint)>
<android.widget.TextView: int getInputType()>
<android.widget.TextView: float getLineSpacingExtra()>
<android.widget.TextView: void setText(CharSequence,android.widget.TextView.BufferType)>
<android.widget.TextView: void onSelectionChanged(int,int)>
<android.widget.TextView: void removeTextChangedListener(android.text.TextWatcher)>
<android.widget.TextView: boolean extractText(android.view.inputmethod.ExtractedTextRequest,android.view.inputmethod.ExtractedText)>
<android.widget.TextView: void setEditableFactory(android.text.Editable.Factory)>
<android.widget.TextView: int getCompoundPaddingTop()>
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawablesRelative()>
<android.widget.TextView: void setHintTextColor(@ColorIntint)>
<android.widget.TextView: int getMinWidth()>
<android.widget.TextView: void setHint(@StringResint)>
<android.widget.TextView: int getLastBaselineToBottomHeight()>
<android.widget.TextView: boolean getDefaultEditable()>
<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()>
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(@DrawableResint,@DrawableResint,@DrawableResint,@DrawableResint)>
<android.widget.TextView: android.text.TextPaint getPaint()>
<android.widget.TextView: boolean isFallbackLineSpacing()>
<android.widget.TextView: void setGravity(int)>
<android.widget.TextView: void setImeActionLabel(CharSequence,int)>
<android.widget.TextView: void setKeyListener(android.text.method.KeyListener)>
<android.widget.TextView: void setEms(int)>
<android.widget.TextView: void setTextSize(float)>
<android.widget.TextView: void setLinkTextColor(android.content.res.ColorStateList)>
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawables()>
<android.widget.TextView: boolean hasSelection()>
<android.widget.TextView: float getTextSize()>
<android.widget.TextView: void setLineHeight(@Pxint)>
<android.widget.TextView: CharSequence getError()>
<android.widget.TextView: android.content.res.ColorStateList getHintTextColors()>
<android.widget.TextView: int getMinLines()>
<android.widget.TextView: void setMovementMethod(android.text.method.MovementMethod)>
<android.widget.TextView: android.os.LocaleList getImeHintLocales()>
<android.widget.TextView: boolean isElegantTextHeight()>
<android.widget.TextView: void setShadowLayer(float,float,float,int)>
<android.widget.TextView: android.text.PrecomputedText.Params getTextMetricsParams()>
<android.widget.TextView: float getLetterSpacing()>
<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(@DrawableResint,@DrawableResint,@DrawableResint,@DrawableResint)>
<android.widget.TextView: void onCommitCompletion(android.view.inputmethod.CompletionInfo)>
<android.widget.TextView: int getMarqueeRepeatLimit()>
<android.widget.TextView: boolean isSuggestionsEnabled()>
<android.widget.TextView: void setSpannableFactory(android.text.Spannable.Factory)>
<android.widget.TextView: android.view.ActionMode.Callback getCustomSelectionActionModeCallback()>
<android.widget.TextView: android.os.Parcelable onSaveInstanceState()>
<android.widget.TextView: void setJustificationMode(int)>
<android.widget.TextView: void setTextSelectHandleRight(android.graphics.drawable.Drawable)>
<android.hardware.display.DisplayManager: android.hardware.display.BrightnessConfiguration getBrightnessConfiguration()>
<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int,android.hardware.display.VirtualDisplay.Callback,android.os.Handler)>
<android.hardware.display.DisplayManager: void setBrightnessConfiguration(android.hardware.display.BrightnessConfiguration)>
<android.hardware.display.DisplayManager: void setSaturationLevel(float)>
<android.hardware.display.DisplayManager: android.view.Display[] getDisplays()>
<android.hardware.display.DisplayManager: android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()>
<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>
<android.hardware.display.DisplayManager: android.view.Display[] getDisplays(java.lang.String)>
<android.hardware.display.DisplayManager: android.util.Pair getMinimumBrightnessCurve()>
<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int)>
<android.hardware.display.DisplayManager: android.graphics.Point getStableDisplaySize()>
<android.hardware.display.DisplayManager: void registerDisplayListener(android.hardware.display.DisplayManager.DisplayListener,android.os.Handler)>
<android.hardware.display.DisplayManager: java.util.List getBrightnessEvents()>
<android.hardware.display.DisplayManager: void unregisterDisplayListener(android.hardware.display.DisplayManager.DisplayListener)>
<android.hardware.display.DisplayManager: java.util.List getAmbientBrightnessStats()>
<android.icu.util.Measure: void <init>(Number,android.icu.util.MeasureUnit)>
<android.icu.util.Measure: android.icu.util.MeasureUnit getUnit()>
<android.icu.util.Measure: java.lang.Number getNumber()>
<android.hardware.hdmi.HdmiPortInfo: boolean isArcSupported()>
<android.hardware.hdmi.HdmiPortInfo: void writeToParcel(android.os.Parcel,int)>
<android.hardware.hdmi.HdmiPortInfo: int describeContents()>
<android.hardware.hdmi.HdmiPortInfo: int getId()>
<android.hardware.hdmi.HdmiPortInfo: int getAddress()>
<android.hardware.hdmi.HdmiPortInfo: boolean isMhlSupported()>
<android.hardware.hdmi.HdmiPortInfo: void <init>(int,int,int,boolean,boolean,boolean)>
<android.hardware.hdmi.HdmiPortInfo: int getType()>
<android.hardware.hdmi.HdmiPortInfo: boolean isCecSupported()>
<android.net.wifi.RttManager.ResponderConfig: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.RttManager.ResponderConfig: void <init>()>
<android.net.wifi.RttManager.ResponderConfig: int describeContents()>
<android.view.inputmethod.InputMethodSession: void toggleSoftInput(int,int)>
<android.view.inputmethod.InputMethodSession: void dispatchKeyEvent(int,android.view.KeyEvent,android.view.inputmethod.InputMethodSession.EventCallback)>
<android.view.inputmethod.InputMethodSession: void updateCursor(android.graphics.Rect)>
<android.view.inputmethod.InputMethodSession: void appPrivateCommand(java.lang.String,android.os.Bundle)>
<android.view.inputmethod.InputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>
<android.view.inputmethod.InputMethodSession: void finishInput()>
<android.view.inputmethod.InputMethodSession: void updateExtractedText(int,android.view.inputmethod.ExtractedText)>
<android.view.inputmethod.InputMethodSession: void dispatchGenericMotionEvent(int,android.view.MotionEvent,android.view.inputmethod.InputMethodSession.EventCallback)>
<android.view.inputmethod.InputMethodSession: void updateSelection(int,int,int,int,int,int)>
<android.view.inputmethod.InputMethodSession: void dispatchTrackballEvent(int,android.view.MotionEvent,android.view.inputmethod.InputMethodSession.EventCallback)>
<android.view.inputmethod.InputMethodSession: void updateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)>
<android.view.inputmethod.InputMethodSession: void viewClicked(boolean)>
<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.io.File)>
<android.graphics.Typeface: boolean isItalic()>
<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)>
<android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>
<android.graphics.Typeface: android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)>
<android.graphics.Typeface: android.graphics.Typeface defaultFromStyle(int)>
<android.graphics.Typeface: int getWeight()>
<android.graphics.Typeface: int getStyle()>
<android.graphics.Typeface: boolean isBold()>
<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int,boolean)>
<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>
<android.view.accessibility.AccessibilityNodeInfo: void setContextClickable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int,android.os.Bundle)>
<android.view.accessibility.AccessibilityNodeInfo: void setDismissable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: int getLiveRegion()>
<android.view.accessibility.AccessibilityNodeInfo: void removeAction(int)>
<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setNumInstancesInUseCounter(java.util.concurrent.atomic.AtomicInteger)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setCollectionItemInfo(android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo focusSearch(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setTooltipText(CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void recycle()>
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setTouchDelegateInfo(android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo)>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getViewIdResourceName()>
<android.view.accessibility.AccessibilityNodeInfo: java.util.List getActionList()>
<android.view.accessibility.AccessibilityNodeInfo: void setCollectionInfo(android.view.accessibility.AccessibilityNodeInfo.CollectionInfo)>
<android.view.accessibility.AccessibilityNodeInfo: void setTextEntryKey(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isHeading()>
<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionEnd()>
<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>
<android.view.accessibility.AccessibilityNodeInfo: boolean removeChild(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: int getDrawingOrder()>
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByText(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction)>
<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityWindowInfo getWindow()>
<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isVisibleToUser()>
<android.view.accessibility.AccessibilityNodeInfo: void setError(CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setRangeInfo(android.view.accessibility.AccessibilityNodeInfo.RangeInfo)>
<android.view.accessibility.AccessibilityNodeInfo: void setPaneTitle(CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabelFor()>
<android.view.accessibility.AccessibilityNodeInfo: boolean removeChild(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: CharSequence getClassName()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo getTouchDelegateInfo()>
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: void setScreenReaderFocusable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setViewIdResourceName(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalAfter()>
<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setVisibleToUser(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: CharSequence getContentDescription()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isDismissable()>
<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.accessibility.AccessibilityNodeInfo: android.os.Bundle getExtras()>
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setAvailableExtraData(java.util.List)>
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo getCollectionItemInfo()>
<android.view.accessibility.AccessibilityNodeInfo: CharSequence getHintText()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isShowingHintText()>
<android.view.accessibility.AccessibilityNodeInfo: CharSequence getPaneTitle()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isImportantForAccessibility()>
<android.view.accessibility.AccessibilityNodeInfo: boolean removeAction(android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction)>
<android.view.accessibility.AccessibilityNodeInfo: int describeContents()>
<android.view.accessibility.AccessibilityNodeInfo: int getInputType()>
<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByViewId(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalBefore()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isContentInvalid()>
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: boolean refreshWithExtraData(java.lang.String,android.os.Bundle)>
<android.view.accessibility.AccessibilityNodeInfo: void setMovementGranularities(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setMultiLine(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isMultiLine()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain()>
<android.view.accessibility.AccessibilityNodeInfo: void setEditable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isEditable()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isAccessibilityFocused()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isContextClickable()>
<android.view.accessibility.AccessibilityNodeInfo: boolean refresh()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()>
<android.view.accessibility.AccessibilityNodeInfo: void setClassName(CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: void setTextSelection(int,int)>
<android.view.accessibility.AccessibilityNodeInfo: CharSequence getText()>
<android.view.accessibility.AccessibilityNodeInfo: void setShowingHintText(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: int getActions()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo.RangeInfo getRangeInfo()>
<android.view.accessibility.AccessibilityNodeInfo: int getMaxTextLength()>
<android.view.accessibility.AccessibilityNodeInfo: void setHeading(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setCanOpenPopup(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setMaxTextLength(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setDrawingOrder(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setInputType(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setImportantForAccessibility(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo.CollectionInfo getCollectionInfo()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()>
<android.view.accessibility.AccessibilityNodeInfo: CharSequence getTooltipText()>
<android.view.accessibility.AccessibilityNodeInfo: CharSequence getError()>
<android.view.accessibility.AccessibilityNodeInfo: void writeToParcelNoRecycle(android.os.Parcel,int)>
<android.view.accessibility.AccessibilityNodeInfo: int getMovementGranularities()>
<android.view.accessibility.AccessibilityNodeInfo: void setHintText(CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setLiveRegion(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setText(CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setContentInvalid(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isTextEntryKey()>
<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionStart()>
<android.view.accessibility.AccessibilityNodeInfo: CharSequence getPackageName()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>
<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: java.util.List getAvailableExtraData()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()>
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: boolean canOpenPopup()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabeledBy()>
<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isScreenReaderFocusable()>
<android.app.KeyguardManager.KeyguardLock: void disableKeyguard()>
<android.app.KeyguardManager.KeyguardLock: void reenableKeyguard()>
<android.util.JsonReader: void beginObject()>
<android.util.JsonReader: java.lang.String nextString()>
<android.util.JsonReader: java.lang.String nextName()>
<android.util.JsonReader: void beginArray()>
<android.util.JsonReader: void close()>
<android.util.JsonReader: boolean isLenient()>
<android.util.JsonReader: boolean nextBoolean()>
<android.util.JsonReader: void nextNull()>
<android.util.JsonReader: double nextDouble()>
<android.util.JsonReader: boolean hasNext()>
<android.util.JsonReader: android.util.JsonToken peek()>
<android.util.JsonReader: void setLenient(boolean)>
<android.util.JsonReader: void endObject()>
<android.util.JsonReader: void endArray()>
<android.util.JsonReader: long nextLong()>
<android.util.JsonReader: void <init>(java.io.Reader)>
<android.util.JsonReader: void skipValue()>
<android.util.JsonReader: int nextInt()>
<android.view.View.MeasureSpec: int getMode(int)>
<android.view.View.MeasureSpec: void <init>()>
<android.view.View.MeasureSpec: int getSize(int)>
<android.view.View.MeasureSpec: int makeMeasureSpec(int,int)>
<android.view.View.MeasureSpec: java.lang.String toString(int)>
<java.security.cert.CertificateParsingException: void <init>(String,Throwable)>
<java.security.cert.CertificateParsingException: void <init>(String)>
<java.security.cert.CertificateParsingException: void <init>(Throwable)>
<java.security.cert.CertificateParsingException: void <init>()>
<android.location.GpsStatus.Listener: void onGpsStatusChanged(int)>
<android.service.autofill.LuhnChecksumValidator: int describeContents()>
<android.service.autofill.LuhnChecksumValidator: boolean isValid(android.service.autofill.ValueFinder)>
<android.service.autofill.LuhnChecksumValidator: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.LuhnChecksumValidator: void <init>(android.view.autofill.AutofillId...)>
<java.nio.file.attribute.PosixFileAttributeView extends java.nio.file.attribute.BasicFileAttributeView java.nio.file.attribute.FileOwnerAttributeView: void setGroup(java.nio.file.attribute.GroupPrincipal)>
<java.nio.file.attribute.PosixFileAttributeView extends java.nio.file.attribute.BasicFileAttributeView java.nio.file.attribute.FileOwnerAttributeView: void setPermissions(java.util.Set)>
<java.nio.file.attribute.PosixFileAttributeView extends java.nio.file.attribute.BasicFileAttributeView java.nio.file.attribute.FileOwnerAttributeView: java.nio.file.attribute.PosixFileAttributes readAttributes()>
<android.preference.DialogPreference: CharSequence getNegativeButtonText()>
<android.preference.DialogPreference: void onPrepareDialogBuilder(android.app.AlertDialog.Builder)>
<android.preference.DialogPreference: void setDialogMessage(CharSequence)>
<android.preference.DialogPreference: android.view.View onCreateDialogView()>
<android.preference.DialogPreference: void setDialogTitle(CharSequence)>
<android.preference.DialogPreference: void setNegativeButtonText(@StringResint)>
<android.preference.DialogPreference: void showDialog(android.os.Bundle)>
<android.preference.DialogPreference: CharSequence getDialogTitle()>
<android.preference.DialogPreference: void onClick(android.content.DialogInterface,int)>
<android.preference.DialogPreference: void setNegativeButtonText(CharSequence)>
<android.preference.DialogPreference: void setDialogLayoutResource(int)>
<android.preference.DialogPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.DialogPreference: void <init>(android.content.Context)>
<android.preference.DialogPreference: android.graphics.drawable.Drawable getDialogIcon()>
<android.preference.DialogPreference: int getDialogLayoutResource()>
<android.preference.DialogPreference: void onActivityDestroy()>
<android.preference.DialogPreference: void setDialogTitle(int)>
<android.preference.DialogPreference: void setPositiveButtonText(@StringResint)>
<android.preference.DialogPreference: void setDialogIcon(android.graphics.drawable.Drawable)>
<android.preference.DialogPreference: android.app.Dialog getDialog()>
<android.preference.DialogPreference: void onDismiss(android.content.DialogInterface)>
<android.preference.DialogPreference: void onBindDialogView(android.view.View)>
<android.preference.DialogPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.DialogPreference: void setDialogIcon(@DrawableResint)>
<android.preference.DialogPreference: CharSequence getDialogMessage()>
<android.preference.DialogPreference: void onDialogClosed(boolean)>
<android.preference.DialogPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.DialogPreference: void setDialogMessage(int)>
<android.preference.DialogPreference: CharSequence getPositiveButtonText()>
<android.preference.DialogPreference: void setPositiveButtonText(CharSequence)>
<android.os.LocaleList: void <init>(java.util.Locale...)>
<android.os.LocaleList: java.lang.String toLanguageTags()>
<android.os.LocaleList: boolean isPseudoLocale(android.icu.util.ULocale)>
<android.os.LocaleList: void setDefault(android.os.LocaleList)>
<android.os.LocaleList: int indexOf(java.util.Locale)>
<android.os.LocaleList: android.os.LocaleList getEmptyLocaleList()>
<android.os.LocaleList: boolean isEmpty()>
<android.os.LocaleList: void writeToParcel(android.os.Parcel,int)>
<android.os.LocaleList: int size()>
<android.os.LocaleList: android.os.LocaleList getDefault()>
<android.os.LocaleList: android.os.LocaleList getAdjustedDefault()>
<android.os.LocaleList: int describeContents()>
<android.os.LocaleList: android.os.LocaleList forLanguageTags(java.lang.String)>
<android.os.LocaleList: java.util.Locale getFirstMatch(java.lang.String[])>
<android.os.LocaleList: java.util.Locale get(int)>
<javax.net.ssl.KeyManagerFactorySpi: void engineInit(java.security.KeyStore,char[])>
<javax.net.ssl.KeyManagerFactorySpi: void <init>()>
<javax.net.ssl.KeyManagerFactorySpi: javax.net.ssl.KeyManager[] engineGetKeyManagers()>
<javax.net.ssl.KeyManagerFactorySpi: void engineInit(javax.net.ssl.ManagerFactoryParameters)>
<android.content.ClipData: android.content.ClipData newIntent(CharSequence,android.content.Intent)>
<android.content.ClipData: int describeContents()>
<android.content.ClipData: android.content.ClipData.Item getItemAt(int)>
<android.content.ClipData: void <init>(android.content.ClipDescription,android.content.ClipData.Item)>
<android.content.ClipData: void <init>(android.content.ClipData)>
<android.content.ClipData: android.content.ClipDescription getDescription()>
<android.content.ClipData: android.content.ClipData newRawUri(CharSequence,android.net.Uri)>
<android.content.ClipData: android.content.ClipData newUri(android.content.ContentResolver,CharSequence,android.net.Uri)>
<android.content.ClipData: android.content.ClipData newHtmlText(CharSequence,CharSequence,java.lang.String)>
<android.content.ClipData: void addItem(android.content.ClipData.Item)>
<android.content.ClipData: android.content.ClipData newPlainText(CharSequence,CharSequence)>
<android.content.ClipData: void <init>(CharSequence,String[],android.content.ClipData.Item)>
<android.content.ClipData: void addItem(android.content.ContentResolver,android.content.ClipData.Item)>
<android.content.ClipData: void writeToParcel(android.os.Parcel,int)>
<android.content.ClipData: int getItemCount()>
<java.io.SerializablePermission: void <init>(String)>
<java.io.SerializablePermission: void <init>(String,String)>
<android.media.browse.MediaBrowser: void subscribe(java.lang.String,android.media.browse.MediaBrowser.SubscriptionCallback)>
<android.media.browse.MediaBrowser: android.os.Bundle getExtras()>
<android.media.browse.MediaBrowser: android.content.ComponentName getServiceComponent()>
<android.media.browse.MediaBrowser: void getItem(java.lang.String,android.media.browse.MediaBrowser.ItemCallback)>
<android.media.browse.MediaBrowser: void subscribe(java.lang.String,android.os.Bundle,android.media.browse.MediaBrowser.SubscriptionCallback)>
<android.media.browse.MediaBrowser: void unsubscribe(java.lang.String)>
<android.media.browse.MediaBrowser: android.media.session.MediaSession.Token getSessionToken()>
<android.media.browse.MediaBrowser: void unsubscribe(java.lang.String,android.media.browse.MediaBrowser.SubscriptionCallback)>
<android.media.browse.MediaBrowser: void <init>(android.content.Context,android.content.ComponentName,android.media.browse.MediaBrowser.ConnectionCallback,android.os.Bundle)>
<android.media.browse.MediaBrowser: void disconnect()>
<android.media.browse.MediaBrowser: java.lang.String getRoot()>
<android.media.browse.MediaBrowser: void connect()>
<android.media.browse.MediaBrowser: boolean isConnected()>
<android.text.method.PasswordTransformationMethod: void afterTextChanged(android.text.Editable)>
<android.text.method.PasswordTransformationMethod: void beforeTextChanged(CharSequence,int,int,int)>
<android.text.method.PasswordTransformationMethod: void onFocusChanged(android.view.View,CharSequence,boolean,int,android.graphics.Rect)>
<android.text.method.PasswordTransformationMethod: android.text.method.PasswordTransformationMethod getInstance()>
<android.text.method.PasswordTransformationMethod: CharSequence getTransformation(CharSequence,android.view.View)>
<android.text.method.PasswordTransformationMethod: void <init>()>
<android.text.method.PasswordTransformationMethod: void onTextChanged(CharSequence,int,int,int)>
<android.view.inputmethod.InputBinding: android.view.inputmethod.InputConnection getConnection()>
<android.view.inputmethod.InputBinding: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.InputBinding: int getPid()>
<android.view.inputmethod.InputBinding: void <init>(android.view.inputmethod.InputConnection,android.view.inputmethod.InputBinding)>
<android.view.inputmethod.InputBinding: int describeContents()>
<android.view.inputmethod.InputBinding: void <init>(android.view.inputmethod.InputConnection,android.os.IBinder,int,int)>
<android.view.inputmethod.InputBinding: android.os.IBinder getConnectionToken()>
<android.view.inputmethod.InputBinding: int getUid()>
<java.lang.reflect.ParameterizedType extends java.lang.reflect.Type: java.lang.reflect.Type getRawType()>
<java.lang.reflect.ParameterizedType extends java.lang.reflect.Type: java.lang.reflect.Type getOwnerType()>
<java.lang.reflect.ParameterizedType extends java.lang.reflect.Type: java.lang.reflect.Type[] getActualTypeArguments()>
<java.security.AlgorithmParametersSpi: T engineGetParameterSpec(java.lang.Class)>
<java.security.AlgorithmParametersSpi: void <init>()>
<java.security.AlgorithmParametersSpi: byte[] engineGetEncoded()>
<java.security.AlgorithmParametersSpi: void engineInit(java.security.spec.AlgorithmParameterSpec)>
<java.security.AlgorithmParametersSpi: byte[] engineGetEncoded(java.lang.String)>
<java.security.AlgorithmParametersSpi: java.lang.String engineToString()>
<java.security.AlgorithmParametersSpi: void engineInit(byte[],java.lang.String)>
<java.security.AlgorithmParametersSpi: void engineInit(byte[])>
<java.util.concurrent.ForkJoinTask: int getQueuedTaskCount()>
<java.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinTask peekNextLocalTask()>
<java.util.concurrent.ForkJoinTask: void invokeAll(java.util.concurrent.ForkJoinTask,java.util.concurrent.ForkJoinTask)>
<java.util.concurrent.ForkJoinTask: void quietlyComplete()>
<java.util.concurrent.ForkJoinTask: void invokeAll(java.util.concurrent.ForkJoinTask...)>
<java.util.concurrent.ForkJoinTask: V join()>
<java.util.concurrent.ForkJoinTask: short getForkJoinTaskTag()>
<java.util.concurrent.ForkJoinTask: boolean isCancelled()>
<java.util.concurrent.ForkJoinTask: boolean compareAndSetForkJoinTaskTag(short,short)>
<java.util.concurrent.ForkJoinTask: void completeExceptionally(java.lang.Throwable)>
<java.util.concurrent.ForkJoinTask: boolean isCompletedNormally()>
<java.util.concurrent.ForkJoinTask: void setRawResult(V)>
<java.util.concurrent.ForkJoinTask: boolean exec()>
<java.util.concurrent.ForkJoinTask: V getRawResult()>
<java.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinTask adapt(Runnable)>
<java.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinTask pollTask()>
<java.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinPool getPool()>
<java.util.concurrent.ForkJoinTask: V get()>
<java.util.concurrent.ForkJoinTask: void quietlyJoin()>
<java.util.concurrent.ForkJoinTask: void complete(V)>
<java.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinTask fork()>
<java.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinTask adapt(Runnable,T)>
<java.util.concurrent.ForkJoinTask: boolean isCompletedAbnormally()>
<java.util.concurrent.ForkJoinTask: void <init>()>
<java.util.concurrent.ForkJoinTask: boolean tryUnfork()>
<java.util.concurrent.ForkJoinTask: short setForkJoinTaskTag(short)>
<java.util.concurrent.ForkJoinTask: boolean isDone()>
<java.util.concurrent.ForkJoinTask: void helpQuiesce()>
<java.util.concurrent.ForkJoinTask: boolean inForkJoinPool()>
<java.util.concurrent.ForkJoinTask: void reinitialize()>
<java.util.concurrent.ForkJoinTask: java.util.Collection invokeAll(java.util.Collection)>
<java.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinTask adapt(java.util.concurrent.Callable)>
<java.util.concurrent.ForkJoinTask: java.lang.Throwable getException()>
<java.util.concurrent.ForkJoinTask: int getSurplusQueuedTaskCount()>
<java.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinTask pollNextLocalTask()>
<java.util.concurrent.ForkJoinTask: V get(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ForkJoinTask: V invoke()>
<java.util.concurrent.ForkJoinTask: boolean cancel(boolean)>
<java.util.concurrent.ForkJoinTask: void quietlyInvoke()>
<android.graphics.drawable.InsetDrawable: void <init>(android.graphics.drawable.Drawable,float)>
<android.graphics.drawable.InsetDrawable: void <init>(android.graphics.drawable.Drawable,float,float,float,float)>
<android.graphics.drawable.InsetDrawable: void <init>(android.graphics.drawable.Drawable,int)>
<android.graphics.drawable.InsetDrawable: void <init>(android.graphics.drawable.Drawable,int,int,int,int)>
<android.hardware.camera2.CameraCaptureSession.CaptureCallback: void <init>()>
<android.hardware.camera2.CameraCaptureSession.CaptureCallback: void onCaptureFailed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureFailure)>
<android.hardware.camera2.CameraCaptureSession.CaptureCallback: void onCaptureStarted(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,long,long)>
<android.hardware.camera2.CameraCaptureSession.CaptureCallback: void onCaptureProgressed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureResult)>
<android.hardware.camera2.CameraCaptureSession.CaptureCallback: void onCaptureSequenceCompleted(android.hardware.camera2.CameraCaptureSession,int,long)>
<android.hardware.camera2.CameraCaptureSession.CaptureCallback: void onCaptureCompleted(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.TotalCaptureResult)>
<android.hardware.camera2.CameraCaptureSession.CaptureCallback: void onCaptureBufferLost(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.view.Surface,long)>
<android.hardware.camera2.CameraCaptureSession.CaptureCallback: void onCaptureSequenceAborted(android.hardware.camera2.CameraCaptureSession,int)>
<java.util.Iterator: E next()>
<java.util.Iterator: void remove()>
<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>
<java.util.Iterator: boolean hasNext()>
<android.media.audiofx.NoiseSuppressor: boolean isAvailable()>
<android.media.audiofx.NoiseSuppressor: android.media.audiofx.NoiseSuppressor create(int)>
<android.media.AudioPlaybackCaptureConfiguration: int[] getMatchingUsages()>
<android.media.AudioPlaybackCaptureConfiguration: int[] getMatchingUids()>
<android.media.AudioPlaybackCaptureConfiguration: int[] getExcludeUids()>
<android.media.AudioPlaybackCaptureConfiguration: android.media.projection.MediaProjection getMediaProjection()>
<android.media.AudioPlaybackCaptureConfiguration: int[] getExcludeUsages()>
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder: android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder setRelativeSuggestedWordEndIndex(int)>
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder: android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder setRelativeWordEndIndex(int)>
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder: android.view.textclassifier.TextClassifierEvent.TextSelectionEvent build()>
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder: android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder setRelativeWordStartIndex(int)>
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder: void <init>(int)>
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder: android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder setRelativeSuggestedWordStartIndex(int)>
<org.xml.sax.HandlerBase: void startDocument()>
<org.xml.sax.HandlerBase: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>
<org.xml.sax.HandlerBase: void processingInstruction(java.lang.String,java.lang.String)>
<org.xml.sax.HandlerBase: void <init>()>
<org.xml.sax.HandlerBase: void endDocument()>
<org.xml.sax.HandlerBase: void setDocumentLocator(org.xml.sax.Locator)>
<org.xml.sax.HandlerBase: void fatalError(org.xml.sax.SAXParseException)>
<org.xml.sax.HandlerBase: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.HandlerBase: void ignorableWhitespace(char[],int,int)>
<org.xml.sax.HandlerBase: void startElement(java.lang.String,org.xml.sax.AttributeList)>
<org.xml.sax.HandlerBase: void endElement(java.lang.String)>
<org.xml.sax.HandlerBase: void notationDecl(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.HandlerBase: void warning(org.xml.sax.SAXParseException)>
<org.xml.sax.HandlerBase: void error(org.xml.sax.SAXParseException)>
<org.xml.sax.HandlerBase: void characters(char[],int,int)>
<android.app.backup.RestoreDescription: void <init>(String,int)>
<android.app.backup.RestoreDescription: java.lang.String getPackageName()>
<android.app.backup.RestoreDescription: void writeToParcel(android.os.Parcel,int)>
<android.app.backup.RestoreDescription: int describeContents()>
<android.app.backup.RestoreDescription: int getDataType()>
<android.widget.GridLayout.LayoutParams: void <init>(android.widget.GridLayout.Spec,android.widget.GridLayout.Spec)>
<android.widget.GridLayout.LayoutParams: void <init>(android.widget.GridLayout.LayoutParams)>
<android.widget.GridLayout.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.GridLayout.LayoutParams: void <init>(android.view.ViewGroup.MarginLayoutParams)>
<android.widget.GridLayout.LayoutParams: void setGravity(int)>
<android.widget.GridLayout.LayoutParams: void <init>()>
<android.widget.GridLayout.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.text.Spannable extends android.text.Spanned: void removeSpan(java.lang.Object)>
<android.text.Spannable extends android.text.Spanned: void setSpan(java.lang.Object,int,int,int)>
<java.util.concurrent.ConcurrentSkipListMap: java.util.Map.Entry pollFirstEntry()>
<java.util.concurrent.ConcurrentSkipListMap: java.util.Set entrySet()>
<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap descendingMap()>
<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap tailMap(K,boolean)>
<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap headMap(K,boolean)>
<java.util.concurrent.ConcurrentSkipListMap: K higherKey(K)>
<java.util.concurrent.ConcurrentSkipListMap: K lowerKey(K)>
<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap headMap(K)>
<java.util.concurrent.ConcurrentSkipListMap: void <init>()>
<java.util.concurrent.ConcurrentSkipListMap: java.util.NavigableSet keySet()>
<java.util.concurrent.ConcurrentSkipListMap: java.util.Map.Entry ceilingEntry(K)>
<java.util.concurrent.ConcurrentSkipListMap: java.util.Map.Entry higherEntry(K)>
<java.util.concurrent.ConcurrentSkipListMap: void <init>(java.util.SortedMap)>
<java.util.concurrent.ConcurrentSkipListMap: java.util.Map.Entry firstEntry()>
<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap subMap(K,boolean,K,boolean)>
<java.util.concurrent.ConcurrentSkipListMap: K firstKey()>
<java.util.concurrent.ConcurrentSkipListMap: java.util.NavigableSet descendingKeySet()>
<java.util.concurrent.ConcurrentSkipListMap: java.util.NavigableSet navigableKeySet()>
<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap clone()>
<java.util.concurrent.ConcurrentSkipListMap: java.util.Comparator comparator()>
<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap subMap(K,K)>
<java.util.concurrent.ConcurrentSkipListMap: K ceilingKey(K)>
<java.util.concurrent.ConcurrentSkipListMap: java.util.Map.Entry pollLastEntry()>
<java.util.concurrent.ConcurrentSkipListMap: K floorKey(K)>
<java.util.concurrent.ConcurrentSkipListMap: void <init>(java.util.Map)>
<java.util.concurrent.ConcurrentSkipListMap: K lastKey()>
<java.util.concurrent.ConcurrentSkipListMap: void <init>(java.util.Comparator)>
<java.util.concurrent.ConcurrentSkipListMap: java.util.Map.Entry lowerEntry(K)>
<java.util.concurrent.ConcurrentSkipListMap: java.util.Map.Entry lastEntry()>
<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentNavigableMap tailMap(K)>
<java.util.concurrent.ConcurrentSkipListMap: java.util.Map.Entry floorEntry(K)>
<javax.crypto.BadPaddingException: void <init>()>
<javax.crypto.BadPaddingException: void <init>(String)>
<android.telephony.mbms.GroupCall: void updateGroupCall(java.util.List,java.util.List)>
<android.telephony.mbms.GroupCall: void close()>
<android.telephony.mbms.GroupCall: long getTmgi()>
<android.database.sqlite.SQLiteClosable: void onAllReferencesReleased()>
<android.database.sqlite.SQLiteClosable: void <init>()>
<android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()>
<android.database.sqlite.SQLiteClosable: void acquireReference()>
<android.database.sqlite.SQLiteClosable: void close()>
<android.database.sqlite.SQLiteClosable: void onAllReferencesReleasedFromContainer()>
<android.database.sqlite.SQLiteClosable: void releaseReference()>
<android.webkit.TracingConfig.Builder: android.webkit.TracingConfig.Builder addCategories(java.lang.String...)>
<android.webkit.TracingConfig.Builder: void <init>()>
<android.webkit.TracingConfig.Builder: android.webkit.TracingConfig.Builder addCategories(int...)>
<android.webkit.TracingConfig.Builder: android.webkit.TracingConfig.Builder setTracingMode(int)>
<android.webkit.TracingConfig.Builder: android.webkit.TracingConfig.Builder addCategories(java.util.Collection)>
<android.webkit.TracingConfig.Builder: android.webkit.TracingConfig build()>
<android.database.sqlite.SQLiteDebug.DbStats: void <init>(String,long,long,int,int,int,int)>
<android.preference.SwitchPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.SwitchPreference: void setSwitchTextOff(CharSequence)>
<android.preference.SwitchPreference: void setSwitchTextOff(@StringResint)>
<android.preference.SwitchPreference: CharSequence getSwitchTextOn()>
<android.preference.SwitchPreference: void setSwitchTextOn(CharSequence)>
<android.preference.SwitchPreference: void <init>(android.content.Context)>
<android.preference.SwitchPreference: CharSequence getSwitchTextOff()>
<android.preference.SwitchPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.SwitchPreference: void setSwitchTextOn(@StringResint)>
<android.preference.SwitchPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.webkit.MimeTypeMap: java.lang.String getFileExtensionFromUrl(java.lang.String)>
<android.webkit.MimeTypeMap: boolean hasMimeType(java.lang.String)>
<android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()>
<android.webkit.MimeTypeMap: java.lang.String getExtensionFromMimeType(java.lang.String)>
<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)>
<android.webkit.MimeTypeMap: boolean hasExtension(java.lang.String)>
<javax.sql.RowSet extends java.sql.ResultSet: void setBoolean(java.lang.String,boolean)>
<javax.sql.RowSet extends java.sql.ResultSet: void setNClob(int,java.sql.NClob)>
<javax.sql.RowSet extends java.sql.ResultSet: void setEscapeProcessing(boolean)>
<javax.sql.RowSet extends java.sql.ResultSet: void setNString(int,java.lang.String)>
<javax.sql.RowSet extends java.sql.ResultSet: void setString(int,java.lang.String)>
<javax.sql.RowSet extends java.sql.ResultSet: void addRowSetListener(javax.sql.RowSetListener)>
<javax.sql.RowSet extends java.sql.ResultSet: void setNString(java.lang.String,java.lang.String)>
<javax.sql.RowSet extends java.sql.ResultSet: void setPassword(java.lang.String)>
<javax.sql.RowSet extends java.sql.ResultSet: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)>
<javax.sql.RowSet extends java.sql.ResultSet: void setNClob(int,java.io.Reader)>
<javax.sql.RowSet extends java.sql.ResultSet: void setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)>
<javax.sql.RowSet extends java.sql.ResultSet: void setQueryTimeout(int)>
<javax.sql.RowSet extends java.sql.ResultSet: void setByte(java.lang.String,byte)>
<javax.sql.RowSet extends java.sql.ResultSet: void setNull(int,int)>
<javax.sql.RowSet extends java.sql.ResultSet: void setTime(java.lang.String,java.sql.Time)>
<javax.sql.RowSet extends java.sql.ResultSet: int getQueryTimeout()>
<javax.sql.RowSet extends java.sql.ResultSet: void setCharacterStream(int,java.io.Reader,int)>
<javax.sql.RowSet extends java.sql.ResultSet: void setClob(java.lang.String,java.io.Reader,long)>
<javax.sql.RowSet extends java.sql.ResultSet: void setBoolean(int,boolean)>
<javax.sql.RowSet extends java.sql.ResultSet: void setCharacterStream(java.lang.String,java.io.Reader,int)>
<javax.sql.RowSet extends java.sql.ResultSet: int getMaxFieldSize()>
<javax.sql.RowSet extends java.sql.ResultSet: void setClob(int,java.io.Reader,long)>
<javax.sql.RowSet extends java.sql.ResultSet: void setMaxRows(int)>
<javax.sql.RowSet extends java.sql.ResultSet: int getTransactionIsolation()>
<javax.sql.RowSet extends java.sql.ResultSet: void setShort(java.lang.String,short)>
<javax.sql.RowSet extends java.sql.ResultSet: void setObject(int,java.lang.Object,int,int)>
<javax.sql.RowSet extends java.sql.ResultSet: void setCommand(java.lang.String)>
<javax.sql.RowSet extends java.sql.ResultSet: void setNClob(java.lang.String,java.sql.NClob)>
<javax.sql.RowSet extends java.sql.ResultSet: void setDate(java.lang.String,java.sql.Date)>
<javax.sql.RowSet extends java.sql.ResultSet: void setLong(java.lang.String,long)>
<javax.sql.RowSet extends java.sql.ResultSet: void setCharacterStream(int,java.io.Reader)>
<javax.sql.RowSet extends java.sql.ResultSet: java.lang.String getUrl()>
<javax.sql.RowSet extends java.sql.ResultSet: boolean isReadOnly()>
<javax.sql.RowSet extends java.sql.ResultSet: void setAsciiStream(int,java.io.InputStream)>
<javax.sql.RowSet extends java.sql.ResultSet: void setNull(java.lang.String,int,java.lang.String)>
<javax.sql.RowSet extends java.sql.ResultSet: void setConcurrency(int)>
<javax.sql.RowSet extends java.sql.ResultSet: void setSQLXML(int,java.sql.SQLXML)>
<javax.sql.RowSet extends java.sql.ResultSet: void setNClob(java.lang.String,java.io.Reader)>
<javax.sql.RowSet extends java.sql.ResultSet: void setBigDecimal(java.lang.String,java.math.BigDecimal)>
<javax.sql.RowSet extends java.sql.ResultSet: void setObject(int,java.lang.Object)>
<javax.sql.RowSet extends java.sql.ResultSet: void setBlob(java.lang.String,java.io.InputStream,long)>
<javax.sql.RowSet extends java.sql.ResultSet: void setBigDecimal(int,java.math.BigDecimal)>
<javax.sql.RowSet extends java.sql.ResultSet: void setBytes(java.lang.String,byte[])>
<javax.sql.RowSet extends java.sql.ResultSet: void setBlob(java.lang.String,java.sql.Blob)>
<javax.sql.RowSet extends java.sql.ResultSet: void setDate(int,java.sql.Date)>
<javax.sql.RowSet extends java.sql.ResultSet: java.lang.String getPassword()>
<javax.sql.RowSet extends java.sql.ResultSet: void setFloat(int,float)>
<javax.sql.RowSet extends java.sql.ResultSet: void setUsername(java.lang.String)>
<javax.sql.RowSet extends java.sql.ResultSet: int getMaxRows()>
<javax.sql.RowSet extends java.sql.ResultSet: void setDouble(int,double)>
<javax.sql.RowSet extends java.sql.ResultSet: void setTimestamp(java.lang.String,java.sql.Timestamp)>
<javax.sql.RowSet extends java.sql.ResultSet: void setAsciiStream(java.lang.String,java.io.InputStream,int)>
<javax.sql.RowSet extends java.sql.ResultSet: java.util.Map getTypeMap()>
<javax.sql.RowSet extends java.sql.ResultSet: void setBytes(int,byte[])>
<javax.sql.RowSet extends java.sql.ResultSet: void setFloat(java.lang.String,float)>
<javax.sql.RowSet extends java.sql.ResultSet: void setType(int)>
<javax.sql.RowSet extends java.sql.ResultSet: void setAsciiStream(int,java.io.InputStream,int)>
<javax.sql.RowSet extends java.sql.ResultSet: void setObject(java.lang.String,java.lang.Object,int,int)>
<javax.sql.RowSet extends java.sql.ResultSet: void setDataSourceName(java.lang.String)>
<javax.sql.RowSet extends java.sql.ResultSet: void setString(java.lang.String,java.lang.String)>
<javax.sql.RowSet extends java.sql.ResultSet: java.lang.String getDataSourceName()>
<javax.sql.RowSet extends java.sql.ResultSet: void setReadOnly(boolean)>
<javax.sql.RowSet extends java.sql.ResultSet: void setSQLXML(java.lang.String,java.sql.SQLXML)>
<javax.sql.RowSet extends java.sql.ResultSet: void setRowId(int,java.sql.RowId)>
<javax.sql.RowSet extends java.sql.ResultSet: void setBlob(int,java.io.InputStream,long)>
<javax.sql.RowSet extends java.sql.ResultSet: void setRef(int,java.sql.Ref)>
<javax.sql.RowSet extends java.sql.ResultSet: void removeRowSetListener(javax.sql.RowSetListener)>
<javax.sql.RowSet extends java.sql.ResultSet: void setNClob(java.lang.String,java.io.Reader,long)>
<javax.sql.RowSet extends java.sql.ResultSet: void setTime(int,java.sql.Time,java.util.Calendar)>
<javax.sql.RowSet extends java.sql.ResultSet: java.lang.String getCommand()>
<javax.sql.RowSet extends java.sql.ResultSet: void setArray(int,java.sql.Array)>
<javax.sql.RowSet extends java.sql.ResultSet: void setClob(java.lang.String,java.io.Reader)>
<javax.sql.RowSet extends java.sql.ResultSet: void setNCharacterStream(java.lang.String,java.io.Reader)>
<javax.sql.RowSet extends java.sql.ResultSet: void setBinaryStream(int,java.io.InputStream,int)>
<javax.sql.RowSet extends java.sql.ResultSet: void setBlob(java.lang.String,java.io.InputStream)>
<javax.sql.RowSet extends java.sql.ResultSet: java.lang.String getUsername()>
<javax.sql.RowSet extends java.sql.ResultSet: void setClob(int,java.sql.Clob)>
<javax.sql.RowSet extends java.sql.ResultSet: void setTime(int,java.sql.Time)>
<javax.sql.RowSet extends java.sql.ResultSet: void setNull(java.lang.String,int)>
<javax.sql.RowSet extends java.sql.ResultSet: void setShort(int,short)>
<javax.sql.RowSet extends java.sql.ResultSet: void setTransactionIsolation(int)>
<javax.sql.RowSet extends java.sql.ResultSet: void setCharacterStream(java.lang.String,java.io.Reader)>
<javax.sql.RowSet extends java.sql.ResultSet: void setDouble(java.lang.String,double)>
<javax.sql.RowSet extends java.sql.ResultSet: void setBinaryStream(java.lang.String,java.io.InputStream)>
<javax.sql.RowSet extends java.sql.ResultSet: void setTypeMap(java.util.Map)>
<javax.sql.RowSet extends java.sql.ResultSet: void setInt(int,int)>
<javax.sql.RowSet extends java.sql.ResultSet: void setNCharacterStream(int,java.io.Reader,long)>
<javax.sql.RowSet extends java.sql.ResultSet: void setAsciiStream(java.lang.String,java.io.InputStream)>
<javax.sql.RowSet extends java.sql.ResultSet: void setBinaryStream(java.lang.String,java.io.InputStream,int)>
<javax.sql.RowSet extends java.sql.ResultSet: void setTime(java.lang.String,java.sql.Time,java.util.Calendar)>
<javax.sql.RowSet extends java.sql.ResultSet: boolean getEscapeProcessing()>
<javax.sql.RowSet extends java.sql.ResultSet: void setObject(java.lang.String,java.lang.Object,int)>
<javax.sql.RowSet extends java.sql.ResultSet: void setBinaryStream(int,java.io.InputStream)>
<javax.sql.RowSet extends java.sql.ResultSet: void setByte(int,byte)>
<javax.sql.RowSet extends java.sql.ResultSet: void setURL(int,java.net.URL)>
<javax.sql.RowSet extends java.sql.ResultSet: void setTimestamp(int,java.sql.Timestamp)>
<javax.sql.RowSet extends java.sql.ResultSet: void setUrl(java.lang.String)>
<javax.sql.RowSet extends java.sql.ResultSet: void setObject(int,java.lang.Object,int)>
<javax.sql.RowSet extends java.sql.ResultSet: void setNCharacterStream(java.lang.String,java.io.Reader,long)>
<javax.sql.RowSet extends java.sql.ResultSet: void setBlob(int,java.io.InputStream)>
<javax.sql.RowSet extends java.sql.ResultSet: void setLong(int,long)>
<javax.sql.RowSet extends java.sql.ResultSet: void setClob(int,java.io.Reader)>
<javax.sql.RowSet extends java.sql.ResultSet: void clearParameters()>
<javax.sql.RowSet extends java.sql.ResultSet: void execute()>
<javax.sql.RowSet extends java.sql.ResultSet: void setClob(java.lang.String,java.sql.Clob)>
<javax.sql.RowSet extends java.sql.ResultSet: void setDate(java.lang.String,java.sql.Date,java.util.Calendar)>
<javax.sql.RowSet extends java.sql.ResultSet: void setNCharacterStream(int,java.io.Reader)>
<javax.sql.RowSet extends java.sql.ResultSet: void setNClob(int,java.io.Reader,long)>
<javax.sql.RowSet extends java.sql.ResultSet: void setRowId(java.lang.String,java.sql.RowId)>
<javax.sql.RowSet extends java.sql.ResultSet: void setBlob(int,java.sql.Blob)>
<javax.sql.RowSet extends java.sql.ResultSet: void setDate(int,java.sql.Date,java.util.Calendar)>
<javax.sql.RowSet extends java.sql.ResultSet: void setNull(int,int,java.lang.String)>
<javax.sql.RowSet extends java.sql.ResultSet: void setMaxFieldSize(int)>
<javax.sql.RowSet extends java.sql.ResultSet: void setObject(java.lang.String,java.lang.Object)>
<javax.sql.RowSet extends java.sql.ResultSet: void setInt(java.lang.String,int)>
<android.service.autofill.SaveInfo: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.SaveInfo: int describeContents()>
<java.io.CharArrayReader: void <init>(char[],int,int)>
<java.io.CharArrayReader: int read(char[],int,int)>
<java.io.CharArrayReader: void close()>
<java.io.CharArrayReader: void <init>(char[])>
<android.service.carrier.CarrierMessagingService.ResultCallback: void onReceiveResult(T)>
<java.util.function.IntUnaryOperator: int applyAsInt(int)>
<java.util.function.IntUnaryOperator: java.util.function.IntUnaryOperator compose(java.util.function.IntUnaryOperator)>
<java.util.function.IntUnaryOperator: java.util.function.IntUnaryOperator andThen(java.util.function.IntUnaryOperator)>
<java.util.function.IntUnaryOperator: java.util.function.IntUnaryOperator identity()>
<android.telephony.CellInfoNr: android.telephony.CellIdentity getCellIdentity()>
<android.telephony.CellInfoNr: android.telephony.CellSignalStrength getCellSignalStrength()>
<android.telephony.CellInfoNr: void writeToParcel(android.os.Parcel,int)>
<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,String)>
<javax.crypto.spec.SecretKeySpec: java.lang.String getFormat()>
<javax.crypto.spec.SecretKeySpec: void <init>(byte[],String)>
<javax.crypto.spec.SecretKeySpec: java.lang.String getAlgorithm()>
<javax.crypto.spec.SecretKeySpec: byte[] getEncoded()>
<android.net.StaticIpConfiguration: java.util.List getDnsServers()>
<android.net.StaticIpConfiguration: void writeToParcel(android.os.Parcel,int)>
<android.net.StaticIpConfiguration: int describeContents()>
<android.net.StaticIpConfiguration: java.util.List getRoutes(java.lang.String)>
<android.net.StaticIpConfiguration: android.net.LinkAddress getIpAddress()>
<android.net.StaticIpConfiguration: void <init>(android.net.StaticIpConfiguration)>
<android.net.StaticIpConfiguration: java.net.InetAddress getGateway()>
<android.net.StaticIpConfiguration: void addDnsServer(java.net.InetAddress)>
<android.net.StaticIpConfiguration: void <init>()>
<android.net.StaticIpConfiguration: void clear()>
<android.net.StaticIpConfiguration: java.lang.String getDomains()>
<java.lang.Integer: float floatValue()>
<java.lang.Integer: java.lang.String toUnsignedString(int,int)>
<java.lang.Integer: int hashCode(int)>
<java.lang.Integer: int max(int,int)>
<java.lang.Integer: java.lang.String toBinaryString(int)>
<java.lang.Integer: int signum(int)>
<java.lang.Integer: java.lang.Integer decode(java.lang.String)>
<java.lang.Integer: int rotateLeft(int,int)>
<java.lang.Integer: int reverseBytes(int)>
<java.lang.Integer: int numberOfTrailingZeros(int)>
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>
<java.lang.Integer: int intValue()>
<java.lang.Integer: int remainderUnsigned(int,int)>
<java.lang.Integer: int parseInt(java.lang.String,int)>
<java.lang.Integer: java.lang.String toString(int)>
<java.lang.Integer: java.lang.String toHexString(int)>
<java.lang.Integer: long longValue()>
<java.lang.Integer: int numberOfLeadingZeros(int)>
<java.lang.Integer: java.lang.Integer valueOf(int)>
<java.lang.Integer: java.lang.String toUnsignedString(int)>
<java.lang.Integer: int highestOneBit(int)>
<java.lang.Integer: void <init>(int)>
<java.lang.Integer: int parseUnsignedInt(java.lang.String,int)>
<java.lang.Integer: long toUnsignedLong(int)>
<java.lang.Integer: java.lang.String toString(int,int)>
<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>
<java.lang.Integer: int compareTo(java.lang.Integer)>
<java.lang.Integer: int bitCount(int)>
<java.lang.Integer: java.lang.String toOctalString(int)>
<java.lang.Integer: int divideUnsigned(int,int)>
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>
<java.lang.Integer: int compare(int,int)>
<java.lang.Integer: int compareUnsigned(int,int)>
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>
<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>
<java.lang.Integer: void <init>(String)>
<java.lang.Integer: int parseInt(java.lang.String)>
<java.lang.Integer: int min(int,int)>
<java.lang.Integer: int parseUnsignedInt(java.lang.String)>
<java.lang.Integer: int rotateRight(int,int)>
<java.lang.Integer: int sum(int,int)>
<java.lang.Integer: double doubleValue()>
<java.lang.Integer: int lowestOneBit(int)>
<java.lang.Integer: int reverse(int)>
<android.net.wifi.WifiManager.ActionListener: void onFailure(int)>
<android.net.wifi.WifiManager.ActionListener: void onSuccess()>
<android.telephony.ims.stub.ImsMultiEndpointImplBase: void requestImsExternalCallStateInfo()>
<android.telephony.ims.stub.ImsMultiEndpointImplBase: void <init>()>
<android.telephony.ims.stub.ImsMultiEndpointImplBase: void onImsExternalCallStateUpdate(java.util.List)>
<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources.Theme)>
<android.content.res.ColorStateList: int getChangingConfigurations()>
<android.content.res.ColorStateList: int getDefaultColor()>
<android.content.res.ColorStateList: void writeToParcel(android.os.Parcel,int)>
<android.content.res.ColorStateList: int getColorForState(int[],int)>
<android.content.res.ColorStateList: android.content.res.ColorStateList withAlpha(int)>
<android.content.res.ColorStateList: boolean isStateful()>
<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>
<android.content.res.ColorStateList: boolean isOpaque()>
<android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(@ColorIntint)>
<android.content.res.ColorStateList: void <init>(int[][],@ColorInt int[])>
<android.content.res.ColorStateList: int describeContents()>
<java.util.Vector: void <init>(int,int)>
<java.util.Vector: void <init>(int)>
<java.util.Vector: java.util.Enumeration elements()>
<java.util.Vector: E lastElement()>
<java.util.Vector: void removeElementAt(int)>
<java.util.Vector: int indexOf(java.lang.Object,int)>
<java.util.Vector: boolean removeElement(java.lang.Object)>
<java.util.Vector: int lastIndexOf(java.lang.Object,int)>
<java.util.Vector: void setSize(int)>
<java.util.Vector: void removeAllElements()>
<java.util.Vector: java.lang.Object clone()>
<java.util.Vector: void trimToSize()>
<java.util.Vector: E get(int)>
<java.util.Vector: void insertElementAt(E,int)>
<java.util.Vector: void copyInto(java.lang.Object[])>
<java.util.Vector: void addElement(E)>
<java.util.Vector: void setElementAt(E,int)>
<java.util.Vector: void forEach(java.util.function.Consumer)>
<java.util.Vector: void <init>()>
<java.util.Vector: void <init>(java.util.Collection)>
<java.util.Vector: int size()>
<java.util.Vector: int capacity()>
<java.util.Vector: E elementAt(int)>
<java.util.Vector: void ensureCapacity(int)>
<java.util.Vector: E firstElement()>
<android.service.settings.suggestions.Suggestion: int describeContents()>
<android.service.settings.suggestions.Suggestion: int getFlags()>
<android.service.settings.suggestions.Suggestion: android.graphics.drawable.Icon getIcon()>
<android.service.settings.suggestions.Suggestion: CharSequence getSummary()>
<android.service.settings.suggestions.Suggestion: void writeToParcel(android.os.Parcel,int)>
<android.service.settings.suggestions.Suggestion: java.lang.String getId()>
<android.service.settings.suggestions.Suggestion: android.app.PendingIntent getPendingIntent()>
<android.service.settings.suggestions.Suggestion: CharSequence getTitle()>
<android.hardware.camera2.CameraCaptureSession: int captureBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession.CaptureCallback)>
<android.hardware.camera2.CameraCaptureSession: android.view.Surface getInputSurface()>
<android.hardware.camera2.CameraCaptureSession: android.hardware.camera2.CameraDevice getDevice()>
<android.hardware.camera2.CameraCaptureSession: int capture(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession.CaptureCallback,android.os.Handler)>
<android.hardware.camera2.CameraCaptureSession: void finalizeOutputConfigurations(java.util.List)>
<android.hardware.camera2.CameraCaptureSession: int captureSingleRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession.CaptureCallback)>
<android.hardware.camera2.CameraCaptureSession: void close()>
<android.hardware.camera2.CameraCaptureSession: int captureBurst(java.util.List,android.hardware.camera2.CameraCaptureSession.CaptureCallback,android.os.Handler)>
<android.hardware.camera2.CameraCaptureSession: int setRepeatingRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession.CaptureCallback,android.os.Handler)>
<android.hardware.camera2.CameraCaptureSession: void stopRepeating()>
<android.hardware.camera2.CameraCaptureSession: void <init>()>
<android.hardware.camera2.CameraCaptureSession: int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession.CaptureCallback)>
<android.hardware.camera2.CameraCaptureSession: boolean isReprocessable()>
<android.hardware.camera2.CameraCaptureSession: void updateOutputConfiguration(android.hardware.camera2.params.OutputConfiguration)>
<android.hardware.camera2.CameraCaptureSession: void abortCaptures()>
<android.hardware.camera2.CameraCaptureSession: void prepare(android.view.Surface)>
<android.hardware.camera2.CameraCaptureSession: int setRepeatingBurst(java.util.List,android.hardware.camera2.CameraCaptureSession.CaptureCallback,android.os.Handler)>
<android.hardware.camera2.CameraCaptureSession: int setRepeatingBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession.CaptureCallback)>
<android.net.IpSecManager.UdpEncapsulationSocket: java.io.FileDescriptor getFileDescriptor()>
<android.net.IpSecManager.UdpEncapsulationSocket: void close()>
<android.net.IpSecManager.UdpEncapsulationSocket: int getPort()>
<java.sql.DataTruncation: void <init>(int,boolean,boolean,int,int,Throwable)>
<java.sql.DataTruncation: int getTransferSize()>
<java.sql.DataTruncation: int getDataSize()>
<java.sql.DataTruncation: int getIndex()>
<java.sql.DataTruncation: boolean getParameter()>
<java.sql.DataTruncation: boolean getRead()>
<java.sql.DataTruncation: void <init>(int,boolean,boolean,int,int)>
<android.view.DragEvent: boolean getResult()>
<android.view.DragEvent: float getX()>
<android.view.DragEvent: float getY()>
<android.view.DragEvent: android.content.ClipDescription getClipDescription()>
<android.view.DragEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.DragEvent: int describeContents()>
<android.view.DragEvent: int getAction()>
<android.view.DragEvent: android.content.ClipData getClipData()>
<android.view.DragEvent: java.lang.Object getLocalState()>
<android.metrics.MetricsReader: void reset()>
<android.metrics.MetricsReader: void checkpoint()>
<android.metrics.MetricsReader: void <init>()>
<android.metrics.MetricsReader: boolean hasNext()>
<android.metrics.MetricsReader: void read(long)>
<android.metrics.MetricsReader: android.metrics.LogMaker next()>
<android.telecom.RemoteConnection.VideoProvider.Callback: void onCameraCapabilitiesChanged(android.telecom.RemoteConnection.VideoProvider,android.telecom.VideoProfile.CameraCapabilities)>
<android.telecom.RemoteConnection.VideoProvider.Callback: void <init>()>
<android.telecom.RemoteConnection.VideoProvider.Callback: void onCallDataUsageChanged(android.telecom.RemoteConnection.VideoProvider,long)>
<android.telecom.RemoteConnection.VideoProvider.Callback: void onCallSessionEvent(android.telecom.RemoteConnection.VideoProvider,int)>
<android.telecom.RemoteConnection.VideoProvider.Callback: void onSessionModifyResponseReceived(android.telecom.RemoteConnection.VideoProvider,int,android.telecom.VideoProfile,android.telecom.VideoProfile)>
<android.telecom.RemoteConnection.VideoProvider.Callback: void onVideoQualityChanged(android.telecom.RemoteConnection.VideoProvider,int)>
<android.telecom.RemoteConnection.VideoProvider.Callback: void onPeerDimensionsChanged(android.telecom.RemoteConnection.VideoProvider,int,int)>
<android.telecom.RemoteConnection.VideoProvider.Callback: void onSessionModifyRequestReceived(android.telecom.RemoteConnection.VideoProvider,android.telecom.VideoProfile)>
<android.webkit.FindActionModeCallback.NoAction: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)>
<android.webkit.FindActionModeCallback.NoAction: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)>
<android.webkit.FindActionModeCallback.NoAction: void onDestroyActionMode(android.view.ActionMode)>
<android.webkit.FindActionModeCallback.NoAction: void <init>()>
<android.webkit.FindActionModeCallback.NoAction: boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu)>
<android.media.AudioPresentation.Builder: android.media.AudioPresentation.Builder setLabels(java.util.Map)>
<android.media.AudioPresentation.Builder: android.media.AudioPresentation.Builder setProgramId(int)>
<android.media.AudioPresentation.Builder: android.media.AudioPresentation.Builder setHasDialogueEnhancement(boolean)>
<android.media.AudioPresentation.Builder: android.media.AudioPresentation.Builder setMasteringIndication(int)>
<android.media.AudioPresentation.Builder: android.media.AudioPresentation build()>
<android.media.AudioPresentation.Builder: android.media.AudioPresentation.Builder setHasSpokenSubtitles(boolean)>
<android.media.AudioPresentation.Builder: android.media.AudioPresentation.Builder setLocale(android.icu.util.ULocale)>
<android.media.AudioPresentation.Builder: void <init>(int)>
<android.media.AudioPresentation.Builder: android.media.AudioPresentation.Builder setHasAudioDescription(boolean)>
<java.util.concurrent.ArrayBlockingQueue: E poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ArrayBlockingQueue: int remainingCapacity()>
<java.util.concurrent.ArrayBlockingQueue: E take()>
<java.util.concurrent.ArrayBlockingQueue: boolean offer(E)>
<java.util.concurrent.ArrayBlockingQueue: boolean offer(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ArrayBlockingQueue: int drainTo(java.util.Collection)>
<java.util.concurrent.ArrayBlockingQueue: int drainTo(java.util.Collection,int)>
<java.util.concurrent.ArrayBlockingQueue: E poll()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean)>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>
<java.util.concurrent.ArrayBlockingQueue: void put(E)>
<java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()>
<java.util.concurrent.ArrayBlockingQueue: E peek()>
<java.util.concurrent.ArrayBlockingQueue: int size()>
<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean,java.util.Collection)>
<android.R.dimen: void <init>()>
<android.accounts.AccountManagerCallback: void run(android.accounts.AccountManagerFuture)>
<org.apache.http.conn.ssl.AllowAllHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
<org.apache.http.conn.ssl.AllowAllHostnameVerifier: void <init>()>
<org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<android.service.contentsuggestions.ContentSuggestionsService: void onSuggestContentSelections(android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ContentSuggestionsManager.SelectionsCallback)>
<android.service.contentsuggestions.ContentSuggestionsService: void onProcessContextImage(int,android.graphics.Bitmap,android.os.Bundle)>
<android.service.contentsuggestions.ContentSuggestionsService: void onNotifyInteraction(java.lang.String,android.os.Bundle)>
<android.service.contentsuggestions.ContentSuggestionsService: void onClassifyContentSelections(android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.ContentSuggestionsManager.ClassificationsCallback)>
<android.service.contentsuggestions.ContentSuggestionsService: void <init>()>
<android.app.job.JobParameters: android.app.job.JobWorkItem dequeueWork()>
<android.app.job.JobParameters: void writeToParcel(android.os.Parcel,int)>
<android.app.job.JobParameters: int getClipGrantFlags()>
<android.app.job.JobParameters: int describeContents()>
<android.app.job.JobParameters: android.net.Uri[] getTriggeredContentUris()>
<android.app.job.JobParameters: int getJobId()>
<android.app.job.JobParameters: android.content.ClipData getClipData()>
<android.app.job.JobParameters: android.net.Network getNetwork()>
<android.app.job.JobParameters: java.lang.String[] getTriggeredContentAuthorities()>
<android.app.job.JobParameters: android.os.PersistableBundle getExtras()>
<android.app.job.JobParameters: void completeWork(android.app.job.JobWorkItem)>
<android.app.job.JobParameters: boolean isOverrideDeadlineExpired()>
<android.app.job.JobParameters: android.os.Bundle getTransientExtras()>
<android.view.textclassifier.TextLanguage: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextLanguage: java.lang.String getId()>
<android.view.textclassifier.TextLanguage: float getConfidenceScore(android.icu.util.ULocale)>
<android.view.textclassifier.TextLanguage: android.icu.util.ULocale getLocale(int)>
<android.view.textclassifier.TextLanguage: int getLocaleHypothesisCount()>
<android.view.textclassifier.TextLanguage: android.os.Bundle getExtras()>
<android.view.textclassifier.TextLanguage: int describeContents()>
<android.media.SyncParams: int getAudioAdjustMode()>
<android.media.SyncParams: float getTolerance()>
<android.media.SyncParams: void <init>()>
<android.media.SyncParams: android.media.SyncParams setFrameRate(float)>
<android.media.SyncParams: android.media.SyncParams setTolerance(float)>
<android.media.SyncParams: int getSyncSource()>
<android.media.SyncParams: android.media.SyncParams setAudioAdjustMode(int)>
<android.media.SyncParams: android.media.SyncParams allowDefaults()>
<android.media.SyncParams: float getFrameRate()>
<android.media.SyncParams: android.media.SyncParams setSyncSource(int)>
<java.time.LocalDateTime: java.time.LocalDateTime with(java.time.temporal.TemporalField,long)>
<java.time.LocalDateTime: java.time.OffsetDateTime atOffset(java.time.ZoneOffset)>
<java.time.LocalDateTime: java.time.LocalDateTime minus(long,java.time.temporal.TemporalUnit)>
<java.time.LocalDateTime: java.time.LocalDateTime withSecond(int)>
<java.time.LocalDateTime: java.time.DayOfWeek getDayOfWeek()>
<java.time.LocalDateTime: java.time.LocalDateTime of(int,int,int,int,int,int,int)>
<java.time.LocalDateTime: java.time.LocalDateTime ofEpochSecond(long,int,java.time.ZoneOffset)>
<java.time.LocalDateTime: java.time.LocalDateTime ofInstant(java.time.Instant,java.time.ZoneId)>
<java.time.LocalDateTime: java.time.LocalDateTime minusDays(long)>
<java.time.LocalDateTime: java.time.LocalDateTime minusSeconds(long)>
<java.time.LocalDateTime: java.time.LocalDateTime minusYears(long)>
<java.time.LocalDateTime: java.time.Month getMonth()>
<java.time.LocalDateTime: java.time.LocalDateTime parse(CharSequence,java.time.format.DateTimeFormatter)>
<java.time.LocalDateTime: java.time.LocalDateTime withHour(int)>
<java.time.LocalDateTime: java.time.LocalDateTime of(int,java.time.Month,int,int,int,int)>
<java.time.LocalDateTime: java.time.LocalDateTime plusWeeks(long)>
<java.time.LocalDateTime: java.time.LocalDateTime truncatedTo(java.time.temporal.TemporalUnit)>
<java.time.LocalDateTime: java.time.LocalDateTime withMonth(int)>
<java.time.LocalDateTime: java.time.LocalDateTime withDayOfYear(int)>
<java.time.LocalDateTime: java.time.LocalDateTime of(int,java.time.Month,int,int,int,int,int)>
<java.time.LocalDateTime: java.time.LocalDateTime plusDays(long)>
<java.time.LocalDateTime: java.time.LocalDateTime plusSeconds(long)>
<java.time.LocalDateTime: int getSecond()>
<java.time.LocalDateTime: java.time.LocalDateTime withNano(int)>
<java.time.LocalDateTime: java.time.LocalDateTime plusYears(long)>
<java.time.LocalDateTime: java.time.LocalDateTime plusMonths(long)>
<java.time.LocalDateTime: int getYear()>
<java.time.LocalDateTime: java.time.LocalDateTime plusHours(long)>
<java.time.LocalDateTime: java.time.LocalDateTime plusMinutes(long)>
<java.time.LocalDateTime: java.time.LocalDateTime withDayOfMonth(int)>
<java.time.LocalDateTime: java.time.LocalDateTime minusMonths(long)>
<java.time.LocalDateTime: java.time.LocalDateTime minusWeeks(long)>
<java.time.LocalDateTime: int getHour()>
<java.time.LocalDateTime: java.time.LocalDateTime from(java.time.temporal.TemporalAccessor)>
<java.time.LocalDateTime: java.time.LocalDateTime withMinute(int)>
<java.time.LocalDateTime: java.time.LocalDateTime plus(long,java.time.temporal.TemporalUnit)>
<java.time.LocalDateTime: java.time.LocalDateTime minusMinutes(long)>
<java.time.LocalDateTime: java.time.LocalDateTime now(java.time.Clock)>
<java.time.LocalDateTime: java.time.LocalDateTime minusHours(long)>
<java.time.LocalDateTime: long getLong(java.time.temporal.TemporalField)>
<java.time.LocalDateTime: java.time.LocalDateTime with(java.time.temporal.TemporalAdjuster)>
<java.time.LocalDateTime: int getNano()>
<java.time.LocalDateTime: java.time.LocalDateTime plusNanos(long)>
<java.time.LocalDateTime: java.time.LocalDateTime minusNanos(long)>
<java.time.LocalDateTime: java.time.LocalDate toLocalDate()>
<java.time.LocalDateTime: java.time.LocalDateTime now()>
<java.time.LocalDateTime: java.time.LocalDateTime of(int,int,int,int,int)>
<java.time.LocalDateTime: boolean isSupported(java.time.temporal.TemporalField)>
<java.time.LocalDateTime: java.time.LocalTime toLocalTime()>
<java.time.LocalDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>
<java.time.LocalDateTime: int getDayOfYear()>
<java.time.LocalDateTime: java.time.LocalDateTime parse(CharSequence)>
<java.time.LocalDateTime: java.time.ZonedDateTime atZone(java.time.ZoneId)>
<java.time.LocalDateTime: java.time.LocalDateTime withYear(int)>
<java.time.LocalDateTime: java.time.LocalDateTime minus(java.time.temporal.TemporalAmount)>
<java.time.LocalDateTime: java.time.LocalDateTime of(int,java.time.Month,int,int,int)>
<java.time.LocalDateTime: int getMinute()>
<java.time.LocalDateTime: int getMonthValue()>
<java.time.LocalDateTime: java.time.LocalDateTime of(int,int,int,int,int,int)>
<java.time.LocalDateTime: int getDayOfMonth()>
<java.time.LocalDateTime: java.time.LocalDateTime plus(java.time.temporal.TemporalAmount)>
<java.time.LocalDateTime: java.time.LocalDateTime now(java.time.ZoneId)>
<java.time.LocalDateTime: java.time.LocalDateTime of(java.time.LocalDate,java.time.LocalTime)>
<java.lang.ClassCastException: void <init>()>
<java.lang.ClassCastException: void <init>(String)>
<java.util.function.Supplier: T get()>
<android.app.InstantAppResolverService: void <init>()>
<android.app.InstantAppResolverService: void onGetInstantAppIntentFilter(android.content.Intent,int[],android.os.UserHandle,java.lang.String,android.app.InstantAppResolverService.InstantAppResolutionCallback)>
<android.app.InstantAppResolverService: android.os.IBinder onBind(android.content.Intent)>
<android.app.InstantAppResolverService: void onGetInstantAppResolveInfo(android.content.Intent,int[],android.os.UserHandle,java.lang.String,android.app.InstantAppResolverService.InstantAppResolutionCallback)>
<android.app.InstantAppResolverService: void attachBaseContext(android.content.Context)>
<android.app.InstantAppResolverService: void onGetInstantAppIntentFilter(int[],java.lang.String,android.app.InstantAppResolverService.InstantAppResolutionCallback)>
<android.app.InstantAppResolverService: void onGetInstantAppIntentFilter(android.content.Intent,int[],java.lang.String,android.app.InstantAppResolverService.InstantAppResolutionCallback)>
<android.app.InstantAppResolverService: void onGetInstantAppResolveInfo(android.content.Intent,int[],java.lang.String,android.app.InstantAppResolverService.InstantAppResolutionCallback)>
<android.app.InstantAppResolverService: void onGetInstantAppResolveInfo(int[],java.lang.String,android.app.InstantAppResolverService.InstantAppResolutionCallback)>
<java.lang.VerifyError: void <init>()>
<java.lang.VerifyError: void <init>(String)>
<android.R.color: void <init>()>
<android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata build()>
<android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setDesiredHeight(@Dimension(unit=android.annotation.Dimension.DP)int)>
<android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setSuppressNotification(boolean)>
<android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setIcon(android.graphics.drawable.Icon)>
<android.app.Notification.BubbleMetadata.Builder: void <init>()>
<android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setDeleteIntent(android.app.PendingIntent)>
<android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setIntent(android.app.PendingIntent)>
<android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setDesiredHeightResId(@DimenResint)>
<android.app.Notification.BubbleMetadata.Builder: android.app.Notification.BubbleMetadata.Builder setAutoExpandBubble(boolean)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glEnable(int)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glDrawTexfOES(float,float,float,float,float)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glDrawTexfvOES(float[],int)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glDrawTexsvOES(java.nio.ShortBuffer)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glDrawTexsvOES(short[],int)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glWeightPointerOES(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glDrawTexivOES(java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glEnableClientState(int)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glDrawTexsOES(short,short,short,short,short)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glMatrixIndexPointerOES(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glDrawTexxvOES(int[],int)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glDrawTexivOES(int[],int)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glWeightPointerOES(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glDrawTexfvOES(java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glDrawTexxOES(int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glDrawTexxvOES(java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glTexParameterfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glMatrixIndexPointerOES(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glCurrentPaletteMatrixOES(int)>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glLoadPaletteFromModelViewMatrixOES()>
<javax.microedition.khronos.opengles.GL11Ext extends javax.microedition.khronos.opengles.GL: void glDrawTexiOES(int,int,int,int,int)>
<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)>
<javax.crypto.CipherSpi: byte[] engineGetIV()>
<javax.crypto.CipherSpi: int engineGetOutputSize(int)>
<javax.crypto.CipherSpi: void engineUpdateAAD(byte[],int,int)>
<javax.crypto.CipherSpi: int engineDoFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)>
<javax.crypto.CipherSpi: byte[] engineWrap(java.security.Key)>
<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<javax.crypto.CipherSpi: int engineGetKeySize(java.security.Key)>
<javax.crypto.CipherSpi: int engineUpdate(byte[],int,int,byte[],int)>
<javax.crypto.CipherSpi: byte[] engineDoFinal(byte[],int,int)>
<javax.crypto.CipherSpi: int engineUpdate(java.nio.ByteBuffer,java.nio.ByteBuffer)>
<javax.crypto.CipherSpi: void engineUpdateAAD(java.nio.ByteBuffer)>
<javax.crypto.CipherSpi: int engineDoFinal(byte[],int,int,byte[],int)>
<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.SecureRandom)>
<javax.crypto.CipherSpi: void engineSetPadding(java.lang.String)>
<javax.crypto.CipherSpi: void <init>()>
<javax.crypto.CipherSpi: int engineGetBlockSize()>
<javax.crypto.CipherSpi: byte[] engineUpdate(byte[],int,int)>
<javax.crypto.CipherSpi: void engineSetMode(java.lang.String)>
<javax.crypto.CipherSpi: java.security.AlgorithmParameters engineGetParameters()>
<javax.crypto.CipherSpi: java.security.Key engineUnwrap(byte[],java.lang.String,int)>
<android.text.TextWatcher extends android.text.NoCopySpan: void afterTextChanged(android.text.Editable)>
<android.text.TextWatcher extends android.text.NoCopySpan: void onTextChanged(CharSequence,int,int,int)>
<android.text.TextWatcher extends android.text.NoCopySpan: void beforeTextChanged(CharSequence,int,int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(long)>
<java.lang.StringBuffer: int indexOf(java.lang.String)>
<java.lang.StringBuffer: void setLength(int)>
<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,CharSequence,int,int)>
<java.lang.StringBuffer: void setCharAt(int,char)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)>
<java.lang.StringBuffer: java.lang.StringBuffer append(double)>
<java.lang.StringBuffer: int capacity()>
<java.lang.StringBuffer: void ensureCapacity(int)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(float)>
<java.lang.StringBuffer: int offsetByCodePoints(int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)>
<java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)>
<java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>
<java.lang.StringBuffer: void <init>()>
<java.lang.StringBuffer: CharSequence subSequence(int,int)>
<java.lang.StringBuffer: java.lang.String substring(int)>
<java.lang.StringBuffer: java.lang.String substring(int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>
<java.lang.StringBuffer: int codePointAt(int)>
<java.lang.StringBuffer: char charAt(int)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)>
<java.lang.StringBuffer: int lastIndexOf(java.lang.String)>
<java.lang.StringBuffer: void <init>(String)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)>
<java.lang.StringBuffer: int length()>
<java.lang.StringBuffer: java.lang.StringBuffer append(CharSequence,int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer reverse()>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)>
<java.lang.StringBuffer: java.lang.StringBuffer append(CharSequence)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,CharSequence)>
<java.lang.StringBuffer: int codePointBefore(int)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>
<java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)>
<java.lang.StringBuffer: void <init>(int)>
<java.lang.StringBuffer: void getChars(int,int,char[],int)>
<java.lang.StringBuffer: int indexOf(java.lang.String,int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<java.lang.StringBuffer: java.lang.StringBuffer append(int)>
<java.lang.StringBuffer: void <init>(CharSequence)>
<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>
<java.lang.StringBuffer: void trimToSize()>
<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>
<java.lang.StringBuffer: int codePointCount(int,int)>
<android.renderscript.ScriptIntrinsicLUT: android.renderscript.ScriptIntrinsicLUT create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicLUT: void setBlue(int,int)>
<android.renderscript.ScriptIntrinsicLUT: void setGreen(int,int)>
<android.renderscript.ScriptIntrinsicLUT: android.renderscript.Script.KernelID getKernelID()>
<android.renderscript.ScriptIntrinsicLUT: void forEach(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicLUT: void setAlpha(int,int)>
<android.renderscript.ScriptIntrinsicLUT: void forEach(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicLUT: void setRed(int,int)>
<java.security.spec.RSAOtherPrimeInfo: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
<java.security.spec.RSAOtherPrimeInfo: java.math.BigInteger getPrime()>
<java.security.spec.RSAOtherPrimeInfo: java.math.BigInteger getExponent()>
<java.security.spec.RSAOtherPrimeInfo: java.math.BigInteger getCrtCoefficient()>
<android.telephony.ims.ImsStreamMediaProfile: int getRttMode()>
<android.telephony.ims.ImsStreamMediaProfile: int describeContents()>
<android.telephony.ims.ImsStreamMediaProfile: void copyFrom(android.telephony.ims.ImsStreamMediaProfile)>
<android.telephony.ims.ImsStreamMediaProfile: int getVideoQuality()>
<android.telephony.ims.ImsStreamMediaProfile: boolean isRttCall()>
<android.telephony.ims.ImsStreamMediaProfile: void setReceivingRttAudio(boolean)>
<android.telephony.ims.ImsStreamMediaProfile: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ims.ImsStreamMediaProfile: int getAudioDirection()>
<android.telephony.ims.ImsStreamMediaProfile: int getVideoDirection()>
<android.telephony.ims.ImsStreamMediaProfile: void <init>(int,int,int,int,int)>
<android.telephony.ims.ImsStreamMediaProfile: boolean isReceivingRttAudio()>
<android.telephony.ims.ImsStreamMediaProfile: int getAudioQuality()>
<android.telephony.ims.ImsStreamMediaProfile: void setRttMode(int)>
<android.location.GnssReflectingPlane.Builder: android.location.GnssReflectingPlane.Builder setAltitudeMeters(double)>
<android.location.GnssReflectingPlane.Builder: android.location.GnssReflectingPlane.Builder setAzimuthDegrees(double)>
<android.location.GnssReflectingPlane.Builder: android.location.GnssReflectingPlane.Builder setLatitudeDegrees(double)>
<android.location.GnssReflectingPlane.Builder: android.location.GnssReflectingPlane build()>
<android.location.GnssReflectingPlane.Builder: void <init>()>
<android.location.GnssReflectingPlane.Builder: android.location.GnssReflectingPlane.Builder setLongitudeDegrees(double)>
<android.net.wifi.ScanResult: int describeContents()>
<android.net.wifi.ScanResult: boolean is80211mcResponder()>
<android.net.wifi.ScanResult: boolean isPasspointNetwork()>
<android.net.wifi.ScanResult: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.ScanResult: boolean isValidState(android.net.wifi.SupplicantState)>
<android.service.autofill.VisibilitySetterAction: int describeContents()>
<android.service.autofill.VisibilitySetterAction: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.VisibilitySetterAction: void onClick(android.view.ViewGroup)>
<android.service.autofill.TextValueSanitizer: int describeContents()>
<android.service.autofill.TextValueSanitizer: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.TextValueSanitizer: void <init>(java.util.regex.Pattern,String)>
<android.service.autofill.TextValueSanitizer: android.view.autofill.AutofillValue sanitize(android.view.autofill.AutofillValue)>
<android.app.usage.ExternalStorageStats: long getTotalBytes()>
<android.app.usage.ExternalStorageStats: long getAudioBytes()>
<android.app.usage.ExternalStorageStats: long getAppBytes()>
<android.app.usage.ExternalStorageStats: long getImageBytes()>
<android.app.usage.ExternalStorageStats: void writeToParcel(android.os.Parcel,int)>
<android.app.usage.ExternalStorageStats: int describeContents()>
<android.app.usage.ExternalStorageStats: long getVideoBytes()>
<java.nio.file.NotDirectoryException: void <init>(String)>
<android.app.admin.DevicePolicyManager.OnClearApplicationUserDataListener: void onApplicationUserDataCleared(java.lang.String,boolean)>
<android.view.ViewDebug: boolean outputIf()>
<android.view.ViewDebug: boolean formatToHexString()>
<android.view.ViewDebug: void dumpCapturedView(java.lang.String,java.lang.Object)>
<android.view.ViewDebug: boolean retrieveReturn()>
<android.view.ViewDebug: java.lang.String name()>
<android.view.ViewDebug: android.view.ViewDebug.IntToString[] indexMapping()>
<android.view.ViewDebug: android.view.ViewDebug.IntToString[] mapping()>
<android.view.ViewDebug: int mask()>
<android.view.ViewDebug: void stopRecyclerTracing()>
<android.view.ViewDebug: AutoCloseable startRenderingCommandsCapture(android.view.View,java.util.concurrent.Executor,java.util.concurrent.Callable)>
<android.view.ViewDebug: boolean hasAdjacentMapping()>
<android.view.ViewDebug: int from()>
<android.view.ViewDebug: AutoCloseable startRenderingCommandsCapture(android.view.View,java.util.concurrent.Executor,java.util.function.Function)>
<android.view.ViewDebug: android.view.ViewDebug.FlagToString[] flagMapping()>
<android.view.ViewDebug: java.lang.String prefix()>
<android.view.ViewDebug: java.lang.String to()>
<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug.HierarchyTraceType)>
<android.view.ViewDebug: void <init>()>
<android.view.ViewDebug: int equals()>
<android.view.ViewDebug: java.lang.String category()>
<android.view.ViewDebug: boolean resolveId()>
<android.view.ViewDebug: void startHierarchyTracing(java.lang.String,android.view.View)>
<android.view.ViewDebug: void startRecyclerTracing(java.lang.String,android.view.View)>
<android.view.ViewDebug: boolean deepExport()>
<android.view.ViewDebug: void stopHierarchyTracing()>
<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug.RecyclerTraceType,int...)>
<java.sql.Savepoint: java.lang.String getSavepointName()>
<java.sql.Savepoint: int getSavepointId()>
<android.widget.SimpleCursorAdapter.CursorToStringConverter: CharSequence convertToString(android.database.Cursor)>
<java.sql.Driver: java.sql.Connection connect(java.lang.String,java.util.Properties)>
<java.sql.Driver: int getMajorVersion()>
<java.sql.Driver: boolean jdbcCompliant()>
<java.sql.Driver: int getMinorVersion()>
<java.sql.Driver: boolean acceptsURL(java.lang.String)>
<java.sql.Driver: java.sql.DriverPropertyInfo[] getPropertyInfo(java.lang.String,java.util.Properties)>
<android.app.AlarmManager.OnAlarmListener: void onAlarm()>
<java.nio.file.attribute.UserPrincipalLookupService: java.nio.file.attribute.UserPrincipal lookupPrincipalByName(java.lang.String)>
<java.nio.file.attribute.UserPrincipalLookupService: void <init>()>
<java.nio.file.attribute.UserPrincipalLookupService: java.nio.file.attribute.GroupPrincipal lookupPrincipalByGroupName(java.lang.String)>
<android.location.Address: void setCountryCode(java.lang.String)>
<android.location.Address: java.lang.String getThoroughfare()>
<android.location.Address: void setLocality(java.lang.String)>
<android.location.Address: void setLongitude(double)>
<android.location.Address: java.lang.String getSubAdminArea()>
<android.location.Address: void setPhone(java.lang.String)>
<android.location.Address: java.lang.String getAddressLine(int)>
<android.location.Address: void setThoroughfare(java.lang.String)>
<android.location.Address: int describeContents()>
<android.location.Address: java.lang.String getSubThoroughfare()>
<android.location.Address: void <init>(java.util.Locale)>
<android.location.Address: void clearLongitude()>
<android.location.Address: void setLatitude(double)>
<android.location.Address: void setSubLocality(java.lang.String)>
<android.location.Address: void setSubAdminArea(java.lang.String)>
<android.location.Address: java.lang.String getUrl()>
<android.location.Address: boolean hasLongitude()>
<android.location.Address: void setPostalCode(java.lang.String)>
<android.location.Address: java.lang.String getAdminArea()>
<android.location.Address: java.lang.String getPhone()>
<android.location.Address: java.lang.String getSubLocality()>
<android.location.Address: boolean hasLatitude()>
<android.location.Address: java.lang.String getCountryCode()>
<android.location.Address: double getLatitude()>
<android.location.Address: void setSubThoroughfare(java.lang.String)>
<android.location.Address: android.os.Bundle getExtras()>
<android.location.Address: void setAdminArea(java.lang.String)>
<android.location.Address: java.util.Locale getLocale()>
<android.location.Address: java.lang.String getFeatureName()>
<android.location.Address: void setFeatureName(java.lang.String)>
<android.location.Address: void setAddressLine(int,java.lang.String)>
<android.location.Address: java.lang.String getPostalCode()>
<android.location.Address: int getMaxAddressLineIndex()>
<android.location.Address: void writeToParcel(android.os.Parcel,int)>
<android.location.Address: void setCountryName(java.lang.String)>
<android.location.Address: java.lang.String getLocality()>
<android.location.Address: void clearLatitude()>
<android.location.Address: double getLongitude()>
<android.location.Address: void setExtras(android.os.Bundle)>
<android.location.Address: java.lang.String getPremises()>
<android.location.Address: void setUrl(java.lang.String)>
<android.location.Address: java.lang.String getCountryName()>
<android.location.Address: void setPremises(java.lang.String)>
<java.util.Observer: void update(java.util.Observable,java.lang.Object)>
<android.widget.ImageButton: void <init>(android.content.Context)>
<android.widget.ImageButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ImageButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ImageButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.provider.MediaStore.Downloads: android.net.Uri getContentUri(java.lang.String)>
<android.net.wifi.WifiInfo: java.lang.String getPasspointProviderFriendlyName()>
<android.net.wifi.WifiInfo: int describeContents()>
<android.net.wifi.WifiInfo: boolean getHiddenSSID()>
<android.net.wifi.WifiInfo: java.lang.String getPasspointFqdn()>
<android.net.wifi.WifiInfo: android.net.NetworkInfo.DetailedState getDetailedStateOf(android.net.wifi.SupplicantState)>
<android.net.wifi.WifiInfo: int getNetworkId()>
<android.net.wifi.WifiInfo: int getLinkSpeed()>
<android.net.wifi.WifiInfo: java.lang.String getBSSID()>
<android.net.wifi.WifiInfo: int getTxLinkSpeedMbps()>
<android.net.wifi.WifiInfo: int getFrequency()>
<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>
<android.net.wifi.WifiInfo: int getRssi()>
<android.net.wifi.WifiInfo: boolean isOsuAp()>
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiInfo: boolean isPasspointAp()>
<android.net.wifi.WifiInfo: int getRxLinkSpeedMbps()>
<android.net.wifi.WifiInfo: java.lang.String getSSID()>
<android.net.wifi.WifiInfo: int getIpAddress()>
<android.telecom.StatusHints: android.graphics.drawable.Drawable getIcon(android.content.Context)>
<android.telecom.StatusHints: android.content.ComponentName getPackageName()>
<android.telecom.StatusHints: int describeContents()>
<android.telecom.StatusHints: void writeToParcel(android.os.Parcel,int)>
<android.telecom.StatusHints: CharSequence getLabel()>
<android.telecom.StatusHints: android.graphics.drawable.Icon getIcon()>
<android.telecom.StatusHints: android.os.Bundle getExtras()>
<android.telecom.StatusHints: int getIconResId()>
<android.telecom.StatusHints: void <init>(android.content.ComponentName,CharSequence,int,android.os.Bundle)>
<android.telecom.StatusHints: void <init>(CharSequence,android.graphics.drawable.Icon,android.os.Bundle)>
<android.webkit.ServiceWorkerWebSettings: void <init>()>
<android.webkit.ServiceWorkerWebSettings: void setAllowFileAccess(boolean)>
<android.webkit.ServiceWorkerWebSettings: boolean getAllowContentAccess()>
<android.webkit.ServiceWorkerWebSettings: boolean getBlockNetworkLoads()>
<android.webkit.ServiceWorkerWebSettings: void setAllowContentAccess(boolean)>
<android.webkit.ServiceWorkerWebSettings: boolean getAllowFileAccess()>
<android.webkit.ServiceWorkerWebSettings: void setCacheMode(int)>
<android.webkit.ServiceWorkerWebSettings: void setBlockNetworkLoads(boolean)>
<android.webkit.ServiceWorkerWebSettings: int getCacheMode()>
<android.widget.SimpleCursorTreeAdapter.ViewBinder: boolean setViewValue(android.view.View,android.database.Cursor,int)>
<android.widget.TabHost.TabSpec: android.widget.TabHost.TabSpec setContent(int)>
<android.widget.TabHost.TabSpec: android.widget.TabHost.TabSpec setContent(android.content.Intent)>
<android.widget.TabHost.TabSpec: android.widget.TabHost.TabSpec setIndicator(CharSequence)>
<android.widget.TabHost.TabSpec: android.widget.TabHost.TabSpec setIndicator(CharSequence,android.graphics.drawable.Drawable)>
<android.widget.TabHost.TabSpec: android.widget.TabHost.TabSpec setIndicator(android.view.View)>
<android.widget.TabHost.TabSpec: android.widget.TabHost.TabSpec setContent(android.widget.TabHost.TabContentFactory)>
<android.widget.TabHost.TabSpec: java.lang.String getTag()>
<org.apache.http.conn.ssl.X509HostnameVerifier extends javax.net.ssl.HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
<org.apache.http.conn.ssl.X509HostnameVerifier extends javax.net.ssl.HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
<org.apache.http.conn.ssl.X509HostnameVerifier extends javax.net.ssl.HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
<android.accounts.AccountsException: void <init>(Throwable)>
<android.accounts.AccountsException: void <init>(String,Throwable)>
<android.accounts.AccountsException: void <init>()>
<android.accounts.AccountsException: void <init>(String)>
<android.provider.MediaStore.Video: void <init>()>
<android.provider.MediaStore.Video: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])>
<java.nio.channels.NetworkChannel extends java.nio.channels.Channel: java.nio.channels.NetworkChannel bind(java.net.SocketAddress)>
<java.nio.channels.NetworkChannel extends java.nio.channels.Channel: T getOption(java.net.SocketOption)>
<java.nio.channels.NetworkChannel extends java.nio.channels.Channel: java.nio.channels.NetworkChannel setOption(java.net.SocketOption,T)>
<java.nio.channels.NetworkChannel extends java.nio.channels.Channel: java.util.Set supportedOptions()>
<java.nio.channels.NetworkChannel extends java.nio.channels.Channel: java.net.SocketAddress getLocalAddress()>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String capabilityToString(int)>
<android.accessibilityservice.AccessibilityServiceInfo: int getInteractiveUiTimeoutMillis()>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String loadDescription(android.content.pm.PackageManager)>
<android.accessibilityservice.AccessibilityServiceInfo: void setNonInteractiveUiTimeoutMillis(int)>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getSettingsActivityName()>
<android.accessibilityservice.AccessibilityServiceInfo: int describeContents()>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getId()>
<android.accessibilityservice.AccessibilityServiceInfo: int getNonInteractiveUiTimeoutMillis()>
<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getDescription()>
<android.accessibilityservice.AccessibilityServiceInfo: void setInteractiveUiTimeoutMillis(int)>
<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>
<android.accessibilityservice.AccessibilityServiceInfo: CharSequence loadSummary(android.content.pm.PackageManager)>
<android.accessibilityservice.AccessibilityServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String flagToString(int)>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String feedbackTypeToString(int)>
<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()>
<android.accessibilityservice.AccessibilityServiceInfo: void <init>()>
<android.database.sqlite.SQLiteException: void <init>(String)>
<android.database.sqlite.SQLiteException: void <init>()>
<android.database.sqlite.SQLiteException: void <init>(String,Throwable)>
<android.text.style.QuoteSpan: int getStripeWidth()>
<android.text.style.QuoteSpan: void <init>()>
<android.text.style.QuoteSpan: void <init>(from=0) int)>
<android.text.style.QuoteSpan: int describeContents()>
<android.text.style.QuoteSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,CharSequence,int,int,boolean,android.text.Layout)>
<android.text.style.QuoteSpan: void <init>(@ColorInt int)>
<android.text.style.QuoteSpan: void <init>(android.os.Parcel)>
<android.text.style.QuoteSpan: int getColor()>
<android.text.style.QuoteSpan: int getLeadingMargin(boolean)>
<android.text.style.QuoteSpan: int getGapWidth()>
<android.text.style.QuoteSpan: int getSpanTypeId()>
<android.text.style.QuoteSpan: void writeToParcel(android.os.Parcel,int)>
<android.telephony.euicc.EuiccCardManager.ResultCallback: void onComplete(int,T)>
<java.nio.channels.ReadableByteChannel extends java.nio.channels.Channel: int read(java.nio.ByteBuffer)>
<java.security.spec.DSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getG()>
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getP()>
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getQ()>
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getX()>
<android.app.Notification.BigTextStyle: void <init>(android.app.Notification.Builder)>
<android.app.Notification.BigTextStyle: android.app.Notification.BigTextStyle setSummaryText(CharSequence)>
<android.app.Notification.BigTextStyle: android.app.Notification.BigTextStyle bigText(CharSequence)>
<android.app.Notification.BigTextStyle: android.app.Notification.BigTextStyle setBigContentTitle(CharSequence)>
<android.app.Notification.BigTextStyle: void <init>()>
<android.os.PersistableBundle: android.os.PersistableBundle deepCopy()>
<android.os.PersistableBundle: android.os.PersistableBundle getPersistableBundle(java.lang.String)>
<android.os.PersistableBundle: void <init>(android.os.PersistableBundle)>
<android.os.PersistableBundle: void putPersistableBundle(java.lang.String,android.os.PersistableBundle)>
<android.os.PersistableBundle: java.lang.Object clone()>
<android.os.PersistableBundle: int describeContents()>
<android.os.PersistableBundle: void <init>(int)>
<android.os.PersistableBundle: void writeToParcel(android.os.Parcel,int)>
<android.os.PersistableBundle: void <init>()>
<android.hardware.usb.UsbManager: boolean hasPermission(android.hardware.usb.UsbDevice)>
<android.hardware.usb.UsbManager: android.hardware.usb.UsbAccessory[] getAccessoryList()>
<android.hardware.usb.UsbManager: java.util.HashMap getDeviceList()>
<android.hardware.usb.UsbManager: android.hardware.usb.UsbDeviceConnection openDevice(android.hardware.usb.UsbDevice)>
<android.hardware.usb.UsbManager: void grantPermission(android.hardware.usb.UsbDevice,java.lang.String)>
<android.hardware.usb.UsbManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
<android.hardware.usb.UsbManager: boolean hasPermission(android.hardware.usb.UsbAccessory)>
<android.hardware.usb.UsbManager: void requestPermission(android.hardware.usb.UsbDevice,android.app.PendingIntent)>
<android.hardware.usb.UsbManager: void requestPermission(android.hardware.usb.UsbAccessory,android.app.PendingIntent)>
<android.hardware.usb.UsbManager: java.util.List getPorts()>
<android.telephony.CarrierConfigManager: void updateConfigForPhoneId(int,java.lang.String)>
<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfig()>
<android.telephony.CarrierConfigManager: void overrideConfig(int,android.os.PersistableBundle)>
<android.telephony.CarrierConfigManager: android.os.PersistableBundle getDefaultConfig()>
<android.telephony.CarrierConfigManager: void notifyConfigChangedForSubId(int)>
<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>
<android.telephony.CarrierConfigManager: boolean isConfigForIdentifiedCarrier(android.os.PersistableBundle)>
<android.os.Debug: int getThreadAllocCount()>
<android.os.Debug: boolean waitingForDebugger()>
<android.os.Debug: int getGlobalExternalAllocCount()>
<android.os.Debug: int getGlobalGcInvocationCount()>
<android.os.Debug: void resetThreadExternalAllocSize()>
<android.os.Debug: void stopNativeTracing()>
<android.os.Debug: long getNativeHeapAllocatedSize()>
<android.os.Debug: void resetGlobalExternalFreedSize()>
<android.os.Debug: int getBinderLocalObjectCount()>
<android.os.Debug: int getGlobalAllocSize()>
<android.os.Debug: void resetGlobalClassInitTime()>
<android.os.Debug: void resetGlobalGcInvocationCount()>
<android.os.Debug: int getThreadExternalAllocCount()>
<android.os.Debug: void waitForDebugger()>
<android.os.Debug: void stopAllocCounting()>
<android.os.Debug: int getBinderReceivedTransactions()>
<android.os.Debug: long getPss()>
<android.os.Debug: int getGlobalExternalFreedSize()>
<android.os.Debug: void resetGlobalFreedSize()>
<android.os.Debug: void resetGlobalClassInitCount()>
<android.os.Debug: int getThreadAllocSize()>
<android.os.Debug: int getThreadExternalAllocSize()>
<android.os.Debug: int getGlobalExternalFreedCount()>
<android.os.Debug: boolean isDebuggerConnected()>
<android.os.Debug: void resetThreadAllocCount()>
<android.os.Debug: void enableEmulatorTraceOutput()>
<android.os.Debug: int getGlobalFreedCount()>
<android.os.Debug: int getGlobalClassInitTime()>
<android.os.Debug: int getGlobalClassInitCount()>
<android.os.Debug: long getNativeHeapFreeSize()>
<android.os.Debug: void startAllocCounting()>
<android.os.Debug: int getLoadedClassCount()>
<android.os.Debug: void resetAllCounts()>
<android.os.Debug: int getGlobalFreedSize()>
<android.os.Debug: int getBinderProxyObjectCount()>
<android.os.Debug: void getMemoryInfo(android.os.Debug.MemoryInfo)>
<android.os.Debug: void resetGlobalExternalFreedCount()>
<android.os.Debug: void resetThreadAllocSize()>
<android.os.Debug: java.lang.String getRuntimeStat(java.lang.String)>
<android.os.Debug: void resetGlobalExternalAllocSize()>
<android.os.Debug: void startMethodTracingSampling(java.lang.String,int,int)>
<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])>
<android.os.Debug: void printLoadedClasses(int)>
<android.os.Debug: void resetThreadExternalAllocCount()>
<android.os.Debug: void resetGlobalFreedCount()>
<android.os.Debug: int getBinderDeathObjectCount()>
<android.os.Debug: long getNativeHeapSize()>
<android.os.Debug: int getGlobalExternalAllocSize()>
<android.os.Debug: int getThreadGcInvocationCount()>
<android.os.Debug: void stopMethodTracing()>
<android.os.Debug: java.util.Map getRuntimeStats()>
<android.os.Debug: void resetGlobalAllocSize()>
<android.os.Debug: void startMethodTracing(java.lang.String)>
<android.os.Debug: void startNativeTracing()>
<android.os.Debug: int getBinderSentTransactions()>
<android.os.Debug: int getGlobalAllocCount()>
<android.os.Debug: void resetThreadGcInvocationCount()>
<android.os.Debug: void startMethodTracing(java.lang.String,int,int)>
<android.os.Debug: void resetGlobalExternalAllocCount()>
<android.os.Debug: int setGlobalAllocationLimit(int)>
<android.os.Debug: void attachJvmtiAgent(java.lang.String,java.lang.String,java.lang.ClassLoader)>
<android.os.Debug: void dumpHprofData(java.lang.String)>
<android.os.Debug: long threadCpuTimeNanos()>
<android.os.Debug: void resetGlobalAllocCount()>
<android.os.Debug: void startMethodTracing()>
<android.os.Debug: void startMethodTracing(java.lang.String,int)>
<android.os.Debug: int setAllocationLimit(int)>
<android.os.Debug: void changeDebugPort(int)>
<java.util.concurrent.atomic.DoubleAccumulator: int intValue()>
<java.util.concurrent.atomic.DoubleAccumulator: void reset()>
<java.util.concurrent.atomic.DoubleAccumulator: double get()>
<java.util.concurrent.atomic.DoubleAccumulator: long longValue()>
<java.util.concurrent.atomic.DoubleAccumulator: void <init>(java.util.function.DoubleBinaryOperator,double)>
<java.util.concurrent.atomic.DoubleAccumulator: void accumulate(double)>
<java.util.concurrent.atomic.DoubleAccumulator: double doubleValue()>
<java.util.concurrent.atomic.DoubleAccumulator: float floatValue()>
<java.util.concurrent.atomic.DoubleAccumulator: double getThenReset()>
<android.widget.ResourceCursorAdapter: void <init>(android.content.Context,int,android.database.Cursor,int)>
<android.widget.ResourceCursorAdapter: void <init>(android.content.Context,int,android.database.Cursor,boolean)>
<android.widget.ResourceCursorAdapter: void <init>(android.content.Context,int,android.database.Cursor)>
<android.widget.ResourceCursorAdapter: void setViewResource(int)>
<android.widget.ResourceCursorAdapter: android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<android.widget.ResourceCursorAdapter: void setDropDownViewResource(int)>
<android.widget.AbsListView.MultiChoiceModeListener extends android.view.ActionMode.Callback: void onItemCheckedStateChanged(android.view.ActionMode,int,long,boolean)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUid(int,java.lang.String,long,long,int)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUidTag(int,java.lang.String,long,long,int,int)>
<android.app.usage.NetworkStatsManager: void registerUsageCallback(int,java.lang.String,long,android.app.usage.NetworkStatsManager.UsageCallback,android.os.Handler)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUidTagState(int,java.lang.String,long,long,int,int,int)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats.Bucket querySummaryForDevice(int,java.lang.String,long,long)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetails(int,java.lang.String,long,long)>
<android.app.usage.NetworkStatsManager: void unregisterUsageCallback(android.app.usage.NetworkStatsManager.UsageCallback)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats querySummary(int,java.lang.String,long,long)>
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats.Bucket querySummaryForUser(int,java.lang.String,long,long)>
<android.app.usage.NetworkStatsManager: void setPollForce(boolean)>
<android.app.usage.NetworkStatsManager: void registerUsageCallback(int,java.lang.String,long,android.app.usage.NetworkStatsManager.UsageCallback)>
<android.drm.DrmErrorEvent: void <init>(int,int,String,java.util.HashMap)>
<android.drm.DrmErrorEvent: void <init>(int,int,String)>
<javax.net.ssl.TrustManagerFactorySpi: void engineInit(javax.net.ssl.ManagerFactoryParameters)>
<javax.net.ssl.TrustManagerFactorySpi: javax.net.ssl.TrustManager[] engineGetTrustManagers()>
<javax.net.ssl.TrustManagerFactorySpi: void engineInit(java.security.KeyStore)>
<javax.net.ssl.TrustManagerFactorySpi: void <init>()>
<android.widget.WrapperListAdapter extends android.widget.ListAdapter: android.widget.ListAdapter getWrappedAdapter()>
<android.app.Notification.Action.Extender: android.app.Notification.Action.Builder extend(android.app.Notification.Action.Builder)>
<java.nio.channels.NonWritableChannelException: void <init>()>
<java.util.function.DoubleToIntFunction: int applyAsInt(double)>
<android.printservice.PrintDocument: android.os.ParcelFileDescriptor getData()>
<android.printservice.PrintDocument: android.print.PrintDocumentInfo getInfo()>
<java.util.stream.Collectors: java.util.stream.Collector joining(CharSequence)>
<java.util.stream.Collectors: java.util.stream.Collector minBy(java.util.Comparator)>
<java.util.stream.Collectors: java.util.stream.Collector maxBy(java.util.Comparator)>
<java.util.stream.Collectors: java.util.stream.Collector mapping(java.util.function.Function,java.util.stream.Collector)>
<java.util.stream.Collectors: java.util.stream.Collector summingLong(java.util.function.ToLongFunction)>
<java.util.stream.Collectors: java.util.stream.Collector toConcurrentMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)>
<java.util.stream.Collectors: java.util.stream.Collector reducing(java.util.function.BinaryOperator)>
<java.util.stream.Collectors: java.util.stream.Collector groupingByConcurrent(java.util.function.Function,java.util.stream.Collector)>
<java.util.stream.Collectors: java.util.stream.Collector partitioningBy(java.util.function.Predicate)>
<java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)>
<java.util.stream.Collectors: java.util.stream.Collector groupingByConcurrent(java.util.function.Function)>
<java.util.stream.Collectors: java.util.stream.Collector summarizingInt(java.util.function.ToIntFunction)>
<java.util.stream.Collectors: java.util.stream.Collector partitioningBy(java.util.function.Predicate,java.util.stream.Collector)>
<java.util.stream.Collectors: java.util.stream.Collector reducing(T,java.util.function.BinaryOperator)>
<java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function)>
<java.util.stream.Collectors: java.util.stream.Collector joining()>
<java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>
<java.util.stream.Collectors: java.util.stream.Collector averagingDouble(java.util.function.ToDoubleFunction)>
<java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.stream.Collector)>
<java.util.stream.Collectors: java.util.stream.Collector summingInt(java.util.function.ToIntFunction)>
<java.util.stream.Collectors: java.util.stream.Collector groupingByConcurrent(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)>
<java.util.stream.Collectors: java.util.stream.Collector reducing(U,java.util.function.Function,java.util.function.BinaryOperator)>
<java.util.stream.Collectors: java.util.stream.Collector collectingAndThen(java.util.stream.Collector,java.util.function.Function)>
<java.util.stream.Collectors: java.util.stream.Collector summarizingDouble(java.util.function.ToDoubleFunction)>
<java.util.stream.Collectors: java.util.stream.Collector averagingLong(java.util.function.ToLongFunction)>
<java.util.stream.Collectors: java.util.stream.Collector toCollection(java.util.function.Supplier)>
<java.util.stream.Collectors: java.util.stream.Collector counting()>
<java.util.stream.Collectors: java.util.stream.Collector toConcurrentMap(java.util.function.Function,java.util.function.Function)>
<java.util.stream.Collectors: java.util.stream.Collector toList()>
<java.util.stream.Collectors: java.util.stream.Collector summingDouble(java.util.function.ToDoubleFunction)>
<java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)>
<java.util.stream.Collectors: java.util.stream.Collector averagingInt(java.util.function.ToIntFunction)>
<java.util.stream.Collectors: java.util.stream.Collector toSet()>
<java.util.stream.Collectors: java.util.stream.Collector toConcurrentMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)>
<java.util.stream.Collectors: java.util.stream.Collector summarizingLong(java.util.function.ToLongFunction)>
<java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)>
<java.util.stream.Collectors: java.util.stream.Collector joining(CharSequence,CharSequence,CharSequence)>
<android.drm.DrmStore: void <init>()>
<org.xml.sax.ext.Attributes2Impl: boolean isSpecified(int)>
<org.xml.sax.ext.Attributes2Impl: boolean isSpecified(java.lang.String)>
<org.xml.sax.ext.Attributes2Impl: void setSpecified(int,boolean)>
<org.xml.sax.ext.Attributes2Impl: void setDeclared(int,boolean)>
<org.xml.sax.ext.Attributes2Impl: void <init>()>
<org.xml.sax.ext.Attributes2Impl: void <init>(org.xml.sax.Attributes)>
<org.xml.sax.ext.Attributes2Impl: boolean isDeclared(java.lang.String)>
<org.xml.sax.ext.Attributes2Impl: boolean isSpecified(java.lang.String,java.lang.String)>
<org.xml.sax.ext.Attributes2Impl: boolean isDeclared(int)>
<org.xml.sax.ext.Attributes2Impl: boolean isDeclared(java.lang.String,java.lang.String)>
<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>
<java.time.chrono.MinguoChronology: java.util.List eras()>
<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate dateYearDay(java.time.chrono.Era,int,int)>
<java.time.chrono.MinguoChronology: boolean isLeapYear(long)>
<java.time.chrono.MinguoChronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>
<java.time.chrono.MinguoChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>
<java.time.chrono.MinguoChronology: int prolepticYear(java.time.chrono.Era,int)>
<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate dateNow(java.time.ZoneId)>
<java.time.chrono.MinguoChronology: java.lang.String getCalendarType()>
<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate date(java.time.chrono.Era,int,int,int)>
<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate date(int,int,int)>
<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate dateYearDay(int,int)>
<java.time.chrono.MinguoChronology: java.lang.String getId()>
<java.time.chrono.MinguoChronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>
<java.time.chrono.MinguoChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>
<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate dateNow()>
<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate date(java.time.temporal.TemporalAccessor)>
<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate dateEpochDay(long)>
<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate dateNow(java.time.Clock)>
<java.time.chrono.MinguoChronology: java.time.chrono.MinguoEra eraOf(int)>
<android.provider.MediaStore.Audio.Genres.Members: void <init>()>
<android.provider.MediaStore.Audio.Genres.Members: android.net.Uri getContentUri(java.lang.String,long)>
<java.time.LocalDate: java.time.LocalDate now(java.time.Clock)>
<java.time.LocalDate: java.time.LocalDate withDayOfMonth(int)>
<java.time.LocalDate: java.time.LocalDate withMonth(int)>
<java.time.LocalDate: java.time.ZonedDateTime atStartOfDay(java.time.ZoneId)>
<java.time.LocalDate: int lengthOfMonth()>
<java.time.LocalDate: java.time.LocalDate of(int,int,int)>
<java.time.LocalDate: java.time.LocalDate withDayOfYear(int)>
<java.time.LocalDate: java.time.LocalDate plusDays(long)>
<java.time.LocalDate: java.time.LocalDate minusMonths(long)>
<java.time.LocalDate: java.time.Period until(java.time.chrono.ChronoLocalDate)>
<java.time.LocalDate: int getYear()>
<java.time.LocalDate: int getDayOfMonth()>
<java.time.LocalDate: java.time.DayOfWeek getDayOfWeek()>
<java.time.LocalDate: int getMonthValue()>
<java.time.LocalDate: java.time.LocalDate parse(CharSequence,java.time.format.DateTimeFormatter)>
<java.time.LocalDate: java.time.LocalDate plus(java.time.temporal.TemporalAmount)>
<java.time.LocalDate: java.time.LocalDate minus(java.time.temporal.TemporalAmount)>
<java.time.LocalDate: java.time.LocalDate minus(long,java.time.temporal.TemporalUnit)>
<java.time.LocalDate: java.time.LocalDate with(java.time.temporal.TemporalField,long)>
<java.time.LocalDate: java.time.LocalDate minusYears(long)>
<java.time.LocalDate: java.time.LocalDate minusDays(long)>
<java.time.LocalDate: java.time.LocalDate of(int,java.time.Month,int)>
<java.time.LocalDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>
<java.time.LocalDate: java.time.LocalDateTime atTime(java.time.LocalTime)>
<java.time.LocalDate: long getLong(java.time.temporal.TemporalField)>
<java.time.LocalDate: java.time.LocalDate plusYears(long)>
<java.time.LocalDate: java.time.LocalDate withYear(int)>
<java.time.LocalDate: java.time.Month getMonth()>
<java.time.LocalDate: java.time.chrono.IsoChronology getChronology()>
<java.time.LocalDate: java.time.LocalDateTime atTime(int,int,int,int)>
<java.time.LocalDate: java.time.LocalDate from(java.time.temporal.TemporalAccessor)>
<java.time.LocalDate: java.time.LocalDate plusMonths(long)>
<java.time.LocalDate: java.time.LocalDate parse(CharSequence)>
<java.time.LocalDate: java.time.OffsetDateTime atTime(java.time.OffsetTime)>
<java.time.LocalDate: java.time.LocalDate ofEpochDay(long)>
<java.time.LocalDate: java.time.LocalDate now()>
<java.time.LocalDate: java.time.LocalDate ofYearDay(int,int)>
<java.time.LocalDate: java.time.LocalDate minusWeeks(long)>
<java.time.LocalDate: java.time.LocalDate plusWeeks(long)>
<java.time.LocalDate: java.time.LocalDate with(java.time.temporal.TemporalAdjuster)>
<java.time.LocalDate: java.time.LocalDateTime atStartOfDay()>
<java.time.LocalDate: java.time.LocalDateTime atTime(int,int,int)>
<java.time.LocalDate: java.time.LocalDateTime atTime(int,int)>
<java.time.LocalDate: int getDayOfYear()>
<java.time.LocalDate: java.time.LocalDate now(java.time.ZoneId)>
<java.time.LocalDate: java.time.LocalDate plus(long,java.time.temporal.TemporalUnit)>
<android.drm.DrmManagerClient.OnInfoListener: void onInfo(android.drm.DrmManagerClient,android.drm.DrmInfoEvent)>
<android.media.session.MediaController.Callback: void onQueueChanged(java.util.List)>
<android.media.session.MediaController.Callback: void onPlaybackStateChanged(android.media.session.PlaybackState)>
<android.media.session.MediaController.Callback: void onSessionEvent(java.lang.String,android.os.Bundle)>
<android.media.session.MediaController.Callback: void onQueueTitleChanged(CharSequence)>
<android.media.session.MediaController.Callback: void onAudioInfoChanged(android.media.session.MediaController.PlaybackInfo)>
<android.media.session.MediaController.Callback: void onMetadataChanged(android.media.MediaMetadata)>
<android.media.session.MediaController.Callback: void onSessionDestroyed()>
<android.media.session.MediaController.Callback: void <init>()>
<android.media.session.MediaController.Callback: void onExtrasChanged(android.os.Bundle)>
<android.app.PictureInPictureParams: android.graphics.Rect getSourceRectHint()>
<android.app.PictureInPictureParams: java.util.List getActions()>
<android.app.PictureInPictureParams: int describeContents()>
<android.app.PictureInPictureParams: float getAspectRatio()>
<android.app.PictureInPictureParams: void writeToParcel(android.os.Parcel,int)>
<android.media.midi.MidiOutputPort: int getPortNumber()>
<android.media.midi.MidiOutputPort: void close()>
<android.media.midi.MidiOutputPort: void onDisconnect(android.media.midi.MidiReceiver)>
<android.media.midi.MidiOutputPort: void onConnect(android.media.midi.MidiReceiver)>
<android.bluetooth.le.AdvertisingSet: void setAdvertisingData(android.bluetooth.le.AdvertiseData)>
<android.bluetooth.le.AdvertisingSet: void enableAdvertising(boolean,int,int)>
<android.bluetooth.le.AdvertisingSet: void setPeriodicAdvertisingParameters(android.bluetooth.le.PeriodicAdvertisingParameters)>
<android.bluetooth.le.AdvertisingSet: void setPeriodicAdvertisingData(android.bluetooth.le.AdvertiseData)>
<android.bluetooth.le.AdvertisingSet: void setAdvertisingParameters(android.bluetooth.le.AdvertisingSetParameters)>
<android.bluetooth.le.AdvertisingSet: void setScanResponseData(android.bluetooth.le.AdvertiseData)>
<android.bluetooth.le.AdvertisingSet: void setPeriodicAdvertisingEnabled(boolean)>
<android.app.admin.SystemUpdatePolicy: int getInstallWindowEnd()>
<android.app.admin.SystemUpdatePolicy: android.app.admin.SystemUpdatePolicy createPostponeInstallPolicy()>
<android.app.admin.SystemUpdatePolicy: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.SystemUpdatePolicy: int describeContents()>
<android.app.admin.SystemUpdatePolicy: android.app.admin.SystemUpdatePolicy createAutomaticInstallPolicy()>
<android.app.admin.SystemUpdatePolicy: android.app.admin.SystemUpdatePolicy.InstallationOption getInstallationOptionAt(long)>
<android.app.admin.SystemUpdatePolicy: int getInstallWindowStart()>
<android.app.admin.SystemUpdatePolicy: android.app.admin.SystemUpdatePolicy setFreezePeriods(java.util.List)>
<android.app.admin.SystemUpdatePolicy: android.app.admin.SystemUpdatePolicy createWindowedInstallPolicy(int,int)>
<android.app.admin.SystemUpdatePolicy: java.util.List getFreezePeriods()>
<android.app.admin.SystemUpdatePolicy: int getPolicyType()>
<android.se.omapi.Channel: boolean isBasicChannel()>
<android.se.omapi.Channel: byte[] transmit(byte[])>
<android.se.omapi.Channel: android.se.omapi.Session getSession()>
<android.se.omapi.Channel: boolean selectNext()>
<android.se.omapi.Channel: boolean isOpen()>
<android.se.omapi.Channel: void close()>
<android.se.omapi.Channel: byte[] getSelectResponse()>
<android.view.KeyEvent.Callback: boolean onKeyUp(int,android.view.KeyEvent)>
<android.view.KeyEvent.Callback: boolean onKeyDown(int,android.view.KeyEvent)>
<android.view.KeyEvent.Callback: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.view.KeyEvent.Callback: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.util.SparseIntArray: int indexOfValue(int)>
<android.util.SparseIntArray: int get(int,int)>
<android.util.SparseIntArray: int size()>
<android.util.SparseIntArray: int get(int)>
<android.util.SparseIntArray: void append(int,int)>
<android.util.SparseIntArray: int valueAt(int)>
<android.util.SparseIntArray: void <init>()>
<android.util.SparseIntArray: void clear()>
<android.util.SparseIntArray: int keyAt(int)>
<android.util.SparseIntArray: void <init>(int)>
<android.util.SparseIntArray: void put(int,int)>
<android.util.SparseIntArray: void setValueAt(int,int)>
<android.util.SparseIntArray: void removeAt(int)>
<android.util.SparseIntArray: void delete(int)>
<android.util.SparseIntArray: int indexOfKey(int)>
<android.util.SparseIntArray: android.util.SparseIntArray clone()>
<java.security.MessageDigest: void update(byte[])>
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.lang.String)>
<java.security.MessageDigest: void update(byte[],int,int)>
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>
<java.security.MessageDigest: void update(java.nio.ByteBuffer)>
<java.security.MessageDigest: java.lang.String getAlgorithm()>
<java.security.MessageDigest: java.security.Provider getProvider()>
<java.security.MessageDigest: byte[] digest(byte[])>
<java.security.MessageDigest: byte[] digest()>
<java.security.MessageDigest: int digest(byte[],int,int)>
<java.security.MessageDigest: void reset()>
<java.security.MessageDigest: void <init>(String)>
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)>
<java.security.MessageDigest: int getDigestLength()>
<java.security.MessageDigest: void update(byte)>
<java.security.MessageDigest: boolean isEqual(byte[],byte[])>
<java.util.OptionalDouble: java.util.OptionalDouble empty()>
<java.util.OptionalDouble: double getAsDouble()>
<java.util.OptionalDouble: void ifPresent(java.util.function.DoubleConsumer)>
<java.util.OptionalDouble: double orElse(double)>
<java.util.OptionalDouble: double orElseGet(java.util.function.DoubleSupplier)>
<java.util.OptionalDouble: java.util.OptionalDouble of(double)>
<java.util.OptionalDouble: double orElseThrow(java.util.function.Supplier)>
<java.util.OptionalDouble: boolean isPresent()>
<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future write(java.nio.ByteBuffer,long)>
<java.nio.channels.AsynchronousFileChannel: void write(java.nio.ByteBuffer,long,A,java.nio.channels.CompletionHandler)>
<java.nio.channels.AsynchronousFileChannel: java.nio.channels.FileLock tryLock()>
<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.nio.file.OpenOption...)>
<java.nio.channels.AsynchronousFileChannel: void lock(long,long,boolean,A,java.nio.channels.CompletionHandler)>
<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future lock()>
<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel truncate(long)>
<java.nio.channels.AsynchronousFileChannel: java.nio.channels.FileLock tryLock(long,long,boolean)>
<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute...)>
<java.nio.channels.AsynchronousFileChannel: void <init>()>
<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future read(java.nio.ByteBuffer,long)>
<java.nio.channels.AsynchronousFileChannel: void lock(A,java.nio.channels.CompletionHandler)>
<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future lock(long,long,boolean)>
<java.nio.channels.AsynchronousFileChannel: void force(boolean)>
<java.nio.channels.AsynchronousFileChannel: long size()>
<java.nio.channels.AsynchronousFileChannel: void read(java.nio.ByteBuffer,long,A,java.nio.channels.CompletionHandler)>
<java.security.AllPermission: void <init>(String,String)>
<java.security.AllPermission: java.lang.String getActions()>
<java.security.AllPermission: void <init>()>
<java.security.AllPermission: boolean implies(java.security.Permission)>
<android.transition.ChangeBounds: boolean getResizeClip()>
<android.transition.ChangeBounds: void <init>()>
<android.transition.ChangeBounds: void setReparent(boolean)>
<android.transition.ChangeBounds: void captureEndValues(android.transition.TransitionValues)>
<android.transition.ChangeBounds: void captureStartValues(android.transition.TransitionValues)>
<android.transition.ChangeBounds: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.ChangeBounds: void setResizeClip(boolean)>
<android.view.SurfaceControl.Transaction: void apply()>
<android.view.SurfaceControl.Transaction: android.view.SurfaceControl.Transaction merge(android.view.SurfaceControl.Transaction)>
<android.view.SurfaceControl.Transaction: android.view.SurfaceControl.Transaction setLayer(android.view.SurfaceControl,int)>
<android.view.SurfaceControl.Transaction: void <init>()>
<android.view.SurfaceControl.Transaction: android.view.SurfaceControl.Transaction setVisibility(android.view.SurfaceControl,boolean)>
<android.view.SurfaceControl.Transaction: void close()>
<android.view.SurfaceControl.Transaction: android.view.SurfaceControl.Transaction reparent(android.view.SurfaceControl,android.view.SurfaceControl)>
<android.view.SurfaceControl.Transaction: android.view.SurfaceControl.Transaction setBufferSize(android.view.SurfaceControl,int,int)>
<android.view.SurfaceControl.Transaction: android.view.SurfaceControl.Transaction setGeometry(android.view.SurfaceControl,android.graphics.Rect,android.graphics.Rect,int)>
<android.view.SurfaceControl.Transaction: android.view.SurfaceControl.Transaction setAlpha(android.view.SurfaceControl,float)>
<java.nio.charset.Charset: java.util.SortedMap availableCharsets()>
<java.nio.charset.Charset: java.lang.String displayName(java.util.Locale)>
<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>
<java.nio.charset.Charset: boolean contains(java.nio.charset.Charset)>
<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>
<java.nio.charset.Charset: int hashCode()>
<java.nio.charset.Charset: java.lang.String name()>
<java.nio.charset.Charset: java.lang.String displayName()>
<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.lang.String)>
<java.nio.charset.Charset: int compareTo(java.nio.charset.Charset)>
<java.nio.charset.Charset: boolean equals(java.lang.Object)>
<java.nio.charset.Charset: boolean isRegistered()>
<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>
<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>
<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>
<java.nio.charset.Charset: java.lang.String toString()>
<java.nio.charset.Charset: void <init>(String,String[])>
<java.nio.charset.Charset: boolean canEncode()>
<java.nio.charset.Charset: boolean isSupported(java.lang.String)>
<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>
<java.nio.charset.Charset: java.util.Set aliases()>
<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AbsoluteLayout: void <init>(android.content.Context)>
<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<java.lang.invoke.LambdaConversionException: void <init>(Throwable)>
<java.lang.invoke.LambdaConversionException: void <init>(String)>
<java.lang.invoke.LambdaConversionException: void <init>()>
<java.lang.invoke.LambdaConversionException: void <init>(String,Throwable,boolean,boolean)>
<java.lang.invoke.LambdaConversionException: void <init>(String,Throwable)>
<java.util.concurrent.DelayQueue: java.util.Iterator iterator()>
<java.util.concurrent.DelayQueue: E poll()>
<java.util.concurrent.DelayQueue: E take()>
<java.util.concurrent.DelayQueue: void put(E)>
<java.util.concurrent.DelayQueue: void <init>()>
<java.util.concurrent.DelayQueue: boolean offer(E)>
<java.util.concurrent.DelayQueue: E peek()>
<java.util.concurrent.DelayQueue: int size()>
<java.util.concurrent.DelayQueue: int remainingCapacity()>
<java.util.concurrent.DelayQueue: boolean offer(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.DelayQueue: int drainTo(java.util.Collection,int)>
<java.util.concurrent.DelayQueue: void <init>(java.util.Collection)>
<java.util.concurrent.DelayQueue: E poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.DelayQueue: int drainTo(java.util.Collection)>
<android.app.backup.BackupManagerMonitor: void onEvent(android.os.Bundle)>
<android.app.backup.BackupManagerMonitor: void <init>()>
<android.view.contentcapture.ContentCaptureSessionId: int describeContents()>
<android.view.contentcapture.ContentCaptureSessionId: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.p2p.WifiP2pManager.ServiceResponseListener: void onServiceAvailable(int,byte[],android.net.wifi.p2p.WifiP2pDevice)>
<java.io.PrintStream: void close()>
<java.io.PrintStream: void print(char)>
<java.io.PrintStream: void println(boolean)>
<java.io.PrintStream: void println(float)>
<java.io.PrintStream: void print(int)>
<java.io.PrintStream: void <init>(java.io.OutputStream)>
<java.io.PrintStream: void println(char)>
<java.io.PrintStream: void write(byte[],int,int)>
<java.io.PrintStream: java.io.PrintStream append(CharSequence,int,int)>
<java.io.PrintStream: void println(int)>
<java.io.PrintStream: void print(char[])>
<java.io.PrintStream: void println(double)>
<java.io.PrintStream: void <init>(String,String)>
<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,String)>
<java.io.PrintStream: void print(boolean)>
<java.io.PrintStream: void print(java.lang.String)>
<java.io.PrintStream: void print(float)>
<java.io.PrintStream: void <init>(String)>
<java.io.PrintStream: void print(long)>
<java.io.PrintStream: void println(long)>
<java.io.PrintStream: void println(char[])>
<java.io.PrintStream: boolean checkError()>
<java.io.PrintStream: void println(java.lang.Object)>
<java.io.PrintStream: void write(int)>
<java.io.PrintStream: void println()>
<java.io.PrintStream: java.io.PrintStream append(CharSequence)>
<java.io.PrintStream: void flush()>
<java.io.PrintStream: java.io.PrintStream format(java.util.Locale,java.lang.String,java.lang.Object...)>
<java.io.PrintStream: void print(double)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void <init>(java.io.OutputStream,boolean)>
<java.io.PrintStream: void <init>(java.io.File,String)>
<java.io.PrintStream: java.io.PrintStream append(char)>
<java.io.PrintStream: void clearError()>
<java.io.PrintStream: void setError()>
<java.io.PrintStream: java.io.PrintStream printf(java.util.Locale,java.lang.String,java.lang.Object...)>
<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object...)>
<java.io.PrintStream: void print(java.lang.Object)>
<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object...)>
<java.io.PrintStream: void <init>(java.io.File)>
<android.net.DhcpInfo: void writeToParcel(android.os.Parcel,int)>
<android.net.DhcpInfo: void <init>()>
<android.net.DhcpInfo: int describeContents()>
<android.app.Notification.MessagingStyle: android.app.Notification.MessagingStyle addMessage(CharSequence,long,CharSequence)>
<android.app.Notification.MessagingStyle: CharSequence getConversationTitle()>
<android.app.Notification.MessagingStyle: java.util.List getMessages()>
<android.app.Notification.MessagingStyle: android.app.Notification.MessagingStyle addMessage(CharSequence,long,android.app.Person)>
<android.app.Notification.MessagingStyle: android.app.Notification.MessagingStyle setGroupConversation(boolean)>
<android.app.Notification.MessagingStyle: void <init>(android.app.Person)>
<android.app.Notification.MessagingStyle: java.util.List getHistoricMessages()>
<android.app.Notification.MessagingStyle: android.app.Person getUser()>
<android.app.Notification.MessagingStyle: boolean isGroupConversation()>
<android.app.Notification.MessagingStyle: android.app.Notification.MessagingStyle setConversationTitle(CharSequence)>
<android.app.Notification.MessagingStyle: android.app.Notification.MessagingStyle addHistoricMessage(android.app.Notification.MessagingStyle.Message)>
<android.app.Notification.MessagingStyle: CharSequence getUserDisplayName()>
<android.app.Notification.MessagingStyle: void <init>(CharSequence)>
<android.app.Notification.MessagingStyle: android.app.Notification.MessagingStyle addMessage(android.app.Notification.MessagingStyle.Message)>
<android.content.pm.ShortcutInfo: java.util.Set getCategories()>
<android.content.pm.ShortcutInfo: int describeContents()>
<android.content.pm.ShortcutInfo: CharSequence getLongLabel()>
<android.content.pm.ShortcutInfo: boolean isEnabled()>
<android.content.pm.ShortcutInfo: android.os.UserHandle getUserHandle()>
<android.content.pm.ShortcutInfo: java.lang.String getId()>
<android.content.pm.ShortcutInfo: CharSequence getDisabledMessage()>
<android.content.pm.ShortcutInfo: int getDisabledReason()>
<android.content.pm.ShortcutInfo: android.content.LocusId getLocusId()>
<android.content.pm.ShortcutInfo: android.content.ComponentName getActivity()>
<android.content.pm.ShortcutInfo: boolean isPinned()>
<android.content.pm.ShortcutInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ShortcutInfo: android.content.Intent[] getIntents()>
<android.content.pm.ShortcutInfo: boolean isImmutable()>
<android.content.pm.ShortcutInfo: boolean isDynamic()>
<android.content.pm.ShortcutInfo: long getLastChangedTimestamp()>
<android.content.pm.ShortcutInfo: java.lang.String getPackage()>
<android.content.pm.ShortcutInfo: int getRank()>
<android.content.pm.ShortcutInfo: android.os.PersistableBundle getExtras()>
<android.content.pm.ShortcutInfo: boolean hasKeyFieldsOnly()>
<android.content.pm.ShortcutInfo: CharSequence getShortLabel()>
<android.content.pm.ShortcutInfo: android.app.Person[] getPersons()>
<android.content.pm.ShortcutInfo: android.content.Intent getIntent()>
<android.content.pm.ShortcutInfo: boolean isDeclaredInManifest()>
<android.content.pm.ShortcutInfo: boolean isVisibleToPublisher()>
<android.drm.DrmStore.Playback: void <init>()>
<android.telephony.NetworkScanRequest: int describeContents()>
<android.telephony.NetworkScanRequest: int getIncrementalResultsPeriodicity()>
<android.telephony.NetworkScanRequest: boolean getIncrementalResults()>
<android.telephony.NetworkScanRequest: android.telephony.RadioAccessSpecifier[] getSpecifiers()>
<android.telephony.NetworkScanRequest: void <init>(int,android.telephony.RadioAccessSpecifier[],int,int,boolean,int,java.util.ArrayList)>
<android.telephony.NetworkScanRequest: int getMaxSearchTime()>
<android.telephony.NetworkScanRequest: int getSearchPeriodicity()>
<android.telephony.NetworkScanRequest: java.util.ArrayList getPlmns()>
<android.telephony.NetworkScanRequest: void writeToParcel(android.os.Parcel,int)>
<android.telephony.NetworkScanRequest: int getScanType()>
<java.nio.channels.ScatteringByteChannel extends java.nio.channels.ReadableByteChannel: long read(java.nio.ByteBuffer[],int,int)>
<java.nio.channels.ScatteringByteChannel extends java.nio.channels.ReadableByteChannel: long read(java.nio.ByteBuffer[])>
<android.text.method.HideReturnsTransformationMethod: char[] getReplacement()>
<android.text.method.HideReturnsTransformationMethod: android.text.method.HideReturnsTransformationMethod getInstance()>
<android.text.method.HideReturnsTransformationMethod: void <init>()>
<android.text.method.HideReturnsTransformationMethod: char[] getOriginal()>
<android.graphics.drawable.Icon.OnDrawableLoadedListener: void onDrawableLoaded(android.graphics.drawable.Drawable)>
<java.util.concurrent.RunnableScheduledFuture extends java.util.concurrent.RunnableFuture java.util.concurrent.ScheduledFuture: boolean isPeriodic()>
<android.media.tv.TvView.TimeShiftPositionCallback: void <init>()>
<android.media.tv.TvView.TimeShiftPositionCallback: void onTimeShiftStartPositionChanged(java.lang.String,long)>
<android.media.tv.TvView.TimeShiftPositionCallback: void onTimeShiftCurrentPositionChanged(java.lang.String,long)>
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec getCodec(int,java.lang.String,java.lang.String)>
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec[] getCodecs()>
<android.view.textclassifier.TextLinks.TextLink: float getConfidenceScore(java.lang.String)>
<android.view.textclassifier.TextLinks.TextLink: int getStart()>
<android.view.textclassifier.TextLinks.TextLink: android.os.Bundle getExtras()>
<android.view.textclassifier.TextLinks.TextLink: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextLinks.TextLink: int getEntityCount()>
<android.view.textclassifier.TextLinks.TextLink: int describeContents()>
<android.view.textclassifier.TextLinks.TextLink: java.lang.String getEntity(int)>
<android.view.textclassifier.TextLinks.TextLink: int getEnd()>
<android.net.wifi.WifiScanner.BssidListener extends android.net.wifi.WifiScanner.ActionListener: void onLost(android.net.wifi.ScanResult[])>
<android.net.wifi.WifiScanner.BssidListener extends android.net.wifi.WifiScanner.ActionListener: void onFound(android.net.wifi.ScanResult[])>
<android.preference.TwoStatePreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.TwoStatePreference: void setSummaryOff(@StringResint)>
<android.preference.TwoStatePreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.TwoStatePreference: boolean getDisableDependentsState()>
<android.preference.TwoStatePreference: void setSummaryOn(CharSequence)>
<android.preference.TwoStatePreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.TwoStatePreference: void setDisableDependentsState(boolean)>
<android.preference.TwoStatePreference: void setSummaryOff(CharSequence)>
<android.preference.TwoStatePreference: CharSequence getSummaryOff()>
<android.preference.TwoStatePreference: void setSummaryOn(@StringResint)>
<android.preference.TwoStatePreference: boolean isChecked()>
<android.preference.TwoStatePreference: void setChecked(boolean)>
<android.preference.TwoStatePreference: void <init>(android.content.Context)>
<android.preference.TwoStatePreference: CharSequence getSummaryOn()>
<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)>
<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int,java.lang.Object)>
<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>
<java.nio.channels.SelectableChannel: void <init>()>
<java.nio.channels.SelectableChannel: boolean isRegistered()>
<java.nio.channels.SelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>
<java.nio.channels.SelectableChannel: java.nio.channels.spi.SelectorProvider provider()>
<java.nio.channels.SelectableChannel: java.lang.Object blockingLock()>
<java.nio.channels.SelectableChannel: boolean isBlocking()>
<java.nio.channels.SelectableChannel: int validOps()>
<android.text.style.CharacterStyle: android.text.style.CharacterStyle getUnderlying()>
<android.text.style.CharacterStyle: void updateDrawState(android.text.TextPaint)>
<android.text.style.CharacterStyle: void <init>()>
<android.text.style.CharacterStyle: android.text.style.CharacterStyle wrap(android.text.style.CharacterStyle)>
<java.lang.UnsatisfiedLinkError: void <init>(String)>
<java.lang.UnsatisfiedLinkError: void <init>()>
<android.net.wifi.WifiScanner: void stopTrackingWifiChange(android.net.wifi.WifiScanner.WifiChangeListener)>
<android.net.wifi.WifiScanner: void configureWifiChange(android.net.wifi.WifiScanner.WifiChangeSettings)>
<android.net.wifi.WifiScanner: void startScan(android.net.wifi.WifiScanner.ScanSettings,android.net.wifi.WifiScanner.ScanListener,android.os.WorkSource)>
<android.net.wifi.WifiScanner: void startScan(android.net.wifi.WifiScanner.ScanSettings,android.net.wifi.WifiScanner.ScanListener)>
<android.net.wifi.WifiScanner: void startTrackingBssids(android.net.wifi.WifiScanner.BssidInfo[],int,android.net.wifi.WifiScanner.BssidListener)>
<android.net.wifi.WifiScanner: boolean getScanResults()>
<android.net.wifi.WifiScanner: void stopBackgroundScan(android.net.wifi.WifiScanner.ScanListener)>
<android.net.wifi.WifiScanner: void stopTrackingBssids(android.net.wifi.WifiScanner.BssidListener)>
<android.net.wifi.WifiScanner: void configureWifiChange(int,int,int,int,int,android.net.wifi.WifiScanner.BssidInfo[])>
<android.net.wifi.WifiScanner: void startTrackingWifiChange(android.net.wifi.WifiScanner.WifiChangeListener)>
<android.net.wifi.WifiScanner: void stopScan(android.net.wifi.WifiScanner.ScanListener)>
<android.net.wifi.WifiScanner: void startBackgroundScan(android.net.wifi.WifiScanner.ScanSettings,android.net.wifi.WifiScanner.ScanListener,android.os.WorkSource)>
<android.net.wifi.WifiScanner: void startBackgroundScan(android.net.wifi.WifiScanner.ScanSettings,android.net.wifi.WifiScanner.ScanListener)>
<android.net.nsd.NsdManager.RegistrationListener: void onServiceUnregistered(android.net.nsd.NsdServiceInfo)>
<android.net.nsd.NsdManager.RegistrationListener: void onUnregistrationFailed(android.net.nsd.NsdServiceInfo,int)>
<android.net.nsd.NsdManager.RegistrationListener: void onRegistrationFailed(android.net.nsd.NsdServiceInfo,int)>
<android.net.nsd.NsdManager.RegistrationListener: void onServiceRegistered(android.net.nsd.NsdServiceInfo)>
<android.renderscript.RSRuntimeException: void <init>(String)>
<java.lang.Float: int hashCode(float)>
<java.lang.Float: float parseFloat(java.lang.String)>
<java.lang.Float: boolean isInfinite(float)>
<java.lang.Float: float intBitsToFloat(int)>
<java.lang.Float: int compareTo(java.lang.Float)>
<java.lang.Float: java.lang.Float valueOf(java.lang.String)>
<java.lang.Float: int intValue()>
<java.lang.Float: float min(float,float)>
<java.lang.Float: long longValue()>
<java.lang.Float: void <init>(float)>
<java.lang.Float: double doubleValue()>
<java.lang.Float: float floatValue()>
<java.lang.Float: boolean isNaN()>
<java.lang.Float: java.lang.String toString(float)>
<java.lang.Float: boolean isFinite(float)>
<java.lang.Float: void <init>(String)>
<java.lang.Float: int compare(float,float)>
<java.lang.Float: int floatToRawIntBits(float)>
<java.lang.Float: boolean isInfinite()>
<java.lang.Float: int floatToIntBits(float)>
<java.lang.Float: float max(float,float)>
<java.lang.Float: java.lang.Float valueOf(float)>
<java.lang.Float: float sum(float,float)>
<java.lang.Float: void <init>(double)>
<java.lang.Float: java.lang.String toHexString(float)>
<java.lang.Float: boolean isNaN(float)>
<android.view.View.AccessibilityDelegate: void <init>()>
<android.view.View.AccessibilityDelegate: void addExtraDataToAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>
<android.view.View.AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>
<android.view.View.AccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View.AccessibilityDelegate: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)>
<android.view.View.AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)>
<android.view.View.AccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View.AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View.AccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View.AccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View.AccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>
<android.webkit.WebView.PrivateAccess: void awakenScrollBars(int,boolean)>
<android.webkit.WebView.PrivateAccess: float getHorizontalScrollFactor()>
<android.webkit.WebView.PrivateAccess: void awakenScrollBars(int)>
<android.webkit.WebView.PrivateAccess: int super_getScrollBarStyle()>
<android.webkit.WebView.PrivateAccess: boolean super_onHoverEvent(android.view.MotionEvent)>
<android.webkit.WebView.PrivateAccess: boolean super_onGenericMotionEvent(android.view.MotionEvent)>
<android.webkit.WebView.PrivateAccess: void overScrollBy(int,int,int,int,int,int,int,int,boolean)>
<android.webkit.WebView.PrivateAccess: void super_startActivityForResult(android.content.Intent,int)>
<android.webkit.WebView.PrivateAccess: float getVerticalScrollFactor()>
<android.webkit.WebView.PrivateAccess: boolean super_requestFocus(int,android.graphics.Rect)>
<android.webkit.WebView.PrivateAccess: int getHorizontalScrollbarHeight()>
<android.webkit.WebView.PrivateAccess: void super_onDrawVerticalScrollBar(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int,int,int)>
<android.webkit.WebView.PrivateAccess: void super_setLayoutParams(android.view.ViewGroup.LayoutParams)>
<android.webkit.WebView.PrivateAccess: void setScrollXRaw(int)>
<android.webkit.WebView.PrivateAccess: boolean super_dispatchKeyEvent(android.view.KeyEvent)>
<android.webkit.WebView.PrivateAccess: void onScrollChanged(int,int,int,int)>
<android.webkit.WebView.PrivateAccess: boolean super_setFrame(int,int,int,int)>
<android.webkit.WebView.PrivateAccess: void super_computeScroll()>
<android.webkit.WebView.PrivateAccess: boolean super_performLongClick()>
<android.webkit.WebView.PrivateAccess: boolean super_performAccessibilityAction(int,android.os.Bundle)>
<android.webkit.WebView.PrivateAccess: void <init>()>
<android.webkit.WebView.PrivateAccess: void setScrollYRaw(int)>
<android.webkit.WebView.PrivateAccess: void super_scrollTo(int,int)>
<android.webkit.WebView.PrivateAccess: void setMeasuredDimension(int,int)>
<android.icu.text.CaseMap.Fold: java.lang.String apply(CharSequence)>
<android.icu.text.CaseMap.Fold: android.icu.text.CaseMap.Fold turkic()>
<android.icu.text.CaseMap.Fold: A apply(CharSequence,A,android.icu.text.Edits)>
<android.icu.text.CaseMap.Fold: android.icu.text.CaseMap.Fold omitUnchangedText()>
<android.content.ContentResolver.MimeTypeInfo: android.graphics.drawable.Icon getIcon()>
<android.content.ContentResolver.MimeTypeInfo: CharSequence getContentDescription()>
<android.content.ContentResolver.MimeTypeInfo: CharSequence getLabel()>
<android.app.admin.SecurityLog: void <init>()>
<java.io.PipedInputStream: void <init>(int)>
<java.io.PipedInputStream: void <init>(java.io.PipedOutputStream)>
<java.io.PipedInputStream: void <init>(java.io.PipedOutputStream,int)>
<java.io.PipedInputStream: int read()>
<java.io.PipedInputStream: void receive(int)>
<java.io.PipedInputStream: void connect(java.io.PipedOutputStream)>
<java.io.PipedInputStream: void <init>()>
<java.nio.channels.Pipe.SinkChannel: int validOps()>
<java.nio.channels.Pipe.SinkChannel: void <init>(java.nio.channels.spi.SelectorProvider)>
<android.widget.PopupMenu: void setForceShowIcon(boolean)>
<android.widget.PopupMenu: int getGravity()>
<android.widget.PopupMenu: void setGravity(int)>
<android.widget.PopupMenu: void <init>(android.content.Context,android.view.View)>
<android.widget.PopupMenu: android.widget.ListView getMenuListView()>
<android.widget.PopupMenu: void <init>(android.content.Context,android.view.View,int,int,int)>
<android.widget.PopupMenu: android.view.MenuInflater getMenuInflater()>
<android.widget.PopupMenu: android.view.View.OnTouchListener getDragToOpenListener()>
<android.widget.PopupMenu: void show()>
<android.widget.PopupMenu: android.view.Menu getMenu()>
<android.widget.PopupMenu: void setOnDismissListener(android.widget.PopupMenu.OnDismissListener)>
<android.widget.PopupMenu: void inflate(@MenuResint)>
<android.widget.PopupMenu: void setOnMenuItemClickListener(android.widget.PopupMenu.OnMenuItemClickListener)>
<android.widget.PopupMenu: void dismiss()>
<android.widget.PopupMenu: void <init>(android.content.Context,android.view.View,int)>
<javax.xml.namespace.NamespaceContext: java.util.Iterator getPrefixes(java.lang.String)>
<javax.xml.namespace.NamespaceContext: java.lang.String getNamespaceURI(java.lang.String)>
<javax.xml.namespace.NamespaceContext: java.lang.String getPrefix(java.lang.String)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain()>
<android.view.accessibility.AccessibilityEvent: int getWindowChanges()>
<android.view.accessibility.AccessibilityEvent: void appendRecord(android.view.accessibility.AccessibilityRecord)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)>
<android.view.accessibility.AccessibilityEvent: void setEventType(int)>
<android.view.accessibility.AccessibilityEvent: void setPackageName(CharSequence)>
<android.view.accessibility.AccessibilityEvent: int describeContents()>
<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>
<android.view.accessibility.AccessibilityEvent: void setContentChangeTypes(int)>
<android.view.accessibility.AccessibilityEvent: CharSequence getPackageName()>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>
<android.view.accessibility.AccessibilityEvent: int getEventType()>
<android.view.accessibility.AccessibilityEvent: int getRecordCount()>
<android.view.accessibility.AccessibilityEvent: int getMovementGranularity()>
<android.view.accessibility.AccessibilityEvent: int getAction()>
<android.view.accessibility.AccessibilityEvent: void setEventTime(long)>
<android.view.accessibility.AccessibilityEvent: long getEventTime()>
<android.view.accessibility.AccessibilityEvent: void setMovementGranularity(int)>
<android.view.accessibility.AccessibilityEvent: java.lang.String eventTypeToString(int)>
<android.view.accessibility.AccessibilityEvent: void setAction(int)>
<android.view.accessibility.AccessibilityEvent: int getContentChangeTypes()>
<android.view.accessibility.AccessibilityEvent: void writeToParcel(android.os.Parcel,int)>
<android.security.keystore.recovery.KeyChainSnapshot: byte[] getEncryptedRecoveryKeyBlob()>
<android.security.keystore.recovery.KeyChainSnapshot: java.security.cert.CertPath getTrustedHardwareCertPath()>
<android.security.keystore.recovery.KeyChainSnapshot: java.util.List getWrappedApplicationKeys()>
<android.security.keystore.recovery.KeyChainSnapshot: int getSnapshotVersion()>
<android.security.keystore.recovery.KeyChainSnapshot: long getCounterId()>
<android.security.keystore.recovery.KeyChainSnapshot: int getMaxAttempts()>
<android.security.keystore.recovery.KeyChainSnapshot: byte[] getServerParams()>
<android.security.keystore.recovery.KeyChainSnapshot: void writeToParcel(android.os.Parcel,int)>
<android.security.keystore.recovery.KeyChainSnapshot: int describeContents()>
<android.security.keystore.recovery.KeyChainSnapshot: java.util.List getKeyChainProtectionParams()>
<android.text.style.TtsSpan.CardinalBuilder: android.text.style.TtsSpan.CardinalBuilder setNumber(long)>
<android.text.style.TtsSpan.CardinalBuilder: void <init>()>
<android.text.style.TtsSpan.CardinalBuilder: void <init>(long)>
<android.text.style.TtsSpan.CardinalBuilder: android.text.style.TtsSpan.CardinalBuilder setNumber(java.lang.String)>
<android.text.style.TtsSpan.CardinalBuilder: void <init>(String)>
<android.media.MediaRouter.SimpleCallback: void onRouteGrouped(android.media.MediaRouter,android.media.MediaRouter.RouteInfo,android.media.MediaRouter.RouteGroup,int)>
<android.media.MediaRouter.SimpleCallback: void onRouteRemoved(android.media.MediaRouter,android.media.MediaRouter.RouteInfo)>
<android.media.MediaRouter.SimpleCallback: void onRouteUnselected(android.media.MediaRouter,int,android.media.MediaRouter.RouteInfo)>
<android.media.MediaRouter.SimpleCallback: void onRouteAdded(android.media.MediaRouter,android.media.MediaRouter.RouteInfo)>
<android.media.MediaRouter.SimpleCallback: void onRouteUngrouped(android.media.MediaRouter,android.media.MediaRouter.RouteInfo,android.media.MediaRouter.RouteGroup)>
<android.media.MediaRouter.SimpleCallback: void onRouteChanged(android.media.MediaRouter,android.media.MediaRouter.RouteInfo)>
<android.media.MediaRouter.SimpleCallback: void <init>()>
<android.media.MediaRouter.SimpleCallback: void onRouteSelected(android.media.MediaRouter,int,android.media.MediaRouter.RouteInfo)>
<android.media.MediaRouter.SimpleCallback: void onRouteVolumeChanged(android.media.MediaRouter,android.media.MediaRouter.RouteInfo)>
<android.view.View.OnCapturedPointerListener: boolean onCapturedPointer(android.view.View,android.view.MotionEvent)>
<android.webkit.JsDialogHelper: void showDialog(android.content.Context)>
<android.webkit.JsDialogHelper: void <init>(android.webkit.JsPromptResult,int,String,String,String)>
<android.webkit.JsDialogHelper: boolean invokeCallback(android.webkit.WebChromeClient,android.webkit.WebView)>
<android.webkit.JsDialogHelper: void <init>(android.webkit.JsPromptResult,android.os.Message)>
<android.bluetooth.le.AdvertiseCallback: void <init>()>
<android.bluetooth.le.AdvertiseCallback: void onStartSuccess(android.bluetooth.le.AdvertiseSettings)>
<android.bluetooth.le.AdvertiseCallback: void onStartFailure(int)>
<android.graphics.pdf.PdfDocument.PageInfo.Builder: void <init>(int,int,int)>
<android.graphics.pdf.PdfDocument.PageInfo.Builder: android.graphics.pdf.PdfDocument.PageInfo.Builder setContentRect(android.graphics.Rect)>
<android.graphics.pdf.PdfDocument.PageInfo.Builder: android.graphics.pdf.PdfDocument.PageInfo create()>
<java.nio.file.NotLinkException: void <init>(String)>
<java.nio.file.NotLinkException: void <init>(String,String,String)>
<java.security.KeyManagementException: void <init>()>
<java.security.KeyManagementException: void <init>(String)>
<java.security.KeyManagementException: void <init>(String,Throwable)>
<java.security.KeyManagementException: void <init>(Throwable)>
<android.renderscript.Float3: void <init>(float,float,float)>
<android.renderscript.Float3: void <init>()>
<android.renderscript.Float2: void <init>()>
<android.renderscript.Float2: void <init>(float,float)>
<android.renderscript.Float4: void <init>()>
<android.renderscript.Float4: void <init>(float,float,float,float)>
<android.net.wifi.RttManager.ParcelableRttResults: void <init>(android.net.wifi.RttManager.RttResult[])>
<android.text.util.Rfc822Tokenizer: android.text.util.Rfc822Token[] tokenize(CharSequence)>
<android.text.util.Rfc822Tokenizer: void tokenize(CharSequence,java.util.Collection)>
<android.text.util.Rfc822Tokenizer: int findTokenEnd(CharSequence,int)>
<android.text.util.Rfc822Tokenizer: int findTokenStart(CharSequence,int)>
<android.text.util.Rfc822Tokenizer: void <init>()>
<android.text.util.Rfc822Tokenizer: CharSequence terminateToken(CharSequence)>
<android.service.watchdog.ExplicitHealthCheckService.PackageConfig: java.lang.String getPackageName()>
<android.service.watchdog.ExplicitHealthCheckService.PackageConfig: int describeContents()>
<android.service.watchdog.ExplicitHealthCheckService.PackageConfig: void <init>(String,long)>
<android.service.watchdog.ExplicitHealthCheckService.PackageConfig: long getHealthCheckTimeoutMillis()>
<android.service.watchdog.ExplicitHealthCheckService.PackageConfig: void writeToParcel(android.os.Parcel,int)>
<android.view.animation.LayoutAnimationController: void setInterpolator(android.view.animation.Interpolator)>
<android.view.animation.LayoutAnimationController: boolean willOverlap()>
<android.view.animation.LayoutAnimationController: int getOrder()>
<android.view.animation.LayoutAnimationController: void setAnimation(android.view.animation.Animation)>
<android.view.animation.LayoutAnimationController: boolean isDone()>
<android.view.animation.LayoutAnimationController: void start()>
<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation)>
<android.view.animation.LayoutAnimationController: long getDelayForView(android.view.View)>
<android.view.animation.LayoutAnimationController: android.view.animation.Interpolator getInterpolator()>
<android.view.animation.LayoutAnimationController: int getTransformedIndex(android.view.animation.LayoutAnimationController.AnimationParameters)>
<android.view.animation.LayoutAnimationController: void setInterpolator(android.content.Context,@InterpolatorResint)>
<android.view.animation.LayoutAnimationController: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.LayoutAnimationController: float getDelay()>
<android.view.animation.LayoutAnimationController: void setAnimation(android.content.Context,@AnimResint)>
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)>
<android.view.animation.LayoutAnimationController: void setDelay(float)>
<android.view.animation.LayoutAnimationController: void setOrder(int)>
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()>
<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation,float)>
<android.location.GnssNavigationMessage: int describeContents()>
<android.location.GnssNavigationMessage: byte[] getData()>
<android.location.GnssNavigationMessage: void setMessageId(int)>
<android.location.GnssNavigationMessage: void setStatus(int)>
<android.location.GnssNavigationMessage: void setSubmessageId(int)>
<android.location.GnssNavigationMessage: int getSubmessageId()>
<android.location.GnssNavigationMessage: int getSvid()>
<android.location.GnssNavigationMessage: void set(android.location.GnssNavigationMessage)>
<android.location.GnssNavigationMessage: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssNavigationMessage: int getMessageId()>
<android.location.GnssNavigationMessage: int getStatus()>
<android.location.GnssNavigationMessage: int getType()>
<android.location.GnssNavigationMessage: void <init>()>
<android.location.GnssNavigationMessage: void setSvid(int)>
<android.location.GnssNavigationMessage: void reset()>
<android.location.GnssNavigationMessage: void setData(byte[])>
<android.location.GnssNavigationMessage: void setType(int)>
<android.telecom.Call.Callback: void onParentChanged(android.telecom.Call,android.telecom.Call)>
<android.telecom.Call.Callback: void onStateChanged(android.telecom.Call,int)>
<android.telecom.Call.Callback: void onRttRequest(android.telecom.Call,int)>
<android.telecom.Call.Callback: void onDetailsChanged(android.telecom.Call,android.telecom.Call.Details)>
<android.telecom.Call.Callback: void onConferenceableCallsChanged(android.telecom.Call,java.util.List)>
<android.telecom.Call.Callback: void onRttStatusChanged(android.telecom.Call,boolean,android.telecom.Call.RttCall)>
<android.telecom.Call.Callback: void onRttInitiationFailure(android.telecom.Call,int)>
<android.telecom.Call.Callback: void onRttModeChanged(android.telecom.Call,int)>
<android.telecom.Call.Callback: void onHandoverFailed(android.telecom.Call,int)>
<android.telecom.Call.Callback: void onCannedTextResponsesLoaded(android.telecom.Call,java.util.List)>
<android.telecom.Call.Callback: void onConnectionEvent(android.telecom.Call,java.lang.String,android.os.Bundle)>
<android.telecom.Call.Callback: void onCallDestroyed(android.telecom.Call)>
<android.telecom.Call.Callback: void onChildrenChanged(android.telecom.Call,java.util.List)>
<android.telecom.Call.Callback: void <init>()>
<android.telecom.Call.Callback: void onHandoverComplete(android.telecom.Call)>
<android.telecom.Call.Callback: void onPostDialWait(android.telecom.Call,java.lang.String)>
<android.telecom.Call.Callback: void onVideoCallChanged(android.telecom.Call,android.telecom.InCallService.VideoCall)>
<java.lang.RuntimePermission: void <init>(String)>
<java.lang.RuntimePermission: void <init>(String,String)>
<android.graphics.drawable.shapes.RectShape: void draw(android.graphics.Canvas,android.graphics.Paint)>
<android.graphics.drawable.shapes.RectShape: android.graphics.RectF rect()>
<android.graphics.drawable.shapes.RectShape: android.graphics.drawable.shapes.RectShape clone()>
<android.graphics.drawable.shapes.RectShape: void <init>()>
<java.net.UnknownServiceException: void <init>()>
<java.net.UnknownServiceException: void <init>(String)>
<android.animation.TimeAnimator: void <init>()>
<android.animation.TimeAnimator: void setTimeListener(android.animation.TimeAnimator.TimeListener)>
<android.app.ActivityManager.MemoryInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ActivityManager.MemoryInfo: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager.MemoryInfo: void <init>()>
<android.app.ActivityManager.MemoryInfo: int describeContents()>
<android.text.style.ImageSpan: java.lang.String getSource()>
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable,String)>
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable,String,int)>
<android.text.style.ImageSpan: void <init>(android.content.Context,@DrawableRes int)>
<android.text.style.ImageSpan: void <init>(android.graphics.Bitmap)>
<android.text.style.ImageSpan: android.graphics.drawable.Drawable getDrawable()>
<android.text.style.ImageSpan: void <init>(android.content.Context,android.graphics.Bitmap)>
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable,int)>
<android.text.style.ImageSpan: void <init>(android.content.Context,android.net.Uri)>
<android.text.style.ImageSpan: void <init>(android.content.Context,android.net.Uri,int)>
<android.text.style.ImageSpan: void <init>(android.content.Context,@DrawableRes int,int)>
<android.text.style.ImageSpan: void <init>(android.content.Context,android.graphics.Bitmap,int)>
<android.text.style.ImageSpan: void <init>(android.graphics.Bitmap,int)>
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable)>
<android.graphics.ImageDecoder.ImageInfo: android.graphics.ColorSpace getColorSpace()>
<android.graphics.ImageDecoder.ImageInfo: java.lang.String getMimeType()>
<android.graphics.ImageDecoder.ImageInfo: android.util.Size getSize()>
<android.graphics.ImageDecoder.ImageInfo: boolean isAnimated()>
<java.security.KeyStore.TrustedCertificateEntry: void <init>(java.security.cert.Certificate)>
<java.security.KeyStore.TrustedCertificateEntry: java.security.cert.Certificate getTrustedCertificate()>
<java.security.KeyStore.TrustedCertificateEntry: void <init>(java.security.cert.Certificate,java.util.Set)>
<android.graphics.PathEffect: void <init>()>
<android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)>
<android.app.FragmentTransaction: void commitNow()>
<android.app.FragmentTransaction: android.app.FragmentTransaction disallowAddToBackStack()>
<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbTitle(@StringResint)>
<android.app.FragmentTransaction: boolean isEmpty()>
<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbShortTitle(CharSequence)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbTitle(CharSequence)>
<android.app.FragmentTransaction: android.app.FragmentTransaction add(@IdResint,android.app.Fragment,java.lang.String)>
<android.app.FragmentTransaction: android.app.FragmentTransaction hide(android.app.Fragment)>
<android.app.FragmentTransaction: android.app.FragmentTransaction remove(android.app.Fragment)>
<android.app.FragmentTransaction: android.app.FragmentTransaction replace(@IdResint,android.app.Fragment)>
<android.app.FragmentTransaction: int commit()>
<android.app.FragmentTransaction: android.app.FragmentTransaction show(android.app.Fragment)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setReorderingAllowed(boolean)>
<android.app.FragmentTransaction: android.app.FragmentTransaction add(@IdResint,android.app.Fragment)>
<android.app.FragmentTransaction: android.app.FragmentTransaction detach(android.app.Fragment)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setTransitionStyle(@StyleResint)>
<android.app.FragmentTransaction: android.app.FragmentTransaction addSharedElement(android.view.View,java.lang.String)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setCustomAnimations(@AnimatorResint,@AnimatorResint)>
<android.app.FragmentTransaction: boolean isAddToBackStackAllowed()>
<android.app.FragmentTransaction: android.app.FragmentTransaction runOnCommit(Runnable)>
<android.app.FragmentTransaction: int commitAllowingStateLoss()>
<android.app.FragmentTransaction: void commitNowAllowingStateLoss()>
<android.app.FragmentTransaction: android.app.FragmentTransaction replace(@IdResint,android.app.Fragment,java.lang.String)>
<android.app.FragmentTransaction: void <init>()>
<android.app.FragmentTransaction: android.app.FragmentTransaction addToBackStack(java.lang.String)>
<android.app.FragmentTransaction: android.app.FragmentTransaction attach(android.app.Fragment)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbShortTitle(@StringResint)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setPrimaryNavigationFragment(android.app.Fragment)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setCustomAnimations(@AnimatorResint,@AnimatorResint,@AnimatorResint,@AnimatorResint)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setTransition(int)>
<android.renderscript.RenderScript: android.content.Context getApplicationContext()>
<android.renderscript.RenderScript: android.renderscript.RenderScript.RSErrorHandler getErrorHandler()>
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context,android.renderscript.RenderScript.ContextType,int)>
<android.renderscript.RenderScript: void setErrorHandler(android.renderscript.RenderScript.RSErrorHandler)>
<android.renderscript.RenderScript: long getMinorVersion()>
<android.renderscript.RenderScript: void contextDump()>
<android.renderscript.RenderScript: void destroy()>
<android.renderscript.RenderScript: android.renderscript.RenderScript.RSMessageHandler getMessageHandler()>
<android.renderscript.RenderScript: void finish()>
<android.renderscript.RenderScript: android.renderscript.RenderScript createMultiContext(android.content.Context,android.renderscript.RenderScript.ContextType,int,int)>
<android.renderscript.RenderScript: void releaseAllContexts()>
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context)>
<android.renderscript.RenderScript: void setMessageHandler(android.renderscript.RenderScript.RSMessageHandler)>
<android.renderscript.RenderScript: void setPriority(android.renderscript.RenderScript.Priority)>
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context,android.renderscript.RenderScript.ContextType)>
<android.renderscript.RenderScript: void sendMessage(int,int[])>
<android.telecom.Call: void answer(int)>
<android.telecom.Call: void putExtras(android.os.Bundle)>
<android.telecom.Call: void pullExternalCall()>
<android.telecom.Call: android.telecom.Call.RttCall getRttCall()>
<android.telecom.Call: void handoverTo(android.telecom.PhoneAccountHandle,int,android.os.Bundle)>
<android.telecom.Call: void mergeConference()>
<android.telecom.Call: java.util.List getCannedTextResponses()>
<android.telecom.Call: void respondToRttRequest(int,boolean)>
<android.telecom.Call: android.telecom.InCallService.VideoCall getVideoCall()>
<android.telecom.Call: void stopDtmfTone()>
<android.telecom.Call: void conference(android.telecom.Call)>
<android.telecom.Call: void stopRtt()>
<android.telecom.Call: void addListener(android.telecom.Call.Listener)>
<android.telecom.Call: void sendCallEvent(java.lang.String,android.os.Bundle)>
<android.telecom.Call: void removeExtras(java.util.List)>
<android.telecom.Call: java.util.List getChildren()>
<android.telecom.Call: void unhold()>
<android.telecom.Call: void splitFromConference()>
<android.telecom.Call: android.telecom.Call.Details getDetails()>
<android.telecom.Call: void registerCallback(android.telecom.Call.Callback,android.os.Handler)>
<android.telecom.Call: void reject(boolean,java.lang.String)>
<android.telecom.Call: int getState()>
<android.telecom.Call: java.util.List getConferenceableCalls()>
<android.telecom.Call: void phoneAccountSelected(android.telecom.PhoneAccountHandle,boolean)>
<android.telecom.Call: void deflect(android.net.Uri)>
<android.telecom.Call: java.lang.String getRemainingPostDialSequence()>
<android.telecom.Call: void removeExtras(java.lang.String...)>
<android.telecom.Call: void removeListener(android.telecom.Call.Listener)>
<android.telecom.Call: boolean isRttActive()>
<android.telecom.Call: void registerCallback(android.telecom.Call.Callback)>
<android.telecom.Call: void hold()>
<android.telecom.Call: void swapConference()>
<android.telecom.Call: void disconnect()>
<android.telecom.Call: android.telecom.Call getParent()>
<android.telecom.Call: void postDialContinue(boolean)>
<android.telecom.Call: void unregisterCallback(android.telecom.Call.Callback)>
<android.telecom.Call: void playDtmfTone(char)>
<android.telecom.Call: void sendRttRequest()>
<java.security.spec.ECPrivateKeySpec: void <init>(java.math.BigInteger,java.security.spec.ECParameterSpec)>
<java.security.spec.ECPrivateKeySpec: java.security.spec.ECParameterSpec getParams()>
<java.security.spec.ECPrivateKeySpec: java.math.BigInteger getS()>
<android.media.midi.MidiManager.DeviceCallback: void <init>()>
<android.media.midi.MidiManager.DeviceCallback: void onDeviceAdded(android.media.midi.MidiDeviceInfo)>
<android.media.midi.MidiManager.DeviceCallback: void onDeviceRemoved(android.media.midi.MidiDeviceInfo)>
<android.media.midi.MidiManager.DeviceCallback: void onDeviceStatusChanged(android.media.midi.MidiDeviceStatus)>
<android.os.storage.StorageVolume: java.lang.String getUuid()>
<android.os.storage.StorageVolume: boolean isEmulated()>
<android.os.storage.StorageVolume: int describeContents()>
<android.os.storage.StorageVolume: boolean isPrimary()>
<android.os.storage.StorageVolume: java.lang.String getDescription(android.content.Context)>
<android.os.storage.StorageVolume: boolean isRemovable()>
<android.os.storage.StorageVolume: android.content.Intent createOpenDocumentTreeIntent()>
<android.os.storage.StorageVolume: void writeToParcel(android.os.Parcel,int)>
<android.os.storage.StorageVolume: android.content.Intent createAccessIntent(java.lang.String)>
<android.os.storage.StorageVolume: java.lang.String getState()>
<android.os.storage.StorageVolume: java.lang.String getPath()>
<android.nfc.cardemulation.HostNfcFService: android.os.IBinder onBind(android.content.Intent)>
<android.nfc.cardemulation.HostNfcFService: void sendResponsePacket(byte[])>
<android.nfc.cardemulation.HostNfcFService: void <init>()>
<android.nfc.cardemulation.HostNfcFService: byte[] processNfcFPacket(byte[],android.os.Bundle)>
<android.nfc.cardemulation.HostNfcFService: void onDeactivated(int)>
<android.media.MediaCodecList: int getCodecCount()>
<android.media.MediaCodecList: android.media.MediaCodecInfo[] getCodecInfos()>
<android.media.MediaCodecList: void <init>(int)>
<android.media.MediaCodecList: android.media.MediaCodecInfo getCodecInfoAt(int)>
<android.media.MediaCodecList: java.lang.String findDecoderForFormat(android.media.MediaFormat)>
<android.media.MediaCodecList: java.lang.String findEncoderForFormat(android.media.MediaFormat)>
<android.provider.DeviceConfig.OnPropertiesChangedListener: void onPropertiesChanged(android.provider.DeviceConfig.Properties)>
<android.print.PrinterInfo.Builder: android.print.PrinterInfo.Builder setHasCustomPrinterIcon(boolean)>
<android.print.PrinterInfo.Builder: android.print.PrinterInfo.Builder setCapabilities(android.print.PrinterCapabilitiesInfo)>
<android.print.PrinterInfo.Builder: android.print.PrinterInfo build()>
<android.print.PrinterInfo.Builder: android.print.PrinterInfo.Builder setName(java.lang.String)>
<android.print.PrinterInfo.Builder: android.print.PrinterInfo.Builder setDescription(java.lang.String)>
<android.print.PrinterInfo.Builder: void <init>(android.print.PrinterInfo)>
<android.print.PrinterInfo.Builder: void <init>(android.print.PrinterId,String,int)>
<android.print.PrinterInfo.Builder: android.print.PrinterInfo.Builder setIconResourceId(@DrawableResint)>
<android.print.PrinterInfo.Builder: android.print.PrinterInfo.Builder setInfoIntent(android.app.PendingIntent)>
<android.print.PrinterInfo.Builder: android.print.PrinterInfo.Builder setStatus(int)>
<java.lang.String: boolean matches(java.lang.String)>
<java.lang.String: void <init>(int[],int,int)>
<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>
<java.lang.String: int indexOf(int)>
<java.lang.String: boolean startsWith(java.lang.String,int)>
<java.lang.String: int compareToIgnoreCase(java.lang.String)>
<java.lang.String: boolean contentEquals(java.lang.StringBuffer)>
<java.lang.String: java.lang.String substring(int,int)>
<java.lang.String: java.lang.String toUpperCase()>
<java.lang.String: void <init>(byte[],String)>
<java.lang.String: char charAt(int)>
<java.lang.String: boolean contains(CharSequence)>
<java.lang.String: java.lang.String valueOf(char[])>
<java.lang.String: void <init>(byte[])>
<java.lang.String: java.lang.String replace(char,char)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.lang.String: java.lang.String intern()>
<java.lang.String: void getChars(int,int,char[],int)>
<java.lang.String: boolean isEmpty()>
<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>
<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>
<java.lang.String: byte[] getBytes()>
<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>
<java.lang.String: java.lang.String substring(int)>
<java.lang.String: java.lang.String copyValueOf(char[])>
<java.lang.String: java.lang.String[] split(java.lang.String,int)>
<java.lang.String: java.lang.String[] split(java.lang.String)>
<java.lang.String: int indexOf(java.lang.String,int)>
<java.lang.String: void <init>(char[])>
<java.lang.String: void <init>(StringBuilder)>
<java.lang.String: void <init>(String)>
<java.lang.String: int lastIndexOf(int,int)>
<java.lang.String: java.lang.String valueOf(char[],int,int)>
<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.lang.String: int indexOf(int,int)>
<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
<java.lang.String: boolean endsWith(java.lang.String)>
<java.lang.String: java.lang.String replace(CharSequence,CharSequence)>
<java.lang.String: byte[] getBytes(java.lang.String)>
<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
<java.lang.String: boolean startsWith(java.lang.String)>
<java.lang.String: java.lang.String valueOf(int)>
<java.lang.String: java.lang.String valueOf(float)>
<java.lang.String: java.lang.String trim()>
<java.lang.String: int codePointBefore(int)>
<java.lang.String: void <init>(StringBuffer)>
<java.lang.String: int lastIndexOf(java.lang.String,int)>
<java.lang.String: int lastIndexOf(int)>
<java.lang.String: java.lang.String join(CharSequence,Iterable)>
<java.lang.String: int offsetByCodePoints(int,int)>
<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object...)>
<java.lang.String: int codePointCount(int,int)>
<java.lang.String: int indexOf(java.lang.String)>
<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
<java.lang.String: void <init>(byte[],int,int)>
<java.lang.String: void <init>(byte[],int)>
<java.lang.String: java.lang.String copyValueOf(char[],int,int)>
<java.lang.String: void <init>(byte[],int,int,String)>
<java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object...)>
<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<java.lang.String: java.lang.String valueOf(double)>
<java.lang.String: void <init>(byte[],int,int,int)>
<java.lang.String: java.lang.String valueOf(char)>
<java.lang.String: int length()>
<java.lang.String: void <init>()>
<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>
<java.lang.String: int codePointAt(int)>
<java.lang.String: java.lang.String valueOf(boolean)>
<java.lang.String: char[] toCharArray()>
<java.lang.String: void getBytes(int,int,byte[],int)>
<java.lang.String: java.lang.String concat(java.lang.String)>
<java.lang.String: void <init>(char[],int,int)>
<java.lang.String: int compareTo(java.lang.String)>
<java.lang.String: int lastIndexOf(java.lang.String)>
<java.lang.String: CharSequence subSequence(int,int)>
<java.lang.String: boolean contentEquals(CharSequence)>
<java.lang.String: java.lang.String toLowerCase()>
<java.lang.String: java.lang.String valueOf(long)>
<java.lang.String: java.lang.String join(CharSequence,java.lang.CharSequence...)>
<org.xml.sax.helpers.NamespaceSupport: java.util.Enumeration getPrefixes(java.lang.String)>
<org.xml.sax.helpers.NamespaceSupport: void <init>()>
<org.xml.sax.helpers.NamespaceSupport: java.util.Enumeration getDeclaredPrefixes()>
<org.xml.sax.helpers.NamespaceSupport: boolean isNamespaceDeclUris()>
<org.xml.sax.helpers.NamespaceSupport: java.lang.String getURI(java.lang.String)>
<org.xml.sax.helpers.NamespaceSupport: java.util.Enumeration getPrefixes()>
<org.xml.sax.helpers.NamespaceSupport: void popContext()>
<org.xml.sax.helpers.NamespaceSupport: boolean declarePrefix(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.NamespaceSupport: void setNamespaceDeclUris(boolean)>
<org.xml.sax.helpers.NamespaceSupport: void pushContext()>
<org.xml.sax.helpers.NamespaceSupport: void reset()>
<org.xml.sax.helpers.NamespaceSupport: java.lang.String[] processName(java.lang.String,java.lang.String[],boolean)>
<org.xml.sax.helpers.NamespaceSupport: java.lang.String getPrefix(java.lang.String)>
<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryStorageVolume()>
<android.os.storage.StorageManager: boolean mountObb(java.lang.String,java.lang.String,android.os.storage.OnObbStateChangeListener)>
<android.os.storage.StorageManager: long getCacheSizeBytes(java.util.UUID)>
<android.os.storage.StorageManager: boolean isEncrypted(java.io.File)>
<android.os.storage.StorageManager: android.os.storage.StorageVolume getStorageVolume(java.io.File)>
<android.os.storage.StorageManager: long getCacheQuotaBytes(java.util.UUID)>
<android.os.storage.StorageManager: boolean isCacheBehaviorTombstone(java.io.File)>
<android.os.storage.StorageManager: boolean hasIsolatedStorage()>
<android.os.storage.StorageManager: boolean isAllocationSupported(java.io.FileDescriptor)>
<android.os.storage.StorageManager: long getAllocatableBytes(java.util.UUID,@RequiresPermissionint)>
<android.os.storage.StorageManager: boolean isObbMounted(java.lang.String)>
<android.os.storage.StorageManager: java.util.List getStorageVolumes()>
<android.os.storage.StorageManager: android.os.storage.StorageVolume getStorageVolume(android.net.Uri)>
<android.os.storage.StorageManager: boolean isCacheBehaviorGroup(java.io.File)>
<android.os.storage.StorageManager: void setCacheBehaviorTombstone(java.io.File,boolean)>
<android.os.storage.StorageManager: android.os.ParcelFileDescriptor openProxyFileDescriptor(int,android.os.ProxyFileDescriptorCallback,android.os.Handler)>
<android.os.storage.StorageManager: void allocateBytes(java.io.FileDescriptor,long)>
<android.os.storage.StorageManager: java.util.UUID getUuidForPath(java.io.File)>
<android.os.storage.StorageManager: boolean unmountObb(java.lang.String,boolean,android.os.storage.OnObbStateChangeListener)>
<android.os.storage.StorageManager: void setCacheBehaviorGroup(java.io.File,boolean)>
<android.os.storage.StorageManager: long getAllocatableBytes(java.util.UUID)>
<android.os.storage.StorageManager: void allocateBytes(java.io.FileDescriptor,long,@RequiresPermissionint)>
<android.os.storage.StorageManager: void allocateBytes(java.util.UUID,long,@RequiresPermissionint)>
<android.os.storage.StorageManager: java.lang.String getMountedObbPath(java.lang.String)>
<android.os.storage.StorageManager: void allocateBytes(java.util.UUID,long)>
<android.webkit.JsPromptResult: void <init>(android.webkit.JsResult.ResultReceiver)>
<android.webkit.JsPromptResult: void confirm(java.lang.String)>
<android.webkit.JsPromptResult: java.lang.String getStringResult()>
<android.text.SpannableString: void setSpan(java.lang.Object,int,int,int)>
<android.text.SpannableString: int getSpanFlags(java.lang.Object)>
<android.text.SpannableString: void getChars(int,int,char[],int)>
<android.text.SpannableString: void <init>(CharSequence)>
<android.text.SpannableString: T[] getSpans(int,int,java.lang.Class)>
<android.text.SpannableString: int getSpanEnd(java.lang.Object)>
<android.text.SpannableString: CharSequence subSequence(int,int)>
<android.text.SpannableString: int nextSpanTransition(int,int,java.lang.Class)>
<android.text.SpannableString: int getSpanStart(java.lang.Object)>
<android.text.SpannableString: void removeSpan(java.lang.Object)>
<android.text.SpannableString: java.lang.String toString()>
<android.text.SpannableString: char charAt(int)>
<android.text.SpannableString: int length()>
<android.text.SpannableString: android.text.SpannableString valueOf(CharSequence)>
<java.nio.channels.NoConnectionPendingException: void <init>()>
<android.gesture.GestureOverlayView.OnGestureListener: void onGesture(android.gesture.GestureOverlayView,android.view.MotionEvent)>
<android.gesture.GestureOverlayView.OnGestureListener: void onGestureStarted(android.gesture.GestureOverlayView,android.view.MotionEvent)>
<android.gesture.GestureOverlayView.OnGestureListener: void onGestureCancelled(android.gesture.GestureOverlayView,android.view.MotionEvent)>
<android.gesture.GestureOverlayView.OnGestureListener: void onGestureEnded(android.gesture.GestureOverlayView,android.view.MotionEvent)>
<android.renderscript.Allocation.OnBufferAvailableListener: void onBufferAvailable(android.renderscript.Allocation)>
<android.content.PeriodicSync: void <init>(android.accounts.Account,String,android.os.Bundle,long)>
<android.content.PeriodicSync: void writeToParcel(android.os.Parcel,int)>
<android.content.PeriodicSync: int describeContents()>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal max(android.icu.math.BigDecimal,android.icu.math.MathContext)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal pow(android.icu.math.BigDecimal)>
<android.icu.math.BigDecimal: java.math.BigInteger toBigInteger()>
<android.icu.math.BigDecimal: char[] toCharArray()>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal add(android.icu.math.BigDecimal,android.icu.math.MathContext)>
<android.icu.math.BigDecimal: float floatValue()>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal add(android.icu.math.BigDecimal)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal remainder(android.icu.math.BigDecimal,android.icu.math.MathContext)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal negate(android.icu.math.MathContext)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal multiply(android.icu.math.BigDecimal,android.icu.math.MathContext)>
<android.icu.math.BigDecimal: void <init>(java.math.BigDecimal)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal plus(android.icu.math.MathContext)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal abs(android.icu.math.MathContext)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal movePointRight(int)>
<android.icu.math.BigDecimal: int compareTo(android.icu.math.BigDecimal)>
<android.icu.math.BigDecimal: void <init>(char[],int,int)>
<android.icu.math.BigDecimal: void <init>(double)>
<android.icu.math.BigDecimal: void <init>(java.math.BigInteger)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal movePointLeft(int)>
<android.icu.math.BigDecimal: int intValueExact()>
<android.icu.math.BigDecimal: void <init>(java.math.BigInteger,int)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal valueOf(double)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal setScale(int,int)>
<android.icu.math.BigDecimal: java.math.BigInteger unscaledValue()>
<android.icu.math.BigDecimal: byte byteValueExact()>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divide(android.icu.math.BigDecimal)>
<android.icu.math.BigDecimal: short shortValueExact()>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal setScale(int)>
<android.icu.math.BigDecimal: void <init>(char[])>
<android.icu.math.BigDecimal: int signum()>
<android.icu.math.BigDecimal: int intValue()>
<android.icu.math.BigDecimal: java.lang.String format(int,int)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal max(android.icu.math.BigDecimal)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal min(android.icu.math.BigDecimal,android.icu.math.MathContext)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal remainder(android.icu.math.BigDecimal)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divide(android.icu.math.BigDecimal,android.icu.math.MathContext)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal min(android.icu.math.BigDecimal)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal multiply(android.icu.math.BigDecimal)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal negate()>
<android.icu.math.BigDecimal: void <init>(int)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal subtract(android.icu.math.BigDecimal,android.icu.math.MathContext)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal valueOf(long)>
<android.icu.math.BigDecimal: double doubleValue()>
<android.icu.math.BigDecimal: long longValue()>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divideInteger(android.icu.math.BigDecimal,android.icu.math.MathContext)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal plus()>
<android.icu.math.BigDecimal: void <init>(long)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divideInteger(android.icu.math.BigDecimal)>
<android.icu.math.BigDecimal: int scale()>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal abs()>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal pow(android.icu.math.BigDecimal,android.icu.math.MathContext)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal valueOf(long,int)>
<android.icu.math.BigDecimal: long longValueExact()>
<android.icu.math.BigDecimal: java.lang.String format(int,int,int,int,int,int)>
<android.icu.math.BigDecimal: java.math.BigDecimal toBigDecimal()>
<android.icu.math.BigDecimal: int compareTo(android.icu.math.BigDecimal,android.icu.math.MathContext)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal subtract(android.icu.math.BigDecimal)>
<android.icu.math.BigDecimal: void <init>(String)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divide(android.icu.math.BigDecimal,int)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divide(android.icu.math.BigDecimal,int,int)>
<android.icu.math.BigDecimal: java.math.BigInteger toBigIntegerExact()>
<android.widget.AutoCompleteTextView.OnDismissListener: void onDismiss()>
<java.util.concurrent.locks.Lock: java.util.concurrent.locks.Condition newCondition()>
<java.util.concurrent.locks.Lock: boolean tryLock(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.locks.Lock: void unlock()>
<java.util.concurrent.locks.Lock: void lock()>
<java.util.concurrent.locks.Lock: boolean tryLock()>
<java.util.concurrent.locks.Lock: void lockInterruptibly()>
<android.widget.SectionIndexer: int getSectionForPosition(int)>
<android.widget.SectionIndexer: int getPositionForSection(int)>
<android.widget.SectionIndexer: java.lang.Object[] getSections()>
<java.util.function.DoubleToLongFunction: long applyAsLong(double)>
<android.bluetooth.BluetoothHealthAppConfiguration: int describeContents()>
<android.bluetooth.BluetoothHealthAppConfiguration: java.lang.String getName()>
<android.bluetooth.BluetoothHealthAppConfiguration: int getDataType()>
<android.bluetooth.BluetoothHealthAppConfiguration: int getRole()>
<android.bluetooth.BluetoothHealthAppConfiguration: void writeToParcel(android.os.Parcel,int)>
<java.nio.channels.ClosedSelectorException: void <init>()>
<android.text.LoginFilter.UsernameFilterGMail: void <init>()>
<android.text.LoginFilter.UsernameFilterGMail: boolean isAllowed(char)>
<android.text.LoginFilter.UsernameFilterGMail: void <init>(boolean)>
<android.media.audiofx.AudioEffect: int byteArrayToInt(byte[])>
<android.media.audiofx.AudioEffect: int setParameter(int,int)>
<android.media.audiofx.AudioEffect: int getParameter(byte[],byte[])>
<android.media.audiofx.AudioEffect: int setParameter(byte[],byte[])>
<android.media.audiofx.AudioEffect: int setParameter(int[],byte[])>
<android.media.audiofx.AudioEffect: int setEnabled(boolean)>
<android.media.audiofx.AudioEffect: int setParameter(int[],int[])>
<android.media.audiofx.AudioEffect: int setParameter(int,byte[])>
<android.media.audiofx.AudioEffect: void finalize()>
<android.media.audiofx.AudioEffect: void setEnableStatusListener(android.media.audiofx.AudioEffect.OnEnableStatusChangeListener)>
<android.media.audiofx.AudioEffect: int getParameter(int,short[])>
<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect.Descriptor[] queryEffects()>
<android.media.audiofx.AudioEffect: void setParameterListener(android.media.audiofx.AudioEffect.OnParameterChangeListener)>
<android.media.audiofx.AudioEffect: void release()>
<android.media.audiofx.AudioEffect: byte[] shortToByteArray(short)>
<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect.Descriptor getDescriptor()>
<android.media.audiofx.AudioEffect: boolean isEffectTypeAvailable(java.util.UUID)>
<android.media.audiofx.AudioEffect: byte[] intToByteArray(int)>
<android.media.audiofx.AudioEffect: boolean hasControl()>
<android.media.audiofx.AudioEffect: int setParameter(int,short)>
<android.media.audiofx.AudioEffect: boolean getEnabled()>
<android.media.audiofx.AudioEffect: int getId()>
<android.media.audiofx.AudioEffect: int getParameter(int,byte[])>
<android.media.audiofx.AudioEffect: int getParameter(int,int[])>
<android.media.audiofx.AudioEffect: int getParameter(int[],short[])>
<android.media.audiofx.AudioEffect: short byteArrayToShort(byte[])>
<android.media.audiofx.AudioEffect: boolean isError(int)>
<android.media.audiofx.AudioEffect: void setControlStatusListener(android.media.audiofx.AudioEffect.OnControlStatusChangeListener)>
<android.app.assist.AssistStructure.WindowNode: int getWidth()>
<android.app.assist.AssistStructure.WindowNode: int getDisplayId()>
<android.app.assist.AssistStructure.WindowNode: int getLeft()>
<android.app.assist.AssistStructure.WindowNode: int getHeight()>
<android.app.assist.AssistStructure.WindowNode: CharSequence getTitle()>
<android.app.assist.AssistStructure.WindowNode: int getTop()>
<android.app.assist.AssistStructure.WindowNode: android.app.assist.AssistStructure.ViewNode getRootViewNode()>
<android.content.SyncRequest: void writeToParcel(android.os.Parcel,int)>
<android.content.SyncRequest: int describeContents()>
<android.content.SyncStats: void <init>(android.os.Parcel)>
<android.content.SyncStats: int describeContents()>
<android.content.SyncStats: void <init>()>
<android.content.SyncStats: void clear()>
<android.content.SyncStats: void writeToParcel(android.os.Parcel,int)>
<android.media.RemoteController.MetadataEditor: void apply()>
<java.text.DecimalFormatSymbols: void setMinusSign(char)>
<java.text.DecimalFormatSymbols: void setZeroDigit(char)>
<java.text.DecimalFormatSymbols: char getMonetaryDecimalSeparator()>
<java.text.DecimalFormatSymbols: void setCurrency(java.util.Currency)>
<java.text.DecimalFormatSymbols: java.util.Currency getCurrency()>
<java.text.DecimalFormatSymbols: void setGroupingSeparator(char)>
<java.text.DecimalFormatSymbols: void setPatternSeparator(char)>
<java.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()>
<java.text.DecimalFormatSymbols: void setMonetaryDecimalSeparator(char)>
<java.text.DecimalFormatSymbols: void setDecimalSeparator(char)>
<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>
<java.text.DecimalFormatSymbols: void setNaN(java.lang.String)>
<java.text.DecimalFormatSymbols: char getPatternSeparator()>
<java.text.DecimalFormatSymbols: java.lang.String getNaN()>
<java.text.DecimalFormatSymbols: void setPerMill(char)>
<java.text.DecimalFormatSymbols: void setPercent(char)>
<java.text.DecimalFormatSymbols: char getDigit()>
<java.text.DecimalFormatSymbols: char getPercent()>
<java.text.DecimalFormatSymbols: void setExponentSeparator(java.lang.String)>
<java.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()>
<java.text.DecimalFormatSymbols: void setInfinity(java.lang.String)>
<java.text.DecimalFormatSymbols: char getPerMill()>
<java.text.DecimalFormatSymbols: void setInternationalCurrencySymbol(java.lang.String)>
<java.text.DecimalFormatSymbols: char getMinusSign()>
<java.text.DecimalFormatSymbols: char getZeroDigit()>
<java.text.DecimalFormatSymbols: char getDecimalSeparator()>
<java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance()>
<java.text.DecimalFormatSymbols: void setCurrencySymbol(java.lang.String)>
<java.text.DecimalFormatSymbols: java.util.Locale[] getAvailableLocales()>
<java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>
<java.text.DecimalFormatSymbols: void <init>()>
<java.text.DecimalFormatSymbols: void setDigit(char)>
<java.text.DecimalFormatSymbols: java.lang.Object clone()>
<java.text.DecimalFormatSymbols: java.lang.String getInfinity()>
<java.text.DecimalFormatSymbols: java.lang.String getExponentSeparator()>
<java.text.DecimalFormatSymbols: char getGroupingSeparator()>
<android.content.pm.PackageInstaller.SessionParams: void setAllocateAggressive(boolean)>
<android.content.pm.PackageInstaller.SessionParams: void setEnableRollback(boolean)>
<android.content.pm.PackageInstaller.SessionParams: void setWhitelistedRestrictedPermissions(java.util.Set)>
<android.content.pm.PackageInstaller.SessionParams: void setRequestDowngrade(boolean)>
<android.content.pm.PackageInstaller.SessionParams: void setMultiPackage()>
<android.content.pm.PackageInstaller.SessionParams: void setInstallAsVirtualPreload()>
<android.content.pm.PackageInstaller.SessionParams: void setOriginatingUid(int)>
<android.content.pm.PackageInstaller.SessionParams: void setDontKillApp(boolean)>
<android.content.pm.PackageInstaller.SessionParams: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageInstaller.SessionParams: void setSize(long)>
<android.content.pm.PackageInstaller.SessionParams: void setGrantedRuntimePermissions(java.lang.String[])>
<android.content.pm.PackageInstaller.SessionParams: void setAppIcon(android.graphics.Bitmap)>
<android.content.pm.PackageInstaller.SessionParams: void setInstallAsInstantApp(boolean)>
<android.content.pm.PackageInstaller.SessionParams: void setAllowDowngrade(boolean)>
<android.content.pm.PackageInstaller.SessionParams: void setInstallAsApex()>
<android.content.pm.PackageInstaller.SessionParams: void <init>(int)>
<android.content.pm.PackageInstaller.SessionParams: int describeContents()>
<android.content.pm.PackageInstaller.SessionParams: void setInstallLocation(int)>
<android.content.pm.PackageInstaller.SessionParams: void setOriginatingUri(android.net.Uri)>
<android.content.pm.PackageInstaller.SessionParams: void setAppPackageName(java.lang.String)>
<android.content.pm.PackageInstaller.SessionParams: void setStaged()>
<android.content.pm.PackageInstaller.SessionParams: void setAppLabel(CharSequence)>
<android.content.pm.PackageInstaller.SessionParams: void setReferrerUri(android.net.Uri)>
<android.content.pm.PackageInstaller.SessionParams: void setInstallReason(int)>
<android.net.wifi.RttManager.RttParams: void <init>()>
<android.view.autofill.AutofillManager: boolean isEnabled()>
<android.view.autofill.AutofillManager: void notifyValueChanged(android.view.View)>
<android.view.autofill.AutofillManager: void notifyViewVisibilityChanged(android.view.View,int,boolean)>
<android.view.autofill.AutofillManager: void notifyViewEntered(android.view.View)>
<android.view.autofill.AutofillManager: boolean isAutofillSupported()>
<android.view.autofill.AutofillManager: void notifyViewVisibilityChanged(android.view.View,boolean)>
<android.view.autofill.AutofillManager: void notifyViewExited(android.view.View,int)>
<android.view.autofill.AutofillManager: void notifyViewClicked(android.view.View,int)>
<android.view.autofill.AutofillManager: void notifyViewExited(android.view.View)>
<android.view.autofill.AutofillManager: void cancel()>
<android.view.autofill.AutofillManager: void notifyViewEntered(android.view.View,int,android.graphics.Rect)>
<android.view.autofill.AutofillManager: void unregisterCallback(android.view.autofill.AutofillManager.AutofillCallback)>
<android.view.autofill.AutofillManager: void requestAutofill(android.view.View,int,android.graphics.Rect)>
<android.view.autofill.AutofillManager: java.lang.String getDefaultFieldClassificationAlgorithm()>
<android.view.autofill.AutofillManager: boolean isFieldClassificationEnabled()>
<android.view.autofill.AutofillManager: void disableAutofillServices()>
<android.view.autofill.AutofillManager: void setUserData(android.service.autofill.UserData)>
<android.view.autofill.AutofillManager: void registerCallback(android.view.autofill.AutofillManager.AutofillCallback)>
<android.view.autofill.AutofillManager: android.view.autofill.AutofillId getNextAutofillId()>
<android.view.autofill.AutofillManager: java.lang.String getUserDataId()>
<android.view.autofill.AutofillManager: void setAugmentedAutofillWhitelist(java.util.Set,java.util.Set)>
<android.view.autofill.AutofillManager: void notifyViewClicked(android.view.View)>
<android.view.autofill.AutofillManager: void requestAutofill(android.view.View)>
<android.view.autofill.AutofillManager: void commit()>
<android.view.autofill.AutofillManager: void notifyValueChanged(android.view.View,int,android.view.autofill.AutofillValue)>
<android.view.autofill.AutofillManager: android.service.autofill.UserData getUserData()>
<android.view.autofill.AutofillManager: boolean hasEnabledAutofillServices()>
<android.view.autofill.AutofillManager: android.content.ComponentName getAutofillServiceComponentName()>
<android.view.autofill.AutofillManager: java.util.List getAvailableFieldClassificationAlgorithms()>
<android.provider.Contacts.People: void setPhotoData(android.content.ContentResolver,android.net.Uri,byte[])>
<android.provider.Contacts.People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
<android.provider.Contacts.People: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)>
<android.provider.Contacts.People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.provider.Contacts.People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
<android.provider.Contacts.People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>
<android.provider.Contacts.People: android.graphics.Bitmap loadContactPhoto(android.content.Context,android.net.Uri,int,android.graphics.BitmapFactory.Options)>
<android.provider.Contacts.People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>
<android.provider.Contacts.People: void markAsContacted(android.content.ContentResolver,long)>
<android.view.KeyboardShortcutGroup: void <init>(CharSequence,boolean)>
<android.view.KeyboardShortcutGroup: boolean isSystemGroup()>
<android.view.KeyboardShortcutGroup: void <init>(CharSequence,java.util.List)>
<android.view.KeyboardShortcutGroup: void addItem(android.view.KeyboardShortcutInfo)>
<android.view.KeyboardShortcutGroup: int describeContents()>
<android.view.KeyboardShortcutGroup: CharSequence getLabel()>
<android.view.KeyboardShortcutGroup: void writeToParcel(android.os.Parcel,int)>
<android.view.KeyboardShortcutGroup: void <init>(CharSequence,java.util.List,boolean)>
<android.view.KeyboardShortcutGroup: void <init>(CharSequence)>
<android.view.KeyboardShortcutGroup: java.util.List getItems()>
<android.widget.CheckBox: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.CheckBox: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.CheckBox: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.CheckBox: void <init>(android.content.Context)>
<android.view.ActionMode.Callback2: void <init>()>
<android.view.ActionMode.Callback2: void onGetContentRect(android.view.ActionMode,android.view.View,android.graphics.Rect)>
<android.media.MediaMetadata.Builder: android.media.MediaMetadata build()>
<android.media.MediaMetadata.Builder: void <init>()>
<android.media.MediaMetadata.Builder: void <init>(android.media.MediaMetadata)>
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder putBitmap(java.lang.String,android.graphics.Bitmap)>
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder putRating(java.lang.String,android.media.Rating)>
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder putLong(java.lang.String,long)>
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder putText(java.lang.String,CharSequence)>
<android.media.MediaMetadata.Builder: android.media.MediaMetadata.Builder putString(java.lang.String,java.lang.String)>
<android.view.textclassifier.TextLinks.Request: android.os.Bundle getExtras()>
<android.view.textclassifier.TextLinks.Request: java.lang.String getCallingPackageName()>
<android.view.textclassifier.TextLinks.Request: int describeContents()>
<android.view.textclassifier.TextLinks.Request: android.os.LocaleList getDefaultLocales()>
<android.view.textclassifier.TextLinks.Request: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextLinks.Request: android.view.textclassifier.TextClassifier.EntityConfig getEntityConfig()>
<android.view.textclassifier.TextLinks.Request: CharSequence getText()>
<android.telephony.SubscriptionPlan.Builder: android.telephony.SubscriptionPlan.Builder createRecurringWeekly(java.time.ZonedDateTime)>
<android.telephony.SubscriptionPlan.Builder: android.telephony.SubscriptionPlan.Builder setTitle(CharSequence)>
<android.telephony.SubscriptionPlan.Builder: android.telephony.SubscriptionPlan.Builder createRecurringDaily(java.time.ZonedDateTime)>
<android.telephony.SubscriptionPlan.Builder: android.telephony.SubscriptionPlan.Builder createRecurringMonthly(java.time.ZonedDateTime)>
<android.telephony.SubscriptionPlan.Builder: android.telephony.SubscriptionPlan.Builder createNonrecurring(java.time.ZonedDateTime,java.time.ZonedDateTime)>
<android.telephony.SubscriptionPlan.Builder: android.telephony.SubscriptionPlan.Builder setDataLimit(long,int)>
<android.telephony.SubscriptionPlan.Builder: android.telephony.SubscriptionPlan build()>
<android.telephony.SubscriptionPlan.Builder: android.telephony.SubscriptionPlan.Builder createRecurring(java.time.ZonedDateTime,java.time.Period)>
<android.telephony.SubscriptionPlan.Builder: android.telephony.SubscriptionPlan.Builder setDataUsage(long,long)>
<android.telephony.SubscriptionPlan.Builder: android.telephony.SubscriptionPlan.Builder setSummary(CharSequence)>
<java.nio.channels.spi.AsynchronousChannelProvider: java.nio.channels.AsynchronousSocketChannel openAsynchronousSocketChannel(java.nio.channels.AsynchronousChannelGroup)>
<java.nio.channels.spi.AsynchronousChannelProvider: java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(int,java.util.concurrent.ThreadFactory)>
<java.nio.channels.spi.AsynchronousChannelProvider: java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(java.util.concurrent.ExecutorService,int)>
<java.nio.channels.spi.AsynchronousChannelProvider: java.nio.channels.AsynchronousServerSocketChannel openAsynchronousServerSocketChannel(java.nio.channels.AsynchronousChannelGroup)>
<java.nio.channels.spi.AsynchronousChannelProvider: void <init>()>
<java.nio.channels.spi.AsynchronousChannelProvider: java.nio.channels.spi.AsynchronousChannelProvider provider()>
<android.provider.ContactsContract.Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract.Contacts: android.net.Uri lookupContact(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract.Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract.Contacts: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.ContactsContract.Contacts: boolean isEnterpriseContactId(long)>
<android.provider.ContactsContract.Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<android.provider.ContactsContract.Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri,boolean)>
<android.media.MediaCodec.CryptoInfo.Pattern: void <init>(int,int)>
<android.media.MediaCodec.CryptoInfo.Pattern: int getSkipBlocks()>
<android.media.MediaCodec.CryptoInfo.Pattern: void set(int,int)>
<android.media.MediaCodec.CryptoInfo.Pattern: int getEncryptBlocks()>
<android.telephony.mbms.DownloadStatusListener: void <init>()>
<android.telephony.mbms.DownloadStatusListener: void onStatusUpdated(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo,int)>
<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator,int,int)>
<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator,int,int,java.text.AttributedCharacterIterator.Attribute[])>
<java.text.AttributedString: void <init>(String,java.util.Map)>
<java.text.AttributedString: void addAttributes(java.util.Map,int,int)>
<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator)>
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator.Attribute[])>
<java.text.AttributedString: void <init>(String)>
<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator.Attribute,java.lang.Object,int,int)>
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator.Attribute[],int,int)>
<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator.Attribute,java.lang.Object)>
<javax.net.ssl.SSLServerSocketFactory: java.lang.String[] getDefaultCipherSuites()>
<javax.net.ssl.SSLServerSocketFactory: java.lang.String[] getSupportedCipherSuites()>
<javax.net.ssl.SSLServerSocketFactory: javax.net.ServerSocketFactory getDefault()>
<javax.net.ssl.SSLServerSocketFactory: void <init>()>
<android.media.midi.MidiDeviceStatus: android.media.midi.MidiDeviceInfo getDeviceInfo()>
<android.media.midi.MidiDeviceStatus: void writeToParcel(android.os.Parcel,int)>
<android.media.midi.MidiDeviceStatus: int getOutputPortOpenCount(int)>
<android.media.midi.MidiDeviceStatus: int describeContents()>
<android.media.midi.MidiDeviceStatus: boolean isInputPortOpen(int)>
<java.security.PrivilegedAction: T run()>
<android.content.BroadcastReceiver: java.lang.String getResultData()>
<android.content.BroadcastReceiver: void <init>()>
<android.content.BroadcastReceiver: void setResultCode(int)>
<android.content.BroadcastReceiver: boolean isOrderedBroadcast()>
<android.content.BroadcastReceiver: android.os.IBinder peekService(android.content.Context,android.content.Intent)>
<android.content.BroadcastReceiver: void setResult(int,java.lang.String,android.os.Bundle)>
<android.content.BroadcastReceiver: boolean getDebugUnregister()>
<android.content.BroadcastReceiver: void setDebugUnregister(boolean)>
<android.content.BroadcastReceiver: void setResultExtras(android.os.Bundle)>
<android.content.BroadcastReceiver: boolean isInitialStickyBroadcast()>
<android.content.BroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>
<android.content.BroadcastReceiver: void abortBroadcast()>
<android.content.BroadcastReceiver: void setResultData(java.lang.String)>
<android.content.BroadcastReceiver: void clearAbortBroadcast()>
<android.content.BroadcastReceiver: android.content.BroadcastReceiver.PendingResult goAsync()>
<android.content.BroadcastReceiver: boolean getAbortBroadcast()>
<android.content.BroadcastReceiver: int getResultCode()>
<android.content.BroadcastReceiver: void setOrderedHint(boolean)>
<android.content.BroadcastReceiver: android.os.Bundle getResultExtras(boolean)>
<android.graphics.fonts.FontStyle: void <init>(int,int)>
<android.graphics.fonts.FontStyle: int getWeight()>
<android.graphics.fonts.FontStyle: void <init>()>
<android.graphics.fonts.FontStyle: int getSlant()>
<android.util.AtomicFile: void <init>(java.io.File)>
<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>
<android.util.AtomicFile: void delete()>
<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>
<android.util.AtomicFile: byte[] readFully()>
<android.util.AtomicFile: java.io.FileInputStream openRead()>
<android.util.AtomicFile: java.io.FileOutputStream startWrite()>
<android.util.AtomicFile: java.io.File getBaseFile()>
<java.security.cert.CertPathValidatorResult extends java.lang.Cloneable: java.lang.Object clone()>
<java.security.acl.AclEntry extends java.lang.Cloneable: java.lang.Object clone()>
<java.security.acl.AclEntry extends java.lang.Cloneable: void setNegativePermissions()>
<java.security.acl.AclEntry extends java.lang.Cloneable: java.security.Principal getPrincipal()>
<java.security.acl.AclEntry extends java.lang.Cloneable: boolean addPermission(java.security.acl.Permission)>
<java.security.acl.AclEntry extends java.lang.Cloneable: java.util.Enumeration permissions()>
<java.security.acl.AclEntry extends java.lang.Cloneable: boolean removePermission(java.security.acl.Permission)>
<java.security.acl.AclEntry extends java.lang.Cloneable: boolean setPrincipal(java.security.Principal)>
<java.security.acl.AclEntry extends java.lang.Cloneable: java.lang.String toString()>
<java.security.acl.AclEntry extends java.lang.Cloneable: boolean checkPermission(java.security.acl.Permission)>
<java.security.acl.AclEntry extends java.lang.Cloneable: boolean isNegative()>
<android.telecom.CallAudioState: java.lang.String audioRouteToString(int)>
<android.telecom.CallAudioState: void writeToParcel(android.os.Parcel,int)>
<android.telecom.CallAudioState: int getRoute()>
<android.telecom.CallAudioState: java.util.Collection getSupportedBluetoothDevices()>
<android.telecom.CallAudioState: int describeContents()>
<android.telecom.CallAudioState: boolean isMuted()>
<android.telecom.CallAudioState: void <init>(boolean,int,int)>
<android.telecom.CallAudioState: int getSupportedRouteMask()>
<android.telecom.CallAudioState: void <init>(boolean,int,int,android.bluetooth.BluetoothDevice,java.util.Collection)>
<android.telecom.CallAudioState: android.bluetooth.BluetoothDevice getActiveBluetoothDevice()>
<java.security.Principal: java.lang.String toString()>
<java.security.Principal: boolean implies(javax.security.auth.Subject)>
<java.security.Principal: boolean equals(java.lang.Object)>
<java.security.Principal: java.lang.String getName()>
<java.security.Principal: int hashCode()>
<android.graphics.drawable.shapes.OvalShape: android.graphics.drawable.shapes.OvalShape clone()>
<android.graphics.drawable.shapes.OvalShape: void <init>()>
<android.os.VibrationEffect.Prebaked: void <init>(android.os.Parcel)>
<android.os.VibrationEffect.Prebaked: void setEffectStrength(int)>
<android.os.VibrationEffect.Prebaked: long getDuration()>
<android.os.VibrationEffect.Prebaked: int getId()>
<android.os.VibrationEffect.Prebaked: void writeToParcel(android.os.Parcel,int)>
<android.os.VibrationEffect.Prebaked: boolean shouldFallback()>
<android.os.VibrationEffect.Prebaked: void <init>(int,boolean)>
<android.os.VibrationEffect.Prebaked: int getEffectStrength()>
<android.os.VibrationEffect.Prebaked: void validate()>
<android.graphics.BitmapFactory.Options: void <init>()>
<android.graphics.BitmapFactory.Options: void requestCancelDecode()>
<android.media.audiofx.Visualizer.OnDataCaptureListener: void onWaveFormDataCapture(android.media.audiofx.Visualizer,byte[],int)>
<android.media.audiofx.Visualizer.OnDataCaptureListener: void onFftDataCapture(android.media.audiofx.Visualizer,byte[],int)>
<android.transition.VisibilityPropagation: java.lang.String[] getPropagationProperties()>
<android.transition.VisibilityPropagation: int getViewVisibility(android.transition.TransitionValues)>
<android.transition.VisibilityPropagation: void <init>()>
<android.transition.VisibilityPropagation: int getViewY(android.transition.TransitionValues)>
<android.transition.VisibilityPropagation: int getViewX(android.transition.TransitionValues)>
<android.transition.VisibilityPropagation: void captureValues(android.transition.TransitionValues)>
<android.media.midi.MidiDevice: android.media.midi.MidiDevice.MidiConnection connectPorts(android.media.midi.MidiInputPort,int)>
<android.media.midi.MidiDevice: android.media.midi.MidiOutputPort openOutputPort(int)>
<android.media.midi.MidiDevice: void close()>
<android.media.midi.MidiDevice: android.media.midi.MidiInputPort openInputPort(int)>
<android.media.midi.MidiDevice: android.media.midi.MidiDeviceInfo getInfo()>
<android.service.autofill.augmented.AugmentedAutofillService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.service.autofill.augmented.AugmentedAutofillService: void onDisconnected()>
<android.service.autofill.augmented.AugmentedAutofillService: void onConnected()>
<android.service.autofill.augmented.AugmentedAutofillService: void dump(java.io.PrintWriter,java.lang.String[])>
<android.service.autofill.augmented.AugmentedAutofillService: void <init>()>
<android.service.autofill.augmented.AugmentedAutofillService: void onFillRequest(android.service.autofill.augmented.FillRequest,android.os.CancellationSignal,android.service.autofill.augmented.FillController,android.service.autofill.augmented.FillCallback)>
<android.view.ScaleGestureDetector.SimpleOnScaleGestureListener: void <init>()>
<android.view.ScaleGestureDetector.SimpleOnScaleGestureListener: boolean onScale(android.view.ScaleGestureDetector)>
<android.view.ScaleGestureDetector.SimpleOnScaleGestureListener: boolean onScaleBegin(android.view.ScaleGestureDetector)>
<android.view.ScaleGestureDetector.SimpleOnScaleGestureListener: void onScaleEnd(android.view.ScaleGestureDetector)>
<android.media.AsyncPlayer: void <init>(String)>
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)>
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,android.media.AudioAttributes)>
<android.media.AsyncPlayer: void stop()>
<java.util.function.LongBinaryOperator: long applyAsLong(long,long)>
<android.media.AudioTimestamp: void <init>()>
<android.preference.MultiSelectListPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.MultiSelectListPreference: void setEntryValues(@ArrayResint)>
<android.preference.MultiSelectListPreference: CharSequence[] getEntries()>
<android.preference.MultiSelectListPreference: void setEntryValues(CharSequence[])>
<android.preference.MultiSelectListPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.MultiSelectListPreference: int findIndexOfValue(java.lang.String)>
<android.preference.MultiSelectListPreference: CharSequence[] getEntryValues()>
<android.preference.MultiSelectListPreference: void setValues(java.util.Set)>
<android.preference.MultiSelectListPreference: java.util.Set getValues()>
<android.preference.MultiSelectListPreference: void setEntries(@ArrayResint)>
<android.preference.MultiSelectListPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.MultiSelectListPreference: void <init>(android.content.Context)>
<android.preference.MultiSelectListPreference: void setEntries(CharSequence[])>
<java.nio.ShortBuffer: java.nio.ShortBuffer put(short)>
<java.nio.ShortBuffer: java.nio.ShortBuffer compact()>
<java.nio.ShortBuffer: java.nio.ShortBuffer duplicate()>
<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[])>
<java.nio.ShortBuffer: boolean hasArray()>
<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[],int,int)>
<java.nio.ShortBuffer: java.nio.ShortBuffer allocate(int)>
<java.nio.ShortBuffer: java.nio.ShortBuffer asReadOnlyBuffer()>
<java.nio.ShortBuffer: int compareTo(java.nio.ShortBuffer)>
<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[],int,int)>
<java.nio.ShortBuffer: java.nio.ByteOrder order()>
<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[])>
<java.nio.ShortBuffer: java.nio.ShortBuffer slice()>
<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[])>
<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[],int,int)>
<java.nio.ShortBuffer: java.nio.ShortBuffer put(int,short)>
<java.nio.ShortBuffer: short[] array()>
<java.nio.ShortBuffer: short get(int)>
<java.nio.ShortBuffer: java.nio.ShortBuffer put(java.nio.ShortBuffer)>
<java.nio.ShortBuffer: short get()>
<java.nio.ShortBuffer: int arrayOffset()>
<android.app.role.RoleControllerService: boolean onGrantDefaultRoles()>
<android.app.role.RoleControllerService: boolean onRemoveRoleHolder(java.lang.String,java.lang.String,int)>
<android.app.role.RoleControllerService: android.os.IBinder onBind(android.content.Intent)>
<android.app.role.RoleControllerService: boolean onIsRoleVisible(java.lang.String)>
<android.app.role.RoleControllerService: boolean onAddRoleHolder(java.lang.String,java.lang.String,int)>
<android.app.role.RoleControllerService: void <init>()>
<android.app.role.RoleControllerService: boolean onIsApplicationQualifiedForRole(java.lang.String,java.lang.String)>
<android.app.role.RoleControllerService: boolean onClearRoleHolders(java.lang.String,int)>
<java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock: void unlock()>
<java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock: java.util.concurrent.locks.Condition newCondition()>
<java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock: boolean tryLock()>
<java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock: void <init>(java.util.concurrent.locks.ReentrantReadWriteLock)>
<java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock: void lock()>
<java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock: void lockInterruptibly()>
<android.hardware.location.ContextHubTransaction.Response: R getContents()>
<android.hardware.location.ContextHubTransaction.Response: int getResult()>
<java.security.cert.CertStoreParameters extends java.lang.Cloneable: java.lang.Object clone()>
<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.util.List)>
<java.security.cert.CertificateFactorySpi: java.security.cert.Certificate engineGenerateCertificate(java.io.InputStream)>
<java.security.cert.CertificateFactorySpi: java.util.Collection engineGenerateCRLs(java.io.InputStream)>
<java.security.cert.CertificateFactorySpi: java.util.Collection engineGenerateCertificates(java.io.InputStream)>
<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream)>
<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream,java.lang.String)>
<java.security.cert.CertificateFactorySpi: java.security.cert.CRL engineGenerateCRL(java.io.InputStream)>
<java.security.cert.CertificateFactorySpi: java.util.Iterator engineGetCertPathEncodings()>
<java.security.cert.CertificateFactorySpi: void <init>()>
<java.util.jar.JarInputStream: void <init>(java.io.InputStream,boolean)>
<java.util.jar.JarInputStream: java.util.jar.Manifest getManifest()>
<java.util.jar.JarInputStream: java.util.jar.JarEntry getNextJarEntry()>
<java.util.jar.JarInputStream: void <init>(java.io.InputStream)>
<android.net.wifi.p2p.WifiP2pManager.ChannelListener: void onChannelDisconnected()>
<java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy: void rejectedExecution(Runnable,java.util.concurrent.ThreadPoolExecutor)>
<java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy: void <init>()>
<android.os.IncidentManager.AuthListener: void onReportDenied()>
<android.os.IncidentManager.AuthListener: void <init>()>
<android.os.IncidentManager.AuthListener: void onReportApproved()>
<java.util.prefs.PreferenceChangeListener extends java.util.EventListener: void preferenceChange(java.util.prefs.PreferenceChangeEvent)>
<java.time.temporal.WeekFields: java.time.DayOfWeek getFirstDayOfWeek()>
<java.time.temporal.WeekFields: java.time.temporal.TemporalField weekOfYear()>
<java.time.temporal.WeekFields: java.time.temporal.WeekFields of(java.time.DayOfWeek,int)>
<java.time.temporal.WeekFields: java.time.temporal.TemporalField weekOfWeekBasedYear()>
<java.time.temporal.WeekFields: java.time.temporal.TemporalField dayOfWeek()>
<java.time.temporal.WeekFields: java.time.temporal.WeekFields of(java.util.Locale)>
<java.time.temporal.WeekFields: int getMinimalDaysInFirstWeek()>
<java.time.temporal.WeekFields: java.time.temporal.TemporalField weekOfMonth()>
<java.time.temporal.WeekFields: java.time.temporal.TemporalField weekBasedYear()>
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>
<java.lang.reflect.AccessibleObject: T getAnnotation(java.lang.Class)>
<java.lang.reflect.AccessibleObject: void <init>()>
<java.lang.reflect.AccessibleObject: boolean isAccessible()>
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getAnnotations()>
<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<org.w3c.dom.NameList: boolean containsNS(java.lang.String,java.lang.String)>
<org.w3c.dom.NameList: java.lang.String getNamespaceURI(int)>
<org.w3c.dom.NameList: java.lang.String getName(int)>
<org.w3c.dom.NameList: int getLength()>
<org.w3c.dom.NameList: boolean contains(java.lang.String)>
<android.widget.CompoundButton: void setButtonDrawable(@DrawableResint)>
<android.widget.CompoundButton: void setButtonDrawable(android.graphics.drawable.Drawable)>
<android.widget.CompoundButton: void setButtonTintBlendMode(android.graphics.BlendMode)>
<android.widget.CompoundButton: void <init>(android.content.Context)>
<android.widget.CompoundButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.CompoundButton: android.content.res.ColorStateList getButtonTintList()>
<android.widget.CompoundButton: boolean isChecked()>
<android.widget.CompoundButton: void toggle()>
<android.widget.CompoundButton: void setButtonTintList(android.content.res.ColorStateList)>
<android.widget.CompoundButton: android.graphics.BlendMode getButtonTintBlendMode()>
<android.widget.CompoundButton: android.graphics.PorterDuff.Mode getButtonTintMode()>
<android.widget.CompoundButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.CompoundButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.CompoundButton: void setChecked(boolean)>
<android.widget.CompoundButton: void setButtonTintMode(android.graphics.PorterDuff.Mode)>
<android.widget.CompoundButton: android.graphics.drawable.Drawable getButtonDrawable()>
<android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton.OnCheckedChangeListener)>
<android.os.IInterface: android.os.IBinder asBinder()>
<android.service.notification.NotificationListenerService: void onNotificationChannelGroupModified(java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup,int)>
<android.service.notification.NotificationListenerService: void onNotificationPosted(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap)>
<android.service.notification.NotificationListenerService: void onListenerHintsChanged(int)>
<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String[])>
<android.service.notification.NotificationListenerService: void onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap,int)>
<android.service.notification.NotificationListenerService: void requestRebind(android.content.ComponentName)>
<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] getSnoozedNotifications()>
<android.service.notification.NotificationListenerService: void onInterruptionFilterChanged(int)>
<android.service.notification.NotificationListenerService: void requestListenerHints(int)>
<android.service.notification.NotificationListenerService: void requestUnbind()>
<android.service.notification.NotificationListenerService: void setNotificationsShown(java.lang.String[])>
<android.service.notification.NotificationListenerService: void cancelNotifications(java.lang.String[])>
<android.service.notification.NotificationListenerService: void cancelAllNotifications()>
<android.service.notification.NotificationListenerService: void onNotificationPosted(android.service.notification.StatusBarNotification)>
<android.service.notification.NotificationListenerService: void onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap)>
<android.service.notification.NotificationListenerService: void onNotificationRemoved(android.service.notification.StatusBarNotification)>
<android.service.notification.NotificationListenerService: void onSilentStatusBarIconsVisibilityChanged(boolean)>
<android.service.notification.NotificationListenerService: void cancelNotification(java.lang.String)>
<android.service.notification.NotificationListenerService: void onNotificationRankingUpdate(android.service.notification.NotificationListenerService.RankingMap)>
<android.service.notification.NotificationListenerService: void <init>()>
<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService.RankingMap getCurrentRanking()>
<android.service.notification.NotificationListenerService: int getCurrentListenerHints()>
<android.service.notification.NotificationListenerService: void onNotificationChannelModified(java.lang.String,android.os.UserHandle,android.app.NotificationChannel,int)>
<android.service.notification.NotificationListenerService: void updateNotificationChannel(java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
<android.service.notification.NotificationListenerService: void clearRequestedListenerHints()>
<android.service.notification.NotificationListenerService: void requestInterruptionFilter(int)>
<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] getActiveNotifications()>
<android.service.notification.NotificationListenerService: void onListenerDisconnected()>
<android.service.notification.NotificationListenerService: java.util.List getNotificationChannels(java.lang.String,android.os.UserHandle)>
<android.service.notification.NotificationListenerService: android.os.IBinder onBind(android.content.Intent)>
<android.service.notification.NotificationListenerService: int getCurrentInterruptionFilter()>
<android.service.notification.NotificationListenerService: java.util.List getNotificationChannelGroups(java.lang.String,android.os.UserHandle)>
<android.service.notification.NotificationListenerService: void snoozeNotification(java.lang.String,long)>
<android.service.notification.NotificationListenerService: void onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap,android.service.notification.NotificationStats,int)>
<android.service.notification.NotificationListenerService: void onListenerConnected()>
<android.service.notification.NotificationListenerService: void cancelNotification(java.lang.String,java.lang.String,int)>
<android.telephony.TelephonyManager.UssdResponseCallback: void onReceiveUssdResponse(android.telephony.TelephonyManager,java.lang.String,CharSequence)>
<android.telephony.TelephonyManager.UssdResponseCallback: void <init>()>
<android.telephony.TelephonyManager.UssdResponseCallback: void onReceiveUssdResponseFailed(android.telephony.TelephonyManager,java.lang.String,int)>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getPlmn()>
<android.net.wifi.WifiEnterpriseConfig: void setEapMethod(int)>
<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate getCaCertificate()>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getSubjectMatch()>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getRealm()>
<android.net.wifi.WifiEnterpriseConfig: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiEnterpriseConfig: void setCaCertificate(java.security.cert.X509Certificate)>
<android.net.wifi.WifiEnterpriseConfig: void setRealm(java.lang.String)>
<android.net.wifi.WifiEnterpriseConfig: void setPassword(java.lang.String)>
<android.net.wifi.WifiEnterpriseConfig: void <init>(android.net.wifi.WifiEnterpriseConfig)>
<android.net.wifi.WifiEnterpriseConfig: void setDomainSuffixMatch(java.lang.String)>
<android.net.wifi.WifiEnterpriseConfig: void setSubjectMatch(java.lang.String)>
<android.net.wifi.WifiEnterpriseConfig: int getEapMethod()>
<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate getClientCertificate()>
<android.net.wifi.WifiEnterpriseConfig: void setClientKeyEntry(java.security.PrivateKey,java.security.cert.X509Certificate)>
<android.net.wifi.WifiEnterpriseConfig: int describeContents()>
<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate[] getClientCertificateChain()>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getPassword()>
<android.net.wifi.WifiEnterpriseConfig: void setCaCertificates(java.security.cert.X509Certificate[])>
<android.net.wifi.WifiEnterpriseConfig: void setPhase2Method(int)>
<android.net.wifi.WifiEnterpriseConfig: void setAltSubjectMatch(java.lang.String)>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getAltSubjectMatch()>
<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate[] getCaCertificates()>
<android.net.wifi.WifiEnterpriseConfig: void setClientKeyEntryWithCertificateChain(java.security.PrivateKey,java.security.cert.X509Certificate[])>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getIdentity()>
<android.net.wifi.WifiEnterpriseConfig: int getPhase2Method()>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getAnonymousIdentity()>
<android.net.wifi.WifiEnterpriseConfig: void setIdentity(java.lang.String)>
<android.net.wifi.WifiEnterpriseConfig: void <init>()>
<android.net.wifi.WifiEnterpriseConfig: void setPlmn(java.lang.String)>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getDomainSuffixMatch()>
<android.net.wifi.WifiEnterpriseConfig: void setAnonymousIdentity(java.lang.String)>
<android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setLanguageTag(java.lang.String)>
<android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder: void <init>()>
<android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeExtraValue(java.lang.String)>
<android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype build()>
<android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeNameResId(int)>
<android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setIsAsciiCapable(boolean)>
<android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeLocale(java.lang.String)>
<android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setIsAuxiliary(boolean)>
<android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setOverridesImplicitlyEnabledSubtype(boolean)>
<android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeIconResId(int)>
<android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeId(int)>
<android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeMode(java.lang.String)>
<java.nio.BufferUnderflowException: void <init>()>
<android.opengl.Visibility: int visibilityTest(float[],int,float[],int,char[],int,int)>
<android.opengl.Visibility: void computeBoundingSphere(float[],int,int,float[],int)>
<android.opengl.Visibility: int frustumCullSpheres(float[],int,float[],int,int,int[],int,int)>
<android.opengl.Visibility: void <init>()>
<java.security.cert.CertStore: void <init>(java.security.cert.CertStoreSpi,java.security.Provider,String,java.security.cert.CertStoreParameters)>
<java.security.cert.CertStore: java.lang.String getType()>
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.security.Provider)>
<java.security.cert.CertStore: java.util.Collection getCertificates(java.security.cert.CertSelector)>
<java.security.cert.CertStore: java.lang.String getDefaultType()>
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters)>
<java.security.cert.CertStore: java.security.Provider getProvider()>
<java.security.cert.CertStore: java.util.Collection getCRLs(java.security.cert.CRLSelector)>
<java.security.cert.CertStore: java.security.cert.CertStoreParameters getCertStoreParameters()>
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.lang.String)>
<java.text.BreakIterator: java.text.BreakIterator getCharacterInstance()>
<java.text.BreakIterator: int last()>
<java.text.BreakIterator: java.text.BreakIterator getLineInstance(java.util.Locale)>
<java.text.BreakIterator: int preceding(int)>
<java.text.BreakIterator: int next(int)>
<java.text.BreakIterator: int current()>
<java.text.BreakIterator: int first()>
<java.text.BreakIterator: java.text.CharacterIterator getText()>
<java.text.BreakIterator: java.text.BreakIterator getWordInstance()>
<java.text.BreakIterator: int following(int)>
<java.text.BreakIterator: void <init>()>
<java.text.BreakIterator: int next()>
<java.text.BreakIterator: void setText(java.text.CharacterIterator)>
<java.text.BreakIterator: int previous()>
<java.text.BreakIterator: boolean isBoundary(int)>
<java.text.BreakIterator: java.lang.Object clone()>
<java.text.BreakIterator: java.text.BreakIterator getWordInstance(java.util.Locale)>
<java.text.BreakIterator: java.text.BreakIterator getCharacterInstance(java.util.Locale)>
<java.text.BreakIterator: java.text.BreakIterator getLineInstance()>
<java.text.BreakIterator: java.text.BreakIterator getSentenceInstance(java.util.Locale)>
<java.text.BreakIterator: java.text.BreakIterator getSentenceInstance()>
<java.text.BreakIterator: java.util.Locale[] getAvailableLocales()>
<java.text.BreakIterator: void setText(java.lang.String)>
<android.app.contentsuggestions.ContentSelection: void writeToParcel(android.os.Parcel,int)>
<android.app.contentsuggestions.ContentSelection: java.lang.String getId()>
<android.app.contentsuggestions.ContentSelection: android.os.Bundle getExtras()>
<android.app.contentsuggestions.ContentSelection: int describeContents()>
<android.app.contentsuggestions.ContentSelection: void <init>(String,android.os.Bundle)>
<java.util.Observable: int countObservers()>
<java.util.Observable: void clearChanged()>
<java.util.Observable: boolean hasChanged()>
<java.util.Observable: void deleteObservers()>
<java.util.Observable: void notifyObservers()>
<java.util.Observable: void notifyObservers(java.lang.Object)>
<java.util.Observable: void addObserver(java.util.Observer)>
<java.util.Observable: void setChanged()>
<java.util.Observable: void <init>()>
<java.util.Observable: void deleteObserver(java.util.Observer)>
<android.opengl.GLSurfaceView.EGLWindowSurfaceFactory: javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object)>
<android.opengl.GLSurfaceView.EGLWindowSurfaceFactory: void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>
<javax.net.ssl.SSLPeerUnverifiedException: void <init>(String)>
<android.nfc.tech.TagTechnology extends java.io.Closeable: void connect()>
<android.nfc.tech.TagTechnology extends java.io.Closeable: boolean isConnected()>
<android.nfc.tech.TagTechnology extends java.io.Closeable: android.nfc.Tag getTag()>
<android.location.GnssSingleSatCorrection.Builder: android.location.GnssSingleSatCorrection.Builder setExcessPathLengthUncertaintyMeters(float)>
<android.location.GnssSingleSatCorrection.Builder: android.location.GnssSingleSatCorrection build()>
<android.location.GnssSingleSatCorrection.Builder: android.location.GnssSingleSatCorrection.Builder setProbabilityLineOfSight(float)>
<android.location.GnssSingleSatCorrection.Builder: void <init>()>
<android.location.GnssSingleSatCorrection.Builder: android.location.GnssSingleSatCorrection.Builder setExcessPathLengthMeters(float)>
<android.location.GnssSingleSatCorrection.Builder: android.location.GnssSingleSatCorrection.Builder setReflectingPlane(android.location.GnssReflectingPlane)>
<android.location.GnssSingleSatCorrection.Builder: android.location.GnssSingleSatCorrection.Builder setSatelliteId(int)>
<android.location.GnssSingleSatCorrection.Builder: android.location.GnssSingleSatCorrection.Builder setConstellationType(int)>
<android.location.GnssSingleSatCorrection.Builder: android.location.GnssSingleSatCorrection.Builder setCarrierFrequencyHz(float)>
<android.speech.tts.TextToSpeechService: void onStop()>
<android.speech.tts.TextToSpeechService: int onIsLanguageAvailable(java.lang.String,java.lang.String,java.lang.String)>
<android.speech.tts.TextToSpeechService: java.lang.String onGetDefaultVoiceNameFor(java.lang.String,java.lang.String,java.lang.String)>
<android.speech.tts.TextToSpeechService: void <init>()>
<android.speech.tts.TextToSpeechService: android.os.IBinder onBind(android.content.Intent)>
<android.speech.tts.TextToSpeechService: java.lang.String[] onGetLanguage()>
<android.speech.tts.TextToSpeechService: java.util.List onGetVoices()>
<android.speech.tts.TextToSpeechService: int onLoadVoice(java.lang.String)>
<android.speech.tts.TextToSpeechService: int onLoadLanguage(java.lang.String,java.lang.String,java.lang.String)>
<android.speech.tts.TextToSpeechService: java.util.Set onGetFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)>
<android.speech.tts.TextToSpeechService: void onSynthesizeText(android.speech.tts.SynthesisRequest,android.speech.tts.SynthesisCallback)>
<android.speech.tts.TextToSpeechService: int onIsValidVoiceName(java.lang.String)>
<java.security.KeyStore.SecretKeyEntry: javax.crypto.SecretKey getSecretKey()>
<java.security.KeyStore.SecretKeyEntry: void <init>(javax.crypto.SecretKey)>
<java.security.KeyStore.SecretKeyEntry: void <init>(javax.crypto.SecretKey,java.util.Set)>
<android.hardware.camera2.params.MeteringRectangle: void <init>(android.graphics.Point,android.util.Size,int)>
<android.hardware.camera2.params.MeteringRectangle: boolean equals(android.hardware.camera2.params.MeteringRectangle)>
<android.hardware.camera2.params.MeteringRectangle: android.util.Size getSize()>
<android.hardware.camera2.params.MeteringRectangle: int getMeteringWeight()>
<android.hardware.camera2.params.MeteringRectangle: int getY()>
<android.hardware.camera2.params.MeteringRectangle: int getX()>
<android.hardware.camera2.params.MeteringRectangle: android.graphics.Rect getRect()>
<android.hardware.camera2.params.MeteringRectangle: android.graphics.Point getUpperLeftPoint()>
<android.hardware.camera2.params.MeteringRectangle: int getWidth()>
<android.hardware.camera2.params.MeteringRectangle: void <init>(int,int,int,int,int)>
<android.hardware.camera2.params.MeteringRectangle: int getHeight()>
<android.hardware.camera2.params.MeteringRectangle: void <init>(android.graphics.Rect,int)>
<android.bluetooth.BluetoothAdapter.LeScanCallback: void onLeScan(android.bluetooth.BluetoothDevice,int,byte[])>
<java.nio.channels.GatheringByteChannel extends java.nio.channels.WritableByteChannel: long write(java.nio.ByteBuffer[])>
<java.nio.channels.GatheringByteChannel extends java.nio.channels.WritableByteChannel: long write(java.nio.ByteBuffer[],int,int)>
<android.app.ActionBar.OnMenuVisibilityListener: void onMenuVisibilityChanged(boolean)>
<java.nio.channels.MembershipKey: java.nio.channels.MembershipKey block(java.net.InetAddress)>
<java.nio.channels.MembershipKey: java.net.InetAddress group()>
<java.nio.channels.MembershipKey: boolean isValid()>
<java.nio.channels.MembershipKey: java.net.InetAddress sourceAddress()>
<java.nio.channels.MembershipKey: java.nio.channels.MulticastChannel channel()>
<java.nio.channels.MembershipKey: java.nio.channels.MembershipKey unblock(java.net.InetAddress)>
<java.nio.channels.MembershipKey: void drop()>
<java.nio.channels.MembershipKey: java.net.NetworkInterface networkInterface()>
<java.nio.channels.MembershipKey: void <init>()>
<android.widget.HeaderViewListAdapter: boolean isEnabled(int)>
<android.widget.HeaderViewListAdapter: int getCount()>
<android.widget.HeaderViewListAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.widget.HeaderViewListAdapter: long getItemId(int)>
<android.widget.HeaderViewListAdapter: int getItemViewType(int)>
<android.widget.HeaderViewListAdapter: boolean isEmpty()>
<android.widget.HeaderViewListAdapter: boolean removeFooter(android.view.View)>
<android.widget.HeaderViewListAdapter: int getViewTypeCount()>
<android.widget.HeaderViewListAdapter: int getHeadersCount()>
<android.widget.HeaderViewListAdapter: boolean areAllItemsEnabled()>
<android.widget.HeaderViewListAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.HeaderViewListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.HeaderViewListAdapter: boolean hasStableIds()>
<android.widget.HeaderViewListAdapter: int getFootersCount()>
<android.widget.HeaderViewListAdapter: boolean removeHeader(android.view.View)>
<android.widget.HeaderViewListAdapter: void <init>(java.util.ArrayList,java.util.ArrayList,android.widget.ListAdapter)>
<android.widget.HeaderViewListAdapter: android.widget.Filter getFilter()>
<android.widget.HeaderViewListAdapter: java.lang.Object getItem(int)>
<android.widget.HeaderViewListAdapter: android.widget.ListAdapter getWrappedAdapter()>
<android.hardware.fingerprint.FingerprintManager.CryptoObject: javax.crypto.Cipher getCipher()>
<android.hardware.fingerprint.FingerprintManager.CryptoObject: void <init>(javax.crypto.Cipher)>
<android.hardware.fingerprint.FingerprintManager.CryptoObject: java.security.Signature getSignature()>
<android.hardware.fingerprint.FingerprintManager.CryptoObject: void <init>(java.security.Signature)>
<android.hardware.fingerprint.FingerprintManager.CryptoObject: javax.crypto.Mac getMac()>
<android.hardware.fingerprint.FingerprintManager.CryptoObject: void <init>(javax.crypto.Mac)>
<android.hardware.camera2.CaptureFailure: boolean wasImageCaptured()>
<android.hardware.camera2.CaptureFailure: long getFrameNumber()>
<android.hardware.camera2.CaptureFailure: int getReason()>
<android.hardware.camera2.CaptureFailure: int getSequenceId()>
<android.hardware.camera2.CaptureFailure: java.lang.String getPhysicalCameraId()>
<android.hardware.camera2.CaptureFailure: android.hardware.camera2.CaptureRequest getRequest()>
<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>
<java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>
<java.nio.channels.spi.AbstractInterruptibleChannel: boolean isOpen()>
<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>
<java.nio.channels.spi.AbstractInterruptibleChannel: void <init>()>
<java.nio.channels.spi.AbstractInterruptibleChannel: void implCloseChannel()>
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int wtf(java.lang.String,java.lang.String)>
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int println(int,java.lang.String,java.lang.String)>
<android.util.Log: int v(java.lang.String,java.lang.String)>
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int w(java.lang.String,java.lang.String)>
<android.util.Log: int d(java.lang.String,java.lang.String)>
<android.util.Log: int i(java.lang.String,java.lang.String)>
<android.util.Log: boolean isLoggable(java.lang.String,int)>
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>
<android.util.Log: int w(java.lang.String,java.lang.Throwable)>
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int e(java.lang.String,java.lang.String)>
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>
<android.hardware.radio.RadioManager.AmBandConfig: boolean getStereo()>
<java.util.prefs.NodeChangeListener extends java.util.EventListener: void childRemoved(java.util.prefs.NodeChangeEvent)>
<java.util.prefs.NodeChangeListener extends java.util.EventListener: void childAdded(java.util.prefs.NodeChangeEvent)>
<android.media.soundtrigger.SoundTriggerDetector.Callback: void <init>()>
<android.media.soundtrigger.SoundTriggerDetector.Callback: void onRecognitionResumed()>
<android.media.soundtrigger.SoundTriggerDetector.Callback: void onRecognitionPaused()>
<android.media.soundtrigger.SoundTriggerDetector.Callback: void onAvailabilityChanged(int)>
<android.media.soundtrigger.SoundTriggerDetector.Callback: void onDetected(android.media.soundtrigger.SoundTriggerDetector.EventPayload)>
<android.media.soundtrigger.SoundTriggerDetector.Callback: void onError()>
<android.gesture.GestureLibraries: android.gesture.GestureLibrary fromPrivateFile(android.content.Context,java.lang.String)>
<android.gesture.GestureLibraries: android.gesture.GestureLibrary fromFile(java.lang.String)>
<android.gesture.GestureLibraries: android.gesture.GestureLibrary fromFile(java.io.File)>
<android.gesture.GestureLibraries: android.gesture.GestureLibrary fromRawResource(android.content.Context,@RawResint)>
<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Member: java.lang.String getName()>
<java.lang.reflect.Member: int getModifiers()>
<java.lang.reflect.Member: boolean isSynthetic()>
<android.content.IntentFilter: int countActions()>
<android.content.IntentFilter: int getPriority()>
<android.content.IntentFilter: android.content.IntentFilter create(java.lang.String,java.lang.String)>
<android.content.IntentFilter: int describeContents()>
<android.content.IntentFilter: java.lang.String matchCategories(java.util.Set)>
<android.content.IntentFilter: void addDataPath(java.lang.String,int)>
<android.content.IntentFilter: boolean hasDataPath(java.lang.String)>
<android.content.IntentFilter: void writeToXml(org.xmlpull.v1.XmlSerializer)>
<android.content.IntentFilter: java.util.Iterator authoritiesIterator()>
<android.content.IntentFilter: java.lang.String getDataType(int)>
<android.content.IntentFilter: java.util.Iterator actionsIterator()>
<android.content.IntentFilter: android.os.PatternMatcher getDataPath(int)>
<android.content.IntentFilter: void setOrder(int)>
<android.content.IntentFilter: void addAction(java.lang.String)>
<android.content.IntentFilter: java.util.Iterator categoriesIterator()>
<android.content.IntentFilter: void <init>(String,String)>
<android.content.IntentFilter: int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)>
<android.content.IntentFilter: java.util.Iterator schemeSpecificPartsIterator()>
<android.content.IntentFilter: int matchDataAuthority(android.net.Uri)>
<android.content.IntentFilter: boolean hasDataAuthority(android.net.Uri)>
<android.content.IntentFilter: void addDataSchemeSpecificPart(java.lang.String,int)>
<android.content.IntentFilter: void readFromXml(org.xmlpull.v1.XmlPullParser)>
<android.content.IntentFilter: java.lang.String getDataScheme(int)>
<android.content.IntentFilter: boolean hasCategory(java.lang.String)>
<android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)>
<android.content.IntentFilter: int countDataSchemeSpecificParts()>
<android.content.IntentFilter: android.content.IntentFilter.AuthorityEntry getDataAuthority(int)>
<android.content.IntentFilter: void <init>(String)>
<android.content.IntentFilter: void addDataType(java.lang.String)>
<android.content.IntentFilter: void <init>()>
<android.content.IntentFilter: void dump(android.util.Printer,java.lang.String)>
<android.content.IntentFilter: boolean matchAction(java.lang.String)>
<android.content.IntentFilter: int match(android.content.ContentResolver,android.content.Intent,boolean,java.lang.String)>
<android.content.IntentFilter: int countDataSchemes()>
<android.content.IntentFilter: void addDataScheme(java.lang.String)>
<android.content.IntentFilter: int countDataTypes()>
<android.content.IntentFilter: android.os.PatternMatcher getDataSchemeSpecificPart(int)>
<android.content.IntentFilter: int countDataPaths()>
<android.content.IntentFilter: java.util.Iterator pathsIterator()>
<android.content.IntentFilter: int getOrder()>
<android.content.IntentFilter: void addDataAuthority(java.lang.String,java.lang.String)>
<android.content.IntentFilter: boolean hasDataSchemeSpecificPart(java.lang.String)>
<android.content.IntentFilter: boolean hasAction(java.lang.String)>
<android.content.IntentFilter: int countCategories()>
<android.content.IntentFilter: boolean hasDataScheme(java.lang.String)>
<android.content.IntentFilter: void setPriority(int)>
<android.content.IntentFilter: java.lang.String getCategory(int)>
<android.content.IntentFilter: java.util.Iterator typesIterator()>
<android.content.IntentFilter: java.lang.String getAction(int)>
<android.content.IntentFilter: int matchData(java.lang.String,java.lang.String,android.net.Uri)>
<android.content.IntentFilter: void addCategory(java.lang.String)>
<android.content.IntentFilter: java.util.Iterator schemesIterator()>
<android.content.IntentFilter: int countDataAuthorities()>
<android.content.IntentFilter: boolean hasDataType(java.lang.String)>
<android.content.IntentFilter: void <init>(android.content.IntentFilter)>
<java.net.NetworkInterface: java.lang.String getDisplayName()>
<java.net.NetworkInterface: java.net.NetworkInterface getByIndex(int)>
<java.net.NetworkInterface: java.lang.String getName()>
<java.net.NetworkInterface: boolean isPointToPoint()>
<java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)>
<java.net.NetworkInterface: byte[] getHardwareAddress()>
<java.net.NetworkInterface: int getMTU()>
<java.net.NetworkInterface: int getIndex()>
<java.net.NetworkInterface: boolean supportsMulticast()>
<java.net.NetworkInterface: boolean isVirtual()>
<java.net.NetworkInterface: java.util.List getInterfaceAddresses()>
<java.net.NetworkInterface: java.net.NetworkInterface getParent()>
<java.net.NetworkInterface: boolean isLoopback()>
<java.net.NetworkInterface: boolean isUp()>
<java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)>
<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>
<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>
<java.net.NetworkInterface: java.util.Enumeration getSubInterfaces()>
<android.view.accessibility.CaptioningManager.CaptioningChangeListener: void onUserStyleChanged(android.view.accessibility.CaptioningManager.CaptionStyle)>
<android.view.accessibility.CaptioningManager.CaptioningChangeListener: void onFontScaleChanged(float)>
<android.view.accessibility.CaptioningManager.CaptioningChangeListener: void onLocaleChanged(java.util.Locale)>
<android.view.accessibility.CaptioningManager.CaptioningChangeListener: void onEnabledChanged(boolean)>
<android.view.accessibility.CaptioningManager.CaptioningChangeListener: void <init>()>
<java.sql.SQLTransientException: void <init>(String,String,int,Throwable)>
<java.sql.SQLTransientException: void <init>()>
<java.sql.SQLTransientException: void <init>(String)>
<java.sql.SQLTransientException: void <init>(String,String,int)>
<java.sql.SQLTransientException: void <init>(Throwable)>
<java.sql.SQLTransientException: void <init>(String,String)>
<java.sql.SQLTransientException: void <init>(String,Throwable)>
<java.sql.SQLTransientException: void <init>(String,String,Throwable)>
<android.net.NetworkScoreManager: boolean setActiveScorer(java.lang.String)>
<android.net.NetworkScoreManager: java.lang.String getActiveScorerPackage()>
<android.net.NetworkScoreManager: boolean updateScores(android.net.ScoredNetwork[])>
<android.net.NetworkScoreManager: boolean clearScores()>
<android.net.NetworkScoreManager: void disableScoring()>
<android.print.PageRange: void writeToParcel(android.os.Parcel,int)>
<android.print.PageRange: void <init>(from=0) int)>
<android.print.PageRange: int getEnd()>
<android.print.PageRange: int describeContents()>
<android.print.PageRange: int getStart()>
<android.content.MutableContextWrapper: void setBaseContext(android.content.Context)>
<android.content.MutableContextWrapper: void <init>(android.content.Context)>
<android.graphics.RenderNode: boolean setClipToBounds(boolean)>
<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording(int,int)>
<android.graphics.RenderNode: boolean setSpotShadowColor(@ColorIntint)>
<android.graphics.RenderNode: boolean setCameraDistance(float)>
<android.graphics.RenderNode: boolean setForceDarkAllowed(boolean)>
<android.graphics.RenderNode: boolean setAmbientShadowColor(@ColorIntint)>
<android.graphics.RenderNode: boolean setRotationX(float)>
<android.graphics.RenderNode: void <init>(String)>
<android.graphics.RenderNode: void getMatrix(android.graphics.Matrix)>
<android.graphics.RenderNode: float getRotationY()>
<android.graphics.RenderNode: int getBottom()>
<android.graphics.RenderNode: float getAlpha()>
<android.graphics.RenderNode: int getAmbientShadowColor()>
<android.graphics.RenderNode: boolean setPivotY(float)>
<android.graphics.RenderNode: boolean isForceDarkAllowed()>
<android.graphics.RenderNode: float getTranslationZ()>
<android.graphics.RenderNode: void endRecording()>
<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording()>
<android.graphics.RenderNode: boolean hasShadow()>
<android.graphics.RenderNode: boolean isPivotExplicitlySet()>
<android.graphics.RenderNode: boolean setScaleX(float)>
<android.graphics.RenderNode: boolean setClipRect(android.graphics.Rect)>
<android.graphics.RenderNode: int getHeight()>
<android.graphics.RenderNode: float getElevation()>
<android.graphics.RenderNode: float getPivotX()>
<android.graphics.RenderNode: boolean hasDisplayList()>
<android.graphics.RenderNode: float getRotationX()>
<android.graphics.RenderNode: boolean setRotationY(float)>
<android.graphics.RenderNode: boolean hasOverlappingRendering()>
<android.graphics.RenderNode: boolean setTranslationY(float)>
<android.graphics.RenderNode: float getTranslationY()>
<android.graphics.RenderNode: boolean setAlpha(float)>
<android.graphics.RenderNode: boolean setPosition(int,int,int,int)>
<android.graphics.RenderNode: boolean getClipToBounds()>
<android.graphics.RenderNode: float getScaleX()>
<android.graphics.RenderNode: int getTop()>
<android.graphics.RenderNode: float getCameraDistance()>
<android.graphics.RenderNode: float getPivotY()>
<android.graphics.RenderNode: boolean setPivotX(float)>
<android.graphics.RenderNode: boolean setPosition(android.graphics.Rect)>
<android.graphics.RenderNode: int getWidth()>
<android.graphics.RenderNode: float getTranslationX()>
<android.graphics.RenderNode: boolean resetPivot()>
<android.graphics.RenderNode: long computeApproximateMemoryUsage()>
<android.graphics.RenderNode: int getRight()>
<android.graphics.RenderNode: float getScaleY()>
<android.graphics.RenderNode: boolean setTranslationZ(float)>
<android.graphics.RenderNode: int getSpotShadowColor()>
<android.graphics.RenderNode: boolean setElevation(float)>
<android.graphics.RenderNode: boolean hasIdentityMatrix()>
<android.graphics.RenderNode: boolean setScaleY(float)>
<android.graphics.RenderNode: boolean getClipToOutline()>
<android.graphics.RenderNode: void getInverseMatrix(android.graphics.Matrix)>
<android.graphics.RenderNode: boolean setOutline(android.graphics.Outline)>
<android.graphics.RenderNode: boolean setProjectionReceiver(boolean)>
<android.graphics.RenderNode: long getUniqueId()>
<android.graphics.RenderNode: int getLeft()>
<android.graphics.RenderNode: boolean setProjectBackwards(boolean)>
<android.graphics.RenderNode: boolean offsetLeftAndRight(int)>
<android.graphics.RenderNode: float getRotationZ()>
<android.graphics.RenderNode: boolean setHasOverlappingRendering(boolean)>
<android.graphics.RenderNode: boolean setUseCompositingLayer(boolean,android.graphics.Paint)>
<android.graphics.RenderNode: boolean getUseCompositingLayer()>
<android.graphics.RenderNode: boolean setRotationZ(float)>
<android.graphics.RenderNode: void discardDisplayList()>
<android.graphics.RenderNode: boolean setTranslationX(float)>
<android.graphics.RenderNode: boolean offsetTopAndBottom(int)>
<android.graphics.RenderNode: boolean setClipToOutline(boolean)>
<android.content.pm.FeatureInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.FeatureInfo: int describeContents()>
<android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()>
<android.content.pm.FeatureInfo: void <init>()>
<android.content.pm.FeatureInfo: void <init>(android.content.pm.FeatureInfo)>
<android.content.pm.CrossProfileApps: android.graphics.drawable.Drawable getProfileSwitchingIconDrawable(android.os.UserHandle)>
<android.content.pm.CrossProfileApps: CharSequence getProfileSwitchingLabel(android.os.UserHandle)>
<android.content.pm.CrossProfileApps: void startActivity(android.content.ComponentName,android.os.UserHandle)>
<android.content.pm.CrossProfileApps: java.util.List getTargetUserProfiles()>
<android.content.pm.CrossProfileApps: void startMainActivity(android.content.ComponentName,android.os.UserHandle)>
<android.icu.lang.UCharacterCategory: java.lang.String toString(int)>
<android.service.notification.NotificationStats: boolean hasInteracted()>
<android.service.notification.NotificationStats: boolean hasSnoozed()>
<android.service.notification.NotificationStats: void <init>(android.os.Parcel)>
<android.service.notification.NotificationStats: void setViewedSettings()>
<android.service.notification.NotificationStats: boolean hasSeen()>
<android.service.notification.NotificationStats: void setDismissalSurface(int)>
<android.service.notification.NotificationStats: boolean hasDirectReplied()>
<android.service.notification.NotificationStats: void writeToParcel(android.os.Parcel,int)>
<android.service.notification.NotificationStats: void setDirectReplied()>
<android.service.notification.NotificationStats: boolean hasExpanded()>
<android.service.notification.NotificationStats: int getDismissalSurface()>
<android.service.notification.NotificationStats: boolean hasViewedSettings()>
<android.service.notification.NotificationStats: void setSnoozed()>
<android.service.notification.NotificationStats: int getDismissalSentiment()>
<android.service.notification.NotificationStats: void setSeen()>
<android.service.notification.NotificationStats: void <init>()>
<android.service.notification.NotificationStats: void setExpanded()>
<android.service.notification.NotificationStats: int describeContents()>
<android.service.notification.NotificationStats: void setDismissalSentiment(int)>
<android.app.ActivityManager.RunningAppProcessInfo: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager.RunningAppProcessInfo: int describeContents()>
<android.app.ActivityManager.RunningAppProcessInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ActivityManager.RunningAppProcessInfo: void <init>()>
<android.app.ActivityManager.RunningAppProcessInfo: void <init>(String,int,String[])>
<android.telephony.CallAttributes: int describeContents()>
<android.telephony.CallAttributes: android.telephony.PreciseCallState getPreciseCallState()>
<android.telephony.CallAttributes: void <init>(android.telephony.PreciseCallState,int,android.telephony.CallQuality)>
<android.telephony.CallAttributes: android.telephony.CallQuality getCallQuality()>
<android.telephony.CallAttributes: int getNetworkType()>
<android.telephony.CallAttributes: void writeToParcel(android.os.Parcel,int)>
<android.telecom.RemoteConnection: android.os.Bundle getExtras()>
<android.telecom.RemoteConnection: void postDialContinue(boolean)>
<android.telecom.RemoteConnection: int getConnectionProperties()>
<android.telecom.RemoteConnection: void stopDtmfTone()>
<android.telecom.RemoteConnection: java.util.List getConferenceableConnections()>
<android.telecom.RemoteConnection: android.telecom.StatusHints getStatusHints()>
<android.telecom.RemoteConnection: boolean isVoipAudioMode()>
<android.telecom.RemoteConnection: int getConnectionCapabilities()>
<android.telecom.RemoteConnection: void unhold()>
<android.telecom.RemoteConnection: void hold()>
<android.telecom.RemoteConnection: android.telecom.RemoteConnection.VideoProvider getVideoProvider()>
<android.telecom.RemoteConnection: android.net.Uri getAddress()>
<android.telecom.RemoteConnection: void setAudioState(android.telecom.AudioState)>
<android.telecom.RemoteConnection: int getCallerDisplayNamePresentation()>
<android.telecom.RemoteConnection: void registerCallback(android.telecom.RemoteConnection.Callback,android.os.Handler)>
<android.telecom.RemoteConnection: CharSequence getCallerDisplayName()>
<android.telecom.RemoteConnection: int getVideoState()>
<android.telecom.RemoteConnection: void registerCallback(android.telecom.RemoteConnection.Callback)>
<android.telecom.RemoteConnection: void disconnect()>
<android.telecom.RemoteConnection: void setCallAudioState(android.telecom.CallAudioState)>
<android.telecom.RemoteConnection: int getState()>
<android.telecom.RemoteConnection: void playDtmfTone(char)>
<android.telecom.RemoteConnection: int getAddressPresentation()>
<android.telecom.RemoteConnection: void unregisterCallback(android.telecom.RemoteConnection.Callback)>
<android.telecom.RemoteConnection: android.telecom.RemoteConference getConference()>
<android.telecom.RemoteConnection: boolean isRingbackRequested()>
<android.telecom.RemoteConnection: void answer()>
<android.telecom.RemoteConnection: android.telecom.DisconnectCause getDisconnectCause()>
<android.telecom.RemoteConnection: void abort()>
<android.telecom.RemoteConnection: void pullExternalCall()>
<android.telecom.RemoteConnection: void reject()>
<java.util.concurrent.CopyOnWriteArrayList: java.util.List subList(int,int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean add(E)>
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray()>
<java.util.concurrent.CopyOnWriteArrayList: E remove(int)>
<java.util.concurrent.CopyOnWriteArrayList: void <init>()>
<java.util.concurrent.CopyOnWriteArrayList: boolean retainAll(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: void add(int,E)>
<java.util.concurrent.CopyOnWriteArrayList: java.util.ListIterator listIterator(int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: int size()>
<java.util.concurrent.CopyOnWriteArrayList: void clear()>
<java.util.concurrent.CopyOnWriteArrayList: boolean addIfAbsent(E)>
<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(E,int)>
<java.util.concurrent.CopyOnWriteArrayList: int lastIndexOf(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: E get(int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
<java.util.concurrent.CopyOnWriteArrayList: int lastIndexOf(E,int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(int,java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: boolean removeAll(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>
<java.util.concurrent.CopyOnWriteArrayList: java.util.ListIterator listIterator()>
<java.util.concurrent.CopyOnWriteArrayList: E set(int,E)>
<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: void forEach(java.util.function.Consumer)>
<java.util.concurrent.CopyOnWriteArrayList: void <init>(E[])>
<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
<java.util.concurrent.CopyOnWriteArrayList: T[] toArray(T[])>
<android.media.AudioRecordingConfiguration: java.util.List getEffects()>
<android.media.AudioRecordingConfiguration: void <init>(int,int,int,android.media.AudioFormat,android.media.AudioFormat,int,String,int,boolean,int,android.media.audiofx.AudioEffect.Descriptor[],android.media.audiofx.AudioEffect.Descriptor[])>
<android.media.AudioRecordingConfiguration: boolean isClientSilenced()>
<android.media.AudioRecordingConfiguration: java.util.List getClientEffects()>
<android.media.AudioRecordingConfiguration: android.media.AudioFormat getFormat()>
<android.media.AudioRecordingConfiguration: void <init>(int,int,int,android.media.AudioFormat,android.media.AudioFormat,int,String)>
<android.media.AudioRecordingConfiguration: android.media.AudioFormat getClientFormat()>
<android.media.AudioRecordingConfiguration: int describeContents()>
<android.media.AudioRecordingConfiguration: void writeToParcel(android.os.Parcel,int)>
<android.media.AudioRecordingConfiguration: android.media.AudioDeviceInfo getAudioDevice()>
<android.media.AudioRecordingConfiguration: int getClientAudioSessionId()>
<android.media.AudioRecordingConfiguration: int getClientAudioSource()>
<android.media.AudioRecordingConfiguration: int getAudioSource()>
<android.view.accessibility.CaptioningManager: boolean isEnabled()>
<android.view.accessibility.CaptioningManager: java.util.Locale getLocale()>
<android.view.accessibility.CaptioningManager: android.view.accessibility.CaptioningManager.CaptionStyle getUserStyle()>
<android.view.accessibility.CaptioningManager: void addCaptioningChangeListener(android.view.accessibility.CaptioningManager.CaptioningChangeListener)>
<android.view.accessibility.CaptioningManager: float getFontScale()>
<android.view.accessibility.CaptioningManager: void removeCaptioningChangeListener(android.view.accessibility.CaptioningManager.CaptioningChangeListener)>
<android.content.pm.VersionedPackage: java.lang.String getPackageName()>
<android.content.pm.VersionedPackage: void <init>(String,long)>
<android.content.pm.VersionedPackage: int getVersionCode()>
<android.content.pm.VersionedPackage: void <init>(String,int)>
<android.content.pm.VersionedPackage: int describeContents()>
<android.content.pm.VersionedPackage: long getLongVersionCode()>
<android.content.pm.VersionedPackage: void writeToParcel(android.os.Parcel,int)>
<android.animation.ValueAnimator.AnimatorUpdateListener: java.lang.String[] value()>
<android.animation.ValueAnimator.AnimatorUpdateListener: void onAnimationUpdate(android.animation.ValueAnimator)>
<android.animation.ValueAnimator.AnimatorUpdateListener: int value()>
<android.net.sip.SipAudioCall: void continueCall(int)>
<android.net.sip.SipAudioCall: void toggleMute()>
<android.net.sip.SipAudioCall: void answerCall(int)>
<android.net.sip.SipAudioCall: void sendDtmf(int)>
<android.net.sip.SipAudioCall: boolean isOnHold()>
<android.net.sip.SipAudioCall: void makeCall(android.net.sip.SipProfile,android.net.sip.SipSession,int)>
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getLocalProfile()>
<android.net.sip.SipAudioCall: void endCall()>
<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall.Listener,boolean)>
<android.net.sip.SipAudioCall: int getState()>
<android.net.sip.SipAudioCall: void attachCall(android.net.sip.SipSession,java.lang.String)>
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getPeerProfile()>
<android.net.sip.SipAudioCall: boolean isMuted()>
<android.net.sip.SipAudioCall: void holdCall(int)>
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)>
<android.net.sip.SipAudioCall: void sendDtmf(int,android.os.Message)>
<android.net.sip.SipAudioCall: void <init>(android.content.Context,android.net.sip.SipProfile)>
<android.net.sip.SipAudioCall: void close()>
<android.net.sip.SipAudioCall: boolean isInCall()>
<android.net.sip.SipAudioCall: void startAudio()>
<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall.Listener)>
<java.security.acl.LastOwnerException: void <init>()>
<java.util.stream.DoubleStream.Builder extends java.util.function.DoubleConsumer: java.util.stream.DoubleStream.Builder add(double)>
<java.util.stream.DoubleStream.Builder extends java.util.function.DoubleConsumer: java.util.stream.DoubleStream build()>
<org.w3c.dom.Entity extends org.w3c.dom.Node: java.lang.String getInputEncoding()>
<org.w3c.dom.Entity extends org.w3c.dom.Node: java.lang.String getSystemId()>
<org.w3c.dom.Entity extends org.w3c.dom.Node: java.lang.String getXmlVersion()>
<org.w3c.dom.Entity extends org.w3c.dom.Node: java.lang.String getPublicId()>
<org.w3c.dom.Entity extends org.w3c.dom.Node: java.lang.String getNotationName()>
<org.w3c.dom.Entity extends org.w3c.dom.Node: java.lang.String getXmlEncoding()>
<android.content.AsyncQueryHandler.WorkerArgs: void <init>()>
<android.widget.Toast: int getGravity()>
<android.widget.Toast: void setView(android.view.View)>
<android.widget.Toast: android.view.View getView()>
<android.widget.Toast: int getDuration()>
<android.widget.Toast: float getVerticalMargin()>
<android.widget.Toast: int getYOffset()>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,@StringResint,int)>
<android.widget.Toast: void setGravity(int,int,int)>
<android.widget.Toast: int getXOffset()>
<android.widget.Toast: void <init>(android.content.Context)>
<android.widget.Toast: void setText(@StringResint)>
<android.widget.Toast: void setMargin(float,float)>
<android.widget.Toast: void setDuration(int)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,CharSequence,int)>
<android.widget.Toast: void cancel()>
<android.widget.Toast: float getHorizontalMargin()>
<android.widget.Toast: void setText(CharSequence)>
<android.widget.Toast: void show()>
<android.net.wifi.RttManager: void disableResponder(android.net.wifi.RttManager.ResponderCallback)>
<android.net.wifi.RttManager: android.net.wifi.RttManager.RttCapabilities getRttCapabilities()>
<android.net.wifi.RttManager: android.net.wifi.RttManager.Capabilities getCapabilities()>
<android.net.wifi.RttManager: void stopRanging(android.net.wifi.RttManager.RttListener)>
<android.net.wifi.RttManager: void startRanging(android.net.wifi.RttManager.RttParams[],android.net.wifi.RttManager.RttListener)>
<android.net.wifi.RttManager: void enableResponder(android.net.wifi.RttManager.ResponderCallback)>
<android.hardware.Camera.AutoFocusCallback: void onAutoFocus(boolean,android.hardware.Camera)>
<java.sql.Clob: java.io.Reader getCharacterStream(long,long)>
<java.sql.Clob: java.io.Reader getCharacterStream()>
<java.sql.Clob: java.lang.String getSubString(long,int)>
<java.sql.Clob: long length()>
<java.sql.Clob: void truncate(long)>
<java.sql.Clob: long position(java.lang.String,long)>
<java.sql.Clob: long position(java.sql.Clob,long)>
<java.sql.Clob: int setString(long,java.lang.String,int,int)>
<java.sql.Clob: int setString(long,java.lang.String)>
<java.sql.Clob: java.io.OutputStream setAsciiStream(long)>
<java.sql.Clob: java.io.InputStream getAsciiStream()>
<java.sql.Clob: void free()>
<java.sql.Clob: java.io.Writer setCharacterStream(long)>
<android.bluetooth.BluetoothGattServerCallback: void onCharacteristicWriteRequest(android.bluetooth.BluetoothDevice,int,android.bluetooth.BluetoothGattCharacteristic,boolean,boolean,int,byte[])>
<android.bluetooth.BluetoothGattServerCallback: void onExecuteWrite(android.bluetooth.BluetoothDevice,int,boolean)>
<android.bluetooth.BluetoothGattServerCallback: void onDescriptorReadRequest(android.bluetooth.BluetoothDevice,int,int,android.bluetooth.BluetoothGattDescriptor)>
<android.bluetooth.BluetoothGattServerCallback: void onPhyRead(android.bluetooth.BluetoothDevice,int,int,int)>
<android.bluetooth.BluetoothGattServerCallback: void onServiceAdded(int,android.bluetooth.BluetoothGattService)>
<android.bluetooth.BluetoothGattServerCallback: void onMtuChanged(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothGattServerCallback: void onNotificationSent(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothGattServerCallback: void onDescriptorWriteRequest(android.bluetooth.BluetoothDevice,int,android.bluetooth.BluetoothGattDescriptor,boolean,boolean,int,byte[])>
<android.bluetooth.BluetoothGattServerCallback: void onCharacteristicReadRequest(android.bluetooth.BluetoothDevice,int,int,android.bluetooth.BluetoothGattCharacteristic)>
<android.bluetooth.BluetoothGattServerCallback: void onPhyUpdate(android.bluetooth.BluetoothDevice,int,int,int)>
<android.bluetooth.BluetoothGattServerCallback: void <init>()>
<android.bluetooth.BluetoothGattServerCallback: void onConnectionStateChange(android.bluetooth.BluetoothDevice,int,int)>
<android.media.AudioFormat.Builder: android.media.AudioFormat.Builder setChannelIndexMask(int)>
<android.media.AudioFormat.Builder: android.media.AudioFormat.Builder setChannelMask(int)>
<android.media.AudioFormat.Builder: void <init>()>
<android.media.AudioFormat.Builder: void <init>(android.media.AudioFormat)>
<android.media.AudioFormat.Builder: android.media.AudioFormat.Builder setEncoding(int)>
<android.media.AudioFormat.Builder: android.media.AudioFormat build()>
<android.media.AudioFormat.Builder: android.media.AudioFormat.Builder setSampleRate(int)>
<java.security.interfaces.RSAPublicKey extends java.security.PublicKey java.security.interfaces.RSAKey: java.math.BigInteger getPublicExponent()>
<android.location.SettingInjectorService: void onStart(android.content.Intent,int)>
<android.location.SettingInjectorService: int onStartCommand(android.content.Intent,int,int)>
<android.location.SettingInjectorService: void refreshSettings(android.content.Context)>
<android.location.SettingInjectorService: boolean onGetEnabled()>
<android.location.SettingInjectorService: void <init>(String)>
<android.location.SettingInjectorService: android.os.IBinder onBind(android.content.Intent)>
<android.location.SettingInjectorService: java.lang.String onGetSummary()>
<android.app.ListActivity: android.widget.ListAdapter getListAdapter()>
<android.app.ListActivity: long getSelectedItemId()>
<android.app.ListActivity: void <init>()>
<android.app.ListActivity: android.widget.ListView getListView()>
<android.app.ListActivity: void setSelection(int)>
<android.app.ListActivity: int getSelectedItemPosition()>
<android.app.ListActivity: void setListAdapter(android.widget.ListAdapter)>
<android.app.ListActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)>
<android.text.ParcelableSpan extends android.os.Parcelable: int getSpanTypeId()>
<android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.SyncInfo: int describeContents()>
<android.renderscript.ScriptIntrinsicConvolve5x5: void forEach(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicConvolve5x5: android.renderscript.ScriptIntrinsicConvolve5x5 create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicConvolve5x5: void forEach(android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicConvolve5x5: android.renderscript.Script.FieldID getFieldID_Input()>
<android.renderscript.ScriptIntrinsicConvolve5x5: void setCoefficients(float[])>
<android.renderscript.ScriptIntrinsicConvolve5x5: android.renderscript.Script.KernelID getKernelID()>
<android.renderscript.ScriptIntrinsicConvolve5x5: void setInput(android.renderscript.Allocation)>
<android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair: void <init>(int,int)>
<android.preference.PreferenceDataStore: void putLong(java.lang.String,long)>
<android.preference.PreferenceDataStore: int getInt(java.lang.String,int)>
<android.preference.PreferenceDataStore: boolean getBoolean(java.lang.String,boolean)>
<android.preference.PreferenceDataStore: float getFloat(java.lang.String,float)>
<android.preference.PreferenceDataStore: long getLong(java.lang.String,long)>
<android.preference.PreferenceDataStore: void putString(java.lang.String,java.lang.String)>
<android.preference.PreferenceDataStore: void putStringSet(java.lang.String,java.util.Set)>
<android.preference.PreferenceDataStore: void putBoolean(java.lang.String,boolean)>
<android.preference.PreferenceDataStore: void putFloat(java.lang.String,float)>
<android.preference.PreferenceDataStore: java.util.Set getStringSet(java.lang.String,java.util.Set)>
<android.preference.PreferenceDataStore: java.lang.String getString(java.lang.String,java.lang.String)>
<android.preference.PreferenceDataStore: void putInt(java.lang.String,int)>
<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Field: short getShort(java.lang.Object)>
<java.lang.reflect.Field: int getModifiers()>
<java.lang.reflect.Field: boolean isSynthetic()>
<java.lang.reflect.Field: void setShort(java.lang.Object,short)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>
<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>
<java.lang.reflect.Field: boolean isEnumConstant()>
<java.lang.reflect.Field: void setByte(java.lang.Object,byte)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>
<java.lang.reflect.Field: float getFloat(java.lang.Object)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>
<java.lang.reflect.Field: double getDouble(java.lang.Object)>
<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>
<java.lang.reflect.Field: char getChar(java.lang.Object)>
<java.lang.reflect.Field: java.lang.String getName()>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>
<java.lang.reflect.Field: java.lang.String toGenericString()>
<java.lang.reflect.Field: void setChar(java.lang.Object,char)>
<java.lang.reflect.Field: byte getByte(java.lang.Object)>
<java.lang.reflect.Field: java.lang.Class getType()>
<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>
<android.hardware.camera2.CaptureRequest.Key: java.lang.String getName()>
<android.hardware.camera2.CaptureRequest.Key: void <init>(String,Class)>
<android.hardware.camera2.params.InputConfiguration: int getHeight()>
<android.hardware.camera2.params.InputConfiguration: void <init>(int,int,int)>
<android.hardware.camera2.params.InputConfiguration: int getWidth()>
<android.hardware.camera2.params.InputConfiguration: int getFormat()>
<android.graphics.ColorSpace.Rgb.TransferParameters: void <init>(double,double,double,double,double,double,double)>
<android.graphics.ColorSpace.Rgb.TransferParameters: void <init>(double,double,double,double,double)>
<android.content.pm.PackageInstaller.Session: java.io.OutputStream openWrite(java.lang.String,long,long)>
<android.content.pm.PackageInstaller.Session: void setStagingProgress(float)>
<android.content.pm.PackageInstaller.Session: void abandon()>
<android.content.pm.PackageInstaller.Session: void removeSplit(java.lang.String)>
<android.content.pm.PackageInstaller.Session: boolean isMultiPackage()>
<android.content.pm.PackageInstaller.Session: void commitTransferred(android.content.IntentSender)>
<android.content.pm.PackageInstaller.Session: void addChildSessionId(int)>
<android.content.pm.PackageInstaller.Session: java.io.InputStream openRead(java.lang.String)>
<android.content.pm.PackageInstaller.Session: void transfer(java.lang.String)>
<android.content.pm.PackageInstaller.Session: int getParentSessionId()>
<android.content.pm.PackageInstaller.Session: java.lang.String[] getNames()>
<android.content.pm.PackageInstaller.Session: void removeChildSessionId(int)>
<android.content.pm.PackageInstaller.Session: void fsync(java.io.OutputStream)>
<android.content.pm.PackageInstaller.Session: void commit(android.content.IntentSender)>
<android.content.pm.PackageInstaller.Session: boolean isStaged()>
<android.content.pm.PackageInstaller.Session: void close()>
<android.content.pm.PackageInstaller.Session: int[] getChildSessionIds()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalTxSuccess()>
<android.net.wifi.WifiUsabilityStatsEntry: int getProbeMcsRateSinceLastUpdate()>
<android.net.wifi.WifiUsabilityStatsEntry: int getCellularSignalStrengthDbm()>
<android.net.wifi.WifiUsabilityStatsEntry: int describeContents()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalRadioOnFreqTimeMillis()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalBeaconRx()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalRadioOnTimeMillis()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalRadioRxTimeMillis()>
<android.net.wifi.WifiUsabilityStatsEntry: int getRxLinkSpeedMbps()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalTxRetries()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalNanScanTimeMillis()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalCcaBusyFreqTimeMillis()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalRadioTxTimeMillis()>
<android.net.wifi.WifiUsabilityStatsEntry: int getProbeElapsedTimeSinceLastUpdateMillis()>
<android.net.wifi.WifiUsabilityStatsEntry: int getRssi()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalRoamScanTimeMillis()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalRxSuccess()>
<android.net.wifi.WifiUsabilityStatsEntry: boolean isSameRegisteredCell()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTimeStampMillis()>
<android.net.wifi.WifiUsabilityStatsEntry: int getCellularSignalStrengthDb()>
<android.net.wifi.WifiUsabilityStatsEntry: int getLinkSpeedMbps()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalBackgroundScanTimeMillis()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalScanTimeMillis()>
<android.net.wifi.WifiUsabilityStatsEntry: int getCellularDataNetworkType()>
<android.net.wifi.WifiUsabilityStatsEntry: int getProbeStatusSinceLastUpdate()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalHotspot2ScanTimeMillis()>
<android.net.wifi.WifiUsabilityStatsEntry: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalTxBad()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalPnoScanTimeMillis()>
<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextSelection suggestSelection(android.view.textclassifier.TextSelection.Request)>
<android.view.textclassifier.TextClassifier: int getMaxGenerateLinksTextLength()>
<android.view.textclassifier.TextClassifier: void onSelectionEvent(android.view.textclassifier.SelectionEvent)>
<android.view.textclassifier.TextClassifier: android.view.textclassifier.ConversationActions suggestConversationActions(android.view.textclassifier.ConversationActions.Request)>
<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextLinks generateLinks(android.view.textclassifier.TextLinks.Request)>
<android.view.textclassifier.TextClassifier: boolean isDestroyed()>
<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextLanguage detectLanguage(android.view.textclassifier.TextLanguage.Request)>
<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextClassification classifyText(android.view.textclassifier.TextClassification.Request)>
<android.view.textclassifier.TextClassifier: void onTextClassifierEvent(android.view.textclassifier.TextClassifierEvent)>
<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextSelection suggestSelection(CharSequence,int,int,android.os.LocaleList)>
<android.view.textclassifier.TextClassifier: void destroy()>
<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextClassification classifyText(CharSequence,int,int,android.os.LocaleList)>
<android.R.id: void <init>()>
<java.util.zip.CRC32: void reset()>
<java.util.zip.CRC32: void <init>()>
<java.util.zip.CRC32: void update(byte[])>
<java.util.zip.CRC32: long getValue()>
<java.util.zip.CRC32: void update(byte[],int,int)>
<java.util.zip.CRC32: void update(java.nio.ByteBuffer)>
<java.util.zip.CRC32: void update(int)>
<android.view.inputmethod.InputMethodSubtype: CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValueOf(java.lang.String)>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getLanguageTag()>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getMode()>
<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,String,String,String,boolean,boolean,int)>
<android.view.inputmethod.InputMethodSubtype: boolean containsExtraValueKey(java.lang.String)>
<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,String,String,String,boolean,boolean)>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getLocale()>
<android.view.inputmethod.InputMethodSubtype: int describeContents()>
<android.view.inputmethod.InputMethodSubtype: int getIconResId()>
<android.view.inputmethod.InputMethodSubtype: boolean isAuxiliary()>
<android.view.inputmethod.InputMethodSubtype: int getNameResId()>
<android.view.inputmethod.InputMethodSubtype: boolean isAsciiCapable()>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValue()>
<android.view.inputmethod.InputMethodSubtype: boolean overridesImplicitlyEnabledSubtype()>
<android.view.inputmethod.InputMethodSubtype: void writeToParcel(android.os.Parcel,int)>
<android.graphics.SumPathEffect: void <init>(android.graphics.PathEffect,android.graphics.PathEffect)>
<android.util.Printer: void println(java.lang.String)>
<android.service.autofill.augmented.FillCallback: void onSuccess(android.service.autofill.augmented.FillResponse)>
<android.view.textclassifier.TextClassifier.EntityConfig.Builder: android.view.textclassifier.TextClassifier.EntityConfig.Builder includeTypesFromTextClassifier(boolean)>
<android.view.textclassifier.TextClassifier.EntityConfig.Builder: android.view.textclassifier.TextClassifier.EntityConfig build()>
<android.view.textclassifier.TextClassifier.EntityConfig.Builder: void <init>()>
<android.view.textclassifier.TextClassifier.EntityConfig.Builder: android.view.textclassifier.TextClassifier.EntityConfig.Builder setIncludedTypes(java.util.Collection)>
<android.view.textclassifier.TextClassifier.EntityConfig.Builder: android.view.textclassifier.TextClassifier.EntityConfig.Builder setExcludedTypes(java.util.Collection)>
<android.view.textclassifier.TextClassifier.EntityConfig.Builder: android.view.textclassifier.TextClassifier.EntityConfig.Builder setHints(java.util.Collection)>
<android.hardware.Camera: void lock()>
<android.hardware.Camera: void stopPreview()>
<android.hardware.Camera: android.hardware.Camera.Parameters getParameters()>
<android.hardware.Camera: void setParameters(android.hardware.Camera.Parameters)>
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera.PreviewCallback)>
<android.hardware.Camera: void setPreviewTexture(android.graphics.SurfaceTexture)>
<android.hardware.Camera: void release()>
<android.hardware.Camera: void setZoomChangeListener(android.hardware.Camera.OnZoomChangeListener)>
<android.hardware.Camera: void addCallbackBuffer(byte[])>
<android.hardware.Camera: int getNumberOfCameras()>
<android.hardware.Camera: void reconnect()>
<android.hardware.Camera: void setPreviewCallbackWithBuffer(android.hardware.Camera.PreviewCallback)>
<android.hardware.Camera: void stopSmoothZoom()>
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera.PreviewCallback)>
<android.hardware.Camera: void takePicture(android.hardware.Camera.ShutterCallback,android.hardware.Camera.PictureCallback,android.hardware.Camera.PictureCallback,android.hardware.Camera.PictureCallback)>
<android.hardware.Camera: void unlock()>
<android.hardware.Camera: void autoFocus(android.hardware.Camera.AutoFocusCallback)>
<android.hardware.Camera: void finalize()>
<android.hardware.Camera: boolean enableShutterSound(boolean)>
<android.hardware.Camera: void startFaceDetection()>
<android.hardware.Camera: android.hardware.Camera open(int)>
<android.hardware.Camera: android.hardware.Camera open()>
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>
<android.hardware.Camera: void stopFaceDetection()>
<android.hardware.Camera: void takePicture(android.hardware.Camera.ShutterCallback,android.hardware.Camera.PictureCallback,android.hardware.Camera.PictureCallback)>
<android.hardware.Camera: void getCameraInfo(int,android.hardware.Camera.CameraInfo)>
<android.hardware.Camera: void setAutoFocusMoveCallback(android.hardware.Camera.AutoFocusMoveCallback)>
<android.hardware.Camera: void startSmoothZoom(int)>
<android.hardware.Camera: void setDisplayOrientation(int)>
<android.hardware.Camera: void setFaceDetectionListener(android.hardware.Camera.FaceDetectionListener)>
<android.hardware.Camera: void cancelAutoFocus()>
<android.hardware.Camera: void startPreview()>
<android.hardware.Camera: void setErrorCallback(android.hardware.Camera.ErrorCallback)>
<android.icu.util.LocaleData.PaperSize: int getHeight()>
<android.icu.util.LocaleData.PaperSize: int getWidth()>
<android.app.usage.CacheQuotaService: void <init>()>
<android.app.usage.CacheQuotaService: java.util.List onComputeCacheQuotaHints(java.util.List)>
<android.app.usage.CacheQuotaService: android.os.IBinder onBind(android.content.Intent)>
<java.sql.SQLNonTransientException: void <init>(String,String,int,Throwable)>
<java.sql.SQLNonTransientException: void <init>(String,String,int)>
<java.sql.SQLNonTransientException: void <init>(String,Throwable)>
<java.sql.SQLNonTransientException: void <init>(String,String,Throwable)>
<java.sql.SQLNonTransientException: void <init>(String)>
<java.sql.SQLNonTransientException: void <init>(Throwable)>
<java.sql.SQLNonTransientException: void <init>()>
<java.sql.SQLNonTransientException: void <init>(String,String)>
<android.inputmethodservice.InputMethodService.Insets: void <init>()>
<java.util.Calendar.Builder: java.util.Calendar.Builder setLenient(boolean)>
<java.util.Calendar.Builder: java.util.Calendar.Builder setTimeOfDay(int,int,int,int)>
<java.util.Calendar.Builder: java.util.Calendar.Builder setTimeOfDay(int,int,int)>
<java.util.Calendar.Builder: java.util.Calendar.Builder setDate(int,int,int)>
<java.util.Calendar.Builder: java.util.Calendar build()>
<java.util.Calendar.Builder: java.util.Calendar.Builder setWeekDefinition(int,int)>
<java.util.Calendar.Builder: java.util.Calendar.Builder setInstant(long)>
<java.util.Calendar.Builder: void <init>()>
<java.util.Calendar.Builder: java.util.Calendar.Builder setWeekDate(int,int,int)>
<java.util.Calendar.Builder: java.util.Calendar.Builder setLocale(java.util.Locale)>
<java.util.Calendar.Builder: java.util.Calendar.Builder set(int,int)>
<java.util.Calendar.Builder: java.util.Calendar.Builder setInstant(java.util.Date)>
<java.util.Calendar.Builder: java.util.Calendar.Builder setTimeZone(java.util.TimeZone)>
<java.util.Calendar.Builder: java.util.Calendar.Builder setCalendarType(java.lang.String)>
<java.util.Calendar.Builder: java.util.Calendar.Builder setFields(int...)>
<android.nfc.tech.NfcBarcode: android.nfc.tech.NfcBarcode get(android.nfc.Tag)>
<android.nfc.tech.NfcBarcode: boolean isConnected()>
<android.nfc.tech.NfcBarcode: android.nfc.Tag getTag()>
<android.nfc.tech.NfcBarcode: byte[] getBarcode()>
<android.nfc.tech.NfcBarcode: void close()>
<android.nfc.tech.NfcBarcode: void connect()>
<android.nfc.tech.NfcBarcode: int getType()>
<android.text.method.MetaKeyKeyListener: boolean onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.method.MetaKeyKeyListener: void clearMetaKeyState(android.view.View,android.text.Editable,int)>
<android.text.method.MetaKeyKeyListener: long clearMetaKeyState(long,int)>
<android.text.method.MetaKeyKeyListener: void adjustMetaAfterKeypress(android.text.Spannable)>
<android.text.method.MetaKeyKeyListener: boolean isSelectingMetaTracker(CharSequence,java.lang.Object)>
<android.text.method.MetaKeyKeyListener: long adjustMetaAfterKeypress(long)>
<android.text.method.MetaKeyKeyListener: void resetLockedMeta(android.text.Spannable)>
<android.text.method.MetaKeyKeyListener: boolean isMetaTracker(CharSequence,java.lang.Object)>
<android.text.method.MetaKeyKeyListener: void clearMetaKeyState(android.text.Editable,int)>
<android.text.method.MetaKeyKeyListener: int getMetaState(CharSequence)>
<android.text.method.MetaKeyKeyListener: void <init>()>
<android.text.method.MetaKeyKeyListener: void resetMetaState(android.text.Spannable)>
<android.text.method.MetaKeyKeyListener: int getMetaState(long,int)>
<android.text.method.MetaKeyKeyListener: long handleKeyDown(long,int,android.view.KeyEvent)>
<android.text.method.MetaKeyKeyListener: long handleKeyUp(long,int,android.view.KeyEvent)>
<android.text.method.MetaKeyKeyListener: int getMetaState(CharSequence,android.view.KeyEvent)>
<android.text.method.MetaKeyKeyListener: int getMetaState(CharSequence,int,android.view.KeyEvent)>
<android.text.method.MetaKeyKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.method.MetaKeyKeyListener: long resetLockedMeta(long)>
<android.text.method.MetaKeyKeyListener: int getMetaState(long)>
<android.text.method.MetaKeyKeyListener: int getMetaState(CharSequence,int)>
<android.widget.PopupWindow.OnDismissListener: void onDismiss()>
<java.lang.Runnable: void run()>
<android.media.MediaSession2Service: android.media.MediaSession2Service.MediaNotification onUpdateNotification(android.media.MediaSession2)>
<android.media.MediaSession2Service: void <init>()>
<android.media.MediaSession2Service: android.os.IBinder onBind(android.content.Intent)>
<android.media.MediaSession2Service: java.util.List getSessions()>
<android.media.MediaSession2Service: void removeSession(android.media.MediaSession2)>
<android.media.MediaSession2Service: void addSession(android.media.MediaSession2)>
<android.media.MediaSession2Service: android.media.MediaSession2 onGetSession(android.media.MediaSession2.ControllerInfo)>
<android.net.UrlQuerySanitizer.IllegalCharacterValueSanitizer: void <init>(int)>
<android.net.UrlQuerySanitizer.IllegalCharacterValueSanitizer: java.lang.String sanitize(java.lang.String)>
<android.media.Image: int getHeight()>
<android.media.Image: android.media.Image.Plane[] getPlanes()>
<android.media.Image: void setCropRect(android.graphics.Rect)>
<android.media.Image: android.hardware.HardwareBuffer getHardwareBuffer()>
<android.media.Image: android.graphics.Rect getCropRect()>
<android.media.Image: long getTimestamp()>
<android.media.Image: void close()>
<android.media.Image: void setTimestamp(long)>
<android.media.Image: int getWidth()>
<android.media.Image: int getFormat()>
<android.provider.ContactsContract: void <init>()>
<android.provider.ContactsContract: boolean isProfileId(long)>
<android.view.Window.Callback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback,int)>
<android.view.Window.Callback: android.view.View onCreatePanelView(int)>
<android.view.Window.Callback: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.view.Window.Callback: void onWindowAttributesChanged(android.view.WindowManager.LayoutParams)>
<android.view.Window.Callback: void onAttachedToWindow()>
<android.view.Window.Callback: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)>
<android.view.Window.Callback: void onPointerCaptureChanged(boolean)>
<android.view.Window.Callback: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.view.Window.Callback: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.view.Window.Callback: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.view.Window.Callback: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.Window.Callback: void onDetachedFromWindow()>
<android.view.Window.Callback: void onWindowFocusChanged(boolean)>
<android.view.Window.Callback: void onActionModeFinished(android.view.ActionMode)>
<android.view.Window.Callback: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.view.Window.Callback: void onContentChanged()>
<android.view.Window.Callback: boolean onSearchRequested(android.view.SearchEvent)>
<android.view.Window.Callback: void onPanelClosed(int,android.view.Menu)>
<android.view.Window.Callback: void onActionModeStarted(android.view.ActionMode)>
<android.view.Window.Callback: boolean onMenuItemSelected(int,android.view.MenuItem)>
<android.view.Window.Callback: boolean onSearchRequested()>
<android.view.Window.Callback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback)>
<android.view.Window.Callback: boolean onCreatePanelMenu(int,android.view.Menu)>
<android.view.Window.Callback: boolean onMenuOpened(int,android.view.Menu)>
<android.view.Window.Callback: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<java.lang.Short: short parseShort(java.lang.String)>
<java.lang.Short: long toUnsignedLong(short)>
<java.lang.Short: long longValue()>
<java.lang.Short: float floatValue()>
<java.lang.Short: int compareTo(java.lang.Short)>
<java.lang.Short: double doubleValue()>
<java.lang.Short: java.lang.Short valueOf(java.lang.String)>
<java.lang.Short: java.lang.Short valueOf(short)>
<java.lang.Short: void <init>(short)>
<java.lang.Short: java.lang.Short decode(java.lang.String)>
<java.lang.Short: java.lang.String toString(short)>
<java.lang.Short: int toUnsignedInt(short)>
<java.lang.Short: java.lang.Short valueOf(java.lang.String,int)>
<java.lang.Short: short parseShort(java.lang.String,int)>
<java.lang.Short: int hashCode(short)>
<java.lang.Short: int compare(short,short)>
<java.lang.Short: short reverseBytes(short)>
<java.lang.Short: void <init>(String)>
<java.lang.Short: int intValue()>
<java.util.Locale: java.util.List filterTags(java.util.List,java.util.Collection)>
<java.util.Locale: void <init>(String,String)>
<java.util.Locale: java.lang.String getScript()>
<java.util.Locale: java.lang.String getUnicodeLocaleType(java.lang.String)>
<java.util.Locale: java.lang.String getISO3Country()>
<java.util.Locale: java.util.Locale lookup(java.util.List,java.util.Collection)>
<java.util.Locale: java.util.Set getExtensionKeys()>
<java.util.Locale: java.lang.String getDisplayVariant()>
<java.util.Locale: java.lang.String getDisplayCountry()>
<java.util.Locale: java.util.Locale stripExtensions()>
<java.util.Locale: java.lang.String getDisplayLanguage(java.util.Locale)>
<java.util.Locale: java.lang.String getISO3Language()>
<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)>
<java.util.Locale: java.lang.String getDisplayName(java.util.Locale)>
<java.util.Locale: void setDefault(java.util.Locale.Category,java.util.Locale)>
<java.util.Locale: java.lang.String getExtension(char)>
<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>
<java.util.Locale: java.lang.String getCountry()>
<java.util.Locale: java.util.List filter(java.util.List,java.util.Collection)>
<java.util.Locale: java.lang.String getDisplayScript(java.util.Locale)>
<java.util.Locale: java.lang.String getDisplayVariant(java.util.Locale)>
<java.util.Locale: java.lang.String toLanguageTag()>
<java.util.Locale: java.util.List filterTags(java.util.List,java.util.Collection,java.util.Locale.FilteringMode)>
<java.util.Locale: java.util.Set getUnicodeLocaleAttributes()>
<java.util.Locale: java.lang.String getDisplayName()>
<java.util.Locale: void <init>(String,String,String)>
<java.util.Locale: java.lang.String[] getISOCountries()>
<java.util.Locale: java.util.Locale getDefault(java.util.Locale.Category)>
<java.util.Locale: java.lang.String getLanguage()>
<java.util.Locale: java.util.Set getUnicodeLocaleKeys()>
<java.util.Locale: java.lang.Object clone()>
<java.util.Locale: java.util.Locale getDefault()>
<java.util.Locale: java.lang.String getDisplayScript()>
<java.util.Locale: java.lang.String lookupTag(java.util.List,java.util.Collection)>
<java.util.Locale: boolean hasExtensions()>
<java.util.Locale: void <init>(String)>
<java.util.Locale: java.lang.String[] getISOLanguages()>
<java.util.Locale: void setDefault(java.util.Locale)>
<java.util.Locale: java.util.List filter(java.util.List,java.util.Collection,java.util.Locale.FilteringMode)>
<java.util.Locale: java.lang.String getVariant()>
<java.util.Locale: java.util.Locale[] getAvailableLocales()>
<java.util.Locale: java.lang.String getDisplayLanguage()>
<android.content.pm.dex.ArtManager: boolean isRuntimeProfilingEnabled(int)>
<android.content.pm.dex.ArtManager: void snapshotRuntimeProfile(int,java.lang.String,java.lang.String,java.util.concurrent.Executor,android.content.pm.dex.ArtManager.SnapshotRuntimeProfileCallback)>
<android.content.pm.ActivityInfo: void <init>()>
<android.content.pm.ActivityInfo: void <init>(android.content.pm.ActivityInfo)>
<android.content.pm.ActivityInfo: int describeContents()>
<android.content.pm.ActivityInfo: boolean isTranslucentOrFloating(android.content.res.TypedArray)>
<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ActivityInfo: int getThemeResource()>
<android.content.pm.InstrumentationInfo: void <init>()>
<android.content.pm.InstrumentationInfo: void <init>(android.content.pm.InstrumentationInfo)>
<android.content.pm.InstrumentationInfo: int describeContents()>
<android.webkit.CookieSyncManager: void stopSync()>
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager createInstance(android.content.Context)>
<android.webkit.CookieSyncManager: void startSync()>
<android.webkit.CookieSyncManager: void sync()>
<android.webkit.CookieSyncManager: void syncFromRamToFlash()>
<android.webkit.CookieSyncManager: void resetSync()>
<android.webkit.CookieSyncManager: void run()>
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager getInstance()>
<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.Button: void <init>(android.content.Context)>
<android.provider.Settings.NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)>
<android.provider.Settings.NameValueTable: boolean putString(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String)>
<android.provider.Settings.NameValueTable: void <init>()>
<android.renderscript.ScriptGroup.Builder2: android.renderscript.ScriptGroup create(java.lang.String,android.renderscript.ScriptGroup.Future...)>
<android.renderscript.ScriptGroup.Builder2: android.renderscript.ScriptGroup.Closure addKernel(android.renderscript.Script.KernelID,android.renderscript.Type,java.lang.Object...)>
<android.renderscript.ScriptGroup.Builder2: android.renderscript.ScriptGroup.Input addInput()>
<android.renderscript.ScriptGroup.Builder2: void <init>(android.renderscript.RenderScript)>
<android.renderscript.ScriptGroup.Builder2: android.renderscript.ScriptGroup.Closure addInvoke(android.renderscript.Script.InvokeID,java.lang.Object...)>
<android.media.MediaCodecInfo.VideoCapabilities: android.util.Range getSupportedHeightsFor(int)>
<android.media.MediaCodecInfo.VideoCapabilities: android.util.Range getSupportedWidths()>
<android.media.MediaCodecInfo.VideoCapabilities: android.util.Range getSupportedWidthsFor(int)>
<android.media.MediaCodecInfo.VideoCapabilities: boolean isSizeSupported(int,int)>
<android.media.MediaCodecInfo.VideoCapabilities: int getHeightAlignment()>
<android.media.MediaCodecInfo.VideoCapabilities: boolean areSizeAndRateSupported(int,int,double)>
<android.media.MediaCodecInfo.VideoCapabilities: android.util.Range getSupportedFrameRates()>
<android.media.MediaCodecInfo.VideoCapabilities: android.util.Range getSupportedHeights()>
<android.media.MediaCodecInfo.VideoCapabilities: android.util.Range getSupportedFrameRatesFor(int,int)>
<android.media.MediaCodecInfo.VideoCapabilities: android.util.Range getBitrateRange()>
<android.media.MediaCodecInfo.VideoCapabilities: android.util.Range getAchievableFrameRatesFor(int,int)>
<android.media.MediaCodecInfo.VideoCapabilities: int getWidthAlignment()>
<android.media.MediaCodecInfo.VideoCapabilities: java.util.List getSupportedPerformancePoints()>
<android.widget.RemoteViews: void setBundle(int,java.lang.String,android.os.Bundle)>
<android.widget.RemoteViews: void setImageViewIcon(int,android.graphics.drawable.Icon)>
<android.widget.RemoteViews: void setLightBackgroundLayoutId(@LayoutResint)>
<android.widget.RemoteViews: java.lang.String getPackage()>
<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,CharSequence)>
<android.widget.RemoteViews: int describeContents()>
<android.widget.RemoteViews: void setImageViewResource(int,int)>
<android.widget.RemoteViews: void writeToParcel(android.os.Parcel,int)>
<android.widget.RemoteViews: void removeAllViews(int)>
<android.widget.RemoteViews: void setImageViewBitmap(int,android.graphics.Bitmap)>
<android.widget.RemoteViews: void setBitmap(int,java.lang.String,android.graphics.Bitmap)>
<android.widget.RemoteViews: android.widget.RemoteViews clone()>
<android.widget.RemoteViews: void <init>(String,int)>
<android.widget.RemoteViews: void setIntent(int,java.lang.String,android.content.Intent)>
<android.widget.RemoteViews: void reapply(android.content.Context,android.view.View)>
<android.widget.RemoteViews: void setOnClickResponse(int,android.widget.RemoteViews.RemoteResponse)>
<android.widget.RemoteViews: void setTextViewCompoundDrawablesRelative(int,int,int,int,int)>
<android.widget.RemoteViews: void setUri(int,java.lang.String,android.net.Uri)>
<android.widget.RemoteViews: void setPendingIntentTemplate(int,android.app.PendingIntent)>
<android.widget.RemoteViews: void setTextViewTextSize(int,int,float)>
<android.widget.RemoteViews: void setDisplayedChild(int,int)>
<android.widget.RemoteViews: void addView(int,android.widget.RemoteViews)>
<android.widget.RemoteViews: void setChronometer(int,long,java.lang.String,boolean)>
<android.widget.RemoteViews: void showPrevious(int)>
<android.widget.RemoteViews: android.view.View apply(android.content.Context,android.view.ViewGroup)>
<android.widget.RemoteViews: void setByte(int,java.lang.String,byte)>
<android.widget.RemoteViews: void setDouble(int,java.lang.String,double)>
<android.widget.RemoteViews: void setTextViewText(int,CharSequence)>
<android.widget.RemoteViews: void setInt(int,java.lang.String,int)>
<android.widget.RemoteViews: void setLong(int,java.lang.String,long)>
<android.widget.RemoteViews: void setAccessibilityTraversalAfter(int,int)>
<android.widget.RemoteViews: int getLayoutId()>
<android.widget.RemoteViews: void setScrollPosition(int,int)>
<android.widget.RemoteViews: void showNext(int)>
<android.widget.RemoteViews: void <init>(android.widget.RemoteViews,android.widget.RemoteViews)>
<android.widget.RemoteViews: void setString(int,java.lang.String,java.lang.String)>
<android.widget.RemoteViews: void setRelativeScrollPosition(int,int)>
<android.widget.RemoteViews: void setBoolean(int,java.lang.String,boolean)>
<android.widget.RemoteViews: void <init>(android.widget.RemoteViews)>
<android.widget.RemoteViews: void setTextColor(int,@ColorIntint)>
<android.widget.RemoteViews: void setImageViewUri(int,android.net.Uri)>
<android.widget.RemoteViews: void setOnClickFillInIntent(int,android.content.Intent)>
<android.widget.RemoteViews: void setRemoteAdapter(int,android.content.Intent)>
<android.widget.RemoteViews: void setEmptyView(int,int)>
<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)>
<android.widget.RemoteViews: void setViewPadding(int,int,int,int,int)>
<android.widget.RemoteViews: void setLabelFor(int,int)>
<android.widget.RemoteViews: void <init>(android.os.Parcel)>
<android.widget.RemoteViews: void setAccessibilityTraversalBefore(int,int)>
<android.widget.RemoteViews: void setIcon(int,java.lang.String,android.graphics.drawable.Icon)>
<android.widget.RemoteViews: void setContentDescription(int,CharSequence)>
<android.widget.RemoteViews: void setFloat(int,java.lang.String,float)>
<android.widget.RemoteViews: void setTextViewCompoundDrawables(int,int,int,int,int)>
<android.widget.RemoteViews: void setChar(int,java.lang.String,char)>
<android.widget.RemoteViews: void setRemoteAdapter(int,int,android.content.Intent)>
<android.widget.RemoteViews: void setShort(int,java.lang.String,short)>
<android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)>
<android.widget.RemoteViews: boolean onLoadClass(java.lang.Class)>
<android.widget.RemoteViews: void setViewVisibility(int,int)>
<android.widget.RemoteViews: void setChronometerCountDown(int,boolean)>
<java.net.CookieStore: java.util.List get(java.net.URI)>
<java.net.CookieStore: boolean removeAll()>
<java.net.CookieStore: boolean remove(java.net.URI,java.net.HttpCookie)>
<java.net.CookieStore: void add(java.net.URI,java.net.HttpCookie)>
<java.net.CookieStore: java.util.List getCookies()>
<java.net.CookieStore: java.util.List getURIs()>
<android.content.pm.PermissionGroupInfo: void <init>(android.content.pm.PermissionGroupInfo)>
<android.content.pm.PermissionGroupInfo: int describeContents()>
<android.content.pm.PermissionGroupInfo: CharSequence loadDescription(android.content.pm.PackageManager)>
<android.content.pm.PermissionGroupInfo: void <init>()>
<android.icu.util.Output: void <init>(T)>
<android.icu.util.Output: void <init>()>
<java.security.cert.X509CertSelector: boolean match(java.security.cert.Certificate)>
<java.security.cert.X509CertSelector: void setAuthorityKeyIdentifier(byte[])>
<java.security.cert.X509CertSelector: java.lang.String getSubjectPublicKeyAlgID()>
<java.security.cert.X509CertSelector: void setIssuer(byte[])>
<java.security.cert.X509CertSelector: java.lang.Object clone()>
<java.security.cert.X509CertSelector: void setIssuer(java.lang.String)>
<java.security.cert.X509CertSelector: byte[] getSubjectAsBytes()>
<java.security.cert.X509CertSelector: void addPathToName(int,java.lang.String)>
<java.security.cert.X509CertSelector: void addPathToName(int,byte[])>
<java.security.cert.X509CertSelector: java.security.PublicKey getSubjectPublicKey()>
<java.security.cert.X509CertSelector: void setSubjectPublicKey(byte[])>
<java.security.cert.X509CertSelector: void setSubjectPublicKeyAlgID(java.lang.String)>
<java.security.cert.X509CertSelector: java.util.Set getExtendedKeyUsage()>
<java.security.cert.X509CertSelector: void setBasicConstraints(int)>
<java.security.cert.X509CertSelector: void setNameConstraints(byte[])>
<java.security.cert.X509CertSelector: java.lang.String getSubjectAsString()>
<java.security.cert.X509CertSelector: void setCertificate(java.security.cert.X509Certificate)>
<java.security.cert.X509CertSelector: byte[] getSubjectKeyIdentifier()>
<java.security.cert.X509CertSelector: java.security.cert.X509Certificate getCertificate()>
<java.security.cert.X509CertSelector: void addSubjectAlternativeName(int,byte[])>
<java.security.cert.X509CertSelector: java.math.BigInteger getSerialNumber()>
<java.security.cert.X509CertSelector: void setIssuer(javax.security.auth.x500.X500Principal)>
<java.security.cert.X509CertSelector: java.util.Set getPolicy()>
<java.security.cert.X509CertSelector: void setSerialNumber(java.math.BigInteger)>
<java.security.cert.X509CertSelector: boolean getMatchAllSubjectAltNames()>
<java.security.cert.X509CertSelector: void setSubject(byte[])>
<java.security.cert.X509CertSelector: void <init>()>
<java.security.cert.X509CertSelector: void addSubjectAlternativeName(int,java.lang.String)>
<java.security.cert.X509CertSelector: void setPathToNames(java.util.Collection)>
<java.security.cert.X509CertSelector: void setSubject(javax.security.auth.x500.X500Principal)>
<java.security.cert.X509CertSelector: boolean[] getKeyUsage()>
<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal getIssuer()>
<java.security.cert.X509CertSelector: void setExtendedKeyUsage(java.util.Set)>
<java.security.cert.X509CertSelector: void setSubjectPublicKey(java.security.PublicKey)>
<java.security.cert.X509CertSelector: java.lang.String getIssuerAsString()>
<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal getSubject()>
<java.security.cert.X509CertSelector: void setPrivateKeyValid(java.util.Date)>
<java.security.cert.X509CertSelector: java.util.Date getCertificateValid()>
<java.security.cert.X509CertSelector: void setSubjectAlternativeNames(java.util.Collection)>
<java.security.cert.X509CertSelector: java.util.Collection getPathToNames()>
<java.security.cert.X509CertSelector: byte[] getNameConstraints()>
<java.security.cert.X509CertSelector: void setSubjectKeyIdentifier(byte[])>
<java.security.cert.X509CertSelector: byte[] getIssuerAsBytes()>
<java.security.cert.X509CertSelector: void setMatchAllSubjectAltNames(boolean)>
<java.security.cert.X509CertSelector: void setCertificateValid(java.util.Date)>
<java.security.cert.X509CertSelector: java.util.Collection getSubjectAlternativeNames()>
<java.security.cert.X509CertSelector: byte[] getAuthorityKeyIdentifier()>
<java.security.cert.X509CertSelector: int getBasicConstraints()>
<java.security.cert.X509CertSelector: void setSubject(java.lang.String)>
<java.security.cert.X509CertSelector: void setKeyUsage(boolean[])>
<java.security.cert.X509CertSelector: void setPolicy(java.util.Set)>
<java.security.cert.X509CertSelector: java.util.Date getPrivateKeyValid()>
<android.hardware.biometrics.BiometricPrompt.AuthenticationResult: android.hardware.biometrics.BiometricPrompt.CryptoObject getCryptoObject()>
<android.graphics.text.LineBreaker.ParagraphConstraints: float getDefaultTabStop()>
<android.graphics.text.LineBreaker.ParagraphConstraints: void <init>()>
<android.graphics.text.LineBreaker.ParagraphConstraints: void setTabStops(float[],@Pxfloat)>
<android.graphics.text.LineBreaker.ParagraphConstraints: int getFirstWidthLineCount()>
<android.graphics.text.LineBreaker.ParagraphConstraints: float[] getTabStops()>
<android.graphics.text.LineBreaker.ParagraphConstraints: float getWidth()>
<android.graphics.text.LineBreaker.ParagraphConstraints: float getFirstWidth()>
<android.graphics.text.LineBreaker.ParagraphConstraints: void setIndent(@Pxfloat,@Pxint)>
<android.graphics.text.LineBreaker.ParagraphConstraints: void setWidth(@Pxfloat)>
<java.util.ServiceLoader: java.util.Iterator iterator()>
<java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>
<java.util.ServiceLoader: java.util.ServiceLoader loadInstalled(java.lang.Class)>
<java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>
<java.util.ServiceLoader: void reload()>
<android.telecom.PhoneAccount.Builder: void <init>(android.telecom.PhoneAccount)>
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder setExtras(android.os.Bundle)>
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder addSupportedUriScheme(java.lang.String)>
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount build()>
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder setAddress(android.net.Uri)>
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder setSubscriptionAddress(android.net.Uri)>
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder setHighlightColor(int)>
<android.telecom.PhoneAccount.Builder: void <init>(android.telecom.PhoneAccountHandle,CharSequence)>
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder setSupportedUriSchemes(java.util.List)>
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder setShortDescription(CharSequence)>
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder setCapabilities(int)>
<android.telecom.PhoneAccount.Builder: android.telecom.PhoneAccount.Builder setIcon(android.graphics.drawable.Icon)>
<android.media.AudioManager.AudioServerStateCallback: void onAudioServerDown()>
<android.media.AudioManager.AudioServerStateCallback: void <init>()>
<android.media.AudioManager.AudioServerStateCallback: void onAudioServerUp()>
<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,@AttrResint)>
<android.view.inspector.PropertyMapper: int mapResourceId(java.lang.String,@AttrResint)>
<android.view.inspector.PropertyMapper: int mapGravity(java.lang.String,@AttrResint)>
<android.view.inspector.PropertyMapper: int mapIntFlag(java.lang.String,@AttrResint,java.util.function.IntFunction)>
<android.view.inspector.PropertyMapper: int mapShort(java.lang.String,@AttrResint)>
<android.view.inspector.PropertyMapper: int mapColor(java.lang.String,@AttrResint)>
<android.view.inspector.PropertyMapper: int mapChar(java.lang.String,@AttrResint)>
<android.view.inspector.PropertyMapper: int mapLong(java.lang.String,@AttrResint)>
<android.view.inspector.PropertyMapper: int mapDouble(java.lang.String,@AttrResint)>
<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,@AttrResint,java.util.function.IntFunction)>
<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,@AttrResint)>
<android.view.inspector.PropertyMapper: int mapByte(java.lang.String,@AttrResint)>
<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,@AttrResint)>
<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,@AttrResint)>
<android.net.wifi.WifiScanner.HotlistSettings: void <init>()>
<android.net.wifi.p2p.WifiP2pManager.GroupInfoListener: void onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup)>
<android.media.MediaSync.OnErrorListener: void onError(android.media.MediaSync,int,int)>
<android.view.animation.LinearInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.LinearInterpolator: void <init>()>
<android.view.animation.LinearInterpolator: float getInterpolation(float)>
<android.view.WindowInsets: int getSystemWindowInsetBottom()>
<android.view.WindowInsets: android.view.WindowInsets consumeSystemWindowInsets()>
<android.view.WindowInsets: int getStableInsetRight()>
<android.view.WindowInsets: int getSystemWindowInsetLeft()>
<android.view.WindowInsets: android.view.WindowInsets inset(int,int,int,int)>
<android.view.WindowInsets: android.graphics.Insets getTappableElementInsets()>
<android.view.WindowInsets: android.graphics.Insets getStableInsets()>
<android.view.WindowInsets: int getStableInsetTop()>
<android.view.WindowInsets: boolean isRound()>
<android.view.WindowInsets: android.graphics.Insets getMandatorySystemGestureInsets()>
<android.view.WindowInsets: android.view.WindowInsets consumeDisplayCutout()>
<android.view.WindowInsets: int getSystemWindowInsetTop()>
<android.view.WindowInsets: int getStableInsetLeft()>
<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(int,int,int,int)>
<android.view.WindowInsets: android.view.WindowInsets consumeStableInsets()>
<android.view.WindowInsets: int getStableInsetBottom()>
<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()>
<android.view.WindowInsets: boolean hasInsets()>
<android.view.WindowInsets: android.graphics.Insets getSystemGestureInsets()>
<android.view.WindowInsets: int getSystemWindowInsetRight()>
<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(android.graphics.Rect)>
<android.view.WindowInsets: boolean hasStableInsets()>
<android.view.WindowInsets: void <init>(android.view.WindowInsets)>
<android.view.WindowInsets: boolean hasSystemWindowInsets()>
<android.view.WindowInsets: boolean isConsumed()>
<android.view.WindowInsets: android.view.DisplayCutout getDisplayCutout()>
<java.util.concurrent.atomic.AtomicLongArray: long addAndGet(int,long)>
<java.util.concurrent.atomic.AtomicLongArray: boolean compareAndSet(int,long,long)>
<java.util.concurrent.atomic.AtomicLongArray: long updateAndGet(int,java.util.function.LongUnaryOperator)>
<java.util.concurrent.atomic.AtomicLongArray: int length()>
<java.util.concurrent.atomic.AtomicLongArray: long getAndAdd(int,long)>
<java.util.concurrent.atomic.AtomicLongArray: void set(int,long)>
<java.util.concurrent.atomic.AtomicLongArray: long accumulateAndGet(int,long,java.util.function.LongBinaryOperator)>
<java.util.concurrent.atomic.AtomicLongArray: long getAndIncrement(int)>
<java.util.concurrent.atomic.AtomicLongArray: long getAndSet(int,long)>
<java.util.concurrent.atomic.AtomicLongArray: boolean weakCompareAndSet(int,long,long)>
<java.util.concurrent.atomic.AtomicLongArray: long incrementAndGet(int)>
<java.util.concurrent.atomic.AtomicLongArray: void lazySet(int,long)>
<java.util.concurrent.atomic.AtomicLongArray: long get(int)>
<java.util.concurrent.atomic.AtomicLongArray: void <init>(int)>
<java.util.concurrent.atomic.AtomicLongArray: void <init>(long[])>
<java.util.concurrent.atomic.AtomicLongArray: long decrementAndGet(int)>
<java.util.concurrent.atomic.AtomicLongArray: long getAndAccumulate(int,long,java.util.function.LongBinaryOperator)>
<java.util.concurrent.atomic.AtomicLongArray: long getAndUpdate(int,java.util.function.LongUnaryOperator)>
<java.util.concurrent.atomic.AtomicLongArray: long getAndDecrement(int)>
<android.security.keystore.KeyPermanentlyInvalidatedException: void <init>(String,Throwable)>
<android.security.keystore.KeyPermanentlyInvalidatedException: void <init>(String)>
<android.security.keystore.KeyPermanentlyInvalidatedException: void <init>()>
<android.app.admin.SecurityLog.SecurityEvent: int describeContents()>
<android.app.admin.SecurityLog.SecurityEvent: long getTimeNanos()>
<android.app.admin.SecurityLog.SecurityEvent: long getId()>
<android.app.admin.SecurityLog.SecurityEvent: void <init>(long,byte[])>
<android.app.admin.SecurityLog.SecurityEvent: java.lang.Object getData()>
<android.app.admin.SecurityLog.SecurityEvent: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.SecurityLog.SecurityEvent: int getLogLevel()>
<android.app.admin.SecurityLog.SecurityEvent: int getTag()>
<android.hardware.location.NanoAppMessage: int getMessageType()>
<android.hardware.location.NanoAppMessage: byte[] getMessageBody()>
<android.hardware.location.NanoAppMessage: android.hardware.location.NanoAppMessage createMessageToNanoApp(long,int,byte[])>
<android.hardware.location.NanoAppMessage: boolean isBroadcastMessage()>
<android.hardware.location.NanoAppMessage: android.hardware.location.NanoAppMessage createMessageFromNanoApp(long,int,byte[],boolean)>
<android.hardware.location.NanoAppMessage: void writeToParcel(android.os.Parcel,int)>
<android.hardware.location.NanoAppMessage: long getNanoAppId()>
<android.hardware.location.NanoAppMessage: int describeContents()>
<java.security.interfaces.DSAKeyPairGenerator: void initialize(java.security.interfaces.DSAParams,java.security.SecureRandom)>
<java.security.interfaces.DSAKeyPairGenerator: void initialize(int,boolean,java.security.SecureRandom)>
<java.util.OptionalInt: java.util.OptionalInt of(int)>
<java.util.OptionalInt: java.util.OptionalInt empty()>
<java.util.OptionalInt: int orElseGet(java.util.function.IntSupplier)>
<java.util.OptionalInt: int orElseThrow(java.util.function.Supplier)>
<java.util.OptionalInt: int orElse(int)>
<java.util.OptionalInt: int getAsInt()>
<java.util.OptionalInt: boolean isPresent()>
<java.util.OptionalInt: void ifPresent(java.util.function.IntConsumer)>
<java.util.HashSet: void <init>()>
<java.util.HashSet: void <init>(int,float)>
<java.util.HashSet: int size()>
<java.util.HashSet: java.lang.Object clone()>
<java.util.HashSet: void <init>(java.util.Collection)>
<java.util.HashSet: java.util.Iterator iterator()>
<java.util.HashSet: void <init>(int)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.OptionalInt findAny()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.OptionalInt reduce(java.util.function.IntBinaryOperator)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream sorted()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.OptionalDouble average()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.OptionalInt min()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: int sum()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream sequential()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream mapToDouble(java.util.function.IntToDoubleFunction)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: long count()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.PrimitiveIterator.OfInt iterator()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: boolean anyMatch(java.util.function.IntPredicate)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream limit(long)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.LongStream mapToLong(java.util.function.IntToLongFunction)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream peek(java.util.function.IntConsumer)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream flatMap(java.util.function.IntFunction)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream map(java.util.function.IntUnaryOperator)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.Stream mapToObj(java.util.function.IntFunction)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream rangeClosed(int,int)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: boolean allMatch(java.util.function.IntPredicate)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.Spliterator.OfInt spliterator()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: void forEach(java.util.function.IntConsumer)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream generate(java.util.function.IntSupplier)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream of(int)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.LongStream asLongStream()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.IntSummaryStatistics summaryStatistics()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream iterate(int,java.util.function.IntUnaryOperator)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.OptionalInt max()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: void forEachOrdered(java.util.function.IntConsumer)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream.Builder builder()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream asDoubleStream()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: R collect(java.util.function.Supplier,java.util.function.ObjIntConsumer,java.util.function.BiConsumer)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream of(int...)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream distinct()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: int reduce(int,java.util.function.IntBinaryOperator)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: int[] toArray()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream filter(java.util.function.IntPredicate)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream empty()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream range(int,int)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: boolean noneMatch(java.util.function.IntPredicate)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.Stream boxed()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream concat(java.util.stream.IntStream,java.util.stream.IntStream)>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream parallel()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.OptionalInt findFirst()>
<java.util.stream.IntStream extends java.util.stream.BaseStream: java.util.stream.IntStream skip(long)>
<android.telecom.RemoteConnection.Callback: void onRingbackRequested(android.telecom.RemoteConnection,boolean)>
<android.telecom.RemoteConnection.Callback: void <init>()>
<android.telecom.RemoteConnection.Callback: void onDestroyed(android.telecom.RemoteConnection)>
<android.telecom.RemoteConnection.Callback: void onDisconnected(android.telecom.RemoteConnection,android.telecom.DisconnectCause)>
<android.telecom.RemoteConnection.Callback: void onVideoStateChanged(android.telecom.RemoteConnection,int)>
<android.telecom.RemoteConnection.Callback: void onCallerDisplayNameChanged(android.telecom.RemoteConnection,java.lang.String,int)>
<android.telecom.RemoteConnection.Callback: void onVoipAudioChanged(android.telecom.RemoteConnection,boolean)>
<android.telecom.RemoteConnection.Callback: void onPostDialWait(android.telecom.RemoteConnection,java.lang.String)>
<android.telecom.RemoteConnection.Callback: void onConferenceChanged(android.telecom.RemoteConnection,android.telecom.RemoteConference)>
<android.telecom.RemoteConnection.Callback: void onExtrasChanged(android.telecom.RemoteConnection,android.os.Bundle)>
<android.telecom.RemoteConnection.Callback: void onStatusHintsChanged(android.telecom.RemoteConnection,android.telecom.StatusHints)>
<android.telecom.RemoteConnection.Callback: void onStateChanged(android.telecom.RemoteConnection,int)>
<android.telecom.RemoteConnection.Callback: void onPostDialChar(android.telecom.RemoteConnection,char)>
<android.telecom.RemoteConnection.Callback: void onVideoProviderChanged(android.telecom.RemoteConnection,android.telecom.RemoteConnection.VideoProvider)>
<android.telecom.RemoteConnection.Callback: void onConnectionCapabilitiesChanged(android.telecom.RemoteConnection,int)>
<android.telecom.RemoteConnection.Callback: void onAddressChanged(android.telecom.RemoteConnection,android.net.Uri,int)>
<android.telecom.RemoteConnection.Callback: void onConferenceableConnectionsChanged(android.telecom.RemoteConnection,java.util.List)>
<android.telecom.RemoteConnection.Callback: void onConnectionEvent(android.telecom.RemoteConnection,java.lang.String,android.os.Bundle)>
<android.telecom.RemoteConnection.Callback: void onConnectionPropertiesChanged(android.telecom.RemoteConnection,int)>
<android.util.JsonWriter: void flush()>
<android.util.JsonWriter: void setIndent(java.lang.String)>
<android.util.JsonWriter: boolean isLenient()>
<android.util.JsonWriter: android.util.JsonWriter beginArray()>
<android.util.JsonWriter: android.util.JsonWriter beginObject()>
<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>
<android.util.JsonWriter: void close()>
<android.util.JsonWriter: android.util.JsonWriter value(double)>
<android.util.JsonWriter: android.util.JsonWriter value(java.lang.Number)>
<android.util.JsonWriter: void <init>(java.io.Writer)>
<android.util.JsonWriter: android.util.JsonWriter value(java.lang.String)>
<android.util.JsonWriter: android.util.JsonWriter value(long)>
<android.util.JsonWriter: android.util.JsonWriter nullValue()>
<android.util.JsonWriter: void setLenient(boolean)>
<android.util.JsonWriter: android.util.JsonWriter endObject()>
<android.util.JsonWriter: android.util.JsonWriter value(boolean)>
<android.util.JsonWriter: android.util.JsonWriter endArray()>
<javax.crypto.NoSuchPaddingException: void <init>()>
<javax.crypto.NoSuchPaddingException: void <init>(String)>
<org.w3c.dom.DOMException: void <init>(short,String)>
<java.util.AbstractMap.SimpleEntry: void <init>(java.util.Map.Entry)>
<java.util.AbstractMap.SimpleEntry: void <init>(K,V)>
<java.util.AbstractMap.SimpleEntry: V setValue(V)>
<java.util.AbstractMap.SimpleEntry: V getValue()>
<java.util.AbstractMap.SimpleEntry: K getKey()>
<android.widget.ResourceCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,int)>
<android.widget.ResourceCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,int,int,int)>
<android.widget.ResourceCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,int,int)>
<android.widget.ResourceCursorTreeAdapter: android.view.View newChildView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>
<android.widget.ResourceCursorTreeAdapter: android.view.View newGroupView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>
<org.xml.sax.InputSource: java.lang.String getEncoding()>
<org.xml.sax.InputSource: void setCharacterStream(java.io.Reader)>
<org.xml.sax.InputSource: java.io.InputStream getByteStream()>
<org.xml.sax.InputSource: java.lang.String getSystemId()>
<org.xml.sax.InputSource: void <init>(String)>
<org.xml.sax.InputSource: void setByteStream(java.io.InputStream)>
<org.xml.sax.InputSource: void setSystemId(java.lang.String)>
<org.xml.sax.InputSource: java.io.Reader getCharacterStream()>
<org.xml.sax.InputSource: void setEncoding(java.lang.String)>
<org.xml.sax.InputSource: void <init>(java.io.InputStream)>
<org.xml.sax.InputSource: void <init>(java.io.Reader)>
<org.xml.sax.InputSource: void setPublicId(java.lang.String)>
<org.xml.sax.InputSource: void <init>()>
<org.xml.sax.InputSource: java.lang.String getPublicId()>
<android.app.assist.AssistStructure.ViewNode: java.lang.String[] getAutofillHints()>
<android.app.assist.AssistStructure.ViewNode: java.lang.String getWebDomain()>
<android.app.assist.AssistStructure.ViewNode: java.lang.String getWebScheme()>
<android.app.assist.AssistStructure.ViewNode: CharSequence getText()>
<android.app.assist.AssistStructure.ViewNode: android.view.ViewStructure.HtmlInfo getHtmlInfo()>
<android.app.assist.AssistStructure.ViewNode: boolean isClickable()>
<android.app.assist.AssistStructure.ViewNode: boolean isAssistBlocked()>
<android.app.assist.AssistStructure.ViewNode: CharSequence[] getAutofillOptions()>
<android.app.assist.AssistStructure.ViewNode: int getInputType()>
<android.app.assist.AssistStructure.ViewNode: int getTextStyle()>
<android.app.assist.AssistStructure.ViewNode: int getVisibility()>
<android.app.assist.AssistStructure.ViewNode: boolean isFocused()>
<android.app.assist.AssistStructure.ViewNode: boolean isOpaque()>
<android.app.assist.AssistStructure.ViewNode: int getHeight()>
<android.app.assist.AssistStructure.ViewNode: int getImportantForAutofill()>
<android.app.assist.AssistStructure.ViewNode: int getScrollY()>
<android.app.assist.AssistStructure.ViewNode: java.lang.String getIdType()>
<android.app.assist.AssistStructure.ViewNode: int getTextColor()>
<android.app.assist.AssistStructure.ViewNode: boolean isActivated()>
<android.app.assist.AssistStructure.ViewNode: java.lang.String getIdPackage()>
<android.app.assist.AssistStructure.ViewNode: int getMaxTextLength()>
<android.app.assist.AssistStructure.ViewNode: int getTextSelectionStart()>
<android.app.assist.AssistStructure.ViewNode: boolean isSelected()>
<android.app.assist.AssistStructure.ViewNode: android.os.LocaleList getLocaleList()>
<android.app.assist.AssistStructure.ViewNode: java.lang.String getTextIdEntry()>
<android.app.assist.AssistStructure.ViewNode: boolean isAccessibilityFocused()>
<android.app.assist.AssistStructure.ViewNode: int getScrollX()>
<android.app.assist.AssistStructure.ViewNode: int getTextBackgroundColor()>
<android.app.assist.AssistStructure.ViewNode: int getChildCount()>
<android.app.assist.AssistStructure.ViewNode: java.lang.String getClassName()>
<android.app.assist.AssistStructure.ViewNode: boolean isCheckable()>
<android.app.assist.AssistStructure.ViewNode: int getId()>
<android.app.assist.AssistStructure.ViewNode: CharSequence getContentDescription()>
<android.app.assist.AssistStructure.ViewNode: java.lang.String getIdEntry()>
<android.app.assist.AssistStructure.ViewNode: int getTop()>
<android.app.assist.AssistStructure.ViewNode: boolean isChecked()>
<android.app.assist.AssistStructure.ViewNode: android.os.Bundle getExtras()>
<android.app.assist.AssistStructure.ViewNode: boolean isFocusable()>
<android.app.assist.AssistStructure.ViewNode: int getWidth()>
<android.app.assist.AssistStructure.ViewNode: float getElevation()>
<android.app.assist.AssistStructure.ViewNode: float getTextSize()>
<android.app.assist.AssistStructure.ViewNode: int getTextSelectionEnd()>
<android.app.assist.AssistStructure.ViewNode: int getMaxTextEms()>
<android.app.assist.AssistStructure.ViewNode: int[] getTextLineCharOffsets()>
<android.app.assist.AssistStructure.ViewNode: boolean isEnabled()>
<android.app.assist.AssistStructure.ViewNode: android.graphics.Matrix getTransformation()>
<android.app.assist.AssistStructure.ViewNode: boolean isLongClickable()>
<android.app.assist.AssistStructure.ViewNode: int[] getTextLineBaselines()>
<android.app.assist.AssistStructure.ViewNode: float getAlpha()>
<android.app.assist.AssistStructure.ViewNode: void <init>()>
<android.app.assist.AssistStructure.ViewNode: java.lang.String getHint()>
<android.app.assist.AssistStructure.ViewNode: android.app.assist.AssistStructure.ViewNode getChildAt(int)>
<android.app.assist.AssistStructure.ViewNode: boolean isContextClickable()>
<android.app.assist.AssistStructure.ViewNode: int getAutofillType()>
<android.app.assist.AssistStructure.ViewNode: int getMinTextEms()>
<android.app.assist.AssistStructure.ViewNode: int getLeft()>
<android.app.assist.AssistStructure.ViewNode: android.view.autofill.AutofillId getAutofillId()>
<android.app.assist.AssistStructure.ViewNode: android.view.autofill.AutofillValue getAutofillValue()>
<java.text.RuleBasedCollator: java.text.CollationElementIterator getCollationElementIterator(java.text.CharacterIterator)>
<java.text.RuleBasedCollator: void <init>(String)>
<java.text.RuleBasedCollator: java.text.CollationElementIterator getCollationElementIterator(java.lang.String)>
<java.text.RuleBasedCollator: java.lang.String getRules()>
<java.text.RuleBasedCollator: java.text.CollationKey getCollationKey(java.lang.String)>
<java.text.RuleBasedCollator: int compare(java.lang.String,java.lang.String)>
<java.util.concurrent.Semaphore: int drainPermits()>
<java.util.concurrent.Semaphore: boolean isFair()>
<java.util.concurrent.Semaphore: boolean tryAcquire()>
<java.util.concurrent.Semaphore: void acquire()>
<java.util.concurrent.Semaphore: boolean tryAcquire(int)>
<java.util.concurrent.Semaphore: void acquireUninterruptibly(int)>
<java.util.concurrent.Semaphore: int getQueueLength()>
<java.util.concurrent.Semaphore: void <init>(int,boolean)>
<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.Semaphore: void reducePermits(int)>
<java.util.concurrent.Semaphore: java.util.Collection getQueuedThreads()>
<java.util.concurrent.Semaphore: void acquireUninterruptibly()>
<java.util.concurrent.Semaphore: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>
<java.util.concurrent.Semaphore: void release(int)>
<java.util.concurrent.Semaphore: void release()>
<java.util.concurrent.Semaphore: int availablePermits()>
<java.util.concurrent.Semaphore: void acquire(int)>
<java.util.concurrent.Semaphore: void <init>(int)>
<java.time.MonthDay: long getLong(java.time.temporal.TemporalField)>
<java.time.MonthDay: java.time.MonthDay now(java.time.Clock)>
<java.time.MonthDay: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>
<java.time.MonthDay: java.lang.String format(java.time.format.DateTimeFormatter)>
<java.time.MonthDay: java.time.MonthDay of(int,int)>
<java.time.MonthDay: java.time.LocalDate atYear(int)>
<java.time.MonthDay: boolean isAfter(java.time.MonthDay)>
<java.time.MonthDay: java.time.MonthDay now()>
<java.time.MonthDay: java.time.MonthDay parse(CharSequence,java.time.format.DateTimeFormatter)>
<java.time.MonthDay: java.time.MonthDay from(java.time.temporal.TemporalAccessor)>
<java.time.MonthDay: java.time.MonthDay withDayOfMonth(int)>
<java.time.MonthDay: java.time.MonthDay withMonth(int)>
<java.time.MonthDay: int compareTo(java.time.MonthDay)>
<java.time.MonthDay: java.time.MonthDay parse(CharSequence)>
<java.time.MonthDay: java.time.Month getMonth()>
<java.time.MonthDay: boolean isSupported(java.time.temporal.TemporalField)>
<java.time.MonthDay: boolean isValidYear(int)>
<java.time.MonthDay: boolean isBefore(java.time.MonthDay)>
<java.time.MonthDay: int getMonthValue()>
<java.time.MonthDay: int getDayOfMonth()>
<java.time.MonthDay: java.time.MonthDay with(java.time.Month)>
<java.time.MonthDay: java.time.MonthDay now(java.time.ZoneId)>
<java.time.MonthDay: java.time.MonthDay of(java.time.Month,int)>
<android.app.FragmentBreadCrumbs: void setActivity(android.app.Activity)>
<android.app.FragmentBreadCrumbs: void <init>(android.content.Context,android.util.AttributeSet)>
<android.app.FragmentBreadCrumbs: void setOnBreadCrumbClickListener(android.app.FragmentBreadCrumbs.OnBreadCrumbClickListener)>
<android.app.FragmentBreadCrumbs: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.app.FragmentBreadCrumbs: void setParentTitle(CharSequence,CharSequence,android.view.View.OnClickListener)>
<android.app.FragmentBreadCrumbs: void setMaxVisible(int)>
<android.app.FragmentBreadCrumbs: void <init>(android.content.Context)>
<android.app.FragmentBreadCrumbs: void onBackStackChanged()>
<android.app.FragmentBreadCrumbs: void setTitle(CharSequence,CharSequence)>
<android.os.VintfObject: java.util.Map getVndkSnapshots()>
<android.os.VintfObject: java.lang.String[] getHalNamesAndVersions()>
<android.os.VintfObject: java.lang.Long getTargetFrameworkCompatibilityMatrixVersion()>
<android.os.VintfObject: java.lang.String getSepolicyVersion()>
<android.os.VintfObject: java.lang.String[] report()>
<android.provider.Settings.Secure: android.net.Uri getUriFor(java.lang.String)>
<android.provider.Settings.Secure: long getLong(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings.Secure: void <init>()>
<android.provider.Settings.Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings.Secure: float getFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings.Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings.Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings.Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Settings.Secure: float getFloat(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings.Secure: long getLong(android.content.ContentResolver,java.lang.String,long)>
<android.provider.Settings.Secure: int getInt(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings.Secure: void resetToDefaults(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings.Secure: void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)>
<android.provider.Settings.Secure: boolean isLocationProviderEnabled(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings.Secure: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings.Secure: boolean putLong(android.content.ContentResolver,java.lang.String,long)>
<android.provider.Settings.Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.hardware.usb.UsbConstants: void <init>()>
<android.telecom.Connection: java.lang.String stateToString(int)>
<android.telecom.Connection: void onAudioStateChanged(android.telecom.AudioState)>
<android.telecom.Connection: void putExtras(android.os.Bundle)>
<android.telecom.Connection: void onSeparate()>
<android.telecom.Connection: void onStopDtmfTone()>
<android.telecom.Connection: void setVideoState(int)>
<android.telecom.Connection: int getConnectionProperties()>
<android.telecom.Connection: java.util.List getConferenceables()>
<android.telecom.Connection: void onShowIncomingCallUi()>
<android.telecom.Connection: void onHandoverComplete()>
<android.telecom.Connection: void sendRttInitiationSuccess()>
<android.telecom.Connection: void removeExtras(java.util.List)>
<android.telecom.Connection: void setInitializing()>
<android.telecom.Connection: android.telecom.AudioState getAudioState()>
<android.telecom.Connection: android.net.Uri getAddress()>
<android.telecom.Connection: void onStateChanged(int)>
<android.telecom.Connection: void setAudioRoute(int)>
<android.telecom.Connection: void setConnectionProperties(int)>
<android.telecom.Connection: void onDeflect(android.net.Uri)>
<android.telecom.Connection: void sendRttSessionRemotelyTerminated()>
<android.telecom.Connection: void onUnhold()>
<android.telecom.Connection: void onAbort()>
<android.telecom.Connection: void onAnswer(int)>
<android.telecom.Connection: void onReject()>
<android.telecom.Connection: android.telecom.StatusHints getStatusHints()>
<android.telecom.Connection: void onHold()>
<android.telecom.Connection: void setStatusHints(android.telecom.StatusHints)>
<android.telecom.Connection: void onPlayDtmfTone(char)>
<android.telecom.Connection: void setConnectionCapabilities(int)>
<android.telecom.Connection: java.lang.String capabilitiesToString(int)>
<android.telecom.Connection: java.lang.String propertiesToString(int)>
<android.telecom.Connection: int getCallerDisplayNamePresentation()>
<android.telecom.Connection: void setNextPostDialChar(char)>
<android.telecom.Connection: void setPulling()>
<android.telecom.Connection: void <init>()>
<android.telecom.Connection: android.telecom.Conference getConference()>
<android.telecom.Connection: void setAddress(android.net.Uri,int)>
<android.telecom.Connection: void setCallerDisplayName(java.lang.String,int)>
<android.telecom.Connection: int getState()>
<android.telecom.Connection: android.telecom.Connection createCanceledConnection()>
<android.telecom.Connection: void destroy()>
<android.telecom.Connection: java.lang.String getCallerDisplayName()>
<android.telecom.Connection: void onDisconnect()>
<android.telecom.Connection: void onCallAudioStateChanged(android.telecom.CallAudioState)>
<android.telecom.Connection: void setActive()>
<android.telecom.Connection: void onPostDialContinue(boolean)>
<android.telecom.Connection: void onSilence()>
<android.telecom.Connection: void removeExtras(java.lang.String...)>
<android.telecom.Connection: void setDialing()>
<android.telecom.Connection: android.telecom.Connection createFailedConnection(android.telecom.DisconnectCause)>
<android.telecom.Connection: void setDisconnected(android.telecom.DisconnectCause)>
<android.telecom.Connection: void setVideoProvider(android.telecom.Connection.VideoProvider)>
<android.telecom.Connection: android.telecom.Connection.VideoProvider getVideoProvider()>
<android.telecom.Connection: void setExtras(android.os.Bundle)>
<android.telecom.Connection: void setRinging()>
<android.telecom.Connection: android.telecom.DisconnectCause getDisconnectCause()>
<android.telecom.Connection: void setInitialized()>
<android.telecom.Connection: android.telecom.CallAudioState getCallAudioState()>
<android.telecom.Connection: void onAnswer()>
<android.telecom.Connection: void setConferenceableConnections(java.util.List)>
<android.telecom.Connection: void setRingbackRequested(boolean)>
<android.telecom.Connection: boolean isRingbackRequested()>
<android.telecom.Connection: void sendRttInitiationFailure(int)>
<android.telecom.Connection: void setConferenceables(java.util.List)>
<android.telecom.Connection: int getConnectionCapabilities()>
<android.telecom.Connection: void onStopRtt()>
<android.telecom.Connection: void handleRttUpgradeResponse(android.telecom.Connection.RttTextStream)>
<android.telecom.Connection: void onStartRtt(android.telecom.Connection.RttTextStream)>
<android.telecom.Connection: void setOnHold()>
<android.telecom.Connection: void setPostDialWait(java.lang.String)>
<android.telecom.Connection: android.os.Bundle getExtras()>
<android.telecom.Connection: void requestBluetoothAudio(android.bluetooth.BluetoothDevice)>
<android.telecom.Connection: int getAddressPresentation()>
<android.telecom.Connection: void onExtrasChanged(android.os.Bundle)>
<android.telecom.Connection: void setAudioModeIsVoip(boolean)>
<android.telecom.Connection: void sendRemoteRttRequest()>
<android.telecom.Connection: void onReject(java.lang.String)>
<android.telecom.Connection: boolean getAudioModeIsVoip()>
<android.telecom.Connection: void onPullExternalCall()>
<android.telecom.Connection: void sendConnectionEvent(java.lang.String,android.os.Bundle)>
<android.telecom.Connection: void onCallEvent(java.lang.String,android.os.Bundle)>
<android.provider.ContactsContract.CommonDataKinds.Phone: CharSequence getTypeLabel(android.content.res.Resources,int,CharSequence)>
<android.provider.ContactsContract.CommonDataKinds.Phone: int getTypeLabelResource(int)>
<android.app.VoiceInteractor: void notifyDirectActionsChanged()>
<android.app.VoiceInteractor: boolean unregisterOnDestroyedCallback(Runnable)>
<android.app.VoiceInteractor: boolean isDestroyed()>
<android.app.VoiceInteractor: boolean submitRequest(android.app.VoiceInteractor.Request)>
<android.app.VoiceInteractor: boolean submitRequest(android.app.VoiceInteractor.Request,java.lang.String)>
<android.app.VoiceInteractor: boolean[] supportsCommands(java.lang.String[])>
<android.app.VoiceInteractor: android.app.VoiceInteractor.Request getActiveRequest(java.lang.String)>
<android.app.VoiceInteractor: boolean registerOnDestroyedCallback(java.util.concurrent.Executor,Runnable)>
<android.app.VoiceInteractor: android.app.VoiceInteractor.Request[] getActiveRequests()>
<android.view.View.OnApplyWindowInsetsListener: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)>
<java.security.cert.CollectionCertStoreParameters: java.util.Collection getCollection()>
<java.security.cert.CollectionCertStoreParameters: void <init>()>
<java.security.cert.CollectionCertStoreParameters: java.lang.Object clone()>
<java.security.cert.CollectionCertStoreParameters: void <init>(java.util.Collection)>
<java.text.StringCharacterIterator: int getBeginIndex()>
<java.text.StringCharacterIterator: char setIndex(int)>
<java.text.StringCharacterIterator: char first()>
<java.text.StringCharacterIterator: char previous()>
<java.text.StringCharacterIterator: void <init>(String)>
<java.text.StringCharacterIterator: void <init>(String,int)>
<java.text.StringCharacterIterator: int getEndIndex()>
<java.text.StringCharacterIterator: char last()>
<java.text.StringCharacterIterator: char current()>
<java.text.StringCharacterIterator: char next()>
<java.text.StringCharacterIterator: java.lang.Object clone()>
<java.text.StringCharacterIterator: void <init>(String,int,int,int)>
<java.text.StringCharacterIterator: void setText(java.lang.String)>
<java.text.StringCharacterIterator: int getIndex()>
<android.util.MutableChar: void <init>(char)>
<android.app.usage.CacheQuotaHint.Builder: void <init>()>
<android.app.usage.CacheQuotaHint.Builder: android.app.usage.CacheQuotaHint.Builder setUsageStats(android.app.usage.UsageStats)>
<android.app.usage.CacheQuotaHint.Builder: android.app.usage.CacheQuotaHint.Builder setUid(int)>
<android.app.usage.CacheQuotaHint.Builder: android.app.usage.CacheQuotaHint.Builder setVolumeUuid(java.lang.String)>
<android.app.usage.CacheQuotaHint.Builder: android.app.usage.CacheQuotaHint.Builder setQuota(long)>
<android.app.usage.CacheQuotaHint.Builder: android.app.usage.CacheQuotaHint build()>
<android.app.usage.CacheQuotaHint.Builder: void <init>(android.app.usage.CacheQuotaHint)>
<android.speech.tts.TextToSpeech: int speak(java.lang.String,int,java.util.HashMap)>
<android.speech.tts.TextToSpeech: int speak(CharSequence,int,android.os.Bundle,java.lang.String)>
<android.speech.tts.TextToSpeech: java.util.Set getAvailableLanguages()>
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.lang.String)>
<android.speech.tts.TextToSpeech: int setVoice(android.speech.tts.Voice)>
<android.speech.tts.TextToSpeech: java.util.List getEngines()>
<android.speech.tts.TextToSpeech: int stop()>
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.lang.String,@RawResint)>
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.String,java.lang.String,@RawResint)>
<android.speech.tts.TextToSpeech: java.util.Locale getDefaultLanguage()>
<android.speech.tts.TextToSpeech: int isLanguageAvailable(java.util.Locale)>
<android.speech.tts.TextToSpeech: int setPitch(float)>
<android.speech.tts.TextToSpeech: boolean isSpeaking()>
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech.OnInitListener,String)>
<android.speech.tts.TextToSpeech: boolean areDefaultsEnforced()>
<android.speech.tts.TextToSpeech: java.util.Locale getLanguage()>
<android.speech.tts.TextToSpeech: int playEarcon(java.lang.String,int,android.os.Bundle,java.lang.String)>
<android.speech.tts.TextToSpeech: int setEngineByPackageName(java.lang.String)>
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech.OnInitListener)>
<android.speech.tts.TextToSpeech: int playSilence(long,int,java.util.HashMap)>
<android.speech.tts.TextToSpeech: int setOnUtteranceProgressListener(android.speech.tts.UtteranceProgressListener)>
<android.speech.tts.TextToSpeech: int setAudioAttributes(android.media.AudioAttributes)>
<android.speech.tts.TextToSpeech: int synthesizeToFile(CharSequence,android.os.Bundle,java.io.File,java.lang.String)>
<android.speech.tts.TextToSpeech: int playSilentUtterance(long,int,java.lang.String)>
<android.speech.tts.TextToSpeech: int addSpeech(CharSequence,java.lang.String,@RawResint)>
<android.speech.tts.TextToSpeech: int playEarcon(java.lang.String,int,java.util.HashMap)>
<android.speech.tts.TextToSpeech: int setLanguage(java.util.Locale)>
<android.speech.tts.TextToSpeech: int addSpeech(CharSequence,java.io.File)>
<android.speech.tts.TextToSpeech: int getMaxSpeechInputLength()>
<android.speech.tts.TextToSpeech: int setSpeechRate(float)>
<android.speech.tts.TextToSpeech: android.speech.tts.Voice getVoice()>
<android.speech.tts.TextToSpeech: int synthesizeToFile(java.lang.String,java.util.HashMap,java.lang.String)>
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.io.File)>
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.String,java.lang.String)>
<android.speech.tts.TextToSpeech: int setOnUtteranceCompletedListener(android.speech.tts.TextToSpeech.OnUtteranceCompletedListener)>
<android.speech.tts.TextToSpeech: java.util.Set getFeatures(java.util.Locale)>
<android.speech.tts.TextToSpeech: java.lang.String getDefaultEngine()>
<android.speech.tts.TextToSpeech: android.speech.tts.Voice getDefaultVoice()>
<android.speech.tts.TextToSpeech: java.util.Set getVoices()>
<android.speech.tts.TextToSpeech: void shutdown()>
<android.os.CountDownTimer: void onTick(long)>
<android.os.CountDownTimer: void onFinish()>
<android.os.CountDownTimer: android.os.CountDownTimer start()>
<android.os.CountDownTimer: void cancel()>
<android.os.CountDownTimer: void <init>(long,long)>
<org.xml.sax.ext.DeclHandler: void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.ext.DeclHandler: void elementDecl(java.lang.String,java.lang.String)>
<org.xml.sax.ext.DeclHandler: void internalEntityDecl(java.lang.String,java.lang.String)>
<org.xml.sax.ext.DeclHandler: void externalEntityDecl(java.lang.String,java.lang.String,java.lang.String)>
<android.app.contentsuggestions.ClassificationsRequest.Builder: android.app.contentsuggestions.ClassificationsRequest build()>
<android.app.contentsuggestions.ClassificationsRequest.Builder: void <init>(java.util.List)>
<android.app.contentsuggestions.ClassificationsRequest.Builder: android.app.contentsuggestions.ClassificationsRequest.Builder setExtras(android.os.Bundle)>
<android.provider.ContactsContract.Intents.Insert: void <init>()>
<android.app.Instrumentation.ActivityResult: void <init>(int,android.content.Intent)>
<android.app.Instrumentation.ActivityResult: android.content.Intent getResultData()>
<android.app.Instrumentation.ActivityResult: int getResultCode()>
<android.bluetooth.BluetoothHidDeviceAppQosSettings: int getDelayVariation()>
<android.bluetooth.BluetoothHidDeviceAppQosSettings: int getServiceType()>
<android.bluetooth.BluetoothHidDeviceAppQosSettings: int getPeakBandwidth()>
<android.bluetooth.BluetoothHidDeviceAppQosSettings: int getTokenRate()>
<android.bluetooth.BluetoothHidDeviceAppQosSettings: int getLatency()>
<android.bluetooth.BluetoothHidDeviceAppQosSettings: int getTokenBucketSize()>
<android.bluetooth.BluetoothHidDeviceAppQosSettings: void writeToParcel(android.os.Parcel,int)>
<android.bluetooth.BluetoothHidDeviceAppQosSettings: void <init>(int,int,int,int,int,int)>
<android.bluetooth.BluetoothHidDeviceAppQosSettings: int describeContents()>
<java.io.FileReader: void <init>(java.io.File)>
<java.io.FileReader: void <init>(java.io.FileDescriptor)>
<java.io.FileReader: void <init>(String)>
<android.webkit.GeolocationPermissions.Callback: void invoke(java.lang.String,boolean,boolean)>
<android.service.voice.AlwaysOnHotwordDetector: android.content.Intent createReEnrollIntent()>
<android.service.voice.AlwaysOnHotwordDetector: android.content.Intent createUnEnrollIntent()>
<android.service.voice.AlwaysOnHotwordDetector: boolean startRecognition(int)>
<android.service.voice.AlwaysOnHotwordDetector: int getSupportedRecognitionModes()>
<android.service.voice.AlwaysOnHotwordDetector: boolean stopRecognition()>
<android.service.voice.AlwaysOnHotwordDetector: android.content.Intent createEnrollIntent()>
<java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.util.Properties)>
<java.sql.DriverManager: void registerDriver(java.sql.Driver)>
<java.sql.DriverManager: java.sql.Driver getDriver(java.lang.String)>
<java.sql.DriverManager: java.io.PrintStream getLogStream()>
<java.sql.DriverManager: void setLogStream(java.io.PrintStream)>
<java.sql.DriverManager: void setLoginTimeout(int)>
<java.sql.DriverManager: int getLoginTimeout()>
<java.sql.DriverManager: void setLogWriter(java.io.PrintWriter)>
<java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String)>
<java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)>
<java.sql.DriverManager: void println(java.lang.String)>
<java.sql.DriverManager: java.util.Enumeration getDrivers()>
<java.sql.DriverManager: java.io.PrintWriter getLogWriter()>
<java.sql.DriverManager: void deregisterDriver(java.sql.Driver)>
<javax.crypto.ExemptionMechanismSpi: byte[] engineGenExemptionBlob()>
<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<javax.crypto.ExemptionMechanismSpi: void <init>()>
<javax.crypto.ExemptionMechanismSpi: int engineGetOutputSize(int)>
<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key,java.security.AlgorithmParameters)>
<javax.crypto.ExemptionMechanismSpi: int engineGenExemptionBlob(byte[],int)>
<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key)>
<android.animation.Animator.AnimatorPauseListener: void onAnimationPause(android.animation.Animator)>
<android.animation.Animator.AnimatorPauseListener: void onAnimationResume(android.animation.Animator)>
<java.util.function.LongSupplier: long getAsLong()>
<java.nio.charset.spi.CharsetProvider: void <init>()>
<java.nio.charset.spi.CharsetProvider: java.nio.charset.Charset charsetForName(java.lang.String)>
<java.nio.charset.spi.CharsetProvider: java.util.Iterator charsets()>
<org.w3c.dom.ls.LSException: void <init>(short,String)>
<android.widget.ImageView: void setBaseline(int)>
<android.widget.ImageView: void setImageTintList(android.content.res.ColorStateList)>
<android.widget.ImageView: boolean getCropToPadding()>
<android.widget.ImageView: void animateTransform(android.graphics.Matrix)>
<android.widget.ImageView: int getImageAlpha()>
<android.widget.ImageView: android.graphics.Matrix getImageMatrix()>
<android.widget.ImageView: void setColorFilter(int,android.graphics.PorterDuff.Mode)>
<android.widget.ImageView: void setImageLevel(int)>
<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ImageView: void setImageTintBlendMode(android.graphics.BlendMode)>
<android.widget.ImageView: void setAlpha(int)>
<android.widget.ImageView: boolean setFrame(int,int,int,int)>
<android.widget.ImageView: void setMaxWidth(int)>
<android.widget.ImageView: void <init>(android.content.Context)>
<android.widget.ImageView: int getMaxHeight()>
<android.widget.ImageView: void setAdjustViewBounds(boolean)>
<android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>
<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()>
<android.widget.ImageView: android.graphics.BlendMode getImageTintBlendMode()>
<android.widget.ImageView: void setColorFilter(android.graphics.ColorFilter)>
<android.widget.ImageView: void clearColorFilter()>
<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ImageView: void setImageURI(android.net.Uri)>
<android.widget.ImageView: void setImageTintMode(android.graphics.PorterDuff.Mode)>
<android.widget.ImageView: boolean getBaselineAlignBottom()>
<android.widget.ImageView: android.content.res.ColorStateList getImageTintList()>
<android.widget.ImageView: int getMaxWidth()>
<android.widget.ImageView: int[] onCreateDrawableState(int)>
<android.widget.ImageView: void setCropToPadding(boolean)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageState(int[],boolean)>
<android.widget.ImageView: void setImageResource(@DrawableResint)>
<android.widget.ImageView: void setImageIcon(android.graphics.drawable.Icon)>
<android.widget.ImageView: android.graphics.ColorFilter getColorFilter()>
<android.widget.ImageView: void setColorFilter(int)>
<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>
<android.widget.ImageView: void setScaleType(android.widget.ImageView.ScaleType)>
<android.widget.ImageView: android.graphics.PorterDuff.Mode getImageTintMode()>
<android.widget.ImageView: void setImageAlpha(int)>
<android.widget.ImageView: android.widget.ImageView.ScaleType getScaleType()>
<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ImageView: boolean getAdjustViewBounds()>
<android.widget.ImageView: void setBaselineAlignBottom(boolean)>
<android.widget.ImageView: void setMaxHeight(int)>
<android.speech.tts.UtteranceProgressListener: void onBeginSynthesis(java.lang.String,int,int,int)>
<android.speech.tts.UtteranceProgressListener: void <init>()>
<android.speech.tts.UtteranceProgressListener: void onError(java.lang.String)>
<android.speech.tts.UtteranceProgressListener: void onDone(java.lang.String)>
<android.speech.tts.UtteranceProgressListener: void onError(java.lang.String,int)>
<android.speech.tts.UtteranceProgressListener: void onRangeStart(java.lang.String,int,int,int)>
<android.speech.tts.UtteranceProgressListener: void onStop(java.lang.String,boolean)>
<android.speech.tts.UtteranceProgressListener: void onAudioAvailable(java.lang.String,byte[])>
<android.speech.tts.UtteranceProgressListener: void onStart(java.lang.String)>
<android.util.LruCache: void entryRemoved(boolean,K,V,V)>
<android.util.LruCache: void <init>(int)>
<android.util.LruCache: int evictionCount()>
<android.util.LruCache: int size()>
<android.util.LruCache: V remove(K)>
<android.util.LruCache: java.util.Map snapshot()>
<android.util.LruCache: int putCount()>
<android.util.LruCache: void trimToSize(int)>
<android.util.LruCache: int hitCount()>
<android.util.LruCache: java.lang.String toString()>
<android.util.LruCache: void evictAll()>
<android.util.LruCache: int createCount()>
<android.util.LruCache: V put(K,V)>
<android.util.LruCache: int missCount()>
<android.util.LruCache: V create(K)>
<android.util.LruCache: void resize(int)>
<android.util.LruCache: int sizeOf(K,V)>
<android.util.LruCache: V get(K)>
<android.util.LruCache: int maxSize()>
<java.nio.channels.NotYetBoundException: void <init>()>
<android.media.tv.TvInputService.RecordingSession: void notifySessionEvent(java.lang.String,android.os.Bundle)>
<android.media.tv.TvInputService.RecordingSession: void notifyTuned(android.net.Uri)>
<android.media.tv.TvInputService.RecordingSession: void onAppPrivateCommand(java.lang.String,android.os.Bundle)>
<android.media.tv.TvInputService.RecordingSession: void onStartRecording(android.net.Uri)>
<android.media.tv.TvInputService.RecordingSession: void onRelease()>
<android.media.tv.TvInputService.RecordingSession: void notifyRecordingStopped(android.net.Uri)>
<android.media.tv.TvInputService.RecordingSession: void <init>(android.content.Context)>
<android.media.tv.TvInputService.RecordingSession: void notifyError(int)>
<android.media.tv.TvInputService.RecordingSession: void onTune(android.net.Uri)>
<android.media.tv.TvInputService.RecordingSession: void onTune(android.net.Uri,android.os.Bundle)>
<android.media.tv.TvInputService.RecordingSession: void onStopRecording()>
<android.net.wifi.WifiScanner.ScanListener extends android.net.wifi.WifiScanner.ActionListener: void onPeriodChanged(int)>
<android.net.wifi.WifiScanner.ScanListener extends android.net.wifi.WifiScanner.ActionListener: void onFullResult(android.net.wifi.ScanResult)>
<android.net.wifi.WifiScanner.ScanListener extends android.net.wifi.WifiScanner.ActionListener: void onResults(android.net.wifi.WifiScanner.ScanData[])>
<android.webkit.WebView.HitTestResult: void setType(int)>
<android.webkit.WebView.HitTestResult: void setExtra(java.lang.String)>
<android.webkit.WebView.HitTestResult: java.lang.String getExtra()>
<android.webkit.WebView.HitTestResult: void <init>()>
<android.webkit.WebView.HitTestResult: int getType()>
<java.security.SecureRandom: java.security.SecureRandom getInstanceStrong()>
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>
<java.security.SecureRandom: void <init>(byte[])>
<java.security.SecureRandom: byte[] getSeed(int)>
<java.security.SecureRandom: byte[] generateSeed(int)>
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.security.Provider)>
<java.security.SecureRandom: java.lang.String getAlgorithm()>
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>
<java.security.SecureRandom: void <init>()>
<java.security.SecureRandom: java.security.Provider getProvider()>
<java.security.SecureRandom: int next(int)>
<java.security.SecureRandom: void setSeed(byte[])>
<java.security.SecureRandom: void <init>(java.security.SecureRandomSpi,java.security.Provider)>
<android.Manifest: void <init>()>
<android.media.tv.TvStreamConfig: int getGeneration()>
<android.media.tv.TvStreamConfig: int getType()>
<android.media.tv.TvStreamConfig: int describeContents()>
<android.media.tv.TvStreamConfig: int getMaxHeight()>
<android.media.tv.TvStreamConfig: int getStreamId()>
<android.media.tv.TvStreamConfig: int getMaxWidth()>
<android.media.tv.TvStreamConfig: void writeToParcel(android.os.Parcel,int)>
<android.media.MediaScannerConnection.OnScanCompletedListener: void onScanCompleted(java.lang.String,android.net.Uri)>
<java.lang.reflect.Executable: boolean isVarArgs()>
<java.lang.reflect.Executable: java.lang.annotation.Annotation[][] getParameterAnnotations()>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericExceptionTypes()>
<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericParameterTypes()>
<java.lang.reflect.Executable: int getParameterCount()>
<java.lang.reflect.Executable: java.lang.String toGenericString()>
<java.lang.reflect.Executable: java.lang.Class[] getExceptionTypes()>
<java.lang.reflect.Executable: boolean isSynthetic()>
<java.lang.reflect.Executable: java.lang.reflect.Parameter[] getParameters()>
<java.lang.reflect.Executable: boolean isAnnotationPresent(java.lang.Class)>
<java.lang.reflect.Executable: java.lang.Class[] getParameterTypes()>
<android.view.View.DragShadowBuilder: void <init>(android.view.View)>
<android.view.View.DragShadowBuilder: void <init>()>
<android.view.View.DragShadowBuilder: android.view.View getView()>
<android.view.View.DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)>
<android.view.View.DragShadowBuilder: void onProvideShadowMetrics(android.graphics.Point,android.graphics.Point)>
<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>
<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>
<java.security.KeyPairGenerator: void initialize(int,java.security.SecureRandom)>
<java.security.KeyPairGenerator: java.lang.String getAlgorithm()>
<java.security.KeyPairGenerator: void <init>(String)>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.lang.String)>
<java.security.KeyPairGenerator: void initialize(int)>
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.security.Provider)>
<java.security.KeyPairGenerator: java.security.Provider getProvider()>
<java.security.KeyPairGenerator: java.security.KeyPair genKeyPair()>
<android.media.audiofx.PresetReverb.OnParameterChangeListener: void onParameterChange(android.media.audiofx.PresetReverb,int,int,short)>
<android.location.LocationRequest: long getExpireAt()>
<android.location.LocationRequest: int getQuality()>
<android.location.LocationRequest: android.location.LocationRequest setQuality(int)>
<android.location.LocationRequest: android.location.LocationRequest setExpireIn(long)>
<android.location.LocationRequest: android.os.WorkSource getWorkSource()>
<android.location.LocationRequest: android.location.LocationRequest setSmallestDisplacement(float)>
<android.location.LocationRequest: void writeToParcel(android.os.Parcel,int)>
<android.location.LocationRequest: android.location.LocationRequest setLocationSettingsIgnored(boolean)>
<android.location.LocationRequest: boolean isLowPowerMode()>
<android.location.LocationRequest: android.location.LocationRequest setNumUpdates(int)>
<android.location.LocationRequest: java.lang.String getProvider()>
<android.location.LocationRequest: android.location.LocationRequest setLowPowerMode(boolean)>
<android.location.LocationRequest: boolean isLocationSettingsIgnored()>
<android.location.LocationRequest: android.location.LocationRequest setFastestInterval(long)>
<android.location.LocationRequest: float getSmallestDisplacement()>
<android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedProvider(java.lang.String,long,float,boolean)>
<android.location.LocationRequest: android.location.LocationRequest create()>
<android.location.LocationRequest: void setHideFromAppOps(boolean)>
<android.location.LocationRequest: int getNumUpdates()>
<android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedCriteria(android.location.Criteria,long,float,boolean)>
<android.location.LocationRequest: void setWorkSource(android.os.WorkSource)>
<android.location.LocationRequest: android.location.LocationRequest setProvider(java.lang.String)>
<android.location.LocationRequest: long getFastestInterval()>
<android.location.LocationRequest: boolean getHideFromAppOps()>
<android.location.LocationRequest: int describeContents()>
<android.location.LocationRequest: android.location.LocationRequest setInterval(long)>
<android.location.LocationRequest: android.location.LocationRequest setExpireAt(long)>
<android.location.LocationRequest: long getInterval()>
<android.media.AudioFocusRequest: int getFocusGain()>
<android.media.AudioFocusRequest: boolean willPauseWhenDucked()>
<android.media.AudioFocusRequest: boolean locksFocus()>
<android.media.AudioFocusRequest: boolean acceptsDelayedFocusGain()>
<android.media.AudioFocusRequest: android.media.AudioAttributes getAudioAttributes()>
<android.media.AudioFocusRequest: android.media.AudioManager.OnAudioFocusChangeListener getOnAudioFocusChangeListener()>
<android.location.Geocoder: void <init>(android.content.Context,java.util.Locale)>
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int,double,double,double,double)>
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>
<android.location.Geocoder: boolean isPresent()>
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)>
<android.location.Geocoder: void <init>(android.content.Context)>
<android.view.Surface.OutOfResourcesException: void <init>()>
<android.view.Surface.OutOfResourcesException: void <init>(String)>
<android.companion.AssociationRequest.Builder: void <init>()>
<android.companion.AssociationRequest.Builder: android.companion.AssociationRequest build()>
<android.companion.AssociationRequest.Builder: android.companion.AssociationRequest.Builder addDeviceFilter(android.companion.DeviceFilter)>
<android.companion.AssociationRequest.Builder: android.companion.AssociationRequest.Builder setSingleDevice(boolean)>
<android.util.PrintStreamPrinter: void <init>(java.io.PrintStream)>
<android.util.PrintStreamPrinter: void println(java.lang.String)>
<android.telephony.ims.ImsMmTelManager: boolean isCapable(@android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.MmTelCapabilityint,int)>
<android.telephony.ims.ImsMmTelManager: void unregisterImsRegistrationCallback(android.telephony.ims.ImsMmTelManager.RegistrationCallback)>
<android.telephony.ims.ImsMmTelManager: void registerMmTelCapabilityCallback(java.util.concurrent.Executor,android.telephony.ims.ImsMmTelManager.CapabilityCallback)>
<android.telephony.ims.ImsMmTelManager: boolean isVtSettingEnabled()>
<android.telephony.ims.ImsMmTelManager: android.telephony.ims.ImsMmTelManager createForSubscriptionId(int)>
<android.telephony.ims.ImsMmTelManager: boolean isAdvancedCallingSettingEnabled()>
<android.telephony.ims.ImsMmTelManager: void setVoWiFiRoamingModeSetting(int)>
<android.telephony.ims.ImsMmTelManager: void setVoWiFiRoamingSettingEnabled(boolean)>
<android.telephony.ims.ImsMmTelManager: void unregisterMmTelCapabilityCallback(android.telephony.ims.ImsMmTelManager.CapabilityCallback)>
<android.telephony.ims.ImsMmTelManager: int getVoWiFiModeSetting()>
<android.telephony.ims.ImsMmTelManager: boolean isVoWiFiSettingEnabled()>
<android.telephony.ims.ImsMmTelManager: void registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.ImsMmTelManager.RegistrationCallback)>
<android.telephony.ims.ImsMmTelManager: void setRttCapabilitySetting(boolean)>
<android.telephony.ims.ImsMmTelManager: void setVoWiFiSettingEnabled(boolean)>
<android.telephony.ims.ImsMmTelManager: boolean isAvailable(@android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.MmTelCapabilityint,int)>
<android.telephony.ims.ImsMmTelManager: void setAdvancedCallingSettingEnabled(boolean)>
<android.telephony.ims.ImsMmTelManager: void setVtSettingEnabled(boolean)>
<android.telephony.ims.ImsMmTelManager: boolean isVoWiFiRoamingSettingEnabled()>
<android.telephony.ims.ImsMmTelManager: int getVoWiFiRoamingModeSetting()>
<android.telephony.ims.ImsMmTelManager: void setVoWiFiNonPersistent(boolean,int)>
<android.telephony.ims.ImsMmTelManager: void setVoWiFiModeSetting(int)>
<android.content.DialogInterface.OnDismissListener: void onDismiss(android.content.DialogInterface)>
<android.service.sms.FinancialSmsService: android.os.IBinder onBind(android.content.Intent)>
<android.service.sms.FinancialSmsService: android.database.CursorWindow onGetSmsMessages(android.os.Bundle)>
<android.bluetooth.BluetoothClass.Service: void <init>()>
<java.util.Dictionary: V put(K,V)>
<java.util.Dictionary: V get(java.lang.Object)>
<java.util.Dictionary: V remove(java.lang.Object)>
<java.util.Dictionary: void <init>()>
<java.util.Dictionary: boolean isEmpty()>
<java.util.Dictionary: int size()>
<java.util.Dictionary: java.util.Enumeration keys()>
<java.util.Dictionary: java.util.Enumeration elements()>
<java.util.concurrent.ForkJoinPool.ManagedBlocker: boolean isReleasable()>
<java.util.concurrent.ForkJoinPool.ManagedBlocker: boolean block()>
<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>
<java.lang.Throwable: void <init>(String,Throwable,boolean,boolean)>
<java.lang.Throwable: void <init>(String)>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>
<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>
<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
<java.lang.Throwable: java.lang.Throwable getCause()>
<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
<java.lang.Throwable: void printStackTrace()>
<java.lang.Throwable: void <init>(String,Throwable)>
<java.lang.Throwable: void <init>(Throwable)>
<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>
<java.lang.Throwable: java.lang.String getMessage()>
<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>
<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
<java.lang.Throwable: void <init>()>
<android.graphics.drawable.LayerDrawable: void setLayerInsetTop(int,int)>
<android.graphics.drawable.LayerDrawable: int getNumberOfLayers()>
<android.graphics.drawable.LayerDrawable: void setLayerInsetRelative(int,int,int,int,int)>
<android.graphics.drawable.LayerDrawable: int getLayerInsetRight(int)>
<android.graphics.drawable.LayerDrawable: int getLayerInsetStart(int)>
<android.graphics.drawable.LayerDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,Runnable,long)>
<android.graphics.drawable.LayerDrawable: int getEndPadding()>
<android.graphics.drawable.LayerDrawable: int getRightPadding()>
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable findDrawableByLayerId(int)>
<android.graphics.drawable.LayerDrawable: int getTopPadding()>
<android.graphics.drawable.LayerDrawable: void setLayerInsetStart(int,int)>
<android.graphics.drawable.LayerDrawable: void setLayerInset(int,int,int,int,int)>
<android.graphics.drawable.LayerDrawable: void setPadding(int,int,int,int)>
<android.graphics.drawable.LayerDrawable: void setLayerGravity(int,int)>
<android.graphics.drawable.LayerDrawable: void setLayerSize(int,int,int)>
<android.graphics.drawable.LayerDrawable: void setPaddingRelative(int,int,int,int)>
<android.graphics.drawable.LayerDrawable: int getLayerInsetTop(int)>
<android.graphics.drawable.LayerDrawable: void <init>(android.graphics.drawable.Drawable[])>
<android.graphics.drawable.LayerDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,Runnable)>
<android.graphics.drawable.LayerDrawable: void setLayerInsetBottom(int,int)>
<android.graphics.drawable.LayerDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.LayerDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.LayerDrawable: int getStartPadding()>
<android.graphics.drawable.LayerDrawable: void setLayerWidth(int,int)>
<android.graphics.drawable.LayerDrawable: void setOpacity(int)>
<android.graphics.drawable.LayerDrawable: int getLayerInsetLeft(int)>
<android.graphics.drawable.LayerDrawable: int getLayerInsetBottom(int)>
<android.graphics.drawable.LayerDrawable: void setLayerInsetLeft(int,int)>
<android.graphics.drawable.LayerDrawable: void setDrawable(int,android.graphics.drawable.Drawable)>
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable getDrawable(int)>
<android.graphics.drawable.LayerDrawable: int findIndexByLayerId(int)>
<android.graphics.drawable.LayerDrawable: void setDither(boolean)>
<android.graphics.drawable.LayerDrawable: int getId(int)>
<android.graphics.drawable.LayerDrawable: int getOpacity()>
<android.graphics.drawable.LayerDrawable: int getLeftPadding()>
<android.graphics.drawable.LayerDrawable: int getLayerHeight(int)>
<android.graphics.drawable.LayerDrawable: void setLayerInsetEnd(int,int)>
<android.graphics.drawable.LayerDrawable: int getBottomPadding()>
<android.graphics.drawable.LayerDrawable: int getLayerInsetEnd(int)>
<android.graphics.drawable.LayerDrawable: void setLayerHeight(int,int)>
<android.graphics.drawable.LayerDrawable: int getLayerWidth(int)>
<android.graphics.drawable.LayerDrawable: int getPaddingMode()>
<android.graphics.drawable.LayerDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.LayerDrawable: void setLayerInsetRight(int,int)>
<android.graphics.drawable.LayerDrawable: int getLayerGravity(int)>
<android.graphics.drawable.LayerDrawable: void setId(int,int)>
<android.graphics.drawable.LayerDrawable: boolean setDrawableByLayerId(int,android.graphics.drawable.Drawable)>
<android.graphics.drawable.LayerDrawable: void setAlpha(int)>
<android.graphics.drawable.LayerDrawable: void setPaddingMode(int)>
<android.graphics.drawable.LayerDrawable: int addLayer(android.graphics.drawable.Drawable)>
<android.media.tv.TvContentRating: java.util.List getSubRatings()>
<android.media.tv.TvContentRating: android.media.tv.TvContentRating createRating(java.lang.String,java.lang.String,java.lang.String,java.lang.String...)>
<android.media.tv.TvContentRating: android.media.tv.TvContentRating unflattenFromString(java.lang.String)>
<android.media.tv.TvContentRating: boolean contains(android.media.tv.TvContentRating)>
<android.media.tv.TvContentRating: java.lang.String getMainRating()>
<android.media.tv.TvContentRating: java.lang.String flattenToString()>
<android.media.tv.TvContentRating: java.lang.String getDomain()>
<android.media.tv.TvContentRating: java.lang.String getRatingSystem()>
<android.media.audiofx.Virtualizer.Settings: void <init>(String)>
<android.media.audiofx.Virtualizer.Settings: void <init>()>
<android.hardware.hdmi.HdmiRecordSources: boolean checkRecordSource(byte[])>
<android.hardware.hdmi.HdmiRecordSources: android.hardware.hdmi.HdmiRecordSources.OwnSource ofOwnSource()>
<android.net.wifi.EasyConnectStatusCallback: void <init>()>
<android.net.wifi.EasyConnectStatusCallback: void onFailure(int)>
<android.net.wifi.EasyConnectStatusCallback: void onConfiguratorSuccess(int)>
<android.net.wifi.EasyConnectStatusCallback: void onEnrolleeSuccess(int)>
<android.net.wifi.EasyConnectStatusCallback: void onProgress(int)>
<android.view.MenuItem.OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>
<android.view.WindowAnimationFrameStats: int describeContents()>
<android.view.WindowAnimationFrameStats: void writeToParcel(android.os.Parcel,int)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: boolean isBefore(java.time.chrono.ChronoLocalDate)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: int lengthOfMonth()>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: int lengthOfYear()>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.Chronology getChronology()>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.Era getEra()>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: boolean isSupported(java.time.temporal.TemporalUnit)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.util.Comparator timeLineOrder()>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.ChronoLocalDate with(java.time.temporal.TemporalAdjuster)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.ChronoLocalDate with(java.time.temporal.TemporalField,long)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.lang.String format(java.time.format.DateTimeFormatter)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: long toEpochDay()>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: int hashCode()>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.lang.String toString()>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: int compareTo(java.time.chrono.ChronoLocalDate)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.ChronoLocalDate from(java.time.temporal.TemporalAccessor)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.ChronoLocalDate plus(long,java.time.temporal.TemporalUnit)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: boolean isEqual(java.time.chrono.ChronoLocalDate)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: boolean isAfter(java.time.chrono.ChronoLocalDate)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: boolean isLeapYear()>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: boolean equals(java.lang.Object)>
<java.time.chrono.ChronoLocalDate extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: boolean isSupported(java.time.temporal.TemporalField)>
<android.widget.ExpandableListView.OnGroupCollapseListener: void onGroupCollapse(int)>
<android.widget.RadioGroup: int getCheckedRadioButtonId()>
<android.widget.RadioGroup: void check(@IdResint)>
<android.widget.RadioGroup: void clearCheck()>
<android.widget.RadioGroup: android.widget.RadioGroup.LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.RadioGroup: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RadioGroup: void <init>(android.content.Context)>
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup.OnCheckedChangeListener)>
<java.io.InterruptedIOException: void <init>(String)>
<java.io.InterruptedIOException: void <init>()>
<android.mtp.MtpObjectInfo: int getThumbCompressedSize()>
<android.mtp.MtpObjectInfo: int getThumbPixWidth()>
<android.mtp.MtpObjectInfo: long getImagePixWidthLong()>
<android.mtp.MtpObjectInfo: int getThumbFormat()>
<android.mtp.MtpObjectInfo: int getAssociationDesc()>
<android.mtp.MtpObjectInfo: long getThumbCompressedSizeLong()>
<android.mtp.MtpObjectInfo: int getCompressedSize()>
<android.mtp.MtpObjectInfo: long getImagePixDepthLong()>
<android.mtp.MtpObjectInfo: int getParent()>
<android.mtp.MtpObjectInfo: long getDateCreated()>
<android.mtp.MtpObjectInfo: int getObjectHandle()>
<android.mtp.MtpObjectInfo: long getSequenceNumberLong()>
<android.mtp.MtpObjectInfo: int getStorageId()>
<android.mtp.MtpObjectInfo: int getImagePixWidth()>
<android.mtp.MtpObjectInfo: long getImagePixHeightLong()>
<android.mtp.MtpObjectInfo: int getSequenceNumber()>
<android.mtp.MtpObjectInfo: int getImagePixHeight()>
<android.mtp.MtpObjectInfo: int getAssociationType()>
<android.mtp.MtpObjectInfo: int getProtectionStatus()>
<android.mtp.MtpObjectInfo: long getDateModified()>
<android.mtp.MtpObjectInfo: int getThumbPixHeight()>
<android.mtp.MtpObjectInfo: long getThumbPixWidthLong()>
<android.mtp.MtpObjectInfo: int getImagePixDepth()>
<android.mtp.MtpObjectInfo: int getFormat()>
<android.mtp.MtpObjectInfo: java.lang.String getKeywords()>
<android.mtp.MtpObjectInfo: java.lang.String getName()>
<android.mtp.MtpObjectInfo: long getCompressedSizeLong()>
<android.mtp.MtpObjectInfo: long getThumbPixHeightLong()>
<android.net.LocalSocket: void <init>()>
<android.net.LocalSocket: void shutdownOutput()>
<android.net.LocalSocket: void setFileDescriptorsForSend(java.io.FileDescriptor[])>
<android.net.LocalSocket: java.io.InputStream getInputStream()>
<android.net.LocalSocket: android.net.LocalSocketAddress getRemoteSocketAddress()>
<android.net.LocalSocket: void connect(android.net.LocalSocketAddress)>
<android.net.LocalSocket: void bind(android.net.LocalSocketAddress)>
<android.net.LocalSocket: android.net.LocalSocketAddress getLocalSocketAddress()>
<android.net.LocalSocket: void shutdownInput()>
<android.net.LocalSocket: boolean isInputShutdown()>
<android.net.LocalSocket: int getSendBufferSize()>
<android.net.LocalSocket: void <init>(int)>
<android.net.LocalSocket: java.io.FileDescriptor[] getAncillaryFileDescriptors()>
<android.net.LocalSocket: boolean isBound()>
<android.net.LocalSocket: void connect(android.net.LocalSocketAddress,int)>
<android.net.LocalSocket: android.net.Credentials getPeerCredentials()>
<android.net.LocalSocket: void close()>
<android.net.LocalSocket: java.io.OutputStream getOutputStream()>
<android.net.LocalSocket: boolean isOutputShutdown()>
<android.net.LocalSocket: boolean isConnected()>
<android.net.LocalSocket: java.io.FileDescriptor getFileDescriptor()>
<android.net.LocalSocket: void setReceiveBufferSize(int)>
<android.net.LocalSocket: int getReceiveBufferSize()>
<android.net.LocalSocket: void setSendBufferSize(int)>
<android.net.LocalSocket: int getSoTimeout()>
<android.net.LocalSocket: void setSoTimeout(int)>
<android.net.LocalSocket: boolean isClosed()>
<android.icu.text.TimeZoneFormat: java.lang.String getGMTOffsetDigits()>
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat setGMTOffsetPattern(android.icu.text.TimeZoneFormat.GMTOffsetPatternType,java.lang.String)>
<android.icu.text.TimeZoneFormat: java.lang.String getGMTZeroFormat()>
<android.icu.text.TimeZoneFormat: android.icu.util.TimeZone parse(java.lang.String)>
<android.icu.text.TimeZoneFormat: int parseOffsetShortLocalizedGMT(java.lang.String,java.text.ParsePosition)>
<android.icu.text.TimeZoneFormat: void <init>(android.icu.util.ULocale)>
<android.icu.text.TimeZoneFormat: int parseOffsetISO8601(java.lang.String,java.text.ParsePosition)>
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat setDefaultParseOptions(java.util.EnumSet)>
<android.icu.text.TimeZoneFormat: java.lang.String formatOffsetISO8601Extended(int,boolean,boolean,boolean)>
<android.icu.text.TimeZoneFormat: android.icu.util.TimeZone parse(java.lang.String,java.text.ParsePosition)>
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat setGMTZeroFormat(java.lang.String)>
<android.icu.text.TimeZoneFormat: java.lang.String format(android.icu.text.TimeZoneFormat.Style,android.icu.util.TimeZone,long)>
<android.icu.text.TimeZoneFormat: java.lang.String formatOffsetLocalizedGMT(int)>
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat cloneAsThawed()>
<android.icu.text.TimeZoneFormat: boolean isFrozen()>
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat setGMTPattern(java.lang.String)>
<android.icu.text.TimeZoneFormat: java.lang.String formatOffsetShortLocalizedGMT(int)>
<android.icu.text.TimeZoneFormat: android.icu.util.TimeZone parse(android.icu.text.TimeZoneFormat.Style,java.lang.String,java.text.ParsePosition,android.icu.util.Output)>
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneNames getTimeZoneNames()>
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat getInstance(android.icu.util.ULocale)>
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat getInstance(java.util.Locale)>
<android.icu.text.TimeZoneFormat: java.lang.String getGMTOffsetPattern(android.icu.text.TimeZoneFormat.GMTOffsetPatternType)>
<android.icu.text.TimeZoneFormat: java.util.EnumSet getDefaultParseOptions()>
<android.icu.text.TimeZoneFormat: java.lang.String getGMTPattern()>
<android.icu.text.TimeZoneFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat setGMTOffsetDigits(java.lang.String)>
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat setTimeZoneNames(android.icu.text.TimeZoneNames)>
<android.icu.text.TimeZoneFormat: int parseOffsetLocalizedGMT(java.lang.String,java.text.ParsePosition)>
<android.icu.text.TimeZoneFormat: android.icu.util.TimeZone parse(android.icu.text.TimeZoneFormat.Style,java.lang.String,java.text.ParsePosition,java.util.EnumSet,android.icu.util.Output)>
<android.icu.text.TimeZoneFormat: java.lang.String format(android.icu.text.TimeZoneFormat.Style,android.icu.util.TimeZone,long,android.icu.util.Output)>
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat freeze()>
<android.icu.text.TimeZoneFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.TimeZoneFormat: java.lang.String formatOffsetISO8601Basic(int,boolean,boolean,boolean)>
<java.net.SocketException: void <init>()>
<java.net.SocketException: void <init>(String)>
<android.text.TextDirectionHeuristics: void <init>()>
<java.util.zip.DeflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Deflater)>
<java.util.zip.DeflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Deflater,int)>
<java.util.zip.DeflaterInputStream: void <init>(java.io.InputStream)>
<java.util.function.BiConsumer: void accept(T,U)>
<java.util.function.BiConsumer: java.util.function.BiConsumer andThen(java.util.function.BiConsumer)>
<android.drm.DrmSupportInfo: void setDescription(java.lang.String)>
<android.drm.DrmSupportInfo: java.util.Iterator getFileSuffixIterator()>
<android.drm.DrmSupportInfo: java.util.Iterator getMimeTypeIterator()>
<android.drm.DrmSupportInfo: java.lang.String getDescription()>
<android.drm.DrmSupportInfo: void addMimeType(java.lang.String)>
<android.drm.DrmSupportInfo: void <init>()>
<android.drm.DrmSupportInfo: java.lang.String getDescriprition()>
<android.drm.DrmSupportInfo: void addFileSuffix(java.lang.String)>
<java.io.ObjectOutputStream: void <init>()>
<java.io.ObjectOutputStream: void annotateClass(java.lang.Class)>
<java.io.ObjectOutputStream: void writeBytes(java.lang.String)>
<java.io.ObjectOutputStream: void drain()>
<java.io.ObjectOutputStream: void writeChar(int)>
<java.io.ObjectOutputStream: void writeLong(long)>
<java.io.ObjectOutputStream: void writeChars(java.lang.String)>
<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>
<java.io.ObjectOutputStream: void writeUnshared(java.lang.Object)>
<java.io.ObjectOutputStream: boolean enableReplaceObject(boolean)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.ObjectOutputStream: void writeFloat(float)>
<java.io.ObjectOutputStream: void writeShort(int)>
<java.io.ObjectOutputStream: void annotateProxyClass(java.lang.Class)>
<java.io.ObjectOutputStream: void writeClassDescriptor(java.io.ObjectStreamClass)>
<java.io.ObjectOutputStream: java.lang.Object replaceObject(java.lang.Object)>
<java.io.ObjectOutputStream: java.io.ObjectOutputStream.PutField putFields()>
<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>
<java.io.ObjectOutputStream: void writeByte(int)>
<java.io.ObjectOutputStream: void writeBoolean(boolean)>
<java.io.ObjectOutputStream: void writeInt(int)>
<java.io.ObjectOutputStream: void reset()>
<java.io.ObjectOutputStream: void useProtocolVersion(int)>
<java.io.ObjectOutputStream: void writeStreamHeader()>
<java.io.ObjectOutputStream: void writeObjectOverride(java.lang.Object)>
<java.io.ObjectOutputStream: void writeDouble(double)>
<java.io.ObjectOutputStream: void write(int)>
<java.io.ObjectOutputStream: void writeFields()>
<java.io.ObjectOutputStream: void defaultWriteObject()>
<java.text.CollationElementIterator: int previous()>
<java.text.CollationElementIterator: void setText(java.text.CharacterIterator)>
<java.text.CollationElementIterator: void reset()>
<java.text.CollationElementIterator: void setOffset(int)>
<java.text.CollationElementIterator: short secondaryOrder(int)>
<java.text.CollationElementIterator: int getMaxExpansion(int)>
<java.text.CollationElementIterator: void setText(java.lang.String)>
<java.text.CollationElementIterator: int next()>
<java.text.CollationElementIterator: short tertiaryOrder(int)>
<java.text.CollationElementIterator: int primaryOrder(int)>
<java.text.CollationElementIterator: int getOffset()>
<java.util.prefs.PreferenceChangeEvent: java.lang.String getKey()>
<java.util.prefs.PreferenceChangeEvent: java.lang.String getNewValue()>
<java.util.prefs.PreferenceChangeEvent: void <init>(java.util.prefs.Preferences,String,String)>
<java.util.prefs.PreferenceChangeEvent: java.util.prefs.Preferences getNode()>
<android.view.LayoutInflater.Factory2 extends android.view.LayoutInflater.Factory: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>
<android.media.MediaCryptoException: void <init>(String)>
<android.graphics.ImageFormat: int getBitsPerPixel(int)>
<android.graphics.ImageFormat: void <init>()>
<android.view.SurfaceControl.Builder: android.view.SurfaceControl.Builder setBufferSize(int,int)>
<android.view.SurfaceControl.Builder: android.view.SurfaceControl.Builder setOpaque(boolean)>
<android.view.SurfaceControl.Builder: android.view.SurfaceControl.Builder setFormat(int)>
<android.view.SurfaceControl.Builder: void <init>()>
<android.view.SurfaceControl.Builder: android.view.SurfaceControl build()>
<android.view.SurfaceControl.Builder: android.view.SurfaceControl.Builder setParent(android.view.SurfaceControl)>
<android.view.SurfaceControl.Builder: android.view.SurfaceControl.Builder setName(java.lang.String)>
<android.view.View.OnContextClickListener: boolean onContextClick(android.view.View)>
<android.view.WindowContentFrameStats: long getFrameReadyTimeNano(int)>
<android.view.WindowContentFrameStats: long getFramePostedTimeNano(int)>
<android.view.WindowContentFrameStats: int describeContents()>
<android.view.WindowContentFrameStats: void writeToParcel(android.os.Parcel,int)>
<java.nio.channels.CompletionHandler: void completed(V,A)>
<java.nio.channels.CompletionHandler: void failed(java.lang.Throwable,A)>
<javax.xml.validation.Validator: void setFeature(java.lang.String,boolean)>
<javax.xml.validation.Validator: void setResourceResolver(org.w3c.dom.ls.LSResourceResolver)>
<javax.xml.validation.Validator: void <init>()>
<javax.xml.validation.Validator: boolean getFeature(java.lang.String)>
<javax.xml.validation.Validator: org.w3c.dom.ls.LSResourceResolver getResourceResolver()>
<javax.xml.validation.Validator: java.lang.Object getProperty(java.lang.String)>
<javax.xml.validation.Validator: org.xml.sax.ErrorHandler getErrorHandler()>
<javax.xml.validation.Validator: void reset()>
<javax.xml.validation.Validator: void setProperty(java.lang.String,java.lang.Object)>
<javax.xml.validation.Validator: void validate(javax.xml.transform.Source,javax.xml.transform.Result)>
<javax.xml.validation.Validator: void validate(javax.xml.transform.Source)>
<javax.xml.validation.Validator: void setErrorHandler(org.xml.sax.ErrorHandler)>
<android.telephony.ims.ImsService: android.telephony.ims.stub.ImsRegistrationImplBase getRegistration(int)>
<android.telephony.ims.ImsService: void disableIms(int)>
<android.telephony.ims.ImsService: void <init>()>
<android.telephony.ims.ImsService: android.telephony.ims.feature.MmTelFeature createMmTelFeature(int)>
<android.telephony.ims.ImsService: android.telephony.ims.stub.ImsFeatureConfiguration querySupportedImsFeatures()>
<android.telephony.ims.ImsService: void onUpdateSupportedImsFeatures(android.telephony.ims.stub.ImsFeatureConfiguration)>
<android.telephony.ims.ImsService: void enableIms(int)>
<android.telephony.ims.ImsService: android.telephony.ims.stub.ImsConfigImplBase getConfig(int)>
<android.telephony.ims.ImsService: void readyForFeatureCreation()>
<android.telephony.ims.ImsService: android.telephony.ims.feature.RcsFeature createRcsFeature(int)>
<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()>
<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>
<java.security.spec.ECParameterSpec: int getCofactor()>
<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>
<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()>
<java.net.ProtocolException: void <init>(String)>
<java.net.ProtocolException: void <init>()>
<android.media.session.MediaSessionManager.OnSession2TokensChangedListener: void onSession2TokensChanged(java.util.List)>
<android.printservice.PrinterDiscoverySession: java.util.List getTrackedPrinters()>
<android.printservice.PrinterDiscoverySession: void addPrinters(java.util.List)>
<android.printservice.PrinterDiscoverySession: void onStopPrinterStateTracking(android.print.PrinterId)>
<android.printservice.PrinterDiscoverySession: void onValidatePrinters(java.util.List)>
<android.printservice.PrinterDiscoverySession: java.util.List getPrinters()>
<android.printservice.PrinterDiscoverySession: void onStartPrinterDiscovery(java.util.List)>
<android.printservice.PrinterDiscoverySession: void onStartPrinterStateTracking(android.print.PrinterId)>
<android.printservice.PrinterDiscoverySession: boolean isPrinterDiscoveryStarted()>
<android.printservice.PrinterDiscoverySession: void onDestroy()>
<android.printservice.PrinterDiscoverySession: void onStopPrinterDiscovery()>
<android.printservice.PrinterDiscoverySession: void onRequestCustomPrinterIcon(android.print.PrinterId,android.os.CancellationSignal,android.printservice.CustomPrinterIconCallback)>
<android.printservice.PrinterDiscoverySession: void removePrinters(java.util.List)>
<android.printservice.PrinterDiscoverySession: boolean isDestroyed()>
<android.printservice.PrinterDiscoverySession: void <init>()>
<android.opengl.ETC1: void decodeImage(java.nio.Buffer,java.nio.Buffer,int,int,int,int)>
<android.opengl.ETC1: void encodeBlock(java.nio.Buffer,int,java.nio.Buffer)>
<android.opengl.ETC1: int getEncodedDataSize(int,int)>
<android.opengl.ETC1: int getWidth(java.nio.Buffer)>
<android.opengl.ETC1: void decodeBlock(java.nio.Buffer,java.nio.Buffer)>
<android.opengl.ETC1: void encodeImage(java.nio.Buffer,int,int,int,int,java.nio.Buffer)>
<android.opengl.ETC1: int getHeight(java.nio.Buffer)>
<android.opengl.ETC1: void <init>()>
<android.opengl.ETC1: void formatHeader(java.nio.Buffer,int,int)>
<android.opengl.ETC1: boolean isValid(java.nio.Buffer)>
<android.media.AudioManager.OnAudioFocusChangeListener: void onAudioFocusChange(int)>
<android.service.media.MediaBrowserService.Result: void sendResult(T)>
<android.service.media.MediaBrowserService.Result: void detach()>
<android.telephony.ims.ImsMmTelManager.RegistrationCallback: void <init>()>
<android.telephony.ims.ImsMmTelManager.RegistrationCallback: void onRegistered(int)>
<android.telephony.ims.ImsMmTelManager.RegistrationCallback: void onTechnologyChangeFailed(int,android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.ImsMmTelManager.RegistrationCallback: void onRegistering(int)>
<android.telephony.ims.ImsMmTelManager.RegistrationCallback: void onUnregistered(android.telephony.ims.ImsReasonInfo)>
<android.opengl.GLU: void gluPerspective(javax.microedition.khronos.opengles.GL10,float,float,float,float)>
<android.opengl.GLU: void <init>()>
<android.opengl.GLU: void gluOrtho2D(javax.microedition.khronos.opengles.GL10,float,float,float,float)>
<android.opengl.GLU: java.lang.String gluErrorString(int)>
<android.opengl.GLU: void gluLookAt(javax.microedition.khronos.opengles.GL10,float,float,float,float,float,float,float,float,float)>
<android.opengl.GLU: int gluProject(float,float,float,float[],int,float[],int,int[],int,float[],int)>
<android.opengl.GLU: int gluUnProject(float,float,float,float[],int,float[],int,int[],int,float[],int)>
<android.bluetooth.BluetoothHealthCallback: void <init>()>
<android.bluetooth.BluetoothHealthCallback: void onHealthChannelStateChange(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)>
<android.bluetooth.BluetoothHealthCallback: void onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration,int)>
<java.security.cert.CertificateFactory: java.util.Collection generateCRLs(java.io.InputStream)>
<java.security.cert.CertificateFactory: java.security.cert.CRL generateCRL(java.io.InputStream)>
<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.io.InputStream,java.lang.String)>
<java.security.cert.CertificateFactory: void <init>(java.security.cert.CertificateFactorySpi,java.security.Provider,String)>
<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.util.List)>
<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.security.Provider)>
<java.security.cert.CertificateFactory: java.util.Collection generateCertificates(java.io.InputStream)>
<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>
<java.security.cert.CertificateFactory: java.security.Provider getProvider()>
<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.lang.String)>
<java.security.cert.CertificateFactory: java.util.Iterator getCertPathEncodings()>
<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>
<java.security.cert.CertificateFactory: java.lang.String getType()>
<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.io.InputStream)>
<java.util.List extends java.util.Collection: E set(int,E)>
<java.util.List extends java.util.Collection: void add(int,E)>
<java.util.List extends java.util.Collection: java.util.ListIterator listIterator(int)>
<java.util.List extends java.util.Collection: int lastIndexOf(java.lang.Object)>
<java.util.List extends java.util.Collection: void replaceAll(java.util.function.UnaryOperator)>
<java.util.List extends java.util.Collection: java.util.List subList(int,int)>
<java.util.List extends java.util.Collection: int indexOf(java.lang.Object)>
<java.util.List extends java.util.Collection: E get(int)>
<java.util.List extends java.util.Collection: void sort(java.util.Comparator)>
<java.util.List extends java.util.Collection: java.util.ListIterator listIterator()>
<java.util.List extends java.util.Collection: E remove(int)>
<java.util.List extends java.util.Collection: boolean addAll(int,java.util.Collection)>
<android.view.ScaleGestureDetector.OnScaleGestureListener: boolean onScale(android.view.ScaleGestureDetector)>
<android.view.ScaleGestureDetector.OnScaleGestureListener: boolean onScaleBegin(android.view.ScaleGestureDetector)>
<android.view.ScaleGestureDetector.OnScaleGestureListener: void onScaleEnd(android.view.ScaleGestureDetector)>
<java.util.function.IntConsumer: void accept(int)>
<java.util.function.IntConsumer: java.util.function.IntConsumer andThen(java.util.function.IntConsumer)>
<java.util.AbstractList: java.util.Iterator iterator()>
<java.util.AbstractList: int lastIndexOf(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>
<java.util.AbstractList: void removeRange(int,int)>
<java.util.AbstractList: java.util.ListIterator listIterator(int)>
<java.util.AbstractList: E remove(int)>
<java.util.AbstractList: void <init>()>
<java.util.AbstractList: java.util.List subList(int,int)>
<java.util.AbstractList: int indexOf(java.lang.Object)>
<java.util.AbstractList: java.util.ListIterator listIterator()>
<java.util.AbstractList: E set(int,E)>
<java.util.AbstractList: void add(int,E)>
<java.util.concurrent.TimeoutException: void <init>()>
<java.util.concurrent.TimeoutException: void <init>(String)>
<android.app.StatusBarManager: void setDisabledForSetup(boolean)>
<android.app.StatusBarManager: android.app.StatusBarManager.DisableInfo getDisableInfo()>
<android.hardware.usb.UsbAccessory: java.lang.String getDescription()>
<android.hardware.usb.UsbAccessory: java.lang.String getUri()>
<android.hardware.usb.UsbAccessory: java.lang.String getManufacturer()>
<android.hardware.usb.UsbAccessory: java.lang.String getSerial()>
<android.hardware.usb.UsbAccessory: void writeToParcel(android.os.Parcel,int)>
<android.hardware.usb.UsbAccessory: java.lang.String getVersion()>
<android.hardware.usb.UsbAccessory: int describeContents()>
<android.hardware.usb.UsbAccessory: java.lang.String getModel()>
<org.apache.http.conn.ssl.StrictHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
<org.apache.http.conn.ssl.StrictHostnameVerifier: void <init>()>
<org.apache.http.conn.ssl.StrictHostnameVerifier: java.lang.String toString()>
<android.view.ViewConfiguration: int getHoverTooltipHideTimeout()>
<android.view.ViewConfiguration: int getScaledOverflingDistance()>
<android.view.ViewConfiguration: int getHoverTooltipHideShortTimeout()>
<android.view.ViewConfiguration: boolean shouldShowMenuShortcutsWhenKeyboardPresent()>
<android.view.ViewConfiguration: int getJumpTapTimeout()>
<android.view.ViewConfiguration: int getLongPressTimeout()>
<android.view.ViewConfiguration: int getScaledFadingEdgeLength()>
<android.view.ViewConfiguration: int getScrollBarFadeDuration()>
<android.view.ViewConfiguration: void <init>()>
<android.view.ViewConfiguration: int getHoverTooltipShowTimeout()>
<android.view.ViewConfiguration: int getFadingEdgeLength()>
<android.view.ViewConfiguration: int getTouchSlop()>
<android.view.ViewConfiguration: int getEdgeSlop()>
<android.view.ViewConfiguration: int getWindowTouchSlop()>
<android.view.ViewConfiguration: int getTapTimeout()>
<android.view.ViewConfiguration: int getScaledDoubleTapSlop()>
<android.view.ViewConfiguration: long getDeviceGlobalActionKeyTimeout()>
<android.view.ViewConfiguration: int getMaximumFlingVelocity()>
<android.view.ViewConfiguration: int getScaledTouchSlop()>
<android.view.ViewConfiguration: int getScaledScrollBarSize()>
<android.view.ViewConfiguration: int getScaledPagingTouchSlop()>
<android.view.ViewConfiguration: int getKeyRepeatTimeout()>
<android.view.ViewConfiguration: long getGlobalActionKeyTimeout()>
<android.view.ViewConfiguration: int getPressedStateDuration()>
<android.view.ViewConfiguration: int getLongPressTooltipHideTimeout()>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.view.ViewConfiguration: int getScaledMinimumFlingVelocity()>
<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>
<android.view.ViewConfiguration: int getScaledMaximumFlingVelocity()>
<android.view.ViewConfiguration: long getDefaultActionModeHideDuration()>
<android.view.ViewConfiguration: float getScaledVerticalScrollFactor()>
<android.view.ViewConfiguration: int getMinimumFlingVelocity()>
<android.view.ViewConfiguration: int getScrollBarSize()>
<android.view.ViewConfiguration: int getDoubleTapTimeout()>
<android.view.ViewConfiguration: long getZoomControlsTimeout()>
<android.view.ViewConfiguration: int getKeyRepeatDelay()>
<android.view.ViewConfiguration: int getScaledHoverSlop()>
<android.view.ViewConfiguration: float getScaledHorizontalScrollFactor()>
<android.view.ViewConfiguration: int getMaximumDrawingCacheSize()>
<android.view.ViewConfiguration: int getScaledMinimumScalingSpan()>
<android.view.ViewConfiguration: int getScaledEdgeSlop()>
<android.view.ViewConfiguration: int getScaledWindowTouchSlop()>
<android.view.ViewConfiguration: int getScaledOverscrollDistance()>
<android.view.ViewConfiguration: float getScrollFriction()>
<android.view.ViewConfiguration: float getAmbiguousGestureMultiplier()>
<android.view.ViewConfiguration: int getScaledMaximumDrawingCacheSize()>
<android.view.ViewConfiguration: int getScrollDefaultDelay()>
<android.app.ActivityOptions: android.app.ActivityOptions makeSceneTransitionAnimation(android.app.Activity,android.util.Pair...)>
<android.app.ActivityOptions: void setLaunchTaskId(int)>
<android.app.ActivityOptions: void setLaunchActivityType(int)>
<android.app.ActivityOptions: void requestUsageTimeReport(android.app.PendingIntent)>
<android.app.ActivityOptions: android.graphics.Rect getLaunchBounds()>
<android.app.ActivityOptions: android.app.ActivityOptions makeSceneTransitionAnimation(android.app.Activity,android.view.View,java.lang.String)>
<android.app.ActivityOptions: android.app.ActivityOptions setAppVerificationBundle(android.os.Bundle)>
<android.app.ActivityOptions: android.app.ActivityOptions makeBasic()>
<android.app.ActivityOptions: android.os.Bundle toBundle()>
<android.app.ActivityOptions: android.app.ActivityOptions makeScaleUpAnimation(android.view.View,int,int,int,int)>
<android.app.ActivityOptions: android.app.ActivityOptions setLaunchBounds(android.graphics.Rect)>
<android.app.ActivityOptions: android.app.ActivityOptions makeClipRevealAnimation(android.view.View,int,int,int,int)>
<android.app.ActivityOptions: android.app.ActivityOptions makeThumbnailScaleUpAnimation(android.view.View,android.graphics.Bitmap,int,int)>
<android.app.ActivityOptions: android.app.ActivityOptions setLockTaskEnabled(boolean)>
<android.app.ActivityOptions: void update(android.app.ActivityOptions)>
<android.app.ActivityOptions: boolean getLockTaskMode()>
<android.app.ActivityOptions: void setTaskOverlay(boolean,boolean)>
<android.app.ActivityOptions: void setLaunchWindowingMode(int)>
<android.app.ActivityOptions: android.app.ActivityOptions makeCustomAnimation(android.content.Context,int,int)>
<android.app.ActivityOptions: int getLaunchDisplayId()>
<android.app.ActivityOptions: android.app.ActivityOptions makeTaskLaunchBehind()>
<android.app.ActivityOptions: android.app.ActivityOptions setLaunchDisplayId(int)>
<org.w3c.dom.ls.DOMImplementationLS: org.w3c.dom.ls.LSSerializer createLSSerializer()>
<org.w3c.dom.ls.DOMImplementationLS: org.w3c.dom.ls.LSInput createLSInput()>
<org.w3c.dom.ls.DOMImplementationLS: org.w3c.dom.ls.LSOutput createLSOutput()>
<org.w3c.dom.ls.DOMImplementationLS: org.w3c.dom.ls.LSParser createLSParser(short,java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: int getColumnSpan()>
<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: int getColumnIndex()>
<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: boolean isHeading()>
<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: boolean isSelected()>
<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: int getRowSpan()>
<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo obtain(int,int,int,int,boolean)>
<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo obtain(int,int,int,int,boolean,boolean)>
<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: int getRowIndex()>
<android.media.audiofx.DynamicsProcessing.EqBand: float getGain()>
<android.media.audiofx.DynamicsProcessing.EqBand: void <init>(android.media.audiofx.DynamicsProcessing.EqBand)>
<android.media.audiofx.DynamicsProcessing.EqBand: void setGain(float)>
<android.media.audiofx.DynamicsProcessing.EqBand: void <init>(boolean,float,float)>
<android.provider.MediaStore.Audio.Media: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore.Audio.Media: void <init>()>
<android.provider.MediaStore.Audio.Media: android.net.Uri getContentUriForPath(java.lang.String)>
<android.view.inspector.WindowInspector: java.util.List getGlobalWindowViews()>
<android.animation.LayoutTransition.TransitionListener: void endTransition(android.animation.LayoutTransition,android.view.ViewGroup,android.view.View,int)>
<android.animation.LayoutTransition.TransitionListener: void startTransition(android.animation.LayoutTransition,android.view.ViewGroup,android.view.View,int)>
<android.app.NotificationManager: android.content.ComponentName getAllowedNotificationAssistant()>
<android.app.NotificationManager: void cancel(java.lang.String,int)>
<android.app.NotificationManager: void createNotificationChannel(android.app.NotificationChannel)>
<android.app.NotificationManager: void notify(int,android.app.Notification)>
<android.app.NotificationManager: java.lang.String getNotificationDelegate()>
<android.app.NotificationManager: boolean isNotificationAssistantAccessGranted(android.content.ComponentName)>
<android.app.NotificationManager: boolean isNotificationPolicyAccessGranted()>
<android.app.NotificationManager: int getCurrentInterruptionFilter()>
<android.app.NotificationManager: java.util.List getNotificationChannels()>
<android.app.NotificationManager: void createNotificationChannels(java.util.List)>
<android.app.NotificationManager: java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule)>
<android.app.NotificationManager: boolean areBubblesAllowed()>
<android.app.NotificationManager: android.service.notification.StatusBarNotification[] getActiveNotifications()>
<android.app.NotificationManager: void deleteNotificationChannel(java.lang.String)>
<android.app.NotificationManager: boolean isNotificationListenerAccessGranted(android.content.ComponentName)>
<android.app.NotificationManager: void setNotificationAssistantAccessGranted(android.content.ComponentName,boolean)>
<android.app.NotificationManager: android.app.NotificationChannel getNotificationChannel(java.lang.String)>
<android.app.NotificationManager: int getImportance()>
<android.app.NotificationManager: void setInterruptionFilter(int)>
<android.app.NotificationManager: void createNotificationChannelGroups(java.util.List)>
<android.app.NotificationManager: java.util.List getNotificationChannelGroups()>
<android.app.NotificationManager: boolean shouldHideSilentStatusBarIcons()>
<android.app.NotificationManager: android.content.ComponentName getEffectsSuppressor()>
<android.app.NotificationManager: void disallowAssistantAdjustment(java.lang.String)>
<android.app.NotificationManager: boolean matchesCallFilter(android.os.Bundle)>
<android.app.NotificationManager: void deleteNotificationChannelGroup(java.lang.String)>
<android.app.NotificationManager: void createNotificationChannelGroup(android.app.NotificationChannelGroup)>
<android.app.NotificationManager: void setAutomaticZenRuleState(java.lang.String,android.service.notification.Condition)>
<android.app.NotificationManager: boolean areNotificationsPaused()>
<android.app.NotificationManager: java.util.Map getAutomaticZenRules()>
<android.app.NotificationManager: void notifyAsPackage(java.lang.String,java.lang.String,int,android.app.Notification)>
<android.app.NotificationManager: void cancel(int)>
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)>
<android.app.NotificationManager: void setNotificationPolicy(android.app.NotificationManager.Policy)>
<android.app.NotificationManager: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String)>
<android.app.NotificationManager: android.app.NotificationManager.Policy getNotificationPolicy()>
<android.app.NotificationManager: boolean removeAutomaticZenRule(java.lang.String)>
<android.app.NotificationManager: boolean canNotifyAsPackage(java.lang.String)>
<android.app.NotificationManager: boolean areNotificationsEnabled()>
<android.app.NotificationManager: android.app.AutomaticZenRule getAutomaticZenRule(java.lang.String)>
<android.app.NotificationManager: java.util.List getAllowedAssistantAdjustments()>
<android.app.NotificationManager: void allowAssistantAdjustment(java.lang.String)>
<android.app.NotificationManager: void setNotificationDelegate(java.lang.String)>
<android.app.NotificationManager: void cancelAll()>
<android.app.NotificationManager: boolean updateAutomaticZenRule(java.lang.String,android.app.AutomaticZenRule)>
<android.media.audiopolicy.AudioVolumeGroup: int getId()>
<android.media.audiopolicy.AudioVolumeGroup: void writeToParcel(android.os.Parcel,int)>
<android.media.audiopolicy.AudioVolumeGroup: java.lang.String name()>
<android.media.audiopolicy.AudioVolumeGroup: java.util.List getAudioAttributes()>
<android.media.audiopolicy.AudioVolumeGroup: int describeContents()>
<android.media.audiopolicy.AudioVolumeGroup: int[] getLegacyStreamTypes()>
<android.graphics.fonts.FontFamily.Builder: void <init>(android.graphics.fonts.Font)>
<android.graphics.fonts.FontFamily.Builder: android.graphics.fonts.FontFamily build()>
<android.graphics.fonts.FontFamily.Builder: android.graphics.fonts.FontFamily.Builder addFont(android.graphics.fonts.Font)>
<javax.net.ssl.HandshakeCompletedEvent: java.security.cert.Certificate[] getPeerCertificates()>
<javax.net.ssl.HandshakeCompletedEvent: javax.security.cert.X509Certificate[] getPeerCertificateChain()>
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSession getSession()>
<javax.net.ssl.HandshakeCompletedEvent: void <init>(javax.net.ssl.SSLSocket,javax.net.ssl.SSLSession)>
<javax.net.ssl.HandshakeCompletedEvent: java.security.cert.Certificate[] getLocalCertificates()>
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getLocalPrincipal()>
<javax.net.ssl.HandshakeCompletedEvent: java.lang.String getCipherSuite()>
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getPeerPrincipal()>
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSocket getSocket()>
<java.nio.file.attribute.BasicFileAttributeView extends java.nio.file.attribute.FileAttributeView: java.nio.file.attribute.BasicFileAttributes readAttributes()>
<java.nio.file.attribute.BasicFileAttributeView extends java.nio.file.attribute.FileAttributeView: void setTimes(java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime)>
<android.media.audiofx.AudioEffect.OnControlStatusChangeListener: void onControlStatusChange(android.media.audiofx.AudioEffect,boolean)>
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])>
<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>
<java.util.logging.Logger: void finer(java.util.function.Supplier)>
<java.util.logging.Logger: boolean getUseParentHandlers()>
<java.util.logging.Logger: void entering(java.lang.String,java.lang.String,java.lang.Object)>
<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
<java.util.logging.Logger: java.lang.String getName()>
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable,java.util.function.Supplier)>
<java.util.logging.Logger: void info(java.util.function.Supplier)>
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>
<java.util.logging.Logger: void <init>(String,String)>
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>
<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String,java.lang.String)>
<java.util.logging.Logger: void setUseParentHandlers(boolean)>
<java.util.logging.Logger: java.util.logging.Logger getGlobal()>
<java.util.logging.Logger: void setFilter(java.util.logging.Filter)>
<java.util.logging.Logger: void config(java.util.function.Supplier)>
<java.util.logging.Logger: void entering(java.lang.String,java.lang.String)>
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<java.util.logging.Logger: java.util.ResourceBundle getResourceBundle()>
<java.util.logging.Logger: void throwing(java.lang.String,java.lang.String,java.lang.Throwable)>
<java.util.logging.Logger: void info(java.lang.String)>
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.util.function.Supplier)>
<java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger()>
<java.util.logging.Logger: void log(java.util.logging.Level,java.util.function.Supplier)>
<java.util.logging.Logger: void logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>
<java.util.logging.Logger: void finest(java.util.function.Supplier)>
<java.util.logging.Logger: void fine(java.lang.String)>
<java.util.logging.Logger: void logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>
<java.util.logging.Logger: void warning(java.lang.String)>
<java.util.logging.Logger: void setResourceBundle(java.util.ResourceBundle)>
<java.util.logging.Logger: void warning(java.util.function.Supplier)>
<java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger(java.lang.String)>
<java.util.logging.Logger: void logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.util.ResourceBundle,java.lang.String,java.lang.Object...)>
<java.util.logging.Logger: void exiting(java.lang.String,java.lang.String)>
<java.util.logging.Logger: void config(java.lang.String)>
<java.util.logging.Logger: void logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])>
<java.util.logging.Logger: void entering(java.lang.String,java.lang.String,java.lang.Object[])>
<java.util.logging.Logger: java.lang.String getResourceBundleName()>
<java.util.logging.Logger: void log(java.util.logging.LogRecord)>
<java.util.logging.Logger: void fine(java.util.function.Supplier)>
<java.util.logging.Logger: java.util.logging.Logger getParent()>
<java.util.logging.Logger: void severe(java.util.function.Supplier)>
<java.util.logging.Logger: void finest(java.lang.String)>
<java.util.logging.Logger: void removeHandler(java.util.logging.Handler)>
<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<java.util.logging.Logger: void exiting(java.lang.String,java.lang.String,java.lang.Object)>
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.Throwable,java.util.function.Supplier)>
<java.util.logging.Logger: void logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.util.ResourceBundle,java.lang.String,java.lang.Throwable)>
<java.util.logging.Logger: java.util.logging.Handler[] getHandlers()>
<java.util.logging.Logger: void logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])>
<java.util.logging.Logger: java.util.logging.Level getLevel()>
<java.util.logging.Logger: java.util.logging.Filter getFilter()>
<java.util.logging.Logger: void setLevel(java.util.logging.Level)>
<java.util.logging.Logger: void setParent(java.util.logging.Logger)>
<java.util.logging.Logger: void finer(java.lang.String)>
<java.util.logging.Logger: void severe(java.lang.String)>
<android.telephony.data.QualifiedNetworksService: android.telephony.data.QualifiedNetworksService.NetworkAvailabilityProvider onCreateNetworkAvailabilityProvider(int)>
<android.telephony.data.QualifiedNetworksService: void <init>()>
<android.icu.text.BreakIterator: void <init>()>
<android.icu.text.BreakIterator: android.icu.text.BreakIterator getLineInstance(java.util.Locale)>
<android.icu.text.BreakIterator: void setText(java.text.CharacterIterator)>
<android.icu.text.BreakIterator: int getRuleStatus()>
<android.icu.text.BreakIterator: android.icu.text.BreakIterator getWordInstance()>
<android.icu.text.BreakIterator: android.icu.text.BreakIterator getSentenceInstance(android.icu.util.ULocale)>
<android.icu.text.BreakIterator: int previous()>
<android.icu.text.BreakIterator: boolean isBoundary(int)>
<android.icu.text.BreakIterator: int preceding(int)>
<android.icu.text.BreakIterator: int following(int)>
<android.icu.text.BreakIterator: int getRuleStatusVec(int[])>
<android.icu.text.BreakIterator: java.util.Locale[] getAvailableLocales()>
<android.icu.text.BreakIterator: android.icu.text.BreakIterator getWordInstance(java.util.Locale)>
<android.icu.text.BreakIterator: int next()>
<android.icu.text.BreakIterator: android.icu.text.BreakIterator getTitleInstance(java.util.Locale)>
<android.icu.text.BreakIterator: android.icu.text.BreakIterator getLineInstance(android.icu.util.ULocale)>
<android.icu.text.BreakIterator: android.icu.text.BreakIterator getCharacterInstance(java.util.Locale)>
<android.icu.text.BreakIterator: android.icu.text.BreakIterator getCharacterInstance(android.icu.util.ULocale)>
<android.icu.text.BreakIterator: java.text.CharacterIterator getText()>
<android.icu.text.BreakIterator: void setText(java.lang.String)>
<android.icu.text.BreakIterator: android.icu.text.BreakIterator getCharacterInstance()>
<android.icu.text.BreakIterator: android.icu.text.BreakIterator getSentenceInstance()>
<android.icu.text.BreakIterator: int first()>
<android.icu.text.BreakIterator: java.lang.Object clone()>
<android.icu.text.BreakIterator: int current()>
<android.icu.text.BreakIterator: android.icu.text.BreakIterator getWordInstance(android.icu.util.ULocale)>
<android.icu.text.BreakIterator: int last()>
<android.icu.text.BreakIterator: android.icu.text.BreakIterator getLineInstance()>
<android.icu.text.BreakIterator: void setText(CharSequence)>
<android.icu.text.BreakIterator: android.icu.text.BreakIterator getSentenceInstance(java.util.Locale)>
<android.icu.text.BreakIterator: android.icu.text.BreakIterator getTitleInstance(android.icu.util.ULocale)>
<android.icu.text.BreakIterator: int next(int)>
<android.icu.text.BreakIterator: android.icu.text.BreakIterator getTitleInstance()>
<android.net.rtp.RtpStream: int getRemotePort()>
<android.net.rtp.RtpStream: int getLocalPort()>
<android.net.rtp.RtpStream: void release()>
<android.net.rtp.RtpStream: void setMode(int)>
<android.net.rtp.RtpStream: java.net.InetAddress getRemoteAddress()>
<android.net.rtp.RtpStream: java.net.InetAddress getLocalAddress()>
<android.net.rtp.RtpStream: boolean isBusy()>
<android.net.rtp.RtpStream: int getMode()>
<android.net.rtp.RtpStream: void associate(java.net.InetAddress,int)>
<java.security.interfaces.ECPublicKey extends java.security.PublicKey java.security.interfaces.ECKey: java.security.spec.ECPoint getW()>
<android.media.MediaScannerConnection.MediaScannerConnectionClient extends android.media.MediaScannerConnection.OnScanCompletedListener: void onMediaScannerConnected()>
<android.telephony.NetworkRegistrationInfo.Builder: android.telephony.NetworkRegistrationInfo.Builder setAvailableServices(java.util.List)>
<android.telephony.NetworkRegistrationInfo.Builder: android.telephony.NetworkRegistrationInfo.Builder setEmergencyOnly(boolean)>
<android.telephony.NetworkRegistrationInfo.Builder: android.telephony.NetworkRegistrationInfo build()>
<android.telephony.NetworkRegistrationInfo.Builder: android.telephony.NetworkRegistrationInfo.Builder setTransportType(int)>
<android.telephony.NetworkRegistrationInfo.Builder: android.telephony.NetworkRegistrationInfo.Builder setAccessNetworkTechnology(int)>
<android.telephony.NetworkRegistrationInfo.Builder: android.telephony.NetworkRegistrationInfo.Builder setRegistrationState(int)>
<android.telephony.NetworkRegistrationInfo.Builder: android.telephony.NetworkRegistrationInfo.Builder setRejectCause(int)>
<android.telephony.NetworkRegistrationInfo.Builder: android.telephony.NetworkRegistrationInfo.Builder setCellIdentity(android.telephony.CellIdentity)>
<android.telephony.NetworkRegistrationInfo.Builder: android.telephony.NetworkRegistrationInfo.Builder setDomain(int)>
<android.telephony.NetworkRegistrationInfo.Builder: void <init>()>
<java.util.concurrent.atomic.LongAdder: long longValue()>
<java.util.concurrent.atomic.LongAdder: int intValue()>
<java.util.concurrent.atomic.LongAdder: double doubleValue()>
<java.util.concurrent.atomic.LongAdder: void reset()>
<java.util.concurrent.atomic.LongAdder: void increment()>
<java.util.concurrent.atomic.LongAdder: long sum()>
<java.util.concurrent.atomic.LongAdder: long sumThenReset()>
<java.util.concurrent.atomic.LongAdder: void <init>()>
<java.util.concurrent.atomic.LongAdder: void add(long)>
<java.util.concurrent.atomic.LongAdder: float floatValue()>
<java.util.concurrent.atomic.LongAdder: void decrement()>
<android.hardware.hdmi.HdmiSwitchClient: void selectPort(int,java.util.concurrent.Executor,android.hardware.hdmi.HdmiSwitchClient.OnSelectListener)>
<android.hardware.hdmi.HdmiSwitchClient: void selectPort(int,android.hardware.hdmi.HdmiSwitchClient.OnSelectListener)>
<android.hardware.hdmi.HdmiSwitchClient: int getDeviceType()>
<android.util.Pair: void <init>(F,S)>
<android.util.Pair: android.util.Pair create(A,B)>
<javax.xml.xpath.XPathExpression: java.lang.Object evaluate(java.lang.Object,javax.xml.namespace.QName)>
<javax.xml.xpath.XPathExpression: java.lang.String evaluate(org.xml.sax.InputSource)>
<javax.xml.xpath.XPathExpression: java.lang.Object evaluate(org.xml.sax.InputSource,javax.xml.namespace.QName)>
<javax.xml.xpath.XPathExpression: java.lang.String evaluate(java.lang.Object)>
<org.xml.sax.ext.Attributes2 extends org.xml.sax.Attributes: boolean isDeclared(int)>
<org.xml.sax.ext.Attributes2 extends org.xml.sax.Attributes: boolean isDeclared(java.lang.String)>
<org.xml.sax.ext.Attributes2 extends org.xml.sax.Attributes: boolean isDeclared(java.lang.String,java.lang.String)>
<org.xml.sax.ext.Attributes2 extends org.xml.sax.Attributes: boolean isSpecified(java.lang.String,java.lang.String)>
<org.xml.sax.ext.Attributes2 extends org.xml.sax.Attributes: boolean isSpecified(int)>
<org.xml.sax.ext.Attributes2 extends org.xml.sax.Attributes: boolean isSpecified(java.lang.String)>
<android.icu.text.Collator: android.icu.util.VersionInfo getUCAVersion()>
<android.icu.text.Collator: android.icu.text.Collator freeze()>
<android.icu.text.Collator: boolean equals(java.lang.String,java.lang.String)>
<android.icu.text.Collator: int getStrength()>
<android.icu.text.Collator: java.util.Locale[] getAvailableLocales()>
<android.icu.text.Collator: java.lang.String getDisplayName(java.util.Locale)>
<android.icu.text.Collator: int getDecomposition()>
<android.icu.text.Collator: void setReorderCodes(int...)>
<android.icu.text.Collator: android.icu.text.Collator getInstance(android.icu.util.ULocale)>
<android.icu.text.Collator: android.icu.text.Collator setMaxVariable(int)>
<android.icu.text.Collator: void setDecomposition(int)>
<android.icu.text.Collator: android.icu.text.UnicodeSet getTailoredSet()>
<android.icu.text.Collator: int compare(java.lang.Object,java.lang.Object)>
<android.icu.text.Collator: int getMaxVariable()>
<android.icu.text.Collator: java.lang.String getDisplayName(android.icu.util.ULocale)>
<android.icu.text.Collator: java.lang.String[] getKeywords()>
<android.icu.text.Collator: android.icu.text.Collator getInstance()>
<android.icu.text.Collator: android.icu.util.VersionInfo getVersion()>
<android.icu.text.Collator: android.icu.text.Collator getInstance(java.util.Locale)>
<android.icu.text.Collator: int getVariableTop()>
<android.icu.text.Collator: android.icu.util.ULocale getFunctionalEquivalent(java.lang.String,android.icu.util.ULocale,boolean[])>
<android.icu.text.Collator: int[] getReorderCodes()>
<android.icu.text.Collator: boolean isFrozen()>
<android.icu.text.Collator: int compare(java.lang.String,java.lang.String)>
<android.icu.text.Collator: void <init>()>
<android.icu.text.Collator: java.lang.String[] getKeywordValuesForLocale(java.lang.String,android.icu.util.ULocale,boolean)>
<android.icu.text.Collator: void setStrength(int)>
<android.icu.text.Collator: java.lang.String[] getKeywordValues(java.lang.String)>
<android.icu.text.Collator: java.lang.String getDisplayName(android.icu.util.ULocale,android.icu.util.ULocale)>
<android.icu.text.Collator: android.icu.text.Collator cloneAsThawed()>
<android.icu.text.Collator: java.lang.String getDisplayName(java.util.Locale,java.util.Locale)>
<android.icu.text.Collator: android.icu.util.ULocale[] getAvailableULocales()>
<android.icu.text.Collator: java.lang.Object clone()>
<android.icu.text.Collator: int[] getEquivalentReorderCodes(int)>
<android.icu.text.Collator: android.icu.util.ULocale getFunctionalEquivalent(java.lang.String,android.icu.util.ULocale)>
<android.icu.text.Collator: android.icu.text.CollationKey getCollationKey(java.lang.String)>
<android.net.sip.SipSession: void makeCall(android.net.sip.SipProfile,java.lang.String,int)>
<android.net.sip.SipSession: void changeCall(java.lang.String,int)>
<android.net.sip.SipSession: int getState()>
<android.net.sip.SipSession: void register(int)>
<android.net.sip.SipSession: void endCall()>
<android.net.sip.SipSession: boolean isInCall()>
<android.net.sip.SipSession: java.lang.String getLocalIp()>
<android.net.sip.SipSession: android.net.sip.SipProfile getPeerProfile()>
<android.net.sip.SipSession: void answerCall(java.lang.String,int)>
<android.net.sip.SipSession: android.net.sip.SipProfile getLocalProfile()>
<android.net.sip.SipSession: void setListener(android.net.sip.SipSession.Listener)>
<android.net.sip.SipSession: java.lang.String getCallId()>
<android.net.sip.SipSession: void unregister()>
<android.view.textclassifier.TextSelection: float getConfidenceScore(java.lang.String)>
<android.view.textclassifier.TextSelection: android.os.Bundle getExtras()>
<android.view.textclassifier.TextSelection: int describeContents()>
<android.view.textclassifier.TextSelection: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextSelection: java.lang.String getEntity(int)>
<android.view.textclassifier.TextSelection: int getEntityCount()>
<android.view.textclassifier.TextSelection: java.lang.String getId()>
<android.view.textclassifier.TextSelection: int getSelectionEndIndex()>
<android.view.textclassifier.TextSelection: int getSelectionStartIndex()>
<org.xml.sax.Attributes: int getIndex(java.lang.String,java.lang.String)>
<org.xml.sax.Attributes: int getLength()>
<org.xml.sax.Attributes: java.lang.String getValue(int)>
<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String,java.lang.String)>
<org.xml.sax.Attributes: java.lang.String getType(int)>
<org.xml.sax.Attributes: java.lang.String getType(java.lang.String)>
<org.xml.sax.Attributes: java.lang.String getLocalName(int)>
<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String)>
<org.xml.sax.Attributes: java.lang.String getType(java.lang.String,java.lang.String)>
<org.xml.sax.Attributes: int getIndex(java.lang.String)>
<org.xml.sax.Attributes: java.lang.String getURI(int)>
<org.xml.sax.Attributes: java.lang.String getQName(int)>
<android.graphics.drawable.AnimatedImageDrawable: boolean isRunning()>
<android.graphics.drawable.AnimatedImageDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.AnimatedImageDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.AnimatedImageDrawable: void start()>
<android.graphics.drawable.AnimatedImageDrawable: void registerAnimationCallback(android.graphics.drawable.Animatable2.AnimationCallback)>
<android.graphics.drawable.AnimatedImageDrawable: boolean unregisterAnimationCallback(android.graphics.drawable.Animatable2.AnimationCallback)>
<android.graphics.drawable.AnimatedImageDrawable: int getRepeatCount()>
<android.graphics.drawable.AnimatedImageDrawable: void <init>()>
<android.graphics.drawable.AnimatedImageDrawable: int getOpacity()>
<android.graphics.drawable.AnimatedImageDrawable: void stop()>
<android.graphics.drawable.AnimatedImageDrawable: boolean isAutoMirrored()>
<android.graphics.drawable.AnimatedImageDrawable: void setRepeatCount(int)>
<android.graphics.drawable.AnimatedImageDrawable: void clearAnimationCallbacks()>
<android.graphics.drawable.AnimatedImageDrawable: void setAlpha(int)>
<android.os.HidlSupport: boolean interfacesEqual(android.os.IHwInterface,java.lang.Object)>
<android.os.HidlSupport: int deepHashCode(java.lang.Object)>
<android.os.HidlSupport: int getPidIfSharable()>
<android.os.HidlSupport: boolean deepEquals(java.lang.Object,java.lang.Object)>
<android.view.ViewGroup.OnHierarchyChangeListener: void onChildViewRemoved(android.view.View,android.view.View)>
<android.view.ViewGroup.OnHierarchyChangeListener: void onChildViewAdded(android.view.View,android.view.View)>
<java.sql.SQLRecoverableException: void <init>(Throwable)>
<java.sql.SQLRecoverableException: void <init>(String,String,int,Throwable)>
<java.sql.SQLRecoverableException: void <init>(String,String,int)>
<java.sql.SQLRecoverableException: void <init>(String,String)>
<java.sql.SQLRecoverableException: void <init>()>
<java.sql.SQLRecoverableException: void <init>(String)>
<java.sql.SQLRecoverableException: void <init>(String,Throwable)>
<java.sql.SQLRecoverableException: void <init>(String,String,Throwable)>
<android.print.PrinterCapabilitiesInfo.Builder: android.print.PrinterCapabilitiesInfo.Builder setColorModes(int,int)>
<android.print.PrinterCapabilitiesInfo.Builder: android.print.PrinterCapabilitiesInfo.Builder setMinMargins(android.print.PrintAttributes.Margins)>
<android.print.PrinterCapabilitiesInfo.Builder: void <init>(android.print.PrinterId)>
<android.print.PrinterCapabilitiesInfo.Builder: android.print.PrinterCapabilitiesInfo.Builder addResolution(android.print.PrintAttributes.Resolution,boolean)>
<android.print.PrinterCapabilitiesInfo.Builder: android.print.PrinterCapabilitiesInfo.Builder setDuplexModes(int,int)>
<android.print.PrinterCapabilitiesInfo.Builder: android.print.PrinterCapabilitiesInfo.Builder addMediaSize(android.print.PrintAttributes.MediaSize,boolean)>
<android.print.PrinterCapabilitiesInfo.Builder: android.print.PrinterCapabilitiesInfo build()>
<java.net.MalformedURLException: void <init>(String)>
<java.net.MalformedURLException: void <init>()>
<android.telecom.Connection.RttTextStream: java.lang.String read()>
<android.telecom.Connection.RttTextStream: java.lang.String readImmediately()>
<android.telecom.Connection.RttTextStream: void write(java.lang.String)>
<java.nio.file.attribute.AttributeView: java.lang.String name()>
<android.net.wifi.p2p.WifiP2pManager.DnsSdTxtRecordListener: void onDnsSdTxtRecordAvailable(java.lang.String,java.util.Map,android.net.wifi.p2p.WifiP2pDevice)>
<android.provider.SearchIndexableData: void <init>()>
<android.provider.SearchIndexableData: void <init>(android.content.Context)>
<android.security.ConfirmationPrompt: void presentPrompt(java.util.concurrent.Executor,android.security.ConfirmationCallback)>
<android.security.ConfirmationPrompt: boolean isSupported(android.content.Context)>
<android.security.ConfirmationPrompt: void cancelPrompt()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: boolean await(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: void <init>()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: void signal()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: void await()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: void awaitUninterruptibly()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: void signalAll()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: boolean hasWaiters()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: long awaitNanos(long)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: java.util.Collection getWaitingThreads()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: int getWaitQueueLength()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject: boolean awaitUntil(java.util.Date)>
<android.os.FileUtils: void closeQuietly(java.io.FileDescriptor)>
<android.os.FileUtils: boolean contains(java.io.File,java.io.File)>
<android.os.FileUtils: long copy(java.io.FileDescriptor,java.io.FileDescriptor)>
<android.os.FileUtils: long copy(java.io.FileDescriptor,java.io.FileDescriptor,android.os.CancellationSignal,java.util.concurrent.Executor,android.os.FileUtils.ProgressListener)>
<android.os.FileUtils: long copy(java.io.InputStream,java.io.OutputStream)>
<android.os.FileUtils: void closeQuietly(AutoCloseable)>
<android.os.FileUtils: long copy(java.io.InputStream,java.io.OutputStream,android.os.CancellationSignal,java.util.concurrent.Executor,android.os.FileUtils.ProgressListener)>
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getG()>
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getP()>
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getQ()>
<java.security.spec.DSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getY()>
<android.telephony.PreciseDataConnectionState: int getDataConnectionApnTypeBitMask()>
<android.telephony.PreciseDataConnectionState: void writeToParcel(android.os.Parcel,int)>
<android.telephony.PreciseDataConnectionState: int getDataConnectionFailCause()>
<android.telephony.PreciseDataConnectionState: int getDataConnectionState()>
<android.telephony.PreciseDataConnectionState: int describeContents()>
<android.telephony.PreciseDataConnectionState: java.lang.String getDataConnectionApn()>
<android.animation.IntArrayEvaluator: void <init>()>
<android.animation.IntArrayEvaluator: void <init>(int[])>
<android.animation.IntArrayEvaluator: int[] evaluate(float,int[],int[])>
<android.text.style.TtsSpan.DecimalBuilder: void <init>()>
<android.text.style.TtsSpan.DecimalBuilder: void <init>(String,String)>
<android.text.style.TtsSpan.DecimalBuilder: android.text.style.TtsSpan.DecimalBuilder setIntegerPart(java.lang.String)>
<android.text.style.TtsSpan.DecimalBuilder: android.text.style.TtsSpan.DecimalBuilder setIntegerPart(long)>
<android.text.style.TtsSpan.DecimalBuilder: android.text.style.TtsSpan.DecimalBuilder setFractionalPart(java.lang.String)>
<android.text.style.TtsSpan.DecimalBuilder: void <init>(double,int,int)>
<android.text.style.TtsSpan.DecimalBuilder: android.text.style.TtsSpan.DecimalBuilder setArgumentsFromDouble(double,int,int)>
<android.media.TimedMetaData: byte[] getMetaData()>
<android.media.TimedMetaData: long getTimestamp()>
<android.media.TimedMetaData: void <init>(long,byte[])>
<android.net.wifi.p2p.WifiP2pManager.DnsSdServiceResponseListener: void onDnsSdServiceAvailable(java.lang.String,java.lang.String,android.net.wifi.p2p.WifiP2pDevice)>
<javax.xml.transform.stream.StreamResult: void <init>()>
<javax.xml.transform.stream.StreamResult: java.io.Writer getWriter()>
<javax.xml.transform.stream.StreamResult: void <init>(String)>
<javax.xml.transform.stream.StreamResult: java.lang.String getSystemId()>
<javax.xml.transform.stream.StreamResult: void setSystemId(java.lang.String)>
<javax.xml.transform.stream.StreamResult: void setWriter(java.io.Writer)>
<javax.xml.transform.stream.StreamResult: void <init>(java.io.File)>
<javax.xml.transform.stream.StreamResult: void setSystemId(java.io.File)>
<javax.xml.transform.stream.StreamResult: void setOutputStream(java.io.OutputStream)>
<javax.xml.transform.stream.StreamResult: java.io.OutputStream getOutputStream()>
<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>
<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>
<android.media.MediaPlayer.OnInfoListener: boolean onInfo(android.media.MediaPlayer,int,int)>
<android.os.CancellationSignal.OnCancelListener: void onCancel()>
<android.database.DatabaseUtils: void appendEscapedSQLString(java.lang.StringBuilder,java.lang.String)>
<android.database.DatabaseUtils: void cursorStringToInsertHelper(android.database.Cursor,java.lang.String,android.database.DatabaseUtils.InsertHelper,int)>
<android.database.DatabaseUtils: android.os.ParcelFileDescriptor blobFileDescriptorForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>
<android.database.DatabaseUtils: void dumpCursor(android.database.Cursor,java.io.PrintStream)>
<android.database.DatabaseUtils: java.lang.String getHexCollationKey(java.lang.String)>
<android.database.DatabaseUtils: void cursorStringToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>
<android.database.DatabaseUtils: void appendValueToSql(java.lang.StringBuilder,java.lang.Object)>
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)>
<android.database.DatabaseUtils: java.lang.String[] appendSelectionArgs(java.lang.String[],java.lang.String[])>
<android.database.DatabaseUtils: void dumpCursor(android.database.Cursor,java.lang.StringBuilder)>
<android.database.DatabaseUtils: void readExceptionWithOperationApplicationExceptionFromParcel(android.os.Parcel)>
<android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor,java.io.PrintStream)>
<android.database.DatabaseUtils: int getSqlStatementType(java.lang.String)>
<android.database.DatabaseUtils: java.lang.String dumpCursorToString(android.database.Cursor)>
<android.database.DatabaseUtils: void cursorIntToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: java.lang.String concatenateWhere(java.lang.String,java.lang.String)>
<android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteStatement,java.lang.String[])>
<android.database.DatabaseUtils: void readExceptionFromParcel(android.os.Parcel)>
<android.database.DatabaseUtils: void cursorDoubleToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: android.os.ParcelFileDescriptor blobFileDescriptorForQuery(android.database.sqlite.SQLiteStatement,java.lang.String[])>
<android.database.DatabaseUtils: java.lang.String dumpCurrentRowToString(android.database.Cursor)>
<android.database.DatabaseUtils: void cursorIntToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)>
<android.database.DatabaseUtils: void cursorDoubleToCursorValues(android.database.Cursor,java.lang.String,android.content.ContentValues)>
<android.database.DatabaseUtils: void <init>()>
<android.database.DatabaseUtils: void cursorDoubleToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void cursorLongToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor)>
<android.database.DatabaseUtils: void readExceptionWithFileNotFoundExceptionFromParcel(android.os.Parcel)>
<android.database.DatabaseUtils: java.lang.String sqlEscapeString(java.lang.String)>
<android.database.DatabaseUtils: void cursorLongToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void cursorStringToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)>
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String)>
<android.database.DatabaseUtils: void cursorIntToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void bindObjectToProgram(android.database.sqlite.SQLiteProgram,int,java.lang.Object)>
<android.database.DatabaseUtils: void cursorFloatToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void cursorShortToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void cursorLongToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)>
<android.database.DatabaseUtils: void createDbFromSqlStatements(android.content.Context,java.lang.String,int,java.lang.String)>
<android.database.DatabaseUtils: java.lang.String stringForQuery(android.database.sqlite.SQLiteStatement,java.lang.String[])>
<android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor,java.lang.StringBuilder)>
<android.database.DatabaseUtils: void dumpCursor(android.database.Cursor)>
<android.database.DatabaseUtils: void writeExceptionToParcel(android.os.Parcel,Exception)>
<android.database.DatabaseUtils: void cursorStringToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void cursorRowToContentValues(android.database.Cursor,android.content.ContentValues)>
<android.database.DatabaseUtils: java.lang.String getCollationKey(java.lang.String)>
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String[])>
<android.database.DatabaseUtils: java.lang.String stringForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeEvaluator,java.lang.Object...)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,V...)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeConverter,android.graphics.Path)>
<android.animation.PropertyValuesHolder: void setObjectValues(java.lang.Object...)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,android.animation.Keyframe...)>
<android.animation.PropertyValuesHolder: void setConverter(android.animation.TypeConverter)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(java.lang.String,int...)>
<android.animation.PropertyValuesHolder: void setKeyframes(android.animation.Keyframe...)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,float[][])>
<android.animation.PropertyValuesHolder: void setEvaluator(android.animation.TypeEvaluator)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float...)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,V...)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.graphics.Path)>
<android.animation.PropertyValuesHolder: void setFloatValues(float...)>
<android.animation.PropertyValuesHolder: void setProperty(android.util.Property)>
<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder clone()>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeConverter,android.graphics.Path)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(android.util.Property,int...)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.graphics.Path)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeEvaluator,V...)>
<android.animation.PropertyValuesHolder: void setPropertyName(java.lang.String)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(android.util.Property,android.animation.Keyframe...)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeConverter,android.animation.TypeEvaluator,T...)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(java.lang.String,android.animation.Keyframe...)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(android.util.Property,float...)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,android.animation.Keyframe...)>
<android.animation.PropertyValuesHolder: void setIntValues(int...)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,int[][])>
<android.hardware.Camera.PictureCallback: void onPictureTaken(byte[],android.hardware.Camera)>
<java.security.InvalidParameterException: void <init>(String)>
<java.security.InvalidParameterException: void <init>()>
<android.view.Display: int getWidth()>
<android.view.Display: void getRealMetrics(android.util.DisplayMetrics)>
<android.view.Display: int getPixelFormat()>
<android.view.Display: float getRefreshRate()>
<android.view.Display: long getPresentationDeadlineNanos()>
<android.view.Display: int getFlags()>
<android.view.Display: android.view.Display.HdrCapabilities getHdrCapabilities()>
<android.view.Display: void getRectSize(android.graphics.Rect)>
<android.view.Display: void getSize(android.graphics.Point)>
<android.view.Display: int getState()>
<android.view.Display: java.lang.String getName()>
<android.view.Display: boolean hasAccess(int)>
<android.view.Display: int getOrientation()>
<android.view.Display: boolean isValid()>
<android.view.Display: int getDisplayId()>
<android.view.Display: boolean isHdr()>
<android.view.Display: void getCurrentSizeRange(android.graphics.Point,android.graphics.Point)>
<android.view.Display: int getRotation()>
<android.view.Display: android.view.Display.Mode[] getSupportedModes()>
<android.view.Display: void getRealSize(android.graphics.Point)>
<android.view.Display: boolean isWideColorGamut()>
<android.view.Display: android.view.Display.Mode getMode()>
<android.view.Display: android.graphics.ColorSpace getPreferredWideGamutColorSpace()>
<android.view.Display: android.view.DisplayCutout getCutout()>
<android.view.Display: float[] getSupportedRefreshRates()>
<android.view.Display: void getMetrics(android.util.DisplayMetrics)>
<android.view.Display: long getAppVsyncOffsetNanos()>
<android.view.Display: int getHeight()>
<java.util.stream.Collector: java.util.Set characteristics()>
<java.util.stream.Collector: java.util.function.Function finisher()>
<java.util.stream.Collector: java.util.function.Supplier supplier()>
<java.util.stream.Collector: java.util.function.BinaryOperator combiner()>
<java.util.stream.Collector: java.util.stream.Collector of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector.Characteristics...)>
<java.util.stream.Collector: java.util.function.BiConsumer accumulator()>
<java.util.stream.Collector: java.util.stream.Collector of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.stream.Collector.Characteristics...)>
<javax.xml.validation.SchemaFactoryLoader: javax.xml.validation.SchemaFactory newFactory(java.lang.String)>
<javax.xml.validation.SchemaFactoryLoader: void <init>()>
<android.companion.AssociationRequest: int describeContents()>
<android.companion.AssociationRequest: void writeToParcel(android.os.Parcel,int)>
<android.opengl.GLException: void <init>(int,String)>
<android.opengl.GLException: void <init>(int)>
<android.metrics.LogMaker: int getProcessId()>
<android.metrics.LogMaker: android.metrics.LogMaker clearSubtype()>
<android.metrics.LogMaker: boolean isSubsetOf(android.metrics.LogMaker)>
<android.metrics.LogMaker: java.lang.String getCounterName()>
<android.metrics.LogMaker: android.metrics.LogMaker clearTaggedData(int)>
<android.metrics.LogMaker: long getCounterBucket()>
<android.metrics.LogMaker: android.metrics.LogMaker clearCategory()>
<android.metrics.LogMaker: int getUid()>
<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>
<android.metrics.LogMaker: int getSubtype()>
<android.metrics.LogMaker: int getCategory()>
<android.metrics.LogMaker: android.metrics.LogMaker clearType()>
<android.metrics.LogMaker: android.metrics.LogMaker setCategory(int)>
<android.metrics.LogMaker: android.metrics.LogMaker setType(int)>
<android.metrics.LogMaker: int getType()>
<android.metrics.LogMaker: void deserialize(java.lang.Object[])>
<android.metrics.LogMaker: java.lang.Object[] serialize()>
<android.metrics.LogMaker: boolean isLongCounterBucket()>
<android.metrics.LogMaker: int getCounterValue()>
<android.metrics.LogMaker: java.lang.Object getTaggedData(int)>
<android.metrics.LogMaker: void <init>(Object[])>
<android.metrics.LogMaker: boolean isValidValue(java.lang.Object)>
<android.metrics.LogMaker: void <init>(int)>
<android.metrics.LogMaker: android.metrics.LogMaker setSubtype(int)>
<android.metrics.LogMaker: java.lang.String getPackageName()>
<android.metrics.LogMaker: android.metrics.LogMaker setPackageName(java.lang.String)>
<android.metrics.LogMaker: long getTimestamp()>
<android.metrics.LogMaker: android.metrics.LogMaker clearPackageName()>
<android.graphics.PostProcessor: int onPostProcess(android.graphics.Canvas)>
<android.text.BoringLayout: void <init>(CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean,android.text.TextUtils.TruncateAt,int)>
<android.text.BoringLayout: android.text.BoringLayout make(CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean,android.text.TextUtils.TruncateAt,int)>
<android.text.BoringLayout: boolean getLineContainsTab(int)>
<android.text.BoringLayout: void ellipsized(int,int)>
<android.text.BoringLayout: int getParagraphDirection(int)>
<android.text.BoringLayout: void <init>(CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean)>
<android.text.BoringLayout: int getEllipsisCount(int)>
<android.text.BoringLayout: android.text.Layout.Directions getLineDirections(int)>
<android.text.BoringLayout: int getLineTop(int)>
<android.text.BoringLayout: android.text.BoringLayout replaceOrMake(CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean)>
<android.text.BoringLayout: int getLineCount()>
<android.text.BoringLayout: int getBottomPadding()>
<android.text.BoringLayout: android.text.BoringLayout.Metrics isBoring(CharSequence,android.text.TextPaint)>
<android.text.BoringLayout: int getTopPadding()>
<android.text.BoringLayout: android.text.BoringLayout replaceOrMake(CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean,android.text.TextUtils.TruncateAt,int)>
<android.text.BoringLayout: int getEllipsisStart(int)>
<android.text.BoringLayout: int getLineDescent(int)>
<android.text.BoringLayout: int getLineStart(int)>
<android.text.BoringLayout: android.text.BoringLayout make(CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,android.text.BoringLayout.Metrics,boolean)>
<android.text.BoringLayout: android.text.BoringLayout.Metrics isBoring(CharSequence,android.text.TextPaint,android.text.BoringLayout.Metrics)>
<android.telephony.mbms.DownloadRequest.Builder: void <init>(android.net.Uri,android.net.Uri)>
<android.telephony.mbms.DownloadRequest.Builder: android.telephony.mbms.DownloadRequest.Builder setServiceInfo(android.telephony.mbms.FileServiceInfo)>
<android.telephony.mbms.DownloadRequest.Builder: android.telephony.mbms.DownloadRequest.Builder setSubscriptionId(int)>
<android.telephony.mbms.DownloadRequest.Builder: android.telephony.mbms.DownloadRequest.Builder fromDownloadRequest(android.telephony.mbms.DownloadRequest)>
<android.telephony.mbms.DownloadRequest.Builder: android.telephony.mbms.DownloadRequest.Builder fromSerializedRequest(byte[])>
<android.telephony.mbms.DownloadRequest.Builder: android.telephony.mbms.DownloadRequest.Builder setServiceId(java.lang.String)>
<android.telephony.mbms.DownloadRequest.Builder: android.telephony.mbms.DownloadRequest build()>
<android.telephony.mbms.DownloadRequest.Builder: android.telephony.mbms.DownloadRequest.Builder setAppIntent(android.content.Intent)>
<android.os.Build.VERSION_CODES: void <init>()>
<java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>
<android.media.RemoteControlClient.OnMetadataUpdateListener: void onMetadataUpdate(int,java.lang.Object)>
<android.security.keystore.UserNotAuthenticatedException: void <init>(String,Throwable)>
<android.security.keystore.UserNotAuthenticatedException: void <init>()>
<android.security.keystore.UserNotAuthenticatedException: void <init>(String)>
<android.content.pm.LauncherActivityInfo: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.content.pm.LauncherActivityInfo: android.content.ComponentName getComponentName()>
<android.content.pm.LauncherActivityInfo: long getFirstInstallTime()>
<android.content.pm.LauncherActivityInfo: android.os.UserHandle getUser()>
<android.content.pm.LauncherActivityInfo: java.lang.String getName()>
<android.content.pm.LauncherActivityInfo: android.graphics.drawable.Drawable getBadgedIcon(int)>
<android.content.pm.LauncherActivityInfo: android.graphics.drawable.Drawable getIcon(int)>
<android.content.pm.LauncherActivityInfo: CharSequence getLabel()>
<android.net.MailTo: android.net.MailTo parse(java.lang.String)>
<android.net.MailTo: java.util.Map getHeaders()>
<android.net.MailTo: boolean isMailTo(java.lang.String)>
<android.net.MailTo: java.lang.String getCc()>
<android.net.MailTo: java.lang.String getTo()>
<android.net.MailTo: java.lang.String getBody()>
<android.net.MailTo: java.lang.String getSubject()>
<android.media.audiofx.EnvironmentalReverb.Settings: void <init>()>
<android.media.audiofx.EnvironmentalReverb.Settings: void <init>(String)>
<android.graphics.Path: void setFillType(android.graphics.Path.FillType)>
<android.graphics.Path: void addRect(android.graphics.RectF,android.graphics.Path.Direction)>
<android.graphics.Path: void addOval(android.graphics.RectF,android.graphics.Path.Direction)>
<android.graphics.Path: void rQuadTo(float,float,float,float)>
<android.graphics.Path: void rewind()>
<android.graphics.Path: void rCubicTo(float,float,float,float,float,float)>
<android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)>
<android.graphics.Path: void moveTo(float,float)>
<android.graphics.Path: void set(android.graphics.Path)>
<android.graphics.Path: void close()>
<android.graphics.Path: void incReserve(int)>
<android.graphics.Path: void addPath(android.graphics.Path)>
<android.graphics.Path: float[] approximate(float)>
<android.graphics.Path: void rLineTo(float,float)>
<android.graphics.Path: void cubicTo(float,float,float,float,float,float)>
<android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)>
<android.graphics.Path: void rMoveTo(float,float)>
<android.graphics.Path: android.graphics.Path.FillType getFillType()>
<android.graphics.Path: void addOval(float,float,float,float,android.graphics.Path.Direction)>
<android.graphics.Path: void addArc(float,float,float,float,float,float)>
<android.graphics.Path: void setLastPoint(float,float)>
<android.graphics.Path: void reset()>
<android.graphics.Path: void lineTo(float,float)>
<android.graphics.Path: void addCircle(float,float,float,android.graphics.Path.Direction)>
<android.graphics.Path: void addRoundRect(float,float,float,float,float,float,android.graphics.Path.Direction)>
<android.graphics.Path: boolean isRect(android.graphics.RectF)>
<android.graphics.Path: void transform(android.graphics.Matrix)>
<android.graphics.Path: void addArc(android.graphics.RectF,float,float)>
<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)>
<android.graphics.Path: boolean isConvex()>
<android.graphics.Path: boolean isEmpty()>
<android.graphics.Path: void offset(float,float,android.graphics.Path)>
<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path.Direction)>
<android.graphics.Path: void addRoundRect(float,float,float,float,float[],android.graphics.Path.Direction)>
<android.graphics.Path: void arcTo(float,float,float,float,float,float,boolean)>
<android.graphics.Path: void <init>(android.graphics.Path)>
<android.graphics.Path: void <init>()>
<android.graphics.Path: void addRoundRect(android.graphics.RectF,float[],android.graphics.Path.Direction)>
<android.graphics.Path: void arcTo(android.graphics.RectF,float,float)>
<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path,android.graphics.Path.Op)>
<android.graphics.Path: void addPath(android.graphics.Path,android.graphics.Matrix)>
<android.graphics.Path: void toggleInverseFillType()>
<android.graphics.Path: void offset(float,float)>
<android.graphics.Path: void quadTo(float,float,float,float)>
<android.graphics.Path: void addPath(android.graphics.Path,float,float)>
<android.graphics.Path: void addRoundRect(android.graphics.RectF,float,float,android.graphics.Path.Direction)>
<android.graphics.Path: boolean isInverseFillType()>
<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path.Op)>
<android.hardware.location.GeofenceHardwareMonitorEvent: int getMonitoringType()>
<android.hardware.location.GeofenceHardwareMonitorEvent: int getMonitoringStatus()>
<android.hardware.location.GeofenceHardwareMonitorEvent: int getSourceTechnologies()>
<android.hardware.location.GeofenceHardwareMonitorEvent: void writeToParcel(android.os.Parcel,int)>
<android.hardware.location.GeofenceHardwareMonitorEvent: android.location.Location getLocation()>
<android.hardware.location.GeofenceHardwareMonitorEvent: int describeContents()>
<android.hardware.location.GeofenceHardwareMonitorEvent: void <init>(int,int,int,android.location.Location)>
<android.os.HwParcel: java.util.ArrayList readInt64Vector()>
<android.os.HwParcel: void writeInt32(int)>
<android.os.HwParcel: long readInt64()>
<android.os.HwParcel: void writeInt8(byte)>
<android.os.HwParcel: void writeFloat(float)>
<android.os.HwParcel: void writeFloatVector(java.util.ArrayList)>
<android.os.HwParcel: void writeString(java.lang.String)>
<android.os.HwParcel: java.util.ArrayList readDoubleVector()>
<android.os.HwParcel: void writeInt16(short)>
<android.os.HwParcel: float readFloat()>
<android.os.HwParcel: android.os.NativeHandle readNativeHandle()>
<android.os.HwParcel: void writeInt64Vector(java.util.ArrayList)>
<android.os.HwParcel: void writeNativeHandle(android.os.NativeHandle)>
<android.os.HwParcel: void releaseTemporaryStorage()>
<android.os.HwParcel: void writeNativeHandleVector(java.util.ArrayList)>
<android.os.HwParcel: void release()>
<android.os.HwParcel: int readInt32()>
<android.os.HwParcel: void writeBuffer(android.os.HwBlob)>
<android.os.HwParcel: void writeStatus(int)>
<android.os.HwParcel: java.util.ArrayList readNativeHandleVector()>
<android.os.HwParcel: void writeStrongBinder(android.os.IHwBinder)>
<android.os.HwParcel: void writeDoubleVector(java.util.ArrayList)>
<android.os.HwParcel: void writeBoolVector(java.util.ArrayList)>
<android.os.HwParcel: android.os.NativeHandle readEmbeddedNativeHandle(long,long)>
<android.os.HwParcel: void writeInt64(long)>
<android.os.HwParcel: boolean readBool()>
<android.os.HwParcel: void writeStringVector(java.util.ArrayList)>
<android.os.HwParcel: java.util.ArrayList readInt32Vector()>
<android.os.HwParcel: void writeDouble(double)>
<android.os.HwParcel: java.util.ArrayList readFloatVector()>
<android.os.HwParcel: void <init>()>
<android.os.HwParcel: android.os.HwBlob readBuffer(long)>
<android.os.HwParcel: void writeInt32Vector(java.util.ArrayList)>
<android.os.HwParcel: android.os.IHwBinder readStrongBinder()>
<android.os.HwParcel: void writeInt8Vector(java.util.ArrayList)>
<android.os.HwParcel: java.util.ArrayList readBoolVector()>
<android.os.HwParcel: void send()>
<android.os.HwParcel: java.util.ArrayList readInt16Vector()>
<android.os.HwParcel: short readInt16()>
<android.os.HwParcel: void writeInterfaceToken(java.lang.String)>
<android.os.HwParcel: java.util.ArrayList readInt8Vector()>
<android.os.HwParcel: void enforceInterface(java.lang.String)>
<android.os.HwParcel: void writeInt16Vector(java.util.ArrayList)>
<android.os.HwParcel: double readDouble()>
<android.os.HwParcel: android.os.HwBlob readEmbeddedBuffer(long,long,long,boolean)>
<android.os.HwParcel: byte readInt8()>
<android.os.HwParcel: void writeBool(boolean)>
<android.os.HwParcel: java.util.ArrayList readStringVector()>
<android.os.HwParcel: java.lang.String readString()>
<android.os.HwParcel: void verifySuccess()>
<android.net.wifi.WifiScanner.BssidInfo: void <init>()>
<android.media.audiopolicy.AudioProductStrategy: int describeContents()>
<android.media.audiopolicy.AudioProductStrategy: void writeToParcel(android.os.Parcel,int)>
<android.media.audiopolicy.AudioProductStrategy: int getId()>
<android.media.audiopolicy.AudioProductStrategy: android.media.AudioAttributes getAudioAttributes()>
<java.security.acl.AclNotFoundException: void <init>()>
<android.service.autofill.InternalOnClickAction: void onClick(android.view.ViewGroup)>
<android.service.autofill.InternalOnClickAction: void <init>()>
<java.lang.ReflectiveOperationException: void <init>(Throwable)>
<java.lang.ReflectiveOperationException: void <init>(String)>
<java.lang.ReflectiveOperationException: void <init>(String,Throwable)>
<java.lang.ReflectiveOperationException: void <init>()>
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)>
<java.nio.channels.spi.AbstractSelectableChannel: boolean isRegistered()>
<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock()>
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>
<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking()>
<java.nio.channels.spi.AbstractSelectableChannel: void <init>(java.nio.channels.spi.SelectorProvider)>
<java.nio.channels.spi.AbstractSelectableChannel: void implCloseChannel()>
<java.nio.channels.spi.AbstractSelectableChannel: void implCloseSelectableChannel()>
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int,java.lang.Object)>
<java.nio.channels.spi.AbstractSelectableChannel: void implConfigureBlocking(boolean)>
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.spi.SelectorProvider provider()>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: boolean startsWith(java.lang.String)>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: int getNameCount()>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.net.URI toUri()>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.nio.file.Path getParent()>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.lang.String toString()>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: boolean startsWith(java.nio.file.Path)>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: boolean isAbsolute()>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.nio.file.Path subpath(int,int)>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.nio.file.Path resolve(java.lang.String)>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: boolean equals(java.lang.Object)>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.nio.file.Path normalize()>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.io.File toFile()>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.nio.file.Path relativize(java.nio.file.Path)>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.nio.file.Path resolveSibling(java.nio.file.Path)>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.nio.file.Path getFileName()>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.nio.file.Path toRealPath(java.nio.file.LinkOption...)>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: boolean endsWith(java.nio.file.Path)>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: int compareTo(java.nio.file.Path)>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.util.Iterator iterator()>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.nio.file.Path resolve(java.nio.file.Path)>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: boolean endsWith(java.lang.String)>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.nio.file.Path toAbsolutePath()>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.nio.file.FileSystem getFileSystem()>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.nio.file.Path getRoot()>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.nio.file.Path getName(int)>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: java.nio.file.Path resolveSibling(java.lang.String)>
<java.nio.file.Path extends java.lang.Comparable java.lang.Iterable java.nio.file.Watchable: int hashCode()>
<java.time.temporal.TemporalAccessor: R query(java.time.temporal.TemporalQuery)>
<java.time.temporal.TemporalAccessor: boolean isSupported(java.time.temporal.TemporalField)>
<java.time.temporal.TemporalAccessor: int get(java.time.temporal.TemporalField)>
<java.time.temporal.TemporalAccessor: long getLong(java.time.temporal.TemporalField)>
<java.time.temporal.TemporalAccessor: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>
<android.telecom.ConnectionRequest: boolean isRequestingRtt()>
<android.telecom.ConnectionRequest: android.telecom.PhoneAccountHandle getAccountHandle()>
<android.telecom.ConnectionRequest: android.telecom.Connection.RttTextStream getRttTextStream()>
<android.telecom.ConnectionRequest: android.net.Uri getAddress()>
<android.telecom.ConnectionRequest: android.os.Bundle getExtras()>
<android.telecom.ConnectionRequest: void <init>(android.telecom.PhoneAccountHandle,android.net.Uri,android.os.Bundle)>
<android.telecom.ConnectionRequest: void <init>(android.telecom.PhoneAccountHandle,android.net.Uri,android.os.Bundle,int)>
<android.telecom.ConnectionRequest: void writeToParcel(android.os.Parcel,int)>
<android.telecom.ConnectionRequest: int getVideoState()>
<android.telecom.ConnectionRequest: int describeContents()>
<java.util.function.ToLongBiFunction: long applyAsLong(T,U)>
<android.telephony.ims.feature.MmTelFeature.MmTelCapabilities: void addCapabilities(@android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.MmTelCapabilityint)>
<android.telephony.ims.feature.MmTelFeature.MmTelCapabilities: void removeCapabilities(@android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.MmTelCapabilityint)>
<android.telephony.ims.feature.MmTelFeature.MmTelCapabilities: boolean isCapable(@android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.MmTelCapabilityint)>
<android.telephony.ims.feature.MmTelFeature.MmTelCapabilities: void <init>()>
<android.telephony.ims.feature.MmTelFeature.MmTelCapabilities: void <init>(int)>
<android.telephony.ims.feature.MmTelFeature.MmTelCapabilities: void <init>(android.telephony.ims.feature.ImsFeature.Capabilities)>
<android.media.MediaDataSource: long getSize()>
<android.media.MediaDataSource: int readAt(long,byte[],int,int)>
<android.media.MediaDataSource: void <init>()>
<android.icu.text.UnicodeMatcher: int matches(android.icu.text.Replaceable,int[],int,boolean)>
<android.icu.text.UnicodeMatcher: void addMatchSetTo(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeMatcher: boolean matchesIndexValue(int)>
<android.icu.text.UnicodeMatcher: java.lang.String toPattern(boolean)>
<java.lang.UnknownError: void <init>(String)>
<java.lang.UnknownError: void <init>()>
<android.net.SSLCertificateSocketFactory: javax.net.SocketFactory getDefault(int)>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>
<android.net.SSLCertificateSocketFactory: java.lang.String[] getSupportedCipherSuites()>
<android.net.SSLCertificateSocketFactory: void setKeyManagers(javax.net.ssl.KeyManager[])>
<android.net.SSLCertificateSocketFactory: void <init>(int)>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int)>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>
<android.net.SSLCertificateSocketFactory: void setHostname(java.net.Socket,java.lang.String)>
<android.net.SSLCertificateSocketFactory: java.lang.String[] getDefaultCipherSuites()>
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getInsecure(int,android.net.SSLSessionCache)>
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDefault(int,android.net.SSLSessionCache)>
<android.net.SSLCertificateSocketFactory: void setUseSessionTickets(java.net.Socket,boolean)>
<android.net.SSLCertificateSocketFactory: void setTrustManagers(javax.net.ssl.TrustManager[])>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>
<android.net.SSLCertificateSocketFactory: void setNpnProtocols(byte[][])>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
<android.net.SSLCertificateSocketFactory: byte[] getNpnSelectedProtocol(java.net.Socket)>
<java.nio.file.SecureDirectoryStream extends java.nio.file.DirectoryStream: V getFileAttributeView(T,java.lang.Class,java.nio.file.LinkOption...)>
<java.nio.file.SecureDirectoryStream extends java.nio.file.DirectoryStream: java.nio.file.SecureDirectoryStream newDirectoryStream(T,java.nio.file.LinkOption...)>
<java.nio.file.SecureDirectoryStream extends java.nio.file.DirectoryStream: V getFileAttributeView(java.lang.Class)>
<java.nio.file.SecureDirectoryStream extends java.nio.file.DirectoryStream: void move(T,java.nio.file.SecureDirectoryStream,T)>
<java.nio.file.SecureDirectoryStream extends java.nio.file.DirectoryStream: java.nio.channels.SeekableByteChannel newByteChannel(T,java.util.Set,java.nio.file.attribute.FileAttribute...)>
<java.nio.file.SecureDirectoryStream extends java.nio.file.DirectoryStream: void deleteDirectory(T)>
<java.nio.file.SecureDirectoryStream extends java.nio.file.DirectoryStream: void deleteFile(T)>
<android.content.LocusId: void <init>(String)>
<android.content.LocusId: int describeContents()>
<android.content.LocusId: void writeToParcel(android.os.Parcel,int)>
<android.content.LocusId: java.lang.String getId()>
<android.hardware.ConsumerIrManager.CarrierFrequencyRange: int getMaxFrequency()>
<android.hardware.ConsumerIrManager.CarrierFrequencyRange: int getMinFrequency()>
<android.hardware.ConsumerIrManager.CarrierFrequencyRange: void <init>(int,int)>
<java.io.Flushable: void flush()>
<android.telephony.euicc.EuiccRulesAuthTable.Builder: android.telephony.euicc.EuiccRulesAuthTable build()>
<android.telephony.euicc.EuiccRulesAuthTable.Builder: android.telephony.euicc.EuiccRulesAuthTable.Builder add(int,java.util.List,int)>
<android.telephony.euicc.EuiccRulesAuthTable.Builder: void <init>(int)>
<java.security.PrivilegedActionException: void <init>(Exception)>
<java.security.PrivilegedActionException: Exception getException()>
<java.nio.file.FileStore: java.lang.Object getAttribute(java.lang.String)>
<java.nio.file.FileStore: boolean isReadOnly()>
<java.nio.file.FileStore: long getTotalSpace()>
<java.nio.file.FileStore: boolean supportsFileAttributeView(java.lang.Class)>
<java.nio.file.FileStore: java.lang.String name()>
<java.nio.file.FileStore: void <init>()>
<java.nio.file.FileStore: V getFileStoreAttributeView(java.lang.Class)>
<java.nio.file.FileStore: long getUsableSpace()>
<java.nio.file.FileStore: boolean supportsFileAttributeView(java.lang.String)>
<java.nio.file.FileStore: long getUnallocatedSpace()>
<java.nio.file.FileStore: java.lang.String type()>
<android.view.textservice.SpellCheckerInfo: java.lang.String getPackageName()>
<android.view.textservice.SpellCheckerInfo: int describeContents()>
<android.view.textservice.SpellCheckerInfo: int getSubtypeCount()>
<android.view.textservice.SpellCheckerInfo: android.content.ComponentName getComponent()>
<android.view.textservice.SpellCheckerInfo: android.view.textservice.SpellCheckerSubtype getSubtypeAt(int)>
<android.view.textservice.SpellCheckerInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.view.textservice.SpellCheckerInfo: CharSequence loadLabel(android.content.pm.PackageManager)>
<android.view.textservice.SpellCheckerInfo: java.lang.String getId()>
<android.view.textservice.SpellCheckerInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.textservice.SpellCheckerInfo: android.content.pm.ServiceInfo getServiceInfo()>
<android.view.textservice.SpellCheckerInfo: java.lang.String getSettingsActivity()>
<java.util.concurrent.BrokenBarrierException: void <init>(String)>
<java.util.concurrent.BrokenBarrierException: void <init>()>
<android.os.RecoverySystem.ProgressListener: void onProgress(int)>
<android.view.WindowId: boolean isFocused()>
<android.view.WindowId: void writeToParcel(android.os.Parcel,int)>
<android.view.WindowId: void unregisterFocusObserver(android.view.WindowId.FocusObserver)>
<android.view.WindowId: int describeContents()>
<android.view.WindowId: void registerFocusObserver(android.view.WindowId.FocusObserver)>
<android.net.NetworkRequest: boolean hasCapability(int)>
<android.net.NetworkRequest: void writeToParcel(android.os.Parcel,int)>
<android.net.NetworkRequest: int describeContents()>
<android.net.NetworkRequest: boolean hasTransport(int)>
<android.os.SystemProperties: long getLong(java.lang.String,long)>
<android.os.SystemProperties: java.lang.String get(java.lang.String)>
<android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>
<android.os.SystemProperties: int getInt(java.lang.String,int)>
<android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>
<android.media.AudioPlaybackCaptureConfiguration.Builder: android.media.AudioPlaybackCaptureConfiguration.Builder excludeUsage(int)>
<android.media.AudioPlaybackCaptureConfiguration.Builder: android.media.AudioPlaybackCaptureConfiguration build()>
<android.media.AudioPlaybackCaptureConfiguration.Builder: android.media.AudioPlaybackCaptureConfiguration.Builder excludeUid(int)>
<android.media.AudioPlaybackCaptureConfiguration.Builder: android.media.AudioPlaybackCaptureConfiguration.Builder addMatchingUid(int)>
<android.media.AudioPlaybackCaptureConfiguration.Builder: void <init>(android.media.projection.MediaProjection)>
<android.media.AudioPlaybackCaptureConfiguration.Builder: android.media.AudioPlaybackCaptureConfiguration.Builder addMatchingUsage(int)>
<android.text.TextUtils.StringSplitter extends java.lang.Iterable: void setString(java.lang.String)>
<android.net.wifi.rtt.RangingRequest: int describeContents()>
<android.net.wifi.rtt.RangingRequest: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.rtt.RangingRequest: int getMaxPeers()>
<org.apache.http.conn.scheme.HostNameResolver: java.net.InetAddress resolve(java.lang.String)>
<android.telecom.AudioState: boolean isMuted()>
<android.telecom.AudioState: java.lang.String audioRouteToString(int)>
<android.telecom.AudioState: void <init>(android.telecom.AudioState)>
<android.telecom.AudioState: void <init>(android.telecom.CallAudioState)>
<android.telecom.AudioState: void <init>(boolean,int,int)>
<android.telecom.AudioState: int describeContents()>
<android.telecom.AudioState: int getRoute()>
<android.telecom.AudioState: int getSupportedRouteMask()>
<android.telecom.AudioState: void writeToParcel(android.os.Parcel,int)>
<android.transition.TransitionInflater: android.transition.Transition inflateTransition(@TransitionResint)>
<android.transition.TransitionInflater: android.transition.TransitionInflater from(android.content.Context)>
<android.transition.TransitionInflater: android.transition.TransitionManager inflateTransitionManager(@TransitionResint,android.view.ViewGroup)>
<java.util.concurrent.Phaser: int register()>
<java.util.concurrent.Phaser: void <init>(int)>
<java.util.concurrent.Phaser: int getPhase()>
<java.util.concurrent.Phaser: void <init>(java.util.concurrent.Phaser,int)>
<java.util.concurrent.Phaser: int getUnarrivedParties()>
<java.util.concurrent.Phaser: int getArrivedParties()>
<java.util.concurrent.Phaser: int arrive()>
<java.util.concurrent.Phaser: int getRegisteredParties()>
<java.util.concurrent.Phaser: int awaitAdvance(int)>
<java.util.concurrent.Phaser: int awaitAdvanceInterruptibly(int)>
<java.util.concurrent.Phaser: void forceTermination()>
<java.util.concurrent.Phaser: boolean isTerminated()>
<java.util.concurrent.Phaser: int awaitAdvanceInterruptibly(int,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.Phaser: void <init>(java.util.concurrent.Phaser)>
<java.util.concurrent.Phaser: int arriveAndAwaitAdvance()>
<java.util.concurrent.Phaser: int bulkRegister(int)>
<java.util.concurrent.Phaser: java.util.concurrent.Phaser getRoot()>
<java.util.concurrent.Phaser: boolean onAdvance(int,int)>
<java.util.concurrent.Phaser: void <init>()>
<java.util.concurrent.Phaser: int arriveAndDeregister()>
<java.util.concurrent.Phaser: java.util.concurrent.Phaser getParent()>
<javax.net.ServerSocketFactory: java.net.ServerSocket createServerSocket(int,int)>
<javax.net.ServerSocketFactory: java.net.ServerSocket createServerSocket()>
<javax.net.ServerSocketFactory: java.net.ServerSocket createServerSocket(int)>
<javax.net.ServerSocketFactory: void <init>()>
<javax.net.ServerSocketFactory: java.net.ServerSocket createServerSocket(int,int,java.net.InetAddress)>
<javax.net.ServerSocketFactory: javax.net.ServerSocketFactory getDefault()>
<java.security.IdentityScope: java.security.Identity getIdentity(java.security.PublicKey)>
<java.security.IdentityScope: int size()>
<java.security.IdentityScope: void addIdentity(java.security.Identity)>
<java.security.IdentityScope: void <init>()>
<java.security.IdentityScope: void removeIdentity(java.security.Identity)>
<java.security.IdentityScope: void <init>(String)>
<java.security.IdentityScope: java.security.Identity getIdentity(java.lang.String)>
<java.security.IdentityScope: java.security.IdentityScope getSystemScope()>
<java.security.IdentityScope: void setSystemScope(java.security.IdentityScope)>
<java.security.IdentityScope: void <init>(String,java.security.IdentityScope)>
<java.security.IdentityScope: java.security.Identity getIdentity(java.security.Principal)>
<java.security.IdentityScope: java.util.Enumeration identities()>
<java.util.function.BinaryOperator extends java.util.function.BiFunction: java.util.function.BinaryOperator minBy(java.util.Comparator)>
<java.util.function.BinaryOperator extends java.util.function.BiFunction: java.util.function.BinaryOperator maxBy(java.util.Comparator)>
<android.hardware.hdmi.HdmiClient: void setVendorCommandListener(android.hardware.hdmi.HdmiControlManager.VendorCommandListener)>
<android.hardware.hdmi.HdmiClient: android.hardware.hdmi.HdmiDeviceInfo getActiveSource()>
<android.hardware.hdmi.HdmiClient: void sendVendorCommand(int,byte[],boolean)>
<android.hardware.hdmi.HdmiClient: void sendKeyEvent(int,boolean)>
<android.graphics.PointF: void <init>(android.graphics.Point)>
<android.graphics.PointF: void writeToParcel(android.os.Parcel,int)>
<android.graphics.PointF: float length(float,float)>
<android.graphics.PointF: float length()>
<android.graphics.PointF: void offset(float,float)>
<android.graphics.PointF: void readFromParcel(android.os.Parcel)>
<android.graphics.PointF: void set(android.graphics.PointF)>
<android.graphics.PointF: void set(float,float)>
<android.graphics.PointF: void <init>()>
<android.graphics.PointF: void <init>(float,float)>
<android.graphics.PointF: boolean equals(float,float)>
<android.graphics.PointF: void negate()>
<android.graphics.PointF: int describeContents()>
<android.os.HwBlob: java.lang.Short[] wrapArray(short[])>
<android.os.HwBlob: long handle()>
<android.os.HwBlob: void <init>(int)>
<android.os.HwBlob: void copyToFloatArray(long,float[],int)>
<android.os.HwBlob: void copyToInt8Array(long,byte[],int)>
<android.os.HwBlob: void putBool(long,boolean)>
<android.os.HwBlob: void putDouble(long,double)>
<android.os.HwBlob: double getDouble(long)>
<android.os.HwBlob: void putInt64Array(long,long[])>
<android.os.HwBlob: void copyToInt64Array(long,long[],int)>
<android.os.HwBlob: java.lang.Integer[] wrapArray(int[])>
<android.os.HwBlob: void copyToDoubleArray(long,double[],int)>
<android.os.HwBlob: void putInt32(long,int)>
<android.os.HwBlob: short getInt16(long)>
<android.os.HwBlob: void putBlob(long,android.os.HwBlob)>
<android.os.HwBlob: java.lang.Boolean[] wrapArray(boolean[])>
<android.os.HwBlob: java.lang.Byte[] wrapArray(byte[])>
<android.os.HwBlob: void putInt8Array(long,byte[])>
<android.os.HwBlob: void putString(long,java.lang.String)>
<android.os.HwBlob: java.lang.Double[] wrapArray(double[])>
<android.os.HwBlob: long getInt64(long)>
<android.os.HwBlob: float getFloat(long)>
<android.os.HwBlob: void copyToBoolArray(long,boolean[],int)>
<android.os.HwBlob: boolean getBool(long)>
<android.os.HwBlob: void putFloat(long,float)>
<android.os.HwBlob: java.lang.String getString(long)>
<android.os.HwBlob: void putDoubleArray(long,double[])>
<android.os.HwBlob: void putInt16(long,short)>
<android.os.HwBlob: void putNativeHandle(long,android.os.NativeHandle)>
<android.os.HwBlob: void copyToInt16Array(long,short[],int)>
<android.os.HwBlob: void putInt64(long,long)>
<android.os.HwBlob: void putFloatArray(long,float[])>
<android.os.HwBlob: void putInt16Array(long,short[])>
<android.os.HwBlob: void putBoolArray(long,boolean[])>
<android.os.HwBlob: void putInt32Array(long,int[])>
<android.os.HwBlob: void copyToInt32Array(long,int[],int)>
<android.os.HwBlob: void putInt8(long,byte)>
<android.os.HwBlob: java.lang.Float[] wrapArray(float[])>
<android.os.HwBlob: byte getInt8(long)>
<android.os.HwBlob: java.lang.Long[] wrapArray(long[])>
<android.os.HwBlob: int getInt32(long)>
<java.security.KeyStore.Builder: java.security.KeyStore getKeyStore()>
<java.security.KeyStore.Builder: java.security.KeyStore.Builder newInstance(java.lang.String,java.security.Provider,java.io.File,java.security.KeyStore.ProtectionParameter)>
<java.security.KeyStore.Builder: void <init>()>
<java.security.KeyStore.Builder: java.security.KeyStore.Builder newInstance(java.security.KeyStore,java.security.KeyStore.ProtectionParameter)>
<java.security.KeyStore.Builder: java.security.KeyStore.Builder newInstance(java.lang.String,java.security.Provider,java.security.KeyStore.ProtectionParameter)>
<java.security.KeyStore.Builder: java.security.KeyStore.ProtectionParameter getProtectionParameter(java.lang.String)>
<android.view.PixelCopy.OnPixelCopyFinishedListener: void onPixelCopyFinished(int)>
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate now(java.time.ZoneId)>
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate with(java.time.temporal.TemporalField,long)>
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate minus(java.time.temporal.TemporalAmount)>
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate minus(long,java.time.temporal.TemporalUnit)>
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate of(int,int,int)>
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate plus(long,java.time.temporal.TemporalUnit)>
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistEra getEra()>
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistEra of(int)>
<java.time.chrono.ThaiBuddhistDate: long getLong(java.time.temporal.TemporalField)>
<java.time.chrono.ThaiBuddhistDate: int lengthOfMonth()>
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistChronology getChronology()>
<java.time.chrono.ThaiBuddhistDate: int getValue()>
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate with(java.time.temporal.TemporalAdjuster)>
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate now()>
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate plus(java.time.temporal.TemporalAmount)>
<java.time.chrono.ThaiBuddhistDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate now(java.time.Clock)>
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate from(java.time.temporal.TemporalAccessor)>
<android.text.style.TypefaceSpan: void <init>(android.graphics.Typeface)>
<android.text.style.TypefaceSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.TypefaceSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.TypefaceSpan: android.graphics.Typeface getTypeface()>
<android.text.style.TypefaceSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.TypefaceSpan: void <init>(android.os.Parcel)>
<android.text.style.TypefaceSpan: void <init>(String)>
<android.text.style.TypefaceSpan: int getSpanTypeId()>
<android.text.style.TypefaceSpan: java.lang.String getFamily()>
<android.text.style.TypefaceSpan: int describeContents()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>
<java.util.AbstractCollection: boolean removeAll(java.util.Collection)>
<java.util.AbstractCollection: T[] toArray(T[])>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.AbstractCollection: java.lang.Object[] toArray()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>
<java.util.AbstractCollection: boolean add(E)>
<java.util.AbstractCollection: void clear()>
<java.util.AbstractCollection: boolean retainAll(java.util.Collection)>
<java.util.AbstractCollection: void <init>()>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
<java.util.AbstractCollection: boolean isEmpty()>
<android.database.CrossProcessCursor extends android.database.Cursor: void fillWindow(int,android.database.CursorWindow)>
<android.database.CrossProcessCursor extends android.database.Cursor: android.database.CursorWindow getWindow()>
<android.database.CrossProcessCursor extends android.database.Cursor: boolean onMove(int,int)>
<javax.security.auth.callback.CallbackHandler: void handle(javax.security.auth.callback.Callback[])>
<android.media.midi.MidiSender: void <init>()>
<android.media.midi.MidiSender: void onConnect(android.media.midi.MidiReceiver)>
<android.media.midi.MidiSender: void onDisconnect(android.media.midi.MidiReceiver)>
<android.media.midi.MidiSender: void disconnect(android.media.midi.MidiReceiver)>
<android.media.midi.MidiSender: void connect(android.media.midi.MidiReceiver)>
<java.io.ByteArrayInputStream: long skip(long)>
<java.io.ByteArrayInputStream: int read()>
<java.io.ByteArrayInputStream: int read(byte[],int,int)>
<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>
<java.io.ByteArrayInputStream: void <init>(byte[])>
<java.io.ByteArrayInputStream: int available()>
<java.io.ByteArrayInputStream: void reset()>
<android.app.WallpaperInfo: java.lang.String getServiceName()>
<android.app.WallpaperInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>
<android.app.WallpaperInfo: CharSequence loadAuthor(android.content.pm.PackageManager)>
<android.app.WallpaperInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.WallpaperInfo: CharSequence loadContextDescription(android.content.pm.PackageManager)>
<android.app.WallpaperInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.app.WallpaperInfo: java.lang.String getSettingsActivity()>
<android.app.WallpaperInfo: android.graphics.drawable.Drawable loadThumbnail(android.content.pm.PackageManager)>
<android.app.WallpaperInfo: boolean supportsAmbientMode()>
<android.app.WallpaperInfo: boolean supportsMultipleDisplays()>
<android.app.WallpaperInfo: boolean getShowMetadataInPreview()>
<android.app.WallpaperInfo: void dump(android.util.Printer,java.lang.String)>
<android.app.WallpaperInfo: CharSequence loadLabel(android.content.pm.PackageManager)>
<android.app.WallpaperInfo: android.net.Uri loadContextUri(android.content.pm.PackageManager)>
<android.app.WallpaperInfo: CharSequence loadDescription(android.content.pm.PackageManager)>
<android.app.WallpaperInfo: android.content.ComponentName getComponent()>
<android.app.WallpaperInfo: android.content.pm.ServiceInfo getServiceInfo()>
<android.app.WallpaperInfo: int describeContents()>
<android.app.WallpaperInfo: android.net.Uri getSettingsSliceUri()>
<android.app.WallpaperInfo: java.lang.String getPackageName()>
<android.hardware.location.ContextHubTransaction.OnCompleteListener: void onComplete(android.hardware.location.ContextHubTransaction,android.hardware.location.ContextHubTransaction.Response)>
<java.lang.Readable: int read(java.nio.CharBuffer)>
<android.database.DatabaseErrorHandler: void onCorruption(android.database.sqlite.SQLiteDatabase)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream.Builder builder()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.PrimitiveIterator.OfLong iterator()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream concat(java.util.stream.LongStream,java.util.stream.LongStream)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.OptionalLong findAny()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: long count()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.OptionalLong max()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream flatMap(java.util.function.LongFunction)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: void forEachOrdered(java.util.function.LongConsumer)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.Spliterator.OfLong spliterator()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: boolean anyMatch(java.util.function.LongPredicate)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: long reduce(long,java.util.function.LongBinaryOperator)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream peek(java.util.function.LongConsumer)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream filter(java.util.function.LongPredicate)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream rangeClosed(long,long)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.OptionalLong reduce(java.util.function.LongBinaryOperator)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: long[] toArray()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.OptionalDouble average()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream sequential()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream distinct()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream sorted()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.LongSummaryStatistics summaryStatistics()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.OptionalLong min()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: boolean allMatch(java.util.function.LongPredicate)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.Stream boxed()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.OptionalLong findFirst()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream asDoubleStream()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.DoubleStream mapToDouble(java.util.function.LongToDoubleFunction)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream empty()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream of(long)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream iterate(long,java.util.function.LongUnaryOperator)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: long sum()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: R collect(java.util.function.Supplier,java.util.function.ObjLongConsumer,java.util.function.BiConsumer)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream parallel()>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.Stream mapToObj(java.util.function.LongFunction)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream skip(long)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream limit(long)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream generate(java.util.function.LongSupplier)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: void forEach(java.util.function.LongConsumer)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream of(long...)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.IntStream mapToInt(java.util.function.LongToIntFunction)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: boolean noneMatch(java.util.function.LongPredicate)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream map(java.util.function.LongUnaryOperator)>
<java.util.stream.LongStream extends java.util.stream.BaseStream: java.util.stream.LongStream range(long,long)>
<java.util.zip.ZipFile: void <init>(java.io.File,int)>
<java.util.zip.ZipFile: java.util.Enumeration entries()>
<java.util.zip.ZipFile: void <init>(java.io.File)>
<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>
<java.util.zip.ZipFile: void finalize()>
<java.util.zip.ZipFile: java.util.stream.Stream stream()>
<java.util.zip.ZipFile: void <init>(String,java.nio.charset.Charset)>
<java.util.zip.ZipFile: void <init>(String)>
<java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>
<java.util.zip.ZipFile: void <init>(java.io.File,java.nio.charset.Charset)>
<java.util.zip.ZipFile: java.lang.String getName()>
<java.util.zip.ZipFile: void close()>
<java.util.zip.ZipFile: java.lang.String getComment()>
<java.util.zip.ZipFile: int size()>
<android.preference.PreferenceManager: void setSharedPreferencesName(java.lang.String)>
<android.preference.PreferenceManager: android.preference.PreferenceScreen createPreferenceScreen(android.content.Context)>
<android.preference.PreferenceManager: boolean isStorageDeviceProtected()>
<android.preference.PreferenceManager: void setStorageCredentialProtected()>
<android.preference.PreferenceManager: void setStorageDefault()>
<android.preference.PreferenceManager: int getSharedPreferencesMode()>
<android.preference.PreferenceManager: boolean isStorageDefault()>
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,java.lang.String,int,int,boolean)>
<android.preference.PreferenceManager: void setSharedPreferencesMode(int)>
<android.preference.PreferenceManager: android.preference.PreferenceDataStore getPreferenceDataStore()>
<android.preference.PreferenceManager: android.preference.Preference findPreference(CharSequence)>
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,@XmlResint,boolean)>
<android.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>
<android.preference.PreferenceManager: void setPreferenceDataStore(android.preference.PreferenceDataStore)>
<android.preference.PreferenceManager: java.lang.String getSharedPreferencesName()>
<android.preference.PreferenceManager: boolean isStorageCredentialProtected()>
<android.preference.PreferenceManager: void setStorageDeviceProtected()>
<android.preference.PreferenceManager: java.lang.String getDefaultSharedPreferencesName(android.content.Context)>
<android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>
<android.net.TestNetworkInterface: int describeContents()>
<android.net.TestNetworkInterface: void <init>(android.os.ParcelFileDescriptor,String)>
<android.net.TestNetworkInterface: java.lang.String getInterfaceName()>
<android.net.TestNetworkInterface: android.os.ParcelFileDescriptor getFileDescriptor()>
<android.net.TestNetworkInterface: void writeToParcel(android.os.Parcel,int)>
<dalvik.system.DexClassLoader: void <init>(String,String,String,ClassLoader)>
<java.security.UnrecoverableEntryException: void <init>(String)>
<java.security.UnrecoverableEntryException: void <init>()>
<android.text.util.Rfc822Token: java.lang.String getName()>
<android.text.util.Rfc822Token: void setName(java.lang.String)>
<android.text.util.Rfc822Token: void <init>(String,String,String)>
<android.text.util.Rfc822Token: java.lang.String quoteName(java.lang.String)>
<android.text.util.Rfc822Token: void setAddress(java.lang.String)>
<android.text.util.Rfc822Token: java.lang.String getAddress()>
<android.text.util.Rfc822Token: void setComment(java.lang.String)>
<android.text.util.Rfc822Token: java.lang.String quoteNameIfNecessary(java.lang.String)>
<android.text.util.Rfc822Token: java.lang.String quoteComment(java.lang.String)>
<android.text.util.Rfc822Token: java.lang.String getComment()>
<android.security.keystore.UserPresenceUnavailableException: void <init>()>
<android.security.keystore.UserPresenceUnavailableException: void <init>(String)>
<android.security.keystore.UserPresenceUnavailableException: void <init>(String,Throwable)>
<org.w3c.dom.CharacterData extends org.w3c.dom.Node: java.lang.String substringData(int,int)>
<org.w3c.dom.CharacterData extends org.w3c.dom.Node: void insertData(int,java.lang.String)>
<org.w3c.dom.CharacterData extends org.w3c.dom.Node: void appendData(java.lang.String)>
<org.w3c.dom.CharacterData extends org.w3c.dom.Node: void deleteData(int,int)>
<org.w3c.dom.CharacterData extends org.w3c.dom.Node: void replaceData(int,int,java.lang.String)>
<org.w3c.dom.CharacterData extends org.w3c.dom.Node: void setData(java.lang.String)>
<org.w3c.dom.CharacterData extends org.w3c.dom.Node: int getLength()>
<org.w3c.dom.CharacterData extends org.w3c.dom.Node: java.lang.String getData()>
<javax.crypto.IllegalBlockSizeException: void <init>(String)>
<javax.crypto.IllegalBlockSizeException: void <init>()>
<android.text.Editable extends java.lang.CharSequence java.lang.Appendable android.text.GetChars android.text.Spannable: void setFilters(android.text.InputFilter[])>
<android.text.Editable extends java.lang.CharSequence java.lang.Appendable android.text.GetChars android.text.Spannable: android.text.Editable delete(int,int)>
<android.text.Editable extends java.lang.CharSequence java.lang.Appendable android.text.GetChars android.text.Spannable: android.text.Editable replace(int,int,CharSequence,int,int)>
<android.text.Editable extends java.lang.CharSequence java.lang.Appendable android.text.GetChars android.text.Spannable: android.text.InputFilter[] getFilters()>
<android.text.Editable extends java.lang.CharSequence java.lang.Appendable android.text.GetChars android.text.Spannable: void clearSpans()>
<android.text.Editable extends java.lang.CharSequence java.lang.Appendable android.text.GetChars android.text.Spannable: android.text.Editable replace(int,int,CharSequence)>
<android.text.Editable extends java.lang.CharSequence java.lang.Appendable android.text.GetChars android.text.Spannable: android.text.Editable append(CharSequence,int,int)>
<android.text.Editable extends java.lang.CharSequence java.lang.Appendable android.text.GetChars android.text.Spannable: android.text.Editable append(char)>
<android.text.Editable extends java.lang.CharSequence java.lang.Appendable android.text.GetChars android.text.Spannable: void clear()>
<android.text.Editable extends java.lang.CharSequence java.lang.Appendable android.text.GetChars android.text.Spannable: android.text.Editable insert(int,CharSequence,int,int)>
<android.text.Editable extends java.lang.CharSequence java.lang.Appendable android.text.GetChars android.text.Spannable: android.text.Editable append(CharSequence)>
<android.text.Editable extends java.lang.CharSequence java.lang.Appendable android.text.GetChars android.text.Spannable: android.text.Editable insert(int,CharSequence)>
<java.net.URLStreamHandlerFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>
<android.content.pm.PackageInstaller: void uninstall(android.content.pm.VersionedPackage,android.content.IntentSender)>
<android.content.pm.PackageInstaller: java.util.List getStagedSessions()>
<android.content.pm.PackageInstaller: void registerSessionCallback(android.content.pm.PackageInstaller.SessionCallback,android.os.Handler)>
<android.content.pm.PackageInstaller: void updateSessionAppIcon(int,android.graphics.Bitmap)>
<android.content.pm.PackageInstaller: void registerSessionCallback(android.content.pm.PackageInstaller.SessionCallback)>
<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller.SessionInfo getActiveStagedSession()>
<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller.SessionInfo getSessionInfo(int)>
<android.content.pm.PackageInstaller: void installExistingPackage(java.lang.String,int,android.content.IntentSender)>
<android.content.pm.PackageInstaller: void abandonSession(int)>
<android.content.pm.PackageInstaller: java.util.List getMySessions()>
<android.content.pm.PackageInstaller: void setPermissionsResult(int,boolean)>
<android.content.pm.PackageInstaller: void updateSessionAppLabel(int,CharSequence)>
<android.content.pm.PackageInstaller: java.util.List getAllSessions()>
<android.content.pm.PackageInstaller: void unregisterSessionCallback(android.content.pm.PackageInstaller.SessionCallback)>
<android.content.pm.PackageInstaller: int createSession(android.content.pm.PackageInstaller.SessionParams)>
<android.content.pm.PackageInstaller: void uninstall(java.lang.String,android.content.IntentSender)>
<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller.Session openSession(int)>
<org.xml.sax.helpers.XMLReaderFactory: org.xml.sax.XMLReader createXMLReader(java.lang.String)>
<org.xml.sax.helpers.XMLReaderFactory: org.xml.sax.XMLReader createXMLReader()>
<java.util.function.UnaryOperator extends java.util.function.Function: java.util.function.UnaryOperator identity()>
<javax.net.ssl.SSLKeyException: void <init>(String)>
<javax.microedition.khronos.egl.EGLConfig: void <init>()>
<android.hardware.location.NanoAppBinary: byte[] getBinaryNoHeader()>
<android.hardware.location.NanoAppBinary: long getNanoAppId()>
<android.hardware.location.NanoAppBinary: boolean hasValidHeader()>
<android.hardware.location.NanoAppBinary: boolean isEncrypted()>
<android.hardware.location.NanoAppBinary: int getNanoAppVersion()>
<android.hardware.location.NanoAppBinary: byte[] getBinary()>
<android.hardware.location.NanoAppBinary: byte getTargetChreApiMinorVersion()>
<android.hardware.location.NanoAppBinary: byte getTargetChreApiMajorVersion()>
<android.hardware.location.NanoAppBinary: void <init>(byte[])>
<android.hardware.location.NanoAppBinary: int getHeaderVersion()>
<android.hardware.location.NanoAppBinary: void writeToParcel(android.os.Parcel,int)>
<android.hardware.location.NanoAppBinary: int getFlags()>
<android.hardware.location.NanoAppBinary: long getHwHubType()>
<android.hardware.location.NanoAppBinary: int describeContents()>
<android.hardware.location.NanoAppBinary: boolean isSigned()>
<android.media.MediaDrm.ProvisionRequest: byte[] getData()>
<android.media.MediaDrm.ProvisionRequest: java.lang.String getDefaultUrl()>
<java.io.DataInput: float readFloat()>
<java.io.DataInput: int skipBytes(int)>
<java.io.DataInput: void readFully(byte[],int,int)>
<java.io.DataInput: long readLong()>
<java.io.DataInput: short readShort()>
<java.io.DataInput: char readChar()>
<java.io.DataInput: java.lang.String readUTF()>
<java.io.DataInput: java.lang.String readLine()>
<java.io.DataInput: int readUnsignedByte()>
<java.io.DataInput: int readUnsignedShort()>
<java.io.DataInput: double readDouble()>
<java.io.DataInput: byte readByte()>
<java.io.DataInput: int readInt()>
<java.io.DataInput: boolean readBoolean()>
<java.io.DataInput: void readFully(byte[])>
<java.lang.annotation.Annotation: java.lang.Class annotationType()>
<java.lang.annotation.Annotation: java.lang.String toString()>
<java.lang.annotation.Annotation: int hashCode()>
<java.lang.annotation.Annotation: boolean equals(java.lang.Object)>
<android.icu.util.Calendar: android.icu.util.Calendar getInstance(android.icu.util.TimeZone)>
<android.icu.util.Calendar: int computeZoneOffset(long,int)>
<android.icu.util.Calendar: void prepareGetActual(int,boolean)>
<android.icu.util.Calendar: int handleGetExtendedYear()>
<android.icu.util.Calendar: int getActualMinimum(int)>
<android.icu.util.Calendar: void set(int,int,int)>
<android.icu.util.Calendar: int handleGetLimit(int,int)>
<android.icu.util.Calendar: void pinField(int)>
<android.icu.util.Calendar: void set(int,int,int,int,int,int)>
<android.icu.util.Calendar: int newerField(int,int)>
<android.icu.util.Calendar: boolean after(java.lang.Object)>
<android.icu.util.Calendar: java.lang.String getType()>
<android.icu.util.Calendar: void roll(int,boolean)>
<android.icu.util.Calendar: int internalGet(int,int)>
<android.icu.util.Calendar: int weekNumber(int,int)>
<android.icu.util.Calendar: int[][][] getFieldResolutionTable()>
<android.icu.util.Calendar: int floorDivide(int,int)>
<android.icu.util.Calendar: void clear(int)>
<android.icu.util.Calendar: int handleGetYearLength(int)>
<android.icu.util.Calendar: android.icu.util.Calendar setWeekData(android.icu.util.Calendar.WeekData)>
<android.icu.util.Calendar: long julianDayToMillis(int)>
<android.icu.util.Calendar: void setSkippedWallTimeOption(int)>
<android.icu.util.Calendar: void <init>(android.icu.util.TimeZone,android.icu.util.ULocale)>
<android.icu.util.Calendar: int floorDivide(long,int,int[])>
<android.icu.util.Calendar: boolean before(java.lang.Object)>
<android.icu.util.Calendar: android.icu.text.DateFormat handleGetDateFormat(java.lang.String,android.icu.util.ULocale)>
<android.icu.util.Calendar: int get(int)>
<android.icu.util.Calendar: void validateFields()>
<android.icu.util.Calendar: android.icu.util.Calendar getInstance(android.icu.util.TimeZone,java.util.Locale)>
<android.icu.util.Calendar: int getFieldCount()>
<android.icu.util.Calendar: int getActualMaximum(int)>
<android.icu.util.Calendar: void computeTime()>
<android.icu.util.Calendar: android.icu.util.TimeZone getTimeZone()>
<android.icu.util.Calendar: int handleComputeJulianDay(int)>
<android.icu.util.Calendar: android.icu.text.DateFormat handleGetDateFormat(java.lang.String,java.lang.String,java.util.Locale)>
<android.icu.util.Calendar: java.lang.String fieldName(int)>
<android.icu.util.Calendar: java.lang.String getDisplayName(java.util.Locale)>
<android.icu.util.Calendar: int weekNumber(int,int,int)>
<android.icu.util.Calendar: long floorDivide(long,long)>
<android.icu.util.Calendar: boolean isWeekend()>
<android.icu.util.Calendar: int getGreatestMinimum(int)>
<android.icu.util.Calendar: android.icu.text.DateFormat handleGetDateFormat(java.lang.String,java.util.Locale)>
<android.icu.util.Calendar: int fieldDifference(java.util.Date,int)>
<android.icu.util.Calendar: void setTimeZone(android.icu.util.TimeZone)>
<android.icu.util.Calendar: void complete()>
<android.icu.util.Calendar: void setTime(java.util.Date)>
<android.icu.util.Calendar: android.icu.text.DateFormat getDateTimeFormat(int,int,android.icu.util.ULocale)>
<android.icu.util.Calendar: int handleGetMonthLength(int,int)>
<android.icu.util.Calendar: boolean isWeekend(java.util.Date)>
<android.icu.util.Calendar: int computeJulianDay()>
<android.icu.util.Calendar: void setFirstDayOfWeek(int)>
<android.icu.util.Calendar: void <init>(android.icu.util.TimeZone,java.util.Locale)>
<android.icu.util.Calendar: boolean isLenient()>
<android.icu.util.Calendar: int getFirstDayOfWeek()>
<android.icu.util.Calendar: int getLeastMaximum(int)>
<android.icu.util.Calendar: int internalGet(int)>
<android.icu.util.Calendar: int julianDayToDayOfWeek(int)>
<android.icu.util.Calendar: android.icu.util.Calendar getInstance(android.icu.util.TimeZone,android.icu.util.ULocale)>
<android.icu.util.Calendar: java.lang.String getDisplayName(android.icu.util.ULocale)>
<android.icu.util.Calendar: boolean isEquivalentTo(android.icu.util.Calendar)>
<android.icu.util.Calendar: void add(int,int)>
<android.icu.util.Calendar: void set(int,int,int,int,int)>
<android.icu.util.Calendar: java.util.Locale[] getAvailableLocales()>
<android.icu.util.Calendar: int getStamp(int)>
<android.icu.util.Calendar: int handleComputeMonthStart(int,int,boolean)>
<android.icu.util.Calendar: int getMaximum(int)>
<android.icu.util.Calendar: int getMinimalDaysInFirstWeek()>
<android.icu.util.Calendar: android.icu.text.DateFormat getDateTimeFormat(int,int,java.util.Locale)>
<android.icu.util.Calendar: long internalGetTimeInMillis()>
<android.icu.util.Calendar: void setLenient(boolean)>
<android.icu.util.Calendar: void computeGregorianFields(int)>
<android.icu.util.Calendar: android.icu.util.Calendar.WeekData getWeekDataForRegion(java.lang.String)>
<android.icu.util.Calendar: android.icu.util.Calendar getInstance(java.util.Locale)>
<android.icu.util.Calendar: java.lang.String[] getKeywordValuesForLocale(java.lang.String,android.icu.util.ULocale,boolean)>
<android.icu.util.Calendar: boolean isGregorianLeapYear(int)>
<android.icu.util.Calendar: void clear()>
<android.icu.util.Calendar: void computeFields()>
<android.icu.util.Calendar: int getGregorianMonth()>
<android.icu.util.Calendar: int getGregorianDayOfMonth()>
<android.icu.util.Calendar: java.util.Date getTime()>
<android.icu.util.Calendar: int[] handleCreateFields()>
<android.icu.util.Calendar: void setRepeatedWallTimeOption(int)>
<android.icu.util.Calendar: java.lang.Object clone()>
<android.icu.util.Calendar: int getMinimum(int)>
<android.icu.util.Calendar: void validateField(int)>
<android.icu.util.Calendar: int getRepeatedWallTimeOption()>
<android.icu.util.Calendar: int gregorianPreviousMonthLength(int,int)>
<android.icu.util.Calendar: int floorDivide(int,int,int[])>
<android.icu.util.Calendar: android.icu.util.Calendar getInstance(android.icu.util.ULocale)>
<android.icu.util.Calendar: void setMinimalDaysInFirstWeek(int)>
<android.icu.util.Calendar: void <init>()>
<android.icu.util.Calendar: int computeMillisInDay()>
<android.icu.util.Calendar: int getLimit(int,int)>
<android.icu.util.Calendar: int gregorianMonthLength(int,int)>
<android.icu.util.Calendar: long getTimeInMillis()>
<android.icu.util.Calendar: android.icu.util.Calendar.WeekData getWeekData()>
<android.icu.util.Calendar: boolean isSet(int)>
<android.icu.util.Calendar: void handleComputeFields(int)>
<android.icu.util.Calendar: int getGregorianDayOfYear()>
<android.icu.util.Calendar: void internalSet(int,int)>
<android.icu.util.Calendar: void validateField(int,int,int)>
<android.icu.util.Calendar: int millisToJulianDay(long)>
<android.icu.util.Calendar: int resolveFields(int[][][])>
<android.icu.util.Calendar: void set(int,int)>
<android.icu.util.Calendar: int compareTo(android.icu.util.Calendar)>
<android.icu.util.Calendar: int getGregorianYear()>
<android.icu.util.Calendar: void roll(int,int)>
<android.icu.util.Calendar: int newestStamp(int,int,int)>
<android.icu.util.Calendar: void setTimeInMillis(long)>
<android.icu.util.Calendar: android.icu.util.Calendar getInstance()>
<android.icu.util.Calendar: int getSkippedWallTimeOption()>
<android.icu.util.Calendar: int computeGregorianMonthStart(int,int)>
<java.security.cert.PolicyQualifierInfo: java.lang.String getPolicyQualifierId()>
<java.security.cert.PolicyQualifierInfo: byte[] getPolicyQualifier()>
<java.security.cert.PolicyQualifierInfo: byte[] getEncoded()>
<java.security.cert.PolicyQualifierInfo: void <init>(byte[])>
<android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException: void <init>()>
<android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException: void <init>(String)>
<android.view.Window.OnFrameMetricsAvailableListener: void onFrameMetricsAvailable(android.view.Window,android.view.FrameMetrics,int)>
<android.media.MediaPlayer.ProvisioningServerErrorException: void <init>(String)>
<android.content.res.AssetFileDescriptor: void close()>
<android.content.res.AssetFileDescriptor: long getLength()>
<android.content.res.AssetFileDescriptor: android.os.Bundle getExtras()>
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>
<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()>
<android.content.res.AssetFileDescriptor: java.io.FileInputStream createInputStream()>
<android.content.res.AssetFileDescriptor: void writeToParcel(android.os.Parcel,int)>
<android.content.res.AssetFileDescriptor: java.io.FileOutputStream createOutputStream()>
<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long,android.os.Bundle)>
<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>
<android.content.res.AssetFileDescriptor: int describeContents()>
<android.content.res.AssetFileDescriptor: long getStartOffset()>
<android.webkit.WebViewFactoryProvider: java.lang.ClassLoader getWebViewClassLoader()>
<android.webkit.WebViewFactoryProvider: android.webkit.WebViewFactoryProvider.Statics getStatics()>
<android.webkit.WebViewFactoryProvider: android.webkit.WebViewDatabase getWebViewDatabase(android.content.Context)>
<android.webkit.WebViewFactoryProvider: android.webkit.TokenBindingService getTokenBindingService()>
<android.webkit.WebViewFactoryProvider: android.webkit.ServiceWorkerController getServiceWorkerController()>
<android.webkit.WebViewFactoryProvider: android.webkit.WebViewProvider createWebView(android.webkit.WebView,android.webkit.WebView.PrivateAccess)>
<android.webkit.WebViewFactoryProvider: android.webkit.GeolocationPermissions getGeolocationPermissions()>
<android.webkit.WebViewFactoryProvider: android.webkit.TracingController getTracingController()>
<android.webkit.WebViewFactoryProvider: android.webkit.WebIconDatabase getWebIconDatabase()>
<android.webkit.WebViewFactoryProvider: android.webkit.WebStorage getWebStorage()>
<android.webkit.WebViewFactoryProvider: android.webkit.CookieManager getCookieManager()>
<java.net.IDN: java.lang.String toASCII(java.lang.String,int)>
<java.net.IDN: java.lang.String toUnicode(java.lang.String,int)>
<java.net.IDN: java.lang.String toUnicode(java.lang.String)>
<java.net.IDN: java.lang.String toASCII(java.lang.String)>
<android.media.MediaDrm.OnExpirationUpdateListener: void onExpirationUpdate(android.media.MediaDrm,byte[],long)>
<android.net.nsd.NsdServiceInfo: java.lang.String getServiceName()>
<android.net.nsd.NsdServiceInfo: void setServiceType(java.lang.String)>
<android.net.nsd.NsdServiceInfo: void setHost(java.net.InetAddress)>
<android.net.nsd.NsdServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.net.nsd.NsdServiceInfo: java.lang.String getServiceType()>
<android.net.nsd.NsdServiceInfo: void removeAttribute(java.lang.String)>
<android.net.nsd.NsdServiceInfo: void setPort(int)>
<android.net.nsd.NsdServiceInfo: int describeContents()>
<android.net.nsd.NsdServiceInfo: int getPort()>
<android.net.nsd.NsdServiceInfo: void setServiceName(java.lang.String)>
<android.net.nsd.NsdServiceInfo: void <init>()>
<android.net.nsd.NsdServiceInfo: java.util.Map getAttributes()>
<android.net.nsd.NsdServiceInfo: java.net.InetAddress getHost()>
<android.net.nsd.NsdServiceInfo: void setAttribute(java.lang.String,java.lang.String)>
<android.provider.FontsContract.FontFamilyResult: android.provider.FontsContract.FontInfo[] getFonts()>
<android.provider.FontsContract.FontFamilyResult: int getStatusCode()>
<java.net.ResponseCache: java.net.CacheRequest put(java.net.URI,java.net.URLConnection)>
<java.net.ResponseCache: void <init>()>
<java.net.ResponseCache: java.net.CacheResponse get(java.net.URI,java.lang.String,java.util.Map)>
<java.net.ResponseCache: void setDefault(java.net.ResponseCache)>
<java.net.ResponseCache: java.net.ResponseCache getDefault()>
<android.graphics.fonts.FontVariationAxis: android.graphics.fonts.FontVariationAxis[] fromFontVariationSettings(java.lang.String)>
<android.graphics.fonts.FontVariationAxis: void <init>(String,float)>
<android.graphics.fonts.FontVariationAxis: java.lang.String toFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>
<android.graphics.fonts.FontVariationAxis: float getStyleValue()>
<android.graphics.fonts.FontVariationAxis: java.lang.String getTag()>
<java.util.function.Function: java.util.function.Function compose(java.util.function.Function)>
<java.util.function.Function: R apply(T)>
<java.util.function.Function: java.util.function.Function identity()>
<java.util.function.Function: java.util.function.Function andThen(java.util.function.Function)>
<android.view.inputmethod.InputMethodManager: boolean isActive()>
<android.view.inputmethod.InputMethodManager: void toggleSoftInput(int,int)>
<android.view.inputmethod.InputMethodManager: void displayCompletions(android.view.View,android.view.inputmethod.CompletionInfo[])>
<android.view.inputmethod.InputMethodManager: void showSoftInputFromInputMethod(android.os.IBinder,int)>
<android.view.inputmethod.InputMethodManager: void hideSoftInputFromInputMethod(android.os.IBinder,int)>
<android.view.inputmethod.InputMethodManager: void updateExtractedText(android.view.View,int,android.view.inputmethod.ExtractedText)>
<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int,android.os.ResultReceiver)>
<android.view.inputmethod.InputMethodManager: boolean isActive(android.view.View)>
<android.view.inputmethod.InputMethodManager: void updateCursor(android.view.View,int,int,int,int)>
<android.view.inputmethod.InputMethodManager: void toggleSoftInputFromWindow(android.os.IBinder,int,int)>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>
<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int)>
<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)>
<android.view.inputmethod.InputMethodManager: void updateCursorAnchorInfo(android.view.View,android.view.inputmethod.CursorAnchorInfo)>
<android.view.inputmethod.InputMethodManager: java.util.Map getShortcutInputMethodsAndSubtypes()>
<android.view.inputmethod.InputMethodManager: int getDisplayId()>
<android.view.inputmethod.InputMethodManager: boolean switchToNextInputMethod(android.os.IBinder,boolean)>
<android.view.inputmethod.InputMethodManager: void viewClicked(android.view.View)>
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()>
<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)>
<android.view.inputmethod.InputMethodManager: void hideStatusIcon(android.os.IBinder)>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>
<android.view.inputmethod.InputMethodManager: java.util.List getInputMethodList()>
<android.view.inputmethod.InputMethodManager: boolean isWatchingCursor(android.view.View)>
<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>
<android.view.inputmethod.InputMethodManager: void showInputMethodAndSubtypeEnabler(java.lang.String)>
<android.view.inputmethod.InputMethodManager: void dispatchKeyEventFromInputMethod(android.view.View,android.view.KeyEvent)>
<android.view.inputmethod.InputMethodManager: boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)>
<android.view.inputmethod.InputMethodManager: void showStatusIcon(android.os.IBinder,java.lang.String,@DrawableResint)>
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>
<android.view.inputmethod.InputMethodManager: boolean switchToLastInputMethod(android.os.IBinder)>
<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>
<android.view.inputmethod.InputMethodManager: boolean isAcceptingText()>
<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int,android.os.ResultReceiver)>
<android.view.inputmethod.InputMethodManager: boolean isFullscreenMode()>
<android.view.inputmethod.InputMethodManager: void restartInput(android.view.View)>
<android.view.inputmethod.InputMethodManager: void sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)>
<android.view.inputmethod.InputMethodManager: void showInputMethodPicker()>
<android.view.inputmethod.InputMethodManager: void setInputMethod(android.os.IBinder,java.lang.String)>
<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int)>
<android.view.inputmethod.InputMethodManager: boolean isInputMethodPickerShown()>
<android.icu.text.MeasureFormat: java.lang.String getUnitDisplayName(android.icu.util.MeasureUnit)>
<android.icu.text.MeasureFormat: int hashCode()>
<android.icu.text.MeasureFormat: java.lang.StringBuilder formatMeasurePerUnit(android.icu.util.Measure,android.icu.util.MeasureUnit,java.lang.StringBuilder,java.text.FieldPosition)>
<android.icu.text.MeasureFormat: boolean equals(java.lang.Object)>
<android.icu.text.MeasureFormat: java.lang.StringBuilder formatMeasures(java.lang.StringBuilder,java.text.FieldPosition,android.icu.util.Measure...)>
<android.icu.text.MeasureFormat: android.icu.text.MeasureFormat getInstance(java.util.Locale,android.icu.text.MeasureFormat.FormatWidth,android.icu.text.NumberFormat)>
<android.icu.text.MeasureFormat: android.icu.util.Measure parseObject(java.lang.String,java.text.ParsePosition)>
<android.icu.text.MeasureFormat: android.icu.text.MeasureFormat getCurrencyFormat(java.util.Locale)>
<android.icu.text.MeasureFormat: java.lang.String formatMeasures(android.icu.util.Measure...)>
<android.icu.text.MeasureFormat: android.icu.text.MeasureFormat getInstance(android.icu.util.ULocale,android.icu.text.MeasureFormat.FormatWidth)>
<android.icu.text.MeasureFormat: android.icu.text.NumberFormat getNumberFormat()>
<android.icu.text.MeasureFormat: android.icu.util.ULocale getLocale()>
<android.icu.text.MeasureFormat: android.icu.text.MeasureFormat getInstance(android.icu.util.ULocale,android.icu.text.MeasureFormat.FormatWidth,android.icu.text.NumberFormat)>
<android.icu.text.MeasureFormat: android.icu.text.MeasureFormat getCurrencyFormat()>
<android.icu.text.MeasureFormat: android.icu.text.MeasureFormat getInstance(java.util.Locale,android.icu.text.MeasureFormat.FormatWidth)>
<android.icu.text.MeasureFormat: android.icu.text.MeasureFormat getCurrencyFormat(android.icu.util.ULocale)>
<android.icu.text.MeasureFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.MeasureFormat: android.icu.text.MeasureFormat.FormatWidth getWidth()>
<java.util.function.BiPredicate: java.util.function.BiPredicate and(java.util.function.BiPredicate)>
<java.util.function.BiPredicate: java.util.function.BiPredicate negate()>
<java.util.function.BiPredicate: java.util.function.BiPredicate or(java.util.function.BiPredicate)>
<java.util.function.BiPredicate: boolean test(T,U)>
<android.transition.TransitionPropagation: long getStartDelay(android.view.ViewGroup,android.transition.Transition,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.transition.TransitionPropagation: java.lang.String[] getPropagationProperties()>
<android.transition.TransitionPropagation: void captureValues(android.transition.TransitionValues)>
<android.transition.TransitionPropagation: void <init>()>
<android.bluetooth.BluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)>
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>
<android.service.quicksettings.Tile: void updateTile()>
<android.service.quicksettings.Tile: int getState()>
<android.service.quicksettings.Tile: void setIcon(android.graphics.drawable.Icon)>
<android.service.quicksettings.Tile: void writeToParcel(android.os.Parcel,int)>
<android.service.quicksettings.Tile: void setSubtitle(CharSequence)>
<android.service.quicksettings.Tile: CharSequence getLabel()>
<android.service.quicksettings.Tile: int describeContents()>
<android.service.quicksettings.Tile: CharSequence getSubtitle()>
<android.service.quicksettings.Tile: CharSequence getContentDescription()>
<android.service.quicksettings.Tile: android.graphics.drawable.Icon getIcon()>
<android.service.quicksettings.Tile: void setLabel(CharSequence)>
<android.service.quicksettings.Tile: void setContentDescription(CharSequence)>
<android.service.quicksettings.Tile: void setState(int)>
<javax.net.ssl.X509ExtendedTrustManager: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String,java.net.Socket)>
<javax.net.ssl.X509ExtendedTrustManager: void <init>()>
<javax.net.ssl.X509ExtendedTrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.net.Socket)>
<javax.net.ssl.X509ExtendedTrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,javax.net.ssl.SSLEngine)>
<javax.net.ssl.X509ExtendedTrustManager: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String,javax.net.ssl.SSLEngine)>
<android.app.UiAutomation.AccessibilityEventFilter: boolean accept(android.view.accessibility.AccessibilityEvent)>
<android.telephony.CellIdentityGsm: int getMnc()>
<android.telephony.CellIdentityGsm: java.lang.String getMncString()>
<android.telephony.CellIdentityGsm: int getCid()>
<android.telephony.CellIdentityGsm: int getBsic()>
<android.telephony.CellIdentityGsm: int getArfcn()>
<android.telephony.CellIdentityGsm: java.lang.String getMccString()>
<android.telephony.CellIdentityGsm: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellIdentityGsm: int getLac()>
<android.telephony.CellIdentityGsm: int getMcc()>
<android.telephony.CellIdentityGsm: java.lang.String getMobileNetworkOperator()>
<android.telephony.CellIdentityGsm: int getPsc()>
<java.lang.Boolean: void <init>(boolean)>
<java.lang.Boolean: boolean getBoolean(java.lang.String)>
<java.lang.Boolean: boolean logicalAnd(boolean,boolean)>
<java.lang.Boolean: boolean booleanValue()>
<java.lang.Boolean: int compareTo(java.lang.Boolean)>
<java.lang.Boolean: java.lang.String toString(boolean)>
<java.lang.Boolean: int compare(boolean,boolean)>
<java.lang.Boolean: void <init>(String)>
<java.lang.Boolean: int hashCode(boolean)>
<java.lang.Boolean: boolean logicalOr(boolean,boolean)>
<java.lang.Boolean: boolean parseBoolean(java.lang.String)>
<java.lang.Boolean: boolean logicalXor(boolean,boolean)>
<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
<android.widget.SeekBar.OnSeekBarChangeListener: void onProgressChanged(android.widget.SeekBar,int,boolean)>
<android.widget.SeekBar.OnSeekBarChangeListener: void onStopTrackingTouch(android.widget.SeekBar)>
<android.widget.SeekBar.OnSeekBarChangeListener: void onStartTrackingTouch(android.widget.SeekBar)>
<java.util.NoSuchElementException: void <init>()>
<java.util.NoSuchElementException: void <init>(String)>
<android.content.pm.PackageStats: void <init>(android.os.Parcel)>
<android.content.pm.PackageStats: int describeContents()>
<android.content.pm.PackageStats: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageStats: void <init>(String)>
<android.content.pm.PackageStats: void <init>(android.content.pm.PackageStats)>
<android.hardware.Camera.Face: void <init>()>
<android.telephony.CellInfoTdscdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellInfoTdscdma: android.telephony.CellSignalStrengthTdscdma getCellSignalStrength()>
<android.telephony.CellInfoTdscdma: android.telephony.CellIdentityTdscdma getCellIdentity()>
<android.os.TransactionTooLargeException: void <init>()>
<android.os.TransactionTooLargeException: void <init>(String)>
<org.w3c.dom.UserDataHandler: void handle(short,java.lang.String,java.lang.Object,org.w3c.dom.Node,org.w3c.dom.Node)>
<android.text.style.RelativeSizeSpan: float getSizeChange()>
<android.text.style.RelativeSizeSpan: int getSpanTypeId()>
<android.text.style.RelativeSizeSpan: void <init>(from=0) float)>
<android.text.style.RelativeSizeSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.RelativeSizeSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.RelativeSizeSpan: int describeContents()>
<android.text.style.RelativeSizeSpan: void <init>(android.os.Parcel)>
<android.text.style.RelativeSizeSpan: void writeToParcel(android.os.Parcel,int)>
<android.net.LinkAddress: void <init>(String,int,int)>
<android.net.LinkAddress: boolean isIpv6()>
<android.net.LinkAddress: boolean isIpv4()>
<android.net.LinkAddress: boolean isSameAddressAs(android.net.LinkAddress)>
<android.net.LinkAddress: int getPrefixLength()>
<android.net.LinkAddress: void <init>(from=0,to=128) int,int,int)>
<android.net.LinkAddress: int describeContents()>
<android.net.LinkAddress: void <init>(String)>
<android.net.LinkAddress: boolean isGlobalPreferred()>
<android.net.LinkAddress: java.net.InetAddress getAddress()>
<android.net.LinkAddress: int getFlags()>
<android.net.LinkAddress: void <init>(from=0,to=128) int)>
<android.net.LinkAddress: void writeToParcel(android.os.Parcel,int)>
<android.net.LinkAddress: int getScope()>
<android.preference.Preference.OnPreferenceClickListener: boolean onPreferenceClick(android.preference.Preference)>
<android.content.pm.PackageItemInfo: CharSequence loadSafeLabel(android.content.pm.PackageManager,float,int)>
<android.content.pm.PackageItemInfo: void <init>()>
<android.content.pm.PackageItemInfo: void dumpBack(android.util.Printer,java.lang.String)>
<android.content.pm.PackageItemInfo: void dumpFront(android.util.Printer,java.lang.String)>
<android.content.pm.PackageItemInfo: void <init>(android.os.Parcel)>
<android.content.pm.PackageItemInfo: CharSequence loadLabel(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageItemInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)>
<android.content.pm.PackageItemInfo: void forceSafeLabels()>
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadBanner(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: void <init>(android.content.pm.PackageItemInfo)>
<android.content.pm.PackageItemInfo: CharSequence loadSafeLabel(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadUnbadgedIcon(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<java.security.AlgorithmParameters: void init(byte[])>
<java.security.AlgorithmParameters: java.lang.String toString()>
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>
<java.security.AlgorithmParameters: byte[] getEncoded()>
<java.security.AlgorithmParameters: void init(byte[],java.lang.String)>
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)>
<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)>
<java.security.AlgorithmParameters: T getParameterSpec(java.lang.Class)>
<java.security.AlgorithmParameters: void <init>(java.security.AlgorithmParametersSpi,java.security.Provider,String)>
<java.security.AlgorithmParameters: java.lang.String getAlgorithm()>
<java.security.AlgorithmParameters: java.security.Provider getProvider()>
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.security.Provider)>
<java.security.AlgorithmParameters: byte[] getEncoded(java.lang.String)>
<android.media.MediaCas.Session: void setPrivateData(byte[])>
<android.media.MediaCas.Session: void close()>
<android.media.MediaCas.Session: void sendSessionEvent(int,int,byte[])>
<android.media.MediaCas.Session: void processEcm(byte[],int,int)>
<android.media.MediaCas.Session: void processEcm(byte[])>
<android.widget.RadioGroup.LayoutParams: void <init>(android.view.ViewGroup.MarginLayoutParams)>
<android.widget.RadioGroup.LayoutParams: void <init>(int,int,float)>
<android.widget.RadioGroup.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.widget.RadioGroup.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RadioGroup.LayoutParams: void <init>(int,int)>
<android.graphics.PaintFlagsDrawFilter: void <init>(int,int)>
<org.w3c.dom.ls.LSResourceResolver: org.w3c.dom.ls.LSInput resolveResource(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.view.inspector.InspectionCompanion: void readProperties(T,android.view.inspector.PropertyReader)>
<android.view.inspector.InspectionCompanion: void mapProperties(android.view.inspector.PropertyMapper)>
<android.os.Vibrator: boolean hasAmplitudeControl()>
<android.os.Vibrator: void vibrate(long,android.media.AudioAttributes)>
<android.os.Vibrator: boolean hasVibrator()>
<android.os.Vibrator: void vibrate(long[],int)>
<android.os.Vibrator: void cancel()>
<android.os.Vibrator: void vibrate(long)>
<android.os.Vibrator: void vibrate(long[],int,android.media.AudioAttributes)>
<android.os.Vibrator: void vibrate(android.os.VibrationEffect)>
<android.os.Vibrator: void vibrate(android.os.VibrationEffect,android.media.AudioAttributes)>
<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[])>
<java.security.AccessControlContext: java.security.DomainCombiner getDomainCombiner()>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>
<java.security.AccessControlContext: void <init>(java.security.AccessControlContext,java.security.DomainCombiner)>
<android.net.sip.SipSession.Listener: void onError(android.net.sip.SipSession,int,java.lang.String)>
<android.net.sip.SipSession.Listener: void onCallEnded(android.net.sip.SipSession)>
<android.net.sip.SipSession.Listener: void onCalling(android.net.sip.SipSession)>
<android.net.sip.SipSession.Listener: void <init>()>
<android.net.sip.SipSession.Listener: void onRegistering(android.net.sip.SipSession)>
<android.net.sip.SipSession.Listener: void onCallChangeFailed(android.net.sip.SipSession,int,java.lang.String)>
<android.net.sip.SipSession.Listener: void onRingingBack(android.net.sip.SipSession)>
<android.net.sip.SipSession.Listener: void onCallEstablished(android.net.sip.SipSession,java.lang.String)>
<android.net.sip.SipSession.Listener: void onRinging(android.net.sip.SipSession,android.net.sip.SipProfile,java.lang.String)>
<android.net.sip.SipSession.Listener: void onRegistrationDone(android.net.sip.SipSession,int)>
<android.net.sip.SipSession.Listener: void onRegistrationFailed(android.net.sip.SipSession,int,java.lang.String)>
<android.net.sip.SipSession.Listener: void onRegistrationTimeout(android.net.sip.SipSession)>
<android.net.sip.SipSession.Listener: void onCallBusy(android.net.sip.SipSession)>
<android.view.animation.AnticipateInterpolator: void <init>()>
<android.view.animation.AnticipateInterpolator: void <init>(float)>
<android.view.animation.AnticipateInterpolator: float getInterpolation(float)>
<android.view.animation.AnticipateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.os.Build.VERSION: void <init>()>
<java.util.Arrays: java.util.stream.IntStream stream(int[])>
<java.util.Arrays: void fill(long[],long)>
<java.util.Arrays: int hashCode(byte[])>
<java.util.Arrays: void parallelSort(T[],int,int,java.util.Comparator)>
<java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>
<java.util.Arrays: java.util.stream.Stream stream(T[],int,int)>
<java.util.Arrays: int binarySearch(short[],short)>
<java.util.Arrays: int binarySearch(double[],int,int,double)>
<java.util.Arrays: void sort(long[])>
<java.util.Arrays: double[] copyOfRange(double[],int,int)>
<java.util.Arrays: void sort(T[],int,int,java.util.Comparator)>
<java.util.Arrays: int hashCode(float[])>
<java.util.Arrays: void parallelPrefix(double[],java.util.function.DoubleBinaryOperator)>
<java.util.Arrays: void parallelPrefix(int[],int,int,java.util.function.IntBinaryOperator)>
<java.util.Arrays: void setAll(int[],java.util.function.IntUnaryOperator)>
<java.util.Arrays: java.lang.String toString(boolean[])>
<java.util.Arrays: void parallelPrefix(int[],java.util.function.IntBinaryOperator)>
<java.util.Arrays: void parallelPrefix(long[],java.util.function.LongBinaryOperator)>
<java.util.Arrays: void parallelPrefix(long[],int,int,java.util.function.LongBinaryOperator)>
<java.util.Arrays: java.lang.String toString(long[])>
<java.util.Arrays: void parallelSort(int[],int,int)>
<java.util.Arrays: void parallelSort(long[])>
<java.util.Arrays: T[] copyOf(T[],int)>
<java.util.Arrays: long[] copyOfRange(long[],int,int)>
<java.util.Arrays: int binarySearch(float[],float)>
<java.util.Arrays: void fill(boolean[],boolean)>
<java.util.Arrays: void parallelSort(T[],int,int)>
<java.util.Arrays: java.util.Spliterator.OfInt spliterator(int[])>
<java.util.Arrays: void sort(short[],int,int)>
<java.util.Arrays: double[] copyOf(double[],int)>
<java.util.Arrays: void fill(int[],int)>
<java.util.Arrays: java.util.Spliterator.OfLong spliterator(long[],int,int)>
<java.util.Arrays: void parallelSort(byte[])>
<java.util.Arrays: java.lang.String toString(int[])>
<java.util.Arrays: void setAll(long[],java.util.function.IntToLongFunction)>
<java.util.Arrays: int binarySearch(byte[],byte)>
<java.util.Arrays: float[] copyOf(float[],int)>
<java.util.Arrays: void fill(float[],int,int,float)>
<java.util.Arrays: void sort(int[])>
<java.util.Arrays: boolean equals(byte[],byte[])>
<java.util.Arrays: int hashCode(short[])>
<java.util.Arrays: void parallelPrefix(T[],int,int,java.util.function.BinaryOperator)>
<java.util.Arrays: int binarySearch(int[],int,int,int)>
<java.util.Arrays: short[] copyOfRange(short[],int,int)>
<java.util.Arrays: java.util.stream.LongStream stream(long[])>
<java.util.Arrays: void sort(char[])>
<java.util.Arrays: int[] copyOf(int[],int)>
<java.util.Arrays: byte[] copyOfRange(byte[],int,int)>
<java.util.Arrays: void fill(short[],short)>
<java.util.Arrays: float[] copyOfRange(float[],int,int)>
<java.util.Arrays: int hashCode(long[])>
<java.util.Arrays: java.util.Spliterator.OfLong spliterator(long[])>
<java.util.Arrays: boolean equals(int[],int[])>
<java.util.Arrays: int hashCode(int[])>
<java.util.Arrays: void fill(boolean[],int,int,boolean)>
<java.util.Arrays: void parallelSort(byte[],int,int)>
<java.util.Arrays: T[] copyOfRange(T[],int,int)>
<java.util.Arrays: int deepHashCode(java.lang.Object[])>
<java.util.Arrays: void parallelPrefix(T[],java.util.function.BinaryOperator)>
<java.util.Arrays: java.util.stream.DoubleStream stream(double[],int,int)>
<java.util.Arrays: int hashCode(boolean[])>
<java.util.Arrays: boolean equals(boolean[],boolean[])>
<java.util.Arrays: int binarySearch(T[],T,java.util.Comparator)>
<java.util.Arrays: int binarySearch(short[],int,int,short)>
<java.util.Arrays: java.lang.String toString(char[])>
<java.util.Arrays: void parallelPrefix(double[],int,int,java.util.function.DoubleBinaryOperator)>
<java.util.Arrays: java.lang.String toString(java.lang.Object[])>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>
<java.util.Arrays: int[] copyOfRange(int[],int,int)>
<java.util.Arrays: void parallelSetAll(double[],java.util.function.IntToDoubleFunction)>
<java.util.Arrays: java.util.stream.DoubleStream stream(double[])>
<java.util.Arrays: boolean[] copyOfRange(boolean[],int,int)>
<java.util.Arrays: java.lang.String toString(short[])>
<java.util.Arrays: java.lang.String deepToString(java.lang.Object[])>
<java.util.Arrays: void sort(int[],int,int)>
<java.util.Arrays: void sort(byte[],int,int)>
<java.util.Arrays: void setAll(double[],java.util.function.IntToDoubleFunction)>
<java.util.Arrays: void parallelSetAll(long[],java.util.function.IntToLongFunction)>
<java.util.Arrays: void parallelSort(float[],int,int)>
<java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>
<java.util.Arrays: void parallelSort(int[])>
<java.util.Arrays: T[] copyOf(U[],int,java.lang.Class)>
<java.util.Arrays: java.util.stream.LongStream stream(long[],int,int)>
<java.util.Arrays: int binarySearch(int[],int)>
<java.util.Arrays: int binarySearch(T[],int,int,T,java.util.Comparator)>
<java.util.Arrays: void parallelSort(short[])>
<java.util.Arrays: void sort(long[],int,int)>
<java.util.Arrays: boolean equals(short[],short[])>
<java.util.Arrays: void fill(byte[],int,int,byte)>
<java.util.Arrays: void parallelSort(char[],int,int)>
<java.util.Arrays: void fill(char[],char)>
<java.util.Arrays: void sort(T[],java.util.Comparator)>
<java.util.Arrays: int hashCode(java.lang.Object[])>
<java.util.Arrays: java.util.Spliterator spliterator(T[],int,int)>
<java.util.Arrays: int binarySearch(java.lang.Object[],int,int,java.lang.Object)>
<java.util.Arrays: void fill(int[],int,int,int)>
<java.util.Arrays: long[] copyOf(long[],int)>
<java.util.Arrays: void parallelSort(T[])>
<java.util.Arrays: java.lang.String toString(float[])>
<java.util.Arrays: void parallelSort(double[])>
<java.util.Arrays: java.util.Spliterator.OfDouble spliterator(double[],int,int)>
<java.util.Arrays: void parallelSort(double[],int,int)>
<java.util.Arrays: void fill(double[],int,int,double)>
<java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>
<java.util.Arrays: void sort(short[])>
<java.util.Arrays: java.util.stream.IntStream stream(int[],int,int)>
<java.util.Arrays: boolean[] copyOf(boolean[],int)>
<java.util.Arrays: boolean equals(long[],long[])>
<java.util.Arrays: void sort(java.lang.Object[],int,int)>
<java.util.Arrays: int binarySearch(byte[],int,int,byte)>
<java.util.Arrays: void fill(char[],int,int,char)>
<java.util.Arrays: int hashCode(char[])>
<java.util.Arrays: void fill(byte[],byte)>
<java.util.Arrays: void parallelSort(float[])>
<java.util.Arrays: java.util.Spliterator.OfDouble spliterator(double[])>
<java.util.Arrays: byte[] copyOf(byte[],int)>
<java.util.Arrays: void parallelSort(short[],int,int)>
<java.util.Arrays: void sort(float[])>
<java.util.Arrays: void fill(double[],double)>
<java.util.Arrays: int binarySearch(float[],int,int,float)>
<java.util.Arrays: int binarySearch(long[],long)>
<java.util.Arrays: java.util.stream.Stream stream(T[])>
<java.util.Arrays: void parallelSetAll(int[],java.util.function.IntUnaryOperator)>
<java.util.Arrays: java.util.Spliterator spliterator(T[])>
<java.util.Arrays: boolean equals(float[],float[])>
<java.util.Arrays: java.lang.String toString(byte[])>
<java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>
<java.util.Arrays: char[] copyOfRange(char[],int,int)>
<java.util.Arrays: void sort(byte[])>
<java.util.Arrays: void setAll(T[],java.util.function.IntFunction)>
<java.util.Arrays: void sort(double[],int,int)>
<java.util.Arrays: int binarySearch(char[],char)>
<java.util.Arrays: int binarySearch(char[],int,int,char)>
<java.util.Arrays: int binarySearch(double[],double)>
<java.util.Arrays: boolean equals(char[],char[])>
<java.util.Arrays: void fill(long[],int,int,long)>
<java.util.Arrays: java.util.Spliterator.OfInt spliterator(int[],int,int)>
<java.util.Arrays: java.lang.String toString(double[])>
<java.util.Arrays: void parallelSetAll(T[],java.util.function.IntFunction)>
<java.util.Arrays: void parallelSort(long[],int,int)>
<java.util.Arrays: char[] copyOf(char[],int)>
<java.util.Arrays: void sort(float[],int,int)>
<java.util.Arrays: void sort(java.lang.Object[])>
<java.util.Arrays: int hashCode(double[])>
<java.util.Arrays: boolean equals(double[],double[])>
<java.util.Arrays: void parallelSort(char[])>
<java.util.Arrays: short[] copyOf(short[],int)>
<java.util.Arrays: void parallelSort(T[],java.util.Comparator)>
<java.util.Arrays: void fill(short[],int,int,short)>
<java.util.Arrays: void fill(float[],float)>
<java.util.Arrays: void sort(double[])>
<java.util.Arrays: java.util.List asList(T...)>
<java.util.Arrays: void sort(char[],int,int)>
<java.util.Arrays: int binarySearch(long[],int,int,long)>
<java.util.Arrays: T[] copyOfRange(U[],int,int,java.lang.Class)>
<org.w3c.dom.DocumentType extends org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getEntities()>
<org.w3c.dom.DocumentType extends org.w3c.dom.Node: java.lang.String getPublicId()>
<org.w3c.dom.DocumentType extends org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getNotations()>
<org.w3c.dom.DocumentType extends org.w3c.dom.Node: java.lang.String getName()>
<org.w3c.dom.DocumentType extends org.w3c.dom.Node: java.lang.String getSystemId()>
<org.w3c.dom.DocumentType extends org.w3c.dom.Node: java.lang.String getInternalSubset()>
<android.widget.CompoundButton.OnCheckedChangeListener: void onCheckedChanged(android.widget.CompoundButton,boolean)>
<java.util.logging.FileHandler: void <init>(String,int,int,boolean)>
<java.util.logging.FileHandler: void <init>(String)>
<java.util.logging.FileHandler: void <init>()>
<java.util.logging.FileHandler: void <init>(String,int,int)>
<java.util.logging.FileHandler: void <init>(String,boolean)>
<android.telephony.PhoneNumberFormattingTextWatcher: void <init>()>
<android.telephony.PhoneNumberFormattingTextWatcher: void beforeTextChanged(CharSequence,int,int,int)>
<android.telephony.PhoneNumberFormattingTextWatcher: void onTextChanged(CharSequence,int,int,int)>
<android.telephony.PhoneNumberFormattingTextWatcher: void afterTextChanged(android.text.Editable)>
<android.telephony.PhoneNumberFormattingTextWatcher: void <init>(String)>
<android.app.RemoteInput.Builder: android.app.RemoteInput.Builder setChoices(CharSequence[])>
<android.app.RemoteInput.Builder: android.app.RemoteInput.Builder addExtras(android.os.Bundle)>
<android.app.RemoteInput.Builder: android.app.RemoteInput.Builder setAllowDataType(java.lang.String,boolean)>
<android.app.RemoteInput.Builder: android.app.RemoteInput.Builder setAllowFreeFormInput(boolean)>
<android.app.RemoteInput.Builder: android.app.RemoteInput.Builder setLabel(CharSequence)>
<android.app.RemoteInput.Builder: android.app.RemoteInput build()>
<android.app.RemoteInput.Builder: void <init>(String)>
<android.app.RemoteInput.Builder: android.os.Bundle getExtras()>
<android.app.RemoteInput.Builder: android.app.RemoteInput.Builder setEditChoicesBeforeSending(int)>
<android.media.audiofx.BassBoost.OnParameterChangeListener: void onParameterChange(android.media.audiofx.BassBoost,int,int,short)>
<android.hardware.input.InputManager: android.view.InputDevice getInputDevice(int)>
<android.hardware.input.InputManager: void unregisterInputDeviceListener(android.hardware.input.InputManager.InputDeviceListener)>
<android.hardware.input.InputManager: int[] getInputDeviceIds()>
<android.hardware.input.InputManager: void registerInputDeviceListener(android.hardware.input.InputManager.InputDeviceListener,android.os.Handler)>
<android.app.Notification.WearableExtender: int getCustomSizePreset()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setDismissalId(java.lang.String)>
<android.app.Notification.WearableExtender: int getHintScreenTimeout()>
<android.app.Notification.WearableExtender: int getContentIcon()>
<android.app.Notification.WearableExtender: int getCustomContentHeight()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setGravity(int)>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender addPages(java.util.List)>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setCustomSizePreset(int)>
<android.app.Notification.WearableExtender: int getContentIconGravity()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setHintAvoidBackgroundClipping(boolean)>
<android.app.Notification.WearableExtender: int getContentAction()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setContentIntentAvailableOffline(boolean)>
<android.app.Notification.WearableExtender: java.lang.String getBridgeTag()>
<android.app.Notification.WearableExtender: java.util.List getPages()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setHintAmbientBigPicture(boolean)>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender addActions(java.util.List)>
<android.app.Notification.WearableExtender: android.app.PendingIntent getDisplayIntent()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender clearPages()>
<android.app.Notification.WearableExtender: java.lang.String getDismissalId()>
<android.app.Notification.WearableExtender: boolean getStartScrollBottom()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setHintHideIcon(boolean)>
<android.app.Notification.WearableExtender: boolean getContentIntentAvailableOffline()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setDisplayIntent(android.app.PendingIntent)>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender clearActions()>
<android.app.Notification.WearableExtender: android.app.Notification.Builder extend(android.app.Notification.Builder)>
<android.app.Notification.WearableExtender: boolean getHintAmbientBigPicture()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender addPage(android.app.Notification)>
<android.app.Notification.WearableExtender: int getGravity()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setContentIconGravity(int)>
<android.app.Notification.WearableExtender: boolean getHintContentIntentLaunchesActivity()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setHintScreenTimeout(int)>
<android.app.Notification.WearableExtender: boolean getHintShowBackgroundOnly()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setContentIcon(int)>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setBridgeTag(java.lang.String)>
<android.app.Notification.WearableExtender: void <init>(android.app.Notification)>
<android.app.Notification.WearableExtender: boolean getHintHideIcon()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setBackground(android.graphics.Bitmap)>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setHintShowBackgroundOnly(boolean)>
<android.app.Notification.WearableExtender: android.graphics.Bitmap getBackground()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setContentAction(int)>
<android.app.Notification.WearableExtender: void <init>()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setCustomContentHeight(int)>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender clone()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setStartScrollBottom(boolean)>
<android.app.Notification.WearableExtender: boolean getHintAvoidBackgroundClipping()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender addAction(android.app.Notification.Action)>
<android.app.Notification.WearableExtender: java.util.List getActions()>
<android.app.Notification.WearableExtender: android.app.Notification.WearableExtender setHintContentIntentLaunchesActivity(boolean)>
<android.net.wifi.aware.ParcelablePeerHandle: void <init>(android.net.wifi.aware.PeerHandle)>
<android.net.wifi.aware.ParcelablePeerHandle: int describeContents()>
<android.net.wifi.aware.ParcelablePeerHandle: void writeToParcel(android.os.Parcel,int)>
<android.database.sqlite.SQLiteDatabaseLockedException: void <init>()>
<android.database.sqlite.SQLiteDatabaseLockedException: void <init>(String)>
<android.os.health.HealthKeys: int type()>
<android.os.health.HealthKeys: void <init>()>
<android.view.ContextMenu extends android.view.Menu: android.view.ContextMenu setHeaderIcon(@DrawableResint)>
<android.view.ContextMenu extends android.view.Menu: android.view.ContextMenu setHeaderTitle(CharSequence)>
<android.view.ContextMenu extends android.view.Menu: void clearHeader()>
<android.view.ContextMenu extends android.view.Menu: android.view.ContextMenu setHeaderIcon(android.graphics.drawable.Drawable)>
<android.view.ContextMenu extends android.view.Menu: android.view.ContextMenu setHeaderView(android.view.View)>
<android.view.ContextMenu extends android.view.Menu: android.view.ContextMenu setHeaderTitle(@StringResint)>
<java.util.function.LongToIntFunction: int applyAsInt(long)>
<android.accessibilityservice.AccessibilityService.SoftKeyboardController.OnShowModeChangedListener: void onShowModeChanged(android.accessibilityservice.AccessibilityService.SoftKeyboardController,int)>
<android.text.Spannable.Factory: void <init>()>
<android.text.Spannable.Factory: android.text.Spannable.Factory getInstance()>
<android.text.Spannable.Factory: android.text.Spannable newSpannable(CharSequence)>
<java.security.Signature: java.security.Signature getInstance(java.lang.String)>
<java.security.Signature: java.lang.String getAlgorithm()>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.security.Provider)>
<java.security.Signature: java.lang.Object getParameter(java.lang.String)>
<java.security.Signature: java.security.AlgorithmParameters getParameters()>
<java.security.Signature: void update(byte)>
<java.security.Signature: void update(java.nio.ByteBuffer)>
<java.security.Signature: void initVerify(java.security.PublicKey)>
<java.security.Signature: void initVerify(java.security.cert.Certificate)>
<java.security.Signature: void <init>(String)>
<java.security.Signature: void setParameter(java.lang.String,java.lang.Object)>
<java.security.Signature: void initSign(java.security.PrivateKey)>
<java.security.Signature: boolean verify(byte[],int,int)>
<java.security.Signature: void update(byte[],int,int)>
<java.security.Signature: int sign(byte[],int,int)>
<java.security.Signature: byte[] sign()>
<java.security.Signature: void initSign(java.security.PrivateKey,java.security.SecureRandom)>
<java.security.Signature: void update(byte[])>
<java.security.Signature: void setParameter(java.security.spec.AlgorithmParameterSpec)>
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>
<java.security.Signature: java.security.Provider getProvider()>
<java.security.Signature: boolean verify(byte[])>
<android.net.wifi.aware.WifiAwareManager: android.net.wifi.aware.Characteristics getCharacteristics()>
<android.net.wifi.aware.WifiAwareManager: void attach(android.net.wifi.aware.AttachCallback,android.net.wifi.aware.IdentityChangedListener,android.os.Handler)>
<android.net.wifi.aware.WifiAwareManager: boolean isAvailable()>
<android.net.wifi.aware.WifiAwareManager: void attach(android.net.wifi.aware.AttachCallback,android.os.Handler)>
<java.nio.channels.ClosedByInterruptException: void <init>()>
<android.view.KeyCharacterMap.KeyData: void <init>()>
<java.util.jar.Pack200.Packer: java.util.SortedMap properties()>
<java.util.jar.Pack200.Packer: void addPropertyChangeListener(java.beans.PropertyChangeListener)>
<java.util.jar.Pack200.Packer: void removePropertyChangeListener(java.beans.PropertyChangeListener)>
<java.util.jar.Pack200.Packer: void pack(java.util.jar.JarInputStream,java.io.OutputStream)>
<java.util.jar.Pack200.Packer: void pack(java.util.jar.JarFile,java.io.OutputStream)>
<android.hardware.SensorDirectChannel: void close()>
<android.hardware.SensorDirectChannel: int configure(android.hardware.Sensor,int)>
<android.hardware.SensorDirectChannel: boolean isOpen()>
<android.app.AutomaticZenRule: int getInterruptionFilter()>
<android.app.AutomaticZenRule: void <init>(String,android.content.ComponentName,android.content.ComponentName,android.net.Uri,android.service.notification.ZenPolicy,int,boolean)>
<android.app.AutomaticZenRule: int describeContents()>
<android.app.AutomaticZenRule: void setConfigurationActivity(android.content.ComponentName)>
<android.app.AutomaticZenRule: android.content.ComponentName getConfigurationActivity()>
<android.app.AutomaticZenRule: void setConditionId(android.net.Uri)>
<android.app.AutomaticZenRule: void setName(java.lang.String)>
<android.app.AutomaticZenRule: android.service.notification.ZenPolicy getZenPolicy()>
<android.app.AutomaticZenRule: void <init>(android.os.Parcel)>
<android.app.AutomaticZenRule: void setZenPolicy(android.service.notification.ZenPolicy)>
<android.app.AutomaticZenRule: void writeToParcel(android.os.Parcel,int)>
<android.app.AutomaticZenRule: boolean isEnabled()>
<android.app.AutomaticZenRule: java.lang.String getName()>
<android.app.AutomaticZenRule: android.net.Uri getConditionId()>
<android.app.AutomaticZenRule: void setInterruptionFilter(int)>
<android.app.AutomaticZenRule: long getCreationTime()>
<android.app.AutomaticZenRule: android.content.ComponentName getOwner()>
<android.app.AutomaticZenRule: void setEnabled(boolean)>
<android.app.AutomaticZenRule: void <init>(String,android.content.ComponentName,android.net.Uri,int,boolean)>
<android.renderscript.RenderScript.RSErrorHandler: void run()>
<android.renderscript.RenderScript.RSErrorHandler: void <init>()>
<android.webkit.WebResourceResponse: void setEncoding(java.lang.String)>
<android.webkit.WebResourceResponse: void setStatusCodeAndReasonPhrase(int,java.lang.String)>
<android.webkit.WebResourceResponse: java.util.Map getResponseHeaders()>
<android.webkit.WebResourceResponse: void setResponseHeaders(java.util.Map)>
<android.webkit.WebResourceResponse: java.io.InputStream getData()>
<android.webkit.WebResourceResponse: int getStatusCode()>
<android.webkit.WebResourceResponse: java.lang.String getReasonPhrase()>
<android.webkit.WebResourceResponse: java.lang.String getMimeType()>
<android.webkit.WebResourceResponse: void setMimeType(java.lang.String)>
<android.webkit.WebResourceResponse: java.lang.String getEncoding()>
<android.webkit.WebResourceResponse: void <init>(boolean,String,String,int,String,java.util.Map,java.io.InputStream)>
<android.webkit.WebResourceResponse: void setData(java.io.InputStream)>
<android.webkit.WebResourceResponse: void <init>(String,String,java.io.InputStream)>
<android.webkit.WebResourceResponse: void <init>(String,String,int,String,java.util.Map,java.io.InputStream)>
<android.drm.DrmUtils.ExtendedMetadataParser: java.util.Iterator keyIterator()>
<android.drm.DrmUtils.ExtendedMetadataParser: java.lang.String get(java.lang.String)>
<android.drm.DrmUtils.ExtendedMetadataParser: java.util.Iterator iterator()>
<android.view.GestureDetector: void <init>(android.view.GestureDetector.OnGestureListener)>
<android.view.GestureDetector: void <init>(android.content.Context,android.view.GestureDetector.OnGestureListener,android.os.Handler,boolean)>
<android.view.GestureDetector: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.view.GestureDetector: void <init>(android.content.Context,android.view.GestureDetector.OnGestureListener,android.os.Handler)>
<android.view.GestureDetector: void setIsLongpressEnabled(boolean)>
<android.view.GestureDetector: void setContextClickListener(android.view.GestureDetector.OnContextClickListener)>
<android.view.GestureDetector: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.GestureDetector: void setOnDoubleTapListener(android.view.GestureDetector.OnDoubleTapListener)>
<android.view.GestureDetector: void <init>(android.view.GestureDetector.OnGestureListener,android.os.Handler)>
<android.view.GestureDetector: void <init>(android.content.Context,android.view.GestureDetector.OnGestureListener)>
<android.view.GestureDetector: boolean isLongpressEnabled()>
<android.hardware.camera2.CameraDevice.StateCallback: void onOpened(android.hardware.camera2.CameraDevice)>
<android.hardware.camera2.CameraDevice.StateCallback: void onClosed(android.hardware.camera2.CameraDevice)>
<android.hardware.camera2.CameraDevice.StateCallback: void onError(android.hardware.camera2.CameraDevice,int)>
<android.hardware.camera2.CameraDevice.StateCallback: void onDisconnected(android.hardware.camera2.CameraDevice)>
<android.hardware.camera2.CameraDevice.StateCallback: void <init>()>
<android.view.autofill.AutofillValue: int getListValue()>
<android.view.autofill.AutofillValue: boolean isText()>
<android.view.autofill.AutofillValue: void writeToParcel(android.os.Parcel,int)>
<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forDate(long)>
<android.view.autofill.AutofillValue: CharSequence getTextValue()>
<android.view.autofill.AutofillValue: boolean isList()>
<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forList(int)>
<android.view.autofill.AutofillValue: boolean isDate()>
<android.view.autofill.AutofillValue: long getDateValue()>
<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forText(CharSequence)>
<android.view.autofill.AutofillValue: boolean getToggleValue()>
<android.view.autofill.AutofillValue: boolean isToggle()>
<android.view.autofill.AutofillValue: int describeContents()>
<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forToggle(boolean)>
<android.hardware.radio.RadioTuner: void setConfigFlag(int,boolean)>
<android.hardware.radio.RadioTuner: int getProgramInformation(android.hardware.radio.RadioManager.ProgramInfo[])>
<android.hardware.radio.RadioTuner: java.util.Map getParameters(java.util.List)>
<android.hardware.radio.RadioTuner: void tune(android.hardware.radio.ProgramSelector)>
<android.hardware.radio.RadioTuner: int tune(int,int)>
<android.hardware.radio.RadioTuner: int setConfiguration(android.hardware.radio.RadioManager.BandConfig)>
<android.hardware.radio.RadioTuner: void cancelAnnouncement()>
<android.hardware.radio.RadioTuner: int cancel()>
<android.hardware.radio.RadioTuner: boolean hasControl()>
<android.hardware.radio.RadioTuner: void setAnalogForced(boolean)>
<android.hardware.radio.RadioTuner: boolean isAnalogForced()>
<android.hardware.radio.RadioTuner: java.util.Map setParameters(java.util.Map)>
<android.hardware.radio.RadioTuner: java.util.List getProgramList(java.util.Map)>
<android.hardware.radio.RadioTuner: int scan(int,boolean)>
<android.hardware.radio.RadioTuner: void <init>()>
<android.hardware.radio.RadioTuner: boolean getMute()>
<android.hardware.radio.RadioTuner: void close()>
<android.hardware.radio.RadioTuner: int step(int,boolean)>
<android.hardware.radio.RadioTuner: boolean startBackgroundScan()>
<android.hardware.radio.RadioTuner: boolean isConfigFlagSupported(int)>
<android.hardware.radio.RadioTuner: int setMute(boolean)>
<android.hardware.radio.RadioTuner: int getConfiguration(android.hardware.radio.RadioManager.BandConfig[])>
<android.hardware.radio.RadioTuner: android.hardware.radio.ProgramList getDynamicProgramList(android.hardware.radio.ProgramList.Filter)>
<android.hardware.radio.RadioTuner: boolean isConfigFlagSet(int)>
<android.hardware.radio.RadioTuner: boolean isAntennaConnected()>
<android.media.MediaSync: void setPlaybackParams(android.media.PlaybackParams)>
<android.media.MediaSync: android.media.MediaTimestamp getTimestamp()>
<android.media.MediaSync: android.media.PlaybackParams getPlaybackParams()>
<android.media.MediaSync: void setSurface(android.view.Surface)>
<android.media.MediaSync: void <init>()>
<android.media.MediaSync: void setCallback(android.media.MediaSync.Callback,android.os.Handler)>
<android.media.MediaSync: void setAudioTrack(android.media.AudioTrack)>
<android.media.MediaSync: void queueAudio(java.nio.ByteBuffer,int,long)>
<android.media.MediaSync: void setSyncParams(android.media.SyncParams)>
<android.media.MediaSync: void setOnErrorListener(android.media.MediaSync.OnErrorListener,android.os.Handler)>
<android.media.MediaSync: android.media.SyncParams getSyncParams()>
<android.media.MediaSync: void release()>
<android.media.MediaSync: android.view.Surface createInputSurface()>
<android.media.MediaSync: void flush()>
<android.media.MediaSync: void finalize()>
<android.net.SSLSessionCache: void <init>(java.io.File)>
<android.net.SSLSessionCache: void <init>(android.content.Context)>
<android.view.View.OnHoverListener: boolean onHover(android.view.View,android.view.MotionEvent)>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: int executeUpdate(java.lang.String,int)>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: void cancel()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: void setMaxFieldSize(int)>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: int getResultSetConcurrency()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: boolean execute(java.lang.String,int[])>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.ResultSet executeQuery(java.lang.String)>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: void addBatch(java.lang.String)>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: boolean execute(java.lang.String)>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: int getFetchSize()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.SQLWarning getWarnings()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: int getFetchDirection()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: void setFetchDirection(int)>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: int getQueryTimeout()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: boolean execute(java.lang.String,int)>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: void setQueryTimeout(int)>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: void clearWarnings()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: boolean isPoolable()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: void setMaxRows(int)>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: boolean isClosed()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: int[] executeBatch()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.Connection getConnection()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: int getMaxRows()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: boolean getMoreResults()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: void close()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: int getMaxFieldSize()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.ResultSet getGeneratedKeys()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: int getResultSetType()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: int getResultSetHoldability()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: void setCursorName(java.lang.String)>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: int executeUpdate(java.lang.String,java.lang.String[])>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: boolean execute(java.lang.String,java.lang.String[])>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: java.sql.ResultSet getResultSet()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: void setPoolable(boolean)>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: int getUpdateCount()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: void setFetchSize(int)>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: void clearBatch()>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: int executeUpdate(java.lang.String,int[])>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: void setEscapeProcessing(boolean)>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: boolean getMoreResults(int)>
<java.sql.Statement extends java.sql.Wrapper java.lang.AutoCloseable: int executeUpdate(java.lang.String)>
<android.transition.Transition.TransitionListener: void onTransitionPause(android.transition.Transition)>
<android.transition.Transition.TransitionListener: void onTransitionResume(android.transition.Transition)>
<android.transition.Transition.TransitionListener: void onTransitionStart(android.transition.Transition)>
<android.transition.Transition.TransitionListener: void onTransitionEnd(android.transition.Transition)>
<android.transition.Transition.TransitionListener: void onTransitionCancel(android.transition.Transition)>
<java.security.Key extends java.io.Serializable: java.lang.String getAlgorithm()>
<java.security.Key extends java.io.Serializable: java.lang.String getFormat()>
<java.security.Key extends java.io.Serializable: byte[] getEncoded()>
<android.os.ConditionVariable: boolean block(long)>
<android.os.ConditionVariable: void block()>
<android.os.ConditionVariable: void open()>
<android.os.ConditionVariable: void close()>
<android.os.ConditionVariable: void <init>()>
<android.os.ConditionVariable: void <init>(boolean)>
<java.security.cert.CertPathBuilderException: void <init>(Throwable)>
<java.security.cert.CertPathBuilderException: void <init>(String)>
<java.security.cert.CertPathBuilderException: void <init>(String,Throwable)>
<java.security.cert.CertPathBuilderException: void <init>()>
<java.sql.SQLException: java.sql.SQLException getNextException()>
<java.sql.SQLException: java.util.Iterator iterator()>
<java.sql.SQLException: java.lang.String getSQLState()>
<java.sql.SQLException: void <init>(String,String,int)>
<java.sql.SQLException: void <init>(String,String)>
<java.sql.SQLException: void <init>(String,Throwable)>
<java.sql.SQLException: void <init>(String,String,int,Throwable)>
<java.sql.SQLException: void <init>(Throwable)>
<java.sql.SQLException: int getErrorCode()>
<java.sql.SQLException: void <init>(String)>
<java.sql.SQLException: void <init>(String,String,Throwable)>
<java.sql.SQLException: void setNextException(java.sql.SQLException)>
<java.sql.SQLException: void <init>()>
<android.icu.util.IndianCalendar: int handleComputeMonthStart(int,int,boolean)>
<android.icu.util.IndianCalendar: void <init>(android.icu.util.TimeZone)>
<android.icu.util.IndianCalendar: void <init>(java.util.Date)>
<android.icu.util.IndianCalendar: void <init>(java.util.Locale)>
<android.icu.util.IndianCalendar: int handleGetExtendedYear()>
<android.icu.util.IndianCalendar: int handleGetLimit(int,int)>
<android.icu.util.IndianCalendar: void <init>(int,int,int,int,int,int)>
<android.icu.util.IndianCalendar: void <init>()>
<android.icu.util.IndianCalendar: void <init>(android.icu.util.ULocale)>
<android.icu.util.IndianCalendar: void <init>(android.icu.util.TimeZone,java.util.Locale)>
<android.icu.util.IndianCalendar: void <init>(android.icu.util.TimeZone,android.icu.util.ULocale)>
<android.icu.util.IndianCalendar: void <init>(int,int,int)>
<java.net.URLConnection: void <init>(java.net.URL)>
<java.net.URLConnection: long getContentLengthLong()>
<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)>
<java.net.URLConnection: boolean getUseCaches()>
<java.net.URLConnection: long getLastModified()>
<java.net.URLConnection: void setIfModifiedSince(long)>
<java.net.URLConnection: java.lang.String getRequestProperty(java.lang.String)>
<java.net.URLConnection: long getHeaderFieldLong(java.lang.String,long)>
<java.net.URLConnection: long getExpiration()>
<java.net.URLConnection: void setDoOutput(boolean)>
<java.net.URLConnection: java.util.Map getRequestProperties()>
<java.net.URLConnection: void setReadTimeout(int)>
<java.net.URLConnection: java.lang.String guessContentTypeFromName(java.lang.String)>
<java.net.URLConnection: int getReadTimeout()>
<java.net.URLConnection: java.security.Permission getPermission()>
<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>
<java.net.URLConnection: boolean getDefaultAllowUserInteraction()>
<java.net.URLConnection: long getIfModifiedSince()>
<java.net.URLConnection: void setDefaultAllowUserInteraction(boolean)>
<java.net.URLConnection: java.lang.String getHeaderFieldKey(int)>
<java.net.URLConnection: java.util.Map getHeaderFields()>
<java.net.URLConnection: java.io.InputStream getInputStream()>
<java.net.URLConnection: boolean getDefaultUseCaches()>
<java.net.URLConnection: java.lang.String guessContentTypeFromStream(java.io.InputStream)>
<java.net.URLConnection: java.net.FileNameMap getFileNameMap()>
<java.net.URLConnection: void setDefaultUseCaches(boolean)>
<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)>
<java.net.URLConnection: void connect()>
<java.net.URLConnection: int getConnectTimeout()>
<java.net.URLConnection: java.lang.String getHeaderField(int)>
<java.net.URLConnection: java.lang.String getDefaultRequestProperty(java.lang.String)>
<java.net.URLConnection: java.lang.Object getContent()>
<java.net.URLConnection: java.lang.Object getContent(java.lang.Class[])>
<java.net.URLConnection: void setFileNameMap(java.net.FileNameMap)>
<java.net.URLConnection: java.io.OutputStream getOutputStream()>
<java.net.URLConnection: void setConnectTimeout(int)>
<java.net.URLConnection: void setDefaultRequestProperty(java.lang.String,java.lang.String)>
<java.net.URLConnection: java.lang.String getContentType()>
<java.net.URLConnection: void setAllowUserInteraction(boolean)>
<java.net.URLConnection: boolean getDoInput()>
<java.net.URLConnection: void setContentHandlerFactory(java.net.ContentHandlerFactory)>
<java.net.URLConnection: void setDoInput(boolean)>
<java.net.URLConnection: boolean getDoOutput()>
<java.net.URLConnection: int getHeaderFieldInt(java.lang.String,int)>
<java.net.URLConnection: boolean getAllowUserInteraction()>
<java.net.URLConnection: java.net.URL getURL()>
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>
<java.net.URLConnection: int getContentLength()>
<java.net.URLConnection: java.lang.String getContentEncoding()>
<java.net.URLConnection: void setUseCaches(boolean)>
<java.net.URLConnection: long getDate()>
<android.animation.FloatArrayEvaluator: void <init>()>
<android.animation.FloatArrayEvaluator: void <init>(float[])>
<android.animation.FloatArrayEvaluator: float[] evaluate(float,float[],float[])>
<android.app.VoiceInteractor.CompleteVoiceRequest: void onCompleteResult(android.os.Bundle)>
<android.app.VoiceInteractor.CompleteVoiceRequest: void <init>(android.app.VoiceInteractor.Prompt,android.os.Bundle)>
<android.media.SubtitleData: long getStartTimeUs()>
<android.media.SubtitleData: long getDurationUs()>
<android.media.SubtitleData: void <init>(int,long,long,byte[])>
<android.media.SubtitleData: byte[] getData()>
<android.media.SubtitleData: int getTrackIndex()>
<java.sql.SQLDataException: void <init>()>
<java.sql.SQLDataException: void <init>(String,String,int)>
<java.sql.SQLDataException: void <init>(String,Throwable)>
<java.sql.SQLDataException: void <init>(String,String)>
<java.sql.SQLDataException: void <init>(String)>
<java.sql.SQLDataException: void <init>(Throwable)>
<java.sql.SQLDataException: void <init>(String,String,Throwable)>
<java.sql.SQLDataException: void <init>(String,String,int,Throwable)>
<java.nio.channels.AsynchronousSocketChannel: java.util.concurrent.Future connect(java.net.SocketAddress)>
<java.nio.channels.AsynchronousSocketChannel: java.nio.channels.AsynchronousSocketChannel setOption(java.net.SocketOption,T)>
<java.nio.channels.AsynchronousSocketChannel: java.nio.channels.AsynchronousSocketChannel open()>
<java.nio.channels.AsynchronousSocketChannel: void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,A,java.nio.channels.CompletionHandler)>
<java.nio.channels.AsynchronousSocketChannel: java.nio.channels.AsynchronousSocketChannel open(java.nio.channels.AsynchronousChannelGroup)>
<java.nio.channels.AsynchronousSocketChannel: void write(java.nio.ByteBuffer,A,java.nio.channels.CompletionHandler)>
<java.nio.channels.AsynchronousSocketChannel: void connect(java.net.SocketAddress,A,java.nio.channels.CompletionHandler)>
<java.nio.channels.AsynchronousSocketChannel: java.nio.channels.spi.AsynchronousChannelProvider provider()>
<java.nio.channels.AsynchronousSocketChannel: java.nio.channels.AsynchronousSocketChannel shutdownInput()>
<java.nio.channels.AsynchronousSocketChannel: java.nio.channels.AsynchronousSocketChannel bind(java.net.SocketAddress)>
<java.nio.channels.AsynchronousSocketChannel: java.nio.channels.AsynchronousSocketChannel shutdownOutput()>
<java.nio.channels.AsynchronousSocketChannel: java.net.SocketAddress getRemoteAddress()>
<java.nio.channels.AsynchronousSocketChannel: void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,A,java.nio.channels.CompletionHandler)>
<java.nio.channels.AsynchronousSocketChannel: void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,A,java.nio.channels.CompletionHandler)>
<java.nio.channels.AsynchronousSocketChannel: void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,A,java.nio.channels.CompletionHandler)>
<java.nio.channels.AsynchronousSocketChannel: void read(java.nio.ByteBuffer,A,java.nio.channels.CompletionHandler)>
<java.nio.channels.AsynchronousSocketChannel: void <init>(java.nio.channels.spi.AsynchronousChannelProvider)>
<android.graphics.drawable.Drawable.ConstantState: void <init>()>
<android.graphics.drawable.Drawable.ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources,android.content.res.Resources.Theme)>
<android.graphics.drawable.Drawable.ConstantState: int getChangingConfigurations()>
<android.graphics.drawable.Drawable.ConstantState: boolean canApplyTheme()>
<android.graphics.drawable.Drawable.ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>
<android.graphics.drawable.Drawable.ConstantState: android.graphics.drawable.Drawable newDrawable()>
<javax.xml.validation.SchemaFactory: javax.xml.validation.Schema newSchema(javax.xml.transform.Source)>
<javax.xml.validation.SchemaFactory: void setProperty(java.lang.String,java.lang.Object)>
<javax.xml.validation.SchemaFactory: void setResourceResolver(org.w3c.dom.ls.LSResourceResolver)>
<javax.xml.validation.SchemaFactory: javax.xml.validation.Schema newSchema()>
<javax.xml.validation.SchemaFactory: org.xml.sax.ErrorHandler getErrorHandler()>
<javax.xml.validation.SchemaFactory: javax.xml.validation.SchemaFactory newInstance(java.lang.String,java.lang.String,java.lang.ClassLoader)>
<javax.xml.validation.SchemaFactory: org.w3c.dom.ls.LSResourceResolver getResourceResolver()>
<javax.xml.validation.SchemaFactory: boolean isSchemaLanguageSupported(java.lang.String)>
<javax.xml.validation.SchemaFactory: javax.xml.validation.SchemaFactory newInstance(java.lang.String)>
<javax.xml.validation.SchemaFactory: void <init>()>
<javax.xml.validation.SchemaFactory: java.lang.Object getProperty(java.lang.String)>
<javax.xml.validation.SchemaFactory: boolean getFeature(java.lang.String)>
<javax.xml.validation.SchemaFactory: void setErrorHandler(org.xml.sax.ErrorHandler)>
<javax.xml.validation.SchemaFactory: javax.xml.validation.Schema newSchema(java.io.File)>
<javax.xml.validation.SchemaFactory: javax.xml.validation.Schema newSchema(javax.xml.transform.Source[])>
<javax.xml.validation.SchemaFactory: void setFeature(java.lang.String,boolean)>
<javax.xml.validation.SchemaFactory: javax.xml.validation.Schema newSchema(java.net.URL)>
<java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption...)>
<java.nio.file.Files: java.nio.file.Path createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute...)>
<java.nio.file.Files: java.nio.file.FileStore getFileStore(java.nio.file.Path)>
<java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.nio.file.FileVisitor)>
<java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path)>
<java.nio.file.Files: java.util.stream.Stream walk(java.nio.file.Path,int,java.nio.file.FileVisitOption...)>
<java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)>
<java.nio.file.Files: java.io.BufferedReader newBufferedReader(java.nio.file.Path)>
<java.nio.file.Files: boolean isExecutable(java.nio.file.Path)>
<java.nio.file.Files: java.util.Map readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption...)>
<java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)>
<java.nio.file.Files: java.nio.file.Path createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)>
<java.nio.file.Files: java.nio.file.attribute.UserPrincipal getOwner(java.nio.file.Path,java.nio.file.LinkOption...)>
<java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)>
<java.nio.file.Files: java.io.BufferedWriter newBufferedWriter(java.nio.file.Path,java.nio.charset.Charset,java.nio.file.OpenOption...)>
<java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption...)>
<java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,Iterable,java.nio.charset.Charset,java.nio.file.OpenOption...)>
<java.nio.file.Files: boolean deleteIfExists(java.nio.file.Path)>
<java.nio.file.Files: java.util.stream.Stream list(java.nio.file.Path)>
<java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption...)>
<java.nio.file.Files: long copy(java.nio.file.Path,java.io.OutputStream)>
<java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption...)>
<java.nio.file.Files: java.nio.file.Path createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute...)>
<java.nio.file.Files: java.util.Set getPosixFilePermissions(java.nio.file.Path,java.nio.file.LinkOption...)>
<java.nio.file.Files: java.nio.file.Path createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute...)>
<java.nio.file.Files: java.lang.String probeContentType(java.nio.file.Path)>
<java.nio.file.Files: java.nio.file.Path setLastModifiedTime(java.nio.file.Path,java.nio.file.attribute.FileTime)>
<java.nio.file.Files: java.nio.file.Path createLink(java.nio.file.Path,java.nio.file.Path)>
<java.nio.file.Files: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute...)>
<java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream.Filter)>
<java.nio.file.Files: void delete(java.nio.file.Path)>
<java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.util.Set,int,java.nio.file.FileVisitor)>
<java.nio.file.Files: boolean isSameFile(java.nio.file.Path,java.nio.file.Path)>
<java.nio.file.Files: java.util.stream.Stream walk(java.nio.file.Path,java.nio.file.FileVisitOption...)>
<java.nio.file.Files: java.util.stream.Stream find(java.nio.file.Path,int,java.util.function.BiPredicate,java.nio.file.FileVisitOption...)>
<java.nio.file.Files: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.nio.file.OpenOption...)>
<java.nio.file.Files: java.nio.file.Path createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute...)>
<java.nio.file.Files: java.nio.file.Path readSymbolicLink(java.nio.file.Path)>
<java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute...)>
<java.nio.file.Files: boolean isSymbolicLink(java.nio.file.Path)>
<java.nio.file.Files: java.nio.file.Path setOwner(java.nio.file.Path,java.nio.file.attribute.UserPrincipal)>
<java.nio.file.Files: A readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption...)>
<java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,Iterable,java.nio.file.OpenOption...)>
<java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>
<java.nio.file.Files: V getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption...)>
<java.nio.file.Files: boolean isWritable(java.nio.file.Path)>
<java.nio.file.Files: boolean notExists(java.nio.file.Path,java.nio.file.LinkOption...)>
<java.nio.file.Files: java.util.List readAllLines(java.nio.file.Path,java.nio.charset.Charset)>
<java.nio.file.Files: java.lang.Object getAttribute(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption...)>
<java.nio.file.Files: java.nio.file.attribute.FileTime getLastModifiedTime(java.nio.file.Path,java.nio.file.LinkOption...)>
<java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,byte[],java.nio.file.OpenOption...)>
<java.nio.file.Files: java.nio.file.Path move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)>
<java.nio.file.Files: long size(java.nio.file.Path)>
<java.nio.file.Files: boolean isReadable(java.nio.file.Path)>
<java.nio.file.Files: java.io.BufferedReader newBufferedReader(java.nio.file.Path,java.nio.charset.Charset)>
<java.nio.file.Files: java.nio.file.Path setPosixFilePermissions(java.nio.file.Path,java.util.Set)>
<java.nio.file.Files: boolean isRegularFile(java.nio.file.Path,java.nio.file.LinkOption...)>
<java.nio.file.Files: boolean isHidden(java.nio.file.Path)>
<java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.lang.String)>
<java.nio.file.Files: java.util.List readAllLines(java.nio.file.Path)>
<java.nio.file.Files: java.util.stream.Stream lines(java.nio.file.Path)>
<java.nio.file.Files: java.io.BufferedWriter newBufferedWriter(java.nio.file.Path,java.nio.file.OpenOption...)>
<java.nio.file.Files: java.nio.file.Path setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption...)>
<java.nio.file.Files: long copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption...)>
<java.nio.file.Files: java.util.stream.Stream lines(java.nio.file.Path,java.nio.charset.Charset)>
<android.content.pm.PackageManager.DexModuleRegisterCallback: void onDexModuleRegistered(java.lang.String,boolean,java.lang.String)>
<android.content.pm.PackageManager.DexModuleRegisterCallback: void <init>()>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(T,long)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long accumulateAndGet(T,long,java.util.function.LongBinaryOperator)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: void <init>()>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(T,long,long)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndUpdate(T,java.util.function.LongUnaryOperator)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndSet(T,long)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean weakCompareAndSet(T,long,long)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(T)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long incrementAndGet(T)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: void lazySet(T,long)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: void set(T,long)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndAdd(T,long)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndAccumulate(T,long,java.util.function.LongBinaryOperator)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(T)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndDecrement(T)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long decrementAndGet(T)>
<java.util.concurrent.atomic.AtomicLongFieldUpdater: long updateAndGet(T,java.util.function.LongUnaryOperator)>
<android.util.Half: void <init>(@HalfFloat short)>
<android.util.Half: boolean isNaN()>
<android.util.Half: void <init>(float)>
<android.util.Half: float floatValue()>
<android.util.Half: short intBitsToHalf(int)>
<android.util.Half: short abs(@HalfFloatshort)>
<android.util.Half: boolean greater(@HalfFloatshort,@HalfFloatshort)>
<android.util.Half: long longValue()>
<android.util.Half: int intValue()>
<android.util.Half: short floor(@HalfFloatshort)>
<android.util.Half: java.lang.String toHexString(@HalfFloatshort)>
<android.util.Half: void <init>(double)>
<android.util.Half: java.lang.String toString(@HalfFloatshort)>
<android.util.Half: int getSignificand(@HalfFloatshort)>
<android.util.Half: boolean greaterEquals(@HalfFloatshort,@HalfFloatshort)>
<android.util.Half: boolean isNormalized(@HalfFloatshort)>
<android.util.Half: boolean less(@HalfFloatshort,@HalfFloatshort)>
<android.util.Half: int getSign(@HalfFloatshort)>
<android.util.Half: short trunc(@HalfFloatshort)>
<android.util.Half: short halfToShortBits(@HalfFloatshort)>
<android.util.Half: int compare(@HalfFloatshort,@HalfFloatshort)>
<android.util.Half: boolean isInfinite(@HalfFloatshort)>
<android.util.Half: android.util.Half valueOf(java.lang.String)>
<android.util.Half: boolean equals(@HalfFloatshort,@HalfFloatshort)>
<android.util.Half: void <init>(String)>
<android.util.Half: short max(@HalfFloatshort,@HalfFloatshort)>
<android.util.Half: boolean lessEquals(@HalfFloatshort,@HalfFloatshort)>
<android.util.Half: float toFloat(@HalfFloatshort)>
<android.util.Half: short ceil(@HalfFloatshort)>
<android.util.Half: int compareTo(android.util.Half)>
<android.util.Half: android.util.Half valueOf(@HalfFloatshort)>
<android.util.Half: int getExponent(@HalfFloatshort)>
<android.util.Half: int hashCode(@HalfFloatshort)>
<android.util.Half: short halfValue()>
<android.util.Half: int halfToIntBits(@HalfFloatshort)>
<android.util.Half: short parseHalf(java.lang.String)>
<android.util.Half: short toHalf(float)>
<android.util.Half: int halfToRawIntBits(@HalfFloatshort)>
<android.util.Half: short min(@HalfFloatshort,@HalfFloatshort)>
<android.util.Half: short round(@HalfFloatshort)>
<android.util.Half: android.util.Half valueOf(float)>
<android.util.Half: short copySign(@HalfFloatshort,@HalfFloatshort)>
<android.util.Half: double doubleValue()>
<android.util.Half: boolean isNaN(@HalfFloatshort)>
<java.lang.RuntimeException: void <init>(Throwable)>
<java.lang.RuntimeException: void <init>(String,Throwable)>
<java.lang.RuntimeException: void <init>(String,Throwable,boolean,boolean)>
<java.lang.RuntimeException: void <init>()>
<java.lang.RuntimeException: void <init>(String)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: int compareTo(java.time.chrono.ChronoLocalDateTime)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: int hashCode()>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: boolean isSupported(java.time.temporal.TemporalUnit)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.util.Comparator timeLineOrder()>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.ChronoLocalDateTime minus(java.time.temporal.TemporalAmount)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.ChronoLocalDateTime minus(long,java.time.temporal.TemporalUnit)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.ChronoLocalDateTime with(java.time.temporal.TemporalField,long)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: boolean isAfter(java.time.chrono.ChronoLocalDateTime)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: boolean isEqual(java.time.chrono.ChronoLocalDateTime)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.ChronoLocalDateTime plus(java.time.temporal.TemporalAmount)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: boolean isBefore(java.time.chrono.ChronoLocalDateTime)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.ChronoLocalDateTime plus(long,java.time.temporal.TemporalUnit)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.ChronoLocalDateTime with(java.time.temporal.TemporalAdjuster)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: D toLocalDate()>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: long toEpochSecond(java.time.ZoneOffset)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.lang.String format(java.time.format.DateTimeFormatter)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.ChronoZonedDateTime atZone(java.time.ZoneId)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: boolean equals(java.lang.Object)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.Chronology getChronology()>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.chrono.ChronoLocalDateTime from(java.time.temporal.TemporalAccessor)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.Instant toInstant(java.time.ZoneOffset)>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.time.LocalTime toLocalTime()>
<java.time.chrono.ChronoLocalDateTime extends java.time.temporal.Temporal java.lang.Comparable java.time.temporal.TemporalAdjuster: java.lang.String toString()>
<android.service.carrier.CarrierMessagingClientService: void <init>()>
<android.service.carrier.CarrierMessagingClientService: android.os.IBinder onBind(android.content.Intent)>
<android.media.tv.TvView.TvInputCallback: void onContentAllowed(java.lang.String)>
<android.media.tv.TvView.TvInputCallback: void onTracksChanged(java.lang.String,java.util.List)>
<android.media.tv.TvView.TvInputCallback: void onVideoUnavailable(java.lang.String,int)>
<android.media.tv.TvView.TvInputCallback: void <init>()>
<android.media.tv.TvView.TvInputCallback: void onConnectionFailed(java.lang.String)>
<android.media.tv.TvView.TvInputCallback: void onDisconnected(java.lang.String)>
<android.media.tv.TvView.TvInputCallback: void onChannelRetuned(java.lang.String,android.net.Uri)>
<android.media.tv.TvView.TvInputCallback: void onVideoSizeChanged(java.lang.String,int,int)>
<android.media.tv.TvView.TvInputCallback: void onEvent(java.lang.String,java.lang.String,android.os.Bundle)>
<android.media.tv.TvView.TvInputCallback: void onTimeShiftStatusChanged(java.lang.String,int)>
<android.media.tv.TvView.TvInputCallback: void onTrackSelected(java.lang.String,int,java.lang.String)>
<android.media.tv.TvView.TvInputCallback: void onVideoAvailable(java.lang.String)>
<android.media.tv.TvView.TvInputCallback: void onContentBlocked(java.lang.String,android.media.tv.TvContentRating)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setPositiveButton(@StringResint,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog create()>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setInverseBackgroundForced(boolean)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setItems(@ArrayResint,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setIcon(@DrawableResint)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setCursor(android.database.Cursor,android.content.DialogInterface.OnClickListener,java.lang.String)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setSingleChoiceItems(CharSequence[],int,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setNeutralButton(@StringResint,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setMessage(CharSequence)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setMessage(@StringResint)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setNeutralButton(CharSequence,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setSingleChoiceItems(android.database.Cursor,int,java.lang.String,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setTitle(CharSequence)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setMultiChoiceItems(android.database.Cursor,java.lang.String,java.lang.String,android.content.DialogInterface.OnMultiChoiceClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setIconAttribute(@AttrResint)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setMultiChoiceItems(@ArrayResint,boolean[],android.content.DialogInterface.OnMultiChoiceClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setView(int)>
<android.app.AlertDialog.Builder: void <init>(android.content.Context,int)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setTitle(@StringResint)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setIcon(android.graphics.drawable.Drawable)>
<android.app.AlertDialog.Builder: android.app.AlertDialog show()>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setOnKeyListener(android.content.DialogInterface.OnKeyListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setMultiChoiceItems(CharSequence[],boolean[],android.content.DialogInterface.OnMultiChoiceClickListener)>
<android.app.AlertDialog.Builder: void <init>(android.content.Context)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setView(android.view.View)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setCancelable(boolean)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setOnDismissListener(android.content.DialogInterface.OnDismissListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setPositiveButton(CharSequence,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setNegativeButton(@StringResint,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setNegativeButton(CharSequence,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setOnCancelListener(android.content.DialogInterface.OnCancelListener)>
<android.app.AlertDialog.Builder: android.content.Context getContext()>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setCustomTitle(android.view.View)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setSingleChoiceItems(@ArrayResint,int,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog.Builder: android.app.AlertDialog.Builder setItems(CharSequence[],android.content.DialogInterface.OnClickListener)>
<android.nfc.tech.MifareUltralight: android.nfc.tech.MifareUltralight get(android.nfc.Tag)>
<android.nfc.tech.MifareUltralight: int getType()>
<android.nfc.tech.MifareUltralight: boolean isConnected()>
<android.nfc.tech.MifareUltralight: int getMaxTransceiveLength()>
<android.nfc.tech.MifareUltralight: byte[] readPages(int)>
<android.nfc.tech.MifareUltralight: void close()>
<android.nfc.tech.MifareUltralight: void connect()>
<android.nfc.tech.MifareUltralight: int getTimeout()>
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[])>
<android.nfc.tech.MifareUltralight: void writePage(int,byte[])>
<android.nfc.tech.MifareUltralight: android.nfc.Tag getTag()>
<android.nfc.tech.MifareUltralight: void setTimeout(int)>
<android.text.GetChars extends java.lang.CharSequence: void getChars(int,int,char[],int)>
<java.util.logging.Formatter: void <init>()>
<java.util.logging.Formatter: java.lang.String getHead(java.util.logging.Handler)>
<java.util.logging.Formatter: java.lang.String format(java.util.logging.LogRecord)>
<java.util.logging.Formatter: java.lang.String getTail(java.util.logging.Handler)>
<java.util.logging.Formatter: java.lang.String formatMessage(java.util.logging.LogRecord)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setBlob(java.lang.String,java.sql.Blob)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: byte getByte(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.lang.String getNString(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setNClob(java.lang.String,java.sql.NClob)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.NClob getNClob(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.SQLXML getSQLXML(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setCharacterStream(java.lang.String,java.io.Reader,int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setNull(java.lang.String,int,java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Date getDate(java.lang.String,java.util.Calendar)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void registerOutParameter(java.lang.String,int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setAsciiStream(java.lang.String,java.io.InputStream,long)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setNull(java.lang.String,int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setInt(java.lang.String,int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setNClob(java.lang.String,java.io.Reader)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Clob getClob(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: short getShort(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: double getDouble(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setBoolean(java.lang.String,boolean)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setShort(java.lang.String,short)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setDate(java.lang.String,java.sql.Date)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setLong(java.lang.String,long)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Ref getRef(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setURL(java.lang.String,java.net.URL)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setAsciiStream(java.lang.String,java.io.InputStream,int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Time getTime(java.lang.String,java.util.Calendar)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Date getDate(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.math.BigDecimal getBigDecimal(int,int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Time getTime(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: int getInt(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setDouble(java.lang.String,double)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: boolean getBoolean(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setBytes(java.lang.String,byte[])>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setNString(java.lang.String,java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setBigDecimal(java.lang.String,java.math.BigDecimal)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void registerOutParameter(int,int,int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setTime(java.lang.String,java.sql.Time)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Timestamp getTimestamp(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Ref getRef(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setBinaryStream(java.lang.String,java.io.InputStream,long)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setSQLXML(java.lang.String,java.sql.SQLXML)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.RowId getRowId(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setObject(java.lang.String,java.lang.Object,int,int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.io.Reader getNCharacterStream(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void registerOutParameter(java.lang.String,int,java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setBinaryStream(java.lang.String,java.io.InputStream)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setBlob(java.lang.String,java.io.InputStream,long)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.lang.Object getObject(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setFloat(java.lang.String,float)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Date getDate(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: byte[] getBytes(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: byte[] getBytes(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: double getDouble(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.lang.Object getObject(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setClob(java.lang.String,java.io.Reader)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Blob getBlob(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setNClob(java.lang.String,java.io.Reader,long)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: long getLong(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setObject(java.lang.String,java.lang.Object)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setTimestamp(java.lang.String,java.sql.Timestamp)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Blob getBlob(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: short getShort(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.math.BigDecimal getBigDecimal(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.RowId getRowId(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setNCharacterStream(java.lang.String,java.io.Reader)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.io.Reader getNCharacterStream(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.lang.Object getObject(int,java.util.Map)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.lang.String getNString(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Date getDate(int,java.util.Calendar)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.math.BigDecimal getBigDecimal(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: boolean getBoolean(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.lang.Object getObject(java.lang.String,java.util.Map)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.net.URL getURL(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setAsciiStream(java.lang.String,java.io.InputStream)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.io.Reader getCharacterStream(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: boolean wasNull()>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.net.URL getURL(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setRowId(java.lang.String,java.sql.RowId)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setObject(java.lang.String,java.lang.Object,int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: float getFloat(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setBinaryStream(java.lang.String,java.io.InputStream,int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setClob(java.lang.String,java.sql.Clob)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setTime(java.lang.String,java.sql.Time,java.util.Calendar)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.SQLXML getSQLXML(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setClob(java.lang.String,java.io.Reader,long)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.lang.String getString(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setCharacterStream(java.lang.String,java.io.Reader)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Timestamp getTimestamp(int,java.util.Calendar)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Time getTime(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setDate(java.lang.String,java.sql.Date,java.util.Calendar)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: float getFloat(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: int getInt(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setNCharacterStream(java.lang.String,java.io.Reader,long)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.io.Reader getCharacterStream(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: byte getByte(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setCharacterStream(java.lang.String,java.io.Reader,long)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void registerOutParameter(java.lang.String,int,int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.lang.String getString(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void registerOutParameter(int,int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Clob getClob(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setString(java.lang.String,java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.NClob getNClob(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Time getTime(int,java.util.Calendar)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setByte(java.lang.String,byte)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: long getLong(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Timestamp getTimestamp(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void setBlob(java.lang.String,java.io.InputStream)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Array getArray(java.lang.String)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: java.sql.Array getArray(int)>
<java.sql.CallableStatement extends java.sql.PreparedStatement: void registerOutParameter(int,int,java.lang.String)>
<android.media.MediaDrm.OnEventListener: void onEvent(android.media.MediaDrm,byte[],int,int,byte[])>
<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate date(java.time.chrono.Era,int,int,int)>
<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>
<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate date(java.time.temporal.TemporalAccessor)>
<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>
<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate dateYearDay(int,int)>
<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>
<java.time.chrono.ThaiBuddhistChronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>
<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate dateEpochDay(long)>
<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate dateNow(java.time.ZoneId)>
<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate date(int,int,int)>
<java.time.chrono.ThaiBuddhistChronology: java.lang.String getCalendarType()>
<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>
<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate dateNow(java.time.Clock)>
<java.time.chrono.ThaiBuddhistChronology: int prolepticYear(java.time.chrono.Era,int)>
<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate dateNow()>
<java.time.chrono.ThaiBuddhistChronology: java.lang.String getId()>
<java.time.chrono.ThaiBuddhistChronology: java.util.List eras()>
<java.time.chrono.ThaiBuddhistChronology: boolean isLeapYear(long)>
<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate dateYearDay(java.time.chrono.Era,int,int)>
<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistEra eraOf(int)>
<javax.crypto.NullCipher: void <init>()>
<android.widget.ShareActionProvider: void setOnShareTargetSelectedListener(android.widget.ShareActionProvider.OnShareTargetSelectedListener)>
<android.widget.ShareActionProvider: android.view.View onCreateActionView()>
<android.widget.ShareActionProvider: void setShareIntent(android.content.Intent)>
<android.widget.ShareActionProvider: void setShareHistoryFileName(java.lang.String)>
<android.widget.ShareActionProvider: void <init>(android.content.Context)>
<android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback: void onInstallUpdateError(int,java.lang.String)>
<android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback: void <init>()>
<java.text.Annotation: java.lang.Object getValue()>
<java.text.Annotation: void <init>(Object)>
<java.lang.Math: long min(long,long)>
<java.lang.Math: double atan(double)>
<java.lang.Math: double copySign(double,double)>
<java.lang.Math: double exp(double)>
<java.lang.Math: double hypot(double,double)>
<java.lang.Math: float abs(float)>
<java.lang.Math: double log10(double)>
<java.lang.Math: int min(int,int)>
<java.lang.Math: float signum(float)>
<java.lang.Math: double ulp(double)>
<java.lang.Math: long incrementExact(long)>
<java.lang.Math: long addExact(long,long)>
<java.lang.Math: double cosh(double)>
<java.lang.Math: float nextDown(float)>
<java.lang.Math: double ceil(double)>
<java.lang.Math: double min(double,double)>
<java.lang.Math: int getExponent(float)>
<java.lang.Math: float nextUp(float)>
<java.lang.Math: double toRadians(double)>
<java.lang.Math: double floor(double)>
<java.lang.Math: int multiplyExact(int,int)>
<java.lang.Math: int max(int,int)>
<java.lang.Math: double sin(double)>
<java.lang.Math: double log(double)>
<java.lang.Math: double log1p(double)>
<java.lang.Math: float nextAfter(float,double)>
<java.lang.Math: int abs(int)>
<java.lang.Math: int floorDiv(int,int)>
<java.lang.Math: double cbrt(double)>
<java.lang.Math: double nextDown(double)>
<java.lang.Math: double scalb(double,int)>
<java.lang.Math: long subtractExact(long,long)>
<java.lang.Math: double pow(double,double)>
<java.lang.Math: float copySign(float,float)>
<java.lang.Math: double expm1(double)>
<java.lang.Math: int incrementExact(int)>
<java.lang.Math: int round(float)>
<java.lang.Math: int decrementExact(int)>
<java.lang.Math: double nextUp(double)>
<java.lang.Math: double random()>
<java.lang.Math: long decrementExact(long)>
<java.lang.Math: int toIntExact(long)>
<java.lang.Math: double acos(double)>
<java.lang.Math: double asin(double)>
<java.lang.Math: float max(float,float)>
<java.lang.Math: int getExponent(double)>
<java.lang.Math: int floorMod(int,int)>
<java.lang.Math: int addExact(int,int)>
<java.lang.Math: float min(float,float)>
<java.lang.Math: double rint(double)>
<java.lang.Math: long floorMod(long,long)>
<java.lang.Math: double sinh(double)>
<java.lang.Math: double IEEEremainder(double,double)>
<java.lang.Math: double max(double,double)>
<java.lang.Math: double cos(double)>
<java.lang.Math: long max(long,long)>
<java.lang.Math: float ulp(float)>
<java.lang.Math: double nextAfter(double,double)>
<java.lang.Math: double tan(double)>
<java.lang.Math: int subtractExact(int,int)>
<java.lang.Math: double atan2(double,double)>
<java.lang.Math: long multiplyExact(long,long)>
<java.lang.Math: long negateExact(long)>
<java.lang.Math: double signum(double)>
<java.lang.Math: double abs(double)>
<java.lang.Math: double tanh(double)>
<java.lang.Math: long abs(long)>
<java.lang.Math: float scalb(float,int)>
<java.lang.Math: long round(double)>
<java.lang.Math: long floorDiv(long,long)>
<java.lang.Math: double toDegrees(double)>
<java.lang.Math: int negateExact(int)>
<java.lang.Math: double sqrt(double)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: void <init>()>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int addStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.DownloadStatusListener)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int initialize(int,android.telephony.mbms.MbmsDownloadSessionCallback)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int addProgressListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.DownloadProgressListener)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int requestDownloadState(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int requestUpdateFileServices(int,java.util.List)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int resetDownloadKnowledge(android.telephony.mbms.DownloadRequest)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: void dispose(int)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int removeStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.DownloadStatusListener)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int download(android.telephony.mbms.DownloadRequest)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: void onAppCallbackDied(int,int)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int removeProgressListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.DownloadProgressListener)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: android.os.IBinder asBinder()>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int cancelDownload(android.telephony.mbms.DownloadRequest)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: java.util.List listPendingDownloads(int)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int setTempFileRootDirectory(int,java.lang.String)>
<android.graphics.Matrix: boolean preScale(float,float)>
<android.graphics.Matrix: void setRotate(float)>
<android.graphics.Matrix: void mapPoints(float[])>
<android.graphics.Matrix: void setSinCos(float,float)>
<android.graphics.Matrix: void <init>()>
<android.graphics.Matrix: void set(android.graphics.Matrix)>
<android.graphics.Matrix: boolean preSkew(float,float)>
<android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)>
<android.graphics.Matrix: void setRotate(float,float,float)>
<android.graphics.Matrix: void setSinCos(float,float,float,float)>
<android.graphics.Matrix: boolean isAffine()>
<android.graphics.Matrix: void mapVectors(float[])>
<android.graphics.Matrix: void setScale(float,float)>
<android.graphics.Matrix: void setSkew(float,float)>
<android.graphics.Matrix: void setTranslate(float,float)>
<android.graphics.Matrix: boolean invert(android.graphics.Matrix)>
<android.graphics.Matrix: void mapPoints(float[],float[])>
<android.graphics.Matrix: void reset()>
<android.graphics.Matrix: float mapRadius(float)>
<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>
<android.graphics.Matrix: void mapVectors(float[],float[])>
<android.graphics.Matrix: boolean rectStaysRect()>
<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix.ScaleToFit)>
<android.graphics.Matrix: void setSkew(float,float,float,float)>
<android.graphics.Matrix: boolean postRotate(float)>
<android.graphics.Matrix: boolean preTranslate(float,float)>
<android.graphics.Matrix: boolean preSkew(float,float,float,float)>
<android.graphics.Matrix: boolean postSkew(float,float)>
<android.graphics.Matrix: boolean preScale(float,float,float,float)>
<android.graphics.Matrix: boolean postScale(float,float,float,float)>
<android.graphics.Matrix: void mapPoints(float[],int,float[],int,int)>
<android.graphics.Matrix: void <init>(android.graphics.Matrix)>
<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)>
<android.graphics.Matrix: boolean postRotate(float,float,float)>
<android.graphics.Matrix: boolean postSkew(float,float,float,float)>
<android.graphics.Matrix: boolean preRotate(float)>
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>
<android.graphics.Matrix: void getValues(float[])>
<android.graphics.Matrix: boolean preRotate(float,float,float)>
<android.graphics.Matrix: boolean postScale(float,float)>
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)>
<android.graphics.Matrix: boolean postTranslate(float,float)>
<android.graphics.Matrix: void setScale(float,float,float,float)>
<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)>
<android.graphics.Matrix: boolean isIdentity()>
<android.graphics.Matrix: void setValues(float[])>
<android.graphics.Matrix: void mapVectors(float[],int,float[],int,int)>
<android.graphics.Matrix: java.lang.String toShortString()>
<javax.net.ssl.HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.time.chrono.ChronoZonedDateTime from(java.time.temporal.TemporalAccessor)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.time.chrono.ChronoZonedDateTime plus(java.time.temporal.TemporalAmount)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.lang.String toString()>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: D toLocalDate()>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.lang.String format(java.time.format.DateTimeFormatter)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.time.chrono.ChronoZonedDateTime minus(java.time.temporal.TemporalAmount)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: boolean isSupported(java.time.temporal.TemporalUnit)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.time.LocalTime toLocalTime()>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.time.chrono.ChronoZonedDateTime withZoneSameLocal(java.time.ZoneId)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: long toEpochSecond()>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.time.Instant toInstant()>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.time.chrono.ChronoZonedDateTime plus(long,java.time.temporal.TemporalUnit)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.time.chrono.ChronoLocalDateTime toLocalDateTime()>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: boolean isAfter(java.time.chrono.ChronoZonedDateTime)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.time.chrono.ChronoZonedDateTime with(java.time.temporal.TemporalField,long)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.time.chrono.ChronoZonedDateTime minus(long,java.time.temporal.TemporalUnit)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.time.chrono.Chronology getChronology()>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: boolean equals(java.lang.Object)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.time.chrono.ChronoZonedDateTime withLaterOffsetAtOverlap()>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: int compareTo(java.time.chrono.ChronoZonedDateTime)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.time.ZoneId getZone()>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: boolean isEqual(java.time.chrono.ChronoZonedDateTime)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.time.chrono.ChronoZonedDateTime with(java.time.temporal.TemporalAdjuster)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: long getLong(java.time.temporal.TemporalField)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.util.Comparator timeLineOrder()>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.time.chrono.ChronoZonedDateTime withZoneSameInstant(java.time.ZoneId)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.time.ZoneOffset getOffset()>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: java.time.chrono.ChronoZonedDateTime withEarlierOffsetAtOverlap()>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: boolean isBefore(java.time.chrono.ChronoZonedDateTime)>
<java.time.chrono.ChronoZonedDateTime extends java.time.temporal.Temporal java.lang.Comparable: int hashCode()>
<java.lang.ref.PhantomReference: void <init>(T,java.lang.ref.ReferenceQueue)>
<android.R.menu: void <init>()>
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder setVariant(java.lang.String)>
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder setLocale(android.icu.util.ULocale)>
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder clearExtensions()>
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder setRegion(java.lang.String)>
<android.icu.util.ULocale.Builder: android.icu.util.ULocale build()>
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder setLanguage(java.lang.String)>
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder setScript(java.lang.String)>
<android.icu.util.ULocale.Builder: void <init>()>
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder clear()>
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder addUnicodeLocaleAttribute(java.lang.String)>
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder setExtension(char,java.lang.String)>
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder removeUnicodeLocaleAttribute(java.lang.String)>
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder setLanguageTag(java.lang.String)>
<android.icu.util.ULocale.Builder: android.icu.util.ULocale.Builder setUnicodeLocaleKeyword(java.lang.String,java.lang.String)>
<javax.net.ssl.TrustManagerFactory: void <init>(javax.net.ssl.TrustManagerFactorySpi,java.security.Provider,String)>
<javax.net.ssl.TrustManagerFactory: java.lang.String getAlgorithm()>
<javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>
<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>
<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String,java.lang.String)>
<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>
<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>
<javax.net.ssl.TrustManagerFactory: java.security.Provider getProvider()>
<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String,java.security.Provider)>
<javax.net.ssl.TrustManagerFactory: void init(javax.net.ssl.ManagerFactoryParameters)>
<android.app.StatusBarManager.DisableInfo: boolean isSearchDisabled()>
<android.app.StatusBarManager.DisableInfo: boolean isStatusBarExpansionDisabled()>
<android.app.StatusBarManager.DisableInfo: boolean areAllComponentsEnabled()>
<android.app.StatusBarManager.DisableInfo: boolean isNotificationPeekingDisabled()>
<android.app.StatusBarManager.DisableInfo: boolean isRecentsDisabled()>
<android.app.StatusBarManager.DisableInfo: boolean isNavigateToHomeDisabled()>
<android.app.job.JobScheduler: void cancel(int)>
<android.app.job.JobScheduler: int schedule(android.app.job.JobInfo)>
<android.app.job.JobScheduler: void <init>()>
<android.app.job.JobScheduler: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
<android.app.job.JobScheduler: java.util.List getAllPendingJobs()>
<android.app.job.JobScheduler: android.app.job.JobInfo getPendingJob(int)>
<android.app.job.JobScheduler: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
<android.app.job.JobScheduler: void cancelAll()>
<android.text.TextUtils.EllipsizeCallback: void ellipsized(int,int)>
<android.accessibilityservice.GestureDescription.Builder: android.accessibilityservice.GestureDescription build()>
<android.accessibilityservice.GestureDescription.Builder: void <init>()>
<android.accessibilityservice.GestureDescription.Builder: android.accessibilityservice.GestureDescription.Builder addStroke(android.accessibilityservice.GestureDescription.StrokeDescription)>
<java.io.FileNotFoundException: void <init>(String)>
<java.io.FileNotFoundException: void <init>()>
<javax.security.cert.CertificateExpiredException: void <init>(String)>
<javax.security.cert.CertificateExpiredException: void <init>()>
<android.media.AudioRouting.OnRoutingChangedListener: void onRoutingChanged(android.media.AudioRouting)>
<android.security.keystore.recovery.SessionExpiredException: void <init>(String)>
<android.media.MediaCodec: void stop()>
<android.media.MediaCodec: void setOnFrameRenderedListener(android.media.MediaCodec.OnFrameRenderedListener,android.os.Handler)>
<android.media.MediaCodec: void setOutputSurface(android.view.Surface)>
<android.media.MediaCodec: void setCallback(android.media.MediaCodec.Callback)>
<android.media.MediaCodec: void release()>
<android.media.MediaCodec: void finalize()>
<android.media.MediaCodec: android.media.MediaFormat getInputFormat()>
<android.media.MediaCodec: android.view.Surface createPersistentInputSurface()>
<android.media.MediaCodec: android.media.Image getInputImage(int)>
<android.media.MediaCodec: int dequeueInputBuffer(long)>
<android.media.MediaCodec: void setInputSurface(android.view.Surface)>
<android.media.MediaCodec: void setCallback(android.media.MediaCodec.Callback,android.os.Handler)>
<android.media.MediaCodec: java.nio.ByteBuffer[] getOutputBuffers()>
<android.media.MediaCodec: void queueInputBuffer(int,int,int,long,int)>
<android.media.MediaCodec: void reset()>
<android.media.MediaCodec: android.media.MediaFormat getOutputFormat()>
<android.media.MediaCodec: android.media.MediaFormat getOutputFormat(int)>
<android.media.MediaCodec: java.lang.String getCanonicalName()>
<android.media.MediaCodec: android.view.Surface createInputSurface()>
<android.media.MediaCodec: void flush()>
<android.media.MediaCodec: void setParameters(android.os.Bundle)>
<android.media.MediaCodec: void setAudioPresentation(android.media.AudioPresentation)>
<android.media.MediaCodec: android.media.MediaCodec createByCodecName(java.lang.String)>
<android.media.MediaCodec: java.nio.ByteBuffer getInputBuffer(int)>
<android.media.MediaCodec: java.nio.ByteBuffer[] getInputBuffers()>
<android.media.MediaCodec: void setVideoScalingMode(int)>
<android.media.MediaCodec: void releaseOutputBuffer(int,boolean)>
<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)>
<android.media.MediaCodec: android.media.MediaCodec createEncoderByType(java.lang.String)>
<android.media.MediaCodec: void releaseOutputBuffer(int,long)>
<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,int,android.media.MediaDescrambler)>
<android.media.MediaCodec: java.nio.ByteBuffer getOutputBuffer(int)>
<android.media.MediaCodec: android.media.MediaCodec createDecoderByType(java.lang.String)>
<android.media.MediaCodec: void queueSecureInputBuffer(int,int,android.media.MediaCodec.CryptoInfo,long,int)>
<android.media.MediaCodec: android.os.PersistableBundle getMetrics()>
<android.media.MediaCodec: int dequeueOutputBuffer(android.media.MediaCodec.BufferInfo,long)>
<android.media.MediaCodec: android.media.MediaCodecInfo getCodecInfo()>
<android.media.MediaCodec: void signalEndOfInputStream()>
<android.media.MediaCodec: void start()>
<android.media.MediaCodec: java.lang.String getName()>
<android.media.MediaCodec: android.media.Image getOutputImage(int)>
<android.app.VoiceInteractor.AbortVoiceRequest: void onAbortResult(android.os.Bundle)>
<android.app.VoiceInteractor.AbortVoiceRequest: void <init>(android.app.VoiceInteractor.Prompt,android.os.Bundle)>
<java.io.Writer: java.io.Writer append(CharSequence,int,int)>
<java.io.Writer: void write(char[])>
<java.io.Writer: void <init>()>
<java.io.Writer: void <init>(Object)>
<java.io.Writer: java.io.Writer append(char)>
<java.io.Writer: void write(int)>
<java.io.Writer: java.io.Writer append(CharSequence)>
<java.io.Writer: void write(java.lang.String,int,int)>
<java.io.Writer: void write(char[],int,int)>
<java.io.Writer: void write(java.lang.String)>
<android.accounts.AccountAuthenticatorActivity: void <init>()>
<android.accounts.AccountAuthenticatorActivity: void setAccountAuthenticatorResult(android.os.Bundle)>
<android.widget.TimePicker: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.TimePicker: boolean is24HourView()>
<android.widget.TimePicker: android.view.View getMinuteView()>
<android.widget.TimePicker: void <init>(android.content.Context)>
<android.widget.TimePicker: void setCurrentHour(java.lang.Integer)>
<android.widget.TimePicker: void setOnTimeChangedListener(android.widget.TimePicker.OnTimeChangedListener)>
<android.widget.TimePicker: void setMinute(int)>
<android.widget.TimePicker: android.view.View getHourView()>
<android.widget.TimePicker: java.lang.Integer getCurrentMinute()>
<android.widget.TimePicker: int getHour()>
<android.widget.TimePicker: int getMode()>
<android.widget.TimePicker: boolean validateInput()>
<android.widget.TimePicker: void setCurrentMinute(java.lang.Integer)>
<android.widget.TimePicker: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TimePicker: android.view.View getPmView()>
<android.widget.TimePicker: android.view.View getAmView()>
<android.widget.TimePicker: void setIs24HourView(java.lang.Boolean)>
<android.widget.TimePicker: void setHour(int)>
<android.widget.TimePicker: int getMinute()>
<android.widget.TimePicker: java.lang.Integer getCurrentHour()>
<android.widget.TimePicker: void <init>(android.content.Context,android.util.AttributeSet,int)>
<java.util.logging.Handler: java.util.logging.Formatter getFormatter()>
<java.util.logging.Handler: void setErrorManager(java.util.logging.ErrorManager)>
<java.util.logging.Handler: void close()>
<java.util.logging.Handler: void setFormatter(java.util.logging.Formatter)>
<java.util.logging.Handler: java.lang.String getEncoding()>
<java.util.logging.Handler: void <init>()>
<java.util.logging.Handler: java.util.logging.Filter getFilter()>
<java.util.logging.Handler: void setEncoding(java.lang.String)>
<java.util.logging.Handler: java.util.logging.Level getLevel()>
<java.util.logging.Handler: boolean isLoggable(java.util.logging.LogRecord)>
<java.util.logging.Handler: void flush()>
<java.util.logging.Handler: java.util.logging.ErrorManager getErrorManager()>
<java.util.logging.Handler: void setLevel(java.util.logging.Level)>
<java.util.logging.Handler: void setFilter(java.util.logging.Filter)>
<java.util.logging.Handler: void publish(java.util.logging.LogRecord)>
<java.util.logging.Handler: void reportError(java.lang.String,Exception,int)>
<android.net.metrics.ValidationProbeEvent: java.lang.String getProbeName(int)>
<java.util.Formattable: void formatTo(java.util.Formatter,int,int,int)>
<android.os.UpdateEngineCallback: void <init>()>
<android.os.UpdateEngineCallback: void onPayloadApplicationComplete(int)>
<android.os.UpdateEngineCallback: void onStatusUpdate(int,float)>
<android.app.ActivityManager.RunningTaskInfo: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager.RunningTaskInfo: void <init>()>
<android.app.ActivityManager.RunningTaskInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ActivityManager.RunningTaskInfo: int describeContents()>
<java.security.Provider.Service: java.lang.Object newInstance(java.lang.Object)>
<java.security.Provider.Service: java.lang.String getType()>
<java.security.Provider.Service: java.lang.String getAlgorithm()>
<java.security.Provider.Service: java.lang.String getClassName()>
<java.security.Provider.Service: java.lang.String getAttribute(java.lang.String)>
<java.security.Provider.Service: boolean supportsParameter(java.lang.Object)>
<java.security.Provider.Service: java.security.Provider getProvider()>
<java.security.Provider.Service: void <init>(java.security.Provider,String,String,String,java.util.List,java.util.Map)>
<android.widget.Filter: void publishResults(CharSequence,android.widget.Filter.FilterResults)>
<android.widget.Filter: void <init>()>
<android.widget.Filter: CharSequence convertResultToString(java.lang.Object)>
<android.widget.Filter: void filter(CharSequence,android.widget.Filter.FilterListener)>
<android.widget.Filter: android.widget.Filter.FilterResults performFiltering(CharSequence)>
<android.widget.Filter: void filter(CharSequence)>
<java.security.cert.CertPathBuilderSpi: java.security.cert.CertPathBuilderResult engineBuild(java.security.cert.CertPathParameters)>
<java.security.cert.CertPathBuilderSpi: void <init>()>
<java.security.cert.CertPathBuilderSpi: java.security.cert.CertPathChecker engineGetRevocationChecker()>
<android.content.Intent.ShortcutIconResource: int describeContents()>
<android.content.Intent.ShortcutIconResource: void <init>()>
<android.content.Intent.ShortcutIconResource: android.content.Intent.ShortcutIconResource fromContext(android.content.Context,@AnyResint)>
<android.content.Intent.ShortcutIconResource: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.Validators: android.service.autofill.Validator not(android.service.autofill.Validator)>
<android.service.autofill.Validators: android.service.autofill.Validator or(android.service.autofill.Validator...)>
<android.service.autofill.Validators: android.service.autofill.Validator and(android.service.autofill.Validator...)>
<android.graphics.PixelFormat: void getPixelFormatInfo(int,android.graphics.PixelFormat)>
<android.graphics.PixelFormat: boolean formatHasAlpha(int)>
<android.graphics.PixelFormat: void <init>()>
<android.media.MediaMetadataRetriever.BitmapParams: android.graphics.Bitmap.Config getPreferredConfig()>
<android.media.MediaMetadataRetriever.BitmapParams: android.graphics.Bitmap.Config getActualConfig()>
<android.media.MediaMetadataRetriever.BitmapParams: void setPreferredConfig(android.graphics.Bitmap.Config)>
<android.media.MediaMetadataRetriever.BitmapParams: void <init>()>
<android.graphics.HardwareRenderer.FrameRenderRequest: android.graphics.HardwareRenderer.FrameRenderRequest setWaitForPresent(boolean)>
<android.graphics.HardwareRenderer.FrameRenderRequest: android.graphics.HardwareRenderer.FrameRenderRequest setVsyncTime(long)>
<android.graphics.HardwareRenderer.FrameRenderRequest: android.graphics.HardwareRenderer.FrameRenderRequest setFrameCommitCallback(java.util.concurrent.Executor,Runnable)>
<android.graphics.HardwareRenderer.FrameRenderRequest: int syncAndDraw()>
<javax.xml.transform.sax.TransformerHandler extends org.xml.sax.ContentHandler org.xml.sax.DTDHandler org.xml.sax.ext.LexicalHandler: void setSystemId(java.lang.String)>
<javax.xml.transform.sax.TransformerHandler extends org.xml.sax.ContentHandler org.xml.sax.DTDHandler org.xml.sax.ext.LexicalHandler: java.lang.String getSystemId()>
<javax.xml.transform.sax.TransformerHandler extends org.xml.sax.ContentHandler org.xml.sax.DTDHandler org.xml.sax.ext.LexicalHandler: javax.xml.transform.Transformer getTransformer()>
<javax.xml.transform.sax.TransformerHandler extends org.xml.sax.ContentHandler org.xml.sax.DTDHandler org.xml.sax.ext.LexicalHandler: void setResult(javax.xml.transform.Result)>
<android.content.pm.InstantAppResolveInfo.InstantAppDigest: void <init>(String)>
<android.content.pm.InstantAppResolveInfo.InstantAppDigest: int describeContents()>
<android.content.pm.InstantAppResolveInfo.InstantAppDigest: byte[][] getDigestBytes()>
<android.content.pm.InstantAppResolveInfo.InstantAppDigest: int[] getDigestPrefix()>
<android.content.pm.InstantAppResolveInfo.InstantAppDigest: void writeToParcel(android.os.Parcel,int)>
<android.provider.Telephony.ServiceStateTable: android.net.Uri getUriForSubscriptionIdAndField(int,java.lang.String)>
<android.provider.Telephony.ServiceStateTable: android.net.Uri getUriForSubscriptionId(int)>
<android.drm.DrmManagerClient: int getDrmObjectType(java.lang.String,java.lang.String)>
<android.drm.DrmManagerClient: int openConvertSession(java.lang.String)>
<android.drm.DrmManagerClient: int removeAllRights()>
<android.drm.DrmManagerClient: android.drm.DrmConvertedStatus closeConvertSession(int)>
<android.drm.DrmManagerClient: int removeRights(android.net.Uri)>
<android.drm.DrmManagerClient: int acquireRights(android.drm.DrmInfoRequest)>
<android.drm.DrmManagerClient: void close()>
<android.drm.DrmManagerClient: android.drm.DrmConvertedStatus convertData(int,byte[])>
<android.drm.DrmManagerClient: void setOnErrorListener(android.drm.DrmManagerClient.OnErrorListener)>
<android.drm.DrmManagerClient: void setOnEventListener(android.drm.DrmManagerClient.OnEventListener)>
<android.drm.DrmManagerClient: int processDrmInfo(android.drm.DrmInfo)>
<android.drm.DrmManagerClient: java.lang.String[] getAvailableDrmEngines()>
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(android.net.Uri,int)>
<android.drm.DrmManagerClient: boolean canHandle(java.lang.String,java.lang.String)>
<android.drm.DrmManagerClient: int removeRights(java.lang.String)>
<android.drm.DrmManagerClient: java.lang.String getOriginalMimeType(java.lang.String)>
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(java.lang.String,int)>
<android.drm.DrmManagerClient: void release()>
<android.drm.DrmManagerClient: android.content.ContentValues getMetadata(android.net.Uri)>
<android.drm.DrmManagerClient: void <init>(android.content.Context)>
<android.drm.DrmManagerClient: void setOnInfoListener(android.drm.DrmManagerClient.OnInfoListener)>
<android.drm.DrmManagerClient: android.drm.DrmInfo acquireDrmInfo(android.drm.DrmInfoRequest)>
<android.drm.DrmManagerClient: int checkRightsStatus(android.net.Uri)>
<android.drm.DrmManagerClient: int checkRightsStatus(android.net.Uri,int)>
<android.drm.DrmManagerClient: int checkRightsStatus(java.lang.String)>
<android.drm.DrmManagerClient: int checkRightsStatus(java.lang.String,int)>
<android.drm.DrmManagerClient: int getDrmObjectType(android.net.Uri,java.lang.String)>
<android.drm.DrmManagerClient: android.content.ContentValues getMetadata(java.lang.String)>
<android.drm.DrmManagerClient: boolean canHandle(android.net.Uri,java.lang.String)>
<android.drm.DrmManagerClient: java.lang.String getOriginalMimeType(android.net.Uri)>
<android.drm.DrmManagerClient: int saveRights(android.drm.DrmRights,java.lang.String,java.lang.String)>
<android.widget.SlidingDrawer.OnDrawerOpenListener: void onDrawerOpened()>
<android.accessibilityservice.AccessibilityButtonController: void unregisterAccessibilityButtonCallback(android.accessibilityservice.AccessibilityButtonController.AccessibilityButtonCallback)>
<android.accessibilityservice.AccessibilityButtonController: void registerAccessibilityButtonCallback(android.accessibilityservice.AccessibilityButtonController.AccessibilityButtonCallback)>
<android.accessibilityservice.AccessibilityButtonController: boolean isAccessibilityButtonAvailable()>
<android.accessibilityservice.AccessibilityButtonController: void registerAccessibilityButtonCallback(android.accessibilityservice.AccessibilityButtonController.AccessibilityButtonCallback,android.os.Handler)>
<android.app.ApplicationErrorReport: void <init>()>
<android.app.ApplicationErrorReport: int describeContents()>
<android.app.ApplicationErrorReport: void writeToParcel(android.os.Parcel,int)>
<android.app.ApplicationErrorReport: void dump(android.util.Printer,java.lang.String)>
<android.app.ApplicationErrorReport: android.content.ComponentName getErrorReportReceiver(android.content.Context,java.lang.String,int)>
<android.app.ApplicationErrorReport: void readFromParcel(android.os.Parcel)>
<android.database.DataSetObservable: void <init>()>
<android.database.DataSetObservable: void notifyInvalidated()>
<android.database.DataSetObservable: void notifyChanged()>
<android.database.SQLException: void <init>()>
<android.database.SQLException: void <init>(String,Throwable)>
<android.database.SQLException: void <init>(String)>
<java.util.ListResourceBundle: void <init>()>
<java.util.ListResourceBundle: java.util.Enumeration getKeys()>
<java.util.ListResourceBundle: java.lang.Object handleGetObject(java.lang.String)>
<java.util.ListResourceBundle: java.lang.Object[][] getContents()>
<android.gesture.Gesture: android.graphics.Bitmap toBitmap(int,int,int,int,int)>
<android.gesture.Gesture: android.graphics.Path toPath(android.graphics.Path)>
<android.gesture.Gesture: int describeContents()>
<android.gesture.Gesture: android.graphics.Path toPath(android.graphics.Path,int,int,int,int)>
<android.gesture.Gesture: void <init>()>
<android.gesture.Gesture: java.lang.Object clone()>
<android.gesture.Gesture: void writeToParcel(android.os.Parcel,int)>
<android.gesture.Gesture: android.graphics.Bitmap toBitmap(int,int,int,int)>
<android.gesture.Gesture: void addStroke(android.gesture.GestureStroke)>
<android.gesture.Gesture: int getStrokesCount()>
<android.gesture.Gesture: long getID()>
<android.gesture.Gesture: java.util.ArrayList getStrokes()>
<android.gesture.Gesture: android.graphics.Path toPath()>
<android.gesture.Gesture: android.graphics.Path toPath(int,int,int,int)>
<android.gesture.Gesture: android.graphics.RectF getBoundingBox()>
<android.gesture.Gesture: float getLength()>
<android.content.rollback.RollbackInfo: java.util.List getCausePackages()>
<android.content.rollback.RollbackInfo: int getCommittedSessionId()>
<android.content.rollback.RollbackInfo: java.util.List getPackages()>
<android.content.rollback.RollbackInfo: int getRollbackId()>
<android.content.rollback.RollbackInfo: int describeContents()>
<android.content.rollback.RollbackInfo: boolean isStaged()>
<android.content.rollback.RollbackInfo: void writeToParcel(android.os.Parcel,int)>
<android.permission.PermissionControllerManager.OnGetAppPermissionResultCallback: void onGetAppPermissions(java.util.List)>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class)>
<java.lang.invoke.MethodType: java.util.List parameterList()>
<java.lang.invoke.MethodType: java.lang.Class returnType()>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType insertParameterTypes(int,Class...)>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType appendParameterTypes(Class...)>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType generic()>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType unwrap()>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class[])>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType changeParameterType(int,java.lang.Class)>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType erase()>
<java.lang.invoke.MethodType: boolean hasWrappers()>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType fromMethodDescriptorString(java.lang.String,java.lang.ClassLoader)>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.util.List)>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class,Class...)>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class)>
<java.lang.invoke.MethodType: java.lang.String toMethodDescriptorString()>
<java.lang.invoke.MethodType: boolean hasPrimitives()>
<java.lang.invoke.MethodType: java.lang.Class parameterType(int)>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType appendParameterTypes(java.util.List)>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType genericMethodType(int,boolean)>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType changeReturnType(java.lang.Class)>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType dropParameterTypes(int,int)>
<java.lang.invoke.MethodType: java.lang.Class[] parameterArray()>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType wrap()>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.invoke.MethodType)>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType insertParameterTypes(int,java.util.List)>
<java.lang.invoke.MethodType: java.lang.invoke.MethodType genericMethodType(int)>
<java.lang.invoke.MethodType: int parameterCount()>
<android.graphics.Picture: void endRecording()>
<android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)>
<android.graphics.Picture: int getWidth()>
<android.graphics.Picture: int getHeight()>
<android.graphics.Picture: void <init>()>
<android.graphics.Picture: void <init>(android.graphics.Picture)>
<android.graphics.Picture: boolean requiresHardwareAcceleration()>
<android.graphics.Picture: void draw(android.graphics.Canvas)>
<android.opengl.GLSurfaceView.EGLContextFactory: javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)>
<android.opengl.GLSurfaceView.EGLContextFactory: void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)>
<android.media.MediaRecorder.OnInfoListener: void onInfo(android.media.MediaRecorder,int,int)>
<android.icu.math.MathContext: int getForm()>
<android.icu.math.MathContext: boolean getLostDigits()>
<android.icu.math.MathContext: void <init>(int,int,boolean)>
<android.icu.math.MathContext: void <init>(int)>
<android.icu.math.MathContext: int getDigits()>
<android.icu.math.MathContext: void <init>(int,int,boolean,int)>
<android.icu.math.MathContext: void <init>(int,int)>
<android.icu.math.MathContext: int getRoundingMode()>
<android.media.tv.TvContract.Programs.Genres: java.lang.String[] decode(java.lang.String)>
<android.media.tv.TvContract.Programs.Genres: java.lang.String encode(java.lang.String...)>
<android.media.tv.TvContract.Programs.Genres: boolean isCanonical(java.lang.String)>
<android.drm.DrmInfoStatus: void <init>(int,int,android.drm.ProcessedData,String)>
<android.service.chooser.ChooserTarget: float getScore()>
<android.service.chooser.ChooserTarget: int describeContents()>
<android.service.chooser.ChooserTarget: void <init>(CharSequence,android.graphics.drawable.Icon,float,android.content.ComponentName,android.os.Bundle)>
<android.service.chooser.ChooserTarget: android.graphics.drawable.Icon getIcon()>
<android.service.chooser.ChooserTarget: CharSequence getTitle()>
<android.service.chooser.ChooserTarget: android.content.ComponentName getComponentName()>
<android.service.chooser.ChooserTarget: android.os.Bundle getIntentExtras()>
<android.service.chooser.ChooserTarget: void writeToParcel(android.os.Parcel,int)>
<android.app.AppOpsManager.HistoricalOps: void increaseRejectCount(int,int,java.lang.String,int,int,long)>
<android.app.AppOpsManager.HistoricalOps: long getBeginTimeMillis()>
<android.app.AppOpsManager.HistoricalOps: long getEndTimeMillis()>
<android.app.AppOpsManager.HistoricalOps: android.app.AppOpsManager.HistoricalUidOps getUidOps(int)>
<android.app.AppOpsManager.HistoricalOps: void writeToParcel(android.os.Parcel,int)>
<android.app.AppOpsManager.HistoricalOps: void <init>(long,long)>
<android.app.AppOpsManager.HistoricalOps: int describeContents()>
<android.app.AppOpsManager.HistoricalOps: void offsetBeginAndEndTime(long)>
<android.app.AppOpsManager.HistoricalOps: android.app.AppOpsManager.HistoricalUidOps getUidOpsAt(int)>
<android.app.AppOpsManager.HistoricalOps: void increaseAccessDuration(int,int,java.lang.String,int,int,long)>
<android.app.AppOpsManager.HistoricalOps: void increaseAccessCount(int,int,java.lang.String,int,int,long)>
<android.app.AppOpsManager.HistoricalOps: int getUidCount()>
<android.service.voice.VoiceInteractionSession.ConfirmationRequest: android.app.VoiceInteractor.Prompt getVoicePrompt()>
<android.service.voice.VoiceInteractionSession.ConfirmationRequest: CharSequence getPrompt()>
<android.service.voice.VoiceInteractionSession.ConfirmationRequest: void sendConfirmationResult(boolean,android.os.Bundle)>
<android.telecom.ParcelableCallAnalytics.AnalyticsEvent: int getEventName()>
<android.telecom.ParcelableCallAnalytics.AnalyticsEvent: void <init>(int,long)>
<android.telecom.ParcelableCallAnalytics.AnalyticsEvent: void writeToParcel(android.os.Parcel,int)>
<android.telecom.ParcelableCallAnalytics.AnalyticsEvent: int describeContents()>
<android.telecom.ParcelableCallAnalytics.AnalyticsEvent: long getTimeSinceLastEvent()>
<android.telephony.CellInfo: long getTimeStamp()>
<android.telephony.CellInfo: int getCellConnectionStatus()>
<android.telephony.CellInfo: int describeContents()>
<android.telephony.CellInfo: boolean isRegistered()>
<android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultJournalMode()>
<android.database.sqlite.SQLiteGlobal: int getWALAutoCheckpoint()>
<android.database.sqlite.SQLiteGlobal: java.lang.String getWALSyncMode()>
<android.database.sqlite.SQLiteGlobal: int getDefaultPageSize()>
<android.database.sqlite.SQLiteGlobal: int releaseMemory()>
<android.database.sqlite.SQLiteGlobal: int getIdleConnectionTimeout()>
<android.database.sqlite.SQLiteGlobal: int getJournalSizeLimit()>
<android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultSyncMode()>
<android.database.sqlite.SQLiteGlobal: int getWALConnectionPoolSize()>
<android.widget.DatePicker.OnDateChangedListener: void onDateChanged(android.widget.DatePicker,int,int,int)>
<android.webkit.TracingController: boolean stop(java.io.OutputStream,java.util.concurrent.Executor)>
<android.webkit.TracingController: boolean isTracing()>
<android.webkit.TracingController: android.webkit.TracingController getInstance()>
<android.webkit.TracingController: void <init>()>
<android.webkit.TracingController: void start(android.webkit.TracingConfig)>
<android.view.contentcapture.ContentCaptureCondition: int describeContents()>
<android.view.contentcapture.ContentCaptureCondition: android.content.LocusId getLocusId()>
<android.view.contentcapture.ContentCaptureCondition: int getFlags()>
<android.view.contentcapture.ContentCaptureCondition: void writeToParcel(android.os.Parcel,int)>
<android.view.contentcapture.ContentCaptureCondition: void <init>(android.content.LocusId,int)>
<android.text.method.NumberKeyListener: boolean ok(char[],char)>
<android.text.method.NumberKeyListener: char[] getAcceptedChars()>
<android.text.method.NumberKeyListener: void <init>()>
<android.text.method.NumberKeyListener: CharSequence filter(CharSequence,int,int,android.text.Spanned,int,int)>
<android.text.method.NumberKeyListener: int lookup(android.view.KeyEvent,android.text.Spannable)>
<android.app.NotificationManager.Policy: int describeContents()>
<android.app.NotificationManager.Policy: void <init>(int,int,int)>
<android.app.NotificationManager.Policy: java.lang.String prioritySendersToString(int)>
<android.app.NotificationManager.Policy: void writeToParcel(android.os.Parcel,int)>
<android.app.NotificationManager.Policy: void <init>(int,int,int,int)>
<android.app.NotificationManager.Policy: java.lang.String suppressedEffectsToString(int)>
<android.app.NotificationManager.Policy: java.lang.String priorityCategoriesToString(int)>
<android.net.IpSecAlgorithm: int getTruncationLengthBits()>
<android.net.IpSecAlgorithm: void <init>(String,byte[],int)>
<android.net.IpSecAlgorithm: void <init>(String,byte[])>
<android.net.IpSecAlgorithm: byte[] getKey()>
<android.net.IpSecAlgorithm: java.lang.String getName()>
<android.net.IpSecAlgorithm: void writeToParcel(android.os.Parcel,int)>
<android.net.IpSecAlgorithm: int describeContents()>
<java.lang.Long: java.lang.String toHexString(long)>
<java.lang.Long: java.lang.String toString(long,int)>
<java.lang.Long: java.lang.Long valueOf(java.lang.String)>
<java.lang.Long: long remainderUnsigned(long,long)>
<java.lang.Long: int signum(long)>
<java.lang.Long: long max(long,long)>
<java.lang.Long: java.lang.Long valueOf(long)>
<java.lang.Long: long parseUnsignedLong(java.lang.String)>
<java.lang.Long: java.lang.Long getLong(java.lang.String,long)>
<java.lang.Long: java.lang.Long decode(java.lang.String)>
<java.lang.Long: long rotateLeft(long,int)>
<java.lang.Long: int numberOfLeadingZeros(long)>
<java.lang.Long: java.lang.String toUnsignedString(long)>
<java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)>
<java.lang.Long: int numberOfTrailingZeros(long)>
<java.lang.Long: long longValue()>
<java.lang.Long: java.lang.String toString(long)>
<java.lang.Long: int compareTo(java.lang.Long)>
<java.lang.Long: java.lang.String toOctalString(long)>
<java.lang.Long: long parseUnsignedLong(java.lang.String,int)>
<java.lang.Long: long reverse(long)>
<java.lang.Long: long highestOneBit(long)>
<java.lang.Long: long divideUnsigned(long,long)>
<java.lang.Long: int intValue()>
<java.lang.Long: double doubleValue()>
<java.lang.Long: float floatValue()>
<java.lang.Long: java.lang.String toUnsignedString(long,int)>
<java.lang.Long: long reverseBytes(long)>
<java.lang.Long: int bitCount(long)>
<java.lang.Long: long min(long,long)>
<java.lang.Long: long sum(long,long)>
<java.lang.Long: java.lang.String toBinaryString(long)>
<java.lang.Long: int hashCode(long)>
<java.lang.Long: java.lang.Long getLong(java.lang.String)>
<java.lang.Long: long parseLong(java.lang.String)>
<java.lang.Long: int compare(long,long)>
<java.lang.Long: void <init>(String)>
<java.lang.Long: void <init>(long)>
<java.lang.Long: long parseLong(java.lang.String,int)>
<java.lang.Long: java.lang.Long valueOf(java.lang.String,int)>
<java.lang.Long: long lowestOneBit(long)>
<java.lang.Long: long rotateRight(long,int)>
<java.lang.Long: int compareUnsigned(long,long)>
<android.media.session.MediaSessionManager.OnMediaKeyListener: boolean onMediaKey(android.view.KeyEvent)>
<android.widget.ToggleButton: void <init>(android.content.Context)>
<android.widget.ToggleButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ToggleButton: float getDisabledAlpha()>
<android.widget.ToggleButton: CharSequence getTextOff()>
<android.widget.ToggleButton: void setTextOn(CharSequence)>
<android.widget.ToggleButton: void setTextOff(CharSequence)>
<android.widget.ToggleButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ToggleButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.ToggleButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ToggleButton: CharSequence getTextOn()>
<java.nio.channels.Channel extends java.io.Closeable: boolean isOpen()>
<android.util.proto.ProtoOutputStream: void writeEnum(long,int)>
<android.util.proto.ProtoOutputStream: void writeRepeatedBytes(long,byte[])>
<android.util.proto.ProtoOutputStream: long startRepeatedObject(long)>
<android.util.proto.ProtoOutputStream: void writeRepeatedDouble(long,double)>
<android.util.proto.ProtoOutputStream: void writeRepeatedSInt64(long,long)>
<android.util.proto.ProtoOutputStream: void writeFixed32(long,int)>
<android.util.proto.ProtoOutputStream: void write(long,float)>
<android.util.proto.ProtoOutputStream: void writeSInt64(long,long)>
<android.util.proto.ProtoOutputStream: void endRepeatedObject(long)>
<android.util.proto.ProtoOutputStream: void writeRepeatedEnum(long,int)>
<android.util.proto.ProtoOutputStream: void writeRepeatedFixed32(long,int)>
<android.util.proto.ProtoOutputStream: long start(long)>
<android.util.proto.ProtoOutputStream: int getRawSize()>
<android.util.proto.ProtoOutputStream: void writeDouble(long,double)>
<android.util.proto.ProtoOutputStream: void writeRepeatedInt32(long,int)>
<android.util.proto.ProtoOutputStream: void write(long,int)>
<android.util.proto.ProtoOutputStream: void writeSFixed32(long,int)>
<android.util.proto.ProtoOutputStream: void <init>(java.io.FileDescriptor)>
<android.util.proto.ProtoOutputStream: void write(long,double)>
<android.util.proto.ProtoOutputStream: void end(long)>
<android.util.proto.ProtoOutputStream: void writeUInt32(long,int)>
<android.util.proto.ProtoOutputStream: void writePackedInt64(long,long[])>
<android.util.proto.ProtoOutputStream: void writeRepeatedSFixed64(long,long)>
<android.util.proto.ProtoOutputStream: void <init>(java.io.OutputStream)>
<android.util.proto.ProtoOutputStream: long startObject(long)>
<android.util.proto.ProtoOutputStream: void writeSFixed64(long,long)>
<android.util.proto.ProtoOutputStream: void writePackedBool(long,boolean[])>
<android.util.proto.ProtoOutputStream: void writeUInt64(long,long)>
<android.util.proto.ProtoOutputStream: void writeFloat(long,float)>
<android.util.proto.ProtoOutputStream: int checkFieldId(long,long)>
<android.util.proto.ProtoOutputStream: void writePackedSInt64(long,long[])>
<android.util.proto.ProtoOutputStream: void writeRepeatedInt64(long,long)>
<android.util.proto.ProtoOutputStream: void write(long,long)>
<android.util.proto.ProtoOutputStream: void writePackedUInt64(long,long[])>
<android.util.proto.ProtoOutputStream: void writeRepeatedObject(long,byte[])>
<android.util.proto.ProtoOutputStream: void writePackedInt32(long,int[])>
<android.util.proto.ProtoOutputStream: void writePackedFixed64(long,long[])>
<android.util.proto.ProtoOutputStream: void flush()>
<android.util.proto.ProtoOutputStream: void writePackedSFixed64(long,long[])>
<android.util.proto.ProtoOutputStream: void writePackedUInt32(long,int[])>
<android.util.proto.ProtoOutputStream: void writePackedFloat(long,float[])>
<android.util.proto.ProtoOutputStream: void writeInt64(long,long)>
<android.util.proto.ProtoOutputStream: long makeFieldId(int,long)>
<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>
<android.util.proto.ProtoOutputStream: void writeBytes(long,byte[])>
<android.util.proto.ProtoOutputStream: void writeRepeatedUInt32(long,int)>
<android.util.proto.ProtoOutputStream: void write(long,boolean)>
<android.util.proto.ProtoOutputStream: void <init>()>
<android.util.proto.ProtoOutputStream: void writeString(long,java.lang.String)>
<android.util.proto.ProtoOutputStream: void writeInt32(long,int)>
<android.util.proto.ProtoOutputStream: void writePackedFixed32(long,int[])>
<android.util.proto.ProtoOutputStream: void write(long,byte[])>
<android.util.proto.ProtoOutputStream: void writeRepeatedBool(long,boolean)>
<android.util.proto.ProtoOutputStream: void writeRepeatedSInt32(long,int)>
<android.util.proto.ProtoOutputStream: void writeSInt32(long,int)>
<android.util.proto.ProtoOutputStream: void writeRepeatedFloat(long,float)>
<android.util.proto.ProtoOutputStream: void writeRepeatedFixed64(long,long)>
<android.util.proto.ProtoOutputStream: void writePackedSFixed32(long,int[])>
<android.util.proto.ProtoOutputStream: void writeTag(int,int)>
<android.util.proto.ProtoOutputStream: byte[] getBytes()>
<android.util.proto.ProtoOutputStream: void writeObject(long,byte[])>
<android.util.proto.ProtoOutputStream: void writeRepeatedSFixed32(long,int)>
<android.util.proto.ProtoOutputStream: void writePackedDouble(long,double[])>
<android.util.proto.ProtoOutputStream: void writePackedSInt32(long,int[])>
<android.util.proto.ProtoOutputStream: void writeRepeatedUInt64(long,long)>
<android.util.proto.ProtoOutputStream: void <init>(int)>
<android.util.proto.ProtoOutputStream: void writePackedEnum(long,int[])>
<android.util.proto.ProtoOutputStream: void writeBool(long,boolean)>
<android.util.proto.ProtoOutputStream: void endObject(long)>
<android.util.proto.ProtoOutputStream: void dump(java.lang.String)>
<android.util.proto.ProtoOutputStream: void writeFixed64(long,long)>
<android.util.proto.ProtoOutputStream: void writeRepeatedString(long,java.lang.String)>
<android.view.PixelCopy: void request(android.view.Window,android.graphics.Bitmap,android.view.PixelCopy.OnPixelCopyFinishedListener,android.os.Handler)>
<android.view.PixelCopy: void request(android.view.Window,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy.OnPixelCopyFinishedListener,android.os.Handler)>
<android.view.PixelCopy: void request(android.view.Surface,android.graphics.Bitmap,android.view.PixelCopy.OnPixelCopyFinishedListener,android.os.Handler)>
<android.view.PixelCopy: void request(android.view.SurfaceView,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy.OnPixelCopyFinishedListener,android.os.Handler)>
<android.view.PixelCopy: void request(android.view.Surface,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy.OnPixelCopyFinishedListener,android.os.Handler)>
<android.view.PixelCopy: void request(android.view.SurfaceView,android.graphics.Bitmap,android.view.PixelCopy.OnPixelCopyFinishedListener,android.os.Handler)>
<android.R.xml: void <init>()>
<android.hardware.display.BrightnessConfiguration: android.hardware.display.BrightnessCorrection getCorrectionByCategory(int)>
<android.hardware.display.BrightnessConfiguration: int describeContents()>
<android.hardware.display.BrightnessConfiguration: android.hardware.display.BrightnessCorrection getCorrectionByPackageName(java.lang.String)>
<android.hardware.display.BrightnessConfiguration: void writeToParcel(android.os.Parcel,int)>
<android.hardware.display.BrightnessConfiguration: android.util.Pair getCurve()>
<android.webkit.WebChromeClient.FileChooserParams: void <init>()>
<android.webkit.WebChromeClient.FileChooserParams: java.lang.String getFilenameHint()>
<android.webkit.WebChromeClient.FileChooserParams: java.lang.String[] getAcceptTypes()>
<android.webkit.WebChromeClient.FileChooserParams: CharSequence getTitle()>
<android.webkit.WebChromeClient.FileChooserParams: android.net.Uri[] parseResult(int,android.content.Intent)>
<android.webkit.WebChromeClient.FileChooserParams: int getMode()>
<android.webkit.WebChromeClient.FileChooserParams: android.content.Intent createIntent()>
<android.webkit.WebChromeClient.FileChooserParams: boolean isCaptureEnabled()>
<android.app.Notification.CarExtender.UnreadConversation: java.lang.String getParticipant()>
<android.app.Notification.CarExtender.UnreadConversation: long getLatestTimestamp()>
<android.app.Notification.CarExtender.UnreadConversation: android.app.PendingIntent getReplyPendingIntent()>
<android.app.Notification.CarExtender.UnreadConversation: java.lang.String[] getParticipants()>
<android.app.Notification.CarExtender.UnreadConversation: android.app.RemoteInput getRemoteInput()>
<android.app.Notification.CarExtender.UnreadConversation: java.lang.String[] getMessages()>
<android.app.Notification.CarExtender.UnreadConversation: android.app.PendingIntent getReadPendingIntent()>
<android.security.NetworkSecurityPolicy: boolean isCleartextTrafficPermitted(java.lang.String)>
<android.security.NetworkSecurityPolicy: android.security.NetworkSecurityPolicy getInstance()>
<android.security.NetworkSecurityPolicy: boolean isCleartextTrafficPermitted()>
<java.util.concurrent.locks.LockSupport: void park()>
<java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>
<java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>
<java.util.concurrent.locks.LockSupport: void parkNanos(long)>
<java.util.concurrent.locks.LockSupport: void parkUntil(java.lang.Object,long)>
<java.util.concurrent.locks.LockSupport: java.lang.Object getBlocker(java.lang.Thread)>
<java.util.concurrent.locks.LockSupport: void parkUntil(long)>
<java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>
<android.view.inspector.PropertyMapper.PropertyConflictException: void <init>(String,String,String)>
<android.provider.SyncStateContract.Helpers: android.content.ContentProviderOperation newUpdateOperation(android.net.Uri,byte[])>
<android.provider.SyncStateContract.Helpers: void set(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account,byte[])>
<android.provider.SyncStateContract.Helpers: void update(android.content.ContentProviderClient,android.net.Uri,byte[])>
<android.provider.SyncStateContract.Helpers: byte[] get(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)>
<android.provider.SyncStateContract.Helpers: android.util.Pair getWithUri(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)>
<android.provider.SyncStateContract.Helpers: android.net.Uri insert(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account,byte[])>
<android.provider.SyncStateContract.Helpers: android.content.ContentProviderOperation newSetOperation(android.net.Uri,android.accounts.Account,byte[])>
<android.provider.SyncStateContract.Helpers: void <init>()>
<java.util.jar.Pack200.Unpacker: void addPropertyChangeListener(java.beans.PropertyChangeListener)>
<java.util.jar.Pack200.Unpacker: void removePropertyChangeListener(java.beans.PropertyChangeListener)>
<java.util.jar.Pack200.Unpacker: void unpack(java.io.File,java.util.jar.JarOutputStream)>
<java.util.jar.Pack200.Unpacker: void unpack(java.io.InputStream,java.util.jar.JarOutputStream)>
<java.util.jar.Pack200.Unpacker: java.util.SortedMap properties()>
<android.view.textclassifier.TextLanguage.Request.Builder: android.view.textclassifier.TextLanguage.Request build()>
<android.view.textclassifier.TextLanguage.Request.Builder: android.view.textclassifier.TextLanguage.Request.Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.TextLanguage.Request.Builder: void <init>(CharSequence)>
<android.media.MediaPlayer.OnPreparedListener: void onPrepared(android.media.MediaPlayer)>
<android.os.BadParcelableException: void <init>(Exception)>
<android.os.BadParcelableException: void <init>(String)>
<java.nio.channels.AcceptPendingException: void <init>()>
<android.location.GnssCapabilities: boolean hasMeasurementCorrections()>
<android.location.GnssCapabilities: boolean hasMeasurementCorrectionsExcessPathLength()>
<android.location.GnssCapabilities: boolean hasMeasurementCorrectionsLosSats()>
<android.location.GnssCapabilities: boolean hasMeasurements()>
<android.location.GnssCapabilities: boolean hasLowPowerMode()>
<android.location.GnssCapabilities: boolean hasMeasurementCorrectionsReflectingPane()>
<android.location.GnssCapabilities: boolean hasGeofencing()>
<android.location.GnssCapabilities: boolean hasSatelliteBlacklist()>
<android.location.GnssCapabilities: boolean hasNavMessages()>
<android.content.pm.LauncherApps.ShortcutQuery: android.content.pm.LauncherApps.ShortcutQuery setQueryFlags(int)>
<android.content.pm.LauncherApps.ShortcutQuery: void <init>()>
<android.content.pm.LauncherApps.ShortcutQuery: android.content.pm.LauncherApps.ShortcutQuery setActivity(android.content.ComponentName)>
<android.content.pm.LauncherApps.ShortcutQuery: android.content.pm.LauncherApps.ShortcutQuery setShortcutIds(java.util.List)>
<android.content.pm.LauncherApps.ShortcutQuery: android.content.pm.LauncherApps.ShortcutQuery setPackage(java.lang.String)>
<android.content.pm.LauncherApps.ShortcutQuery: android.content.pm.LauncherApps.ShortcutQuery setChangedSince(long)>
<android.view.textclassifier.TextClassificationSessionFactory: android.view.textclassifier.TextClassifier createTextClassificationSession(android.view.textclassifier.TextClassificationContext)>
<android.widget.PopupMenu.OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>
<android.service.media.MediaBrowserService: void onLoadChildren(java.lang.String,android.service.media.MediaBrowserService.Result,android.os.Bundle)>
<android.service.media.MediaBrowserService: android.service.media.MediaBrowserService.BrowserRoot onGetRoot(java.lang.String,int,android.os.Bundle)>
<android.service.media.MediaBrowserService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.service.media.MediaBrowserService: void notifyChildrenChanged(java.lang.String)>
<android.service.media.MediaBrowserService: android.os.Bundle getBrowserRootHints()>
<android.service.media.MediaBrowserService: void onLoadItem(java.lang.String,android.service.media.MediaBrowserService.Result)>
<android.service.media.MediaBrowserService: void setSessionToken(android.media.session.MediaSession.Token)>
<android.service.media.MediaBrowserService: void notifyChildrenChanged(java.lang.String,android.os.Bundle)>
<android.service.media.MediaBrowserService: void onLoadChildren(java.lang.String,android.service.media.MediaBrowserService.Result)>
<android.service.media.MediaBrowserService: android.media.session.MediaSession.Token getSessionToken()>
<android.service.media.MediaBrowserService: void <init>()>
<android.service.media.MediaBrowserService: android.media.session.MediaSessionManager.RemoteUserInfo getCurrentBrowserInfo()>
<android.service.media.MediaBrowserService: android.os.IBinder onBind(android.content.Intent)>
<java.lang.StackOverflowError: void <init>(String)>
<java.lang.StackOverflowError: void <init>()>
<android.media.MediaPlayer.OnDrmPreparedListener: void onDrmPrepared(android.media.MediaPlayer,int)>
<android.nfc.tech.Ndef: android.nfc.tech.Ndef get(android.nfc.Tag)>
<android.nfc.tech.Ndef: int getMaxSize()>
<android.nfc.tech.Ndef: java.lang.String getType()>
<android.nfc.tech.Ndef: void close()>
<android.nfc.tech.Ndef: boolean canMakeReadOnly()>
<android.nfc.tech.Ndef: boolean isWritable()>
<android.nfc.tech.Ndef: boolean makeReadOnly()>
<android.nfc.tech.Ndef: boolean isConnected()>
<android.nfc.tech.Ndef: android.nfc.NdefMessage getNdefMessage()>
<android.nfc.tech.Ndef: android.nfc.Tag getTag()>
<android.nfc.tech.Ndef: void connect()>
<android.nfc.tech.Ndef: android.nfc.NdefMessage getCachedNdefMessage()>
<android.nfc.tech.Ndef: void writeNdefMessage(android.nfc.NdefMessage)>
<android.os.BatteryManager: int getIntProperty(int)>
<android.os.BatteryManager: boolean setChargingStateUpdateDelayMillis(int)>
<android.os.BatteryManager: long computeChargeTimeRemaining()>
<android.os.BatteryManager: boolean isCharging()>
<android.os.BatteryManager: long getLongProperty(int)>
<java.lang.annotation.AnnotationFormatError: void <init>(String)>
<java.lang.annotation.AnnotationFormatError: void <init>(String,Throwable)>
<java.lang.annotation.AnnotationFormatError: void <init>(Throwable)>
<javax.xml.transform.stream.StreamSource: java.io.InputStream getInputStream()>
<javax.xml.transform.stream.StreamSource: java.lang.String getPublicId()>
<javax.xml.transform.stream.StreamSource: void <init>(java.io.File)>
<javax.xml.transform.stream.StreamSource: void setSystemId(java.lang.String)>
<javax.xml.transform.stream.StreamSource: void <init>(java.io.Reader,String)>
<javax.xml.transform.stream.StreamSource: void <init>(java.io.Reader)>
<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream,String)>
<javax.xml.transform.stream.StreamSource: void <init>(String)>
<javax.xml.transform.stream.StreamSource: java.lang.String getSystemId()>
<javax.xml.transform.stream.StreamSource: void setInputStream(java.io.InputStream)>
<javax.xml.transform.stream.StreamSource: void <init>()>
<javax.xml.transform.stream.StreamSource: void setReader(java.io.Reader)>
<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>
<javax.xml.transform.stream.StreamSource: void setSystemId(java.io.File)>
<javax.xml.transform.stream.StreamSource: void setPublicId(java.lang.String)>
<javax.xml.transform.stream.StreamSource: java.io.Reader getReader()>
<android.os.VibrationEffect.OneShot: android.os.VibrationEffect.OneShot scale(float,int)>
<android.os.VibrationEffect.OneShot: int getAmplitude()>
<android.os.VibrationEffect.OneShot: long getDuration()>
<android.os.VibrationEffect.OneShot: void <init>(long,int)>
<android.os.VibrationEffect.OneShot: void validate()>
<android.os.VibrationEffect.OneShot: void writeToParcel(android.os.Parcel,int)>
<android.os.VibrationEffect.OneShot: void <init>(android.os.Parcel)>
<javax.xml.transform.URIResolver: javax.xml.transform.Source resolve(java.lang.String,java.lang.String)>
<android.service.autofill.FillRequest: int getId()>
<android.service.autofill.FillRequest: java.util.List getFillContexts()>
<android.service.autofill.FillRequest: int describeContents()>
<android.service.autofill.FillRequest: android.os.Bundle getClientState()>
<android.service.autofill.FillRequest: int getFlags()>
<android.service.autofill.FillRequest: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssStatus: float getCarrierFrequencyHz(int)>
<android.location.GnssStatus: float getElevationDegrees(int)>
<android.location.GnssStatus: boolean hasAlmanacData(int)>
<android.location.GnssStatus: boolean usedInFix(int)>
<android.location.GnssStatus: int getSvid(int)>
<android.location.GnssStatus: int getConstellationType(int)>
<android.location.GnssStatus: int getSatelliteCount()>
<android.location.GnssStatus: float getAzimuthDegrees(int)>
<android.location.GnssStatus: boolean hasEphemerisData(int)>
<android.location.GnssStatus: float getCn0DbHz(int)>
<android.location.GnssStatus: boolean hasCarrierFrequencyHz(int)>
<android.media.tv.TvInputManager.HardwareCallback: void onReleased()>
<android.media.tv.TvInputManager.HardwareCallback: void <init>()>
<android.media.tv.TvInputManager.HardwareCallback: void onStreamConfigChanged(android.media.tv.TvStreamConfig[])>
<javax.security.cert.CertificateParsingException: void <init>(String)>
<javax.security.cert.CertificateParsingException: void <init>()>
<android.telephony.euicc.DownloadableSubscription: java.lang.String getConfirmationCode()>
<android.telephony.euicc.DownloadableSubscription: int describeContents()>
<android.telephony.euicc.DownloadableSubscription: java.util.List getAccessRules()>
<android.telephony.euicc.DownloadableSubscription: void writeToParcel(android.os.Parcel,int)>
<android.telephony.euicc.DownloadableSubscription: java.lang.String getCarrierName()>
<android.telephony.euicc.DownloadableSubscription: android.telephony.euicc.DownloadableSubscription forActivationCode(java.lang.String)>
<android.telephony.euicc.DownloadableSubscription: java.lang.String getEncodedActivationCode()>
<javax.net.ssl.SSLSession: java.security.Principal getPeerPrincipal()>
<javax.net.ssl.SSLSession: java.lang.Object getValue(java.lang.String)>
<javax.net.ssl.SSLSession: void invalidate()>
<javax.net.ssl.SSLSession: int getPeerPort()>
<javax.net.ssl.SSLSession: long getCreationTime()>
<javax.net.ssl.SSLSession: javax.security.cert.X509Certificate[] getPeerCertificateChain()>
<javax.net.ssl.SSLSession: java.lang.String getPeerHost()>
<javax.net.ssl.SSLSession: java.lang.String getCipherSuite()>
<javax.net.ssl.SSLSession: void putValue(java.lang.String,java.lang.Object)>
<javax.net.ssl.SSLSession: long getLastAccessedTime()>
<javax.net.ssl.SSLSession: byte[] getId()>
<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>
<javax.net.ssl.SSLSession: boolean isValid()>
<javax.net.ssl.SSLSession: int getPacketBufferSize()>
<javax.net.ssl.SSLSession: javax.net.ssl.SSLSessionContext getSessionContext()>
<javax.net.ssl.SSLSession: void removeValue(java.lang.String)>
<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getLocalCertificates()>
<javax.net.ssl.SSLSession: java.lang.String[] getValueNames()>
<javax.net.ssl.SSLSession: java.security.Principal getLocalPrincipal()>
<javax.net.ssl.SSLSession: java.lang.String getProtocol()>
<javax.net.ssl.SSLSession: int getApplicationBufferSize()>
<android.view.inputmethod.CorrectionInfo: void <init>(int,CharSequence,CharSequence)>
<android.view.inputmethod.CorrectionInfo: CharSequence getOldText()>
<android.view.inputmethod.CorrectionInfo: int describeContents()>
<android.view.inputmethod.CorrectionInfo: int getOffset()>
<android.view.inputmethod.CorrectionInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.CorrectionInfo: CharSequence getNewText()>
<android.view.MenuInflater: void <init>(android.content.Context)>
<android.view.MenuInflater: void inflate(@MenuResint,android.view.Menu)>
<android.app.admin.DeviceAdminInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>
<android.app.admin.DeviceAdminInfo: int describeContents()>
<android.app.admin.DeviceAdminInfo: void dump(android.util.Printer,java.lang.String)>
<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>
<android.app.admin.DeviceAdminInfo: CharSequence loadDescription(android.content.pm.PackageManager)>
<android.app.admin.DeviceAdminInfo: CharSequence loadLabel(android.content.pm.PackageManager)>
<android.app.admin.DeviceAdminInfo: boolean isVisible()>
<android.app.admin.DeviceAdminInfo: android.content.pm.ActivityInfo getActivityInfo()>
<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>
<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>
<android.app.admin.DeviceAdminInfo: java.lang.String getTagForPolicy(int)>
<android.app.admin.DeviceAdminInfo: boolean supportsTransferOwnership()>
<android.app.admin.DeviceAdminInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.DeviceAdminInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.app.admin.DeviceAdminInfo: java.lang.String getReceiverName()>
<android.telephony.gsm.SmsMessage: java.lang.String getDisplayMessageBody()>
<android.telephony.gsm.SmsMessage: java.lang.String getEmailBody()>
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage.SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,short,byte[],boolean)>
<android.telephony.gsm.SmsMessage: boolean isReplyPathPresent()>
<android.telephony.gsm.SmsMessage: byte[] getUserData()>
<android.telephony.gsm.SmsMessage: boolean isReplace()>
<android.telephony.gsm.SmsMessage: boolean isMwiDontStore()>
<android.telephony.gsm.SmsMessage: java.lang.String getPseudoSubject()>
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage createFromPdu(byte[])>
<android.telephony.gsm.SmsMessage: boolean isCphsMwiMessage()>
<android.telephony.gsm.SmsMessage: boolean isEmail()>
<android.telephony.gsm.SmsMessage: int[] calculateLength(CharSequence,boolean)>
<android.telephony.gsm.SmsMessage: java.lang.String getEmailFrom()>
<android.telephony.gsm.SmsMessage: int getStatusOnSim()>
<android.telephony.gsm.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)>
<android.telephony.gsm.SmsMessage: int[] calculateLength(java.lang.String,boolean)>
<android.telephony.gsm.SmsMessage: void <init>()>
<android.telephony.gsm.SmsMessage: int getProtocolIdentifier()>
<android.telephony.gsm.SmsMessage: boolean isMWIClearMessage()>
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage.SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.telephony.gsm.SmsMessage: boolean isMWISetMessage()>
<android.telephony.gsm.SmsMessage: java.lang.String getDisplayOriginatingAddress()>
<android.telephony.gsm.SmsMessage: boolean isStatusReportMessage()>
<android.telephony.gsm.SmsMessage: int getIndexOnSim()>
<android.telephony.gsm.SmsMessage: java.lang.String getOriginatingAddress()>
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage.MessageClass getMessageClass()>
<android.telephony.gsm.SmsMessage: java.lang.String getMessageBody()>
<android.telephony.gsm.SmsMessage: int getStatus()>
<android.telephony.gsm.SmsMessage: byte[] getPdu()>
<android.telephony.gsm.SmsMessage: java.lang.String getServiceCenterAddress()>
<android.telephony.gsm.SmsMessage: long getTimestampMillis()>
<java.util.stream.StreamSupport: java.util.stream.IntStream intStream(java.util.Spliterator.OfInt,boolean)>
<java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>
<java.util.stream.StreamSupport: java.util.stream.LongStream longStream(java.util.Spliterator.OfLong,boolean)>
<java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.function.Supplier,int,boolean)>
<java.util.stream.StreamSupport: java.util.stream.LongStream longStream(java.util.function.Supplier,int,boolean)>
<java.util.stream.StreamSupport: java.util.stream.DoubleStream doubleStream(java.util.function.Supplier,int,boolean)>
<java.util.stream.StreamSupport: java.util.stream.DoubleStream doubleStream(java.util.Spliterator.OfDouble,boolean)>
<java.util.stream.StreamSupport: java.util.stream.IntStream intStream(java.util.function.Supplier,int,boolean)>
<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream)>
<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>
<android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setSlant(int)>
<android.graphics.fonts.Font.Builder: void <init>(android.content.res.AssetManager,String)>
<android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setTtcIndex(int)>
<android.graphics.fonts.Font.Builder: void <init>(java.io.File)>
<android.graphics.fonts.Font.Builder: android.graphics.fonts.Font build()>
<android.graphics.fonts.Font.Builder: void <init>(android.content.res.Resources,int)>
<android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setFontVariationSettings(java.lang.String)>
<android.graphics.fonts.Font.Builder: void <init>(from=0xffffffff) long)>
<android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setWeight(int)>
<android.graphics.fonts.Font.Builder: android.graphics.fonts.Font.Builder setFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>
<android.graphics.fonts.Font.Builder: void <init>(java.nio.ByteBuffer)>
<android.graphics.fonts.Font.Builder: void <init>(android.os.ParcelFileDescriptor)>
<android.media.RemoteControlClient.OnGetPlaybackPositionListener: long onGetPlaybackPosition()>
<android.hardware.location.ContextHubManager: int unregisterCallback(android.hardware.location.ContextHubManager.Callback)>
<android.hardware.location.ContextHubManager: android.hardware.location.ContextHubClient createClient(android.hardware.location.ContextHubInfo,android.hardware.location.ContextHubClientCallback)>
<android.hardware.location.ContextHubManager: android.hardware.location.ContextHubTransaction disableNanoApp(android.hardware.location.ContextHubInfo,long)>
<android.hardware.location.ContextHubManager: android.hardware.location.NanoAppInstanceInfo getNanoAppInstanceInfo(int)>
<android.hardware.location.ContextHubManager: int[] findNanoAppOnHub(int,android.hardware.location.NanoAppFilter)>
<android.hardware.location.ContextHubManager: int registerCallback(android.hardware.location.ContextHubManager.Callback,android.os.Handler)>
<android.hardware.location.ContextHubManager: android.hardware.location.ContextHubClient createClient(android.hardware.location.ContextHubInfo,android.hardware.location.ContextHubClientCallback,java.util.concurrent.Executor)>
<android.hardware.location.ContextHubManager: int registerCallback(android.hardware.location.ContextHubManager.Callback)>
<android.hardware.location.ContextHubManager: int unloadNanoApp(int)>
<android.hardware.location.ContextHubManager: android.hardware.location.ContextHubClient createClient(android.hardware.location.ContextHubInfo,android.app.PendingIntent,long)>
<android.hardware.location.ContextHubManager: java.util.List getContextHubs()>
<android.hardware.location.ContextHubManager: android.hardware.location.ContextHubTransaction queryNanoApps(android.hardware.location.ContextHubInfo)>
<android.hardware.location.ContextHubManager: android.hardware.location.ContextHubInfo getContextHubInfo(int)>
<android.hardware.location.ContextHubManager: android.hardware.location.ContextHubTransaction enableNanoApp(android.hardware.location.ContextHubInfo,long)>
<android.hardware.location.ContextHubManager: int sendMessage(int,int,android.hardware.location.ContextHubMessage)>
<android.hardware.location.ContextHubManager: int loadNanoApp(int,android.hardware.location.NanoApp)>
<android.hardware.location.ContextHubManager: int[] getContextHubHandles()>
<android.hardware.location.ContextHubManager: android.hardware.location.ContextHubTransaction unloadNanoApp(android.hardware.location.ContextHubInfo,long)>
<android.hardware.location.ContextHubManager: android.hardware.location.ContextHubTransaction loadNanoApp(android.hardware.location.ContextHubInfo,android.hardware.location.NanoAppBinary)>
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: boolean isHeldByCurrentThread()>
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: void lockInterruptibly()>
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: void unlock()>
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: int getHoldCount()>
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: void <init>(java.util.concurrent.locks.ReentrantReadWriteLock)>
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: java.util.concurrent.locks.Condition newCondition()>
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: boolean tryLock()>
<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock: void lock()>
<java.nio.file.WatchEvent: java.nio.file.WatchEvent.Kind kind()>
<java.nio.file.WatchEvent: T context()>
<java.nio.file.WatchEvent: int count()>
<android.view.ViewGroupOverlay: void remove(android.view.View)>
<android.view.ViewGroupOverlay: void add(android.view.View)>
<android.accessibilityservice.FingerprintGestureController.FingerprintGestureCallback: void <init>()>
<android.accessibilityservice.FingerprintGestureController.FingerprintGestureCallback: void onGestureDetected(int)>
<android.accessibilityservice.FingerprintGestureController.FingerprintGestureCallback: void onGestureDetectionAvailabilityChanged(boolean)>
<android.app.admin.NetworkEvent: int describeContents()>
<android.app.admin.NetworkEvent: java.lang.String getPackageName()>
<android.app.admin.NetworkEvent: long getTimestamp()>
<android.app.admin.NetworkEvent: long getId()>
<android.telecom.PhoneAccountSuggestion: void <init>(android.telecom.PhoneAccountHandle,int,boolean)>
<android.telecom.PhoneAccountSuggestion: int describeContents()>
<android.telecom.PhoneAccountSuggestion: android.telecom.PhoneAccountHandle getPhoneAccountHandle()>
<android.telecom.PhoneAccountSuggestion: int getReason()>
<android.telecom.PhoneAccountSuggestion: boolean shouldAutoSelect()>
<android.telecom.PhoneAccountSuggestion: void writeToParcel(android.os.Parcel,int)>
<android.os.health.HealthKeys.Constants: int getSize(int)>
<android.os.health.HealthKeys.Constants: java.lang.String getDataType()>
<android.os.health.HealthKeys.Constants: void <init>(Class)>
<android.os.health.HealthKeys.Constants: int[] getKeys(int)>
<android.os.health.HealthKeys.Constants: int getIndex(int,int)>
<android.media.MediaDrm.KeyRequest: int getRequestType()>
<android.media.MediaDrm.KeyRequest: java.lang.String getDefaultUrl()>
<android.media.MediaDrm.KeyRequest: byte[] getData()>
<java.text.ChoiceFormat: double nextDouble(double)>
<java.text.ChoiceFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.ChoiceFormat: java.lang.Object[] getFormats()>
<java.text.ChoiceFormat: void applyPattern(java.lang.String)>
<java.text.ChoiceFormat: void setChoices(double[],java.lang.String[])>
<java.text.ChoiceFormat: void <init>(String)>
<java.text.ChoiceFormat: double nextDouble(double,boolean)>
<java.text.ChoiceFormat: void <init>(double[],String[])>
<java.text.ChoiceFormat: double[] getLimits()>
<java.text.ChoiceFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>
<java.text.ChoiceFormat: double previousDouble(double)>
<java.text.ChoiceFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.ChoiceFormat: java.lang.String toPattern()>
<android.widget.AutoCompleteTextView.Validator: boolean isValid(CharSequence)>
<android.widget.AutoCompleteTextView.Validator: CharSequence fixText(CharSequence)>
<java.lang.invoke.MutableCallSite: java.lang.invoke.MethodHandle getTarget()>
<java.lang.invoke.MutableCallSite: java.lang.invoke.MethodHandle dynamicInvoker()>
<java.lang.invoke.MutableCallSite: void setTarget(java.lang.invoke.MethodHandle)>
<java.lang.invoke.MutableCallSite: void <init>(java.lang.invoke.MethodType)>
<java.lang.invoke.MutableCallSite: void <init>(java.lang.invoke.MethodHandle)>
<java.time.chrono.AbstractChronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>
<java.time.chrono.AbstractChronology: void <init>()>
<java.time.chrono.AbstractChronology: int compareTo(java.time.chrono.Chronology)>
<android.icu.text.UnicodeFilter: int matches(android.icu.text.Replaceable,int[],int,boolean)>
<android.icu.text.UnicodeFilter: boolean contains(int)>
<android.media.MediaDrm.OnKeyStatusChangeListener: void onKeyStatusChange(android.media.MediaDrm,byte[],java.util.List,boolean)>
<java.util.concurrent.Exchanger: V exchange(V,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.Exchanger: void <init>()>
<java.util.concurrent.Exchanger: V exchange(V)>
<android.os.Trace: void endAsyncSection(java.lang.String,int)>
<android.os.Trace: void endSection()>
<android.os.Trace: void beginAsyncSection(java.lang.String,int)>
<android.os.Trace: void setCounter(java.lang.String,long)>
<android.os.Trace: boolean isEnabled()>
<android.os.Trace: void beginSection(java.lang.String)>
<android.media.audiofx.PresetReverb.Settings: void <init>(String)>
<android.media.audiofx.PresetReverb.Settings: void <init>()>
<java.lang.Thread.UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>
<java.util.function.BiFunction: R apply(T,U)>
<java.util.function.BiFunction: java.util.function.BiFunction andThen(java.util.function.Function)>
<android.webkit.WebView.PictureListener: void onNewPicture(android.webkit.WebView,android.graphics.Picture)>
<android.service.persistentdata.PersistentDataBlockManager: int getDataBlockSize()>
<android.service.persistentdata.PersistentDataBlockManager: boolean getOemUnlockEnabled()>
<android.service.persistentdata.PersistentDataBlockManager: void wipe()>
<android.service.persistentdata.PersistentDataBlockManager: void setOemUnlockEnabled(boolean)>
<android.service.persistentdata.PersistentDataBlockManager: int getFlashLockState()>
<android.service.persistentdata.PersistentDataBlockManager: long getMaximumDataBlockSize()>
<android.service.persistentdata.PersistentDataBlockManager: byte[] read()>
<android.service.persistentdata.PersistentDataBlockManager: int write(byte[])>
<android.provider.CalendarContract: boolean startViewCalendarEventInManagedProfile(android.content.Context,long,long,long,boolean,int)>
<android.print.PrinterCapabilitiesInfo: int describeContents()>
<android.print.PrinterCapabilitiesInfo: android.print.PrintAttributes getDefaults()>
<android.print.PrinterCapabilitiesInfo: int getDuplexModes()>
<android.print.PrinterCapabilitiesInfo: java.util.List getResolutions()>
<android.print.PrinterCapabilitiesInfo: int getColorModes()>
<android.print.PrinterCapabilitiesInfo: java.util.List getMediaSizes()>
<android.print.PrinterCapabilitiesInfo: android.print.PrintAttributes.Margins getMinMargins()>
<android.print.PrinterCapabilitiesInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>
<android.view.PointerIcon: android.view.PointerIcon create(android.graphics.Bitmap,float,float)>
<android.view.PointerIcon: void writeToParcel(android.os.Parcel,int)>
<android.view.PointerIcon: int describeContents()>
<android.view.PointerIcon: android.view.PointerIcon load(android.content.res.Resources,@XmlResint)>
<android.os.IncidentReportArgs: void readFromParcel(android.os.Parcel)>
<android.os.IncidentReportArgs: boolean containsSection(int)>
<android.os.IncidentReportArgs: int sectionCount()>
<android.os.IncidentReportArgs: void writeToParcel(android.os.Parcel,int)>
<android.os.IncidentReportArgs: void <init>()>
<android.os.IncidentReportArgs: void <init>(android.os.Parcel)>
<android.os.IncidentReportArgs: void setAll(boolean)>
<android.os.IncidentReportArgs: int describeContents()>
<android.os.IncidentReportArgs: boolean isAll()>
<android.os.IncidentReportArgs: void addSection(int)>
<android.os.IncidentReportArgs: void addHeader(byte[])>
<android.os.IncidentReportArgs: void setPrivacyPolicy(int)>
<android.transition.ChangeImageTransform: void captureEndValues(android.transition.TransitionValues)>
<android.transition.ChangeImageTransform: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.ChangeImageTransform: void <init>()>
<android.transition.ChangeImageTransform: void captureStartValues(android.transition.TransitionValues)>
<java.util.function.LongPredicate: java.util.function.LongPredicate or(java.util.function.LongPredicate)>
<java.util.function.LongPredicate: java.util.function.LongPredicate negate()>
<java.util.function.LongPredicate: java.util.function.LongPredicate and(java.util.function.LongPredicate)>
<java.util.function.LongPredicate: boolean test(long)>
<android.location.GnssStatus.Callback: void onStarted()>
<android.location.GnssStatus.Callback: void onFirstFix(int)>
<android.location.GnssStatus.Callback: void <init>()>
<android.location.GnssStatus.Callback: void onSatelliteStatusChanged(android.location.GnssStatus)>
<android.location.GnssStatus.Callback: void onStopped()>
<android.media.audiofx.AudioEffect.Descriptor: void <init>(String,String,String,String,String)>
<android.media.audiofx.AudioEffect.Descriptor: void writeToParcel(android.os.Parcel)>
<android.media.audiofx.AudioEffect.Descriptor: void <init>(android.os.Parcel)>
<android.media.audiofx.AudioEffect.Descriptor: void <init>()>
<android.graphics.RectF: void union(float,float,float,float)>
<android.graphics.RectF: float height()>
<android.graphics.RectF: void roundOut(android.graphics.Rect)>
<android.graphics.RectF: boolean contains(float,float)>
<android.graphics.RectF: void union(float,float)>
<android.graphics.RectF: void offsetTo(float,float)>
<android.graphics.RectF: void <init>()>
<android.graphics.RectF: boolean intersects(android.graphics.RectF,android.graphics.RectF)>
<android.graphics.RectF: float centerY()>
<android.graphics.RectF: void setEmpty()>
<android.graphics.RectF: void <init>(float,float,float,float)>
<android.graphics.RectF: void set(float,float,float,float)>
<android.graphics.RectF: void inset(float,float)>
<android.graphics.RectF: void readFromParcel(android.os.Parcel)>
<android.graphics.RectF: void set(android.graphics.RectF)>
<android.graphics.RectF: void offset(float,float)>
<android.graphics.RectF: boolean isEmpty()>
<android.graphics.RectF: int describeContents()>
<android.graphics.RectF: void <init>(android.graphics.RectF)>
<android.graphics.RectF: void round(android.graphics.Rect)>
<android.graphics.RectF: void <init>(android.graphics.Rect)>
<android.graphics.RectF: boolean intersect(float,float,float,float)>
<android.graphics.RectF: boolean intersects(float,float,float,float)>
<android.graphics.RectF: void union(android.graphics.RectF)>
<android.graphics.RectF: void writeToParcel(android.os.Parcel,int)>
<android.graphics.RectF: boolean contains(float,float,float,float)>
<android.graphics.RectF: java.lang.String toShortString()>
<android.graphics.RectF: boolean contains(android.graphics.RectF)>
<android.graphics.RectF: float centerX()>
<android.graphics.RectF: float width()>
<android.graphics.RectF: void set(android.graphics.Rect)>
<android.graphics.RectF: boolean intersect(android.graphics.RectF)>
<android.graphics.RectF: boolean setIntersect(android.graphics.RectF,android.graphics.RectF)>
<android.graphics.RectF: void sort()>
<java.sql.PreparedStatement extends java.sql.Statement: void setObject(int,java.lang.Object)>
<java.sql.PreparedStatement extends java.sql.Statement: void setSQLXML(int,java.sql.SQLXML)>
<java.sql.PreparedStatement extends java.sql.Statement: void setNCharacterStream(int,java.io.Reader,long)>
<java.sql.PreparedStatement extends java.sql.Statement: void setAsciiStream(int,java.io.InputStream,int)>
<java.sql.PreparedStatement extends java.sql.Statement: void setBlob(int,java.sql.Blob)>
<java.sql.PreparedStatement extends java.sql.Statement: void setCharacterStream(int,java.io.Reader,long)>
<java.sql.PreparedStatement extends java.sql.Statement: void setNull(int,int,java.lang.String)>
<java.sql.PreparedStatement extends java.sql.Statement: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)>
<java.sql.PreparedStatement extends java.sql.Statement: void setBlob(int,java.io.InputStream,long)>
<java.sql.PreparedStatement extends java.sql.Statement: boolean execute()>
<java.sql.PreparedStatement extends java.sql.Statement: void setCharacterStream(int,java.io.Reader,int)>
<java.sql.PreparedStatement extends java.sql.Statement: void setShort(int,short)>
<java.sql.PreparedStatement extends java.sql.Statement: void setTime(int,java.sql.Time)>
<java.sql.PreparedStatement extends java.sql.Statement: void setDouble(int,double)>
<java.sql.PreparedStatement extends java.sql.Statement: void setFloat(int,float)>
<java.sql.PreparedStatement extends java.sql.Statement: void setByte(int,byte)>
<java.sql.PreparedStatement extends java.sql.Statement: void setRowId(int,java.sql.RowId)>
<java.sql.PreparedStatement extends java.sql.Statement: void setNClob(int,java.io.Reader,long)>
<java.sql.PreparedStatement extends java.sql.Statement: void setNull(int,int)>
<java.sql.PreparedStatement extends java.sql.Statement: void addBatch()>
<java.sql.PreparedStatement extends java.sql.Statement: void setNString(int,java.lang.String)>
<java.sql.PreparedStatement extends java.sql.Statement: void setTime(int,java.sql.Time,java.util.Calendar)>
<java.sql.PreparedStatement extends java.sql.Statement: int executeUpdate()>
<java.sql.PreparedStatement extends java.sql.Statement: void setBlob(int,java.io.InputStream)>
<java.sql.PreparedStatement extends java.sql.Statement: void setUnicodeStream(int,java.io.InputStream,int)>
<java.sql.PreparedStatement extends java.sql.Statement: void setBinaryStream(int,java.io.InputStream)>
<java.sql.PreparedStatement extends java.sql.Statement: void setClob(int,java.io.Reader)>
<java.sql.PreparedStatement extends java.sql.Statement: void setBoolean(int,boolean)>
<java.sql.PreparedStatement extends java.sql.Statement: void setNClob(int,java.io.Reader)>
<java.sql.PreparedStatement extends java.sql.Statement: void setString(int,java.lang.String)>
<java.sql.PreparedStatement extends java.sql.Statement: void clearParameters()>
<java.sql.PreparedStatement extends java.sql.Statement: java.sql.ResultSetMetaData getMetaData()>
<java.sql.PreparedStatement extends java.sql.Statement: void setBigDecimal(int,java.math.BigDecimal)>
<java.sql.PreparedStatement extends java.sql.Statement: void setDate(int,java.sql.Date)>
<java.sql.PreparedStatement extends java.sql.Statement: void setClob(int,java.sql.Clob)>
<java.sql.PreparedStatement extends java.sql.Statement: void setObject(int,java.lang.Object,int)>
<java.sql.PreparedStatement extends java.sql.Statement: void setDate(int,java.sql.Date,java.util.Calendar)>
<java.sql.PreparedStatement extends java.sql.Statement: void setTimestamp(int,java.sql.Timestamp)>
<java.sql.PreparedStatement extends java.sql.Statement: void setRef(int,java.sql.Ref)>
<java.sql.PreparedStatement extends java.sql.Statement: void setArray(int,java.sql.Array)>
<java.sql.PreparedStatement extends java.sql.Statement: void setURL(int,java.net.URL)>
<java.sql.PreparedStatement extends java.sql.Statement: void setCharacterStream(int,java.io.Reader)>
<java.sql.PreparedStatement extends java.sql.Statement: void setAsciiStream(int,java.io.InputStream,long)>
<java.sql.PreparedStatement extends java.sql.Statement: void setClob(int,java.io.Reader,long)>
<java.sql.PreparedStatement extends java.sql.Statement: java.sql.ResultSet executeQuery()>
<java.sql.PreparedStatement extends java.sql.Statement: void setNClob(int,java.sql.NClob)>
<java.sql.PreparedStatement extends java.sql.Statement: void setBytes(int,byte[])>
<java.sql.PreparedStatement extends java.sql.Statement: java.sql.ParameterMetaData getParameterMetaData()>
<java.sql.PreparedStatement extends java.sql.Statement: void setNCharacterStream(int,java.io.Reader)>
<java.sql.PreparedStatement extends java.sql.Statement: void setBinaryStream(int,java.io.InputStream,int)>
<java.sql.PreparedStatement extends java.sql.Statement: void setBinaryStream(int,java.io.InputStream,long)>
<java.sql.PreparedStatement extends java.sql.Statement: void setInt(int,int)>
<java.sql.PreparedStatement extends java.sql.Statement: void setObject(int,java.lang.Object,int,int)>
<java.sql.PreparedStatement extends java.sql.Statement: void setLong(int,long)>
<java.sql.PreparedStatement extends java.sql.Statement: void setAsciiStream(int,java.io.InputStream)>
<javax.security.auth.Destroyable: boolean isDestroyed()>
<javax.security.auth.Destroyable: void destroy()>
<android.net.LocalSocketAddress: android.net.LocalSocketAddress.Namespace getNamespace()>
<android.net.LocalSocketAddress: void <init>(String,android.net.LocalSocketAddress.Namespace)>
<android.net.LocalSocketAddress: java.lang.String getName()>
<android.net.LocalSocketAddress: void <init>(String)>
<android.view.MenuItem.OnActionExpandListener: boolean onMenuItemActionExpand(android.view.MenuItem)>
<android.view.MenuItem.OnActionExpandListener: boolean onMenuItemActionCollapse(android.view.MenuItem)>
<android.util.AndroidException: void <init>(String,Throwable)>
<android.util.AndroidException: void <init>()>
<android.util.AndroidException: void <init>(Exception)>
<android.util.AndroidException: void <init>(String)>
<android.net.NetworkInfo: boolean isConnected()>
<android.net.NetworkInfo: java.lang.String getSubtypeName()>
<android.net.NetworkInfo: int getSubtype()>
<android.net.NetworkInfo: android.net.NetworkInfo.State getState()>
<android.net.NetworkInfo: boolean isAvailable()>
<android.net.NetworkInfo: android.net.NetworkInfo.DetailedState getDetailedState()>
<android.net.NetworkInfo: void writeToParcel(android.os.Parcel,int)>
<android.net.NetworkInfo: int describeContents()>
<android.net.NetworkInfo: int getType()>
<android.net.NetworkInfo: java.lang.String getReason()>
<android.net.NetworkInfo: java.lang.String getExtraInfo()>
<android.net.NetworkInfo: java.lang.String getTypeName()>
<android.net.NetworkInfo: boolean isFailover()>
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>
<android.net.NetworkInfo: boolean isRoaming()>
<android.os.Debug.InstructionCount: int globalTotal()>
<android.os.Debug.InstructionCount: void <init>()>
<android.os.Debug.InstructionCount: int globalMethodInvocations()>
<android.os.Debug.InstructionCount: boolean resetAndStart()>
<android.os.Debug.InstructionCount: boolean collect()>
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLongLabel(CharSequence)>
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setActivity(android.content.ComponentName)>
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIcon(android.graphics.drawable.Icon)>
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo build()>
<android.content.pm.ShortcutInfo.Builder: void <init>(android.content.Context,String)>
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setShortLabel(CharSequence)>
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setRank(int)>
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setPersons(android.app.Person[])>
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIntent(android.content.Intent)>
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setIntents(android.content.Intent[])>
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setExtras(android.os.PersistableBundle)>
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLocusId(android.content.LocusId)>
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setPerson(android.app.Person)>
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setDisabledMessage(CharSequence)>
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setCategories(java.util.Set)>
<android.content.pm.ShortcutInfo.Builder: android.content.pm.ShortcutInfo.Builder setLongLived(boolean)>
<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>
<java.security.KeyFactory: T getKeySpec(java.security.Key,java.lang.Class)>
<java.security.KeyFactory: java.security.Provider getProvider()>
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.security.Provider)>
<java.security.KeyFactory: void <init>(java.security.KeyFactorySpi,java.security.Provider,String)>
<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>
<java.security.KeyFactory: java.security.Key translateKey(java.security.Key)>
<java.security.KeyFactory: java.lang.String getAlgorithm()>
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>
<android.media.SoundPool.OnLoadCompleteListener: void onLoadComplete(android.media.SoundPool,int,int)>
<android.renderscript.ScriptIntrinsicColorMatrix: void setAdd(float,float,float,float)>
<android.renderscript.ScriptIntrinsicColorMatrix: void setRGBtoYUV()>
<android.renderscript.ScriptIntrinsicColorMatrix: android.renderscript.ScriptIntrinsicColorMatrix create(android.renderscript.RenderScript)>
<android.renderscript.ScriptIntrinsicColorMatrix: android.renderscript.ScriptIntrinsicColorMatrix create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicColorMatrix: void forEach(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicColorMatrix: void forEach(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicColorMatrix: android.renderscript.Script.KernelID getKernelID()>
<android.renderscript.ScriptIntrinsicColorMatrix: void setAdd(android.renderscript.Float4)>
<android.renderscript.ScriptIntrinsicColorMatrix: void setColorMatrix(android.renderscript.Matrix3f)>
<android.renderscript.ScriptIntrinsicColorMatrix: void setGreyscale()>
<android.renderscript.ScriptIntrinsicColorMatrix: void setYUVtoRGB()>
<android.renderscript.ScriptIntrinsicColorMatrix: void setColorMatrix(android.renderscript.Matrix4f)>
<java.time.Year: java.time.Year parse(CharSequence,java.time.format.DateTimeFormatter)>
<java.time.Year: boolean isLeap()>
<java.time.Year: boolean isBefore(java.time.Year)>
<java.time.Year: java.time.YearMonth atMonth(java.time.Month)>
<java.time.Year: boolean isSupported(java.time.temporal.TemporalUnit)>
<java.time.Year: java.time.Year now(java.time.Clock)>
<java.time.Year: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>
<java.time.Year: boolean isLeap(long)>
<java.time.Year: boolean isAfter(java.time.Year)>
<java.time.Year: java.time.Year plus(java.time.temporal.TemporalAmount)>
<java.time.Year: java.time.Year with(java.time.temporal.TemporalField,long)>
<java.time.Year: boolean isSupported(java.time.temporal.TemporalField)>
<java.time.Year: java.time.Year now(java.time.ZoneId)>
<java.time.Year: java.time.Year plus(long,java.time.temporal.TemporalUnit)>
<java.time.Year: java.time.Year now()>
<java.time.Year: boolean isValidMonthDay(java.time.MonthDay)>
<java.time.Year: java.lang.String format(java.time.format.DateTimeFormatter)>
<java.time.Year: java.time.Year from(java.time.temporal.TemporalAccessor)>
<java.time.Year: java.time.Year minus(long,java.time.temporal.TemporalUnit)>
<java.time.Year: long getLong(java.time.temporal.TemporalField)>
<java.time.Year: java.time.YearMonth atMonth(int)>
<java.time.Year: java.time.Year minus(java.time.temporal.TemporalAmount)>
<java.time.Year: java.time.Year minusYears(long)>
<java.time.Year: int length()>
<java.time.Year: int compareTo(java.time.Year)>
<java.time.Year: java.time.LocalDate atMonthDay(java.time.MonthDay)>
<java.time.Year: java.time.Year of(int)>
<java.time.Year: int getValue()>
<java.time.Year: java.time.Year with(java.time.temporal.TemporalAdjuster)>
<java.time.Year: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>
<java.time.Year: java.time.Year parse(CharSequence)>
<java.time.Year: java.time.LocalDate atDay(int)>
<java.time.Year: java.time.Year plusYears(long)>
<java.net.CookieManager: void <init>()>
<java.net.CookieManager: void <init>(java.net.CookieStore,java.net.CookiePolicy)>
<java.net.CookieManager: void setCookiePolicy(java.net.CookiePolicy)>
<java.net.CookieManager: java.util.Map get(java.net.URI,java.util.Map)>
<java.net.CookieManager: java.net.CookieStore getCookieStore()>
<java.net.CookieManager: void put(java.net.URI,java.util.Map)>
<android.media.VolumeShaper.Configuration: float[] getTimes()>
<android.media.VolumeShaper.Configuration: float[] getVolumes()>
<android.media.VolumeShaper.Configuration: int describeContents()>
<android.media.VolumeShaper.Configuration: int getInterpolatorType()>
<android.media.VolumeShaper.Configuration: long getDuration()>
<android.media.VolumeShaper.Configuration: int getMaximumCurvePoints()>
<android.media.VolumeShaper.Configuration: void writeToParcel(android.os.Parcel,int)>
<android.media.soundtrigger.SoundTriggerManager.Model: byte[] getModelData()>
<android.media.soundtrigger.SoundTriggerManager.Model: java.util.UUID getVendorUuid()>
<android.media.soundtrigger.SoundTriggerManager.Model: java.util.UUID getModelUuid()>
<android.media.soundtrigger.SoundTriggerManager.Model: android.media.soundtrigger.SoundTriggerManager.Model create(java.util.UUID,java.util.UUID,byte[])>
<android.telephony.UiccCardInfo: java.lang.String getIccId()>
<android.telephony.UiccCardInfo: int getCardId()>
<android.telephony.UiccCardInfo: boolean isEuicc()>
<android.telephony.UiccCardInfo: boolean isRemovable()>
<android.telephony.UiccCardInfo: int describeContents()>
<android.telephony.UiccCardInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.UiccCardInfo: java.lang.String getEid()>
<android.telephony.UiccCardInfo: int getSlotIndex()>
<android.util.Size: int getHeight()>
<android.util.Size: void <init>(int,int)>
<android.util.Size: int getWidth()>
<android.util.Size: android.util.Size parseSize(java.lang.String)>
<java.io.UTFDataFormatException: void <init>()>
<java.io.UTFDataFormatException: void <init>(String)>
<android.app.slice.Slice.Builder: void <init>(android.net.Uri,android.app.slice.SliceSpec)>
<android.app.slice.Slice.Builder: android.app.slice.Slice.Builder addSubSlice(android.app.slice.Slice,java.lang.String)>
<android.app.slice.Slice.Builder: android.app.slice.Slice.Builder addRemoteInput(android.app.RemoteInput,java.lang.String,java.util.List)>
<android.app.slice.Slice.Builder: android.app.slice.Slice.Builder addAction(android.app.PendingIntent,android.app.slice.Slice,java.lang.String)>
<android.app.slice.Slice.Builder: android.app.slice.Slice.Builder addBundle(android.os.Bundle,java.lang.String,java.util.List)>
<android.app.slice.Slice.Builder: android.app.slice.Slice.Builder addHints(java.util.List)>
<android.app.slice.Slice.Builder: android.app.slice.Slice build()>
<android.app.slice.Slice.Builder: android.app.slice.Slice.Builder addIcon(android.graphics.drawable.Icon,java.lang.String,java.util.List)>
<android.app.slice.Slice.Builder: android.app.slice.Slice.Builder setCallerNeeded(boolean)>
<android.app.slice.Slice.Builder: android.app.slice.Slice.Builder addInt(int,java.lang.String,java.util.List)>
<android.app.slice.Slice.Builder: void <init>(android.app.slice.Slice.Builder)>
<android.app.slice.Slice.Builder: android.app.slice.Slice.Builder addLong(long,java.lang.String,java.util.List)>
<android.app.slice.Slice.Builder: android.app.slice.Slice.Builder addText(CharSequence,java.lang.String,java.util.List)>
<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)>
<javax.security.auth.x500.X500Principal: java.lang.String getName()>
<javax.security.auth.x500.X500Principal: void <init>(String,java.util.Map)>
<javax.security.auth.x500.X500Principal: void <init>(String)>
<javax.security.auth.x500.X500Principal: void <init>(byte[])>
<javax.security.auth.x500.X500Principal: byte[] getEncoded()>
<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String,java.util.Map)>
<javax.security.auth.x500.X500Principal: void <init>(java.io.InputStream)>
<android.text.style.TabStopSpan.Standard: int getTabStop()>
<android.text.style.TabStopSpan.Standard: void <init>(from=0) int)>
<android.os.DropBoxManager.Entry: void close()>
<android.os.DropBoxManager.Entry: int getFlags()>
<android.os.DropBoxManager.Entry: void writeToParcel(android.os.Parcel,int)>
<android.os.DropBoxManager.Entry: void <init>(String,long,java.io.File,int)>
<android.os.DropBoxManager.Entry: void <init>(String,long)>
<android.os.DropBoxManager.Entry: void <init>(String,long,android.os.ParcelFileDescriptor,int)>
<android.os.DropBoxManager.Entry: long getTimeMillis()>
<android.os.DropBoxManager.Entry: void <init>(String,long,String)>
<android.os.DropBoxManager.Entry: java.lang.String getTag()>
<android.os.DropBoxManager.Entry: java.io.InputStream getInputStream()>
<android.os.DropBoxManager.Entry: java.lang.String getText(int)>
<android.os.DropBoxManager.Entry: int describeContents()>
<android.os.DropBoxManager.Entry: void <init>(String,long,byte[],int)>
<android.app.MediaRouteButton: void setExtendedSettingsClickListener(android.view.View.OnClickListener)>
<android.app.MediaRouteButton: void setRouteTypes(int)>
<android.app.MediaRouteButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.app.MediaRouteButton: void <init>(android.content.Context)>
<android.app.MediaRouteButton: int getRouteTypes()>
<android.app.MediaRouteButton: void onAttachedToWindow()>
<android.app.MediaRouteButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.app.MediaRouteButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.app.MediaRouteButton: void onDetachedFromWindow()>
<android.app.MediaRouteButton: void showDialog()>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: java.lang.String getColumnClassName(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: java.lang.String getColumnName(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: int getColumnType(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: boolean isCurrency(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: boolean isSearchable(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: java.lang.String getColumnLabel(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: boolean isCaseSensitive(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: int getPrecision(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: boolean isReadOnly(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: boolean isSigned(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: boolean isWritable(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: java.lang.String getSchemaName(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: java.lang.String getTableName(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: boolean isAutoIncrement(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: int getColumnDisplaySize(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: int getColumnCount()>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: java.lang.String getColumnTypeName(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: int isNullable(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: java.lang.String getCatalogName(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: int getScale(int)>
<java.sql.ResultSetMetaData extends java.sql.Wrapper: boolean isDefinitelyWritable(int)>
<android.net.metrics.NetworkEvent: void <init>(int)>
<android.net.metrics.NetworkEvent: void <init>(int,long)>
<android.view.animation.AnimationUtils: void <init>()>
<android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,@AnimResint)>
<android.view.animation.AnimationUtils: android.view.animation.Animation makeOutAnimation(android.content.Context,boolean)>
<android.view.animation.AnimationUtils: void unlockAnimationClock()>
<android.view.animation.AnimationUtils: android.view.animation.LayoutAnimationController loadLayoutAnimation(android.content.Context,@AnimResint)>
<android.view.animation.AnimationUtils: android.view.animation.Animation makeInAnimation(android.content.Context,boolean)>
<android.view.animation.AnimationUtils: android.view.animation.Animation makeInChildBottomAnimation(android.content.Context)>
<android.view.animation.AnimationUtils: long currentAnimationTimeMillis()>
<android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,@AnimRes@InterpolatorResint)>
<android.view.animation.AnimationUtils: void lockAnimationClock(long)>
<android.service.notification.Condition: java.lang.String relevanceToString(int)>
<android.service.notification.Condition: java.lang.String stateToString(int)>
<android.service.notification.Condition: void writeToParcel(android.os.Parcel,int)>
<android.service.notification.Condition: void <init>(android.net.Uri,String,int)>
<android.service.notification.Condition: int describeContents()>
<android.service.notification.Condition: android.service.notification.Condition copy()>
<android.service.notification.Condition: void <init>(android.os.Parcel)>
<android.service.notification.Condition: void <init>(android.net.Uri,String,String,String,int,int,int)>
<android.service.notification.Condition: boolean isValidId(android.net.Uri,java.lang.String)>
<android.service.notification.Condition: android.net.Uri.Builder newId(android.content.Context)>
<android.telephony.ims.ImsVideoCallProvider: void changeCallDataUsage(long)>
<android.telephony.ims.ImsVideoCallProvider: void <init>()>
<android.telephony.ims.ImsVideoCallProvider: void changeVideoQuality(int)>
<android.telephony.ims.ImsVideoCallProvider: void onSendSessionModifyResponse(android.telecom.VideoProfile)>
<android.telephony.ims.ImsVideoCallProvider: void receiveSessionModifyResponse(int,android.telecom.VideoProfile,android.telecom.VideoProfile)>
<android.telephony.ims.ImsVideoCallProvider: void onSetPreviewSurface(android.view.Surface)>
<android.telephony.ims.ImsVideoCallProvider: void changeCameraCapabilities(android.telecom.VideoProfile.CameraCapabilities)>
<android.telephony.ims.ImsVideoCallProvider: void onSetPauseImage(android.net.Uri)>
<android.telephony.ims.ImsVideoCallProvider: void changePeerDimensions(int,int)>
<android.telephony.ims.ImsVideoCallProvider: void onSetCamera(java.lang.String)>
<android.telephony.ims.ImsVideoCallProvider: void onSetCamera(java.lang.String,int)>
<android.telephony.ims.ImsVideoCallProvider: void handleCallSessionEvent(int)>
<android.telephony.ims.ImsVideoCallProvider: void onSendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>
<android.telephony.ims.ImsVideoCallProvider: void onRequestCameraCapabilities()>
<android.telephony.ims.ImsVideoCallProvider: void onRequestCallDataUsage()>
<android.telephony.ims.ImsVideoCallProvider: void receiveSessionModifyRequest(android.telecom.VideoProfile)>
<android.telephony.ims.ImsVideoCallProvider: void onSetDeviceOrientation(int)>
<android.telephony.ims.ImsVideoCallProvider: void onSetDisplaySurface(android.view.Surface)>
<android.telephony.ims.ImsVideoCallProvider: void onSetZoom(float)>
<java.io.FilterInputStream: void <init>(java.io.InputStream)>
<java.io.FilterInputStream: int read()>
<java.util.Deque extends java.util.Queue: E removeLast()>
<java.util.Deque extends java.util.Queue: void addLast(E)>
<java.util.Deque extends java.util.Queue: E pop()>
<java.util.Deque extends java.util.Queue: E removeFirst()>
<java.util.Deque extends java.util.Queue: E peekLast()>
<java.util.Deque extends java.util.Queue: E pollLast()>
<java.util.Deque extends java.util.Queue: E getFirst()>
<java.util.Deque extends java.util.Queue: E getLast()>
<java.util.Deque extends java.util.Queue: boolean removeLastOccurrence(java.lang.Object)>
<java.util.Deque extends java.util.Queue: boolean offerFirst(E)>
<java.util.Deque extends java.util.Queue: boolean offerLast(E)>
<java.util.Deque extends java.util.Queue: void addFirst(E)>
<java.util.Deque extends java.util.Queue: void push(E)>
<java.util.Deque extends java.util.Queue: boolean removeFirstOccurrence(java.lang.Object)>
<java.util.Deque extends java.util.Queue: E pollFirst()>
<java.util.Deque extends java.util.Queue: E peekFirst()>
<java.util.Deque extends java.util.Queue: java.util.Iterator descendingIterator()>
<android.icu.util.ICUUncheckedIOException: void <init>()>
<android.icu.util.ICUUncheckedIOException: void <init>(Throwable)>
<android.icu.util.ICUUncheckedIOException: void <init>(String)>
<android.icu.util.ICUUncheckedIOException: void <init>(String,Throwable)>
<android.icu.lang.UScript: int getCodeFromName(java.lang.String)>
<android.icu.lang.UScript: android.icu.lang.UScript.ScriptUsage getUsage(int)>
<android.icu.lang.UScript: java.lang.String getName(int)>
<android.icu.lang.UScript: java.lang.String getShortName(int)>
<android.icu.lang.UScript: boolean isRightToLeft(int)>
<android.icu.lang.UScript: int getScript(int)>
<android.icu.lang.UScript: int getScriptExtensions(int,java.util.BitSet)>
<android.icu.lang.UScript: boolean hasScript(int,int)>
<android.icu.lang.UScript: int[] getCode(java.lang.String)>
<android.icu.lang.UScript: boolean isCased(int)>
<android.icu.lang.UScript: int[] getCode(java.util.Locale)>
<android.icu.lang.UScript: boolean breaksBetweenLetters(int)>
<android.icu.lang.UScript: int[] getCode(android.icu.util.ULocale)>
<android.icu.lang.UScript: java.lang.String getSampleString(int)>
<javax.sql.StatementEventListener extends java.util.EventListener: void statementClosed(javax.sql.StatementEvent)>
<javax.sql.StatementEventListener extends java.util.EventListener: void statementErrorOccurred(javax.sql.StatementEvent)>
<android.media.TimedText: java.lang.String getText()>
<android.media.TimedText: android.graphics.Rect getBounds()>
<android.net.wifi.aware.DiscoverySession: void close()>
<android.net.wifi.aware.DiscoverySession: android.net.NetworkSpecifier createNetworkSpecifierOpen(android.net.wifi.aware.PeerHandle)>
<android.net.wifi.aware.DiscoverySession: android.net.NetworkSpecifier createNetworkSpecifierPmk(android.net.wifi.aware.PeerHandle,byte[])>
<android.net.wifi.aware.DiscoverySession: void sendMessage(android.net.wifi.aware.PeerHandle,int,byte[])>
<android.net.wifi.aware.DiscoverySession: android.net.NetworkSpecifier createNetworkSpecifierPassphrase(android.net.wifi.aware.PeerHandle,java.lang.String)>
<android.provider.Telephony.Sms.Intents: android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent)>
<android.view.animation.Animation.AnimationListener: void onAnimationStart(android.view.animation.Animation)>
<android.view.animation.Animation.AnimationListener: void onAnimationEnd(android.view.animation.Animation)>
<android.view.animation.Animation.AnimationListener: void onAnimationRepeat(android.view.animation.Animation)>
<java.lang.reflect.MalformedParametersException: void <init>(String)>
<java.lang.reflect.MalformedParametersException: void <init>()>
<java.util.Queue extends java.util.Collection: E element()>
<java.util.Queue extends java.util.Collection: E poll()>
<java.util.Queue extends java.util.Collection: boolean offer(E)>
<java.util.Queue extends java.util.Collection: E peek()>
<java.util.Queue extends java.util.Collection: E remove()>
<android.provider.Settings.Global: int getInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings.Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings.Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Settings.Global: void <init>()>
<android.provider.Settings.Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.provider.Settings.Global: android.net.Uri getUriFor(java.lang.String)>
<android.provider.Settings.Global: float getFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings.Global: boolean putLong(android.content.ContentResolver,java.lang.String,long)>
<android.provider.Settings.Global: long getLong(android.content.ContentResolver,java.lang.String,long)>
<android.provider.Settings.Global: void resetToDefaults(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings.Global: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings.Global: int getInt(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings.Global: long getLong(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings.Global: float getFloat(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings.Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
<android.service.autofill.augmented.PresentationParams: android.service.autofill.augmented.PresentationParams.Area getSuggestionArea()>
<android.text.style.MaskFilterSpan: void <init>(android.graphics.MaskFilter)>
<android.text.style.MaskFilterSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.MaskFilterSpan: android.graphics.MaskFilter getMaskFilter()>
<android.text.method.SingleLineTransformationMethod: char[] getOriginal()>
<android.text.method.SingleLineTransformationMethod: android.text.method.SingleLineTransformationMethod getInstance()>
<android.text.method.SingleLineTransformationMethod: char[] getReplacement()>
<android.text.method.SingleLineTransformationMethod: void <init>()>
<android.os.FileUriExposedException: void <init>(String)>
<android.content.pm.PermissionInfo: int getProtectionFlags()>
<android.content.pm.PermissionInfo: void <init>(android.content.pm.PermissionInfo)>
<android.content.pm.PermissionInfo: int describeContents()>
<android.content.pm.PermissionInfo: void <init>()>
<android.content.pm.PermissionInfo: int getProtection()>
<android.content.pm.PermissionInfo: CharSequence loadDescription(android.content.pm.PackageManager)>
<java.nio.file.attribute.UserPrincipalNotFoundException: void <init>(String)>
<java.nio.file.attribute.UserPrincipalNotFoundException: java.lang.String getName()>
<android.widget.ZoomControls: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ZoomControls: void setIsZoomInEnabled(boolean)>
<android.widget.ZoomControls: void hide()>
<android.widget.ZoomControls: void setOnZoomInClickListener(android.view.View.OnClickListener)>
<android.widget.ZoomControls: void show()>
<android.widget.ZoomControls: java.lang.String methodName()>
<android.widget.ZoomControls: void setOnZoomOutClickListener(android.view.View.OnClickListener)>
<android.widget.ZoomControls: void setZoomSpeed(long)>
<android.widget.ZoomControls: void setIsZoomOutEnabled(boolean)>
<android.widget.ZoomControls: java.lang.String conceptName()>
<android.widget.ZoomControls: java.lang.Class[] methodArgs()>
<android.widget.ZoomControls: java.lang.Class value()>
<android.widget.ZoomControls: void <init>(android.content.Context)>
<java.time.temporal.TemporalQuery: R queryFrom(java.time.temporal.TemporalAccessor)>
<android.telephony.data.DataProfile: int describeContents()>
<android.telephony.data.DataProfile: java.lang.String getUserName()>
<android.telephony.data.DataProfile: int getRoamingProtocolType()>
<android.telephony.data.DataProfile: int getType()>
<android.telephony.data.DataProfile: int getBearerBitmask()>
<android.telephony.data.DataProfile: int getSupportedApnTypesBitmask()>
<android.telephony.data.DataProfile: boolean isPreferred()>
<android.telephony.data.DataProfile: int getProtocolType()>
<android.telephony.data.DataProfile: int getProfileId()>
<android.telephony.data.DataProfile: java.lang.String getApn()>
<android.telephony.data.DataProfile: boolean isEnabled()>
<android.telephony.data.DataProfile: java.lang.String getPassword()>
<android.telephony.data.DataProfile: void writeToParcel(android.os.Parcel,int)>
<android.telephony.data.DataProfile: int getMtu()>
<android.telephony.data.DataProfile: boolean isPersistent()>
<android.telephony.data.DataProfile: int getAuthType()>
<android.graphics.drawable.ColorDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.ColorDrawable: int getOpacity()>
<android.graphics.drawable.ColorDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.ColorDrawable: android.graphics.Xfermode getXfermode()>
<android.graphics.drawable.ColorDrawable: void <init>(@ColorInt int)>
<android.graphics.drawable.ColorDrawable: void setAlpha(int)>
<android.graphics.drawable.ColorDrawable: void <init>()>
<android.graphics.drawable.ColorDrawable: int getColor()>
<android.graphics.drawable.ColorDrawable: void setColor(@ColorIntint)>
<android.net.InetAddresses: java.net.InetAddress parseNumericAddress(java.lang.String)>
<android.net.InetAddresses: boolean isNumericAddress(java.lang.String)>
<android.media.VolumeShaper: void apply(android.media.VolumeShaper.Operation)>
<android.media.VolumeShaper: void replace(android.media.VolumeShaper.Configuration,android.media.VolumeShaper.Operation,boolean)>
<android.media.VolumeShaper: void close()>
<android.media.VolumeShaper: void finalize()>
<android.media.VolumeShaper: float getVolume()>
<android.nfc.cardemulation.CardEmulation: boolean categoryAllowsForegroundPreference(java.lang.String)>
<android.nfc.cardemulation.CardEmulation: boolean supportsAidPrefixRegistration()>
<android.nfc.cardemulation.CardEmulation: boolean registerAidsForService(android.content.ComponentName,java.lang.String,java.util.List)>
<android.nfc.cardemulation.CardEmulation: int getSelectionModeForCategory(java.lang.String)>
<android.nfc.cardemulation.CardEmulation: boolean isDefaultServiceForAid(android.content.ComponentName,java.lang.String)>
<android.nfc.cardemulation.CardEmulation: boolean unsetPreferredService(android.app.Activity)>
<android.nfc.cardemulation.CardEmulation: boolean setPreferredService(android.app.Activity,android.content.ComponentName)>
<android.nfc.cardemulation.CardEmulation: boolean setOffHostForService(android.content.ComponentName,java.lang.String)>
<android.nfc.cardemulation.CardEmulation: android.nfc.cardemulation.CardEmulation getInstance(android.nfc.NfcAdapter)>
<android.nfc.cardemulation.CardEmulation: java.util.List getAidsForService(android.content.ComponentName,java.lang.String)>
<android.nfc.cardemulation.CardEmulation: boolean removeAidsForService(android.content.ComponentName,java.lang.String)>
<android.nfc.cardemulation.CardEmulation: boolean unsetOffHostForService(android.content.ComponentName)>
<android.nfc.cardemulation.CardEmulation: boolean isDefaultServiceForCategory(android.content.ComponentName,java.lang.String)>
<javax.sql.RowSetEvent: void <init>(javax.sql.RowSet)>
<android.se.omapi.Session: void closeChannels()>
<android.se.omapi.Session: void close()>
<android.se.omapi.Session: byte[] getATR()>
<android.se.omapi.Session: android.se.omapi.Channel openBasicChannel(byte[],byte)>
<android.se.omapi.Session: android.se.omapi.Channel openBasicChannel(byte[])>
<android.se.omapi.Session: android.se.omapi.Channel openLogicalChannel(byte[])>
<android.se.omapi.Session: android.se.omapi.Reader getReader()>
<android.se.omapi.Session: android.se.omapi.Channel openLogicalChannel(byte[],byte)>
<android.se.omapi.Session: boolean isClosed()>
<java.lang.InternalError: void <init>(Throwable)>
<java.lang.InternalError: void <init>()>
<java.lang.InternalError: void <init>(String,Throwable)>
<java.lang.InternalError: void <init>(String)>
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String,java.lang.String)>
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String)>
<java.security.cert.CertPathBuilder: java.security.Provider getProvider()>
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String,java.security.Provider)>
<java.security.cert.CertPathBuilder: void <init>(java.security.cert.CertPathBuilderSpi,java.security.Provider,String)>
<java.security.cert.CertPathBuilder: java.security.cert.CertPathChecker getRevocationChecker()>
<java.security.cert.CertPathBuilder: java.lang.String getAlgorithm()>
<java.security.cert.CertPathBuilder: java.lang.String getDefaultType()>
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilderResult build(java.security.cert.CertPathParameters)>
<android.graphics.ColorMatrix: void reset()>
<android.graphics.ColorMatrix: void <init>(float[])>
<android.graphics.ColorMatrix: void setRotate(int,float)>
<android.graphics.ColorMatrix: void setRGB2YUV()>
<android.graphics.ColorMatrix: void <init>()>
<android.graphics.ColorMatrix: void <init>(android.graphics.ColorMatrix)>
<android.graphics.ColorMatrix: void setScale(float,float,float,float)>
<android.graphics.ColorMatrix: void set(android.graphics.ColorMatrix)>
<android.graphics.ColorMatrix: void set(float[])>
<android.graphics.ColorMatrix: float[] getArray()>
<android.graphics.ColorMatrix: void setSaturation(float)>
<android.graphics.ColorMatrix: void postConcat(android.graphics.ColorMatrix)>
<android.graphics.ColorMatrix: void preConcat(android.graphics.ColorMatrix)>
<android.graphics.ColorMatrix: void setConcat(android.graphics.ColorMatrix,android.graphics.ColorMatrix)>
<android.graphics.ColorMatrix: void setYUV2RGB()>
<android.os.UpdateEngine.UpdateStatusConstants: void <init>()>
<android.content.pm.SigningInfo: void <init>(android.content.pm.SigningInfo)>
<android.content.pm.SigningInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.SigningInfo: android.content.pm.Signature[] getApkContentsSigners()>
<android.content.pm.SigningInfo: boolean hasPastSigningCertificates()>
<android.content.pm.SigningInfo: int describeContents()>
<android.content.pm.SigningInfo: android.content.pm.Signature[] getSigningCertificateHistory()>
<android.content.pm.SigningInfo: void <init>()>
<android.content.pm.SigningInfo: boolean hasMultipleSigners()>
<android.widget.NumberPicker.OnValueChangeListener: void onValueChange(android.widget.NumberPicker,int,int)>
<android.app.slice.SliceSpec: void <init>(String,int)>
<android.app.slice.SliceSpec: java.lang.String getType()>
<android.app.slice.SliceSpec: int describeContents()>
<android.app.slice.SliceSpec: boolean canRender(android.app.slice.SliceSpec)>
<android.app.slice.SliceSpec: int getRevision()>
<android.app.slice.SliceSpec: void writeToParcel(android.os.Parcel,int)>
<java.lang.reflect.ReflectPermission: void <init>(String)>
<java.lang.reflect.ReflectPermission: void <init>(String,String)>
<android.security.keystore.AttestationUtils: java.security.cert.X509Certificate[] attestDeviceIds(android.content.Context,int[],byte[])>
<android.hardware.camera2.CameraMetadata: java.util.List getKeys()>
<android.graphics.drawable.Drawable.Callback: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.Drawable.Callback: void unscheduleDrawable(android.graphics.drawable.Drawable,Runnable)>
<android.graphics.drawable.Drawable.Callback: void scheduleDrawable(android.graphics.drawable.Drawable,Runnable,long)>
<android.media.MediaDescription.Builder: void <init>()>
<android.media.MediaDescription.Builder: android.media.MediaDescription.Builder setMediaUri(android.net.Uri)>
<android.media.MediaDescription.Builder: android.media.MediaDescription.Builder setTitle(CharSequence)>
<android.media.MediaDescription.Builder: android.media.MediaDescription.Builder setDescription(CharSequence)>
<android.media.MediaDescription.Builder: android.media.MediaDescription.Builder setIconBitmap(android.graphics.Bitmap)>
<android.media.MediaDescription.Builder: android.media.MediaDescription.Builder setIconUri(android.net.Uri)>
<android.media.MediaDescription.Builder: android.media.MediaDescription.Builder setExtras(android.os.Bundle)>
<android.media.MediaDescription.Builder: android.media.MediaDescription.Builder setSubtitle(CharSequence)>
<android.media.MediaDescription.Builder: android.media.MediaDescription.Builder setMediaId(java.lang.String)>
<android.media.MediaDescription.Builder: android.media.MediaDescription build()>
<android.graphics.drawable.RotateDrawable: boolean isPivotYRelative()>
<android.graphics.drawable.RotateDrawable: void <init>()>
<android.graphics.drawable.RotateDrawable: void setPivotXRelative(boolean)>
<android.graphics.drawable.RotateDrawable: float getFromDegrees()>
<android.graphics.drawable.RotateDrawable: void setPivotYRelative(boolean)>
<android.graphics.drawable.RotateDrawable: boolean isPivotXRelative()>
<android.graphics.drawable.RotateDrawable: float getPivotX()>
<android.graphics.drawable.RotateDrawable: float getPivotY()>
<android.graphics.drawable.RotateDrawable: void setFromDegrees(float)>
<android.graphics.drawable.RotateDrawable: float getToDegrees()>
<android.graphics.drawable.RotateDrawable: void setPivotY(float)>
<android.graphics.drawable.RotateDrawable: void setToDegrees(float)>
<android.graphics.drawable.RotateDrawable: void setPivotX(float)>
<android.app.Notification.MessagingStyle.Message: java.lang.String getDataMimeType()>
<android.app.Notification.MessagingStyle.Message: void <init>(CharSequence,long,android.app.Person)>
<android.app.Notification.MessagingStyle.Message: android.app.Notification.MessagingStyle.Message setData(java.lang.String,android.net.Uri)>
<android.app.Notification.MessagingStyle.Message: CharSequence getSender()>
<android.app.Notification.MessagingStyle.Message: android.os.Bundle getExtras()>
<android.app.Notification.MessagingStyle.Message: android.app.Person getSenderPerson()>
<android.app.Notification.MessagingStyle.Message: CharSequence getText()>
<android.app.Notification.MessagingStyle.Message: android.net.Uri getDataUri()>
<android.app.Notification.MessagingStyle.Message: void <init>(CharSequence,long,CharSequence)>
<android.app.Notification.MessagingStyle.Message: long getTimestamp()>
<android.icu.util.ULocale: java.lang.String getDisplayKeyword(java.lang.String,java.lang.String)>
<android.icu.util.ULocale: java.util.Iterator getKeywords()>
<android.icu.util.ULocale: java.lang.String getBaseName()>
<android.icu.util.ULocale: java.lang.String getDisplayScript()>
<android.icu.util.ULocale: java.lang.String toLanguageTag()>
<android.icu.util.ULocale: java.lang.String getDisplayCountry(java.lang.String,java.lang.String)>
<android.icu.util.ULocale: java.lang.String canonicalize(java.lang.String)>
<android.icu.util.ULocale: java.lang.String getDisplayName(android.icu.util.ULocale)>
<android.icu.util.ULocale: java.lang.String getDisplayName(java.lang.String,java.lang.String)>
<android.icu.util.ULocale: java.lang.String toUnicodeLocaleKey(java.lang.String)>
<android.icu.util.ULocale: android.icu.util.ULocale addLikelySubtags(android.icu.util.ULocale)>
<android.icu.util.ULocale: java.lang.String getDisplayLanguage(java.lang.String,android.icu.util.ULocale)>
<android.icu.util.ULocale: java.util.Set getExtensionKeys()>
<android.icu.util.ULocale: java.lang.String[] getISOLanguages()>
<android.icu.util.ULocale: java.lang.String getLanguage()>
<android.icu.util.ULocale: java.lang.String getDisplayScript(java.lang.String,java.lang.String)>
<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String)>
<android.icu.util.ULocale: void <init>(String)>
<android.icu.util.ULocale: android.icu.util.ULocale minimizeSubtags(android.icu.util.ULocale)>
<android.icu.util.ULocale: android.icu.util.ULocale createCanonical(java.lang.String)>
<android.icu.util.ULocale: java.lang.String getDisplayScript(java.lang.String,android.icu.util.ULocale)>
<android.icu.util.ULocale: java.lang.String getFallback(java.lang.String)>
<android.icu.util.ULocale: void <init>(String,String,String)>
<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String,java.lang.String,android.icu.util.ULocale)>
<android.icu.util.ULocale: java.lang.String getDisplayVariant(android.icu.util.ULocale)>
<android.icu.util.ULocale: java.lang.String getDisplayLanguage(android.icu.util.ULocale)>
<android.icu.util.ULocale: java.lang.String[] getISOCountries()>
<android.icu.util.ULocale: java.util.Set getUnicodeLocaleKeys()>
<android.icu.util.ULocale: java.lang.Object clone()>
<android.icu.util.ULocale: java.lang.String getISO3Language()>
<android.icu.util.ULocale: java.lang.String getLineOrientation()>
<android.icu.util.ULocale: java.lang.String getUnicodeLocaleType(java.lang.String)>
<android.icu.util.ULocale: android.icu.util.ULocale forLanguageTag(java.lang.String)>
<android.icu.util.ULocale: java.lang.String getDisplayName()>
<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect(android.icu.util.ULocale)>
<android.icu.util.ULocale: java.lang.String toUnicodeLocaleType(java.lang.String,java.lang.String)>
<android.icu.util.ULocale: java.lang.String getISO3Country(java.lang.String)>
<android.icu.util.ULocale: java.lang.String getISO3Language(java.lang.String)>
<android.icu.util.ULocale: java.lang.String getCharacterOrientation()>
<android.icu.util.ULocale: java.lang.String getExtension(char)>
<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect()>
<android.icu.util.ULocale: java.lang.String getDisplayCountry()>
<android.icu.util.ULocale: java.lang.String getCountry()>
<android.icu.util.ULocale: android.icu.util.ULocale getFallback()>
<android.icu.util.ULocale: boolean isRightToLeft()>
<android.icu.util.ULocale: java.lang.String getDisplayKeyword(java.lang.String)>
<android.icu.util.ULocale: java.lang.String getName()>
<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect(java.lang.String,java.lang.String)>
<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect(java.lang.String,android.icu.util.ULocale)>
<android.icu.util.ULocale: java.lang.String getDisplayVariant(java.lang.String,java.lang.String)>
<android.icu.util.ULocale: java.lang.String getLanguage(java.lang.String)>
<android.icu.util.ULocale: java.lang.String getScript()>
<android.icu.util.ULocale: android.icu.util.ULocale getDefault(android.icu.util.ULocale.Category)>
<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(android.icu.util.ULocale[],boolean[])>
<android.icu.util.ULocale: java.lang.String getKeywordValue(java.lang.String,java.lang.String)>
<android.icu.util.ULocale: java.lang.String getCountry(java.lang.String)>
<android.icu.util.ULocale: java.lang.String getDisplayVariant()>
<android.icu.util.ULocale: java.lang.String getDisplayLanguage()>
<android.icu.util.ULocale: java.lang.String getDisplayKeyword(java.lang.String,android.icu.util.ULocale)>
<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String,java.lang.String,java.lang.String)>
<android.icu.util.ULocale: android.icu.util.ULocale setKeywordValue(java.lang.String,java.lang.String)>
<android.icu.util.ULocale: java.lang.String setKeywordValue(java.lang.String,java.lang.String,java.lang.String)>
<android.icu.util.ULocale: java.lang.String getDisplayScript(android.icu.util.ULocale)>
<android.icu.util.ULocale: java.lang.String getBaseName(java.lang.String)>
<android.icu.util.ULocale: java.lang.String getISO3Country()>
<android.icu.util.ULocale: java.lang.String getVariant()>
<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String,android.icu.util.ULocale)>
<android.icu.util.ULocale: java.util.Iterator getKeywords(java.lang.String)>
<android.icu.util.ULocale: android.icu.util.ULocale getDefault()>
<android.icu.util.ULocale: java.lang.String getDisplayCountry(android.icu.util.ULocale)>
<android.icu.util.ULocale: android.icu.util.ULocale forLocale(java.util.Locale)>
<android.icu.util.ULocale: java.lang.String getDisplayVariant(java.lang.String,android.icu.util.ULocale)>
<android.icu.util.ULocale: int compareTo(android.icu.util.ULocale)>
<android.icu.util.ULocale: java.lang.String getScript(java.lang.String)>
<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(java.lang.String,boolean[])>
<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(java.lang.String,android.icu.util.ULocale[],boolean[])>
<android.icu.util.ULocale: void <init>(String,String)>
<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect(android.icu.util.ULocale)>
<android.icu.util.ULocale: java.util.Locale toLocale()>
<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect(java.lang.String,java.lang.String)>
<android.icu.util.ULocale: java.lang.String toLegacyType(java.lang.String,java.lang.String)>
<android.icu.util.ULocale: java.util.Set getUnicodeLocaleAttributes()>
<android.icu.util.ULocale: java.lang.String getVariant(java.lang.String)>
<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect()>
<android.icu.util.ULocale: java.lang.String getDisplayCountry(java.lang.String,android.icu.util.ULocale)>
<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect(java.lang.String,android.icu.util.ULocale)>
<android.icu.util.ULocale: java.lang.String getKeywordValue(java.lang.String)>
<android.icu.util.ULocale: android.icu.util.ULocale[] getAvailableLocales()>
<android.icu.util.ULocale: java.lang.String getDisplayLanguage(java.lang.String,java.lang.String)>
<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(android.icu.util.ULocale[],android.icu.util.ULocale[],boolean[])>
<android.icu.util.ULocale: java.lang.String toLegacyKey(java.lang.String)>
<android.icu.util.ULocale: java.lang.String getDisplayName(java.lang.String,android.icu.util.ULocale)>
<android.icu.util.ULocale: java.lang.String getName(java.lang.String)>
<android.media.session.MediaSession.QueueItem: void <init>(android.media.MediaDescription,long)>
<android.media.session.MediaSession.QueueItem: long getQueueId()>
<android.media.session.MediaSession.QueueItem: int describeContents()>
<android.media.session.MediaSession.QueueItem: void writeToParcel(android.os.Parcel,int)>
<android.media.session.MediaSession.QueueItem: android.media.MediaDescription getDescription()>
<android.provider.MediaStore.Audio.Artists.Albums: android.net.Uri getContentUri(java.lang.String,long)>
<android.provider.MediaStore.Audio.Artists.Albums: void <init>()>
<java.net.DatagramPacket: int getOffset()>
<java.net.DatagramPacket: void setData(byte[],int,int)>
<java.net.DatagramPacket: void setAddress(java.net.InetAddress)>
<java.net.DatagramPacket: void <init>(byte[],int)>
<java.net.DatagramPacket: int getLength()>
<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()>
<java.net.DatagramPacket: void setPort(int)>
<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>
<java.net.DatagramPacket: void setData(byte[])>
<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.SocketAddress)>
<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)>
<java.net.DatagramPacket: void <init>(byte[],int,int)>
<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>
<java.net.DatagramPacket: java.net.InetAddress getAddress()>
<java.net.DatagramPacket: byte[] getData()>
<java.net.DatagramPacket: int getPort()>
<java.net.DatagramPacket: void setLength(int)>
<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.InetAddress,int)>
<android.text.method.BaseKeyListener: boolean forwardDelete(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.method.BaseKeyListener: void <init>()>
<android.text.method.BaseKeyListener: boolean backspace(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.method.BaseKeyListener: boolean onKeyOther(android.view.View,android.text.Editable,android.view.KeyEvent)>
<android.service.autofill.InternalValidator: boolean isValid(android.service.autofill.ValueFinder)>
<android.service.autofill.InternalValidator: void <init>()>
<android.drm.DrmManagerClient.OnErrorListener: void onError(android.drm.DrmManagerClient,android.drm.DrmErrorEvent)>
<java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>
<java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,Class...)>
<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<java.lang.reflect.Proxy: void <init>(java.lang.reflect.InvocationHandler)>
<java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>
<android.bluetooth.le.ScanCallback: void onBatchScanResults(java.util.List)>
<android.bluetooth.le.ScanCallback: void onScanFailed(int)>
<android.bluetooth.le.ScanCallback: void <init>()>
<android.bluetooth.le.ScanCallback: void onScanResult(int,android.bluetooth.le.ScanResult)>
<android.text.style.TtsSpan.MeasureBuilder: void <init>()>
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setDenominator(java.lang.String)>
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setDenominator(long)>
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setNumber(java.lang.String)>
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setNumber(long)>
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setNumerator(java.lang.String)>
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setNumerator(long)>
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setUnit(java.lang.String)>
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setIntegerPart(long)>
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setIntegerPart(java.lang.String)>
<android.text.style.TtsSpan.MeasureBuilder: android.text.style.TtsSpan.MeasureBuilder setFractionalPart(java.lang.String)>
<android.content.AbstractThreadedSyncAdapter: void onSecurityException(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.SyncResult)>
<android.content.AbstractThreadedSyncAdapter: void onSyncCanceled(java.lang.Thread)>
<android.content.AbstractThreadedSyncAdapter: android.content.Context getContext()>
<android.content.AbstractThreadedSyncAdapter: boolean onUnsyncableAccount()>
<android.content.AbstractThreadedSyncAdapter: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)>
<android.content.AbstractThreadedSyncAdapter: void onSyncCanceled()>
<android.content.AbstractThreadedSyncAdapter: android.os.IBinder getSyncAdapterBinder()>
<android.content.AbstractThreadedSyncAdapter: void <init>(android.content.Context,boolean)>
<android.content.AbstractThreadedSyncAdapter: void <init>(android.content.Context,boolean,boolean)>
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender.OnFinished,android.os.Handler)>
<android.content.IntentSender: int getCreatorUid()>
<android.content.IntentSender: void writeToParcel(android.os.Parcel,int)>
<android.content.IntentSender: int describeContents()>
<android.content.IntentSender: java.lang.String getTargetPackage()>
<android.content.IntentSender: android.os.UserHandle getCreatorUserHandle()>
<android.content.IntentSender: android.content.IntentSender readIntentSenderOrNullFromParcel(android.os.Parcel)>
<android.content.IntentSender: void writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)>
<android.content.IntentSender: java.lang.String getCreatorPackage()>
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender.OnFinished,android.os.Handler,java.lang.String)>
<android.opengl.GLES32.DebugProc: void onMessage(int,int,int,int,java.lang.String)>
<java.nio.file.attribute.PosixFilePermissions: java.lang.String toString(java.util.Set)>
<java.nio.file.attribute.PosixFilePermissions: java.nio.file.attribute.FileAttribute asFileAttribute(java.util.Set)>
<java.nio.file.attribute.PosixFilePermissions: java.util.Set fromString(java.lang.String)>
<javax.net.ssl.SSLEngineResult: int bytesProduced()>
<javax.net.ssl.SSLEngineResult: int bytesConsumed()>
<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult.Status,javax.net.ssl.SSLEngineResult.HandshakeStatus,int,int)>
<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult.HandshakeStatus getHandshakeStatus()>
<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult.Status getStatus()>
<java.sql.SQLOutput: void writeTimestamp(java.sql.Timestamp)>
<java.sql.SQLOutput: void writeByte(byte)>
<java.sql.SQLOutput: void writeTime(java.sql.Time)>
<java.sql.SQLOutput: void writeFloat(float)>
<java.sql.SQLOutput: void writeRef(java.sql.Ref)>
<java.sql.SQLOutput: void writeBlob(java.sql.Blob)>
<java.sql.SQLOutput: void writeRowId(java.sql.RowId)>
<java.sql.SQLOutput: void writeInt(int)>
<java.sql.SQLOutput: void writeBinaryStream(java.io.InputStream)>
<java.sql.SQLOutput: void writeDate(java.sql.Date)>
<java.sql.SQLOutput: void writeCharacterStream(java.io.Reader)>
<java.sql.SQLOutput: void writeDouble(double)>
<java.sql.SQLOutput: void writeNClob(java.sql.NClob)>
<java.sql.SQLOutput: void writeString(java.lang.String)>
<java.sql.SQLOutput: void writeObject(java.sql.SQLData)>
<java.sql.SQLOutput: void writeURL(java.net.URL)>
<java.sql.SQLOutput: void writeShort(short)>
<java.sql.SQLOutput: void writeBigDecimal(java.math.BigDecimal)>
<java.sql.SQLOutput: void writeNString(java.lang.String)>
<java.sql.SQLOutput: void writeArray(java.sql.Array)>
<java.sql.SQLOutput: void writeAsciiStream(java.io.InputStream)>
<java.sql.SQLOutput: void writeStruct(java.sql.Struct)>
<java.sql.SQLOutput: void writeSQLXML(java.sql.SQLXML)>
<java.sql.SQLOutput: void writeLong(long)>
<java.sql.SQLOutput: void writeBoolean(boolean)>
<java.sql.SQLOutput: void writeClob(java.sql.Clob)>
<java.sql.SQLOutput: void writeBytes(byte[])>
<java.security.cert.CertPathParameters extends java.lang.Cloneable: java.lang.Object clone()>
<java.time.temporal.Temporal extends java.time.temporal.TemporalAccessor: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>
<java.time.temporal.Temporal extends java.time.temporal.TemporalAccessor: boolean isSupported(java.time.temporal.TemporalUnit)>
<java.time.temporal.Temporal extends java.time.temporal.TemporalAccessor: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>
<java.time.temporal.Temporal extends java.time.temporal.TemporalAccessor: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>
<java.time.temporal.Temporal extends java.time.temporal.TemporalAccessor: java.time.temporal.Temporal with(java.time.temporal.TemporalField,long)>
<java.time.temporal.Temporal extends java.time.temporal.TemporalAccessor: java.time.temporal.Temporal with(java.time.temporal.TemporalAdjuster)>
<java.time.temporal.Temporal extends java.time.temporal.TemporalAccessor: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>
<java.time.temporal.Temporal extends java.time.temporal.TemporalAccessor: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>
<javax.net.ssl.HandshakeCompletedListener extends java.util.EventListener: void handshakeCompleted(javax.net.ssl.HandshakeCompletedEvent)>
<android.telephony.CellSignalStrengthLte: int getLevel()>
<android.telephony.CellSignalStrengthLte: int getRssnr()>
<android.telephony.CellSignalStrengthLte: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellSignalStrengthLte: int getCqi()>
<android.telephony.CellSignalStrengthLte: int getAsuLevel()>
<android.telephony.CellSignalStrengthLte: int getRsrq()>
<android.telephony.CellSignalStrengthLte: int getTimingAdvance()>
<android.telephony.CellSignalStrengthLte: int getRsrp()>
<android.telephony.CellSignalStrengthLte: int describeContents()>
<android.telephony.CellSignalStrengthLte: int getDbm()>
<android.telephony.CellSignalStrengthLte: int getRssi()>
<android.os.NativeHandle: java.io.FileDescriptor getFileDescriptor()>
<android.os.NativeHandle: void <init>(java.io.FileDescriptor,boolean)>
<android.os.NativeHandle: void <init>(java.io.FileDescriptor[],int[],boolean)>
<android.os.NativeHandle: int[] getInts()>
<android.os.NativeHandle: void close()>
<android.os.NativeHandle: android.os.NativeHandle dup()>
<android.os.NativeHandle: java.io.FileDescriptor[] getFileDescriptors()>
<android.os.NativeHandle: void <init>()>
<android.os.NativeHandle: boolean hasSingleFileDescriptor()>
<android.view.textclassifier.TextClassificationContext.Builder: android.view.textclassifier.TextClassificationContext build()>
<android.view.textclassifier.TextClassificationContext.Builder: android.view.textclassifier.TextClassificationContext.Builder setWidgetVersion(java.lang.String)>
<android.view.textclassifier.TextClassificationContext.Builder: void <init>(String,String)>
<android.provider.BlockedNumberContract: boolean canCurrentUserBlockNumbers(android.content.Context)>
<android.provider.BlockedNumberContract: int unblock(android.content.Context,java.lang.String)>
<android.provider.BlockedNumberContract: boolean isBlocked(android.content.Context,java.lang.String)>
<android.content.AsyncTaskLoader: D onLoadInBackground()>
<android.content.AsyncTaskLoader: D loadInBackground()>
<android.content.AsyncTaskLoader: void onCanceled(D)>
<android.content.AsyncTaskLoader: void <init>(android.content.Context)>
<android.content.AsyncTaskLoader: boolean isLoadInBackgroundCanceled()>
<android.content.AsyncTaskLoader: void setUpdateThrottle(long)>
<android.content.AsyncTaskLoader: void cancelLoadInBackground()>
<android.database.AbstractWindowedCursor: boolean isString(int)>
<android.database.AbstractWindowedCursor: java.lang.String getString(int)>
<android.database.AbstractWindowedCursor: short getShort(int)>
<android.database.AbstractWindowedCursor: void setWindow(android.database.CursorWindow)>
<android.database.AbstractWindowedCursor: double getDouble(int)>
<android.database.AbstractWindowedCursor: boolean hasWindow()>
<android.database.AbstractWindowedCursor: void <init>()>
<android.database.AbstractWindowedCursor: long getLong(int)>
<android.database.AbstractWindowedCursor: int getInt(int)>
<android.database.AbstractWindowedCursor: boolean isLong(int)>
<android.database.AbstractWindowedCursor: boolean isFloat(int)>
<android.database.AbstractWindowedCursor: boolean isNull(int)>
<android.database.AbstractWindowedCursor: boolean isBlob(int)>
<android.database.AbstractWindowedCursor: float getFloat(int)>
<java.lang.UnsupportedOperationException: void <init>()>
<java.lang.UnsupportedOperationException: void <init>(String,Throwable)>
<java.lang.UnsupportedOperationException: void <init>(String)>
<java.lang.UnsupportedOperationException: void <init>(Throwable)>
<android.util.EventLog: java.lang.String getTagName(int)>
<android.util.EventLog: int writeEvent(int,java.lang.String)>
<android.util.EventLog: int writeEvent(int,long)>
<android.util.EventLog: int getTagCode(java.lang.String)>
<android.util.EventLog: void readEventsOnWrapping(int[],long,java.util.Collection)>
<android.util.EventLog: int writeEvent(int,int)>
<android.util.EventLog: void readEvents(int[],java.util.Collection)>
<android.util.EventLog: int writeEvent(int,float)>
<android.util.EventLog: int writeEvent(int,java.lang.Object...)>
<android.service.autofill.augmented.FillController: void autofill(java.util.List)>
<android.opengl.GLDebugHelper: void <init>()>
<android.opengl.GLDebugHelper: javax.microedition.khronos.egl.EGL wrap(javax.microedition.khronos.egl.EGL,int,java.io.Writer)>
<android.opengl.GLDebugHelper: javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL,int,java.io.Writer)>
<java.lang.NumberFormatException: void <init>(String)>
<java.lang.NumberFormatException: void <init>()>
<java.nio.file.attribute.AclEntry: java.util.Set permissions()>
<java.nio.file.attribute.AclEntry: java.nio.file.attribute.AclEntry.Builder newBuilder(java.nio.file.attribute.AclEntry)>
<java.nio.file.attribute.AclEntry: java.util.Set flags()>
<java.nio.file.attribute.AclEntry: java.nio.file.attribute.AclEntryType type()>
<java.nio.file.attribute.AclEntry: java.nio.file.attribute.UserPrincipal principal()>
<java.nio.file.attribute.AclEntry: java.nio.file.attribute.AclEntry.Builder newBuilder()>
<android.app.AppOpsManager.OnOpChangedListener: void onOpChanged(java.lang.String,java.lang.String)>
<android.bluetooth.le.PeriodicAdvertisingParameters.Builder: android.bluetooth.le.PeriodicAdvertisingParameters.Builder setInterval(int)>
<android.bluetooth.le.PeriodicAdvertisingParameters.Builder: void <init>()>
<android.bluetooth.le.PeriodicAdvertisingParameters.Builder: android.bluetooth.le.PeriodicAdvertisingParameters.Builder setIncludeTxPower(boolean)>
<android.bluetooth.le.PeriodicAdvertisingParameters.Builder: android.bluetooth.le.PeriodicAdvertisingParameters build()>
<android.hardware.radio.RadioManager.AmBandConfig.Builder: void <init>(android.hardware.radio.RadioManager.AmBandDescriptor)>
<android.hardware.radio.RadioManager.AmBandConfig.Builder: void <init>(android.hardware.radio.RadioManager.AmBandConfig)>
<android.hardware.radio.RadioManager.AmBandConfig.Builder: android.hardware.radio.RadioManager.AmBandConfig.Builder setStereo(boolean)>
<android.hardware.radio.RadioManager.AmBandConfig.Builder: android.hardware.radio.RadioManager.AmBandConfig build()>
<android.os.UserManager.EnforcingUser: void writeToParcel(android.os.Parcel,int)>
<android.os.UserManager.EnforcingUser: android.os.UserHandle getUserHandle()>
<android.os.UserManager.EnforcingUser: int describeContents()>
<android.os.UserManager.EnforcingUser: int getUserRestrictionSource()>
<android.util.MalformedJsonException: void <init>(String)>
<android.view.textclassifier.ConversationActions.Message: android.app.Person getAuthor()>
<android.view.textclassifier.ConversationActions.Message: android.os.Bundle getExtras()>
<android.view.textclassifier.ConversationActions.Message: int describeContents()>
<android.view.textclassifier.ConversationActions.Message: java.time.ZonedDateTime getReferenceTime()>
<android.view.textclassifier.ConversationActions.Message: CharSequence getText()>
<android.view.textclassifier.ConversationActions.Message: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.p2p.WifiP2pManager: void requestP2pState(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.P2pStateListener)>
<android.net.wifi.p2p.WifiP2pManager: void addLocalService(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void createGroup(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void setDnsSdResponseListeners(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DnsSdServiceResponseListener,android.net.wifi.p2p.WifiP2pManager.DnsSdTxtRecordListener)>
<android.net.wifi.p2p.WifiP2pManager: void requestGroupInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.GroupInfoListener)>
<android.net.wifi.p2p.WifiP2pManager: void removeServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void requestDiscoveryState(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DiscoveryStateListener)>
<android.net.wifi.p2p.WifiP2pManager: void cancelConnect(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void connect(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager.Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager.ChannelListener)>
<android.net.wifi.p2p.WifiP2pManager: void addServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void createGroup(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void clearServiceRequests(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void setServiceResponseListener(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ServiceResponseListener)>
<android.net.wifi.p2p.WifiP2pManager: void clearLocalServices(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void removeGroup(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener)>
<android.net.wifi.p2p.WifiP2pManager: void removeLocalService(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void requestDeviceInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DeviceInfoListener)>
<android.net.wifi.p2p.WifiP2pManager: void stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void requestNetworkInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.NetworkInfoListener)>
<android.net.wifi.p2p.WifiP2pManager: void discoverServices(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void requestPeers(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.PeerListListener)>
<android.net.wifi.p2p.WifiP2pManager: void setUpnpServiceResponseListener(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.UpnpServiceResponseListener)>
<android.widget.Gallery.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Gallery.LayoutParams: void <init>(int,int)>
<android.widget.Gallery.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<javax.xml.parsers.DocumentBuilder: boolean isNamespaceAware()>
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document newDocument()>
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.lang.String)>
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>
<javax.xml.parsers.DocumentBuilder: void setErrorHandler(org.xml.sax.ErrorHandler)>
<javax.xml.parsers.DocumentBuilder: boolean isValidating()>
<javax.xml.parsers.DocumentBuilder: void reset()>
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>
<javax.xml.parsers.DocumentBuilder: void <init>()>
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.File)>
<javax.xml.parsers.DocumentBuilder: boolean isXIncludeAware()>
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.DOMImplementation getDOMImplementation()>
<javax.xml.parsers.DocumentBuilder: javax.xml.validation.Schema getSchema()>
<javax.xml.parsers.DocumentBuilder: void setEntityResolver(org.xml.sax.EntityResolver)>
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream,java.lang.String)>
<android.telephony.IccOpenLogicalChannelResponse: byte[] getSelectResponse()>
<android.telephony.IccOpenLogicalChannelResponse: int describeContents()>
<android.telephony.IccOpenLogicalChannelResponse: void writeToParcel(android.os.Parcel,int)>
<android.telephony.IccOpenLogicalChannelResponse: int getStatus()>
<android.telephony.IccOpenLogicalChannelResponse: int getChannel()>
<java.lang.Comparable: int compareTo(T)>
<java.security.CodeSource: boolean implies(java.security.CodeSource)>
<java.security.CodeSource: java.net.URL getLocation()>
<java.security.CodeSource: void <init>(java.net.URL,java.security.cert.Certificate[])>
<java.security.CodeSource: java.security.CodeSigner[] getCodeSigners()>
<java.security.CodeSource: void <init>(java.net.URL,java.security.CodeSigner[])>
<java.security.CodeSource: java.security.cert.Certificate[] getCertificates()>
<android.net.http.SslCertificate: android.net.http.SslCertificate restoreState(android.os.Bundle)>
<android.net.http.SslCertificate: android.net.http.SslCertificate.DName getIssuedBy()>
<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)>
<android.net.http.SslCertificate: java.util.Date getValidNotBeforeDate()>
<android.net.http.SslCertificate: void <init>(String,String,java.util.Date,java.util.Date)>
<android.net.http.SslCertificate: void <init>(java.security.cert.X509Certificate)>
<android.net.http.SslCertificate: android.net.http.SslCertificate.DName getIssuedTo()>
<android.net.http.SslCertificate: java.util.Date getValidNotAfterDate()>
<android.net.http.SslCertificate: void <init>(String,String,String,String)>
<android.net.http.SslCertificate: java.lang.String getValidNotAfter()>
<android.net.http.SslCertificate: java.lang.String getValidNotBefore()>
<android.net.http.SslCertificate: java.security.cert.X509Certificate getX509Certificate()>
<android.service.voice.VoiceInteractionSession.Insets: void <init>()>
<android.telephony.VisualVoicemailService.VisualVoicemailTask: void finish()>
<android.R.drawable: void <init>()>
<java.io.ObjectInputStream.GetField: short get(java.lang.String,short)>
<java.io.ObjectInputStream.GetField: char get(java.lang.String,char)>
<java.io.ObjectInputStream.GetField: double get(java.lang.String,double)>
<java.io.ObjectInputStream.GetField: long get(java.lang.String,long)>
<java.io.ObjectInputStream.GetField: void <init>()>
<java.io.ObjectInputStream.GetField: java.io.ObjectStreamClass getObjectStreamClass()>
<java.io.ObjectInputStream.GetField: float get(java.lang.String,float)>
<java.io.ObjectInputStream.GetField: java.lang.Object get(java.lang.String,java.lang.Object)>
<java.io.ObjectInputStream.GetField: byte get(java.lang.String,byte)>
<java.io.ObjectInputStream.GetField: boolean defaulted(java.lang.String)>
<java.io.ObjectInputStream.GetField: int get(java.lang.String,int)>
<java.io.ObjectInputStream.GetField: boolean get(java.lang.String,boolean)>
<javax.security.auth.login.LoginException: void <init>(String)>
<javax.security.auth.login.LoginException: void <init>()>
<android.hardware.hdmi.HdmiControlManager.HotplugEventListener: void onReceived(android.hardware.hdmi.HdmiHotplugEvent)>
<android.hardware.display.AmbientDisplayConfiguration: boolean alwaysOnAvailableForUser(int)>
<android.hardware.display.AmbientDisplayConfiguration: boolean alwaysOnEnabled(int)>
<android.hardware.display.AmbientDisplayConfiguration: boolean alwaysOnAvailable()>
<android.hardware.display.AmbientDisplayConfiguration: void <init>(android.content.Context)>
<android.media.MediaMetadata: long getLong(java.lang.String)>
<android.media.MediaMetadata: int size()>
<android.media.MediaMetadata: android.media.Rating getRating(java.lang.String)>
<android.media.MediaMetadata: void writeToParcel(android.os.Parcel,int)>
<android.media.MediaMetadata: android.graphics.Bitmap getBitmap(java.lang.String)>
<android.media.MediaMetadata: java.lang.String getString(java.lang.String)>
<android.media.MediaMetadata: CharSequence getText(java.lang.String)>
<android.media.MediaMetadata: android.media.MediaDescription getDescription()>
<android.media.MediaMetadata: boolean containsKey(java.lang.String)>
<android.media.MediaMetadata: int describeContents()>
<android.media.MediaMetadata: java.util.Set keySet()>
<java.lang.UnsupportedClassVersionError: void <init>(String)>
<java.lang.UnsupportedClassVersionError: void <init>()>
<android.net.wifi.hotspot2.omadm.PpsMoParser: android.net.wifi.hotspot2.PasspointConfiguration parseMoText(java.lang.String)>
<android.text.style.TtsSpan.DigitsBuilder: android.text.style.TtsSpan.DigitsBuilder setDigits(java.lang.String)>
<android.text.style.TtsSpan.DigitsBuilder: void <init>()>
<android.text.style.TtsSpan.DigitsBuilder: void <init>(String)>
<android.hardware.location.ContextHubInfo: int getMaxPacketLengthBytes()>
<android.hardware.location.ContextHubInfo: void <init>()>
<android.hardware.location.ContextHubInfo: int getStaticSwVersion()>
<android.hardware.location.ContextHubInfo: int describeContents()>
<android.hardware.location.ContextHubInfo: float getPeakPowerDrawMw()>
<android.hardware.location.ContextHubInfo: int[] getSupportedSensors()>
<android.hardware.location.ContextHubInfo: float getStoppedPowerDrawMw()>
<android.hardware.location.ContextHubInfo: java.lang.String getName()>
<android.hardware.location.ContextHubInfo: float getSleepPowerDrawMw()>
<android.hardware.location.ContextHubInfo: long getChrePlatformId()>
<android.hardware.location.ContextHubInfo: android.hardware.location.MemoryRegion[] getMemoryRegions()>
<android.hardware.location.ContextHubInfo: int getToolchainVersion()>
<android.hardware.location.ContextHubInfo: byte getChreApiMajorVersion()>
<android.hardware.location.ContextHubInfo: byte getChreApiMinorVersion()>
<android.hardware.location.ContextHubInfo: int getId()>
<android.hardware.location.ContextHubInfo: java.lang.String getToolchain()>
<android.hardware.location.ContextHubInfo: java.lang.String getVendor()>
<android.hardware.location.ContextHubInfo: void writeToParcel(android.os.Parcel,int)>
<android.hardware.location.ContextHubInfo: int getPlatformVersion()>
<android.hardware.location.ContextHubInfo: float getPeakMips()>
<android.hardware.location.ContextHubInfo: short getChrePatchVersion()>
<android.app.UiModeManager: void enableCarMode(int)>
<android.app.UiModeManager: void setNightMode(int)>
<android.app.UiModeManager: boolean isNightModeLocked()>
<android.app.UiModeManager: int getNightMode()>
<android.app.UiModeManager: boolean isUiModeLocked()>
<android.app.UiModeManager: void disableCarMode(int)>
<android.app.UiModeManager: int getCurrentModeType()>
<android.view.ViewTreeObserver.OnDrawListener: void onDraw()>
<java.util.SplittableRandom: int nextInt(int,int)>
<java.util.SplittableRandom: java.util.SplittableRandom split()>
<java.util.SplittableRandom: java.util.stream.DoubleStream doubles(double,double)>
<java.util.SplittableRandom: java.util.stream.IntStream ints(long,int,int)>
<java.util.SplittableRandom: double nextDouble()>
<java.util.SplittableRandom: int nextInt(int)>
<java.util.SplittableRandom: double nextDouble(double)>
<java.util.SplittableRandom: void <init>()>
<java.util.SplittableRandom: double nextDouble(double,double)>
<java.util.SplittableRandom: long nextLong(long)>
<java.util.SplittableRandom: java.util.stream.DoubleStream doubles(long)>
<java.util.SplittableRandom: boolean nextBoolean()>
<java.util.SplittableRandom: java.util.stream.DoubleStream doubles()>
<java.util.SplittableRandom: long nextLong()>
<java.util.SplittableRandom: java.util.stream.LongStream longs(long,long)>
<java.util.SplittableRandom: java.util.stream.LongStream longs()>
<java.util.SplittableRandom: java.util.stream.IntStream ints(long)>
<java.util.SplittableRandom: java.util.stream.LongStream longs(long)>
<java.util.SplittableRandom: java.util.stream.IntStream ints()>
<java.util.SplittableRandom: java.util.stream.LongStream longs(long,long,long)>
<java.util.SplittableRandom: int nextInt()>
<java.util.SplittableRandom: long nextLong(long,long)>
<java.util.SplittableRandom: java.util.stream.IntStream ints(int,int)>
<java.util.SplittableRandom: void <init>(long)>
<java.util.SplittableRandom: java.util.stream.DoubleStream doubles(long,double,double)>
<android.system.StructTimeval: android.system.StructTimeval fromMillis(long)>
<android.system.StructTimeval: long toMillis()>
<java.sql.SQLWarning: void <init>(String,String,int)>
<java.sql.SQLWarning: java.sql.SQLWarning getNextWarning()>
<java.sql.SQLWarning: void setNextWarning(java.sql.SQLWarning)>
<java.sql.SQLWarning: void <init>(String,String,Throwable)>
<java.sql.SQLWarning: void <init>(String,Throwable)>
<java.sql.SQLWarning: void <init>(String,String)>
<java.sql.SQLWarning: void <init>(String)>
<java.sql.SQLWarning: void <init>(String,String,int,Throwable)>
<java.sql.SQLWarning: void <init>()>
<java.sql.SQLWarning: void <init>(Throwable)>
<android.view.SurfaceHolder: void setFixedSize(int,int)>
<android.view.SurfaceHolder: void setType(int)>
<android.view.SurfaceHolder: void setFormat(int)>
<android.view.SurfaceHolder: boolean isCreating()>
<android.view.SurfaceHolder: android.graphics.Canvas lockCanvas(android.graphics.Rect)>
<android.view.SurfaceHolder: void unlockCanvasAndPost(android.graphics.Canvas)>
<android.view.SurfaceHolder: android.graphics.Canvas lockCanvas()>
<android.view.SurfaceHolder: android.graphics.Canvas lockHardwareCanvas()>
<android.view.SurfaceHolder: android.graphics.Rect getSurfaceFrame()>
<android.view.SurfaceHolder: void setKeepScreenOn(boolean)>
<android.view.SurfaceHolder: void setSizeFromLayout()>
<android.view.SurfaceHolder: android.view.Surface getSurface()>
<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder.Callback)>
<android.view.SurfaceHolder: void removeCallback(android.view.SurfaceHolder.Callback)>
<java.lang.invoke.ConstantCallSite: void <init>(java.lang.invoke.MethodType,java.lang.invoke.MethodHandle)>
<java.lang.invoke.ConstantCallSite: void setTarget(java.lang.invoke.MethodHandle)>
<java.lang.invoke.ConstantCallSite: void <init>(java.lang.invoke.MethodHandle)>
<java.lang.invoke.ConstantCallSite: java.lang.invoke.MethodHandle getTarget()>
<java.lang.invoke.ConstantCallSite: java.lang.invoke.MethodHandle dynamicInvoker()>
<android.webkit.HttpAuthHandler: void <init>()>
<android.webkit.HttpAuthHandler: void cancel()>
<android.webkit.HttpAuthHandler: boolean useHttpAuthUsernamePassword()>
<android.webkit.HttpAuthHandler: void proceed(java.lang.String,java.lang.String)>
<javax.crypto.ShortBufferException: void <init>()>
<javax.crypto.ShortBufferException: void <init>(String)>
<android.permission.PermissionManager.SplitPermissionInfo: java.lang.String getSplitPermission()>
<android.permission.PermissionManager.SplitPermissionInfo: java.util.List getNewPermissions()>
<android.permission.PermissionManager.SplitPermissionInfo: int getTargetSdk()>
<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader.TileMode,android.graphics.Shader.TileMode)>
<android.telephony.ServiceState: void setDataRoamingType(int)>
<android.telephony.ServiceState: java.util.List getNetworkRegistrationInfoListForTransportType(int)>
<android.telephony.ServiceState: void setStateOff()>
<android.telephony.ServiceState: int getCdmaNetworkId()>
<android.telephony.ServiceState: boolean getIsManualSelection()>
<android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()>
<android.telephony.ServiceState: boolean getRoaming()>
<android.telephony.ServiceState: int describeContents()>
<android.telephony.ServiceState: void copyFrom(android.telephony.ServiceState)>
<android.telephony.ServiceState: int getChannelNumber()>
<android.telephony.ServiceState: void setState(int)>
<android.telephony.ServiceState: void setVoiceRoamingType(int)>
<android.telephony.ServiceState: java.util.List getNetworkRegistrationInfoList()>
<android.telephony.ServiceState: void setRilVoiceRadioTechnology(int)>
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()>
<android.telephony.ServiceState: int getCdmaSystemId()>
<android.telephony.ServiceState: void <init>()>
<android.telephony.ServiceState: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ServiceState: void <init>(android.os.Parcel)>
<android.telephony.ServiceState: android.telephony.NetworkRegistrationInfo getNetworkRegistrationInfo(int,int)>
<android.telephony.ServiceState: void setChannelNumber(int)>
<android.telephony.ServiceState: int[] getCellBandwidths()>
<android.telephony.ServiceState: void setOperatorName(java.lang.String,java.lang.String,java.lang.String)>
<android.telephony.ServiceState: int getDuplexMode()>
<android.telephony.ServiceState: void setIsManualSelection(boolean)>
<android.telephony.ServiceState: void setRilDataRadioTechnology(int)>
<android.telephony.ServiceState: void addNetworkRegistrationInfo(android.telephony.NetworkRegistrationInfo)>
<android.telephony.ServiceState: void setCdmaSystemAndNetworkId(int,int)>
<android.telephony.ServiceState: void <init>(android.telephony.ServiceState)>
<android.telephony.ServiceState: void setCellBandwidths(int[])>
<android.telephony.ServiceState: void setStateOutOfService()>
<android.telephony.ServiceState: java.lang.String getOperatorNumeric()>
<android.telephony.ServiceState: int getState()>
<android.telephony.ServiceState: void setRoaming(boolean)>
<android.telephony.ServiceState: java.util.List getNetworkRegistrationInfoListForDomain(int)>
<java.util.stream.BaseStream extends java.lang.AutoCloseable: java.util.Spliterator spliterator()>
<java.util.stream.BaseStream extends java.lang.AutoCloseable: S unordered()>
<java.util.stream.BaseStream extends java.lang.AutoCloseable: boolean isParallel()>
<java.util.stream.BaseStream extends java.lang.AutoCloseable: S parallel()>
<java.util.stream.BaseStream extends java.lang.AutoCloseable: java.util.Iterator iterator()>
<java.util.stream.BaseStream extends java.lang.AutoCloseable: void close()>
<java.util.stream.BaseStream extends java.lang.AutoCloseable: S sequential()>
<java.util.stream.BaseStream extends java.lang.AutoCloseable: S onClose(Runnable)>
<java.net.Authenticator: java.net.PasswordAuthentication getPasswordAuthentication()>
<java.net.Authenticator: java.net.Authenticator.RequestorType getRequestorType()>
<java.net.Authenticator: java.net.InetAddress getRequestingSite()>
<java.net.Authenticator: java.lang.String getRequestingPrompt()>
<java.net.Authenticator: java.net.URL getRequestingURL()>
<java.net.Authenticator: java.lang.String getRequestingProtocol()>
<java.net.Authenticator: void setDefault(java.net.Authenticator)>
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String)>
<java.net.Authenticator: void <init>()>
<java.net.Authenticator: java.lang.String getRequestingHost()>
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String)>
<java.net.Authenticator: int getRequestingPort()>
<java.net.Authenticator: java.lang.String getRequestingScheme()>
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator.RequestorType)>
<android.hardware.Camera.FaceDetectionListener: void onFaceDetection(android.hardware.Camera.Face[],android.hardware.Camera)>
<android.net.sip.SipRegistrationListener: void onRegistrationDone(java.lang.String,long)>
<android.net.sip.SipRegistrationListener: void onRegistrationFailed(java.lang.String,int,java.lang.String)>
<android.net.sip.SipRegistrationListener: void onRegistering(java.lang.String)>
<android.service.trust.TrustAgentService: void grantTrust(CharSequence,long,boolean)>
<android.service.trust.TrustAgentService: void onUnlockAttempt(boolean)>
<android.service.trust.TrustAgentService: void onEscrowTokenAdded(byte[],long,android.os.UserHandle)>
<android.service.trust.TrustAgentService: void isEscrowTokenActive(long,android.os.UserHandle)>
<android.service.trust.TrustAgentService: void revokeTrust()>
<android.service.trust.TrustAgentService: android.os.IBinder onBind(android.content.Intent)>
<android.service.trust.TrustAgentService: void onDeviceUnlockLockout(long)>
<android.service.trust.TrustAgentService: void setManagingTrust(boolean)>
<android.service.trust.TrustAgentService: void onEscrowTokenStateReceived(long,int)>
<android.service.trust.TrustAgentService: void onTrustTimeout()>
<android.service.trust.TrustAgentService: void <init>()>
<android.service.trust.TrustAgentService: void unlockUserWithToken(long,byte[],android.os.UserHandle)>
<android.service.trust.TrustAgentService: void addEscrowToken(byte[],android.os.UserHandle)>
<android.service.trust.TrustAgentService: void onDeviceUnlocked()>
<android.service.trust.TrustAgentService: void onEscrowTokenRemoved(long,boolean)>
<android.service.trust.TrustAgentService: void showKeyguardErrorMessage(CharSequence)>
<android.service.trust.TrustAgentService: boolean onConfigure(java.util.List)>
<android.service.trust.TrustAgentService: void grantTrust(CharSequence,long,int)>
<android.service.trust.TrustAgentService: void onDeviceLocked()>
<android.service.trust.TrustAgentService: void removeEscrowToken(long,android.os.UserHandle)>
<android.view.InputDevice.MotionRange: float getMin()>
<android.view.InputDevice.MotionRange: boolean isFromSource(int)>
<android.view.InputDevice.MotionRange: int getAxis()>
<android.view.InputDevice.MotionRange: int getSource()>
<android.view.InputDevice.MotionRange: float getMax()>
<android.view.InputDevice.MotionRange: float getFlat()>
<android.view.InputDevice.MotionRange: float getRange()>
<android.view.InputDevice.MotionRange: float getResolution()>
<android.view.InputDevice.MotionRange: float getFuzz()>
<java.io.CharArrayWriter: java.io.CharArrayWriter append(char)>
<java.io.CharArrayWriter: void reset()>
<java.io.CharArrayWriter: char[] toCharArray()>
<java.io.CharArrayWriter: java.io.CharArrayWriter append(CharSequence)>
<java.io.CharArrayWriter: void write(char[],int,int)>
<java.io.CharArrayWriter: void <init>()>
<java.io.CharArrayWriter: java.io.CharArrayWriter append(CharSequence,int,int)>
<java.io.CharArrayWriter: void close()>
<java.io.CharArrayWriter: void write(java.lang.String,int,int)>
<java.io.CharArrayWriter: int size()>
<java.io.CharArrayWriter: void write(int)>
<java.io.CharArrayWriter: void <init>(int)>
<java.io.CharArrayWriter: void writeTo(java.io.Writer)>
<java.io.CharArrayWriter: void flush()>
<android.content.Loader.ForceLoadContentObserver: void <init>()>
<android.provider.Contacts.Phones: CharSequence getDisplayLabel(android.content.Context,int,CharSequence)>
<android.provider.Contacts.Phones: CharSequence getDisplayLabel(android.content.Context,int,CharSequence,CharSequence[])>
<java.util.logging.LogRecord: int getThreadID()>
<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>
<java.util.logging.LogRecord: long getMillis()>
<java.util.logging.LogRecord: java.lang.Object[] getParameters()>
<java.util.logging.LogRecord: java.lang.String getResourceBundleName()>
<java.util.logging.LogRecord: java.lang.Throwable getThrown()>
<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>
<java.util.logging.LogRecord: java.lang.String getSourceClassName()>
<java.util.logging.LogRecord: void setLevel(java.util.logging.Level)>
<java.util.logging.LogRecord: long getSequenceNumber()>
<java.util.logging.LogRecord: java.util.ResourceBundle getResourceBundle()>
<java.util.logging.LogRecord: void setThreadID(int)>
<java.util.logging.LogRecord: void setMillis(long)>
<java.util.logging.LogRecord: java.util.logging.Level getLevel()>
<java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)>
<java.util.logging.LogRecord: void <init>(java.util.logging.Level,String)>
<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)>
<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>
<java.util.logging.LogRecord: void setMessage(java.lang.String)>
<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>
<java.util.logging.LogRecord: void setSequenceNumber(long)>
<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>
<java.util.logging.LogRecord: java.lang.String getMessage()>
<java.util.logging.LogRecord: java.lang.String getLoggerName()>
<java.util.logging.LogRecord: java.lang.String getSourceMethodName()>
<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup.LayoutParams,boolean)>
<android.view.ViewGroup: void dispatchSetSelected(boolean)>
<android.view.ViewGroup: void removeViewAt(int)>
<android.view.ViewGroup: void dispatchSetActivated(boolean)>
<android.view.ViewGroup: void layout(int,int,int,int)>
<android.view.ViewGroup: void measureChildWithMargins(android.view.View,int,int,int,int)>
<android.view.ViewGroup: void addView(android.view.View,int)>
<android.view.ViewGroup: void setStaticTransformationsEnabled(boolean)>
<android.view.ViewGroup: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>
<android.view.ViewGroup: void addView(android.view.View,int,int)>
<android.view.ViewGroup: void setLayoutTransition(android.animation.LayoutTransition)>
<android.view.ViewGroup: void setLayoutAnimationListener(android.view.animation.Animation.AnimationListener)>
<android.view.ViewGroup: void childDrawableStateChanged(android.view.View)>
<android.view.ViewGroup: void offsetRectIntoDescendantCoords(android.view.View,android.graphics.Rect)>
<android.view.ViewGroup: android.view.View focusSearch(android.view.View,int)>
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.view.ViewGroup: void measureChild(android.view.View,int,int)>
<android.view.ViewGroup: int getDescendantFocusability()>
<android.view.ViewGroup: void setChildrenDrawingOrderEnabled(boolean)>
<android.view.ViewGroup: void requestTransparentRegion(android.view.View)>
<android.view.ViewGroup: boolean isLayoutSuppressed()>
<android.view.ViewGroup: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>
<android.view.ViewGroup: void setLayoutAnimation(android.view.animation.LayoutAnimationController)>
<android.view.ViewGroup: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.ViewGroup: void cleanupLayoutState(android.view.View)>
<android.view.ViewGroup: boolean canAnimate()>
<android.view.ViewGroup: boolean gatherTransparentRegion(android.graphics.Region)>
<android.view.ViewGroup: void removeView(android.view.View)>
<android.view.ViewGroup: android.view.ViewGroup.LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.view.ViewGroup: int indexOfChild(android.view.View)>
<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup: boolean onInterceptHoverEvent(android.view.MotionEvent)>
<android.view.ViewGroup: void endViewTransition(android.view.View)>
<android.view.ViewGroup: void detachViewFromParent(int)>
<android.view.ViewGroup: android.view.ViewGroup.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup: void clearChildFocus(android.view.View)>
<android.view.ViewGroup: void suppressLayout(boolean)>
<android.view.ViewGroup: void <init>(android.content.Context)>
<android.view.ViewGroup: android.view.ViewGroupOverlay getOverlay()>
<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup: int getChildCount()>
<android.view.ViewGroup: void setTouchscreenBlocksFocus(boolean)>
<android.view.ViewGroup: int getChildDrawingOrder(int)>
<android.view.ViewGroup: void updateViewLayout(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>
<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup: void onNestedScrollAccepted(android.view.View,android.view.View,int)>
<android.view.ViewGroup: void focusableViewAvailable(android.view.View)>
<android.view.ViewGroup: void dispatchThawSelfOnly(android.util.SparseArray)>
<android.view.ViewGroup: void onStopNestedScroll(android.view.View)>
<android.view.ViewGroup: boolean onNestedPrePerformAccessibilityAction(android.view.View,int,android.os.Bundle)>
<android.view.ViewGroup: void setPersistentDrawingCache(int)>
<android.view.ViewGroup: void startLayoutAnimation()>
<android.view.ViewGroup: void attachLayoutAnimationParameters(android.view.View,android.view.ViewGroup.LayoutParams,int,int)>
<android.view.ViewGroup: boolean getClipToPadding()>
<android.view.ViewGroup: void invalidateChild(android.view.View,android.graphics.Rect)>
<android.view.ViewGroup: boolean shouldDelayChildPressedState()>
<android.view.ViewGroup: boolean isMotionEventSplittingEnabled()>
<android.view.ViewGroup: boolean onStartNestedScroll(android.view.View,android.view.View,int)>
<android.view.ViewGroup: android.animation.LayoutTransition getLayoutTransition()>
<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.ViewGroup: boolean addStatesFromChildren()>
<android.view.ViewGroup: void onViewAdded(android.view.View)>
<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode.Callback,int)>
<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View)>
<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()>
<android.view.ViewGroup: void removeViews(int,int)>
<android.view.ViewGroup: void recomputeViewAttributes(android.view.View)>
<android.view.ViewGroup: boolean isChildrenDrawnWithCacheEnabled()>
<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)>
<android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)>
<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View,float,float)>
<android.view.ViewGroup: void setClipToPadding(boolean)>
<android.view.ViewGroup: void removeViewInLayout(android.view.View)>
<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)>
<android.view.ViewGroup: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<android.view.ViewGroup: void onNestedScroll(android.view.View,int,int,int,int)>
<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)>
<android.view.ViewGroup: android.view.ViewGroup.LayoutParams generateDefaultLayoutParams()>
<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>
<android.view.ViewGroup: void clearDisappearingChildren()>
<android.view.ViewGroup: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.ViewGroup: void attachViewToParent(android.view.View,int,android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode.Callback)>
<android.view.ViewGroup: void addView(android.view.View)>
<android.view.ViewGroup: void removeViewsInLayout(int,int)>
<android.view.ViewGroup: void scheduleLayoutAnimation()>
<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup.LayoutParams)>
<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)>
<android.view.ViewGroup: void bringChildToFront(android.view.View)>
<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>
<android.view.ViewGroup: void setTransitionGroup(boolean)>
<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>
<android.view.ViewGroup: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)>
<android.view.ViewGroup: boolean isTransitionGroup()>
<android.view.ViewGroup: void removeAllViews()>
<android.view.ViewGroup: void setOnHierarchyChangeListener(android.view.ViewGroup.OnHierarchyChangeListener)>
<android.view.ViewGroup: void onNestedPreScroll(android.view.View,int,int,int[])>
<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>
<android.view.ViewGroup: int getChildDrawingOrder(int,int)>
<android.view.ViewGroup: boolean getTouchscreenBlocksFocus()>
<android.view.ViewGroup: int getNestedScrollAxes()>
<android.view.ViewGroup: boolean onNestedFling(android.view.View,float,float,boolean)>
<android.view.ViewGroup: void removeAllViewsInLayout()>
<android.view.ViewGroup: android.view.View getFocusedChild()>
<android.view.ViewGroup: int getLayoutMode()>
<android.view.ViewGroup: boolean isAnimationCacheEnabled()>
<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)>
<android.view.ViewGroup: void setClipChildren(boolean)>
<android.view.ViewGroup: void onViewRemoved(android.view.View)>
<android.view.ViewGroup: boolean getClipChildren()>
<android.view.ViewGroup: void debug(int)>
<android.view.ViewGroup: void detachViewsFromParent(int,int)>
<android.view.ViewGroup: android.view.View getChildAt(int)>
<android.view.ViewGroup: boolean onNestedPreFling(android.view.View,float,float)>
<android.view.ViewGroup: void setLayoutMode(int)>
<android.view.ViewGroup: android.view.animation.LayoutAnimationController getLayoutAnimation()>
<android.view.ViewGroup: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>
<android.view.ViewGroup: void detachViewFromParent(android.view.View)>
<android.view.ViewGroup: void setAddStatesFromChildren(boolean)>
<android.view.ViewGroup: void removeDetachedView(android.view.View,boolean)>
<android.view.ViewGroup: void onLayout(boolean,int,int,int,int)>
<android.view.ViewGroup: void dispatchFreezeSelfOnly(android.util.SparseArray)>
<android.view.ViewGroup: void setDescendantFocusability(int)>
<android.view.ViewGroup: void startViewTransition(android.view.View)>
<android.view.ViewGroup: int getPersistentDrawingCache()>
<android.view.ViewGroup: boolean onRequestFocusInDescendants(int,android.graphics.Rect)>
<android.view.ViewGroup: void measureChildren(int,int)>
<android.view.ViewGroup: void detachAllViewsFromParent()>
<android.view.ViewGroup: void requestDisallowInterceptTouchEvent(boolean)>
<android.view.ViewGroup: android.view.animation.Animation.AnimationListener getLayoutAnimationListener()>
<android.util.SparseArray: void remove(int)>
<android.util.SparseArray: int indexOfKey(int)>
<android.util.SparseArray: int indexOfValue(E)>
<android.util.SparseArray: void removeAtRange(int,int)>
<android.util.SparseArray: android.util.SparseArray clone()>
<android.util.SparseArray: int size()>
<android.util.SparseArray: void <init>()>
<android.util.SparseArray: void append(int,E)>
<android.util.SparseArray: void delete(int)>
<android.util.SparseArray: int keyAt(int)>
<android.util.SparseArray: void put(int,E)>
<android.util.SparseArray: void removeAt(int)>
<android.util.SparseArray: E valueAt(int)>
<android.util.SparseArray: void clear()>
<android.util.SparseArray: E get(int)>
<android.util.SparseArray: void setValueAt(int,E)>
<android.util.SparseArray: void <init>(int)>
<android.util.SparseArray: E get(int,E)>
<android.os.MessageQueue: void removeSyncBarrier(int)>
<android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue.IdleHandler)>
<android.os.MessageQueue: int postSyncBarrier()>
<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue.IdleHandler)>
<android.os.MessageQueue: boolean isIdle()>
<android.os.MessageQueue: void addOnFileDescriptorEventListener(java.io.FileDescriptor,int,android.os.MessageQueue.OnFileDescriptorEventListener)>
<android.os.MessageQueue: void removeOnFileDescriptorEventListener(java.io.FileDescriptor)>
<android.graphics.DrawFilter: void <init>()>
<android.util.MutableBoolean: void <init>(boolean)>
<android.database.sqlite.SQLiteDirectCursorDriver: void cursorClosed()>
<android.database.sqlite.SQLiteDirectCursorDriver: void cursorDeactivated()>
<android.database.sqlite.SQLiteDirectCursorDriver: void <init>(android.database.sqlite.SQLiteDatabase,String,String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDirectCursorDriver: android.database.Cursor query(android.database.sqlite.SQLiteDatabase.CursorFactory,java.lang.String[])>
<android.database.sqlite.SQLiteDirectCursorDriver: void setBindArguments(java.lang.String[])>
<android.database.sqlite.SQLiteDirectCursorDriver: void cursorRequeried(android.database.Cursor)>
<android.text.style.ReplacementSpan: void <init>()>
<android.text.style.ReplacementSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.ReplacementSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.ReplacementSpan: int getSize(android.graphics.Paint,CharSequence,int,int,android.graphics.Paint.FontMetricsInt)>
<android.text.style.ReplacementSpan: void draw(android.graphics.Canvas,CharSequence,int,int,float,int,int,int,android.graphics.Paint)>
<android.view.OrientationEventListener: void enable()>
<android.view.OrientationEventListener: void onOrientationChanged(int)>
<android.view.OrientationEventListener: void <init>(android.content.Context)>
<android.view.OrientationEventListener: boolean canDetectOrientation()>
<android.view.OrientationEventListener: void <init>(android.content.Context,int)>
<android.view.OrientationEventListener: void disable()>
<java.nio.channels.WritePendingException: void <init>()>
<java.util.concurrent.ConcurrentLinkedQueue: boolean offer(E)>
<java.util.concurrent.ConcurrentLinkedQueue: void <init>(java.util.Collection)>
<java.util.concurrent.ConcurrentLinkedQueue: int size()>
<java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>
<java.util.concurrent.ConcurrentLinkedQueue: E peek()>
<java.util.concurrent.ConcurrentLinkedQueue: E poll()>
<android.view.ActionProvider.VisibilityListener: void onActionProviderVisibilityChanged(boolean)>
<java.security.BasicPermission: void <init>(String,String)>
<java.security.BasicPermission: java.lang.String getActions()>
<java.security.BasicPermission: boolean implies(java.security.Permission)>
<java.security.BasicPermission: void <init>(String)>
<android.view.View.OnAttachStateChangeListener: void onViewDetachedFromWindow(android.view.View)>
<android.view.View.OnAttachStateChangeListener: void onViewAttachedToWindow(android.view.View)>
<java.util.Base64.Encoder: byte[] encode(byte[])>
<java.util.Base64.Encoder: int encode(byte[],byte[])>
<java.util.Base64.Encoder: java.nio.ByteBuffer encode(java.nio.ByteBuffer)>
<java.util.Base64.Encoder: java.util.Base64.Encoder withoutPadding()>
<java.util.Base64.Encoder: java.io.OutputStream wrap(java.io.OutputStream)>
<java.util.Base64.Encoder: java.lang.String encodeToString(byte[])>
<android.telecom.Phone: void addListener(android.telecom.Phone.Listener)>
<android.telecom.Phone: void setMuted(boolean)>
<android.telecom.Phone: void removeListener(android.telecom.Phone.Listener)>
<android.telecom.Phone: void requestBluetoothAudio(java.lang.String)>
<android.telecom.Phone: boolean canAddCall()>
<android.telecom.Phone: android.telecom.CallAudioState getCallAudioState()>
<android.telecom.Phone: java.util.List getCalls()>
<android.telecom.Phone: void setAudioRoute(int)>
<android.telecom.Phone: android.telecom.AudioState getAudioState()>
<android.view.Choreographer.FrameCallback: void doFrame(long)>
<android.mtp.MtpStorageInfo: long getFreeSpace()>
<android.mtp.MtpStorageInfo: int getStorageId()>
<android.mtp.MtpStorageInfo: java.lang.String getDescription()>
<android.mtp.MtpStorageInfo: long getMaxCapacity()>
<android.mtp.MtpStorageInfo: java.lang.String getVolumeIdentifier()>
<java.security.cert.PKIXCertPathValidatorResult: java.lang.Object clone()>
<java.security.cert.PKIXCertPathValidatorResult: java.security.cert.TrustAnchor getTrustAnchor()>
<java.security.cert.PKIXCertPathValidatorResult: void <init>(java.security.cert.TrustAnchor,java.security.cert.PolicyNode,java.security.PublicKey)>
<java.security.cert.PKIXCertPathValidatorResult: java.security.cert.PolicyNode getPolicyTree()>
<java.security.cert.PKIXCertPathValidatorResult: java.security.PublicKey getPublicKey()>
<android.media.browse.MediaBrowser.ConnectionCallback: void onConnectionFailed()>
<android.media.browse.MediaBrowser.ConnectionCallback: void <init>()>
<android.media.browse.MediaBrowser.ConnectionCallback: void onConnected()>
<android.media.browse.MediaBrowser.ConnectionCallback: void onConnectionSuspended()>
<java.util.zip.Checksum: void update(byte[],int,int)>
<java.util.zip.Checksum: void reset()>
<java.util.zip.Checksum: void update(int)>
<java.util.zip.Checksum: long getValue()>
<android.icu.text.SelectFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.SelectFormat: void <init>(String)>
<android.icu.text.SelectFormat: java.lang.String format(java.lang.String)>
<android.icu.text.SelectFormat: void applyPattern(java.lang.String)>
<android.icu.text.SelectFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>
<android.icu.text.SelectFormat: java.lang.String toPattern()>
<android.telephony.PhoneNumberUtils: java.lang.String toCallerIDMinMatch(java.lang.String)>
<android.telephony.PhoneNumberUtils: void addTtsSpan(android.text.Spannable,int,int)>
<android.telephony.PhoneNumberUtils: boolean isLocalEmergencyNumber(android.content.Context,java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean isNonSeparator(char)>
<android.telephony.PhoneNumberUtils: boolean isVoiceMailNumber(java.lang.String)>
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCDWithLength(java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String convertKeypadLettersToDigits(java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean isISODigit(char)>
<android.telephony.PhoneNumberUtils: java.lang.String extractNetworkPortion(java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean is12Key(char)>
<android.telephony.PhoneNumberUtils: java.lang.String calledPartyBCDToString(byte[],int,int,int)>
<android.telephony.PhoneNumberUtils: java.lang.String formatNumberToRFC3966(java.lang.String,java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(java.lang.String)>
<android.telephony.PhoneNumberUtils: CharSequence createTtsSpannable(CharSequence)>
<android.telephony.PhoneNumberUtils: boolean isStartsPostDial(char)>
<android.telephony.PhoneNumberUtils: java.lang.String calledPartyBCDFragmentToString(byte[],int,int,int)>
<android.telephony.PhoneNumberUtils: java.lang.String stringFromStringAndTOA(java.lang.String,int)>
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String,java.lang.String,java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String formatNumberToE164(java.lang.String,java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean isDialable(char)>
<android.telephony.PhoneNumberUtils: boolean isWellFormedSmsAddress(java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String replaceUnicodeDigits(java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean isGlobalPhoneNumber(java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String extractPostDialPortion(java.lang.String)>
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCD(java.lang.String)>
<android.telephony.PhoneNumberUtils: int toaFromString(java.lang.String)>
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String,int)>
<android.telephony.PhoneNumberUtils: boolean compare(java.lang.String,java.lang.String)>
<android.telephony.PhoneNumberUtils: void formatNanpNumber(android.text.Editable)>
<android.telephony.PhoneNumberUtils: java.lang.String getStrippedReversed(java.lang.String)>
<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(java.util.Locale)>
<android.telephony.PhoneNumberUtils: void formatJapaneseNumber(android.text.Editable)>
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean isReallyDialable(char)>
<android.telephony.PhoneNumberUtils: java.lang.String calledPartyBCDToString(byte[],int,int)>
<android.telephony.PhoneNumberUtils: java.lang.String getNumberFromIntent(android.content.Intent,android.content.Context)>
<android.telephony.PhoneNumberUtils: void <init>()>
<android.telephony.PhoneNumberUtils: java.lang.String calledPartyBCDFragmentToString(byte[],int,int)>
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String,java.lang.String)>
<android.telephony.PhoneNumberUtils: void formatNumber(android.text.Editable,int)>
<android.telephony.PhoneNumberUtils: boolean compare(android.content.Context,java.lang.String,java.lang.String)>
<android.telephony.PhoneNumberUtils: android.text.style.TtsSpan createTtsSpan(java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String normalizeNumber(java.lang.String)>
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String)>
<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int)>
<javax.crypto.spec.PBEKeySpec: byte[] getSalt()>
<javax.crypto.spec.PBEKeySpec: void clearPassword()>
<javax.crypto.spec.PBEKeySpec: int getIterationCount()>
<javax.crypto.spec.PBEKeySpec: void <init>(char[])>
<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>
<javax.crypto.spec.PBEKeySpec: int getKeyLength()>
<javax.crypto.spec.PBEKeySpec: char[] getPassword()>
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getG()>
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getP()>
<javax.crypto.spec.DHPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getY()>
<android.nfc.cardemulation.HostApduService: void onDeactivated(int)>
<android.nfc.cardemulation.HostApduService: void sendResponseApdu(byte[])>
<android.nfc.cardemulation.HostApduService: byte[] processCommandApdu(byte[],android.os.Bundle)>
<android.nfc.cardemulation.HostApduService: android.os.IBinder onBind(android.content.Intent)>
<android.nfc.cardemulation.HostApduService: void <init>()>
<android.nfc.cardemulation.HostApduService: void notifyUnhandled()>
<android.app.AppOpsManager.HistoricalOp: long getBackgroundAccessDuration(int)>
<android.app.AppOpsManager.HistoricalOp: long getAccessCount(int,int,int)>
<android.app.AppOpsManager.HistoricalOp: long getForegroundRejectCount(int)>
<android.app.AppOpsManager.HistoricalOp: long getBackgroundAccessCount(int)>
<android.app.AppOpsManager.HistoricalOp: java.lang.String getOpName()>
<android.app.AppOpsManager.HistoricalOp: long getBackgroundRejectCount(int)>
<android.app.AppOpsManager.HistoricalOp: int describeContents()>
<android.app.AppOpsManager.HistoricalOp: long getAccessDuration(int,int,int)>
<android.app.AppOpsManager.HistoricalOp: void writeToParcel(android.os.Parcel,int)>
<android.app.AppOpsManager.HistoricalOp: long getForegroundAccessCount(int)>
<android.app.AppOpsManager.HistoricalOp: long getForegroundAccessDuration(int)>
<android.app.AppOpsManager.HistoricalOp: long getRejectCount(int,int,int)>
<android.app.TimePickerDialog.OnTimeSetListener: void onTimeSet(android.widget.TimePicker,int,int)>
<java.util.IllegalFormatFlagsException: void <init>(String)>
<java.util.IllegalFormatFlagsException: java.lang.String getFlags()>
<android.view.AbsSavedState: void <init>(android.os.Parcelable)>
<android.view.AbsSavedState: android.os.Parcelable getSuperState()>
<android.view.AbsSavedState: int describeContents()>
<android.view.AbsSavedState: void writeToParcel(android.os.Parcel,int)>
<android.view.AbsSavedState: void <init>(android.os.Parcel)>
<android.view.AbsSavedState: void <init>(android.os.Parcel,ClassLoader)>
<android.net.wifi.aware.AttachCallback: void <init>()>
<android.net.wifi.aware.AttachCallback: void onAttachFailed()>
<android.net.wifi.aware.AttachCallback: void onAttached(android.net.wifi.aware.WifiAwareSession)>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setSubscribeType(int)>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig build()>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setMaxDistanceMm(int)>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setServiceSpecificInfo(byte[])>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setMatchFilter(java.util.List)>
<android.net.wifi.aware.SubscribeConfig.Builder: void <init>()>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setTtlSec(int)>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setTerminateNotificationEnabled(boolean)>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setServiceName(java.lang.String)>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setMinDistanceMm(int)>
<java.io.FileWriter: void <init>(String)>
<java.io.FileWriter: void <init>(java.io.File,boolean)>
<java.io.FileWriter: void <init>(java.io.File)>
<java.io.FileWriter: void <init>(java.io.FileDescriptor)>
<java.io.FileWriter: void <init>(String,boolean)>
<android.provider.ContactsContract.PinnedPositions: void <init>()>
<android.provider.ContactsContract.PinnedPositions: void undemote(android.content.ContentResolver,long)>
<android.provider.ContactsContract.PinnedPositions: void pin(android.content.ContentResolver,long,int)>
<android.widget.PopupWindow: boolean isAboveAnchor()>
<android.widget.PopupWindow: android.view.View getContentView()>
<android.widget.PopupWindow: android.transition.Transition getExitTransition()>
<android.widget.PopupWindow: void <init>(android.view.View,int,int,boolean)>
<android.widget.PopupWindow: boolean isTouchModal()>
<android.widget.PopupWindow: boolean isSplitTouchEnabled()>
<android.widget.PopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.PopupWindow: float getElevation()>
<android.widget.PopupWindow: int getInputMethodMode()>
<android.widget.PopupWindow: void setAnimationStyle(int)>
<android.widget.PopupWindow: void setFocusable(boolean)>
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>
<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.PopupWindow: void setTouchModal(boolean)>
<android.widget.PopupWindow: android.graphics.drawable.Drawable getBackground()>
<android.widget.PopupWindow: android.graphics.Rect getEpicenterBounds()>
<android.widget.PopupWindow: void setEpicenterBounds(android.graphics.Rect)>
<android.widget.PopupWindow: boolean isOutsideTouchable()>
<android.widget.PopupWindow: void update(android.view.View,int,int)>
<android.widget.PopupWindow: int getAnimationStyle()>
<android.widget.PopupWindow: void showAsDropDown(android.view.View,int,int,int)>
<android.widget.PopupWindow: void update(int,int)>
<android.widget.PopupWindow: void setContentView(android.view.View)>
<android.widget.PopupWindow: boolean isShowing()>
<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.PopupWindow: int getHeight()>
<android.widget.PopupWindow: void setWindowLayoutType(int)>
<android.widget.PopupWindow: void <init>(int,int)>
<android.widget.PopupWindow: boolean isFocusable()>
<android.widget.PopupWindow: void setIgnoreCheekPress()>
<android.widget.PopupWindow: boolean isTouchable()>
<android.widget.PopupWindow: void setTouchInterceptor(android.view.View.OnTouchListener)>
<android.widget.PopupWindow: void showAsDropDown(android.view.View)>
<android.widget.PopupWindow: void setAttachedInDecor(boolean)>
<android.widget.PopupWindow: void setInputMethodMode(int)>
<android.widget.PopupWindow: void <init>(android.view.View)>
<android.widget.PopupWindow: boolean isClippedToScreen()>
<android.widget.PopupWindow: void setOutsideTouchable(boolean)>
<android.widget.PopupWindow: void <init>()>
<android.widget.PopupWindow: void setWidth(int)>
<android.widget.PopupWindow: void setWindowLayoutMode(int,int)>
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int)>
<android.widget.PopupWindow: void setIsClippedToScreen(boolean)>
<android.widget.PopupWindow: boolean getOverlapAnchor()>
<android.widget.PopupWindow: void update(int,int,int,int)>
<android.widget.PopupWindow: int getWidth()>
<android.widget.PopupWindow: void setSplitTouchEnabled(boolean)>
<android.widget.PopupWindow: void setIsLaidOutInScreen(boolean)>
<android.widget.PopupWindow: void showAsDropDown(android.view.View,int,int)>
<android.widget.PopupWindow: void setElevation(float)>
<android.widget.PopupWindow: void <init>(android.view.View,int,int)>
<android.widget.PopupWindow: void setOverlapAnchor(boolean)>
<android.widget.PopupWindow: boolean isClippingEnabled()>
<android.widget.PopupWindow: void setHeight(int)>
<android.widget.PopupWindow: void setSoftInputMode(int)>
<android.widget.PopupWindow: void update(int,int,int,int,boolean)>
<android.widget.PopupWindow: void setTouchable(boolean)>
<android.widget.PopupWindow: int getSoftInputMode()>
<android.widget.PopupWindow: void update(android.view.View,int,int,int,int)>
<android.widget.PopupWindow: void dismiss()>
<android.widget.PopupWindow: int getWindowLayoutType()>
<android.widget.PopupWindow: void setClippingEnabled(boolean)>
<android.widget.PopupWindow: void setEnterTransition(android.transition.Transition)>
<android.widget.PopupWindow: void setOnDismissListener(android.widget.PopupWindow.OnDismissListener)>
<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View)>
<android.widget.PopupWindow: boolean isLaidOutInScreen()>
<android.widget.PopupWindow: void <init>(android.content.Context)>
<android.widget.PopupWindow: void update()>
<android.widget.PopupWindow: boolean isAttachedInDecor()>
<android.widget.PopupWindow: android.transition.Transition getEnterTransition()>
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int,boolean)>
<android.widget.PopupWindow: void setExitTransition(android.transition.Transition)>
<java.security.cert.CertificateException: void <init>()>
<java.security.cert.CertificateException: void <init>(Throwable)>
<java.security.cert.CertificateException: void <init>(String)>
<java.security.cert.CertificateException: void <init>(String,Throwable)>
<android.app.job.JobWorkItem: long getEstimatedNetworkDownloadBytes()>
<android.app.job.JobWorkItem: void <init>(android.content.Intent,long,long)>
<android.app.job.JobWorkItem: android.content.Intent getIntent()>
<android.app.job.JobWorkItem: int describeContents()>
<android.app.job.JobWorkItem: void writeToParcel(android.os.Parcel,int)>
<android.app.job.JobWorkItem: void <init>(android.content.Intent)>
<android.app.job.JobWorkItem: int getDeliveryCount()>
<android.app.job.JobWorkItem: long getEstimatedNetworkUploadBytes()>
<android.app.SharedElementCallback.OnSharedElementsReadyListener: void onSharedElementsReady()>
<android.media.MediaCodec.CryptoException: int getErrorCode()>
<android.media.MediaCodec.CryptoException: void <init>(int,String)>
<android.net.wifi.p2p.WifiP2pInfo: int describeContents()>
<android.net.wifi.p2p.WifiP2pInfo: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.p2p.WifiP2pInfo: void <init>()>
<android.net.wifi.p2p.WifiP2pInfo: void <init>(android.net.wifi.p2p.WifiP2pInfo)>
<android.icu.util.VersionInfo: int getMajor()>
<android.icu.util.VersionInfo: int compareTo(android.icu.util.VersionInfo)>
<android.icu.util.VersionInfo: int getMicro()>
<android.icu.util.VersionInfo: android.icu.util.VersionInfo getInstance(int,int,int,int)>
<android.icu.util.VersionInfo: android.icu.util.VersionInfo getInstance(int,int)>
<android.icu.util.VersionInfo: android.icu.util.VersionInfo getInstance(int,int,int)>
<android.icu.util.VersionInfo: android.icu.util.VersionInfo getInstance(java.lang.String)>
<android.icu.util.VersionInfo: int getMilli()>
<android.icu.util.VersionInfo: int getMinor()>
<android.icu.util.VersionInfo: android.icu.util.VersionInfo getInstance(int)>
<android.media.RemoteControlClient: void <init>(android.app.PendingIntent,android.os.Looper)>
<android.media.RemoteControlClient: void setPlaybackPositionUpdateListener(android.media.RemoteControlClient.OnPlaybackPositionUpdateListener)>
<android.media.RemoteControlClient: android.media.session.MediaSession getMediaSession()>
<android.media.RemoteControlClient: void setPlaybackState(int)>
<android.media.RemoteControlClient: void setPlaybackState(int,long,float)>
<android.media.RemoteControlClient: void setOnGetPlaybackPositionListener(android.media.RemoteControlClient.OnGetPlaybackPositionListener)>
<android.media.RemoteControlClient: android.media.RemoteControlClient.MetadataEditor editMetadata(boolean)>
<android.media.RemoteControlClient: void <init>(android.app.PendingIntent)>
<android.media.RemoteControlClient: void setMetadataUpdateListener(android.media.RemoteControlClient.OnMetadataUpdateListener)>
<android.media.RemoteControlClient: void setTransportControlFlags(int)>
<android.companion.BluetoothLeDeviceFilter: void writeToParcel(android.os.Parcel,int)>
<android.companion.BluetoothLeDeviceFilter: int describeContents()>
<android.companion.BluetoothLeDeviceFilter: int getRenamePrefixLengthLimit()>
<android.text.method.ReplacementTransformationMethod: void onFocusChanged(android.view.View,CharSequence,boolean,int,android.graphics.Rect)>
<android.text.method.ReplacementTransformationMethod: void <init>()>
<android.text.method.ReplacementTransformationMethod: char[] getReplacement()>
<android.text.method.ReplacementTransformationMethod: char[] getOriginal()>
<android.text.method.ReplacementTransformationMethod: CharSequence getTransformation(CharSequence,android.view.View)>
<java.nio.file.AtomicMoveNotSupportedException: void <init>(String,String,String)>
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>
<android.database.sqlite.SQLiteDatabaseCorruptException: void <init>()>
<android.database.sqlite.SQLiteDatabaseCorruptException: void <init>(String)>
<android.service.notification.NotificationAssistantService: android.service.notification.Adjustment onNotificationEnqueued(android.service.notification.StatusBarNotification,android.app.NotificationChannel)>
<android.service.notification.NotificationAssistantService: android.os.IBinder onBind(android.content.Intent)>
<android.service.notification.NotificationAssistantService: void adjustNotification(android.service.notification.Adjustment)>
<android.service.notification.NotificationAssistantService: void onActionInvoked(java.lang.String,android.app.Notification.Action,int)>
<android.service.notification.NotificationAssistantService: void onNotificationSnoozedUntilContext(android.service.notification.StatusBarNotification,java.lang.String)>
<android.service.notification.NotificationAssistantService: android.service.notification.Adjustment onNotificationEnqueued(android.service.notification.StatusBarNotification)>
<android.service.notification.NotificationAssistantService: void adjustNotifications(java.util.List)>
<android.service.notification.NotificationAssistantService: void <init>()>
<android.service.notification.NotificationAssistantService: void onNotificationsSeen(java.util.List)>
<android.service.notification.NotificationAssistantService: void onSuggestedReplySent(java.lang.String,CharSequence,int)>
<android.service.notification.NotificationAssistantService: void onAllowedAdjustmentsChanged()>
<android.service.notification.NotificationAssistantService: void onNotificationExpansionChanged(java.lang.String,boolean,boolean)>
<android.service.notification.NotificationAssistantService: void unsnoozeNotification(java.lang.String)>
<android.service.notification.NotificationAssistantService: void onNotificationDirectReplied(java.lang.String)>
<javax.sql.RowSetWriter: boolean writeData(javax.sql.RowSetInternal)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.lang.String)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(int,int,int,int,int,int,int,int)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.Duration newDuration(boolean,int,int,int,int,int,int)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.Duration newDurationYearMonth(boolean,java.math.BigInteger,java.math.BigInteger)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.Duration newDurationDayTime(boolean,int,int,int,int)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.Duration newDuration(java.lang.String)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.Duration newDurationDayTime(boolean,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.math.BigInteger,int,int,int,int,int,java.math.BigDecimal,int)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.Duration newDurationDayTime(long)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendarDate(int,int,int,int)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar()>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendarTime(int,int,int,java.math.BigDecimal,int)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.util.GregorianCalendar)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.Duration newDurationYearMonth(boolean,int,int)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.Duration newDuration(long)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendarTime(int,int,int,int)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.Duration newDuration(boolean,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigDecimal)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.Duration newDurationYearMonth(java.lang.String)>
<javax.xml.datatype.DatatypeFactory: void <init>()>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.Duration newDurationYearMonth(long)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.DatatypeFactory newInstance(java.lang.String,java.lang.ClassLoader)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.DatatypeFactory newInstance()>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.Duration newDurationDayTime(java.lang.String)>
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendarTime(int,int,int,int,int)>
<android.graphics.ImageDecoder: android.graphics.ImageDecoder.Source createSource(java.nio.ByteBuffer)>
<android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder.Source,android.graphics.ImageDecoder.OnHeaderDecodedListener)>
<android.graphics.ImageDecoder: void setPostProcessor(android.graphics.PostProcessor)>
<android.graphics.ImageDecoder: void setTargetSampleSize(int)>
<android.graphics.ImageDecoder: void setUnpremultipliedRequired(boolean)>
<android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder.Source)>
<android.graphics.ImageDecoder: android.graphics.Rect getCrop()>
<android.graphics.ImageDecoder: android.graphics.PostProcessor getPostProcessor()>
<android.graphics.ImageDecoder: void setTargetColorSpace(android.graphics.ColorSpace)>
<android.graphics.ImageDecoder: void setOnPartialImageListener(android.graphics.ImageDecoder.OnPartialImageListener)>
<android.graphics.ImageDecoder: boolean isMimeTypeSupported(java.lang.String)>
<android.graphics.ImageDecoder: void setDecodeAsAlphaMaskEnabled(boolean)>
<android.graphics.ImageDecoder: boolean isMutableRequired()>
<android.graphics.ImageDecoder: void setCrop(android.graphics.Rect)>
<android.graphics.ImageDecoder: android.graphics.ImageDecoder.Source createSource(android.content.res.Resources,java.io.InputStream,int)>
<android.graphics.ImageDecoder: android.graphics.ImageDecoder.Source createSource(java.util.concurrent.Callable)>
<android.graphics.ImageDecoder: android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder.Source,android.graphics.ImageDecoder.OnHeaderDecodedListener)>
<android.graphics.ImageDecoder: int getMemorySizePolicy()>
<android.graphics.ImageDecoder: boolean isDecodeAsAlphaMaskEnabled()>
<android.graphics.ImageDecoder: android.graphics.ImageDecoder.Source createSource(android.content.ContentResolver,android.net.Uri)>
<android.graphics.ImageDecoder: int getAllocator()>
<android.graphics.ImageDecoder: android.graphics.ImageDecoder.Source createSource(android.content.res.AssetManager,java.lang.String)>
<android.graphics.ImageDecoder: void setMutableRequired(boolean)>
<android.graphics.ImageDecoder: android.graphics.ImageDecoder.OnPartialImageListener getOnPartialImageListener()>
<android.graphics.ImageDecoder: void setMemorySizePolicy(int)>
<android.graphics.ImageDecoder: android.graphics.ImageDecoder.Source createSource(java.io.File)>
<android.graphics.ImageDecoder: void setAllocator(int)>
<android.graphics.ImageDecoder: void close()>
<android.graphics.ImageDecoder: android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder.Source)>
<android.graphics.ImageDecoder: void setTargetSize(@Pxint,@Pxint)>
<android.graphics.ImageDecoder: android.graphics.ImageDecoder.Source createSource(android.content.res.Resources,int)>
<android.graphics.ImageDecoder: boolean isUnpremultipliedRequired()>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setId(int,java.lang.String,java.lang.String,java.lang.String)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setAutofillValue(android.view.autofill.AutofillValue)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setAutofillHints(java.lang.String[])>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setOpaque(boolean)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void <init>(android.view.autofill.AutofillId,long,int)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: CharSequence getText()>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setChildCount(int)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: android.view.contentcapture.ViewNode getNode()>
<android.view.contentcapture.ViewNode.ViewStructureImpl: android.view.ViewStructure newChild(int)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setVisibility(int)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void asyncCommit()>
<android.view.contentcapture.ViewNode.ViewStructureImpl: android.view.autofill.AutofillId getAutofillId()>
<android.view.contentcapture.ViewNode.ViewStructureImpl: android.view.ViewStructure.HtmlInfo.Builder newHtmlInfoBuilder(java.lang.String)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setTransformation(android.graphics.Matrix)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setAutofillOptions(CharSequence[])>
<android.view.contentcapture.ViewNode.ViewStructureImpl: android.os.Bundle getExtras()>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setAutofillType(int)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setDataIsSensitive(boolean)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: int getChildCount()>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setActivated(boolean)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: boolean hasExtras()>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setClassName(java.lang.String)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: int getTextSelectionEnd()>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setAutofillId(android.view.autofill.AutofillId,int)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setAccessibilityFocused(boolean)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setAssistBlocked(boolean)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: int getTextSelectionStart()>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setTextStyle(float,int,int,int)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setFocused(boolean)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setSelected(boolean)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setContentDescription(CharSequence)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setAlpha(float)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setCheckable(boolean)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setHtmlInfo(android.view.ViewStructure.HtmlInfo)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setTextLines(int[],int[])>
<android.view.contentcapture.ViewNode.ViewStructureImpl: int addChildCount(int)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setFocusable(boolean)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: android.graphics.Rect getTempRect()>
<android.view.contentcapture.ViewNode.ViewStructureImpl: CharSequence getHint()>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setHint(CharSequence)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setContextClickable(boolean)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setWebDomain(java.lang.String)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setChecked(boolean)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setText(CharSequence,int,int)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setAutofillId(android.view.autofill.AutofillId)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void <init>(android.view.View)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setLocaleList(android.os.LocaleList)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setEnabled(boolean)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setClickable(boolean)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setDimens(int,int,int,int,int,int)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setElevation(float)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setLongClickable(boolean)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setInputType(int)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: void setText(CharSequence)>
<android.view.contentcapture.ViewNode.ViewStructureImpl: android.view.ViewStructure asyncNewChild(int)>
<android.view.contentcapture.ContentCaptureManager: boolean isContentCaptureEnabled()>
<android.view.contentcapture.ContentCaptureManager: java.util.Set getContentCaptureConditions()>
<android.view.contentcapture.ContentCaptureManager: void setContentCaptureEnabled(boolean)>
<android.view.contentcapture.ContentCaptureManager: android.content.ComponentName getServiceComponentName()>
<android.view.contentcapture.ContentCaptureManager: void removeData(android.view.contentcapture.DataRemovalRequest)>
<android.view.contentcapture.ContentCaptureManager: boolean isContentCaptureFeatureEnabled()>
<android.telephony.ims.stub.ImsSmsImplBase: void onReady()>
<android.telephony.ims.stub.ImsSmsImplBase: void onSmsReceived(int,java.lang.String,byte[])>
<android.telephony.ims.stub.ImsSmsImplBase: void onSendSmsResult(int,int,int,int)>
<android.telephony.ims.stub.ImsSmsImplBase: void <init>()>
<android.telephony.ims.stub.ImsSmsImplBase: void onSmsStatusReportReceived(int,int,java.lang.String,byte[])>
<android.telephony.ims.stub.ImsSmsImplBase: void acknowledgeSms(int,int,int)>
<android.telephony.ims.stub.ImsSmsImplBase: void acknowledgeSmsReport(int,int,int)>
<android.telephony.ims.stub.ImsSmsImplBase: void sendSms(int,int,java.lang.String,java.lang.String,boolean,byte[])>
<android.telephony.ims.stub.ImsSmsImplBase: java.lang.String getSmsFormat()>
<android.widget.RemoteViewsService: android.os.IBinder onBind(android.content.Intent)>
<android.widget.RemoteViewsService: void <init>()>
<android.widget.RemoteViewsService: android.widget.RemoteViewsService.RemoteViewsFactory onGetViewFactory(android.content.Intent)>
<android.telephony.PhoneStateListener: void onServiceStateChanged(android.telephony.ServiceState)>
<android.telephony.PhoneStateListener: void onCallDisconnectCauseChanged(int,int)>
<android.telephony.PhoneStateListener: void onPreciseDataConnectionStateChanged(android.telephony.PreciseDataConnectionState)>
<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int)>
<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int,int)>
<android.telephony.PhoneStateListener: void onSignalStrengthChanged(int)>
<android.telephony.PhoneStateListener: void onActiveDataSubscriptionIdChanged(int)>
<android.telephony.PhoneStateListener: void onCellInfoChanged(java.util.List)>
<android.telephony.PhoneStateListener: void onCallAttributesChanged(android.telephony.CallAttributes)>
<android.telephony.PhoneStateListener: void onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)>
<android.telephony.PhoneStateListener: void <init>(java.util.concurrent.Executor)>
<android.telephony.PhoneStateListener: void onCallStateChanged(int,java.lang.String)>
<android.telephony.PhoneStateListener: void <init>()>
<android.telephony.PhoneStateListener: void onDataActivity(int)>
<android.telephony.PhoneStateListener: void onSignalStrengthsChanged(android.telephony.SignalStrength)>
<android.telephony.PhoneStateListener: void onUserMobileDataStateChanged(boolean)>
<android.telephony.PhoneStateListener: void onPreciseCallStateChanged(android.telephony.PreciseCallState)>
<android.telephony.PhoneStateListener: void onSrvccStateChanged(int)>
<android.telephony.PhoneStateListener: void onCellLocationChanged(android.telephony.CellLocation)>
<android.telephony.PhoneStateListener: void onRadioPowerStateChanged(int)>
<android.telephony.PhoneStateListener: void onVoiceActivationStateChanged(int)>
<android.telephony.PhoneStateListener: void onCallForwardingIndicatorChanged(boolean)>
<android.telephony.PhoneStateListener: void onMessageWaitingIndicatorChanged(boolean)>
<javax.xml.transform.dom.DOMLocator extends javax.xml.transform.SourceLocator: org.w3c.dom.Node getOriginatingNode()>
<java.lang.InheritableThreadLocal: void <init>()>
<java.lang.InheritableThreadLocal: T childValue(T)>
<android.app.backup.BackupAgent: void <init>()>
<android.app.backup.BackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>
<android.app.backup.BackupAgent: void onRestoreFinished()>
<android.app.backup.BackupAgent: void onQuotaExceeded(long,long)>
<android.app.backup.BackupAgent: void onCreate()>
<android.app.backup.BackupAgent: void onFullBackup(android.app.backup.FullBackupDataOutput)>
<android.app.backup.BackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,java.io.File,int,long,long)>
<android.app.backup.BackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<android.app.backup.BackupAgent: void onRestore(android.app.backup.BackupDataInput,long,android.os.ParcelFileDescriptor)>
<android.app.backup.BackupAgent: void fullBackupFile(java.io.File,android.app.backup.FullBackupDataOutput)>
<android.app.backup.BackupAgent: void onDestroy()>
<java.nio.channels.MulticastChannel extends java.nio.channels.NetworkChannel: java.nio.channels.MembershipKey join(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)>
<java.nio.channels.MulticastChannel extends java.nio.channels.NetworkChannel: java.nio.channels.MembershipKey join(java.net.InetAddress,java.net.NetworkInterface)>
<org.xml.sax.EntityResolver: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>
<android.provider.FontsContract.FontRequestCallback: void onTypefaceRetrieved(android.graphics.Typeface)>
<android.provider.FontsContract.FontRequestCallback: void <init>()>
<android.provider.FontsContract.FontRequestCallback: void onTypefaceRequestFailed(int)>
<android.net.TrafficStats: long getLoopbackTxPackets()>
<android.net.TrafficStats: long getTotalTxPackets()>
<android.net.TrafficStats: long getMobileTxPackets()>
<android.net.TrafficStats: long getUidTxPackets(int)>
<android.net.TrafficStats: void tagDatagramSocket(java.net.DatagramSocket)>
<android.net.TrafficStats: long getTotalTxBytes()>
<android.net.TrafficStats: int getThreadStatsUid()>
<android.net.TrafficStats: long getTotalRxBytes()>
<android.net.TrafficStats: void setThreadStatsTagBackup()>
<android.net.TrafficStats: long getUidTcpRxSegments(int)>
<android.net.TrafficStats: void clearThreadStatsTag()>
<android.net.TrafficStats: long getMobileRxPackets()>
<android.net.TrafficStats: int getThreadStatsTag()>
<android.net.TrafficStats: long getLoopbackRxBytes()>
<android.net.TrafficStats: void setThreadStatsTag(int)>
<android.net.TrafficStats: void tagFileDescriptor(java.io.FileDescriptor)>
<android.net.TrafficStats: void incrementOperationCount(int,int)>
<android.net.TrafficStats: void <init>()>
<android.net.TrafficStats: void untagDatagramSocket(java.net.DatagramSocket)>
<android.net.TrafficStats: long getTotalRxPackets()>
<android.net.TrafficStats: long getUidTcpTxSegments(int)>
<android.net.TrafficStats: long getUidUdpRxBytes(int)>
<android.net.TrafficStats: void setThreadStatsTagApp()>
<android.net.TrafficStats: int getAndSetThreadStatsTag(int)>
<android.net.TrafficStats: long getLoopbackRxPackets()>
<android.net.TrafficStats: long getUidTcpRxBytes(int)>
<android.net.TrafficStats: long getUidTcpTxBytes(int)>
<android.net.TrafficStats: void incrementOperationCount(int)>
<android.net.TrafficStats: long getUidTxBytes(int)>
<android.net.TrafficStats: long getLoopbackTxBytes()>
<android.net.TrafficStats: void tagSocket(java.net.Socket)>
<android.net.TrafficStats: long getUidRxPackets(int)>
<android.net.TrafficStats: void setThreadStatsUid(int)>
<android.net.TrafficStats: long getUidUdpRxPackets(int)>
<android.net.TrafficStats: void untagSocket(java.net.Socket)>
<android.net.TrafficStats: void setThreadStatsTagRestore()>
<android.net.TrafficStats: long getMobileRxBytes()>
<android.net.TrafficStats: void clearThreadStatsUid()>
<android.net.TrafficStats: long getMobileTxBytes()>
<android.net.TrafficStats: long getUidUdpTxBytes(int)>
<android.net.TrafficStats: long getUidRxBytes(int)>
<android.net.TrafficStats: void untagFileDescriptor(java.io.FileDescriptor)>
<android.net.TrafficStats: long getUidUdpTxPackets(int)>
<android.icu.util.IslamicCalendar: void <init>(android.icu.util.TimeZone)>
<android.icu.util.IslamicCalendar: void <init>(java.util.Date)>
<android.icu.util.IslamicCalendar: void <init>(android.icu.util.ULocale)>
<android.icu.util.IslamicCalendar: void <init>()>
<android.icu.util.IslamicCalendar: void <init>(int,int,int,int,int,int)>
<android.icu.util.IslamicCalendar: void <init>(android.icu.util.TimeZone,java.util.Locale)>
<android.icu.util.IslamicCalendar: android.icu.util.IslamicCalendar.CalculationType getCalculationType()>
<android.icu.util.IslamicCalendar: void <init>(java.util.Locale)>
<android.icu.util.IslamicCalendar: int handleGetLimit(int,int)>
<android.icu.util.IslamicCalendar: int handleGetExtendedYear()>
<android.icu.util.IslamicCalendar: int handleComputeMonthStart(int,int,boolean)>
<android.icu.util.IslamicCalendar: void <init>(android.icu.util.TimeZone,android.icu.util.ULocale)>
<android.icu.util.IslamicCalendar: void setCalculationType(android.icu.util.IslamicCalendar.CalculationType)>
<android.icu.util.IslamicCalendar: void <init>(int,int,int)>
<android.sax.RootElement: void <init>(String)>
<android.sax.RootElement: org.xml.sax.ContentHandler getContentHandler()>
<android.sax.RootElement: void <init>(String,String)>
<java.lang.LinkageError: void <init>()>
<java.lang.LinkageError: void <init>(String,Throwable)>
<java.lang.LinkageError: void <init>(String)>
<org.w3c.dom.Attr extends org.w3c.dom.Node: java.lang.String getName()>
<org.w3c.dom.Attr extends org.w3c.dom.Node: org.w3c.dom.TypeInfo getSchemaTypeInfo()>
<org.w3c.dom.Attr extends org.w3c.dom.Node: org.w3c.dom.Element getOwnerElement()>
<org.w3c.dom.Attr extends org.w3c.dom.Node: boolean isId()>
<org.w3c.dom.Attr extends org.w3c.dom.Node: boolean getSpecified()>
<org.w3c.dom.Attr extends org.w3c.dom.Node: void setValue(java.lang.String)>
<org.w3c.dom.Attr extends org.w3c.dom.Node: java.lang.String getValue()>
<android.security.KeyChainAliasCallback: void alias(java.lang.String)>
<java.util.logging.ErrorManager: void <init>()>
<java.util.logging.ErrorManager: void error(java.lang.String,Exception,int)>
<android.content.Loader.OnLoadCanceledListener: void onLoadCanceled(android.content.Loader)>
<android.media.MediaSession2: void broadcastSessionCommand(android.media.Session2Command,android.os.Bundle)>
<android.media.MediaSession2: java.lang.Object sendSessionCommand(android.media.MediaSession2.ControllerInfo,android.media.Session2Command,android.os.Bundle)>
<android.media.MediaSession2: void setPlaybackActive(boolean)>
<android.media.MediaSession2: void close()>
<android.media.MediaSession2: java.lang.String getId()>
<android.media.MediaSession2: android.media.Session2Token getToken()>
<android.media.MediaSession2: boolean isPlaybackActive()>
<android.media.MediaSession2: void cancelSessionCommand(android.media.MediaSession2.ControllerInfo,java.lang.Object)>
<android.media.MediaSession2: java.util.List getConnectedControllers()>
<android.app.Notification.Action: android.os.Bundle getExtras()>
<android.app.Notification.Action: int describeContents()>
<android.app.Notification.Action: android.app.Notification.Action clone()>
<android.app.Notification.Action: void <init>(int,CharSequence,android.app.PendingIntent)>
<android.app.Notification.Action: boolean isContextual()>
<android.app.Notification.Action: android.graphics.drawable.Icon getIcon()>
<android.app.Notification.Action: android.app.RemoteInput[] getRemoteInputs()>
<android.app.Notification.Action: int getSemanticAction()>
<android.app.Notification.Action: void writeToParcel(android.os.Parcel,int)>
<android.app.Notification.Action: boolean getAllowGeneratedReplies()>
<android.app.Notification.Action: android.app.RemoteInput[] getDataOnlyRemoteInputs()>
<android.gesture.GestureUtils: android.gesture.OrientedBoundingBox computeOrientedBoundingBox(float[])>
<android.gesture.GestureUtils: float[] temporalSampling(android.gesture.GestureStroke,int)>
<android.gesture.GestureUtils: float[] spatialSampling(android.gesture.Gesture,int,boolean)>
<android.gesture.GestureUtils: float[] spatialSampling(android.gesture.Gesture,int)>
<android.gesture.GestureUtils: android.gesture.OrientedBoundingBox computeOrientedBoundingBox(java.util.ArrayList)>
<java.util.concurrent.CountDownLatch: void <init>(int)>
<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.CountDownLatch: long getCount()>
<java.util.concurrent.CountDownLatch: void await()>
<java.util.concurrent.CountDownLatch: void countDown()>
<android.hardware.location.GeofenceHardwareCallback: void onGeofenceAdd(int,int)>
<android.hardware.location.GeofenceHardwareCallback: void onGeofenceRemove(int,int)>
<android.hardware.location.GeofenceHardwareCallback: void onGeofenceResume(int,int)>
<android.hardware.location.GeofenceHardwareCallback: void <init>()>
<android.hardware.location.GeofenceHardwareCallback: void onGeofenceTransition(int,int,android.location.Location,long,int)>
<android.hardware.location.GeofenceHardwareCallback: void onGeofencePause(int,int)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage acceptEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Consumer,java.util.concurrent.Executor)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenComposeAsync(java.util.function.Function)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage applyToEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Function)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenCombineAsync(java.util.concurrent.CompletionStage,java.util.function.BiFunction)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenRunAsync(Runnable,java.util.concurrent.Executor)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenCompose(java.util.function.Function)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage acceptEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Consumer)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage handleAsync(java.util.function.BiFunction)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletableFuture toCompletableFuture()>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenAcceptBothAsync(java.util.concurrent.CompletionStage,java.util.function.BiConsumer,java.util.concurrent.Executor)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenAcceptAsync(java.util.function.Consumer)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage applyToEither(java.util.concurrent.CompletionStage,java.util.function.Function)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenRunAsync(Runnable)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenCombine(java.util.concurrent.CompletionStage,java.util.function.BiFunction)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenCombineAsync(java.util.concurrent.CompletionStage,java.util.function.BiFunction,java.util.concurrent.Executor)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenApplyAsync(java.util.function.Function,java.util.concurrent.Executor)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage runAfterBoth(java.util.concurrent.CompletionStage,Runnable)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage runAfterBothAsync(java.util.concurrent.CompletionStage,Runnable,java.util.concurrent.Executor)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenComposeAsync(java.util.function.Function,java.util.concurrent.Executor)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage runAfterEither(java.util.concurrent.CompletionStage,Runnable)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenRun(Runnable)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenAcceptBoth(java.util.concurrent.CompletionStage,java.util.function.BiConsumer)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage acceptEither(java.util.concurrent.CompletionStage,java.util.function.Consumer)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage whenCompleteAsync(java.util.function.BiConsumer)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage handle(java.util.function.BiFunction)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenApply(java.util.function.Function)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage handleAsync(java.util.function.BiFunction,java.util.concurrent.Executor)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage applyToEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Function,java.util.concurrent.Executor)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenAcceptBothAsync(java.util.concurrent.CompletionStage,java.util.function.BiConsumer)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenAcceptAsync(java.util.function.Consumer,java.util.concurrent.Executor)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenApplyAsync(java.util.function.Function)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage whenCompleteAsync(java.util.function.BiConsumer,java.util.concurrent.Executor)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage runAfterEitherAsync(java.util.concurrent.CompletionStage,Runnable)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage runAfterBothAsync(java.util.concurrent.CompletionStage,Runnable)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage exceptionally(java.util.function.Function)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage whenComplete(java.util.function.BiConsumer)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenAccept(java.util.function.Consumer)>
<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage runAfterEitherAsync(java.util.concurrent.CompletionStage,Runnable,java.util.concurrent.Executor)>
<java.text.CollationKey: int compareTo(java.text.CollationKey)>
<java.text.CollationKey: java.lang.String getSourceString()>
<java.text.CollationKey: void <init>(String)>
<java.text.CollationKey: byte[] toByteArray()>
<android.media.tv.TvStreamConfig.Builder: void <init>()>
<android.media.tv.TvStreamConfig.Builder: android.media.tv.TvStreamConfig.Builder type(int)>
<android.media.tv.TvStreamConfig.Builder: android.media.tv.TvStreamConfig.Builder generation(int)>
<android.media.tv.TvStreamConfig.Builder: android.media.tv.TvStreamConfig.Builder maxHeight(int)>
<android.media.tv.TvStreamConfig.Builder: android.media.tv.TvStreamConfig.Builder streamId(int)>
<android.media.tv.TvStreamConfig.Builder: android.media.tv.TvStreamConfig.Builder maxWidth(int)>
<android.media.tv.TvStreamConfig.Builder: android.media.tv.TvStreamConfig build()>
<android.view.View.OnUnhandledKeyEventListener: boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent)>
<android.media.effect.Effect: void release()>
<android.media.effect.Effect: void apply(int,int,int,int)>
<android.media.effect.Effect: void <init>()>
<android.media.effect.Effect: void setUpdateListener(android.media.effect.EffectUpdateListener)>
<android.media.effect.Effect: void setParameter(java.lang.String,java.lang.Object)>
<android.media.effect.Effect: java.lang.String getName()>
<android.renderscript.ScriptIntrinsicHistogram: void setDotCoefficients(float,float,float,float)>
<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Script.FieldID getFieldID_Input()>
<android.renderscript.ScriptIntrinsicHistogram: void forEach(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicHistogram: void forEach_Dot(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicHistogram: void setOutput(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicHistogram: void forEach(android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicHistogram: void forEach_Dot(android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.ScriptIntrinsicHistogram create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Script.KernelID getKernelID_Separate()>
<android.app.TimePickerDialog: void onTimeChanged(android.widget.TimePicker,int,int)>
<android.app.TimePickerDialog: void <init>(android.content.Context,android.app.TimePickerDialog.OnTimeSetListener,int,int,boolean)>
<android.app.TimePickerDialog: void <init>(android.content.Context,int,android.app.TimePickerDialog.OnTimeSetListener,int,int,boolean)>
<android.app.TimePickerDialog: void updateTime(int,int)>
<android.app.TimePickerDialog: android.widget.TimePicker getTimePicker()>
<android.app.TimePickerDialog: void onClick(android.content.DialogInterface,int)>
<android.telephony.euicc.EuiccManager: java.lang.String getEid()>
<android.telephony.euicc.EuiccManager: int getOtaStatus()>
<android.telephony.euicc.EuiccManager: void eraseSubscriptions(android.app.PendingIntent)>
<android.telephony.euicc.EuiccManager: android.telephony.euicc.EuiccInfo getEuiccInfo()>
<android.telephony.euicc.EuiccManager: void startResolutionActivity(android.app.Activity,int,android.content.Intent,android.app.PendingIntent)>
<android.telephony.euicc.EuiccManager: void getDownloadableSubscriptionMetadata(android.telephony.euicc.DownloadableSubscription,android.app.PendingIntent)>
<android.telephony.euicc.EuiccManager: void getDefaultDownloadableSubscriptionList(android.app.PendingIntent)>
<android.telephony.euicc.EuiccManager: void deleteSubscription(int,android.app.PendingIntent)>
<android.telephony.euicc.EuiccManager: void downloadSubscription(android.telephony.euicc.DownloadableSubscription,boolean,android.app.PendingIntent)>
<android.telephony.euicc.EuiccManager: android.telephony.euicc.EuiccManager createForCardId(int)>
<android.telephony.euicc.EuiccManager: void continueOperation(android.content.Intent,android.os.Bundle)>
<android.telephony.euicc.EuiccManager: void updateSubscriptionNickname(int,java.lang.String,android.app.PendingIntent)>
<android.telephony.euicc.EuiccManager: boolean isEnabled()>
<android.telephony.euicc.EuiccManager: void switchToSubscription(int,android.app.PendingIntent)>
<java.awt.font.TextAttribute: void <init>(String)>
<javax.crypto.spec.DESKeySpec: boolean isParityAdjusted(byte[],int)>
<javax.crypto.spec.DESKeySpec: boolean isWeak(byte[],int)>
<javax.crypto.spec.DESKeySpec: void <init>(byte[],int)>
<javax.crypto.spec.DESKeySpec: byte[] getKey()>
<javax.crypto.spec.DESKeySpec: void <init>(byte[])>
<android.view.LayoutInflater.Filter: boolean onLoadClass(java.lang.Class)>
<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>
<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
<java.lang.reflect.Constructor: java.lang.String getName()>
<java.lang.reflect.Constructor: int getModifiers()>
<java.lang.reflect.Constructor: java.lang.annotation.Annotation[][] getParameterAnnotations()>
<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.lang.reflect.Constructor: T newInstance(java.lang.Object...)>
<java.lang.reflect.Constructor: java.lang.String toGenericString()>
<java.util.OptionalLong: void ifPresent(java.util.function.LongConsumer)>
<java.util.OptionalLong: long getAsLong()>
<java.util.OptionalLong: java.util.OptionalLong of(long)>
<java.util.OptionalLong: long orElse(long)>
<java.util.OptionalLong: long orElseGet(java.util.function.LongSupplier)>
<java.util.OptionalLong: java.util.OptionalLong empty()>
<java.util.OptionalLong: boolean isPresent()>
<java.util.OptionalLong: long orElseThrow(java.util.function.Supplier)>
<android.view.textclassifier.ConversationActions: java.lang.String getId()>
<android.view.textclassifier.ConversationActions: void <init>(java.util.List,String)>
<android.view.textclassifier.ConversationActions: java.util.List getConversationActions()>
<android.view.textclassifier.ConversationActions: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.ConversationActions: int describeContents()>
<org.apache.http.conn.ssl.AbstractVerifier: boolean acceptableCountryWildcard(java.lang.String)>
<org.apache.http.conn.ssl.AbstractVerifier: void <init>()>
<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
<org.apache.http.conn.ssl.AbstractVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)>
<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[],boolean)>
<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
<org.apache.http.conn.ssl.AbstractVerifier: int countDots(java.lang.String)>
<android.net.IpSecTransform.Builder: android.net.IpSecTransform.Builder setEncryption(android.net.IpSecAlgorithm)>
<android.net.IpSecTransform.Builder: android.net.IpSecTransform.Builder setAuthentication(android.net.IpSecAlgorithm)>
<android.net.IpSecTransform.Builder: android.net.IpSecTransform buildTunnelModeTransform(java.net.InetAddress,android.net.IpSecManager.SecurityParameterIndex)>
<android.net.IpSecTransform.Builder: android.net.IpSecTransform.Builder setAuthenticatedEncryption(android.net.IpSecAlgorithm)>
<android.net.IpSecTransform.Builder: android.net.IpSecTransform.Builder setIpv4Encapsulation(android.net.IpSecManager.UdpEncapsulationSocket,int)>
<android.net.IpSecTransform.Builder: void <init>(android.content.Context)>
<android.net.IpSecTransform.Builder: android.net.IpSecTransform buildTransportModeTransform(java.net.InetAddress,android.net.IpSecManager.SecurityParameterIndex)>
<java.nio.Buffer: java.nio.Buffer clear()>
<java.nio.Buffer: java.nio.Buffer flip()>
<java.nio.Buffer: java.nio.Buffer position(int)>
<java.nio.Buffer: java.nio.Buffer reset()>
<java.nio.Buffer: int limit()>
<java.nio.Buffer: int remaining()>
<java.nio.Buffer: int capacity()>
<java.nio.Buffer: java.nio.Buffer mark()>
<java.nio.Buffer: boolean hasArray()>
<java.nio.Buffer: int position()>
<java.nio.Buffer: boolean hasRemaining()>
<java.nio.Buffer: boolean isReadOnly()>
<java.nio.Buffer: boolean isDirect()>
<java.nio.Buffer: java.nio.Buffer limit(int)>
<java.nio.Buffer: java.nio.Buffer rewind()>
<java.nio.Buffer: int arrayOffset()>
<java.nio.Buffer: java.lang.Object array()>
<android.media.HwAudioSource.Builder: android.media.HwAudioSource.Builder setAudioDeviceInfo(android.media.AudioDeviceInfo)>
<android.media.HwAudioSource.Builder: android.media.HwAudioSource build()>
<android.media.HwAudioSource.Builder: android.media.HwAudioSource.Builder setAudioAttributes(android.media.AudioAttributes)>
<android.media.HwAudioSource.Builder: void <init>()>
<android.hardware.usb.UsbConfiguration: int describeContents()>
<android.hardware.usb.UsbConfiguration: android.hardware.usb.UsbInterface getInterface(int)>
<android.hardware.usb.UsbConfiguration: void writeToParcel(android.os.Parcel,int)>
<android.hardware.usb.UsbConfiguration: int getMaxPower()>
<android.hardware.usb.UsbConfiguration: int getInterfaceCount()>
<android.hardware.usb.UsbConfiguration: int getId()>
<android.hardware.usb.UsbConfiguration: boolean isSelfPowered()>
<android.hardware.usb.UsbConfiguration: java.lang.String getName()>
<android.hardware.usb.UsbConfiguration: boolean isRemoteWakeup()>
<java.io.Console: java.io.Console format(java.lang.String,java.lang.Object...)>
<java.io.Console: java.lang.String readLine()>
<java.io.Console: char[] readPassword()>
<java.io.Console: java.lang.String readLine(java.lang.String,java.lang.Object...)>
<java.io.Console: char[] readPassword(java.lang.String,java.lang.Object...)>
<java.io.Console: java.io.PrintWriter writer()>
<java.io.Console: java.io.Console printf(java.lang.String,java.lang.Object...)>
<java.io.Console: java.io.Reader reader()>
<java.io.Console: void flush()>
<android.content.DialogInterface.OnShowListener: void onShow(android.content.DialogInterface)>
<android.graphics.ColorFilter: void <init>()>
<android.hardware.radio.RadioManager.ModuleProperties: java.lang.String getVersion()>
<android.hardware.radio.RadioManager.ModuleProperties: boolean isInitializationRequired()>
<android.hardware.radio.RadioManager.ModuleProperties: java.util.Map getDabFrequencyTable()>
<android.hardware.radio.RadioManager.ModuleProperties: java.lang.String getServiceName()>
<android.hardware.radio.RadioManager.ModuleProperties: void writeToParcel(android.os.Parcel,int)>
<android.hardware.radio.RadioManager.ModuleProperties: int getId()>
<android.hardware.radio.RadioManager.ModuleProperties: java.lang.String getProduct()>
<android.hardware.radio.RadioManager.ModuleProperties: java.lang.String getSerial()>
<android.hardware.radio.RadioManager.ModuleProperties: java.util.Map getVendorInfo()>
<android.hardware.radio.RadioManager.ModuleProperties: boolean isProgramTypeSupported(@android.hardware.radio.ProgramSelector.ProgramTypeint)>
<android.hardware.radio.RadioManager.ModuleProperties: android.hardware.radio.RadioManager.BandDescriptor[] getBands()>
<android.hardware.radio.RadioManager.ModuleProperties: int getClassId()>
<android.hardware.radio.RadioManager.ModuleProperties: int getNumAudioSources()>
<android.hardware.radio.RadioManager.ModuleProperties: int getNumTuners()>
<android.hardware.radio.RadioManager.ModuleProperties: java.lang.String getImplementor()>
<android.hardware.radio.RadioManager.ModuleProperties: boolean isCaptureSupported()>
<android.hardware.radio.RadioManager.ModuleProperties: boolean isProgramIdentifierSupported(@android.hardware.radio.ProgramSelector.IdentifierTypeint)>
<android.hardware.radio.RadioManager.ModuleProperties: int describeContents()>
<android.hardware.radio.RadioManager.ModuleProperties: boolean isBackgroundScanningSupported()>
<android.os.ParcelFileDescriptor.AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>
<android.print.PrinterId: void writeToParcel(android.os.Parcel,int)>
<android.print.PrinterId: int describeContents()>
<android.print.PrinterId: java.lang.String getLocalId()>
<java.sql.SQLPermission: void <init>(String,String)>
<java.sql.SQLPermission: void <init>(String)>
<android.app.backup.RestoreObserver: void <init>()>
<android.app.backup.RestoreObserver: void restoreSetsAvailable(android.app.backup.RestoreSet[])>
<android.app.backup.RestoreObserver: void onUpdate(int,java.lang.String)>
<android.app.backup.RestoreObserver: void restoreStarting(int)>
<android.app.backup.RestoreObserver: void restoreFinished(int)>
<android.bluetooth.BluetoothGattDescriptor: int getPermissions()>
<android.bluetooth.BluetoothGattDescriptor: byte[] getValue()>
<android.bluetooth.BluetoothGattDescriptor: int describeContents()>
<android.bluetooth.BluetoothGattDescriptor: boolean setValue(byte[])>
<android.bluetooth.BluetoothGattDescriptor: void writeToParcel(android.os.Parcel,int)>
<android.bluetooth.BluetoothGattDescriptor: android.bluetooth.BluetoothGattCharacteristic getCharacteristic()>
<android.bluetooth.BluetoothGattDescriptor: void <init>(java.util.UUID,int)>
<android.bluetooth.BluetoothGattDescriptor: java.util.UUID getUuid()>
<android.widget.AbsListView.RecyclerListener: void onMovedToScrapHeap(android.view.View)>
<android.text.style.LineBackgroundSpan.Standard: void drawBackground(android.graphics.Canvas,android.graphics.Paint,@Pxint,@Pxint,@Pxint,@Pxint,@Pxint,CharSequence,int,int,int)>
<android.text.style.LineBackgroundSpan.Standard: int getSpanTypeId()>
<android.text.style.LineBackgroundSpan.Standard: int getColor()>
<android.text.style.LineBackgroundSpan.Standard: void <init>(@ColorInt int)>
<android.text.style.LineBackgroundSpan.Standard: void <init>(android.os.Parcel)>
<android.text.style.LineBackgroundSpan.Standard: void writeToParcel(android.os.Parcel,int)>
<android.text.style.LineBackgroundSpan.Standard: int describeContents()>
<android.view.ActionMode: java.lang.Object getTag()>
<android.view.ActionMode: android.view.Menu getMenu()>
<android.view.ActionMode: CharSequence getSubtitle()>
<android.view.ActionMode: android.view.View getCustomView()>
<android.view.ActionMode: void setTitle(@StringResint)>
<android.view.ActionMode: void hide(long)>
<android.view.ActionMode: void setTitle(CharSequence)>
<android.view.ActionMode: void invalidate()>
<android.view.ActionMode: void setType(int)>
<android.view.ActionMode: void setTitleOptionalHint(boolean)>
<android.view.ActionMode: void finish()>
<android.view.ActionMode: void invalidateContentRect()>
<android.view.ActionMode: boolean getTitleOptionalHint()>
<android.view.ActionMode: void onWindowFocusChanged(boolean)>
<android.view.ActionMode: void setTag(java.lang.Object)>
<android.view.ActionMode: void <init>()>
<android.view.ActionMode: int getType()>
<android.view.ActionMode: void setCustomView(android.view.View)>
<android.view.ActionMode: void setSubtitle(@StringResint)>
<android.view.ActionMode: boolean isTitleOptional()>
<android.view.ActionMode: void setSubtitle(CharSequence)>
<android.view.ActionMode: android.view.MenuInflater getMenuInflater()>
<android.view.ActionMode: CharSequence getTitle()>
<android.view.ActionMode: boolean isUiFocusable()>
<android.media.JetPlayer.OnJetEventListener: void onJetEvent(android.media.JetPlayer,short,byte,byte,byte,byte)>
<android.media.JetPlayer.OnJetEventListener: void onJetUserIdUpdate(android.media.JetPlayer,int,int)>
<android.media.JetPlayer.OnJetEventListener: void onJetPauseUpdate(android.media.JetPlayer,int)>
<android.media.JetPlayer.OnJetEventListener: void onJetNumQueuedSegmentUpdate(android.media.JetPlayer,int)>
<android.media.ImageWriter: void queueInputImage(android.media.Image)>
<android.media.ImageWriter: int getFormat()>
<android.media.ImageWriter: int getMaxImages()>
<android.media.ImageWriter: android.media.ImageWriter newInstance(android.view.Surface,int)>
<android.media.ImageWriter: android.media.ImageWriter newInstance(android.view.Surface,int,int)>
<android.media.ImageWriter: void setOnImageReleasedListener(android.media.ImageWriter.OnImageReleasedListener,android.os.Handler)>
<android.media.ImageWriter: void close()>
<android.media.ImageWriter: android.media.Image dequeueInputImage()>
<android.companion.BluetoothDeviceFilter: int describeContents()>
<android.companion.BluetoothDeviceFilter: void writeToParcel(android.os.Parcel,int)>
<android.hardware.location.ContextHubClient: android.hardware.location.ContextHubInfo getAttachedHub()>
<android.hardware.location.ContextHubClient: int sendMessageToNanoApp(android.hardware.location.NanoAppMessage)>
<android.hardware.location.ContextHubClient: void close()>
<android.util.FloatProperty: void <init>(String)>
<android.util.FloatProperty: void set(T,java.lang.Float)>
<android.util.FloatProperty: void setValue(T,float)>
<android.animation.TypeEvaluator: T evaluate(float,T,T)>
<android.view.animation.AccelerateDecelerateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AccelerateDecelerateInterpolator: float getInterpolation(float)>
<android.view.animation.AccelerateDecelerateInterpolator: void <init>()>
<android.app.ActionBar.OnNavigationListener: boolean onNavigationItemSelected(int,long)>
<android.util.Base64InputStream: void reset()>
<android.util.Base64InputStream: int available()>
<android.util.Base64InputStream: void <init>(java.io.InputStream,int)>
<java.nio.channels.AlreadyBoundException: void <init>()>
<android.view.View.OnFocusChangeListener: void onFocusChange(android.view.View,boolean)>
<java.util.zip.Adler32: long getValue()>
<java.util.zip.Adler32: void update(int)>
<java.util.zip.Adler32: void <init>()>
<java.util.zip.Adler32: void update(byte[],int,int)>
<java.util.zip.Adler32: void reset()>
<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>
<java.util.zip.Adler32: void update(byte[])>
<android.renderscript.RSIllegalArgumentException: void <init>(String)>
<java.security.KeyStore.PasswordProtection: java.lang.String getProtectionAlgorithm()>
<java.security.KeyStore.PasswordProtection: void <init>(char[])>
<java.security.KeyStore.PasswordProtection: char[] getPassword()>
<java.security.KeyStore.PasswordProtection: void <init>(char[],String,java.security.spec.AlgorithmParameterSpec)>
<java.security.KeyStore.PasswordProtection: java.security.spec.AlgorithmParameterSpec getProtectionParameters()>
<android.media.Session2CommandGroup.Builder: android.media.Session2CommandGroup.Builder addCommand(android.media.Session2Command)>
<android.media.Session2CommandGroup.Builder: android.media.Session2CommandGroup.Builder removeCommand(android.media.Session2Command)>
<android.media.Session2CommandGroup.Builder: android.media.Session2CommandGroup build()>
<android.media.Session2CommandGroup.Builder: void <init>(android.media.Session2CommandGroup)>
<android.media.Session2CommandGroup.Builder: void <init>()>
<android.print.PrintAttributes.MediaSize: android.print.PrintAttributes.MediaSize asPortrait()>
<android.print.PrintAttributes.MediaSize: boolean isPortrait()>
<android.print.PrintAttributes.MediaSize: int getHeightMils()>
<android.print.PrintAttributes.MediaSize: android.print.PrintAttributes.MediaSize asLandscape()>
<android.print.PrintAttributes.MediaSize: java.lang.String getId()>
<android.print.PrintAttributes.MediaSize: java.lang.String getLabel(android.content.pm.PackageManager)>
<android.print.PrintAttributes.MediaSize: int getWidthMils()>
<android.print.PrintAttributes.MediaSize: void <init>(from=1) int)>
<android.text.style.LocaleSpan: java.util.Locale getLocale()>
<android.text.style.LocaleSpan: void <init>(android.os.LocaleList)>
<android.text.style.LocaleSpan: int getSpanTypeId()>
<android.text.style.LocaleSpan: int describeContents()>
<android.text.style.LocaleSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.LocaleSpan: void <init>(android.os.Parcel)>
<android.text.style.LocaleSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.LocaleSpan: void <init>(java.util.Locale)>
<android.text.style.LocaleSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.LocaleSpan: android.os.LocaleList getLocales()>
<android.os.Parcelable.ClassLoaderCreator extends android.os.Parcelable.Creator: T createFromParcel(android.os.Parcel,java.lang.ClassLoader)>
<android.webkit.WebViewClient: void onLoadResource(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)>
<android.webkit.WebViewClient: void onTooManyRedirects(android.webkit.WebView,android.os.Message,android.os.Message)>
<android.webkit.WebViewClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,android.webkit.WebResourceRequest)>
<android.webkit.WebViewClient: void onReceivedClientCertRequest(android.webkit.WebView,android.webkit.ClientCertRequest)>
<android.webkit.WebViewClient: void onScaleChanged(android.webkit.WebView,float,float)>
<android.webkit.WebViewClient: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)>
<android.webkit.WebViewClient: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebViewClient: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)>
<android.webkit.WebViewClient: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)>
<android.webkit.WebViewClient: boolean onRenderProcessGone(android.webkit.WebView,android.webkit.RenderProcessGoneDetail)>
<android.webkit.WebViewClient: void onPageCommitVisible(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: void onReceivedHttpError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceResponse)>
<android.webkit.WebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)>
<android.webkit.WebViewClient: void onPageFinished(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: void <init>()>
<android.webkit.WebViewClient: void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)>
<android.webkit.WebViewClient: void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)>
<android.webkit.WebViewClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: void onSafeBrowsingHit(android.webkit.WebView,android.webkit.WebResourceRequest,int,android.webkit.SafeBrowsingResponse)>
<android.webkit.WebViewClient: boolean shouldOverrideKeyEvent(android.webkit.WebView,android.view.KeyEvent)>
<android.webkit.WebViewClient: void onReceivedError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceError)>
<android.webkit.WebViewClient: void onFormResubmission(android.webkit.WebView,android.os.Message,android.os.Message)>
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getItemAtIndex(int)>
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getCurrentItem()>
<android.webkit.WebBackForwardList: android.webkit.WebBackForwardList clone()>
<android.webkit.WebBackForwardList: int getSize()>
<android.webkit.WebBackForwardList: void <init>()>
<android.webkit.WebBackForwardList: int getCurrentIndex()>
<android.security.keystore.recovery.KeyChainProtectionParams: int getLockScreenUiFormat()>
<android.security.keystore.recovery.KeyChainProtectionParams: int describeContents()>
<android.security.keystore.recovery.KeyChainProtectionParams: byte[] getSecret()>
<android.security.keystore.recovery.KeyChainProtectionParams: int getUserSecretType()>
<android.security.keystore.recovery.KeyChainProtectionParams: void writeToParcel(android.os.Parcel,int)>
<android.security.keystore.recovery.KeyChainProtectionParams: android.security.keystore.recovery.KeyDerivationParams getKeyDerivationParams()>
<android.security.keystore.recovery.KeyChainProtectionParams: void clearSecret()>
<android.net.Proxy: java.lang.String getHost(android.content.Context)>
<android.net.Proxy: void <init>()>
<android.net.Proxy: int getPort(android.content.Context)>
<android.net.Proxy: int getDefaultPort()>
<android.net.Proxy: java.lang.String getDefaultHost()>
<android.content.pm.SuspendDialogInfo: int describeContents()>
<android.content.pm.SuspendDialogInfo: void writeToParcel(android.os.Parcel,int)>
<java.util.function.ToLongFunction: long applyAsLong(T)>
<android.database.DataSetObserver: void onInvalidated()>
<android.database.DataSetObserver: void onChanged()>
<android.database.DataSetObserver: void <init>()>
<java.net.HttpRetryException: void <init>(String,int,String)>
<java.net.HttpRetryException: java.lang.String getReason()>
<java.net.HttpRetryException: int responseCode()>
<java.net.HttpRetryException: java.lang.String getLocation()>
<java.net.HttpRetryException: void <init>(String,int)>
<android.media.MediaController2.ControllerCallback: void onCommandResult(android.media.MediaController2,java.lang.Object,android.media.Session2Command,android.media.Session2Command.Result)>
<android.media.MediaController2.ControllerCallback: android.media.Session2Command.Result onSessionCommand(android.media.MediaController2,android.media.Session2Command,android.os.Bundle)>
<android.media.MediaController2.ControllerCallback: void <init>()>
<android.media.MediaController2.ControllerCallback: void onDisconnected(android.media.MediaController2)>
<android.media.MediaController2.ControllerCallback: void onPlaybackActiveChanged(android.media.MediaController2,boolean)>
<android.media.MediaController2.ControllerCallback: void onConnected(android.media.MediaController2,android.media.Session2CommandGroup)>
<android.app.AppOpsManager.HistoricalOpsRequest.Builder: android.app.AppOpsManager.HistoricalOpsRequest build()>
<android.app.AppOpsManager.HistoricalOpsRequest.Builder: android.app.AppOpsManager.HistoricalOpsRequest.Builder setOpNames(java.util.List)>
<android.app.AppOpsManager.HistoricalOpsRequest.Builder: android.app.AppOpsManager.HistoricalOpsRequest.Builder setUid(int)>
<android.app.AppOpsManager.HistoricalOpsRequest.Builder: void <init>(long,long)>
<android.app.AppOpsManager.HistoricalOpsRequest.Builder: android.app.AppOpsManager.HistoricalOpsRequest.Builder setFlags(int)>
<android.app.AppOpsManager.HistoricalOpsRequest.Builder: android.app.AppOpsManager.HistoricalOpsRequest.Builder setPackageName(java.lang.String)>
<android.content.BroadcastReceiver.PendingResult: void setResultData(java.lang.String)>
<android.content.BroadcastReceiver.PendingResult: void setResult(int,java.lang.String,android.os.Bundle)>
<android.content.BroadcastReceiver.PendingResult: void abortBroadcast()>
<android.content.BroadcastReceiver.PendingResult: void finish()>
<android.content.BroadcastReceiver.PendingResult: void setResultCode(int)>
<android.content.BroadcastReceiver.PendingResult: void clearAbortBroadcast()>
<android.content.BroadcastReceiver.PendingResult: java.lang.String getResultData()>
<android.content.BroadcastReceiver.PendingResult: boolean getAbortBroadcast()>
<android.content.BroadcastReceiver.PendingResult: int getResultCode()>
<android.content.BroadcastReceiver.PendingResult: android.os.Bundle getResultExtras(boolean)>
<android.content.BroadcastReceiver.PendingResult: void setResultExtras(android.os.Bundle)>
<java.sql.Timestamp: boolean after(java.sql.Timestamp)>
<java.sql.Timestamp: boolean equals(java.sql.Timestamp)>
<java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>
<java.sql.Timestamp: int compareTo(java.sql.Timestamp)>
<java.sql.Timestamp: void <init>(int,int,int,int,int,int,int)>
<java.sql.Timestamp: boolean before(java.sql.Timestamp)>
<java.sql.Timestamp: int getNanos()>
<java.sql.Timestamp: void setNanos(int)>
<java.sql.Timestamp: void <init>(long)>
<java.security.KeyStore: void setEntry(java.lang.String,java.security.KeyStore.Entry,java.security.KeyStore.ProtectionParameter)>
<java.security.KeyStore: boolean entryInstanceOf(java.lang.String,java.lang.Class)>
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>
<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>
<java.security.KeyStore: boolean containsAlias(java.lang.String)>
<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,String)>
<java.security.KeyStore: boolean isKeyEntry(java.lang.String)>
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.security.Provider)>
<java.security.KeyStore: java.lang.String getCertificateAlias(java.security.cert.Certificate)>
<java.security.KeyStore: int size()>
<java.security.KeyStore: void store(java.io.OutputStream,char[])>
<java.security.KeyStore: java.util.Date getCreationDate(java.lang.String)>
<java.security.KeyStore: java.lang.String getType()>
<java.security.KeyStore: void deleteEntry(java.lang.String)>
<java.security.KeyStore: java.lang.String getDefaultType()>
<java.security.KeyStore: void load(java.io.InputStream,char[])>
<java.security.KeyStore: void load(java.security.KeyStore.LoadStoreParameter)>
<java.security.KeyStore: void store(java.security.KeyStore.LoadStoreParameter)>
<java.security.KeyStore: java.security.KeyStore.Entry getEntry(java.lang.String,java.security.KeyStore.ProtectionParameter)>
<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>
<java.security.KeyStore: java.security.cert.Certificate[] getCertificateChain(java.lang.String)>
<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)>
<java.security.KeyStore: void setKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[])>
<java.security.KeyStore: java.security.Provider getProvider()>
<java.security.KeyStore: boolean isCertificateEntry(java.lang.String)>
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>
<java.security.KeyStore: java.util.Enumeration aliases()>
<java.security.KeyStore: void setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>
<android.hardware.camera2.TotalCaptureResult: java.util.List getPartialResults()>
<android.hardware.camera2.TotalCaptureResult: java.util.Map getPhysicalCameraResults()>
<java.security.Provider: void forEach(java.util.function.BiConsumer)>
<java.security.Provider: java.util.Enumeration elements()>
<java.security.Provider: java.lang.Object replace(java.lang.Object,java.lang.Object)>
<java.security.Provider: void removeService(java.security.Provider.Service)>
<java.security.Provider: java.lang.Object remove(java.lang.Object)>
<java.security.Provider: java.lang.String getName()>
<java.security.Provider: java.security.Provider.Service getService(java.lang.String,java.lang.String)>
<java.security.Provider: void putService(java.security.Provider.Service)>
<java.security.Provider: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>
<java.security.Provider: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>
<java.security.Provider: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<java.security.Provider: void putAll(java.util.Map)>
<java.security.Provider: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>
<java.security.Provider: java.lang.Object get(java.lang.Object)>
<java.security.Provider: java.lang.String getInfo()>
<java.security.Provider: double getVersion()>
<java.security.Provider: java.util.Enumeration keys()>
<java.security.Provider: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
<java.security.Provider: void <init>(String,double,String)>
<java.security.Provider: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
<java.security.Provider: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>
<java.security.Provider: java.util.Set entrySet()>
<java.security.Provider: java.util.Set keySet()>
<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.security.Provider: void replaceAll(java.util.function.BiFunction)>
<java.security.Provider: java.util.Collection values()>
<java.security.Provider: java.util.Set getServices()>
<android.accounts.NetworkErrorException: void <init>(String)>
<android.accounts.NetworkErrorException: void <init>()>
<android.accounts.NetworkErrorException: void <init>(Throwable)>
<android.accounts.NetworkErrorException: void <init>(String,Throwable)>
<android.database.sqlite.SQLiteDebug.PagerStats: void <init>()>
<android.se.omapi.Reader: android.se.omapi.SEService getSEService()>
<android.se.omapi.Reader: java.lang.String getName()>
<android.se.omapi.Reader: android.se.omapi.Session openSession()>
<android.se.omapi.Reader: boolean isSecureElementPresent()>
<android.se.omapi.Reader: void closeSessions()>
<android.provider.ContactsContract.Directory: void notifyDirectoryChange(android.content.ContentResolver)>
<android.provider.ContactsContract.Directory: boolean isEnterpriseDirectoryId(long)>
<android.provider.ContactsContract.Directory: boolean isRemoteDirectoryId(long)>
<android.widget.ListView: void smoothScrollByOffset(int)>
<android.widget.ListView: void addHeaderView(android.view.View)>
<android.widget.ListView: void setHeaderDividersEnabled(boolean)>
<android.widget.ListView: android.graphics.drawable.Drawable getDivider()>
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ListView: long[] getCheckItemIds()>
<android.widget.ListView: void addHeaderView(android.view.View,java.lang.Object,boolean)>
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ListView: android.widget.ListAdapter getAdapter()>
<android.widget.ListView: void setItemsCanFocus(boolean)>
<android.widget.ListView: void addFooterView(android.view.View,java.lang.Object,boolean)>
<android.widget.ListView: int getDividerHeight()>
<android.widget.ListView: boolean getItemsCanFocus()>
<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollFooter()>
<android.widget.ListView: void setOverscrollFooter(android.graphics.drawable.Drawable)>
<android.widget.ListView: void setOverscrollHeader(android.graphics.drawable.Drawable)>
<android.widget.ListView: void setSelection(int)>
<android.widget.ListView: void <init>(android.content.Context)>
<android.widget.ListView: boolean removeHeaderView(android.view.View)>
<android.widget.ListView: void setSelectionAfterHeaderView()>
<android.widget.ListView: int getMaxScrollAmount()>
<android.widget.ListView: boolean areFooterDividersEnabled()>
<android.widget.ListView: void setDivider(android.graphics.drawable.Drawable)>
<android.widget.ListView: void setFooterDividersEnabled(boolean)>
<android.widget.ListView: int getFooterViewsCount()>
<android.widget.ListView: void setDividerHeight(int)>
<android.widget.ListView: void addFooterView(android.view.View)>
<android.widget.ListView: boolean areHeaderDividersEnabled()>
<android.widget.ListView: boolean removeFooterView(android.view.View)>
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ListView: int getHeaderViewsCount()>
<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollHeader()>
<android.text.style.TextAppearanceSpan: int getSpanTypeId()>
<android.text.style.TextAppearanceSpan: int getTextSize()>
<android.text.style.TextAppearanceSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.TextAppearanceSpan: java.lang.String getFontVariationSettings()>
<android.text.style.TextAppearanceSpan: android.content.res.ColorStateList getTextColor()>
<android.text.style.TextAppearanceSpan: void <init>(android.os.Parcel)>
<android.text.style.TextAppearanceSpan: int getTextStyle()>
<android.text.style.TextAppearanceSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.TextAppearanceSpan: void <init>(android.content.Context,int)>
<android.text.style.TextAppearanceSpan: java.lang.String getFamily()>
<android.text.style.TextAppearanceSpan: void <init>(String,int,int,android.content.res.ColorStateList,android.content.res.ColorStateList)>
<android.text.style.TextAppearanceSpan: android.os.LocaleList getTextLocales()>
<android.text.style.TextAppearanceSpan: int describeContents()>
<android.text.style.TextAppearanceSpan: boolean isElegantTextHeight()>
<android.text.style.TextAppearanceSpan: java.lang.String getFontFeatureSettings()>
<android.text.style.TextAppearanceSpan: int getTextFontWeight()>
<android.text.style.TextAppearanceSpan: void <init>(android.content.Context,int,int)>
<android.text.style.TextAppearanceSpan: int getShadowColor()>
<android.text.style.TextAppearanceSpan: android.graphics.Typeface getTypeface()>
<android.text.style.TextAppearanceSpan: android.content.res.ColorStateList getLinkTextColor()>
<android.text.style.TextAppearanceSpan: float getShadowRadius()>
<android.text.style.TextAppearanceSpan: float getShadowDx()>
<android.text.style.TextAppearanceSpan: float getShadowDy()>
<android.text.style.TextAppearanceSpan: void updateMeasureState(android.text.TextPaint)>
<java.util.SimpleTimeZone: int getRawOffset()>
<java.util.SimpleTimeZone: void <init>(int,String,int,int,int,int,int,int,int,int,int,int,int)>
<java.util.SimpleTimeZone: void setDSTSavings(int)>
<java.util.SimpleTimeZone: void setEndRule(int,int,int,int,boolean)>
<java.util.SimpleTimeZone: void setStartYear(int)>
<java.util.SimpleTimeZone: int getOffset(int,int,int,int,int,int)>
<java.util.SimpleTimeZone: void setEndRule(int,int,int,int)>
<java.util.SimpleTimeZone: void setStartRule(int,int,int,int,boolean)>
<java.util.SimpleTimeZone: void <init>(int,String,int,int,int,int,int,int,int,int)>
<java.util.SimpleTimeZone: void setRawOffset(int)>
<java.util.SimpleTimeZone: boolean inDaylightTime(java.util.Date)>
<java.util.SimpleTimeZone: void setStartRule(int,int,int)>
<java.util.SimpleTimeZone: void setStartRule(int,int,int,int)>
<java.util.SimpleTimeZone: void setEndRule(int,int,int)>
<java.util.SimpleTimeZone: boolean useDaylightTime()>
<java.util.SimpleTimeZone: void <init>(int,String)>
<java.util.SimpleTimeZone: void <init>(int,String,int,int,int,int,int,int,int,int,int)>
<android.view.inputmethod.EditorInfo: void <init>()>
<android.view.inputmethod.EditorInfo: int describeContents()>
<android.view.inputmethod.EditorInfo: void makeCompatible(int)>
<android.view.inputmethod.EditorInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)>
<android.widget.SimpleCursorAdapter.ViewBinder: boolean setViewValue(android.view.View,android.database.Cursor,int)>
<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>
<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future take()>
<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future submit(Runnable,V)>
<java.util.concurrent.ExecutorCompletionService: void <init>(java.util.concurrent.Executor,java.util.concurrent.BlockingQueue)>
<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ExecutorCompletionService: void <init>(java.util.concurrent.Executor)>
<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future poll()>
<android.content.IntentFilter.MalformedMimeTypeException: void <init>()>
<android.content.IntentFilter.MalformedMimeTypeException: void <init>(String)>
<android.bluetooth.BluetoothDevice: java.lang.String getName()>
<android.bluetooth.BluetoothDevice: boolean setPairingConfirmation(boolean)>
<android.bluetooth.BluetoothDevice: boolean isConnected()>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothGatt connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback,int,int,android.os.Handler)>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothGatt connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback)>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureL2capChannel(int)>
<android.bluetooth.BluetoothDevice: void writeToParcel(android.os.Parcel,int)>
<android.bluetooth.BluetoothDevice: boolean isInSilenceMode()>
<android.bluetooth.BluetoothDevice: java.lang.String getAddress()>
<android.bluetooth.BluetoothDevice: boolean isEncrypted()>
<android.bluetooth.BluetoothDevice: boolean setPhonebookAccessPermission(int)>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothGatt connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback,int)>
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()>
<android.bluetooth.BluetoothDevice: byte[] getMetadata(int)>
<android.bluetooth.BluetoothDevice: boolean setMetadata(int,byte[])>
<android.bluetooth.BluetoothDevice: int describeContents()>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothGatt connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback,int,int)>
<android.bluetooth.BluetoothDevice: boolean fetchUuidsWithSdp()>
<android.bluetooth.BluetoothDevice: boolean setPin(byte[])>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createL2capChannel(int)>
<android.bluetooth.BluetoothDevice: int getType()>
<android.bluetooth.BluetoothDevice: int getBondState()>
<android.bluetooth.BluetoothDevice: boolean cancelBondProcess()>
<android.bluetooth.BluetoothDevice: boolean removeBond()>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)>
<android.bluetooth.BluetoothDevice: boolean createBond()>
<android.bluetooth.BluetoothDevice: boolean setSilenceMode(boolean)>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)>
<android.bluetooth.le.ScanSettings.Builder: void <init>()>
<android.bluetooth.le.ScanSettings.Builder: android.bluetooth.le.ScanSettings.Builder setNumOfMatches(int)>
<android.bluetooth.le.ScanSettings.Builder: android.bluetooth.le.ScanSettings.Builder setReportDelay(long)>
<android.bluetooth.le.ScanSettings.Builder: android.bluetooth.le.ScanSettings build()>
<android.bluetooth.le.ScanSettings.Builder: android.bluetooth.le.ScanSettings.Builder setMatchMode(int)>
<android.bluetooth.le.ScanSettings.Builder: android.bluetooth.le.ScanSettings.Builder setScanResultType(int)>
<android.bluetooth.le.ScanSettings.Builder: android.bluetooth.le.ScanSettings.Builder setPhy(int)>
<android.bluetooth.le.ScanSettings.Builder: android.bluetooth.le.ScanSettings.Builder setCallbackType(int)>
<android.bluetooth.le.ScanSettings.Builder: android.bluetooth.le.ScanSettings.Builder setLegacy(boolean)>
<android.bluetooth.le.ScanSettings.Builder: android.bluetooth.le.ScanSettings.Builder setScanMode(int)>
<java.security.GuardedObject: java.lang.Object getObject()>
<java.security.GuardedObject: void <init>(Object,java.security.Guard)>
<android.net.ssl.SSLEngines: boolean isSupportedEngine(javax.net.ssl.SSLEngine)>
<android.net.ssl.SSLEngines: void setUseSessionTickets(javax.net.ssl.SSLEngine,boolean)>
<android.content.UriPermission: boolean isReadPermission()>
<android.content.UriPermission: int describeContents()>
<android.content.UriPermission: void writeToParcel(android.os.Parcel,int)>
<android.content.UriPermission: android.net.Uri getUri()>
<android.content.UriPermission: long getPersistedTime()>
<android.content.UriPermission: boolean isWritePermission()>
<android.telecom.RemoteConnection.VideoProvider: void requestCallDataUsage()>
<android.telecom.RemoteConnection.VideoProvider: void requestCameraCapabilities()>
<android.telecom.RemoteConnection.VideoProvider: void sendSessionModifyResponse(android.telecom.VideoProfile)>
<android.telecom.RemoteConnection.VideoProvider: void setDeviceOrientation(int)>
<android.telecom.RemoteConnection.VideoProvider: void setDisplaySurface(android.view.Surface)>
<android.telecom.RemoteConnection.VideoProvider: void unregisterCallback(android.telecom.RemoteConnection.VideoProvider.Callback)>
<android.telecom.RemoteConnection.VideoProvider: void registerCallback(android.telecom.RemoteConnection.VideoProvider.Callback)>
<android.telecom.RemoteConnection.VideoProvider: void setCamera(java.lang.String)>
<android.telecom.RemoteConnection.VideoProvider: void setPauseImage(android.net.Uri)>
<android.telecom.RemoteConnection.VideoProvider: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>
<android.telecom.RemoteConnection.VideoProvider: void setPreviewSurface(android.view.Surface)>
<android.telecom.RemoteConnection.VideoProvider: void setZoom(float)>
<android.graphics.fonts.FontFamily: int getSize()>
<android.graphics.fonts.FontFamily: android.graphics.fonts.Font getFont(int)>
<android.text.TextDirectionHeuristic: boolean isRtl(char[],int,int)>
<android.text.TextDirectionHeuristic: boolean isRtl(CharSequence,int,int)>
<javax.net.ssl.SSLEngine: int getPeerPort()>
<javax.net.ssl.SSLEngine: void setNeedClientAuth(boolean)>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[])>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>
<javax.net.ssl.SSLEngine: java.lang.String getHandshakeApplicationProtocol()>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],java.nio.ByteBuffer)>
<javax.net.ssl.SSLEngine: java.util.function.BiFunction getHandshakeApplicationProtocolSelector()>
<javax.net.ssl.SSLEngine: java.lang.String getApplicationProtocol()>
<javax.net.ssl.SSLEngine: boolean getEnableSessionCreation()>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>
<javax.net.ssl.SSLEngine: java.lang.String getPeerHost()>
<javax.net.ssl.SSLEngine: java.lang.String[] getEnabledProtocols()>
<javax.net.ssl.SSLEngine: void <init>(String,int)>
<javax.net.ssl.SSLEngine: void <init>()>
<javax.net.ssl.SSLEngine: void closeOutbound()>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)>
<javax.net.ssl.SSLEngine: boolean isOutboundDone()>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult.HandshakeStatus getHandshakeStatus()>
<javax.net.ssl.SSLEngine: void setSSLParameters(javax.net.ssl.SSLParameters)>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)>
<javax.net.ssl.SSLEngine: java.lang.String[] getEnabledCipherSuites()>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLSession getSession()>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLSession getHandshakeSession()>
<javax.net.ssl.SSLEngine: void beginHandshake()>
<javax.net.ssl.SSLEngine: boolean getNeedClientAuth()>
<javax.net.ssl.SSLEngine: void setEnableSessionCreation(boolean)>
<javax.net.ssl.SSLEngine: Runnable getDelegatedTask()>
<javax.net.ssl.SSLEngine: java.lang.String[] getSupportedProtocols()>
<javax.net.ssl.SSLEngine: void setHandshakeApplicationProtocolSelector(java.util.function.BiFunction)>
<javax.net.ssl.SSLEngine: void closeInbound()>
<javax.net.ssl.SSLEngine: java.lang.String[] getSupportedCipherSuites()>
<javax.net.ssl.SSLEngine: void setWantClientAuth(boolean)>
<javax.net.ssl.SSLEngine: boolean getUseClientMode()>
<javax.net.ssl.SSLEngine: boolean isInboundDone()>
<javax.net.ssl.SSLEngine: boolean getWantClientAuth()>
<javax.net.ssl.SSLEngine: void setEnabledCipherSuites(java.lang.String[])>
<javax.net.ssl.SSLEngine: void setUseClientMode(boolean)>
<javax.net.ssl.SSLEngine: void setEnabledProtocols(java.lang.String[])>
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLParameters getSSLParameters()>
<org.xml.sax.SAXNotRecognizedException: void <init>()>
<org.xml.sax.SAXNotRecognizedException: void <init>(String)>
<java.net.NetPermission: void <init>(String)>
<java.net.NetPermission: void <init>(String,String)>
<javax.crypto.spec.DHGenParameterSpec: void <init>(int,int)>
<javax.crypto.spec.DHGenParameterSpec: int getExponentSize()>
<javax.crypto.spec.DHGenParameterSpec: int getPrimeSize()>
<android.graphics.drawable.VectorDrawable: void <init>()>
<android.graphics.drawable.VectorDrawable: int getOpacity()>
<android.graphics.drawable.VectorDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.VectorDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.VectorDrawable: void setAlpha(int)>
<org.w3c.dom.NamedNodeMap: int getLength()>
<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>
<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node setNamedItemNS(org.w3c.dom.Node)>
<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node removeNamedItemNS(java.lang.String,java.lang.String)>
<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>
<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)>
<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node removeNamedItem(java.lang.String)>
<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node setNamedItem(org.w3c.dom.Node)>
<android.service.autofill.augmented.FillRequest: android.content.ComponentName getActivityComponent()>
<android.service.autofill.augmented.FillRequest: int getTaskId()>
<android.service.autofill.augmented.FillRequest: android.view.autofill.AutofillValue getFocusedValue()>
<android.service.autofill.augmented.FillRequest: android.service.autofill.augmented.PresentationParams getPresentationParams()>
<android.service.autofill.augmented.FillRequest: android.view.autofill.AutofillId getFocusedId()>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectInput(java.io.File)>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder.Redirect redirectInput()>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectOutput(java.lang.ProcessBuilder.Redirect)>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectInput(java.lang.ProcessBuilder.Redirect)>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder.Redirect redirectError()>
<java.lang.ProcessBuilder: void <init>(java.lang.String...)>
<java.lang.ProcessBuilder: java.io.File directory()>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectError(java.io.File)>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectErrorStream(boolean)>
<java.lang.ProcessBuilder: void <init>(java.util.List)>
<java.lang.ProcessBuilder: java.util.List command()>
<java.lang.ProcessBuilder: java.util.Map environment()>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.lang.String...)>
<java.lang.ProcessBuilder: boolean redirectErrorStream()>
<java.lang.ProcessBuilder: java.lang.Process start()>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.util.List)>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder.Redirect redirectOutput()>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectError(java.lang.ProcessBuilder.Redirect)>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectOutput(java.io.File)>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder inheritIO()>
<java.nio.channels.Pipe.SourceChannel: void <init>(java.nio.channels.spi.SelectorProvider)>
<java.nio.channels.Pipe.SourceChannel: int validOps()>
<android.icu.text.DateTimePatternGenerator: android.icu.text.DateTimePatternGenerator cloneAsThawed()>
<android.icu.text.DateTimePatternGenerator: java.util.Map getSkeletons(java.util.Map)>
<android.icu.text.DateTimePatternGenerator: android.icu.text.DateTimePatternGenerator addPattern(java.lang.String,boolean,android.icu.text.DateTimePatternGenerator.PatternInfo)>
<android.icu.text.DateTimePatternGenerator: void setDecimal(java.lang.String)>
<android.icu.text.DateTimePatternGenerator: java.lang.String getSkeleton(java.lang.String)>
<android.icu.text.DateTimePatternGenerator: void <init>()>
<android.icu.text.DateTimePatternGenerator: java.lang.String getDateTimeFormat()>
<android.icu.text.DateTimePatternGenerator: boolean isFrozen()>
<android.icu.text.DateTimePatternGenerator: android.icu.text.DateTimePatternGenerator freeze()>
<android.icu.text.DateTimePatternGenerator: android.icu.text.DateTimePatternGenerator getInstance(android.icu.util.ULocale)>
<android.icu.text.DateTimePatternGenerator: java.lang.Object clone()>
<android.icu.text.DateTimePatternGenerator: android.icu.text.DateTimePatternGenerator getInstance(java.util.Locale)>
<android.icu.text.DateTimePatternGenerator: java.lang.String getBestPattern(java.lang.String,int)>
<android.icu.text.DateTimePatternGenerator: void setAppendItemFormat(int,java.lang.String)>
<android.icu.text.DateTimePatternGenerator: java.lang.String getBaseSkeleton(java.lang.String)>
<android.icu.text.DateTimePatternGenerator: void setDateTimeFormat(java.lang.String)>
<android.icu.text.DateTimePatternGenerator: java.lang.String getBestPattern(java.lang.String)>
<android.icu.text.DateTimePatternGenerator: java.util.Set getBaseSkeletons(java.util.Set)>
<android.icu.text.DateTimePatternGenerator: java.lang.String getAppendItemFormat(int)>
<android.icu.text.DateTimePatternGenerator: android.icu.text.DateTimePatternGenerator getEmptyInstance()>
<android.icu.text.DateTimePatternGenerator: java.lang.String getDecimal()>
<android.icu.text.DateTimePatternGenerator: void setAppendItemName(int,java.lang.String)>
<android.icu.text.DateTimePatternGenerator: java.lang.String replaceFieldTypes(java.lang.String,java.lang.String,int)>
<android.icu.text.DateTimePatternGenerator: android.icu.text.DateTimePatternGenerator getInstance()>
<android.icu.text.DateTimePatternGenerator: java.lang.String getAppendItemName(int)>
<android.icu.text.DateTimePatternGenerator: java.lang.String replaceFieldTypes(java.lang.String,java.lang.String)>
<android.net.IpSecManager.SecurityParameterIndex: int getSpi()>
<android.net.IpSecManager.SecurityParameterIndex: void close()>
<android.print.PrintAttributes.Margins: void <init>(int,int,int,int)>
<android.print.PrintAttributes.Margins: int getTopMils()>
<android.print.PrintAttributes.Margins: int getLeftMils()>
<android.print.PrintAttributes.Margins: int getRightMils()>
<android.print.PrintAttributes.Margins: int getBottomMils()>
<android.media.MediaCodec.Callback: void onError(android.media.MediaCodec,android.media.MediaCodec.CodecException)>
<android.media.MediaCodec.Callback: void <init>()>
<android.media.MediaCodec.Callback: void onInputBufferAvailable(android.media.MediaCodec,int)>
<android.media.MediaCodec.Callback: void onOutputBufferAvailable(android.media.MediaCodec,int,android.media.MediaCodec.BufferInfo)>
<android.media.MediaCodec.Callback: void onOutputFormatChanged(android.media.MediaCodec,android.media.MediaFormat)>
<android.service.voice.VoiceInteractionSession.AssistState: android.service.voice.VoiceInteractionSession.ActivityId getActivityId()>
<android.service.voice.VoiceInteractionSession.AssistState: android.app.assist.AssistStructure getAssistStructure()>
<android.service.voice.VoiceInteractionSession.AssistState: android.os.Bundle getAssistData()>
<android.service.voice.VoiceInteractionSession.AssistState: android.app.assist.AssistContent getAssistContent()>
<android.service.voice.VoiceInteractionSession.AssistState: int getIndex()>
<android.service.voice.VoiceInteractionSession.AssistState: int getCount()>
<android.service.voice.VoiceInteractionSession.AssistState: boolean isFocused()>
<android.app.ActivityManager.RecentTaskInfo: int describeContents()>
<android.app.ActivityManager.RecentTaskInfo: void <init>()>
<android.app.ActivityManager.RecentTaskInfo: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager.RecentTaskInfo: void writeToParcel(android.os.Parcel,int)>
<java.lang.reflect.UndeclaredThrowableException: void <init>(Throwable,String)>
<java.lang.reflect.UndeclaredThrowableException: void <init>(Throwable)>
<java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getUndeclaredThrowable()>
<android.service.autofill.CustomDescription.Builder: android.service.autofill.CustomDescription.Builder addOnClickAction(int,android.service.autofill.OnClickAction)>
<android.service.autofill.CustomDescription.Builder: android.service.autofill.CustomDescription.Builder batchUpdate(android.service.autofill.Validator,android.service.autofill.BatchUpdates)>
<android.service.autofill.CustomDescription.Builder: void <init>(android.widget.RemoteViews)>
<android.service.autofill.CustomDescription.Builder: android.service.autofill.CustomDescription.Builder addChild(int,android.service.autofill.Transformation)>
<android.service.autofill.CustomDescription.Builder: android.service.autofill.CustomDescription build()>
<java.util.function.LongConsumer: java.util.function.LongConsumer andThen(java.util.function.LongConsumer)>
<java.util.function.LongConsumer: void accept(long)>
<android.widget.Magnifier.Builder: android.widget.Magnifier.Builder setElevation(@Pxfloat)>
<android.widget.Magnifier.Builder: void <init>(android.view.View)>
<android.widget.Magnifier.Builder: android.widget.Magnifier.Builder setOverlay(android.graphics.drawable.Drawable)>
<android.widget.Magnifier.Builder: android.widget.Magnifier.Builder setSourceBounds(int,int,int,int)>
<android.widget.Magnifier.Builder: android.widget.Magnifier.Builder setClippingEnabled(boolean)>
<android.widget.Magnifier.Builder: android.widget.Magnifier.Builder setDefaultSourceToMagnifierOffset(@Pxint,@Pxint)>
<android.widget.Magnifier.Builder: android.widget.Magnifier.Builder setSize(@Pxint,@Pxint)>
<android.widget.Magnifier.Builder: android.widget.Magnifier build()>
<android.widget.Magnifier.Builder: android.widget.Magnifier.Builder setCornerRadius(@Pxfloat)>
<android.widget.Magnifier.Builder: android.widget.Magnifier.Builder setInitialZoom(float)>
<android.hardware.location.GeofenceHardwareMonitorCallback: void <init>()>
<android.hardware.location.GeofenceHardwareMonitorCallback: void onMonitoringSystemChange(int,boolean,android.location.Location)>
<android.hardware.location.GeofenceHardwareMonitorCallback: void onMonitoringSystemChange(android.hardware.location.GeofenceHardwareMonitorEvent)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap.Config,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap wrapHardwareBuffer(android.hardware.HardwareBuffer,android.graphics.ColorSpace)>
<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha()>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(@ColorIntint[],int,int,int,int,android.graphics.Bitmap.Config)>
<android.graphics.Bitmap: void recycle()>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap.Config,boolean,android.graphics.ColorSpace)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,@ColorIntint[],int,int,android.graphics.Bitmap.Config)>
<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap.Config,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap.Config)>
<android.graphics.Bitmap: android.graphics.Color getColor(int,int)>
<android.graphics.Bitmap: int getScaledWidth(int)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>
<android.graphics.Bitmap: void setHeight(int)>
<android.graphics.Bitmap: int getPixel(int,int)>
<android.graphics.Bitmap: void setColorSpace(android.graphics.ColorSpace)>
<android.graphics.Bitmap: byte[] getNinePatchChunk()>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>
<android.graphics.Bitmap: boolean hasMipMap()>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap.Config,boolean,android.graphics.ColorSpace)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture)>
<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap.Config)>
<android.graphics.Bitmap: boolean isPremultiplied()>
<android.graphics.Bitmap: void prepareToDraw()>
<android.graphics.Bitmap: boolean hasAlpha()>
<android.graphics.Bitmap: boolean isMutable()>
<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>
<android.graphics.Bitmap: void copyPixelsFromBuffer(java.nio.Buffer)>
<android.graphics.Bitmap: void getPixels(@ColorIntint[],int,int,int,int,int,int)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap.CompressFormat,int,java.io.OutputStream)>
<android.graphics.Bitmap: int getByteCount()>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(@ColorIntint[],int,int,android.graphics.Bitmap.Config)>
<android.graphics.Bitmap: void eraseColor(@ColorLonglong)>
<android.graphics.Bitmap: void copyPixelsToBuffer(java.nio.Buffer)>
<android.graphics.Bitmap: int getHeight()>
<android.graphics.Bitmap: void setConfig(android.graphics.Bitmap.Config)>
<android.graphics.Bitmap: int getDensity()>
<android.graphics.Bitmap: int getScaledHeight(android.graphics.Canvas)>
<android.graphics.Bitmap: int getScaledWidth(android.util.DisplayMetrics)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)>
<android.graphics.Bitmap: android.graphics.ColorSpace getColorSpace()>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,@ColorIntint[],int,int,int,int,android.graphics.Bitmap.Config)>
<android.graphics.Bitmap: int getGenerationId()>
<android.graphics.Bitmap: boolean sameAs(android.graphics.Bitmap)>
<android.graphics.Bitmap: int getWidth()>
<android.graphics.Bitmap: android.graphics.Bitmap.Config getConfig()>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap.Config,boolean)>
<android.graphics.Bitmap: int describeContents()>
<android.graphics.Bitmap: void setPixels(@ColorIntint[],int,int,int,int,int,int)>
<android.graphics.Bitmap: void setDensity(int)>
<android.graphics.Bitmap: boolean isRecycled()>
<android.graphics.Bitmap: void setWidth(int)>
<android.graphics.Bitmap: int getRowBytes()>
<android.graphics.Bitmap: void setPixel(int,int,@ColorIntint)>
<android.graphics.Bitmap: void setHasMipMap(boolean)>
<android.graphics.Bitmap: int getScaledWidth(android.graphics.Canvas)>
<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])>
<android.graphics.Bitmap: void setPremultiplied(boolean)>
<android.graphics.Bitmap: int getScaledHeight(android.util.DisplayMetrics)>
<android.graphics.Bitmap: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Bitmap: int getAllocationByteCount()>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap.Config)>
<android.graphics.Bitmap: void setHasAlpha(boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture,int,int,android.graphics.Bitmap.Config)>
<android.graphics.Bitmap: int getScaledHeight(int)>
<android.graphics.Bitmap: void eraseColor(@ColorIntint)>
<android.media.MediaCas: void sendEvent(int,int,byte[])>
<android.media.MediaCas: boolean isSystemIdSupported(int)>
<android.media.MediaCas: android.media.MediaCas.Session openSession()>
<android.media.MediaCas: void finalize()>
<android.media.MediaCas: void provision(java.lang.String)>
<android.media.MediaCas: void processEmm(byte[])>
<android.media.MediaCas: void <init>(int)>
<android.media.MediaCas: void processEmm(byte[],int,int)>
<android.media.MediaCas: void refreshEntitlements(int,byte[])>
<android.media.MediaCas: android.media.MediaCas.PluginDescriptor[] enumeratePlugins()>
<android.media.MediaCas: void close()>
<android.media.MediaCas: void setPrivateData(byte[])>
<android.media.MediaCas: void setEventListener(android.media.MediaCas.EventListener,android.os.Handler)>
<java.lang.Class: boolean isAnonymousClass()>
<java.lang.Class: boolean isLocalClass()>
<java.lang.Class: T cast(java.lang.Object)>
<java.lang.Class: java.lang.Class getComponentType()>
<java.lang.Class: java.lang.reflect.Field[] getFields()>
<java.lang.Class: java.lang.reflect.Constructor getEnclosingConstructor()>
<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,Class...)>
<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
<java.lang.Class: java.lang.String getSimpleName()>
<java.lang.Class: A getDeclaredAnnotation(java.lang.Class)>
<java.lang.Class: boolean isArray()>
<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>
<java.lang.Class: java.lang.ClassLoader getClassLoader()>
<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,Class...)>
<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>
<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>
<java.lang.Class: java.lang.reflect.Constructor getConstructor(Class...)>
<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
<java.lang.Class: boolean isPrimitive()>
<java.lang.Class: java.lang.Class[] getClasses()>
<java.lang.Class: boolean isAnnotation()>
<java.lang.Class: boolean isEnum()>
<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>
<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(Class...)>
<java.lang.Class: boolean isMemberClass()>
<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<java.lang.Class: java.lang.Class forName(java.lang.String)>
<java.lang.Class: T newInstance()>
<java.lang.Class: java.lang.Object[] getSigners()>
<java.lang.Class: boolean isInstance(java.lang.Object)>
<java.lang.Class: java.lang.Class[] getInterfaces()>
<java.lang.Class: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>
<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>
<java.lang.Class: java.lang.String getName()>
<java.lang.Class: boolean desiredAssertionStatus()>
<java.lang.Class: java.lang.String toGenericString()>
<java.lang.Class: java.lang.Class[] getDeclaredClasses()>
<java.lang.Class: java.lang.Class getEnclosingClass()>
<java.lang.Class: boolean isInterface()>
<java.lang.Class: boolean isSynthetic()>
<java.lang.Class: A[] getAnnotationsByType(java.lang.Class)>
<java.lang.Class: A getAnnotation(java.lang.Class)>
<java.lang.Class: java.lang.String getCanonicalName()>
<java.lang.Class: java.lang.Package getPackage()>
<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>
<java.lang.Class: java.lang.annotation.Annotation[] getAnnotations()>
<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>
<java.lang.Class: java.lang.Class getDeclaringClass()>
<java.lang.Class: java.lang.reflect.Method[] getMethods()>
<java.lang.Class: int getModifiers()>
<java.lang.Class: T[] getEnumConstants()>
<java.lang.Class: java.lang.Class getSuperclass()>
<java.lang.Class: java.net.URL getResource(java.lang.String)>
<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>
<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<java.util.IntSummaryStatistics: void combine(java.util.IntSummaryStatistics)>
<java.util.IntSummaryStatistics: long getCount()>
<java.util.IntSummaryStatistics: int getMin()>
<java.util.IntSummaryStatistics: int getMax()>
<java.util.IntSummaryStatistics: long getSum()>
<java.util.IntSummaryStatistics: void accept(int)>
<java.util.IntSummaryStatistics: void <init>()>
<java.util.IntSummaryStatistics: double getAverage()>
<org.w3c.dom.ls.LSInput: java.io.InputStream getByteStream()>
<org.w3c.dom.ls.LSInput: void setCharacterStream(java.io.Reader)>
<org.w3c.dom.ls.LSInput: java.lang.String getPublicId()>
<org.w3c.dom.ls.LSInput: boolean getCertifiedText()>
<org.w3c.dom.ls.LSInput: java.lang.String getEncoding()>
<org.w3c.dom.ls.LSInput: void setByteStream(java.io.InputStream)>
<org.w3c.dom.ls.LSInput: void setCertifiedText(boolean)>
<org.w3c.dom.ls.LSInput: java.lang.String getBaseURI()>
<org.w3c.dom.ls.LSInput: void setBaseURI(java.lang.String)>
<org.w3c.dom.ls.LSInput: java.io.Reader getCharacterStream()>
<org.w3c.dom.ls.LSInput: void setStringData(java.lang.String)>
<org.w3c.dom.ls.LSInput: java.lang.String getSystemId()>
<org.w3c.dom.ls.LSInput: void setSystemId(java.lang.String)>
<org.w3c.dom.ls.LSInput: java.lang.String getStringData()>
<org.w3c.dom.ls.LSInput: void setEncoding(java.lang.String)>
<org.w3c.dom.ls.LSInput: void setPublicId(java.lang.String)>
<android.opengl.GLES31Ext: void glPushDebugGroupKHR(int,int,int,java.lang.String)>
<android.opengl.GLES31Ext: void glBlendEquationSeparateiEXT(int,int,int)>
<android.opengl.GLES31Ext: void glDebugMessageCallbackKHR(android.opengl.GLES31Ext.DebugProcKHR)>
<android.opengl.GLES31Ext: java.lang.String glGetObjectPtrLabelKHR(long)>
<android.opengl.GLES31Ext: java.lang.String glGetObjectLabelKHR(int,int)>
<android.opengl.GLES31Ext: void glSamplerParameterIivEXT(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: void glTexParameterIuivEXT(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: void glBlendEquationiEXT(int,int)>
<android.opengl.GLES31Ext: void glPrimitiveBoundingBoxEXT(float,float,float,float,float,float,float,float)>
<android.opengl.GLES31Ext: void glGetTexParameterIuivEXT(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: void glTexParameterIivEXT(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: void glBlendFunciEXT(int,int,int)>
<android.opengl.GLES31Ext: void glColorMaskiEXT(int,boolean,boolean,boolean,boolean)>
<android.opengl.GLES31Ext: void glPopDebugGroupKHR()>
<android.opengl.GLES31Ext: void glBlendFuncSeparateiEXT(int,int,int,int,int)>
<android.opengl.GLES31Ext: void glTexBufferRangeEXT(int,int,int,int,int)>
<android.opengl.GLES31Ext: void glTexParameterIuivEXT(int,int,int[],int)>
<android.opengl.GLES31Ext: void glCopyImageSubDataEXT(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)>
<android.opengl.GLES31Ext: void glTexParameterIivEXT(int,int,int[],int)>
<android.opengl.GLES31Ext: java.lang.String[] glGetDebugMessageLogKHR(int,int[],int,int[],int,int[],int,int[],int)>
<android.opengl.GLES31Ext: void glDebugMessageControlKHR(int,int,int,int,int[],int,boolean)>
<android.opengl.GLES31Ext: void glGetSamplerParameterIuivEXT(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: void glGetTexParameterIivEXT(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: void glPatchParameteriEXT(int,int)>
<android.opengl.GLES31Ext: void glDebugMessageInsertKHR(int,int,int,int,java.lang.String)>
<android.opengl.GLES31Ext: void glMinSampleShadingOES(float)>
<android.opengl.GLES31Ext: void glGetTexParameterIuivEXT(int,int,int[],int)>
<android.opengl.GLES31Ext: void glSamplerParameterIivEXT(int,int,int[],int)>
<android.opengl.GLES31Ext: void glTexStorage3DMultisampleOES(int,int,int,int,int,int,boolean)>
<android.opengl.GLES31Ext: void glDebugMessageControlKHR(int,int,int,int,java.nio.IntBuffer,boolean)>
<android.opengl.GLES31Ext: int glGetDebugMessageLogKHR(int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.ByteBuffer)>
<android.opengl.GLES31Ext: void glDisableiEXT(int,int)>
<android.opengl.GLES31Ext: void glGetSamplerParameterIivEXT(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: boolean glIsEnablediEXT(int,int)>
<android.opengl.GLES31Ext: int glGetDebugMessageLogKHR(int,int,int[],int,int[],int,int[],int,int[],int,int[],int,byte[],int)>
<android.opengl.GLES31Ext: android.opengl.GLES31Ext.DebugProcKHR glGetDebugMessageCallbackKHR()>
<android.opengl.GLES31Ext: void glSamplerParameterIuivEXT(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: void glSamplerParameterIuivEXT(int,int,int[],int)>
<android.opengl.GLES31Ext: void glGetTexParameterIivEXT(int,int,int[],int)>
<android.opengl.GLES31Ext: void glTexBufferEXT(int,int,int)>
<android.opengl.GLES31Ext: java.lang.String[] glGetDebugMessageLogKHR(int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: void glEnableiEXT(int,int)>
<android.opengl.GLES31Ext: void glFramebufferTextureEXT(int,int,int,int)>
<android.opengl.GLES31Ext: void glObjectPtrLabelKHR(long,java.lang.String)>
<android.opengl.GLES31Ext: void glBlendBarrierKHR()>
<android.opengl.GLES31Ext: void glGetSamplerParameterIuivEXT(int,int,int[],int)>
<android.opengl.GLES31Ext: void glObjectLabelKHR(int,int,int,java.lang.String)>
<android.opengl.GLES31Ext: void glGetSamplerParameterIivEXT(int,int,int[],int)>
<android.provider.MediaStore.Audio.Playlists.Members: void <init>()>
<android.provider.MediaStore.Audio.Playlists.Members: android.net.Uri getContentUri(java.lang.String,long)>
<android.provider.MediaStore.Audio.Playlists.Members: boolean moveItem(android.content.ContentResolver,long,int,int)>
<javax.xml.validation.ValidatorHandler: boolean getFeature(java.lang.String)>
<javax.xml.validation.ValidatorHandler: void setResourceResolver(org.w3c.dom.ls.LSResourceResolver)>
<javax.xml.validation.ValidatorHandler: org.xml.sax.ErrorHandler getErrorHandler()>
<javax.xml.validation.ValidatorHandler: java.lang.Object getProperty(java.lang.String)>
<javax.xml.validation.ValidatorHandler: void setFeature(java.lang.String,boolean)>
<javax.xml.validation.ValidatorHandler: javax.xml.validation.TypeInfoProvider getTypeInfoProvider()>
<javax.xml.validation.ValidatorHandler: org.xml.sax.ContentHandler getContentHandler()>
<javax.xml.validation.ValidatorHandler: org.w3c.dom.ls.LSResourceResolver getResourceResolver()>
<javax.xml.validation.ValidatorHandler: void setContentHandler(org.xml.sax.ContentHandler)>
<javax.xml.validation.ValidatorHandler: void setProperty(java.lang.String,java.lang.Object)>
<javax.xml.validation.ValidatorHandler: void <init>()>
<javax.xml.validation.ValidatorHandler: void setErrorHandler(org.xml.sax.ErrorHandler)>
<android.provider.CalendarContract.EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])>
<android.telephony.ims.stub.ImsRegistrationImplBase: void onDeregistered(android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.stub.ImsRegistrationImplBase: void onTechnologyChangeFailed(int,android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.stub.ImsRegistrationImplBase: void onSubscriberAssociatedUriChanged(android.net.Uri[])>
<android.telephony.ims.stub.ImsRegistrationImplBase: void onRegistered(int)>
<android.telephony.ims.stub.ImsRegistrationImplBase: void onRegistering(int)>
<android.telephony.ims.stub.ImsRegistrationImplBase: void <init>()>
<android.service.euicc.GetEuiccProfileInfoListResult: boolean getIsRemovable()>
<android.service.euicc.GetEuiccProfileInfoListResult: int describeContents()>
<android.service.euicc.GetEuiccProfileInfoListResult: void writeToParcel(android.os.Parcel,int)>
<android.service.euicc.GetEuiccProfileInfoListResult: int getResult()>
<android.service.euicc.GetEuiccProfileInfoListResult: java.util.List getProfiles()>
<android.service.euicc.GetEuiccProfileInfoListResult: void <init>(int,android.service.euicc.EuiccProfileInfo[],boolean)>
<android.view.contentcapture.ContentCaptureContext: int getFlags()>
<android.view.contentcapture.ContentCaptureContext: android.view.contentcapture.ContentCaptureSessionId getParentSessionId()>
<android.view.contentcapture.ContentCaptureContext: android.content.ComponentName getActivityComponent()>
<android.view.contentcapture.ContentCaptureContext: void writeToParcel(android.os.Parcel,int)>
<android.view.contentcapture.ContentCaptureContext: int getDisplayId()>
<android.view.contentcapture.ContentCaptureContext: android.view.contentcapture.ContentCaptureContext forLocusId(java.lang.String)>
<android.view.contentcapture.ContentCaptureContext: int describeContents()>
<android.view.contentcapture.ContentCaptureContext: int getTaskId()>
<android.view.contentcapture.ContentCaptureContext: android.content.LocusId getLocusId()>
<android.view.contentcapture.ContentCaptureContext: android.os.Bundle getExtras()>
<android.util.MutableShort: void <init>(short)>
<javax.sql.StatementEvent: void <init>(javax.sql.PooledConnection,java.sql.PreparedStatement)>
<javax.sql.StatementEvent: void <init>(javax.sql.PooledConnection,java.sql.PreparedStatement,java.sql.SQLException)>
<javax.sql.StatementEvent: java.sql.PreparedStatement getStatement()>
<javax.sql.StatementEvent: java.sql.SQLException getSQLException()>
<android.webkit.GeolocationPermissions: void getOrigins(android.webkit.ValueCallback)>
<android.webkit.GeolocationPermissions: void allow(java.lang.String)>
<android.webkit.GeolocationPermissions: void clear(java.lang.String)>
<android.webkit.GeolocationPermissions: void getAllowed(java.lang.String,android.webkit.ValueCallback)>
<android.webkit.GeolocationPermissions: void <init>()>
<android.webkit.GeolocationPermissions: void clearAll()>
<android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()>
<android.view.inputmethod.CursorAnchorInfo.Builder: android.view.inputmethod.CursorAnchorInfo.Builder addCharacterBounds(int,float,float,float,float,int)>
<android.view.inputmethod.CursorAnchorInfo.Builder: android.view.inputmethod.CursorAnchorInfo.Builder setInsertionMarkerLocation(float,float,float,float,int)>
<android.view.inputmethod.CursorAnchorInfo.Builder: android.view.inputmethod.CursorAnchorInfo.Builder setComposingText(int,CharSequence)>
<android.view.inputmethod.CursorAnchorInfo.Builder: android.view.inputmethod.CursorAnchorInfo.Builder setMatrix(android.graphics.Matrix)>
<android.view.inputmethod.CursorAnchorInfo.Builder: void <init>()>
<android.view.inputmethod.CursorAnchorInfo.Builder: void reset()>
<android.view.inputmethod.CursorAnchorInfo.Builder: android.view.inputmethod.CursorAnchorInfo build()>
<android.view.inputmethod.CursorAnchorInfo.Builder: android.view.inputmethod.CursorAnchorInfo.Builder setSelectionRange(int,int)>
<android.media.MediaCodecInfo.AudioCapabilities: android.util.Range[] getSupportedSampleRateRanges()>
<android.media.MediaCodecInfo.AudioCapabilities: boolean isSampleRateSupported(int)>
<android.media.MediaCodecInfo.AudioCapabilities: int getMaxInputChannelCount()>
<android.media.MediaCodecInfo.AudioCapabilities: android.util.Range getBitrateRange()>
<android.media.MediaCodecInfo.AudioCapabilities: int[] getSupportedSampleRates()>
<android.net.wifi.aware.IdentityChangedListener: void <init>()>
<android.net.wifi.aware.IdentityChangedListener: void onIdentityChanged(byte[])>
<android.app.AppDetailsActivity: void <init>()>
<android.app.SearchManager.OnCancelListener: void onCancel()>
<android.service.notification.ZenPolicy: int getVisualEffectNotificationList()>
<android.service.notification.ZenPolicy: int getPriorityCategoryEvents()>
<android.service.notification.ZenPolicy: int getPriorityCategoryAlarms()>
<android.service.notification.ZenPolicy: int getPriorityCategoryReminders()>
<android.service.notification.ZenPolicy: int getVisualEffectLights()>
<android.service.notification.ZenPolicy: int getVisualEffectAmbient()>
<android.service.notification.ZenPolicy: int getVisualEffectStatusBar()>
<android.service.notification.ZenPolicy: int getPriorityCategoryRepeatCallers()>
<android.service.notification.ZenPolicy: int getPriorityMessageSenders()>
<android.service.notification.ZenPolicy: int getPriorityCategoryMessages()>
<android.service.notification.ZenPolicy: int getVisualEffectPeek()>
<android.service.notification.ZenPolicy: void writeToParcel(android.os.Parcel,int)>
<android.service.notification.ZenPolicy: int getVisualEffectBadge()>
<android.service.notification.ZenPolicy: int getPriorityCallSenders()>
<android.service.notification.ZenPolicy: int getPriorityCategorySystem()>
<android.service.notification.ZenPolicy: int getPriorityCategoryMedia()>
<android.service.notification.ZenPolicy: int describeContents()>
<android.service.notification.ZenPolicy: int getVisualEffectFullScreenIntent()>
<android.service.notification.ZenPolicy: int getPriorityCategoryCalls()>
<android.webkit.WebView.WebViewTransport: void setWebView(android.webkit.WebView)>
<android.webkit.WebView.WebViewTransport: android.webkit.WebView getWebView()>
<android.webkit.WebView.WebViewTransport: void <init>()>
<java.io.StreamCorruptedException: void <init>(String)>
<java.io.StreamCorruptedException: void <init>()>
<java.time.zone.ZoneOffsetTransition: boolean isOverlap()>
<java.time.zone.ZoneOffsetTransition: long toEpochSecond()>
<java.time.zone.ZoneOffsetTransition: java.time.LocalDateTime getDateTimeBefore()>
<java.time.zone.ZoneOffsetTransition: java.time.ZoneOffset getOffsetBefore()>
<java.time.zone.ZoneOffsetTransition: java.time.LocalDateTime getDateTimeAfter()>
<java.time.zone.ZoneOffsetTransition: int compareTo(java.time.zone.ZoneOffsetTransition)>
<java.time.zone.ZoneOffsetTransition: boolean isGap()>
<java.time.zone.ZoneOffsetTransition: java.time.Instant getInstant()>
<java.time.zone.ZoneOffsetTransition: java.time.Duration getDuration()>
<java.time.zone.ZoneOffsetTransition: java.time.zone.ZoneOffsetTransition of(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneOffset)>
<java.time.zone.ZoneOffsetTransition: boolean isValidOffset(java.time.ZoneOffset)>
<java.time.zone.ZoneOffsetTransition: java.time.ZoneOffset getOffsetAfter()>
<android.text.style.MetricAffectingSpan: void <init>()>
<android.text.style.MetricAffectingSpan: android.text.style.MetricAffectingSpan getUnderlying()>
<android.text.style.MetricAffectingSpan: void updateMeasureState(android.text.TextPaint)>
<org.w3c.dom.DOMLocator: int getLineNumber()>
<org.w3c.dom.DOMLocator: int getUtf16Offset()>
<org.w3c.dom.DOMLocator: org.w3c.dom.Node getRelatedNode()>
<org.w3c.dom.DOMLocator: java.lang.String getUri()>
<org.w3c.dom.DOMLocator: int getColumnNumber()>
<org.w3c.dom.DOMLocator: int getByteOffset()>
<android.app.backup.BackupTransport: void cancelFullBackup()>
<android.app.backup.BackupTransport: CharSequence dataManagementIntentLabel()>
<android.app.backup.BackupTransport: long getBackupQuota(java.lang.String,boolean)>
<android.app.backup.BackupTransport: java.lang.String dataManagementLabel()>
<android.app.backup.BackupTransport: int abortFullRestore()>
<android.app.backup.BackupTransport: int getNextFullRestoreDataChunk(android.os.ParcelFileDescriptor)>
<android.app.backup.BackupTransport: int performFullBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor)>
<android.app.backup.BackupTransport: android.content.Intent dataManagementIntent()>
<android.app.backup.BackupTransport: int finishBackup()>
<android.app.backup.BackupTransport: long requestFullBackupTime()>
<android.app.backup.BackupTransport: void finishRestore()>
<android.app.backup.BackupTransport: int startRestore(long,android.content.pm.PackageInfo[])>
<android.app.backup.BackupTransport: void <init>()>
<android.app.backup.BackupTransport: int sendBackupData(int)>
<android.app.backup.BackupTransport: int checkFullBackupSize(long)>
<android.app.backup.BackupTransport: int performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int)>
<android.app.backup.BackupTransport: java.lang.String currentDestinationString()>
<android.app.backup.BackupTransport: android.content.Intent configurationIntent()>
<android.app.backup.BackupTransport: long getCurrentRestoreSet()>
<android.app.backup.BackupTransport: android.app.backup.RestoreDescription nextRestorePackage()>
<android.app.backup.BackupTransport: int performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor)>
<android.app.backup.BackupTransport: boolean isAppEligibleForBackup(android.content.pm.PackageInfo,boolean)>
<android.app.backup.BackupTransport: long requestBackupTime()>
<android.app.backup.BackupTransport: int performFullBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int)>
<android.app.backup.BackupTransport: int getTransportFlags()>
<android.app.backup.BackupTransport: int initializeDevice()>
<android.app.backup.BackupTransport: java.lang.String name()>
<android.app.backup.BackupTransport: int clearBackupData(android.content.pm.PackageInfo)>
<android.app.backup.BackupTransport: android.app.backup.RestoreSet[] getAvailableRestoreSets()>
<android.app.backup.BackupTransport: java.lang.String transportDirName()>
<android.app.backup.BackupTransport: android.os.IBinder getBinder()>
<android.app.backup.BackupTransport: int getRestoreData(android.os.ParcelFileDescriptor)>
<android.os.Message: void <init>()>
<android.os.Message: void setTarget(android.os.Handler)>
<android.os.Message: long getWhen()>
<android.os.Message: android.os.Handler getTarget()>
<android.os.Message: void recycle()>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int,java.lang.Object)>
<android.os.Message: boolean isAsynchronous()>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>
<android.os.Message: Runnable getCallback()>
<android.os.Message: void setData(android.os.Bundle)>
<android.os.Message: android.os.Bundle getData()>
<android.os.Message: android.os.Message obtain(android.os.Handler)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int)>
<android.os.Message: android.os.Message obtain(android.os.Message)>
<android.os.Message: android.os.Bundle peekData()>
<android.os.Message: int describeContents()>
<android.os.Message: void sendToTarget()>
<android.os.Message: android.os.Message obtain(android.os.Handler,Runnable)>
<android.os.Message: void writeToParcel(android.os.Parcel,int)>
<android.os.Message: void copyFrom(android.os.Message)>
<android.os.Message: android.os.Message obtain()>
<android.os.Message: void setAsynchronous(boolean)>
<java.util.function.ObjLongConsumer: void accept(T,long)>
<android.text.TextPaint: void <init>(android.graphics.Paint)>
<android.text.TextPaint: void set(android.text.TextPaint)>
<android.text.TextPaint: void <init>()>
<android.text.TextPaint: void <init>(int)>
<android.database.sqlite.SQLiteConstraintException: void <init>(String)>
<android.database.sqlite.SQLiteConstraintException: void <init>()>
<android.icu.text.LocaleDisplayNames: android.icu.text.LocaleDisplayNames getInstance(java.util.Locale,android.icu.text.DisplayContext...)>
<android.icu.text.LocaleDisplayNames: java.util.List getUiList(java.util.Set,boolean,java.util.Comparator)>
<android.icu.text.LocaleDisplayNames: java.lang.String scriptDisplayName(int)>
<android.icu.text.LocaleDisplayNames: java.lang.String languageDisplayName(java.lang.String)>
<android.icu.text.LocaleDisplayNames: java.lang.String localeDisplayName(android.icu.util.ULocale)>
<android.icu.text.LocaleDisplayNames: java.lang.String variantDisplayName(java.lang.String)>
<android.icu.text.LocaleDisplayNames: android.icu.text.LocaleDisplayNames getInstance(android.icu.util.ULocale,android.icu.text.LocaleDisplayNames.DialectHandling)>
<android.icu.text.LocaleDisplayNames: java.lang.String keyValueDisplayName(java.lang.String,java.lang.String)>
<android.icu.text.LocaleDisplayNames: android.icu.util.ULocale getLocale()>
<android.icu.text.LocaleDisplayNames: android.icu.text.DisplayContext getContext(android.icu.text.DisplayContext.Type)>
<android.icu.text.LocaleDisplayNames: java.lang.String regionDisplayName(java.lang.String)>
<android.icu.text.LocaleDisplayNames: android.icu.text.LocaleDisplayNames getInstance(android.icu.util.ULocale)>
<android.icu.text.LocaleDisplayNames: java.lang.String keyDisplayName(java.lang.String)>
<android.icu.text.LocaleDisplayNames: java.lang.String localeDisplayName(java.util.Locale)>
<android.icu.text.LocaleDisplayNames: android.icu.text.LocaleDisplayNames getInstance(android.icu.util.ULocale,android.icu.text.DisplayContext...)>
<android.icu.text.LocaleDisplayNames: java.util.List getUiListCompareWholeItems(java.util.Set,java.util.Comparator)>
<android.icu.text.LocaleDisplayNames: java.lang.String localeDisplayName(java.lang.String)>
<android.icu.text.LocaleDisplayNames: java.lang.String scriptDisplayName(java.lang.String)>
<android.icu.text.LocaleDisplayNames: android.icu.text.LocaleDisplayNames.DialectHandling getDialectHandling()>
<android.icu.text.LocaleDisplayNames: android.icu.text.LocaleDisplayNames getInstance(java.util.Locale)>
<android.se.omapi.SEService: android.se.omapi.Reader[] getReaders()>
<android.se.omapi.SEService: void shutdown()>
<android.se.omapi.SEService: void <init>(android.content.Context,java.util.concurrent.Executor,android.se.omapi.SEService.OnConnectedListener)>
<android.se.omapi.SEService: boolean isConnected()>
<android.se.omapi.SEService: java.lang.String getVersion()>
<android.app.WallpaperColors: android.app.WallpaperColors fromBitmap(android.graphics.Bitmap)>
<android.app.WallpaperColors: void writeToParcel(android.os.Parcel,int)>
<android.app.WallpaperColors: int getColorHints()>
<android.app.WallpaperColors: android.graphics.Color getSecondaryColor()>
<android.app.WallpaperColors: void <init>(android.os.Parcel)>
<android.app.WallpaperColors: void <init>(android.graphics.Color,android.graphics.Color,android.graphics.Color)>
<android.app.WallpaperColors: android.graphics.Color getPrimaryColor()>
<android.app.WallpaperColors: int describeContents()>
<android.app.WallpaperColors: android.app.WallpaperColors fromDrawable(android.graphics.drawable.Drawable)>
<android.app.WallpaperColors: android.graphics.Color getTertiaryColor()>
<android.app.WallpaperColors: void <init>(android.graphics.Color,android.graphics.Color,android.graphics.Color,int)>
<java.nio.channels.CancelledKeyException: void <init>()>
<java.security.spec.InvalidKeySpecException: void <init>()>
<java.security.spec.InvalidKeySpecException: void <init>(String,Throwable)>
<java.security.spec.InvalidKeySpecException: void <init>(Throwable)>
<java.security.spec.InvalidKeySpecException: void <init>(String)>
<android.app.AppOpsManager.HistoricalPackageOps: int describeContents()>
<android.app.AppOpsManager.HistoricalPackageOps: void writeToParcel(android.os.Parcel,int)>
<android.app.AppOpsManager.HistoricalPackageOps: int getOpCount()>
<android.app.AppOpsManager.HistoricalPackageOps: android.app.AppOpsManager.HistoricalOp getOp(java.lang.String)>
<android.app.AppOpsManager.HistoricalPackageOps: android.app.AppOpsManager.HistoricalOp getOpAt(int)>
<android.app.AppOpsManager.HistoricalPackageOps: java.lang.String getPackageName()>
<android.app.LoaderManager.LoaderCallbacks: android.content.Loader onCreateLoader(int,android.os.Bundle)>
<android.app.LoaderManager.LoaderCallbacks: void onLoadFinished(android.content.Loader,D)>
<android.app.LoaderManager.LoaderCallbacks: void onLoaderReset(android.content.Loader)>
<android.sax.EndTextElementListener: void end(java.lang.String)>
<android.widget.SimpleCursorAdapter: void setStringConversionColumn(int)>
<android.widget.SimpleCursorAdapter: void setViewImage(android.widget.ImageView,java.lang.String)>
<android.widget.SimpleCursorAdapter: void <init>(android.content.Context,int,android.database.Cursor,String[],int[])>
<android.widget.SimpleCursorAdapter: int getStringConversionColumn()>
<android.widget.SimpleCursorAdapter: void setViewBinder(android.widget.SimpleCursorAdapter.ViewBinder)>
<android.widget.SimpleCursorAdapter: void <init>(android.content.Context,int,android.database.Cursor,String[],int[],int)>
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter.CursorToStringConverter getCursorToStringConverter()>
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter.ViewBinder getViewBinder()>
<android.widget.SimpleCursorAdapter: void setCursorToStringConverter(android.widget.SimpleCursorAdapter.CursorToStringConverter)>
<android.widget.SimpleCursorAdapter: void setViewText(android.widget.TextView,java.lang.String)>
<android.widget.SimpleCursorAdapter: void changeCursorAndColumns(android.database.Cursor,java.lang.String[],int[])>
<android.widget.SimpleCursorAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)>
<java.text.NumberFormat: int getMaximumFractionDigits()>
<java.text.NumberFormat: java.text.NumberFormat getPercentInstance()>
<java.text.NumberFormat: boolean isParseIntegerOnly()>
<java.text.NumberFormat: void setMaximumFractionDigits(int)>
<java.text.NumberFormat: java.text.NumberFormat getNumberInstance()>
<java.text.NumberFormat: java.math.RoundingMode getRoundingMode()>
<java.text.NumberFormat: int getMinimumFractionDigits()>
<java.text.NumberFormat: java.text.NumberFormat getPercentInstance(java.util.Locale)>
<java.text.NumberFormat: java.util.Currency getCurrency()>
<java.text.NumberFormat: java.text.NumberFormat getCurrencyInstance()>
<java.text.NumberFormat: void setMinimumIntegerDigits(int)>
<java.text.NumberFormat: void <init>()>
<java.text.NumberFormat: void setParseIntegerOnly(boolean)>
<java.text.NumberFormat: java.text.NumberFormat getInstance()>
<java.text.NumberFormat: boolean isGroupingUsed()>
<java.text.NumberFormat: java.text.NumberFormat getCurrencyInstance(java.util.Locale)>
<java.text.NumberFormat: java.util.Locale[] getAvailableLocales()>
<java.text.NumberFormat: java.lang.String format(double)>
<java.text.NumberFormat: int getMinimumIntegerDigits()>
<java.text.NumberFormat: void setGroupingUsed(boolean)>
<java.text.NumberFormat: java.text.NumberFormat getNumberInstance(java.util.Locale)>
<java.text.NumberFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>
<java.text.NumberFormat: java.lang.Number parse(java.lang.String)>
<java.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>
<java.text.NumberFormat: java.lang.String format(long)>
<java.text.NumberFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.NumberFormat: java.text.NumberFormat getIntegerInstance(java.util.Locale)>
<java.text.NumberFormat: void setMaximumIntegerDigits(int)>
<java.text.NumberFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale)>
<java.text.NumberFormat: void setCurrency(java.util.Currency)>
<java.text.NumberFormat: java.text.NumberFormat getIntegerInstance()>
<java.text.NumberFormat: int getMaximumIntegerDigits()>
<java.text.NumberFormat: void setMinimumFractionDigits(int)>
<java.text.NumberFormat: void setRoundingMode(java.math.RoundingMode)>
<java.text.NumberFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>
<android.view.accessibility.CaptioningManager.CaptionStyle: boolean hasWindowColor()>
<android.view.accessibility.CaptioningManager.CaptionStyle: boolean hasEdgeColor()>
<android.view.accessibility.CaptioningManager.CaptionStyle: boolean hasBackgroundColor()>
<android.view.accessibility.CaptioningManager.CaptionStyle: android.graphics.Typeface getTypeface()>
<android.view.accessibility.CaptioningManager.CaptionStyle: boolean hasEdgeType()>
<android.view.accessibility.CaptioningManager.CaptionStyle: boolean hasForegroundColor()>
<android.location.GnssReflectingPlane: double getAzimuthDegrees()>
<android.location.GnssReflectingPlane: int describeContents()>
<android.location.GnssReflectingPlane: double getLongitudeDegrees()>
<android.location.GnssReflectingPlane: double getAltitudeMeters()>
<android.location.GnssReflectingPlane: double getLatitudeDegrees()>
<android.location.GnssReflectingPlane: void writeToParcel(android.os.Parcel,int)>
<android.content.SearchRecentSuggestionsProvider: void <init>()>
<android.content.SearchRecentSuggestionsProvider: java.lang.String getType(android.net.Uri)>
<android.content.SearchRecentSuggestionsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.content.SearchRecentSuggestionsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.SearchRecentSuggestionsProvider: boolean onCreate()>
<android.content.SearchRecentSuggestionsProvider: void setupSuggestions(java.lang.String,int)>
<android.content.SearchRecentSuggestionsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.SearchRecentSuggestionsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<org.apache.http.conn.ConnectTimeoutException: void <init>(String)>
<org.apache.http.conn.ConnectTimeoutException: void <init>()>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)>
<android.content.res.AssetManager: java.lang.String[] list(java.lang.String)>
<android.content.res.AssetManager: java.lang.String[] getApkPaths()>
<android.content.res.AssetManager: java.util.Map getOverlayableMap(java.lang.String)>
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)>
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)>
<android.content.res.AssetManager: java.lang.String[] getLocales()>
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)>
<android.content.res.AssetManager: void close()>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)>
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)>
<java.net.FileNameMap: java.lang.String getContentTypeFor(java.lang.String)>
<android.app.usage.CacheQuotaHint: void <init>(android.app.usage.CacheQuotaHint.Builder)>
<android.app.usage.CacheQuotaHint: int describeContents()>
<android.app.usage.CacheQuotaHint: long getQuota()>
<android.app.usage.CacheQuotaHint: int getUid()>
<android.app.usage.CacheQuotaHint: android.app.usage.UsageStats getUsageStats()>
<android.app.usage.CacheQuotaHint: void writeToParcel(android.os.Parcel,int)>
<android.app.usage.CacheQuotaHint: java.lang.String getVolumeUuid()>
<java.nio.channels.IllegalSelectorException: void <init>()>
<android.telephony.mbms.DownloadRequest: int getMaxDestinationUriSize()>
<android.telephony.mbms.DownloadRequest: android.net.Uri getDestinationUri()>
<android.telephony.mbms.DownloadRequest: int getSubscriptionId()>
<android.telephony.mbms.DownloadRequest: int describeContents()>
<android.telephony.mbms.DownloadRequest: int getMaxAppIntentSize()>
<android.telephony.mbms.DownloadRequest: android.net.Uri getSourceUri()>
<android.telephony.mbms.DownloadRequest: byte[] toByteArray()>
<android.telephony.mbms.DownloadRequest: java.lang.String getFileServiceId()>
<android.telephony.mbms.DownloadRequest: void writeToParcel(android.os.Parcel,int)>
<java.util.EmptyStackException: void <init>()>
<android.transition.ChangeClipBounds: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.ChangeClipBounds: void <init>()>
<android.transition.ChangeClipBounds: void captureEndValues(android.transition.TransitionValues)>
<android.transition.ChangeClipBounds: void captureStartValues(android.transition.TransitionValues)>
<android.app.WallpaperManager.OnColorsChangedListener: void onColorsChanged(android.app.WallpaperColors,int)>
<android.net.rtp.AudioGroup: void setMode(int)>
<android.net.rtp.AudioGroup: android.net.rtp.AudioStream[] getStreams()>
<android.net.rtp.AudioGroup: void <init>()>
<android.net.rtp.AudioGroup: void sendDtmf(int)>
<android.net.rtp.AudioGroup: void clear()>
<android.net.rtp.AudioGroup: int getMode()>
<android.content.AsyncQueryHandler.WorkerHandler: void <init>(android.os.Looper)>
<android.security.KeyStoreException: int getErrorCode()>
<android.security.KeyStoreException: void <init>(int,String)>
<android.graphics.LightingColorFilter: int getColorMultiply()>
<android.graphics.LightingColorFilter: void <init>(@ColorInt int,@ColorInt int)>
<android.graphics.LightingColorFilter: int getColorAdd()>
<java.util.Spliterator.OfPrimitive extends java.util.Spliterator: T_SPLITR trySplit()>
<java.util.Spliterator.OfPrimitive extends java.util.Spliterator: void forEachRemaining(T_CONS)>
<java.util.Spliterator.OfPrimitive extends java.util.Spliterator: boolean tryAdvance(T_CONS)>
<android.net.wifi.WifiManager: boolean disableNetwork(int)>
<android.net.wifi.WifiManager: boolean isWifiScannerSupported()>
<android.net.wifi.WifiManager: boolean isTdlsSupported()>
<android.net.wifi.WifiManager: boolean isDeviceToApRttSupported()>
<android.net.wifi.WifiManager: int getMaxNumberOfNetworkSuggestionsPerApp()>
<android.net.wifi.WifiManager: int compareSignalLevel(int,int)>
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>
<android.net.wifi.WifiManager: void startEasyConnectAsConfiguratorInitiator(java.lang.String,int,int,java.util.concurrent.Executor,android.net.wifi.EasyConnectStatusCallback)>
<android.net.wifi.WifiManager: void setTdlsEnabledWithMacAddress(java.lang.String,boolean)>
<android.net.wifi.WifiManager: void stopEasyConnectSession()>
<android.net.wifi.WifiManager: android.net.wifi.WifiManager.WifiLock createWifiLock(int,java.lang.String)>
<android.net.wifi.WifiManager: int getWifiApState()>
<android.net.wifi.WifiManager: boolean disconnect()>
<android.net.wifi.WifiManager: boolean isPreferredNetworkOffloadSupported()>
<android.net.wifi.WifiManager: android.net.wifi.WifiManager.WifiLock createWifiLock(java.lang.String)>
<android.net.wifi.WifiManager: int addNetworkSuggestions(java.util.List)>
<android.net.wifi.WifiManager: void addOrUpdatePasspointConfiguration(android.net.wifi.hotspot2.PasspointConfiguration)>
<android.net.wifi.WifiManager: boolean is5GHzBandSupported()>
<android.net.wifi.WifiManager: void addOnWifiUsabilityStatsListener(java.util.concurrent.Executor,android.net.wifi.WifiManager.OnWifiUsabilityStatsListener)>
<android.net.wifi.WifiManager: void startEasyConnectAsEnrolleeInitiator(java.lang.String,java.util.concurrent.Executor,android.net.wifi.EasyConnectStatusCallback)>
<android.net.wifi.WifiManager: boolean startScan(android.os.WorkSource)>
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)>
<android.net.wifi.WifiManager: boolean isEnhancedOpenSupported()>
<android.net.wifi.WifiManager: void cancelWps(android.net.wifi.WifiManager.WpsCallback)>
<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)>
<android.net.wifi.WifiManager: void removeOnWifiUsabilityStatsListener(android.net.wifi.WifiManager.OnWifiUsabilityStatsListener)>
<android.net.wifi.WifiManager: boolean isEnhancedPowerReportingSupported()>
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>
<android.net.wifi.WifiManager: boolean removeNetwork(int)>
<android.net.wifi.WifiManager: boolean isDeviceToDeviceRttSupported()>
<android.net.wifi.WifiManager: int getWifiState()>
<android.net.wifi.WifiManager: void save(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager.ActionListener)>
<android.net.wifi.WifiManager: boolean startScan()>
<android.net.wifi.WifiManager: java.util.Map getMatchingOsuProviders(java.util.List)>
<android.net.wifi.WifiManager: boolean pingSupplicant()>
<android.net.wifi.WifiManager: void disable(int,android.net.wifi.WifiManager.ActionListener)>
<android.net.wifi.WifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()>
<android.net.wifi.WifiManager: boolean isEasyConnectSupported()>
<android.net.wifi.WifiManager: java.util.List getAllMatchingWifiConfigs(java.util.List)>
<android.net.wifi.WifiManager: boolean isScanAlwaysAvailable()>
<android.net.wifi.WifiManager: boolean isWifiApEnabled()>
<android.net.wifi.WifiManager: boolean isWpa3SuiteBSupported()>
<android.net.wifi.WifiManager: boolean isP2pSupported()>
<android.net.wifi.WifiManager: boolean isWifiEnabled()>
<android.net.wifi.WifiManager: boolean reconnect()>
<android.net.wifi.WifiManager: java.util.List getPrivilegedConfiguredNetworks()>
<android.net.wifi.WifiManager: java.util.List getPasspointConfigurations()>
<android.net.wifi.WifiManager: void startSubscriptionProvisioning(android.net.wifi.hotspot2.OsuProvider,java.util.concurrent.Executor,android.net.wifi.hotspot2.ProvisioningCallback)>
<android.net.wifi.WifiManager: boolean isWpa3SaeSupported()>
<android.net.wifi.WifiManager: java.util.Map getMatchingPasspointConfigsForOsuProviders(java.util.Set)>
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>
<android.net.wifi.WifiManager: java.util.List getScanResults()>
<android.net.wifi.WifiManager: void connect(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager.ActionListener)>
<android.net.wifi.WifiManager: void forget(int,android.net.wifi.WifiManager.ActionListener)>
<android.net.wifi.WifiManager: void removePasspointConfiguration(java.lang.String)>
<android.net.wifi.WifiManager: void setDeviceMobilityState(int)>
<android.net.wifi.WifiManager: boolean reassociate()>
<android.net.wifi.WifiManager: void connect(int,android.net.wifi.WifiManager.ActionListener)>
<android.net.wifi.WifiManager: void updateWifiUsabilityScore(int,int,int)>
<android.net.wifi.WifiManager: void startLocalOnlyHotspot(android.net.wifi.WifiManager.LocalOnlyHotspotCallback,android.os.Handler)>
<android.net.wifi.WifiManager: boolean isPortableHotspotSupported()>
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()>
<android.net.wifi.WifiManager: int calculateSignalLevel(int,int)>
<android.net.wifi.WifiManager: void setTdlsEnabled(java.net.InetAddress,boolean)>
<android.net.wifi.WifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)>
<android.net.wifi.WifiManager: void startWps(android.net.wifi.WpsInfo,android.net.wifi.WifiManager.WpsCallback)>
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>
<android.net.wifi.WifiManager: int removeNetworkSuggestions(java.util.List)>
<android.net.wifi.WifiManager: android.net.wifi.WifiManager.MulticastLock createMulticastLock(java.lang.String)>
<android.net.wifi.WifiManager: boolean saveConfiguration()>
<android.widget.CursorTreeAdapter: void changeCursor(android.database.Cursor)>
<android.widget.CursorTreeAdapter: android.database.Cursor getChildrenCursor(android.database.Cursor)>
<android.widget.CursorTreeAdapter: android.view.View newChildView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>
<android.widget.CursorTreeAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,boolean)>
<android.widget.CursorTreeAdapter: android.database.Cursor getGroup(int)>
<android.widget.CursorTreeAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.CursorTreeAdapter: void setFilterQueryProvider(android.widget.FilterQueryProvider)>
<android.widget.CursorTreeAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.CursorTreeAdapter: void setChildrenCursor(int,android.database.Cursor)>
<android.widget.CursorTreeAdapter: int getGroupCount()>
<android.widget.CursorTreeAdapter: int getChildrenCount(int)>
<android.widget.CursorTreeAdapter: android.database.Cursor getChild(int,int)>
<android.widget.CursorTreeAdapter: android.database.Cursor getCursor()>
<android.widget.CursorTreeAdapter: void notifyDataSetChanged(boolean)>
<android.widget.CursorTreeAdapter: long getChildId(int,int)>
<android.widget.CursorTreeAdapter: void <init>(android.database.Cursor,android.content.Context)>
<android.widget.CursorTreeAdapter: void <init>(android.database.Cursor,android.content.Context,boolean)>
<android.widget.CursorTreeAdapter: java.lang.String convertToString(android.database.Cursor)>
<android.widget.CursorTreeAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor,boolean)>
<android.widget.CursorTreeAdapter: long getGroupId(int)>
<android.widget.CursorTreeAdapter: android.database.Cursor runQueryOnBackgroundThread(CharSequence)>
<android.widget.CursorTreeAdapter: android.view.View newGroupView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>
<android.widget.CursorTreeAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()>
<android.widget.CursorTreeAdapter: boolean hasStableIds()>
<android.widget.CursorTreeAdapter: boolean isChildSelectable(int,int)>
<android.widget.CursorTreeAdapter: void setGroupCursor(android.database.Cursor)>
<android.widget.CursorTreeAdapter: android.widget.Filter getFilter()>
<android.service.autofill.SaveInfo.Builder: android.service.autofill.SaveInfo.Builder setValidator(android.service.autofill.Validator)>
<android.service.autofill.SaveInfo.Builder: void <init>(int,android.view.autofill.AutofillId[])>
<android.service.autofill.SaveInfo.Builder: android.service.autofill.SaveInfo.Builder setDescription(CharSequence)>
<android.service.autofill.SaveInfo.Builder: android.service.autofill.SaveInfo.Builder setNegativeAction(int,android.content.IntentSender)>
<android.service.autofill.SaveInfo.Builder: android.service.autofill.SaveInfo.Builder setTriggerId(android.view.autofill.AutofillId)>
<android.service.autofill.SaveInfo.Builder: android.service.autofill.SaveInfo.Builder addSanitizer(android.service.autofill.Sanitizer,android.view.autofill.AutofillId...)>
<android.service.autofill.SaveInfo.Builder: void <init>(int)>
<android.service.autofill.SaveInfo.Builder: android.service.autofill.SaveInfo.Builder setCustomDescription(android.service.autofill.CustomDescription)>
<android.service.autofill.SaveInfo.Builder: android.service.autofill.SaveInfo build()>
<android.service.autofill.SaveInfo.Builder: android.service.autofill.SaveInfo.Builder setFlags(int)>
<android.service.autofill.SaveInfo.Builder: android.service.autofill.SaveInfo.Builder setOptionalIds(android.view.autofill.AutofillId[])>
<java.nio.file.Paths: java.nio.file.Path get(java.net.URI)>
<java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String...)>
<android.media.tv.TvContract.Channels: java.lang.String getVideoResolution(java.lang.String)>
<android.hardware.camera2.CameraDevice: void createCaptureSession(android.hardware.camera2.params.SessionConfiguration)>
<android.hardware.camera2.CameraDevice: void createCaptureSession(java.util.List,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)>
<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest.Builder createCaptureRequest(int)>
<android.hardware.camera2.CameraDevice: boolean isSessionConfigurationSupported(android.hardware.camera2.params.SessionConfiguration)>
<android.hardware.camera2.CameraDevice: void close()>
<android.hardware.camera2.CameraDevice: java.lang.String getId()>
<android.hardware.camera2.CameraDevice: void createCaptureSessionByOutputConfigurations(java.util.List,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)>
<android.hardware.camera2.CameraDevice: void createReprocessableCaptureSession(android.hardware.camera2.params.InputConfiguration,java.util.List,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)>
<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest.Builder createCaptureRequest(int,java.util.Set)>
<android.hardware.camera2.CameraDevice: void createConstrainedHighSpeedCaptureSession(java.util.List,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)>
<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest.Builder createReprocessCaptureRequest(android.hardware.camera2.TotalCaptureResult)>
<android.hardware.camera2.CameraDevice: void createCustomCaptureSession(android.hardware.camera2.params.InputConfiguration,java.util.List,int,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)>
<android.hardware.camera2.CameraDevice: void createReprocessableCaptureSessionByConfigurations(android.hardware.camera2.params.InputConfiguration,java.util.List,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)>
<android.text.BidiFormatter: android.text.BidiFormatter getInstance(boolean)>
<android.text.BidiFormatter: boolean isRtl(java.lang.String)>
<android.text.BidiFormatter: java.lang.String unicodeWrap(java.lang.String,android.text.TextDirectionHeuristic,boolean)>
<android.text.BidiFormatter: android.text.BidiFormatter getInstance(java.util.Locale)>
<android.text.BidiFormatter: boolean getStereoReset()>
<android.text.BidiFormatter: boolean isRtl(CharSequence)>
<android.text.BidiFormatter: CharSequence unicodeWrap(CharSequence,boolean)>
<android.text.BidiFormatter: java.lang.String unicodeWrap(java.lang.String)>
<android.text.BidiFormatter: CharSequence unicodeWrap(CharSequence,android.text.TextDirectionHeuristic)>
<android.text.BidiFormatter: boolean isRtlContext()>
<android.text.BidiFormatter: CharSequence unicodeWrap(CharSequence,android.text.TextDirectionHeuristic,boolean)>
<android.text.BidiFormatter: java.lang.String unicodeWrap(java.lang.String,android.text.TextDirectionHeuristic)>
<android.text.BidiFormatter: CharSequence unicodeWrap(CharSequence)>
<android.text.BidiFormatter: java.lang.String unicodeWrap(java.lang.String,boolean)>
<android.text.BidiFormatter: android.text.BidiFormatter getInstance()>
<android.telephony.ims.stub.ImsEcbmImplBase: void enteredEcbm()>
<android.telephony.ims.stub.ImsEcbmImplBase: void exitEmergencyCallbackMode()>
<android.telephony.ims.stub.ImsEcbmImplBase: void <init>()>
<android.telephony.ims.stub.ImsEcbmImplBase: void exitedEcbm()>
<android.transition.AutoTransition: void <init>()>
<android.transition.AutoTransition: void <init>(android.content.Context,android.util.AttributeSet)>
<java.io.BufferedReader: java.util.stream.Stream lines()>
<java.io.BufferedReader: java.lang.String readLine()>
<java.io.BufferedReader: void <init>(java.io.Reader,int)>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.io.BufferedReader: int read(char[],int,int)>
<java.io.BufferedReader: void close()>
<android.telephony.cdma.CdmaCellLocation: void fillInNotifierBundle(android.os.Bundle)>
<android.telephony.cdma.CdmaCellLocation: double convertQuartSecToDecDegrees(int)>
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()>
<android.telephony.cdma.CdmaCellLocation: void setStateInvalid()>
<android.telephony.cdma.CdmaCellLocation: void <init>()>
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()>
<android.telephony.cdma.CdmaCellLocation: int getSystemId()>
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()>
<android.telephony.cdma.CdmaCellLocation: void setCellLocationData(int,int,int,int,int)>
<android.telephony.cdma.CdmaCellLocation: void <init>(android.os.Bundle)>
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()>
<android.telephony.cdma.CdmaCellLocation: void setCellLocationData(int,int,int)>
<android.telephony.ims.feature.ImsFeature: void onFeatureRemoved()>
<android.telephony.ims.feature.ImsFeature: void setFeatureState(int)>
<android.telephony.ims.feature.ImsFeature: void changeEnabledCapabilities(android.telephony.ims.feature.CapabilityChangeRequest,android.telephony.ims.feature.ImsFeature.CapabilityCallbackProxy)>
<android.telephony.ims.feature.ImsFeature: void <init>()>
<android.telephony.ims.feature.ImsFeature: void onFeatureReady()>
<android.app.usage.UsageEvents: boolean getNextEvent(android.app.usage.UsageEvents.Event)>
<android.app.usage.UsageEvents: void writeToParcel(android.os.Parcel,int)>
<android.app.usage.UsageEvents: int describeContents()>
<android.app.usage.UsageEvents: boolean hasNextEvent()>
<android.view.SurfaceView: boolean gatherTransparentRegion(android.graphics.Region)>
<android.view.SurfaceView: android.view.SurfaceControl getSurfaceControl()>
<android.view.SurfaceView: void setZOrderOnTop(boolean)>
<android.view.SurfaceView: void <init>(android.content.Context)>
<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.view.SurfaceView: void setZOrderMediaOverlay(boolean)>
<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>
<android.view.SurfaceView: void setSecure(boolean)>
<java.util.zip.Inflater: int getAdler()>
<java.util.zip.Inflater: int inflate(byte[],int,int)>
<java.util.zip.Inflater: boolean needsInput()>
<java.util.zip.Inflater: void finalize()>
<java.util.zip.Inflater: boolean needsDictionary()>
<java.util.zip.Inflater: long getBytesRead()>
<java.util.zip.Inflater: int getRemaining()>
<java.util.zip.Inflater: void reset()>
<java.util.zip.Inflater: void <init>()>
<java.util.zip.Inflater: int inflate(byte[])>
<java.util.zip.Inflater: int getTotalOut()>
<java.util.zip.Inflater: void setInput(byte[])>
<java.util.zip.Inflater: void setDictionary(byte[])>
<java.util.zip.Inflater: void setInput(byte[],int,int)>
<java.util.zip.Inflater: boolean finished()>
<java.util.zip.Inflater: void setDictionary(byte[],int,int)>
<java.util.zip.Inflater: int getTotalIn()>
<java.util.zip.Inflater: void end()>
<java.util.zip.Inflater: void <init>(boolean)>
<java.util.zip.Inflater: long getBytesWritten()>
<android.opengl.GLSurfaceView: void setEGLConfigChooser(android.opengl.GLSurfaceView.EGLConfigChooser)>
<android.opengl.GLSurfaceView: void setEGLContextClientVersion(int)>
<android.opengl.GLSurfaceView: int getDebugFlags()>
<android.opengl.GLSurfaceView: void setRenderMode(int)>
<android.opengl.GLSurfaceView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.opengl.GLSurfaceView: void setEGLConfigChooser(int,int,int,int,int,int)>
<android.opengl.GLSurfaceView: boolean getPreserveEGLContextOnPause()>
<android.opengl.GLSurfaceView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>
<android.opengl.GLSurfaceView: void setEGLConfigChooser(boolean)>
<android.opengl.GLSurfaceView: void onResume()>
<android.opengl.GLSurfaceView: void surfaceCreated(android.view.SurfaceHolder)>
<android.opengl.GLSurfaceView: void <init>(android.content.Context)>
<android.opengl.GLSurfaceView: void setPreserveEGLContextOnPause(boolean)>
<android.opengl.GLSurfaceView: void onPause()>
<android.opengl.GLSurfaceView: void surfaceDestroyed(android.view.SurfaceHolder)>
<android.opengl.GLSurfaceView: void setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView.EGLWindowSurfaceFactory)>
<android.opengl.GLSurfaceView: void setGLWrapper(android.opengl.GLSurfaceView.GLWrapper)>
<android.opengl.GLSurfaceView: int getRenderMode()>
<android.opengl.GLSurfaceView: void setRenderer(android.opengl.GLSurfaceView.Renderer)>
<android.opengl.GLSurfaceView: void queueEvent(Runnable)>
<android.opengl.GLSurfaceView: void setDebugFlags(int)>
<android.opengl.GLSurfaceView: void setEGLContextFactory(android.opengl.GLSurfaceView.EGLContextFactory)>
<android.opengl.GLSurfaceView: void surfaceRedrawNeeded(android.view.SurfaceHolder)>
<android.opengl.GLSurfaceView: void requestRender()>
<android.view.textclassifier.TextClassificationManager: void setTextClassificationSessionFactory(android.view.textclassifier.TextClassificationSessionFactory)>
<android.view.textclassifier.TextClassificationManager: android.view.textclassifier.TextClassifier getTextClassifier()>
<android.view.textclassifier.TextClassificationManager: void setTextClassifier(android.view.textclassifier.TextClassifier)>
<android.view.textclassifier.TextClassificationManager: android.view.textclassifier.TextClassifier createTextClassificationSession(android.view.textclassifier.TextClassificationContext)>
<android.text.style.UnderlineSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.UnderlineSpan: void <init>()>
<android.text.style.UnderlineSpan: void <init>(android.os.Parcel)>
<android.text.style.UnderlineSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.UnderlineSpan: int describeContents()>
<android.text.style.UnderlineSpan: int getSpanTypeId()>
<java.util.function.IntPredicate: java.util.function.IntPredicate and(java.util.function.IntPredicate)>
<java.util.function.IntPredicate: java.util.function.IntPredicate or(java.util.function.IntPredicate)>
<java.util.function.IntPredicate: boolean test(int)>
<java.util.function.IntPredicate: java.util.function.IntPredicate negate()>
<android.os.IBinder: java.lang.String getInterfaceDescriptor()>
<android.os.IBinder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])>
<android.os.IBinder: void linkToDeath(android.os.IBinder.DeathRecipient,int)>
<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder.DeathRecipient,int)>
<android.os.IBinder: boolean pingBinder()>
<android.os.IBinder: android.os.IInterface queryLocalInterface(java.lang.String)>
<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>
<android.os.IBinder: boolean isBinderAlive()>
<android.os.IBinder: void dump(java.io.FileDescriptor,java.lang.String[])>
<android.R.mipmap: void <init>()>
<android.drm.DrmConvertedStatus: void <init>(int,byte[],int)>
<android.content.om.OverlayInfo: java.lang.String getTargetOverlayableName()>
<android.content.om.OverlayInfo: java.lang.String getCategory()>
<android.content.om.OverlayInfo: java.lang.String getPackageName()>
<android.content.om.OverlayInfo: java.lang.String getTargetPackageName()>
<android.content.om.OverlayInfo: int getUserId()>
<android.content.om.OverlayInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.om.OverlayInfo: boolean isEnabled()>
<android.content.om.OverlayInfo: int describeContents()>
<android.graphics.text.MeasuredText.Builder: android.graphics.text.MeasuredText.Builder setComputeHyphenation(boolean)>
<android.graphics.text.MeasuredText.Builder: android.graphics.text.MeasuredText.Builder setComputeLayout(boolean)>
<android.graphics.text.MeasuredText.Builder: android.graphics.text.MeasuredText.Builder appendReplacementRun(android.graphics.Paint,int,@Pxfloat)>
<android.graphics.text.MeasuredText.Builder: android.graphics.text.MeasuredText build()>
<android.graphics.text.MeasuredText.Builder: void <init>(char[])>
<android.graphics.text.MeasuredText.Builder: android.graphics.text.MeasuredText.Builder appendStyleRun(android.graphics.Paint,int,boolean)>
<android.graphics.text.MeasuredText.Builder: void <init>(android.graphics.text.MeasuredText)>
<android.widget.SlidingDrawer.OnDrawerScrollListener: void onScrollEnded()>
<android.widget.SlidingDrawer.OnDrawerScrollListener: void onScrollStarted()>
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open(java.net.SocketAddress)>
<java.nio.channels.SocketChannel: java.net.Socket socket()>
<java.nio.channels.SocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>
<java.nio.channels.SocketChannel: boolean isConnected()>
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()>
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel shutdownInput()>
<java.nio.channels.SocketChannel: boolean isConnectionPending()>
<java.nio.channels.SocketChannel: boolean connect(java.net.SocketAddress)>
<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[])>
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])>
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel shutdownOutput()>
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel setOption(java.net.SocketOption,T)>
<java.nio.channels.SocketChannel: boolean finishConnect()>
<java.nio.channels.SocketChannel: java.net.SocketAddress getRemoteAddress()>
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel bind(java.net.SocketAddress)>
<java.nio.channels.SocketChannel: int validOps()>
<android.os.StrictMode.OnThreadViolationListener: void onThreadViolation(android.os.strictmode.Violation)>
<android.graphics.drawable.shapes.ArcShape: android.graphics.drawable.shapes.ArcShape clone()>
<android.graphics.drawable.shapes.ArcShape: float getStartAngle()>
<android.graphics.drawable.shapes.ArcShape: void <init>(float,float)>
<android.graphics.drawable.shapes.ArcShape: float getSweepAngle()>
<android.net.nsd.NsdManager.DiscoveryListener: void onServiceLost(android.net.nsd.NsdServiceInfo)>
<android.net.nsd.NsdManager.DiscoveryListener: void onServiceFound(android.net.nsd.NsdServiceInfo)>
<android.net.nsd.NsdManager.DiscoveryListener: void onStartDiscoveryFailed(java.lang.String,int)>
<android.net.nsd.NsdManager.DiscoveryListener: void onStopDiscoveryFailed(java.lang.String,int)>
<android.net.nsd.NsdManager.DiscoveryListener: void onDiscoveryStarted(java.lang.String)>
<android.net.nsd.NsdManager.DiscoveryListener: void onDiscoveryStopped(java.lang.String)>
<android.media.tv.TvInputInfo: android.media.tv.TvInputInfo createTvInputInfo(android.content.Context,android.content.pm.ResolveInfo,android.hardware.hdmi.HdmiDeviceInfo,java.lang.String,int,android.graphics.drawable.Icon)>
<android.media.tv.TvInputInfo: android.graphics.drawable.Drawable loadIcon(android.content.Context,int)>
<android.media.tv.TvInputInfo: java.lang.String getId()>
<android.media.tv.TvInputInfo: android.content.Intent createSettingsIntent()>
<android.media.tv.TvInputInfo: boolean canRecord()>
<android.media.tv.TvInputInfo: CharSequence loadLabel(android.content.Context)>
<android.media.tv.TvInputInfo: android.graphics.drawable.Drawable loadIcon(android.content.Context)>
<android.media.tv.TvInputInfo: int getType()>
<android.media.tv.TvInputInfo: android.media.tv.TvInputInfo createTvInputInfo(android.content.Context,android.content.pm.ResolveInfo,android.media.tv.TvInputHardwareInfo,int,android.graphics.drawable.Icon)>
<android.media.tv.TvInputInfo: android.os.Bundle getExtras()>
<android.media.tv.TvInputInfo: java.lang.String getParentId()>
<android.media.tv.TvInputInfo: boolean isHidden(android.content.Context)>
<android.media.tv.TvInputInfo: android.hardware.hdmi.HdmiDeviceInfo getHdmiDeviceInfo()>
<android.media.tv.TvInputInfo: android.content.pm.ServiceInfo getServiceInfo()>
<android.media.tv.TvInputInfo: boolean isHardwareInput()>
<android.media.tv.TvInputInfo: android.media.tv.TvInputInfo createTvInputInfo(android.content.Context,android.content.pm.ResolveInfo,android.hardware.hdmi.HdmiDeviceInfo,java.lang.String,java.lang.String,android.net.Uri)>
<android.media.tv.TvInputInfo: boolean isConnectedToHdmiSwitch()>
<android.media.tv.TvInputInfo: android.content.Intent createSetupIntent()>
<android.media.tv.TvInputInfo: android.media.tv.TvInputInfo createTvInputInfo(android.content.Context,android.content.pm.ResolveInfo,android.media.tv.TvInputHardwareInfo,java.lang.String,android.net.Uri)>
<android.media.tv.TvInputInfo: int getTunerCount()>
<android.media.tv.TvInputInfo: CharSequence loadCustomLabel(android.content.Context)>
<android.media.tv.TvInputInfo: boolean isPassthroughInput()>
<android.media.tv.TvInputInfo: int describeContents()>
<android.media.tv.TvInputInfo: void writeToParcel(android.os.Parcel,int)>
<android.renderscript.ScriptIntrinsicBlur: android.renderscript.ScriptIntrinsicBlur create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicBlur: void forEach(android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlur: void setRadius(float)>
<android.renderscript.ScriptIntrinsicBlur: android.renderscript.Script.KernelID getKernelID()>
<android.renderscript.ScriptIntrinsicBlur: void setInput(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlur: android.renderscript.Script.FieldID getFieldID_Input()>
<android.renderscript.ScriptIntrinsicBlur: void forEach(android.renderscript.Allocation)>
<android.service.wallpaper.WallpaperService: android.service.wallpaper.WallpaperService.Engine onCreateEngine()>
<android.service.wallpaper.WallpaperService: android.os.IBinder onBind(android.content.Intent)>
<android.service.wallpaper.WallpaperService: void <init>()>
<android.media.audiofx.PresetReverb: void <init>(int,int)>
<android.media.audiofx.PresetReverb: android.media.audiofx.PresetReverb.Settings getProperties()>
<android.media.audiofx.PresetReverb: void setParameterListener(android.media.audiofx.PresetReverb.OnParameterChangeListener)>
<android.media.audiofx.PresetReverb: short getPreset()>
<android.media.audiofx.PresetReverb: void setPreset(short)>
<android.media.audiofx.PresetReverb: void setProperties(android.media.audiofx.PresetReverb.Settings)>
<android.database.sqlite.SQLiteDatabase.CursorFactory: android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)>
<android.nfc.tech.MifareClassic: void increment(int,int)>
<android.nfc.tech.MifareClassic: boolean isConnected()>
<android.nfc.tech.MifareClassic: void setTimeout(int)>
<android.nfc.tech.MifareClassic: void transfer(int)>
<android.nfc.tech.MifareClassic: void connect()>
<android.nfc.tech.MifareClassic: android.nfc.tech.MifareClassic get(android.nfc.Tag)>
<android.nfc.tech.MifareClassic: int getTimeout()>
<android.nfc.tech.MifareClassic: int blockToSector(int)>
<android.nfc.tech.MifareClassic: void close()>
<android.nfc.tech.MifareClassic: int getType()>
<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyB(int,byte[])>
<android.nfc.tech.MifareClassic: void decrement(int,int)>
<android.nfc.tech.MifareClassic: int getSectorCount()>
<android.nfc.tech.MifareClassic: int getMaxTransceiveLength()>
<android.nfc.tech.MifareClassic: void restore(int)>
<android.nfc.tech.MifareClassic: int getBlockCountInSector(int)>
<android.nfc.tech.MifareClassic: void writeBlock(int,byte[])>
<android.nfc.tech.MifareClassic: int getSize()>
<android.nfc.tech.MifareClassic: android.nfc.Tag getTag()>
<android.nfc.tech.MifareClassic: int getBlockCount()>
<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyA(int,byte[])>
<android.nfc.tech.MifareClassic: byte[] readBlock(int)>
<android.nfc.tech.MifareClassic: int sectorToBlock(int)>
<android.nfc.tech.MifareClassic: byte[] transceive(byte[])>
<android.telephony.NeighboringCellInfo: int describeContents()>
<android.telephony.NeighboringCellInfo: int getCid()>
<android.telephony.NeighboringCellInfo: void setRssi(int)>
<android.telephony.NeighboringCellInfo: void <init>(android.os.Parcel)>
<android.telephony.NeighboringCellInfo: int getLac()>
<android.telephony.NeighboringCellInfo: int getPsc()>
<android.telephony.NeighboringCellInfo: void <init>(int,String,int)>
<android.telephony.NeighboringCellInfo: void <init>()>
<android.telephony.NeighboringCellInfo: int getNetworkType()>
<android.telephony.NeighboringCellInfo: void <init>(int,int)>
<android.telephony.NeighboringCellInfo: void setCid(int)>
<android.telephony.NeighboringCellInfo: int getRssi()>
<android.telephony.NeighboringCellInfo: void writeToParcel(android.os.Parcel,int)>
<android.os.HwBinder: void transact(int,android.os.HwParcel,android.os.HwParcel,int)>
<android.os.HwBinder: void <init>()>
<android.os.HwBinder: void onTransact(int,android.os.HwParcel,android.os.HwParcel,int)>
<android.os.HwBinder: void enableInstrumentation()>
<android.os.HwBinder: android.os.IHwBinder getService(java.lang.String,java.lang.String,boolean)>
<android.os.HwBinder: void registerService(java.lang.String)>
<android.os.HwBinder: void configureRpcThreadpool(long,boolean)>
<android.os.HwBinder: android.os.IHwBinder getService(java.lang.String,java.lang.String)>
<android.os.HwBinder: void joinRpcThreadpool()>
<android.animation.TypeConverter: V convert(T)>
<android.animation.TypeConverter: void <init>(Class,Class)>
<android.graphics.ImageDecoder.DecodeException: int getError()>
<android.graphics.ImageDecoder.DecodeException: android.graphics.ImageDecoder.Source getSource()>
<android.content.rollback.PackageRollbackInfo: android.content.pm.VersionedPackage getVersionRolledBackFrom()>
<android.content.rollback.PackageRollbackInfo: int describeContents()>
<android.content.rollback.PackageRollbackInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.rollback.PackageRollbackInfo: java.lang.String getPackageName()>
<android.content.rollback.PackageRollbackInfo: android.content.pm.VersionedPackage getVersionRolledBackTo()>
<android.icu.util.GregorianCalendar: void <init>(int,int,int,int,int)>
<android.icu.util.GregorianCalendar: int handleComputeMonthStart(int,int,boolean)>
<android.icu.util.GregorianCalendar: int handleGetExtendedYear()>
<android.icu.util.GregorianCalendar: void <init>(android.icu.util.ULocale)>
<android.icu.util.GregorianCalendar: void <init>(android.icu.util.TimeZone,android.icu.util.ULocale)>
<android.icu.util.GregorianCalendar: void <init>(android.icu.util.TimeZone)>
<android.icu.util.GregorianCalendar: void <init>(int,int,int,int,int,int)>
<android.icu.util.GregorianCalendar: int handleGetLimit(int,int)>
<android.icu.util.GregorianCalendar: java.util.Date getGregorianChange()>
<android.icu.util.GregorianCalendar: void <init>(java.util.Locale)>
<android.icu.util.GregorianCalendar: void <init>(android.icu.util.TimeZone,java.util.Locale)>
<android.icu.util.GregorianCalendar: void setGregorianChange(java.util.Date)>
<android.icu.util.GregorianCalendar: void <init>(int,int,int)>
<android.icu.util.GregorianCalendar: boolean isLeapYear(int)>
<android.icu.util.GregorianCalendar: void <init>()>
<android.hardware.hdmi.HdmiPlaybackClient: void oneTouchPlay(android.hardware.hdmi.HdmiPlaybackClient.OneTouchPlayCallback)>
<android.hardware.hdmi.HdmiPlaybackClient: void sendStandby()>
<android.hardware.hdmi.HdmiPlaybackClient: void queryDisplayStatus(android.hardware.hdmi.HdmiPlaybackClient.DisplayStatusCallback)>
<android.hardware.hdmi.HdmiPlaybackClient: int getDeviceType()>
<android.telephony.data.QualifiedNetworksService.NetworkAvailabilityProvider: void <init>(int)>
<android.telephony.data.QualifiedNetworksService.NetworkAvailabilityProvider: void updateQualifiedNetworkTypes(int,java.util.List)>
<android.telephony.data.QualifiedNetworksService.NetworkAvailabilityProvider: void close()>
<android.telephony.data.QualifiedNetworksService.NetworkAvailabilityProvider: int getSlotIndex()>
<android.bluetooth.BluetoothProfile.ServiceListener: void onServiceDisconnected(int)>
<android.bluetooth.BluetoothProfile.ServiceListener: void onServiceConnected(int,android.bluetooth.BluetoothProfile)>
<android.content.Context: android.content.Context createCredentialProtectedStorageContext()>
<android.content.Context: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>
<android.content.Context: int getWallpaperDesiredMinimumWidth()>
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>
<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String,android.os.Bundle)>
<android.content.Context: int checkUriPermission(android.net.Uri,int,int,int)>
<android.content.Context: boolean bindService(@RequiresPermissionandroid.content.Intent,int,java.util.concurrent.Executor,android.content.ServiceConnection)>
<android.content.Context: void setWallpaper(android.graphics.Bitmap)>
<android.content.Context: java.io.File getDir(java.lang.String,int)>
<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>
<android.content.Context: java.io.File getExternalFilesDir(java.lang.String)>
<android.content.Context: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>
<android.content.Context: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>
<android.content.Context: void sendStickyOrderedBroadcastAsUser(@RequiresPermissionandroid.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.Context: boolean isDeviceProtectedStorage()>
<android.content.Context: void sendStickyOrderedBroadcast(@RequiresPermissionandroid.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.Context: int getDisplayId()>
<android.content.Context: android.os.UserHandle getUser()>
<android.content.Context: int checkSelfPermission(java.lang.String)>
<android.content.Context: java.lang.String[] databaseList()>
<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
<android.content.Context: void removeStickyBroadcastAsUser(@RequiresPermissionandroid.content.Intent,android.os.UserHandle)>
<android.content.Context: java.lang.String getOpPackageName()>
<android.content.Context: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>
<android.content.Context: android.os.Looper getMainLooper()>
<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase.CursorFactory)>
<android.content.Context: int getColor(@ColorResint)>
<android.content.Context: java.lang.String getPackageName()>
<android.content.Context: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>
<android.content.Context: boolean deleteSharedPreferences(java.lang.String)>
<android.content.Context: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>
<android.content.Context: android.content.Context getApplicationContext()>
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>
<android.content.Context: void sendOrderedBroadcast(@RequiresPermissionandroid.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,@StyleableResint[],@AttrResint,@StyleResint)>
<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>
<android.content.Context: void startActivities(@RequiresPermissionandroid.content.Intent[],android.os.Bundle)>
<android.content.Context: void startActivity(@RequiresPermissionandroid.content.Intent)>
<android.content.Context: T getSystemService(java.lang.Class)>
<android.content.Context: void sendOrderedBroadcastAsUser(@RequiresPermissionandroid.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>
<android.content.Context: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>
<android.content.Context: boolean bindIsolatedService(@RequiresPermissionandroid.content.Intent,int,java.lang.String,java.util.concurrent.Executor,android.content.ServiceConnection)>
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>
<android.content.Context: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>
<android.content.Context: int checkCallingUriPermission(android.net.Uri,int)>
<android.content.Context: android.graphics.drawable.Drawable peekWallpaper()>
<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>
<android.content.Context: java.lang.Object getSystemService(java.lang.String)>
<android.content.Context: boolean stopService(android.content.Intent)>
<android.content.Context: java.io.File[] getExternalFilesDirs(java.lang.String)>
<android.content.Context: java.lang.String getString(@StringResint)>
<android.content.Context: java.io.File getObbDir()>
<android.content.Context: android.view.Display getDisplay()>
<android.content.Context: java.io.File getCacheDir()>
<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.content.Context: java.io.File getDatabasePath(java.lang.String)>
<android.content.Context: int checkPermission(java.lang.String,int,int)>
<android.content.Context: java.io.File getNoBackupFilesDir()>
<android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>
<android.content.Context: android.content.Context createDisplayContext(android.view.Display)>
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)>
<android.content.Context: boolean isCredentialProtectedStorage()>
<android.content.Context: android.content.res.Resources.Theme getTheme()>
<android.content.Context: int checkCallingPermission(java.lang.String)>
<android.content.Context: android.content.res.AssetManager getAssets()>
<android.content.Context: java.lang.ClassLoader getClassLoader()>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,@StyleableResint[])>
<android.content.Context: android.graphics.drawable.Drawable getDrawable(@DrawableResint)>
<android.content.Context: java.io.File getDataDir()>
<android.content.Context: java.io.File[] getExternalMediaDirs()>
<android.content.Context: void setContentCaptureOptions(android.content.ContentCaptureOptions)>
<android.content.Context: void setAutofillOptions(android.content.AutofillOptions)>
<android.content.Context: java.io.File getCodeCacheDir()>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(@StyleResint,@StyleableResint[])>
<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>
<android.content.Context: void clearWallpaper()>
<android.content.Context: void sendBroadcast(@RequiresPermissionandroid.content.Intent,java.lang.String)>
<android.content.Context: void unbindService(android.content.ServiceConnection)>
<android.content.Context: java.lang.String getPackageResourcePath()>
<android.content.Context: java.lang.String getString(@StringResint,java.lang.Object...)>
<android.content.Context: int getWallpaperDesiredMinimumHeight()>
<android.content.Context: void sendOrderedBroadcast(@RequiresPermissionandroid.content.Intent,java.lang.String)>
<android.content.Context: void sendBroadcastAsUser(@RequiresPermissionandroid.content.Intent,android.os.UserHandle,java.lang.String,android.os.Bundle)>
<android.content.Context: android.content.ComponentName startService(android.content.Intent)>
<android.content.Context: void registerComponentCallbacks(android.content.ComponentCallbacks)>
<android.content.Context: void revokeUriPermission(android.net.Uri,int)>
<android.content.Context: boolean moveSharedPreferencesFrom(android.content.Context,java.lang.String)>
<android.content.Context: boolean deleteFile(java.lang.String)>
<android.content.Context: void setTheme(@StyleResint)>
<android.content.Context: android.graphics.drawable.Drawable getWallpaper()>
<android.content.Context: void sendBroadcast(@RequiresPermissionandroid.content.Intent)>
<android.content.Context: android.content.Context createConfigurationContext(android.content.res.Configuration)>
<android.content.Context: void sendBroadcastAsUser(@RequiresPermissionandroid.content.Intent,android.os.UserHandle,java.lang.String)>
<android.content.Context: java.lang.String[] fileList()>
<android.content.Context: android.content.res.Resources getResources()>
<android.content.Context: android.content.pm.PackageManager getPackageManager()>
<android.content.Context: CharSequence getText(@StringResint)>
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<android.content.Context: java.io.File[] getExternalCacheDirs()>
<android.content.Context: android.content.ContentResolver getContentResolver()>
<android.content.Context: void sendStickyBroadcastAsUser(@RequiresPermissionandroid.content.Intent,android.os.UserHandle)>
<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>
<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase.CursorFactory,android.database.DatabaseErrorHandler)>
<android.content.Context: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>
<android.content.Context: int checkCallingOrSelfUriPermission(android.net.Uri,int)>
<android.content.Context: android.content.Context createContextForSplit(java.lang.String)>
<android.content.Context: void sendStickyBroadcast(@RequiresPermissionandroid.content.Intent)>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(@StyleableResint[])>
<android.content.Context: void enforcePermission(java.lang.String,int,int,java.lang.String)>
<android.content.Context: void removeStickyBroadcast(@RequiresPermissionandroid.content.Intent)>
<android.content.Context: void startActivities(@RequiresPermissionandroid.content.Intent[])>
<android.content.Context: java.io.File[] getObbDirs()>
<android.content.Context: boolean bindServiceAsUser(@RequiresPermissionandroid.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>
<android.content.Context: java.lang.String getSystemServiceName(java.lang.Class)>
<android.content.Context: boolean deleteDatabase(java.lang.String)>
<android.content.Context: void startActivity(@RequiresPermissionandroid.content.Intent,android.os.Bundle)>
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.Context: void <init>()>
<android.content.Context: java.io.File getFilesDir()>
<android.content.Context: java.lang.String getPackageCodePath()>
<android.content.Context: java.io.File getExternalCacheDir()>
<android.content.Context: int getUserId()>
<android.content.Context: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>
<android.content.Context: android.content.res.ColorStateList getColorStateList(@ColorResint)>
<android.content.Context: java.io.File getPreloadsFileCache()>
<android.content.Context: void updateServiceGroup(android.content.ServiceConnection,int,int)>
<android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
<android.content.Context: boolean moveDatabaseFrom(android.content.Context,java.lang.String)>
<android.content.Context: boolean bindService(@RequiresPermissionandroid.content.Intent,android.content.ServiceConnection,int)>
<android.content.Context: void setWallpaper(java.io.InputStream)>
<android.content.Context: void revokeUriPermission(java.lang.String,android.net.Uri,int)>
<android.content.Context: java.util.concurrent.Executor getMainExecutor()>
<android.content.Context: boolean isRestricted()>
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,int)>
<android.content.Context: void startActivityAsUser(@RequiresPermissionandroid.content.Intent,android.os.UserHandle)>
<android.content.Context: void sendBroadcastAsUser(@RequiresPermissionandroid.content.Intent,android.os.UserHandle)>
<java.net.SocketOptions: java.lang.Object getOption(int)>
<java.net.SocketOptions: void setOption(int,java.lang.Object)>
<android.view.textclassifier.TextClassifierEvent.TextLinkifyEvent.Builder: android.view.textclassifier.TextClassifierEvent.TextLinkifyEvent build()>
<android.view.textclassifier.TextClassifierEvent.TextLinkifyEvent.Builder: void <init>(int)>
<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate dateNow(java.time.Clock)>
<java.time.chrono.HijrahChronology: java.lang.String getCalendarType()>
<java.time.chrono.HijrahChronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>
<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate date(java.time.chrono.Era,int,int,int)>
<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate date(int,int,int)>
<java.time.chrono.HijrahChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>
<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate dateEpochDay(long)>
<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate date(java.time.temporal.TemporalAccessor)>
<java.time.chrono.HijrahChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>
<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate dateYearDay(java.time.chrono.Era,int,int)>
<java.time.chrono.HijrahChronology: java.time.chrono.HijrahEra eraOf(int)>
<java.time.chrono.HijrahChronology: boolean isLeapYear(long)>
<java.time.chrono.HijrahChronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>
<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate dateNow()>
<java.time.chrono.HijrahChronology: int prolepticYear(java.time.chrono.Era,int)>
<java.time.chrono.HijrahChronology: java.util.List eras()>
<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>
<java.time.chrono.HijrahChronology: java.lang.String getId()>
<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate dateYearDay(int,int)>
<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate dateNow(java.time.ZoneId)>
<android.provider.SearchIndexablesContract: void <init>()>
<android.hardware.hdmi.HdmiPlaybackClient.OneTouchPlayCallback: void onComplete(int)>
<java.security.interfaces.RSAPrivateCrtKey extends java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrimeExponentP()>
<java.security.interfaces.RSAPrivateCrtKey extends java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrimeExponentQ()>
<java.security.interfaces.RSAPrivateCrtKey extends java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrimeP()>
<java.security.interfaces.RSAPrivateCrtKey extends java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPublicExponent()>
<java.security.interfaces.RSAPrivateCrtKey extends java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrimeQ()>
<java.security.interfaces.RSAPrivateCrtKey extends java.security.interfaces.RSAPrivateKey: java.math.BigInteger getCrtCoefficient()>
<android.media.NotProvisionedException: void <init>(String)>
<android.printservice.recommendation.RecommendationInfo: java.util.List getDiscoveredPrinters()>
<android.printservice.recommendation.RecommendationInfo: CharSequence getName()>
<android.printservice.recommendation.RecommendationInfo: void writeToParcel(android.os.Parcel,int)>
<android.printservice.recommendation.RecommendationInfo: void <init>(from=0) int,boolean)>
<android.printservice.recommendation.RecommendationInfo: void <init>(CharSequence,CharSequence,java.util.List,boolean)>
<android.printservice.recommendation.RecommendationInfo: boolean recommendsMultiVendorService()>
<android.printservice.recommendation.RecommendationInfo: int getNumDiscoveredPrinters()>
<android.printservice.recommendation.RecommendationInfo: int describeContents()>
<android.printservice.recommendation.RecommendationInfo: CharSequence getPackageName()>
<javax.xml.transform.ErrorListener: void warning(javax.xml.transform.TransformerException)>
<javax.xml.transform.ErrorListener: void error(javax.xml.transform.TransformerException)>
<javax.xml.transform.ErrorListener: void fatalError(javax.xml.transform.TransformerException)>
<android.telephony.ims.feature.CapabilityChangeRequest: java.util.List getCapabilitiesToEnable()>
<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToEnableForTech(@android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.MmTelCapabilityint,int)>
<android.telephony.ims.feature.CapabilityChangeRequest: java.util.List getCapabilitiesToDisable()>
<android.telephony.ims.feature.CapabilityChangeRequest: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToDisableForTech(@android.telephony.ims.feature.MmTelFeature.MmTelCapabilities.MmTelCapabilityint,int)>
<android.telephony.ims.feature.CapabilityChangeRequest: int describeContents()>
<android.bluetooth.BluetoothHidDevice: boolean connect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHidDevice: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHidDevice: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothHidDevice: boolean reportError(android.bluetooth.BluetoothDevice,byte)>
<android.bluetooth.BluetoothHidDevice: boolean replyReport(android.bluetooth.BluetoothDevice,byte,byte,byte[])>
<android.bluetooth.BluetoothHidDevice: boolean sendReport(android.bluetooth.BluetoothDevice,int,byte[])>
<android.bluetooth.BluetoothHidDevice: boolean unregisterApp()>
<android.bluetooth.BluetoothHidDevice: boolean disconnect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHidDevice: boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,java.util.concurrent.Executor,android.bluetooth.BluetoothHidDevice.Callback)>
<android.bluetooth.BluetoothHidDevice: java.util.List getDevicesMatchingConnectionStates(int[])>
<java.lang.Iterable: void forEach(java.util.function.Consumer)>
<java.lang.Iterable: java.util.Spliterator spliterator()>
<java.lang.Iterable: java.util.Iterator iterator()>
<android.view.animation.CycleInterpolator: float getInterpolation(float)>
<android.view.animation.CycleInterpolator: void <init>(float)>
<android.view.animation.CycleInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.nfc.NfcAdapter.CreateNdefMessageCallback: android.nfc.NdefMessage createNdefMessage(android.nfc.NfcEvent)>
<android.app.WindowConfiguration: int getActivityType()>
<android.app.WindowConfiguration: int getRotation()>
<android.app.WindowConfiguration: android.graphics.Rect getBounds()>
<android.app.WindowConfiguration: void setRotation(int)>
<android.app.WindowConfiguration: void setTo(android.app.WindowConfiguration)>
<android.app.WindowConfiguration: int describeContents()>
<android.app.WindowConfiguration: void setBounds(android.graphics.Rect)>
<android.app.WindowConfiguration: int compareTo(android.app.WindowConfiguration)>
<android.app.WindowConfiguration: void setActivityType(int)>
<android.app.WindowConfiguration: void setWindowingMode(int)>
<android.app.WindowConfiguration: void <init>()>
<android.app.WindowConfiguration: android.graphics.Rect getAppBounds()>
<android.app.WindowConfiguration: void setAppBounds(android.graphics.Rect)>
<android.app.WindowConfiguration: void writeToParcel(android.os.Parcel,int)>
<android.app.WindowConfiguration: int getWindowingMode()>
<android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: long getAccessibilityIdForRegion(android.graphics.Region)>
<android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: android.graphics.Region getRegionAt(int)>
<android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: android.view.accessibility.AccessibilityNodeInfo getTargetForRegion(android.graphics.Region)>
<android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: int getRegionCount()>
<android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: void <init>(java.util.Map)>
<android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo: int describeContents()>
<android.animation.Keyframe: boolean hasValue()>
<android.animation.Keyframe: android.animation.Keyframe ofFloat(float,float)>
<android.animation.Keyframe: android.animation.Keyframe ofObject(float,java.lang.Object)>
<android.animation.Keyframe: float getFraction()>
<android.animation.Keyframe: android.animation.Keyframe ofFloat(float)>
<android.animation.Keyframe: android.animation.Keyframe ofInt(float,int)>
<android.animation.Keyframe: android.animation.Keyframe ofObject(float)>
<android.animation.Keyframe: void <init>()>
<android.animation.Keyframe: void setInterpolator(android.animation.TimeInterpolator)>
<android.animation.Keyframe: android.animation.TimeInterpolator getInterpolator()>
<android.animation.Keyframe: android.animation.Keyframe ofInt(float)>
<android.animation.Keyframe: java.lang.Object getValue()>
<android.animation.Keyframe: void setValue(java.lang.Object)>
<android.animation.Keyframe: java.lang.Class getType()>
<android.animation.Keyframe: void setFraction(float)>
<android.animation.Keyframe: android.animation.Keyframe clone()>
<android.media.MediaCas.EventListener: void onEvent(android.media.MediaCas,int,int,byte[])>
<android.media.MediaCas.EventListener: void onSessionEvent(android.media.MediaCas,android.media.MediaCas.Session,int,int,byte[])>
<android.content.pm.LauncherApps.AppUsageLimit: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.LauncherApps.AppUsageLimit: int describeContents()>
<android.content.pm.LauncherApps.AppUsageLimit: long getUsageRemaining()>
<android.content.pm.LauncherApps.AppUsageLimit: long getTotalUsageLimit()>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
<android.graphics.drawable.Icon: android.net.Uri getUri()>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(android.content.Context,@DrawableResint)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithContentUri(java.lang.String)>
<android.graphics.drawable.Icon: int describeContents()>
<android.graphics.drawable.Icon: void loadDrawableAsync(android.content.Context,android.graphics.drawable.Icon.OnDrawableLoadedListener,android.os.Handler)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintList(android.content.res.ColorStateList)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithContentUri(android.net.Uri)>
<android.graphics.drawable.Icon: void writeToParcel(android.os.Parcel,int)>
<android.graphics.drawable.Icon: android.graphics.drawable.Drawable loadDrawable(android.content.Context)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintBlendMode(android.graphics.BlendMode)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithBitmap(android.graphics.Bitmap)>
<android.graphics.drawable.Icon: java.lang.String getResPackage()>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintMode(android.graphics.PorterDuff.Mode)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(java.lang.String,@DrawableResint)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithData(byte[],int,int)>
<android.graphics.drawable.Icon: int getType()>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithFilePath(java.lang.String)>
<android.graphics.drawable.Icon: int getResId()>
<android.graphics.drawable.Icon: void loadDrawableAsync(android.content.Context,android.os.Message)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTint(@ColorIntint)>
<java.lang.NoClassDefFoundError: void <init>()>
<java.lang.NoClassDefFoundError: void <init>(String)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getInputSizes(int)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: boolean isOutputSupportedFor(android.view.Surface)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: boolean isOutputSupportedFor(int)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoFpsRanges()>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getValidOutputFormatsForInput(int)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighResolutionOutputSizes(int)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getOutputSizes(int)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoSizes()>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputMinFrameDuration(java.lang.Class,android.util.Size)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputStallDuration(int,android.util.Size)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: int getRecommendedUseCase()>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoSizesFor(android.util.Range)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getOutputFormats()>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getInputFormats()>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputMinFrameDuration(int,android.util.Size)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getOutputSizes(java.lang.Class)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputStallDuration(java.lang.Class,android.util.Size)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoFpsRangesFor(android.util.Size)>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,short)>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,byte)>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,java.lang.Object)>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,char)>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,int)>
<java.io.ObjectOutputStream.PutField: void write(java.io.ObjectOutput)>
<java.io.ObjectOutputStream.PutField: void <init>()>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,double)>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,long)>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,float)>
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,boolean)>
<java.nio.channels.Pipe: void <init>()>
<java.nio.channels.Pipe: java.nio.channels.Pipe open()>
<java.nio.channels.Pipe: java.nio.channels.Pipe.SourceChannel source()>
<java.nio.channels.Pipe: java.nio.channels.Pipe.SinkChannel sink()>
<android.telecom.InCallService.VideoCall: void requestCameraCapabilities()>
<android.telecom.InCallService.VideoCall: void setPreviewSurface(android.view.Surface)>
<android.telecom.InCallService.VideoCall: void requestCallDataUsage()>
<android.telecom.InCallService.VideoCall: void sendSessionModifyRequest(android.telecom.VideoProfile)>
<android.telecom.InCallService.VideoCall: void registerCallback(android.telecom.InCallService.VideoCall.Callback,android.os.Handler)>
<android.telecom.InCallService.VideoCall: void setDeviceOrientation(int)>
<android.telecom.InCallService.VideoCall: void sendSessionModifyResponse(android.telecom.VideoProfile)>
<android.telecom.InCallService.VideoCall: void setPauseImage(android.net.Uri)>
<android.telecom.InCallService.VideoCall: void setZoom(float)>
<android.telecom.InCallService.VideoCall: void <init>()>
<android.telecom.InCallService.VideoCall: void unregisterCallback(android.telecom.InCallService.VideoCall.Callback)>
<android.telecom.InCallService.VideoCall: void setCamera(java.lang.String)>
<android.telecom.InCallService.VideoCall: void setDisplaySurface(android.view.Surface)>
<android.telecom.InCallService.VideoCall: void registerCallback(android.telecom.InCallService.VideoCall.Callback)>
<android.content.res.AssetManager.AssetInputStream: int read()>
<android.graphics.ColorSpace.Connector: float[] transform(float,float,float)>
<android.graphics.ColorSpace.Connector: android.graphics.ColorSpace.RenderIntent getRenderIntent()>
<android.graphics.ColorSpace.Connector: android.graphics.ColorSpace getDestination()>
<android.graphics.ColorSpace.Connector: int getComponentCount()>
<android.graphics.ColorSpace.Connector: android.graphics.ColorSpace getSource()>
<android.graphics.ColorSpace.Connector: float[] transform(float[])>
<java.io.FilterWriter: void close()>
<java.io.FilterWriter: void <init>(java.io.Writer)>
<java.io.FilterWriter: void flush()>
<java.io.FilterWriter: void write(char[],int,int)>
<android.widget.AbsListView: void setChoiceMode(int)>
<android.widget.AbsListView: void afterTextChanged(android.text.Editable)>
<android.widget.AbsListView: void smoothScrollBy(int,int)>
<android.widget.AbsListView: int getTranscriptMode()>
<android.widget.AbsListView: boolean isDrawSelectorOnTop()>
<android.widget.AbsListView: boolean shouldDrawSelector()>
<android.widget.AbsListView: void setDrawSelectorOnTop(boolean)>
<android.widget.AbsListView: void deferNotifyDataSetChanged()>
<android.widget.AbsListView: void setRecyclerListener(android.widget.AbsListView.RecyclerListener)>
<android.widget.AbsListView: int getListPaddingRight()>
<android.widget.AbsListView: void setFilterText(java.lang.String)>
<android.widget.AbsListView: void onGlobalLayout()>
<android.widget.AbsListView: void onTouchModeChanged(boolean)>
<android.widget.AbsListView: void setFastScrollStyle(int)>
<android.widget.AbsListView: int getBottomEdgeEffectColor()>
<android.widget.AbsListView: void onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)>
<android.widget.AbsListView: void setAdapter(android.widget.ListAdapter)>
<android.widget.AbsListView: void setBottomEdgeEffectColor(@ColorIntint)>
<android.widget.AbsListView: void setScrollingCacheEnabled(boolean)>
<android.widget.AbsListView: void setFriction(float)>
<android.widget.AbsListView: void setCacheColorHint(@ColorIntint)>
<android.widget.AbsListView: void setOnScrollListener(android.widget.AbsListView.OnScrollListener)>
<android.widget.AbsListView: void onFilterComplete(int)>
<android.widget.AbsListView: void setStackFromBottom(boolean)>
<android.widget.AbsListView: int getChoiceMode()>
<android.widget.AbsListView: boolean isFastScrollEnabled()>
<android.widget.AbsListView: void layoutChildren()>
<android.widget.AbsListView: void scrollListBy(int)>
<android.widget.AbsListView: void fling(int)>
<android.widget.AbsListView: int getCheckedItemPosition()>
<android.widget.AbsListView: void setSmoothScrollbarEnabled(boolean)>
<android.widget.AbsListView: android.util.SparseBooleanArray getCheckedItemPositions()>
<android.widget.AbsListView: android.view.View getSelectedView()>
<android.widget.AbsListView: void smoothScrollToPositionFromTop(int,int,int)>
<android.widget.AbsListView: void setTopEdgeEffectColor(@ColorIntint)>
<android.widget.AbsListView: long[] getCheckedItemIds()>
<android.widget.AbsListView: void invalidateViews()>
<android.widget.AbsListView: void setScrollIndicators(android.view.View,android.view.View)>
<android.widget.AbsListView: void smoothScrollToPosition(int,int)>
<android.widget.AbsListView: void handleDataChanged()>
<android.widget.AbsListView: long pointToRowId(int,int)>
<android.widget.AbsListView: void onTextChanged(CharSequence,int,int,int)>
<android.widget.AbsListView: void setEdgeEffectColor(@ColorIntint)>
<android.widget.AbsListView: boolean hasTextFilter()>
<android.widget.AbsListView: void setMultiChoiceModeListener(android.widget.AbsListView.MultiChoiceModeListener)>
<android.widget.AbsListView: void setRemoteViewsAdapter(android.content.Intent)>
<android.widget.AbsListView: int getCacheColorHint()>
<android.widget.AbsListView: void reclaimViews(java.util.List)>
<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsListView: int getListPaddingBottom()>
<android.widget.AbsListView: void setFastScrollAlwaysVisible(boolean)>
<android.widget.AbsListView: void onRestoreInstanceState(android.os.Parcelable)>
<android.widget.AbsListView: int getTopEdgeEffectColor()>
<android.widget.AbsListView: void setTextFilterEnabled(boolean)>
<android.widget.AbsListView: void setSelector(@DrawableResint)>
<android.widget.AbsListView: void smoothScrollToPositionFromTop(int,int)>
<android.widget.AbsListView: boolean canScrollList(int)>
<android.widget.AbsListView: void setTranscriptMode(int)>
<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AbsListView: void setSelectionFromTop(int,int)>
<android.widget.AbsListView: android.graphics.drawable.Drawable getSelector()>
<android.widget.AbsListView: boolean isScrollingCacheEnabled()>
<android.widget.AbsListView: void setItemChecked(int,boolean)>
<android.widget.AbsListView: int getCheckedItemCount()>
<android.widget.AbsListView: boolean isStackFromBottom()>
<android.widget.AbsListView: void setVelocityScale(float)>
<android.widget.AbsListView: void smoothScrollToPosition(int)>
<android.widget.AbsListView: boolean isTextFilterEnabled()>
<android.widget.AbsListView: void <init>(android.content.Context)>
<android.widget.AbsListView: int getListPaddingTop()>
<android.widget.AbsListView: boolean isItemChecked(int)>
<android.widget.AbsListView: void setFastScrollEnabled(boolean)>
<android.widget.AbsListView: void onRemoteAdapterDisconnected()>
<android.widget.AbsListView: int pointToPosition(int,int)>
<android.widget.AbsListView: void beforeTextChanged(CharSequence,int,int,int)>
<android.widget.AbsListView: void setSelector(android.graphics.drawable.Drawable)>
<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.AbsListView: android.widget.AbsListView.LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.AbsListView: void clearTextFilter()>
<android.widget.AbsListView: boolean isInFilterMode()>
<android.widget.AbsListView: int getListPaddingLeft()>
<android.widget.AbsListView: boolean onRemoteAdapterConnected()>
<android.widget.AbsListView: CharSequence getTextFilter()>
<android.widget.AbsListView: android.os.Parcelable onSaveInstanceState()>
<android.widget.AbsListView: boolean isSmoothScrollbarEnabled()>
<android.widget.AbsListView: void clearChoices()>
<android.widget.AbsListView: boolean isFastScrollAlwaysVisible()>
<android.widget.AbsListView: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<java.security.cert.CertPathChecker: boolean isForwardCheckingSupported()>
<java.security.cert.CertPathChecker: void check(java.security.cert.Certificate)>
<java.security.cert.CertPathChecker: void init(boolean)>
<android.database.CrossProcessCursorWrapper: android.database.CursorWindow getWindow()>
<android.database.CrossProcessCursorWrapper: void fillWindow(int,android.database.CursorWindow)>
<android.database.CrossProcessCursorWrapper: boolean onMove(int,int)>
<android.database.CrossProcessCursorWrapper: void <init>(android.database.Cursor)>
<android.renderscript.RSInvalidStateException: void <init>(String)>
<android.app.usage.UsageStatsManager: android.app.usage.UsageEvents queryEventsForSelf(long,long)>
<android.app.usage.UsageStatsManager: void whitelistAppTemporarily(java.lang.String,long,android.os.UserHandle)>
<android.app.usage.UsageStatsManager: void unregisterAppUsageLimitObserver(int)>
<android.app.usage.UsageStatsManager: int getUsageSource()>
<android.app.usage.UsageStatsManager: void reportUsageStop(android.app.Activity,java.lang.String)>
<android.app.usage.UsageStatsManager: int getAppStandbyBucket()>
<android.app.usage.UsageStatsManager: java.util.List queryEventStats(int,long,long)>
<android.app.usage.UsageStatsManager: void setAppStandbyBucket(java.lang.String,int)>
<android.app.usage.UsageStatsManager: void unregisterAppUsageObserver(int)>
<android.app.usage.UsageStatsManager: java.util.List queryUsageStats(int,long,long)>
<android.app.usage.UsageStatsManager: java.util.Map getAppStandbyBuckets()>
<android.app.usage.UsageStatsManager: void setAppStandbyBuckets(java.util.Map)>
<android.app.usage.UsageStatsManager: void reportUsageStart(android.app.Activity,java.lang.String,long)>
<android.app.usage.UsageStatsManager: void unregisterUsageSessionObserver(int)>
<android.app.usage.UsageStatsManager: int getAppStandbyBucket(java.lang.String)>
<android.app.usage.UsageStatsManager: java.util.List queryConfigurations(int,long,long)>
<android.app.usage.UsageStatsManager: void forceUsageSourceSettingRead()>
<android.app.usage.UsageStatsManager: boolean isAppInactive(java.lang.String)>
<android.app.usage.UsageStatsManager: java.util.Map queryAndAggregateUsageStats(long,long)>
<android.app.usage.UsageStatsManager: void registerAppUsageLimitObserver(int,java.lang.String[],java.time.Duration,java.time.Duration,android.app.PendingIntent)>
<android.app.usage.UsageStatsManager: void registerUsageSessionObserver(int,java.lang.String[],java.time.Duration,java.time.Duration,android.app.PendingIntent,android.app.PendingIntent)>
<android.app.usage.UsageStatsManager: void registerAppUsageObserver(int,java.lang.String[],long,java.util.concurrent.TimeUnit,android.app.PendingIntent)>
<android.app.usage.UsageStatsManager: android.app.usage.UsageEvents queryEvents(long,long)>
<android.app.usage.UsageStatsManager: void reportUsageStart(android.app.Activity,java.lang.String)>
<android.service.appprediction.AppPredictionService: void <init>()>
<android.service.appprediction.AppPredictionService: android.os.IBinder onBind(android.content.Intent)>
<android.service.appprediction.AppPredictionService: void onRequestPredictionUpdate(android.app.prediction.AppPredictionSessionId)>
<android.service.appprediction.AppPredictionService: void updatePredictions(android.app.prediction.AppPredictionSessionId,java.util.List)>
<android.service.appprediction.AppPredictionService: void onSortAppTargets(android.app.prediction.AppPredictionSessionId,java.util.List,android.os.CancellationSignal,java.util.function.Consumer)>
<android.service.appprediction.AppPredictionService: void onCreatePredictionSession(android.app.prediction.AppPredictionContext,android.app.prediction.AppPredictionSessionId)>
<android.service.appprediction.AppPredictionService: void onLaunchLocationShown(android.app.prediction.AppPredictionSessionId,java.lang.String,java.util.List)>
<android.service.appprediction.AppPredictionService: void onStartPredictionUpdates()>
<android.service.appprediction.AppPredictionService: void onStopPredictionUpdates()>
<android.service.appprediction.AppPredictionService: void onAppTargetEvent(android.app.prediction.AppPredictionSessionId,android.app.prediction.AppTargetEvent)>
<android.service.appprediction.AppPredictionService: void onDestroyPredictionSession(android.app.prediction.AppPredictionSessionId)>
<android.provider.ContactsContract.CommonDataKinds.Organization: CharSequence getTypeLabel(android.content.res.Resources,int,CharSequence)>
<android.provider.ContactsContract.CommonDataKinds.Organization: int getTypeLabelResource(int)>
<android.webkit.WebViewProvider.ViewDelegate: void onFinishTemporaryDetach()>
<android.webkit.WebViewProvider.ViewDelegate: void autofill(android.util.SparseArray)>
<android.webkit.WebViewProvider.ViewDelegate: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)>
<android.webkit.WebViewProvider.ViewDelegate: void onDraw(android.graphics.Canvas)>
<android.webkit.WebViewProvider.ViewDelegate: void onWindowFocusChanged(boolean)>
<android.webkit.WebViewProvider.ViewDelegate: boolean isVisibleToUserForAutofill(int)>
<android.webkit.WebViewProvider.ViewDelegate: boolean shouldDelayChildPressedState()>
<android.webkit.WebViewProvider.ViewDelegate: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.webkit.WebViewProvider.ViewDelegate: boolean performAccessibilityAction(int,android.os.Bundle)>
<android.webkit.WebViewProvider.ViewDelegate: void onFocusChanged(boolean,int,android.graphics.Rect)>
<android.webkit.WebViewProvider.ViewDelegate: void preDispatchDraw(android.graphics.Canvas)>
<android.webkit.WebViewProvider.ViewDelegate: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.webkit.WebViewProvider.ViewDelegate: boolean requestFocus(int,android.graphics.Rect)>
<android.webkit.WebViewProvider.ViewDelegate: void setLayerType(int,android.graphics.Paint)>
<android.webkit.WebViewProvider.ViewDelegate: void setScrollBarStyle(int)>
<android.webkit.WebViewProvider.ViewDelegate: boolean setFrame(int,int,int,int)>
<android.webkit.WebViewProvider.ViewDelegate: void onMeasure(int,int)>
<android.webkit.WebViewProvider.ViewDelegate: void onProvideContentCaptureStructure(android.view.ViewStructure,int)>
<android.webkit.WebViewProvider.ViewDelegate: void onDrawVerticalScrollBar(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int,int,int)>
<android.webkit.WebViewProvider.ViewDelegate: void onOverScrolled(int,int,boolean,boolean)>
<android.webkit.WebViewProvider.ViewDelegate: void setBackgroundColor(int)>
<android.webkit.WebViewProvider.ViewDelegate: void onProvideVirtualStructure(android.view.ViewStructure)>
<android.webkit.WebViewProvider.ViewDelegate: boolean performLongClick()>
<android.webkit.WebViewProvider.ViewDelegate: void onDetachedFromWindow()>
<android.webkit.WebViewProvider.ViewDelegate: boolean onDragEvent(android.view.DragEvent)>
<android.webkit.WebViewProvider.ViewDelegate: void onScrollChanged(int,int,int,int)>
<android.webkit.WebViewProvider.ViewDelegate: void onVisibilityChanged(android.view.View,int)>
<android.webkit.WebViewProvider.ViewDelegate: android.os.Handler getHandler(android.os.Handler)>
<android.webkit.WebViewProvider.ViewDelegate: boolean onKeyUp(int,android.view.KeyEvent)>
<android.webkit.WebViewProvider.ViewDelegate: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.webkit.WebViewProvider.ViewDelegate: android.view.View findFocus(android.view.View)>
<android.webkit.WebViewProvider.ViewDelegate: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>
<android.webkit.WebViewProvider.ViewDelegate: void onConfigurationChanged(android.content.res.Configuration)>
<android.webkit.WebViewProvider.ViewDelegate: boolean onCheckIsTextEditor()>
<android.webkit.WebViewProvider.ViewDelegate: void onWindowVisibilityChanged(int)>
<android.webkit.WebViewProvider.ViewDelegate: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>
<android.webkit.WebViewProvider.ViewDelegate: boolean onHoverEvent(android.view.MotionEvent)>
<android.webkit.WebViewProvider.ViewDelegate: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.webkit.WebViewProvider.ViewDelegate: void onMovedToDisplay(int,android.content.res.Configuration)>
<android.webkit.WebViewProvider.ViewDelegate: void onAttachedToWindow()>
<android.webkit.WebViewProvider.ViewDelegate: void onActivityResult(int,int,android.content.Intent)>
<android.webkit.WebViewProvider.ViewDelegate: void onStartTemporaryDetach()>
<android.webkit.WebViewProvider.ViewDelegate: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<android.webkit.WebViewProvider.ViewDelegate: void setOverScrollMode(int)>
<android.webkit.WebViewProvider.ViewDelegate: boolean onKeyDown(int,android.view.KeyEvent)>
<android.webkit.WebViewProvider.ViewDelegate: void onSizeChanged(int,int,int,int)>
<android.webkit.WebViewProvider.ViewDelegate: boolean onTrackballEvent(android.view.MotionEvent)>
<android.webkit.WebViewProvider.ViewDelegate: void setLayoutParams(android.view.ViewGroup.LayoutParams)>
<android.webkit.WebViewProvider.ViewDelegate: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>
<android.webkit.WebViewProvider.ViewDelegate: boolean onTouchEvent(android.view.MotionEvent)>
<android.app.usage.NetworkStatsManager.UsageCallback: void <init>()>
<android.app.usage.NetworkStatsManager.UsageCallback: void onThresholdReached(int,java.lang.String)>
<android.widget.ActionMenuView: void setOnMenuItemClickListener(android.widget.ActionMenuView.OnMenuItemClickListener)>
<android.widget.ActionMenuView: android.widget.ActionMenuView.LayoutParams generateDefaultLayoutParams()>
<android.widget.ActionMenuView: void dismissPopupMenus()>
<android.widget.ActionMenuView: boolean isOverflowMenuShowing()>
<android.widget.ActionMenuView: void onDetachedFromWindow()>
<android.widget.ActionMenuView: void <init>(android.content.Context)>
<android.widget.ActionMenuView: android.widget.ActionMenuView.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams)>
<android.widget.ActionMenuView: boolean showOverflowMenu()>
<android.widget.ActionMenuView: int getPopupTheme()>
<android.widget.ActionMenuView: void onConfigurationChanged(android.content.res.Configuration)>
<android.widget.ActionMenuView: android.view.Menu getMenu()>
<android.widget.ActionMenuView: android.graphics.drawable.Drawable getOverflowIcon()>
<android.widget.ActionMenuView: android.widget.ActionMenuView.LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.ActionMenuView: boolean hideOverflowMenu()>
<android.widget.ActionMenuView: void setPopupTheme(@StyleResint)>
<android.widget.ActionMenuView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ActionMenuView: void setOverflowIcon(android.graphics.drawable.Drawable)>
<android.widget.DigitalClock: void <init>(android.content.Context)>
<android.widget.DigitalClock: void <init>(android.content.Context,android.util.AttributeSet)>
<android.icu.text.Transliterator.Position: void <init>(android.icu.text.Transliterator.Position)>
<android.icu.text.Transliterator.Position: void validate(int)>
<android.icu.text.Transliterator.Position: void set(android.icu.text.Transliterator.Position)>
<android.icu.text.Transliterator.Position: void <init>(int,int,int)>
<android.icu.text.Transliterator.Position: void <init>(int,int,int,int)>
<android.icu.text.Transliterator.Position: void <init>()>
<javax.sql.RowSetInternal: java.sql.ResultSet getOriginalRow()>
<javax.sql.RowSetInternal: void setMetaData(javax.sql.RowSetMetaData)>
<javax.sql.RowSetInternal: java.lang.Object[] getParams()>
<javax.sql.RowSetInternal: java.sql.ResultSet getOriginal()>
<javax.sql.RowSetInternal: java.sql.Connection getConnection()>
<android.telephony.ims.ImsSsData.Builder: android.telephony.ims.ImsSsData build()>
<android.telephony.ims.ImsSsData.Builder: android.telephony.ims.ImsSsData.Builder setSuppServiceInfo(java.util.List)>
<android.telephony.ims.ImsSsData.Builder: void <init>(int,int,int,int,int)>
<android.telephony.ims.ImsSsData.Builder: android.telephony.ims.ImsSsData.Builder setCallForwardingInfo(java.util.List)>
<android.opengl.ETC1Util.ETC1Texture: int getWidth()>
<android.opengl.ETC1Util.ETC1Texture: java.nio.ByteBuffer getData()>
<android.opengl.ETC1Util.ETC1Texture: void <init>(int,int,java.nio.ByteBuffer)>
<android.opengl.ETC1Util.ETC1Texture: int getHeight()>
<android.animation.AnimatorSet.Builder: android.animation.AnimatorSet.Builder after(long)>
<android.animation.AnimatorSet.Builder: android.animation.AnimatorSet.Builder after(android.animation.Animator)>
<android.animation.AnimatorSet.Builder: android.animation.AnimatorSet.Builder with(android.animation.Animator)>
<android.animation.AnimatorSet.Builder: android.animation.AnimatorSet.Builder before(android.animation.Animator)>
<android.service.resolver.ResolverTarget: int describeContents()>
<android.service.resolver.ResolverTarget: float getLaunchScore()>
<android.service.resolver.ResolverTarget: void setTimeSpentScore(float)>
<android.service.resolver.ResolverTarget: void <init>()>
<android.service.resolver.ResolverTarget: float getChooserScore()>
<android.service.resolver.ResolverTarget: void setSelectProbability(float)>
<android.service.resolver.ResolverTarget: float getSelectProbability()>
<android.service.resolver.ResolverTarget: void setRecencyScore(float)>
<android.service.resolver.ResolverTarget: float getTimeSpentScore()>
<android.service.resolver.ResolverTarget: void setChooserScore(float)>
<android.service.resolver.ResolverTarget: float getRecencyScore()>
<android.service.resolver.ResolverTarget: void writeToParcel(android.os.Parcel,int)>
<android.service.resolver.ResolverTarget: void setLaunchScore(float)>
<java.sql.SQLFeatureNotSupportedException: void <init>(String,String)>
<java.sql.SQLFeatureNotSupportedException: void <init>(String)>
<java.sql.SQLFeatureNotSupportedException: void <init>(String,Throwable)>
<java.sql.SQLFeatureNotSupportedException: void <init>(String,String,int)>
<java.sql.SQLFeatureNotSupportedException: void <init>()>
<java.sql.SQLFeatureNotSupportedException: void <init>(Throwable)>
<java.sql.SQLFeatureNotSupportedException: void <init>(String,String,int,Throwable)>
<java.sql.SQLFeatureNotSupportedException: void <init>(String,String,Throwable)>
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
<android.telephony.SmsManager: void sendMultimediaMessage(android.content.Context,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent)>
<android.telephony.SmsManager: void downloadMultimediaMessage(android.content.Context,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>
<android.telephony.SmsManager: int getDefaultSmsSubscriptionId()>
<android.telephony.SmsManager: android.telephony.SmsManager getSmsManagerForSubscriptionId(int)>
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: void getSmsMessagesForFinancialApp(android.os.Bundle,java.util.concurrent.Executor,android.telephony.SmsManager.FinancialSmsCallback)>
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: java.lang.String createAppSpecificSmsTokenWithPackageInfo(java.lang.String,android.app.PendingIntent)>
<android.telephony.SmsManager: void sendMultipartTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)>
<android.telephony.SmsManager: void sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: void injectSmsPdu(byte[],java.lang.String,android.app.PendingIntent)>
<android.telephony.SmsManager: int getSubscriptionId()>
<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>
<android.telephony.SmsManager: int checkSmsShortCodeDestination(java.lang.String,java.lang.String)>
<android.telephony.SmsManager: android.os.Bundle getCarrierConfigValues()>
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<android.telephony.SmsManager: java.lang.String createAppSpecificSmsToken(android.app.PendingIntent)>
<android.app.ApplicationErrorReport.CrashInfo: void <init>(Throwable)>
<android.app.ApplicationErrorReport.CrashInfo: void <init>(android.os.Parcel)>
<android.app.ApplicationErrorReport.CrashInfo: void <init>()>
<android.app.ApplicationErrorReport.CrashInfo: void dump(android.util.Printer,java.lang.String)>
<android.app.ApplicationErrorReport.CrashInfo: void writeToParcel(android.os.Parcel,int)>
<android.media.MediaRouter.RouteInfo: java.lang.Object getTag()>
<android.media.MediaRouter.RouteInfo: int getVolume()>
<android.media.MediaRouter.RouteInfo: void requestUpdateVolume(int)>
<android.media.MediaRouter.RouteInfo: int getDeviceType()>
<android.media.MediaRouter.RouteInfo: CharSequence getStatus()>
<android.media.MediaRouter.RouteInfo: boolean isConnecting()>
<android.media.MediaRouter.RouteInfo: android.graphics.drawable.Drawable getIconDrawable()>
<android.media.MediaRouter.RouteInfo: void setTag(java.lang.Object)>
<android.media.MediaRouter.RouteInfo: boolean isEnabled()>
<android.media.MediaRouter.RouteInfo: CharSequence getDescription()>
<android.media.MediaRouter.RouteInfo: android.media.MediaRouter.RouteGroup getGroup()>
<android.media.MediaRouter.RouteInfo: android.view.Display getPresentationDisplay()>
<android.media.MediaRouter.RouteInfo: int getSupportedTypes()>
<android.media.MediaRouter.RouteInfo: CharSequence getName(android.content.Context)>
<android.media.MediaRouter.RouteInfo: android.media.MediaRouter.RouteCategory getCategory()>
<android.media.MediaRouter.RouteInfo: int getVolumeHandling()>
<android.media.MediaRouter.RouteInfo: int getPlaybackType()>
<android.media.MediaRouter.RouteInfo: int getPlaybackStream()>
<android.media.MediaRouter.RouteInfo: int getVolumeMax()>
<android.media.MediaRouter.RouteInfo: CharSequence getName()>
<android.media.MediaRouter.RouteInfo: void requestSetVolume(int)>
<android.graphics.ImageDecoder.OnPartialImageListener: boolean onPartialImage(android.graphics.ImageDecoder.DecodeException)>
<java.lang.AbstractMethodError: void <init>()>
<java.lang.AbstractMethodError: void <init>(String)>
<java.util.InputMismatchException: void <init>(String)>
<java.util.InputMismatchException: void <init>()>
<android.companion.WifiDeviceFilter.Builder: android.companion.WifiDeviceFilter build()>
<android.companion.WifiDeviceFilter.Builder: void <init>()>
<android.companion.WifiDeviceFilter.Builder: android.companion.WifiDeviceFilter.Builder setNamePattern(java.util.regex.Pattern)>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: void <init>()>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: int describeContents()>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: void setCertSha256Fingerprint(byte[])>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: java.lang.String getCertType()>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: byte[] getCertSha256Fingerprint()>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: void setCertType(java.lang.String)>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: void <init>(android.net.wifi.hotspot2.pps.Credential.CertificateCredential)>
<android.preference.PreferenceActivity: android.content.Intent onBuildStartFragmentIntent(java.lang.String,android.os.Bundle,@StringResint,int)>
<android.preference.PreferenceActivity: android.preference.PreferenceActivity.Header onGetNewHeader()>
<android.preference.PreferenceActivity: boolean onIsHidingHeaders()>
<android.preference.PreferenceActivity: void switchToHeader(android.preference.PreferenceActivity.Header)>
<android.preference.PreferenceActivity: void onHeaderClick(android.preference.PreferenceActivity.Header,int)>
<android.preference.PreferenceActivity: boolean hasHeaders()>
<android.preference.PreferenceActivity: void addPreferencesFromResource(int)>
<android.preference.PreferenceActivity: boolean isMultiPane()>
<android.preference.PreferenceActivity: android.preference.Preference findPreference(CharSequence)>
<android.preference.PreferenceActivity: void setParentTitle(CharSequence,CharSequence,android.view.View.OnClickListener)>
<android.preference.PreferenceActivity: android.preference.PreferenceScreen getPreferenceScreen()>
<android.preference.PreferenceActivity: void startWithFragment(java.lang.String,android.os.Bundle,android.app.Fragment,int)>
<android.preference.PreferenceActivity: void addPreferencesFromIntent(android.content.Intent)>
<android.preference.PreferenceActivity: void onBuildHeaders(java.util.List)>
<android.preference.PreferenceActivity: void loadHeadersFromResource(@XmlResint,java.util.List)>
<android.preference.PreferenceActivity: android.preference.PreferenceManager getPreferenceManager()>
<android.preference.PreferenceActivity: void startWithFragment(java.lang.String,android.os.Bundle,android.app.Fragment,int,@StringResint,@StringResint)>
<android.preference.PreferenceActivity: void setListFooter(android.view.View)>
<android.preference.PreferenceActivity: void invalidateHeaders()>
<android.preference.PreferenceActivity: void startPreferencePanel(java.lang.String,android.os.Bundle,@StringResint,CharSequence,android.app.Fragment,int)>
<android.preference.PreferenceActivity: void switchToHeader(java.lang.String,android.os.Bundle)>
<android.preference.PreferenceActivity: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)>
<android.preference.PreferenceActivity: boolean onIsMultiPane()>
<android.preference.PreferenceActivity: void finishPreferencePanel(android.app.Fragment,int,android.content.Intent)>
<android.preference.PreferenceActivity: boolean onPreferenceStartFragment(android.preference.PreferenceFragment,android.preference.Preference)>
<android.preference.PreferenceActivity: boolean isValidFragment(java.lang.String)>
<android.preference.PreferenceActivity: android.preference.PreferenceActivity.Header onGetInitialHeader()>
<android.preference.PreferenceActivity: void setPreferenceScreen(android.preference.PreferenceScreen)>
<android.preference.PreferenceActivity: void <init>()>
<android.preference.PreferenceActivity: void showBreadCrumbs(CharSequence,CharSequence)>
<android.preference.PreferenceActivity: void startPreferenceFragment(android.app.Fragment,boolean)>
<android.widget.DatePicker: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.DatePicker: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.DatePicker: void setMaxDate(long)>
<android.widget.DatePicker: int getFirstDayOfWeek()>
<android.widget.DatePicker: int getMonth()>
<android.widget.DatePicker: int getMode()>
<android.widget.DatePicker: long getMaxDate()>
<android.widget.DatePicker: void init(int,int,int,android.widget.DatePicker.OnDateChangedListener)>
<android.widget.DatePicker: void setOnDateChangedListener(android.widget.DatePicker.OnDateChangedListener)>
<android.widget.DatePicker: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.DatePicker: void updateDate(int,int,int)>
<android.widget.DatePicker: void setCalendarViewShown(boolean)>
<android.widget.DatePicker: void setMinDate(long)>
<android.widget.DatePicker: void setSpinnersShown(boolean)>
<android.widget.DatePicker: void <init>(android.content.Context)>
<android.widget.DatePicker: boolean getCalendarViewShown()>
<android.widget.DatePicker: boolean getSpinnersShown()>
<android.widget.DatePicker: int getYear()>
<android.widget.DatePicker: int getDayOfMonth()>
<android.widget.DatePicker: android.widget.CalendarView getCalendarView()>
<android.widget.DatePicker: long getMinDate()>
<android.widget.DatePicker: void setFirstDayOfWeek(int)>
<android.webkit.FindActionModeCallback: void setWebView(android.webkit.WebView)>
<android.webkit.FindActionModeCallback: void afterTextChanged(android.text.Editable)>
<android.webkit.FindActionModeCallback: void onTextChanged(CharSequence,int,int,int)>
<android.webkit.FindActionModeCallback: boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu)>
<android.webkit.FindActionModeCallback: void beforeTextChanged(CharSequence,int,int,int)>
<android.webkit.FindActionModeCallback: void onClick(android.view.View)>
<android.webkit.FindActionModeCallback: void finish()>
<android.webkit.FindActionModeCallback: void findAll()>
<android.webkit.FindActionModeCallback: void setText(java.lang.String)>
<android.webkit.FindActionModeCallback: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)>
<android.webkit.FindActionModeCallback: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)>
<android.webkit.FindActionModeCallback: void updateMatchCount(int,int,boolean)>
<android.webkit.FindActionModeCallback: void onFindResultReceived(int,int,boolean)>
<android.webkit.FindActionModeCallback: void showSoftInput()>
<android.webkit.FindActionModeCallback: void onDestroyActionMode(android.view.ActionMode)>
<android.webkit.FindActionModeCallback: void <init>(android.content.Context)>
<android.webkit.FindActionModeCallback: int getActionModeGlobalBottom()>
<java.text.Bidi: boolean isLeftToRight()>
<java.text.Bidi: void <init>(char[],int,byte[],int,int,int)>
<java.text.Bidi: int getRunLevel(int)>
<java.text.Bidi: int getBaseLevel()>
<java.text.Bidi: int getRunLimit(int)>
<java.text.Bidi: boolean requiresBidi(char[],int,int)>
<java.text.Bidi: int getRunCount()>
<java.text.Bidi: int getRunStart(int)>
<java.text.Bidi: boolean isMixed()>
<java.text.Bidi: void <init>(String,int)>
<java.text.Bidi: int getLength()>
<java.text.Bidi: boolean baseIsLeftToRight()>
<java.text.Bidi: int getLevelAt(int)>
<java.text.Bidi: void <init>(java.text.AttributedCharacterIterator)>
<java.text.Bidi: java.text.Bidi createLineBidi(int,int)>
<java.text.Bidi: boolean isRightToLeft()>
<java.text.Bidi: void reorderVisually(byte[],int,java.lang.Object[],int,int)>
<android.graphics.SurfaceTexture.OutOfResourcesException: void <init>()>
<android.graphics.SurfaceTexture.OutOfResourcesException: void <init>(String)>
<java.io.InvalidObjectException: void <init>(String)>
<java.math.BigInteger: java.math.BigInteger probablePrime(int,java.util.Random)>
<java.math.BigInteger: void <init>(byte[])>
<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>
<java.math.BigInteger: java.math.BigInteger min(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger abs()>
<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger valueOf(long)>
<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>
<java.math.BigInteger: int intValue()>
<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger clearBit(int)>
<java.math.BigInteger: long longValue()>
<java.math.BigInteger: void <init>(String,int)>
<java.math.BigInteger: java.math.BigInteger shiftRight(int)>
<java.math.BigInteger: int signum()>
<java.math.BigInteger: java.lang.String toString(int)>
<java.math.BigInteger: java.math.BigInteger setBit(int)>
<java.math.BigInteger: void <init>(int,java.util.Random)>
<java.math.BigInteger: java.math.BigInteger andNot(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger pow(int)>
<java.math.BigInteger: java.math.BigInteger max(java.math.BigInteger)>
<java.math.BigInteger: byte[] toByteArray()>
<java.math.BigInteger: float floatValue()>
<java.math.BigInteger: int bitLength()>
<java.math.BigInteger: int bitCount()>
<java.math.BigInteger: java.math.BigInteger nextProbablePrime()>
<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger not()>
<java.math.BigInteger: void <init>(String)>
<java.math.BigInteger: double doubleValue()>
<java.math.BigInteger: java.math.BigInteger and(java.math.BigInteger)>
<java.math.BigInteger: boolean isProbablePrime(int)>
<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger flipBit(int)>
<java.math.BigInteger: java.math.BigInteger xor(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger negate()>
<java.math.BigInteger: int getLowestSetBit()>
<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>
<java.math.BigInteger: boolean testBit(int)>
<java.math.BigInteger: java.math.BigInteger or(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>
<java.math.BigInteger: void <init>(int,int,java.util.Random)>
<java.math.BigInteger: void <init>(int,byte[])>
<java.math.BigInteger: int compareTo(java.math.BigInteger)>
<java.sql.Struct: java.lang.Object[] getAttributes(java.util.Map)>
<java.sql.Struct: java.lang.String getSQLTypeName()>
<java.sql.Struct: java.lang.Object[] getAttributes()>
<java.util.concurrent.BlockingQueue extends java.util.Queue: E take()>
<java.util.concurrent.BlockingQueue extends java.util.Queue: E poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.BlockingQueue extends java.util.Queue: int drainTo(java.util.Collection,int)>
<java.util.concurrent.BlockingQueue extends java.util.Queue: boolean offer(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.BlockingQueue extends java.util.Queue: void put(E)>
<java.util.concurrent.BlockingQueue extends java.util.Queue: int remainingCapacity()>
<java.util.concurrent.BlockingQueue extends java.util.Queue: int drainTo(java.util.Collection)>
<android.widget.AdapterView.OnItemLongClickListener: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)>
<android.hardware.radio.ProgramSelector: android.hardware.radio.ProgramSelector withSecondaryPreferred(android.hardware.radio.ProgramSelector.Identifier)>
<android.hardware.radio.ProgramSelector: android.hardware.radio.ProgramSelector createAmFmSelector(@android.hardware.radio.RadioManager.Bandint,int,int)>
<android.hardware.radio.ProgramSelector: android.hardware.radio.ProgramSelector createAmFmSelector(@android.hardware.radio.RadioManager.Bandint,int)>
<android.hardware.radio.ProgramSelector: long[] getVendorIds()>
<android.hardware.radio.ProgramSelector: void <init>(@android.hardware.radio.ProgramSelector.ProgramType int,android.hardware.radio.ProgramSelector.Identifier,android.hardware.radio.ProgramSelector.Identifier[],long[])>
<android.hardware.radio.ProgramSelector: void writeToParcel(android.os.Parcel,int)>
<android.hardware.radio.ProgramSelector: android.hardware.radio.ProgramSelector.Identifier getPrimaryId()>
<android.hardware.radio.ProgramSelector: android.hardware.radio.ProgramSelector.Identifier[] getSecondaryIds()>
<android.hardware.radio.ProgramSelector: int describeContents()>
<android.hardware.radio.ProgramSelector: int getProgramType()>
<android.hardware.radio.ProgramSelector: android.hardware.radio.ProgramSelector.Identifier[] getAllIds(@android.hardware.radio.ProgramSelector.IdentifierTypeint)>
<android.hardware.radio.ProgramSelector: long getFirstId(@android.hardware.radio.ProgramSelector.IdentifierTypeint)>
<android.R.attr: void <init>()>
<android.telephony.NetworkScan: void stopScan()>
<android.net.SocketKeepalive: void stop()>
<android.net.SocketKeepalive: void start(int)>
<android.net.SocketKeepalive: void close()>
<java.nio.file.FileVisitor: java.nio.file.FileVisitResult postVisitDirectory(T,java.io.IOException)>
<java.nio.file.FileVisitor: java.nio.file.FileVisitResult preVisitDirectory(T,java.nio.file.attribute.BasicFileAttributes)>
<java.nio.file.FileVisitor: java.nio.file.FileVisitResult visitFileFailed(T,java.io.IOException)>
<java.nio.file.FileVisitor: java.nio.file.FileVisitResult visitFile(T,java.nio.file.attribute.BasicFileAttributes)>
<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>
<android.view.Surface: void readFromParcel(android.os.Parcel)>
<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>
<android.view.Surface: void unlockCanvas(android.graphics.Canvas)>
<android.view.Surface: void <init>(android.view.SurfaceControl)>
<android.view.Surface: android.graphics.Canvas lockHardwareCanvas()>
<android.view.Surface: int describeContents()>
<android.view.Surface: void release()>
<android.view.Surface: boolean isValid()>
<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)>
<android.view.Surface: void writeToParcel(android.os.Parcel,int)>
<java.security.UnresolvedPermission: void <init>(String,String,String,java.security.cert.Certificate[])>
<java.security.UnresolvedPermission: boolean implies(java.security.Permission)>
<java.security.UnresolvedPermission: java.security.cert.Certificate[] getUnresolvedCerts()>
<java.security.UnresolvedPermission: java.lang.String getUnresolvedName()>
<java.security.UnresolvedPermission: java.lang.String getUnresolvedActions()>
<java.security.UnresolvedPermission: java.lang.String getUnresolvedType()>
<java.security.UnresolvedPermission: java.lang.String getActions()>
<android.service.textservice.SpellCheckerService: android.os.IBinder onBind(android.content.Intent)>
<android.service.textservice.SpellCheckerService: void <init>()>
<android.service.textservice.SpellCheckerService: android.service.textservice.SpellCheckerService.Session createSession()>
<java.net.SocketImplFactory: java.net.SocketImpl createSocketImpl()>
<java.lang.ThreadDeath: void <init>()>
<android.bluetooth.BluetoothGatt: boolean beginReliableWrite()>
<android.bluetooth.BluetoothGatt: boolean discoverServices()>
<android.bluetooth.BluetoothGatt: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothGatt: boolean readRemoteRssi()>
<android.bluetooth.BluetoothGatt: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothGatt: boolean setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic,boolean)>
<android.bluetooth.BluetoothGatt: boolean readDescriptor(android.bluetooth.BluetoothGattDescriptor)>
<android.bluetooth.BluetoothGatt: boolean requestMtu(int)>
<android.bluetooth.BluetoothGatt: void close()>
<android.bluetooth.BluetoothGatt: boolean readCharacteristic(android.bluetooth.BluetoothGattCharacteristic)>
<android.bluetooth.BluetoothGatt: boolean requestConnectionPriority(int)>
<android.bluetooth.BluetoothGatt: boolean writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic)>
<android.bluetooth.BluetoothGatt: void abortReliableWrite(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothGatt: void setPreferredPhy(int,int,int)>
<android.bluetooth.BluetoothGatt: void readPhy()>
<android.bluetooth.BluetoothGatt: boolean writeDescriptor(android.bluetooth.BluetoothGattDescriptor)>
<android.bluetooth.BluetoothGatt: void abortReliableWrite()>
<android.bluetooth.BluetoothGatt: java.util.List getServices()>
<android.bluetooth.BluetoothGatt: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothGatt: android.bluetooth.BluetoothGattService getService(java.util.UUID)>
<android.bluetooth.BluetoothGatt: boolean executeReliableWrite()>
<android.bluetooth.BluetoothGatt: void disconnect()>
<android.bluetooth.BluetoothGatt: android.bluetooth.BluetoothDevice getDevice()>
<android.bluetooth.BluetoothGatt: boolean connect()>
<android.net.http.X509TrustManagerExtensions: void <init>(javax.net.ssl.X509TrustManager)>
<android.net.http.X509TrustManagerExtensions: boolean isSameTrustConfiguration(java.lang.String,java.lang.String)>
<android.net.http.X509TrustManagerExtensions: boolean isUserAddedCertificate(java.security.cert.X509Certificate)>
<android.net.http.X509TrustManagerExtensions: java.util.List checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.lang.String)>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: int getEapType()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: java.lang.String getUsername()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void setUsername(java.lang.String)>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void setEapType(int)>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: java.lang.String getPassword()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void setPassword(java.lang.String)>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void <init>()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: int describeContents()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: java.lang.String getNonEapInnerMethod()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void <init>(android.net.wifi.hotspot2.pps.Credential.UserCredential)>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void setNonEapInnerMethod(java.lang.String)>
<android.content.pm.PathPermission: void <init>(android.os.Parcel)>
<android.content.pm.PathPermission: void <init>(String,int,String,String)>
<android.content.pm.PathPermission: java.lang.String getReadPermission()>
<android.content.pm.PathPermission: java.lang.String getWritePermission()>
<android.nfc.NfcAdapter.CreateBeamUrisCallback: android.net.Uri[] createBeamUris(android.nfc.NfcEvent)>
<org.w3c.dom.Text extends org.w3c.dom.CharacterData: java.lang.String getWholeText()>
<org.w3c.dom.Text extends org.w3c.dom.CharacterData: boolean isElementContentWhitespace()>
<org.w3c.dom.Text extends org.w3c.dom.CharacterData: org.w3c.dom.Text splitText(int)>
<org.w3c.dom.Text extends org.w3c.dom.CharacterData: org.w3c.dom.Text replaceWholeText(java.lang.String)>
<org.w3c.dom.DOMError: org.w3c.dom.DOMLocator getLocation()>
<org.w3c.dom.DOMError: java.lang.String getMessage()>
<org.w3c.dom.DOMError: java.lang.String getType()>
<org.w3c.dom.DOMError: java.lang.Object getRelatedData()>
<org.w3c.dom.DOMError: java.lang.Object getRelatedException()>
<org.w3c.dom.DOMError: short getSeverity()>
<android.view.textclassifier.ConversationActions.Message.Builder: android.view.textclassifier.ConversationActions.Message.Builder setText(CharSequence)>
<android.view.textclassifier.ConversationActions.Message.Builder: android.view.textclassifier.ConversationActions.Message build()>
<android.view.textclassifier.ConversationActions.Message.Builder: android.view.textclassifier.ConversationActions.Message.Builder setReferenceTime(java.time.ZonedDateTime)>
<android.view.textclassifier.ConversationActions.Message.Builder: android.view.textclassifier.ConversationActions.Message.Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.ConversationActions.Message.Builder: void <init>(android.app.Person)>
<android.content.om.OverlayManager: java.util.List getOverlayInfosForTarget(java.lang.String,android.os.UserHandle)>
<android.content.om.OverlayManager: void setEnabled(java.lang.String,boolean,android.os.UserHandle)>
<android.content.om.OverlayManager: void setEnabledExclusiveInCategory(java.lang.String,android.os.UserHandle)>
<android.content.om.OverlayManager: android.content.om.OverlayInfo getOverlayInfo(java.lang.String,android.os.UserHandle)>
<android.speech.tts.SynthesisRequest: android.os.Bundle getParams()>
<android.speech.tts.SynthesisRequest: java.lang.String getLanguage()>
<android.speech.tts.SynthesisRequest: int getPitch()>
<android.speech.tts.SynthesisRequest: java.lang.String getText()>
<android.speech.tts.SynthesisRequest: void <init>(CharSequence,android.os.Bundle)>
<android.speech.tts.SynthesisRequest: java.lang.String getVoiceName()>
<android.speech.tts.SynthesisRequest: void <init>(String,android.os.Bundle)>
<android.speech.tts.SynthesisRequest: java.lang.String getCountry()>
<android.speech.tts.SynthesisRequest: int getSpeechRate()>
<android.speech.tts.SynthesisRequest: int getCallerUid()>
<android.speech.tts.SynthesisRequest: java.lang.String getVariant()>
<android.speech.tts.SynthesisRequest: CharSequence getCharSequenceText()>
<java.io.WriteAbortedException: void <init>(String,Exception)>
<android.app.backup.BackupObserver: void <init>()>
<android.app.backup.BackupObserver: void onUpdate(java.lang.String,android.app.backup.BackupProgress)>
<android.app.backup.BackupObserver: void backupFinished(int)>
<android.app.backup.BackupObserver: void onResult(java.lang.String,int)>
<android.mtp.MtpDevice: byte[] getObject(int,int)>
<android.mtp.MtpDevice: boolean deleteObject(int)>
<android.mtp.MtpDevice: android.mtp.MtpEvent readEvent(android.os.CancellationSignal)>
<android.mtp.MtpDevice: long getPartialObject(int,long,long,byte[])>
<android.mtp.MtpDevice: int getDeviceId()>
<android.mtp.MtpDevice: void close()>
<android.mtp.MtpDevice: int[] getObjectHandles(int,int,int)>
<android.mtp.MtpDevice: byte[] getThumbnail(int)>
<android.mtp.MtpDevice: long getParent(int)>
<android.mtp.MtpDevice: void <init>(android.hardware.usb.UsbDevice)>
<android.mtp.MtpDevice: android.mtp.MtpStorageInfo getStorageInfo(int)>
<android.mtp.MtpDevice: java.lang.String getDeviceName()>
<android.mtp.MtpDevice: long getStorageId(int)>
<android.mtp.MtpDevice: boolean importFile(int,java.lang.String)>
<android.mtp.MtpDevice: int[] getStorageIds()>
<android.mtp.MtpDevice: android.mtp.MtpDeviceInfo getDeviceInfo()>
<android.mtp.MtpDevice: long getPartialObject64(int,long,long,byte[])>
<android.mtp.MtpDevice: boolean open(android.hardware.usb.UsbDeviceConnection)>
<android.mtp.MtpDevice: boolean importFile(int,android.os.ParcelFileDescriptor)>
<android.mtp.MtpDevice: android.mtp.MtpObjectInfo sendObjectInfo(android.mtp.MtpObjectInfo)>
<android.mtp.MtpDevice: android.mtp.MtpObjectInfo getObjectInfo(int)>
<android.mtp.MtpDevice: boolean sendObject(int,long,android.os.ParcelFileDescriptor)>
<javax.xml.transform.TransformerException: void setLocator(javax.xml.transform.SourceLocator)>
<javax.xml.transform.TransformerException: void <init>(String,javax.xml.transform.SourceLocator)>
<javax.xml.transform.TransformerException: java.lang.String getLocationAsString()>
<javax.xml.transform.TransformerException: void <init>(String)>
<javax.xml.transform.TransformerException: void <init>(Throwable)>
<javax.xml.transform.TransformerException: javax.xml.transform.SourceLocator getLocator()>
<javax.xml.transform.TransformerException: java.lang.String getMessageAndLocation()>
<javax.xml.transform.TransformerException: java.lang.Throwable getException()>
<javax.xml.transform.TransformerException: void <init>(String,Throwable)>
<javax.xml.transform.TransformerException: void <init>(String,javax.xml.transform.SourceLocator,Throwable)>
<android.util.TimingLogger: void reset()>
<android.util.TimingLogger: void <init>(String,String)>
<android.util.TimingLogger: void reset(java.lang.String,java.lang.String)>
<android.util.TimingLogger: void addSplit(java.lang.String)>
<android.util.TimingLogger: void dumpToLog()>
<android.media.Session2Command: int describeContents()>
<android.media.Session2Command: int getCommandCode()>
<android.media.Session2Command: void <init>(String,android.os.Bundle)>
<android.media.Session2Command: android.os.Bundle getCustomExtras()>
<android.media.Session2Command: void writeToParcel(android.os.Parcel,int)>
<android.media.Session2Command: void <init>(int)>
<android.media.Session2Command: java.lang.String getCustomAction()>
<android.net.wifi.RttManager.WifiInformationElement: void <init>()>
<android.content.Entity: void addSubValue(android.net.Uri,android.content.ContentValues)>
<android.content.Entity: java.util.ArrayList getSubValues()>
<android.content.Entity: void <init>(android.content.ContentValues)>
<android.content.Entity: android.content.ContentValues getEntityValues()>
<android.view.textclassifier.TextClassifierEvent.Builder: T setResultId(java.lang.String)>
<android.view.textclassifier.TextClassifierEvent.Builder: T setScores(float...)>
<android.view.textclassifier.TextClassifierEvent.Builder: T setEntityTypes(java.lang.String...)>
<android.view.textclassifier.TextClassifierEvent.Builder: T setEventIndex(int)>
<android.view.textclassifier.TextClassifierEvent.Builder: T setLocale(android.icu.util.ULocale)>
<android.view.textclassifier.TextClassifierEvent.Builder: T setEventContext(android.view.textclassifier.TextClassificationContext)>
<android.view.textclassifier.TextClassifierEvent.Builder: T setModelName(java.lang.String)>
<android.view.textclassifier.TextClassifierEvent.Builder: T setActionIndices(int...)>
<android.view.textclassifier.TextClassifierEvent.Builder: T setExtras(android.os.Bundle)>
<android.webkit.WebResourceRequest: java.lang.String getMethod()>
<android.webkit.WebResourceRequest: android.net.Uri getUrl()>
<android.webkit.WebResourceRequest: java.util.Map getRequestHeaders()>
<android.webkit.WebResourceRequest: boolean isRedirect()>
<android.webkit.WebResourceRequest: boolean hasGesture()>
<android.webkit.WebResourceRequest: boolean isForMainFrame()>
<android.renderscript.Byte3: void <init>()>
<android.renderscript.Byte3: void <init>(byte,byte,byte)>
<android.media.midi.MidiDeviceService: void onDeviceStatusChanged(android.media.midi.MidiDeviceStatus)>
<android.media.midi.MidiDeviceService: void onClose()>
<android.media.midi.MidiDeviceService: void <init>()>
<android.media.midi.MidiDeviceService: android.os.IBinder onBind(android.content.Intent)>
<android.media.midi.MidiDeviceService: android.media.midi.MidiDeviceInfo getDeviceInfo()>
<android.media.midi.MidiDeviceService: android.media.midi.MidiReceiver[] onGetInputPortReceivers()>
<android.media.midi.MidiDeviceService: android.media.midi.MidiReceiver[] getOutputPortReceivers()>
<android.renderscript.Byte2: void <init>(byte,byte)>
<android.renderscript.Byte2: void <init>()>
<android.renderscript.Byte4: void <init>()>
<android.renderscript.Byte4: void <init>(byte,byte,byte,byte)>
<javax.xml.xpath.XPathException: void <init>(Throwable)>
<javax.xml.xpath.XPathException: void <init>(String)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setWpa2Passphrase(java.lang.String)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setIsAppInteractionRequired(boolean)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setIsUserInteractionRequired(boolean)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setIsHiddenSsid(boolean)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setBssid(android.net.MacAddress)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setWpa3EnterpriseConfig(android.net.wifi.WifiEnterpriseConfig)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setSsid(java.lang.String)>
<android.net.wifi.WifiNetworkSuggestion.Builder: void <init>()>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setWpa2EnterpriseConfig(android.net.wifi.WifiEnterpriseConfig)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setIsEnhancedOpen(boolean)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setIsMetered(boolean)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setWpa3Passphrase(java.lang.String)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion build()>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setPriority(int)>
<android.app.Notification.MediaStyle: android.app.Notification.MediaStyle setMediaSession(android.media.session.MediaSession.Token)>
<android.app.Notification.MediaStyle: android.app.Notification.MediaStyle setShowActionsInCompactView(int...)>
<android.app.Notification.MediaStyle: void <init>(android.app.Notification.Builder)>
<android.app.Notification.MediaStyle: void <init>()>
<android.net.sip.SipErrorCode: java.lang.String toString(int)>
<android.text.method.ArrowKeyMovementMethod: android.text.method.MovementMethod getInstance()>
<android.text.method.ArrowKeyMovementMethod: void <init>()>
<java.util.UnknownFormatFlagsException: void <init>(String)>
<java.util.UnknownFormatFlagsException: java.lang.String getFlags()>
<android.graphics.BitmapRegionDecoder: android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory.Options)>
<android.graphics.BitmapRegionDecoder: int getWidth()>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.lang.String,boolean)>
<android.graphics.BitmapRegionDecoder: boolean isRecycled()>
<android.graphics.BitmapRegionDecoder: void recycle()>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.InputStream,boolean)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(byte[],int,int,boolean)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.FileDescriptor,boolean)>
<android.graphics.BitmapRegionDecoder: int getHeight()>
<java.lang.NoSuchMethodError: void <init>(String)>
<java.lang.NoSuchMethodError: void <init>()>
<android.app.ProgressDialog: void setMax(int)>
<android.app.ProgressDialog: void setSecondaryProgress(int)>
<android.app.ProgressDialog: void incrementSecondaryProgressBy(int)>
<android.app.ProgressDialog: void setIndeterminate(boolean)>
<android.app.ProgressDialog: int getSecondaryProgress()>
<android.app.ProgressDialog: void <init>(android.content.Context,int)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,CharSequence,CharSequence,boolean)>
<android.app.ProgressDialog: void onStart()>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,CharSequence,CharSequence,boolean,boolean)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,CharSequence,CharSequence)>
<android.app.ProgressDialog: void setProgressPercentFormat(java.text.NumberFormat)>
<android.app.ProgressDialog: void incrementProgressBy(int)>
<android.app.ProgressDialog: boolean isIndeterminate()>
<android.app.ProgressDialog: void setProgress(int)>
<android.app.ProgressDialog: int getProgress()>
<android.app.ProgressDialog: void setProgressDrawable(android.graphics.drawable.Drawable)>
<android.app.ProgressDialog: void <init>(android.content.Context)>
<android.app.ProgressDialog: void setIndeterminateDrawable(android.graphics.drawable.Drawable)>
<android.app.ProgressDialog: void setProgressStyle(int)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,CharSequence,CharSequence,boolean,boolean,android.content.DialogInterface.OnCancelListener)>
<android.app.ProgressDialog: int getMax()>
<android.app.ProgressDialog: void setProgressNumberFormat(java.lang.String)>
<java.io.IOException: void <init>()>
<java.io.IOException: void <init>(Throwable)>
<java.io.IOException: void <init>(String,Throwable)>
<java.io.IOException: void <init>(String)>
<android.media.MediaPlayer.TrackInfo: android.media.MediaFormat getFormat()>
<android.media.MediaPlayer.TrackInfo: int getTrackType()>
<android.media.MediaPlayer.TrackInfo: java.lang.String getLanguage()>
<android.media.MediaPlayer.TrackInfo: int describeContents()>
<android.media.MediaPlayer.TrackInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.accessibility.AccessibilityNodeProvider: java.util.List findAccessibilityNodeInfosByText(java.lang.String,int)>
<android.view.accessibility.AccessibilityNodeProvider: void <init>()>
<android.view.accessibility.AccessibilityNodeProvider: void addExtraDataToAccessibilityNodeInfo(int,android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>
<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>
<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>
<android.view.accessibility.AccessibilityNodeProvider: boolean performAction(int,int,android.os.Bundle)>
<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>
<java.lang.ArrayIndexOutOfBoundsException: void <init>(String)>
<java.lang.ArrayIndexOutOfBoundsException: void <init>()>
<android.graphics.drawable.ScaleDrawable: void <init>(android.graphics.drawable.Drawable,int,float,float)>
<java.security.spec.DSAParameterSpec: java.math.BigInteger getP()>
<java.security.spec.DSAParameterSpec: java.math.BigInteger getQ()>
<java.security.spec.DSAParameterSpec: java.math.BigInteger getG()>
<java.security.spec.DSAParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
<java.util.jar.JarException: void <init>()>
<java.util.jar.JarException: void <init>(String)>
<java.nio.file.attribute.DosFileAttributes extends java.nio.file.attribute.BasicFileAttributes: boolean isReadOnly()>
<java.nio.file.attribute.DosFileAttributes extends java.nio.file.attribute.BasicFileAttributes: boolean isArchive()>
<java.nio.file.attribute.DosFileAttributes extends java.nio.file.attribute.BasicFileAttributes: boolean isHidden()>
<java.nio.file.attribute.DosFileAttributes extends java.nio.file.attribute.BasicFileAttributes: boolean isSystem()>
<java.text.NumberFormat.Field: void <init>(String)>
<java.util.stream.Stream.Builder extends java.util.function.Consumer: java.util.stream.Stream.Builder add(T)>
<java.util.stream.Stream.Builder extends java.util.function.Consumer: java.util.stream.Stream build()>
<java.security.spec.ECPoint: java.math.BigInteger getAffineX()>
<java.security.spec.ECPoint: java.math.BigInteger getAffineY()>
<java.security.spec.ECPoint: void <init>(java.math.BigInteger,java.math.BigInteger)>
<android.app.KeyguardManager.OnKeyguardExitResult: void onKeyguardExitResult(boolean)>
<android.hardware.hdmi.HdmiTvClient.InputChangeListener: void onChanged(android.hardware.hdmi.HdmiDeviceInfo)>
<android.media.Ringtone: void setLooping(boolean)>
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>
<android.media.Ringtone: void setStreamType(int)>
<android.media.Ringtone: boolean isLooping()>
<android.media.Ringtone: android.media.AudioAttributes getAudioAttributes()>
<android.media.Ringtone: void stop()>
<android.media.Ringtone: void finalize()>
<android.media.Ringtone: void setAudioAttributes(android.media.AudioAttributes)>
<android.media.Ringtone: float getVolume()>
<android.media.Ringtone: void setVolume(float)>
<android.media.Ringtone: int getStreamType()>
<android.media.Ringtone: boolean isPlaying()>
<android.media.Ringtone: void play()>
<org.xml.sax.SAXNotSupportedException: void <init>()>
<org.xml.sax.SAXNotSupportedException: void <init>(String)>
<android.view.textclassifier.TextClassifierEvent.LanguageDetectionEvent.Builder: void <init>(int)>
<android.view.textclassifier.TextClassifierEvent.LanguageDetectionEvent.Builder: android.view.textclassifier.TextClassifierEvent.LanguageDetectionEvent build()>
<android.content.pm.PackageManager: java.lang.String getWellbeingPackageName()>
<android.content.pm.PackageManager: android.content.pm.ModuleInfo getModuleInfo(java.lang.String,int)>
<android.content.pm.PackageManager: void <init>()>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityBanner(android.content.Intent)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getUserBadgedIcon(android.graphics.drawable.Drawable,android.os.UserHandle)>
<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)>
<android.content.pm.PackageManager: android.content.res.XmlResourceParser getXml(java.lang.String,@XmlResint,android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: boolean isPackageSuspended()>
<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String,int)>
<android.content.pm.PackageManager: void setApplicationCategoryHint(java.lang.String,int)>
<android.content.pm.PackageManager: boolean addPermission(android.content.pm.PermissionInfo)>
<android.content.pm.PackageManager: void updatePermissionFlags(java.lang.String,java.lang.String,@android.content.pm.PackageManager.PermissionFlagsint,@android.content.pm.PackageManager.PermissionFlagsint,android.os.UserHandle)>
<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: void revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)>
<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)>
<android.content.pm.PackageManager: java.lang.String[] setPackagesSuspended(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,java.lang.String)>
<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>
<android.content.pm.PackageManager: java.lang.String getInstallerPackageName(java.lang.String)>
<android.content.pm.PackageManager: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>
<android.content.pm.PackageManager: void verifyIntentFilter(int,int,java.util.List)>
<android.content.pm.PackageManager: java.lang.String[] getNamesForUids(int[])>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: boolean arePermissionsIndividuallyControlled()>
<android.content.pm.PackageManager: android.content.ComponentName getInstantAppInstallerComponent()>
<android.content.pm.PackageManager: java.util.Set getWhitelistedRestrictedPermissions(java.lang.String,int)>
<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)>
<android.content.pm.PackageManager: android.content.ComponentName getInstantAppResolverSettingsComponent()>
<android.content.pm.PackageManager: CharSequence getHarmfulAppWarning(java.lang.String)>
<android.content.pm.PackageManager: void setSyntheticAppDetailsActivityEnabled(java.lang.String,boolean)>
<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,int)>
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)>
<android.content.pm.PackageManager: java.util.List getInstalledModules(int)>
<android.content.pm.PackageManager: boolean isPackageSuspended(java.lang.String)>
<android.content.pm.PackageManager: void setHarmfulAppWarning(java.lang.String,CharSequence)>
<android.content.pm.PackageManager: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)>
<android.content.pm.PackageManager: boolean addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)>
<android.content.pm.PackageManager: java.lang.String getIncidentReportApproverPackageName()>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)>
<android.content.pm.PackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)>
<android.content.pm.PackageManager: void removePackageFromPreferred(java.lang.String)>
<android.content.pm.PackageManager: android.content.pm.ChangedPackages getChangedPackages(int)>
<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>
<android.content.pm.PackageManager: int getApplicationEnabledSetting(java.lang.String)>
<android.content.pm.PackageManager: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>
<android.content.pm.PackageManager: java.lang.String[] getSystemSharedLibraryNames()>
<android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>
<android.content.pm.PackageManager: java.util.List getAllIntentFilters(java.lang.String)>
<android.content.pm.PackageManager: java.lang.String[] setPackagesSuspended(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo)>
<android.content.pm.PackageManager: void addPackageToPreferred(java.lang.String)>
<android.content.pm.PackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>
<android.content.pm.PackageManager: boolean removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)>
<android.content.pm.PackageManager: java.lang.String getPermissionControllerPackageName()>
<android.content.pm.PackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)>
<android.content.pm.PackageManager: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>
<android.content.pm.PackageManager: int getComponentEnabledSetting(android.content.ComponentName)>
<android.content.pm.PackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>
<android.content.pm.PackageManager: int installExistingPackage(java.lang.String,int)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getUserBadgedDrawableForDensity(android.graphics.drawable.Drawable,android.os.UserHandle,android.graphics.Rect,int)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityBanner(android.content.ComponentName)>
<android.content.pm.PackageManager: void sendDeviceCustomizationReadyBroadcast()>
<android.content.pm.PackageManager: CharSequence getUserBadgedLabel(CharSequence,android.os.UserHandle)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,@DrawableResint,android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: boolean isDeviceUpgrading()>
<android.content.pm.PackageManager: int checkSignatures(int,int)>
<android.content.pm.PackageManager: boolean updateIntentVerificationStatusAsUser(java.lang.String,int,int)>
<android.content.pm.PackageManager: java.lang.String getDefaultBrowserPackageNameAsUser(int)>
<android.content.pm.PackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,android.os.UserHandle)>
<android.content.pm.PackageManager: boolean addPermissionAsync(android.content.pm.PermissionInfo)>
<android.content.pm.PackageManager: java.lang.String[] getUnsuspendablePackages(java.lang.String[])>
<android.content.pm.PackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>
<android.content.pm.PackageManager: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String)>
<android.content.pm.PackageManager: java.util.List getPackagesHoldingPermissions(java.lang.String[],int)>
<android.content.pm.PackageManager: int getIntentVerificationStatusAsUser(java.lang.String,int)>
<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>
<android.content.pm.PackageManager: void removeOnPermissionsChangeListener(android.content.pm.PackageManager.OnPermissionsChangedListener)>
<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String,int)>
<android.content.pm.PackageManager: int getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)>
<android.content.pm.PackageManager: java.lang.String getServicesSystemSharedLibraryPackageName()>
<android.content.pm.PackageManager: java.lang.String getNameForUid(int)>
<android.content.pm.PackageManager: boolean isInstantApp(java.lang.String)>
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>
<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationBanner(java.lang.String)>
<android.content.pm.PackageManager: java.util.List getAllPermissionGroups(int)>
<android.content.pm.PackageManager: java.util.List queryIntentContentProvidersAsUser(android.content.Intent,int,android.os.UserHandle)>
<android.content.pm.PackageManager: int getInstantAppCookieMaxBytes()>
<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>
<android.content.pm.PackageManager: void updatePermissionFlags(java.lang.String,java.lang.String,int,int,android.os.UserHandle)>
<android.content.pm.PackageManager: boolean isSafeMode()>
<android.content.pm.PackageManager: java.lang.String[] setDistractingPackageRestrictions(java.lang.String[],int)>
<android.content.pm.PackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>
<android.content.pm.PackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)>
<android.content.pm.PackageManager: android.os.Bundle getSuspendedPackageAppExtras()>
<android.content.pm.PackageManager: void removePermission(java.lang.String)>
<android.content.pm.PackageManager: void verifyPendingInstall(int,int)>
<android.content.pm.PackageManager: java.util.List getInstalledApplicationsAsUser(int,int)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>
<android.content.pm.PackageManager: void updateInstantAppCookie(byte[])>
<android.content.pm.PackageManager: java.util.List queryBroadcastReceiversAsUser(android.content.Intent,int,android.os.UserHandle)>
<android.content.pm.PackageManager: int checkSignatures(java.lang.String,java.lang.String)>
<android.content.pm.PackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)>
<android.content.pm.PackageManager: CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: int installExistingPackage(java.lang.String)>
<android.content.pm.PackageManager: void registerDexModule(java.lang.String,android.content.pm.PackageManager.DexModuleRegisterCallback)>
<android.content.pm.PackageManager: void replacePreferredActivity(android.content.IntentFilter,int,java.util.List,android.content.ComponentName)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int)>
<android.content.pm.PackageManager: void addOnPermissionsChangeListener(android.content.pm.PackageManager.OnPermissionsChangedListener)>
<android.content.pm.PackageManager: boolean canRequestPackageInstalls()>
<android.content.pm.PackageManager: android.content.res.Resources getResourcesForActivity(android.content.ComponentName)>
<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,android.os.UserHandle)>
<android.content.pm.PackageManager: int getInstallReason(java.lang.String,android.os.UserHandle)>
<android.content.pm.PackageManager: java.util.List queryInstrumentation(java.lang.String,int)>
<android.content.pm.PackageManager: java.util.List getInstalledPackagesAsUser(int,int)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationBanner(android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: void grantRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)>
<android.content.pm.PackageManager: boolean setDefaultBrowserPackageNameAsUser(java.lang.String,int)>
<android.content.pm.PackageManager: java.util.List getIntentFilterVerifications(java.lang.String)>
<android.content.pm.PackageManager: java.util.List getPreferredPackages(int)>
<android.content.pm.PackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)>
<android.content.pm.PackageManager: java.util.List getSharedLibraries(int)>
<android.content.pm.PackageManager: boolean getSyntheticAppDetailsActivityEnabled(java.lang.String)>
<android.content.pm.PackageManager: int getPackageUid(java.lang.String,int)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)>
<android.content.pm.PackageManager: boolean isInstantApp()>
<android.content.pm.PackageManager: java.util.List getDeclaredSharedLibraries(java.lang.String,int)>
<android.content.pm.PackageManager: byte[] getInstantAppCookie()>
<android.content.pm.PackageManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)>
<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String)>
<android.content.pm.PackageManager: java.util.List queryIntentActivitiesAsUser(android.content.Intent,int,android.os.UserHandle)>
<android.content.pm.PackageManager: boolean hasSigningCertificate(int,byte[],int)>
<android.content.pm.PackageManager: boolean hasSigningCertificate(java.lang.String,byte[],int)>
<android.content.pm.PackageManager: void clearPackagePreferredActivities(java.lang.String)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getInstantAppIcon(java.lang.String)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationLogo(java.lang.String)>
<android.content.pm.PackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>
<android.content.pm.PackageManager: android.content.Intent getLeanbackLaunchIntentForPackage(java.lang.String)>
<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>
<android.content.pm.PackageManager: java.util.List queryIntentContentProviders(android.content.Intent,int)>
<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>
<android.content.pm.PackageManager: java.lang.String getSharedSystemSharedLibraryPackageName()>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)>
<android.content.pm.PackageManager: void setInstallerPackageName(java.lang.String,java.lang.String)>
<android.content.pm.PackageManager: java.util.List queryPermissionsByGroup(java.lang.String,int)>
<android.content.pm.PackageManager: android.content.pm.dex.ArtManager getArtManager()>
<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)>
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage,int)>
<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>
<android.content.pm.PackageManager: CharSequence getText(java.lang.String,@StringResint,android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: void clearInstantAppCookie()>
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)>
<android.content.pm.PackageManager: void extendVerificationTimeout(int,int,long)>
<android.content.pm.PackageManager: java.util.List getInstantApps()>
<android.content.pm.PackageManager: void setUpdateAvailable(java.lang.String,boolean)>
<java.util.Date: void setSeconds(int)>
<java.util.Date: int getMinutes()>
<java.util.Date: int getDay()>
<java.util.Date: boolean after(java.util.Date)>
<java.util.Date: void setYear(int)>
<java.util.Date: long getTime()>
<java.util.Date: void <init>(int,int,int)>
<java.util.Date: boolean before(java.util.Date)>
<java.util.Date: java.time.Instant toInstant()>
<java.util.Date: int getYear()>
<java.util.Date: int getDate()>
<java.util.Date: void setDate(int)>
<java.util.Date: void setTime(long)>
<java.util.Date: void <init>(int,int,int,int,int,int)>
<java.util.Date: void <init>(String)>
<java.util.Date: void <init>(int,int,int,int,int)>
<java.util.Date: int compareTo(java.util.Date)>
<java.util.Date: void setHours(int)>
<java.util.Date: java.lang.String toGMTString()>
<java.util.Date: void setMonth(int)>
<java.util.Date: void setMinutes(int)>
<java.util.Date: void <init>()>
<java.util.Date: long UTC(int,int,int,int,int,int)>
<java.util.Date: java.lang.Object clone()>
<java.util.Date: int getSeconds()>
<java.util.Date: int getTimezoneOffset()>
<java.util.Date: java.lang.String toLocaleString()>
<java.util.Date: java.util.Date from(java.time.Instant)>
<java.util.Date: int getMonth()>
<java.util.Date: void <init>(long)>
<java.util.Date: long parse(java.lang.String)>
<java.util.Date: int getHours()>
<java.beans.PropertyChangeListenerProxy: void <init>(String,java.beans.PropertyChangeListener)>
<java.beans.PropertyChangeListenerProxy: java.lang.String getPropertyName()>
<java.beans.PropertyChangeListenerProxy: void propertyChange(java.beans.PropertyChangeEvent)>
<java.io.ObjectInputStream: int read()>
<java.io.ObjectInputStream: java.io.ObjectInputStream.GetField readFields()>
<java.io.ObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>
<java.io.ObjectInputStream: long readLong()>
<java.io.ObjectInputStream: char readChar()>
<java.io.ObjectInputStream: double readDouble()>
<java.io.ObjectInputStream: java.lang.String readUTF()>
<java.io.ObjectInputStream: java.lang.Object readUnshared()>
<java.io.ObjectInputStream: void <init>()>
<java.io.ObjectInputStream: void registerValidation(java.io.ObjectInputValidation,int)>
<java.io.ObjectInputStream: boolean enableResolveObject(boolean)>
<java.io.ObjectInputStream: int skipBytes(int)>
<java.io.ObjectInputStream: void <init>(java.io.InputStream)>
<java.io.ObjectInputStream: void readFully(byte[])>
<java.io.ObjectInputStream: short readShort()>
<java.io.ObjectInputStream: void defaultReadObject()>
<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDescriptor()>
<java.io.ObjectInputStream: int readInt()>
<java.io.ObjectInputStream: void readStreamHeader()>
<java.io.ObjectInputStream: boolean readBoolean()>
<java.io.ObjectInputStream: int readUnsignedByte()>
<java.io.ObjectInputStream: float readFloat()>
<java.io.ObjectInputStream: void readFully(byte[],int,int)>
<java.io.ObjectInputStream: int readUnsignedShort()>
<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
<java.io.ObjectInputStream: java.lang.Object resolveObject(java.lang.Object)>
<java.io.ObjectInputStream: java.lang.Object readObjectOverride()>
<java.io.ObjectInputStream: java.lang.String readLine()>
<java.io.ObjectInputStream: byte readByte()>
<java.io.ObjectInputStream: java.lang.Object readObject()>
<android.app.backup.BackupProgress: void writeToParcel(android.os.Parcel,int)>
<android.app.backup.BackupProgress: int describeContents()>
<android.app.backup.BackupProgress: void <init>(long,long)>
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setAlignment(android.text.Layout.Alignment)>
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setJustificationMode(int)>
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setBreakStrategy(int)>
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setIncludePad(boolean)>
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setEllipsizedWidth(int)>
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setHyphenationFrequency(int)>
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setTextDirection(android.text.TextDirectionHeuristic)>
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setUseLineSpacingFromFallbacks(boolean)>
<android.text.DynamicLayout.Builder: android.text.DynamicLayout build()>
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder obtain(CharSequence,android.text.TextPaint,int)>
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setEllipsize(android.text.TextUtils.TruncateAt)>
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setDisplayText(CharSequence)>
<android.text.DynamicLayout.Builder: android.text.DynamicLayout.Builder setLineSpacing(float,float)>
<java.util.Random: java.util.stream.IntStream ints(int,int)>
<java.util.Random: int nextInt(int)>
<java.util.Random: java.util.stream.IntStream ints(long,int,int)>
<java.util.Random: void nextBytes(byte[])>
<java.util.Random: java.util.stream.LongStream longs(long,long,long)>
<java.util.Random: java.util.stream.IntStream ints()>
<java.util.Random: java.util.stream.DoubleStream doubles(long,double,double)>
<java.util.Random: java.util.stream.LongStream longs(long,long)>
<java.util.Random: java.util.stream.DoubleStream doubles(double,double)>
<java.util.Random: double nextDouble()>
<java.util.Random: float nextFloat()>
<java.util.Random: void <init>()>
<java.util.Random: long nextLong()>
<java.util.Random: java.util.stream.LongStream longs(long)>
<java.util.Random: double nextGaussian()>
<java.util.Random: java.util.stream.DoubleStream doubles()>
<java.util.Random: int next(int)>
<java.util.Random: java.util.stream.DoubleStream doubles(long)>
<java.util.Random: void setSeed(long)>
<java.util.Random: java.util.stream.IntStream ints(long)>
<java.util.Random: int nextInt()>
<java.util.Random: java.util.stream.LongStream longs()>
<java.util.Random: void <init>(long)>
<java.util.Random: boolean nextBoolean()>
<android.view.ViewOverlay: void remove(android.graphics.drawable.Drawable)>
<android.view.ViewOverlay: void add(android.graphics.drawable.Drawable)>
<android.view.ViewOverlay: void clear()>
<android.net.LinkProperties: android.net.IpPrefix getNat64Prefix()>
<android.net.LinkProperties: void setTcpBufferSizes(java.lang.String)>
<android.net.LinkProperties: java.lang.String getPrivateDnsServerName()>
<android.net.LinkProperties: void setDomains(java.lang.String)>
<android.net.LinkProperties: void setValidatedPrivateDnsServers(java.util.Collection)>
<android.net.LinkProperties: java.util.List getDnsServers()>
<android.net.LinkProperties: boolean isReachable(java.net.InetAddress)>
<android.net.LinkProperties: void clear()>
<android.net.LinkProperties: void setPrivateDnsServerName(java.lang.String)>
<android.net.LinkProperties: int getMtu()>
<android.net.LinkProperties: void <init>(android.net.LinkProperties)>
<android.net.LinkProperties: void setNat64Prefix(android.net.IpPrefix)>
<android.net.LinkProperties: java.util.List getPcscfServers()>
<android.net.LinkProperties: void setLinkAddresses(java.util.Collection)>
<android.net.LinkProperties: java.lang.String getDomains()>
<android.net.LinkProperties: void setInterfaceName(java.lang.String)>
<android.net.LinkProperties: boolean hasIpv6DefaultRoute()>
<android.net.LinkProperties: boolean hasIpv4Address()>
<android.net.LinkProperties: java.lang.String getTcpBufferSizes()>
<android.net.LinkProperties: boolean hasGlobalIpv6Address()>
<android.net.LinkProperties: java.util.List getRoutes()>
<android.net.LinkProperties: boolean isProvisioned()>
<android.net.LinkProperties: int describeContents()>
<android.net.LinkProperties: boolean removeRoute(android.net.RouteInfo)>
<android.net.LinkProperties: boolean addLinkAddress(android.net.LinkAddress)>
<android.net.LinkProperties: android.net.ProxyInfo getHttpProxy()>
<android.net.LinkProperties: java.util.List getLinkAddresses()>
<android.net.LinkProperties: boolean addDnsServer(java.net.InetAddress)>
<android.net.LinkProperties: boolean removeLinkAddress(android.net.LinkAddress)>
<android.net.LinkProperties: void setMtu(int)>
<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>
<android.net.LinkProperties: void setPcscfServers(java.util.Collection)>
<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)>
<android.net.LinkProperties: java.lang.String getInterfaceName()>
<android.net.LinkProperties: boolean isIpv4Provisioned()>
<android.net.LinkProperties: boolean removeDnsServer(java.net.InetAddress)>
<android.net.LinkProperties: void setUsePrivateDns(boolean)>
<android.net.LinkProperties: java.util.List getValidatedPrivateDnsServers()>
<android.net.LinkProperties: void setDnsServers(java.util.Collection)>
<android.net.LinkProperties: boolean isPrivateDnsActive()>
<android.net.LinkProperties: boolean isIpv6Provisioned()>
<android.net.LinkProperties: void setHttpProxy(android.net.ProxyInfo)>
<android.net.LinkProperties: void <init>()>
<java.nio.channels.FileLock: java.nio.channels.Channel acquiredBy()>
<java.nio.channels.FileLock: void <init>(java.nio.channels.AsynchronousFileChannel,long,long,boolean)>
<java.nio.channels.FileLock: java.nio.channels.FileChannel channel()>
<java.nio.channels.FileLock: boolean isValid()>
<java.nio.channels.FileLock: void release()>
<java.nio.channels.FileLock: boolean isShared()>
<java.nio.channels.FileLock: boolean overlaps(long,long)>
<java.nio.channels.FileLock: void close()>
<java.nio.channels.FileLock: long size()>
<java.nio.channels.FileLock: void <init>(java.nio.channels.FileChannel,long,long,boolean)>
<java.nio.channels.FileLock: long position()>
<java.nio.channels.FileLock: java.lang.String toString()>
<android.app.usage.UsageStats: int getAppLaunchCount()>
<android.app.usage.UsageStats: long getFirstTimeStamp()>
<android.app.usage.UsageStats: long getTotalTimeInForeground()>
<android.app.usage.UsageStats: long getLastTimeStamp()>
<android.app.usage.UsageStats: void add(android.app.usage.UsageStats)>
<android.app.usage.UsageStats: long getTotalTimeForegroundServiceUsed()>
<android.app.usage.UsageStats: long getTotalTimeVisible()>
<android.app.usage.UsageStats: void <init>(android.app.usage.UsageStats)>
<android.app.usage.UsageStats: long getLastTimeUsed()>
<android.app.usage.UsageStats: long getLastTimeVisible()>
<android.app.usage.UsageStats: java.lang.String getPackageName()>
<android.app.usage.UsageStats: int describeContents()>
<android.app.usage.UsageStats: long getLastTimeForegroundServiceUsed()>
<android.app.usage.UsageStats: void writeToParcel(android.os.Parcel,int)>
<java.time.chrono.IsoChronology: java.time.LocalDate date(java.time.chrono.Era,int,int,int)>
<java.time.chrono.IsoChronology: java.time.LocalDate date(int,int,int)>
<java.time.chrono.IsoChronology: java.time.chrono.IsoEra of(int)>
<java.time.chrono.IsoChronology: java.time.LocalDate date(java.time.temporal.TemporalAccessor)>
<java.time.chrono.IsoChronology: java.time.Period period(int,int,int)>
<java.time.chrono.IsoChronology: java.time.ZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>
<java.time.chrono.IsoChronology: java.time.LocalDate dateEpochDay(long)>
<java.time.chrono.IsoChronology: boolean isLeapYear(long)>
<java.time.chrono.IsoChronology: java.time.LocalDate dateYearDay(java.time.chrono.Era,int,int)>
<java.time.chrono.IsoChronology: java.lang.String getId()>
<java.time.chrono.IsoChronology: java.time.LocalDate dateNow()>
<java.time.chrono.IsoChronology: java.time.LocalDate dateNow(java.time.Clock)>
<java.time.chrono.IsoChronology: java.util.List eras()>
<java.time.chrono.IsoChronology: java.time.chrono.IsoEra eraOf(int)>
<java.time.chrono.IsoChronology: java.time.ZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>
<java.time.chrono.IsoChronology: int getValue()>
<java.time.chrono.IsoChronology: java.time.LocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>
<java.time.chrono.IsoChronology: int prolepticYear(java.time.chrono.Era,int)>
<java.time.chrono.IsoChronology: java.time.LocalDate dateNow(java.time.ZoneId)>
<java.time.chrono.IsoChronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>
<java.time.chrono.IsoChronology: java.time.LocalDate dateYearDay(int,int)>
<java.time.chrono.IsoChronology: java.lang.String getCalendarType()>
<java.time.chrono.IsoChronology: java.time.LocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>
<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)>
<android.content.ContentResolver: android.net.Uri insert(@RequiresPermission.Writeandroid.net.Uri,android.content.ContentValues)>
<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(java.lang.String)>
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>
<android.content.ContentResolver: void requestSync(android.content.SyncRequest)>
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: void removeStatusChangeListener(java.lang.Object)>
<android.content.ContentResolver: void startSync(android.net.Uri,android.os.Bundle)>
<android.content.ContentResolver: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>
<android.content.ContentResolver: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)>
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,int)>
<android.content.ContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)>
<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri)>
<android.content.ContentResolver: android.net.Uri canonicalize(android.net.Uri)>
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentResolver: java.util.List getPersistedUriPermissions()>
<android.content.ContentResolver: android.database.Cursor query(@RequiresPermission.Readandroid.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentResolver: android.content.ContentResolver.MimeTypeInfo getTypeInfo(java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(@RequiresPermission.Readandroid.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.content.ContentResolver: void cancelSync(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: java.util.List getCurrentSyncs()>
<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>
<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()>
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: int bulkInsert(@RequiresPermission.Writeandroid.net.Uri,android.content.ContentValues[])>
<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>
<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>
<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.content.ContentResolver: android.content.ContentResolver wrap(android.content.ContentProvider)>
<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(java.lang.String)>
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: void validateSyncExtrasBundle(android.os.Bundle)>
<android.content.ContentResolver: java.util.List getOutgoingPersistedUriPermissions()>
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(@RequiresPermission.Readandroid.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: boolean getMasterSyncAutomatically()>
<android.content.ContentResolver: void putCache(android.net.Uri,android.os.Bundle)>
<android.content.ContentResolver: void <init>(android.content.Context)>
<android.content.ContentResolver: android.os.Bundle call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.content.ContentResolver: java.lang.String getType(android.net.Uri)>
<android.content.ContentResolver: int delete(@RequiresPermission.Writeandroid.net.Uri,java.lang.String,java.lang.String[])>
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>
<android.content.ContentResolver: void releasePersistableUriPermission(android.net.Uri,int)>
<android.content.ContentResolver: void cancelSync(android.content.SyncRequest)>
<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri)>
<android.content.ContentResolver: android.content.ContentResolver wrap(android.content.ContentProviderClient)>
<android.content.ContentResolver: java.lang.String[] getSyncAdapterPackagesForAuthorityAsUser(java.lang.String,int)>
<android.content.ContentResolver: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentResolver: android.graphics.Bitmap loadThumbnail(android.net.Uri,android.util.Size,android.os.CancellationSignal)>
<android.content.ContentResolver: void cancelSync(android.net.Uri)>
<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: android.os.Bundle getCache(android.net.Uri)>
<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(android.net.Uri)>
<android.content.ContentResolver: int update(@RequiresPermission.Writeandroid.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>
<android.content.ContentResolver: android.net.Uri uncanonicalize(android.net.Uri)>
<android.content.ContentResolver: java.lang.Object addStatusChangeListener(int,android.content.SyncStatusObserver)>
<android.content.ContentResolver: void takePersistableUriPermission(android.net.Uri,int)>
<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>
<android.content.ContentResolver: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<android.view.animation.GridLayoutAnimationController: float getColumnDelay()>
<android.view.animation.GridLayoutAnimationController: void setDirection(int)>
<android.view.animation.GridLayoutAnimationController: int getDirection()>
<android.view.animation.GridLayoutAnimationController: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.GridLayoutAnimationController: int getDirectionPriority()>
<android.view.animation.GridLayoutAnimationController: void setColumnDelay(float)>
<android.view.animation.GridLayoutAnimationController: float getRowDelay()>
<android.view.animation.GridLayoutAnimationController: void setDirectionPriority(int)>
<android.view.animation.GridLayoutAnimationController: void <init>(android.view.animation.Animation,float,float)>
<android.view.animation.GridLayoutAnimationController: void setRowDelay(float)>
<android.view.animation.GridLayoutAnimationController: void <init>(android.view.animation.Animation)>
<android.telecom.InCallService.VideoCall.Callback: void <init>()>
<android.telecom.InCallService.VideoCall.Callback: void onCallSessionEvent(int)>
<android.telecom.InCallService.VideoCall.Callback: void onSessionModifyResponseReceived(int,android.telecom.VideoProfile,android.telecom.VideoProfile)>
<android.telecom.InCallService.VideoCall.Callback: void onVideoQualityChanged(int)>
<android.telecom.InCallService.VideoCall.Callback: void onPeerDimensionsChanged(int,int)>
<android.telecom.InCallService.VideoCall.Callback: void onSessionModifyRequestReceived(android.telecom.VideoProfile)>
<android.telecom.InCallService.VideoCall.Callback: void onCameraCapabilitiesChanged(android.telecom.VideoProfile.CameraCapabilities)>
<android.telecom.InCallService.VideoCall.Callback: void onCallDataUsageChanged(long)>
<android.app.job.JobInfo: android.content.ClipData getClipData()>
<android.app.job.JobInfo: long getEstimatedNetworkDownloadBytes()>
<android.app.job.JobInfo: long getMinFlexMillis()>
<android.app.job.JobInfo: boolean isRequireBatteryNotLow()>
<android.app.job.JobInfo: android.content.ComponentName getService()>
<android.app.job.JobInfo: android.os.PersistableBundle getExtras()>
<android.app.job.JobInfo: long getTriggerContentUpdateDelay()>
<android.app.job.JobInfo: boolean isRequireStorageNotLow()>
<android.app.job.JobInfo: int getId()>
<android.app.job.JobInfo: boolean isPersisted()>
<android.app.job.JobInfo: boolean isPrefetch()>
<android.app.job.JobInfo: long getTriggerContentMaxDelay()>
<android.app.job.JobInfo: int describeContents()>
<android.app.job.JobInfo: android.os.Bundle getTransientExtras()>
<android.app.job.JobInfo: android.app.job.JobInfo.TriggerContentUri[] getTriggerContentUris()>
<android.app.job.JobInfo: android.net.NetworkRequest getRequiredNetwork()>
<android.app.job.JobInfo: boolean isRequireDeviceIdle()>
<android.app.job.JobInfo: long getMinLatencyMillis()>
<android.app.job.JobInfo: boolean isImportantWhileForeground()>
<android.app.job.JobInfo: int getNetworkType()>
<android.app.job.JobInfo: long getMaxExecutionDelayMillis()>
<android.app.job.JobInfo: boolean isRequireCharging()>
<android.app.job.JobInfo: int getBackoffPolicy()>
<android.app.job.JobInfo: long getFlexMillis()>
<android.app.job.JobInfo: long getIntervalMillis()>
<android.app.job.JobInfo: boolean isPeriodic()>
<android.app.job.JobInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.job.JobInfo: long getEstimatedNetworkUploadBytes()>
<android.app.job.JobInfo: long getMinPeriodMillis()>
<android.app.job.JobInfo: long getInitialBackoffMillis()>
<android.app.job.JobInfo: int getClipGrantFlags()>
<android.media.audiofx.BassBoost: void setParameterListener(android.media.audiofx.BassBoost.OnParameterChangeListener)>
<android.media.audiofx.BassBoost: short getRoundedStrength()>
<android.media.audiofx.BassBoost: void setStrength(short)>
<android.media.audiofx.BassBoost: void <init>(int,int)>
<android.media.audiofx.BassBoost: boolean getStrengthSupported()>
<android.media.audiofx.BassBoost: void setProperties(android.media.audiofx.BassBoost.Settings)>
<android.media.audiofx.BassBoost: android.media.audiofx.BassBoost.Settings getProperties()>
<android.security.KeyStoreParameter.Builder: void <init>(android.content.Context)>
<android.security.KeyStoreParameter.Builder: android.security.KeyStoreParameter.Builder setEncryptionRequired(boolean)>
<android.security.KeyStoreParameter.Builder: android.security.KeyStoreParameter build()>
<android.security.keystore.WrappedKeyEntry: void <init>(byte[],String,String,java.security.spec.AlgorithmParameterSpec)>
<android.security.keystore.WrappedKeyEntry: byte[] getWrappedKeyBytes()>
<android.security.keystore.WrappedKeyEntry: java.lang.String getWrappingKeyAlias()>
<android.security.keystore.WrappedKeyEntry: java.lang.String getTransformation()>
<android.security.keystore.WrappedKeyEntry: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()>
<java.util.logging.SocketHandler: void <init>(String,int)>
<java.util.logging.SocketHandler: void <init>()>
<java.util.zip.ZipEntry: java.lang.String getComment()>
<java.util.zip.ZipEntry: void setCrc(long)>
<java.util.zip.ZipEntry: void setMethod(int)>
<java.util.zip.ZipEntry: long getCrc()>
<java.util.zip.ZipEntry: void <init>(String)>
<java.util.zip.ZipEntry: long getCompressedSize()>
<java.util.zip.ZipEntry: void setCompressedSize(long)>
<java.util.zip.ZipEntry: java.nio.file.attribute.FileTime getCreationTime()>
<java.util.zip.ZipEntry: java.nio.file.attribute.FileTime getLastModifiedTime()>
<java.util.zip.ZipEntry: byte[] getExtra()>
<java.util.zip.ZipEntry: void <init>(java.util.zip.ZipEntry)>
<java.util.zip.ZipEntry: long getTime()>
<java.util.zip.ZipEntry: java.util.zip.ZipEntry setCreationTime(java.nio.file.attribute.FileTime)>
<java.util.zip.ZipEntry: void setTime(long)>
<java.util.zip.ZipEntry: void setSize(long)>
<java.util.zip.ZipEntry: java.nio.file.attribute.FileTime getLastAccessTime()>
<java.util.zip.ZipEntry: java.util.zip.ZipEntry setLastModifiedTime(java.nio.file.attribute.FileTime)>
<java.util.zip.ZipEntry: boolean isDirectory()>
<java.util.zip.ZipEntry: void setExtra(byte[])>
<java.util.zip.ZipEntry: java.lang.Object clone()>
<java.util.zip.ZipEntry: java.util.zip.ZipEntry setLastAccessTime(java.nio.file.attribute.FileTime)>
<java.util.zip.ZipEntry: java.lang.String getName()>
<java.util.zip.ZipEntry: void setComment(java.lang.String)>
<java.util.zip.ZipEntry: int getMethod()>
<java.util.zip.ZipEntry: long getSize()>
<java.nio.file.SimpleFileVisitor: java.nio.file.FileVisitResult visitFile(T,java.nio.file.attribute.BasicFileAttributes)>
<java.nio.file.SimpleFileVisitor: void <init>()>
<java.nio.file.SimpleFileVisitor: java.nio.file.FileVisitResult postVisitDirectory(T,java.io.IOException)>
<java.nio.file.SimpleFileVisitor: java.nio.file.FileVisitResult preVisitDirectory(T,java.nio.file.attribute.BasicFileAttributes)>
<java.nio.file.SimpleFileVisitor: java.nio.file.FileVisitResult visitFileFailed(T,java.io.IOException)>
<android.renderscript.BaseObj: void destroy()>
<android.renderscript.BaseObj: java.lang.String getName()>
<android.renderscript.BaseObj: void setName(java.lang.String)>
<android.widget.AdapterViewAnimator: boolean onRemoteAdapterConnected()>
<android.widget.AdapterViewAnimator: android.view.View getCurrentView()>
<android.widget.AdapterViewAnimator: void onRemoteAdapterDisconnected()>
<android.widget.AdapterViewAnimator: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AdapterViewAnimator: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.AdapterViewAnimator: void deferNotifyDataSetChanged()>
<android.widget.AdapterViewAnimator: void onRestoreInstanceState(android.os.Parcelable)>
<android.widget.AdapterViewAnimator: void setInAnimation(android.content.Context,int)>
<android.widget.AdapterViewAnimator: void <init>(android.content.Context)>
<android.widget.AdapterViewAnimator: void setAnimateFirstView(boolean)>
<android.widget.AdapterViewAnimator: void setInAnimation(android.animation.ObjectAnimator)>
<android.widget.AdapterViewAnimator: void setDisplayedChild(int)>
<android.widget.AdapterViewAnimator: int getDisplayedChild()>
<android.widget.AdapterViewAnimator: void setSelection(int)>
<android.widget.AdapterViewAnimator: void showPrevious()>
<android.widget.AdapterViewAnimator: void setRemoteViewsAdapter(android.content.Intent)>
<android.widget.AdapterViewAnimator: android.view.View getSelectedView()>
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getInAnimation()>
<android.widget.AdapterViewAnimator: android.os.Parcelable onSaveInstanceState()>
<android.widget.AdapterViewAnimator: android.widget.Adapter getAdapter()>
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getOutAnimation()>
<android.widget.AdapterViewAnimator: void advance()>
<android.widget.AdapterViewAnimator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AdapterViewAnimator: void fyiWillBeAdvancedByHostKThx()>
<android.widget.AdapterViewAnimator: void setOutAnimation(android.animation.ObjectAnimator)>
<android.widget.AdapterViewAnimator: void showNext()>
<android.widget.AdapterViewAnimator: void setOutAnimation(android.content.Context,int)>
<android.widget.AdapterViewAnimator: void setAdapter(android.widget.Adapter)>
<android.media.midi.MidiManager: void unregisterDeviceCallback(android.media.midi.MidiManager.DeviceCallback)>
<android.media.midi.MidiManager: void openDevice(android.media.midi.MidiDeviceInfo,android.media.midi.MidiManager.OnDeviceOpenedListener,android.os.Handler)>
<android.media.midi.MidiManager: android.media.midi.MidiDeviceInfo[] getDevices()>
<android.media.midi.MidiManager: void registerDeviceCallback(android.media.midi.MidiManager.DeviceCallback,android.os.Handler)>
<android.media.midi.MidiManager: void openBluetoothDevice(android.bluetooth.BluetoothDevice,android.media.midi.MidiManager.OnDeviceOpenedListener,android.os.Handler)>
<android.hardware.camera2.params.SessionConfiguration: int describeContents()>
<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.params.InputConfiguration getInputConfiguration()>
<android.hardware.camera2.params.SessionConfiguration: void setInputConfiguration(android.hardware.camera2.params.InputConfiguration)>
<android.hardware.camera2.params.SessionConfiguration: void writeToParcel(android.os.Parcel,int)>
<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.CaptureRequest getSessionParameters()>
<android.hardware.camera2.params.SessionConfiguration: java.util.List getOutputConfigurations()>
<android.hardware.camera2.params.SessionConfiguration: int getSessionType()>
<android.hardware.camera2.params.SessionConfiguration: void <init>(int,java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession.StateCallback)>
<android.hardware.camera2.params.SessionConfiguration: java.util.concurrent.Executor getExecutor()>
<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.CameraCaptureSession.StateCallback getStateCallback()>
<android.hardware.camera2.params.SessionConfiguration: void setSessionParameters(android.hardware.camera2.CaptureRequest)>
<android.widget.ActionMenuView.OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>
<java.lang.ProcessBuilder.Redirect: java.lang.ProcessBuilder.Redirect from(java.io.File)>
<java.lang.ProcessBuilder.Redirect: java.lang.ProcessBuilder.Redirect to(java.io.File)>
<java.lang.ProcessBuilder.Redirect: java.io.File file()>
<java.lang.ProcessBuilder.Redirect: java.lang.ProcessBuilder.Redirect appendTo(java.io.File)>
<java.lang.ProcessBuilder.Redirect: java.lang.ProcessBuilder.Redirect.Type type()>
<android.hardware.fingerprint.FingerprintManager: void authenticate(android.hardware.fingerprint.FingerprintManager.CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager.AuthenticationCallback,android.os.Handler)>
<android.hardware.fingerprint.FingerprintManager: boolean hasEnrolledFingerprints()>
<android.hardware.fingerprint.FingerprintManager: boolean isHardwareDetected()>
<java.lang.ref.Reference: boolean enqueue()>
<java.lang.ref.Reference: void clear()>
<java.lang.ref.Reference: void reachabilityFence(java.lang.Object)>
<java.lang.ref.Reference: T get()>
<java.lang.ref.Reference: boolean isEnqueued()>
<android.app.AliasActivity: void <init>()>
<android.hardware.Camera.Area: void <init>(android.graphics.Rect,int)>
<android.view.ViewTreeObserver.OnScrollChangedListener: void onScrollChanged()>
<java.io.CharConversionException: void <init>(String)>
<java.io.CharConversionException: void <init>()>
<android.inputmethodservice.InputMethodService.InputMethodSessionImpl: void viewClicked(boolean)>
<android.inputmethodservice.InputMethodService.InputMethodSessionImpl: void updateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)>
<android.inputmethodservice.InputMethodService.InputMethodSessionImpl: void finishInput()>
<android.inputmethodservice.InputMethodService.InputMethodSessionImpl: void updateCursor(android.graphics.Rect)>
<android.inputmethodservice.InputMethodService.InputMethodSessionImpl: void displayCompletions(android.view.inputmethod.CompletionInfo[])>
<android.inputmethodservice.InputMethodService.InputMethodSessionImpl: void <init>()>
<android.inputmethodservice.InputMethodService.InputMethodSessionImpl: void updateExtractedText(int,android.view.inputmethod.ExtractedText)>
<android.inputmethodservice.InputMethodService.InputMethodSessionImpl: void updateSelection(int,int,int,int,int,int)>
<android.inputmethodservice.InputMethodService.InputMethodSessionImpl: void appPrivateCommand(java.lang.String,android.os.Bundle)>
<android.inputmethodservice.InputMethodService.InputMethodSessionImpl: void toggleSoftInput(int,int)>
<java.util.jar.Pack200: java.util.jar.Pack200.Unpacker newUnpacker()>
<java.util.jar.Pack200: java.util.jar.Pack200.Packer newPacker()>
<java.security.cert.CertSelector extends java.lang.Cloneable: java.lang.Object clone()>
<java.security.cert.CertSelector extends java.lang.Cloneable: boolean match(java.security.cert.Certificate)>
<org.apache.http.conn.scheme.SocketFactory: java.net.Socket createSocket()>
<org.apache.http.conn.scheme.SocketFactory: boolean isSecure(java.net.Socket)>
<org.apache.http.conn.scheme.SocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>
<android.text.style.LineHeightSpan extends android.text.style.ParagraphStyle android.text.style.WrapTogetherSpan: void chooseHeight(CharSequence,int,int,int,int,android.graphics.Paint.FontMetricsInt)>
<android.os.image.DynamicSystemClient.OnStatusChangedListener: void onStatusChanged(int,int,long,java.lang.Throwable)>
<android.content.Loader: boolean isAbandoned()>
<android.content.Loader: void rollbackContentChanged()>
<android.content.Loader: void registerOnLoadCanceledListener(android.content.Loader.OnLoadCanceledListener)>
<android.content.Loader: void commitContentChanged()>
<android.content.Loader: boolean takeContentChanged()>
<android.content.Loader: int getId()>
<android.content.Loader: boolean isReset()>
<android.content.Loader: java.lang.String dataToString(D)>
<android.content.Loader: boolean isStarted()>
<android.content.Loader: void onReset()>
<android.content.Loader: void onAbandon()>
<android.content.Loader: void onContentChanged()>
<android.content.Loader: void abandon()>
<android.content.Loader: void deliverResult(D)>
<android.content.Loader: void onStartLoading()>
<android.content.Loader: void onStopLoading()>
<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.content.Loader: void <init>(android.content.Context)>
<android.content.Loader: void startLoading()>
<android.content.Loader: boolean cancelLoad()>
<android.content.Loader: void unregisterListener(android.content.Loader.OnLoadCompleteListener)>
<android.content.Loader: boolean onCancelLoad()>
<android.content.Loader: void reset()>
<android.content.Loader: void stopLoading()>
<android.content.Loader: void forceLoad()>
<android.content.Loader: void onForceLoad()>
<android.content.Loader: void unregisterOnLoadCanceledListener(android.content.Loader.OnLoadCanceledListener)>
<android.content.Loader: void deliverCancellation()>
<android.content.Loader: void registerListener(int,android.content.Loader.OnLoadCompleteListener)>
<android.content.Loader: android.content.Context getContext()>
<java.util.concurrent.LinkedTransferQueue: boolean hasWaitingConsumer()>
<java.util.concurrent.LinkedTransferQueue: java.util.Iterator iterator()>
<java.util.concurrent.LinkedTransferQueue: E take()>
<java.util.concurrent.LinkedTransferQueue: boolean offer(E)>
<java.util.concurrent.LinkedTransferQueue: E poll()>
<java.util.concurrent.LinkedTransferQueue: boolean tryTransfer(E)>
<java.util.concurrent.LinkedTransferQueue: void <init>(java.util.Collection)>
<java.util.concurrent.LinkedTransferQueue: boolean offer(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedTransferQueue: void <init>()>
<java.util.concurrent.LinkedTransferQueue: int drainTo(java.util.Collection)>
<java.util.concurrent.LinkedTransferQueue: int remainingCapacity()>
<java.util.concurrent.LinkedTransferQueue: void put(E)>
<java.util.concurrent.LinkedTransferQueue: int drainTo(java.util.Collection,int)>
<java.util.concurrent.LinkedTransferQueue: int getWaitingConsumerCount()>
<java.util.concurrent.LinkedTransferQueue: int size()>
<java.util.concurrent.LinkedTransferQueue: void transfer(E)>
<java.util.concurrent.LinkedTransferQueue: E poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedTransferQueue: boolean tryTransfer(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedTransferQueue: E peek()>
<android.telephony.mbms.FileInfo: int describeContents()>
<android.telephony.mbms.FileInfo: java.lang.String getMimeType()>
<android.telephony.mbms.FileInfo: void <init>(android.net.Uri,String)>
<android.telephony.mbms.FileInfo: android.net.Uri getUri()>
<android.telephony.mbms.FileInfo: void writeToParcel(android.os.Parcel,int)>
<android.icu.lang.UCharacterDirection: java.lang.String toString(int)>
<android.provider.CalendarContract.CalendarEntity: android.content.EntityIterator newEntityIterator(android.database.Cursor)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setDisableOptionalSensors(boolean)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setLocationMode(int)>
<android.os.BatterySaverPolicyConfig.Builder: void <init>()>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setAdvertiseIsEnabled(boolean)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setDisableLaunchBoost(boolean)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig build()>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setDisableAod(boolean)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setAdjustBrightnessFactor(float)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setDisableSoundTrigger(boolean)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setEnableQuickDoze(boolean)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setForceBackgroundCheck(boolean)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setDeferKeyValueBackup(boolean)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setForceAllAppsStandby(boolean)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setEnableFirewall(boolean)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setEnableNightMode(boolean)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setDeferFullBackup(boolean)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setEnableAdjustBrightness(boolean)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setDisableVibration(boolean)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setDisableAnimation(boolean)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder setEnableDataSaver(boolean)>
<android.os.BatterySaverPolicyConfig.Builder: android.os.BatterySaverPolicyConfig.Builder addDeviceSpecificSetting(java.lang.String,java.lang.String)>
<android.provider.Contacts.Intents.UI: void <init>()>
<android.content.pm.PackageInstaller.SessionInfo: boolean getDontKillApp()>
<android.content.pm.PackageInstaller.SessionInfo: CharSequence getAppLabel()>
<android.content.pm.PackageInstaller.SessionInfo: android.graphics.Bitmap getAppIcon()>
<android.content.pm.PackageInstaller.SessionInfo: boolean isStagedSessionApplied()>
<android.content.pm.PackageInstaller.SessionInfo: boolean getAllowDowngrade()>
<android.content.pm.PackageInstaller.SessionInfo: android.net.Uri getReferrerUri()>
<android.content.pm.PackageInstaller.SessionInfo: int getInstallLocation()>
<android.content.pm.PackageInstaller.SessionInfo: boolean getInstallAsVirtualPreload()>
<android.content.pm.PackageInstaller.SessionInfo: boolean isMultiPackage()>
<android.content.pm.PackageInstaller.SessionInfo: android.content.Intent createDetailsIntent()>
<android.content.pm.PackageInstaller.SessionInfo: int describeContents()>
<android.content.pm.PackageInstaller.SessionInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageInstaller.SessionInfo: int getParentSessionId()>
<android.content.pm.PackageInstaller.SessionInfo: java.lang.String getAppPackageName()>
<android.content.pm.PackageInstaller.SessionInfo: android.os.UserHandle getUser()>
<android.content.pm.PackageInstaller.SessionInfo: boolean getAllocateAggressive()>
<android.content.pm.PackageInstaller.SessionInfo: boolean isStagedSessionFailed()>
<android.content.pm.PackageInstaller.SessionInfo: int getInstallReason()>
<android.content.pm.PackageInstaller.SessionInfo: float getProgress()>
<android.content.pm.PackageInstaller.SessionInfo: java.lang.String getStagedSessionErrorMessage()>
<android.content.pm.PackageInstaller.SessionInfo: java.lang.String[] getGrantedRuntimePermissions()>
<android.content.pm.PackageInstaller.SessionInfo: boolean isSealed()>
<android.content.pm.PackageInstaller.SessionInfo: java.lang.String getInstallerPackageName()>
<android.content.pm.PackageInstaller.SessionInfo: boolean getEnableRollback()>
<android.content.pm.PackageInstaller.SessionInfo: int getMode()>
<android.content.pm.PackageInstaller.SessionInfo: int getSessionId()>
<android.content.pm.PackageInstaller.SessionInfo: int getOriginatingUid()>
<android.content.pm.PackageInstaller.SessionInfo: boolean isActive()>
<android.content.pm.PackageInstaller.SessionInfo: boolean getInstallAsFullApp(boolean)>
<android.content.pm.PackageInstaller.SessionInfo: boolean isStagedSessionReady()>
<android.content.pm.PackageInstaller.SessionInfo: android.net.Uri getOriginatingUri()>
<android.content.pm.PackageInstaller.SessionInfo: int getStagedSessionErrorCode()>
<android.content.pm.PackageInstaller.SessionInfo: int[] getChildSessionIds()>
<android.content.pm.PackageInstaller.SessionInfo: boolean isStaged()>
<android.content.pm.PackageInstaller.SessionInfo: boolean getRequestDowngrade()>
<android.content.pm.PackageInstaller.SessionInfo: long getUpdatedMillis()>
<android.content.pm.PackageInstaller.SessionInfo: java.util.Set getWhitelistedRestrictedPermissions()>
<android.content.pm.PackageInstaller.SessionInfo: long getSize()>
<android.content.pm.PackageInstaller.SessionInfo: boolean getInstallAsInstantApp(boolean)>
<android.content.pm.PackageInstaller.SessionInfo: boolean isCommitted()>
<android.net.wifi.WifiScanner.WifiChangeSettings: void <init>()>
<android.nfc.NfcAdapter.NfcUnlockHandler: boolean onUnlockAttempted(android.nfc.Tag)>
<android.bluetooth.le.ScanSettings: boolean getLegacy()>
<android.bluetooth.le.ScanSettings: long getReportDelayMillis()>
<android.bluetooth.le.ScanSettings: int getScanMode()>
<android.bluetooth.le.ScanSettings: int getScanResultType()>
<android.bluetooth.le.ScanSettings: void writeToParcel(android.os.Parcel,int)>
<android.bluetooth.le.ScanSettings: int describeContents()>
<android.bluetooth.le.ScanSettings: int getCallbackType()>
<android.bluetooth.le.ScanSettings: int getPhy()>
<android.app.PictureInPictureParams.Builder: void <init>()>
<android.app.PictureInPictureParams.Builder: android.app.PictureInPictureParams.Builder setActions(java.util.List)>
<android.app.PictureInPictureParams.Builder: android.app.PictureInPictureParams.Builder setAspectRatio(android.util.Rational)>
<android.app.PictureInPictureParams.Builder: android.app.PictureInPictureParams build()>
<android.app.PictureInPictureParams.Builder: android.app.PictureInPictureParams.Builder setSourceRectHint(android.graphics.Rect)>
<java.sql.ParameterMetaData extends java.sql.Wrapper: java.lang.String getParameterTypeName(int)>
<java.sql.ParameterMetaData extends java.sql.Wrapper: int getParameterCount()>
<java.sql.ParameterMetaData extends java.sql.Wrapper: int getParameterType(int)>
<java.sql.ParameterMetaData extends java.sql.Wrapper: int getScale(int)>
<java.sql.ParameterMetaData extends java.sql.Wrapper: int isNullable(int)>
<java.sql.ParameterMetaData extends java.sql.Wrapper: java.lang.String getParameterClassName(int)>
<java.sql.ParameterMetaData extends java.sql.Wrapper: int getParameterMode(int)>
<java.sql.ParameterMetaData extends java.sql.Wrapper: int getPrecision(int)>
<java.sql.ParameterMetaData extends java.sql.Wrapper: boolean isSigned(int)>
<android.app.DatePickerDialog.OnDateSetListener: void onDateSet(android.widget.DatePicker,int,int,int)>
<android.database.Cursor extends java.io.Closeable: android.net.Uri getNotificationUri()>
<android.database.Cursor extends java.io.Closeable: void close()>
<android.database.Cursor extends java.io.Closeable: java.lang.String[] getColumnNames()>
<android.database.Cursor extends java.io.Closeable: byte[] getBlob(int)>
<android.database.Cursor extends java.io.Closeable: int getType(int)>
<android.database.Cursor extends java.io.Closeable: int getInt(int)>
<android.database.Cursor extends java.io.Closeable: boolean isLast()>
<android.database.Cursor extends java.io.Closeable: boolean moveToFirst()>
<android.database.Cursor extends java.io.Closeable: android.os.Bundle getExtras()>
<android.database.Cursor extends java.io.Closeable: boolean requery()>
<android.database.Cursor extends java.io.Closeable: void registerDataSetObserver(android.database.DataSetObserver)>
<android.database.Cursor extends java.io.Closeable: boolean moveToPrevious()>
<android.database.Cursor extends java.io.Closeable: void unregisterContentObserver(android.database.ContentObserver)>
<android.database.Cursor extends java.io.Closeable: float getFloat(int)>
<android.database.Cursor extends java.io.Closeable: boolean isAfterLast()>
<android.database.Cursor extends java.io.Closeable: short getShort(int)>
<android.database.Cursor extends java.io.Closeable: void copyStringToBuffer(int,android.database.CharArrayBuffer)>
<android.database.Cursor extends java.io.Closeable: java.lang.String getString(int)>
<android.database.Cursor extends java.io.Closeable: boolean moveToPosition(int)>
<android.database.Cursor extends java.io.Closeable: boolean isNull(int)>
<android.database.Cursor extends java.io.Closeable: double getDouble(int)>
<android.database.Cursor extends java.io.Closeable: boolean moveToNext()>
<android.database.Cursor extends java.io.Closeable: int getColumnCount()>
<android.database.Cursor extends java.io.Closeable: int getColumnIndexOrThrow(java.lang.String)>
<android.database.Cursor extends java.io.Closeable: boolean isFirst()>
<android.database.Cursor extends java.io.Closeable: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>
<android.database.Cursor extends java.io.Closeable: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.database.Cursor extends java.io.Closeable: void registerContentObserver(android.database.ContentObserver)>
<android.database.Cursor extends java.io.Closeable: int getColumnIndex(java.lang.String)>
<android.database.Cursor extends java.io.Closeable: java.lang.String getColumnName(int)>
<android.database.Cursor extends java.io.Closeable: boolean isBeforeFirst()>
<android.database.Cursor extends java.io.Closeable: boolean isClosed()>
<android.database.Cursor extends java.io.Closeable: void setNotificationUris(android.content.ContentResolver,java.util.List)>
<android.database.Cursor extends java.io.Closeable: void deactivate()>
<android.database.Cursor extends java.io.Closeable: int getPosition()>
<android.database.Cursor extends java.io.Closeable: java.util.List getNotificationUris()>
<android.database.Cursor extends java.io.Closeable: boolean getWantsAllOnMoveCalls()>
<android.database.Cursor extends java.io.Closeable: int getCount()>
<android.database.Cursor extends java.io.Closeable: android.os.Bundle respond(android.os.Bundle)>
<android.database.Cursor extends java.io.Closeable: long getLong(int)>
<android.database.Cursor extends java.io.Closeable: boolean moveToLast()>
<android.database.Cursor extends java.io.Closeable: void setExtras(android.os.Bundle)>
<android.database.Cursor extends java.io.Closeable: boolean move(int)>
<android.graphics.ComposePathEffect: void <init>(android.graphics.PathEffect,android.graphics.PathEffect)>
<java.lang.annotation.IncompleteAnnotationException: java.lang.annotation.ElementType[] value()>
<java.lang.annotation.IncompleteAnnotationException: java.lang.String elementName()>
<java.lang.annotation.IncompleteAnnotationException: java.lang.Class annotationType()>
<java.lang.annotation.IncompleteAnnotationException: java.lang.Class value()>
<java.lang.annotation.IncompleteAnnotationException: void <init>(Class,String)>
<java.lang.annotation.IncompleteAnnotationException: java.lang.annotation.RetentionPolicy value()>
<android.net.wifi.RttManager.RttCapabilities: void <init>()>
<android.media.projection.MediaProjection: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,int,android.view.Surface,android.hardware.display.VirtualDisplay.Callback,android.os.Handler)>
<android.media.projection.MediaProjection: void stop()>
<android.media.projection.MediaProjection: void unregisterCallback(android.media.projection.MediaProjection.Callback)>
<android.media.projection.MediaProjection: void registerCallback(android.media.projection.MediaProjection.Callback,android.os.Handler)>
<android.net.wifi.aware.DiscoverySessionCallback: void <init>()>
<android.net.wifi.aware.DiscoverySessionCallback: void onMessageSendFailed(int)>
<android.net.wifi.aware.DiscoverySessionCallback: void onSessionTerminated()>
<android.net.wifi.aware.DiscoverySessionCallback: void onMessageSendSucceeded(int)>
<android.net.wifi.aware.DiscoverySessionCallback: void onServiceDiscovered(android.net.wifi.aware.PeerHandle,byte[],java.util.List)>
<android.net.wifi.aware.DiscoverySessionCallback: void onSessionConfigUpdated()>
<android.net.wifi.aware.DiscoverySessionCallback: void onMessageReceived(android.net.wifi.aware.PeerHandle,byte[])>
<android.net.wifi.aware.DiscoverySessionCallback: void onSessionConfigFailed()>
<android.net.wifi.aware.DiscoverySessionCallback: void onSubscribeStarted(android.net.wifi.aware.SubscribeDiscoverySession)>
<android.net.wifi.aware.DiscoverySessionCallback: void onServiceDiscoveredWithinRange(android.net.wifi.aware.PeerHandle,byte[],java.util.List,int)>
<android.net.wifi.aware.DiscoverySessionCallback: void onPublishStarted(android.net.wifi.aware.PublishDiscoverySession)>
<android.media.session.MediaSession.Callback: boolean onMediaButtonEvent(android.content.Intent)>
<android.media.session.MediaSession.Callback: void onStop()>
<android.media.session.MediaSession.Callback: void onPrepareFromSearch(java.lang.String,android.os.Bundle)>
<android.media.session.MediaSession.Callback: void onSetPlaybackSpeed(float)>
<android.media.session.MediaSession.Callback: void onPlayFromUri(android.net.Uri,android.os.Bundle)>
<android.media.session.MediaSession.Callback: void onPlayFromSearch(java.lang.String,android.os.Bundle)>
<android.media.session.MediaSession.Callback: void onCustomAction(java.lang.String,android.os.Bundle)>
<android.media.session.MediaSession.Callback: void onPrepare()>
<android.media.session.MediaSession.Callback: void <init>()>
<android.media.session.MediaSession.Callback: void onCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)>
<android.media.session.MediaSession.Callback: void onPause()>
<android.media.session.MediaSession.Callback: void onPrepareFromMediaId(java.lang.String,android.os.Bundle)>
<android.media.session.MediaSession.Callback: void onSkipToQueueItem(long)>
<android.media.session.MediaSession.Callback: void onPlayFromMediaId(java.lang.String,android.os.Bundle)>
<android.media.session.MediaSession.Callback: void onSkipToNext()>
<android.media.session.MediaSession.Callback: void onFastForward()>
<android.media.session.MediaSession.Callback: void onRewind()>
<android.media.session.MediaSession.Callback: void onPlay()>
<android.media.session.MediaSession.Callback: void onSeekTo(long)>
<android.media.session.MediaSession.Callback: void onSetRating(android.media.Rating)>
<android.media.session.MediaSession.Callback: void onPrepareFromUri(android.net.Uri,android.os.Bundle)>
<android.media.session.MediaSession.Callback: void onSkipToPrevious()>
<android.renderscript.ScriptIntrinsicConvolve3x3: android.renderscript.Script.KernelID getKernelID()>
<android.renderscript.ScriptIntrinsicConvolve3x3: android.renderscript.ScriptIntrinsicConvolve3x3 create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicConvolve3x3: android.renderscript.Script.FieldID getFieldID_Input()>
<android.renderscript.ScriptIntrinsicConvolve3x3: void forEach(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicConvolve3x3: void forEach(android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.renderscript.ScriptIntrinsicConvolve3x3: void setInput(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicConvolve3x3: void setCoefficients(float[])>
<android.media.RemoteControlClient.MetadataEditor: android.media.RemoteControlClient.MetadataEditor putString(int,java.lang.String)>
<android.media.RemoteControlClient.MetadataEditor: java.lang.Object clone()>
<android.media.RemoteControlClient.MetadataEditor: android.media.RemoteControlClient.MetadataEditor putObject(int,java.lang.Object)>
<android.media.RemoteControlClient.MetadataEditor: android.media.RemoteControlClient.MetadataEditor putLong(int,long)>
<android.media.RemoteControlClient.MetadataEditor: void apply()>
<android.media.RemoteControlClient.MetadataEditor: android.media.RemoteControlClient.MetadataEditor putBitmap(int,android.graphics.Bitmap)>
<android.security.keystore.KeyGenParameterSpec.Builder: void <init>(String,int)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setEncryptionPaddings(java.lang.String...)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setInvalidatedByBiometricEnrollment(boolean)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setUserAuthenticationValidityDurationSeconds(int)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setUserAuthenticationRequired(boolean)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setKeyValidityForConsumptionEnd(java.util.Date)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setCertificateNotAfter(java.util.Date)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setAlgorithmParameterSpec(java.security.spec.AlgorithmParameterSpec)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setKeyValidityEnd(java.util.Date)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setUserConfirmationRequired(boolean)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setUserPresenceRequired(boolean)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec build()>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setCertificateNotBefore(java.util.Date)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setKeyValidityForOriginationEnd(java.util.Date)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setUniqueIdIncluded(boolean)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setKeyValidityStart(java.util.Date)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setBlockModes(java.lang.String...)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setCertificateSerialNumber(java.math.BigInteger)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setIsStrongBoxBacked(boolean)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setUnlockedDeviceRequired(boolean)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setDigests(java.lang.String...)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setCertificateSubject(javax.security.auth.x500.X500Principal)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setRandomizedEncryptionRequired(boolean)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setAttestationChallenge(byte[])>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setUserAuthenticationValidWhileOnBody(boolean)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setKeySize(int)>
<android.security.keystore.KeyGenParameterSpec.Builder: android.security.keystore.KeyGenParameterSpec.Builder setSignaturePaddings(java.lang.String...)>
<android.security.keystore.KeyNotYetValidException: void <init>()>
<android.security.keystore.KeyNotYetValidException: void <init>(String)>
<android.security.keystore.KeyNotYetValidException: void <init>(String,Throwable)>
<android.widget.Filter.FilterResults: void <init>()>
<java.util.function.DoubleSupplier: double getAsDouble()>
<android.bluetooth.le.BluetoothLeScanner: void startScanFromSource(android.os.WorkSource,android.bluetooth.le.ScanCallback)>
<android.bluetooth.le.BluetoothLeScanner: void flushPendingScanResults(android.bluetooth.le.ScanCallback)>
<android.bluetooth.le.BluetoothLeScanner: void stopScan(android.bluetooth.le.ScanCallback)>
<android.bluetooth.le.BluetoothLeScanner: void startScanFromSource(java.util.List,android.bluetooth.le.ScanSettings,android.os.WorkSource,android.bluetooth.le.ScanCallback)>
<android.bluetooth.le.BluetoothLeScanner: void startScan(java.util.List,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)>
<android.bluetooth.le.BluetoothLeScanner: void startTruncatedScan(java.util.List,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)>
<android.bluetooth.le.BluetoothLeScanner: void startScan(android.bluetooth.le.ScanCallback)>
<android.bluetooth.le.BluetoothLeScanner: int startScan(java.util.List,android.bluetooth.le.ScanSettings,android.app.PendingIntent)>
<android.bluetooth.le.BluetoothLeScanner: void stopScan(android.app.PendingIntent)>
<java.security.cert.Extension: java.lang.String getId()>
<java.security.cert.Extension: boolean isCritical()>
<java.security.cert.Extension: void encode(java.io.OutputStream)>
<java.security.cert.Extension: byte[] getValue()>
<android.content.ClipDescription: CharSequence getLabel()>
<android.content.ClipDescription: void <init>(android.content.ClipDescription)>
<android.content.ClipDescription: void <init>(CharSequence,String[])>
<android.content.ClipDescription: java.lang.String[] filterMimeTypes(java.lang.String)>
<android.content.ClipDescription: void writeToParcel(android.os.Parcel,int)>
<android.content.ClipDescription: int getMimeTypeCount()>
<android.content.ClipDescription: boolean compareMimeTypes(java.lang.String,java.lang.String)>
<android.content.ClipDescription: void setExtras(android.os.PersistableBundle)>
<android.content.ClipDescription: android.os.PersistableBundle getExtras()>
<android.content.ClipDescription: boolean hasMimeType(java.lang.String)>
<android.content.ClipDescription: int describeContents()>
<android.content.ClipDescription: long getTimestamp()>
<android.content.ClipDescription: java.lang.String getMimeType(int)>
<android.view.animation.LayoutAnimationController.AnimationParameters: void <init>()>
<android.text.BidiFormatter.Builder: void <init>()>
<android.text.BidiFormatter.Builder: android.text.BidiFormatter.Builder stereoReset(boolean)>
<android.text.BidiFormatter.Builder: void <init>(java.util.Locale)>
<android.text.BidiFormatter.Builder: android.text.BidiFormatter build()>
<android.text.BidiFormatter.Builder: void <init>(boolean)>
<android.text.BidiFormatter.Builder: android.text.BidiFormatter.Builder setTextDirectionHeuristic(android.text.TextDirectionHeuristic)>
<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock()>
<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)>
<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>
<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>
<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer,long)>
<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[])>
<java.nio.channels.FileChannel: java.nio.channels.FileChannel truncate(long)>
<java.nio.channels.FileChannel: void <init>()>
<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)>
<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock(long,long,boolean)>
<java.nio.channels.FileChannel: void force(boolean)>
<java.nio.channels.FileChannel: long transferFrom(java.nio.channels.ReadableByteChannel,long,long)>
<java.nio.channels.FileChannel: java.nio.channels.FileLock lock(long,long,boolean)>
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel.MapMode,long,long)>
<java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute...)>
<java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.nio.file.OpenOption...)>
<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[])>
<android.content.res.Resources: CharSequence getText(@StringResint,CharSequence)>
<android.content.res.Resources: int getInteger(@IntegerResint)>
<android.content.res.Resources: java.lang.String getResourceEntryName(@AnyResint)>
<android.content.res.Resources: java.lang.String getString(@StringResint)>
<android.content.res.Resources: int getDimensionPixelSize(@DimenResint)>
<android.content.res.Resources: java.io.InputStream openRawResource(@RawResint)>
<android.content.res.Resources: android.content.res.AssetManager getAssets()>
<android.content.res.Resources: int getColor(@ColorResint,android.content.res.Resources.Theme)>
<android.content.res.Resources: android.graphics.Typeface getFont(@FontResint)>
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(@DrawableResint,int,android.content.res.Resources.Theme)>
<android.content.res.Resources: java.lang.String getQuantityString(@PluralsResint,int)>
<android.content.res.Resources: void parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle)>
<android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)>
<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(@ArrayResint)>
<android.content.res.Resources: java.io.InputStream openRawResource(@RawResint,android.util.TypedValue)>
<android.content.res.Resources: void getValueForDensity(@AnyResint,int,android.util.TypedValue,boolean)>
<android.content.res.Resources: android.content.res.Resources.Theme newTheme()>
<android.content.res.Resources: void flushLayoutCache()>
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>
<android.content.res.Resources: android.content.res.XmlResourceParser getLayout(@LayoutResint)>
<android.content.res.Resources: java.lang.String getResourceTypeName(@AnyResint)>
<android.content.res.Resources: int getAttributeSetSourceResId(android.util.AttributeSet)>
<android.content.res.Resources: int getColor(@ColorResint)>
<android.content.res.Resources: CharSequence getText(@StringResint)>
<android.content.res.Resources: boolean getBoolean(@BoolResint)>
<android.content.res.Resources: java.lang.String getResourcePackageName(@AnyResint)>
<android.content.res.Resources: android.graphics.Movie getMovie(@RawResint)>
<android.content.res.Resources: float getFraction(@FractionResint,int,int)>
<android.content.res.Resources: int[] getIntArray(@ArrayResint)>
<android.content.res.Resources: void getValue(@AnyResint,android.util.TypedValue,boolean)>
<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(@ColorResint)>
<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(@ColorResint,android.content.res.Resources.Theme)>
<android.content.res.Resources: java.lang.String[] getStringArray(@ArrayResint)>
<android.content.res.Resources: void finishPreloading()>
<android.content.res.Resources: float getFloat(@DimenResint)>
<android.content.res.Resources: CharSequence getQuantityText(@PluralsResint,int)>
<android.content.res.Resources: java.lang.String getString(@StringResint,java.lang.Object...)>
<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,@StyleableResint[])>
<android.content.res.Resources: android.content.res.Resources getSystem()>
<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(@AnimatorRes@AnimResint)>
<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>
<android.content.res.Resources: void getValue(java.lang.String,android.util.TypedValue,boolean)>
<android.content.res.Resources: void parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle)>
<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>
<android.content.res.Resources: java.lang.String getQuantityString(@PluralsResint,int,java.lang.Object...)>
<android.content.res.Resources: android.content.res.XmlResourceParser getXml(@XmlResint)>
<android.content.res.Resources: CharSequence[] getTextArray(@ArrayResint)>
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(@DrawableResint,android.content.res.Resources.Theme)>
<android.content.res.Resources: android.content.res.Configuration getConfiguration()>
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(@DrawableResint)>
<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(@RawResint)>
<android.content.res.Resources: float getDimension(@DimenResint)>
<android.content.res.Resources: int getDimensionPixelOffset(@DimenResint)>
<android.content.res.Resources: java.lang.String getResourceName(@AnyResint)>
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(@DrawableResint,int)>
<android.provider.Telephony.CarrierId: android.net.Uri getSpecificCarrierIdUriForSubscriptionId(int)>
<android.provider.Telephony.CarrierId: android.net.Uri getUriForSubscriptionId(int)>
<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context)>
<android.speech.SpeechRecognizer: boolean isRecognitionAvailable(android.content.Context)>
<android.speech.SpeechRecognizer: void destroy()>
<android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)>
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)>
<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context,android.content.ComponentName)>
<android.speech.SpeechRecognizer: void stopListening()>
<android.speech.SpeechRecognizer: void cancel()>
<android.media.AudioRouting: android.media.AudioDeviceInfo getPreferredDevice()>
<android.media.AudioRouting: void addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,android.os.Handler)>
<android.media.AudioRouting: android.media.AudioDeviceInfo getRoutedDevice()>
<android.media.AudioRouting: void removeOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener)>
<android.media.AudioRouting: boolean setPreferredDevice(android.media.AudioDeviceInfo)>
<android.media.projection.MediaProjectionManager: android.content.Intent createScreenCaptureIntent()>
<android.media.projection.MediaProjectionManager: android.media.projection.MediaProjection getMediaProjection(int,android.content.Intent)>
<android.hardware.SensorEventCallback: void onFlushCompleted(android.hardware.Sensor)>
<android.hardware.SensorEventCallback: void <init>()>
<android.hardware.SensorEventCallback: void onAccuracyChanged(android.hardware.Sensor,int)>
<android.hardware.SensorEventCallback: void onSensorAdditionalInfo(android.hardware.SensorAdditionalInfo)>
<android.hardware.SensorEventCallback: void onSensorChanged(android.hardware.SensorEvent)>
<java.util.AbstractQueue: E remove()>
<java.util.AbstractQueue: void <init>()>
<java.util.AbstractQueue: E element()>
<java.util.function.IntBinaryOperator: int applyAsInt(int,int)>
<android.app.contentsuggestions.SelectionsRequest: android.graphics.Point getInterestPoint()>
<android.app.contentsuggestions.SelectionsRequest: void writeToParcel(android.os.Parcel,int)>
<android.app.contentsuggestions.SelectionsRequest: android.os.Bundle getExtras()>
<android.app.contentsuggestions.SelectionsRequest: int getTaskId()>
<android.app.contentsuggestions.SelectionsRequest: int describeContents()>
<java.nio.channels.spi.SelectorProvider: java.nio.channels.DatagramChannel openDatagramChannel(java.net.ProtocolFamily)>
<java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>
<java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.AbstractSelector openSelector()>
<java.nio.channels.spi.SelectorProvider: void <init>()>
<java.nio.channels.spi.SelectorProvider: java.nio.channels.DatagramChannel openDatagramChannel()>
<java.nio.channels.spi.SelectorProvider: java.nio.channels.Channel inheritedChannel()>
<java.nio.channels.spi.SelectorProvider: java.nio.channels.SocketChannel openSocketChannel()>
<java.nio.channels.spi.SelectorProvider: java.nio.channels.Pipe openPipe()>
<java.nio.channels.spi.SelectorProvider: java.nio.channels.ServerSocketChannel openServerSocketChannel()>
<java.io.DataOutputStream: void writeChars(java.lang.String)>
<java.io.DataOutputStream: void writeDouble(double)>
<java.io.DataOutputStream: void writeLong(long)>
<java.io.DataOutputStream: void writeBytes(java.lang.String)>
<java.io.DataOutputStream: void writeFloat(float)>
<java.io.DataOutputStream: void writeInt(int)>
<java.io.DataOutputStream: void writeShort(int)>
<java.io.DataOutputStream: void writeUTF(java.lang.String)>
<java.io.DataOutputStream: void <init>(java.io.OutputStream)>
<java.io.DataOutputStream: void writeByte(int)>
<java.io.DataOutputStream: void writeBoolean(boolean)>
<java.io.DataOutputStream: void writeChar(int)>
<java.io.DataOutputStream: int size()>
<android.media.AudioDeviceCallback: void <init>()>
<android.media.AudioDeviceCallback: void onAudioDevicesRemoved(android.media.AudioDeviceInfo[])>
<android.media.AudioDeviceCallback: void onAudioDevicesAdded(android.media.AudioDeviceInfo[])>
<android.R.bool: void <init>()>
<android.hardware.radio.RadioMetadata.Clock: void writeToParcel(android.os.Parcel,int)>
<android.hardware.radio.RadioMetadata.Clock: int describeContents()>
<android.hardware.radio.RadioMetadata.Clock: void <init>(long,int)>
<android.hardware.radio.RadioMetadata.Clock: int getTimezoneOffsetMinutes()>
<android.hardware.radio.RadioMetadata.Clock: long getUtcEpochSeconds()>
<android.view.inputmethod.BaseInputConnection: CharSequence getSelectedText(int)>
<android.view.inputmethod.BaseInputConnection: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>
<android.view.inputmethod.BaseInputConnection: boolean deleteSurroundingText(int,int)>
<android.view.inputmethod.BaseInputConnection: boolean setSelection(int,int)>
<android.view.inputmethod.BaseInputConnection: boolean reportFullscreenMode(boolean)>
<android.view.inputmethod.BaseInputConnection: boolean endBatchEdit()>
<android.view.inputmethod.BaseInputConnection: void setComposingSpans(android.text.Spannable)>
<android.view.inputmethod.BaseInputConnection: boolean commitCorrection(android.view.inputmethod.CorrectionInfo)>
<android.view.inputmethod.BaseInputConnection: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>
<android.view.inputmethod.BaseInputConnection: CharSequence getTextAfterCursor(int,int)>
<android.view.inputmethod.BaseInputConnection: boolean requestCursorUpdates(int)>
<android.view.inputmethod.BaseInputConnection: boolean commitText(CharSequence,int)>
<android.view.inputmethod.BaseInputConnection: android.text.Editable getEditable()>
<android.view.inputmethod.BaseInputConnection: boolean clearMetaKeyStates(int)>
<android.view.inputmethod.BaseInputConnection: boolean finishComposingText()>
<android.view.inputmethod.BaseInputConnection: boolean setComposingText(CharSequence,int)>
<android.view.inputmethod.BaseInputConnection: android.os.Handler getHandler()>
<android.view.inputmethod.BaseInputConnection: int getComposingSpanStart(android.text.Spannable)>
<android.view.inputmethod.BaseInputConnection: boolean beginBatchEdit()>
<android.view.inputmethod.BaseInputConnection: boolean performEditorAction(int)>
<android.view.inputmethod.BaseInputConnection: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>
<android.view.inputmethod.BaseInputConnection: boolean setComposingRegion(int,int)>
<android.view.inputmethod.BaseInputConnection: CharSequence getTextBeforeCursor(int,int)>
<android.view.inputmethod.BaseInputConnection: void removeComposingSpans(android.text.Spannable)>
<android.view.inputmethod.BaseInputConnection: int getCursorCapsMode(int)>
<android.view.inputmethod.BaseInputConnection: boolean commitCompletion(android.view.inputmethod.CompletionInfo)>
<android.view.inputmethod.BaseInputConnection: int getComposingSpanEnd(android.text.Spannable)>
<android.view.inputmethod.BaseInputConnection: void closeConnection()>
<android.view.inputmethod.BaseInputConnection: boolean sendKeyEvent(android.view.KeyEvent)>
<android.view.inputmethod.BaseInputConnection: boolean deleteSurroundingTextInCodePoints(int,int)>
<android.view.inputmethod.BaseInputConnection: boolean performContextMenuAction(int)>
<android.view.inputmethod.BaseInputConnection: void <init>(android.view.View,boolean)>
<android.media.tv.TvView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.media.tv.TvView: boolean onUnhandledInputEvent(android.view.InputEvent)>
<android.media.tv.TvView: boolean dispatchUnhandledInputEvent(android.view.InputEvent)>
<android.media.tv.TvView: void reset()>
<android.media.tv.TvView: void setStreamVolume(float)>
<android.media.tv.TvView: void sendAppPrivateCommand(java.lang.String,android.os.Bundle)>
<android.media.tv.TvView: void setZOrderMediaOverlay(boolean)>
<android.media.tv.TvView: void tune(java.lang.String,android.net.Uri)>
<android.media.tv.TvView: void <init>(android.content.Context)>
<android.media.tv.TvView: void timeShiftPause()>
<android.media.tv.TvView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.media.tv.TvView: void timeShiftSeekTo(long)>
<android.media.tv.TvView: void tune(java.lang.String,android.net.Uri,android.os.Bundle)>
<android.media.tv.TvView: java.util.List getTracks(int)>
<android.media.tv.TvView: void setCaptionEnabled(boolean)>
<android.media.tv.TvView: void setZOrderOnTop(boolean)>
<android.media.tv.TvView: void setCallback(android.media.tv.TvView.TvInputCallback)>
<android.media.tv.TvView: void timeShiftPlay(java.lang.String,android.net.Uri)>
<android.media.tv.TvView: void timeShiftSetPlaybackParams(android.media.PlaybackParams)>
<android.media.tv.TvView: void setMain()>
<android.media.tv.TvView: void timeShiftResume()>
<android.media.tv.TvView: void unblockContent(android.media.tv.TvContentRating)>
<android.media.tv.TvView: void setTimeShiftPositionCallback(android.media.tv.TvView.TimeShiftPositionCallback)>
<android.media.tv.TvView: void setOnUnhandledInputEventListener(android.media.tv.TvView.OnUnhandledInputEventListener)>
<android.media.tv.TvView: java.lang.String getSelectedTrack(int)>
<android.media.tv.TvView: void selectTrack(int,java.lang.String)>
<android.media.audiofx.AudioEffect.OnParameterChangeListener: void onParameterChange(android.media.audiofx.AudioEffect,int,byte[],byte[])>
<android.drm.DrmRights: void <init>(String,String)>
<android.drm.DrmRights: void <init>(String,String,String)>
<android.drm.DrmRights: java.lang.String getAccountId()>
<android.drm.DrmRights: void <init>(String,String,String,String)>
<android.drm.DrmRights: void <init>(java.io.File,String)>
<android.drm.DrmRights: java.lang.String getMimeType()>
<android.drm.DrmRights: java.lang.String getSubscriptionId()>
<android.drm.DrmRights: void <init>(android.drm.ProcessedData,String)>
<android.drm.DrmRights: byte[] getData()>
<android.app.InstantAppResolverService.InstantAppResolutionCallback: void onInstantAppResolveInfo(java.util.List)>
<android.app.usage.ConfigurationStats: long getLastTimeStamp()>
<android.app.usage.ConfigurationStats: long getTotalTimeActive()>
<android.app.usage.ConfigurationStats: int describeContents()>
<android.app.usage.ConfigurationStats: void writeToParcel(android.os.Parcel,int)>
<android.app.usage.ConfigurationStats: void <init>(android.app.usage.ConfigurationStats)>
<android.app.usage.ConfigurationStats: int getActivationCount()>
<android.app.usage.ConfigurationStats: android.content.res.Configuration getConfiguration()>
<android.app.usage.ConfigurationStats: long getFirstTimeStamp()>
<android.app.usage.ConfigurationStats: long getLastTimeActive()>
<javax.crypto.Mac: java.lang.Object clone()>
<javax.crypto.Mac: void update(byte[],int,int)>
<javax.crypto.Mac: void <init>(javax.crypto.MacSpi,java.security.Provider,String)>
<javax.crypto.Mac: void init(java.security.Key)>
<javax.crypto.Mac: void update(byte[])>
<javax.crypto.Mac: java.security.Provider getProvider()>
<javax.crypto.Mac: java.lang.String getAlgorithm()>
<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>
<javax.crypto.Mac: int getMacLength()>
<javax.crypto.Mac: byte[] doFinal()>
<javax.crypto.Mac: void update(java.nio.ByteBuffer)>
<javax.crypto.Mac: void reset()>
<javax.crypto.Mac: byte[] doFinal(byte[])>
<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>
<javax.crypto.Mac: void update(byte)>
<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.security.Provider)>
<javax.crypto.Mac: void doFinal(byte[],int)>
<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<android.net.Network: void bindSocket(java.net.Socket)>
<android.net.Network: int describeContents()>
<android.net.Network: javax.net.SocketFactory getSocketFactory()>
<android.net.Network: void bindSocket(java.net.DatagramSocket)>
<android.net.Network: void bindSocket(java.io.FileDescriptor)>
<android.net.Network: android.net.Network getPrivateDnsBypassingCopy()>
<android.net.Network: java.net.InetAddress[] getAllByName(java.lang.String)>
<android.net.Network: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>
<android.net.Network: long getNetworkHandle()>
<android.net.Network: java.net.InetAddress getByName(java.lang.String)>
<android.net.Network: java.net.URLConnection openConnection(java.net.URL)>
<android.net.Network: void writeToParcel(android.os.Parcel,int)>
<android.net.Network: void <init>(android.net.Network)>
<android.net.Network: android.net.Network fromNetworkHandle(long)>
<android.app.SharedElementCallback: android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View,android.graphics.Matrix,android.graphics.RectF)>
<android.app.SharedElementCallback: android.view.View onCreateSnapshotView(android.content.Context,android.os.Parcelable)>
<android.app.SharedElementCallback: void <init>()>
<android.app.SharedElementCallback: void onRejectSharedElements(java.util.List)>
<android.app.SharedElementCallback: void onSharedElementStart(java.util.List,java.util.List,java.util.List)>
<android.app.SharedElementCallback: void onMapSharedElements(java.util.List,java.util.Map)>
<android.app.SharedElementCallback: void onSharedElementEnd(java.util.List,java.util.List,java.util.List)>
<android.app.SharedElementCallback: void onSharedElementsArrived(java.util.List,java.util.List,android.app.SharedElementCallback.OnSharedElementsReadyListener)>
<java.security.cert.PKIXBuilderParameters: int getMaxPathLength()>
<java.security.cert.PKIXBuilderParameters: void setMaxPathLength(int)>
<java.security.cert.PKIXBuilderParameters: void <init>(java.security.KeyStore,java.security.cert.CertSelector)>
<java.security.cert.PKIXBuilderParameters: void <init>(java.util.Set,java.security.cert.CertSelector)>
<android.print.PrintDocumentAdapter: void onWrite(android.print.PageRange[],android.os.ParcelFileDescriptor,android.os.CancellationSignal,android.print.PrintDocumentAdapter.WriteResultCallback)>
<android.print.PrintDocumentAdapter: void <init>()>
<android.print.PrintDocumentAdapter: void onFinish()>
<android.print.PrintDocumentAdapter: void onLayout(android.print.PrintAttributes,android.print.PrintAttributes,android.os.CancellationSignal,android.print.PrintDocumentAdapter.LayoutResultCallback,android.os.Bundle)>
<android.print.PrintDocumentAdapter: void onStart()>
<java.net.CacheRequest: void <init>()>
<java.net.CacheRequest: java.io.OutputStream getBody()>
<java.net.CacheRequest: void abort()>
<android.view.contentcapture.DataRemovalRequest.LocusIdRequest: android.content.LocusId getLocusId()>
<android.view.contentcapture.DataRemovalRequest.LocusIdRequest: int getFlags()>
<android.icu.text.DecimalFormatSymbols: void setCurrencySymbol(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: void setExponentMultiplicationSign(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: android.icu.text.DisplayContext.Type type()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getDecimalSeparatorString()>
<android.icu.text.DecimalFormatSymbols: void setInternationalCurrencySymbol(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: void setSignificantDigit(char)>
<android.icu.text.DecimalFormatSymbols: void setNaN(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: void setPlusSign(char)>
<android.icu.text.DecimalFormatSymbols: void setExponentSeparator(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: void setMonetaryDecimalSeparatorString(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: char[] getDigits()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getMinusSignString()>
<android.icu.text.DecimalFormatSymbols: void setPlusSignString(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: java.lang.String getPercentString()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getPerMillString()>
<android.icu.text.DecimalFormatSymbols: android.icu.text.DecimalFormatSymbols getInstance(android.icu.util.ULocale)>
<android.icu.text.DecimalFormatSymbols: void setGroupingSeparator(char)>
<android.icu.text.DecimalFormatSymbols: void setZeroDigit(char)>
<android.icu.text.DecimalFormatSymbols: java.lang.String getMonetaryGroupingSeparatorString()>
<android.icu.text.DecimalFormatSymbols: void setMonetaryDecimalSeparator(char)>
<android.icu.text.DecimalFormatSymbols: char getDecimalSeparator()>
<android.icu.text.DecimalFormatSymbols: android.icu.util.ULocale getULocale()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getExponentSeparator()>
<android.icu.text.DecimalFormatSymbols: void setInfinity(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: void setDecimalSeparatorString(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: char getPatternSeparator()>
<android.icu.text.DecimalFormatSymbols: void setDigitStrings(java.lang.String[])>
<android.icu.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()>
<android.icu.text.DecimalFormatSymbols: java.lang.String[] getDigitStrings()>
<android.icu.text.DecimalFormatSymbols: int value()>
<android.icu.text.DecimalFormatSymbols: android.icu.util.Currency getCurrency()>
<android.icu.text.DecimalFormatSymbols: android.icu.text.DecimalFormatSymbols getInstance(java.util.Locale)>
<android.icu.text.DecimalFormatSymbols: java.lang.String getNaN()>
<android.icu.text.DecimalFormatSymbols: void setPatternSeparator(char)>
<android.icu.text.DecimalFormatSymbols: android.icu.text.DecimalFormatSymbols forNumberingSystem(java.util.Locale,android.icu.text.NumberingSystem)>
<android.icu.text.DecimalFormatSymbols: char getGroupingSeparator()>
<android.icu.text.DecimalFormatSymbols: char getPercent()>
<android.icu.text.DecimalFormatSymbols: android.icu.text.DecimalFormatSymbols getInstance()>
<android.icu.text.DecimalFormatSymbols: void setPatternForCurrencySpacing(int,boolean,java.lang.String)>
<android.icu.text.DecimalFormatSymbols: android.icu.text.DecimalFormatSymbols forNumberingSystem(android.icu.util.ULocale,android.icu.text.NumberingSystem)>
<android.icu.text.DecimalFormatSymbols: void setPercent(char)>
<android.icu.text.DecimalFormatSymbols: java.lang.String getGroupingSeparatorString()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getInfinity()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getPlusSignString()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getExponentMultiplicationSign()>
<android.icu.text.DecimalFormatSymbols: void setMinusSign(char)>
<android.icu.text.DecimalFormatSymbols: void setMonetaryGroupingSeparator(char)>
<android.icu.text.DecimalFormatSymbols: void <init>()>
<android.icu.text.DecimalFormatSymbols: void setMinusSignString(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: void setCurrency(android.icu.util.Currency)>
<android.icu.text.DecimalFormatSymbols: java.lang.String getMonetaryDecimalSeparatorString()>
<android.icu.text.DecimalFormatSymbols: void <init>(java.util.Locale)>
<android.icu.text.DecimalFormatSymbols: void setMonetaryGroupingSeparatorString(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: char getMonetaryDecimalSeparator()>
<android.icu.text.DecimalFormatSymbols: char getPadEscape()>
<android.icu.text.DecimalFormatSymbols: java.util.Locale getLocale()>
<android.icu.text.DecimalFormatSymbols: void setPerMillString(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: char getSignificantDigit()>
<android.icu.text.DecimalFormatSymbols: void setGroupingSeparatorString(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: void <init>(android.icu.util.ULocale)>
<android.icu.text.DecimalFormatSymbols: java.util.Locale[] getAvailableLocales()>
<android.icu.text.DecimalFormatSymbols: void setPadEscape(char)>
<android.icu.text.DecimalFormatSymbols: void setDigit(char)>
<android.icu.text.DecimalFormatSymbols: void setPerMill(char)>
<android.icu.text.DecimalFormatSymbols: char getDigit()>
<android.icu.text.DecimalFormatSymbols: void setPercentString(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()>
<android.icu.text.DecimalFormatSymbols: char getMinusSign()>
<android.icu.text.DecimalFormatSymbols: char getPerMill()>
<android.icu.text.DecimalFormatSymbols: char getPlusSign()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getPatternForCurrencySpacing(int,boolean)>
<android.icu.text.DecimalFormatSymbols: java.lang.Object clone()>
<android.icu.text.DecimalFormatSymbols: char getZeroDigit()>
<android.icu.text.DecimalFormatSymbols: void setDecimalSeparator(char)>
<android.icu.text.DecimalFormatSymbols: char getMonetaryGroupingSeparator()>
<android.graphics.Xfermode: void <init>()>
<android.provider.MediaStore.Video.Thumbnails: void cancelThumbnailRequest(android.content.ContentResolver,long)>
<android.provider.MediaStore.Video.Thumbnails: void cancelThumbnailRequest(android.content.ContentResolver,long,long)>
<android.provider.MediaStore.Video.Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory.Options)>
<android.provider.MediaStore.Video.Thumbnails: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore.Video.Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory.Options)>
<android.provider.MediaStore.Video.Thumbnails: void <init>()>
<android.renderscript.Element: android.renderscript.Element I64_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element RGBA_8888(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I8_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element ELEMENT(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element PROGRAM_RASTER(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I32_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U32_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I16_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element PROGRAM_FRAGMENT(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F16_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U16_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element MESH(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U8_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element RGBA_4444(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I16_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element.DataKind getDataKind()>
<android.renderscript.Element: android.renderscript.Element MATRIX_4X4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element SAMPLER(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U64_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U8(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element FONT(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U16_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I32_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U32_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F16(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I8_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F16_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I32(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U32(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U8_2(android.renderscript.RenderScript)>
<android.renderscript.Element: int getSubElementArraySize(int)>
<android.renderscript.Element: android.renderscript.Element F32_4(android.renderscript.RenderScript)>
<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>
<android.renderscript.Element: android.renderscript.Element I64_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element createPixel(android.renderscript.RenderScript,android.renderscript.Element.DataType,android.renderscript.Element.DataKind)>
<android.renderscript.Element: android.renderscript.Element YUV(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F16_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element MATRIX4X4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element MATRIX_3X3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element BOOLEAN(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F64_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I32_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element RGB_888(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U16_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I8(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element RGB_565(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U64_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element RGBA_5551(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element A_8(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I64(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element ALLOCATION(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element TYPE(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I8_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U8_4(android.renderscript.RenderScript)>
<android.renderscript.Element: boolean isComplex()>
<android.renderscript.Element: android.renderscript.Element F64_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I16(android.renderscript.RenderScript)>
<android.renderscript.Element: int getVectorSize()>
<android.renderscript.Element: android.renderscript.Element F32_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U64(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I64_4(android.renderscript.RenderScript)>
<android.renderscript.Element: java.lang.String getSubElementName(int)>
<android.renderscript.Element: android.renderscript.Element MATRIX_2X2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U16(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element.DataType getDataType()>
<android.renderscript.Element: android.renderscript.Element PROGRAM_STORE(android.renderscript.RenderScript)>
<android.renderscript.Element: int getBytesSize()>
<android.renderscript.Element: int getSubElementOffsetBytes(int)>
<android.renderscript.Element: android.renderscript.Element createVector(android.renderscript.RenderScript,android.renderscript.Element.DataType,int)>
<android.renderscript.Element: android.renderscript.Element getSubElement(int)>
<android.renderscript.Element: android.renderscript.Element U64_3(android.renderscript.RenderScript)>
<android.renderscript.Element: int getSubElementCount()>
<android.renderscript.Element: android.renderscript.Element SCRIPT(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I16_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element PROGRAM_VERTEX(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U32_3(android.renderscript.RenderScript)>
<android.database.sqlite.SQLiteFullException: void <init>()>
<android.database.sqlite.SQLiteFullException: void <init>(String)>
<org.xml.sax.AttributeList: java.lang.String getName(int)>
<org.xml.sax.AttributeList: java.lang.String getType(java.lang.String)>
<org.xml.sax.AttributeList: java.lang.String getValue(java.lang.String)>
<org.xml.sax.AttributeList: java.lang.String getValue(int)>
<org.xml.sax.AttributeList: java.lang.String getType(int)>
<org.xml.sax.AttributeList: int getLength()>
<java.text.SimpleDateFormat: void applyLocalizedPattern(java.lang.String)>
<java.text.SimpleDateFormat: void <init>()>
<java.text.SimpleDateFormat: java.lang.String toPattern()>
<java.text.SimpleDateFormat: void applyPattern(java.lang.String)>
<java.text.SimpleDateFormat: void set2DigitYearStart(java.util.Date)>
<java.text.SimpleDateFormat: void <init>(String,java.text.DateFormatSymbols)>
<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>
<java.text.SimpleDateFormat: void setDateFormatSymbols(java.text.DateFormatSymbols)>
<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.SimpleDateFormat: java.lang.String toLocalizedPattern()>
<java.text.SimpleDateFormat: void <init>(String)>
<java.text.SimpleDateFormat: java.text.DateFormatSymbols getDateFormatSymbols()>
<java.text.SimpleDateFormat: java.util.Date get2DigitYearStart()>
<java.text.SimpleDateFormat: void <init>(String,java.util.Locale)>
<android.content.pm.SuspendDialogInfo.Builder: android.content.pm.SuspendDialogInfo build()>
<android.content.pm.SuspendDialogInfo.Builder: android.content.pm.SuspendDialogInfo.Builder setNeutralButtonText(@StringResint)>
<android.content.pm.SuspendDialogInfo.Builder: android.content.pm.SuspendDialogInfo.Builder setTitle(@StringResint)>
<android.content.pm.SuspendDialogInfo.Builder: android.content.pm.SuspendDialogInfo.Builder setMessage(@StringResint)>
<android.content.pm.SuspendDialogInfo.Builder: android.content.pm.SuspendDialogInfo.Builder setIcon(@DrawableResint)>
<android.content.pm.SuspendDialogInfo.Builder: android.content.pm.SuspendDialogInfo.Builder setMessage(java.lang.String)>
<android.content.pm.SuspendDialogInfo.Builder: void <init>()>
<java.util.concurrent.locks.ReentrantReadWriteLock: int getWriteHoldCount()>
<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedWriterThreads()>
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean hasQueuedThreads()>
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock writeLock()>
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isWriteLocked()>
<java.util.concurrent.locks.ReentrantReadWriteLock: java.lang.Thread getOwner()>
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean hasQueuedThread(java.lang.Thread)>
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedReaderThreads()>
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isWriteLockedByCurrentThread()>
<java.util.concurrent.locks.ReentrantReadWriteLock: int getQueueLength()>
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition)>
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isFair()>
<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>
<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()>
<java.util.concurrent.locks.ReentrantReadWriteLock: int getWaitQueueLength(java.util.concurrent.locks.Condition)>
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock readLock()>
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedThreads()>
<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadHoldCount()>
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean hasWaiters(java.util.concurrent.locks.Condition)>
<android.app.assist.AssistStructure: long getAcquisitionStartTime()>
<android.app.assist.AssistStructure: android.app.assist.AssistStructure.WindowNode getWindowNodeAt(int)>
<android.app.assist.AssistStructure: long getAcquisitionEndTime()>
<android.app.assist.AssistStructure: boolean isHomeActivity()>
<android.app.assist.AssistStructure: void writeToParcel(android.os.Parcel,int)>
<android.app.assist.AssistStructure: int getWindowNodeCount()>
<android.app.assist.AssistStructure: void <init>()>
<android.app.assist.AssistStructure: android.content.ComponentName getActivityComponent()>
<android.app.assist.AssistStructure: int describeContents()>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo newInstance(java.lang.String,java.lang.String,java.util.Map)>
<java.util.PrimitiveIterator extends java.util.Iterator: void forEachRemaining(T_CONS)>
<android.graphics.Movie: android.graphics.Movie decodeStream(java.io.InputStream)>
<android.graphics.Movie: void draw(android.graphics.Canvas,float,float)>
<android.graphics.Movie: int duration()>
<android.graphics.Movie: android.graphics.Movie decodeByteArray(byte[],int,int)>
<android.graphics.Movie: void draw(android.graphics.Canvas,float,float,android.graphics.Paint)>
<android.graphics.Movie: boolean isOpaque()>
<android.graphics.Movie: android.graphics.Movie decodeFile(java.lang.String)>
<android.graphics.Movie: int width()>
<android.graphics.Movie: boolean setTime(int)>
<android.graphics.Movie: int height()>
<android.media.MediaSyncEvent: int getAudioSessionId()>
<android.media.MediaSyncEvent: android.media.MediaSyncEvent setAudioSessionId(int)>
<android.media.MediaSyncEvent: int getType()>
<android.media.MediaSyncEvent: android.media.MediaSyncEvent createEvent(int)>
<java.nio.channels.SeekableByteChannel extends java.nio.channels.ByteChannel: long size()>
<java.nio.channels.SeekableByteChannel extends java.nio.channels.ByteChannel: long position()>
<java.nio.channels.SeekableByteChannel extends java.nio.channels.ByteChannel: java.nio.channels.SeekableByteChannel truncate(long)>
<java.nio.channels.SeekableByteChannel extends java.nio.channels.ByteChannel: java.nio.channels.SeekableByteChannel position(long)>
<android.app.Notification.TvExtender: android.app.Notification.TvExtender setSuppressShowOverApps(boolean)>
<android.app.Notification.TvExtender: android.app.Notification.TvExtender setChannelId(java.lang.String)>
<android.app.Notification.TvExtender: void <init>(android.app.Notification)>
<android.app.Notification.TvExtender: void <init>()>
<android.app.Notification.TvExtender: java.lang.String getChannelId()>
<android.app.Notification.TvExtender: android.app.Notification.TvExtender setChannel(java.lang.String)>
<android.app.Notification.TvExtender: boolean getSuppressShowOverApps()>
<android.app.Notification.TvExtender: android.app.PendingIntent getDeleteIntent()>
<android.app.Notification.TvExtender: boolean isAvailableOnTv()>
<android.app.Notification.TvExtender: android.app.Notification.TvExtender setDeleteIntent(android.app.PendingIntent)>
<android.app.Notification.TvExtender: android.app.Notification.Builder extend(android.app.Notification.Builder)>
<android.app.Notification.TvExtender: android.app.Notification.TvExtender setContentIntent(android.app.PendingIntent)>
<android.app.Notification.TvExtender: android.app.PendingIntent getContentIntent()>
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle findStaticSetter(java.lang.Class,java.lang.String,java.lang.Class)>
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandles.Lookup in(java.lang.Class)>
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle bind(java.lang.Object,java.lang.String,java.lang.invoke.MethodType)>
<java.lang.invoke.MethodHandles.Lookup: java.lang.Class lookupClass()>
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle unreflectSetter(java.lang.reflect.Field)>
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle unreflectConstructor(java.lang.reflect.Constructor)>
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle findSpecial(java.lang.Class,java.lang.String,java.lang.invoke.MethodType,java.lang.Class)>
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle findConstructor(java.lang.Class,java.lang.invoke.MethodType)>
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle unreflectGetter(java.lang.reflect.Field)>
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle unreflectSpecial(java.lang.reflect.Method,java.lang.Class)>
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle findSetter(java.lang.Class,java.lang.String,java.lang.Class)>
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)>
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandleInfo revealDirect(java.lang.invoke.MethodHandle)>
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle findStatic(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)>
<java.lang.invoke.MethodHandles.Lookup: int lookupModes()>
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle unreflect(java.lang.reflect.Method)>
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle findGetter(java.lang.Class,java.lang.String,java.lang.Class)>
<java.lang.invoke.MethodHandles.Lookup: java.lang.invoke.MethodHandle findStaticGetter(java.lang.Class,java.lang.String,java.lang.Class)>
<android.permission.PermissionControllerService: void onGetAppPermissions(java.lang.String,java.util.function.Consumer)>
<android.permission.PermissionControllerService: void onRestoreDelayedRuntimePermissionsBackup(java.lang.String,android.os.UserHandle,java.util.function.Consumer)>
<android.permission.PermissionControllerService: void onGrantOrUpgradeDefaultRuntimePermissions(Runnable)>
<android.permission.PermissionControllerService: void <init>()>
<android.permission.PermissionControllerService: android.os.IBinder onBind(android.content.Intent)>
<android.permission.PermissionControllerService: void onRevokeRuntimePermissions(java.util.Map,boolean,int,java.lang.String,java.util.function.Consumer)>
<android.permission.PermissionControllerService: void onRevokeRuntimePermission(java.lang.String,java.lang.String,Runnable)>
<android.permission.PermissionControllerService: void onGetPermissionUsages(boolean,long,java.util.function.Consumer)>
<android.permission.PermissionControllerService: void onCountPermissionApps(java.util.List,int,java.util.function.IntConsumer)>
<android.permission.PermissionControllerService: void onRestoreRuntimePermissionsBackup(android.os.UserHandle,java.io.InputStream,Runnable)>
<android.permission.PermissionControllerService: void onSetRuntimePermissionGrantStateByDeviceAdmin(java.lang.String,java.lang.String,java.lang.String,int,java.util.function.Consumer)>
<android.permission.PermissionControllerService: void onGetRuntimePermissionsBackup(android.os.UserHandle,java.io.OutputStream,Runnable)>
<android.view.DisplayCutout: int getSafeInsetRight()>
<android.view.DisplayCutout: void <init>(android.graphics.Rect,java.util.List)>
<android.view.DisplayCutout: int getSafeInsetLeft()>
<android.view.DisplayCutout: android.graphics.Rect getBoundingRectTop()>
<android.view.DisplayCutout: android.graphics.Rect getBoundingRectRight()>
<android.view.DisplayCutout: int getSafeInsetBottom()>
<android.view.DisplayCutout: int getSafeInsetTop()>
<android.view.DisplayCutout: android.graphics.Rect getBoundingRectLeft()>
<android.view.DisplayCutout: java.util.List getBoundingRects()>
<android.view.DisplayCutout: android.graphics.Rect getBoundingRectBottom()>
<android.view.DisplayCutout: void <init>(android.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>
<dalvik.system.DelegateLastClassLoader: void <init>(String,ClassLoader)>
<dalvik.system.DelegateLastClassLoader: void <init>(String,String,ClassLoader,boolean)>
<dalvik.system.DelegateLastClassLoader: void <init>(String,String,ClassLoader)>
<android.service.voice.VoiceInteractionSession.PickOptionRequest: void sendPickOptionResult(android.app.VoiceInteractor.PickOptionRequest.Option[],android.os.Bundle)>
<android.service.voice.VoiceInteractionSession.PickOptionRequest: android.app.VoiceInteractor.PickOptionRequest.Option[] getOptions()>
<android.service.voice.VoiceInteractionSession.PickOptionRequest: CharSequence getPrompt()>
<android.service.voice.VoiceInteractionSession.PickOptionRequest: void sendIntermediatePickOptionResult(android.app.VoiceInteractor.PickOptionRequest.Option[],android.os.Bundle)>
<android.service.voice.VoiceInteractionSession.PickOptionRequest: android.app.VoiceInteractor.Prompt getVoicePrompt()>
<android.view.ViewTreeObserver.OnTouchModeChangeListener: void onTouchModeChanged(boolean)>
<android.net.http.SslError: void <init>(int,android.net.http.SslCertificate,String)>
<android.net.http.SslError: void <init>(int,android.net.http.SslCertificate)>
<android.net.http.SslError: boolean addError(int)>
<android.net.http.SslError: void <init>(int,java.security.cert.X509Certificate,String)>
<android.net.http.SslError: java.lang.String getUrl()>
<android.net.http.SslError: int getPrimaryError()>
<android.net.http.SslError: void <init>(int,java.security.cert.X509Certificate)>
<android.net.http.SslError: android.net.http.SslCertificate getCertificate()>
<android.net.http.SslError: boolean hasError(int)>
<java.util.function.IntToDoubleFunction: double applyAsDouble(int)>
<android.app.backup.FileBackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)>
<android.app.backup.FileBackupHelper: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<android.app.backup.FileBackupHelper: void <init>(android.content.Context,java.lang.String...)>
<android.app.backup.FileBackupHelper: void writeNewStateDescription(android.os.ParcelFileDescriptor)>
<java.io.BufferedWriter: void newLine()>
<java.io.BufferedWriter: void flush()>
<java.io.BufferedWriter: void close()>
<java.io.BufferedWriter: void <init>(java.io.Writer,int)>
<java.io.BufferedWriter: void write(char[],int,int)>
<java.io.BufferedWriter: void <init>(java.io.Writer)>
<android.media.AudioTrack.StreamEventCallback: void <init>()>
<android.media.AudioTrack.StreamEventCallback: void onPresentationEnded(android.media.AudioTrack)>
<android.media.AudioTrack.StreamEventCallback: void onTearDown(android.media.AudioTrack)>
<android.media.AudioTrack.StreamEventCallback: void onDataRequest(android.media.AudioTrack,int)>
<android.bluetooth.le.AdvertiseSettings.Builder: void <init>()>
<android.bluetooth.le.AdvertiseSettings.Builder: android.bluetooth.le.AdvertiseSettings.Builder setTxPowerLevel(int)>
<android.bluetooth.le.AdvertiseSettings.Builder: android.bluetooth.le.AdvertiseSettings build()>
<android.bluetooth.le.AdvertiseSettings.Builder: android.bluetooth.le.AdvertiseSettings.Builder setConnectable(boolean)>
<android.bluetooth.le.AdvertiseSettings.Builder: android.bluetooth.le.AdvertiseSettings.Builder setAdvertiseMode(int)>
<android.bluetooth.le.AdvertiseSettings.Builder: android.bluetooth.le.AdvertiseSettings.Builder setTimeout(int)>
<android.preference.Preference.BaseSavedState: void <init>(android.os.Parcelable)>
<android.preference.Preference.BaseSavedState: void <init>(android.os.Parcel)>
<android.renderscript.ScriptC: void <init>(android.renderscript.RenderScript,android.content.res.Resources,int)>
<android.renderscript.ScriptC: void <init>(long,android.renderscript.RenderScript)>
<android.renderscript.ScriptC: void <init>(int,android.renderscript.RenderScript)>
<android.renderscript.ScriptC: void <init>(android.renderscript.RenderScript,String,byte[],byte[])>
<android.icu.text.CaseMap: android.icu.text.CaseMap.Lower toLower()>
<android.icu.text.CaseMap: android.icu.text.CaseMap.Upper toUpper()>
<android.icu.text.CaseMap: android.icu.text.CaseMap.Title toTitle()>
<android.icu.text.CaseMap: android.icu.text.CaseMap omitUnchangedText()>
<android.icu.text.CaseMap: android.icu.text.CaseMap.Fold fold()>
<android.net.IpSecManager.IpSecTunnelInterface: java.lang.String getInterfaceName()>
<android.net.IpSecManager.IpSecTunnelInterface: void addAddress(java.net.InetAddress,int)>
<android.net.IpSecManager.IpSecTunnelInterface: void close()>
<android.net.IpSecManager.IpSecTunnelInterface: void removeAddress(java.net.InetAddress,int)>
<android.view.LayoutInflater.Factory: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)>
<javax.crypto.MacSpi: java.lang.Object clone()>
<javax.crypto.MacSpi: void engineReset()>
<javax.crypto.MacSpi: void engineUpdate(byte)>
<javax.crypto.MacSpi: void engineUpdate(java.nio.ByteBuffer)>
<javax.crypto.MacSpi: int engineGetMacLength()>
<javax.crypto.MacSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<javax.crypto.MacSpi: void engineUpdate(byte[],int,int)>
<javax.crypto.MacSpi: void <init>()>
<javax.crypto.MacSpi: byte[] engineDoFinal()>
<android.media.AudioRecord.OnRecordPositionUpdateListener: void onPeriodicNotification(android.media.AudioRecord)>
<android.media.AudioRecord.OnRecordPositionUpdateListener: void onMarkerReached(android.media.AudioRecord)>
<android.provider.ContactsContract.ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract.ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract.ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<android.provider.ContactsContract.ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<java.time.temporal.TemporalAdjuster: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>
<android.media.audiofx.Equalizer.Settings: void <init>()>
<android.media.audiofx.Equalizer.Settings: void <init>(String)>
<java.lang.OutOfMemoryError: void <init>()>
<java.lang.OutOfMemoryError: void <init>(String)>
<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothHealth: boolean registerSinkAppConfiguration(java.lang.String,int,android.bluetooth.BluetoothHealthCallback)>
<android.bluetooth.BluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>
<android.bluetooth.BluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>
<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothHealth: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)>
<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>
<android.telephony.ims.ImsException: void <init>(String,int)>
<android.telephony.ims.ImsException: void <init>(String,int,Throwable)>
<android.telephony.ims.ImsException: void <init>(String)>
<android.telephony.ims.ImsException: int getCode()>
<android.hardware.SensorListener: void onSensorChanged(int,float[])>
<android.hardware.SensorListener: void onAccuracyChanged(int,int)>
<android.net.LocalServerSocket: android.net.LocalSocket accept()>
<android.net.LocalServerSocket: void close()>
<android.net.LocalServerSocket: java.io.FileDescriptor getFileDescriptor()>
<android.net.LocalServerSocket: void <init>(java.io.FileDescriptor)>
<android.net.LocalServerSocket: android.net.LocalSocketAddress getLocalSocketAddress()>
<android.net.LocalServerSocket: void <init>(String)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.Optional findAny()>
<java.util.stream.Stream extends java.util.stream.BaseStream: boolean anyMatch(java.util.function.Predicate)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.IntStream mapToInt(java.util.function.ToIntFunction)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.Stream filter(java.util.function.Predicate)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.Stream sorted()>
<java.util.stream.Stream extends java.util.stream.BaseStream: T reduce(T,java.util.function.BinaryOperator)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.Stream generate(java.util.function.Supplier)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.Stream of(T...)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.Stream skip(long)>
<java.util.stream.Stream extends java.util.stream.BaseStream: void forEachOrdered(java.util.function.Consumer)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.lang.Object[] toArray()>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.Optional min(java.util.Comparator)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.IntStream flatMapToInt(java.util.function.Function)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.Stream map(java.util.function.Function)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.Optional reduce(java.util.function.BinaryOperator)>
<java.util.stream.Stream extends java.util.stream.BaseStream: U reduce(U,java.util.function.BiFunction,java.util.function.BinaryOperator)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.LongStream flatMapToLong(java.util.function.Function)>
<java.util.stream.Stream extends java.util.stream.BaseStream: void forEach(java.util.function.Consumer)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.Optional max(java.util.Comparator)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.DoubleStream flatMapToDouble(java.util.function.Function)>
<java.util.stream.Stream extends java.util.stream.BaseStream: R collect(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BiConsumer)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.Stream flatMap(java.util.function.Function)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.Stream iterate(T,java.util.function.UnaryOperator)>
<java.util.stream.Stream extends java.util.stream.BaseStream: A[] toArray(java.util.function.IntFunction)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.DoubleStream mapToDouble(java.util.function.ToDoubleFunction)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.Stream limit(long)>
<java.util.stream.Stream extends java.util.stream.BaseStream: boolean noneMatch(java.util.function.Predicate)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.LongStream mapToLong(java.util.function.ToLongFunction)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.Stream sorted(java.util.Comparator)>
<java.util.stream.Stream extends java.util.stream.BaseStream: R collect(java.util.stream.Collector)>
<java.util.stream.Stream extends java.util.stream.BaseStream: long count()>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.Stream empty()>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.Stream peek(java.util.function.Consumer)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.Stream.Builder builder()>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.Stream of(T)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.Optional findFirst()>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.Stream concat(java.util.stream.Stream,java.util.stream.Stream)>
<java.util.stream.Stream extends java.util.stream.BaseStream: java.util.stream.Stream distinct()>
<java.util.stream.Stream extends java.util.stream.BaseStream: boolean allMatch(java.util.function.Predicate)>
<android.view.textservice.TextInfo: int describeContents()>
<android.view.textservice.TextInfo: void <init>(String,int,int)>
<android.view.textservice.TextInfo: int getSequence()>
<android.view.textservice.TextInfo: CharSequence getCharSequence()>
<android.view.textservice.TextInfo: java.lang.String getText()>
<android.view.textservice.TextInfo: void <init>(android.os.Parcel)>
<android.view.textservice.TextInfo: void <init>(CharSequence,int,int,int,int)>
<android.view.textservice.TextInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.textservice.TextInfo: void <init>(String)>
<android.view.textservice.TextInfo: int getCookie()>
<java.security.spec.RSAKeyGenParameterSpec: void <init>(int,java.math.BigInteger)>
<java.security.spec.RSAKeyGenParameterSpec: int getKeysize()>
<java.security.spec.RSAKeyGenParameterSpec: java.math.BigInteger getPublicExponent()>
<android.database.CursorWrapper: void close()>
<android.database.CursorWrapper: int getColumnCount()>
<android.database.CursorWrapper: boolean requery()>
<android.database.CursorWrapper: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>
<android.database.CursorWrapper: byte[] getBlob(int)>
<android.database.CursorWrapper: int getPosition()>
<android.database.CursorWrapper: boolean isLast()>
<android.database.CursorWrapper: double getDouble(int)>
<android.database.CursorWrapper: void registerContentObserver(android.database.ContentObserver)>
<android.database.CursorWrapper: short getShort(int)>
<android.database.CursorWrapper: float getFloat(int)>
<android.database.CursorWrapper: boolean moveToNext()>
<android.database.CursorWrapper: int getType(int)>
<android.database.CursorWrapper: int getColumnIndex(java.lang.String)>
<android.database.CursorWrapper: java.lang.String getColumnName(int)>
<android.database.CursorWrapper: boolean isBeforeFirst()>
<android.database.CursorWrapper: void copyStringToBuffer(int,android.database.CharArrayBuffer)>
<android.database.CursorWrapper: java.lang.String[] getColumnNames()>
<android.database.CursorWrapper: android.os.Bundle getExtras()>
<android.database.CursorWrapper: void registerDataSetObserver(android.database.DataSetObserver)>
<android.database.CursorWrapper: int getInt(int)>
<android.database.CursorWrapper: boolean moveToPosition(int)>
<android.database.CursorWrapper: void unregisterContentObserver(android.database.ContentObserver)>
<android.database.CursorWrapper: int getCount()>
<android.database.CursorWrapper: boolean moveToFirst()>
<android.database.CursorWrapper: boolean getWantsAllOnMoveCalls()>
<android.database.CursorWrapper: android.net.Uri getNotificationUri()>
<android.database.CursorWrapper: void setExtras(android.os.Bundle)>
<android.database.CursorWrapper: void deactivate()>
<android.database.CursorWrapper: boolean isNull(int)>
<android.database.CursorWrapper: boolean isFirst()>
<android.database.CursorWrapper: android.os.Bundle respond(android.os.Bundle)>
<android.database.CursorWrapper: int getColumnIndexOrThrow(java.lang.String)>
<android.database.CursorWrapper: boolean isClosed()>
<android.database.CursorWrapper: boolean moveToPrevious()>
<android.database.CursorWrapper: void <init>(android.database.Cursor)>
<android.database.CursorWrapper: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.database.CursorWrapper: boolean moveToLast()>
<android.database.CursorWrapper: android.database.Cursor getWrappedCursor()>
<android.database.CursorWrapper: boolean isAfterLast()>
<android.database.CursorWrapper: java.lang.String getString(int)>
<android.database.CursorWrapper: long getLong(int)>
<android.database.CursorWrapper: boolean move(int)>
<android.security.keystore.KeyGenParameterSpec: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()>
<android.security.keystore.KeyGenParameterSpec: boolean isUserConfirmationRequired()>
<android.security.keystore.KeyGenParameterSpec: boolean isRandomizedEncryptionRequired()>
<android.security.keystore.KeyGenParameterSpec: java.util.Date getCertificateNotBefore()>
<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityForOriginationEnd()>
<android.security.keystore.KeyGenParameterSpec: int getPurposes()>
<android.security.keystore.KeyGenParameterSpec: java.lang.String getKeystoreAlias()>
<android.security.keystore.KeyGenParameterSpec: boolean isInvalidatedByBiometricEnrollment()>
<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityStart()>
<android.security.keystore.KeyGenParameterSpec: int getKeySize()>
<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityForConsumptionEnd()>
<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getSignaturePaddings()>
<android.security.keystore.KeyGenParameterSpec: boolean isDigestsSpecified()>
<android.security.keystore.KeyGenParameterSpec: boolean isUserAuthenticationValidWhileOnBody()>
<android.security.keystore.KeyGenParameterSpec: byte[] getAttestationChallenge()>
<android.security.keystore.KeyGenParameterSpec: boolean isStrongBoxBacked()>
<android.security.keystore.KeyGenParameterSpec: java.util.Date getCertificateNotAfter()>
<android.security.keystore.KeyGenParameterSpec: javax.security.auth.x500.X500Principal getCertificateSubject()>
<android.security.keystore.KeyGenParameterSpec: int getUserAuthenticationValidityDurationSeconds()>
<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getBlockModes()>
<android.security.keystore.KeyGenParameterSpec: java.math.BigInteger getCertificateSerialNumber()>
<android.security.keystore.KeyGenParameterSpec: boolean isUserAuthenticationRequired()>
<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getEncryptionPaddings()>
<android.security.keystore.KeyGenParameterSpec: boolean isUnlockedDeviceRequired()>
<android.security.keystore.KeyGenParameterSpec: boolean isUserPresenceRequired()>
<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getDigests()>
<android.icu.text.AlphabeticIndex.ImmutableIndex: java.util.Iterator iterator()>
<android.icu.text.AlphabeticIndex.ImmutableIndex: int getBucketCount()>
<android.icu.text.AlphabeticIndex.ImmutableIndex: int getBucketIndex(CharSequence)>
<android.icu.text.AlphabeticIndex.ImmutableIndex: android.icu.text.AlphabeticIndex.Bucket getBucket(int)>
<android.icu.text.UCharacterIterator: int nextCodePoint()>
<android.icu.text.UCharacterIterator: int previous()>
<android.icu.text.UCharacterIterator: android.icu.text.UCharacterIterator getInstance(java.lang.StringBuffer)>
<android.icu.text.UCharacterIterator: int next()>
<android.icu.text.UCharacterIterator: int getIndex()>
<android.icu.text.UCharacterIterator: android.icu.text.UCharacterIterator getInstance(android.icu.text.Replaceable)>
<android.icu.text.UCharacterIterator: int currentCodePoint()>
<android.icu.text.UCharacterIterator: int current()>
<android.icu.text.UCharacterIterator: java.text.CharacterIterator getCharacterIterator()>
<android.icu.text.UCharacterIterator: android.icu.text.UCharacterIterator getInstance(char[])>
<android.icu.text.UCharacterIterator: int moveIndex(int)>
<android.icu.text.UCharacterIterator: android.icu.text.UCharacterIterator getInstance(char[],int,int)>
<android.icu.text.UCharacterIterator: void <init>()>
<android.icu.text.UCharacterIterator: android.icu.text.UCharacterIterator getInstance(java.lang.String)>
<android.icu.text.UCharacterIterator: int getText(char[])>
<android.icu.text.UCharacterIterator: java.lang.String getText()>
<android.icu.text.UCharacterIterator: int getText(char[],int)>
<android.icu.text.UCharacterIterator: void setToLimit()>
<android.icu.text.UCharacterIterator: void setToStart()>
<android.icu.text.UCharacterIterator: int getLength()>
<android.icu.text.UCharacterIterator: java.lang.Object clone()>
<android.icu.text.UCharacterIterator: android.icu.text.UCharacterIterator getInstance(java.text.CharacterIterator)>
<android.icu.text.UCharacterIterator: int moveCodePointIndex(int)>
<android.icu.text.UCharacterIterator: int previousCodePoint()>
<android.icu.text.UCharacterIterator: void setIndex(int)>
<android.view.View: int computeVerticalScrollRange()>
<android.view.View: int getWidth()>
<android.view.View: boolean requestFocus(int)>
<android.view.View: int getPaddingBottom()>
<android.view.View: void postOnAnimationDelayed(Runnable,long)>
<android.view.View: boolean isForceDarkAllowed()>
<android.view.View: android.os.IBinder getApplicationWindowToken()>
<android.view.View: boolean isTextDirectionResolved()>
<android.view.View: boolean dispatchKeyEventPreIme(android.view.KeyEvent)>
<android.view.View: android.view.autofill.AutofillId getAutofillId()>
<android.view.View: void getFocusedRect(android.graphics.Rect)>
<android.view.View: CharSequence getAccessibilityPaneTitle()>
<android.view.View: boolean isOpaque()>
<android.view.View: boolean performHapticFeedback(int)>
<android.view.View: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>
<android.view.View: int getImportantForAccessibility()>
<android.view.View: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.view.View: boolean hasOnClickListeners()>
<android.view.View: int getLayerType()>
<android.view.View: void setScrollBarDefaultDelayBeforeFade(int)>
<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>
<android.view.View: boolean isPaddingOffsetRequired()>
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>
<android.view.View: boolean isSoundEffectsEnabled()>
<android.view.View: void onDetachedFromWindow()>
<android.view.View: void invalidate()>
<android.view.View: void setVerticalScrollBarEnabled(boolean)>
<android.view.View: boolean dispatchNestedPreScroll(int,int,int[],int[])>
<android.view.View: boolean getKeepScreenOn()>
<android.view.View: boolean isDefaultFocusHighlightNeeded(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.view.View: int getAccessibilityLiveRegion()>
<android.view.View: void setWillNotCacheDrawing(boolean)>
<android.view.View: int computeHorizontalScrollRange()>
<android.view.View: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>
<android.view.View: long getUniqueDrawingId()>
<android.view.View: boolean awakenScrollBars(int)>
<android.view.View: boolean performAccessibilityAction(int,android.os.Bundle)>
<android.view.View: void setRotation(float)>
<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>
<android.view.View: void dispatchSetSelected(boolean)>
<android.view.View: void setStateListAnimator(android.animation.StateListAnimator)>
<android.view.View: android.graphics.Matrix getMatrix()>
<android.view.View: int getNextFocusUpId()>
<android.view.View: boolean isSelected()>
<android.view.View: void setOutlineAmbientShadowColor(@ColorIntint)>
<android.view.View: int getVerticalScrollbarWidth()>
<android.view.View: void dispatchWindowVisibilityChanged(int)>
<android.view.View: int getTextDirection()>
<android.view.View: void setLayoutDirection(int)>
<android.view.View: android.view.View.OnFocusChangeListener getOnFocusChangeListener()>
<android.view.View: boolean onCapturedPointerEvent(android.view.MotionEvent)>
<android.view.View: float getX()>
<android.view.View: java.lang.Object getTag(int)>
<android.view.View: int getAccessibilityTraversalBefore()>
<android.view.View: boolean post(Runnable)>
<android.view.View: void setForegroundTintBlendMode(android.graphics.BlendMode)>
<android.view.View: void jumpDrawablesToCurrentState()>
<android.view.View: void offsetLeftAndRight(int)>
<android.view.View: void setLeft(int)>
<android.view.View: int getTextAlignment()>
<android.view.View: void setScrollIndicators(int,int)>
<android.view.View: int getPaddingTop()>
<android.view.View: int getOverScrollMode()>
<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.View: int getPaddingEnd()>
<android.view.View: void setAnimationMatrix(android.graphics.Matrix)>
<android.view.View: void postInvalidate(int,int,int,int)>
<android.view.View: boolean isLayoutRequested()>
<android.view.View: boolean requestFocusFromTouch()>
<android.view.View: void postInvalidateOnAnimation(int,int,int,int)>
<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>
<android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)>
<android.view.View: void setSaveEnabled(boolean)>
<android.view.View: void onAttachedToWindow()>
<android.view.View: android.view.WindowId getWindowId()>
<android.view.View: boolean isImportantForAccessibility()>
<android.view.View: android.os.Parcelable onSaveInstanceState()>
<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode.Callback)>
<android.view.View: void setNextFocusDownId(@IdResint)>
<android.view.View: boolean dispatchUnhandledMove(android.view.View,int)>
<android.view.View: void requestUnbufferedDispatch(android.view.MotionEvent)>
<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void setTouchDelegate(android.view.TouchDelegate)>
<android.view.View: void setScrollbarFadingEnabled(boolean)>
<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>
<android.view.View: boolean onDragEvent(android.view.DragEvent)>
<android.view.View: boolean showContextMenu(float,float)>
<android.view.View: android.view.View getRootView()>
<android.view.View: void onAnimationEnd()>
<android.view.View: boolean isInLayout()>
<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<android.view.View: void setImportantForAutofill(int)>
<android.view.View: int getNextFocusRightId()>
<android.view.View: int getMeasuredState()>
<android.view.View: void setAccessibilityTraversalAfter(@IdResint)>
<android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>
<android.view.View: boolean callOnClick()>
<android.view.View: int getSolidColor()>
<android.view.View: void onDrawForeground(android.graphics.Canvas)>
<android.view.View: void setOnCreateContextMenuListener(android.view.View.OnCreateContextMenuListener)>
<android.view.View: void dispatchDisplayHint(int)>
<android.view.View: void bringToFront()>
<android.view.View: void buildDrawingCache()>
<android.view.View: android.graphics.drawable.Drawable getForeground()>
<android.view.View: int getNextFocusDownId()>
<android.view.View: int getMeasuredWidth()>
<android.view.View: android.view.ViewParent getParent()>
<android.view.View: void setAccessibilityHeading(boolean)>
<android.view.View: boolean isTemporarilyDetached()>
<android.view.View: int[] mergeDrawableStates(int[],int[])>
<android.view.View: void setFocusedInCluster()>
<android.view.View: android.graphics.drawable.Drawable getHorizontalScrollbarThumbDrawable()>
<android.view.View: int getVerticalFadingEdgeLength()>
<android.view.View: void removeOnUnhandledKeyEventListener(android.view.View.OnUnhandledKeyEventListener)>
<android.view.View: void setAccessibilityTraversalBefore(@IdResint)>
<android.view.View: void onProvideAutofillStructure(android.view.ViewStructure,int)>
<android.view.View: int getNextFocusLeftId()>
<android.view.View: void onCancelPendingInputEvents()>
<android.view.View: void onConfigurationChanged(android.content.res.Configuration)>
<android.view.View: android.view.Display getDisplay()>
<android.view.View: boolean isPaddingRelative()>
<android.view.View: void setOutlineProvider(android.view.ViewOutlineProvider)>
<android.view.View: android.view.animation.Animation getAnimation()>
<android.view.View: void setScrollX(int)>
<android.view.View: void draw(android.graphics.Canvas)>
<android.view.View: boolean isContextClickable()>
<android.view.View: boolean isAutofilled()>
<android.view.View: void onCreateContextMenu(android.view.ContextMenu)>
<android.view.View: boolean isDefaultFocusHighlightEnabled()>
<android.view.View: void addFocusables(java.util.ArrayList,int,int)>
<android.view.View: T findViewWithTag(java.lang.Object)>
<android.view.View: boolean isHorizontalFadingEdgeEnabled()>
<android.view.View: void onWindowVisibilityChanged(int)>
<android.view.View: void removeOnAttachStateChangeListener(android.view.View.OnAttachStateChangeListener)>
<android.view.View: void setMeasuredDimension(int,int)>
<android.view.View: long getDrawingTime()>
<android.view.View: boolean isTextAlignmentResolved()>
<android.view.View: void setId(@IdResint)>
<android.view.View: android.content.res.ColorStateList getBackgroundTintList()>
<android.view.View: int getScrollBarFadeDuration()>
<android.view.View: void releasePointerCapture()>
<android.view.View: boolean restoreDefaultFocus()>
<android.view.View: boolean canScrollHorizontally(int)>
<android.view.View: int getSystemUiVisibility()>
<android.view.View: android.view.WindowInsets getRootWindowInsets()>
<android.view.View: boolean fitSystemWindows(android.graphics.Rect)>
<android.view.View: void setVerticalScrollbarThumbDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void setPivotX(float)>
<android.view.View: boolean isSaveEnabled()>
<android.view.View: void setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener)>
<android.view.View: int getBaseline()>
<android.view.View: void setFitsSystemWindows(boolean)>
<android.view.View: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>
<android.view.View: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.view.View: int computeHorizontalScrollExtent()>
<android.view.View: android.os.Handler getHandler()>
<android.view.View: void startAnimation(android.view.animation.Animation)>
<android.view.View: void setOnKeyListener(android.view.View.OnKeyListener)>
<android.view.View: int getNextClusterForwardId()>
<android.view.View: void setPadding(int,int,int,int)>
<android.view.View: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>
<android.view.View: void setHorizontalScrollbarTrackDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void clearFocus()>
<android.view.View: boolean requestFocus(int,android.graphics.Rect)>
<android.view.View: void setSoundEffectsEnabled(boolean)>
<android.view.View: void setTag(java.lang.Object)>
<android.view.View: java.util.ArrayList getFocusables(int)>
<android.view.View: void getHitRect(android.graphics.Rect)>
<android.view.View: boolean performContextClick(float,float)>
<android.view.View: CharSequence getTooltipText()>
<android.view.View: T findViewById(@IdResint)>
<android.view.View: int getDrawingCacheQuality()>
<android.view.View: void resetPivot()>
<android.view.View: void setTranslationX(float)>
<android.view.View: void clearAnimation()>
<android.view.View: void setOnDragListener(android.view.View.OnDragListener)>
<android.view.View: void setContentCaptureSession(android.view.contentcapture.ContentCaptureSession)>
<android.view.View: int getScrollBarDefaultDelayBeforeFade()>
<android.view.View: void setOnGenericMotionListener(android.view.View.OnGenericMotionListener)>
<android.view.View: boolean willNotCacheDrawing()>
<android.view.View: void setHorizontalScrollBarEnabled(boolean)>
<android.view.View: int getHeight()>
<android.view.View: int getRight()>
<android.view.View: boolean isLongClickable()>
<android.view.View: android.content.Context getContext()>
<android.view.View: int getPaddingLeft()>
<android.view.View: boolean isAttachedToWindow()>
<android.view.View: boolean removeCallbacks(Runnable)>
<android.view.View: void setOnClickListener(android.view.View.OnClickListener)>
<android.view.View: void setNextFocusForwardId(@IdResint)>
<android.view.View: void setClipToOutline(boolean)>
<android.view.View: boolean onKeyPreIme(int,android.view.KeyEvent)>
<android.view.View: void onProvideStructure(android.view.ViewStructure)>
<android.view.View: int getAccessibilityTraversalAfter()>
<android.view.View: void invalidate(android.graphics.Rect)>
<android.view.View: void onStartTemporaryDetach()>
<android.view.View: void setSystemGestureExclusionRects(java.util.List)>
<android.view.View: float getBottomFadingEdgeStrength()>
<android.view.View: void updateDragShadow(android.view.View.DragShadowBuilder)>
<android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)>
<android.view.View: void setNextFocusLeftId(@IdResint)>
<android.view.View: void onOverScrolled(int,int,boolean,boolean)>
<android.view.View: void addFocusables(java.util.ArrayList,int)>
<android.view.View: void setClipBounds(android.graphics.Rect)>
<android.view.View: boolean getFitsSystemWindows()>
<android.view.View: void requestLayout()>
<android.view.View: void requestPointerCapture()>
<android.view.View: boolean isLaidOut()>
<android.view.View: void onWindowSystemUiVisibilityChanged(int)>
<android.view.View: void setTranslationZ(float)>
<android.view.View: boolean isVisibleToUserForAutofill(int)>
<android.view.View: void invalidate(int,int,int,int)>
<android.view.View: android.view.View getTooltipView()>
<android.view.View: void onSizeChanged(int,int,int,int)>
<android.view.View: void removeOnLayoutChangeListener(android.view.View.OnLayoutChangeListener)>
<android.view.View: boolean getFilterTouchesWhenObscured()>
<android.view.View: boolean isHorizontalScrollBarEnabled()>
<android.view.View: boolean isVerticalScrollBarEnabled()>
<android.view.View: android.view.View.AccessibilityDelegate getAccessibilityDelegate()>
<android.view.View: boolean canResolveTextDirection()>
<android.view.View: boolean hasNestedScrollingParent()>
<android.view.View: void setActivated(boolean)>
<android.view.View: int getBottomPaddingOffset()>
<android.view.View: boolean isHardwareAccelerated()>
<android.view.View: void dispatchSetPressed(boolean)>
<android.view.View: android.view.ViewParent getParentForAccessibility()>
<android.view.View: void setFocusedByDefault(boolean)>
<android.view.View: void setOnFocusChangeListener(android.view.View.OnFocusChangeListener)>
<android.view.View: void setForegroundGravity(int)>
<android.view.View: void setForeground(android.graphics.drawable.Drawable)>
<android.view.View: boolean isPivotSet()>
<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.View: void setBackgroundColor(@ColorIntint)>
<android.view.View: void getLocationOnScreen(int[])>
<android.view.View: int getVisibility()>
<android.view.View: void scheduleDrawable(android.graphics.drawable.Drawable,Runnable,long)>
<android.view.View: boolean restoreFocusNotInCluster()>
<android.view.View: android.view.ViewOutlineProvider getOutlineProvider()>
<android.view.View: void setTextDirection(int)>
<android.view.View: int generateViewId()>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: float getTopFadingEdgeStrength()>
<android.view.View: boolean dispatchNestedFling(float,float,boolean)>
<android.view.View: void setClickable(boolean)>
<android.view.View: void setPaddingRelative(int,int,int,int)>
<android.view.View: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.view.View: boolean isSaveFromParentEnabled()>
<android.view.View: android.view.TouchDelegate getTouchDelegate()>
<android.view.View: void setPivotY(float)>
<android.view.View: android.graphics.BlendMode getBackgroundTintBlendMode()>
<android.view.View: boolean isFocused()>
<android.view.View: boolean getLocalVisibleRect(android.graphics.Rect)>
<android.view.View: void cancelPendingInputEvents()>
<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>
<android.view.View: int getHorizontalScrollbarHeight()>
<android.view.View: boolean postDelayed(Runnable,long)>
<android.view.View: void resetResolvedTextDirection()>
<android.view.View: int getDrawingCacheBackgroundColor()>
<android.view.View: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void onAnimationStart()>
<android.view.View: void setTag(int,java.lang.Object)>
<android.view.View: void setHorizontalScrollbarThumbDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void setOutlineSpotShadowColor(@ColorIntint)>
<android.view.View: void saveHierarchyState(android.util.SparseArray)>
<android.view.View: boolean hasPointerCapture()>
<android.view.View: void setBackgroundTintMode(android.graphics.PorterDuff.Mode)>
<android.view.View: int getImportantForAutofill()>
<android.view.View: android.os.IBinder getWindowToken()>
<android.view.View: void setDrawingCacheQuality(int)>
<android.view.View: int[] getDrawableState()>
<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>
<android.view.View: void getDrawingRect(android.graphics.Rect)>
<android.view.View: boolean willNotDraw()>
<android.view.View: boolean getClipBounds(android.graphics.Rect)>
<android.view.View: void setBackgroundResource(@DrawableResint)>
<android.view.View: void cancelDragAndDrop()>
<android.view.View: boolean performHapticFeedback(int,int)>
<android.view.View: void onVisibilityChanged(android.view.View,int)>
<android.view.View: boolean performLongClick()>
<android.view.View: void dispatchSystemUiVisibilityChanged(int)>
<android.view.View: android.animation.StateListAnimator getStateListAnimator()>
<android.view.View: void addTouchables(java.util.ArrayList)>
<android.view.View: void stopNestedScroll()>
<android.view.View: int getWindowAttachCount()>
<android.view.View: boolean hasWindowFocus()>
<android.view.View: void setNextFocusUpId(@IdResint)>
<android.view.View: int getTop()>
<android.view.View: void setVisibility(int)>
<android.view.View: boolean isLayoutDirectionResolved()>
<android.view.View: float getScaleY()>
<android.view.View: boolean isHapticFeedbackEnabled()>
<android.view.View: android.view.View keyboardNavigationClusterSearch(android.view.View,int)>
<android.view.View: boolean onTrackballEvent(android.view.MotionEvent)>
<android.view.View: void setOnTouchListener(android.view.View.OnTouchListener)>
<android.view.View: int computeVerticalScrollOffset()>
<android.view.View: void offsetTopAndBottom(int)>
<android.view.View: void findViewsWithText(java.util.ArrayList,CharSequence,int)>
<android.view.View: boolean restoreFocusInCluster(int)>
<android.view.View: void drawableHotspotChanged(float,float)>
<android.view.View: java.util.Map getAttributeSourceResourceMap()>
<android.view.View: void onMeasure(int,int)>
<android.view.View: void autofill(android.util.SparseArray)>
<android.view.View: void setTooltipText(CharSequence)>
<android.view.View: int getMinimumWidth()>
<android.view.View: int getHorizontalFadingEdgeLength()>
<android.view.View: void invalidateOutline()>
<android.view.View: void setAccessibilityDelegate(android.view.View.AccessibilityDelegate)>
<android.view.View: android.view.autofill.AutofillValue getAutofillValue()>
<android.view.View: void cancelLongPress()>
<android.view.View: boolean isHovered()>
<android.view.View: void onDrawScrollBars(android.graphics.Canvas)>
<android.view.View: boolean performLongClick(float,float)>
<android.view.View: boolean isInEditMode()>
<android.view.View: boolean onKeyDown(int,android.view.KeyEvent)>
<android.view.View: boolean onKeyUp(int,android.view.KeyEvent)>
<android.view.View: boolean canScrollVertically(int)>
<android.view.View: int computeHorizontalScrollOffset()>
<android.view.View: int getWindowSystemUiVisibility()>
<android.view.View: boolean startNestedScroll(int)>
<android.view.View: void buildLayer()>
<android.view.View: void setOnLongClickListener(android.view.View.OnLongClickListener)>
<android.view.View: void setHorizontalFadingEdgeEnabled(boolean)>
<android.view.View: void setFadingEdgeLength(int)>
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.view.View: void addOnLayoutChangeListener(android.view.View.OnLayoutChangeListener)>
<android.view.View: void setElevation(float)>
<android.view.View: void setVerticalFadingEdgeEnabled(boolean)>
<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode.Callback,int)>
<android.view.View: void playSoundEffect(int)>
<android.view.View: void setEnabled(boolean)>
<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)>
<android.view.View: void setOnScrollChangeListener(android.view.View.OnScrollChangeListener)>
<android.view.View: int getMeasuredHeight()>
<android.view.View: void postInvalidateOnAnimation()>
<android.view.View: void setOverScrollMode(int)>
<android.view.View: void setTranslationY(float)>
<android.view.View: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>
<android.view.View: void setTextAlignment(int)>
<android.view.View: void dispatchWindowFocusChanged(boolean)>
<android.view.View: void setFocusable(int)>
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)>
<android.view.View: void setLayerPaint(android.graphics.Paint)>
<android.view.View: void setCameraDistance(float)>
<android.view.View: float getTranslationX()>
<android.view.View: boolean onHoverEvent(android.view.MotionEvent)>
<android.view.View: void setScreenReaderFocusable(boolean)>
<android.view.View: boolean isKeyboardNavigationCluster()>
<android.view.View: android.graphics.drawable.Drawable getVerticalScrollbarTrackDrawable()>
<android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View.OnSystemUiVisibilityChangeListener)>
<android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>
<android.view.View: int getId()>
<android.view.View: boolean isEnabled()>
<android.view.View: void measure(int,int)>
<android.view.View: int getScrollY()>
<android.view.View: boolean performClick()>
<android.view.View: CharSequence getContentDescription()>
<android.view.View: void restoreHierarchyState(android.util.SparseArray)>
<android.view.View: void scrollBy(int,int)>
<android.view.View: boolean onCheckIsTextEditor()>
<android.view.View: boolean awakenScrollBars(int,boolean)>
<android.view.View: int getLayoutDirection()>
<android.view.View: void setAutofillId(android.view.autofill.AutofillId)>
<android.view.View: boolean isFocusable()>
<android.view.View: void autofill(android.view.autofill.AutofillValue)>
<android.view.View: void onHoverChanged(boolean)>
<android.view.View: android.content.res.Resources getResources()>
<android.view.View: java.lang.String getTransitionName()>
<android.view.View: boolean isScrollContainer()>
<android.view.View: void resetResolvedLayoutDirection()>
<android.view.View: void setScrollBarStyle(int)>
<android.view.View: android.view.contentcapture.ContentCaptureSession getContentCaptureSession()>
<android.view.View: float getTranslationY()>
<android.view.View: float getScaleX()>
<android.view.View: void setRotationY(float)>
<android.view.View: void setHasTransientState(boolean)>
<android.view.View: void onProvideVirtualStructure(android.view.ViewStructure)>
<android.view.View: float getPivotY()>
<android.view.View: int getScrollX()>
<android.view.View: int getScrollBarSize()>
<android.view.View: boolean isFocusableInTouchMode()>
<android.view.View: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.view.View: boolean getClipToOutline()>
<android.view.View: boolean dispatchNestedPreFling(float,float)>
<android.view.View: boolean dispatchNestedPrePerformAccessibilityAction(int,android.os.Bundle)>
<android.view.View: void refreshDrawableState()>
<android.view.View: boolean isScrollbarFadingEnabled()>
<android.view.View: boolean hasOverlappingRendering()>
<android.view.View: void setVerticalScrollbarPosition(int)>
<android.view.View: void setSaveFromParentEnabled(boolean)>
<android.view.View: void setTransitionVisibility(int)>
<android.view.View: boolean dispatchCapturedPointerEvent(android.view.MotionEvent)>
<android.view.View: android.view.WindowInsets computeSystemWindowInsets(android.view.WindowInsets,android.graphics.Rect)>
<android.view.View: int getBottom()>
<android.view.View: int getWindowVisibility()>
<android.view.View: android.graphics.drawable.Drawable getVerticalScrollbarThumbDrawable()>
<android.view.View: int getMeasuredHeightAndState()>
<android.view.View: void sendAccessibilityEvent(int)>
<android.view.View: void setFocusableInTouchMode(boolean)>
<android.view.View: void setContextClickable(boolean)>
<android.view.View: boolean isDuplicateParentStateEnabled()>
<android.view.View: int getNextFocusForwardId()>
<android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.view.View: java.util.ArrayList getTouchables()>
<android.view.View: void setLabelFor(@IdResint)>
<android.view.View: void setPointerIcon(android.view.PointerIcon)>
<android.view.View: android.graphics.drawable.Drawable getBackground()>
<android.view.View: boolean awakenScrollBars()>
<android.view.View: void setKeyboardNavigationCluster(boolean)>
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.view.View: boolean dispatchNestedScroll(int,int,int,int,int[])>
<android.view.View: void addOnAttachStateChangeListener(android.view.View.OnAttachStateChangeListener)>
<android.view.View: void setAlpha(float)>
<android.view.View: void setOnCapturedPointerListener(android.view.View.OnCapturedPointerListener)>
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.view.View: float getLeftFadingEdgeStrength()>
<android.view.View: CharSequence getAccessibilityClassName()>
<android.view.View: void setImportantForAccessibility(int)>
<android.view.View: void onDisplayHint(int)>
<android.view.View: void setLeftTopRightBottom(int,int,int,int)>
<android.view.View: void setScrollContainer(boolean)>
<android.view.View: int getSuggestedMinimumHeight()>
<android.view.View: boolean isPressed()>
<android.view.View: void setIsRootNamespace(boolean)>
<android.view.View: android.content.res.ColorStateList getForegroundTintList()>
<android.view.View: int getLabelFor()>
<android.view.View: void setScrollY(int)>
<android.view.View: void resetRtlProperties()>
<android.view.View: void addOnUnhandledKeyEventListener(android.view.View.OnUnhandledKeyEventListener)>
<android.view.View: android.view.ViewOverlay getOverlay()>
<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()>
<android.view.View: void setAccessibilityPaneTitle(CharSequence)>
<android.view.View: boolean hasFocusable()>
<android.view.View: void setNestedScrollingEnabled(boolean)>
<android.view.View: void setTransitionAlpha(float)>
<android.view.View: boolean getHasOverlappingRendering()>
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable,Runnable)>
<android.view.View: void dispatchPointerCaptureChanged(boolean)>
<android.view.View: boolean onSetAlpha(int)>
<android.view.View: android.graphics.BlendMode getForegroundTintBlendMode()>
<android.view.View: void onFinishTemporaryDetach()>
<android.view.View: void setScrollBarSize(int)>
<android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.view.View: void getLocationInSurface(int[])>
<android.view.View: void drawableStateChanged()>
<android.view.View: void setLongClickable(boolean)>
<android.view.View: void postOnAnimation(Runnable)>
<android.view.View: void setScrollBarFadeDuration(int)>
<android.view.View: void setRight(int)>
<android.view.View: void resetResolvedDrawables()>
<android.view.View: void postInvalidate()>
<android.view.View: void setBackgroundTintList(android.content.res.ColorStateList)>
<android.view.View: void destroyDrawingCache()>
<android.view.View: void dispatchStartTemporaryDetach()>
<android.view.View: float getAlpha()>
<android.view.View: void setForegroundTintList(android.content.res.ColorStateList)>
<android.view.View: float getRightFadingEdgeStrength()>
<android.view.View: int getSourceLayoutResId()>
<android.view.View: int getExplicitStyle()>
<android.view.View: void createContextMenu(android.view.ContextMenu)>
<android.view.View: boolean isVerticalFadingEdgeEnabled()>
<android.view.View: int getTopPaddingOffset()>
<android.view.View: void setOnHoverListener(android.view.View.OnHoverListener)>
<android.view.View: java.lang.String[] getAutofillHints()>
<android.view.View: void setDefaultFocusHighlightEnabled(boolean)>
<android.view.View: android.view.PointerIcon getPointerIcon()>
<android.view.View: void setSystemUiVisibility(int)>
<android.view.View: void setZ(float)>
<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.view.View: void setScaleX(float)>
<android.view.View: void setHapticFeedbackEnabled(boolean)>
<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.view.View: boolean isInTouchMode()>
<android.view.View: void setDrawingCacheEnabled(boolean)>
<android.view.View: void buildDrawingCache(boolean)>
<android.view.View: int getScrollIndicators()>
<android.view.View: boolean requestFocus()>
<android.view.View: android.graphics.PorterDuff.Mode getBackgroundTintMode()>
<android.view.View: boolean getRevealOnFocusHint()>
<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.View: int getRightPaddingOffset()>
<android.view.View: boolean performContextClick()>
<android.view.View: boolean isClickable()>
<android.view.View: void setTransitionName(java.lang.String)>
<android.view.View: void getLocationInWindow(int[])>
<android.view.View: void setOnContextClickListener(android.view.View.OnContextClickListener)>
<android.view.View: boolean isFocusedByDefault()>
<android.view.View: android.view.View findFocus()>
<android.view.View: int getDefaultSize(int,int)>
<android.view.View: android.view.View inflate(android.content.Context,@LayoutResint,android.view.ViewGroup)>
<android.view.View: boolean isScreenReaderFocusable()>
<android.view.View: void setRotationX(float)>
<android.view.View: void dispatchWindowSystemUiVisiblityChanged(int)>
<android.view.View: void setBackgroundTintBlendMode(android.graphics.BlendMode)>
<android.view.View: void setForegroundTintMode(android.graphics.PorterDuff.Mode)>
<android.view.View: float getZ()>
<android.view.View: boolean isShown()>
<android.view.View: void setContentDescription(CharSequence)>
<android.view.View: void forceHasOverlappingRendering(boolean)>
<android.view.View: android.graphics.Bitmap getDrawingCache()>
<android.view.View: void setDrawingCacheBackgroundColor(@ColorIntint)>
<android.view.View: void setKeepScreenOn(boolean)>
<android.view.View: void setRevealOnFocusHint(boolean)>
<android.view.View: boolean getDefaultFocusHighlightEnabled()>
<android.view.View: void setFocusable(boolean)>
<android.view.View: void setAutofilled(boolean)>
<android.view.View: void dispatchSetActivated(boolean)>
<android.view.View: void setMinimumWidth(int)>
<android.view.View: android.view.ViewPropertyAnimator animate()>
<android.view.View: void setNextClusterForwardId(@IdResint)>
<android.view.View: void setY(float)>
<android.view.View: void dispatchDrawableHotspotChanged(float,float)>
<android.view.View: void onFinishInflate()>
<android.view.View: boolean hasTransientState()>
<android.view.View: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)>
<android.view.View: void setLayoutParams(android.view.ViewGroup.LayoutParams)>
<android.view.View: void onWindowFocusChanged(boolean)>
<android.view.View: void setSelected(boolean)>
<android.view.View: void setBackground(android.graphics.drawable.Drawable)>
<android.view.View: android.view.View focusSearch(int)>
<android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.View: void setNextFocusRightId(@IdResint)>
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>
<android.view.View: void setAutofillHints(java.lang.String...)>
<android.view.View: void dispatchProvideStructure(android.view.ViewStructure)>
<android.view.View: void setPressed(boolean)>
<android.view.View: int getScrollBarStyle()>
<android.view.View: void postInvalidateDelayed(long,int,int,int,int)>
<android.view.View: T requireViewById(@IdResint)>
<android.view.View: int combineMeasuredStates(int,int)>
<android.view.View: float getRotationY()>
<android.view.View: boolean hasFocus()>
<android.view.View: boolean startDragAndDrop(android.content.ClipData,android.view.View.DragShadowBuilder,java.lang.Object,int)>
<android.view.View: void setVerticalScrollbarTrackDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void postInvalidateDelayed(long)>
<android.view.View: void requestApplyInsets()>
<android.view.View: boolean isDirty()>
<android.view.View: void onRtlPropertiesChanged(int)>
<android.view.View: void setTop(int)>
<android.view.View: int getAutofillType()>
<android.view.View: void setDuplicateParentStateEnabled(boolean)>
<android.view.View: void setScrollIndicators(int)>
<android.view.View: int[] onCreateDrawableState(int)>
<android.view.View: void onPointerCaptureChange(boolean)>
<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect)>
<android.view.View: boolean startDrag(android.content.ClipData,android.view.View.DragShadowBuilder,java.lang.Object,int)>
<android.view.View: int computeVerticalScrollExtent()>
<android.view.View: float getCameraDistance()>
<android.view.View: void resetResolvedPadding()>
<android.view.View: void setForceDarkAllowed(boolean)>
<android.view.View: void transformMatrixToGlobal(android.graphics.Matrix)>
<android.view.View: void setLayerType(int,android.graphics.Paint)>
<android.view.View: void addKeyboardNavigationClusters(java.util.Collection,int)>
<android.view.View: android.graphics.PorterDuff.Mode getForegroundTintMode()>
<android.view.View: int getVerticalScrollbarPosition()>
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)>
<android.view.View: android.view.ContextMenu.ContextMenuInfo getContextMenuInfo()>
<android.view.View: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)>
<android.view.View: void onLayout(boolean,int,int,int,int)>
<android.view.View: boolean isAccessibilityHeading()>
<android.view.View: int resolveSize(int,int)>
<android.view.View: void scrollTo(int,int)>
<android.view.View: int getLeft()>
<android.view.View: void resetResolvedTextAlignment()>
<android.view.View: void setMinimumHeight(int)>
<android.view.View: void setX(float)>
<android.view.View: void setAnimation(android.view.animation.Animation)>
<android.view.View: boolean checkInputConnectionProxy(android.view.View)>
<android.view.View: void setWillNotDraw(boolean)>
<android.view.View: void onScreenStateChanged(int)>
<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>
<android.view.View: float getTransitionAlpha()>
<android.view.View: boolean canResolveTextAlignment()>
<android.view.View: void onScrollChanged(int,int,int,int)>
<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>
<android.view.View: boolean hasExplicitFocusable()>
<android.view.View: int[] getAttributeResolutionStack(@AttrResint)>
<android.view.View: int getSuggestedMinimumWidth()>
<android.view.View: boolean canResolveLayoutDirection()>
<android.view.View: void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>
<android.view.View: int getOutlineSpotShadowColor()>
<android.view.View: void setFilterTouchesWhenObscured(boolean)>
<android.view.View: int getMinimumHeight()>
<android.view.View: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>
<android.view.View: void dispatchVisibilityChanged(android.view.View,int)>
<android.view.View: java.util.List getSystemGestureExclusionRects()>
<android.view.View: void <init>(android.content.Context)>
<android.view.View: boolean isActivated()>
<android.view.View: void forceLayout()>
<android.view.View: void setBottom(int)>
<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>
<android.view.View: float getY()>
<android.view.View: void onVisibilityAggregated(boolean)>
<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.view.View: void setScaleY(float)>
<android.view.View: void onDraw(android.graphics.Canvas)>
<android.view.View: void dispatchDraw(android.graphics.Canvas)>
<android.view.View: boolean isImportantForAutofill()>
<android.view.View: boolean isAccessibilityFocused()>
<android.view.View: android.graphics.drawable.Drawable getHorizontalScrollbarTrackDrawable()>
<android.view.View: android.view.KeyEvent.DispatcherState getKeyDispatcherState()>
<android.view.View: int getOutlineAmbientShadowColor()>
<android.view.View: int resolveSizeAndState(int,int,int)>
<android.view.View: android.graphics.Matrix getAnimationMatrix()>
<android.view.View: java.lang.Object getTag()>
<android.view.View: boolean isDrawingCacheEnabled()>
<android.view.View: void dispatchFinishTemporaryDetach()>
<android.view.View: android.view.ViewGroup.LayoutParams getLayoutParams()>
<android.view.View: int getFocusable()>
<android.view.View: int getForegroundGravity()>
<android.view.View: void setAccessibilityLiveRegion(int)>
<android.view.View: boolean isNestedScrollingEnabled()>
<android.view.View: float getTranslationZ()>
<android.view.View: int getPaddingRight()>
<android.view.View: boolean overScrollBy(int,int,int,int,int,int,int,int,boolean)>
<android.view.View: void requestFitSystemWindows()>
<android.view.View: boolean showContextMenu()>
<android.view.View: void computeScroll()>
<android.view.View: float getPivotX()>
<android.view.View: android.graphics.Rect getClipBounds()>
<android.view.View: void setHovered(boolean)>
<android.view.View: int getLeftPaddingOffset()>
<android.view.View: float getElevation()>
<android.view.View: void addChildrenForAccessibility(java.util.ArrayList)>
<android.view.View: int getPaddingStart()>
<android.view.View: float getRotationX()>
<android.view.View: void announceForAccessibility(CharSequence)>
<android.view.View: void transformMatrixToLocal(android.graphics.Matrix)>
<android.view.View: float getRotation()>
<android.view.View: int getMeasuredWidthAndState()>
<android.service.carrier.CarrierMessagingService.SendSmsResult: int getMessageRef()>
<android.service.carrier.CarrierMessagingService.SendSmsResult: void <init>(int,int)>
<android.service.carrier.CarrierMessagingService.SendSmsResult: int getSendStatus()>
<android.media.AudioFocusInfo: int getClientUid()>
<android.media.AudioFocusInfo: java.lang.String getClientId()>
<android.media.AudioFocusInfo: int getGainRequest()>
<android.media.AudioFocusInfo: int describeContents()>
<android.media.AudioFocusInfo: android.media.AudioAttributes getAttributes()>
<android.media.AudioFocusInfo: void writeToParcel(android.os.Parcel,int)>
<android.media.AudioFocusInfo: java.lang.String getPackageName()>
<android.media.AudioFocusInfo: int getFlags()>
<android.media.AudioFocusInfo: int getLossReceived()>
<org.apache.http.conn.scheme.LayeredSocketFactory extends org.apache.http.conn.scheme.SocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
<android.text.method.DateTimeKeyListener: char[] getAcceptedChars()>
<android.text.method.DateTimeKeyListener: android.text.method.DateTimeKeyListener getInstance()>
<android.text.method.DateTimeKeyListener: void <init>(java.util.Locale)>
<android.text.method.DateTimeKeyListener: android.text.method.DateTimeKeyListener getInstance(java.util.Locale)>
<android.text.method.DateTimeKeyListener: void <init>()>
<android.text.method.DateTimeKeyListener: int getInputType()>
<java.util.IdentityHashMap: void <init>(int)>
<java.util.IdentityHashMap: void <init>(java.util.Map)>
<java.util.IdentityHashMap: java.util.Set entrySet()>
<java.util.IdentityHashMap: void <init>()>
<java.util.IdentityHashMap: java.lang.Object clone()>
<java.sql.Wrapper: boolean isWrapperFor(java.lang.Class)>
<java.sql.Wrapper: T unwrap(java.lang.Class)>
<android.app.Service: void startForeground(int,android.app.Notification,int)>
<android.app.Service: void stopSelf()>
<android.app.Service: boolean onUnbind(android.content.Intent)>
<android.app.Service: void <init>()>
<android.app.Service: boolean stopSelfResult(int)>
<android.app.Service: int getForegroundServiceType()>
<android.app.Service: android.app.Application getApplication()>
<android.app.Service: void onTrimMemory(int)>
<android.app.Service: android.os.IBinder onBind(android.content.Intent)>
<android.app.Service: void startForeground(int,android.app.Notification)>
<android.app.Service: void onStart(android.content.Intent,int)>
<android.app.Service: void onLowMemory()>
<android.app.Service: void stopForeground(boolean)>
<android.app.Service: void stopSelf(int)>
<android.app.Service: void onRebind(android.content.Intent)>
<android.app.Service: int onStartCommand(android.content.Intent,int,int)>
<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.Service: void onConfigurationChanged(android.content.res.Configuration)>
<android.app.Service: void onTaskRemoved(android.content.Intent)>
<android.app.Service: void onCreate()>
<android.app.Service: void onDestroy()>
<android.app.Service: void stopForeground(int)>
<android.bluetooth.le.ScanFilter: byte[] getManufacturerDataMask()>
<android.bluetooth.le.ScanFilter: byte[] getManufacturerData()>
<android.bluetooth.le.ScanFilter: android.os.ParcelUuid getServiceSolicitationUuid()>
<android.bluetooth.le.ScanFilter: boolean matches(android.bluetooth.le.ScanResult)>
<android.bluetooth.le.ScanFilter: java.lang.String getDeviceName()>
<android.bluetooth.le.ScanFilter: android.os.ParcelUuid getServiceUuid()>
<android.bluetooth.le.ScanFilter: java.lang.String getDeviceAddress()>
<android.bluetooth.le.ScanFilter: android.os.ParcelUuid getServiceUuidMask()>
<android.bluetooth.le.ScanFilter: byte[] getServiceData()>
<android.bluetooth.le.ScanFilter: android.os.ParcelUuid getServiceSolicitationUuidMask()>
<android.bluetooth.le.ScanFilter: android.os.ParcelUuid getServiceDataUuid()>
<android.bluetooth.le.ScanFilter: byte[] getServiceDataMask()>
<android.bluetooth.le.ScanFilter: int getManufacturerId()>
<android.bluetooth.le.ScanFilter: int describeContents()>
<android.bluetooth.le.ScanFilter: void writeToParcel(android.os.Parcel,int)>
<android.hardware.radio.Announcement: void writeToParcel(android.os.Parcel,int)>
<android.hardware.radio.Announcement: java.util.Map getVendorInfo()>
<android.hardware.radio.Announcement: android.hardware.radio.ProgramSelector getSelector()>
<android.hardware.radio.Announcement: int describeContents()>
<android.hardware.radio.Announcement: int getType()>
<android.media.MediaPlayer.OnBufferingUpdateListener: void onBufferingUpdate(android.media.MediaPlayer,int)>
<android.view.ViewAnimationUtils: android.animation.Animator createCircularReveal(android.view.View,int,int,float,float)>
<android.hardware.camera2.CameraCharacteristics.Key: java.lang.String getName()>
<android.hardware.camera2.CameraCharacteristics.Key: void <init>(String,Class)>
<java.io.EOFException: void <init>()>
<java.io.EOFException: void <init>(String)>
<java.security.cert.CertPathValidatorSpi: java.security.cert.CertPathChecker engineGetRevocationChecker()>
<java.security.cert.CertPathValidatorSpi: void <init>()>
<java.security.cert.CertPathValidatorSpi: java.security.cert.CertPathValidatorResult engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters)>
<java.text.AttributedCharacterIterator extends java.text.CharacterIterator: int getRunStart(java.text.AttributedCharacterIterator.Attribute)>
<java.text.AttributedCharacterIterator extends java.text.CharacterIterator: int getRunStart(java.util.Set)>
<java.text.AttributedCharacterIterator extends java.text.CharacterIterator: int getRunLimit(java.util.Set)>
<java.text.AttributedCharacterIterator extends java.text.CharacterIterator: int getRunStart()>
<java.text.AttributedCharacterIterator extends java.text.CharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator.Attribute)>
<java.text.AttributedCharacterIterator extends java.text.CharacterIterator: int getRunLimit(java.text.AttributedCharacterIterator.Attribute)>
<java.text.AttributedCharacterIterator extends java.text.CharacterIterator: java.util.Map getAttributes()>
<java.text.AttributedCharacterIterator extends java.text.CharacterIterator: int getRunLimit()>
<java.text.AttributedCharacterIterator extends java.text.CharacterIterator: java.util.Set getAllAttributeKeys()>
<org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: void <init>()>
<org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
<org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: java.lang.String toString()>
<android.widget.MultiAutoCompleteTextView.Tokenizer: CharSequence terminateToken(CharSequence)>
<android.widget.MultiAutoCompleteTextView.Tokenizer: int findTokenEnd(CharSequence,int)>
<android.widget.MultiAutoCompleteTextView.Tokenizer: int findTokenStart(CharSequence,int)>
<java.lang.reflect.Type: java.lang.String getTypeName()>
<java.security.cert.X509Extension: boolean hasUnsupportedCriticalExtension()>
<java.security.cert.X509Extension: java.util.Set getCriticalExtensionOIDs()>
<java.security.cert.X509Extension: java.util.Set getNonCriticalExtensionOIDs()>
<java.security.cert.X509Extension: byte[] getExtensionValue(java.lang.String)>
<java.sql.SQLNonTransientConnectionException: void <init>(String)>
<java.sql.SQLNonTransientConnectionException: void <init>(String,String)>
<java.sql.SQLNonTransientConnectionException: void <init>()>
<java.sql.SQLNonTransientConnectionException: void <init>(String,String,int,Throwable)>
<java.sql.SQLNonTransientConnectionException: void <init>(String,String,Throwable)>
<java.sql.SQLNonTransientConnectionException: void <init>(String,String,int)>
<java.sql.SQLNonTransientConnectionException: void <init>(Throwable)>
<java.sql.SQLNonTransientConnectionException: void <init>(String,Throwable)>
<android.bluetooth.BluetoothHidDevice.Callback: void onSetReport(android.bluetooth.BluetoothDevice,byte,byte,byte[])>
<android.bluetooth.BluetoothHidDevice.Callback: void onAppStatusChanged(android.bluetooth.BluetoothDevice,boolean)>
<android.bluetooth.BluetoothHidDevice.Callback: void onVirtualCableUnplug(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHidDevice.Callback: void onSetProtocol(android.bluetooth.BluetoothDevice,byte)>
<android.bluetooth.BluetoothHidDevice.Callback: void onGetReport(android.bluetooth.BluetoothDevice,byte,byte,int)>
<android.bluetooth.BluetoothHidDevice.Callback: void <init>()>
<android.bluetooth.BluetoothHidDevice.Callback: void onConnectionStateChanged(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothHidDevice.Callback: void onInterruptData(android.bluetooth.BluetoothDevice,byte,byte[])>
<android.database.Observable: void registerObserver(T)>
<android.database.Observable: void <init>()>
<android.database.Observable: void unregisterAll()>
<android.database.Observable: void unregisterObserver(T)>
<android.animation.Animator.AnimatorListener: void onAnimationEnd(android.animation.Animator)>
<android.animation.Animator.AnimatorListener: void onAnimationRepeat(android.animation.Animator)>
<android.animation.Animator.AnimatorListener: void onAnimationCancel(android.animation.Animator)>
<android.animation.Animator.AnimatorListener: void onAnimationStart(android.animation.Animator)>
<android.animation.Animator.AnimatorListener: void onAnimationStart(android.animation.Animator,boolean)>
<android.animation.Animator.AnimatorListener: void onAnimationEnd(android.animation.Animator,boolean)>
<android.media.MicrophoneDirection: boolean setPreferredMicrophoneDirection(int)>
<android.media.MicrophoneDirection: boolean setPreferredMicrophoneFieldDimension(float)>
<java.net.Socket: void shutdownInput()>
<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()>
<java.net.Socket: void <init>(java.net.Proxy)>
<java.net.Socket: void setPerformancePreferences(int,int,int)>
<java.net.Socket: java.net.InetAddress getLocalAddress()>
<java.net.Socket: void connect(java.net.SocketAddress,int)>
<java.net.Socket: void setSocketImplFactory(java.net.SocketImplFactory)>
<java.net.Socket: void sendUrgentData(int)>
<java.net.Socket: void shutdownOutput()>
<java.net.Socket: int getPort()>
<java.net.Socket: int getSendBufferSize()>
<java.net.Socket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)>
<java.net.Socket: void setTcpNoDelay(boolean)>
<java.net.Socket: boolean isInputShutdown()>
<java.net.Socket: java.nio.channels.SocketChannel getChannel()>
<java.net.Socket: int getTrafficClass()>
<java.net.Socket: void setSoLinger(boolean,int)>
<java.net.Socket: void <init>(String,int,boolean)>
<java.net.Socket: boolean isOutputShutdown()>
<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>
<java.net.Socket: boolean isClosed()>
<java.net.Socket: void setReuseAddress(boolean)>
<java.net.Socket: void <init>(String,int,java.net.InetAddress,int)>
<java.net.Socket: void setOOBInline(boolean)>
<java.net.Socket: void setSoTimeout(int)>
<java.net.Socket: boolean isConnected()>
<java.net.Socket: void <init>(java.net.InetAddress,int,boolean)>
<java.net.Socket: int getSoTimeout()>
<java.net.Socket: java.net.InetAddress getInetAddress()>
<java.net.Socket: void <init>(java.net.SocketImpl)>
<java.net.Socket: void setKeepAlive(boolean)>
<java.net.Socket: void bind(java.net.SocketAddress)>
<java.net.Socket: boolean getTcpNoDelay()>
<java.net.Socket: boolean getReuseAddress()>
<java.net.Socket: java.io.OutputStream getOutputStream()>
<java.net.Socket: java.io.InputStream getInputStream()>
<java.net.Socket: void close()>
<java.net.Socket: int getLocalPort()>
<java.net.Socket: void setSendBufferSize(int)>
<java.net.Socket: boolean getKeepAlive()>
<java.net.Socket: void <init>()>
<java.net.Socket: void <init>(java.net.InetAddress,int)>
<java.net.Socket: void connect(java.net.SocketAddress)>
<java.net.Socket: boolean getOOBInline()>
<java.net.Socket: void setReceiveBufferSize(int)>
<java.net.Socket: boolean isBound()>
<java.net.Socket: void setTrafficClass(int)>
<java.net.Socket: void <init>(String,int)>
<java.net.Socket: int getReceiveBufferSize()>
<java.net.Socket: int getSoLinger()>
<android.widget.AbsListView.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsListView.LayoutParams: void <init>(int,int)>
<android.widget.AbsListView.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.widget.AbsListView.LayoutParams: void <init>(int,int,int)>
<java.util.concurrent.ThreadPoolExecutor: void finalize()>
<java.util.concurrent.ThreadPoolExecutor: boolean remove(Runnable)>
<java.util.concurrent.ThreadPoolExecutor: boolean isShutdown()>
<java.util.concurrent.ThreadPoolExecutor: void setThreadFactory(java.util.concurrent.ThreadFactory)>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler()>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>
<java.util.concurrent.ThreadPoolExecutor: void shutdown()>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>
<java.util.concurrent.ThreadPoolExecutor: long getKeepAliveTime(java.util.concurrent.TimeUnit)>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.RejectedExecutionHandler)>
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>
<java.util.concurrent.ThreadPoolExecutor: void setCorePoolSize(int)>
<java.util.concurrent.ThreadPoolExecutor: void execute(Runnable)>
<java.util.concurrent.ThreadPoolExecutor: boolean isTerminating()>
<java.util.concurrent.ThreadPoolExecutor: void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)>
<java.util.concurrent.ThreadPoolExecutor: boolean prestartCoreThread()>
<java.util.concurrent.ThreadPoolExecutor: int getLargestPoolSize()>
<java.util.concurrent.ThreadPoolExecutor: boolean isTerminated()>
<java.util.concurrent.ThreadPoolExecutor: int getActiveCount()>
<java.util.concurrent.ThreadPoolExecutor: void setKeepAliveTime(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ThreadPoolExecutor: int prestartAllCoreThreads()>
<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()>
<java.util.concurrent.ThreadPoolExecutor: void afterExecute(Runnable,java.lang.Throwable)>
<java.util.concurrent.ThreadPoolExecutor: boolean allowsCoreThreadTimeOut()>
<java.util.concurrent.ThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ThreadPoolExecutor: int getMaximumPoolSize()>
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>
<java.util.concurrent.ThreadPoolExecutor: void terminated()>
<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>
<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()>
<java.util.concurrent.ThreadPoolExecutor: void purge()>
<java.util.concurrent.ThreadPoolExecutor: void setMaximumPoolSize(int)>
<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory getThreadFactory()>
<java.util.concurrent.ThreadPoolExecutor: void beforeExecute(java.lang.Thread,Runnable)>
<android.appwidget.AppWidgetHost: void deleteHost()>
<android.appwidget.AppWidgetHost: void clearViews()>
<android.appwidget.AppWidgetHost: android.appwidget.AppWidgetHostView createView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo)>
<android.appwidget.AppWidgetHost: void onProviderChanged(int,android.appwidget.AppWidgetProviderInfo)>
<android.appwidget.AppWidgetHost: void startListening()>
<android.appwidget.AppWidgetHost: int[] getAppWidgetIds()>
<android.appwidget.AppWidgetHost: android.appwidget.AppWidgetHostView onCreateView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo)>
<android.appwidget.AppWidgetHost: void deleteAllHosts()>
<android.appwidget.AppWidgetHost: void <init>(android.content.Context,int)>
<android.appwidget.AppWidgetHost: int allocateAppWidgetId()>
<android.appwidget.AppWidgetHost: void deleteAppWidgetId(int)>
<android.appwidget.AppWidgetHost: void startAppWidgetConfigureActivityForResult(android.app.Activity,int,int,int,android.os.Bundle)>
<android.appwidget.AppWidgetHost: void stopListening()>
<android.appwidget.AppWidgetHost: void onProvidersChanged()>
<android.database.sqlite.SQLiteDatatypeMismatchException: void <init>(String)>
<android.database.sqlite.SQLiteDatatypeMismatchException: void <init>()>
<android.icu.text.BidiClassifier: java.lang.Object getContext()>
<android.icu.text.BidiClassifier: void <init>(Object)>
<android.icu.text.BidiClassifier: int classify(int)>
<android.icu.text.BidiClassifier: void setContext(java.lang.Object)>
<java.net.DatagramSocketImpl: void close()>
<java.net.DatagramSocketImpl: void leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)>
<java.net.DatagramSocketImpl: java.io.FileDescriptor getFileDescriptor()>
<java.net.DatagramSocketImpl: void joinGroup(java.net.SocketAddress,java.net.NetworkInterface)>
<java.net.DatagramSocketImpl: void leave(java.net.InetAddress)>
<java.net.DatagramSocketImpl: byte getTTL()>
<java.net.DatagramSocketImpl: int peek(java.net.InetAddress)>
<java.net.DatagramSocketImpl: void bind(int,java.net.InetAddress)>
<java.net.DatagramSocketImpl: void send(java.net.DatagramPacket)>
<java.net.DatagramSocketImpl: void setTimeToLive(int)>
<java.net.DatagramSocketImpl: void setTTL(byte)>
<java.net.DatagramSocketImpl: void join(java.net.InetAddress)>
<java.net.DatagramSocketImpl: void disconnect()>
<java.net.DatagramSocketImpl: int getTimeToLive()>
<java.net.DatagramSocketImpl: void connect(java.net.InetAddress,int)>
<java.net.DatagramSocketImpl: int getLocalPort()>
<java.net.DatagramSocketImpl: void receive(java.net.DatagramPacket)>
<java.net.DatagramSocketImpl: int peekData(java.net.DatagramPacket)>
<java.net.DatagramSocketImpl: void <init>()>
<java.net.DatagramSocketImpl: void create()>
<javax.xml.parsers.SAXParserFactory: void setNamespaceAware(boolean)>
<javax.xml.parsers.SAXParserFactory: boolean getFeature(java.lang.String)>
<javax.xml.parsers.SAXParserFactory: boolean isNamespaceAware()>
<javax.xml.parsers.SAXParserFactory: void <init>()>
<javax.xml.parsers.SAXParserFactory: void setFeature(java.lang.String,boolean)>
<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance(java.lang.String,java.lang.ClassLoader)>
<javax.xml.parsers.SAXParserFactory: boolean isValidating()>
<javax.xml.parsers.SAXParserFactory: boolean isXIncludeAware()>
<javax.xml.parsers.SAXParserFactory: void setValidating(boolean)>
<javax.xml.parsers.SAXParserFactory: javax.xml.validation.Schema getSchema()>
<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParser newSAXParser()>
<javax.xml.parsers.SAXParserFactory: void setXIncludeAware(boolean)>
<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()>
<javax.xml.parsers.SAXParserFactory: void setSchema(javax.xml.validation.Schema)>
<android.view.ViewOutlineProvider: void <init>()>
<android.view.ViewOutlineProvider: void getOutline(android.view.View,android.graphics.Outline)>
<android.media.MediaTimestamp: long getAnchorSytemNanoTime()>
<android.media.MediaTimestamp: void <init>(from=0.0f,to=java.lang.Float.MAX_VALUE) float)>
<android.media.MediaTimestamp: long getAnchorMediaTimeUs()>
<android.media.MediaTimestamp: long getAnchorSystemNanoTime()>
<android.media.MediaTimestamp: float getMediaClockRate()>
<android.hardware.radio.RadioManager.BandDescriptor: int describeContents()>
<android.hardware.radio.RadioManager.BandDescriptor: boolean isFmBand()>
<android.hardware.radio.RadioManager.BandDescriptor: int getSpacing()>
<android.hardware.radio.RadioManager.BandDescriptor: int getType()>
<android.hardware.radio.RadioManager.BandDescriptor: int getRegion()>
<android.hardware.radio.RadioManager.BandDescriptor: void writeToParcel(android.os.Parcel,int)>
<android.hardware.radio.RadioManager.BandDescriptor: int getLowerLimit()>
<android.hardware.radio.RadioManager.BandDescriptor: boolean isAmBand()>
<android.hardware.radio.RadioManager.BandDescriptor: int getUpperLimit()>
<android.telephony.CellInfoWcdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellInfoWcdma: android.telephony.CellSignalStrengthWcdma getCellSignalStrength()>
<android.telephony.CellInfoWcdma: android.telephony.CellIdentityWcdma getCellIdentity()>
<android.app.ActionBar.Tab: CharSequence getContentDescription()>
<android.app.ActionBar.Tab: android.app.ActionBar.Tab setCustomView(@LayoutResint)>
<android.app.ActionBar.Tab: java.lang.Object getTag()>
<android.app.ActionBar.Tab: android.app.ActionBar.Tab setText(CharSequence)>
<android.app.ActionBar.Tab: android.app.ActionBar.Tab setContentDescription(CharSequence)>
<android.app.ActionBar.Tab: android.app.ActionBar.Tab setTag(java.lang.Object)>
<android.app.ActionBar.Tab: android.view.View getCustomView()>
<android.app.ActionBar.Tab: android.app.ActionBar.Tab setContentDescription(@StringResint)>
<android.app.ActionBar.Tab: android.graphics.drawable.Drawable getIcon()>
<android.app.ActionBar.Tab: CharSequence getText()>
<android.app.ActionBar.Tab: android.app.ActionBar.Tab setIcon(android.graphics.drawable.Drawable)>
<android.app.ActionBar.Tab: void <init>()>
<android.app.ActionBar.Tab: void select()>
<android.app.ActionBar.Tab: android.app.ActionBar.Tab setTabListener(android.app.ActionBar.TabListener)>
<android.app.ActionBar.Tab: android.app.ActionBar.Tab setText(@StringResint)>
<android.app.ActionBar.Tab: android.app.ActionBar.Tab setIcon(@DrawableResint)>
<android.app.ActionBar.Tab: android.app.ActionBar.Tab setCustomView(android.view.View)>
<android.app.ActionBar.Tab: int getPosition()>
<android.media.audiofx.Virtualizer.OnParameterChangeListener: void onParameterChange(android.media.audiofx.Virtualizer,int,int,short)>
<java.io.InvalidClassException: void <init>(String,String)>
<java.io.InvalidClassException: void <init>(String)>
<android.net.VpnService: boolean isAlwaysOn()>
<android.net.VpnService: boolean protect(java.net.Socket)>
<android.net.VpnService: void onRevoke()>
<android.net.VpnService: boolean setUnderlyingNetworks(android.net.Network[])>
<android.net.VpnService: android.content.Intent prepare(android.content.Context)>
<android.net.VpnService: boolean protect(int)>
<android.net.VpnService: void prepareAndAuthorize(android.content.Context)>
<android.net.VpnService: boolean protect(java.net.DatagramSocket)>
<android.net.VpnService: void <init>()>
<android.net.VpnService: android.os.IBinder onBind(android.content.Intent)>
<android.net.VpnService: boolean isLockdownEnabled()>
<android.R.plurals: void <init>()>
<java.nio.charset.CoderResult: boolean isUnderflow()>
<java.nio.charset.CoderResult: java.nio.charset.CoderResult unmappableForLength(int)>
<java.nio.charset.CoderResult: boolean isMalformed()>
<java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>
<java.nio.charset.CoderResult: void throwException()>
<java.nio.charset.CoderResult: boolean isError()>
<java.nio.charset.CoderResult: int length()>
<java.nio.charset.CoderResult: boolean isOverflow()>
<java.nio.charset.CoderResult: boolean isUnmappable()>
<android.telephony.SubscriptionManager: void removeOnSubscriptionsChangedListener(android.telephony.SubscriptionManager.OnSubscriptionsChangedListener)>
<android.telephony.SubscriptionManager: void addOnSubscriptionsChangedListener(android.telephony.SubscriptionManager.OnSubscriptionsChangedListener)>
<android.telephony.SubscriptionManager: int getActiveSubscriptionInfoCount()>
<android.telephony.SubscriptionManager: java.util.List getSubscriptionPlans(int)>
<android.telephony.SubscriptionManager: boolean isActiveSubscriptionId(int)>
<android.telephony.SubscriptionManager: boolean setSubscriptionEnabled(int,boolean)>
<android.telephony.SubscriptionManager: java.util.List getActiveSubscriptionInfoList()>
<android.telephony.SubscriptionManager: boolean isSubscriptionEnabled(int)>
<android.telephony.SubscriptionManager: void setDefaultDataSubId(int)>
<android.telephony.SubscriptionManager: int getDefaultSubscriptionId()>
<android.telephony.SubscriptionManager: int getDefaultVoiceSubscriptionId()>
<android.telephony.SubscriptionManager: void addSubscriptionsIntoGroup(java.util.List,android.os.ParcelUuid)>
<android.telephony.SubscriptionManager: int getSlotIndex(int)>
<android.telephony.SubscriptionManager: void removeSubscriptionsFromGroup(java.util.List,android.os.ParcelUuid)>
<android.telephony.SubscriptionManager: java.util.List getSubscriptionsInGroup(android.os.ParcelUuid)>
<android.telephony.SubscriptionManager: boolean isValidSubscriptionId(int)>
<android.telephony.SubscriptionManager: boolean setOpportunistic(boolean,int)>
<android.telephony.SubscriptionManager: void addOnOpportunisticSubscriptionsChangedListener(java.util.concurrent.Executor,android.telephony.SubscriptionManager.OnOpportunisticSubscriptionsChangedListener)>
<android.telephony.SubscriptionManager: java.util.List getAccessibleSubscriptionInfoList()>
<android.telephony.SubscriptionManager: void removeOnOpportunisticSubscriptionsChangedListener(android.telephony.SubscriptionManager.OnOpportunisticSubscriptionsChangedListener)>
<android.telephony.SubscriptionManager: android.os.ParcelUuid createSubscriptionGroup(java.util.List)>
<android.telephony.SubscriptionManager: void setSubscriptionOverrideCongested(int,boolean,long)>
<android.telephony.SubscriptionManager: void switchToSubscription(int,android.app.PendingIntent)>
<android.telephony.SubscriptionManager: boolean isNetworkRoaming(int)>
<android.telephony.SubscriptionManager: android.telephony.SubscriptionManager from(android.content.Context)>
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int)>
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int)>
<android.telephony.SubscriptionManager: boolean isUsableSubscriptionId(int)>
<android.telephony.SubscriptionManager: int[] getSubscriptionIds(int)>
<android.telephony.SubscriptionManager: void setSubscriptionPlans(int,java.util.List)>
<android.telephony.SubscriptionManager: java.util.List getAvailableSubscriptionInfoList()>
<android.telephony.SubscriptionManager: void setPreferredDataSubscriptionId(int,boolean,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.telephony.SubscriptionManager: int getEnabledSubscriptionId(int)>
<android.telephony.SubscriptionManager: void setSubscriptionOverrideUnmetered(int,boolean,long)>
<android.telephony.SubscriptionManager: void setDefaultSmsSubId(int)>
<android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()>
<android.telephony.SubscriptionManager: boolean canManageSubscription(android.telephony.SubscriptionInfo)>
<android.telephony.SubscriptionManager: int getActiveSubscriptionInfoCountMax()>
<android.telephony.SubscriptionManager: void requestEmbeddedSubscriptionInfoListRefresh(int)>
<android.telephony.SubscriptionManager: int getDefaultSmsSubscriptionId()>
<android.telephony.SubscriptionManager: void requestEmbeddedSubscriptionInfoListRefresh()>
<android.telephony.SubscriptionManager: java.util.List getOpportunisticSubscriptions()>
<android.hardware.GeomagneticField: float getFieldStrength()>
<android.hardware.GeomagneticField: float getY()>
<android.hardware.GeomagneticField: float getX()>
<android.hardware.GeomagneticField: void <init>(float,float,float,long)>
<android.hardware.GeomagneticField: float getHorizontalStrength()>
<android.hardware.GeomagneticField: float getInclination()>
<android.hardware.GeomagneticField: float getZ()>
<android.hardware.GeomagneticField: float getDeclination()>
<android.hardware.camera2.params.MandatoryStreamCombination: CharSequence getDescription()>
<android.hardware.camera2.params.MandatoryStreamCombination: java.util.List getStreamsInformation()>
<android.hardware.camera2.params.MandatoryStreamCombination: boolean isReprocessable()>
<android.speech.RecognizerIntent: android.content.Intent getVoiceDetailsIntent(android.content.Context)>
<android.view.autofill.AutofillManager.AutofillCallback: void onAutofillEvent(android.view.View,int,int)>
<android.view.autofill.AutofillManager.AutofillCallback: void onAutofillEvent(android.view.View,int)>
<android.view.autofill.AutofillManager.AutofillCallback: void <init>()>
<android.provider.ContactsContract.QuickContact: void <init>()>
<android.provider.ContactsContract.QuickContact: void showQuickContact(android.content.Context,android.graphics.Rect,android.net.Uri,int,java.lang.String[])>
<android.provider.ContactsContract.QuickContact: void showQuickContact(android.content.Context,android.view.View,android.net.Uri,java.lang.String[],java.lang.String)>
<android.provider.ContactsContract.QuickContact: void showQuickContact(android.content.Context,android.graphics.Rect,android.net.Uri,java.lang.String[],java.lang.String)>
<android.provider.ContactsContract.QuickContact: void showQuickContact(android.content.Context,android.view.View,android.net.Uri,int,java.lang.String[])>
<java.util.ServiceConfigurationError: void <init>(String,Throwable)>
<java.util.ServiceConfigurationError: void <init>(String)>
<org.xml.sax.ContentHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.ContentHandler: void processingInstruction(java.lang.String,java.lang.String)>
<org.xml.sax.ContentHandler: void endDocument()>
<org.xml.sax.ContentHandler: void ignorableWhitespace(char[],int,int)>
<org.xml.sax.ContentHandler: void endPrefixMapping(java.lang.String)>
<org.xml.sax.ContentHandler: void characters(char[],int,int)>
<org.xml.sax.ContentHandler: void startDocument()>
<org.xml.sax.ContentHandler: void skippedEntity(java.lang.String)>
<org.xml.sax.ContentHandler: void startPrefixMapping(java.lang.String,java.lang.String)>
<org.xml.sax.ContentHandler: void setDocumentLocator(org.xml.sax.Locator)>
<org.xml.sax.ContentHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>
<android.view.autofill.AutofillId: void writeToParcel(android.os.Parcel,int)>
<android.view.autofill.AutofillId: boolean equalsIgnoreSession(android.view.autofill.AutofillId)>
<android.view.autofill.AutofillId: int describeContents()>
<android.view.autofill.AutofillId: void <init>(int,int)>
<android.view.autofill.AutofillId: void <init>(android.view.autofill.AutofillId,int)>
<android.view.autofill.AutofillId: void <init>(android.view.autofill.AutofillId,long,int)>
<android.view.autofill.AutofillId: void <init>(int)>
<android.widget.VideoView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.VideoView: void pause()>
<android.widget.VideoView: boolean canSeekForward()>
<android.widget.VideoView: void setOnInfoListener(android.media.MediaPlayer.OnInfoListener)>
<android.widget.VideoView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.VideoView: int getBufferPercentage()>
<android.widget.VideoView: void stopPlayback()>
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer.OnCompletionListener)>
<android.widget.VideoView: void setMediaController(android.widget.MediaController)>
<android.widget.VideoView: void setAudioAttributes(android.media.AudioAttributes)>
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer.OnErrorListener)>
<android.widget.VideoView: void start()>
<android.widget.VideoView: void seekTo(int)>
<android.widget.VideoView: void suspend()>
<android.widget.VideoView: int getAudioSessionId()>
<android.widget.VideoView: int resolveAdjustedSize(int,int)>
<android.widget.VideoView: void resume()>
<android.widget.VideoView: void setVideoPath(java.lang.String)>
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener)>
<android.widget.VideoView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.VideoView: boolean canPause()>
<android.widget.VideoView: void setAudioFocusRequest(int)>
<android.widget.VideoView: boolean canSeekBackward()>
<android.widget.VideoView: int getCurrentPosition()>
<android.widget.VideoView: boolean isPlaying()>
<android.widget.VideoView: void <init>(android.content.Context)>
<android.widget.VideoView: void addSubtitleSource(java.io.InputStream,android.media.MediaFormat)>
<android.widget.VideoView: int getDuration()>
<android.widget.VideoView: void setVideoURI(android.net.Uri)>
<android.widget.VideoView: void setVideoURI(android.net.Uri,java.util.Map)>
<javax.sql.ConnectionPoolDataSource extends javax.sql.CommonDataSource: javax.sql.PooledConnection getPooledConnection(java.lang.String,java.lang.String)>
<javax.sql.ConnectionPoolDataSource extends javax.sql.CommonDataSource: javax.sql.PooledConnection getPooledConnection()>
<java.util.concurrent.locks.ReentrantLock: java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition)>
<java.util.concurrent.locks.ReentrantLock: boolean isFair()>
<java.util.concurrent.locks.ReentrantLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.locks.ReentrantLock: void lock()>
<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>
<java.util.concurrent.locks.ReentrantLock: int getWaitQueueLength(java.util.concurrent.locks.Condition)>
<java.util.concurrent.locks.ReentrantLock: int getHoldCount()>
<java.util.concurrent.locks.ReentrantLock: java.lang.Thread getOwner()>
<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>
<java.util.concurrent.locks.ReentrantLock: java.util.Collection getQueuedThreads()>
<java.util.concurrent.locks.ReentrantLock: boolean hasWaiters(java.util.concurrent.locks.Condition)>
<java.util.concurrent.locks.ReentrantLock: void unlock()>
<java.util.concurrent.locks.ReentrantLock: boolean hasQueuedThread(java.lang.Thread)>
<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>
<java.util.concurrent.locks.ReentrantLock: void <init>()>
<java.util.concurrent.locks.ReentrantLock: boolean isLocked()>
<java.util.concurrent.locks.ReentrantLock: int getQueueLength()>
<java.util.concurrent.locks.ReentrantLock: boolean hasQueuedThreads()>
<java.util.concurrent.locks.ReentrantLock: boolean tryLock()>
<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>
<android.app.ActivityManager.AppTask: void moveToFront()>
<android.app.ActivityManager.AppTask: void finishAndRemoveTask()>
<android.app.ActivityManager.AppTask: android.app.ActivityManager.RecentTaskInfo getTaskInfo()>
<android.app.ActivityManager.AppTask: void setExcludeFromRecents(boolean)>
<android.app.ActivityManager.AppTask: void startActivity(android.content.Context,android.content.Intent,android.os.Bundle)>
<java.util.concurrent.atomic.DoubleAdder: float floatValue()>
<java.util.concurrent.atomic.DoubleAdder: double sum()>
<java.util.concurrent.atomic.DoubleAdder: void add(double)>
<java.util.concurrent.atomic.DoubleAdder: int intValue()>
<java.util.concurrent.atomic.DoubleAdder: double sumThenReset()>
<java.util.concurrent.atomic.DoubleAdder: void <init>()>
<java.util.concurrent.atomic.DoubleAdder: void reset()>
<java.util.concurrent.atomic.DoubleAdder: long longValue()>
<java.util.concurrent.atomic.DoubleAdder: double doubleValue()>
<java.nio.file.FileAlreadyExistsException: void <init>(String,String,String)>
<java.nio.file.FileAlreadyExistsException: void <init>(String)>
<android.net.UrlQuerySanitizer.ValueSanitizer: java.lang.String sanitize(java.lang.String)>
<java.text.Normalizer: java.lang.String normalize(CharSequence,java.text.Normalizer.Form)>
<java.text.Normalizer: boolean isNormalized(CharSequence,java.text.Normalizer.Form)>
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>
<org.xml.sax.SAXParseException: void <init>(String,String,String,int,int,Exception)>
<org.xml.sax.SAXParseException: void <init>(String,String,String,int,int)>
<org.xml.sax.SAXParseException: int getLineNumber()>
<org.xml.sax.SAXParseException: void <init>(String,org.xml.sax.Locator,Exception)>
<org.xml.sax.SAXParseException: java.lang.String getSystemId()>
<org.xml.sax.SAXParseException: void <init>(String,org.xml.sax.Locator)>
<org.xml.sax.SAXParseException: java.lang.String getPublicId()>
<org.xml.sax.SAXParseException: int getColumnNumber()>
<android.graphics.DashPathEffect: void <init>(float[],float)>
<android.os.StrictMode: android.os.StrictMode.VmPolicy getVmPolicy()>
<android.os.StrictMode: void noteSlowCall(java.lang.String)>
<android.os.StrictMode: android.os.StrictMode.ThreadPolicy allowThreadDiskReads()>
<android.os.StrictMode: void setThreadPolicy(android.os.StrictMode.ThreadPolicy)>
<android.os.StrictMode: void setVmPolicy(android.os.StrictMode.VmPolicy)>
<android.os.StrictMode: android.os.StrictMode.ThreadPolicy allowThreadDiskWrites()>
<android.os.StrictMode: android.os.StrictMode.ThreadPolicy getThreadPolicy()>
<android.os.StrictMode: void setViolationLogger(android.os.StrictMode.ViolationLogger)>
<android.os.StrictMode: void enableDefaults()>
<android.os.StrictMode: void conditionallyCheckInstanceCounts()>
<android.media.browse.MediaBrowser.ItemCallback: void onError(java.lang.String)>
<android.media.browse.MediaBrowser.ItemCallback: void onItemLoaded(android.media.browse.MediaBrowser.MediaItem)>
<android.media.browse.MediaBrowser.ItemCallback: void <init>()>
<android.view.TextureView.SurfaceTextureListener: void onSurfaceTextureUpdated(android.graphics.SurfaceTexture)>
<android.view.TextureView.SurfaceTextureListener: boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)>
<android.view.TextureView.SurfaceTextureListener: void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int)>
<android.view.TextureView.SurfaceTextureListener: void onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int)>
<java.time.Clock: void <init>()>
<java.time.Clock: java.time.Instant instant()>
<java.time.Clock: java.time.Clock fixed(java.time.Instant,java.time.ZoneId)>
<java.time.Clock: java.time.Clock system(java.time.ZoneId)>
<java.time.Clock: java.time.Clock offset(java.time.Clock,java.time.Duration)>
<java.time.Clock: java.time.Clock systemDefaultZone()>
<java.time.Clock: java.time.Clock withZone(java.time.ZoneId)>
<java.time.Clock: long millis()>
<java.time.Clock: java.time.ZoneId getZone()>
<java.time.Clock: java.time.Clock systemUTC()>
<java.time.Clock: java.time.Clock tick(java.time.Clock,java.time.Duration)>
<java.time.Clock: java.time.Clock tickSeconds(java.time.ZoneId)>
<java.time.Clock: java.time.Clock tickMinutes(java.time.ZoneId)>
<android.service.carrier.CarrierService: android.os.IBinder onBind(android.content.Intent)>
<android.service.carrier.CarrierService: void notifyCarrierNetworkChange(boolean)>
<android.service.carrier.CarrierService: android.os.PersistableBundle onLoadConfig(android.service.carrier.CarrierIdentifier)>
<android.service.carrier.CarrierService: void <init>()>
<java.security.acl.Group extends java.security.Principal: boolean isMember(java.security.Principal)>
<java.security.acl.Group extends java.security.Principal: java.util.Enumeration members()>
<java.security.acl.Group extends java.security.Principal: boolean removeMember(java.security.Principal)>
<java.security.acl.Group extends java.security.Principal: boolean addMember(java.security.Principal)>
<java.util.SortedSet extends java.util.Set: java.util.SortedSet subSet(E,E)>
<java.util.SortedSet extends java.util.Set: java.util.SortedSet headSet(E)>
<java.util.SortedSet extends java.util.Set: java.util.SortedSet tailSet(E)>
<java.util.SortedSet extends java.util.Set: E last()>
<java.util.SortedSet extends java.util.Set: E first()>
<java.util.SortedSet extends java.util.Set: java.util.Comparator comparator()>
<android.net.ConnectivityManager.OnStartTetheringCallback: void onTetheringStarted()>
<android.net.ConnectivityManager.OnStartTetheringCallback: void <init>()>
<android.net.ConnectivityManager.OnStartTetheringCallback: void onTetheringFailed()>
<java.text.Format: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>
<java.text.Format: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.Format: java.lang.String format(java.lang.Object)>
<java.text.Format: void <init>()>
<java.text.Format: java.lang.Object clone()>
<java.text.Format: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>
<java.text.Format: java.lang.Object parseObject(java.lang.String)>
<android.net.ScoredNetwork: void <init>(android.net.NetworkKey,android.net.RssiCurve,boolean)>
<android.net.ScoredNetwork: int describeContents()>
<android.net.ScoredNetwork: int calculateBadge(int)>
<android.net.ScoredNetwork: void <init>(android.net.NetworkKey,android.net.RssiCurve)>
<android.net.ScoredNetwork: void writeToParcel(android.os.Parcel,int)>
<android.net.ScoredNetwork: void <init>(android.net.NetworkKey,android.net.RssiCurve,boolean,android.os.Bundle)>
<java.util.Enumeration: boolean hasMoreElements()>
<java.util.Enumeration: E nextElement()>
<android.hardware.camera2.params.OisSample: float getXshift()>
<android.hardware.camera2.params.OisSample: long getTimestamp()>
<android.hardware.camera2.params.OisSample: void <init>(long,float,float)>
<android.hardware.camera2.params.OisSample: float getYshift()>
<android.renderscript.RenderScript.RSMessageHandler: void run()>
<android.renderscript.RenderScript.RSMessageHandler: void <init>()>
<android.renderscript.FieldPacker: void addI64(android.renderscript.Long3)>
<android.renderscript.FieldPacker: android.renderscript.Float3 subFloat3()>
<android.renderscript.FieldPacker: void addI32(android.renderscript.Int2)>
<android.renderscript.FieldPacker: void addI32(android.renderscript.Int4)>
<android.renderscript.FieldPacker: void addU8(android.renderscript.Short3)>
<android.renderscript.FieldPacker: void addU16(android.renderscript.Int2)>
<android.renderscript.FieldPacker: void <init>(byte[])>
<android.renderscript.FieldPacker: void addU32(android.renderscript.Long4)>
<android.renderscript.FieldPacker: void addU32(android.renderscript.Long2)>
<android.renderscript.FieldPacker: int subI32()>
<android.renderscript.FieldPacker: android.renderscript.Matrix2f subMatrix2f()>
<android.renderscript.FieldPacker: short subI16()>
<android.renderscript.FieldPacker: void addI16(android.renderscript.Short4)>
<android.renderscript.FieldPacker: android.renderscript.Long4 subLong4()>
<android.renderscript.FieldPacker: void addF32(android.renderscript.Float4)>
<android.renderscript.FieldPacker: android.renderscript.Byte2 subByte2()>
<android.renderscript.FieldPacker: void addI64(long)>
<android.renderscript.FieldPacker: void align(int)>
<android.renderscript.FieldPacker: void reset()>
<android.renderscript.FieldPacker: void addF32(android.renderscript.Float2)>
<android.renderscript.FieldPacker: android.renderscript.Double4 subDouble4()>
<android.renderscript.FieldPacker: void addU16(android.renderscript.Int4)>
<android.renderscript.FieldPacker: android.renderscript.Matrix4f subMatrix4f()>
<android.renderscript.FieldPacker: void addI16(android.renderscript.Short2)>
<android.renderscript.FieldPacker: android.renderscript.Double2 subDouble2()>
<android.renderscript.FieldPacker: void addI8(android.renderscript.Byte3)>
<android.renderscript.FieldPacker: void addI8(byte)>
<android.renderscript.FieldPacker: void addU8(short)>
<android.renderscript.FieldPacker: float subF32()>
<android.renderscript.FieldPacker: android.renderscript.Int2 subInt2()>
<android.renderscript.FieldPacker: android.renderscript.Long3 subLong3()>
<android.renderscript.FieldPacker: android.renderscript.Float2 subFloat2()>
<android.renderscript.FieldPacker: void addBoolean(boolean)>
<android.renderscript.FieldPacker: android.renderscript.Short4 subShort4()>
<android.renderscript.FieldPacker: void addF64(android.renderscript.Double4)>
<android.renderscript.FieldPacker: void addU64(long)>
<android.renderscript.FieldPacker: void addU64(android.renderscript.Long2)>
<android.renderscript.FieldPacker: void addF64(android.renderscript.Double2)>
<android.renderscript.FieldPacker: android.renderscript.Int3 subInt3()>
<android.renderscript.FieldPacker: void addMatrix(android.renderscript.Matrix4f)>
<android.renderscript.FieldPacker: void addU64(android.renderscript.Long4)>
<android.renderscript.FieldPacker: void addF32(float)>
<android.renderscript.FieldPacker: void addI64(android.renderscript.Long4)>
<android.renderscript.FieldPacker: android.renderscript.Int4 subInt4()>
<android.renderscript.FieldPacker: void addU8(android.renderscript.Short2)>
<android.renderscript.FieldPacker: void addI32(android.renderscript.Int3)>
<android.renderscript.FieldPacker: void addU8(android.renderscript.Short4)>
<android.renderscript.FieldPacker: void <init>(int)>
<android.renderscript.FieldPacker: android.renderscript.Long2 subLong2()>
<android.renderscript.FieldPacker: void reset(int)>
<android.renderscript.FieldPacker: boolean subBoolean()>
<android.renderscript.FieldPacker: android.renderscript.Short3 subShort3()>
<android.renderscript.FieldPacker: void addU32(android.renderscript.Long3)>
<android.renderscript.FieldPacker: void addI64(android.renderscript.Long2)>
<android.renderscript.FieldPacker: void addMatrix(android.renderscript.Matrix3f)>
<android.renderscript.FieldPacker: void addF32(android.renderscript.Float3)>
<android.renderscript.FieldPacker: android.renderscript.Matrix3f subMatrix3f()>
<android.renderscript.FieldPacker: void addU16(android.renderscript.Int3)>
<android.renderscript.FieldPacker: void addI32(int)>
<android.renderscript.FieldPacker: android.renderscript.Double3 subDouble3()>
<android.renderscript.FieldPacker: void addI16(android.renderscript.Short3)>
<android.renderscript.FieldPacker: long subI64()>
<android.renderscript.FieldPacker: android.renderscript.Byte4 subByte4()>
<android.renderscript.FieldPacker: void addObj(android.renderscript.BaseObj)>
<android.renderscript.FieldPacker: void addU16(int)>
<android.renderscript.FieldPacker: void addI16(short)>
<android.renderscript.FieldPacker: void addI8(android.renderscript.Byte2)>
<android.renderscript.FieldPacker: void addI8(android.renderscript.Byte4)>
<android.renderscript.FieldPacker: android.renderscript.Float4 subFloat4()>
<android.renderscript.FieldPacker: android.renderscript.Short2 subShort2()>
<android.renderscript.FieldPacker: double subF64()>
<android.renderscript.FieldPacker: byte[] getData()>
<android.renderscript.FieldPacker: byte subI8()>
<android.renderscript.FieldPacker: void subalign(int)>
<android.renderscript.FieldPacker: void addF64(android.renderscript.Double3)>
<android.renderscript.FieldPacker: void addF64(double)>
<android.renderscript.FieldPacker: void addMatrix(android.renderscript.Matrix2f)>
<android.renderscript.FieldPacker: void addU64(android.renderscript.Long3)>
<android.renderscript.FieldPacker: void skip(int)>
<android.renderscript.FieldPacker: android.renderscript.Byte3 subByte3()>
<android.renderscript.FieldPacker: void addU32(long)>
<javax.crypto.ExemptionMechanism: void init(java.security.Key,java.security.AlgorithmParameters)>
<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String,java.lang.String)>
<javax.crypto.ExemptionMechanism: void <init>(javax.crypto.ExemptionMechanismSpi,java.security.Provider,String)>
<javax.crypto.ExemptionMechanism: byte[] genExemptionBlob()>
<javax.crypto.ExemptionMechanism: boolean isCryptoAllowed(java.security.Key)>
<javax.crypto.ExemptionMechanism: java.lang.String getName()>
<javax.crypto.ExemptionMechanism: int genExemptionBlob(byte[])>
<javax.crypto.ExemptionMechanism: java.security.Provider getProvider()>
<javax.crypto.ExemptionMechanism: int genExemptionBlob(byte[],int)>
<javax.crypto.ExemptionMechanism: int getOutputSize(int)>
<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String,java.security.Provider)>
<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String)>
<javax.crypto.ExemptionMechanism: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<javax.crypto.ExemptionMechanism: void init(java.security.Key)>
<android.hardware.hdmi.HdmiPlaybackClient.DisplayStatusCallback: void onComplete(int)>
<java.security.KeyStoreException: void <init>(String,Throwable)>
<java.security.KeyStoreException: void <init>(String)>
<java.security.KeyStoreException: void <init>(Throwable)>
<java.security.KeyStoreException: void <init>()>
<android.opengl.GLSurfaceView.GLWrapper: javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL)>
<java.net.HttpCookie: boolean domainMatches(java.lang.String,java.lang.String)>
<java.net.HttpCookie: java.lang.String getName()>
<java.net.HttpCookie: void setValue(java.lang.String)>
<java.net.HttpCookie: boolean getDiscard()>
<java.net.HttpCookie: void setMaxAge(long)>
<java.net.HttpCookie: boolean getSecure()>
<java.net.HttpCookie: void setPortlist(java.lang.String)>
<java.net.HttpCookie: boolean hasExpired()>
<java.net.HttpCookie: void setComment(java.lang.String)>
<java.net.HttpCookie: java.lang.String getPath()>
<java.net.HttpCookie: void setHttpOnly(boolean)>
<java.net.HttpCookie: java.lang.String getPortlist()>
<java.net.HttpCookie: java.lang.String getValue()>
<java.net.HttpCookie: void <init>(String,String)>
<java.net.HttpCookie: void setCommentURL(java.lang.String)>
<java.net.HttpCookie: void setVersion(int)>
<java.net.HttpCookie: java.lang.String getComment()>
<java.net.HttpCookie: void setSecure(boolean)>
<java.net.HttpCookie: java.lang.String getCommentURL()>
<java.net.HttpCookie: void setPath(java.lang.String)>
<java.net.HttpCookie: java.util.List parse(java.lang.String)>
<java.net.HttpCookie: boolean isHttpOnly()>
<java.net.HttpCookie: void setDomain(java.lang.String)>
<java.net.HttpCookie: java.lang.String getDomain()>
<java.net.HttpCookie: java.lang.Object clone()>
<java.net.HttpCookie: void setDiscard(boolean)>
<java.net.HttpCookie: long getMaxAge()>
<java.net.HttpCookie: int getVersion()>
<org.xml.sax.ErrorHandler: void warning(org.xml.sax.SAXParseException)>
<org.xml.sax.ErrorHandler: void fatalError(org.xml.sax.SAXParseException)>
<org.xml.sax.ErrorHandler: void error(org.xml.sax.SAXParseException)>
<java.net.Proxy: java.net.Proxy.Type type()>
<java.net.Proxy: void <init>(java.net.Proxy.Type,java.net.SocketAddress)>
<java.net.Proxy: java.net.SocketAddress address()>
<java.net.Proxy: boolean equals(java.lang.Object)>
<java.net.Proxy: int hashCode()>
<android.media.MediaCodecInfo.VideoCapabilities.PerformancePoint: int getMaxFrameRate()>
<android.media.MediaCodecInfo.VideoCapabilities.PerformancePoint: void <init>(int,int,int,int,android.util.Size)>
<android.media.MediaCodecInfo.VideoCapabilities.PerformancePoint: void <init>(int,int,int)>
<android.media.MediaCodecInfo.VideoCapabilities.PerformancePoint: boolean covers(android.media.MediaFormat)>
<android.media.MediaCodecInfo.VideoCapabilities.PerformancePoint: void <init>(android.media.MediaCodecInfo.VideoCapabilities.PerformancePoint,android.util.Size)>
<android.media.MediaCodecInfo.VideoCapabilities.PerformancePoint: long getMaxMacroBlockRate()>
<android.media.MediaCodecInfo.VideoCapabilities.PerformancePoint: boolean covers(android.media.MediaCodecInfo.VideoCapabilities.PerformancePoint)>
<android.media.MediaCodecInfo.VideoCapabilities.PerformancePoint: int getMaxMacroBlocks()>
<android.telephony.ims.ImsReasonInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ims.ImsReasonInfo: void <init>(int,int,String)>
<android.telephony.ims.ImsReasonInfo: java.lang.String getExtraMessage()>
<android.telephony.ims.ImsReasonInfo: int getCode()>
<android.telephony.ims.ImsReasonInfo: int getExtraCode()>
<android.telephony.ims.ImsReasonInfo: int describeContents()>
<android.media.PlaybackParams: void <init>()>
<android.media.PlaybackParams: float getPitch()>
<android.media.PlaybackParams: android.media.PlaybackParams allowDefaults()>
<android.media.PlaybackParams: int getAudioFallbackMode()>
<android.media.PlaybackParams: android.media.PlaybackParams setPitch(float)>
<android.media.PlaybackParams: void writeToParcel(android.os.Parcel,int)>
<android.media.PlaybackParams: android.media.PlaybackParams setAudioFallbackMode(int)>
<android.media.PlaybackParams: int describeContents()>
<android.media.PlaybackParams: int getAudioStretchMode()>
<android.media.PlaybackParams: float getSpeed()>
<android.media.PlaybackParams: android.media.PlaybackParams setSpeed(float)>
<android.media.PlaybackParams: android.media.PlaybackParams setAudioStretchMode(int)>
<java.io.Externalizable extends java.io.Serializable: void readExternal(java.io.ObjectInput)>
<java.io.Externalizable extends java.io.Serializable: void writeExternal(java.io.ObjectOutput)>
<android.gesture.GestureOverlayView.OnGesturePerformedListener: void onGesturePerformed(android.gesture.GestureOverlayView,android.gesture.Gesture)>
<android.hardware.hdmi.HdmiControlManager.VendorCommandListener: void onReceived(int,int,byte[],boolean)>
<android.hardware.hdmi.HdmiControlManager.VendorCommandListener: void onControlStateChanged(boolean,int)>
<javax.sql.RowSetListener extends java.util.EventListener: void rowSetChanged(javax.sql.RowSetEvent)>
<javax.sql.RowSetListener extends java.util.EventListener: void cursorMoved(javax.sql.RowSetEvent)>
<javax.sql.RowSetListener extends java.util.EventListener: void rowChanged(javax.sql.RowSetEvent)>
<android.app.prediction.AppPredictor: void unregisterPredictionUpdates(android.app.prediction.AppPredictor.Callback)>
<android.app.prediction.AppPredictor: android.app.prediction.AppPredictionSessionId getSessionId()>
<android.app.prediction.AppPredictor: void notifyAppTargetEvent(android.app.prediction.AppTargetEvent)>
<android.app.prediction.AppPredictor: void registerPredictionUpdates(java.util.concurrent.Executor,android.app.prediction.AppPredictor.Callback)>
<android.app.prediction.AppPredictor: void destroy()>
<android.app.prediction.AppPredictor: void notifyLaunchLocationShown(java.lang.String,java.util.List)>
<android.app.prediction.AppPredictor: void requestPredictionUpdate()>
<android.app.prediction.AppPredictor: void sortTargets(java.util.List,java.util.concurrent.Executor,java.util.function.Consumer)>
<java.lang.Compiler: boolean compileClasses(java.lang.String)>
<java.lang.Compiler: java.lang.Object command(java.lang.Object)>
<java.lang.Compiler: boolean compileClass(java.lang.Class)>
<java.lang.Compiler: void enable()>
<java.lang.Compiler: void disable()>
<android.view.textclassifier.TextClassification: float getConfidenceScore(java.lang.String)>
<android.view.textclassifier.TextClassification: android.view.View.OnClickListener getOnClickListener()>
<android.view.textclassifier.TextClassification: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextClassification: android.content.Intent getIntent()>
<android.view.textclassifier.TextClassification: android.graphics.drawable.Drawable getIcon()>
<android.view.textclassifier.TextClassification: java.lang.String getEntity(int)>
<android.view.textclassifier.TextClassification: int getEntityCount()>
<android.view.textclassifier.TextClassification: java.lang.String getText()>
<android.view.textclassifier.TextClassification: CharSequence getLabel()>
<android.view.textclassifier.TextClassification: int describeContents()>
<android.view.textclassifier.TextClassification: java.util.List getActions()>
<android.view.textclassifier.TextClassification: android.os.Bundle getExtras()>
<android.view.textclassifier.TextClassification: java.lang.String getId()>
<android.view.ActionMode.Callback: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)>
<android.view.ActionMode.Callback: void onDestroyActionMode(android.view.ActionMode)>
<android.view.ActionMode.Callback: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)>
<android.view.ActionMode.Callback: boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu)>
<android.text.style.AlignmentSpan.Standard: void <init>(android.os.Parcel)>
<android.text.style.AlignmentSpan.Standard: void writeToParcel(android.os.Parcel,int)>
<android.text.style.AlignmentSpan.Standard: int describeContents()>
<android.text.style.AlignmentSpan.Standard: int getSpanTypeId()>
<android.text.style.AlignmentSpan.Standard: void <init>(android.text.Layout.Alignment)>
<android.text.style.AlignmentSpan.Standard: android.text.Layout.Alignment getAlignment()>
<android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setDisplayCutout(android.view.DisplayCutout)>
<android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setStableInsets(android.graphics.Insets)>
<android.view.WindowInsets.Builder: void <init>(android.view.WindowInsets)>
<android.view.WindowInsets.Builder: android.view.WindowInsets build()>
<android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setSystemGestureInsets(android.graphics.Insets)>
<android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setTappableElementInsets(android.graphics.Insets)>
<android.view.WindowInsets.Builder: void <init>()>
<android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setMandatorySystemGestureInsets(android.graphics.Insets)>
<android.view.WindowInsets.Builder: android.view.WindowInsets.Builder setSystemWindowInsets(android.graphics.Insets)>
<java.security.acl.Owner: boolean isOwner(java.security.Principal)>
<java.security.acl.Owner: boolean addOwner(java.security.Principal,java.security.Principal)>
<java.security.acl.Owner: boolean deleteOwner(java.security.Principal,java.security.Principal)>
<android.net.wifi.p2p.nsd.WifiP2pServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.p2p.nsd.WifiP2pServiceInfo: int describeContents()>
<java.net.DatagramSocketImplFactory: java.net.DatagramSocketImpl createDatagramSocketImpl()>
<android.media.audiofx.DynamicsProcessing.Eq: void setBand(int,android.media.audiofx.DynamicsProcessing.EqBand)>
<android.media.audiofx.DynamicsProcessing.Eq: android.media.audiofx.DynamicsProcessing.EqBand getBand(int)>
<android.media.audiofx.DynamicsProcessing.Eq: void <init>(boolean,boolean,int)>
<android.media.audiofx.DynamicsProcessing.Eq: void <init>(android.media.audiofx.DynamicsProcessing.Eq)>
<android.media.ToneGenerator: void release()>
<android.media.ToneGenerator: boolean startTone(int,int)>
<android.media.ToneGenerator: boolean startTone(int)>
<android.media.ToneGenerator: void <init>(int,int)>
<android.media.ToneGenerator: void stopTone()>
<android.media.ToneGenerator: int getAudioSessionId()>
<android.media.ToneGenerator: void finalize()>
<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>
<android.graphics.Paint: void setTextAlign(android.graphics.Paint.Align)>
<android.graphics.Paint: void setEndHyphenEdit(int)>
<android.graphics.Paint: void setTextSkewX(float)>
<android.graphics.Paint: void clearShadowLayer()>
<android.graphics.Paint: boolean isElegantTextHeight()>
<android.graphics.Paint: void setAntiAlias(boolean)>
<android.graphics.Paint: void setColor(@ColorLonglong)>
<android.graphics.Paint: int getFlags()>
<android.graphics.Paint: android.graphics.Paint.Align getTextAlign()>
<android.graphics.Paint: void setStrokeMiter(float)>
<android.graphics.Paint: void setSubpixelText(boolean)>
<android.graphics.Paint: float getStrikeThruThickness()>
<android.graphics.Paint: boolean isStrikeThruText()>
<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>
<android.graphics.Paint: android.graphics.Typeface getTypeface()>
<android.graphics.Paint: void <init>(android.graphics.Paint)>
<android.graphics.Paint: int getOffsetForAdvance(char[],int,int,int,int,boolean,float)>
<android.graphics.Paint: void setColor(@ColorIntint)>
<android.graphics.Paint: void setTextSize(float)>
<android.graphics.Paint: boolean isUnderlineText()>
<android.graphics.Paint: java.lang.String getFontFeatureSettings()>
<android.graphics.Paint: android.graphics.Paint.FontMetrics getFontMetrics()>
<android.graphics.Paint: void setStartHyphenEdit(int)>
<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)>
<android.graphics.Paint: android.graphics.Xfermode getXfermode()>
<android.graphics.Paint: int breakText(char[],int,int,float,float[])>
<android.graphics.Paint: boolean hasGlyph(java.lang.String)>
<android.graphics.Paint: void setShadowLayer(float,float,float,@ColorIntint)>
<android.graphics.Paint: void setStrikeThruText(boolean)>
<android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])>
<android.graphics.Paint: void getTextPath(char[],int,int,float,float,android.graphics.Path)>
<android.graphics.Paint: android.graphics.Shader getShader()>
<android.graphics.Paint: boolean isFakeBoldText()>
<android.graphics.Paint: void setFlags(int)>
<android.graphics.Paint: void getTextBounds(char[],int,int,android.graphics.Rect)>
<android.graphics.Paint: long getColorLong()>
<android.graphics.Paint: void setStrokeWidth(float)>
<android.graphics.Paint: int getTextRunCursor(CharSequence,int,int,boolean,int,int)>
<android.graphics.Paint: void setBlendMode(android.graphics.BlendMode)>
<android.graphics.Paint: android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)>
<android.graphics.Paint: void <init>(int)>
<android.graphics.Paint: long getShadowLayerColorLong()>
<android.graphics.Paint: void getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)>
<android.graphics.Paint: float getFontSpacing()>
<android.graphics.Paint: void setFilterBitmap(boolean)>
<android.graphics.Paint: float getFontMetrics(android.graphics.Paint.FontMetrics)>
<android.graphics.Paint: int getFontMetricsInt(android.graphics.Paint.FontMetricsInt)>
<android.graphics.Paint: void setElegantTextHeight(boolean)>
<android.graphics.Paint: boolean equalsForTextMeasurement(android.graphics.Paint)>
<android.graphics.Paint: float ascent()>
<android.graphics.Paint: float getStrokeWidth()>
<android.graphics.Paint: float measureText(java.lang.String)>
<android.graphics.Paint: int getTextRunCursor(char[],int,int,boolean,int,int)>
<android.graphics.Paint: void <init>()>
<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>
<android.graphics.Paint: float descent()>
<android.graphics.Paint: void setFakeBoldText(boolean)>
<android.graphics.Paint: float getStrokeMiter()>
<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint.Join)>
<android.graphics.Paint: boolean isSubpixelText()>
<android.graphics.Paint: int getOffsetForAdvance(CharSequence,int,int,int,int,boolean,float)>
<android.graphics.Paint: int getShadowLayerColor()>
<android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()>
<android.graphics.Paint: android.graphics.Paint.FontMetricsInt getFontMetricsInt()>
<android.graphics.Paint: float getShadowLayerDy()>
<android.graphics.Paint: void setAlpha(int)>
<android.graphics.Paint: void setWordSpacing(@Pxfloat)>
<android.graphics.Paint: int getStartHyphenEdit()>
<android.graphics.Paint: java.util.Locale getTextLocale()>
<android.graphics.Paint: void setStyle(android.graphics.Paint.Style)>
<android.graphics.Paint: boolean isDither()>
<android.graphics.Paint: java.lang.String getFontVariationSettings()>
<android.graphics.Paint: float getTextSkewX()>
<android.graphics.Paint: boolean isAntiAlias()>
<android.graphics.Paint: int getColor()>
<android.graphics.Paint: void reset()>
<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,boolean,float[],int)>
<android.graphics.Paint: float getWordSpacing()>
<android.graphics.Paint: void setLinearText(boolean)>
<android.graphics.Paint: float getRunAdvance(char[],int,int,int,int,boolean,int)>
<android.graphics.Paint: void setDither(boolean)>
<android.graphics.Paint: int getHinting()>
<android.graphics.Paint: int getAlpha()>
<android.graphics.Paint: float getShadowLayerRadius()>
<android.graphics.Paint: boolean getFillPath(android.graphics.Path,android.graphics.Path)>
<android.graphics.Paint: void setARGB(int,int,int,int)>
<android.graphics.Paint: float getTextSize()>
<android.graphics.Paint: android.graphics.BlendMode getBlendMode()>
<android.graphics.Paint: float measureText(CharSequence,int,int)>
<android.graphics.Paint: void setTextLocale(java.util.Locale)>
<android.graphics.Paint: float getRunAdvance(CharSequence,int,int,int,int,boolean,int)>
<android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)>
<android.graphics.Paint: float getStrikeThruPosition()>
<android.graphics.Paint: android.graphics.Paint.Join getStrokeJoin()>
<android.graphics.Paint: android.graphics.Paint.Cap getStrokeCap()>
<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>
<android.graphics.Paint: boolean setFontVariationSettings(java.lang.String)>
<android.graphics.Paint: float getTextScaleX()>
<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>
<android.graphics.Paint: int getTextWidths(CharSequence,int,int,float[])>
<android.graphics.Paint: int getTextWidths(java.lang.String,float[])>
<android.graphics.Paint: android.os.LocaleList getTextLocales()>
<android.graphics.Paint: android.graphics.Paint.Style getStyle()>
<android.graphics.Paint: android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)>
<android.graphics.Paint: int breakText(CharSequence,int,int,boolean,float,float[])>
<android.graphics.Paint: void setShadowLayer(float,float,float,@ColorLonglong)>
<android.graphics.Paint: android.graphics.PathEffect getPathEffect()>
<android.graphics.Paint: void setUnderlineText(boolean)>
<android.graphics.Paint: float getShadowLayerDx()>
<android.graphics.Paint: float getUnderlinePosition()>
<android.graphics.Paint: float getUnderlineThickness()>
<android.graphics.Paint: float measureText(char[],int,int)>
<android.graphics.Paint: void setTextLocales(android.os.LocaleList)>
<android.graphics.Paint: boolean isFilterBitmap()>
<android.graphics.Paint: void set(android.graphics.Paint)>
<android.graphics.Paint: void setFontFeatureSettings(java.lang.String)>
<android.graphics.Paint: float getLetterSpacing()>
<android.graphics.Paint: void setHinting(int)>
<android.graphics.Paint: void setStrokeCap(android.graphics.Paint.Cap)>
<android.graphics.Paint: void setTextScaleX(float)>
<android.graphics.Paint: float measureText(java.lang.String,int,int)>
<android.graphics.Paint: void setLetterSpacing(float)>
<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>
<android.graphics.Paint: boolean isLinearText()>
<android.graphics.Paint: void getTextBounds(CharSequence,int,int,android.graphics.Rect)>
<android.graphics.Paint: int getEndHyphenEdit()>
<android.widget.RelativeLayout.LayoutParams: void addRule(int,int)>
<android.widget.RelativeLayout.LayoutParams: void <init>(android.widget.RelativeLayout.LayoutParams)>
<android.widget.RelativeLayout.LayoutParams: void addRule(int)>
<android.widget.RelativeLayout.LayoutParams: int[] getRules()>
<android.widget.RelativeLayout.LayoutParams: void <init>(android.view.ViewGroup.MarginLayoutParams)>
<android.widget.RelativeLayout.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RelativeLayout.LayoutParams: java.lang.String debug(java.lang.String)>
<android.widget.RelativeLayout.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.widget.RelativeLayout.LayoutParams: void <init>(int,int)>
<android.widget.RelativeLayout.LayoutParams: void removeRule(int)>
<android.widget.RelativeLayout.LayoutParams: int getRule(int)>
<android.text.method.TextKeyListener: void <init>(android.text.method.TextKeyListener.Capitalize,boolean)>
<android.text.method.TextKeyListener: void clear(android.text.Editable)>
<android.text.method.TextKeyListener: void release()>
<android.text.method.TextKeyListener: boolean shouldCap(android.text.method.TextKeyListener.Capitalize,CharSequence,int)>
<android.text.method.TextKeyListener: void onSpanRemoved(android.text.Spannable,java.lang.Object,int,int)>
<android.text.method.TextKeyListener: void onSpanAdded(android.text.Spannable,java.lang.Object,int,int)>
<android.text.method.TextKeyListener: android.text.method.TextKeyListener getInstance(boolean,android.text.method.TextKeyListener.Capitalize)>
<android.text.method.TextKeyListener: int getInputType()>
<android.text.method.TextKeyListener: android.text.method.TextKeyListener getInstance()>
<android.text.method.TextKeyListener: void onSpanChanged(android.text.Spannable,java.lang.Object,int,int,int,int)>
<java.nio.channels.spi.AbstractSelectionKey: void <init>()>
<java.nio.channels.spi.AbstractSelectionKey: void cancel()>
<java.nio.channels.spi.AbstractSelectionKey: boolean isValid()>
<android.telephony.mbms.UriPathPair: void writeToParcel(android.os.Parcel,int)>
<android.telephony.mbms.UriPathPair: android.net.Uri getContentUri()>
<android.telephony.mbms.UriPathPair: android.net.Uri getFilePathUri()>
<android.telephony.mbms.UriPathPair: int describeContents()>
<java.nio.file.ClosedFileSystemException: void <init>()>
<android.view.textclassifier.TextLanguage.Request: android.os.Bundle getExtras()>
<android.view.textclassifier.TextLanguage.Request: java.lang.String getCallingPackageName()>
<android.view.textclassifier.TextLanguage.Request: CharSequence getText()>
<android.view.textclassifier.TextLanguage.Request: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextLanguage.Request: int describeContents()>
<android.hardware.camera2.params.Face: int getScore()>
<android.hardware.camera2.params.Face: android.graphics.Point getLeftEyePosition()>
<android.hardware.camera2.params.Face: android.graphics.Point getRightEyePosition()>
<android.hardware.camera2.params.Face: android.graphics.Rect getBounds()>
<android.hardware.camera2.params.Face: int getId()>
<android.hardware.camera2.params.Face: android.graphics.Point getMouthPosition()>
<android.bluetooth.BluetoothServerSocket: void close()>
<android.bluetooth.BluetoothServerSocket: android.bluetooth.BluetoothSocket accept()>
<android.bluetooth.BluetoothServerSocket: android.bluetooth.BluetoothSocket accept(int)>
<android.bluetooth.BluetoothServerSocket: int getPsm()>
<android.text.style.TtsSpan.DateBuilder: android.text.style.TtsSpan.DateBuilder setWeekday(int)>
<android.text.style.TtsSpan.DateBuilder: android.text.style.TtsSpan.DateBuilder setYear(int)>
<android.text.style.TtsSpan.DateBuilder: android.text.style.TtsSpan.DateBuilder setDay(int)>
<android.text.style.TtsSpan.DateBuilder: android.text.style.TtsSpan.DateBuilder setMonth(int)>
<android.text.style.TtsSpan.DateBuilder: void <init>(Integer,Integer,Integer,Integer)>
<android.text.style.TtsSpan.DateBuilder: void <init>()>
<java.sql.SQLClientInfoException: void <init>()>
<java.sql.SQLClientInfoException: void <init>(String,String,java.util.Map)>
<java.sql.SQLClientInfoException: void <init>(java.util.Map,Throwable)>
<java.sql.SQLClientInfoException: void <init>(String,String,java.util.Map,Throwable)>
<java.sql.SQLClientInfoException: void <init>(String,java.util.Map,Throwable)>
<java.sql.SQLClientInfoException: void <init>(String,String,int,java.util.Map)>
<java.sql.SQLClientInfoException: void <init>(String,java.util.Map)>
<java.sql.SQLClientInfoException: void <init>(java.util.Map)>
<java.sql.SQLClientInfoException: void <init>(String,String,int,java.util.Map,Throwable)>
<java.sql.SQLClientInfoException: java.util.Map getFailedProperties()>
<android.media.HwAudioSource: void stop()>
<android.media.HwAudioSource: boolean isPlaying()>
<android.media.HwAudioSource: void start()>
<android.text.AndroidCharacter: void getDirectionalities(char[],byte[],int)>
<android.text.AndroidCharacter: int getEastAsianWidth(char)>
<android.text.AndroidCharacter: void <init>()>
<android.text.AndroidCharacter: void getEastAsianWidths(char[],int,int,byte[])>
<android.text.AndroidCharacter: char getMirror(char)>
<android.text.AndroidCharacter: boolean mirror(char[],int,int)>
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setVideoPixelAspectRatio(float)>
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setLanguage(java.lang.String)>
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo build()>
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setAudioSampleRate(int)>
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setVideoFrameRate(float)>
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setVideoWidth(int)>
<android.media.tv.TvTrackInfo.Builder: void <init>(int,String)>
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setDescription(CharSequence)>
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setAudioChannelCount(int)>
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setVideoHeight(int)>
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setExtra(android.os.Bundle)>
<android.media.tv.TvTrackInfo.Builder: android.media.tv.TvTrackInfo.Builder setVideoActiveFormatDescription(byte)>
<java.security.KeyRep: void <init>(java.security.KeyRep.Type,String,String,byte[])>
<java.security.KeyRep: java.lang.Object readResolve()>
<android.widget.ImageSwitcher: void setImageURI(android.net.Uri)>
<android.widget.ImageSwitcher: void <init>(android.content.Context)>
<android.widget.ImageSwitcher: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageSwitcher: void setImageResource(@DrawableResint)>
<android.widget.ImageSwitcher: void <init>(android.content.Context,android.util.AttributeSet)>
<android.media.tv.TvTrackInfo: java.lang.String getId()>
<android.media.tv.TvTrackInfo: byte getVideoActiveFormatDescription()>
<android.media.tv.TvTrackInfo: int getAudioSampleRate()>
<android.media.tv.TvTrackInfo: int getVideoWidth()>
<android.media.tv.TvTrackInfo: int getType()>
<android.media.tv.TvTrackInfo: int getAudioChannelCount()>
<android.media.tv.TvTrackInfo: float getVideoPixelAspectRatio()>
<android.media.tv.TvTrackInfo: java.lang.String getLanguage()>
<android.media.tv.TvTrackInfo: int describeContents()>
<android.media.tv.TvTrackInfo: android.os.Bundle getExtra()>
<android.media.tv.TvTrackInfo: float getVideoFrameRate()>
<android.media.tv.TvTrackInfo: int getVideoHeight()>
<android.media.tv.TvTrackInfo: void writeToParcel(android.os.Parcel,int)>
<android.media.tv.TvTrackInfo: CharSequence getDescription()>
<android.media.audiopolicy.AudioPolicy.AudioPolicyStatusListener: void onStatusChange()>
<android.media.audiopolicy.AudioPolicy.AudioPolicyStatusListener: void <init>()>
<android.media.audiopolicy.AudioPolicy.AudioPolicyStatusListener: void onMixStateUpdate(android.media.audiopolicy.AudioMix)>
<android.text.method.KeyListener: int getInputType()>
<android.text.method.KeyListener: boolean onKeyOther(android.view.View,android.text.Editable,android.view.KeyEvent)>
<android.text.method.KeyListener: void clearMetaKeyState(android.view.View,android.text.Editable,int)>
<android.text.method.KeyListener: boolean onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.method.KeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.widget.RemoteViews.ActionException: void <init>(Exception)>
<android.widget.RemoteViews.ActionException: void <init>(String)>
<org.json.JSONTokener: char next(char)>
<org.json.JSONTokener: void <init>(String)>
<org.json.JSONTokener: void back()>
<org.json.JSONTokener: int dehexchar(char)>
<org.json.JSONTokener: boolean more()>
<org.json.JSONTokener: java.lang.String nextTo(java.lang.String)>
<org.json.JSONTokener: java.lang.Object nextValue()>
<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>
<org.json.JSONTokener: java.lang.String nextTo(char)>
<org.json.JSONTokener: char next()>
<org.json.JSONTokener: void skipPast(java.lang.String)>
<org.json.JSONTokener: java.lang.String next(int)>
<org.json.JSONTokener: char skipTo(char)>
<org.json.JSONTokener: char nextClean()>
<org.json.JSONTokener: java.lang.String nextString(char)>
<android.companion.WifiDeviceFilter: int describeContents()>
<android.companion.WifiDeviceFilter: void writeToParcel(android.os.Parcel,int)>
<java.time.temporal.UnsupportedTemporalTypeException: void <init>(String,Throwable)>
<java.time.temporal.UnsupportedTemporalTypeException: void <init>(String)>
<java.net.UnknownHostException: void <init>(String)>
<java.net.UnknownHostException: void <init>()>
<java.util.prefs.InvalidPreferencesFormatException: void <init>(String,Throwable)>
<java.util.prefs.InvalidPreferencesFormatException: void <init>(String)>
<java.util.prefs.InvalidPreferencesFormatException: void <init>(Throwable)>
<android.graphics.drawable.DrawableWrapper: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.DrawableWrapper: void setDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.DrawableWrapper: void <init>(android.graphics.drawable.Drawable)>
<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable getDrawable()>
<android.graphics.drawable.DrawableWrapper: int getOpacity()>
<android.graphics.drawable.DrawableWrapper: void scheduleDrawable(android.graphics.drawable.Drawable,Runnable,long)>
<android.graphics.drawable.DrawableWrapper: void draw(android.graphics.Canvas)>
<android.graphics.drawable.DrawableWrapper: void setAlpha(int)>
<android.graphics.drawable.DrawableWrapper: void unscheduleDrawable(android.graphics.drawable.Drawable,Runnable)>
<android.graphics.drawable.DrawableWrapper: void setColorFilter(android.graphics.ColorFilter)>
<android.os.DeadObjectException: void <init>(String)>
<android.os.DeadObjectException: void <init>()>
<android.widget.TabHost.TabContentFactory: android.view.View createTabContent(java.lang.String)>
<java.util.concurrent.ExecutionException: void <init>(String,Throwable)>
<java.util.concurrent.ExecutionException: void <init>(Throwable)>
<java.util.concurrent.ExecutionException: void <init>(String)>
<java.util.concurrent.ExecutionException: void <init>()>
<org.xml.sax.helpers.DefaultHandler: void characters(char[],int,int)>
<org.xml.sax.helpers.DefaultHandler: void processingInstruction(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.DefaultHandler: void startPrefixMapping(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.DefaultHandler: void notationDecl(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.DefaultHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.DefaultHandler: void startDocument()>
<org.xml.sax.helpers.DefaultHandler: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.DefaultHandler: void setDocumentLocator(org.xml.sax.Locator)>
<org.xml.sax.helpers.DefaultHandler: void endDocument()>
<org.xml.sax.helpers.DefaultHandler: void <init>()>
<org.xml.sax.helpers.DefaultHandler: void error(org.xml.sax.SAXParseException)>
<org.xml.sax.helpers.DefaultHandler: void skippedEntity(java.lang.String)>
<org.xml.sax.helpers.DefaultHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>
<org.xml.sax.helpers.DefaultHandler: void endPrefixMapping(java.lang.String)>
<org.xml.sax.helpers.DefaultHandler: void ignorableWhitespace(char[],int,int)>
<org.xml.sax.helpers.DefaultHandler: void warning(org.xml.sax.SAXParseException)>
<org.xml.sax.helpers.DefaultHandler: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.DefaultHandler: void fatalError(org.xml.sax.SAXParseException)>
<android.graphics.drawable.PaintDrawable: void <init>()>
<android.graphics.drawable.PaintDrawable: void <init>(int)>
<android.graphics.drawable.PaintDrawable: void setCornerRadii(float[])>
<android.graphics.drawable.PaintDrawable: void setCornerRadius(float)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,@LayoutRes int,@IdRes int)>
<android.widget.ArrayAdapter: android.widget.ArrayAdapter createFromResource(android.content.Context,@ArrayResint,@LayoutResint)>
<android.widget.ArrayAdapter: void setNotifyOnChange(boolean)>
<android.widget.ArrayAdapter: long getItemId(int)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,@LayoutRes int,@IdRes int,T[])>
<android.widget.ArrayAdapter: android.widget.Filter getFilter()>
<android.widget.ArrayAdapter: void setDropDownViewTheme(android.content.res.Resources.Theme)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,@LayoutRes int,T[])>
<android.widget.ArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,@LayoutRes int)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,@LayoutRes int,java.util.List)>
<android.widget.ArrayAdapter: void add(T)>
<android.widget.ArrayAdapter: void remove(T)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,@LayoutRes int,@IdRes int,java.util.List)>
<android.widget.ArrayAdapter: void addAll(java.util.Collection)>
<android.widget.ArrayAdapter: int getPosition(T)>
<android.widget.ArrayAdapter: android.content.Context getContext()>
<android.widget.ArrayAdapter: T getItem(int)>
<android.widget.ArrayAdapter: void clear()>
<android.widget.ArrayAdapter: android.content.res.Resources.Theme getDropDownViewTheme()>
<android.widget.ArrayAdapter: int getCount()>
<android.widget.ArrayAdapter: void sort(java.util.Comparator)>
<android.widget.ArrayAdapter: void setDropDownViewResource(@LayoutResint)>
<android.widget.ArrayAdapter: void insert(T,int)>
<android.widget.ArrayAdapter: void addAll(T...)>
<android.app.UiAutomation.OnAccessibilityEventListener: void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.database.CursorIndexOutOfBoundsException: void <init>(String)>
<android.database.CursorIndexOutOfBoundsException: void <init>(int,int)>
<java.util.function.IntToLongFunction: long applyAsLong(int)>
<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>
<android.content.SharedPreferences: void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences.OnSharedPreferenceChangeListener)>
<android.content.SharedPreferences: int getInt(java.lang.String,int)>
<android.content.SharedPreferences: boolean contains(java.lang.String)>
<android.content.SharedPreferences: long getLong(java.lang.String,long)>
<android.content.SharedPreferences: float getFloat(java.lang.String,float)>
<android.content.SharedPreferences: android.content.SharedPreferences.Editor edit()>
<android.content.SharedPreferences: java.util.Map getAll()>
<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences.OnSharedPreferenceChangeListener)>
<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>
<android.content.SharedPreferences: java.util.Set getStringSet(java.lang.String,java.util.Set)>
<android.telecom.TelecomManager: void addNewUnknownCall(android.telecom.PhoneAccountHandle,android.os.Bundle)>
<android.telecom.TelecomManager: void addNewIncomingCall(android.telecom.PhoneAccountHandle,android.os.Bundle)>
<android.telecom.TelecomManager: void showInCallScreen(boolean)>
<android.telecom.TelecomManager: void acceptHandover(android.net.Uri,int,android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: java.util.List getPhoneAccountsSupportingScheme(java.lang.String)>
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getDefaultOutgoingPhoneAccount(java.lang.String)>
<android.telecom.TelecomManager: android.telecom.TelecomAnalytics dumpAnalytics()>
<android.telecom.TelecomManager: java.lang.String getLine1Number(android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: boolean isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)>
<android.telecom.TelecomManager: boolean isInCall()>
<android.telecom.TelecomManager: boolean isInEmergencyCall()>
<android.telecom.TelecomManager: android.telecom.PhoneAccount getPhoneAccount(android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: void silenceRinger()>
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getSimCallManager()>
<android.telecom.TelecomManager: void acceptRingingCall(int)>
<android.telecom.TelecomManager: android.content.ComponentName getDefaultPhoneApp()>
<android.telecom.TelecomManager: boolean isRinging()>
<android.telecom.TelecomManager: java.util.List getPhoneAccountsForPackage()>
<android.telecom.TelecomManager: java.lang.String getDefaultDialerPackage()>
<android.telecom.TelecomManager: void clearAccounts()>
<android.telecom.TelecomManager: java.util.List getAllPhoneAccounts()>
<android.telecom.TelecomManager: boolean handleMmi(java.lang.String)>
<android.telecom.TelecomManager: java.util.List getAllPhoneAccountHandles()>
<android.telecom.TelecomManager: boolean isInManagedCall()>
<android.telecom.TelecomManager: void setUserSelectedOutgoingPhoneAccount(android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: java.util.List getSelfManagedPhoneAccounts()>
<android.telecom.TelecomManager: void unregisterPhoneAccount(android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: java.lang.String getVoiceMailNumber(android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: boolean isOutgoingCallPermitted(android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: boolean isTtySupported()>
<android.telecom.TelecomManager: void registerPhoneAccount(android.telecom.PhoneAccount)>
<android.telecom.TelecomManager: android.net.Uri getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: boolean handleMmi(java.lang.String,android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getConnectionManager()>
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getUserSelectedOutgoingPhoneAccount()>
<android.telecom.TelecomManager: int getAllPhoneAccountsCount()>
<android.telecom.TelecomManager: void acceptRingingCall()>
<android.telecom.TelecomManager: void enablePhoneAccount(android.telecom.PhoneAccountHandle,boolean)>
<android.telecom.TelecomManager: int getCallState()>
<android.telecom.TelecomManager: boolean endCall()>
<android.telecom.TelecomManager: java.util.List getCallCapablePhoneAccounts()>
<android.telecom.TelecomManager: void placeCall(android.net.Uri,android.os.Bundle)>
<android.telecom.TelecomManager: boolean isIncomingCallPermitted(android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: int getCurrentTtyMode()>
<android.telecom.TelecomManager: void clearPhoneAccounts()>
<android.telecom.TelecomManager: java.lang.String getSystemDialerPackage()>
<android.telecom.TelecomManager: void cancelMissedCallsNotification()>
<android.telecom.TelecomManager: android.content.Intent createManageBlockedNumbersIntent()>
<android.provider.AlarmClock: void <init>()>
<android.provider.DeviceConfig.Properties: float getFloat(java.lang.String,float)>
<android.provider.DeviceConfig.Properties: boolean getBoolean(java.lang.String,boolean)>
<android.provider.DeviceConfig.Properties: long getLong(java.lang.String,long)>
<android.provider.DeviceConfig.Properties: java.lang.String getString(java.lang.String,java.lang.String)>
<android.provider.DeviceConfig.Properties: int getInt(java.lang.String,int)>
<android.provider.DeviceConfig.Properties: java.lang.String getNamespace()>
<android.provider.DeviceConfig.Properties: java.util.Set getKeyset()>
<android.Manifest.permission: void <init>()>
<android.net.wifi.p2p.WifiP2pManager.ActionListener: void onSuccess()>
<android.net.wifi.p2p.WifiP2pManager.ActionListener: void onFailure(int)>
<java.io.ObjectInput extends java.io.DataInput java.lang.AutoCloseable: int read()>
<java.io.ObjectInput extends java.io.DataInput java.lang.AutoCloseable: int read(byte[])>
<java.io.ObjectInput extends java.io.DataInput java.lang.AutoCloseable: java.lang.Object readObject()>
<java.io.ObjectInput extends java.io.DataInput java.lang.AutoCloseable: long skip(long)>
<java.io.ObjectInput extends java.io.DataInput java.lang.AutoCloseable: void close()>
<java.io.ObjectInput extends java.io.DataInput java.lang.AutoCloseable: int available()>
<java.io.ObjectInput extends java.io.DataInput java.lang.AutoCloseable: int read(byte[],int,int)>
<java.nio.file.attribute.PosixFileAttributes extends java.nio.file.attribute.BasicFileAttributes: java.util.Set permissions()>
<java.nio.file.attribute.PosixFileAttributes extends java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.GroupPrincipal group()>
<java.nio.file.attribute.PosixFileAttributes extends java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.UserPrincipal owner()>
<android.view.contentcapture.ContentCaptureEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.contentcapture.ContentCaptureEvent: android.view.autofill.AutofillId getId()>
<android.view.contentcapture.ContentCaptureEvent: android.view.contentcapture.ViewNode getViewNode()>
<android.view.contentcapture.ContentCaptureEvent: long getEventTime()>
<android.view.contentcapture.ContentCaptureEvent: int getType()>
<android.view.contentcapture.ContentCaptureEvent: int describeContents()>
<android.view.contentcapture.ContentCaptureEvent: android.view.contentcapture.ContentCaptureContext getContentCaptureContext()>
<android.view.contentcapture.ContentCaptureEvent: CharSequence getText()>
<android.view.contentcapture.ContentCaptureEvent: java.util.List getIds()>
<java.net.URISyntaxException: void <init>(String,String)>
<java.net.URISyntaxException: java.lang.String getInput()>
<java.net.URISyntaxException: java.lang.String getReason()>
<java.net.URISyntaxException: int getIndex()>
<java.net.URISyntaxException: void <init>(String,String,int)>
<android.transition.TransitionManager: void <init>()>
<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>
<android.transition.TransitionManager: void setTransition(android.transition.Scene,android.transition.Transition)>
<android.transition.TransitionManager: void transitionTo(android.transition.Scene)>
<android.transition.TransitionManager: void setTransition(android.transition.Scene,android.transition.Scene,android.transition.Transition)>
<android.transition.TransitionManager: void go(android.transition.Scene,android.transition.Transition)>
<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,android.transition.Transition)>
<android.transition.TransitionManager: void go(android.transition.Scene)>
<android.transition.TransitionManager: void endTransitions(android.view.ViewGroup)>
<android.transition.TransitionManager: android.transition.Transition getTransition(android.transition.Scene)>
<android.widget.BaseExpandableListAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.widget.BaseExpandableListAdapter: boolean areAllItemsEnabled()>
<android.widget.BaseExpandableListAdapter: void notifyDataSetInvalidated()>
<android.widget.BaseExpandableListAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.BaseExpandableListAdapter: long getCombinedGroupId(long)>
<android.widget.BaseExpandableListAdapter: void <init>()>
<android.widget.BaseExpandableListAdapter: int getGroupTypeCount()>
<android.widget.BaseExpandableListAdapter: long getCombinedChildId(long,long)>
<android.widget.BaseExpandableListAdapter: void onGroupExpanded(int)>
<android.widget.BaseExpandableListAdapter: void onGroupCollapsed(int)>
<android.widget.BaseExpandableListAdapter: int getGroupType(int)>
<android.widget.BaseExpandableListAdapter: int getChildTypeCount()>
<android.widget.BaseExpandableListAdapter: int getChildType(int,int)>
<android.widget.BaseExpandableListAdapter: void notifyDataSetChanged()>
<android.widget.BaseExpandableListAdapter: boolean isEmpty()>
<java.security.acl.Acl extends java.security.acl.Owner: boolean addEntry(java.security.Principal,java.security.acl.AclEntry)>
<java.security.acl.Acl extends java.security.acl.Owner: java.lang.String toString()>
<java.security.acl.Acl extends java.security.acl.Owner: java.util.Enumeration getPermissions(java.security.Principal)>
<java.security.acl.Acl extends java.security.acl.Owner: boolean checkPermission(java.security.Principal,java.security.acl.Permission)>
<java.security.acl.Acl extends java.security.acl.Owner: boolean removeEntry(java.security.Principal,java.security.acl.AclEntry)>
<java.security.acl.Acl extends java.security.acl.Owner: java.lang.String getName()>
<java.security.acl.Acl extends java.security.acl.Owner: void setName(java.security.Principal,java.lang.String)>
<java.security.acl.Acl extends java.security.acl.Owner: java.util.Enumeration entries()>
<java.util.EventObject: void <init>(Object)>
<java.util.EventObject: java.lang.Object getSource()>
<android.nfc.NfcAdapter.OnNdefPushCompleteCallback: void onNdefPushComplete(android.nfc.NfcEvent)>
<android.os.BugreportParams: int getMode()>
<android.os.BugreportParams: void <init>(int)>
<org.json.JSONObject: void <init>()>
<org.json.JSONObject: void <init>(org.json.JSONObject,String[])>
<org.json.JSONObject: boolean optBoolean(java.lang.String)>
<org.json.JSONObject: org.json.JSONArray optJSONArray(java.lang.String)>
<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>
<org.json.JSONObject: int getInt(java.lang.String)>
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>
<org.json.JSONObject: java.util.Iterator keys()>
<org.json.JSONObject: double optDouble(java.lang.String)>
<org.json.JSONObject: long optLong(java.lang.String,long)>
<org.json.JSONObject: double getDouble(java.lang.String)>
<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>
<org.json.JSONObject: java.lang.String toString(int)>
<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>
<org.json.JSONObject: double optDouble(java.lang.String,double)>
<org.json.JSONObject: java.lang.Object opt(java.lang.String)>
<org.json.JSONObject: void <init>(java.util.Map)>
<org.json.JSONObject: java.lang.String numberToString(java.lang.Number)>
<org.json.JSONObject: java.lang.String quote(java.lang.String)>
<org.json.JSONObject: org.json.JSONObject optJSONObject(java.lang.String)>
<org.json.JSONObject: long optLong(java.lang.String)>
<org.json.JSONObject: org.json.JSONArray names()>
<org.json.JSONObject: int length()>
<org.json.JSONObject: boolean has(java.lang.String)>
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)>
<org.json.JSONObject: org.json.JSONArray toJSONArray(org.json.JSONArray)>
<org.json.JSONObject: org.json.JSONObject putOpt(java.lang.String,java.lang.Object)>
<org.json.JSONObject: java.lang.Object wrap(java.lang.Object)>
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>
<org.json.JSONObject: void <init>(org.json.JSONTokener)>
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>
<org.json.JSONObject: java.lang.String getString(java.lang.String)>
<org.json.JSONObject: int optInt(java.lang.String,int)>
<org.json.JSONObject: boolean getBoolean(java.lang.String)>
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>
<org.json.JSONObject: java.lang.Object get(java.lang.String)>
<org.json.JSONObject: long getLong(java.lang.String)>
<org.json.JSONObject: java.lang.Object remove(java.lang.String)>
<org.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)>
<org.json.JSONObject: boolean isNull(java.lang.String)>
<org.json.JSONObject: int optInt(java.lang.String)>
<org.json.JSONObject: void <init>(String)>
<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>
<org.json.JSONObject: java.lang.String optString(java.lang.String)>
<java.nio.IntBuffer: java.nio.IntBuffer slice()>
<java.nio.IntBuffer: int compareTo(java.nio.IntBuffer)>
<java.nio.IntBuffer: java.nio.IntBuffer put(int[],int,int)>
<java.nio.IntBuffer: java.nio.IntBuffer get(int[])>
<java.nio.IntBuffer: java.nio.IntBuffer allocate(int)>
<java.nio.IntBuffer: java.nio.IntBuffer get(int[],int,int)>
<java.nio.IntBuffer: java.nio.IntBuffer asReadOnlyBuffer()>
<java.nio.IntBuffer: int arrayOffset()>
<java.nio.IntBuffer: int get(int)>
<java.nio.IntBuffer: java.nio.IntBuffer put(int[])>
<java.nio.IntBuffer: java.nio.IntBuffer put(int,int)>
<java.nio.IntBuffer: int get()>
<java.nio.IntBuffer: java.nio.ByteOrder order()>
<java.nio.IntBuffer: boolean hasArray()>
<java.nio.IntBuffer: java.nio.IntBuffer put(int)>
<java.nio.IntBuffer: java.nio.IntBuffer put(java.nio.IntBuffer)>
<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[],int,int)>
<java.nio.IntBuffer: java.nio.IntBuffer compact()>
<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[])>
<java.nio.IntBuffer: java.nio.IntBuffer duplicate()>
<java.nio.IntBuffer: int[] array()>
<java.util.ListIterator extends java.util.Iterator: int nextIndex()>
<java.util.ListIterator extends java.util.Iterator: E previous()>
<java.util.ListIterator extends java.util.Iterator: void remove()>
<java.util.ListIterator extends java.util.Iterator: void add(E)>
<java.util.ListIterator extends java.util.Iterator: int previousIndex()>
<java.util.ListIterator extends java.util.Iterator: void set(E)>
<java.util.ListIterator extends java.util.Iterator: boolean hasPrevious()>
<org.xml.sax.helpers.AttributeListImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.helpers.AttributeListImpl: void <init>(org.xml.sax.AttributeList)>
<org.xml.sax.helpers.AttributeListImpl: int getLength()>
<org.xml.sax.helpers.AttributeListImpl: void clear()>
<org.xml.sax.helpers.AttributeListImpl: java.lang.String getValue(java.lang.String)>
<org.xml.sax.helpers.AttributeListImpl: void removeAttribute(java.lang.String)>
<org.xml.sax.helpers.AttributeListImpl: void <init>()>
<org.xml.sax.helpers.AttributeListImpl: java.lang.String getType(java.lang.String)>
<org.xml.sax.helpers.AttributeListImpl: java.lang.String getName(int)>
<org.xml.sax.helpers.AttributeListImpl: void setAttributeList(org.xml.sax.AttributeList)>
<org.xml.sax.helpers.AttributeListImpl: java.lang.String getValue(int)>
<org.xml.sax.helpers.AttributeListImpl: java.lang.String getType(int)>
<java.util.NavigableMap extends java.util.SortedMap: K lowerKey(K)>
<java.util.NavigableMap extends java.util.SortedMap: java.util.Map.Entry firstEntry()>
<java.util.NavigableMap extends java.util.SortedMap: java.util.Map.Entry floorEntry(K)>
<java.util.NavigableMap extends java.util.SortedMap: java.util.Map.Entry lastEntry()>
<java.util.NavigableMap extends java.util.SortedMap: java.util.NavigableMap subMap(K,boolean,K,boolean)>
<java.util.NavigableMap extends java.util.SortedMap: java.util.Map.Entry higherEntry(K)>
<java.util.NavigableMap extends java.util.SortedMap: K higherKey(K)>
<java.util.NavigableMap extends java.util.SortedMap: K ceilingKey(K)>
<java.util.NavigableMap extends java.util.SortedMap: java.util.NavigableSet navigableKeySet()>
<java.util.NavigableMap extends java.util.SortedMap: K floorKey(K)>
<java.util.NavigableMap extends java.util.SortedMap: java.util.Map.Entry pollFirstEntry()>
<java.util.NavigableMap extends java.util.SortedMap: java.util.NavigableMap headMap(K,boolean)>
<java.util.NavigableMap extends java.util.SortedMap: java.util.Map.Entry lowerEntry(K)>
<java.util.NavigableMap extends java.util.SortedMap: java.util.NavigableMap tailMap(K,boolean)>
<java.util.NavigableMap extends java.util.SortedMap: java.util.Map.Entry pollLastEntry()>
<java.util.NavigableMap extends java.util.SortedMap: java.util.NavigableSet descendingKeySet()>
<java.util.NavigableMap extends java.util.SortedMap: java.util.Map.Entry ceilingEntry(K)>
<java.util.NavigableMap extends java.util.SortedMap: java.util.NavigableMap descendingMap()>
<java.nio.file.attribute.DosFileAttributeView extends java.nio.file.attribute.BasicFileAttributeView: void setReadOnly(boolean)>
<java.nio.file.attribute.DosFileAttributeView extends java.nio.file.attribute.BasicFileAttributeView: void setArchive(boolean)>
<java.nio.file.attribute.DosFileAttributeView extends java.nio.file.attribute.BasicFileAttributeView: void setSystem(boolean)>
<java.nio.file.attribute.DosFileAttributeView extends java.nio.file.attribute.BasicFileAttributeView: java.nio.file.attribute.DosFileAttributes readAttributes()>
<java.nio.file.attribute.DosFileAttributeView extends java.nio.file.attribute.BasicFileAttributeView: void setHidden(boolean)>
<android.app.Notification.CarExtender: android.graphics.Bitmap getLargeIcon()>
<android.app.Notification.CarExtender: android.app.Notification.CarExtender setColor(@ColorIntint)>
<android.app.Notification.CarExtender: android.app.Notification.CarExtender setUnreadConversation(android.app.Notification.CarExtender.UnreadConversation)>
<android.app.Notification.CarExtender: android.app.Notification.Builder extend(android.app.Notification.Builder)>
<android.app.Notification.CarExtender: int getColor()>
<android.app.Notification.CarExtender: android.app.Notification.CarExtender setLargeIcon(android.graphics.Bitmap)>
<android.app.Notification.CarExtender: android.app.Notification.CarExtender.UnreadConversation getUnreadConversation()>
<android.app.Notification.CarExtender: void <init>()>
<android.app.Notification.CarExtender: void <init>(android.app.Notification)>
<android.media.audiofx.EnvironmentalReverb: int getReflectionsDelay()>
<android.media.audiofx.EnvironmentalReverb: void setProperties(android.media.audiofx.EnvironmentalReverb.Settings)>
<android.media.audiofx.EnvironmentalReverb: void setParameterListener(android.media.audiofx.EnvironmentalReverb.OnParameterChangeListener)>
<android.media.audiofx.EnvironmentalReverb: void setReverbDelay(int)>
<android.media.audiofx.EnvironmentalReverb: void <init>(int,int)>
<android.media.audiofx.EnvironmentalReverb: short getDecayHFRatio()>
<android.media.audiofx.EnvironmentalReverb: short getDiffusion()>
<android.media.audiofx.EnvironmentalReverb: void setRoomLevel(short)>
<android.media.audiofx.EnvironmentalReverb: short getRoomLevel()>
<android.media.audiofx.EnvironmentalReverb: void setDecayTime(int)>
<android.media.audiofx.EnvironmentalReverb: short getReverbLevel()>
<android.media.audiofx.EnvironmentalReverb: void setDiffusion(short)>
<android.media.audiofx.EnvironmentalReverb: void setReverbLevel(short)>
<android.media.audiofx.EnvironmentalReverb: void setDecayHFRatio(short)>
<android.media.audiofx.EnvironmentalReverb: void setRoomHFLevel(short)>
<android.media.audiofx.EnvironmentalReverb: void setReflectionsLevel(short)>
<android.media.audiofx.EnvironmentalReverb: int getReverbDelay()>
<android.media.audiofx.EnvironmentalReverb: void setDensity(short)>
<android.media.audiofx.EnvironmentalReverb: short getReflectionsLevel()>
<android.media.audiofx.EnvironmentalReverb: short getRoomHFLevel()>
<android.media.audiofx.EnvironmentalReverb: int getDecayTime()>
<android.media.audiofx.EnvironmentalReverb: short getDensity()>
<android.media.audiofx.EnvironmentalReverb: void setReflectionsDelay(int)>
<android.media.audiofx.EnvironmentalReverb: android.media.audiofx.EnvironmentalReverb.Settings getProperties()>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(T,V)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(T,V)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: V get(T)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: V getAndAccumulate(T,V,java.util.function.BinaryOperator)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: V getAndSet(T,V)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: V accumulateAndGet(T,V,java.util.function.BinaryOperator)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean weakCompareAndSet(T,V,V)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(T,V,V)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void <init>()>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: V updateAndGet(T,java.util.function.UnaryOperator)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: V getAndUpdate(T,java.util.function.UnaryOperator)>
<android.bluetooth.le.AdvertisingSetCallback: void onAdvertisingParametersUpdated(android.bluetooth.le.AdvertisingSet,int,int)>
<android.bluetooth.le.AdvertisingSetCallback: void onAdvertisingSetStopped(android.bluetooth.le.AdvertisingSet)>
<android.bluetooth.le.AdvertisingSetCallback: void onPeriodicAdvertisingDataSet(android.bluetooth.le.AdvertisingSet,int)>
<android.bluetooth.le.AdvertisingSetCallback: void onScanResponseDataSet(android.bluetooth.le.AdvertisingSet,int)>
<android.bluetooth.le.AdvertisingSetCallback: void onPeriodicAdvertisingEnabled(android.bluetooth.le.AdvertisingSet,boolean,int)>
<android.bluetooth.le.AdvertisingSetCallback: void onAdvertisingSetStarted(android.bluetooth.le.AdvertisingSet,int,int)>
<android.bluetooth.le.AdvertisingSetCallback: void onPeriodicAdvertisingParametersUpdated(android.bluetooth.le.AdvertisingSet,int)>
<android.bluetooth.le.AdvertisingSetCallback: void <init>()>
<android.bluetooth.le.AdvertisingSetCallback: void onAdvertisingDataSet(android.bluetooth.le.AdvertisingSet,int)>
<android.bluetooth.le.AdvertisingSetCallback: void onAdvertisingEnabled(android.bluetooth.le.AdvertisingSet,boolean,int)>
<android.webkit.WebStorage: void getUsageForOrigin(java.lang.String,android.webkit.ValueCallback)>
<android.webkit.WebStorage: void deleteAllData()>
<android.webkit.WebStorage: void getOrigins(android.webkit.ValueCallback)>
<android.webkit.WebStorage: void deleteOrigin(java.lang.String)>
<android.webkit.WebStorage: void getQuotaForOrigin(java.lang.String,android.webkit.ValueCallback)>
<android.webkit.WebStorage: void setQuotaForOrigin(java.lang.String,long)>
<android.webkit.WebStorage: void <init>()>
<android.webkit.WebStorage: android.webkit.WebStorage getInstance()>
<android.content.pm.ComponentInfo: void <init>()>
<android.content.pm.ComponentInfo: int getIconResource()>
<android.content.pm.ComponentInfo: void <init>(android.content.pm.ComponentInfo)>
<android.content.pm.ComponentInfo: int getLogoResource()>
<android.content.pm.ComponentInfo: boolean isEnabled()>
<android.content.pm.ComponentInfo: int getBannerResource()>
<android.content.pm.ComponentInfo: void <init>(android.os.Parcel)>
<android.view.GestureDetector.OnContextClickListener: boolean onContextClick(android.view.MotionEvent)>
<java.util.jar.Attributes: void <init>(java.util.jar.Attributes)>
<java.util.jar.Attributes: java.util.Set entrySet()>
<java.util.jar.Attributes: void <init>()>
<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>
<java.util.jar.Attributes: java.lang.Object clone()>
<java.util.jar.Attributes: int size()>
<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.jar.Attributes: java.lang.String putValue(java.lang.String,java.lang.String)>
<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
<java.util.jar.Attributes: java.util.Set keySet()>
<java.util.jar.Attributes: boolean containsValue(java.lang.Object)>
<java.util.jar.Attributes: void putAll(java.util.Map)>
<java.util.jar.Attributes: boolean isEmpty()>
<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes.Name)>
<java.util.jar.Attributes: void <init>(int)>
<java.util.jar.Attributes: void clear()>
<java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
<java.util.jar.Attributes: java.util.Collection values()>
<java.util.jar.Attributes: boolean containsKey(java.lang.Object)>
<java.util.Objects: T requireNonNull(T,java.util.function.Supplier)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
<java.util.Objects: boolean nonNull(java.lang.Object)>
<java.util.Objects: int hash(java.lang.Object...)>
<java.util.Objects: boolean isNull(java.lang.Object)>
<java.util.Objects: T requireNonNull(T)>
<java.util.Objects: T requireNonNull(T,java.lang.String)>
<java.util.Objects: int hashCode(java.lang.Object)>
<java.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>
<java.util.Objects: java.lang.String toString(java.lang.Object)>
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>
<java.util.Objects: int compare(T,T,java.util.Comparator)>
<android.net.wifi.WifiScanner.ScanSettings: void <init>()>
<android.icu.util.TimeUnit: android.icu.util.TimeUnit[] values()>
<android.app.Notification: android.graphics.drawable.Icon getSmallIcon()>
<android.app.Notification: android.content.LocusId getLocusId()>
<android.app.Notification: void writeToParcel(android.os.Parcel,int)>
<android.app.Notification: java.lang.String getShortcutId()>
<android.app.Notification: void <init>(int,CharSequence,long)>
<android.app.Notification: int getBadgeIconType()>
<android.app.Notification: java.lang.String getSortKey()>
<android.app.Notification: java.lang.String getChannelId()>
<android.app.Notification: void <init>(android.os.Parcel)>
<android.app.Notification: long getTimeoutAfter()>
<android.app.Notification: CharSequence getSettingsText()>
<android.app.Notification: void <init>()>
<android.app.Notification: android.app.Notification clone()>
<android.app.Notification: int describeContents()>
<android.app.Notification: android.app.Notification.BubbleMetadata getBubbleMetadata()>
<android.app.Notification: int getGroupAlertBehavior()>
<android.app.Notification: java.lang.String getGroup()>
<android.app.Notification: boolean getAllowSystemGeneratedContextualActions()>
<android.app.Notification: android.graphics.drawable.Icon getLargeIcon()>
<android.net.wifi.aware.WifiAwareSession: android.net.NetworkSpecifier createNetworkSpecifierPmk(int,byte[],byte[])>
<android.net.wifi.aware.WifiAwareSession: android.net.NetworkSpecifier createNetworkSpecifierPassphrase(int,byte[],java.lang.String)>
<android.net.wifi.aware.WifiAwareSession: void subscribe(android.net.wifi.aware.SubscribeConfig,android.net.wifi.aware.DiscoverySessionCallback,android.os.Handler)>
<android.net.wifi.aware.WifiAwareSession: void close()>
<android.net.wifi.aware.WifiAwareSession: android.net.NetworkSpecifier createNetworkSpecifierOpen(int,byte[])>
<android.net.wifi.aware.WifiAwareSession: void publish(android.net.wifi.aware.PublishConfig,android.net.wifi.aware.DiscoverySessionCallback,android.os.Handler)>
<android.widget.Filterable: android.widget.Filter getFilter()>
<android.widget.NumberPicker: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.NumberPicker: void setValue(int)>
<android.widget.NumberPicker: void setFormatter(android.widget.NumberPicker.Formatter)>
<android.widget.NumberPicker: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.NumberPicker: void <init>(android.content.Context)>
<android.widget.NumberPicker: void setSelectionDividerHeight(@Pxint)>
<android.widget.NumberPicker: void setOnValueChangedListener(android.widget.NumberPicker.OnValueChangeListener)>
<android.widget.NumberPicker: int getMinValue()>
<android.widget.NumberPicker: int getTextColor()>
<android.widget.NumberPicker: float getTextSize()>
<android.widget.NumberPicker: void setMaxValue(int)>
<android.widget.NumberPicker: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.NumberPicker: int getMaxValue()>
<android.widget.NumberPicker: int getSelectionDividerHeight()>
<android.widget.NumberPicker: void setTextSize(float)>
<android.widget.NumberPicker: CharSequence getDisplayedValueForCurrentSelection()>
<android.widget.NumberPicker: void setMinValue(int)>
<android.widget.NumberPicker: boolean getWrapSelectorWheel()>
<android.widget.NumberPicker: void setTextColor(@ColorIntint)>
<android.widget.NumberPicker: void setDisplayedValues(java.lang.String[])>
<android.widget.NumberPicker: java.lang.String[] getDisplayedValues()>
<android.widget.NumberPicker: void setOnLongPressUpdateInterval(long)>
<android.widget.NumberPicker: void setOnScrollListener(android.widget.NumberPicker.OnScrollListener)>
<android.widget.NumberPicker: void setWrapSelectorWheel(boolean)>
<android.widget.NumberPicker: int getValue()>
<javax.crypto.interfaces.DHPublicKey extends javax.crypto.interfaces.DHKey java.security.PublicKey: java.math.BigInteger getY()>
<android.content.pm.Signature: byte[] toByteArray()>
<android.content.pm.Signature: char[] toChars(char[],int[])>
<android.content.pm.Signature: java.lang.String toCharsString()>
<android.content.pm.Signature: void <init>(String)>
<android.content.pm.Signature: void <init>(byte[])>
<android.content.pm.Signature: int describeContents()>
<android.content.pm.Signature: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.Signature: char[] toChars()>
<android.transition.Transition.EpicenterCallback: android.graphics.Rect onGetEpicenter(android.transition.Transition)>
<android.transition.Transition.EpicenterCallback: void <init>()>
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.os.Bundle,java.util.Locale,android.view.textservice.SpellCheckerSession.SpellCheckerSessionListener,boolean)>
<android.animation.RectEvaluator: void <init>(android.graphics.Rect)>
<android.animation.RectEvaluator: void <init>()>
<android.animation.RectEvaluator: android.graphics.Rect evaluate(float,android.graphics.Rect,android.graphics.Rect)>
<java.security.cert.CertificateNotYetValidException: void <init>(String)>
<java.security.cert.CertificateNotYetValidException: void <init>()>
<java.text.MessageFormat: void setFormats(java.text.Format[])>
<java.text.MessageFormat: java.lang.StringBuffer format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.MessageFormat: java.lang.Object[] parse(java.lang.String)>
<java.text.MessageFormat: void <init>(String,java.util.Locale)>
<java.text.MessageFormat: java.text.Format[] getFormatsByArgumentIndex()>
<java.text.MessageFormat: void setLocale(java.util.Locale)>
<java.text.MessageFormat: java.util.Locale getLocale()>
<java.text.MessageFormat: void setFormatsByArgumentIndex(java.text.Format[])>
<java.text.MessageFormat: java.lang.String toPattern()>
<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object...)>
<java.text.MessageFormat: void <init>(String)>
<java.text.MessageFormat: java.text.Format[] getFormats()>
<java.text.MessageFormat: java.lang.Object[] parse(java.lang.String,java.text.ParsePosition)>
<java.text.MessageFormat: void setFormatByArgumentIndex(int,java.text.Format)>
<java.text.MessageFormat: void setFormat(int,java.text.Format)>
<java.text.MessageFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<java.text.MessageFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>
<java.text.MessageFormat: void applyPattern(java.lang.String)>
<org.xml.sax.helpers.ParserAdapter: void setProperty(java.lang.String,java.lang.Object)>
<org.xml.sax.helpers.ParserAdapter: void setFeature(java.lang.String,boolean)>
<org.xml.sax.helpers.ParserAdapter: void endDocument()>
<org.xml.sax.helpers.ParserAdapter: void setErrorHandler(org.xml.sax.ErrorHandler)>
<org.xml.sax.helpers.ParserAdapter: boolean getFeature(java.lang.String)>
<org.xml.sax.helpers.ParserAdapter: void <init>()>
<org.xml.sax.helpers.ParserAdapter: java.lang.Object getProperty(java.lang.String)>
<org.xml.sax.helpers.ParserAdapter: void processingInstruction(java.lang.String,java.lang.String)>
<org.xml.sax.helpers.ParserAdapter: void startElement(java.lang.String,org.xml.sax.AttributeList)>
<org.xml.sax.helpers.ParserAdapter: void setContentHandler(org.xml.sax.ContentHandler)>
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.EntityResolver getEntityResolver()>
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.DTDHandler getDTDHandler()>
<org.xml.sax.helpers.ParserAdapter: void setDocumentLocator(org.xml.sax.Locator)>
<org.xml.sax.helpers.ParserAdapter: void parse(java.lang.String)>
<org.xml.sax.helpers.ParserAdapter: void setDTDHandler(org.xml.sax.DTDHandler)>
<org.xml.sax.helpers.ParserAdapter: void <init>(org.xml.sax.Parser)>
<org.xml.sax.helpers.ParserAdapter: void ignorableWhitespace(char[],int,int)>
<org.xml.sax.helpers.ParserAdapter: void parse(org.xml.sax.InputSource)>
<org.xml.sax.helpers.ParserAdapter: void startDocument()>
<org.xml.sax.helpers.ParserAdapter: void characters(char[],int,int)>
<org.xml.sax.helpers.ParserAdapter: void endElement(java.lang.String)>
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.ContentHandler getContentHandler()>
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.ErrorHandler getErrorHandler()>
<org.xml.sax.helpers.ParserAdapter: void setEntityResolver(org.xml.sax.EntityResolver)>
<android.net.metrics.DhcpErrorEvent: int errorCodeWithOption(int,int)>
<android.net.metrics.DhcpErrorEvent: void <init>(int)>
<android.telephony.ims.ImsCallProfile: int presentationToOir(int)>
<android.telephony.ims.ImsCallProfile: int getVideoStateFromImsCallProfile(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.ImsCallProfile: void setCallExtraBoolean(java.lang.String,boolean)>
<android.telephony.ims.ImsCallProfile: void updateCallType(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.ImsCallProfile: void setEmergencyCallTesting(boolean)>
<android.telephony.ims.ImsCallProfile: boolean hasKnownUserIntentEmergency()>
<android.telephony.ims.ImsCallProfile: boolean getCallExtraBoolean(java.lang.String,boolean)>
<android.telephony.ims.ImsCallProfile: boolean isVideoCall()>
<android.telephony.ims.ImsCallProfile: void setCallRestrictCause(int)>
<android.telephony.ims.ImsCallProfile: int getServiceType()>
<android.telephony.ims.ImsCallProfile: void setCallExtra(java.lang.String,java.lang.String)>
<android.telephony.ims.ImsCallProfile: int getEmergencyServiceCategories()>
<android.telephony.ims.ImsCallProfile: void <init>(int,int)>
<android.telephony.ims.ImsCallProfile: int getCallTypeFromVideoState(int)>
<android.telephony.ims.ImsCallProfile: boolean isVideoPaused()>
<android.telephony.ims.ImsCallProfile: boolean isEmergencyCallTesting()>
<android.telephony.ims.ImsCallProfile: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ims.ImsCallProfile: java.lang.String getCallExtra(java.lang.String)>
<android.telephony.ims.ImsCallProfile: void setEmergencyCallRouting(int)>
<android.telephony.ims.ImsCallProfile: void setEmergencyUrns(java.util.List)>
<android.telephony.ims.ImsCallProfile: int getCallExtraInt(java.lang.String)>
<android.telephony.ims.ImsCallProfile: void setCallExtraInt(java.lang.String,int)>
<android.telephony.ims.ImsCallProfile: int describeContents()>
<android.telephony.ims.ImsCallProfile: java.lang.String getCallExtra(java.lang.String,java.lang.String)>
<android.telephony.ims.ImsCallProfile: int getCallExtraInt(java.lang.String,int)>
<android.telephony.ims.ImsCallProfile: int getCallType()>
<android.telephony.ims.ImsCallProfile: void <init>()>
<android.telephony.ims.ImsCallProfile: boolean getCallExtraBoolean(java.lang.String)>
<android.telephony.ims.ImsCallProfile: void updateCallExtras(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.ImsCallProfile: android.telephony.ims.ImsStreamMediaProfile getMediaProfile()>
<android.telephony.ims.ImsCallProfile: void updateMediaProfile(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.ImsCallProfile: android.os.Bundle getCallExtras()>
<android.telephony.ims.ImsCallProfile: void setHasKnownUserIntentEmergency(boolean)>
<android.telephony.ims.ImsCallProfile: int getVideoStateFromCallType(int)>
<android.telephony.ims.ImsCallProfile: int getRestrictCause()>
<android.telephony.ims.ImsCallProfile: int getEmergencyCallRouting()>
<android.telephony.ims.ImsCallProfile: java.util.List getEmergencyUrns()>
<android.telephony.ims.ImsCallProfile: void <init>(int,int,android.os.Bundle,android.telephony.ims.ImsStreamMediaProfile)>
<android.telephony.ims.ImsCallProfile: void setEmergencyServiceCategories(int)>
<android.content.pm.InstantAppResolveInfo: long getLongVersionCode()>
<android.content.pm.InstantAppResolveInfo: byte[] getDigestBytes()>
<android.content.pm.InstantAppResolveInfo: void <init>(android.content.pm.InstantAppResolveInfo.InstantAppDigest,String,java.util.List,int)>
<android.content.pm.InstantAppResolveInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.InstantAppResolveInfo: void <init>(android.os.Bundle)>
<android.content.pm.InstantAppResolveInfo: int describeContents()>
<android.content.pm.InstantAppResolveInfo: android.os.Bundle getExtras()>
<android.content.pm.InstantAppResolveInfo: void <init>(android.content.pm.InstantAppResolveInfo.InstantAppDigest,String,java.util.List,long,android.os.Bundle)>
<android.content.pm.InstantAppResolveInfo: java.lang.String getPackageName()>
<android.content.pm.InstantAppResolveInfo: int getDigestPrefix()>
<android.content.pm.InstantAppResolveInfo: int getVersionCode()>
<android.content.pm.InstantAppResolveInfo: void <init>(String,String,java.util.List)>
<android.content.pm.InstantAppResolveInfo: boolean shouldLetInstallerDecide()>
<android.content.pm.InstantAppResolveInfo: java.util.List getIntentFilters()>
<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String getAlgName()>
<javax.crypto.EncryptedPrivateKeyInfo: java.security.AlgorithmParameters getAlgParameters()>
<javax.crypto.EncryptedPrivateKeyInfo: void <init>(String,byte[])>
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key,java.lang.String)>
<javax.crypto.EncryptedPrivateKeyInfo: byte[] getEncoded()>
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key,java.security.Provider)>
<javax.crypto.EncryptedPrivateKeyInfo: byte[] getEncryptedData()>
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(javax.crypto.Cipher)>
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key)>
<javax.crypto.EncryptedPrivateKeyInfo: void <init>(java.security.AlgorithmParameters,byte[])>
<javax.crypto.EncryptedPrivateKeyInfo: void <init>(byte[])>
<android.app.job.JobServiceEngine: android.os.IBinder getBinder()>
<android.app.job.JobServiceEngine: void jobFinished(android.app.job.JobParameters,boolean)>
<android.app.job.JobServiceEngine: void <init>(android.app.Service)>
<android.app.job.JobServiceEngine: boolean onStartJob(android.app.job.JobParameters)>
<android.app.job.JobServiceEngine: boolean onStopJob(android.app.job.JobParameters)>
<android.media.browse.MediaBrowser.MediaItem: void <init>(android.media.MediaDescription,int)>
<android.media.browse.MediaBrowser.MediaItem: java.lang.String getMediaId()>
<android.media.browse.MediaBrowser.MediaItem: int describeContents()>
<android.media.browse.MediaBrowser.MediaItem: android.media.MediaDescription getDescription()>
<android.media.browse.MediaBrowser.MediaItem: boolean isPlayable()>
<android.media.browse.MediaBrowser.MediaItem: boolean isBrowsable()>
<android.media.browse.MediaBrowser.MediaItem: void writeToParcel(android.os.Parcel,int)>
<android.media.browse.MediaBrowser.MediaItem: int getFlags()>
<android.location.GpsNavigationMessageEvent: void <init>(android.location.GpsNavigationMessage)>
<android.location.GpsNavigationMessageEvent: void writeToParcel(android.os.Parcel,int)>
<android.location.GpsNavigationMessageEvent: android.location.GpsNavigationMessage getNavigationMessage()>
<android.location.GpsNavigationMessageEvent: int describeContents()>
<android.webkit.WebViewDelegate: java.lang.String getDataDirectorySuffix()>
<android.webkit.WebViewDelegate: void drawWebViewFunctor(android.graphics.Canvas,int)>
<android.webkit.WebViewDelegate: void callDrawGlFunction(android.graphics.Canvas,long)>
<android.webkit.WebViewDelegate: android.app.Application getApplication()>
<android.webkit.WebViewDelegate: boolean canInvokeDrawGlFunctor(android.view.View)>
<android.webkit.WebViewDelegate: void setOnTraceEnabledChangeListener(android.webkit.WebViewDelegate.OnTraceEnabledChangeListener)>
<android.webkit.WebViewDelegate: int getPackageId(android.content.res.Resources,java.lang.String)>
<android.webkit.WebViewDelegate: void addWebViewAssetPath(android.content.Context)>
<android.webkit.WebViewDelegate: java.lang.String getErrorString(android.content.Context,int)>
<android.webkit.WebViewDelegate: void invokeDrawGlFunctor(android.view.View,long,boolean)>
<android.webkit.WebViewDelegate: void callDrawGlFunction(android.graphics.Canvas,long,Runnable)>
<android.webkit.WebViewDelegate: void detachDrawGlFunctor(android.view.View,long)>
<android.webkit.WebViewDelegate: boolean isMultiProcessEnabled()>
<android.webkit.WebViewDelegate: boolean isTraceTagEnabled()>
<android.media.tv.TvInputService.Session: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.media.tv.TvInputService.Session: void onTimeShiftSetPlaybackParams(android.media.PlaybackParams)>
<android.media.tv.TvInputService.Session: boolean onSetSurface(android.view.Surface)>
<android.media.tv.TvInputService.Session: android.view.View onCreateOverlayView()>
<android.media.tv.TvInputService.Session: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.media.tv.TvInputService.Session: void onTimeShiftPlay(android.net.Uri)>
<android.media.tv.TvInputService.Session: void notifyContentBlocked(android.media.tv.TvContentRating)>
<android.media.tv.TvInputService.Session: void notifyContentAllowed()>
<android.media.tv.TvInputService.Session: void notifyTrackSelected(int,java.lang.String)>
<android.media.tv.TvInputService.Session: void notifySessionEvent(java.lang.String,android.os.Bundle)>
<android.media.tv.TvInputService.Session: long onTimeShiftGetStartPosition()>
<android.media.tv.TvInputService.Session: boolean onKeyDown(int,android.view.KeyEvent)>
<android.media.tv.TvInputService.Session: boolean onSelectTrack(int,java.lang.String)>
<android.media.tv.TvInputService.Session: void setOverlayViewEnabled(boolean)>
<android.media.tv.TvInputService.Session: void onSetCaptionEnabled(boolean)>
<android.media.tv.TvInputService.Session: void onAppPrivateCommand(java.lang.String,android.os.Bundle)>
<android.media.tv.TvInputService.Session: void onRelease()>
<android.media.tv.TvInputService.Session: void onOverlayViewSizeChanged(int,int)>
<android.media.tv.TvInputService.Session: void onTimeShiftSeekTo(long)>
<android.media.tv.TvInputService.Session: void onTimeShiftResume()>
<android.media.tv.TvInputService.Session: boolean onKeyUp(int,android.view.KeyEvent)>
<android.media.tv.TvInputService.Session: void onSurfaceChanged(int,int,int)>
<android.media.tv.TvInputService.Session: void onTimeShiftPause()>
<android.media.tv.TvInputService.Session: void notifyTracksChanged(java.util.List)>
<android.media.tv.TvInputService.Session: void notifyVideoAvailable()>
<android.media.tv.TvInputService.Session: long onTimeShiftGetCurrentPosition()>
<android.media.tv.TvInputService.Session: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.media.tv.TvInputService.Session: boolean onTune(android.net.Uri)>
<android.media.tv.TvInputService.Session: void layoutSurface(int,int,int,int)>
<android.media.tv.TvInputService.Session: void notifyTimeShiftStatusChanged(int)>
<android.media.tv.TvInputService.Session: void notifyVideoUnavailable(int)>
<android.media.tv.TvInputService.Session: void onSetMain(boolean)>
<android.media.tv.TvInputService.Session: void <init>(android.content.Context)>
<android.media.tv.TvInputService.Session: void onSetStreamVolume(float)>
<android.media.tv.TvInputService.Session: boolean onTouchEvent(android.view.MotionEvent)>
<android.media.tv.TvInputService.Session: void onUnblockContent(android.media.tv.TvContentRating)>
<android.media.tv.TvInputService.Session: boolean onTrackballEvent(android.view.MotionEvent)>
<android.media.tv.TvInputService.Session: boolean onTune(android.net.Uri,android.os.Bundle)>
<android.media.tv.TvInputService.Session: void notifyChannelRetuned(android.net.Uri)>
<android.net.wifi.WifiManager.LocalOnlyHotspotCallback: void onStarted(android.net.wifi.WifiManager.LocalOnlyHotspotReservation)>
<android.net.wifi.WifiManager.LocalOnlyHotspotCallback: void onStopped()>
<android.net.wifi.WifiManager.LocalOnlyHotspotCallback: void <init>()>
<android.net.wifi.WifiManager.LocalOnlyHotspotCallback: void onFailed(int)>
<android.renderscript.Int2: void <init>()>
<android.renderscript.Int2: void <init>(int,int)>
<java.util.function.LongFunction: R apply(long)>
<android.renderscript.Int4: void <init>(int,int,int,int)>
<android.renderscript.Int4: void <init>()>
<android.renderscript.Int3: void <init>(int,int,int)>
<android.renderscript.Int3: void <init>()>
<java.net.ContentHandler: void <init>()>
<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection,java.lang.Class[])>
<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection)>
<android.view.SoundEffectConstants: int getContantForFocusDirection(int)>
<java.util.zip.CheckedOutputStream: void <init>(java.io.OutputStream,java.util.zip.Checksum)>
<java.util.zip.CheckedOutputStream: java.util.zip.Checksum getChecksum()>
<android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener: void onConnectionInfoAvailable(android.net.wifi.p2p.WifiP2pInfo)>
<android.preference.Preference: boolean hasKey()>
<android.preference.Preference: android.os.Bundle peekExtras()>
<android.preference.Preference: void onRestoreInstanceState(android.os.Parcelable)>
<android.preference.Preference: void setIconSpaceReserved(boolean)>
<android.preference.Preference: android.view.View onCreateView(android.view.ViewGroup)>
<android.preference.Preference: void setShouldDisableView(boolean)>
<android.preference.Preference: float getPersistedFloat(float)>
<android.preference.Preference: void onDependencyChanged(android.preference.Preference,boolean)>
<android.preference.Preference: android.preference.PreferenceGroup getParent()>
<android.preference.Preference: void notifyDependencyChange(boolean)>
<android.preference.Preference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.Preference: void <init>(android.content.Context)>
<android.preference.Preference: android.preference.Preference findPreferenceInHierarchy(java.lang.String)>
<android.preference.Preference: void setSummary(CharSequence)>
<android.preference.Preference: void setSummary(@StringResint)>
<android.preference.Preference: boolean callChangeListener(java.lang.Object)>
<android.preference.Preference: long getPersistedLong(long)>
<android.preference.Preference: boolean isSelectable()>
<android.preference.Preference: void setTitle(@StringResint)>
<android.preference.Preference: void setDefaultValue(java.lang.Object)>
<android.preference.Preference: void setIcon(@DrawableResint)>
<android.preference.Preference: android.content.Intent getIntent()>
<android.preference.Preference: boolean shouldDisableDependents()>
<android.preference.Preference: void setIcon(android.graphics.drawable.Drawable)>
<android.preference.Preference: boolean isRecycleEnabled()>
<android.preference.Preference: void setOrder(int)>
<android.preference.Preference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.Preference: void onSetInitialValue(boolean,java.lang.Object)>
<android.preference.Preference: boolean persistFloat(float)>
<android.preference.Preference: void setDependency(java.lang.String)>
<android.preference.Preference: void saveHierarchyState(android.os.Bundle)>
<android.preference.Preference: android.preference.Preference.OnPreferenceChangeListener getOnPreferenceChangeListener()>
<android.preference.Preference: void setRecycleEnabled(boolean)>
<android.preference.Preference: java.util.Set getPersistedStringSet(java.util.Set)>
<android.preference.Preference: boolean isPersistent()>
<android.preference.Preference: void setEnabled(boolean)>
<android.preference.Preference: void onPrepareForRemoval()>
<android.preference.Preference: boolean persistString(java.lang.String)>
<android.preference.Preference: void setSelectable(boolean)>
<android.preference.Preference: java.lang.String getKey()>
<android.preference.Preference: void onBindView(android.view.View)>
<android.preference.Preference: boolean persistInt(int)>
<android.preference.Preference: android.content.Context getContext()>
<android.preference.Preference: boolean getShouldDisableView()>
<android.preference.Preference: void onParentChanged(android.preference.Preference,boolean)>
<android.preference.Preference: android.graphics.drawable.Drawable getIcon()>
<android.preference.Preference: boolean persistBoolean(boolean)>
<android.preference.Preference: void setSingleLineTitle(boolean)>
<android.preference.Preference: void setTitle(CharSequence)>
<android.preference.Preference: void onAttachedToHierarchy(android.preference.PreferenceManager)>
<android.preference.Preference: android.preference.Preference.OnPreferenceClickListener getOnPreferenceClickListener()>
<android.preference.Preference: boolean isSingleLineTitle()>
<android.preference.Preference: void notifyHierarchyChanged()>
<android.preference.Preference: void setKey(java.lang.String)>
<android.preference.Preference: android.preference.PreferenceManager getPreferenceManager()>
<android.preference.Preference: int getTitleRes()>
<android.preference.Preference: java.lang.Object onGetDefaultValue(android.content.res.TypedArray,int)>
<android.preference.Preference: boolean isIconSpaceReserved()>
<android.preference.Preference: android.content.SharedPreferences getSharedPreferences()>
<android.preference.Preference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.Preference: void setPersistent(boolean)>
<android.preference.Preference: android.os.Parcelable onSaveInstanceState()>
<android.preference.Preference: void setIntent(android.content.Intent)>
<android.preference.Preference: java.lang.String getPersistedString(java.lang.String)>
<android.preference.Preference: void setOnPreferenceChangeListener(android.preference.Preference.OnPreferenceChangeListener)>
<android.preference.Preference: android.view.View getView(android.view.View,android.view.ViewGroup)>
<android.preference.Preference: boolean isEnabled()>
<android.preference.Preference: void setOnPreferenceClickListener(android.preference.Preference.OnPreferenceClickListener)>
<android.preference.Preference: android.preference.PreferenceDataStore getPreferenceDataStore()>
<android.preference.Preference: CharSequence getTitle()>
<android.preference.Preference: android.content.SharedPreferences.Editor getEditor()>
<android.preference.Preference: CharSequence getSummary()>
<android.preference.Preference: int getPersistedInt(int)>
<android.preference.Preference: void onClick()>
<android.preference.Preference: void setFragment(java.lang.String)>
<android.preference.Preference: java.lang.String getDependency()>
<android.preference.Preference: void onAttachedToActivity()>
<android.preference.Preference: boolean persistLong(long)>
<android.preference.Preference: boolean shouldCommit()>
<android.preference.Preference: int getWidgetLayoutResource()>
<android.preference.Preference: int getLayoutResource()>
<android.preference.Preference: boolean getPersistedBoolean(boolean)>
<android.preference.Preference: int compareTo(android.preference.Preference)>
<android.preference.Preference: void restoreHierarchyState(android.os.Bundle)>
<android.preference.Preference: boolean shouldPersist()>
<android.preference.Preference: void setPreferenceDataStore(android.preference.PreferenceDataStore)>
<android.preference.Preference: android.os.Bundle getExtras()>
<android.preference.Preference: java.lang.String getFragment()>
<android.preference.Preference: void setWidgetLayoutResource(@LayoutResint)>
<android.preference.Preference: boolean persistStringSet(java.util.Set)>
<android.preference.Preference: void notifyChanged()>
<android.preference.Preference: void setLayoutResource(@LayoutResint)>
<android.preference.Preference: int getOrder()>
<java.util.StringJoiner: void <init>(CharSequence,CharSequence,CharSequence)>
<java.util.StringJoiner: int length()>
<java.util.StringJoiner: java.util.StringJoiner merge(java.util.StringJoiner)>
<java.util.StringJoiner: void <init>(CharSequence)>
<java.util.StringJoiner: java.util.StringJoiner setEmptyValue(CharSequence)>
<java.util.StringJoiner: java.util.StringJoiner add(CharSequence)>
<android.icu.util.Currency: java.lang.String getSymbol(java.util.Locale)>
<android.icu.util.Currency: boolean isAvailable(java.lang.String,java.util.Date,java.util.Date)>
<android.icu.util.Currency: double getRoundingIncrement(android.icu.util.Currency.CurrencyUsage)>
<android.icu.util.Currency: android.icu.util.ULocale[] getAvailableULocales()>
<android.icu.util.Currency: java.lang.String getDisplayName(java.util.Locale)>
<android.icu.util.Currency: java.lang.String getSymbol()>
<android.icu.util.Currency: int getDefaultFractionDigits()>
<android.icu.util.Currency: java.lang.String getSymbol(android.icu.util.ULocale)>
<android.icu.util.Currency: void <init>(String)>
<android.icu.util.Currency: int getNumericCode()>
<android.icu.util.Currency: java.lang.String getCurrencyCode()>
<android.icu.util.Currency: android.icu.util.Currency getInstance(java.util.Locale)>
<android.icu.util.Currency: java.lang.String getName(android.icu.util.ULocale,int,boolean[])>
<android.icu.util.Currency: java.util.Locale[] getAvailableLocales()>
<android.icu.util.Currency: java.util.Currency toJavaCurrency()>
<android.icu.util.Currency: android.icu.util.Currency getInstance(java.lang.String)>
<android.icu.util.Currency: double getRoundingIncrement()>
<android.icu.util.Currency: java.lang.String[] getAvailableCurrencyCodes(java.util.Locale,java.util.Date)>
<android.icu.util.Currency: java.lang.String getName(java.util.Locale,int,boolean[])>
<android.icu.util.Currency: java.lang.String[] getKeywordValuesForLocale(java.lang.String,android.icu.util.ULocale,boolean)>
<android.icu.util.Currency: java.util.Set getAvailableCurrencies()>
<android.icu.util.Currency: java.lang.String[] getAvailableCurrencyCodes(android.icu.util.ULocale,java.util.Date)>
<android.icu.util.Currency: int getDefaultFractionDigits(android.icu.util.Currency.CurrencyUsage)>
<android.icu.util.Currency: android.icu.util.Currency getInstance(android.icu.util.ULocale)>
<android.icu.util.Currency: java.lang.String getName(android.icu.util.ULocale,int,java.lang.String,boolean[])>
<android.icu.util.Currency: android.icu.util.Currency fromJavaCurrency(java.util.Currency)>
<android.icu.util.Currency: java.lang.String getName(java.util.Locale,int,java.lang.String,boolean[])>
<android.icu.util.Currency: java.lang.String getDisplayName()>
<android.hardware.location.ContextHubMessage: void setMsgData(byte[])>
<android.hardware.location.ContextHubMessage: int getVersion()>
<android.hardware.location.ContextHubMessage: void writeToParcel(android.os.Parcel,int)>
<android.hardware.location.ContextHubMessage: void setMsgType(int)>
<android.hardware.location.ContextHubMessage: int getMsgType()>
<android.hardware.location.ContextHubMessage: void setVersion(int)>
<android.hardware.location.ContextHubMessage: void <init>(int,int,byte[])>
<android.hardware.location.ContextHubMessage: int describeContents()>
<android.hardware.location.ContextHubMessage: byte[] getData()>
<android.animation.PointFEvaluator: android.graphics.PointF evaluate(float,android.graphics.PointF,android.graphics.PointF)>
<android.animation.PointFEvaluator: void <init>()>
<android.animation.PointFEvaluator: void <init>(android.graphics.PointF)>
<android.telecom.CallScreeningService: android.os.IBinder onBind(android.content.Intent)>
<android.telecom.CallScreeningService: void respondToCall(android.telecom.Call.Details,android.telecom.CallScreeningService.CallResponse)>
<android.telecom.CallScreeningService: void <init>()>
<android.telecom.CallScreeningService: void onScreenCall(android.telecom.Call.Details)>
<android.os.BugreportManager.BugreportCallback: void <init>()>
<android.os.BugreportManager.BugreportCallback: void onProgress(float)>
<android.os.BugreportManager.BugreportCallback: void onFinished()>
<android.os.BugreportManager.BugreportCallback: void onError(int)>
<android.renderscript.ScriptGroup.Builder: android.renderscript.ScriptGroup.Builder addConnection(android.renderscript.Type,android.renderscript.Script.KernelID,android.renderscript.Script.KernelID)>
<android.renderscript.ScriptGroup.Builder: android.renderscript.ScriptGroup create()>
<android.renderscript.ScriptGroup.Builder: android.renderscript.ScriptGroup.Builder addKernel(android.renderscript.Script.KernelID)>
<android.renderscript.ScriptGroup.Builder: void <init>(android.renderscript.RenderScript)>
<android.renderscript.ScriptGroup.Builder: android.renderscript.ScriptGroup.Builder addConnection(android.renderscript.Type,android.renderscript.Script.KernelID,android.renderscript.Script.FieldID)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.Drawable: android.graphics.Insets getOpticalInsets()>
<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>
<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>
<android.graphics.drawable.Drawable: boolean onStateChange(int[])>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)>
<android.graphics.drawable.Drawable: void getHotspotBounds(android.graphics.Rect)>
<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources.Theme)>
<android.graphics.drawable.Drawable: int getMinimumWidth()>
<android.graphics.drawable.Drawable: void invalidateSelf()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)>
<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>
<android.graphics.drawable.Drawable: void getOutline(android.graphics.Outline)>
<android.graphics.drawable.Drawable: int getAlpha()>
<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>
<android.graphics.drawable.Drawable: int getMinimumHeight()>
<android.graphics.drawable.Drawable: boolean isStateful()>
<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable.Callback)>
<android.graphics.drawable.Drawable: boolean isProjected()>
<android.graphics.drawable.Drawable: int getChangingConfigurations()>
<android.graphics.drawable.Drawable: void jumpToCurrentState()>
<android.graphics.drawable.Drawable: void setAlpha(int)>
<android.graphics.drawable.Drawable: void setHotspot(float,float)>
<android.graphics.drawable.Drawable: int getIntrinsicHeight()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromPath(java.lang.String)>
<android.graphics.drawable.Drawable: android.graphics.ColorFilter getColorFilter()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory.Options)>
<android.graphics.drawable.Drawable: void unscheduleSelf(Runnable)>
<android.graphics.drawable.Drawable: boolean isAutoMirrored()>
<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>
<android.graphics.drawable.Drawable: void applyTheme(android.content.res.Resources.Theme)>
<android.graphics.drawable.Drawable: int[] getState()>
<android.graphics.drawable.Drawable: boolean onLayoutDirectionChanged(int)>
<android.graphics.drawable.Drawable: void setTintMode(android.graphics.PorterDuff.Mode)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>
<android.graphics.drawable.Drawable: void copyBounds(android.graphics.Rect)>
<android.graphics.drawable.Drawable: android.graphics.Rect getDirtyBounds()>
<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)>
<android.graphics.drawable.Drawable: boolean canApplyTheme()>
<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>
<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
<android.graphics.drawable.Drawable: int getLevel()>
<android.graphics.drawable.Drawable: boolean hasFocusStateSpecified()>
<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.Drawable: void onBoundsChange(android.graphics.Rect)>
<android.graphics.drawable.Drawable: void setTintBlendMode(android.graphics.BlendMode)>
<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<android.graphics.drawable.Drawable: android.graphics.Rect copyBounds()>
<android.graphics.drawable.Drawable: boolean setLevel(int)>
<android.graphics.drawable.Drawable: void <init>()>
<android.graphics.drawable.Drawable: int getIntrinsicWidth()>
<android.graphics.drawable.Drawable: boolean isVisible()>
<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>
<android.graphics.drawable.Drawable: void setAutoMirrored(boolean)>
<android.graphics.drawable.Drawable: boolean setState(int[])>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>
<android.graphics.drawable.Drawable: int getLayoutDirection()>
<android.graphics.drawable.Drawable: int resolveOpacity(int,int)>
<android.graphics.drawable.Drawable: boolean isFilterBitmap()>
<android.graphics.drawable.Drawable: void setDither(boolean)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>
<android.graphics.drawable.Drawable: boolean onLevelChange(int)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)>
<android.graphics.drawable.Drawable: void setColorFilter(@ColorIntint,android.graphics.PorterDuff.Mode)>
<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>
<android.graphics.drawable.Drawable: int getOpacity()>
<android.graphics.drawable.Drawable: void scheduleSelf(Runnable,long)>
<android.graphics.drawable.Drawable: void clearColorFilter()>
<android.graphics.drawable.Drawable: void setHotspotBounds(int,int,int,int)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable.Callback getCallback()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable.ConstantState getConstantState()>
<android.graphics.drawable.Drawable: void setTint(@ColorIntint)>
<java.nio.channels.ShutdownChannelGroupException: void <init>()>
<android.telephony.CellSignalStrengthNr: int getLevel()>
<android.telephony.CellSignalStrengthNr: int getSsSinr()>
<android.telephony.CellSignalStrengthNr: int getCsiSinr()>
<android.telephony.CellSignalStrengthNr: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellSignalStrengthNr: int getCsiRsrp()>
<android.telephony.CellSignalStrengthNr: int getSsRsrq()>
<android.telephony.CellSignalStrengthNr: int getAsuLevel()>
<android.telephony.CellSignalStrengthNr: int getCsiRsrq()>
<android.telephony.CellSignalStrengthNr: int getSsRsrp()>
<android.telephony.CellSignalStrengthNr: int describeContents()>
<android.telephony.CellSignalStrengthNr: int getDbm()>
<java.util.function.BooleanSupplier: boolean getAsBoolean()>
<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,java.math.MathContext)>
<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>
<java.math.BigDecimal: float floatValue()>
<java.math.BigDecimal: void <init>(int)>
<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>
<java.math.BigDecimal: java.math.BigDecimal abs(java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>
<java.math.BigDecimal: int intValue()>
<java.math.BigDecimal: java.math.BigDecimal max(java.math.BigDecimal)>
<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal valueOf(long)>
<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int,java.math.RoundingMode)>
<java.math.BigDecimal: void <init>(java.math.BigInteger,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal pow(int,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal plus(java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>
<java.math.BigDecimal: java.math.BigDecimal setScale(int)>
<java.math.BigDecimal: java.math.BigDecimal valueOf(double)>
<java.math.BigDecimal: void <init>(char[],java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal abs()>
<java.math.BigDecimal: void <init>(double)>
<java.math.BigDecimal: byte byteValueExact()>
<java.math.BigDecimal: java.math.BigDecimal remainder(java.math.BigDecimal)>
<java.math.BigDecimal: java.math.BigDecimal remainder(java.math.BigDecimal,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal pow(int)>
<java.math.BigDecimal: java.math.BigDecimal round(java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal negate(java.math.MathContext)>
<java.math.BigDecimal: java.lang.String toEngineeringString()>
<java.math.BigDecimal: double doubleValue()>
<java.math.BigDecimal: java.math.BigDecimal movePointRight(int)>
<java.math.BigDecimal: java.math.BigDecimal[] divideAndRemainder(java.math.BigDecimal,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal min(java.math.BigDecimal)>
<java.math.BigDecimal: java.math.BigDecimal movePointLeft(int)>
<java.math.BigDecimal: short shortValueExact()>
<java.math.BigDecimal: void <init>(char[],int,int)>
<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>
<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int)>
<java.math.BigDecimal: int intValueExact()>
<java.math.BigDecimal: java.math.BigDecimal stripTrailingZeros()>
<java.math.BigDecimal: java.math.BigInteger toBigInteger()>
<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>
<java.math.BigDecimal: java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal,java.math.MathContext)>
<java.math.BigDecimal: void <init>(java.math.BigInteger,int,java.math.MathContext)>
<java.math.BigDecimal: long longValueExact()>
<java.math.BigDecimal: void <init>(String,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal)>
<java.math.BigDecimal: void <init>(int,java.math.MathContext)>
<java.math.BigDecimal: void <init>(char[])>
<java.math.BigDecimal: java.math.BigDecimal plus()>
<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal)>
<java.math.BigDecimal: java.math.BigDecimal ulp()>
<java.math.BigDecimal: java.math.BigInteger toBigIntegerExact()>
<java.math.BigDecimal: int scale()>
<java.math.BigDecimal: java.math.BigInteger unscaledValue()>
<java.math.BigDecimal: void <init>(double,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,java.math.RoundingMode)>
<java.math.BigDecimal: int signum()>
<java.math.BigDecimal: java.lang.String toPlainString()>
<java.math.BigDecimal: java.math.BigDecimal negate()>
<java.math.BigDecimal: void <init>(String)>
<java.math.BigDecimal: java.math.BigDecimal[] divideAndRemainder(java.math.BigDecimal)>
<java.math.BigDecimal: java.math.BigDecimal setScale(int,java.math.RoundingMode)>
<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>
<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int,int)>
<java.math.BigDecimal: long longValue()>
<java.math.BigDecimal: void <init>(long)>
<java.math.BigDecimal: void <init>(java.math.BigInteger)>
<java.math.BigDecimal: int precision()>
<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal,java.math.MathContext)>
<java.math.BigDecimal: java.math.BigDecimal scaleByPowerOfTen(int)>
<java.math.BigDecimal: void <init>(char[],int,int,java.math.MathContext)>
<java.math.BigDecimal: void <init>(long,java.math.MathContext)>
<java.lang.Character: int codePointCount(char[],int,int)>
<java.lang.Character: int toLowerCase(int)>
<java.lang.Character: boolean isUpperCase(char)>
<java.lang.Character: boolean isDigit(char)>
<java.lang.Character: boolean isUnicodeIdentifierPart(char)>
<java.lang.Character: boolean isLetterOrDigit(int)>
<java.lang.Character: boolean isUnicodeIdentifierPart(int)>
<java.lang.Character: boolean isUpperCase(int)>
<java.lang.Character: boolean isSupplementaryCodePoint(int)>
<java.lang.Character: int codePointBefore(char[],int,int)>
<java.lang.Character: byte getDirectionality(int)>
<java.lang.Character: char highSurrogate(int)>
<java.lang.Character: boolean isDigit(int)>
<java.lang.Character: boolean isJavaLetter(char)>
<java.lang.Character: boolean isIdentifierIgnorable(int)>
<java.lang.Character: int codePointAt(CharSequence,int)>
<java.lang.Character: char toLowerCase(char)>
<java.lang.Character: char forDigit(int,int)>
<java.lang.Character: boolean isLowSurrogate(char)>
<java.lang.Character: boolean isValidCodePoint(int)>
<java.lang.Character: boolean isIdentifierIgnorable(char)>
<java.lang.Character: char charValue()>
<java.lang.Character: boolean isTitleCase(int)>
<java.lang.Character: int codePointCount(CharSequence,int,int)>
<java.lang.Character: int getType(char)>
<java.lang.Character: java.lang.String toString(char)>
<java.lang.Character: boolean isHighSurrogate(char)>
<java.lang.Character: boolean isMirrored(char)>
<java.lang.Character: boolean isLetter(int)>
<java.lang.Character: boolean isLowerCase(int)>
<java.lang.Character: char[] toChars(int)>
<java.lang.Character: boolean isJavaIdentifierStart(char)>
<java.lang.Character: int compare(char,char)>
<java.lang.Character: boolean isDefined(int)>
<java.lang.Character: java.lang.Character valueOf(char)>
<java.lang.Character: boolean isSurrogatePair(char,char)>
<java.lang.Character: boolean isSurrogate(char)>
<java.lang.Character: boolean isWhitespace(int)>
<java.lang.Character: int toChars(int,char[],int)>
<java.lang.Character: void <init>(char)>
<java.lang.Character: int getNumericValue(char)>
<java.lang.Character: int offsetByCodePoints(CharSequence,int,int)>
<java.lang.Character: java.lang.String getName(int)>
<java.lang.Character: boolean isJavaIdentifierStart(int)>
<java.lang.Character: boolean isJavaIdentifierPart(int)>
<java.lang.Character: boolean isWhitespace(char)>
<java.lang.Character: boolean isJavaLetterOrDigit(char)>
<java.lang.Character: boolean isBmpCodePoint(int)>
<java.lang.Character: int toTitleCase(int)>
<java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)>
<java.lang.Character: boolean isAlphabetic(int)>
<java.lang.Character: boolean isSpaceChar(int)>
<java.lang.Character: char toUpperCase(char)>
<java.lang.Character: boolean isSpaceChar(char)>
<java.lang.Character: boolean isISOControl(char)>
<java.lang.Character: char toTitleCase(char)>
<java.lang.Character: boolean isLowerCase(char)>
<java.lang.Character: int hashCode(char)>
<java.lang.Character: int digit(int,int)>
<java.lang.Character: boolean isDefined(char)>
<java.lang.Character: boolean isMirrored(int)>
<java.lang.Character: int getNumericValue(int)>
<java.lang.Character: int toUpperCase(int)>
<java.lang.Character: byte getDirectionality(char)>
<java.lang.Character: char lowSurrogate(int)>
<java.lang.Character: int digit(char,int)>
<java.lang.Character: int getType(int)>
<java.lang.Character: boolean isISOControl(int)>
<java.lang.Character: boolean isSpace(char)>
<java.lang.Character: int compareTo(java.lang.Character)>
<java.lang.Character: int codePointAt(char[],int)>
<java.lang.Character: boolean isJavaIdentifierPart(char)>
<java.lang.Character: boolean isUnicodeIdentifierStart(int)>
<java.lang.Character: boolean isLetter(char)>
<java.lang.Character: int charCount(int)>
<java.lang.Character: int toCodePoint(char,char)>
<java.lang.Character: boolean isLetterOrDigit(char)>
<java.lang.Character: char reverseBytes(char)>
<java.lang.Character: int codePointAt(char[],int,int)>
<java.lang.Character: boolean isUnicodeIdentifierStart(char)>
<java.lang.Character: int codePointBefore(CharSequence,int)>
<java.lang.Character: boolean isTitleCase(char)>
<java.lang.Character: boolean isIdeographic(int)>
<java.lang.Character: int codePointBefore(char[],int)>
<android.app.VrStateCallback: void onVrStateChanged(boolean)>
<android.app.VrStateCallback: void <init>()>
<android.app.VrStateCallback: void onPersistentVrStateChanged(boolean)>
<android.telephony.mbms.MbmsGroupCallSessionCallback: void onError(int,java.lang.String)>
<android.telephony.mbms.MbmsGroupCallSessionCallback: void onMiddlewareReady()>
<android.telephony.mbms.MbmsGroupCallSessionCallback: void onServiceInterfaceAvailable(java.lang.String,int)>
<android.telephony.mbms.MbmsGroupCallSessionCallback: void onAvailableSaisUpdated(java.util.List,java.util.List)>
<android.os.VintfRuntimeInfo: java.lang.String getKernelVersion()>
<android.os.VintfRuntimeInfo: java.lang.String getOsName()>
<android.os.VintfRuntimeInfo: java.lang.String getOsRelease()>
<android.os.VintfRuntimeInfo: java.lang.String getCpuInfo()>
<android.os.VintfRuntimeInfo: java.lang.String getHardwareId()>
<android.os.VintfRuntimeInfo: java.lang.String getNodeName()>
<android.os.VintfRuntimeInfo: java.lang.String getOsVersion()>
<android.webkit.WebView.FindListener: void onFindResultReceived(int,int,boolean)>
<android.media.MediaCodecInfo.CodecCapabilities: boolean isFeatureSupported(java.lang.String)>
<android.media.MediaCodecInfo.CodecCapabilities: android.media.MediaCodecInfo.AudioCapabilities getAudioCapabilities()>
<android.media.MediaCodecInfo.CodecCapabilities: android.media.MediaFormat getDefaultFormat()>
<android.media.MediaCodecInfo.CodecCapabilities: java.lang.String getMimeType()>
<android.media.MediaCodecInfo.CodecCapabilities: boolean isFormatSupported(android.media.MediaFormat)>
<android.media.MediaCodecInfo.CodecCapabilities: android.media.MediaCodecInfo.EncoderCapabilities getEncoderCapabilities()>
<android.media.MediaCodecInfo.CodecCapabilities: int getMaxSupportedInstances()>
<android.media.MediaCodecInfo.CodecCapabilities: android.media.MediaCodecInfo.CodecCapabilities createFromProfileLevel(java.lang.String,int,int)>
<android.media.MediaCodecInfo.CodecCapabilities: void <init>()>
<android.media.MediaCodecInfo.CodecCapabilities: boolean isFeatureRequired(java.lang.String)>
<android.media.MediaCodecInfo.CodecCapabilities: android.media.MediaCodecInfo.VideoCapabilities getVideoCapabilities()>
<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(String,java.security.KeyStore,String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.scheme.HostNameResolver)>
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket()>
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.security.KeyStore,String)>
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier()>
<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.security.KeyStore)>
<org.apache.http.conn.ssl.SSLSocketFactory: void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)>
<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.security.KeyStore,String,java.security.KeyStore)>
<org.apache.http.conn.ssl.SSLSocketFactory: boolean isSecure(java.net.Socket)>
<android.hardware.radio.RadioManager.BandConfig: int getRegion()>
<android.hardware.radio.RadioManager.BandConfig: int getUpperLimit()>
<android.hardware.radio.RadioManager.BandConfig: int describeContents()>
<android.hardware.radio.RadioManager.BandConfig: int getType()>
<android.hardware.radio.RadioManager.BandConfig: int getLowerLimit()>
<android.hardware.radio.RadioManager.BandConfig: void writeToParcel(android.os.Parcel,int)>
<android.hardware.radio.RadioManager.BandConfig: int getSpacing()>
<java.lang.StrictMath: long abs(long)>
<java.lang.StrictMath: long multiplyExact(long,long)>
<java.lang.StrictMath: double atan2(double,double)>
<java.lang.StrictMath: double acos(double)>
<java.lang.StrictMath: int getExponent(float)>
<java.lang.StrictMath: int getExponent(double)>
<java.lang.StrictMath: int addExact(int,int)>
<java.lang.StrictMath: int round(float)>
<java.lang.StrictMath: double IEEEremainder(double,double)>
<java.lang.StrictMath: long floorDiv(long,long)>
<java.lang.StrictMath: double expm1(double)>
<java.lang.StrictMath: int floorMod(int,int)>
<java.lang.StrictMath: double pow(double,double)>
<java.lang.StrictMath: double tan(double)>
<java.lang.StrictMath: double nextUp(double)>
<java.lang.StrictMath: int max(int,int)>
<java.lang.StrictMath: long addExact(long,long)>
<java.lang.StrictMath: double nextDown(double)>
<java.lang.StrictMath: double asin(double)>
<java.lang.StrictMath: int multiplyExact(int,int)>
<java.lang.StrictMath: double exp(double)>
<java.lang.StrictMath: double hypot(double,double)>
<java.lang.StrictMath: double log(double)>
<java.lang.StrictMath: double log10(double)>
<java.lang.StrictMath: float abs(float)>
<java.lang.StrictMath: double scalb(double,int)>
<java.lang.StrictMath: float scalb(float,int)>
<java.lang.StrictMath: int floorDiv(int,int)>
<java.lang.StrictMath: long subtractExact(long,long)>
<java.lang.StrictMath: double min(double,double)>
<java.lang.StrictMath: float nextAfter(float,double)>
<java.lang.StrictMath: int min(int,int)>
<java.lang.StrictMath: long min(long,long)>
<java.lang.StrictMath: double cos(double)>
<java.lang.StrictMath: double log1p(double)>
<java.lang.StrictMath: double sin(double)>
<java.lang.StrictMath: double cbrt(double)>
<java.lang.StrictMath: long floorMod(long,long)>
<java.lang.StrictMath: double abs(double)>
<java.lang.StrictMath: double sqrt(double)>
<java.lang.StrictMath: int abs(int)>
<java.lang.StrictMath: double copySign(double,double)>
<java.lang.StrictMath: float nextDown(float)>
<java.lang.StrictMath: double floor(double)>
<java.lang.StrictMath: float signum(float)>
<java.lang.StrictMath: double toRadians(double)>
<java.lang.StrictMath: long max(long,long)>
<java.lang.StrictMath: double max(double,double)>
<java.lang.StrictMath: int subtractExact(int,int)>
<java.lang.StrictMath: double ulp(double)>
<java.lang.StrictMath: double sinh(double)>
<java.lang.StrictMath: double toDegrees(double)>
<java.lang.StrictMath: float nextUp(float)>
<java.lang.StrictMath: float min(float,float)>
<java.lang.StrictMath: float copySign(float,float)>
<java.lang.StrictMath: double nextAfter(double,double)>
<java.lang.StrictMath: double random()>
<java.lang.StrictMath: double cosh(double)>
<java.lang.StrictMath: int toIntExact(long)>
<java.lang.StrictMath: double ceil(double)>
<java.lang.StrictMath: double rint(double)>
<java.lang.StrictMath: double tanh(double)>
<java.lang.StrictMath: long round(double)>
<java.lang.StrictMath: float max(float,float)>
<java.lang.StrictMath: double atan(double)>
<java.lang.StrictMath: double signum(double)>
<java.lang.StrictMath: float ulp(float)>
<android.media.MediaPlayer.OnDrmInfoListener: void onDrmInfo(android.media.MediaPlayer,android.media.MediaPlayer.DrmInfo)>
<java.lang.ClassCircularityError: void <init>(String)>
<java.lang.ClassCircularityError: void <init>()>
<android.renderscript.ScriptIntrinsicYuvToRGB: android.renderscript.ScriptIntrinsicYuvToRGB create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicYuvToRGB: android.renderscript.Script.KernelID getKernelID()>
<android.renderscript.ScriptIntrinsicYuvToRGB: android.renderscript.Script.FieldID getFieldID_Input()>
<android.renderscript.ScriptIntrinsicYuvToRGB: void setInput(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicYuvToRGB: void forEach(android.renderscript.Allocation)>
<java.nio.file.attribute.FileAttribute: java.lang.String name()>
<java.nio.file.attribute.FileAttribute: T value()>
<android.animation.AnimatorListenerAdapter: void onAnimationEnd(android.animation.Animator)>
<android.animation.AnimatorListenerAdapter: void onAnimationCancel(android.animation.Animator)>
<android.animation.AnimatorListenerAdapter: void onAnimationResume(android.animation.Animator)>
<android.animation.AnimatorListenerAdapter: void onAnimationStart(android.animation.Animator)>
<android.animation.AnimatorListenerAdapter: void <init>()>
<android.animation.AnimatorListenerAdapter: void onAnimationRepeat(android.animation.Animator)>
<android.animation.AnimatorListenerAdapter: void onAnimationPause(android.animation.Animator)>
<java.util.function.ToDoubleBiFunction: double applyAsDouble(T,U)>
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec.Builder setAlias(java.lang.String)>
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec.Builder setAlgorithmParameterSpec(java.security.spec.AlgorithmParameterSpec)>
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec.Builder setKeySize(int)>
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec.Builder setSubject(javax.security.auth.x500.X500Principal)>
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec.Builder setEndDate(java.util.Date)>
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec.Builder setStartDate(java.util.Date)>
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec build()>
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec.Builder setEncryptionRequired()>
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec.Builder setSerialNumber(java.math.BigInteger)>
<android.security.KeyPairGeneratorSpec.Builder: android.security.KeyPairGeneratorSpec.Builder setKeyType(java.lang.String)>
<android.security.KeyPairGeneratorSpec.Builder: void <init>(android.content.Context)>
<android.text.style.LeadingMarginSpan.LeadingMarginSpan2 extends android.text.style.LeadingMarginSpan android.text.style.WrapTogetherSpan: int getLeadingMarginLineCount()>
<android.graphics.Interpolator: int getKeyFrameCount()>
<android.graphics.Interpolator: int getValueCount()>
<android.graphics.Interpolator: void <init>(int)>
<android.graphics.Interpolator: void setKeyFrame(int,int,float[],float[])>
<android.graphics.Interpolator: void reset(int,int)>
<android.graphics.Interpolator: void reset(int)>
<android.graphics.Interpolator: android.graphics.Interpolator.Result timeToValues(int,float[])>
<android.graphics.Interpolator: void setRepeatMirror(float,boolean)>
<android.graphics.Interpolator: android.graphics.Interpolator.Result timeToValues(float[])>
<android.graphics.Interpolator: void <init>(int,int)>
<android.graphics.Interpolator: void setKeyFrame(int,int,float[])>
<android.se.omapi.SEService.OnConnectedListener: void onConnected()>
<java.security.NoSuchAlgorithmException: void <init>()>
<java.security.NoSuchAlgorithmException: void <init>(String,Throwable)>
<java.security.NoSuchAlgorithmException: void <init>(String)>
<java.security.NoSuchAlgorithmException: void <init>(Throwable)>
<android.net.metrics.RaEvent.Builder: android.net.metrics.RaEvent build()>
<android.net.metrics.RaEvent.Builder: void <init>()>
<android.net.metrics.RaEvent.Builder: android.net.metrics.RaEvent.Builder updatePrefixPreferredLifetime(long)>
<android.net.metrics.RaEvent.Builder: android.net.metrics.RaEvent.Builder updatePrefixValidLifetime(long)>
<android.net.metrics.RaEvent.Builder: android.net.metrics.RaEvent.Builder updateRdnssLifetime(long)>
<android.net.metrics.RaEvent.Builder: android.net.metrics.RaEvent.Builder updateRouterLifetime(long)>
<android.net.metrics.RaEvent.Builder: android.net.metrics.RaEvent.Builder updateDnsslLifetime(long)>
<android.net.metrics.RaEvent.Builder: android.net.metrics.RaEvent.Builder updateRouteInfoLifetime(long)>
<android.service.euicc.GetDefaultDownloadableSubscriptionListResult: void <init>(int,android.telephony.euicc.DownloadableSubscription[])>
<android.service.euicc.GetDefaultDownloadableSubscriptionListResult: int getResult()>
<android.service.euicc.GetDefaultDownloadableSubscriptionListResult: int describeContents()>
<android.service.euicc.GetDefaultDownloadableSubscriptionListResult: java.util.List getDownloadableSubscriptions()>
<android.service.euicc.GetDefaultDownloadableSubscriptionListResult: void writeToParcel(android.os.Parcel,int)>
<android.icu.util.MeasureUnit: java.lang.String getSubtype()>
<android.icu.util.MeasureUnit: java.lang.String getType()>
<android.icu.util.MeasureUnit: java.util.Set getAvailable(java.lang.String)>
<android.icu.util.MeasureUnit: java.util.Set getAvailableTypes()>
<android.icu.util.MeasureUnit: java.util.Set getAvailable()>
<android.util.MutableByte: void <init>(byte)>
<android.graphics.ColorSpace.Rgb: float getMaxValue(int)>
<android.graphics.ColorSpace.Rgb: float[] toLinear(float,float,float)>
<android.graphics.ColorSpace.Rgb: float[] fromLinear(float,float,float)>
<android.graphics.ColorSpace.Rgb: float[] getInverseTransform(float[])>
<android.graphics.ColorSpace.Rgb: java.util.function.DoubleUnaryOperator getEotf()>
<android.graphics.ColorSpace.Rgb: void <init>(9) float[],android.graphics.ColorSpace.Rgb.TransferParameters)>
<android.graphics.ColorSpace.Rgb: float[] fromXyz(float[])>
<android.graphics.ColorSpace.Rgb: float[] fromLinear(float[])>
<android.graphics.ColorSpace.Rgb: void <init>(min=2,max=3) float[],java.util.function.DoubleUnaryOperator,java.util.function.DoubleUnaryOperator,float,float)>
<android.graphics.ColorSpace.Rgb: void <init>(9) float[],java.util.function.DoubleUnaryOperator,java.util.function.DoubleUnaryOperator)>
<android.graphics.ColorSpace.Rgb: float[] getTransform()>
<android.graphics.ColorSpace.Rgb: void <init>(min=2,max=3) float[],android.graphics.ColorSpace.Rgb.TransferParameters)>
<android.graphics.ColorSpace.Rgb: boolean isWideGamut()>
<android.graphics.ColorSpace.Rgb: android.graphics.ColorSpace.Rgb.TransferParameters getTransferParameters()>
<android.graphics.ColorSpace.Rgb: float[] toXyz(float[])>
<android.graphics.ColorSpace.Rgb: void <init>(9) float[],double)>
<android.graphics.ColorSpace.Rgb: float getMinValue(int)>
<android.graphics.ColorSpace.Rgb: float[] toLinear(float[])>
<android.graphics.ColorSpace.Rgb: void <init>(min=2,max=3) float[],double)>
<android.graphics.ColorSpace.Rgb: java.util.function.DoubleUnaryOperator getOetf()>
<android.graphics.ColorSpace.Rgb: float[] getPrimaries()>
<android.graphics.ColorSpace.Rgb: float[] getPrimaries(float[])>
<android.graphics.ColorSpace.Rgb: float[] getTransform(float[])>
<android.graphics.ColorSpace.Rgb: float[] getWhitePoint(float[])>
<android.graphics.ColorSpace.Rgb: float[] getInverseTransform()>
<android.graphics.ColorSpace.Rgb: float[] getWhitePoint()>
<android.widget.HeterogeneousExpandableList: int getChildTypeCount()>
<android.widget.HeterogeneousExpandableList: int getGroupType(int)>
<android.widget.HeterogeneousExpandableList: int getGroupTypeCount()>
<android.widget.HeterogeneousExpandableList: int getChildType(int,int)>
<android.media.audiofx.DynamicsProcessing.Config.Builder: android.media.audiofx.DynamicsProcessing.Config.Builder setPostEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq)>
<android.media.audiofx.DynamicsProcessing.Config.Builder: android.media.audiofx.DynamicsProcessing.Config.Builder setPostEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Eq)>
<android.media.audiofx.DynamicsProcessing.Config.Builder: android.media.audiofx.DynamicsProcessing.Config.Builder setMbcAllChannelsTo(android.media.audiofx.DynamicsProcessing.Mbc)>
<android.media.audiofx.DynamicsProcessing.Config.Builder: android.media.audiofx.DynamicsProcessing.Config.Builder setPreferredFrameDuration(float)>
<android.media.audiofx.DynamicsProcessing.Config.Builder: android.media.audiofx.DynamicsProcessing.Config.Builder setPreEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Eq)>
<android.media.audiofx.DynamicsProcessing.Config.Builder: android.media.audiofx.DynamicsProcessing.Config.Builder setAllChannelsTo(android.media.audiofx.DynamicsProcessing.Channel)>
<android.media.audiofx.DynamicsProcessing.Config.Builder: android.media.audiofx.DynamicsProcessing.Config.Builder setMbcByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Mbc)>
<android.media.audiofx.DynamicsProcessing.Config.Builder: android.media.audiofx.DynamicsProcessing.Config build()>
<android.media.audiofx.DynamicsProcessing.Config.Builder: android.media.audiofx.DynamicsProcessing.Config.Builder setInputGainAllChannelsTo(float)>
<android.media.audiofx.DynamicsProcessing.Config.Builder: void <init>(int,int,boolean,int,boolean,int,boolean,int,boolean)>
<android.media.audiofx.DynamicsProcessing.Config.Builder: android.media.audiofx.DynamicsProcessing.Config.Builder setLimiterAllChannelsTo(android.media.audiofx.DynamicsProcessing.Limiter)>
<android.media.audiofx.DynamicsProcessing.Config.Builder: android.media.audiofx.DynamicsProcessing.Config.Builder setPreEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq)>
<android.media.audiofx.DynamicsProcessing.Config.Builder: android.media.audiofx.DynamicsProcessing.Config.Builder setLimiterByChannelIndex(int,android.media.audiofx.DynamicsProcessing.Limiter)>
<android.media.audiofx.DynamicsProcessing.Config.Builder: android.media.audiofx.DynamicsProcessing.Config.Builder setChannelTo(int,android.media.audiofx.DynamicsProcessing.Channel)>
<android.media.audiofx.DynamicsProcessing.Config.Builder: android.media.audiofx.DynamicsProcessing.Config.Builder setInputGainByChannelIndex(int,float)>
<android.service.carrier.CarrierMessagingService: void onSendMultipartTextSms(java.util.List,int,java.lang.String,android.service.carrier.CarrierMessagingService.ResultCallback)>
<android.service.carrier.CarrierMessagingService: void onSendMultipartTextSms(java.util.List,int,java.lang.String,int,android.service.carrier.CarrierMessagingService.ResultCallback)>
<android.service.carrier.CarrierMessagingService: void onSendMms(android.net.Uri,int,android.net.Uri,android.service.carrier.CarrierMessagingService.ResultCallback)>
<android.service.carrier.CarrierMessagingService: android.os.IBinder onBind(android.content.Intent)>
<android.service.carrier.CarrierMessagingService: void onFilterSms(android.service.carrier.MessagePdu,java.lang.String,int,int,android.service.carrier.CarrierMessagingService.ResultCallback)>
<android.service.carrier.CarrierMessagingService: void onSendTextSms(java.lang.String,int,java.lang.String,int,android.service.carrier.CarrierMessagingService.ResultCallback)>
<android.service.carrier.CarrierMessagingService: void onSendTextSms(java.lang.String,int,java.lang.String,android.service.carrier.CarrierMessagingService.ResultCallback)>
<android.service.carrier.CarrierMessagingService: void <init>()>
<android.service.carrier.CarrierMessagingService: void onDownloadMms(android.net.Uri,int,android.net.Uri,android.service.carrier.CarrierMessagingService.ResultCallback)>
<android.service.carrier.CarrierMessagingService: void onReceiveTextSms(android.service.carrier.MessagePdu,java.lang.String,int,int,android.service.carrier.CarrierMessagingService.ResultCallback)>
<android.service.carrier.CarrierMessagingService: void onSendDataSms(byte[],int,java.lang.String,int,android.service.carrier.CarrierMessagingService.ResultCallback)>
<android.service.carrier.CarrierMessagingService: void onSendDataSms(byte[],int,java.lang.String,int,int,android.service.carrier.CarrierMessagingService.ResultCallback)>
<android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener: void onTouchExplorationStateChanged(boolean)>
<android.telecom.Phone.Listener: void onCallAudioStateChanged(android.telecom.Phone,android.telecom.CallAudioState)>
<android.telecom.Phone.Listener: void onSilenceRinger(android.telecom.Phone)>
<android.telecom.Phone.Listener: void onCanAddCallChanged(android.telecom.Phone,boolean)>
<android.telecom.Phone.Listener: void onBringToForeground(android.telecom.Phone,boolean)>
<android.telecom.Phone.Listener: void onCallRemoved(android.telecom.Phone,android.telecom.Call)>
<android.telecom.Phone.Listener: void <init>()>
<android.telecom.Phone.Listener: void onAudioStateChanged(android.telecom.Phone,android.telecom.AudioState)>
<android.telecom.Phone.Listener: void onCallAdded(android.telecom.Phone,android.telecom.Call)>
<android.widget.ListView.FixedViewInfo: void <init>()>
<android.media.MediaFormat: java.lang.Number getNumber(java.lang.String,java.lang.Number)>
<android.media.MediaFormat: void setInteger(java.lang.String,int)>
<android.media.MediaFormat: void setFeatureEnabled(java.lang.String,boolean)>
<android.media.MediaFormat: java.util.Set getFeatures()>
<android.media.MediaFormat: boolean getFeatureEnabled(java.lang.String)>
<android.media.MediaFormat: android.media.MediaFormat createSubtitleFormat(java.lang.String,java.lang.String)>
<android.media.MediaFormat: void removeFeature(java.lang.String)>
<android.media.MediaFormat: java.nio.ByteBuffer getByteBuffer(java.lang.String,java.nio.ByteBuffer)>
<android.media.MediaFormat: void setLong(java.lang.String,long)>
<android.media.MediaFormat: int getInteger(java.lang.String)>
<android.media.MediaFormat: boolean containsFeature(java.lang.String)>
<android.media.MediaFormat: void setFloat(java.lang.String,float)>
<android.media.MediaFormat: boolean containsKey(java.lang.String)>
<android.media.MediaFormat: java.util.Set getKeys()>
<android.media.MediaFormat: float getFloat(java.lang.String)>
<android.media.MediaFormat: void <init>()>
<android.media.MediaFormat: android.media.MediaFormat createAudioFormat(java.lang.String,int,int)>
<android.media.MediaFormat: java.lang.String getString(java.lang.String)>
<android.media.MediaFormat: android.media.MediaFormat createVideoFormat(java.lang.String,int,int)>
<android.media.MediaFormat: int getValueTypeForKey(java.lang.String)>
<android.media.MediaFormat: java.nio.ByteBuffer getByteBuffer(java.lang.String)>
<android.media.MediaFormat: long getLong(java.lang.String)>
<android.media.MediaFormat: java.lang.String getString(java.lang.String,java.lang.String)>
<android.media.MediaFormat: float getFloat(java.lang.String,float)>
<android.media.MediaFormat: int getInteger(java.lang.String,int)>
<android.media.MediaFormat: long getLong(java.lang.String,long)>
<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>
<android.media.MediaFormat: java.lang.Number getNumber(java.lang.String)>
<android.media.MediaFormat: void setByteBuffer(java.lang.String,java.nio.ByteBuffer)>
<android.media.MediaFormat: void <init>(android.media.MediaFormat)>
<android.media.MediaFormat: void removeKey(java.lang.String)>
<android.widget.Space: void <init>(android.content.Context)>
<android.widget.Space: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Space: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.Space: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.net.VpnService.Builder: android.net.VpnService.Builder setConfigureIntent(android.app.PendingIntent)>
<android.net.VpnService.Builder: android.net.VpnService.Builder setSession(java.lang.String)>
<android.net.VpnService.Builder: void <init>()>
<android.net.VpnService.Builder: android.net.VpnService.Builder setBlocking(boolean)>
<android.net.VpnService.Builder: android.net.VpnService.Builder setUnderlyingNetworks(android.net.Network[])>
<android.net.VpnService.Builder: android.net.VpnService.Builder addDnsServer(java.lang.String)>
<android.net.VpnService.Builder: android.net.VpnService.Builder addRoute(java.lang.String,int)>
<android.net.VpnService.Builder: android.net.VpnService.Builder allowFamily(int)>
<android.net.VpnService.Builder: android.net.VpnService.Builder setHttpProxy(android.net.ProxyInfo)>
<android.net.VpnService.Builder: android.net.VpnService.Builder addDisallowedApplication(java.lang.String)>
<android.net.VpnService.Builder: android.net.VpnService.Builder setMtu(int)>
<android.net.VpnService.Builder: android.net.VpnService.Builder addDnsServer(java.net.InetAddress)>
<android.net.VpnService.Builder: android.net.VpnService.Builder addRoute(java.net.InetAddress,int)>
<android.net.VpnService.Builder: android.net.VpnService.Builder addAllowedApplication(java.lang.String)>
<android.net.VpnService.Builder: android.os.ParcelFileDescriptor establish()>
<android.net.VpnService.Builder: android.net.VpnService.Builder allowBypass()>
<android.net.VpnService.Builder: android.net.VpnService.Builder addAddress(java.lang.String,int)>
<android.net.VpnService.Builder: android.net.VpnService.Builder setMetered(boolean)>
<android.net.VpnService.Builder: android.net.VpnService.Builder addSearchDomain(java.lang.String)>
<android.net.VpnService.Builder: android.net.VpnService.Builder addAddress(java.net.InetAddress,int)>
<android.content.EntityIterator extends java.util.Iterator: void close()>
<android.content.EntityIterator extends java.util.Iterator: void reset()>
<android.database.CursorWindow: long getLong(int,int)>
<android.database.CursorWindow: boolean setNumColumns(int)>
<android.database.CursorWindow: void writeToParcel(android.os.Parcel,int)>
<android.database.CursorWindow: boolean isLong(int,int)>
<android.database.CursorWindow: boolean putLong(long,int,int)>
<android.database.CursorWindow: short getShort(int,int)>
<android.database.CursorWindow: void <init>(boolean)>
<android.database.CursorWindow: void freeLastRow()>
<android.database.CursorWindow: byte[] getBlob(int,int)>
<android.database.CursorWindow: boolean putBlob(byte[],int,int)>
<android.database.CursorWindow: void setStartPosition(int)>
<android.database.CursorWindow: void copyStringToBuffer(int,int,android.database.CharArrayBuffer)>
<android.database.CursorWindow: int getStartPosition()>
<android.database.CursorWindow: void clear()>
<android.database.CursorWindow: boolean isFloat(int,int)>
<android.database.CursorWindow: double getDouble(int,int)>
<android.database.CursorWindow: void <init>(String,long)>
<android.database.CursorWindow: float getFloat(int,int)>
<android.database.CursorWindow: boolean isNull(int,int)>
<android.database.CursorWindow: android.database.CursorWindow newFromParcel(android.os.Parcel)>
<android.database.CursorWindow: int describeContents()>
<android.database.CursorWindow: boolean allocRow()>
<android.database.CursorWindow: void onAllReferencesReleased()>
<android.database.CursorWindow: int getType(int,int)>
<android.database.CursorWindow: boolean putNull(int,int)>
<android.database.CursorWindow: boolean putDouble(double,int,int)>
<android.database.CursorWindow: java.lang.String getString(int,int)>
<android.database.CursorWindow: boolean isString(int,int)>
<android.database.CursorWindow: boolean putString(java.lang.String,int,int)>
<android.database.CursorWindow: boolean isBlob(int,int)>
<android.database.CursorWindow: int getNumRows()>
<android.database.CursorWindow: int getInt(int,int)>
<android.database.CursorWindow: void <init>(String)>
<java.security.cert.PKIXCertPathChecker: void check(java.security.cert.Certificate,java.util.Collection)>
<java.security.cert.PKIXCertPathChecker: java.util.Set getSupportedExtensions()>
<java.security.cert.PKIXCertPathChecker: java.lang.Object clone()>
<java.security.cert.PKIXCertPathChecker: void <init>()>
<java.security.cert.PKIXCertPathChecker: void check(java.security.cert.Certificate)>
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForUid(java.util.UUID,int)>
<android.app.usage.StorageStatsManager: long getTotalBytes(java.util.UUID)>
<android.app.usage.StorageStatsManager: boolean isReservedSupported(java.util.UUID)>
<android.app.usage.StorageStatsManager: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.util.UUID,android.os.UserHandle)>
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForPackage(java.util.UUID,java.lang.String,android.os.UserHandle)>
<android.app.usage.StorageStatsManager: boolean isQuotaSupported(java.util.UUID)>
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForUser(java.util.UUID,android.os.UserHandle)>
<android.app.usage.StorageStatsManager: long getFreeBytes(java.util.UUID)>
<android.graphics.Typeface.CustomFallbackBuilder: void <init>(android.graphics.fonts.FontFamily)>
<android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface.CustomFallbackBuilder addCustomFallback(android.graphics.fonts.FontFamily)>
<android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface.CustomFallbackBuilder setStyle(android.graphics.fonts.FontStyle)>
<android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface.CustomFallbackBuilder setSystemFallback(java.lang.String)>
<android.graphics.Typeface.CustomFallbackBuilder: int getMaxCustomFallbackCount()>
<android.graphics.Typeface.CustomFallbackBuilder: android.graphics.Typeface build()>
<android.webkit.WebView.VisualStateCallback: void <init>()>
<android.webkit.WebView.VisualStateCallback: void onComplete(long)>
<android.icu.text.ScientificNumberFormatter: java.lang.String format(java.lang.Object)>
<android.icu.text.ScientificNumberFormatter: android.icu.text.ScientificNumberFormatter getSuperscriptInstance(android.icu.text.DecimalFormat)>
<android.icu.text.ScientificNumberFormatter: android.icu.text.ScientificNumberFormatter getSuperscriptInstance(android.icu.util.ULocale)>
<android.icu.text.ScientificNumberFormatter: android.icu.text.ScientificNumberFormatter getMarkupInstance(android.icu.text.DecimalFormat,java.lang.String,java.lang.String)>
<android.icu.text.ScientificNumberFormatter: android.icu.text.ScientificNumberFormatter getMarkupInstance(android.icu.util.ULocale,java.lang.String,java.lang.String)>
<android.media.audiopolicy.AudioMixingRule.Builder: android.media.audiopolicy.AudioMixingRule.Builder addRule(android.media.AudioAttributes,int)>
<android.media.audiopolicy.AudioMixingRule.Builder: void <init>()>
<android.media.audiopolicy.AudioMixingRule.Builder: android.media.audiopolicy.AudioMixingRule.Builder addMixRule(int,java.lang.Object)>
<android.media.audiopolicy.AudioMixingRule.Builder: android.media.audiopolicy.AudioMixingRule.Builder allowPrivilegedPlaybackCapture(boolean)>
<android.media.audiopolicy.AudioMixingRule.Builder: android.media.audiopolicy.AudioMixingRule build()>
<android.media.audiopolicy.AudioMixingRule.Builder: android.media.audiopolicy.AudioMixingRule.Builder excludeMixRule(int,java.lang.Object)>
<android.media.audiopolicy.AudioMixingRule.Builder: android.media.audiopolicy.AudioMixingRule.Builder excludeRule(android.media.AudioAttributes,int)>
<android.R.string: void <init>()>
<android.system.Os: android.system.StructUtsname uname()>
<android.system.Os: int if_nametoindex(java.lang.String)>
<android.system.Os: int read(java.io.FileDescriptor,byte[],int,int)>
<android.system.Os: void execv(java.lang.String,java.lang.String[])>
<android.system.Os: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>
<android.system.Os: java.io.FileDescriptor open(java.lang.String,int,int)>
<android.system.Os: long sysconf(int)>
<android.system.Os: void setsockoptInt(java.io.FileDescriptor,int,int,int)>
<android.system.Os: int poll(android.system.StructPollfd[],int)>
<android.system.Os: void tcdrain(java.io.FileDescriptor)>
<android.system.Os: void ftruncate(java.io.FileDescriptor,long)>
<android.system.Os: void lchown(java.lang.String,int,int)>
<android.system.Os: void listen(java.io.FileDescriptor,int)>
<android.system.Os: void msync(long,long,int)>
<android.system.Os: java.io.FileDescriptor[] pipe()>
<android.system.Os: int getgid()>
<android.system.Os: void setgid(int)>
<android.system.Os: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>
<android.system.Os: int gettid()>
<android.system.Os: android.system.StructTimeval getsockoptTimeval(java.io.FileDescriptor,int,int)>
<android.system.Os: void symlink(java.lang.String,java.lang.String)>
<android.system.Os: void fchmod(java.io.FileDescriptor,int)>
<android.system.Os: void removexattr(java.lang.String,java.lang.String)>
<android.system.Os: int readv(java.io.FileDescriptor,java.lang.Object[],int[],int[])>
<android.system.Os: void rename(java.lang.String,java.lang.String)>
<android.system.Os: java.io.FileDescriptor accept(java.io.FileDescriptor,java.net.InetSocketAddress)>
<android.system.Os: int getegid()>
<android.system.Os: long lseek(java.io.FileDescriptor,long,int)>
<android.system.Os: long mmap(long,long,int,int,java.io.FileDescriptor,long)>
<android.system.Os: int getpid()>
<android.system.Os: void chmod(java.lang.String,int)>
<android.system.Os: void munmap(long,long)>
<android.system.Os: int pwrite(java.io.FileDescriptor,byte[],int,int,long)>
<android.system.Os: android.system.StructStatVfs fstatvfs(java.io.FileDescriptor)>
<android.system.Os: int prctl(int,long,long,long,long)>
<android.system.Os: void execve(java.lang.String,java.lang.String[],java.lang.String[])>
<android.system.Os: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>
<android.system.Os: void setxattr(java.lang.String,java.lang.String,byte[],int)>
<android.system.Os: int recvfrom(java.io.FileDescriptor,byte[],int,int,int,java.net.InetSocketAddress)>
<android.system.Os: void setuid(int)>
<android.system.Os: java.net.SocketAddress getpeername(java.io.FileDescriptor)>
<android.system.Os: int write(java.io.FileDescriptor,byte[],int,int)>
<android.system.Os: boolean access(java.lang.String,int)>
<android.system.Os: int setsid()>
<android.system.Os: android.system.StructStat stat(java.lang.String)>
<android.system.Os: void socketpair(int,int,int,java.io.FileDescriptor,java.io.FileDescriptor)>
<android.system.Os: java.io.FileDescriptor dup2(java.io.FileDescriptor,int)>
<android.system.Os: void setegid(int)>
<android.system.Os: java.lang.String[] listxattr(java.lang.String)>
<android.system.Os: void mincore(long,long,byte[])>
<android.system.Os: void tcsendbreak(java.io.FileDescriptor,int)>
<android.system.Os: android.system.StructStatVfs statvfs(java.lang.String)>
<android.system.Os: java.lang.String[] environ()>
<android.system.Os: java.net.InetAddress inet_pton(int,java.lang.String)>
<android.system.Os: android.system.StructStat lstat(java.lang.String)>
<android.system.Os: void connect(java.io.FileDescriptor,java.net.SocketAddress)>
<android.system.Os: void connect(java.io.FileDescriptor,java.net.InetAddress,int)>
<android.system.Os: void seteuid(int)>
<android.system.Os: int geteuid()>
<android.system.Os: int recvfrom(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetSocketAddress)>
<android.system.Os: int umask(int)>
<android.system.Os: void posix_fallocate(java.io.FileDescriptor,long,long)>
<android.system.Os: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>
<android.system.Os: java.lang.String if_indextoname(int)>
<android.system.Os: void bind(java.io.FileDescriptor,java.net.SocketAddress)>
<android.system.Os: void fchown(java.io.FileDescriptor,int,int)>
<android.system.Os: void kill(int,int)>
<android.system.Os: java.io.FileDescriptor dup(java.io.FileDescriptor)>
<android.system.Os: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>
<android.system.Os: void link(java.lang.String,java.lang.String)>
<android.system.Os: boolean isatty(java.io.FileDescriptor)>
<android.system.Os: java.net.SocketAddress getsockname(java.io.FileDescriptor)>
<android.system.Os: java.lang.String strerror(int)>
<android.system.Os: void shutdown(java.io.FileDescriptor,int)>
<android.system.Os: java.lang.String readlink(java.lang.String)>
<android.system.Os: android.system.StructStat fstat(java.io.FileDescriptor)>
<android.system.Os: long sendfile(java.io.FileDescriptor,java.io.FileDescriptor,android.system.Int64Ref,long)>
<android.system.Os: java.lang.String strsignal(int)>
<android.system.Os: int pread(java.io.FileDescriptor,byte[],int,int,long)>
<android.system.Os: void mkfifo(java.lang.String,int)>
<android.system.Os: int pwrite(java.io.FileDescriptor,java.nio.ByteBuffer,long)>
<android.system.Os: void fsync(java.io.FileDescriptor)>
<android.system.Os: byte[] getxattr(java.lang.String,java.lang.String)>
<android.system.Os: void unsetenv(java.lang.String)>
<android.system.Os: void fdatasync(java.io.FileDescriptor)>
<android.system.Os: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.SocketAddress)>
<android.system.Os: void mkdir(java.lang.String,int)>
<android.system.Os: void chown(java.lang.String,int,int)>
<android.system.Os: void close(java.io.FileDescriptor)>
<android.system.Os: java.io.FileDescriptor socket(int,int,int)>
<android.system.Os: int getppid()>
<android.system.Os: int getuid()>
<android.system.Os: void remove(java.lang.String)>
<android.system.Os: java.lang.String getenv(java.lang.String)>
<android.system.Os: void setsockoptTimeval(java.io.FileDescriptor,int,int,android.system.StructTimeval)>
<android.system.Os: void mlock(long,long)>
<android.system.Os: void munlock(long,long)>
<android.system.Os: int read(java.io.FileDescriptor,java.nio.ByteBuffer)>
<android.system.Os: void setenv(java.lang.String,java.lang.String,boolean)>
<android.system.Os: java.lang.String gai_strerror(int)>
<android.system.Os: int pread(java.io.FileDescriptor,java.nio.ByteBuffer,long)>
<android.telephony.TelephonyHistogram: int[] getBucketCounters()>
<android.telephony.TelephonyHistogram: void addTimeTaken(int)>
<android.telephony.TelephonyHistogram: int getBucketCount()>
<android.telephony.TelephonyHistogram: int getCategory()>
<android.telephony.TelephonyHistogram: int getAverageTime()>
<android.telephony.TelephonyHistogram: void <init>(int,int,int)>
<android.telephony.TelephonyHistogram: int describeContents()>
<android.telephony.TelephonyHistogram: int getMinTime()>
<android.telephony.TelephonyHistogram: int getId()>
<android.telephony.TelephonyHistogram: int getMaxTime()>
<android.telephony.TelephonyHistogram: void <init>(android.os.Parcel)>
<android.telephony.TelephonyHistogram: int[] getBucketEndPoints()>
<android.telephony.TelephonyHistogram: int getSampleCount()>
<android.telephony.TelephonyHistogram: void writeToParcel(android.os.Parcel,int)>
<android.telephony.TelephonyHistogram: void <init>(android.telephony.TelephonyHistogram)>
<android.text.style.TtsSpan.TelephoneBuilder: void <init>()>
<android.text.style.TtsSpan.TelephoneBuilder: android.text.style.TtsSpan.TelephoneBuilder setNumberParts(java.lang.String)>
<android.text.style.TtsSpan.TelephoneBuilder: android.text.style.TtsSpan.TelephoneBuilder setCountryCode(java.lang.String)>
<android.text.style.TtsSpan.TelephoneBuilder: android.text.style.TtsSpan.TelephoneBuilder setExtension(java.lang.String)>
<android.text.style.TtsSpan.TelephoneBuilder: void <init>(String)>
<android.media.AudioRecord: int read(java.nio.ByteBuffer,int,int)>
<android.media.AudioRecord: int read(byte[],int,int,int)>
<android.media.AudioRecord: android.os.PersistableBundle getMetrics()>
<android.media.AudioRecord: boolean setPreferredMicrophoneDirection(int)>
<android.media.AudioRecord: boolean setPreferredMicrophoneFieldDimension(float)>
<android.media.AudioRecord: void <init>(android.media.AudioAttributes,android.media.AudioFormat,int,int)>
<android.media.AudioRecord: void removeOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener)>
<android.media.AudioRecord: void startRecording()>
<android.media.AudioRecord: android.media.AudioFormat getFormat()>
<android.media.AudioRecord: int getAudioSource()>
<android.media.AudioRecord: int read(short[],int,int)>
<android.media.AudioRecord: void unregisterAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback)>
<android.media.AudioRecord: void <init>(int,int,int,int,int)>
<android.media.AudioRecord: int getSampleRate()>
<android.media.AudioRecord: android.media.AudioDeviceInfo getRoutedDevice()>
<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord.OnRecordPositionUpdateListener)>
<android.media.AudioRecord: int getAudioFormat()>
<android.media.AudioRecord: int getBufferSizeInFrames()>
<android.media.AudioRecord: java.util.List getActiveMicrophones()>
<android.media.AudioRecord: int getChannelCount()>
<android.media.AudioRecord: int getChannelConfiguration()>
<android.media.AudioRecord: void finalize()>
<android.media.AudioRecord: void removeOnRoutingChangedListener(android.media.AudioRecord.OnRoutingChangedListener)>
<android.media.AudioRecord: int setPositionNotificationPeriod(int)>
<android.media.AudioRecord: void addOnRoutingChangedListener(android.media.AudioRecord.OnRoutingChangedListener,android.os.Handler)>
<android.media.AudioRecord: int setNotificationMarkerPosition(int)>
<android.media.AudioRecord: void startRecording(android.media.MediaSyncEvent)>
<android.media.AudioRecord: int read(float[],int,int,int)>
<android.media.AudioRecord: void release()>
<android.media.AudioRecord: int getState()>
<android.media.AudioRecord: boolean setPreferredDevice(android.media.AudioDeviceInfo)>
<android.media.AudioRecord: int getMinBufferSize(int,int,int)>
<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)>
<android.media.AudioRecord: int getRecordingState()>
<android.media.AudioRecord: void registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager.AudioRecordingCallback)>
<android.media.AudioRecord: int getTimestamp(android.media.AudioTimestamp,int)>
<android.media.AudioRecord: int read(byte[],int,int)>
<android.media.AudioRecord: int getAudioSessionId()>
<android.media.AudioRecord: int getNotificationMarkerPosition()>
<android.media.AudioRecord: int getPositionNotificationPeriod()>
<android.media.AudioRecord: android.media.AudioDeviceInfo getPreferredDevice()>
<android.media.AudioRecord: int read(short[],int,int,int)>
<android.media.AudioRecord: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()>
<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord.OnRecordPositionUpdateListener,android.os.Handler)>
<android.media.AudioRecord: void stop()>
<android.media.AudioRecord: void addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,android.os.Handler)>
<android.speech.tts.TextToSpeech.OnInitListener: void onInit(int)>
<javax.xml.datatype.XMLGregorianCalendar: void setYear(java.math.BigInteger)>
<javax.xml.datatype.XMLGregorianCalendar: void setFractionalSecond(java.math.BigDecimal)>
<javax.xml.datatype.XMLGregorianCalendar: boolean isValid()>
<javax.xml.datatype.XMLGregorianCalendar: void setTime(int,int,int,java.math.BigDecimal)>
<javax.xml.datatype.XMLGregorianCalendar: void setMonth(int)>
<javax.xml.datatype.XMLGregorianCalendar: int getHour()>
<javax.xml.datatype.XMLGregorianCalendar: int getMonth()>
<javax.xml.datatype.XMLGregorianCalendar: void <init>()>
<javax.xml.datatype.XMLGregorianCalendar: void add(javax.xml.datatype.Duration)>
<javax.xml.datatype.XMLGregorianCalendar: void clear()>
<javax.xml.datatype.XMLGregorianCalendar: int getTimezone()>
<javax.xml.datatype.XMLGregorianCalendar: java.math.BigDecimal getFractionalSecond()>
<javax.xml.datatype.XMLGregorianCalendar: java.util.TimeZone getTimeZone(int)>
<javax.xml.datatype.XMLGregorianCalendar: java.lang.String toXMLFormat()>
<javax.xml.datatype.XMLGregorianCalendar: void setDay(int)>
<javax.xml.datatype.XMLGregorianCalendar: int getMillisecond()>
<javax.xml.datatype.XMLGregorianCalendar: javax.xml.datatype.XMLGregorianCalendar normalize()>
<javax.xml.datatype.XMLGregorianCalendar: void setTime(int,int,int,int)>
<javax.xml.datatype.XMLGregorianCalendar: void setSecond(int)>
<javax.xml.datatype.XMLGregorianCalendar: java.lang.Object clone()>
<javax.xml.datatype.XMLGregorianCalendar: void reset()>
<javax.xml.datatype.XMLGregorianCalendar: void setTimezone(int)>
<javax.xml.datatype.XMLGregorianCalendar: void setTime(int,int,int)>
<javax.xml.datatype.XMLGregorianCalendar: java.math.BigInteger getEonAndYear()>
<javax.xml.datatype.XMLGregorianCalendar: int getDay()>
<javax.xml.datatype.XMLGregorianCalendar: void setMinute(int)>
<javax.xml.datatype.XMLGregorianCalendar: int getMinute()>
<javax.xml.datatype.XMLGregorianCalendar: void setHour(int)>
<javax.xml.datatype.XMLGregorianCalendar: int compare(javax.xml.datatype.XMLGregorianCalendar)>
<javax.xml.datatype.XMLGregorianCalendar: java.math.BigInteger getEon()>
<javax.xml.datatype.XMLGregorianCalendar: java.util.GregorianCalendar toGregorianCalendar(java.util.TimeZone,java.util.Locale,javax.xml.datatype.XMLGregorianCalendar)>
<javax.xml.datatype.XMLGregorianCalendar: int getSecond()>
<javax.xml.datatype.XMLGregorianCalendar: void setYear(int)>
<javax.xml.datatype.XMLGregorianCalendar: javax.xml.namespace.QName getXMLSchemaType()>
<javax.xml.datatype.XMLGregorianCalendar: void setMillisecond(int)>
<javax.xml.datatype.XMLGregorianCalendar: int getYear()>
<javax.xml.datatype.XMLGregorianCalendar: java.util.GregorianCalendar toGregorianCalendar()>
<android.hardware.location.NanoAppFilter: void <init>(long,int,int,long)>
<android.hardware.location.NanoAppFilter: void writeToParcel(android.os.Parcel,int)>
<android.hardware.location.NanoAppFilter: boolean testMatch(android.hardware.location.NanoAppInstanceInfo)>
<android.hardware.location.NanoAppFilter: int describeContents()>
<android.companion.CompanionDeviceManager.Callback: void <init>()>
<android.companion.CompanionDeviceManager.Callback: void onDeviceFound(android.content.IntentSender)>
<android.companion.CompanionDeviceManager.Callback: void onFailure(CharSequence)>
<android.text.style.LeadingMarginSpan.Standard: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,CharSequence,int,int,boolean,android.text.Layout)>
<android.text.style.LeadingMarginSpan.Standard: int describeContents()>
<android.text.style.LeadingMarginSpan.Standard: int getLeadingMargin(boolean)>
<android.text.style.LeadingMarginSpan.Standard: void writeToParcel(android.os.Parcel,int)>
<android.text.style.LeadingMarginSpan.Standard: int getSpanTypeId()>
<android.text.style.LeadingMarginSpan.Standard: void <init>(android.os.Parcel)>
<android.text.style.LeadingMarginSpan.Standard: void <init>(int,int)>
<android.text.style.LeadingMarginSpan.Standard: void <init>(int)>
<android.service.oemlock.OemLockManager: boolean isOemUnlockAllowedByCarrier()>
<android.service.oemlock.OemLockManager: void setOemUnlockAllowedByCarrier(boolean,byte[])>
<android.service.oemlock.OemLockManager: boolean isOemUnlockAllowedByUser()>
<android.service.oemlock.OemLockManager: void setOemUnlockAllowedByUser(boolean)>
<android.service.oemlock.OemLockManager: java.lang.String getLockName()>
<android.content.pm.PackageInstaller.SessionCallback: void onBadgingChanged(int)>
<android.content.pm.PackageInstaller.SessionCallback: void onProgressChanged(int,float)>
<android.content.pm.PackageInstaller.SessionCallback: void onCreated(int)>
<android.content.pm.PackageInstaller.SessionCallback: void onActiveChanged(int,boolean)>
<android.content.pm.PackageInstaller.SessionCallback: void onFinished(int,boolean)>
<android.content.pm.PackageInstaller.SessionCallback: void <init>()>
<java.io.FileFilter: boolean accept(java.io.File)>
<android.provider.UserDictionary.Words: void <init>()>
<android.provider.UserDictionary.Words: void addWord(android.content.Context,java.lang.String,int,int)>
<android.provider.UserDictionary.Words: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)>
<android.widget.ScrollView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ScrollView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ScrollView: int getTopEdgeEffectColor()>
<android.widget.ScrollView: void setEdgeEffectColor(@ColorIntint)>
<android.widget.ScrollView: boolean fullScroll(int)>
<android.widget.ScrollView: void scrollToDescendant(android.view.View)>
<android.widget.ScrollView: boolean arrowScroll(int)>
<android.widget.ScrollView: void setSmoothScrollingEnabled(boolean)>
<android.widget.ScrollView: void smoothScrollTo(int,int)>
<android.widget.ScrollView: void <init>(android.content.Context)>
<android.widget.ScrollView: int getMaxScrollAmount()>
<android.widget.ScrollView: void smoothScrollBy(int,int)>
<android.widget.ScrollView: boolean isFillViewport()>
<android.widget.ScrollView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ScrollView: boolean pageScroll(int)>
<android.widget.ScrollView: boolean executeKeyEvent(android.view.KeyEvent)>
<android.widget.ScrollView: void fling(int)>
<android.widget.ScrollView: int getBottomEdgeEffectColor()>
<android.widget.ScrollView: void setFillViewport(boolean)>
<android.widget.ScrollView: int computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect)>
<android.widget.ScrollView: boolean isSmoothScrollingEnabled()>
<android.widget.ScrollView: void setBottomEdgeEffectColor(@ColorIntint)>
<android.widget.ScrollView: void setTopEdgeEffectColor(@ColorIntint)>
<android.os.IncidentManager: void cancelAuthorization(android.os.IncidentManager.AuthListener)>
<android.os.IncidentManager: void deleteIncidentReports(android.net.Uri)>
<android.os.IncidentManager: void approveReport(android.net.Uri)>
<android.os.IncidentManager: java.util.List getPendingReports()>
<android.os.IncidentManager: void requestAuthorization(int,java.lang.String,int,android.os.IncidentManager.AuthListener)>
<android.os.IncidentManager: void denyReport(android.net.Uri)>
<android.os.IncidentManager: void reportIncident(android.os.IncidentReportArgs)>
<android.os.IncidentManager: java.util.List getIncidentReportList(java.lang.String)>
<android.os.IncidentManager: android.os.IncidentManager.IncidentReport getIncidentReport(android.net.Uri)>
<android.widget.CheckedTextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.CheckedTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.CheckedTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.CheckedTextView: android.graphics.drawable.Drawable getCheckMarkDrawable()>
<android.widget.CheckedTextView: android.graphics.PorterDuff.Mode getCheckMarkTintMode()>
<android.widget.CheckedTextView: boolean isChecked()>
<android.widget.CheckedTextView: void <init>(android.content.Context)>
<android.widget.CheckedTextView: void setCheckMarkDrawable(@DrawableResint)>
<android.widget.CheckedTextView: android.content.res.ColorStateList getCheckMarkTintList()>
<android.widget.CheckedTextView: void setCheckMarkTintMode(android.graphics.PorterDuff.Mode)>
<android.widget.CheckedTextView: void setCheckMarkDrawable(android.graphics.drawable.Drawable)>
<android.widget.CheckedTextView: void setChecked(boolean)>
<android.widget.CheckedTextView: void toggle()>
<android.widget.CheckedTextView: void setCheckMarkTintBlendMode(android.graphics.BlendMode)>
<android.widget.CheckedTextView: android.graphics.BlendMode getCheckMarkTintBlendMode()>
<android.widget.CheckedTextView: void setCheckMarkTintList(android.content.res.ColorStateList)>
<android.telephony.mbms.StreamingServiceInfo: int describeContents()>
<android.telephony.mbms.StreamingServiceInfo: void <init>(java.util.Map,String,java.util.List,String,java.util.Date,java.util.Date)>
<android.telephony.mbms.StreamingServiceInfo: void writeToParcel(android.os.Parcel,int)>
<java.lang.reflect.InvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>
<android.media.audiopolicy.AudioPolicy: android.media.AudioTrack createAudioTrackSource(android.media.audiopolicy.AudioMix)>
<android.media.audiopolicy.AudioPolicy: int attachMixes(java.util.List)>
<android.media.audiopolicy.AudioPolicy: int getStatus()>
<android.media.audiopolicy.AudioPolicy: void setRegistration(java.lang.String)>
<android.media.audiopolicy.AudioPolicy: int getFocusDuckingBehavior()>
<android.media.audiopolicy.AudioPolicy: int detachMixes(java.util.List)>
<android.media.audiopolicy.AudioPolicy: boolean setUidDeviceAffinity(int,java.util.List)>
<android.media.audiopolicy.AudioPolicy: int setFocusDuckingBehavior(int)>
<android.media.audiopolicy.AudioPolicy: android.media.AudioRecord createAudioRecordSink(android.media.audiopolicy.AudioMix)>
<android.media.audiopolicy.AudioPolicy: boolean removeUidDeviceAffinity(int)>
<android.media.audiopolicy.AudioPolicy: java.lang.String toLogFriendlyString()>
<java.lang.ExceptionInInitializerError: java.lang.Throwable getException()>
<java.lang.ExceptionInInitializerError: void <init>()>
<java.lang.ExceptionInInitializerError: void <init>(Throwable)>
<java.lang.ExceptionInInitializerError: void <init>(String)>
<android.icu.text.DateIntervalFormat: android.icu.text.DateIntervalFormat getInstance(java.lang.String,android.icu.util.ULocale)>
<android.icu.text.DateIntervalFormat: android.icu.text.DateIntervalFormat getInstance(java.lang.String,android.icu.text.DateIntervalInfo)>
<android.icu.text.DateIntervalFormat: void setTimeZone(android.icu.util.TimeZone)>
<android.icu.text.DateIntervalFormat: android.icu.util.TimeZone getTimeZone()>
<android.icu.text.DateIntervalFormat: android.icu.text.DateIntervalFormat getInstance(java.lang.String)>
<android.icu.text.DateIntervalFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.DateIntervalFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>
<android.icu.text.DateIntervalFormat: android.icu.text.DateIntervalInfo getDateIntervalInfo()>
<android.icu.text.DateIntervalFormat: java.lang.StringBuffer format(android.icu.util.DateInterval,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.DateIntervalFormat: android.icu.text.DateFormat getDateFormat()>
<android.icu.text.DateIntervalFormat: java.lang.StringBuffer format(android.icu.util.Calendar,android.icu.util.Calendar,java.lang.StringBuffer,java.text.FieldPosition)>
<android.icu.text.DateIntervalFormat: android.icu.text.DateIntervalFormat getInstance(java.lang.String,java.util.Locale,android.icu.text.DateIntervalInfo)>
<android.icu.text.DateIntervalFormat: android.icu.text.DateIntervalFormat getInstance(java.lang.String,java.util.Locale)>
<android.icu.text.DateIntervalFormat: android.icu.text.DateIntervalFormat getInstance(java.lang.String,android.icu.util.ULocale,android.icu.text.DateIntervalInfo)>
<android.icu.text.DateIntervalFormat: void setDateIntervalInfo(android.icu.text.DateIntervalInfo)>
<java.net.SocketAddress: void <init>()>
<android.provider.CalendarContract.Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)>
<android.provider.CalendarContract.Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)>
<java.lang.NoSuchMethodException: void <init>()>
<java.lang.NoSuchMethodException: void <init>(String)>
<android.widget.TimePicker.OnTimeChangedListener: void onTimeChanged(android.widget.TimePicker,int,int)>
<android.inputmethodservice.InputMethodService: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.inputmethodservice.InputMethodService: void onUpdateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)>
<android.inputmethodservice.InputMethodService: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>
<android.inputmethodservice.InputMethodService: void switchInputMethod(java.lang.String)>
<android.inputmethodservice.InputMethodService: void onExtractedTextClicked()>
<android.inputmethodservice.InputMethodService: void onWindowShown()>
<android.inputmethodservice.InputMethodService: void switchInputMethod(java.lang.String,android.view.inputmethod.InputMethodSubtype)>
<android.inputmethodservice.InputMethodService: void updateInputViewShown()>
<android.inputmethodservice.InputMethodService: int getBackDisposition()>
<android.inputmethodservice.InputMethodService: void requestShowSelf(int)>
<android.inputmethodservice.InputMethodService: int getMaxWidth()>
<android.inputmethodservice.InputMethodService: void onExtractingInputChanged(android.view.inputmethod.EditorInfo)>
<android.inputmethodservice.InputMethodService: android.view.View onCreateInputView()>
<android.inputmethodservice.InputMethodService: android.view.View onCreateExtractTextView()>
<android.inputmethodservice.InputMethodService: boolean onKeyDown(int,android.view.KeyEvent)>
<android.inputmethodservice.InputMethodService: boolean sendDefaultEditorAction(boolean)>
<android.inputmethodservice.InputMethodService: void onUpdateCursor(android.graphics.Rect)>
<android.inputmethodservice.InputMethodService: void setExtractViewShown(boolean)>
<android.inputmethodservice.InputMethodService: boolean isFullscreenMode()>
<android.inputmethodservice.InputMethodService: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)>
<android.inputmethodservice.InputMethodService: void onCurrentInputMethodSubtypeChanged(android.view.inputmethod.InputMethodSubtype)>
<android.inputmethodservice.InputMethodService: boolean isExtractViewShown()>
<android.inputmethodservice.InputMethodService: void showWindow(boolean)>
<android.inputmethodservice.InputMethodService: boolean switchToPreviousInputMethod()>
<android.inputmethodservice.InputMethodService: void updateFullscreenMode()>
<android.inputmethodservice.InputMethodService: boolean getCurrentInputStarted()>
<android.inputmethodservice.InputMethodService: int getInputMethodWindowRecommendedHeight()>
<android.inputmethodservice.InputMethodService: void sendKeyChar(char)>
<android.inputmethodservice.InputMethodService: void onBindInput()>
<android.inputmethodservice.InputMethodService: void onDisplayCompletions(android.view.inputmethod.CompletionInfo[])>
<android.inputmethodservice.InputMethodService: void hideStatusIcon()>
<android.inputmethodservice.InputMethodService: void onStartInput(android.view.inputmethod.EditorInfo,boolean)>
<android.inputmethodservice.InputMethodService: boolean shouldOfferSwitchingToNextInputMethod()>
<android.inputmethodservice.InputMethodService: void onUpdateExtractingViews(android.view.inputmethod.EditorInfo)>
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputBinding getCurrentInputBinding()>
<android.inputmethodservice.InputMethodService: boolean onEvaluateInputViewShown()>
<android.inputmethodservice.InputMethodService: android.app.Dialog getWindow()>
<android.inputmethodservice.InputMethodService: void onExtractedCursorMovement(int,int)>
<android.inputmethodservice.InputMethodService: void onInitializeInterface()>
<android.inputmethodservice.InputMethodService: void setCandidatesViewShown(boolean)>
<android.inputmethodservice.InputMethodService: void setInputView(android.view.View)>
<android.inputmethodservice.InputMethodService: boolean isShowInputRequested()>
<android.inputmethodservice.InputMethodService: void onAppPrivateCommand(java.lang.String,android.os.Bundle)>
<android.inputmethodservice.InputMethodService: void <init>()>
<android.inputmethodservice.InputMethodService: void setBackDisposition(int)>
<android.inputmethodservice.InputMethodService: void onFinishInputView(boolean)>
<android.inputmethodservice.InputMethodService: void onFinishInput()>
<android.inputmethodservice.InputMethodService: void onViewClicked(boolean)>
<android.inputmethodservice.InputMethodService: android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodImpl onCreateInputMethodInterface()>
<android.inputmethodservice.InputMethodService: boolean onShowInputRequested(int,boolean)>
<android.inputmethodservice.InputMethodService: android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl onCreateInputMethodSessionInterface()>
<android.inputmethodservice.InputMethodService: void setCandidatesView(android.view.View)>
<android.inputmethodservice.InputMethodService: void onComputeInsets(android.inputmethodservice.InputMethodService.Insets)>
<android.inputmethodservice.InputMethodService: void onUnbindInput()>
<android.inputmethodservice.InputMethodService: CharSequence getTextForImeAction(int)>
<android.inputmethodservice.InputMethodService: android.view.LayoutInflater getLayoutInflater()>
<android.inputmethodservice.InputMethodService: void showStatusIcon(@DrawableResint)>
<android.inputmethodservice.InputMethodService: int getCandidatesHiddenVisibility()>
<android.inputmethodservice.InputMethodService: boolean enableHardwareAcceleration()>
<android.inputmethodservice.InputMethodService: void requestHideSelf(int)>
<android.inputmethodservice.InputMethodService: void onStartCandidatesView(android.view.inputmethod.EditorInfo,boolean)>
<android.inputmethodservice.InputMethodService: void sendDownUpKeyEvents(int)>
<android.inputmethodservice.InputMethodService: boolean onEvaluateFullscreenMode()>
<android.inputmethodservice.InputMethodService: void onExtractedSelectionChanged(int,int)>
<android.inputmethodservice.InputMethodService: void onFinishCandidatesView(boolean)>
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputConnection getCurrentInputConnection()>
<android.inputmethodservice.InputMethodService: boolean onKeyUp(int,android.view.KeyEvent)>
<android.inputmethodservice.InputMethodService: boolean switchToNextInputMethod(boolean)>
<android.inputmethodservice.InputMethodService: void hideWindow()>
<android.inputmethodservice.InputMethodService: void onConfigureWindow(android.view.Window,boolean,boolean)>
<android.inputmethodservice.InputMethodService: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.inputmethodservice.InputMethodService: void setExtractView(android.view.View)>
<android.inputmethodservice.InputMethodService: void onWindowHidden()>
<android.inputmethodservice.InputMethodService: boolean isInputViewShown()>
<android.inputmethodservice.InputMethodService: void onUpdateExtractedText(int,android.view.inputmethod.ExtractedText)>
<android.inputmethodservice.InputMethodService: void onUpdateExtractingVisibility(android.view.inputmethod.EditorInfo)>
<android.inputmethodservice.InputMethodService: boolean onExtractTextContextMenuItem(int)>
<android.inputmethodservice.InputMethodService: android.view.View onCreateCandidatesView()>
<android.inputmethodservice.InputMethodService: void onUpdateSelection(int,int,int,int,int,int)>
<android.view.textclassifier.TextLinks.Request.Builder: android.view.textclassifier.TextLinks.Request.Builder setEntityConfig(android.view.textclassifier.TextClassifier.EntityConfig)>
<android.view.textclassifier.TextLinks.Request.Builder: android.view.textclassifier.TextLinks.Request.Builder setDefaultLocales(android.os.LocaleList)>
<android.view.textclassifier.TextLinks.Request.Builder: void <init>(CharSequence)>
<android.view.textclassifier.TextLinks.Request.Builder: android.view.textclassifier.TextLinks.Request.Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.TextLinks.Request.Builder: android.view.textclassifier.TextLinks.Request build()>
<android.text.method.LinkMovementMethod: void <init>()>
<android.text.method.LinkMovementMethod: android.text.method.MovementMethod getInstance()>
<java.util.Locale.Builder: java.util.Locale.Builder clearExtensions()>
<java.util.Locale.Builder: java.util.Locale.Builder addUnicodeLocaleAttribute(java.lang.String)>
<java.util.Locale.Builder: java.util.Locale.Builder clear()>
<java.util.Locale.Builder: java.util.Locale.Builder setScript(java.lang.String)>
<java.util.Locale.Builder: java.util.Locale.Builder removeUnicodeLocaleAttribute(java.lang.String)>
<java.util.Locale.Builder: void <init>()>
<java.util.Locale.Builder: java.util.Locale.Builder setUnicodeLocaleKeyword(java.lang.String,java.lang.String)>
<java.util.Locale.Builder: java.util.Locale.Builder setLanguageTag(java.lang.String)>
<java.util.Locale.Builder: java.util.Locale.Builder setLanguage(java.lang.String)>
<java.util.Locale.Builder: java.util.Locale.Builder setExtension(char,java.lang.String)>
<java.util.Locale.Builder: java.util.Locale.Builder setLocale(java.util.Locale)>
<java.util.Locale.Builder: java.util.Locale build()>
<java.util.Locale.Builder: java.util.Locale.Builder setRegion(java.lang.String)>
<java.util.Locale.Builder: java.util.Locale.Builder setVariant(java.lang.String)>
<android.view.inputmethod.InputMethodInfo: java.lang.String getSettingsActivity()>
<android.view.inputmethod.InputMethodInfo: void dump(android.util.Printer,java.lang.String)>
<android.view.inputmethod.InputMethodInfo: int getIsDefaultResourceId()>
<android.view.inputmethod.InputMethodInfo: int describeContents()>
<android.view.inputmethod.InputMethodInfo: java.lang.String getPackageName()>
<android.view.inputmethod.InputMethodInfo: java.lang.String getServiceName()>
<android.view.inputmethod.InputMethodInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>
<android.view.inputmethod.InputMethodInfo: android.content.ComponentName getComponent()>
<android.view.inputmethod.InputMethodInfo: int getSubtypeCount()>
<android.view.inputmethod.InputMethodInfo: android.view.inputmethod.InputMethodSubtype getSubtypeAt(int)>
<android.view.inputmethod.InputMethodInfo: android.content.pm.ServiceInfo getServiceInfo()>
<android.view.inputmethod.InputMethodInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.InputMethodInfo: java.lang.String getId()>
<android.view.inputmethod.InputMethodInfo: void <init>(String,String,CharSequence,String)>
<android.view.inputmethod.InputMethodInfo: CharSequence loadLabel(android.content.pm.PackageManager)>
<android.view.inputmethod.InputMethodInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject: long awaitNanos(long)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject: void awaitUninterruptibly()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject: boolean awaitUntil(java.util.Date)>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject: int getWaitQueueLength()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject: boolean hasWaiters()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject: java.util.Collection getWaitingThreads()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject: void await()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject: void <init>()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject: void signalAll()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject: void signal()>
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject: boolean await(long,java.util.concurrent.TimeUnit)>
<android.service.euicc.EuiccProfileInfo.Builder: void <init>(android.service.euicc.EuiccProfileInfo)>
<android.service.euicc.EuiccProfileInfo.Builder: android.service.euicc.EuiccProfileInfo.Builder setCarrierIdentifier(android.service.carrier.CarrierIdentifier)>
<android.service.euicc.EuiccProfileInfo.Builder: android.service.euicc.EuiccProfileInfo.Builder setUiccAccessRule(java.util.List)>
<android.service.euicc.EuiccProfileInfo.Builder: android.service.euicc.EuiccProfileInfo.Builder setNickname(java.lang.String)>
<android.service.euicc.EuiccProfileInfo.Builder: android.service.euicc.EuiccProfileInfo.Builder setServiceProviderName(java.lang.String)>
<android.service.euicc.EuiccProfileInfo.Builder: android.service.euicc.EuiccProfileInfo.Builder setPolicyRules(@android.service.euicc.EuiccProfileInfo.PolicyRuleint)>
<android.service.euicc.EuiccProfileInfo.Builder: android.service.euicc.EuiccProfileInfo.Builder setProfileName(java.lang.String)>
<android.service.euicc.EuiccProfileInfo.Builder: android.service.euicc.EuiccProfileInfo.Builder setState(@android.service.euicc.EuiccProfileInfo.ProfileStateint)>
<android.service.euicc.EuiccProfileInfo.Builder: void <init>(String)>
<android.service.euicc.EuiccProfileInfo.Builder: android.service.euicc.EuiccProfileInfo build()>
<android.service.euicc.EuiccProfileInfo.Builder: android.service.euicc.EuiccProfileInfo.Builder setIccid(java.lang.String)>
<android.service.euicc.EuiccProfileInfo.Builder: android.service.euicc.EuiccProfileInfo.Builder setProfileClass(@android.service.euicc.EuiccProfileInfo.ProfileClassint)>
<android.net.wifi.rtt.RangingRequest.Builder: void <init>()>
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addWifiAwarePeer(android.net.wifi.aware.PeerHandle)>
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest build()>
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addAccessPoint(android.net.wifi.ScanResult)>
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addWifiAwarePeer(android.net.MacAddress)>
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addAccessPoints(java.util.List)>
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addResponder(android.net.wifi.rtt.ResponderConfig)>
<java.time.LocalTime: boolean isBefore(java.time.LocalTime)>
<java.time.LocalTime: java.time.LocalTime withNano(int)>
<java.time.LocalTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>
<java.time.LocalTime: int minLength()>
<java.time.LocalTime: java.time.Month of(int)>
<java.time.LocalTime: long getLong(java.time.temporal.TemporalField)>
<java.time.LocalTime: int maxLength()>
<java.time.LocalTime: java.time.Month from(java.time.temporal.TemporalAccessor)>
<java.time.LocalTime: long toNanoOfDay()>
<java.time.LocalTime: java.lang.String format(java.time.format.DateTimeFormatter)>
<java.time.LocalTime: java.time.LocalTime plus(long,java.time.temporal.TemporalUnit)>
<java.time.LocalTime: java.time.Month minus(long)>
<java.time.LocalTime: java.time.LocalTime minus(java.time.temporal.TemporalAmount)>
<java.time.LocalTime: java.time.LocalTime withSecond(int)>
<java.time.LocalTime: java.time.LocalTime now(java.time.ZoneId)>
<java.time.LocalTime: java.time.LocalTime from(java.time.temporal.TemporalAccessor)>
<java.time.LocalTime: java.time.LocalTime plus(java.time.temporal.TemporalAmount)>
<java.time.LocalTime: java.time.LocalTime plusSeconds(long)>
<java.time.LocalTime: java.time.LocalTime truncatedTo(java.time.temporal.TemporalUnit)>
<java.time.LocalTime: java.time.LocalTime ofNanoOfDay(long)>
<java.time.LocalTime: int compareTo(java.time.LocalTime)>
<java.time.LocalTime: java.time.LocalTime of(int,int,int,int)>
<java.time.LocalTime: java.time.LocalTime plusMinutes(long)>
<java.time.LocalTime: int toSecondOfDay()>
<java.time.LocalTime: java.time.LocalTime plusHours(long)>
<java.time.LocalTime: java.time.LocalTime with(java.time.temporal.TemporalAdjuster)>
<java.time.LocalTime: java.time.Month plus(long)>
<java.time.LocalTime: java.time.LocalTime of(int,int)>
<java.time.LocalTime: java.time.LocalTime parse(CharSequence,java.time.format.DateTimeFormatter)>
<java.time.LocalTime: int getSecond()>
<java.time.LocalTime: int length(boolean)>
<java.time.LocalTime: boolean isAfter(java.time.LocalTime)>
<java.time.LocalTime: int firstDayOfYear(boolean)>
<java.time.LocalTime: java.time.LocalTime minusNanos(long)>
<java.time.LocalTime: int getValue()>
<java.time.LocalTime: java.time.LocalTime parse(CharSequence)>
<java.time.LocalTime: java.time.LocalTime plusNanos(long)>
<java.time.LocalTime: int getHour()>
<java.time.LocalTime: java.time.LocalTime ofSecondOfDay(long)>
<java.time.LocalTime: java.time.LocalTime withHour(int)>
<java.time.LocalTime: java.time.LocalTime withMinute(int)>
<java.time.LocalTime: boolean isSupported(java.time.temporal.TemporalUnit)>
<java.time.LocalTime: java.time.LocalTime of(int,int,int)>
<java.time.LocalTime: java.time.Month firstMonthOfQuarter()>
<java.time.LocalTime: java.time.LocalTime minusHours(long)>
<java.time.LocalTime: java.time.LocalTime now()>
<java.time.LocalTime: int getNano()>
<java.time.LocalTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>
<java.time.LocalTime: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>
<java.time.LocalTime: java.time.LocalTime with(java.time.temporal.TemporalField,long)>
<java.time.LocalTime: java.time.LocalTime minus(long,java.time.temporal.TemporalUnit)>
<java.time.LocalTime: java.time.LocalTime now(java.time.Clock)>
<java.time.LocalTime: boolean isSupported(java.time.temporal.TemporalField)>
<java.time.LocalTime: java.time.LocalTime minusMinutes(long)>
<java.time.LocalTime: java.time.OffsetTime atOffset(java.time.ZoneOffset)>
<java.time.LocalTime: int getMinute()>
<java.time.LocalTime: java.time.LocalDateTime atDate(java.time.LocalDate)>
<java.time.LocalTime: java.time.LocalTime minusSeconds(long)>
<android.location.GpsMeasurementsEvent: java.util.Collection getMeasurements()>
<android.location.GpsMeasurementsEvent: int describeContents()>
<android.location.GpsMeasurementsEvent: void <init>(android.location.GpsClock,android.location.GpsMeasurement[])>
<android.location.GpsMeasurementsEvent: void writeToParcel(android.os.Parcel,int)>
<android.location.GpsMeasurementsEvent: android.location.GpsClock getClock()>
<android.webkit.ServiceWorkerClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebResourceRequest)>
<android.webkit.ServiceWorkerClient: void <init>()>
<android.view.View.OnCreateContextMenuListener: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)>
<java.util.regex.PatternSyntaxException: java.lang.String getPattern()>
<java.util.regex.PatternSyntaxException: int getIndex()>
<java.util.regex.PatternSyntaxException: java.lang.String getDescription()>
<java.util.regex.PatternSyntaxException: void <init>(String,String,int)>
<android.telephony.CellInfoCdma: android.telephony.CellIdentityCdma getCellIdentity()>
<android.telephony.CellInfoCdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellInfoCdma: android.telephony.CellSignalStrengthCdma getCellSignalStrength()>
<android.media.MicrophoneInfo: java.util.List getChannelMapping()>
<android.media.MicrophoneInfo: int getId()>
<android.media.MicrophoneInfo: android.media.MicrophoneInfo.Coordinate3F getOrientation()>
<android.media.MicrophoneInfo: int getGroup()>
<android.media.MicrophoneInfo: int getLocation()>
<android.media.MicrophoneInfo: float getMinSpl()>
<android.media.MicrophoneInfo: int getType()>
<android.media.MicrophoneInfo: float getMaxSpl()>
<android.media.MicrophoneInfo: int getIndexInTheGroup()>
<android.media.MicrophoneInfo: android.media.MicrophoneInfo.Coordinate3F getPosition()>
<android.media.MicrophoneInfo: java.lang.String getDescription()>
<android.media.MicrophoneInfo: java.lang.String getAddress()>
<android.media.MicrophoneInfo: float getSensitivity()>
<android.media.MicrophoneInfo: int getDirectionality()>
<android.media.MicrophoneInfo: java.util.List getFrequencyResponse()>
<android.opengl.EGLExt: boolean eglPresentationTimeANDROID(android.opengl.EGLDisplay,android.opengl.EGLSurface,long)>
<android.opengl.EGLExt: void <init>()>
<android.net.wifi.p2p.WifiP2pManager.DiscoveryStateListener: void onDiscoveryStateAvailable(int)>
<java.nio.file.FileSystemException: void <init>(String,String,String)>
<java.nio.file.FileSystemException: java.lang.String getFile()>
<java.nio.file.FileSystemException: void <init>(String)>
<java.nio.file.FileSystemException: java.lang.String getReason()>
<java.nio.file.FileSystemException: java.lang.String getOtherFile()>
<android.app.slice.SliceMetrics: void logTouch(int,android.net.Uri)>
<android.app.slice.SliceMetrics: void logVisible()>
<android.app.slice.SliceMetrics: void logHidden()>
<android.app.slice.SliceMetrics: void <init>(android.content.Context,android.net.Uri)>
<android.view.GestureDetector.SimpleOnGestureListener: boolean onSingleTapUp(android.view.MotionEvent)>
<android.view.GestureDetector.SimpleOnGestureListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.view.GestureDetector.SimpleOnGestureListener: boolean onDoubleTap(android.view.MotionEvent)>
<android.view.GestureDetector.SimpleOnGestureListener: boolean onDoubleTapEvent(android.view.MotionEvent)>
<android.view.GestureDetector.SimpleOnGestureListener: void <init>()>
<android.view.GestureDetector.SimpleOnGestureListener: boolean onDown(android.view.MotionEvent)>
<android.view.GestureDetector.SimpleOnGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.view.GestureDetector.SimpleOnGestureListener: void onShowPress(android.view.MotionEvent)>
<android.view.GestureDetector.SimpleOnGestureListener: boolean onSingleTapConfirmed(android.view.MotionEvent)>
<android.view.GestureDetector.SimpleOnGestureListener: boolean onContextClick(android.view.MotionEvent)>
<android.view.GestureDetector.SimpleOnGestureListener: void onLongPress(android.view.MotionEvent)>
<java.util.concurrent.atomic.AtomicMarkableReference: boolean weakCompareAndSet(V,V,boolean,boolean)>
<java.util.concurrent.atomic.AtomicMarkableReference: V get(boolean[])>
<java.util.concurrent.atomic.AtomicMarkableReference: boolean attemptMark(V,boolean)>
<java.util.concurrent.atomic.AtomicMarkableReference: V getReference()>
<java.util.concurrent.atomic.AtomicMarkableReference: void set(V,boolean)>
<java.util.concurrent.atomic.AtomicMarkableReference: void <init>(V,boolean)>
<java.util.concurrent.atomic.AtomicMarkableReference: boolean isMarked()>
<java.util.concurrent.atomic.AtomicMarkableReference: boolean compareAndSet(V,V,boolean,boolean)>
<android.widget.CalendarView.OnDateChangeListener: void onSelectedDayChange(android.widget.CalendarView,int,int,int)>
<java.net.InetSocketAddress: int hashCode()>
<java.net.InetSocketAddress: java.net.InetAddress getAddress()>
<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>
<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>
<java.net.InetSocketAddress: void <init>(String,int)>
<java.net.InetSocketAddress: boolean equals(java.lang.Object)>
<java.net.InetSocketAddress: java.lang.String getHostName()>
<java.net.InetSocketAddress: boolean isUnresolved()>
<java.net.InetSocketAddress: int getPort()>
<java.net.InetSocketAddress: java.lang.String getHostString()>
<java.net.InetSocketAddress: void <init>(int)>
<android.app.DownloadManager: android.os.ParcelFileDescriptor openDownloadedFile(long)>
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)>
<android.app.DownloadManager: java.lang.Long getRecommendedMaxBytesOverMobile(android.content.Context)>
<android.app.DownloadManager: long enqueue(android.app.DownloadManager.Request)>
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean,android.net.Uri,android.net.Uri)>
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)>
<android.app.DownloadManager: int remove(long...)>
<android.app.DownloadManager: java.lang.Long getMaxBytesOverMobile(android.content.Context)>
<android.app.DownloadManager: java.lang.String getMimeTypeForDownloadedFile(long)>
<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager.Query)>
<android.app.AppOpsManager.OnOpActiveChangedListener: void onOpActiveChanged(int,int,java.lang.String,boolean)>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest newInstance(java.lang.String,java.lang.String)>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest newInstance(java.lang.String)>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest newInstance()>
<android.webkit.ClientCertRequest: void <init>()>
<android.webkit.ClientCertRequest: void cancel()>
<android.webkit.ClientCertRequest: java.lang.String getHost()>
<android.webkit.ClientCertRequest: java.security.Principal[] getPrincipals()>
<android.webkit.ClientCertRequest: void ignore()>
<android.webkit.ClientCertRequest: int getPort()>
<android.webkit.ClientCertRequest: java.lang.String[] getKeyTypes()>
<android.webkit.ClientCertRequest: void proceed(java.security.PrivateKey,java.security.cert.X509Certificate[])>
<android.os.WorkSource.WorkChain: int getAttributionUid()>
<android.os.WorkSource.WorkChain: int describeContents()>
<android.os.WorkSource.WorkChain: java.lang.String getAttributionTag()>
<android.os.WorkSource.WorkChain: void <init>()>
<android.os.WorkSource.WorkChain: void writeToParcel(android.os.Parcel,int)>
<android.os.WorkSource.WorkChain: android.os.WorkSource.WorkChain addNode(int,java.lang.String)>
<android.security.keystore.recovery.LockScreenRequiredException: void <init>(String)>
<java.security.cert.CRLException: void <init>()>
<java.security.cert.CRLException: void <init>(String)>
<java.security.cert.CRLException: void <init>(String,Throwable)>
<java.security.cert.CRLException: void <init>(Throwable)>
<android.app.SearchManager: void onDismiss(android.content.DialogInterface)>
<android.app.SearchManager: void setOnCancelListener(android.app.SearchManager.OnCancelListener)>
<android.app.SearchManager: void stopSearch()>
<android.app.SearchManager: void onCancel(android.content.DialogInterface)>
<android.app.SearchManager: void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean)>
<android.app.SearchManager: android.content.ComponentName getGlobalSearchActivity()>
<android.app.SearchManager: void setOnDismissListener(android.app.SearchManager.OnDismissListener)>
<android.app.SearchManager: java.util.List getSearchablesInGlobalSearch()>
<android.app.SearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>
<android.app.SearchManager: void triggerSearch(java.lang.String,android.content.ComponentName,android.os.Bundle)>
<android.database.sqlite.SQLiteOutOfMemoryException: void <init>(String)>
<android.database.sqlite.SQLiteOutOfMemoryException: void <init>()>
<java.io.UnsupportedEncodingException: void <init>(String)>
<java.io.UnsupportedEncodingException: void <init>()>
<android.media.VolumeShaper.Configuration.Builder: android.media.VolumeShaper.Configuration.Builder setInterpolatorType(int)>
<android.media.VolumeShaper.Configuration.Builder: android.media.VolumeShaper.Configuration.Builder setDuration(long)>
<android.media.VolumeShaper.Configuration.Builder: android.media.VolumeShaper.Configuration.Builder scaleToStartVolume(float)>
<android.media.VolumeShaper.Configuration.Builder: android.media.VolumeShaper.Configuration.Builder setOptionFlags(int)>
<android.media.VolumeShaper.Configuration.Builder: void <init>()>
<android.media.VolumeShaper.Configuration.Builder: void <init>(android.media.VolumeShaper.Configuration)>
<android.media.VolumeShaper.Configuration.Builder: android.media.VolumeShaper.Configuration build()>
<android.media.VolumeShaper.Configuration.Builder: android.media.VolumeShaper.Configuration.Builder invertVolumes()>
<android.media.VolumeShaper.Configuration.Builder: android.media.VolumeShaper.Configuration.Builder reflectTimes()>
<android.media.VolumeShaper.Configuration.Builder: android.media.VolumeShaper.Configuration.Builder setCurve(float[],float[])>
<android.media.VolumeShaper.Configuration.Builder: android.media.VolumeShaper.Configuration.Builder scaleToEndVolume(float)>
<android.text.LoginFilter.UsernameFilterGeneric: void <init>()>
<android.text.LoginFilter.UsernameFilterGeneric: boolean isAllowed(char)>
<android.text.LoginFilter.UsernameFilterGeneric: void <init>(boolean)>
<android.icu.text.UFormat: void <init>()>
<android.media.MediaDescription: android.os.Bundle getExtras()>
<android.media.MediaDescription: android.net.Uri getIconUri()>
<android.media.MediaDescription: java.lang.String getMediaId()>
<android.media.MediaDescription: android.net.Uri getMediaUri()>
<android.media.MediaDescription: int describeContents()>
<android.media.MediaDescription: CharSequence getSubtitle()>
<android.media.MediaDescription: android.graphics.Bitmap getIconBitmap()>
<android.media.MediaDescription: void writeToParcel(android.os.Parcel,int)>
<android.media.MediaDescription: CharSequence getDescription()>
<android.media.MediaDescription: CharSequence getTitle()>
<android.text.StaticLayout: int getLineCount()>
<android.text.StaticLayout: int getEllipsisStart(int)>
<android.text.StaticLayout: void <init>(CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)>
<android.text.StaticLayout: int getBottomPadding()>
<android.text.StaticLayout: android.text.Layout.Directions getLineDirections(int)>
<android.text.StaticLayout: int getParagraphDirection(int)>
<android.text.StaticLayout: void <init>(CharSequence,int,int,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean)>
<android.text.StaticLayout: void <init>(CharSequence,int,int,android.text.TextPaint,int,android.text.Layout.Alignment,float,float,boolean,android.text.TextUtils.TruncateAt,int)>
<android.text.StaticLayout: int getLineDescent(int)>
<android.text.StaticLayout: boolean getLineContainsTab(int)>
<android.text.StaticLayout: int getLineStart(int)>
<android.text.StaticLayout: int getLineTop(int)>
<android.text.StaticLayout: int getTopPadding()>
<android.text.StaticLayout: int getEllipsisCount(int)>
<java.net.ProtocolFamily: java.lang.String name()>
<android.icu.text.CompactDecimalFormat: android.icu.text.CompactDecimalFormat getInstance(java.util.Locale,android.icu.text.CompactDecimalFormat.CompactStyle)>
<android.icu.text.CompactDecimalFormat: android.icu.text.CompactDecimalFormat getInstance(android.icu.util.ULocale,android.icu.text.CompactDecimalFormat.CompactStyle)>
<android.os.CpuUsageInfo: void writeToParcel(android.os.Parcel,int)>
<android.os.CpuUsageInfo: long getTotal()>
<android.os.CpuUsageInfo: long getActive()>
<android.os.CpuUsageInfo: int describeContents()>
<android.media.MediaController2.Builder: android.media.MediaController2.Builder setConnectionHints(android.os.Bundle)>
<android.media.MediaController2.Builder: void <init>(android.content.Context,android.media.Session2Token)>
<android.media.MediaController2.Builder: android.media.MediaController2 build()>
<android.media.MediaController2.Builder: android.media.MediaController2.Builder setControllerCallback(java.util.concurrent.Executor,android.media.MediaController2.ControllerCallback)>
<android.view.inputmethod.CursorAnchorInfo: CharSequence getComposingText()>
<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerBottom()>
<android.view.inputmethod.CursorAnchorInfo: int getCharacterBoundsFlags(int)>
<android.view.inputmethod.CursorAnchorInfo: int getSelectionStart()>
<android.view.inputmethod.CursorAnchorInfo: void <init>(android.os.Parcel)>
<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerTop()>
<android.view.inputmethod.CursorAnchorInfo: int getInsertionMarkerFlags()>
<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerHorizontal()>
<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerBaseline()>
<android.view.inputmethod.CursorAnchorInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.CursorAnchorInfo: int describeContents()>
<android.view.inputmethod.CursorAnchorInfo: int getComposingTextStart()>
<android.view.inputmethod.CursorAnchorInfo: int getSelectionEnd()>
<android.view.inputmethod.CursorAnchorInfo: android.graphics.Matrix getMatrix()>
<android.view.inputmethod.CursorAnchorInfo: android.graphics.RectF getCharacterBounds(int)>
<android.app.Notification.BubbleMetadata: android.app.PendingIntent getDeleteIntent()>
<android.app.Notification.BubbleMetadata: android.app.PendingIntent getIntent()>
<android.app.Notification.BubbleMetadata: boolean getAutoExpandBubble()>
<android.app.Notification.BubbleMetadata: android.graphics.drawable.Icon getIcon()>
<android.app.Notification.BubbleMetadata: int getDesiredHeightResId()>
<android.app.Notification.BubbleMetadata: boolean isNotificationSuppressed()>
<android.app.Notification.BubbleMetadata: int getDesiredHeight()>
<android.app.Notification.BubbleMetadata: void writeToParcel(android.os.Parcel,int)>
<android.app.Notification.BubbleMetadata: int describeContents()>
<android.content.UriMatcher: void <init>(int)>
<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>
<android.content.UriMatcher: int match(android.net.Uri)>
<android.provider.FontRequest: java.lang.String getProviderAuthority()>
<android.provider.FontRequest: java.util.List getCertificates()>
<android.provider.FontRequest: void <init>(String,String,String,java.util.List)>
<android.provider.FontRequest: java.lang.String getQuery()>
<android.provider.FontRequest: java.lang.String getProviderPackage()>
<android.provider.FontRequest: void <init>(String,String,String)>
<android.telephony.CarrierRestrictionRules.Builder: android.telephony.CarrierRestrictionRules build()>
<android.telephony.CarrierRestrictionRules.Builder: android.telephony.CarrierRestrictionRules.Builder setMultiSimPolicy(int)>
<android.telephony.CarrierRestrictionRules.Builder: android.telephony.CarrierRestrictionRules.Builder setDefaultCarrierRestriction(int)>
<android.telephony.CarrierRestrictionRules.Builder: android.telephony.CarrierRestrictionRules.Builder setAllowedCarriers(java.util.List)>
<android.telephony.CarrierRestrictionRules.Builder: void <init>()>
<android.telephony.CarrierRestrictionRules.Builder: android.telephony.CarrierRestrictionRules.Builder setAllCarriersAllowed()>
<android.telephony.CarrierRestrictionRules.Builder: android.telephony.CarrierRestrictionRules.Builder setExcludedCarriers(java.util.List)>
<java.security.CodeSigner: java.security.Timestamp getTimestamp()>
<java.security.CodeSigner: java.security.cert.CertPath getSignerCertPath()>
<java.security.CodeSigner: void <init>(java.security.cert.CertPath,java.security.Timestamp)>
<android.transition.TransitionListenerAdapter: void onTransitionPause(android.transition.Transition)>
<android.transition.TransitionListenerAdapter: void onTransitionResume(android.transition.Transition)>
<android.transition.TransitionListenerAdapter: void onTransitionCancel(android.transition.Transition)>
<android.transition.TransitionListenerAdapter: void <init>()>
<android.transition.TransitionListenerAdapter: void onTransitionEnd(android.transition.Transition)>
<android.transition.TransitionListenerAdapter: void onTransitionStart(android.transition.Transition)>
<android.app.prediction.AppTargetEvent: java.lang.String getLaunchLocation()>
<android.app.prediction.AppTargetEvent: int describeContents()>
<android.app.prediction.AppTargetEvent: android.app.prediction.AppTarget getTarget()>
<android.app.prediction.AppTargetEvent: int getAction()>
<android.app.prediction.AppTargetEvent: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.DevicePolicyManager: void setAutoTimeRequired(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: java.util.List getMeteredDataDisabledPackages(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isDeviceOwnerApp(java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean setResetPasswordToken(android.content.ComponentName,byte[])>
<android.app.admin.DevicePolicyManager: boolean isMasterVolumeMuted(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setUserIcon(android.content.ComponentName,android.graphics.Bitmap)>
<android.app.admin.DevicePolicyManager: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>
<android.app.admin.DevicePolicyManager: java.util.List getOverrideApns(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setRecommendedGlobalProxy(android.content.ComponentName,android.net.ProxyInfo)>
<android.app.admin.DevicePolicyManager: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>
<android.app.admin.DevicePolicyManager: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>
<android.app.admin.DevicePolicyManager: void installSystemUpdate(android.content.ComponentName,android.net.Uri,java.util.concurrent.Executor,android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback)>
<android.app.admin.DevicePolicyManager: java.util.List getPermittedInputMethodsForCurrentUser()>
<android.app.admin.DevicePolicyManager: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)>
<android.app.admin.DevicePolicyManager: android.content.ComponentName getProfileOwner()>
<android.app.admin.DevicePolicyManager: java.util.Set getAlwaysOnVpnLockdownWhitelist(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean installExistingPackage(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabled()>
<android.app.admin.DevicePolicyManager: boolean isManagedProfile(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setProfileName(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.lang.String getProfileOwnerNameAsUser(int)>
<android.app.admin.DevicePolicyManager: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: void setPermissionPolicy(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setLongSupportMessage(android.content.ComponentName,CharSequence)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isBackupServiceEnabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isUnattendedManagedKiosk()>
<android.app.admin.DevicePolicyManager: boolean getAutoTimeRequired()>
<android.app.admin.DevicePolicyManager: void addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getKeepUninstalledPackages(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List retrieveSecurityLogs(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate[],java.lang.String,int)>
<android.app.admin.DevicePolicyManager: void notifyPendingSystemUpdate(long,boolean)>
<android.app.admin.DevicePolicyManager: java.util.List getActiveAdmins()>
<android.app.admin.DevicePolicyManager: void setEndUserSessionMessage(android.content.ComponentName,CharSequence)>
<android.app.admin.DevicePolicyManager: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,android.os.Bundle)>
<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setBluetoothContactSharingDisabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean isUsingUnifiedPassword(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setUninstallBlocked(android.content.ComponentName,java.lang.String,boolean)>
<android.app.admin.DevicePolicyManager: boolean isCallerApplicationRestrictionsManagingPackage()>
<android.app.admin.DevicePolicyManager: boolean isSecurityLoggingEnabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getInstalledCaCerts(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void clearCrossProfileIntentFilters(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isDeviceProvisioningConfigApplied()>
<android.app.admin.DevicePolicyManager: void uninstallCaCert(android.content.ComponentName,byte[])>
<android.app.admin.DevicePolicyManager: java.lang.String getDeviceOwner()>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: CharSequence getLongSupportMessage(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List retrieveNetworkLogs(android.content.ComponentName,long)>
<android.app.admin.DevicePolicyManager: void setLogoutEnabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: int getLockTaskFeatures(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setRestrictionsProvider(android.content.ComponentName,android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.lang.String getCertInstallerPackage(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>
<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void uninstallAllUserCaCerts(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean clearResetPasswordToken(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean resetPassword(java.lang.String,int)>
<android.app.admin.DevicePolicyManager: int enableSystemApp(android.content.ComponentName,android.content.Intent)>
<android.app.admin.DevicePolicyManager: boolean isAlwaysOnVpnLockdownEnabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setBackupServiceEnabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setShortSupportMessage(android.content.ComponentName,CharSequence)>
<android.app.admin.DevicePolicyManager: void lockNow()>
<android.app.admin.DevicePolicyManager: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>
<android.app.admin.DevicePolicyManager: boolean isNetworkLoggingEnabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean)>
<android.app.admin.DevicePolicyManager: android.content.ComponentName getDeviceOwnerComponentOnAnyUser()>
<android.app.admin.DevicePolicyManager: void setLockTaskFeatures(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setApplicationRestrictionsManagingPackage(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: void setDeviceProvisioningConfigApplied()>
<android.app.admin.DevicePolicyManager: boolean isCurrentInputMethodSetByOwner()>
<android.app.admin.DevicePolicyManager: boolean setTime(android.content.ComponentName,long)>
<android.app.admin.DevicePolicyManager: void setOrganizationColor(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String)>
<android.app.admin.DevicePolicyManager: int getPasswordComplexity()>
<android.app.admin.DevicePolicyManager: boolean isDeviceProvisioned()>
<android.app.admin.DevicePolicyManager: void wipeData(int)>
<android.app.admin.DevicePolicyManager: java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean hasGrantedPolicy(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: android.security.AttestedKeyPair generateKeyPair(android.content.ComponentName,java.lang.String,android.security.keystore.KeyGenParameterSpec,int)>
<android.app.admin.DevicePolicyManager: void lockNow(int)>
<android.app.admin.DevicePolicyManager: void setScreenCaptureDisabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: boolean isResetPasswordTokenActive(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: CharSequence getShortSupportMessage(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean setPermittedCrossProfileNotificationListeners(android.content.ComponentName,java.util.List)>
<android.app.admin.DevicePolicyManager: long getLastNetworkLogRetrievalTime()>
<android.app.admin.DevicePolicyManager: boolean requestBugreport(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: java.lang.String getGlobalPrivateDnsHost(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean removeUser(android.content.ComponentName,android.os.UserHandle)>
<android.app.admin.DevicePolicyManager: void setDefaultSmsApplication(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: void clearApplicationUserData(android.content.ComponentName,java.lang.String,java.util.concurrent.Executor,android.app.admin.DevicePolicyManager.OnClearApplicationUserDataListener)>
<android.app.admin.DevicePolicyManager: long getRequiredStrongAuthTimeout(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])>
<android.app.admin.DevicePolicyManager: void clearProfileOwner(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long)>
<android.app.admin.DevicePolicyManager: java.util.Set getCrossProfileCalendarPackages(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean removeCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean isAffiliatedUser()>
<android.app.admin.DevicePolicyManager: void setProfileOwnerCanAccessDeviceIds(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void addUserRestriction(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: void enableSystemApp(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: void setRequiredStrongAuthTimeout(android.content.ComponentName,long)>
<android.app.admin.DevicePolicyManager: CharSequence getStartUserSessionMessage(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.util.List,boolean)>
<android.app.admin.DevicePolicyManager: java.util.List getDelegatePackages(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean isUninstallBlocked(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isOverrideApnEnabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getDelegatedScopes(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: void setSystemSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean isManagedKiosk()>
<android.app.admin.DevicePolicyManager: void setNetworkLoggingEnabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: boolean setStatusBarDisabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: boolean isActivePasswordSufficient()>
<android.app.admin.DevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate,java.lang.String)>
<android.app.admin.DevicePolicyManager: void setOrganizationName(android.content.ComponentName,CharSequence)>
<android.app.admin.DevicePolicyManager: void reboot(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean setKeyguardDisabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: int getUserProvisioningState()>
<android.app.admin.DevicePolicyManager: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.app.admin.DevicePolicyManager: java.lang.String getDeviceOwnerNameOnAnyUser()>
<android.app.admin.DevicePolicyManager: CharSequence getDeviceOwnerLockScreenInfo()>
<android.app.admin.DevicePolicyManager: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
<android.app.admin.DevicePolicyManager: boolean isApplicationHidden(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: void setKeepUninstalledPackages(android.content.ComponentName,java.util.List)>
<android.app.admin.DevicePolicyManager: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>
<android.app.admin.DevicePolicyManager: int getPermissionPolicy(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getOwnerInstalledCaCerts(android.os.UserHandle)>
<android.app.admin.DevicePolicyManager: void setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)>
<android.app.admin.DevicePolicyManager: void addCrossProfileIntentFilter(android.content.ComponentName,android.content.IntentFilter,int)>
<android.app.admin.DevicePolicyManager: boolean setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,int)>
<android.app.admin.DevicePolicyManager: void setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.Set)>
<android.app.admin.DevicePolicyManager: int getPasswordMaximumLength(int)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean)>
<android.app.admin.DevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: boolean getScreenCaptureDisabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setStartUserSessionMessage(android.content.ComponentName,CharSequence)>
<android.app.admin.DevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: boolean hasCaCertInstalled(android.content.ComponentName,byte[])>
<android.app.admin.DevicePolicyManager: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)>
<android.app.admin.DevicePolicyManager: CharSequence getEndUserSessionMessage(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean switchUser(android.content.ComponentName,android.os.UserHandle)>
<android.app.admin.DevicePolicyManager: void setMasterVolumeMuted(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: boolean isDeviceIdAttestationSupported()>
<android.app.admin.DevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setDeviceOwnerLockScreenInfo(android.content.ComponentName,CharSequence)>
<android.app.admin.DevicePolicyManager: java.util.List getBindDeviceAdminTargetUsers(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: android.os.PersistableBundle getTransferOwnershipBundle()>
<android.app.admin.DevicePolicyManager: java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isDeviceManaged()>
<android.app.admin.DevicePolicyManager: boolean isAdminActive(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()>
<android.app.admin.DevicePolicyManager: void setAffiliationIds(android.content.ComponentName,java.util.Set)>
<android.app.admin.DevicePolicyManager: boolean setTimeZone(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: java.util.List getSecondaryUsers(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isProvisioningAllowed(java.lang.String)>
<android.app.admin.DevicePolicyManager: java.util.Set getAffiliationIds(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.Set)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long)>
<android.app.admin.DevicePolicyManager: android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int setGlobalPrivateDnsModeSpecifiedHost(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: void setProfileEnabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: java.lang.String[] setPackagesSuspended(android.content.ComponentName,java.lang.String[],boolean)>
<android.app.admin.DevicePolicyManager: boolean isPackageSuspended(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: java.util.List getPermittedAccessibilityServices(int)>
<android.app.admin.DevicePolicyManager: java.util.List getPermittedAccessibilityServices(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean installCaCert(android.content.ComponentName,byte[])>
<android.app.admin.DevicePolicyManager: void setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean setActiveProfileOwner(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: CharSequence getDeviceOwnerOrganizationName()>
<android.app.admin.DevicePolicyManager: boolean isProfileOwnerApp(java.lang.String)>
<android.app.admin.DevicePolicyManager: long getPasswordExpirationTimeout(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List retrievePreRebootSecurityLogs(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: CharSequence getOrganizationName(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getPermittedInputMethods(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: android.os.Bundle getUserRestrictions(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void clearUserRestriction(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean updateOverrideApn(android.content.ComponentName,int,android.telephony.data.ApnSetting)>
<android.app.admin.DevicePolicyManager: java.lang.String[] getLockTaskPackages(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate[],java.lang.String,boolean)>
<android.app.admin.DevicePolicyManager: boolean isLockTaskPermitted(java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>
<android.app.admin.DevicePolicyManager: void setSecurityLoggingEnabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: java.util.List setMeteredDataDisabledPackages(android.content.ComponentName,java.util.List)>
<android.app.admin.DevicePolicyManager: void clearDeviceOwnerApp(java.lang.String)>
<android.app.admin.DevicePolicyManager: int setGlobalPrivateDnsModeOpportunistic(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: android.content.Intent createAdminSupportIntent(java.lang.String)>
<android.app.admin.DevicePolicyManager: void clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean getBluetoothContactSharingDisabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean removeOverrideApn(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setCertInstallerPackage(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: android.os.UserHandle getDeviceOwnerUser()>
<android.app.admin.DevicePolicyManager: int getCurrentFailedPasswordAttempts()>
<android.app.admin.DevicePolicyManager: void notifyPendingSystemUpdate(long)>
<android.app.admin.DevicePolicyManager: void setOverrideApnsEnabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus()>
<android.app.admin.DevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getGlobalPrivateDnsMode(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void wipeData(int,CharSequence)>
<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int stopUser(android.content.ComponentName,android.os.UserHandle)>
<android.app.admin.DevicePolicyManager: int logoutUser(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getOrganizationColor(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: long getLastSecurityLogRetrievalTime()>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: long getPasswordExpiration(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getPermittedCrossProfileNotificationListeners(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isEphemeralUser(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setKeyguardDisabledFeatures(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: long getLastBugReportRequestTime()>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void removeActiveAdmin(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: android.app.admin.DevicePolicyManager getParentProfileInstance(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,boolean)>
<android.app.admin.DevicePolicyManager: boolean removeKeyPair(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.lang.String getWifiMacAddress(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean getStorageEncryption(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isLogoutEnabled()>
<javax.xml.datatype.DatatypeConstants.Field: int getId()>
<android.widget.SlidingDrawer: void animateOpen()>
<android.widget.SlidingDrawer: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.SlidingDrawer: boolean isOpened()>
<android.widget.SlidingDrawer: boolean isMoving()>
<android.widget.SlidingDrawer: void setOnDrawerScrollListener(android.widget.SlidingDrawer.OnDrawerScrollListener)>
<android.widget.SlidingDrawer: void setOnDrawerCloseListener(android.widget.SlidingDrawer.OnDrawerCloseListener)>
<android.widget.SlidingDrawer: void setOnDrawerOpenListener(android.widget.SlidingDrawer.OnDrawerOpenListener)>
<android.widget.SlidingDrawer: void animateClose()>
<android.widget.SlidingDrawer: android.view.View getHandle()>
<android.widget.SlidingDrawer: android.view.View getContent()>
<android.widget.SlidingDrawer: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.SlidingDrawer: void unlock()>
<android.widget.SlidingDrawer: void open()>
<android.widget.SlidingDrawer: void animateToggle()>
<android.widget.SlidingDrawer: void lock()>
<android.widget.SlidingDrawer: void toggle()>
<android.widget.SlidingDrawer: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.SlidingDrawer: void close()>
<android.net.wifi.aware.PublishDiscoverySession: void updatePublish(android.net.wifi.aware.PublishConfig)>
<android.media.MediaCasStateException: java.lang.String getDiagnosticInfo()>
<android.media.MediaPlayer.OnErrorListener: boolean onError(android.media.MediaPlayer,int,int)>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.EntityReference createEntityReference(java.lang.String)>
<org.w3c.dom.Document extends org.w3c.dom.Node: java.lang.String getInputEncoding()>
<org.w3c.dom.Document extends org.w3c.dom.Node: void normalizeDocument()>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.DOMConfiguration getDomConfig()>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String)>
<org.w3c.dom.Document extends org.w3c.dom.Node: void setXmlStandalone(boolean)>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.Element getElementById(java.lang.String)>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.CDATASection createCDATASection(java.lang.String)>
<org.w3c.dom.Document extends org.w3c.dom.Node: java.lang.String getXmlEncoding()>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.Text createTextNode(java.lang.String)>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.DOMImplementation getImplementation()>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.DocumentFragment createDocumentFragment()>
<org.w3c.dom.Document extends org.w3c.dom.Node: java.lang.String getXmlVersion()>
<org.w3c.dom.Document extends org.w3c.dom.Node: void setDocumentURI(java.lang.String)>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.Comment createComment(java.lang.String)>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>
<org.w3c.dom.Document extends org.w3c.dom.Node: boolean getXmlStandalone()>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.Element createElement(java.lang.String)>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.Attr createAttribute(java.lang.String)>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>
<org.w3c.dom.Document extends org.w3c.dom.Node: boolean getStrictErrorChecking()>
<org.w3c.dom.Document extends org.w3c.dom.Node: void setStrictErrorChecking(boolean)>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.Node adoptNode(org.w3c.dom.Node)>
<org.w3c.dom.Document extends org.w3c.dom.Node: void setXmlVersion(java.lang.String)>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.DocumentType getDoctype()>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.Node importNode(org.w3c.dom.Node,boolean)>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.Element getDocumentElement()>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.Node renameNode(org.w3c.dom.Node,java.lang.String,java.lang.String)>
<org.w3c.dom.Document extends org.w3c.dom.Node: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>
<org.w3c.dom.Document extends org.w3c.dom.Node: java.lang.String getDocumentURI()>
<android.net.ConnectivityManager.OnTetheringEntitlementResultListener: void onTetheringEntitlementResult(int)>
<android.net.wifi.hotspot2.pps.HomeSp: java.lang.String getFriendlyName()>
<android.net.wifi.hotspot2.pps.HomeSp: void setRoamingConsortiumOis(long[])>
<android.net.wifi.hotspot2.pps.HomeSp: void <init>(android.net.wifi.hotspot2.pps.HomeSp)>
<android.net.wifi.hotspot2.pps.HomeSp: void <init>()>
<android.net.wifi.hotspot2.pps.HomeSp: java.lang.String getFqdn()>
<android.net.wifi.hotspot2.pps.HomeSp: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.hotspot2.pps.HomeSp: void setFriendlyName(java.lang.String)>
<android.net.wifi.hotspot2.pps.HomeSp: void setFqdn(java.lang.String)>
<android.net.wifi.hotspot2.pps.HomeSp: int describeContents()>
<android.net.wifi.hotspot2.pps.HomeSp: long[] getRoamingConsortiumOis()>
<android.media.MediaRouter.Callback: void onRouteAdded(android.media.MediaRouter,android.media.MediaRouter.RouteInfo)>
<android.media.MediaRouter.Callback: void onRouteUnselected(android.media.MediaRouter,int,android.media.MediaRouter.RouteInfo)>
<android.media.MediaRouter.Callback: void onRouteChanged(android.media.MediaRouter,android.media.MediaRouter.RouteInfo)>
<android.media.MediaRouter.Callback: void onRoutePresentationDisplayChanged(android.media.MediaRouter,android.media.MediaRouter.RouteInfo)>
<android.media.MediaRouter.Callback: void onRouteSelected(android.media.MediaRouter,int,android.media.MediaRouter.RouteInfo)>
<android.media.MediaRouter.Callback: void onRouteGrouped(android.media.MediaRouter,android.media.MediaRouter.RouteInfo,android.media.MediaRouter.RouteGroup,int)>
<android.media.MediaRouter.Callback: void onRouteUngrouped(android.media.MediaRouter,android.media.MediaRouter.RouteInfo,android.media.MediaRouter.RouteGroup)>
<android.media.MediaRouter.Callback: void onRouteRemoved(android.media.MediaRouter,android.media.MediaRouter.RouteInfo)>
<android.media.MediaRouter.Callback: void <init>()>
<android.media.MediaRouter.Callback: void onRouteVolumeChanged(android.media.MediaRouter,android.media.MediaRouter.RouteInfo)>
<android.widget.Chronometer: boolean isTheFinalCountDown()>
<android.widget.Chronometer: void setCountDown(boolean)>
<android.widget.Chronometer: void setFormat(java.lang.String)>
<android.widget.Chronometer: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.Chronometer: java.lang.String getFormat()>
<android.widget.Chronometer: long getBase()>
<android.widget.Chronometer: android.widget.Chronometer.OnChronometerTickListener getOnChronometerTickListener()>
<android.widget.Chronometer: void <init>(android.content.Context)>
<android.widget.Chronometer: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Chronometer: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.Chronometer: void setOnChronometerTickListener(android.widget.Chronometer.OnChronometerTickListener)>
<android.widget.Chronometer: void start()>
<android.widget.Chronometer: void setBase(long)>
<android.widget.Chronometer: boolean isCountDown()>
<android.widget.Chronometer: void stop()>
<java.security.PermissionCollection: void add(java.security.Permission)>
<java.security.PermissionCollection: boolean implies(java.security.Permission)>
<java.security.PermissionCollection: java.util.Enumeration elements()>
<java.security.PermissionCollection: void <init>()>
<java.security.PermissionCollection: void setReadOnly()>
<java.security.PermissionCollection: boolean isReadOnly()>
<android.service.autofill.CustomDescription: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.CustomDescription: android.util.SparseArray getActions()>
<android.service.autofill.CustomDescription: int describeContents()>
<android.location.GnssNavigationMessage.Callback: void <init>()>
<android.location.GnssNavigationMessage.Callback: void onStatusChanged(int)>
<android.location.GnssNavigationMessage.Callback: void onGnssNavigationMessageReceived(android.location.GnssNavigationMessage)>
<android.preference.Preference.OnPreferenceChangeListener: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>
<android.view.animation.RotateAnimation: void <init>(float,float,int,float,int,float)>
<android.view.animation.RotateAnimation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.RotateAnimation: void <init>(float,float)>
<android.view.animation.RotateAnimation: void <init>(float,float,float,float)>
<java.lang.InstantiationError: void <init>(String)>
<java.lang.InstantiationError: void <init>()>
<android.icu.util.DateInterval: long getFromDate()>
<android.icu.util.DateInterval: void <init>(long,long)>
<android.icu.util.DateInterval: long getToDate()>
<android.app.Fragment.InstantiationException: void <init>(String,Exception)>
<android.text.style.TtsSpan.OrdinalBuilder: void <init>(String)>
<android.text.style.TtsSpan.OrdinalBuilder: void <init>()>
<android.text.style.TtsSpan.OrdinalBuilder: android.text.style.TtsSpan.OrdinalBuilder setNumber(long)>
<android.text.style.TtsSpan.OrdinalBuilder: android.text.style.TtsSpan.OrdinalBuilder setNumber(java.lang.String)>
<android.text.style.TtsSpan.OrdinalBuilder: void <init>(long)>
<android.provider.SearchIndexablesProvider: android.database.Cursor queryRawData(java.lang.String[])>
<android.provider.SearchIndexablesProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.provider.SearchIndexablesProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.provider.SearchIndexablesProvider: android.database.Cursor queryNonIndexableKeys(java.lang.String[])>
<android.provider.SearchIndexablesProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.provider.SearchIndexablesProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.provider.SearchIndexablesProvider: android.database.Cursor querySliceUriPairs()>
<android.provider.SearchIndexablesProvider: java.lang.String getType(android.net.Uri)>
<android.provider.SearchIndexablesProvider: android.database.Cursor queryXmlResources(java.lang.String[])>
<android.provider.SearchIndexablesProvider: void <init>()>
<android.hardware.radio.RadioTuner.Callback: void onParametersUpdated(java.util.Map)>
<android.hardware.radio.RadioTuner.Callback: void onControlChanged(boolean)>
<android.hardware.radio.RadioTuner.Callback: void onTrafficAnnouncement(boolean)>
<android.hardware.radio.RadioTuner.Callback: void <init>()>
<android.hardware.radio.RadioTuner.Callback: void onBackgroundScanComplete()>
<android.hardware.radio.RadioTuner.Callback: void onEmergencyAnnouncement(boolean)>
<android.hardware.radio.RadioTuner.Callback: void onProgramListChanged()>
<android.hardware.radio.RadioTuner.Callback: void onTuneFailed(int,android.hardware.radio.ProgramSelector)>
<android.hardware.radio.RadioTuner.Callback: void onError(int)>
<android.hardware.radio.RadioTuner.Callback: void onAntennaState(boolean)>
<android.hardware.radio.RadioTuner.Callback: void onConfigurationChanged(android.hardware.radio.RadioManager.BandConfig)>
<android.hardware.radio.RadioTuner.Callback: void onMetadataChanged(android.hardware.radio.RadioMetadata)>
<android.hardware.radio.RadioTuner.Callback: void onBackgroundScanAvailabilityChange(boolean)>
<android.hardware.radio.RadioTuner.Callback: void onProgramInfoChanged(android.hardware.radio.RadioManager.ProgramInfo)>
<android.gesture.GestureLibrary: void <init>()>
<android.gesture.GestureLibrary: int getOrientationStyle()>
<android.gesture.GestureLibrary: java.util.ArrayList recognize(android.gesture.Gesture)>
<android.gesture.GestureLibrary: void addGesture(java.lang.String,android.gesture.Gesture)>
<android.gesture.GestureLibrary: java.util.Set getGestureEntries()>
<android.gesture.GestureLibrary: boolean save()>
<android.gesture.GestureLibrary: boolean load()>
<android.gesture.GestureLibrary: int getSequenceType()>
<android.gesture.GestureLibrary: java.util.ArrayList getGestures(java.lang.String)>
<android.gesture.GestureLibrary: void setSequenceType(int)>
<android.gesture.GestureLibrary: void removeEntry(java.lang.String)>
<android.gesture.GestureLibrary: boolean isReadOnly()>
<android.gesture.GestureLibrary: void setOrientationStyle(int)>
<android.gesture.GestureLibrary: void removeGesture(java.lang.String,android.gesture.Gesture)>
<android.gesture.GestureOverlayView.OnGesturingListener: void onGesturingEnded(android.gesture.GestureOverlayView)>
<android.gesture.GestureOverlayView.OnGesturingListener: void onGesturingStarted(android.gesture.GestureOverlayView)>
<android.view.ViewTreeObserver.OnWindowFocusChangeListener: void onWindowFocusChanged(boolean)>
<android.os.ParcelFileDescriptor.AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>
<android.opengl.ETC1Util: android.opengl.ETC1Util.ETC1Texture createTexture(java.io.InputStream)>
<android.opengl.ETC1Util: void loadTexture(int,int,int,int,int,android.opengl.ETC1Util.ETC1Texture)>
<android.opengl.ETC1Util: void <init>()>
<android.opengl.ETC1Util: android.opengl.ETC1Util.ETC1Texture compressTexture(java.nio.Buffer,int,int,int,int)>
<android.opengl.ETC1Util: boolean isETC1Supported()>
<android.opengl.ETC1Util: void loadTexture(int,int,int,int,int,java.io.InputStream)>
<android.opengl.ETC1Util: void writeTexture(android.opengl.ETC1Util.ETC1Texture,java.io.OutputStream)>
<android.app.backup.BackupManager: void backupNow()>
<android.app.backup.BackupManager: void dataChanged(java.lang.String)>
<android.app.backup.BackupManager: void setBackupEnabled(boolean)>
<android.app.backup.BackupManager: void updateTransportAttributes(android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.String)>
<android.app.backup.BackupManager: int requestBackup(java.lang.String[],android.app.backup.BackupObserver)>
<android.app.backup.BackupManager: android.content.Intent getDataManagementIntent(java.lang.String)>
<android.app.backup.BackupManager: void updateTransportAttributes(android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,CharSequence)>
<android.app.backup.BackupManager: void cancelBackups()>
<android.app.backup.BackupManager: android.os.UserHandle getUserForAncestralSerialNumber(long)>
<android.app.backup.BackupManager: void setAutoRestore(boolean)>
<android.app.backup.BackupManager: int requestBackup(java.lang.String[],android.app.backup.BackupObserver,android.app.backup.BackupManagerMonitor,int)>
<android.app.backup.BackupManager: int requestRestore(android.app.backup.RestoreObserver,android.app.backup.BackupManagerMonitor)>
<android.app.backup.BackupManager: android.content.ComponentName getCurrentTransportComponent()>
<android.app.backup.BackupManager: java.lang.String getCurrentTransport()>
<android.app.backup.BackupManager: boolean isAppEligibleForBackup(java.lang.String)>
<android.app.backup.BackupManager: android.content.Intent getConfigurationIntent(java.lang.String)>
<android.app.backup.BackupManager: void <init>(android.content.Context)>
<android.app.backup.BackupManager: java.lang.String getDataManagementLabel(java.lang.String)>
<android.app.backup.BackupManager: boolean isBackupServiceActive(android.os.UserHandle)>
<android.app.backup.BackupManager: android.app.backup.RestoreSession beginRestoreSession()>
<android.app.backup.BackupManager: CharSequence getDataManagementIntentLabel(java.lang.String)>
<android.app.backup.BackupManager: java.lang.String getDestinationString(java.lang.String)>
<android.app.backup.BackupManager: int requestRestore(android.app.backup.RestoreObserver)>
<android.app.backup.BackupManager: java.lang.String[] listAllTransports()>
<android.app.backup.BackupManager: void dataChanged()>
<android.app.backup.BackupManager: long getAvailableRestoreToken(java.lang.String)>
<android.app.backup.BackupManager: boolean isBackupEnabled()>
<android.app.backup.BackupManager: void selectBackupTransport(android.content.ComponentName,android.app.backup.SelectBackupTransportCallback)>
<android.app.backup.BackupManager: java.lang.String selectBackupTransport(java.lang.String)>
<android.app.backup.BackupManager: void setAncestralSerialNumber(long)>
<android.service.notification.Adjustment: android.os.UserHandle getUserHandle()>
<android.service.notification.Adjustment: int getUser()>
<android.service.notification.Adjustment: void writeToParcel(android.os.Parcel,int)>
<android.service.notification.Adjustment: int describeContents()>
<android.service.notification.Adjustment: android.os.Bundle getSignals()>
<android.service.notification.Adjustment: java.lang.String getPackage()>
<android.service.notification.Adjustment: void <init>(String,String,android.os.Bundle,CharSequence,android.os.UserHandle)>
<android.service.notification.Adjustment: CharSequence getExplanation()>
<android.service.notification.Adjustment: void <init>(String,String,android.os.Bundle,CharSequence,int)>
<android.service.notification.Adjustment: java.lang.String getKey()>
<android.service.notification.Adjustment: void <init>(android.os.Parcel)>
<android.media.MediaDrm: boolean isCryptoSchemeSupported(java.util.UUID,java.lang.String)>
<android.media.MediaDrm: java.util.HashMap queryKeyStatus(byte[])>
<android.media.MediaDrm: void releaseSecureStops(byte[])>
<android.media.MediaDrm: byte[] getPropertyByteArray(java.lang.String)>
<android.media.MediaDrm: boolean isCryptoSchemeSupported(java.util.UUID,java.lang.String,@android.media.MediaDrm.SecurityLevelint)>
<android.media.MediaDrm: java.util.List getSecureStops()>
<android.media.MediaDrm: int getMaxHdcpLevel()>
<android.media.MediaDrm: void close()>
<android.media.MediaDrm: void provideProvisionResponse(byte[])>
<android.media.MediaDrm: android.media.MediaDrm.KeyRequest getKeyRequest(byte[],byte[],java.lang.String,int,java.util.HashMap)>
<android.media.MediaDrm: int getConnectedHdcpLevel()>
<android.media.MediaDrm: int getOfflineLicenseState(byte[])>
<android.media.MediaDrm: byte[] provideKeyResponse(byte[],byte[])>
<android.media.MediaDrm: void removeKeys(byte[])>
<android.media.MediaDrm: void setOnEventListener(java.util.concurrent.Executor,android.media.MediaDrm.OnEventListener)>
<android.media.MediaDrm: byte[] getSecureStop(byte[])>
<android.media.MediaDrm: void clearOnSessionLostStateListener()>
<android.media.MediaDrm: void releaseAllSecureStops()>
<android.media.MediaDrm: void restoreKeys(byte[],byte[])>
<android.media.MediaDrm: void setOnSessionLostStateListener(android.media.MediaDrm.OnSessionLostStateListener,android.os.Handler)>
<android.media.MediaDrm: byte[] openSession(@android.media.MediaDrm.SecurityLevelint)>
<android.media.MediaDrm: void removeOfflineLicense(byte[])>
<android.media.MediaDrm: java.lang.String getPropertyString(java.lang.String)>
<android.media.MediaDrm: android.media.MediaDrm.CryptoSession getCryptoSession(byte[],java.lang.String,java.lang.String)>
<android.media.MediaDrm: void removeSecureStop(byte[])>
<android.media.MediaDrm: void setOnEventListener(android.media.MediaDrm.OnEventListener)>
<android.media.MediaDrm: void clearOnEventListener()>
<android.media.MediaDrm: int getOpenSessionCount()>
<android.media.MediaDrm: void setOnEventListener(android.media.MediaDrm.OnEventListener,android.os.Handler)>
<android.media.MediaDrm: java.util.List getSecureStopIds()>
<android.media.MediaDrm: android.media.MediaDrm.ProvisionRequest getProvisionRequest()>
<android.media.MediaDrm: boolean isCryptoSchemeSupported(java.util.UUID)>
<android.media.MediaDrm: void setOnExpirationUpdateListener(java.util.concurrent.Executor,android.media.MediaDrm.OnExpirationUpdateListener)>
<android.media.MediaDrm: void setPropertyString(java.lang.String,java.lang.String)>
<android.media.MediaDrm: void removeAllSecureStops()>
<android.media.MediaDrm: void clearOnExpirationUpdateListener()>
<android.media.MediaDrm: int getSecurityLevel(byte[])>
<android.media.MediaDrm: void setOnKeyStatusChangeListener(java.util.concurrent.Executor,android.media.MediaDrm.OnKeyStatusChangeListener)>
<android.media.MediaDrm: java.util.List getOfflineLicenseKeySetIds()>
<android.media.MediaDrm: void setOnKeyStatusChangeListener(android.media.MediaDrm.OnKeyStatusChangeListener,android.os.Handler)>
<android.media.MediaDrm: void setOnExpirationUpdateListener(android.media.MediaDrm.OnExpirationUpdateListener,android.os.Handler)>
<android.media.MediaDrm: int getMaxSecurityLevel()>
<android.media.MediaDrm: void release()>
<android.media.MediaDrm: void <init>(java.util.UUID)>
<android.media.MediaDrm: void setPropertyByteArray(java.lang.String,byte[])>
<android.media.MediaDrm: android.os.PersistableBundle getMetrics()>
<android.media.MediaDrm: void clearOnKeyStatusChangeListener()>
<android.media.MediaDrm: int getMaxSessionCount()>
<android.media.MediaDrm: void setOnSessionLostStateListener(java.util.concurrent.Executor,android.media.MediaDrm.OnSessionLostStateListener)>
<android.media.MediaDrm: byte[] openSession()>
<android.media.MediaDrm: void closeSession(byte[])>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setIsHiddenSsid(boolean)>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setWpa2EnterpriseConfig(android.net.wifi.WifiEnterpriseConfig)>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setSsid(java.lang.String)>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setWpa3EnterpriseConfig(android.net.wifi.WifiEnterpriseConfig)>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setWpa2Passphrase(java.lang.String)>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setWpa3Passphrase(java.lang.String)>
<android.net.wifi.WifiNetworkSpecifier.Builder: void <init>()>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setBssidPattern(android.net.MacAddress,android.net.MacAddress)>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setIsEnhancedOpen(boolean)>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setSsidPattern(android.os.PatternMatcher)>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setBssid(android.net.MacAddress)>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier build()>
<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>
<java.lang.ThreadGroup: boolean isDaemon()>
<java.lang.ThreadGroup: int getMaxPriority()>
<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>
<java.lang.ThreadGroup: int activeGroupCount()>
<java.lang.ThreadGroup: int activeCount()>
<java.lang.ThreadGroup: void list()>
<java.lang.ThreadGroup: void setDaemon(boolean)>
<java.lang.ThreadGroup: void <init>(ThreadGroup,String)>
<java.lang.ThreadGroup: int enumerate(java.lang.Thread[])>
<java.lang.ThreadGroup: void checkAccess()>
<java.lang.ThreadGroup: int enumerate(java.lang.Thread[],boolean)>
<java.lang.ThreadGroup: boolean parentOf(java.lang.ThreadGroup)>
<java.lang.ThreadGroup: void stop()>
<java.lang.ThreadGroup: void suspend()>
<java.lang.ThreadGroup: void interrupt()>
<java.lang.ThreadGroup: boolean allowThreadSuspension(boolean)>
<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[])>
<java.lang.ThreadGroup: void setMaxPriority(int)>
<java.lang.ThreadGroup: void destroy()>
<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[],boolean)>
<java.lang.ThreadGroup: java.lang.String getName()>
<java.lang.ThreadGroup: boolean isDestroyed()>
<java.lang.ThreadGroup: void resume()>
<java.lang.ThreadGroup: void <init>(String)>
<java.util.Locale.LanguageRange: java.util.List parse(java.lang.String)>
<java.util.Locale.LanguageRange: void <init>(String)>
<java.util.Locale.LanguageRange: java.lang.String getRange()>
<java.util.Locale.LanguageRange: java.util.List parse(java.lang.String,java.util.Map)>
<java.util.Locale.LanguageRange: void <init>(String,double)>
<java.util.Locale.LanguageRange: java.util.List mapEquivalents(java.util.List,java.util.Map)>
<java.util.Locale.LanguageRange: double getWeight()>
<android.icu.util.LocaleData: android.icu.util.LocaleData getInstance()>
<android.icu.util.LocaleData: android.icu.util.LocaleData.PaperSize getPaperSize(android.icu.util.ULocale)>
<android.icu.util.LocaleData: void setNoSubstitute(boolean)>
<android.icu.util.LocaleData: boolean getNoSubstitute()>
<android.icu.util.LocaleData: java.lang.String getDelimiter(int)>
<android.icu.util.LocaleData: android.icu.util.VersionInfo getCLDRVersion()>
<android.icu.util.LocaleData: android.icu.util.LocaleData getInstance(android.icu.util.ULocale)>
<android.icu.util.LocaleData: android.icu.util.LocaleData.MeasurementSystem getMeasurementSystem(android.icu.util.ULocale)>
<android.nfc.tech.NdefFormatable: boolean isConnected()>
<android.nfc.tech.NdefFormatable: void formatReadOnly(android.nfc.NdefMessage)>
<android.nfc.tech.NdefFormatable: android.nfc.tech.NdefFormatable get(android.nfc.Tag)>
<android.nfc.tech.NdefFormatable: android.nfc.Tag getTag()>
<android.nfc.tech.NdefFormatable: void connect()>
<android.nfc.tech.NdefFormatable: void format(android.nfc.NdefMessage)>
<android.nfc.tech.NdefFormatable: void close()>
<android.view.Window.OnRestrictedCaptionAreaChangedListener: void onRestrictedCaptionAreaChanged(android.graphics.Rect)>
<android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)>
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: void onAllReferencesReleased()>
<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase.CursorFactory,int)>
<android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)>
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: int getVersion()>
<android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()>
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: boolean isOpen()>
<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>
<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()>
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase.CursorFactory,int,android.database.DatabaseErrorHandler)>
<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>
<android.database.sqlite.SQLiteDatabase: boolean isWriteAheadLoggingEnabled()>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase.CursorFactory)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase.CursorFactory)>
<android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase createInMemory(android.database.sqlite.SQLiteDatabase.OpenParams)>
<android.database.sqlite.SQLiteDatabase: void beginTransactionNonExclusive()>
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely(long)>
<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)>
<android.database.sqlite.SQLiteDatabase: int releaseMemory()>
<android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()>
<android.database.sqlite.SQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)>
<android.database.sqlite.SQLiteDatabase: void validateSql(java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: void beginTransaction()>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase.CursorFactory,android.database.DatabaseErrorHandler)>
<android.database.sqlite.SQLiteDatabase: void endTransaction()>
<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: void setVersion(int)>
<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: long getMaximumSize()>
<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.io.File,android.database.sqlite.SQLiteDatabase.OpenParams)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely()>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase.CursorFactory)>
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,java.lang.String,java.lang.String[],java.lang.String)>
<android.database.sqlite.SQLiteDatabase: boolean inTransaction()>
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)>
<android.database.sqlite.SQLiteDatabase: long getPageSize()>
<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)>
<android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: void setPageSize(long)>
<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: boolean isDatabaseIntegrityOk()>
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()>
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()>
<java.time.temporal.ValueRange: long getSmallestMaximum()>
<java.time.temporal.ValueRange: int checkValidIntValue(long,java.time.temporal.TemporalField)>
<java.time.temporal.ValueRange: java.time.temporal.ValueRange of(long,long,long,long)>
<java.time.temporal.ValueRange: long getLargestMinimum()>
<java.time.temporal.ValueRange: boolean isIntValue()>
<java.time.temporal.ValueRange: boolean isFixed()>
<java.time.temporal.ValueRange: java.time.temporal.ValueRange of(long,long,long)>
<java.time.temporal.ValueRange: boolean isValidValue(long)>
<java.time.temporal.ValueRange: boolean isValidIntValue(long)>
<java.time.temporal.ValueRange: java.time.temporal.ValueRange of(long,long)>
<java.time.temporal.ValueRange: long getMinimum()>
<java.time.temporal.ValueRange: long checkValidValue(long,java.time.temporal.TemporalField)>
<java.time.temporal.ValueRange: long getMaximum()>
<android.net.IpSecManager.SpiUnavailableException: int getSpi()>
<android.view.textclassifier.TextLinks.TextLinkSpan: void onClick(android.view.View)>
<android.view.textclassifier.TextLinks.TextLinkSpan: void <init>(android.view.textclassifier.TextLinks.TextLink)>
<android.view.textclassifier.TextLinks.TextLinkSpan: android.view.textclassifier.TextLinks.TextLink getTextLink()>
<android.security.KeyStoreParameter: boolean isEncryptionRequired()>
<javax.xml.parsers.SAXParser: void parse(java.io.File,org.xml.sax.HandlerBase)>
<javax.xml.parsers.SAXParser: org.xml.sax.Parser getParser()>
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler,java.lang.String)>
<javax.xml.parsers.SAXParser: void setProperty(java.lang.String,java.lang.Object)>
<javax.xml.parsers.SAXParser: void parse(org.xml.sax.InputSource,org.xml.sax.HandlerBase)>
<javax.xml.parsers.SAXParser: void reset()>
<javax.xml.parsers.SAXParser: boolean isXIncludeAware()>
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.HandlerBase)>
<javax.xml.parsers.SAXParser: void parse(java.lang.String,org.xml.sax.HandlerBase)>
<javax.xml.parsers.SAXParser: void parse(java.io.File,org.xml.sax.helpers.DefaultHandler)>
<javax.xml.parsers.SAXParser: void parse(org.xml.sax.InputSource,org.xml.sax.helpers.DefaultHandler)>
<javax.xml.parsers.SAXParser: boolean isNamespaceAware()>
<javax.xml.parsers.SAXParser: javax.xml.validation.Schema getSchema()>
<javax.xml.parsers.SAXParser: boolean isValidating()>
<javax.xml.parsers.SAXParser: java.lang.Object getProperty(java.lang.String)>
<javax.xml.parsers.SAXParser: void <init>()>
<javax.xml.parsers.SAXParser: void parse(java.lang.String,org.xml.sax.helpers.DefaultHandler)>
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler)>
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.HandlerBase,java.lang.String)>
<javax.xml.parsers.SAXParser: org.xml.sax.XMLReader getXMLReader()>
<android.content.ClipboardManager: void clearPrimaryClip()>
<android.content.ClipboardManager: void addPrimaryClipChangedListener(android.content.ClipboardManager.OnPrimaryClipChangedListener)>
<android.content.ClipboardManager: void removePrimaryClipChangedListener(android.content.ClipboardManager.OnPrimaryClipChangedListener)>
<android.content.ClipboardManager: CharSequence getText()>
<android.content.ClipboardManager: android.content.ClipData getPrimaryClip()>
<android.content.ClipboardManager: android.content.ClipDescription getPrimaryClipDescription()>
<android.content.ClipboardManager: void setText(CharSequence)>
<android.content.ClipboardManager: void setPrimaryClip(android.content.ClipData)>
<android.content.ClipboardManager: boolean hasPrimaryClip()>
<android.content.ClipboardManager: boolean hasText()>
<android.net.wifi.aware.SubscribeConfig: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.aware.SubscribeConfig: int describeContents()>
<android.net.ConnectivityManager: int getRestrictBackgroundStatus()>
<android.net.ConnectivityManager: void registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback,android.os.Handler)>
<android.net.ConnectivityManager: void reportBadNetwork(android.net.Network)>
<android.net.ConnectivityManager: java.lang.String getCaptivePortalServerUrl()>
<android.net.ConnectivityManager: void setAirplaneMode(boolean)>
<android.net.ConnectivityManager: void startTethering(int,boolean,android.net.ConnectivityManager.OnStartTetheringCallback,android.os.Handler)>
<android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>
<android.net.ConnectivityManager: android.net.SocketKeepalive createSocketKeepalive(android.net.Network,android.net.IpSecManager.UdpEncapsulationSocket,java.net.InetAddress,java.net.InetAddress,java.util.concurrent.Executor,android.net.SocketKeepalive.Callback)>
<android.net.ConnectivityManager: android.net.Network getActiveNetwork()>
<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,int)>
<android.net.ConnectivityManager: void reportNetworkConnectivity(android.net.Network,boolean)>
<android.net.ConnectivityManager: void unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback)>
<android.net.ConnectivityManager: int getMultipathPreference(android.net.Network)>
<android.net.ConnectivityManager: int getConnectionOwnerUid(int,java.net.InetSocketAddress,java.net.InetSocketAddress)>
<android.net.ConnectivityManager: void registerTetheringEventCallback(java.util.concurrent.Executor,android.net.ConnectivityManager.OnTetheringEventCallback)>
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>
<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback)>
<android.net.ConnectivityManager: void releaseNetworkRequest(android.app.PendingIntent)>
<android.net.ConnectivityManager: void stopTethering(int)>
<android.net.ConnectivityManager: boolean isDefaultNetworkActive()>
<android.net.ConnectivityManager: boolean isActiveNetworkMetered()>
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(android.net.Network)>
<android.net.ConnectivityManager: void unregisterTetheringEventCallback(android.net.ConnectivityManager.OnTetheringEventCallback)>
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
<android.net.ConnectivityManager: void getLatestTetheringEntitlementResult(int,boolean,java.util.concurrent.Executor,android.net.ConnectivityManager.OnTetheringEntitlementResultListener)>
<android.net.ConnectivityManager: android.net.SocketKeepalive createNattKeepalive(android.net.Network,android.os.ParcelFileDescriptor,java.net.InetAddress,java.net.InetAddress,java.util.concurrent.Executor,android.net.SocketKeepalive.Callback)>
<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler,int)>
<android.net.ConnectivityManager: void addDefaultNetworkActiveListener(android.net.ConnectivityManager.OnNetworkActiveListener)>
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(android.net.Network)>
<android.net.ConnectivityManager: void startCaptivePortalApp(android.net.Network,android.os.Bundle)>
<android.net.ConnectivityManager: android.net.SocketKeepalive createSocketKeepalive(android.net.Network,java.net.Socket,java.util.concurrent.Executor,android.net.SocketKeepalive.Callback)>
<android.net.ConnectivityManager: android.net.ProxyInfo getDefaultProxy()>
<android.net.ConnectivityManager: android.net.Network[] getAllNetworks()>
<android.net.ConnectivityManager: void registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback)>
<android.net.ConnectivityManager: android.net.Network getProcessDefaultNetwork()>
<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.app.PendingIntent)>
<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback)>
<android.net.ConnectivityManager: android.net.Network getBoundNetworkForProcess()>
<android.net.ConnectivityManager: boolean bindProcessToNetwork(android.net.Network)>
<android.net.ConnectivityManager: void startTethering(int,boolean,android.net.ConnectivityManager.OnStartTetheringCallback)>
<android.net.ConnectivityManager: void removeDefaultNetworkActiveListener(android.net.ConnectivityManager.OnNetworkActiveListener)>
<android.net.ConnectivityManager: boolean isTetheringSupported()>
<android.net.ConnectivityManager: int getNetworkPreference()>
<android.net.ConnectivityManager: byte[] getNetworkWatchlistConfigHash()>
<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler)>
<android.net.ConnectivityManager: void setNetworkPreference(int)>
<android.net.ConnectivityManager: boolean requestBandwidthUpdate(android.net.Network)>
<android.net.ConnectivityManager: void unregisterNetworkCallback(android.app.PendingIntent)>
<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.app.PendingIntent)>
<android.net.ConnectivityManager: boolean getBackgroundDataSetting()>
<android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler)>
<android.net.ConnectivityManager: boolean setProcessDefaultNetwork(android.net.Network)>
<android.net.ConnectivityManager: boolean shouldAvoidBadWifi()>
<android.database.CharArrayBuffer: void <init>(char[])>
<android.database.CharArrayBuffer: void <init>(int)>
<java.util.logging.Filter: boolean isLoggable(java.util.logging.LogRecord)>
<android.content.pm.ResolveInfo.DisplayNameComparator: int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo)>
<android.content.pm.ResolveInfo.DisplayNameComparator: void <init>(android.content.pm.PackageManager)>
<android.media.AudioDeviceInfo: java.lang.String getAddress()>
<android.media.AudioDeviceInfo: int getType()>
<android.media.AudioDeviceInfo: int getId()>
<android.media.AudioDeviceInfo: int[] getEncodings()>
<android.media.AudioDeviceInfo: CharSequence getProductName()>
<android.media.AudioDeviceInfo: boolean isSink()>
<android.media.AudioDeviceInfo: int[] getChannelIndexMasks()>
<android.media.AudioDeviceInfo: int[] getSampleRates()>
<android.media.AudioDeviceInfo: int[] getChannelMasks()>
<android.media.AudioDeviceInfo: boolean isSource()>
<android.media.AudioDeviceInfo: int[] getChannelCounts()>
<java.util.function.ObjDoubleConsumer: void accept(T,double)>
<android.icu.text.CaseMap.Upper: android.icu.text.CaseMap.Upper omitUnchangedText()>
<android.icu.text.CaseMap.Upper: java.lang.String apply(java.util.Locale,CharSequence)>
<android.icu.text.CaseMap.Upper: A apply(java.util.Locale,CharSequence,A,android.icu.text.Edits)>
<android.service.carrier.MessagePdu: int describeContents()>
<android.service.carrier.MessagePdu: java.util.List getPdus()>
<android.service.carrier.MessagePdu: void <init>(java.util.List)>
<android.service.carrier.MessagePdu: void writeToParcel(android.os.Parcel,int)>
<android.text.Layout: int getLineCount()>
<android.text.Layout: int getLineBounds(int,android.graphics.Rect)>
<android.text.Layout: void draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)>
<android.text.Layout: android.text.Layout.Alignment getParagraphAlignment(int)>
<android.text.Layout: CharSequence getText()>
<android.text.Layout: int getOffsetForHorizontal(int,float)>
<android.text.Layout: android.text.Layout.Alignment getAlignment()>
<android.text.Layout: int getOffsetToLeftOf(int)>
<android.text.Layout: int getEllipsizedWidth()>
<android.text.Layout: float getLineLeft(int)>
<android.text.Layout: void <init>(CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float)>
<android.text.Layout: int getBottomPadding()>
<android.text.Layout: void getCursorPath(int,android.graphics.Path,CharSequence)>
<android.text.Layout: int getEllipsisCount(int)>
<android.text.Layout: float getSecondaryHorizontal(int)>
<android.text.Layout: int getLineEnd(int)>
<android.text.Layout: int getWidth()>
<android.text.Layout: float getDesiredWidth(CharSequence,android.text.TextPaint)>
<android.text.Layout: int getTopPadding()>
<android.text.Layout: android.text.Layout.Directions getLineDirections(int)>
<android.text.Layout: int getHeight()>
<android.text.Layout: int getLineVisibleEnd(int)>
<android.text.Layout: void getSelectionPath(int,int,android.graphics.Path)>
<android.text.Layout: void increaseWidthTo(int)>
<android.text.Layout: int getParagraphLeft(int)>
<android.text.Layout: boolean getLineContainsTab(int)>
<android.text.Layout: int getParagraphDirection(int)>
<android.text.Layout: int getParagraphRight(int)>
<android.text.Layout: android.text.TextPaint getPaint()>
<android.text.Layout: int getEllipsisStart(int)>
<android.text.Layout: boolean isRtlCharAt(int)>
<android.text.Layout: int getLineBottom(int)>
<android.text.Layout: int getLineBaseline(int)>
<android.text.Layout: int getLineForVertical(int)>
<android.text.Layout: float getSpacingMultiplier()>
<android.text.Layout: float getLineMax(int)>
<android.text.Layout: int getLineForOffset(int)>
<android.text.Layout: float getLineRight(int)>
<android.text.Layout: float getLineWidth(int)>
<android.text.Layout: boolean isSpanned()>
<android.text.Layout: int getLineTop(int)>
<android.text.Layout: float getPrimaryHorizontal(int)>
<android.text.Layout: int getLineStart(int)>
<android.text.Layout: int getOffsetToRightOf(int)>
<android.text.Layout: void draw(android.graphics.Canvas)>
<android.text.Layout: float getSpacingAdd()>
<android.text.Layout: int getLineDescent(int)>
<android.text.Layout: int getLineAscent(int)>
<android.text.Layout: float getDesiredWidth(CharSequence,int,int,android.text.TextPaint)>
<java.lang.invoke.CallSite: java.lang.invoke.MethodType type()>
<java.lang.invoke.CallSite: java.lang.invoke.MethodHandle dynamicInvoker()>
<java.lang.invoke.CallSite: void setTarget(java.lang.invoke.MethodHandle)>
<java.lang.invoke.CallSite: java.lang.invoke.MethodHandle getTarget()>
<java.sql.Ref: void setObject(java.lang.Object)>
<java.sql.Ref: java.lang.Object getObject()>
<java.sql.Ref: java.lang.Object getObject(java.util.Map)>
<java.sql.Ref: java.lang.String getBaseTypeName()>
<android.telephony.MbmsStreamingSession: android.telephony.MbmsStreamingSession create(android.content.Context,java.util.concurrent.Executor,android.telephony.mbms.MbmsStreamingSessionCallback)>
<android.telephony.MbmsStreamingSession: void requestUpdateStreamingServices(java.util.List)>
<android.telephony.MbmsStreamingSession: android.telephony.mbms.StreamingService startStreaming(android.telephony.mbms.StreamingServiceInfo,java.util.concurrent.Executor,android.telephony.mbms.StreamingServiceCallback)>
<android.telephony.MbmsStreamingSession: void close()>
<android.telephony.MbmsStreamingSession: android.telephony.MbmsStreamingSession create(android.content.Context,java.util.concurrent.Executor,int,android.telephony.mbms.MbmsStreamingSessionCallback)>
<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>
<java.util.zip.ZipOutputStream: void setLevel(int)>
<java.util.zip.ZipOutputStream: void closeEntry()>
<java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream)>
<java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream,java.nio.charset.Charset)>
<java.util.zip.ZipOutputStream: void setComment(java.lang.String)>
<java.util.zip.ZipOutputStream: void setMethod(int)>
<java.io.PipedReader: void <init>(java.io.PipedWriter)>
<java.io.PipedReader: void close()>
<java.io.PipedReader: void connect(java.io.PipedWriter)>
<java.io.PipedReader: int read(char[],int,int)>
<java.io.PipedReader: void <init>(java.io.PipedWriter,int)>
<java.io.PipedReader: void <init>()>
<java.io.PipedReader: void <init>(int)>
<android.net.wifi.WifiNetworkConnectionStatistics: void <init>(int,int)>
<android.net.wifi.WifiNetworkConnectionStatistics: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiNetworkConnectionStatistics: int describeContents()>
<android.net.wifi.WifiNetworkConnectionStatistics: void <init>()>
<android.net.wifi.WifiNetworkConnectionStatistics: void <init>(android.net.wifi.WifiNetworkConnectionStatistics)>
<android.content.SharedPreferences.OnSharedPreferenceChangeListener: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)>
<android.media.audiofx.Visualizer.MeasurementPeakRms: void <init>()>
<android.os.FileUtils.ProgressListener: void onProgress(long)>
<android.icu.text.PluralRules: boolean equals(android.icu.text.PluralRules)>
<android.icu.text.PluralRules: android.icu.text.PluralRules forLocale(android.icu.util.ULocale)>
<android.icu.text.PluralRules: double getUniqueKeywordValue(java.lang.String)>
<android.icu.text.PluralRules: java.util.Collection getSamples(java.lang.String)>
<android.icu.text.PluralRules: java.util.Collection getAllKeywordValues(java.lang.String)>
<android.icu.text.PluralRules: java.lang.String select(double)>
<android.icu.text.PluralRules: android.icu.text.PluralRules createRules(java.lang.String)>
<android.icu.text.PluralRules: android.icu.text.PluralRules forLocale(java.util.Locale,android.icu.text.PluralRules.PluralType)>
<android.icu.text.PluralRules: android.icu.text.PluralRules parseDescription(java.lang.String)>
<android.icu.text.PluralRules: android.icu.text.PluralRules forLocale(android.icu.util.ULocale,android.icu.text.PluralRules.PluralType)>
<android.icu.text.PluralRules: java.util.Set getKeywords()>
<android.icu.text.PluralRules: android.icu.text.PluralRules forLocale(java.util.Locale)>
<android.media.AudioTrack.Builder: android.media.AudioTrack.Builder setSessionId(int)>
<android.media.AudioTrack.Builder: android.media.AudioTrack build()>
<android.media.AudioTrack.Builder: void <init>()>
<android.media.AudioTrack.Builder: android.media.AudioTrack.Builder setOffloadedPlayback(boolean)>
<android.media.AudioTrack.Builder: android.media.AudioTrack.Builder setTransferMode(int)>
<android.media.AudioTrack.Builder: android.media.AudioTrack.Builder setAudioFormat(android.media.AudioFormat)>
<android.media.AudioTrack.Builder: android.media.AudioTrack.Builder setPerformanceMode(int)>
<android.media.AudioTrack.Builder: android.media.AudioTrack.Builder setAudioAttributes(android.media.AudioAttributes)>
<android.media.AudioTrack.Builder: android.media.AudioTrack.Builder setBufferSizeInBytes(int)>
<android.media.session.MediaController: boolean dispatchMediaButtonEvent(android.view.KeyEvent)>
<android.media.session.MediaController: CharSequence getQueueTitle()>
<android.media.session.MediaController: void <init>(android.content.Context,android.media.session.MediaSession.Token)>
<android.media.session.MediaController: java.util.List getQueue()>
<android.media.session.MediaController: void unregisterCallback(android.media.session.MediaController.Callback)>
<android.media.session.MediaController: long getFlags()>
<android.media.session.MediaController: android.media.session.MediaController.PlaybackInfo getPlaybackInfo()>
<android.media.session.MediaController: void sendCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)>
<android.media.session.MediaController: android.media.MediaMetadata getMetadata()>
<android.media.session.MediaController: android.os.Bundle getSessionInfo()>
<android.media.session.MediaController: android.os.Bundle getExtras()>
<android.media.session.MediaController: int getRatingType()>
<android.media.session.MediaController: void setVolumeTo(int,int)>
<android.media.session.MediaController: java.lang.String getPackageName()>
<android.media.session.MediaController: void registerCallback(android.media.session.MediaController.Callback)>
<android.media.session.MediaController: android.media.session.PlaybackState getPlaybackState()>
<android.media.session.MediaController: android.media.session.MediaSession.Token getSessionToken()>
<android.media.session.MediaController: void adjustVolume(int,int)>
<android.media.session.MediaController: android.app.PendingIntent getSessionActivity()>
<android.media.session.MediaController: android.media.session.MediaController.TransportControls getTransportControls()>
<android.media.session.MediaController: void registerCallback(android.media.session.MediaController.Callback,android.os.Handler)>
<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,CharSequence)>
<android.view.Menu: android.view.MenuItem getItem(int)>
<android.view.Menu: android.view.MenuItem add(int,int,int,CharSequence)>
<android.view.Menu: boolean isShortcutKey(int,android.view.KeyEvent)>
<android.view.Menu: android.view.MenuItem add(int,int,int,@StringResint)>
<android.view.Menu: void setGroupVisible(int,boolean)>
<android.view.Menu: android.view.SubMenu addSubMenu(CharSequence)>
<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,@StringResint)>
<android.view.Menu: void setGroupEnabled(int,boolean)>
<android.view.Menu: void setQwertyMode(boolean)>
<android.view.Menu: android.view.MenuItem add(CharSequence)>
<android.view.Menu: void clear()>
<android.view.Menu: void removeItem(int)>
<android.view.Menu: boolean performIdentifierAction(int,int)>
<android.view.Menu: android.view.SubMenu addSubMenu(@StringResint)>
<android.view.Menu: boolean performShortcut(int,android.view.KeyEvent,int)>
<android.view.Menu: void close()>
<android.view.Menu: void setGroupCheckable(int,boolean,boolean)>
<android.view.Menu: void setGroupDividerEnabled(boolean)>
<android.view.Menu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])>
<android.view.Menu: int size()>
<android.view.Menu: boolean hasVisibleItems()>
<android.view.Menu: android.view.MenuItem add(@StringResint)>
<android.view.Menu: android.view.MenuItem findItem(int)>
<android.view.Menu: void removeGroup(int)>
<android.R.raw: void <init>()>
<java.time.temporal.TemporalAmount: long get(java.time.temporal.TemporalUnit)>
<java.time.temporal.TemporalAmount: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>
<java.time.temporal.TemporalAmount: java.util.List getUnits()>
<java.time.temporal.TemporalAmount: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>
<android.icu.util.BuddhistCalendar: void <init>(android.icu.util.TimeZone)>
<android.icu.util.BuddhistCalendar: void <init>(java.util.Locale)>
<android.icu.util.BuddhistCalendar: void <init>(android.icu.util.TimeZone,java.util.Locale)>
<android.icu.util.BuddhistCalendar: void <init>(java.util.Date)>
<android.icu.util.BuddhistCalendar: void <init>(int,int,int,int,int,int)>
<android.icu.util.BuddhistCalendar: void <init>(android.icu.util.ULocale)>
<android.icu.util.BuddhistCalendar: void <init>(int,int,int)>
<android.icu.util.BuddhistCalendar: void <init>()>
<android.icu.util.BuddhistCalendar: void <init>(android.icu.util.TimeZone,android.icu.util.ULocale)>
<android.icu.util.ValueIterator.Element: void <init>()>
<android.net.NetworkSpecifier: void <init>()>
<android.text.style.TtsSpan.SemioticClassBuilder: C setGender(java.lang.String)>
<android.text.style.TtsSpan.SemioticClassBuilder: void <init>(String)>
<android.text.style.TtsSpan.SemioticClassBuilder: C setAnimacy(java.lang.String)>
<android.text.style.TtsSpan.SemioticClassBuilder: C setCase(java.lang.String)>
<android.text.style.TtsSpan.SemioticClassBuilder: C setMultiplicity(java.lang.String)>
<android.telephony.VisualVoicemailService: void onSmsReceived(android.telephony.VisualVoicemailService.VisualVoicemailTask,android.telephony.VisualVoicemailSms)>
<android.telephony.VisualVoicemailService: void <init>()>
<android.telephony.VisualVoicemailService: void onSimRemoved(android.telephony.VisualVoicemailService.VisualVoicemailTask,android.telecom.PhoneAccountHandle)>
<android.telephony.VisualVoicemailService: android.os.IBinder onBind(android.content.Intent)>
<android.telephony.VisualVoicemailService: void setSmsFilterSettings(android.content.Context,android.telecom.PhoneAccountHandle,android.telephony.VisualVoicemailSmsFilterSettings)>
<android.telephony.VisualVoicemailService: void sendVisualVoicemailSms(android.content.Context,android.telecom.PhoneAccountHandle,java.lang.String,short,java.lang.String,android.app.PendingIntent)>
<android.telephony.VisualVoicemailService: void onCellServiceConnected(android.telephony.VisualVoicemailService.VisualVoicemailTask,android.telecom.PhoneAccountHandle)>
<android.telephony.VisualVoicemailService: void onStopped(android.telephony.VisualVoicemailService.VisualVoicemailTask)>
<android.net.SocketKeepalive.Callback: void onError(int)>
<android.net.SocketKeepalive.Callback: void onStarted()>
<android.net.SocketKeepalive.Callback: void onDataReceived()>
<android.net.SocketKeepalive.Callback: void <init>()>
<android.net.SocketKeepalive.Callback: void onStopped()>
<java.util.function.IntFunction: R apply(int)>
<android.telephony.NetworkService.NetworkServiceProvider: void notifyNetworkRegistrationInfoChanged()>
<android.telephony.NetworkService.NetworkServiceProvider: void <init>(int)>
<android.telephony.NetworkService.NetworkServiceProvider: int getSlotIndex()>
<android.telephony.NetworkService.NetworkServiceProvider: void requestNetworkRegistrationInfo(int,android.telephony.NetworkServiceCallback)>
<android.telephony.NetworkService.NetworkServiceProvider: void close()>
<java.security.cert.CertificateRevokedException: java.util.Date getInvalidityDate()>
<java.security.cert.CertificateRevokedException: java.security.cert.CRLReason getRevocationReason()>
<java.security.cert.CertificateRevokedException: void <init>(java.util.Date,java.security.cert.CRLReason,javax.security.auth.x500.X500Principal,java.util.Map)>
<java.security.cert.CertificateRevokedException: java.util.Map getExtensions()>
<java.security.cert.CertificateRevokedException: java.util.Date getRevocationDate()>
<java.security.cert.CertificateRevokedException: javax.security.auth.x500.X500Principal getAuthorityName()>
<android.hardware.camera2.DngCreator: android.hardware.camera2.DngCreator setOrientation(int)>
<android.hardware.camera2.DngCreator: android.hardware.camera2.DngCreator setThumbnail(android.graphics.Bitmap)>
<android.hardware.camera2.DngCreator: android.hardware.camera2.DngCreator setThumbnail(android.media.Image)>
<android.hardware.camera2.DngCreator: void writeImage(java.io.OutputStream,android.media.Image)>
<android.hardware.camera2.DngCreator: void close()>
<android.hardware.camera2.DngCreator: android.hardware.camera2.DngCreator setDescription(java.lang.String)>
<android.hardware.camera2.DngCreator: void writeInputStream(java.io.OutputStream,android.util.Size,java.io.InputStream,long)>
<android.hardware.camera2.DngCreator: void writeByteBuffer(java.io.OutputStream,android.util.Size,java.nio.ByteBuffer,long)>
<android.hardware.camera2.DngCreator: void <init>(android.hardware.camera2.CameraCharacteristics,android.hardware.camera2.CaptureResult)>
<android.hardware.camera2.DngCreator: android.hardware.camera2.DngCreator setLocation(android.location.Location)>
<android.text.InputFilter.LengthFilter: int getMax()>
<android.text.InputFilter.LengthFilter: void <init>(int)>
<android.text.InputFilter.LengthFilter: CharSequence filter(CharSequence,int,int,android.text.Spanned,int,int)>
<android.text.method.TimeKeyListener: android.text.method.TimeKeyListener getInstance()>
<android.text.method.TimeKeyListener: int getInputType()>
<android.text.method.TimeKeyListener: void <init>(java.util.Locale)>
<android.text.method.TimeKeyListener: char[] getAcceptedChars()>
<android.text.method.TimeKeyListener: void <init>()>
<android.text.method.TimeKeyListener: android.text.method.TimeKeyListener getInstance(java.util.Locale)>
<android.drm.DrmInfoEvent: void <init>(int,int,String,java.util.HashMap)>
<android.drm.DrmInfoEvent: void <init>(int,int,String)>
<android.view.inputmethod.InputMethodSession.EventCallback: void finishedEvent(int,boolean)>
<android.webkit.WebHistoryItem: android.webkit.WebHistoryItem clone()>
<android.webkit.WebHistoryItem: java.lang.String getTitle()>
<android.webkit.WebHistoryItem: int getId()>
<android.webkit.WebHistoryItem: android.graphics.Bitmap getFavicon()>
<android.webkit.WebHistoryItem: java.lang.String getUrl()>
<android.webkit.WebHistoryItem: java.lang.String getOriginalUrl()>
<android.webkit.WebHistoryItem: void <init>()>
<android.animation.AnimatorInflater: void <init>()>
<android.animation.AnimatorInflater: android.animation.Animator loadAnimator(android.content.Context,@AnimatorResint)>
<android.animation.AnimatorInflater: android.animation.StateListAnimator loadStateListAnimator(android.content.Context,int)>
<android.hardware.biometrics.BiometricPrompt: void authenticate(android.hardware.biometrics.BiometricPrompt.CryptoObject,android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt.AuthenticationCallback)>
<android.hardware.biometrics.BiometricPrompt: void authenticate(android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt.AuthenticationCallback)>
<android.os.MessageQueue.OnFileDescriptorEventListener: int onFileDescriptorEvents(java.io.FileDescriptor,int)>
<android.view.CollapsibleActionView: void onActionViewExpanded()>
<android.view.CollapsibleActionView: void onActionViewCollapsed()>
<android.media.tv.TvInputHardwareInfo.Builder: android.media.tv.TvInputHardwareInfo.Builder audioAddress(java.lang.String)>
<android.media.tv.TvInputHardwareInfo.Builder: android.media.tv.TvInputHardwareInfo.Builder deviceId(int)>
<android.media.tv.TvInputHardwareInfo.Builder: android.media.tv.TvInputHardwareInfo.Builder audioType(int)>
<android.media.tv.TvInputHardwareInfo.Builder: android.media.tv.TvInputHardwareInfo.Builder cableConnectionStatus(int)>
<android.media.tv.TvInputHardwareInfo.Builder: android.media.tv.TvInputHardwareInfo build()>
<android.media.tv.TvInputHardwareInfo.Builder: android.media.tv.TvInputHardwareInfo.Builder type(int)>
<android.media.tv.TvInputHardwareInfo.Builder: void <init>()>
<android.media.tv.TvInputHardwareInfo.Builder: android.media.tv.TvInputHardwareInfo.Builder hdmiPortId(int)>
<android.content.SyncRequest.Builder: android.content.SyncRequest.Builder setExtras(android.os.Bundle)>
<android.content.SyncRequest.Builder: void <init>()>
<android.content.SyncRequest.Builder: android.content.SyncRequest.Builder setManual(boolean)>
<android.content.SyncRequest.Builder: android.content.SyncRequest.Builder syncOnce()>
<android.content.SyncRequest.Builder: android.content.SyncRequest.Builder setIgnoreSettings(boolean)>
<android.content.SyncRequest.Builder: android.content.SyncRequest.Builder setRequiresCharging(boolean)>
<android.content.SyncRequest.Builder: android.content.SyncRequest.Builder setIgnoreBackoff(boolean)>
<android.content.SyncRequest.Builder: android.content.SyncRequest build()>
<android.content.SyncRequest.Builder: android.content.SyncRequest.Builder setSyncAdapter(android.accounts.Account,java.lang.String)>
<android.content.SyncRequest.Builder: android.content.SyncRequest.Builder setDisallowMetered(boolean)>
<android.content.SyncRequest.Builder: android.content.SyncRequest.Builder setExpedited(boolean)>
<android.content.SyncRequest.Builder: android.content.SyncRequest.Builder setNoRetry(boolean)>
<android.content.SyncRequest.Builder: android.content.SyncRequest.Builder syncPeriodic(long,long)>
<java.util.logging.LoggingPermission: void <init>(String,String)>
<android.media.MediaSession2Service.MediaNotification: void <init>(int,android.app.Notification)>
<android.media.MediaSession2Service.MediaNotification: int getNotificationId()>
<android.media.MediaSession2Service.MediaNotification: android.app.Notification getNotification()>
<android.text.Selection.MemoryTextWatcher: void onTextChanged(CharSequence,int,int,int)>
<android.text.Selection.MemoryTextWatcher: void <init>()>
<android.text.Selection.MemoryTextWatcher: void beforeTextChanged(CharSequence,int,int,int)>
<android.text.Selection.MemoryTextWatcher: void afterTextChanged(android.text.Editable)>
<java.util.zip.CheckedInputStream: void <init>(java.io.InputStream,java.util.zip.Checksum)>
<java.util.zip.CheckedInputStream: java.util.zip.Checksum getChecksum()>
<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameterGenerator getInstance(java.lang.String,java.lang.String)>
<java.security.AlgorithmParameterGenerator: void init(int)>
<java.security.AlgorithmParameterGenerator: void init(int,java.security.SecureRandom)>
<java.security.AlgorithmParameterGenerator: void <init>(java.security.AlgorithmParameterGeneratorSpi,java.security.Provider,String)>
<java.security.AlgorithmParameterGenerator: void init(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameterGenerator getInstance(java.lang.String)>
<java.security.AlgorithmParameterGenerator: void init(java.security.spec.AlgorithmParameterSpec)>
<java.security.AlgorithmParameterGenerator: java.lang.String getAlgorithm()>
<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameters generateParameters()>
<java.security.AlgorithmParameterGenerator: java.security.Provider getProvider()>
<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameterGenerator getInstance(java.lang.String,java.security.Provider)>
<android.telecom.ParcelableCallAnalytics.EventTiming: int getName()>
<android.telecom.ParcelableCallAnalytics.EventTiming: int describeContents()>
<android.telecom.ParcelableCallAnalytics.EventTiming: void writeToParcel(android.os.Parcel,int)>
<android.telecom.ParcelableCallAnalytics.EventTiming: void <init>(int,long)>
<android.telecom.ParcelableCallAnalytics.EventTiming: long getTime()>
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>
<java.net.URLDecoder: void <init>()>
<android.webkit.ServiceWorkerController: void <init>()>
<android.webkit.ServiceWorkerController: android.webkit.ServiceWorkerWebSettings getServiceWorkerWebSettings()>
<android.webkit.ServiceWorkerController: void setServiceWorkerClient(android.webkit.ServiceWorkerClient)>
<android.webkit.ServiceWorkerController: android.webkit.ServiceWorkerController getInstance()>
<android.telephony.ims.ImsExternalCallState: boolean isCallHeld()>
<android.telephony.ims.ImsExternalCallState: boolean isCallPullable()>
<android.telephony.ims.ImsExternalCallState: void <init>(String,android.net.Uri,android.net.Uri,boolean,int,int,boolean)>
<android.telephony.ims.ImsExternalCallState: int getCallState()>
<android.telephony.ims.ImsExternalCallState: android.net.Uri getAddress()>
<android.telephony.ims.ImsExternalCallState: int getCallId()>
<android.telephony.ims.ImsExternalCallState: int describeContents()>
<android.telephony.ims.ImsExternalCallState: int getCallType()>
<android.telephony.ims.ImsExternalCallState: android.net.Uri getLocalAddress()>
<android.telephony.ims.ImsExternalCallState: void writeToParcel(android.os.Parcel,int)>
<android.location.LocationListener: void onProviderEnabled(java.lang.String)>
<android.location.LocationListener: void onStatusChanged(java.lang.String,int,android.os.Bundle)>
<android.location.LocationListener: void onProviderDisabled(java.lang.String)>
<android.location.LocationListener: void onLocationChanged(android.location.Location)>
<android.provider.ContactsContract.RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract.RawContacts: android.content.EntityIterator newEntityIterator(android.database.Cursor)>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectCredentialProtectedWhileLocked()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectNonSdkApiUsage()>
<android.os.StrictMode.VmPolicy.Builder: void <init>(android.os.StrictMode.VmPolicy)>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectLeakedRegistrationObjects()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder penaltyListener(java.util.concurrent.Executor,android.os.StrictMode.OnVmViolationListener)>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder penaltyDeath()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectCleartextNetwork()>
<android.os.StrictMode.VmPolicy.Builder: void <init>()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectContentUriWithoutPermission()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectActivityLeaks()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectAll()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectFileUriExposure()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy build()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder penaltyDeathOnCleartextNetwork()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectLeakedSqlLiteObjects()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder penaltyDeathOnFileUriExposure()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectLeakedClosableObjects()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder penaltyDropBox()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder penaltyLog()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectImplicitDirectBoot()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder detectUntaggedSockets()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder permitNonSdkApiUsage()>
<android.os.StrictMode.VmPolicy.Builder: android.os.StrictMode.VmPolicy.Builder setClassInstanceLimit(java.lang.Class,int)>
<android.hardware.Camera.CameraInfo: void <init>()>
<android.util.SizeF: float getHeight()>
<android.util.SizeF: float getWidth()>
<android.util.SizeF: void <init>(float,float)>
<android.util.SizeF: android.util.SizeF parseSizeF(java.lang.String)>
<android.util.Patterns: java.lang.String concatGroups(java.util.regex.Matcher)>
<android.util.Patterns: java.lang.String digitsAndPlusOnly(java.util.regex.Matcher)>
<java.security.KeyStore.PrivateKeyEntry: void <init>(java.security.PrivateKey,java.security.cert.Certificate[])>
<java.security.KeyStore.PrivateKeyEntry: java.security.cert.Certificate getCertificate()>
<java.security.KeyStore.PrivateKeyEntry: void <init>(java.security.PrivateKey,java.security.cert.Certificate[],java.util.Set)>
<java.security.KeyStore.PrivateKeyEntry: java.security.cert.Certificate[] getCertificateChain()>
<java.security.KeyStore.PrivateKeyEntry: java.security.PrivateKey getPrivateKey()>
<android.view.WindowId.FocusObserver: void <init>()>
<android.view.WindowId.FocusObserver: void onFocusGained(android.view.WindowId)>
<android.view.WindowId.FocusObserver: void onFocusLost(android.view.WindowId)>
<android.app.StatsManager: byte[] getStatsMetadata()>
<android.app.StatsManager: boolean addConfiguration(long,byte[])>
<android.app.StatsManager: byte[] getData(long)>
<android.app.StatsManager: long[] getRegisteredExperimentIds()>
<android.app.StatsManager: byte[] getMetadata()>
<android.app.StatsManager: void setBroadcastSubscriber(android.app.PendingIntent,long,long)>
<android.app.StatsManager: boolean removeConfiguration(long)>
<android.app.StatsManager: long[] setActiveConfigsChangedOperation(android.app.PendingIntent)>
<android.app.StatsManager: void removeConfig(long)>
<android.app.StatsManager: void addConfig(long,byte[])>
<android.app.StatsManager: boolean setDataFetchOperation(long,android.app.PendingIntent)>
<android.app.StatsManager: boolean setBroadcastSubscriber(long,long,android.app.PendingIntent)>
<android.app.StatsManager: void setFetchReportsOperation(android.app.PendingIntent,long)>
<android.app.StatsManager: byte[] getReports(long)>
<android.text.style.DynamicDrawableSpan: android.graphics.drawable.Drawable getDrawable()>
<android.text.style.DynamicDrawableSpan: void <init>()>
<android.text.style.DynamicDrawableSpan: void draw(android.graphics.Canvas,CharSequence,int,int,float,int,int,int,android.graphics.Paint)>
<android.text.style.DynamicDrawableSpan: int getSize(android.graphics.Paint,CharSequence,int,int,android.graphics.Paint.FontMetricsInt)>
<android.text.style.DynamicDrawableSpan: void <init>(int)>
<android.text.style.DynamicDrawableSpan: int getVerticalAlignment()>
<android.net.NetworkRecommendationProvider: void onRequestScores(android.net.NetworkKey[])>
<android.net.NetworkRecommendationProvider: android.os.IBinder getBinder()>
<android.net.NetworkRecommendationProvider: void <init>(android.content.Context,java.util.concurrent.Executor)>
<android.net.wifi.p2p.WifiP2pGroup: int getFrequency()>
<android.net.wifi.p2p.WifiP2pGroup: void <init>(android.net.wifi.p2p.WifiP2pGroup)>
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getPassphrase()>
<android.net.wifi.p2p.WifiP2pGroup: android.net.wifi.p2p.WifiP2pDevice getOwner()>
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getNetworkName()>
<android.net.wifi.p2p.WifiP2pGroup: boolean isGroupOwner()>
<android.net.wifi.p2p.WifiP2pGroup: void <init>()>
<android.net.wifi.p2p.WifiP2pGroup: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.p2p.WifiP2pGroup: java.util.Collection getClientList()>
<android.net.wifi.p2p.WifiP2pGroup: int describeContents()>
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getInterface()>
<android.widget.OverScroller: void <init>(android.content.Context,android.view.animation.Interpolator,float,float)>
<android.widget.OverScroller: boolean computeScrollOffset()>
<android.widget.OverScroller: void fling(int,int,int,int,int,int,int,int)>
<android.widget.OverScroller: int getFinalY()>
<android.widget.OverScroller: int getFinalX()>
<android.widget.OverScroller: boolean springBack(int,int,int,int,int,int)>
<android.widget.OverScroller: void startScroll(int,int,int,int)>
<android.widget.OverScroller: void <init>(android.content.Context)>
<android.widget.OverScroller: void fling(int,int,int,int,int,int,int,int,int,int)>
<android.widget.OverScroller: int getCurrX()>
<android.widget.OverScroller: int getStartX()>
<android.widget.OverScroller: int getCurrY()>
<android.widget.OverScroller: int getStartY()>
<android.widget.OverScroller: void startScroll(int,int,int,int,int)>
<android.widget.OverScroller: void <init>(android.content.Context,android.view.animation.Interpolator)>
<android.widget.OverScroller: void forceFinished(boolean)>
<android.widget.OverScroller: void abortAnimation()>
<android.widget.OverScroller: boolean isOverScrolled()>
<android.widget.OverScroller: void notifyVerticalEdgeReached(int,int,int)>
<android.widget.OverScroller: void notifyHorizontalEdgeReached(int,int,int)>
<android.widget.OverScroller: float getCurrVelocity()>
<android.widget.OverScroller: void <init>(android.content.Context,android.view.animation.Interpolator,float,float,boolean)>
<android.widget.OverScroller: void setFriction(float)>
<android.widget.OverScroller: boolean isFinished()>
<android.content.SyncResult: boolean madeSomeProgress()>
<android.content.SyncResult: java.lang.String toDebugString()>
<android.content.SyncResult: void clear()>
<android.content.SyncResult: int describeContents()>
<android.content.SyncResult: boolean hasHardError()>
<android.content.SyncResult: boolean hasError()>
<android.content.SyncResult: boolean hasSoftError()>
<android.content.SyncResult: void <init>()>
<android.content.SyncResult: void writeToParcel(android.os.Parcel,int)>
<javax.net.ssl.SSLProtocolException: void <init>(String)>
<android.telephony.CellInfoGsm: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellInfoGsm: android.telephony.CellIdentityGsm getCellIdentity()>
<android.telephony.CellInfoGsm: android.telephony.CellSignalStrengthGsm getCellSignalStrength()>
<java.util.zip.ZipException: void <init>()>
<java.util.zip.ZipException: void <init>(String)>
<android.widget.Magnifier.Callback: void onOperationComplete()>
<android.view.InputEvent: int describeContents()>
<android.view.InputEvent: long getEventTime()>
<android.view.InputEvent: int getSource()>
<android.view.InputEvent: android.view.InputDevice getDevice()>
<android.view.InputEvent: int getDeviceId()>
<android.view.InputEvent: boolean isFromSource(int)>
<java.util.TimeZone: void setRawOffset(int)>
<java.util.TimeZone: java.lang.String getDisplayName(boolean,int)>
<java.util.TimeZone: java.lang.Object clone()>
<java.util.TimeZone: boolean useDaylightTime()>
<java.util.TimeZone: java.util.TimeZone getDefault()>
<java.util.TimeZone: int getOffset(int,int,int,int,int,int)>
<java.util.TimeZone: int getRawOffset()>
<java.util.TimeZone: void setID(java.lang.String)>
<java.util.TimeZone: int getOffset(long)>
<java.util.TimeZone: java.util.TimeZone getTimeZone(java.time.ZoneId)>
<java.util.TimeZone: boolean hasSameRules(java.util.TimeZone)>
<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
<java.util.TimeZone: java.time.ZoneId toZoneId()>
<java.util.TimeZone: boolean observesDaylightTime()>
<java.util.TimeZone: java.lang.String[] getAvailableIDs()>
<java.util.TimeZone: java.lang.String getDisplayName()>
<java.util.TimeZone: java.lang.String getID()>
<java.util.TimeZone: boolean inDaylightTime(java.util.Date)>
<java.util.TimeZone: java.lang.String[] getAvailableIDs(int)>
<java.util.TimeZone: int getDSTSavings()>
<java.util.TimeZone: void <init>()>
<java.util.TimeZone: void setDefault(java.util.TimeZone)>
<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>
<java.util.TimeZone: java.lang.String getDisplayName(java.util.Locale)>
<android.media.MediaDrmException: void <init>(String)>
<android.service.contentcapture.ContentCaptureService: void onActivityEvent(android.service.contentcapture.ActivityEvent)>
<android.service.contentcapture.ContentCaptureService: void onDestroyContentCaptureSession(android.view.contentcapture.ContentCaptureSessionId)>
<android.service.contentcapture.ContentCaptureService: void setContentCaptureConditions(java.lang.String,java.util.Set)>
<android.service.contentcapture.ContentCaptureService: void onCreateContentCaptureSession(android.view.contentcapture.ContentCaptureContext,android.view.contentcapture.ContentCaptureSessionId)>
<android.service.contentcapture.ContentCaptureService: void onDisconnected()>
<android.service.contentcapture.ContentCaptureService: void <init>()>
<android.service.contentcapture.ContentCaptureService: void disableSelf()>
<android.service.contentcapture.ContentCaptureService: void onContentCaptureEvent(android.view.contentcapture.ContentCaptureSessionId,android.view.contentcapture.ContentCaptureEvent)>
<android.service.contentcapture.ContentCaptureService: void onActivitySnapshot(android.view.contentcapture.ContentCaptureSessionId,android.service.contentcapture.SnapshotData)>
<android.service.contentcapture.ContentCaptureService: void onDataRemovalRequest(android.view.contentcapture.DataRemovalRequest)>
<android.service.contentcapture.ContentCaptureService: void setContentCaptureWhitelist(java.util.Set,java.util.Set)>
<android.service.contentcapture.ContentCaptureService: void onConnected()>
<android.database.sqlite.SQLiteAccessPermException: void <init>()>
<android.database.sqlite.SQLiteAccessPermException: void <init>(String)>
<android.print.PrintDocumentInfo: int getPageCount()>
<android.print.PrintDocumentInfo: int getContentType()>
<android.print.PrintDocumentInfo: long getDataSize()>
<android.print.PrintDocumentInfo: void writeToParcel(android.os.Parcel,int)>
<android.print.PrintDocumentInfo: int describeContents()>
<android.print.PrintDocumentInfo: java.lang.String getName()>
<android.app.Notification.InboxStyle: void <init>()>
<android.app.Notification.InboxStyle: void <init>(android.app.Notification.Builder)>
<android.app.Notification.InboxStyle: android.app.Notification.InboxStyle addLine(CharSequence)>
<android.app.Notification.InboxStyle: android.app.Notification.InboxStyle setBigContentTitle(CharSequence)>
<android.app.Notification.InboxStyle: android.app.Notification.InboxStyle setSummaryText(CharSequence)>
<java.util.zip.Deflater: void <init>(int,boolean)>
<java.util.zip.Deflater: boolean needsInput()>
<java.util.zip.Deflater: int getAdler()>
<java.util.zip.Deflater: void setInput(byte[],int,int)>
<java.util.zip.Deflater: int getTotalOut()>
<java.util.zip.Deflater: int deflate(byte[],int,int)>
<java.util.zip.Deflater: int getTotalIn()>
<java.util.zip.Deflater: void setDictionary(byte[])>
<java.util.zip.Deflater: int deflate(byte[],int,int,int)>
<java.util.zip.Deflater: long getBytesRead()>
<java.util.zip.Deflater: void finalize()>
<java.util.zip.Deflater: void setDictionary(byte[],int,int)>
<java.util.zip.Deflater: void setInput(byte[])>
<java.util.zip.Deflater: int deflate(byte[])>
<java.util.zip.Deflater: void <init>()>
<java.util.zip.Deflater: void end()>
<java.util.zip.Deflater: void reset()>
<java.util.zip.Deflater: boolean finished()>
<java.util.zip.Deflater: long getBytesWritten()>
<java.util.zip.Deflater: void <init>(int)>
<java.util.zip.Deflater: void setLevel(int)>
<java.util.zip.Deflater: void finish()>
<java.util.zip.Deflater: void setStrategy(int)>
<android.telephony.ims.ImsSsInfo.Builder: android.telephony.ims.ImsSsInfo build()>
<android.telephony.ims.ImsSsInfo.Builder: void <init>(int)>
<android.telephony.ims.ImsSsInfo.Builder: android.telephony.ims.ImsSsInfo.Builder setClirOutgoingState(int)>
<android.telephony.ims.ImsSsInfo.Builder: android.telephony.ims.ImsSsInfo.Builder setProvisionStatus(int)>
<android.telephony.ims.ImsSsInfo.Builder: android.telephony.ims.ImsSsInfo.Builder setClirInterrogationStatus(int)>
<android.telephony.ims.ImsSsInfo.Builder: android.telephony.ims.ImsSsInfo.Builder setIncomingCommunicationBarringNumber(java.lang.String)>
<android.service.autofill.CharSequenceTransformation: int describeContents()>
<android.service.autofill.CharSequenceTransformation: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.CharSequenceTransformation: void apply(android.service.autofill.ValueFinder,android.widget.RemoteViews,int)>
<javax.security.cert.CertificateEncodingException: void <init>(String)>
<javax.security.cert.CertificateEncodingException: void <init>()>
<android.database.sqlite.SQLiteOpenHelper: void onConfigure(android.database.sqlite.SQLiteDatabase)>
<android.database.sqlite.SQLiteOpenHelper: java.lang.String getDatabaseName()>
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>
<android.database.sqlite.SQLiteOpenHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>
<android.database.sqlite.SQLiteOpenHelper: void onDowngrade(android.database.sqlite.SQLiteDatabase,int,int)>
<android.database.sqlite.SQLiteOpenHelper: void onOpen(android.database.sqlite.SQLiteDatabase)>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,String,android.database.sqlite.SQLiteDatabase.CursorFactory,int)>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,String,android.database.sqlite.SQLiteDatabase.CursorFactory,int,android.database.DatabaseErrorHandler)>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,String,int,android.database.sqlite.SQLiteDatabase.OpenParams)>
<android.database.sqlite.SQLiteOpenHelper: void setLookasideConfig(int,int)>
<android.database.sqlite.SQLiteOpenHelper: void setOpenParams(android.database.sqlite.SQLiteDatabase.OpenParams)>
<android.database.sqlite.SQLiteOpenHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>
<android.database.sqlite.SQLiteOpenHelper: void setWriteAheadLoggingEnabled(boolean)>
<android.database.sqlite.SQLiteOpenHelper: void close()>
<android.database.sqlite.SQLiteOpenHelper: void setIdleConnectionTimeout(long)>
<java.text.DateFormat.Field: java.text.DateFormat.Field ofCalendarField(int)>
<java.text.DateFormat.Field: void <init>(String,int)>
<java.text.DateFormat.Field: int getCalendarField()>
<android.content.ContentValues: void <init>(android.content.ContentValues)>
<android.content.ContentValues: java.lang.Boolean getAsBoolean(java.lang.String)>
<android.content.ContentValues: java.lang.Byte getAsByte(java.lang.String)>
<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Byte)>
<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>
<android.content.ContentValues: void put(java.lang.String,byte[])>
<android.content.ContentValues: java.util.Set keySet()>
<android.content.ContentValues: void <init>(int)>
<android.content.ContentValues: java.lang.Short getAsShort(java.lang.String)>
<android.content.ContentValues: byte[] getAsByteArray(java.lang.String)>
<android.content.ContentValues: int describeContents()>
<android.content.ContentValues: void put(java.lang.String,java.lang.String)>
<android.content.ContentValues: java.lang.Object get(java.lang.String)>
<android.content.ContentValues: void remove(java.lang.String)>
<android.content.ContentValues: java.util.Set valueSet()>
<android.content.ContentValues: java.lang.Float getAsFloat(java.lang.String)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Float)>
<android.content.ContentValues: boolean containsKey(java.lang.String)>
<android.content.ContentValues: void putNull(java.lang.String)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>
<android.content.ContentValues: void putAll(android.content.ContentValues)>
<android.content.ContentValues: void <init>()>
<android.content.ContentValues: java.lang.Double getAsDouble(java.lang.String)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Double)>
<android.content.ContentValues: void clear()>
<android.content.ContentValues: int size()>
<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Short)>
<android.content.ContentValues: void writeToParcel(android.os.Parcel,int)>
<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>
<android.widget.ActionMenuView.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<android.widget.ActionMenuView.LayoutParams: void <init>(android.widget.ActionMenuView.LayoutParams)>
<android.widget.ActionMenuView.LayoutParams: void <init>(int,int)>
<android.widget.ActionMenuView.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.media.CameraProfile: void <init>()>
<android.media.CameraProfile: int getJpegEncodingQualityParameter(int)>
<android.media.CameraProfile: int getJpegEncodingQualityParameter(int,int)>
<android.renderscript.ScriptGroup: java.lang.Object[] execute(java.lang.Object...)>
<android.renderscript.ScriptGroup: void execute()>
<android.renderscript.ScriptGroup: void setOutput(android.renderscript.Script.KernelID,android.renderscript.Allocation)>
<android.renderscript.ScriptGroup: void setInput(android.renderscript.Script.KernelID,android.renderscript.Allocation)>
<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(Runnable,T)>
<java.util.concurrent.AbstractExecutorService: void <init>()>
<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection)>
<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)>
<java.util.concurrent.AbstractExecutorService: T invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(Runnable)>
<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>
<java.util.concurrent.AbstractExecutorService: T invokeAny(java.util.Collection)>
<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(Runnable,T)>
<android.bluetooth.BluetoothClass.Device: void <init>()>
<android.media.session.MediaController.PlaybackInfo: android.media.AudioAttributes getAudioAttributes()>
<android.media.session.MediaController.PlaybackInfo: int getPlaybackType()>
<android.media.session.MediaController.PlaybackInfo: int getMaxVolume()>
<android.media.session.MediaController.PlaybackInfo: int describeContents()>
<android.media.session.MediaController.PlaybackInfo: int getCurrentVolume()>
<android.media.session.MediaController.PlaybackInfo: int getVolumeControl()>
<android.media.session.MediaController.PlaybackInfo: void writeToParcel(android.os.Parcel,int)>
<android.icu.text.IDNA: java.lang.StringBuilder labelToUnicode(CharSequence,java.lang.StringBuilder,android.icu.text.IDNA.Info)>
<android.icu.text.IDNA: java.lang.StringBuilder nameToASCII(CharSequence,java.lang.StringBuilder,android.icu.text.IDNA.Info)>
<android.icu.text.IDNA: java.lang.StringBuilder nameToUnicode(CharSequence,java.lang.StringBuilder,android.icu.text.IDNA.Info)>
<android.icu.text.IDNA: android.icu.text.IDNA getUTS46Instance(int)>
<android.icu.text.IDNA: java.lang.StringBuilder labelToASCII(CharSequence,java.lang.StringBuilder,android.icu.text.IDNA.Info)>
<javax.net.ssl.CertPathTrustManagerParameters: void <init>(java.security.cert.CertPathParameters)>
<javax.net.ssl.CertPathTrustManagerParameters: java.security.cert.CertPathParameters getParameters()>
<android.graphics.EmbossMaskFilter: void <init>(float[],float,float,float)>
<android.graphics.Insets: android.graphics.Insets min(android.graphics.Insets,android.graphics.Insets)>
<android.graphics.Insets: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Insets: int describeContents()>
<android.graphics.Insets: android.graphics.Insets subtract(android.graphics.Insets,android.graphics.Insets)>
<android.graphics.Insets: android.graphics.Insets max(android.graphics.Insets,android.graphics.Insets)>
<android.graphics.Insets: android.graphics.Insets add(android.graphics.Insets,android.graphics.Insets)>
<android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>
<android.graphics.Insets: android.graphics.Insets of(android.graphics.Rect)>
<android.content.pm.PackageItemInfo.DisplayNameComparator: int compare(android.content.pm.PackageItemInfo,android.content.pm.PackageItemInfo)>
<android.content.pm.PackageItemInfo.DisplayNameComparator: void <init>(android.content.pm.PackageManager)>
<android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageInfo: void <init>()>
<android.content.pm.PackageInfo: int describeContents()>
<android.content.pm.PackageInfo: void setLongVersionCode(long)>
<android.content.pm.PackageInfo: long getLongVersionCode()>
<android.speech.RecognitionService.Callback: void rmsChanged(float)>
<android.speech.RecognitionService.Callback: int getCallingUid()>
<android.speech.RecognitionService.Callback: void beginningOfSpeech()>
<android.speech.RecognitionService.Callback: void endOfSpeech()>
<android.speech.RecognitionService.Callback: void partialResults(android.os.Bundle)>
<android.speech.RecognitionService.Callback: void error(int)>
<android.speech.RecognitionService.Callback: void readyForSpeech(android.os.Bundle)>
<android.speech.RecognitionService.Callback: void bufferReceived(byte[])>
<android.speech.RecognitionService.Callback: void results(android.os.Bundle)>
<java.util.MissingFormatArgumentException: java.lang.String getFormatSpecifier()>
<java.util.MissingFormatArgumentException: void <init>(String)>
<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>
<javax.crypto.CipherInputStream: void <init>(java.io.InputStream)>
<android.media.MediaRouter.RouteCategory: java.util.List getRoutes(java.util.List)>
<android.media.MediaRouter.RouteCategory: int getSupportedTypes()>
<android.media.MediaRouter.RouteCategory: CharSequence getName()>
<android.media.MediaRouter.RouteCategory: boolean isGroupable()>
<android.media.MediaRouter.RouteCategory: CharSequence getName(android.content.Context)>
<android.provider.ContactsContract.CommonDataKinds.StructuredPostal: CharSequence getTypeLabel(android.content.res.Resources,int,CharSequence)>
<android.provider.ContactsContract.CommonDataKinds.StructuredPostal: int getTypeLabelResource(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glGenerateMipmapOES(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glGetTexGenxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glBindRenderbufferOES(int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glRenderbufferStorageOES(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: int glCheckFramebufferStatusOES(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glCopyTexImage2D(int,int,int,int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glGetIntegerv(int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glTexGenfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glBlendEquation(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glDeleteFramebuffersOES(int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glTexGenxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glFramebufferRenderbufferOES(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glGenRenderbuffersOES(int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glGetTexGenfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glDeleteFramebuffersOES(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glBindFramebufferOES(int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glBlendEquationSeparate(int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glGetTexGenxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glTexEnvx(int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glTexParameterf(int,int,float)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: boolean glIsRenderbufferOES(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glTexEnvxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glFramebufferTexture2DOES(int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glGetTexGeniv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glDeleteRenderbuffersOES(int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glTexGenf(int,int,float)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glGetRenderbufferParameterivOES(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glStencilOp(int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glBindTexture(int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glTexEnvxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glTexGenfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: boolean glIsFramebufferOES(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glBlendFuncSeparate(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glTexGenx(int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glGenFramebuffersOES(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glEnable(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glGetTexGenfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glTexGeniv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glGenRenderbuffersOES(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glGenFramebuffersOES(int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glGetFramebufferAttachmentParameterivOES(int,int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glGetTexGeniv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glDeleteRenderbuffersOES(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glTexEnvf(int,int,float)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glTexEnvfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glTexGeniv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glTexGenxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glTexEnvfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glGetRenderbufferParameterivOES(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glGetFramebufferAttachmentParameterivOES(int,int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glTexGeni(int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack extends javax.microedition.khronos.opengles.GL: void glGetIntegerv(int,java.nio.IntBuffer)>
<java.util.zip.DataFormatException: void <init>(String)>
<java.util.zip.DataFormatException: void <init>()>
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLEngine engineCreateSSLEngine(java.lang.String,int)>
<javax.net.ssl.SSLContextSpi: void engineInit(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLSocketFactory engineGetSocketFactory()>
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLParameters engineGetDefaultSSLParameters()>
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLSessionContext engineGetServerSessionContext()>
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLServerSocketFactory engineGetServerSocketFactory()>
<javax.net.ssl.SSLContextSpi: void <init>()>
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLEngine engineCreateSSLEngine()>
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLSessionContext engineGetClientSessionContext()>
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLParameters engineGetSupportedSSLParameters()>
<java.util.LinkedList: E removeFirst()>
<java.util.LinkedList: java.util.Iterator descendingIterator()>
<java.util.LinkedList: E pop()>
<java.util.LinkedList: java.lang.Object clone()>
<java.util.LinkedList: boolean offer(E)>
<java.util.LinkedList: E poll()>
<java.util.LinkedList: boolean removeLastOccurrence(java.lang.Object)>
<java.util.LinkedList: E pollLast()>
<java.util.LinkedList: void push(E)>
<java.util.LinkedList: void addLast(E)>
<java.util.LinkedList: int size()>
<java.util.LinkedList: E element()>
<java.util.LinkedList: E peekFirst()>
<java.util.LinkedList: E getLast()>
<java.util.LinkedList: void addFirst(E)>
<java.util.LinkedList: boolean offerLast(E)>
<java.util.LinkedList: E remove()>
<java.util.LinkedList: E removeLast()>
<java.util.LinkedList: E peekLast()>
<java.util.LinkedList: void <init>()>
<java.util.LinkedList: boolean offerFirst(E)>
<java.util.LinkedList: E peek()>
<java.util.LinkedList: E getFirst()>
<java.util.LinkedList: E pollFirst()>
<java.util.LinkedList: boolean removeFirstOccurrence(java.lang.Object)>
<java.util.LinkedList: void <init>(java.util.Collection)>
<android.telephony.ims.ImsUtListener: void onUtConfigurationCallBarringQueried(int,android.telephony.ims.ImsSsInfo[])>
<android.telephony.ims.ImsUtListener: void onUtConfigurationUpdateFailed(int,android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.ImsUtListener: void onUtConfigurationQueryFailed(int,android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.ImsUtListener: void onSupplementaryServiceIndication(android.telephony.ims.ImsSsData)>
<android.telephony.ims.ImsUtListener: void onUtConfigurationCallForwardQueried(int,android.telephony.ims.ImsCallForwardInfo[])>
<android.telephony.ims.ImsUtListener: void onUtConfigurationCallWaitingQueried(int,android.telephony.ims.ImsSsInfo[])>
<android.telephony.ims.ImsUtListener: void onUtConfigurationQueried(int,android.os.Bundle)>
<android.telephony.ims.ImsUtListener: void onUtConfigurationUpdated(int)>
<android.net.wifi.WifiScanner.ActionListener: void onSuccess()>
<android.net.wifi.WifiScanner.ActionListener: void onFailure(int,java.lang.String)>
<android.media.tv.TvInputManager.TvInputCallback: void onInputStateChanged(java.lang.String,int)>
<android.media.tv.TvInputManager.TvInputCallback: void onInputAdded(java.lang.String)>
<android.media.tv.TvInputManager.TvInputCallback: void onTvInputInfoUpdated(android.media.tv.TvInputInfo)>
<android.media.tv.TvInputManager.TvInputCallback: void <init>()>
<android.media.tv.TvInputManager.TvInputCallback: void onInputRemoved(java.lang.String)>
<android.media.tv.TvInputManager.TvInputCallback: void onInputUpdated(java.lang.String)>
<android.widget.MediaController.MediaPlayerControl: boolean isPlaying()>
<android.widget.MediaController.MediaPlayerControl: boolean canSeekForward()>
<android.widget.MediaController.MediaPlayerControl: void pause()>
<android.widget.MediaController.MediaPlayerControl: int getCurrentPosition()>
<android.widget.MediaController.MediaPlayerControl: void seekTo(int)>
<android.widget.MediaController.MediaPlayerControl: int getBufferPercentage()>
<android.widget.MediaController.MediaPlayerControl: int getAudioSessionId()>
<android.widget.MediaController.MediaPlayerControl: int getDuration()>
<android.widget.MediaController.MediaPlayerControl: void start()>
<android.widget.MediaController.MediaPlayerControl: boolean canSeekBackward()>
<android.widget.MediaController.MediaPlayerControl: boolean canPause()>
<android.widget.Gallery: void setCallbackDuringFling(boolean)>
<android.widget.Gallery: void setGravity(int)>
<android.widget.Gallery: void onLongPress(android.view.MotionEvent)>
<android.widget.Gallery: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.widget.Gallery: boolean onSingleTapUp(android.view.MotionEvent)>
<android.widget.Gallery: void setAnimationDuration(int)>
<android.widget.Gallery: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.Gallery: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Gallery: void setUnselectedAlpha(float)>
<android.widget.Gallery: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.Gallery: boolean onDown(android.view.MotionEvent)>
<android.widget.Gallery: void onShowPress(android.view.MotionEvent)>
<android.widget.Gallery: void setSpacing(int)>
<android.widget.Gallery: void <init>(android.content.Context)>
<android.widget.Gallery: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup)>
<android.view.LayoutInflater: android.view.LayoutInflater.Factory getFactory()>
<android.view.LayoutInflater: android.view.LayoutInflater.Factory2 getFactory2()>
<android.view.LayoutInflater: android.view.View onCreateView(android.view.View,java.lang.String,android.util.AttributeSet)>
<android.view.LayoutInflater: android.view.View inflate(@LayoutResint,android.view.ViewGroup)>
<android.view.LayoutInflater: android.view.View createView(android.content.Context,java.lang.String,java.lang.String,android.util.AttributeSet)>
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: void setFilter(android.view.LayoutInflater.Filter)>
<android.view.LayoutInflater: android.view.LayoutInflater.Filter getFilter()>
<android.view.LayoutInflater: android.view.View inflate(@LayoutResint,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: void <init>(android.content.Context)>
<android.view.LayoutInflater: void setFactory(android.view.LayoutInflater.Factory)>
<android.view.LayoutInflater: void setPrecompiledLayoutsEnabledForTesting(boolean)>
<android.view.LayoutInflater: void <init>(android.view.LayoutInflater,android.content.Context)>
<android.view.LayoutInflater: android.view.LayoutInflater cloneInContext(android.content.Context)>
<android.view.LayoutInflater: void setFactory2(android.view.LayoutInflater.Factory2)>
<android.view.LayoutInflater: android.content.Context getContext()>
<android.view.LayoutInflater: android.view.LayoutInflater from(android.content.Context)>
<android.view.LayoutInflater: android.view.View onCreateView(java.lang.String,android.util.AttributeSet)>
<android.view.LayoutInflater: android.view.View onCreateView(android.content.Context,android.view.View,java.lang.String,android.util.AttributeSet)>
<android.view.LayoutInflater: android.view.View createView(java.lang.String,java.lang.String,android.util.AttributeSet)>
<java.util.jar.Attributes.Name: void <init>(String)>
<android.os.ParcelUuid: java.util.UUID getUuid()>
<android.os.ParcelUuid: void writeToParcel(android.os.Parcel,int)>
<android.os.ParcelUuid: int describeContents()>
<android.os.ParcelUuid: void <init>(java.util.UUID)>
<android.os.ParcelUuid: android.os.ParcelUuid fromString(java.lang.String)>
<java.io.FileInputStream: void <init>(String)>
<java.io.FileInputStream: void finalize()>
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>
<java.io.FileInputStream: int read()>
<java.io.FileInputStream: java.io.FileDescriptor getFD()>
<java.io.FileInputStream: void <init>(java.io.File)>
<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>
<android.database.ContentObservable: void registerObserver(android.database.ContentObserver)>
<android.database.ContentObservable: void notifyChange(boolean)>
<android.database.ContentObservable: void dispatchChange(boolean)>
<android.database.ContentObservable: void <init>()>
<android.database.ContentObservable: void dispatchChange(boolean,android.net.Uri)>
<android.app.AlarmManager.AlarmClockInfo: int describeContents()>
<android.app.AlarmManager.AlarmClockInfo: long getTriggerTime()>
<android.app.AlarmManager.AlarmClockInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.AlarmManager.AlarmClockInfo: void <init>(long,android.app.PendingIntent)>
<android.app.AlarmManager.AlarmClockInfo: android.app.PendingIntent getShowIntent()>
<java.sql.Date: java.sql.Date valueOf(java.lang.String)>
<java.sql.Date: void <init>(int,int,int)>
<java.sql.Date: void <init>(long)>
<android.media.effect.EffectUpdateListener: void onEffectUpdated(android.media.effect.Effect,java.lang.Object)>
<javax.xml.xpath.XPathFactory: void setXPathVariableResolver(javax.xml.xpath.XPathVariableResolver)>
<javax.xml.xpath.XPathFactory: boolean getFeature(java.lang.String)>
<javax.xml.xpath.XPathFactory: javax.xml.xpath.XPathFactory newInstance(java.lang.String,java.lang.String,java.lang.ClassLoader)>
<javax.xml.xpath.XPathFactory: javax.xml.xpath.XPath newXPath()>
<javax.xml.xpath.XPathFactory: javax.xml.xpath.XPathFactory newInstance(java.lang.String)>
<javax.xml.xpath.XPathFactory: void <init>()>
<javax.xml.xpath.XPathFactory: void setFeature(java.lang.String,boolean)>
<javax.xml.xpath.XPathFactory: boolean isObjectModelSupported(java.lang.String)>
<javax.xml.xpath.XPathFactory: javax.xml.xpath.XPathFactory newInstance()>
<javax.xml.xpath.XPathFactory: void setXPathFunctionResolver(javax.xml.xpath.XPathFunctionResolver)>
<java.util.AbstractMap: void putAll(java.util.Map)>
<java.util.AbstractMap: V get(java.lang.Object)>
<java.util.AbstractMap: V put(K,V)>
<java.util.AbstractMap: void clear()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>
<java.util.AbstractMap: V remove(java.lang.Object)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>
<java.util.AbstractMap: java.util.Collection values()>
<java.util.AbstractMap: void <init>()>
<java.util.AbstractMap: int size()>
<java.util.AbstractMap: java.util.Set keySet()>
<java.util.AbstractMap: boolean isEmpty()>
<android.hardware.camera2.params.OutputConfiguration: int getSurfaceGroupId()>
<android.hardware.camera2.params.OutputConfiguration: int describeContents()>
<android.hardware.camera2.params.OutputConfiguration: int getMaxSharedSurfaceCount()>
<android.hardware.camera2.params.OutputConfiguration: void <init>(android.view.Surface,int)>
<android.hardware.camera2.params.OutputConfiguration: void <init>(android.view.Surface)>
<android.hardware.camera2.params.OutputConfiguration: void enableSurfaceSharing()>
<android.hardware.camera2.params.OutputConfiguration: void <init>(android.util.Size,Class)>
<android.hardware.camera2.params.OutputConfiguration: void removeSurface(android.view.Surface)>
<android.hardware.camera2.params.OutputConfiguration: void <init>(int,android.view.Surface,int)>
<android.hardware.camera2.params.OutputConfiguration: android.view.Surface getSurface()>
<android.hardware.camera2.params.OutputConfiguration: void writeToParcel(android.os.Parcel,int)>
<android.hardware.camera2.params.OutputConfiguration: java.util.List getSurfaces()>
<android.hardware.camera2.params.OutputConfiguration: int getRotation()>
<android.hardware.camera2.params.OutputConfiguration: void <init>(int,android.view.Surface)>
<android.hardware.camera2.params.OutputConfiguration: void setPhysicalCameraId(java.lang.String)>
<android.hardware.camera2.params.OutputConfiguration: void addSurface(android.view.Surface)>
<javax.crypto.interfaces.DHKey: javax.crypto.spec.DHParameterSpec getParams()>
<android.view.animation.AnticipateOvershootInterpolator: void <init>(float)>
<android.view.animation.AnticipateOvershootInterpolator: void <init>(float,float)>
<android.view.animation.AnticipateOvershootInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AnticipateOvershootInterpolator: float getInterpolation(float)>
<android.view.animation.AnticipateOvershootInterpolator: void <init>()>
<android.security.keystore.recovery.InternalRecoveryServiceException: void <init>(String,Throwable)>
<android.security.keystore.recovery.InternalRecoveryServiceException: void <init>(String)>
<android.text.PrecomputedText.Params: android.text.TextDirectionHeuristic getTextDirection()>
<android.text.PrecomputedText.Params: android.text.TextPaint getTextPaint()>
<android.text.PrecomputedText.Params: int getHyphenationFrequency()>
<android.text.PrecomputedText.Params: int getBreakStrategy()>
<javax.microedition.khronos.egl.EGLDisplay: void <init>()>
<java.sql.Blob: void free()>
<java.sql.Blob: java.io.InputStream getBinaryStream()>
<java.sql.Blob: java.io.InputStream getBinaryStream(long,long)>
<java.sql.Blob: long length()>
<java.sql.Blob: long position(java.sql.Blob,long)>
<java.sql.Blob: java.io.OutputStream setBinaryStream(long)>
<java.sql.Blob: int setBytes(long,byte[])>
<java.sql.Blob: int setBytes(long,byte[],int,int)>
<java.sql.Blob: long position(byte[],long)>
<java.sql.Blob: byte[] getBytes(long,int)>
<java.sql.Blob: void truncate(long)>
<java.nio.file.LinkPermission: void <init>(String,String)>
<java.nio.file.LinkPermission: void <init>(String)>
<android.app.ActionBar.TabListener: void onTabReselected(android.app.ActionBar.Tab,android.app.FragmentTransaction)>
<android.app.ActionBar.TabListener: void onTabUnselected(android.app.ActionBar.Tab,android.app.FragmentTransaction)>
<android.app.ActionBar.TabListener: void onTabSelected(android.app.ActionBar.Tab,android.app.FragmentTransaction)>
<android.content.ContentProviderOperation: java.lang.String[] resolveSelectionArgsBackReferences(android.content.ContentProviderResult[],int)>
<android.content.ContentProviderOperation: boolean isAssertQuery()>
<android.content.ContentProviderOperation: boolean isInsert()>
<android.content.ContentProviderOperation: android.content.ContentProviderOperation.Builder newInsert(android.net.Uri)>
<android.content.ContentProviderOperation: android.content.ContentProviderResult apply(android.content.ContentProvider,android.content.ContentProviderResult[],int)>
<android.content.ContentProviderOperation: android.content.ContentProviderOperation.Builder newAssertQuery(android.net.Uri)>
<android.content.ContentProviderOperation: void writeToParcel(android.os.Parcel,int)>
<android.content.ContentProviderOperation: boolean isDelete()>
<android.content.ContentProviderOperation: android.content.ContentValues resolveValueBackReferences(android.content.ContentProviderResult[],int)>
<android.content.ContentProviderOperation: boolean isYieldAllowed()>
<android.content.ContentProviderOperation: android.content.ContentProviderOperation.Builder newDelete(android.net.Uri)>
<android.content.ContentProviderOperation: boolean isWriteOperation()>
<android.content.ContentProviderOperation: boolean isReadOperation()>
<android.content.ContentProviderOperation: int describeContents()>
<android.content.ContentProviderOperation: boolean isUpdate()>
<android.content.ContentProviderOperation: android.net.Uri getUri()>
<android.content.ContentProviderOperation: android.content.ContentProviderOperation.Builder newUpdate(android.net.Uri)>
<android.hardware.display.DisplayManager.DisplayListener: void onDisplayChanged(int)>
<android.hardware.display.DisplayManager.DisplayListener: void onDisplayRemoved(int)>
<android.hardware.display.DisplayManager.DisplayListener: void onDisplayAdded(int)>
<android.database.sqlite.SQLiteDatabase.OpenParams: java.lang.String getJournalMode()>
<android.database.sqlite.SQLiteDatabase.OpenParams: android.database.DatabaseErrorHandler getErrorHandler()>
<android.database.sqlite.SQLiteDatabase.OpenParams: int getLookasideSlotCount()>
<android.database.sqlite.SQLiteDatabase.OpenParams: android.database.sqlite.SQLiteDatabase.CursorFactory getCursorFactory()>
<android.database.sqlite.SQLiteDatabase.OpenParams: java.lang.String getSynchronousMode()>
<android.database.sqlite.SQLiteDatabase.OpenParams: long getIdleConnectionTimeout()>
<android.database.sqlite.SQLiteDatabase.OpenParams: int getLookasideSlotSize()>
<android.database.sqlite.SQLiteDatabase.OpenParams: int getOpenFlags()>
<android.content.ContentCaptureOptions: void writeToParcel(android.os.Parcel,int)>
<android.content.ContentCaptureOptions: int describeContents()>
<android.content.ContentCaptureOptions: void <init>(int,int,int,int,int,android.util.ArraySet)>
<android.content.ContentCaptureOptions: void <init>(int)>
<android.content.ContentCaptureOptions: android.content.ContentCaptureOptions forWhitelistingItself()>
<android.renderscript.ScriptIntrinsicBLAS: void SSYR(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DSYR2(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CHPR2(int,android.renderscript.Float2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZGEMV(int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Double2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void CTRSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DSPR(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CSYRK(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Float2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZSYMM(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Double2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZSYRK(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Double2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CGERU(android.renderscript.Float2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DSBMV(int,int,double,android.renderscript.Allocation,android.renderscript.Allocation,int,double,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DSPR2(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void STRSM(int,int,int,int,float,android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHPMV(int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Double2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void STRMM(int,int,int,int,float,android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZTRMM(int,int,int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHEMV(int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Double2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void STBMV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void STPMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void SSYR2(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DTRSM(int,int,int,int,double,android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZTRSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void CSYMM(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Float2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHPR(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DGBMV(int,int,int,double,android.renderscript.Allocation,android.renderscript.Allocation,int,double,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void SSBMV(int,int,float,android.renderscript.Allocation,android.renderscript.Allocation,int,float,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void SSYMM(int,int,float,android.renderscript.Allocation,android.renderscript.Allocation,float,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void SSYR2K(int,int,float,android.renderscript.Allocation,android.renderscript.Allocation,float,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CTRSM(int,int,int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CGEMM(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Float2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CHEMV(int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Float2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZGEMM(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Double2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CHEMM(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Float2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZSYR2K(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Double2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DSYRK(int,int,double,android.renderscript.Allocation,double,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CTBSV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHPR2(int,android.renderscript.Double2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZTBSV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void CTPSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DGEMM(int,int,double,android.renderscript.Allocation,android.renderscript.Allocation,double,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DGEMV(int,double,android.renderscript.Allocation,android.renderscript.Allocation,int,double,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void SGBMV(int,int,int,float,android.renderscript.Allocation,android.renderscript.Allocation,int,float,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void SSYMV(int,float,android.renderscript.Allocation,android.renderscript.Allocation,int,float,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void SGEMM(int,int,float,android.renderscript.Allocation,android.renderscript.Allocation,float,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZTPSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void SGER(float,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CHPR(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CHER2K(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,float,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DSYMM(int,int,double,android.renderscript.Allocation,android.renderscript.Allocation,double,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CHER(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DTRMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DSYR(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZTRMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void BNNM(android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation,int,int)>
<android.renderscript.ScriptIntrinsicBLAS: void STPSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void SSYRK(int,int,float,android.renderscript.Allocation,float,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void SSPMV(int,float,android.renderscript.Allocation,android.renderscript.Allocation,int,float,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DSPMV(int,double,android.renderscript.Allocation,android.renderscript.Allocation,int,double,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void CGEMV(int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Float2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void STRMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void STRSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHBMV(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Double2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DTBSV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZTPMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DTPSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.ScriptIntrinsicBLAS create(android.renderscript.RenderScript)>
<android.renderscript.ScriptIntrinsicBLAS: void CTPMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DTRSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void SGEMV(int,float,android.renderscript.Allocation,android.renderscript.Allocation,int,float,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void STBSV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DSYMV(int,double,android.renderscript.Allocation,android.renderscript.Allocation,int,double,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHER(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CGERC(android.renderscript.Float2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CTBMV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHEMM(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Double2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZTBMV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DTRMM(int,int,int,int,double,android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CSYR2K(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Float2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DSYR2K(int,int,double,android.renderscript.Allocation,android.renderscript.Allocation,double,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DGER(double,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CHER2(int,android.renderscript.Float2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CHBMV(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Float2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZGERU(android.renderscript.Double2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CTRMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZGBMV(int,int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Double2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void CTRMM(int,int,int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZTRSM(int,int,int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CGBMV(int,int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Float2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void CHERK(int,int,float,android.renderscript.Allocation,float,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DTPMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHER2K(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,double,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DTBMV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void SSPR2(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHER2(int,android.renderscript.Double2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHERK(int,int,double,android.renderscript.Allocation,double,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CHPMV(int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Float2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void SSPR(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZGERC(android.renderscript.Double2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.print.PrinterInfo: android.print.PrinterCapabilitiesInfo getCapabilities()>
<android.print.PrinterInfo: int getStatus()>
<android.print.PrinterInfo: android.graphics.drawable.Drawable loadIcon(android.content.Context)>
<android.print.PrinterInfo: java.lang.String getDescription()>
<android.print.PrinterInfo: java.lang.String getName()>
<android.print.PrinterInfo: void writeToParcel(android.os.Parcel,int)>
<android.print.PrinterInfo: int describeContents()>
<android.print.PrinterInfo: android.print.PrinterId getId()>
<android.content.pm.dex.ArtManager.SnapshotRuntimeProfileCallback: void onError(int)>
<android.content.pm.dex.ArtManager.SnapshotRuntimeProfileCallback: void <init>()>
<android.content.pm.dex.ArtManager.SnapshotRuntimeProfileCallback: void onSuccess(android.os.ParcelFileDescriptor)>
<android.text.style.TtsSpan.FractionBuilder: android.text.style.TtsSpan.FractionBuilder setDenominator(long)>
<android.text.style.TtsSpan.FractionBuilder: android.text.style.TtsSpan.FractionBuilder setNumerator(long)>
<android.text.style.TtsSpan.FractionBuilder: void <init>()>
<android.text.style.TtsSpan.FractionBuilder: android.text.style.TtsSpan.FractionBuilder setIntegerPart(long)>
<android.text.style.TtsSpan.FractionBuilder: android.text.style.TtsSpan.FractionBuilder setIntegerPart(java.lang.String)>
<android.text.style.TtsSpan.FractionBuilder: void <init>(long,long,long)>
<android.text.style.TtsSpan.FractionBuilder: android.text.style.TtsSpan.FractionBuilder setDenominator(java.lang.String)>
<android.text.style.TtsSpan.FractionBuilder: android.text.style.TtsSpan.FractionBuilder setNumerator(java.lang.String)>
<android.graphics.ImageDecoder.OnHeaderDecodedListener: void onHeaderDecoded(android.graphics.ImageDecoder,android.graphics.ImageDecoder.ImageInfo,android.graphics.ImageDecoder.Source)>
<java.util.concurrent.ConcurrentMap extends java.util.Map: boolean remove(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentMap extends java.util.Map: boolean replace(K,V,V)>
<java.util.concurrent.ConcurrentMap extends java.util.Map: V putIfAbsent(K,V)>
<java.util.concurrent.ConcurrentMap extends java.util.Map: V replace(K,V)>
<android.nfc.tech.NfcV: void connect()>
<android.nfc.tech.NfcV: byte getResponseFlags()>
<android.nfc.tech.NfcV: byte getDsfId()>
<android.nfc.tech.NfcV: boolean isConnected()>
<android.nfc.tech.NfcV: byte[] transceive(byte[])>
<android.nfc.tech.NfcV: android.nfc.Tag getTag()>
<android.nfc.tech.NfcV: int getMaxTransceiveLength()>
<android.nfc.tech.NfcV: android.nfc.tech.NfcV get(android.nfc.Tag)>
<android.nfc.tech.NfcV: void close()>
<java.net.InetAddress: java.net.InetAddress getLocalHost()>
<java.net.InetAddress: boolean isMCGlobal()>
<java.net.InetAddress: byte[] getAddress()>
<java.net.InetAddress: boolean isMCOrgLocal()>
<java.net.InetAddress: boolean isSiteLocalAddress()>
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
<java.net.InetAddress: boolean isMCNodeLocal()>
<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>
<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>
<java.net.InetAddress: java.lang.String getHostName()>
<java.net.InetAddress: java.net.InetAddress getLoopbackAddress()>
<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>
<java.net.InetAddress: boolean isMulticastAddress()>
<java.net.InetAddress: boolean isMCSiteLocal()>
<java.net.InetAddress: boolean isLinkLocalAddress()>
<java.net.InetAddress: boolean isLoopbackAddress()>
<java.net.InetAddress: boolean isReachable(java.net.NetworkInterface,int,int)>
<java.net.InetAddress: boolean isAnyLocalAddress()>
<java.net.InetAddress: java.lang.String getHostAddress()>
<java.net.InetAddress: boolean isMCLinkLocal()>
<java.net.InetAddress: boolean isReachable(int)>
<java.net.InetAddress: java.lang.String getCanonicalHostName()>
<android.view.inspector.IntFlagMapping: void <init>()>
<android.view.inspector.IntFlagMapping: java.util.Set get(int)>
<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>
<android.speech.tts.TextToSpeech.EngineInfo: void <init>()>
<android.net.wifi.rtt.RangingResultCallback: void <init>()>
<android.net.wifi.rtt.RangingResultCallback: void onRangingFailure(int)>
<android.net.wifi.rtt.RangingResultCallback: void onRangingResults(java.util.List)>
<android.provider.VoicemailContract.Status: android.net.Uri buildSourceUri(java.lang.String)>
<java.net.PortUnreachableException: void <init>(String)>
<java.net.PortUnreachableException: void <init>()>
<android.app.admin.SystemUpdatePolicy.InstallationOption: long getEffectiveTime()>
<android.app.admin.SystemUpdatePolicy.InstallationOption: int getType()>
<javax.microedition.khronos.egl.EGLSurface: void <init>()>
<android.telephony.mbms.FileServiceInfo: int describeContents()>
<android.telephony.mbms.FileServiceInfo: java.util.List getFiles()>
<android.telephony.mbms.FileServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.mbms.FileServiceInfo: void <init>(java.util.Map,String,java.util.List,String,java.util.Date,java.util.Date,java.util.List)>
<android.service.autofill.VisibilitySetterAction.Builder: android.service.autofill.VisibilitySetterAction build()>
<android.service.autofill.VisibilitySetterAction.Builder: void <init>(@IdRes int,int)>
<android.service.autofill.VisibilitySetterAction.Builder: android.service.autofill.VisibilitySetterAction.Builder setVisibility(@IdResint,int)>
<android.appwidget.AppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])>
<android.appwidget.AppWidgetProvider: void onAppWidgetOptionsChanged(android.content.Context,android.appwidget.AppWidgetManager,int,android.os.Bundle)>
<android.appwidget.AppWidgetProvider: void onDeleted(android.content.Context,int[])>
<android.appwidget.AppWidgetProvider: void onRestored(android.content.Context,int[],int[])>
<android.appwidget.AppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)>
<android.appwidget.AppWidgetProvider: void <init>()>
<android.appwidget.AppWidgetProvider: void onDisabled(android.content.Context)>
<android.appwidget.AppWidgetProvider: void onEnabled(android.content.Context)>
<android.media.MediaScannerConnection: void scanFile(java.lang.String,java.lang.String)>
<android.media.MediaScannerConnection: void scanFile(android.content.Context,java.lang.String[],java.lang.String[],android.media.MediaScannerConnection.OnScanCompletedListener)>
<android.media.MediaScannerConnection: boolean isConnected()>
<android.media.MediaScannerConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.media.MediaScannerConnection: void disconnect()>
<android.media.MediaScannerConnection: void connect()>
<android.media.MediaScannerConnection: void onServiceDisconnected(android.content.ComponentName)>
<android.media.MediaScannerConnection: void <init>(android.content.Context,android.media.MediaScannerConnection.MediaScannerConnectionClient)>
<java.io.FilterOutputStream: void write(int)>
<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>
<android.graphics.ColorMatrixColorFilter: void getColorMatrix(android.graphics.ColorMatrix)>
<android.graphics.ColorMatrixColorFilter: void <init>(float[])>
<android.graphics.ColorMatrixColorFilter: void <init>(android.graphics.ColorMatrix)>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>
<javax.net.ssl.SSLSocketFactory: java.lang.String[] getSupportedCipherSuites()>
<javax.net.ssl.SSLSocketFactory: void <init>()>
<javax.net.ssl.SSLSocketFactory: java.lang.String[] getDefaultCipherSuites()>
<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
<java.nio.channels.NonReadableChannelException: void <init>()>
<android.hardware.usb.UsbPort: void setRoles(int,int)>
<android.hardware.usb.UsbPort: android.hardware.usb.UsbPortStatus getStatus()>
<android.telecom.PhoneAccountSuggestionService: void <init>()>
<android.telecom.PhoneAccountSuggestionService: void onAccountSuggestionRequest(java.lang.String)>
<android.telecom.PhoneAccountSuggestionService: void suggestPhoneAccounts(java.lang.String,java.util.List)>
<android.telecom.PhoneAccountSuggestionService: android.os.IBinder onBind(android.content.Intent)>
<android.telephony.ims.stub.ImsFeatureConfiguration: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ims.stub.ImsFeatureConfiguration: int describeContents()>
<android.telephony.ims.stub.ImsFeatureConfiguration: java.util.Set getServiceFeatures()>
<android.media.MediaDrm.MediaDrmStateException: java.lang.String getDiagnosticInfo()>
<javax.net.ssl.SSLServerSocket: java.lang.String[] getEnabledCipherSuites()>
<javax.net.ssl.SSLServerSocket: void setNeedClientAuth(boolean)>
<javax.net.ssl.SSLServerSocket: boolean getEnableSessionCreation()>
<javax.net.ssl.SSLServerSocket: void <init>(int,int,java.net.InetAddress)>
<javax.net.ssl.SSLServerSocket: java.lang.String[] getSupportedCipherSuites()>
<javax.net.ssl.SSLServerSocket: java.lang.String[] getSupportedProtocols()>
<javax.net.ssl.SSLServerSocket: void <init>(int)>
<javax.net.ssl.SSLServerSocket: java.lang.String[] getEnabledProtocols()>
<javax.net.ssl.SSLServerSocket: void <init>(int,int)>
<javax.net.ssl.SSLServerSocket: void setEnabledCipherSuites(java.lang.String[])>
<javax.net.ssl.SSLServerSocket: boolean getWantClientAuth()>
<javax.net.ssl.SSLServerSocket: void <init>()>
<javax.net.ssl.SSLServerSocket: void setWantClientAuth(boolean)>
<javax.net.ssl.SSLServerSocket: void setEnableSessionCreation(boolean)>
<javax.net.ssl.SSLServerSocket: void setSSLParameters(javax.net.ssl.SSLParameters)>
<javax.net.ssl.SSLServerSocket: boolean getUseClientMode()>
<javax.net.ssl.SSLServerSocket: boolean getNeedClientAuth()>
<javax.net.ssl.SSLServerSocket: void setUseClientMode(boolean)>
<javax.net.ssl.SSLServerSocket: javax.net.ssl.SSLParameters getSSLParameters()>
<javax.net.ssl.SSLServerSocket: void setEnabledProtocols(java.lang.String[])>
<android.os.BaseBundle: java.util.Set keySet()>
<android.os.BaseBundle: long getLong(java.lang.String,long)>
<android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
<android.os.BaseBundle: boolean[] getBooleanArray(java.lang.String)>
<android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
<android.os.BaseBundle: long[] getLongArray(java.lang.String)>
<android.os.BaseBundle: int getInt(java.lang.String)>
<android.os.BaseBundle: java.lang.String[] getStringArray(java.lang.String)>
<android.os.BaseBundle: void putStringArray(java.lang.String,java.lang.String[])>
<android.os.BaseBundle: double getDouble(java.lang.String)>
<android.os.BaseBundle: void putInt(java.lang.String,int)>
<android.os.BaseBundle: void putLong(java.lang.String,long)>
<android.os.BaseBundle: void putLongArray(java.lang.String,long[])>
<android.os.BaseBundle: void putIntArray(java.lang.String,int[])>
<android.os.BaseBundle: int getInt(java.lang.String,int)>
<android.os.BaseBundle: int size()>
<android.os.BaseBundle: boolean getBoolean(java.lang.String)>
<android.os.BaseBundle: void putDouble(java.lang.String,double)>
<android.os.BaseBundle: void clear()>
<android.os.BaseBundle: java.lang.String getString(java.lang.String,java.lang.String)>
<android.os.BaseBundle: boolean isEmpty()>
<android.os.BaseBundle: java.lang.Object get(java.lang.String)>
<android.os.BaseBundle: void putDoubleArray(java.lang.String,double[])>
<android.os.BaseBundle: double getDouble(java.lang.String,double)>
<android.os.BaseBundle: void remove(java.lang.String)>
<android.os.BaseBundle: double[] getDoubleArray(java.lang.String)>
<android.os.BaseBundle: boolean containsKey(java.lang.String)>
<android.os.BaseBundle: void putBooleanArray(java.lang.String,boolean[])>
<android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>
<android.os.BaseBundle: int[] getIntArray(java.lang.String)>
<android.os.BaseBundle: java.lang.String getString(java.lang.String)>
<android.os.BaseBundle: long getLong(java.lang.String)>
<android.os.BaseBundle: void putAll(android.os.PersistableBundle)>
<android.telephony.mbms.GroupCallCallback: void onBroadcastSignalStrengthUpdated(int)>
<android.telephony.mbms.GroupCallCallback: void onError(int,java.lang.String)>
<android.telephony.mbms.GroupCallCallback: void onGroupCallStateChanged(int,int)>
<android.telecom.DisconnectCause: CharSequence getLabel()>
<android.telecom.DisconnectCause: int getCode()>
<android.telecom.DisconnectCause: void <init>(int,String)>
<android.telecom.DisconnectCause: void writeToParcel(android.os.Parcel,int)>
<android.telecom.DisconnectCause: void <init>(int)>
<android.telecom.DisconnectCause: int getTone()>
<android.telecom.DisconnectCause: java.lang.String getReason()>
<android.telecom.DisconnectCause: int describeContents()>
<android.telecom.DisconnectCause: void <init>(int,CharSequence,CharSequence,String)>
<android.telecom.DisconnectCause: void <init>(int,CharSequence,CharSequence,String,int)>
<android.telecom.DisconnectCause: CharSequence getDescription()>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet removeAllStrings()>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet retainAll(CharSequence)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet remove(int,int)>
<android.icu.text.UnicodeSet: void <init>(int,int)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet retainAll(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,android.icu.text.SymbolTable)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet cloneAsThawed()>
<android.icu.text.UnicodeSet: void addMatchSetTo(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeSet: int charAt(int)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet applyIntPropertyValue(int,int)>
<android.icu.text.UnicodeSet: int indexOf(int)>
<android.icu.text.UnicodeSet: boolean contains(int)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet add(int,int)>
<android.icu.text.UnicodeSet: boolean isFrozen()>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet add(Iterable)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet remove(int)>
<android.icu.text.UnicodeSet: int getRangeCount()>
<android.icu.text.UnicodeSet: boolean containsNone(CharSequence)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet addAll(Iterable)>
<android.icu.text.UnicodeSet: void <init>(String,int)>
<android.icu.text.UnicodeSet: boolean containsAll(java.lang.String)>
<android.icu.text.UnicodeSet: boolean matchesIndexValue(int)>
<android.icu.text.UnicodeSet: Iterable ranges()>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet complementAll(CharSequence)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet applyPattern(java.lang.String,boolean)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet complement(CharSequence)>
<android.icu.text.UnicodeSet: int compareTo(android.icu.text.UnicodeSet,android.icu.text.UnicodeSet.ComparisonStyle)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet set(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet complement(int)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet removeAll(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeSet: void <init>(String,java.text.ParsePosition,android.icu.text.SymbolTable)>
<android.icu.text.UnicodeSet: boolean containsNone(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeSet: boolean containsAll(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet add(int)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet addAll(int,int)>
<android.icu.text.UnicodeSet: int compareTo(Iterable)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet removeAll(Iterable)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet retain(int,int)>
<android.icu.text.UnicodeSet: boolean containsAll(Iterable)>
<android.icu.text.UnicodeSet: int spanBack(CharSequence,android.icu.text.UnicodeSet.SpanCondition)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet closeOver(int)>
<android.icu.text.UnicodeSet: boolean contains(int,int)>
<android.icu.text.UnicodeSet: int spanBack(CharSequence,int,android.icu.text.UnicodeSet.SpanCondition)>
<android.icu.text.UnicodeSet: java.util.Collection strings()>
<android.icu.text.UnicodeSet: boolean containsSome(int,int)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String)>
<android.icu.text.UnicodeSet: java.lang.StringBuffer _generatePattern(java.lang.StringBuffer,boolean,boolean)>
<android.icu.text.UnicodeSet: java.lang.String toPattern(boolean)>
<android.icu.text.UnicodeSet: int compareTo(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet add(CharSequence)>
<android.icu.text.UnicodeSet: T addAllTo(T)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet addAll(CharSequence)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet retain(int)>
<android.icu.text.UnicodeSet: java.util.Iterator iterator()>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet compact()>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet from(CharSequence)>
<android.icu.text.UnicodeSet: void <init>(String,java.text.ParsePosition,android.icu.text.SymbolTable,int)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet complementAll(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeSet: boolean isEmpty()>
<android.icu.text.UnicodeSet: void <init>(int...)>
<android.icu.text.UnicodeSet: boolean containsSome(Iterable)>
<android.icu.text.UnicodeSet: boolean containsNone(Iterable)>
<android.icu.text.UnicodeSet: boolean containsSome(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet set(int,int)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet fromAll(CharSequence)>
<android.icu.text.UnicodeSet: boolean contains(CharSequence)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet addAll(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeSet: java.lang.StringBuffer _generatePattern(java.lang.StringBuffer,boolean)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet remove(CharSequence)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet applyPattern(java.lang.String,int)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet clear()>
<android.icu.text.UnicodeSet: boolean containsNone(int,int)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet applyPattern(java.lang.String)>
<android.icu.text.UnicodeSet: void <init>(String)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet freeze()>
<android.icu.text.UnicodeSet: void <init>(String,boolean)>
<android.icu.text.UnicodeSet: java.lang.Object clone()>
<android.icu.text.UnicodeSet: int size()>
<android.icu.text.UnicodeSet: int getRangeEnd(int)>
<android.icu.text.UnicodeSet: void <init>()>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet removeAll(CharSequence)>
<android.icu.text.UnicodeSet: int span(CharSequence,android.icu.text.UnicodeSet.SpanCondition)>
<android.icu.text.UnicodeSet: boolean containsSome(CharSequence)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet retain(CharSequence)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet complement(int,int)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet addAll(T...)>
<android.icu.text.UnicodeSet: int getRangeStart(int)>
<android.icu.text.UnicodeSet: int span(CharSequence,int,android.icu.text.UnicodeSet.SpanCondition)>
<android.icu.text.UnicodeSet: void <init>(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet complement()>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet retainAll(Iterable)>
<android.telephony.data.ApnSetting: int getId()>
<android.telephony.data.ApnSetting: java.lang.String getPassword()>
<android.telephony.data.ApnSetting: int getRoamingProtocol()>
<android.telephony.data.ApnSetting: int getProtocol()>
<android.telephony.data.ApnSetting: java.lang.String getProxyAddressAsString()>
<android.telephony.data.ApnSetting: boolean isEnabled()>
<android.telephony.data.ApnSetting: void writeToParcel(android.os.Parcel,int)>
<android.telephony.data.ApnSetting: int getProxyPort()>
<android.telephony.data.ApnSetting: java.lang.String getApnName()>
<android.telephony.data.ApnSetting: java.net.InetAddress getMmsProxyAddress()>
<android.telephony.data.ApnSetting: java.lang.String getUser()>
<android.telephony.data.ApnSetting: android.net.Uri getMmsc()>
<android.telephony.data.ApnSetting: int getMmsProxyPort()>
<android.telephony.data.ApnSetting: java.lang.String getEntryName()>
<android.telephony.data.ApnSetting: int getApnTypeBitmask()>
<android.telephony.data.ApnSetting: int getMvnoType()>
<android.telephony.data.ApnSetting: int getCarrierId()>
<android.telephony.data.ApnSetting: int getAuthType()>
<android.telephony.data.ApnSetting: java.net.InetAddress getProxyAddress()>
<android.telephony.data.ApnSetting: int getNetworkTypeBitmask()>
<android.telephony.data.ApnSetting: java.lang.String getMmsProxyAddressAsString()>
<android.telephony.data.ApnSetting: int describeContents()>
<android.telephony.data.ApnSetting: java.lang.String getOperatorNumeric()>
<android.view.ViewParent: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>
<android.view.ViewParent: boolean canResolveLayoutDirection()>
<android.view.ViewParent: boolean onNestedPrePerformAccessibilityAction(android.view.View,int,android.os.Bundle)>
<android.view.ViewParent: boolean showContextMenuForChild(android.view.View,float,float)>
<android.view.ViewParent: void focusableViewAvailable(android.view.View)>
<android.view.ViewParent: boolean isTextAlignmentResolved()>
<android.view.ViewParent: boolean onNestedFling(android.view.View,float,float,boolean)>
<android.view.ViewParent: void requestTransparentRegion(android.view.View)>
<android.view.ViewParent: void requestLayout()>
<android.view.ViewParent: void createContextMenu(android.view.ContextMenu)>
<android.view.ViewParent: boolean isLayoutRequested()>
<android.view.ViewParent: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>
<android.view.ViewParent: boolean canResolveTextAlignment()>
<android.view.ViewParent: int getTextAlignment()>
<android.view.ViewParent: boolean onNestedPreFling(android.view.View,float,float)>
<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>
<android.view.ViewParent: boolean isLayoutDirectionResolved()>
<android.view.ViewParent: void childDrawableStateChanged(android.view.View)>
<android.view.ViewParent: void clearChildFocus(android.view.View)>
<android.view.ViewParent: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>
<android.view.ViewParent: android.view.View keyboardNavigationClusterSearch(android.view.View,int)>
<android.view.ViewParent: int getTextDirection()>
<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode.Callback,int)>
<android.view.ViewParent: android.view.ViewParent getParent()>
<android.view.ViewParent: boolean isTextDirectionResolved()>
<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>
<android.view.ViewParent: void onNestedPreScroll(android.view.View,int,int,int[])>
<android.view.ViewParent: android.view.View focusSearch(android.view.View,int)>
<android.view.ViewParent: void childHasTransientStateChanged(android.view.View,boolean)>
<android.view.ViewParent: int getLayoutDirection()>
<android.view.ViewParent: void onNestedScrollAccepted(android.view.View,android.view.View,int)>
<android.view.ViewParent: void onStopNestedScroll(android.view.View)>
<android.view.ViewParent: void bringChildToFront(android.view.View)>
<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.ViewParent: void requestFitSystemWindows()>
<android.view.ViewParent: void onNestedScroll(android.view.View,int,int,int,int)>
<android.view.ViewParent: boolean showContextMenuForChild(android.view.View)>
<android.view.ViewParent: void onDescendantInvalidated(android.view.View,android.view.View)>
<android.view.ViewParent: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>
<android.view.ViewParent: void requestDisallowInterceptTouchEvent(boolean)>
<android.view.ViewParent: android.view.ViewParent getParentForAccessibility()>
<android.view.ViewParent: boolean onStartNestedScroll(android.view.View,android.view.View,int)>
<android.view.ViewParent: void requestChildFocus(android.view.View,android.view.View)>
<android.view.ViewParent: boolean canResolveTextDirection()>
<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode.Callback)>
<android.widget.FilterQueryProvider: android.database.Cursor runQuery(CharSequence)>
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder setExtras(android.os.Bundle)>
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder setState(int,long,float,long)>
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder addCustomAction(android.media.session.PlaybackState.CustomAction)>
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder setActions(long)>
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder setBufferedPosition(long)>
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState build()>
<android.media.session.PlaybackState.Builder: void <init>(android.media.session.PlaybackState)>
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder setActiveQueueItemId(long)>
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder addCustomAction(java.lang.String,java.lang.String,int)>
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder setErrorMessage(CharSequence)>
<android.media.session.PlaybackState.Builder: void <init>()>
<android.media.session.PlaybackState.Builder: android.media.session.PlaybackState.Builder setState(int,long,float)>
<java.lang.Double: boolean isInfinite()>
<java.lang.Double: int hashCode(double)>
<java.lang.Double: boolean isNaN()>
<java.lang.Double: long longValue()>
<java.lang.Double: boolean isFinite(double)>
<java.lang.Double: double parseDouble(java.lang.String)>
<java.lang.Double: int compareTo(java.lang.Double)>
<java.lang.Double: long doubleToRawLongBits(double)>
<java.lang.Double: int compare(double,double)>
<java.lang.Double: java.lang.Double valueOf(java.lang.String)>
<java.lang.Double: int intValue()>
<java.lang.Double: double doubleValue()>
<java.lang.Double: java.lang.String toHexString(double)>
<java.lang.Double: double min(double,double)>
<java.lang.Double: long doubleToLongBits(double)>
<java.lang.Double: double max(double,double)>
<java.lang.Double: void <init>(double)>
<java.lang.Double: float floatValue()>
<java.lang.Double: double longBitsToDouble(long)>
<java.lang.Double: boolean isInfinite(double)>
<java.lang.Double: boolean isNaN(double)>
<java.lang.Double: java.lang.String toString(double)>
<java.lang.Double: void <init>(String)>
<java.lang.Double: double sum(double,double)>
<java.lang.Double: java.lang.Double valueOf(double)>
<android.text.style.LineBackgroundSpan extends android.text.style.ParagraphStyle: void drawBackground(android.graphics.Canvas,android.graphics.Paint,@Pxint,@Pxint,@Pxint,@Pxint,@Pxint,CharSequence,int,int,int)>
<android.app.Dialog: void setContentView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.app.Dialog: boolean onPrepareOptionsMenu(android.view.Menu)>
<android.app.Dialog: void onWindowAttributesChanged(android.view.WindowManager.LayoutParams)>
<android.app.Dialog: android.os.Bundle onSaveInstanceState()>
<android.app.Dialog: void setDismissMessage(android.os.Message)>
<android.app.Dialog: void dismiss()>
<android.app.Dialog: void onBackPressed()>
<android.app.Dialog: void setOwnerActivity(android.app.Activity)>
<android.app.Dialog: void onStop()>
<android.app.Dialog: void setFeatureDrawableResource(int,@DrawableResint)>
<android.app.Dialog: T findViewById(@IdResint)>
<android.app.Dialog: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.app.Dialog: void setVolumeControlStream(int)>
<android.app.Dialog: boolean isShowing()>
<android.app.Dialog: void onOptionsMenuClosed(android.view.Menu)>
<android.app.Dialog: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>
<android.app.Dialog: void show()>
<android.app.Dialog: void setOnShowListener(android.content.DialogInterface.OnShowListener)>
<android.app.Dialog: void <init>(android.content.Context,@StyleRes int)>
<android.app.Dialog: void invalidateOptionsMenu()>
<android.app.Dialog: boolean onTouchEvent(android.view.MotionEvent)>
<android.app.Dialog: void unregisterForContextMenu(android.view.View)>
<android.app.Dialog: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean onContextItemSelected(android.view.MenuItem)>
<android.app.Dialog: boolean onCreateOptionsMenu(android.view.Menu)>
<android.app.Dialog: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback,int)>
<android.app.Dialog: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.app.Dialog: void setOnKeyListener(android.content.DialogInterface.OnKeyListener)>
<android.app.Dialog: void onContentChanged()>
<android.app.Dialog: boolean onOptionsItemSelected(android.view.MenuItem)>
<android.app.Dialog: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.app.Dialog: void setTitle(CharSequence)>
<android.app.Dialog: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)>
<android.app.Dialog: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.app.Dialog: boolean onMenuOpened(int,android.view.Menu)>
<android.app.Dialog: void setOnDismissListener(android.content.DialogInterface.OnDismissListener)>
<android.app.Dialog: void onCreate(android.os.Bundle)>
<android.app.Dialog: void registerForContextMenu(android.view.View)>
<android.app.Dialog: boolean requestWindowFeature(int)>
<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface.OnCancelListener)>
<android.app.Dialog: void onPanelClosed(int,android.view.Menu)>
<android.app.Dialog: boolean onKeyDown(int,android.view.KeyEvent)>
<android.app.Dialog: void onWindowFocusChanged(boolean)>
<android.app.Dialog: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.app.Dialog: void closeOptionsMenu()>
<android.app.Dialog: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback)>
<android.app.Dialog: android.app.Activity getOwnerActivity()>
<android.app.Dialog: boolean onCreatePanelMenu(int,android.view.Menu)>
<android.app.Dialog: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.app.Dialog: T requireViewById(@IdResint)>
<android.app.Dialog: boolean onMenuItemSelected(int,android.view.MenuItem)>
<android.app.Dialog: void onStart()>
<android.app.Dialog: void openOptionsMenu()>
<android.app.Dialog: boolean onKeyUp(int,android.view.KeyEvent)>
<android.app.Dialog: android.view.View onCreatePanelView(int)>
<android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)>
<android.app.Dialog: boolean onSearchRequested(android.view.SearchEvent)>
<android.app.Dialog: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.app.Dialog: boolean onTrackballEvent(android.view.MotionEvent)>
<android.app.Dialog: void setContentView(android.view.View)>
<android.app.Dialog: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<android.app.Dialog: android.view.LayoutInflater getLayoutInflater()>
<android.app.Dialog: void setFeatureDrawableUri(int,android.net.Uri)>
<android.app.Dialog: void setTitle(@StringResint)>
<android.app.Dialog: void onDetachedFromWindow()>
<android.app.Dialog: void openContextMenu(android.view.View)>
<android.app.Dialog: void setCanceledOnTouchOutside(boolean)>
<android.app.Dialog: void <init>(android.content.Context)>
<android.app.Dialog: void onActionModeStarted(android.view.ActionMode)>
<android.app.Dialog: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.app.Dialog: void onActionModeFinished(android.view.ActionMode)>
<android.app.Dialog: void setCancelable(boolean)>
<android.app.Dialog: boolean onSearchRequested()>
<android.app.Dialog: void addContentView(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.app.Dialog: android.app.ActionBar getActionBar()>
<android.app.Dialog: android.content.Context getContext()>
<android.app.Dialog: void hide()>
<android.app.Dialog: void setFeatureDrawableAlpha(int,int)>
<android.app.Dialog: void setContentView(@LayoutResint)>
<android.app.Dialog: void takeKeyEvents(boolean)>
<android.app.Dialog: void <init>(android.content.Context,boolean,android.content.DialogInterface.OnCancelListener)>
<android.app.Dialog: android.view.SearchEvent getSearchEvent()>
<android.app.Dialog: int getVolumeControlStream()>
<android.app.Dialog: void onAttachedToWindow()>
<android.app.Dialog: android.view.Window getWindow()>
<android.app.Dialog: android.view.View getCurrentFocus()>
<android.app.Dialog: void create()>
<android.app.Dialog: void cancel()>
<android.app.Dialog: void onContextMenuClosed(android.view.Menu)>
<android.app.Dialog: void setCancelMessage(android.os.Message)>
<android.view.DragAndDropPermissions: void writeToParcel(android.os.Parcel,int)>
<android.view.DragAndDropPermissions: int describeContents()>
<android.view.DragAndDropPermissions: void release()>
<java.security.cert.CertStoreSpi: java.util.Collection engineGetCertificates(java.security.cert.CertSelector)>
<java.security.cert.CertStoreSpi: void <init>(java.security.cert.CertStoreParameters)>
<java.security.cert.CertStoreSpi: java.util.Collection engineGetCRLs(java.security.cert.CRLSelector)>
<android.accounts.AuthenticatorException: void <init>(String)>
<android.accounts.AuthenticatorException: void <init>(String,Throwable)>
<android.accounts.AuthenticatorException: void <init>()>
<android.accounts.AuthenticatorException: void <init>(Throwable)>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove(long)>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()>
<java.lang.ref.ReferenceQueue: void <init>()>
<android.database.sqlite.SQLiteCompatibilityWalFlags: void reset()>
<android.media.audiofx.AutomaticGainControl: android.media.audiofx.AutomaticGainControl create(int)>
<android.media.audiofx.AutomaticGainControl: boolean isAvailable()>
<android.widget.MultiAutoCompleteTextView.CommaTokenizer: int findTokenEnd(CharSequence,int)>
<android.widget.MultiAutoCompleteTextView.CommaTokenizer: CharSequence terminateToken(CharSequence)>
<android.widget.MultiAutoCompleteTextView.CommaTokenizer: int findTokenStart(CharSequence,int)>
<android.widget.MultiAutoCompleteTextView.CommaTokenizer: void <init>()>
<android.hardware.Sensor: java.util.UUID getUuid()>
<android.hardware.Sensor: int getType()>
<android.hardware.Sensor: boolean isWakeUpSensor()>
<android.hardware.Sensor: int getId()>
<android.hardware.Sensor: java.lang.String getName()>
<android.hardware.Sensor: int getMaxDelay()>
<android.hardware.Sensor: int getFifoReservedEventCount()>
<android.hardware.Sensor: java.lang.String getVendor()>
<android.hardware.Sensor: java.lang.String getStringType()>
<android.hardware.Sensor: float getResolution()>
<android.hardware.Sensor: int getVersion()>
<android.hardware.Sensor: boolean isDirectChannelTypeSupported(int)>
<android.hardware.Sensor: int getHighestDirectReportRateLevel()>
<android.hardware.Sensor: boolean isDataInjectionSupported()>
<android.hardware.Sensor: boolean isAdditionalInfoSupported()>
<android.hardware.Sensor: float getMaximumRange()>
<android.hardware.Sensor: int getReportingMode()>
<android.hardware.Sensor: float getPower()>
<android.hardware.Sensor: int getFifoMaxEventCount()>
<android.hardware.Sensor: boolean isDynamicSensor()>
<android.hardware.Sensor: int getMinDelay()>
<android.webkit.WebChromeClient: void onReceivedTitle(android.webkit.WebView,java.lang.String)>
<android.webkit.WebChromeClient: void onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage.QuotaUpdater)>
<android.webkit.WebChromeClient: android.graphics.Bitmap getDefaultVideoPoster()>
<android.webkit.WebChromeClient: void onShowCustomView(android.view.View,android.webkit.WebChromeClient.CustomViewCallback)>
<android.webkit.WebChromeClient: void getVisitedHistory(android.webkit.ValueCallback)>
<android.webkit.WebChromeClient: void <init>()>
<android.webkit.WebChromeClient: boolean onJsAlert(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>
<android.webkit.WebChromeClient: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)>
<android.webkit.WebChromeClient: void onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions.Callback)>
<android.webkit.WebChromeClient: void onProgressChanged(android.webkit.WebView,int)>
<android.webkit.WebChromeClient: void onReceivedIcon(android.webkit.WebView,android.graphics.Bitmap)>
<android.webkit.WebChromeClient: void openFileChooser(android.webkit.ValueCallback,java.lang.String,java.lang.String)>
<android.webkit.WebChromeClient: void onReceivedTouchIconUrl(android.webkit.WebView,java.lang.String,boolean)>
<android.webkit.WebChromeClient: void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage.QuotaUpdater)>
<android.webkit.WebChromeClient: boolean onJsBeforeUnload(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>
<android.webkit.WebChromeClient: void onCloseWindow(android.webkit.WebView)>
<android.webkit.WebChromeClient: void onHideCustomView()>
<android.webkit.WebChromeClient: void onPermissionRequestCanceled(android.webkit.PermissionRequest)>
<android.webkit.WebChromeClient: android.view.View getVideoLoadingProgressView()>
<android.webkit.WebChromeClient: boolean onConsoleMessage(android.webkit.ConsoleMessage)>
<android.webkit.WebChromeClient: boolean onJsPrompt(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsPromptResult)>
<android.webkit.WebChromeClient: boolean onJsConfirm(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>
<android.webkit.WebChromeClient: void onPermissionRequest(android.webkit.PermissionRequest)>
<android.webkit.WebChromeClient: void onRequestFocus(android.webkit.WebView)>
<android.webkit.WebChromeClient: void onGeolocationPermissionsHidePrompt()>
<android.webkit.WebChromeClient: boolean onJsTimeout()>
<android.webkit.WebChromeClient: boolean onShowFileChooser(android.webkit.WebView,android.webkit.ValueCallback,android.webkit.WebChromeClient.FileChooserParams)>
<android.webkit.WebChromeClient: void onConsoleMessage(java.lang.String,int,java.lang.String)>
<android.webkit.WebChromeClient: void onShowCustomView(android.view.View,int,android.webkit.WebChromeClient.CustomViewCallback)>
<android.security.ConfirmationPrompt.Builder: android.security.ConfirmationPrompt.Builder setPromptText(CharSequence)>
<android.security.ConfirmationPrompt.Builder: void <init>(android.content.Context)>
<android.security.ConfirmationPrompt.Builder: android.security.ConfirmationPrompt.Builder setExtraData(byte[])>
<android.security.ConfirmationPrompt.Builder: android.security.ConfirmationPrompt build()>
<org.xml.sax.ext.EntityResolver2 extends org.xml.sax.EntityResolver: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.xml.sax.ext.EntityResolver2 extends org.xml.sax.EntityResolver: org.xml.sax.InputSource getExternalSubset(java.lang.String,java.lang.String)>
<android.app.Fragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
<android.app.Fragment: boolean isDetached()>
<android.app.Fragment: android.transition.Transition getEnterTransition()>
<android.app.Fragment: void onStop()>
<android.app.Fragment: void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)>
<android.app.Fragment: void onConfigurationChanged(android.content.res.Configuration)>
<android.app.Fragment: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)>
<android.app.Fragment: void onViewStateRestored(android.os.Bundle)>
<android.app.Fragment: android.app.FragmentManager getFragmentManager()>
<android.app.Fragment: android.app.Fragment getParentFragment()>
<android.app.Fragment: void startActivity(android.content.Intent)>
<android.app.Fragment: void onPrepareOptionsMenu(android.view.Menu)>
<android.app.Fragment: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>
<android.app.Fragment: void onInflate(android.util.AttributeSet,android.os.Bundle)>
<android.app.Fragment: android.app.FragmentManager getChildFragmentManager()>
<android.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>
<android.app.Fragment: void setAllowReturnTransitionOverlap(boolean)>
<android.app.Fragment: void onDestroy()>
<android.app.Fragment: android.app.Fragment getTargetFragment()>
<android.app.Fragment: int getTargetRequestCode()>
<android.app.Fragment: void onAttachFragment(android.app.Fragment)>
<android.app.Fragment: void onMultiWindowModeChanged(boolean)>
<android.app.Fragment: int getId()>
<android.app.Fragment: void setHasOptionsMenu(boolean)>
<android.app.Fragment: void unregisterForContextMenu(android.view.View)>
<android.app.Fragment: void onOptionsMenuClosed(android.view.Menu)>
<android.app.Fragment: void setAllowEnterTransitionOverlap(boolean)>
<android.app.Fragment: void onDestroyView()>
<android.app.Fragment: boolean onOptionsItemSelected(android.view.MenuItem)>
<android.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)>
<android.app.Fragment: void onMultiWindowModeChanged(boolean,android.content.res.Configuration)>
<android.app.Fragment: void onPictureInPictureModeChanged(boolean)>
<android.app.Fragment: void onSaveInstanceState(android.os.Bundle)>
<android.app.Fragment: void <init>()>
<android.app.Fragment: boolean getAllowReturnTransitionOverlap()>
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String)>
<android.app.Fragment: void setReturnTransition(android.transition.Transition)>
<android.app.Fragment: void onHiddenChanged(boolean)>
<android.app.Fragment: boolean isHidden()>
<android.app.Fragment: boolean isRemoving()>
<android.app.Fragment: boolean isResumed()>
<android.app.Fragment: android.os.Bundle getArguments()>
<android.app.Fragment: boolean isStateSaved()>
<android.app.Fragment: CharSequence getText(@StringResint)>
<android.app.Fragment: void onActivityResult(int,int,android.content.Intent)>
<android.app.Fragment: void onCreate(android.os.Bundle)>
<android.app.Fragment: void onLowMemory()>
<android.app.Fragment: void setMenuVisibility(boolean)>
<android.app.Fragment: void onStart()>
<android.app.Fragment: android.view.LayoutInflater getLayoutInflater()>
<android.app.Fragment: void onTrimMemory(int)>
<android.app.Fragment: boolean equals(java.lang.Object)>
<android.app.Fragment: boolean getAllowEnterTransitionOverlap()>
<android.app.Fragment: void setEnterTransition(android.transition.Transition)>
<android.app.Fragment: void setUserVisibleHint(boolean)>
<android.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>
<android.app.Fragment: void setExitTransition(android.transition.Transition)>
<android.app.Fragment: void onAttach(android.content.Context)>
<android.app.Fragment: void startActivityForResult(android.content.Intent,int)>
<android.app.Fragment: void postponeEnterTransition()>
<android.app.Fragment: void setRetainInstance(boolean)>
<android.app.Fragment: void onActivityCreated(android.os.Bundle)>
<android.app.Fragment: void setReenterTransition(android.transition.Transition)>
<android.app.Fragment: void setTargetFragment(android.app.Fragment,int)>
<android.app.Fragment: void startActivity(android.content.Intent,android.os.Bundle)>
<android.app.Fragment: android.transition.Transition getExitTransition()>
<android.app.Fragment: boolean getRetainInstance()>
<android.app.Fragment: void setSharedElementReturnTransition(android.transition.Transition)>
<android.app.Fragment: java.lang.String getString(@StringResint)>
<android.app.Fragment: void setInitialSavedState(android.app.Fragment.SavedState)>
<android.app.Fragment: void onRequestPermissionsResult(int,java.lang.String[],int[])>
<android.app.Fragment: void onDetach()>
<android.app.Fragment: void onInflate(android.content.Context,android.util.AttributeSet,android.os.Bundle)>
<android.app.Fragment: android.app.Activity getActivity()>
<android.app.Fragment: boolean isAdded()>
<android.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)>
<android.app.Fragment: void requestPermissions(java.lang.String[],int)>
<android.app.Fragment: void onAttach(android.app.Activity)>
<android.app.Fragment: java.lang.String getString(@StringResint,java.lang.Object...)>
<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.Fragment: boolean onContextItemSelected(android.view.MenuItem)>
<android.app.Fragment: java.lang.String getTag()>
<android.app.Fragment: android.transition.Transition getReturnTransition()>
<android.app.Fragment: void onPictureInPictureModeChanged(boolean,android.content.res.Configuration)>
<android.app.Fragment: boolean getUserVisibleHint()>
<android.app.Fragment: android.view.View getView()>
<android.app.Fragment: boolean shouldShowRequestPermissionRationale(java.lang.String)>
<android.app.Fragment: boolean isInLayout()>
<android.app.Fragment: android.transition.Transition getSharedElementReturnTransition()>
<android.app.Fragment: void onPause()>
<android.app.Fragment: void setArguments(android.os.Bundle)>
<android.app.Fragment: void setEnterSharedElementCallback(android.app.SharedElementCallback)>
<android.app.Fragment: android.app.LoaderManager getLoaderManager()>
<android.app.Fragment: android.transition.Transition getSharedElementEnterTransition()>
<android.app.Fragment: void setExitSharedElementCallback(android.app.SharedElementCallback)>
<android.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)>
<android.app.Fragment: void registerForContextMenu(android.view.View)>
<android.app.Fragment: android.content.res.Resources getResources()>
<android.app.Fragment: void onDestroyOptionsMenu()>
<android.app.Fragment: void setSharedElementEnterTransition(android.transition.Transition)>
<android.app.Fragment: void onResume()>
<android.app.Fragment: java.lang.Object getHost()>
<android.app.Fragment: int hashCode()>
<android.app.Fragment: android.content.Context getContext()>
<android.app.Fragment: void startPostponedEnterTransition()>
<android.app.Fragment: boolean isVisible()>
<android.app.Fragment: android.transition.Transition getReenterTransition()>
<android.nfc.tech.NfcA: android.nfc.Tag getTag()>
<android.nfc.tech.NfcA: boolean isConnected()>
<android.nfc.tech.NfcA: byte[] transceive(byte[])>
<android.nfc.tech.NfcA: int getMaxTransceiveLength()>
<android.nfc.tech.NfcA: void setTimeout(int)>
<android.nfc.tech.NfcA: void connect()>
<android.nfc.tech.NfcA: void close()>
<android.nfc.tech.NfcA: int getTimeout()>
<android.nfc.tech.NfcA: short getSak()>
<android.nfc.tech.NfcA: byte[] getAtqa()>
<android.nfc.tech.NfcA: android.nfc.tech.NfcA get(android.nfc.Tag)>
<android.widget.ShareActionProvider.OnShareTargetSelectedListener: boolean onShareTargetSelected(android.widget.ShareActionProvider,android.content.Intent)>
<java.io.DataOutput: void writeInt(int)>
<java.io.DataOutput: void writeBoolean(boolean)>
<java.io.DataOutput: void writeChar(int)>
<java.io.DataOutput: void write(int)>
<java.io.DataOutput: void writeLong(long)>
<java.io.DataOutput: void writeShort(int)>
<java.io.DataOutput: void writeDouble(double)>
<java.io.DataOutput: void write(byte[])>
<java.io.DataOutput: void writeByte(int)>
<java.io.DataOutput: void writeFloat(float)>
<java.io.DataOutput: void writeBytes(java.lang.String)>
<java.io.DataOutput: void writeChars(java.lang.String)>
<java.io.DataOutput: void writeUTF(java.lang.String)>
<java.io.DataOutput: void write(byte[],int,int)>
<android.nfc.tech.NfcB: byte[] getApplicationData()>
<android.nfc.tech.NfcB: android.nfc.Tag getTag()>
<android.nfc.tech.NfcB: byte[] transceive(byte[])>
<android.nfc.tech.NfcB: int getMaxTransceiveLength()>
<android.nfc.tech.NfcB: boolean isConnected()>
<android.nfc.tech.NfcB: byte[] getProtocolInfo()>
<android.nfc.tech.NfcB: android.nfc.tech.NfcB get(android.nfc.Tag)>
<android.nfc.tech.NfcB: void connect()>
<android.nfc.tech.NfcB: void close()>
<android.telephony.ims.ImsMmTelManager.CapabilityCallback: void onCapabilitiesStatusChanged(android.telephony.ims.feature.MmTelFeature.MmTelCapabilities)>
<android.telephony.ims.ImsMmTelManager.CapabilityCallback: void <init>()>
<java.io.PipedOutputStream: void write(int)>
<java.io.PipedOutputStream: void <init>(java.io.PipedInputStream)>
<java.io.PipedOutputStream: void <init>()>
<java.io.PipedOutputStream: void connect(java.io.PipedInputStream)>
<android.os.WorkSource: java.lang.String getName(int)>
<android.os.WorkSource: void <init>(android.os.WorkSource)>
<android.os.WorkSource: boolean add(int,java.lang.String)>
<android.os.WorkSource: void <init>()>
<android.os.WorkSource: int size()>
<android.os.WorkSource: void clear()>
<android.os.WorkSource: void writeToParcel(android.os.Parcel,int)>
<android.os.WorkSource: android.os.WorkSource.WorkChain createWorkChain()>
<android.os.WorkSource: void <init>(int)>
<android.os.WorkSource: android.os.WorkSource addReturningNewbs(android.os.WorkSource)>
<android.os.WorkSource: boolean add(android.os.WorkSource)>
<android.os.WorkSource: boolean add(int)>
<android.os.WorkSource: android.os.WorkSource[] setReturningDiffs(android.os.WorkSource)>
<android.os.WorkSource: int describeContents()>
<android.os.WorkSource: boolean diff(android.os.WorkSource)>
<android.os.WorkSource: void set(android.os.WorkSource)>
<android.os.WorkSource: boolean remove(android.os.WorkSource)>
<android.os.WorkSource: int get(int)>
<android.media.Image.Plane: int getRowStride()>
<android.media.Image.Plane: int getPixelStride()>
<android.media.Image.Plane: java.nio.ByteBuffer getBuffer()>
<java.util.PrimitiveIterator.OfInt extends java.util.PrimitiveIterator: int nextInt()>
<java.util.PrimitiveIterator.OfInt extends java.util.PrimitiveIterator: void forEachRemaining(java.util.function.IntConsumer)>
<java.util.PrimitiveIterator.OfInt extends java.util.PrimitiveIterator: java.lang.Integer next()>
<java.util.PrimitiveIterator.OfInt extends java.util.PrimitiveIterator: void forEachRemaining(java.util.function.Consumer)>
<android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodImpl: void <init>()>
<android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodImpl: void revokeSession(android.view.inputmethod.InputMethodSession)>
<android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodImpl: void createSession(android.view.inputmethod.InputMethod.SessionCallback)>
<android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodImpl: void setSessionEnabled(android.view.inputmethod.InputMethodSession,boolean)>
<java.beans.PropertyChangeSupport: java.beans.PropertyChangeListener[] getPropertyChangeListeners()>
<java.beans.PropertyChangeSupport: void fireIndexedPropertyChange(java.lang.String,int,boolean,boolean)>
<java.beans.PropertyChangeSupport: java.beans.PropertyChangeListener[] getPropertyChangeListeners(java.lang.String)>
<java.beans.PropertyChangeSupport: void fireIndexedPropertyChange(java.lang.String,int,java.lang.Object,java.lang.Object)>
<java.beans.PropertyChangeSupport: void <init>(Object)>
<java.beans.PropertyChangeSupport: void removePropertyChangeListener(java.beans.PropertyChangeListener)>
<java.beans.PropertyChangeSupport: void addPropertyChangeListener(java.beans.PropertyChangeListener)>
<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,boolean,boolean)>
<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>
<java.beans.PropertyChangeSupport: void removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>
<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,int,int)>
<java.beans.PropertyChangeSupport: boolean hasListeners(java.lang.String)>
<java.beans.PropertyChangeSupport: void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>
<java.beans.PropertyChangeSupport: void fireIndexedPropertyChange(java.lang.String,int,int,int)>
<java.beans.PropertyChangeSupport: void firePropertyChange(java.beans.PropertyChangeEvent)>
<android.location.GpsMeasurementsEvent.Listener: void onStatusChanged(int)>
<android.location.GpsMeasurementsEvent.Listener: void onGpsMeasurementsReceived(android.location.GpsMeasurementsEvent)>
<android.telephony.CarrierRestrictionRules: int getDefaultCarrierRestriction()>
<android.telephony.CarrierRestrictionRules: int getMultiSimPolicy()>
<android.telephony.CarrierRestrictionRules: int describeContents()>
<android.telephony.CarrierRestrictionRules: boolean isAllCarriersAllowed()>
<android.telephony.CarrierRestrictionRules: java.util.List areCarrierIdentifiersAllowed(java.util.List)>
<android.telephony.CarrierRestrictionRules: java.util.List getAllowedCarriers()>
<android.telephony.CarrierRestrictionRules: java.util.List getExcludedCarriers()>
<android.telephony.CarrierRestrictionRules: void writeToParcel(android.os.Parcel,int)>
<android.transition.CircularPropagation: void <init>()>
<android.transition.CircularPropagation: void setPropagationSpeed(float)>
<android.transition.CircularPropagation: long getStartDelay(android.view.ViewGroup,android.transition.Transition,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.opengl.GLES10Ext: int glQueryMatrixxOES(int[],int,int[],int)>
<android.opengl.GLES10Ext: int glQueryMatrixxOES(java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES10Ext: void <init>()>
<java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>
<java.nio.file.FileSystems: java.nio.file.FileSystem getFileSystem(java.net.URI)>
<java.nio.file.FileSystems: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map,java.lang.ClassLoader)>
<java.nio.file.FileSystems: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map)>
<java.nio.file.FileSystems: java.nio.file.FileSystem newFileSystem(java.nio.file.Path,java.lang.ClassLoader)>
<android.nfc.tech.NfcF: void setTimeout(int)>
<android.nfc.tech.NfcF: byte[] getSystemCode()>
<android.nfc.tech.NfcF: boolean isConnected()>
<android.nfc.tech.NfcF: void connect()>
<android.nfc.tech.NfcF: byte[] transceive(byte[])>
<android.nfc.tech.NfcF: android.nfc.Tag getTag()>
<android.nfc.tech.NfcF: android.nfc.tech.NfcF get(android.nfc.Tag)>
<android.nfc.tech.NfcF: int getTimeout()>
<android.nfc.tech.NfcF: void close()>
<android.nfc.tech.NfcF: byte[] getManufacturer()>
<android.nfc.tech.NfcF: int getMaxTransceiveLength()>
<android.content.AsyncQueryHandler: void onDeleteComplete(int,java.lang.Object,int)>
<android.content.AsyncQueryHandler: void cancelOperation(int)>
<android.content.AsyncQueryHandler: void onInsertComplete(int,java.lang.Object,android.net.Uri)>
<android.content.AsyncQueryHandler: void onUpdateComplete(int,java.lang.Object,int)>
<android.content.AsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)>
<android.content.AsyncQueryHandler: void startDelete(int,java.lang.Object,android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.AsyncQueryHandler: android.os.Handler createHandler(android.os.Looper)>
<android.content.AsyncQueryHandler: void startQuery(int,java.lang.Object,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.AsyncQueryHandler: void startInsert(int,java.lang.Object,android.net.Uri,android.content.ContentValues)>
<android.content.AsyncQueryHandler: void startUpdate(int,java.lang.Object,android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.content.AsyncQueryHandler: void <init>(android.content.ContentResolver)>
<android.provider.ContactsContract.CommonDataKinds.Relation: CharSequence getTypeLabel(android.content.res.Resources,int,CharSequence)>
<android.provider.ContactsContract.CommonDataKinds.Relation: int getTypeLabelResource(int)>
<android.security.keystore.recovery.DecryptionFailedException: void <init>(String)>
<java.util.jar.JarFile: java.util.Enumeration entries()>
<java.util.jar.JarFile: void <init>(String)>
<java.util.jar.JarFile: void <init>(java.io.File,boolean,int)>
<java.util.jar.JarFile: void <init>(String,boolean)>
<java.util.jar.JarFile: java.util.jar.Manifest getManifest()>
<java.util.jar.JarFile: void <init>(java.io.File,boolean)>
<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>
<java.util.jar.JarFile: void <init>(java.io.File)>
<java.util.jar.JarFile: java.util.stream.Stream stream()>
<android.view.accessibility.AccessibilityManager.AccessibilityServicesStateChangeListener: void onAccessibilityServicesStateChanged(android.view.accessibility.AccessibilityManager)>
<android.media.MediaDescrambler: boolean requiresSecureDecoderComponent(java.lang.String)>
<android.media.MediaDescrambler: void setMediaCasSession(android.media.MediaCas.Session)>
<android.media.MediaDescrambler: void close()>
<android.media.MediaDescrambler: void <init>(int)>
<android.media.MediaDescrambler: int descramble(java.nio.ByteBuffer,java.nio.ByteBuffer,android.media.MediaCodec.CryptoInfo)>
<android.media.MediaDescrambler: void finalize()>
<android.provider.DocumentsContract.Path: void <init>(String,java.util.List)>
<android.provider.DocumentsContract.Path: java.lang.String getRootId()>
<android.provider.DocumentsContract.Path: java.util.List getPath()>
<android.provider.DocumentsContract.Path: void writeToParcel(android.os.Parcel,int)>
<android.provider.DocumentsContract.Path: int describeContents()>
<android.os.Build.Partition: long getBuildTimeMillis()>
<android.os.Build.Partition: java.lang.String getName()>
<android.os.Build.Partition: java.lang.String getFingerprint()>
<android.nfc.NfcAdapter.OnTagRemovedListener: void onTagRemoved()>
<android.content.pm.PackageManager.OnPermissionsChangedListener: void onPermissionsChanged(int)>
<android.inputmethodservice.ExtractEditText: void <init>(android.content.Context,android.util.AttributeSet)>
<android.inputmethodservice.ExtractEditText: void finishInternalChanges()>
<android.inputmethodservice.ExtractEditText: void startInternalChanges()>
<android.inputmethodservice.ExtractEditText: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.inputmethodservice.ExtractEditText: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.inputmethodservice.ExtractEditText: void <init>(android.content.Context)>
<android.inputmethodservice.ExtractEditText: boolean hasVerticalScrollBar()>
<android.text.style.LineHeightSpan.Standard: void writeToParcel(android.os.Parcel,int)>
<android.text.style.LineHeightSpan.Standard: int describeContents()>
<android.text.style.LineHeightSpan.Standard: int getHeight()>
<android.text.style.LineHeightSpan.Standard: void <init>(from=1) int)>
<android.text.style.LineHeightSpan.Standard: void <init>(android.os.Parcel)>
<android.text.style.LineHeightSpan.Standard: int getSpanTypeId()>
<android.text.style.LineHeightSpan.Standard: void chooseHeight(CharSequence,int,int,int,int,android.graphics.Paint.FontMetricsInt)>
<android.animation.TimeAnimator.TimeListener: void onTimeUpdate(android.animation.TimeAnimator,long,long)>
<android.service.euicc.EuiccProfileInfo: int describeContents()>
<android.service.euicc.EuiccProfileInfo: java.lang.String getNickname()>
<android.service.euicc.EuiccProfileInfo: void writeToParcel(android.os.Parcel,int)>
<android.service.euicc.EuiccProfileInfo: int getPolicyRules()>
<android.service.euicc.EuiccProfileInfo: java.lang.String getProfileName()>
<android.service.euicc.EuiccProfileInfo: boolean hasPolicyRule(@android.service.euicc.EuiccProfileInfo.PolicyRuleint)>
<android.service.euicc.EuiccProfileInfo: java.lang.String getIccid()>
<android.service.euicc.EuiccProfileInfo: android.service.carrier.CarrierIdentifier getCarrierIdentifier()>
<android.service.euicc.EuiccProfileInfo: int getState()>
<android.service.euicc.EuiccProfileInfo: java.util.List getUiccAccessRules()>
<android.service.euicc.EuiccProfileInfo: boolean hasPolicyRules()>
<android.service.euicc.EuiccProfileInfo: int getProfileClass()>
<android.service.euicc.EuiccProfileInfo: java.lang.String getServiceProviderName()>
<android.content.ServiceConnection: void onNullBinding(android.content.ComponentName)>
<android.content.ServiceConnection: void onBindingDied(android.content.ComponentName)>
<android.content.ServiceConnection: void onServiceDisconnected(android.content.ComponentName)>
<android.content.ServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<java.io.StreamTokenizer: void lowerCaseMode(boolean)>
<java.io.StreamTokenizer: void slashSlashComments(boolean)>
<java.io.StreamTokenizer: void commentChar(int)>
<java.io.StreamTokenizer: void ordinaryChar(int)>
<java.io.StreamTokenizer: void resetSyntax()>
<java.io.StreamTokenizer: void wordChars(int,int)>
<java.io.StreamTokenizer: void <init>(java.io.Reader)>
<java.io.StreamTokenizer: int nextToken()>
<java.io.StreamTokenizer: void slashStarComments(boolean)>
<java.io.StreamTokenizer: void parseNumbers()>
<java.io.StreamTokenizer: void <init>(java.io.InputStream)>
<java.io.StreamTokenizer: int lineno()>
<java.io.StreamTokenizer: void ordinaryChars(int,int)>
<java.io.StreamTokenizer: void whitespaceChars(int,int)>
<java.io.StreamTokenizer: void quoteChar(int)>
<java.io.StreamTokenizer: void pushBack()>
<java.io.StreamTokenizer: void eolIsSignificant(boolean)>
<android.renderscript.ScriptIntrinsic3DLUT: android.renderscript.ScriptIntrinsic3DLUT create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsic3DLUT: void forEach(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsic3DLUT: android.renderscript.Script.KernelID getKernelID()>
<android.renderscript.ScriptIntrinsic3DLUT: void setLUT(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsic3DLUT: void forEach(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)>
<android.view.textservice.SpellCheckerSubtype: java.lang.String getLanguageTag()>
<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValueOf(java.lang.String)>
<android.view.textservice.SpellCheckerSubtype: java.lang.String getLocale()>
<android.view.textservice.SpellCheckerSubtype: boolean containsExtraValueKey(java.lang.String)>
<android.view.textservice.SpellCheckerSubtype: void <init>(int,String,String)>
<android.view.textservice.SpellCheckerSubtype: void writeToParcel(android.os.Parcel,int)>
<android.view.textservice.SpellCheckerSubtype: CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)>
<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValue()>
<android.view.textservice.SpellCheckerSubtype: int describeContents()>
<android.view.textservice.SpellCheckerSubtype: int getNameResId()>
<android.media.tv.TvRecordingClient: void <init>(android.content.Context,String,android.media.tv.TvRecordingClient.RecordingCallback,android.os.Handler)>
<android.media.tv.TvRecordingClient: void release()>
<android.media.tv.TvRecordingClient: void startRecording(android.net.Uri)>
<android.media.tv.TvRecordingClient: void stopRecording()>
<android.media.tv.TvRecordingClient: void tune(java.lang.String,android.net.Uri,android.os.Bundle)>
<android.media.tv.TvRecordingClient: void sendAppPrivateCommand(java.lang.String,android.os.Bundle)>
<android.media.tv.TvRecordingClient: void tune(java.lang.String,android.net.Uri)>
<android.webkit.WebStorage.QuotaUpdater: void updateQuota(long)>
<android.icu.util.HebrewCalendar: void <init>(android.icu.util.ULocale)>
<android.icu.util.HebrewCalendar: void <init>(java.util.Locale)>
<android.icu.util.HebrewCalendar: void <init>(android.icu.util.TimeZone,java.util.Locale)>
<android.icu.util.HebrewCalendar: int handleGetExtendedYear()>
<android.icu.util.HebrewCalendar: void <init>(int,int,int,int,int,int)>
<android.icu.util.HebrewCalendar: int handleGetLimit(int,int)>
<android.icu.util.HebrewCalendar: int handleComputeMonthStart(int,int,boolean)>
<android.icu.util.HebrewCalendar: void <init>()>
<android.icu.util.HebrewCalendar: void <init>(android.icu.util.TimeZone,android.icu.util.ULocale)>
<android.icu.util.HebrewCalendar: void validateField(int)>
<android.icu.util.HebrewCalendar: void <init>(android.icu.util.TimeZone)>
<android.icu.util.HebrewCalendar: void <init>(java.util.Date)>
<android.icu.util.HebrewCalendar: void <init>(int,int,int)>
<java.text.CharacterIterator extends java.lang.Cloneable: int getIndex()>
<java.text.CharacterIterator extends java.lang.Cloneable: char previous()>
<java.text.CharacterIterator extends java.lang.Cloneable: char last()>
<java.text.CharacterIterator extends java.lang.Cloneable: char next()>
<java.text.CharacterIterator extends java.lang.Cloneable: char first()>
<java.text.CharacterIterator extends java.lang.Cloneable: int getEndIndex()>
<java.text.CharacterIterator extends java.lang.Cloneable: int getBeginIndex()>
<java.text.CharacterIterator extends java.lang.Cloneable: char current()>
<java.text.CharacterIterator extends java.lang.Cloneable: char setIndex(int)>
<java.text.CharacterIterator extends java.lang.Cloneable: java.lang.Object clone()>
<android.telephony.CellIdentityTdscdma: int getUarfcn()>
<android.telephony.CellIdentityTdscdma: int getCpid()>
<android.telephony.CellIdentityTdscdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellIdentityTdscdma: int getCid()>
<android.telephony.CellIdentityTdscdma: java.lang.String getMobileNetworkOperator()>
<android.telephony.CellIdentityTdscdma: java.lang.String getMccString()>
<android.telephony.CellIdentityTdscdma: int getLac()>
<android.telephony.CellIdentityTdscdma: java.lang.String getMncString()>
<android.os.MemoryFile: java.io.OutputStream getOutputStream()>
<android.os.MemoryFile: boolean isPurgingAllowed()>
<android.os.MemoryFile: void close()>
<android.os.MemoryFile: int readBytes(byte[],int,int,int)>
<android.os.MemoryFile: boolean allowPurging(boolean)>
<android.os.MemoryFile: java.io.InputStream getInputStream()>
<android.os.MemoryFile: void <init>(String,int)>
<android.os.MemoryFile: void writeBytes(byte[],int,int,int)>
<android.os.MemoryFile: int length()>
<android.telephony.CellIdentityCdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellIdentityCdma: int getLongitude()>
<android.telephony.CellIdentityCdma: int getBasestationId()>
<android.telephony.CellIdentityCdma: int getNetworkId()>
<android.telephony.CellIdentityCdma: int getSystemId()>
<android.telephony.CellIdentityCdma: int getLatitude()>
<android.app.SearchableInfo: java.lang.String getSuggestPath()>
<android.app.SearchableInfo: android.content.ComponentName getSearchActivity()>
<android.app.SearchableInfo: java.lang.String getSuggestAuthority()>
<android.app.SearchableInfo: boolean shouldRewriteQueryFromData()>
<android.app.SearchableInfo: boolean queryAfterZeroResults()>
<android.app.SearchableInfo: boolean getVoiceSearchEnabled()>
<android.app.SearchableInfo: int getVoicePromptTextId()>
<android.app.SearchableInfo: java.lang.String getSuggestSelection()>
<android.app.SearchableInfo: int describeContents()>
<android.app.SearchableInfo: int getImeOptions()>
<android.app.SearchableInfo: int getSettingsDescriptionId()>
<android.app.SearchableInfo: int getInputType()>
<android.app.SearchableInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.SearchableInfo: int getHintId()>
<android.app.SearchableInfo: java.lang.String getSuggestIntentData()>
<android.app.SearchableInfo: boolean shouldRewriteQueryFromText()>
<android.app.SearchableInfo: java.lang.String getSuggestPackage()>
<android.app.SearchableInfo: int getVoiceLanguageId()>
<android.app.SearchableInfo: int getVoiceLanguageModeId()>
<android.app.SearchableInfo: int getSuggestThreshold()>
<android.app.SearchableInfo: boolean autoUrlDetect()>
<android.app.SearchableInfo: boolean shouldIncludeInGlobalSearch()>
<android.app.SearchableInfo: boolean getVoiceSearchLaunchWebSearch()>
<android.app.SearchableInfo: java.lang.String getSuggestIntentAction()>
<android.app.SearchableInfo: int getVoiceMaxResults()>
<android.app.SearchableInfo: boolean getVoiceSearchLaunchRecognizer()>
<android.hardware.camera2.CameraManager.TorchCallback: void onTorchModeUnavailable(java.lang.String)>
<android.hardware.camera2.CameraManager.TorchCallback: void <init>()>
<android.hardware.camera2.CameraManager.TorchCallback: void onTorchModeChanged(java.lang.String,boolean)>
<javax.crypto.spec.PBEParameterSpec: java.security.spec.AlgorithmParameterSpec getParameterSpec()>
<javax.crypto.spec.PBEParameterSpec: byte[] getSalt()>
<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>
<javax.crypto.spec.PBEParameterSpec: int getIterationCount()>
<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int,java.security.spec.AlgorithmParameterSpec)>
<java.util.concurrent.LinkedBlockingQueue: void <init>(java.util.Collection)>
<java.util.concurrent.LinkedBlockingQueue: java.util.Iterator iterator()>
<java.util.concurrent.LinkedBlockingQueue: E poll(long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedBlockingQueue: int remainingCapacity()>
<java.util.concurrent.LinkedBlockingQueue: int drainTo(java.util.Collection)>
<java.util.concurrent.LinkedBlockingQueue: E take()>
<java.util.concurrent.LinkedBlockingQueue: int size()>
<java.util.concurrent.LinkedBlockingQueue: boolean offer(E,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.LinkedBlockingQueue: void put(E)>
<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>
<java.util.concurrent.LinkedBlockingQueue: boolean offer(E)>
<java.util.concurrent.LinkedBlockingQueue: E peek()>
<java.util.concurrent.LinkedBlockingQueue: E poll()>
<java.util.concurrent.LinkedBlockingQueue: int drainTo(java.util.Collection,int)>
<java.util.concurrent.LinkedBlockingQueue: void <init>()>
<android.app.AlertDialog: void setIcon(android.graphics.drawable.Drawable)>
<android.app.AlertDialog: void setButton(int,CharSequence,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog: void setButton(int,CharSequence,android.os.Message)>
<android.app.AlertDialog: void setButton(CharSequence,android.os.Message)>
<android.app.AlertDialog: void setIconAttribute(@AttrResint)>
<android.app.AlertDialog: void setButton3(CharSequence,android.os.Message)>
<android.app.AlertDialog: void setView(android.view.View,int,int,int,int)>
<android.app.AlertDialog: void <init>(android.content.Context,boolean,android.content.DialogInterface.OnCancelListener)>
<android.app.AlertDialog: void setMessage(CharSequence)>
<android.app.AlertDialog: void <init>(android.content.Context,@StyleRes int)>
<android.app.AlertDialog: android.widget.Button getButton(int)>
<android.app.AlertDialog: void setInverseBackgroundForced(boolean)>
<android.app.AlertDialog: void setView(android.view.View)>
<android.app.AlertDialog: void setButton2(CharSequence,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog: void setButton(CharSequence,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog: void setButton2(CharSequence,android.os.Message)>
<android.app.AlertDialog: android.widget.ListView getListView()>
<android.app.AlertDialog: void setCustomTitle(android.view.View)>
<android.app.AlertDialog: void <init>(android.content.Context)>
<android.app.AlertDialog: void setButton3(CharSequence,android.content.DialogInterface.OnClickListener)>
<android.app.AlertDialog: void setIcon(@DrawableResint)>
<android.media.MediaRouter.VolumeCallback: void <init>()>
<android.media.MediaRouter.VolumeCallback: void onVolumeSetRequest(android.media.MediaRouter.RouteInfo,int)>
<android.media.MediaRouter.VolumeCallback: void onVolumeUpdateRequest(android.media.MediaRouter.RouteInfo,int)>
<java.util.Base64: java.util.Base64.Encoder getUrlEncoder()>
<java.util.Base64: java.util.Base64.Encoder getMimeEncoder(int,byte[])>
<java.util.Base64: java.util.Base64.Decoder getDecoder()>
<java.util.Base64: java.util.Base64.Decoder getMimeDecoder()>
<java.util.Base64: java.util.Base64.Encoder getMimeEncoder()>
<java.util.Base64: java.util.Base64.Decoder getUrlDecoder()>
<java.util.Base64: java.util.Base64.Encoder getEncoder()>
<android.util.Rational: int getNumerator()>
<android.util.Rational: boolean isFinite()>
<android.util.Rational: int getDenominator()>
<android.util.Rational: android.util.Rational parseRational(java.lang.String)>
<android.util.Rational: boolean isInfinite()>
<android.util.Rational: int compareTo(android.util.Rational)>
<android.util.Rational: double doubleValue()>
<android.util.Rational: boolean isNaN()>
<android.util.Rational: long longValue()>
<android.util.Rational: float floatValue()>
<android.util.Rational: void <init>(int,int)>
<android.util.Rational: int intValue()>
<android.util.Rational: boolean isZero()>
<android.widget.SimpleAdapter: java.lang.Object getItem(int)>
<android.widget.SimpleAdapter: long getItemId(int)>
<android.widget.SimpleAdapter: void <init>(android.content.Context,java.util.List,@LayoutRes int,String[],@IdRes int[])>
<android.widget.SimpleAdapter: void setViewImage(android.widget.ImageView,java.lang.String)>
<android.widget.SimpleAdapter: void setDropDownViewTheme(android.content.res.Resources.Theme)>
<android.widget.SimpleAdapter: android.widget.SimpleAdapter.ViewBinder getViewBinder()>
<android.widget.SimpleAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.SimpleAdapter: void setViewBinder(android.widget.SimpleAdapter.ViewBinder)>
<android.widget.SimpleAdapter: void setDropDownViewResource(int)>
<android.widget.SimpleAdapter: void setViewImage(android.widget.ImageView,int)>
<android.widget.SimpleAdapter: void setViewText(android.widget.TextView,java.lang.String)>
<android.widget.SimpleAdapter: android.widget.Filter getFilter()>
<android.widget.SimpleAdapter: android.content.res.Resources.Theme getDropDownViewTheme()>
<android.widget.SimpleAdapter: int getCount()>
<java.io.PushbackReader: void unread(int)>
<java.io.PushbackReader: void <init>(java.io.Reader)>
<java.io.PushbackReader: void unread(char[],int,int)>
<java.io.PushbackReader: void unread(char[])>
<java.io.PushbackReader: void <init>(java.io.Reader,int)>
<android.content.ContentProviderClient: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<android.content.ContentProviderClient: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>
<android.content.ContentProviderClient: boolean release()>
<android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>
<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentProviderClient: java.lang.String getType(android.net.Uri)>
<android.content.ContentProviderClient: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentProviderClient: void close()>
<android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)>
<android.content.ContentProviderClient: void setDetectNotResponding(long)>
<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>
<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.content.ContentProviderClient: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.ContentProviderClient: android.content.ContentProvider getLocalContentProvider()>
<android.content.ContentProviderClient: android.net.Uri uncanonicalize(android.net.Uri)>
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.content.ContentProviderClient: android.net.Uri canonicalize(android.net.Uri)>
<javax.sql.ConnectionEvent: void <init>(javax.sql.PooledConnection)>
<javax.sql.ConnectionEvent: java.sql.SQLException getSQLException()>
<javax.sql.ConnectionEvent: void <init>(javax.sql.PooledConnection,java.sql.SQLException)>
<android.media.VolumeShaper.Operation: void writeToParcel(android.os.Parcel,int)>
<android.media.VolumeShaper.Operation: int describeContents()>
<java.net.NoRouteToHostException: void <init>(String)>
<java.net.NoRouteToHostException: void <init>()>
<android.text.DynamicLayout: int getParagraphDirection(int)>
<android.text.DynamicLayout: int getLineStart(int)>
<android.text.DynamicLayout: android.text.Layout.Directions getLineDirections(int)>
<android.text.DynamicLayout: int getBottomPadding()>
<android.text.DynamicLayout: int getTopPadding()>
<android.text.DynamicLayout: int getLineCount()>
<android.text.DynamicLayout: int getLineDescent(int)>
<android.text.DynamicLayout: void <init>(from=0.0) float,float,boolean)>
<android.text.DynamicLayout: void <init>(from=0) int)>
<android.text.DynamicLayout: int getLineTop(int)>
<android.text.DynamicLayout: boolean getLineContainsTab(int)>
<android.text.DynamicLayout: int getEllipsisCount(int)>
<android.text.DynamicLayout: int getEllipsisStart(int)>
<android.content.res.AssetFileDescriptor.AutoCloseInputStream: void <init>(android.content.res.AssetFileDescriptor)>
<java.text.MessageFormat.Field: void <init>(String)>
<android.accounts.OnAccountsUpdateListener: void onAccountsUpdated(android.accounts.Account[])>
<android.view.accessibility.AccessibilityManager: boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener)>
<android.view.accessibility.AccessibilityManager: void addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener,android.os.Handler)>
<android.view.accessibility.AccessibilityManager: void addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener,android.os.Handler)>
<android.view.accessibility.AccessibilityManager: void interrupt()>
<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>
<android.view.accessibility.AccessibilityManager: java.lang.String getAccessibilityShortcutService()>
<android.view.accessibility.AccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int)>
<android.view.accessibility.AccessibilityManager: boolean removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener)>
<android.view.accessibility.AccessibilityManager: boolean isAccessibilityButtonSupported()>
<android.view.accessibility.AccessibilityManager: boolean isEnabled()>
<android.view.accessibility.AccessibilityManager: void performAccessibilityShortcut()>
<android.view.accessibility.AccessibilityManager: boolean addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener)>
<android.view.accessibility.AccessibilityManager: int getRecommendedTimeoutMillis(int,int)>
<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()>
<android.view.accessibility.AccessibilityManager: void removeAccessibilityRequestPreparer(android.view.accessibility.AccessibilityRequestPreparer)>
<android.view.accessibility.AccessibilityManager: int getAccessibilityWindowId(android.os.IBinder)>
<android.view.accessibility.AccessibilityManager: void addAccessibilityServicesStateChangeListener(android.view.accessibility.AccessibilityManager.AccessibilityServicesStateChangeListener,android.os.Handler)>
<android.view.accessibility.AccessibilityManager: boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener)>
<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.accessibility.AccessibilityManager: void removeAccessibilityServicesStateChangeListener(android.view.accessibility.AccessibilityManager.AccessibilityServicesStateChangeListener)>
<android.view.accessibility.AccessibilityManager: void addAccessibilityRequestPreparer(android.view.accessibility.AccessibilityRequestPreparer)>
<android.view.accessibility.AccessibilityManager: java.util.List getAccessibilityServiceList()>
<android.content.Loader.OnLoadCompleteListener: void onLoadComplete(android.content.Loader,D)>
<android.service.autofill.FillResponse: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.FillResponse: int getFlags()>
<android.service.autofill.FillResponse: int describeContents()>
<android.view.MotionEvent: float getOrientation()>
<android.view.MotionEvent: int getActionIndex()>
<android.view.MotionEvent: float getHistoricalOrientation(int)>
<android.view.MotionEvent: int getPointerCount()>
<android.view.MotionEvent: int getToolType(int)>
<android.view.MotionEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.MotionEvent: float getHistoricalTouchMajor(int)>
<android.view.MotionEvent: int getHistorySize()>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)>
<android.view.MotionEvent: int getActionButton()>
<android.view.MotionEvent: float getRawX(int)>
<android.view.MotionEvent: float getToolMajor(int)>
<android.view.MotionEvent: int getDeviceId()>
<android.view.MotionEvent: int getPointerId(int)>
<android.view.MotionEvent: long getDownTime()>
<android.view.MotionEvent: float getTouchMinor()>
<android.view.MotionEvent: float getAxisValue(int)>
<android.view.MotionEvent: void setSource(int)>
<android.view.MotionEvent: int axisFromString(java.lang.String)>
<android.view.MotionEvent: float getHistoricalToolMajor(int)>
<android.view.MotionEvent: float getHistoricalTouchMajor(int,int)>
<android.view.MotionEvent: void getPointerCoords(int,android.view.MotionEvent.PointerCoords)>
<android.view.MotionEvent: int getActionMasked()>
<android.view.MotionEvent: int getEdgeFlags()>
<android.view.MotionEvent: float getHistoricalAxisValue(int,int)>
<android.view.MotionEvent: float getOrientation(int)>
<android.view.MotionEvent: float getHistoricalTouchMinor(int,int)>
<android.view.MotionEvent: float getRawX()>
<android.view.MotionEvent: float getToolMinor()>
<android.view.MotionEvent: int getButtonState()>
<android.view.MotionEvent: float getToolMajor()>
<android.view.MotionEvent: float getToolMinor(int)>
<android.view.MotionEvent: float getRawY(int)>
<android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>
<android.view.MotionEvent: void setEdgeFlags(int)>
<android.view.MotionEvent: int getMetaState()>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,android.view.MotionEvent.PointerProperties[],android.view.MotionEvent.PointerCoords[],int,int,float,float,int,int,int,int)>
<android.view.MotionEvent: long getHistoricalEventTime(int)>
<android.view.MotionEvent: float getHistoricalToolMinor(int)>
<android.view.MotionEvent: float getX(int)>
<android.view.MotionEvent: void getPointerProperties(int,android.view.MotionEvent.PointerProperties)>
<android.view.MotionEvent: float getHistoricalY(int,int)>
<android.view.MotionEvent: float getHistoricalTouchMinor(int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,int[],android.view.MotionEvent.PointerCoords[],int,float,float,int,int,int,int)>
<android.view.MotionEvent: void setActionButton(int)>
<android.view.MotionEvent: int findPointerIndex(int)>
<android.view.MotionEvent: void setDisplayId(int)>
<android.view.MotionEvent: float getHistoricalToolMinor(int,int)>
<android.view.MotionEvent: long getEventTime()>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>
<android.view.MotionEvent: java.lang.String actionToString(int)>
<android.view.MotionEvent: void recycle()>
<android.view.MotionEvent: void setButtonState(int)>
<android.view.MotionEvent: int getClassification()>
<android.view.MotionEvent: float getHistoricalToolMajor(int,int)>
<android.view.MotionEvent: float getRawY()>
<android.view.MotionEvent: int getAction()>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,float,float,int,float,float,int,int)>
<android.view.MotionEvent: float getHistoricalSize(int,int)>
<android.view.MotionEvent: java.lang.String asyncImpl()>
<android.view.MotionEvent: float getXPrecision()>
<android.view.MotionEvent: int getSource()>
<android.view.MotionEvent: float getHistoricalSize(int)>
<android.view.MotionEvent: float getY()>
<android.view.MotionEvent: float getY(int)>
<android.view.MotionEvent: float getYPrecision()>
<android.view.MotionEvent: void addBatch(long,float,float,float,float,int)>
<android.view.MotionEvent: void offsetLocation(float,float)>
<android.view.MotionEvent: float getSize(int)>
<android.view.MotionEvent: float getHistoricalY(int)>
<android.view.MotionEvent: float getSize()>
<android.view.MotionEvent: float getHistoricalAxisValue(int,int,int)>
<android.view.MotionEvent: float getTouchMinor(int)>
<android.view.MotionEvent: boolean isButtonPressed(int)>
<android.view.MotionEvent: float getPressure()>
<android.view.MotionEvent: void transform(android.graphics.Matrix)>
<android.view.MotionEvent: void setLocation(float,float)>
<android.view.MotionEvent: void addBatch(long,android.view.MotionEvent.PointerCoords[],int)>
<android.view.MotionEvent: float getHistoricalX(int,int)>
<android.view.MotionEvent: float getHistoricalPressure(int)>
<android.view.MotionEvent: float getHistoricalOrientation(int,int)>
<android.view.MotionEvent: float getPressure(int)>
<android.view.MotionEvent: float getTouchMajor()>
<android.view.MotionEvent: float getX()>
<android.view.MotionEvent: java.lang.String axisToString(int)>
<android.view.MotionEvent: float getTouchMajor(int)>
<android.view.MotionEvent: int getFlags()>
<android.view.MotionEvent: float getAxisValue(int,int)>
<android.view.MotionEvent: void setAction(int)>
<android.view.MotionEvent: void getHistoricalPointerCoords(int,int,android.view.MotionEvent.PointerCoords)>
<android.view.MotionEvent: float getHistoricalPressure(int,int)>
<android.view.MotionEvent: float getHistoricalX(int)>
<android.animation.AnimatorSet: void setInterpolator(android.animation.TimeInterpolator)>
<android.animation.AnimatorSet: void <init>()>
<android.animation.AnimatorSet: android.animation.AnimatorSet.Builder play(android.animation.Animator)>
<android.animation.AnimatorSet: long getStartDelay()>
<android.animation.AnimatorSet: void playSequentially(java.util.List)>
<android.animation.AnimatorSet: void setCurrentPlayTime(long)>
<android.animation.AnimatorSet: long getCurrentPlayTime()>
<android.animation.AnimatorSet: boolean isRunning()>
<android.animation.AnimatorSet: java.util.ArrayList getChildAnimations()>
<android.animation.AnimatorSet: android.animation.AnimatorSet setDuration(long)>
<android.animation.AnimatorSet: void setStartDelay(long)>
<android.animation.AnimatorSet: void playTogether(android.animation.Animator...)>
<android.animation.AnimatorSet: android.animation.AnimatorSet clone()>
<android.animation.AnimatorSet: void playSequentially(android.animation.Animator...)>
<android.animation.AnimatorSet: void reverse()>
<android.animation.AnimatorSet: void playTogether(java.util.Collection)>
<android.animation.AnimatorSet: long getDuration()>
<android.view.animation.Animation.Description: void <init>()>
<android.permission.PermissionControllerManager: void getAppPermissions(java.lang.String,android.permission.PermissionControllerManager.OnGetAppPermissionResultCallback,android.os.Handler)>
<android.permission.PermissionControllerManager: void revokeRuntimePermissions(java.util.Map,boolean,int,java.util.concurrent.Executor,android.permission.PermissionControllerManager.OnRevokeRuntimePermissionsCallback)>
<java.util.WeakHashMap: void <init>(int)>
<java.util.WeakHashMap: void <init>(int,float)>
<java.util.WeakHashMap: void <init>(java.util.Map)>
<java.util.WeakHashMap: java.util.Set entrySet()>
<java.util.WeakHashMap: void <init>()>
<android.content.DialogInterface: void cancel()>
<android.content.DialogInterface: void dismiss()>
<android.widget.ZoomButton: void <init>(android.content.Context)>
<android.widget.ZoomButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ZoomButton: void setZoomSpeed(long)>
<android.widget.ZoomButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ZoomButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ZoomButton: boolean onLongClick(android.view.View)>
<android.text.style.TtsSpan.MoneyBuilder: android.text.style.TtsSpan.MoneyBuilder setIntegerPart(long)>
<android.text.style.TtsSpan.MoneyBuilder: android.text.style.TtsSpan.MoneyBuilder setCurrency(java.lang.String)>
<android.text.style.TtsSpan.MoneyBuilder: android.text.style.TtsSpan.MoneyBuilder setIntegerPart(java.lang.String)>
<android.text.style.TtsSpan.MoneyBuilder: void <init>()>
<android.text.style.TtsSpan.MoneyBuilder: android.text.style.TtsSpan.MoneyBuilder setFractionalPart(java.lang.String)>
<android.text.style.TtsSpan.MoneyBuilder: android.text.style.TtsSpan.MoneyBuilder setQuantity(java.lang.String)>
<javax.security.auth.PrivateCredentialPermission: java.lang.String[][] getPrincipals()>
<javax.security.auth.PrivateCredentialPermission: boolean implies(java.security.Permission)>
<javax.security.auth.PrivateCredentialPermission: java.lang.String getActions()>
<javax.security.auth.PrivateCredentialPermission: java.lang.String getCredentialClass()>
<javax.security.auth.PrivateCredentialPermission: void <init>(String,String)>
<java.security.interfaces.DSAPrivateKey extends java.security.interfaces.DSAKey java.security.PrivateKey: java.math.BigInteger getX()>
<android.R: void <init>()>
<android.content.ContentProvider: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>
<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentProvider: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>
<android.content.ContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<android.content.ContentProvider: void onLowMemory()>
<android.content.ContentProvider: java.lang.String getReadPermission()>
<android.content.ContentProvider: void restoreCallingIdentity(android.content.ContentProvider.CallingIdentity)>
<android.content.ContentProvider: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>
<android.content.ContentProvider: java.lang.String getWritePermission()>
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFileHelper(android.net.Uri,java.lang.String)>
<android.content.ContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.content.ContentProvider: android.content.Context getContext()>
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<android.content.ContentProvider: android.net.Uri uncanonicalize(android.net.Uri)>
<android.content.ContentProvider: android.content.ContentProvider.CallingIdentity clearCallingIdentity()>
<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.content.ContentProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.content.ContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<android.content.ContentProvider: void onConfigurationChanged(android.content.res.Configuration)>
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.content.ContentProvider: android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,T,android.content.ContentProvider.PipeDataWriter)>
<android.content.ContentProvider: void setReadPermission(java.lang.String)>
<android.content.ContentProvider: void setPathPermissions(android.content.pm.PathPermission[])>
<android.content.ContentProvider: void setWritePermission(java.lang.String)>
<android.content.ContentProvider: void onTrimMemory(int)>
<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>
<android.content.ContentProvider: boolean onCreate()>
<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>
<android.content.ContentProvider: java.lang.String getCallingPackage()>
<android.content.ContentProvider: android.net.Uri canonicalize(android.net.Uri)>
<android.content.ContentProvider: java.lang.String getType(android.net.Uri)>
<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentProvider: android.content.pm.PathPermission[] getPathPermissions()>
<android.content.ContentProvider: void <init>()>
<android.content.ContentProvider: boolean isTemporary()>
<android.content.ContentProvider: void shutdown()>
<android.content.ContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.ContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.icu.text.Bidi: int getResultLength()>
<android.icu.text.Bidi: int countRuns()>
<android.icu.text.Bidi: void setPara(char[],byte,byte[])>
<android.icu.text.Bidi: byte getLevelAt(int)>
<android.icu.text.Bidi: android.icu.text.BidiRun getLogicalRun(int)>
<android.icu.text.Bidi: boolean baseIsLeftToRight()>
<android.icu.text.Bidi: int countParagraphs()>
<android.icu.text.Bidi: int[] reorderVisual(byte[])>
<android.icu.text.Bidi: void <init>(int,int)>
<android.icu.text.Bidi: boolean isInverse()>
<android.icu.text.Bidi: int[] getLogicalMap()>
<android.icu.text.Bidi: int getLength()>
<android.icu.text.Bidi: boolean isOrderParagraphsLTR()>
<android.icu.text.Bidi: android.icu.text.BidiRun getVisualRun(int)>
<android.icu.text.Bidi: void orderParagraphsLTR(boolean)>
<android.icu.text.Bidi: void setContext(java.lang.String,java.lang.String)>
<android.icu.text.Bidi: char[] getText()>
<android.icu.text.Bidi: int[] reorderLogical(byte[])>
<android.icu.text.Bidi: void <init>(char[],int,byte[],int,int,int)>
<android.icu.text.Bidi: int getParagraphIndex(int)>
<android.icu.text.Bidi: byte getParaLevel()>
<android.icu.text.Bidi: boolean requiresBidi(char[],int,int)>
<android.icu.text.Bidi: java.lang.String writeReverse(java.lang.String,int)>
<android.icu.text.Bidi: int getCustomizedClass(int)>
<android.icu.text.Bidi: int[] getVisualMap()>
<android.icu.text.Bidi: int getReorderingOptions()>
<android.icu.text.Bidi: void setPara(java.text.AttributedCharacterIterator)>
<android.icu.text.Bidi: java.lang.String getTextAsString()>
<android.icu.text.Bidi: int getVisualIndex(int)>
<android.icu.text.Bidi: int getLogicalIndex(int)>
<android.icu.text.Bidi: android.icu.text.BidiRun getParagraph(int)>
<android.icu.text.Bidi: int getReorderingMode()>
<android.icu.text.Bidi: void reorderVisually(byte[],int,java.lang.Object[],int,int)>
<android.icu.text.Bidi: int getRunLevel(int)>
<android.icu.text.Bidi: android.icu.text.Bidi setLine(int,int)>
<android.icu.text.Bidi: java.lang.String writeReordered(int)>
<android.icu.text.Bidi: boolean isMixed()>
<android.icu.text.Bidi: int getRunCount()>
<android.icu.text.Bidi: android.icu.text.BidiRun getParagraphByIndex(int)>
<android.icu.text.Bidi: int getProcessedLength()>
<android.icu.text.Bidi: int getRunStart(int)>
<android.icu.text.Bidi: byte getDirection()>
<android.icu.text.Bidi: int getBaseLevel()>
<android.icu.text.Bidi: boolean isLeftToRight()>
<android.icu.text.Bidi: void setReorderingOptions(int)>
<android.icu.text.Bidi: android.icu.text.Bidi createLineBidi(int,int)>
<android.icu.text.Bidi: void <init>(java.text.AttributedCharacterIterator)>
<android.icu.text.Bidi: void setCustomClassifier(android.icu.text.BidiClassifier)>
<android.icu.text.Bidi: void setReorderingMode(int)>
<android.icu.text.Bidi: byte[] getLevels()>
<android.icu.text.Bidi: void setPara(java.lang.String,byte,byte[])>
<android.icu.text.Bidi: void <init>()>
<android.icu.text.Bidi: void setInverse(boolean)>
<android.icu.text.Bidi: void <init>(String,int)>
<android.icu.text.Bidi: int[] invertMap(int[])>
<android.icu.text.Bidi: boolean isRightToLeft()>
<android.icu.text.Bidi: int getRunLimit(int)>
<android.icu.text.Bidi: byte getBaseDirection(CharSequence)>
<android.icu.text.Bidi: android.icu.text.BidiClassifier getCustomClassifier()>
<java.security.spec.RSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>
<java.security.spec.RSAPrivateKeySpec: java.math.BigInteger getModulus()>
<java.security.spec.RSAPrivateKeySpec: java.math.BigInteger getPrivateExponent()>
<android.text.style.EasyEditSpan: int describeContents()>
<android.text.style.EasyEditSpan: void <init>()>
<android.text.style.EasyEditSpan: void <init>(android.os.Parcel)>
<android.text.style.EasyEditSpan: int getSpanTypeId()>
<android.text.style.EasyEditSpan: void <init>(android.app.PendingIntent)>
<android.text.style.EasyEditSpan: void writeToParcel(android.os.Parcel,int)>
<android.view.View.BaseSavedState: void <init>(android.os.Parcel,ClassLoader)>
<android.view.View.BaseSavedState: void <init>(android.os.Parcel)>
<android.view.View.BaseSavedState: void <init>(android.os.Parcelable)>
<android.net.wifi.hotspot2.pps.Credential: void setCaCertificate(java.security.cert.X509Certificate)>
<android.net.wifi.hotspot2.pps.Credential: android.net.wifi.hotspot2.pps.Credential.CertificateCredential getCertCredential()>
<android.net.wifi.hotspot2.pps.Credential: void <init>()>
<android.net.wifi.hotspot2.pps.Credential: void setRealm(java.lang.String)>
<android.net.wifi.hotspot2.pps.Credential: java.security.cert.X509Certificate getCaCertificate()>
<android.net.wifi.hotspot2.pps.Credential: void setSimCredential(android.net.wifi.hotspot2.pps.Credential.SimCredential)>
<android.net.wifi.hotspot2.pps.Credential: int describeContents()>
<android.net.wifi.hotspot2.pps.Credential: java.security.cert.X509Certificate[] getClientCertificateChain()>
<android.net.wifi.hotspot2.pps.Credential: android.net.wifi.hotspot2.pps.Credential.SimCredential getSimCredential()>
<android.net.wifi.hotspot2.pps.Credential: java.security.PrivateKey getClientPrivateKey()>
<android.net.wifi.hotspot2.pps.Credential: java.lang.String getRealm()>
<android.net.wifi.hotspot2.pps.Credential: android.net.wifi.hotspot2.pps.Credential.UserCredential getUserCredential()>
<android.net.wifi.hotspot2.pps.Credential: void setUserCredential(android.net.wifi.hotspot2.pps.Credential.UserCredential)>
<android.net.wifi.hotspot2.pps.Credential: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.hotspot2.pps.Credential: void setClientCertificateChain(java.security.cert.X509Certificate[])>
<android.net.wifi.hotspot2.pps.Credential: void setClientPrivateKey(java.security.PrivateKey)>
<android.net.wifi.hotspot2.pps.Credential: void <init>(android.net.wifi.hotspot2.pps.Credential)>
<android.net.wifi.hotspot2.pps.Credential: void setCertCredential(android.net.wifi.hotspot2.pps.Credential.CertificateCredential)>
<android.widget.ExpandableListView: void setAdapter(android.widget.ExpandableListAdapter)>
<android.widget.ExpandableListView: long getSelectedPosition()>
<android.widget.ExpandableListView: boolean expandGroup(int,boolean)>
<android.widget.ExpandableListView: void <init>(android.content.Context)>
<android.widget.ExpandableListView: void setOnGroupExpandListener(android.widget.ExpandableListView.OnGroupExpandListener)>
<android.widget.ExpandableListView: void setChildIndicatorBounds(int,int)>
<android.widget.ExpandableListView: void setGroupIndicator(android.graphics.drawable.Drawable)>
<android.widget.ExpandableListView: void setIndicatorBoundsRelative(int,int)>
<android.widget.ExpandableListView: void setSelectedGroup(int)>
<android.widget.ExpandableListView: int getPackedPositionChild(long)>
<android.widget.ExpandableListView: long getPackedPositionForGroup(int)>
<android.widget.ExpandableListView: void setChildIndicator(android.graphics.drawable.Drawable)>
<android.widget.ExpandableListView: void setOnChildClickListener(android.widget.ExpandableListView.OnChildClickListener)>
<android.widget.ExpandableListView: boolean expandGroup(int)>
<android.widget.ExpandableListView: boolean collapseGroup(int)>
<android.widget.ExpandableListView: boolean setSelectedChild(int,int,boolean)>
<android.widget.ExpandableListView: void setChildIndicatorBoundsRelative(int,int)>
<android.widget.ExpandableListView: android.widget.ExpandableListAdapter getExpandableListAdapter()>
<android.widget.ExpandableListView: boolean isGroupExpanded(int)>
<android.widget.ExpandableListView: void setIndicatorBounds(int,int)>
<android.widget.ExpandableListView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ExpandableListView: long getPackedPositionForChild(int,int)>
<android.widget.ExpandableListView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ExpandableListView: long getSelectedId()>
<android.widget.ExpandableListView: void setOnGroupCollapseListener(android.widget.ExpandableListView.OnGroupCollapseListener)>
<android.widget.ExpandableListView: void setChildDivider(android.graphics.drawable.Drawable)>
<android.widget.ExpandableListView: int getFlatListPosition(long)>
<android.widget.ExpandableListView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ExpandableListView: long getExpandableListPosition(int)>
<android.widget.ExpandableListView: int getPackedPositionGroup(long)>
<android.widget.ExpandableListView: void setOnGroupClickListener(android.widget.ExpandableListView.OnGroupClickListener)>
<android.widget.ExpandableListView: int getPackedPositionType(long)>
