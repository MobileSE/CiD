<com.android.server.appop.AppOpsService: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
<com.android.systemui.usb.UsbContaminantActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.pip.BasePipManager: void expandPip()>
<com.android.server.policy.WindowManagerPolicy: void screenTurningOff(com.android.server.policy.WindowManagerPolicy.ScreenOffListener)>
<com.android.systemui.statusbar.notification.MessagingImageTransformState: void initFrom(android.view.View,com.android.systemui.statusbar.notification.TransformState.TransformInfo)>
<com.android.keyguard.KeyguardMessageArea: void setNextMessageColor(android.content.res.ColorStateList)>
<com.android.server.wallpaper.WallpaperManagerService: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
<com.android.systemui.statusbar.phone.StatusBar: void onStateChanged(int)>
<com.android.server.pm.PersistentPreferredIntentResolver: android.content.IntentFilter getIntentFilter(com.android.server.pm.PersistentPreferredActivity)>
<com.android.keyguard.KeyguardSecurityViewFlipper: void onResume(int)>
<com.android.keyguard.KeyguardSliceView: void onAttachedToWindow()>
<android.os.ParcelPerfTest: void timeGetDataSize()>
<com.android.server.autofill.ui.InlineFillUi: com.android.server.autofill.ui.InlineFillUi forAugmentedAutofill(android.view.inputmethod.InlineSuggestionsRequest,java.util.List,android.view.autofill.AutofillId,java.lang.String,com.android.server.autofill.ui.InlineFillUi.InlineSuggestionUiCallback,java.lang.Runnable,com.android.server.autofill.RemoteInlineSuggestionRenderService,int,int)>
<com.android.systemui.statusbar.notification.row.HybridNotificationView: void <init>(android.content.Context)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void removeCallbacks()>
<com.android.server.statusbar.StatusBarManagerInternal: void showTransient(int,int[])>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: void setFullscreenState(boolean,boolean)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void terminateSystemAudioMode()>
<android.net.wifi.aware.TlvBufferUtils.TlvIterable: java.lang.String toString()>
<com.android.systemui.stackdivider.Divider: void onDockedTopTask()>
<android.net.wifi.IWifiManager: void unregisterNetworkRequestMatchCallback(int)>
<com.android.systemui.bubbles.BubbleOverflowActivity: void onDestroy()>
<com.android.settingslib.fuelgauge.BatteryStatus: void <init>(android.content.Intent)>
<com.android.settingslib.CustomEditTextPreferenceCompat.CustomPreferenceDialogFragment: void onDialogClosed(boolean)>
<com.android.server.input.InputManagerService: int isMicMuted()>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: int getZen()>
<android.net.wifi.hotspot2.pps.Credential: java.lang.String getRealm()>
<com.android.server.LooperStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.keyguard.KeyguardSimPukView: void onAttachedToWindow()>
<android.net.wifi.aware.WifiAwareNetworkSpecifier: boolean equals(java.lang.Object)>
<com.android.settingslib.suggestions.SuggestionController: void launchSuggestion(android.service.settings.suggestions.Suggestion)>
<com.android.systemui.statusbar.policy.LocationControllerImpl: boolean areActiveHighPowerLocationRequests()>
<com.android.keyguard.clock.ImageClock: void onTimeZoneChanged(java.util.TimeZone)>
<com.android.systemui.statusbar.notification.TransformState: int[] getLocationOnScreen()>
<com.android.server.usb.UsbService.Lifecycle: void onBootPhase(int)>
<com.android.server.infra.AbstractMasterSystemService: void <init>(android.content.Context,com.android.server.infra.ServiceNameResolver,java.lang.String)>
<com.android.server.media.MediaRouterService: void unregisterRouter2(android.media.IMediaRouter2)>
<android.media.Session2CommandGroup.Builder: android.media.Session2CommandGroup build()>
<com.android.startop.colorchanging.MainActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setStatusAccessibilityImportance(int)>
<com.android.server.utils.ManagedApplicationService: int getUserId()>
<com.android.server.pm.UserManagerService: boolean hasBaseUserRestriction(java.lang.String,int)>
<com.android.server.accounts.AccountManagerService.Lifecycle: void onStopUser(int)>
<com.android.server.locksettings.LockSettingsService: boolean getSeparateProfileChallengeEnabled(int)>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void onCountdownEnd()>
<com.android.settingslib.schedulesprovider.ScheduleInfo: boolean isValid()>
<com.android.settingslib.applications.ServiceListing.Builder: com.android.settingslib.applications.ServiceListing.Builder setIntentAction(java.lang.String)>
<com.android.server.IpSecService: void systemReady()>
<com.android.server.people.data.DataManager: byte[] getBackupPayload(int)>
<com.android.systemui.statusbar.phone.ReverseLinearLayout: void onRtlPropertiesChanged(int)>
<com.android.systemui.statusbar.EmptyShadeView: void setTextColor(int)>
<com.android.systemui.qs.QSContainerImplController.Builder: com.android.systemui.qs.QSContainerImplController.Builder setQSContainerImpl(com.android.systemui.qs.QSContainerImpl)>
<com.android.systemui.SwipeHelper: void setDisableHardwareLayers(boolean)>
<android.net.wifi.aware.TlvBufferUtils.TlvConstructor: byte[] getArray()>
<com.android.server.usb.descriptors.UsbDescriptorParser: java.util.ArrayList getDescriptors()>
<com.android.systemui.accessibility.WindowMagnificationController: void surfaceDestroyed(android.view.SurfaceHolder)>
<android.net.wifi.aware.DiscoverySession: int getClientId()>
<android.net.wifi.IWifiManager: int matchProviderWithCurrentNetwork(java.lang.String)>
<com.android.server.DeviceIdleController.Constants: void <init>(android.os.Handler,android.content.ContentResolver)>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: android.content.pm.SharedLibraryInfo createSharedLibraryForDynamic(com.android.server.pm.parsing.pkg.AndroidPackage,java.lang.String)>
<com.android.systemui.car.volume.VolumeUI: void start()>
<com.android.systemui.qs.tiles.NightDisplayTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.statusbar.policy.LocationController)>
<com.android.uiautomator.core.UiDevice: boolean isNaturalOrientation()>
<com.android.systemui.pip.phone.PipMenuActivity: void onStop()>
<com.android.systemui.wm.DisplayLayout: void getStableBounds(android.graphics.Rect)>
<com.android.server.protolog.common.ProtoLog: void wtf(com.android.server.protolog.common.IProtoLogGroup,java.lang.String,java.lang.Object[])>
<com.android.server.compat.PlatformCompatNative: void reportChangeByPackageName(long,java.lang.String,int)>
<com.android.systemui.biometrics.AuthBiometricFaceView.IconController: void updateState(int,int)>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void onDisplayRemoved(int)>
<com.android.systemui.appops.AppOpsControllerImpl: void onOpNoted(int,int,java.lang.String,int)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void resetBackgroundAlpha()>
<com.android.server.testing.shadows.ShadowBackupDataInput: java.lang.String getKey()>
<com.android.server.pm.dex.DexManager: void writePackageDexUsageNow()>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getGlobalProxyAdmin(int)>
<com.android.systemui.qs.QuickStatusBarHeader: com.android.systemui.qs.QuickQSPanel getHeaderQsPanel()>
<com.android.systemui.statusbar.DragDownHelper.DragDownCallback: void onTouchSlopExceeded()>
<com.android.server.display.OverlayDisplayWindow.Listener: void onWindowCreated(android.graphics.SurfaceTexture,float,long,int)>
<com.android.server.ServiceWatcher: void onServiceDisconnected(android.content.ComponentName)>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void setUseOpenWifiAppPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.PackagesProvider)>
<android.net.wifi.aware.PublishConfig: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiNetworkSuggestion: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.StatusBarIconView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.net.wifi.hotspot2.PasspointConfiguration: long getUsageLimitDataLimit()>
<android.net.wifi.INetworkRequestMatchCallback: void onUserSelectionCallbackRegistration(android.net.wifi.INetworkRequestUserSelectionCallback)>
<com.android.settingslib.CustomDialogPreference.CustomPreferenceDialogFragment: com.android.settingslib.CustomDialogPreference.CustomPreferenceDialogFragment newInstance(java.lang.String)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setAnchorViewY(int)>
<com.android.server.integrity.model.IntegrityCheckResult: com.android.server.integrity.model.IntegrityCheckResult.Effect getEffect()>
<javax.obex.ObexTransport: void disconnect()>
<com.android.gallery3d.exif.ExifInterface: byte[] getThumbnail()>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: int getNotificationChildCount()>
<android.net.wifi.WifiInfo: boolean isEphemeral()>
<com.android.systemui.volume.VolumeDialogImpl: void onUiModeChanged()>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest: void <init>(java.lang.String)>
<com.android.server.ExtconUEventObserver.ExtconInfo: void <init>(java.lang.String)>
<com.android.server.biometrics.ClientMonitor: int getGroupId()>
<com.android.server.usb.descriptors.Usb10ACInputTerminal: void <init>(int,byte,byte,int)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void <init>(android.content.Context,com.android.systemui.statusbar.phone.StatusBar,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.notification.NotificationWakeUpCoordinator,com.android.systemui.statusbar.phon.KeyguardBypassController,com.android.systemui.statusbar.NotificationMediaManager,com.android.systemui.statusbar.NotificationListener,com.android.systemui.statusbar.phone.DozeParameters,com.android.systemui.bubbles.BubbleController)>
<com.android.systemui.assist.AssistHandleBehaviorController: void showAndStay()>
<com.android.systemui.plugins.PluginDependencyProvider: void allowPluginDependency(java.lang.Class)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void setMenuClickListener(com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.OnMenuEventListener)>
<javax.obex.Operation: int getHeaderLength()>
<com.android.server.vr.VrManagerService: void setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)>
<android.content.pm.PackageManagerInternal: boolean isPackageSuspended(java.lang.String,int)>
<com.android.server.pm.AbstractStatsBase: void writeInternal(java.lang.Object)>
<com.android.gallery3d.glrenderer.GLCanvas: void scale(float,float,float)>
<com.android.systemui.volume.MediaRouterWrapper: void removeCallback(androidx.mediarouter.media.MediaRouter.Callback)>
<com.android.settingslib.deviceinfo.StorageVolumeProvider: java.util.List getVolumes()>
<com.android.systemui.car.notification.NotificationPanelViewController: void animateExpandNotificationsPanel()>
<com.android.wallpapercropper.WallpaperCropActivity.BitmapCropTask: void setOnEndRunnable(java.lang.Runnable)>
<com.android.networkstack.tethering.Tethering.UserRestrictionActionListener: void onUserRestrictionsChanged()>
<com.android.systemui.car.notification.NotificationPanelViewController: void onOpenScrollStart()>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo.OnConversationSettingsClickListener: void onClick()>
<com.android.systemui.statusbar.notification.VisualStabilityManager: void <init>(com.android.systemui.statusbar.notification.NotificationEntryManager,android.os.Handler)>
<com.android.uiautomator.core.Configurator: long getScrollAcknowledgmentTimeout()>
<com.android.systemui.car.bluetooth.ConnectedDeviceSignalController: void onBluetoothDevicesChanged()>
<com.android.server.pm.PackageManagerService: java.lang.String getSystemCaptionsServicePackageName()>
<android.net.wifi.IWifiManager: void stopWatchLocalOnlyHotspot()>
<com.android.server.gpu.GpuService: void onBootPhase(int)>
<com.android.settingslib.volume.Util: java.lang.String playbackStateToString(android.media.session.PlaybackState)>
<com.android.server.protolog.common.IProtoLogGroup: boolean isEnabled()>
<com.android.systemui.tuner.CustomListPreference: java.lang.CharSequence getConfirmationMessage(java.lang.String)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setPriority(int)>
<android.net.wifi.WifiManager: boolean pingSupplicant()>
<com.android.server.webkit.SystemImpl: void enableFallbackLogic(boolean)>
<com.android.server.input.InputManagerService: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>
<android.app.backup.BackupUtilsTest: void testIsFileSpecifiedInPathList_whenFileAndPathListHasDirectoryWhoseNameIsPrefix()>
<com.android.server.integrity.parser.RandomAccessObject: void seek(int)>
<com.android.server.pm.parsing.library.ComGoogleAndroidMapsUpdater: void updatePackage(com.android.server.pm.parsing.pkg.ParsedPackage,boolean)>
<com.android.systemui.util.sensors.AsyncSensorManager: boolean registerListenerImpl(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler,int,int)>
<com.android.server.textclassifier.FixedSizeQueue: int size()>
<com.android.systemui.statusbar.phone.DoubleTapHelper.DoubleTapLogListener: void onDoubleTapLog(boolean,float,float)>
<com.android.server.accessibility.KeyEventDispatcher: void <init>(android.os.Handler,int,java.lang.Object,android.os.PowerManager)>
<android.os.IPendingIntentRef: void sendDataBroadcast(long)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: java.util.List getConnectedDevices()>
<com.android.server.usb.descriptors.UsbDescriptorParser: java.util.ArrayList getInterfaceDescriptorsForClass(int)>
<com.android.systemui.statusbar.notification.row.HybridNotificationView: void bind(java.lang.CharSequence,java.lang.CharSequence,android.view.View)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: android.view.View getContentView()>
<com.android.systemui.wm.DisplayLayout: int height()>
<com.android.systemui.qs.carrier.QSCarrierGroup: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.plugins.qs.QS: void setHeightOverride(int)>
<com.android.server.attention.AttentionManagerService: void freeIfInactiveLocked()>
<com.android.networkstack.tethering.ConnectedClientsTracker: java.util.List getLastTetheredClients()>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper: boolean isSwipingInProgress()>
<com.android.settingslib.drawable.CircleFramedDrawable: int getOpacity()>
<com.android.egg.neko.NekoTile: void onClick()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean canBubble()>
<android.net.wifi.IWifiManager: int getWifiEnabledState()>
<com.android.systemui.statusbar.phone.BiometricUnlockController: boolean isBiometricUnlock()>
<android.net.wifi.WifiManager: boolean isEnhancedPowerReportingSupported()>
<com.android.keyguard.KeyguardPatternView: void onResume(int)>
<com.android.server.biometrics.BiometricServiceBase: void enrollInternal(com.android.server.biometrics.BiometricServiceBase.EnrollClientImpl,int)>
<com.android.server.appbinding.AppBindingConstants: void dump(java.lang.String,java.io.PrintWriter)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: boolean shouldShowGutsOnSnapOpen()>
<com.android.settingslib.animation.DisappearAnimationUtils: long calculateDelay(int,int)>
<com.android.systemui.bubbles.BubbleOverflowActivity: void onStart()>
<com.android.systemui.statusbar.phone.PanelViewController: float getOverExpansionAmount()>
<com.android.systemui.statusbar.notification.CustomInterpolatorTransformation: boolean transformFrom(com.android.systemui.statusbar.notification.TransformState,com.android.systemui.statusbar.TransformableView,float)>
<com.android.server.pm.PackageInstallerSession: int[] getChildSessionIds()>
<com.android.server.pm.PackageManagerService: java.lang.CharSequence getHarmfulAppWarning(java.lang.String,int)>
<com.android.systemui.statusbar.phone.StatusBar: void startActivityDismissingKeyguard(android.content.Intent,boolean,boolean,boolean,android.os.Handler.Callback,int)>
<com.android.systemui.car.navigationbar.CarNavigationBarView: void onFinishInflate()>
<com.android.systemui.statusbar.phone.DemoStatusIcons: void addMobileView(com.android.systemui.statusbar.phone.StatusBarSignalPolicy.MobileIconState)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: boolean shouldShowMenu()>
<com.android.printservice.recommendation.util.Preconditions: void checkArgument(boolean,java.lang.Object)>
<com.android.systemui.qs.QSPanel: void initMediaHostState()>
<com.android.server.pm.permission.PermissionsState: void <init>(com.android.server.pm.permission.PermissionsState)>
<com.android.keyguard.clock.AnalogClockController: void setStyle(android.graphics.Paint.Style)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: boolean shouldShowNotificationIcon(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean)>
<com.android.settingslib.fuelgauge.BatteryStatus: boolean isCharged()>
<com.android.server.timedetector.TimeDetectorStrategy.Callback: boolean isAutoTimeDetectionEnabled()>
<com.android.keyguard.KeyguardSimPinView: int getPasswordTextViewId()>
<com.android.systemui.qs.tiles.WifiTile: com.android.systemui.plugins.qs.QSIconView createTileView(android.content.Context)>
<com.android.settingslib.drawable.UserIconDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addAccessPoints(java.util.List)>
<com.android.systemui.assist.AssistOrbView: boolean hasOverlappingRendering()>
<com.android.settingslib.widget.AppEntitiesHeaderController: com.android.settingslib.widget.AppEntitiesHeaderController setHeaderDetailsRes(int)>
<com.android.settingslib.bluetooth.HidProfile: void finalize()>
<com.android.server.media.MediaSessionService: void enforcePhoneStatePermission(int,int)>
<com.android.gallery3d.common.Utils: long crc64Long(byte[])>
<com.android.settingslib.media.LocalMediaManager: com.android.settingslib.media.MediaDevice getMediaDeviceById(java.util.List,java.lang.String)>
<com.android.server.soundtrigger.SoundTriggerInternal: int stopRecognition(int,android.hardware.soundtrigger.IRecognitionStatusCallback)>
<com.android.systemui.classifier.FalsingManagerProxy: void onQsDown()>
<javax.obex.ServerOperation: int getHeaderLength()>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.plugins.FalsingManager provideFalsingManager(com.android.systemui.classifier.FalsingManagerProxy)>
<com.android.server.policy.WindowOrientationListener: boolean canDetectOrientation()>
<com.android.server.broadcastradio.hal2.BroadcastRadioService: boolean hasModule(int)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void setOccluded(boolean,boolean)>
<com.android.settingslib.location.InjectedSetting: java.lang.String toString()>
<com.android.networkstack.tethering.BpfCoordinator: void tetherOffloadRuleRemove(android.net.ip.IpServer,com.android.networkstack.tethering.BpfCoordinator.Ipv6ForwardingRule)>
<com.android.systemui.statusbar.notification.stack.AmbientState: int getNotificationLaunchHeight(android.content.Context)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void <init>(android.content.Context,android.os.Handler,com.android.systemui.car.CarServiceProvider,com.android.systemui.car.window.OverlayViewGlobalStateController,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.keyguard.KeyguardUpdateMonitor,dagger.Lazy,com.android.keyguard.ViewMediatorCallback,com.android.systemui.car.navigationbar.CarNavigationBarController,com.android.internal.widget.LockPatternUtils,com.android.systemui.keyguard.DismissCallbackRegistry,com.android.systemui.plugins.FalsingManager,dagger.Lazy)>
<com.android.systemui.shared.system.MetricsLoggerCompat: void action(int)>
<com.android.systemui.SwipeHelper: void invalidateGlobalRegion(android.view.View)>
<com.android.server.usb.UsbService: long getScreenUnlockedFunctions()>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSecondaryNativeLibraryDir(java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setClipBottomAmount(int)>
<com.android.uiautomator.core.UiDevice: void setOrientationNatural()>
<com.android.server.pm.Installer: void rmPackageDir(java.lang.String)>
<com.android.gallery3d.exif.ExifInterface: com.android.gallery3d.exif.ExifTag getTag(int)>
<com.android.printspooler.model.PrintSpoolerService: java.util.List getPrintJobInfos(android.content.ComponentName,int,int)>
<com.android.server.om.OverlayActorEnforcer: void <init>(com.android.server.om.OverlayableInfoCallback)>
<com.android.server.usb.descriptors.tree.UsbDescriptorsACInterfaceNode: void <init>(com.android.server.usb.descriptors.UsbACInterface)>
<com.android.systemui.statusbar.notification.VisualStabilityManager: void setPanelExpanded(boolean)>
<com.android.keyguard.PasswordTextView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.OnMenuEventListener: void onMenuReset(android.view.View)>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getIntentFilterVerifications(java.lang.String)>
<android.net.wifi.WifiEnterpriseConfig: void setAnonymousIdentity(java.lang.String)>
<com.android.server.SystemService: android.os.IBinder getBinderService(java.lang.String)>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcherScrim: void <init>(android.content.Context)>
<com.android.server.audio.RecordingActivityMonitor: void releaseRecorder(int)>
<com.android.systemui.classifier.FalsingManagerFake: void onNotificationDoubleTap(boolean,float,float)>
<com.android.systemui.recents.OverviewProxyService.OverviewProxyListener: void onNavBarButtonAlphaChanged(float,boolean)>
<com.android.powermodel.AttributionKey: boolean equals(java.lang.Object)>
<com.android.server.audio.AudioService: boolean isStreamAffectedByMute(int)>
<android.view.ViewPerfTest: void testSimpleViewInflate()>
<com.android.commands.svc.NfcCommand: java.lang.String shortHelp()>
<com.android.systemui.BatteryMeterView: void onDensityOrFontScaleChanged()>
<com.android.server.biometrics.fingerprint.FingerprintService: java.lang.String getManageBiometricPermission()>
<com.android.server.NetworkManagementService: void setNetworkPermission(int,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: float calculateAppearFractionBypass()>
<javax.microedition.khronos.opengles.GL10: void glLightModelfv(int,java.nio.FloatBuffer)>
<com.android.settingslib.utils.StringUtil: java.lang.CharSequence formatElapsedTime(android.content.Context,double,boolean)>
<com.android.systemui.car.sideloaded.SideLoadedAppController: void <init>(android.content.Context,android.app.IActivityTaskManager,com.android.systemui.car.sideloaded.SideLoadedAppDetector,com.android.systemui.car.sideloaded.SideLoadedAppListener,com.android.systemui.car.sideloaded.SideLoadedAppStateController)>
<com.android.statementservice.retriever.AssociationServiceException: void <init>(java.lang.Exception)>
<com.android.commands.sm.Sm: void runBenchmark()>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: com.android.systemui.statusbar.KeyguardAffordanceView getRightView()>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView.OnActivatedListener: void onActivationReset(com.android.systemui.statusbar.notification.row.ActivatableNotificationView)>
<com.android.systemui.statusbar.NotificationListener.NotificationHandler: void onNotificationRankingUpdate(android.service.notification.NotificationListenerService.RankingMap)>
<com.android.server.pm.permission.PermissionManagerService: int checkUidPermission(java.lang.String,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBindTexture(int,int)>
<com.android.systemui.statusbar.policy.OnHeadsUpChangedListener: void onHeadsUpUnPinned(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.qs.TileLayout: void addTile(com.android.systemui.qs.QSPanel.TileRecord)>
<com.android.systemui.statusbar.phone.KeyguardBouncer: void removeView()>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.lang.String importKeyWithMetadata(java.lang.String,byte[],byte[])>
<com.android.settingslib.deviceinfo.AbstractWifiMacAddressPreferenceController: java.lang.String[] getConnectivityIntents()>
<com.android.systemui.car.navigationbar.CarNavigationButton: java.lang.String[] getPackages()>
<com.android.server.pm.PackageInstallerSession: boolean isStaged()>
<com.android.systemui.statusbar.policy.KeyguardStateController: long getKeyguardFadingAwayDelay()>
<com.android.systemui.qs.QSPanel: void setBrightnessMirror(com.android.systemui.statusbar.policy.BrightnessMirrorController)>
<javax.obex.Operation: java.io.DataOutputStream openDataOutputStream()>
<com.android.server.pm.permission.BasePermission: int getType()>
<com.android.server.policy.PowerAction: boolean showDuringKeyguard()>
<com.android.settingslib.development.AbstractEnableAdbPreferenceController: void displayPreference(androidx.preference.PreferenceScreen)>
<android.util.StatsEvent: void release()>
<com.android.systemui.analytics.DataCollector: void onCameraHintStarted()>
<com.android.systemui.car.navigationbar.AssitantButton: void setUpIntents(android.content.res.TypedArray)>
<com.android.settingslib.CustomEditTextPreferenceCompat: void onDialogClosed(boolean)>
<com.android.server.locksettings.recoverablekeystore.KeyStoreProxy: void setEntry(java.lang.String,java.security.KeyStore.Entry,java.security.KeyStore.ProtectionParameter)>
<com.android.networkstack.tethering.Tethering.UserRestrictionActionListener: void <init>(android.os.UserManager,com.android.networkstack.tethering.Tethering,com.android.networkstack.tethering.TetheringNotificationUpdater)>
<com.android.systemui.statusbar.phone.ScreenPinningNotify: void showPinningStartToast()>
<com.android.egg.neko.Cat: java.lang.Object choose(java.util.Random,java.lang.Object[])>
<android.net.wifi.rtt.ResponderLocation: double getLatitude()>
<com.android.server.pm.UserManagerService: boolean isUserUnlockingOrUnlocked(int)>
<com.android.systemui.statusbar.phone.HeadsUpAppearanceController: void setTrackingHeadsUp(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.pm.permission.BasePermission: int calculateFootprint(com.android.server.pm.permission.BasePermission)>
<com.android.settingslib.inputmethod.InputMethodPreference: void <init>(android.content.Context,android.view.inputmethod.InputMethodInfo,boolean,boolean,com.android.settingslib.inputmethod.InputMethodPreference.OnSavePreferenceListener)>
<com.android.server.storage.StorageSessionController.ExternalStorageServiceException: void <init>(java.lang.Throwable)>
<android.content.pm.PackageManagerInternal: void setReadExternalStorageEnforced(boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void closeControlsIfOutsideTouch(android.view.MotionEvent)>
<com.android.server.display.DisplayModeDirector.BrightnessObserver: void onDeviceConfigLowBrightnessThresholdsChanged(int[],int[])>
<com.android.server.testing.shadows.ShadowSlog: int d(java.lang.String,java.lang.String)>
<com.android.systemui.shared.system.TransactionCompat: com.android.systemui.shared.system.TransactionCompat setWindowCrop(com.android.systemui.shared.system.SurfaceControlCompat,android.graphics.Rect)>
<com.android.server.integrity.parser.RandomAccessInputStream: int read()>
<android.net.wifi.WifiInfo: boolean getHiddenSSID()>
<com.android.systemui.classifier.HistoryEvaluator: void addGesture(float)>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: boolean equals(java.lang.Object)>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onRecentTaskListUpdated()>
<com.android.server.audio.AudioService: void unregisterAudioPolicyAsync(android.media.audiopolicy.IAudioPolicyCallback)>
<com.android.server.testing.shadows.ShadowSlog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>
<com.android.powermodel.component.CpuProfile.Builder: void setSuspendMa(float)>
<com.android.systemui.qs.SignalTileView: void onMeasure(int,int)>
<com.android.server.TelephonyRegistry: void notifyActiveDataSubIdChanged(int)>
<com.android.systemui.SystemUIApplication: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getRoundIconRes()>
<com.android.systemui.biometrics.AuthContainerView: void onAttachedToWindow()>
<com.android.server.pm.PackageManagerService: void finishPackageInstall(int,boolean)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isGame()>
<com.android.gallery3d.exif.Rational: long getNumerator()>
<com.android.server.biometrics.face.FaceService: boolean checkAppOps(int,java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: boolean isSnapping()>
<com.android.systemui.qs.customize.TileAdapter: int getItemViewType(int)>
<com.android.systemui.statusbar.policy.ConfigurationController: void notifyThemeChanged()>
<com.android.systemui.plugins.statusbar.StatusBarStateController.StateListener: void onDozingChanged(boolean)>
<com.android.server.pm.DataLoaderManagerService: void onStart()>
<com.android.networkstack.tethering.TetheringConfiguration: boolean isWifiP2p(java.lang.String)>
<com.android.server.firewall.IntentFirewall: boolean checkIntent(com.android.server.firewall.IntentFirewall.FirewallIntentResolver,android.content.ComponentName,int,android.content.Intent,int,int,java.lang.String,int)>
<android.net.wifi.aware.WifiAwareAgentNetworkSpecifier: int hashCode()>
<com.android.systemui.plugins.VolumeDialogController: void addCallback(com.android.systemui.plugins.VolumeDialogController.Callbacks,android.os.Handler)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void setAutoRevokeWhitelisted(java.lang.String,boolean,int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setEntry(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.shared.system.QuickStepContract: boolean isGesturalMode(int)>
<android.net.TcpKeepalivePacketData: boolean equals(java.lang.Object)>
<com.android.systemui.qs.SlashDrawable: void setDrawableTintList(android.content.res.ColorStateList)>
<android.util.StatsEvent: android.util.StatsEvent.Builder newBuilder()>
<com.android.networkstack.tethering.OffloadHardwareInterface: void sendNetlinkMessage(android.os.NativeHandle,short,short)>
<android.database.SQLiteDatabasePerfTest: void testCursorIterateBackwards()>
<com.android.server.statusbar.StatusBarManagerService: void expandSettingsPanel(java.lang.String)>
<com.android.server.locksettings.LockSettingsService: void setSeparateProfileChallengeEnabled(int,boolean,com.android.internal.widget.LockscreenCredential)>
<com.android.server.pm.dex.ArtManagerService: void clearAppProfiles(com.android.server.pm.parsing.pkg.AndroidPackage)>
<android.net.wifi.ScanResult: boolean is5GHz()>
<com.android.gallery3d.exif.ExifInterface: boolean addDateTimeStampTag(int,long,java.util.TimeZone)>
<android.net.wifi.WifiNetworkAgentSpecifier: android.net.NetworkSpecifier redact()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView: com.android.systemui.statusbar.phone.NotificationPanelView getNotificationPanelView()>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void onDisplayAdded(int)>
<com.android.systemui.qs.external.TileLifecycleManager: void onClick(android.os.IBinder)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_toDisallowed_killsAppsInBothProfiles()>
<com.android.systemui.car.window.OverlayViewController: boolean hasRotaryFocus()>
<com.android.systemui.statusbar.phone.PanelBar: boolean isExpanded()>
<com.android.printspooler.ui.FusedPrintersProvider: void onAbandon()>
<com.android.systemui.doze.DozeService: void onDreamingStarted()>
<com.android.systemui.analytics.DataCollector: void setNotificationExpanded()>
<com.android.server.pm.UserManagerService: int[] getProfileIds(int,java.lang.String,boolean)>
<com.android.server.statusbar.StatusBarManagerService: void clickTile(android.content.ComponentName)>
<com.android.server.accessibility.gestures.TouchExplorer: void <init>(android.content.Context,com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.gestures.GestureManifold)>
<com.android.systemui.car.volume.CarVolumeDialogComponent: void <init>(android.content.Context,com.android.systemui.keyguard.KeyguardViewMediator,com.android.systemui.volume.VolumeDialogControllerImpl,com.android.systemui.car.CarServiceProvider)>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean canReceiveKeys()>
<com.android.gallery3d.glrenderer.GLES20Canvas: void drawMixed(com.android.gallery3d.glrenderer.BasicTexture,int,float,int,int,int,int)>
<com.android.systemui.recents.Recents: void appTransitionFinished(int)>
<com.android.systemui.statusbar.phone.NotificationsQuickSettingsContainer: void setQsExpanded(boolean)>
<android.net.wifi.WifiNetworkConnectionStatistics: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.notification.NotificationClicker.Builder: void <init>(com.android.systemui.bubbles.BubbleController,com.android.systemui.statusbar.notificatio.NotificationClickerLogger)>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: android.os.UserHandle getCallingUserHandle()>
<com.android.server.infra.ServiceNameResolver.NameResolverListener: void onNameResolved(int,java.lang.String,boolean)>
<com.android.server.NetworkManagementService: void addRoute(int,android.net.RouteInfo)>
<com.android.server.pm.KeySetManagerService: boolean packageIsSignedByExactlyLPr(java.lang.String,com.android.server.pm.KeySetHandle)>
<com.android.server.hdmi.SelectRequestBuffer.SelectRequest: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.lang.String getKey(java.lang.String)>
<com.android.preload.check.Util: java.util.Collection getBootDexFiles()>
<com.android.server.trust.TrustManagerService: boolean isEscrowTokenActive(long,int)>
<com.android.systemui.car.hvac.TemperatureTextView: void setDisplayInFahrenheit(boolean)>
<android.multiuser.UserLifecycleTests: void createAndStartUser()>
<com.android.systemui.qs.tiles.DndTile: android.content.Intent getLongClickIntent()>
<com.android.server.input.InputManagerService: void onDisplayRemoved(int)>
<com.android.systemui.shared.recents.utilities.AppTrace: void end(java.lang.String)>
<android.net.wifi.p2p.WifiP2pManager: void discoverServices(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.systemui.qs.carrier.QSCarrierGroupController: int getSlotIndex(int)>
<com.android.photos.views.BlockingGLTextureView: void render()>
<com.android.systemui.statusbar.StatusBarIconView: java.lang.String getSlot()>
<com.android.systemui.pip.tv.PipManager.Listener: void onPipResizeAboutToStart()>
<android.net.wifi.WifiManager.NetworkRequestUserSelectionCallback: void reject()>
<com.android.server.biometrics.BiometricServiceBase: boolean hasEnrolledBiometrics(int)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: com.android.server.pm.permission.PermissionSettings getPermissionSettings()>
<com.android.providers.settings.SettingsProvider: int getUserIdFromKey(int)>
<com.android.systemui.statusbar.phone.PanelViewController: boolean isClearAllVisible()>
<android.net.wifi.hotspot2.pps.Credential: void setCaCertificates(java.security.cert.X509Certificate[])>
<android.view.autofill.LoginTest: void testFocus_autofillUsernameOnly()>
<com.android.systemui.qs.tileimpl.QSTileView: void <init>(android.content.Context,com.android.systemui.plugins.qs.QSIconView)>
<com.android.server.infra.AbstractMasterSystemService: void onUnlockUser(int)>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.policy.NetworkController provideNetworkController(com.android.systemui.statusbar.policy.NetworkControllerImpl)>
<com.android.systemui.qs.QSPanel: com.android.systemui.qs.QSPanel.QSTileLayout createRegularTileLayout()>
<android.database.SQLiteDatabaseIoPerfTest: void tearDown()>
<com.android.server.accessibility.AccessibilityWindowManager: java.util.List getWindowListLocked(int)>
<com.android.systemui.statusbar.notification.collection.coalescer.GroupCoalescer: void setNotificationHandler(com.android.systemui.statusbar.notification.collection.coalescer.GroupCoalescer.BatchableNotificationHandler)>
<com.android.settingslib.AppItem: void <init>(int)>
<com.android.systemui.biometrics.AuthBiometricFaceView: void handleResetAfterError()>
<com.android.gallery3d.glrenderer.GLCanvas: void endRenderTarget()>
<com.android.settingslib.widget.CandidateInfo: void <init>(boolean)>
<com.android.gallery3d.glrenderer.BasicTexture: boolean hasBorder()>
<com.android.settingslib.net.NetworkCycleData.Builder: com.android.settingslib.net.NetworkCycleData.Builder setStartTime(long)>
<com.android.soundpicker.RingtonePickerActivity: void onStop()>
<com.android.server.firewall.IntentFirewall: boolean checkBroadcast(android.content.Intent,int,int,java.lang.String,int)>
<com.android.systemui.shared.system.ViewRootImplCompat: boolean isValid()>
<com.android.systemui.statusbar.notification.row.BindStage: void executeStage(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,com.android.systemui.statusbar.notification.row.BindStage.StageCallback)>
<com.android.systemui.statusbar.phone.StatusBar: com.android.systemui.statusbar.phone.BiometricUnlockController getBiometricUnlockController()>
<com.android.location.provider.GeofenceProvider: void onGeofenceHardwareChange(android.hardware.location.GeofenceHardware)>
<android.net.wifi.EasyConnectStatusCallback: void onConfiguratorSuccess(int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean isTrackingBlocked()>
<com.android.keyguard.KeyguardAbsKeyInputView: int getWrongPasswordStringId()>
<com.android.server.tv.tunerresourcemanager.FrontendResource: void addExclusiveGroupMemberFeIds(java.util.Collection)>
<com.android.settingslib.notification.EnableZenModeDialog: android.view.View getContentView()>
<android.net.wifi.WifiEnterpriseConfig: void setCaCertificates(java.security.cert.X509Certificate[])>
<com.android.systemui.keyboard.KeyboardUI: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.egg.neko.NekoTile: void onTileAdded()>
<com.android.server.testing.shadows.ShadowPerformUnifiedRestoreTask: android.content.pm.PackageInfo getPackage()>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: android.hardware.usb.UsbDevice.Builder toAndroid(com.android.server.usb.descriptors.UsbDescriptorParser)>
<com.android.settingslib.core.lifecycle.ObservableFragment: void onPause()>
<com.android.server.pm.permission.PermissionManagerService: int checkPermission(java.lang.String,java.lang.String,int)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canRetrieveWindowsLocked(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void updateBubbleButton()>
<com.android.systemui.plugins.VolumeDialog: void destroy()>
<com.android.keyguard.KeyguardUpdateMonitor: void setCredentialAttempted()>
<com.android.server.pm.dex.PackageDexUsage.PackageUseInfo: java.util.Set getLoadingPackages(java.lang.String)>
<android.net.wifi.p2p.WifiP2pManager: void removeServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.printservice.recommendation.util.Preconditions: float checkArgumentFinite(float,java.lang.String)>
<com.android.keyguard.AdminSecondaryLockScreenController: void hide()>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: int getDeviceRelease()>
<com.android.systemui.qs.QSAnimator: void <init>(com.android.systemui.plugins.qs.QS,com.android.systemui.qs.QuickQSPanel,com.android.systemui.qs.QSPanel)>
<com.android.systemui.statusbar.policy.SensorPrivacyController.OnSensorPrivacyChangedListener: void onSensorPrivacyChanged(boolean)>
<com.android.settingslib.NetworkPolicyEditor: void <init>(android.net.NetworkPolicyManager)>
<android.net.wifi.WifiScanner.ScanData: int getId()>
<com.android.systemui.statusbar.phone.FloatingRotationButton: void setOnClickListener(android.view.View.OnClickListener)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void onLayout(boolean,int,int,int,int)>
<com.android.systemui.classifier.FalsingManagerFake: void setShouldEnforceBouncer(boolean)>
<com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter: void onNotificationClicked(android.service.notification.StatusBarNotification,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.statusbar.notification.TextViewTransformState: void initFrom(android.view.View,com.android.systemui.statusbar.notification.TransformState.TransformInfo)>
<com.android.systemui.statusbar.notification.row.BindStage: java.lang.Object getStageParams(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void onClick(android.view.View)>
<javax.microedition.khronos.opengles.GL10: void glMaterialx(int,int,int)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void readyForKeyguardDone()>
<com.android.settingslib.fuelgauge.PowerWhitelistBackend: void <init>(android.content.Context)>
<com.android.systemui.settings.ToggleSliderView: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.database.TableHelper: android.database.TableHelper.CursorReader createReader(android.database.Cursor)>
<com.android.server.devicepolicy.DevicePolicyManagerService.DevicePolicyData: void <init>(int)>
<com.android.server.pm.permission.PermissionManagerService: java.lang.String getDefaultBrowser(int)>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat: void applyParams(com.android.systemui.shared.system.TransactionCompat,com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams)>
<com.android.settingslib.RestrictedLockUtils.EnforcedAdmin: void <init>(com.android.settingslib.RestrictedLockUtils.EnforcedAdmin)>
<com.android.systemui.statusbar.phone.StatusBar: void onSystemBarAppearanceChanged(int,int,com.android.internal.view.AppearanceRegion[],boolean)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void switchToAudioInput()>
<android.net.util.NetworkConstants: byte asByte(int)>
<com.android.systemui.statusbar.phone.NavigationBarView: void onScreenStateChanged(boolean)>
<com.android.systemui.statusbar.notification.row.RowInflaterTask: void inflate(android.content.Context,android.view.ViewGroup,com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.row.RowInflaterTask.RowInflationFinishedListener)>
<com.android.systemui.statusbar.notification.collection.GroupEntry: int getUntruncatedChildCount()>
<com.android.settingslib.core.instrumentation.VisibilityLoggerMixin: void onPause()>
<com.android.systemui.volume.VolumeDialogControllerImpl: int getAudioManagerStreamMaxVolume(int)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector textStartsWith(java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void <init>(android.content.Context)>
<com.android.printspooler.ui.PrintActivity: void onLoaderReset(android.content.Loader)>
<com.android.printspooler.renderer.IPdfRenderer: void renderPage(int,int,int,android.print.PrintAttributes,android.os.ParcelFileDescriptor)>
<com.android.networkstack.tethering.TetheringNotificationUpdater: void onActiveDataSubscriptionIdChanged(int)>
<com.android.printspooler.widget.PrintContentView: void onMeasure(int,int)>
<com.android.systemui.model.SysUiState: void commitUpdate(int)>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void onLayout(boolean,int,int,int,int)>
<com.google.android.startop.iorap.AppLaunchEvent.BaseWithActivityRecordData: void <init>(long,byte[])>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String[] getSplitCodePaths()>
<com.android.systemui.statusbar.policy.KeyguardStateController: boolean isShowing()>
<com.android.systemui.pip.phone.PipAccessibilityInteractionConnection: void findAccessibilityNodeInfoByAccessibilityId(long,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,android.os.Bundle)>
<com.android.systemui.power.PowerUI.WarningsUI: void showThermalShutdownWarning()>
<android.processor.view.inspector.InspectableClassModel: java.util.Optional getProperty(java.lang.String)>
<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser.SigningDetails getSigningDetails()>
<com.android.systemui.car.hvac.TemperatureView: void setDisplayInFahrenheit(boolean)>
<com.android.systemui.RegionInterceptingFrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: void setSnoozeListener(com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper)>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: void setWifiEnabled(boolean)>
<com.android.printservice.recommendation.util.MDNSFilteredDiscovery: void <init>(android.content.Context,java.util.Set,com.android.printservice.recommendation.util.MDNSFilteredDiscovery.PrinterFilter)>
<com.android.systemui.qs.QSPanel: void updatePadding()>
<android.net.wifi.hotspot2.PasspointConfiguration: java.lang.String getSubscriptionType()>
<com.android.systemui.statusbar.NotificationListener: void onNotificationPosted(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap)>
<com.android.keyguard.KeyguardPatternView: void showPromptReason(int)>
<com.android.systemui.statusbar.policy.SmartReplyView: boolean drawChild(android.graphics.Canvas,android.view.View,long)>
<com.android.systemui.statusbar.phone.StatusBarIconHolder: com.android.systemui.statusbar.phone.StatusBarIconHolder fromMobileIconState(com.android.systemui.statusbar.phone.StatusBarSignalPolicy.MobileIconState)>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: void notifyKeyguardTrustedChanged()>
<com.android.server.search.SearchManagerService: void <init>(android.content.Context)>
<com.android.systemui.statusbar.policy.SecurityController: boolean hasCACertInWorkProfile()>
<android.net.wifi.WifiEnterpriseConfig: void setClientKeyEntry(java.security.PrivateKey,java.security.cert.X509Certificate)>
<com.android.systemui.biometrics.AuthBiometricFaceView: int getDelayAfterAuthenticatedDurationMs()>
<com.android.server.SensorNotificationService: void onSensorChanged(android.hardware.SensorEvent)>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: int hashCode()>
<com.android.server.inputmethod.InputMethodManagerService: void removeImeSurface()>
<android.net.wifi.aware.IWifiAwareDiscoverySessionCallback: void onSessionConfigFail(int)>
<com.android.server.policy.PhoneWindowManager: boolean isTopLevelWindow(int)>
<com.android.systemui.statusbar.phone.NotificationGroupManager: void collapseAllGroups()>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void addNotificationEntryListener(com.android.systemui.statusbar.notification.NotificationEntryListener)>
<com.android.systemui.qs.QuickQSPanel: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.future.usb.UsbManager: com.android.future.usb.UsbAccessory[] getAccessoryList()>
<com.android.systemui.statusbar.phone.DozeServiceHost: void addCallback(com.android.systemui.doze.DozeHost.Callback)>
<com.android.systemui.statusbar.phone.HeadsUpAppearanceController: void onHeadsUpUnPinned(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.inputmethod.InputMethodManagerService: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
<com.android.server.inputmethod.InputMethodManagerInternal: void onCreateInlineSuggestionsRequest(int,com.android.internal.view.InlineSuggestionsRequestInfo,com.android.internal.view.IInlineSuggestionsRequestCallback)>
<com.android.systemui.util.NotificationChannels: void createAll(android.content.Context)>
<com.android.systemui.car.volume.CarVolumeItem: void setMax(int)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void <init>(android.content.Context)>
<com.android.systemui.qs.external.CustomTile: void startUnlockAndRun()>
<android.net.wifi.p2p.WifiP2pManager.DiscoveryStateListener: void onDiscoveryStateAvailable(int)>
<com.android.server.usb.UsbMidiDevice: com.android.server.usb.UsbMidiDevice create(android.content.Context,android.os.Bundle,int,int)>
<com.android.systemui.doze.DozeTriggers: void dump(java.io.PrintWriter)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceProvisioned()>
<com.android.systemui.statusbar.policy.ExtensionController.Extension: void destroy()>
<com.android.server.pm.UserManagerService: void setUserAccount(int,java.lang.String)>
<com.android.keyguard.KeyguardPatternView: void showMessage(java.lang.CharSequence,android.content.res.ColorStateList)>
<com.android.server.search.Searchables: android.content.ComponentName getGlobalSearchActivity()>
<android.perftests.SystemPerfTest: void testBenchmarkPauseResumeOverhead()>
<com.android.server.pm.PackageManagerService.Injector: com.android.server.pm.ComponentResolver getComponentResolver()>
<javax.obex.ApplicationParameter: byte[] getAPPparam()>
<com.android.printservice.recommendation.util.Preconditions: java.util.Collection checkCollectionElementsNotNull(java.util.Collection,java.lang.String)>
<com.android.systemui.statusbar.AlphaOptimizedImageView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.server.pm.parsing.library.PackageBackwardCompatibility: void modifySharedLibraries(com.android.server.pm.parsing.pkg.ParsedPackage,boolean)>
<com.android.packageinstaller.InstallInstalling: void onDestroy()>
<com.android.systemui.statusbar.notification.NotificationEntryListener: void onPostEntryUpdated(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.Watchdog.HandlerChecker: void resumeLocked(java.lang.String)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void onThemeChanged()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: boolean getForcePluginOpen()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isBlockingHelperShowing()>
<com.android.server.audio.AudioService: void setRingerModeExternal(int,java.lang.String)>
<com.android.systemui.statusbar.phone.DozeServiceHost: void prepareForGentleSleep(java.lang.Runnable)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean handleReportArcInitiate(com.android.server.hdmi.HdmiCecMessage)>
<android.net.ip.IpClientCallbacks: void setNeighborDiscoveryOffload(boolean)>
<com.android.settingslib.bluetooth.LocalBluetoothProfileManager: void addServiceListener(com.android.settingslib.bluetooth.LocalBluetoothProfileManager.ServiceListener)>
<com.android.server.pm.permission.PermissionsState.PermissionState: void <init>(com.android.server.pm.permission.PermissionsState.PermissionState)>
<com.android.gallery3d.glrenderer.GLCanvas: int uploadBuffer(java.nio.ByteBuffer)>
<com.android.systemui.statusbar.notification.MessagingImageTransformState: int getStartActualWidth()>
<javax.microedition.khronos.opengles.GL11: void glTexParameterfv(int,int,java.nio.FloatBuffer)>
<com.android.systemui.statusbar.notification.AnimatableProperty: int getAnimationEndTag()>
<android.net.wifi.IWifiManager: java.lang.String getCountryCode()>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest: android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest newInstance()>
<com.android.server.appbinding.AppBindingConstants: com.android.server.appbinding.AppBindingConstants initializeFromString(java.lang.String)>
<com.android.systemui.pip.PipTaskOrganizer: void onTaskAppeared(android.app.ActivityManager.RunningTaskInfo,android.view.SurfaceControl)>
<com.android.systemui.statusbar.phone.EdgeBackGestureHandler: void onNavigationModeChanged(int)>
<com.android.printspooler.ui.PageAdapter: int getItemViewType(int)>
<com.android.settingslib.drawer.Tile: boolean isIconTintable(android.content.Context)>
<android.graphics.perftests.PathPerfTest: void testIsRect()>
<lockedregioncodeinjection.LockTarget: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: void setCandidate(android.net.wifi.ScanResult)>
<com.android.systemui.appops.AppOpsControllerImpl: void setBGHandler(java.lang.Object)>
<android.net.wifi.WifiManager: android.net.wifi.WifiManager.WifiLock createWifiLock(int,java.lang.String)>
<com.android.systemui.plugins.VolumeDialogController: void setActiveStream(int)>
<com.android.server.pm.permission.PermissionSettings: void dumpPermissions(java.io.PrintWriter,java.lang.String,android.util.ArraySet,boolean,com.android.server.pm.DumpState)>
<com.android.server.tv.UinputBridge: boolean isTokenValid(android.os.IBinder)>
<com.android.systemui.statusbar.notification.AnimatableProperty: android.util.Property getProperty()>
<android.net.wifi.IWifiManager: void unregisterTrafficStateCallback(int)>
<com.android.systemui.bubbles.animation.StackAnimationController: void <init>(com.android.systemui.util.FloatingContentCoordinator,java.util.function.IntSupplier,java.lang.Runnable)>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: int getLidState()>
<com.android.server.voiceinteraction.DatabaseHelper: android.hardware.soundtrigger.SoundTrigger.KeyphraseSoundModel getKeyphraseSoundModel(java.lang.String,int,java.lang.String)>
<com.android.server.testing.shadows.ShadowEventLog.Entry: int hashCode()>
<android.text.StaticLayoutPerfTest: void testDraw_RandomText_Styled()>
<com.android.server.integrity.model.IntegrityCheckResult: java.util.List getMatchedRules()>
<com.android.settingslib.bluetooth.LocalBluetoothManager.BluetoothManagerCallback: void onBluetoothManagerInitialized(android.content.Context,com.android.settingslib.bluetooth.LocalBluetoothManager)>
<com.android.systemui.statusbar.phone.StatusBar: boolean hideKeyguard()>
<android.view.textclassifier.TextClassifierPerfTest: void setUp()>
<com.android.server.integrity.model.IntegrityCheckResult: com.android.server.integrity.model.IntegrityCheckResult allow(java.util.List)>
<com.android.systemui.statusbar.phone.RotationButton: void setOnClickListener(android.view.View.OnClickListener)>
<com.android.systemui.statusbar.phone.DarkIconDispatcherImpl: void addDarkReceiver(com.android.systemui.plugins.DarkIconDispatcher.DarkReceiver)>
<com.android.settingslib.drawer.SwitchController.MetaData: com.android.settingslib.drawer.SwitchController.MetaData setOrder(int)>
<com.android.server.usb.UsbPortManager: void simulateContaminantStatus(java.lang.String,boolean,com.android.internal.util.IndentingPrintWriter)>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onActivityUnpinned()>
<com.android.gallery3d.glrenderer.GLES20Canvas: void drawMixed(com.android.gallery3d.glrenderer.BasicTexture,int,float,android.graphics.RectF,android.graphics.RectF)>
<com.android.systemui.car.notification.NotificationPanelViewController: boolean shouldAnimateCollapsePanel()>
<com.android.server.accounts.AccountManagerService.Lifecycle: void onUnlockUser(int)>
<android.net.wifi.aware.WifiAwareManager: void attach(android.net.wifi.aware.AttachCallback,android.net.wifi.aware.IdentityChangedListener,android.os.Handler)>
<com.android.systemui.statusbar.phone.DarkIconDispatcherImpl: void removeDarkReceiver(android.widget.ImageView)>
<com.android.systemui.shared.tracing.FrameProtoTracer: boolean isEnabled()>
<com.android.systemui.statusbar.phone.StatusIconContainer: void removeIgnoredSlot(java.lang.String)>
<com.android.systemui.qs.tileimpl.QSTileImpl.DrawableIcon: void <init>(android.graphics.drawable.Drawable)>
<com.android.location.provider.ActivityRecognitionProvider: boolean enableActivityEvent(java.lang.String,int,long)>
<com.google.android.startop.iorap.RequestId: int describeContents()>
<com.android.systemui.pip.phone.PipManager: void hidePipMenu(java.lang.Runnable,java.lang.Runnable)>
<com.android.systemui.statusbar.phone.RegionSamplingHelper: void onViewAttachedToWindow(android.view.View)>
<com.android.systemui.shared.system.SystemGestureExclusionListenerCompat: void register()>
<com.android.keyguard.clock.BubbleClockController: void setDarkAmount(float)>
<com.android.settingslib.drawer.TileUtils: java.lang.String getTextFromUri(android.content.Context,android.net.Uri,java.util.Map,java.lang.String)>
<javax.microedition.khronos.opengles.GL11: void glGetPointerv(int,java.nio.Buffer[])>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void onDestroyView()>
<com.android.systemui.classifier.Classifier: java.lang.String getTag()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean isInContentBounds(float)>
<javax.microedition.khronos.opengles.GL10: void glColor4x(int,int,int,int)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: void clearDisableReasonCounter()>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: void <init>(android.content.Context,android.os.Handler,com.android.systemui.broadcast.BroadcastDispatcher,java.util.concurrent.Executor)>
<com.android.systemui.analytics.DataCollector: void onScreenOnFromTouch()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void animateTranslateNotification(float)>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: java.lang.String getNonEapInnerMethod()>
<android.net.wifi.WifiScanner.WifiChangeListener: void onQuiescence(android.net.wifi.ScanResult[])>
<com.android.settingslib.deviceinfo.AbstractBluetoothAddressPreferenceController: boolean isAvailable()>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean isRemoved()>
<com.android.systemui.statusbar.policy.LocationController.LocationChangeCallback: void onLocationSettingsChanged(boolean)>
<com.android.server.policy.WindowManagerPolicy.WindowState: int getBaseType()>
<com.android.commands.sm.Sm: void run(java.lang.String[])>
<com.android.server.pm.PackageManagerService: boolean runBackgroundDexoptJob(java.util.List)>
<com.android.systemui.glwallpaper.EglHelper: boolean hasEglSurface()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void resetCheckSnoozeLeavebehind()>
<android.net.wifi.WifiInfo: java.lang.String getPasspointProviderFriendlyName()>
<com.android.systemui.statusbar.notification.row.NotifRemoteViewCache: void clearCache(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.phone.KeyguardBouncer.BouncerExpansionCallback: void onStartingToShow()>
<com.android.server.pm.UserManagerService: void makeInitialized(int)>
<com.android.systemui.keyguard.KeyguardSliceProvider: void addPrimaryActionLocked(androidx.slice.builders.ListBuilder)>
<com.android.settingslib.graph.BatteryMeterDrawableBase: void setBatteryLevel(int)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: android.bluetooth.le.BluetoothLeScanner getBluetoothLeScanner()>
<com.android.server.pm.RestrictionsSet: android.os.Bundle getRestrictions(int)>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindScreenDecorations(com.android.systemui.ScreenDecorations)>
<com.android.systemui.assist.ui.InvocationLightsView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.bubbles.animation.AnimatableScaleMatrix: void setPivotY(float)>
<com.android.server.role.RoleUserState: int getVersion()>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: int size()>
<com.android.uiautomator.testrunner.UiAutomatorTestCase: com.android.uiautomator.testrunner.IAutomationSupport getAutomationSupport()>
<com.android.lock_checker.LockHook.LockChecker: int getNumDetected()>
<com.android.gallery3d.exif.ExifInterface: int[] getAllowedIfdsFromInfo(int)>
<com.android.settingslib.Utils: boolean isWifiOnly(android.content.Context)>
<android.net.wifi.IWifiManager: void registerSuggestionConnectionStatusListener(android.os.IBinder,android.net.wifi.ISuggestionConnectionStatusListener,int,java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.AlertingNotificationManager: void setCallback(com.android.systemui.statusbar.NotificationLifetimeExtender.NotificationSafeToRemoveCallback)>
<com.android.server.SystemServiceManager: void startUser(com.android.server.utils.TimingsTraceAndSlog,int)>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy: void setMobileDataEnabled(boolean)>
<com.android.systemui.volume.SafetyWarningDialog: void cleanUp()>
<com.android.systemui.media.MediaControlPanel: com.android.systemui.medi.PlayerViewHolder getView()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getAutoTimeEnabled(android.content.ComponentName)>
<com.android.systemui.util.leak.LeakReporter: void dumpLeak(int)>
<android.net.wifi.p2p.WifiP2pManager: void createGroup(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.settingslib.bluetooth.MapClientProfile: int getDrawableResource(android.bluetooth.BluetoothClass)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean isInVisibleLocation(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.keyguard.clock.ClockManager.ClockChangedListener: void onClockChanged(com.android.systemui.plugins.ClockPlugin)>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void grantDefaultPermissionsToDefaultBrowser(java.lang.String,int)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void onStateChanged(boolean,boolean)>
<com.android.gallery3d.common.BitmapUtils: android.graphics.Bitmap resizeBitmapByScale(android.graphics.Bitmap,float,boolean)>
<com.android.settingslib.wifi.WifiTracker: android.net.wifi.WifiManager getManager()>
<com.android.server.hdmi.HdmiCecController.NativeWrapper: void nativeSetOption(int,boolean)>
<com.android.startop.colorchanging.MainActivity: void goYellow(android.view.View)>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isExpansionChanging()>
<com.android.server.statusbar.StatusBarManagerService: void grantInlineReplyUriPermission(java.lang.String,android.net.Uri,android.os.UserHandle,java.lang.String)>
<com.android.systemui.volume.SegmentedButtons: android.widget.Button inflateButton()>
<com.android.settingslib.net.DataUsageController: android.telephony.TelephonyManager getTelephonyManager()>
<com.android.server.timezonedetector.TimeZoneDetectorCallbackImpl: void setDeviceTimeZone(java.lang.String)>
<com.android.server.audio.AudioService: void systemReady()>
<android.os.PackageManagerPerfTest: void testQueryIntentActivitiesWithFiltering()>
<com.android.server.TelephonyRegistry: void notifyCellLocation(android.telephony.CellIdentity)>
<com.android.systemui.statusbar.phone.StatusBar: void setOccluded(boolean)>
<com.android.systemui.assist.ui.PerimeterPathGuide: float getPerimeterPx()>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindScreenDecorations(com.android.systemui.ScreenDecorations)>
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>
<com.android.systemui.statusbar.CrossFadeHelper: void fadeIn(android.view.View,float,boolean)>
<com.android.localtransport.LocalTransport: android.content.Intent configurationIntent()>
<com.android.systemui.qs.tiles.ColorInversionTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.BooleanState,java.lang.Object)>
<com.android.server.usb.UsbService: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>
<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: boolean isDeviceLocked(int)>
<android.net.wifi.BatchedScanResult: void writeToParcel(android.os.Parcel,int)>
<com.android.server.om.PackageManagerHelper: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>
<com.android.backupconfirm.BackupRestoreConfirmation: void onSaveInstanceState(android.os.Bundle)>
<com.android.server.pm.dex.ArtManagerService: void <init>(android.content.Context,android.content.pm.IPackageManager,com.android.server.pm.Installer,java.lang.Object)>
<android.os.StatsDimensionsValue: void <init>(android.os.StatsDimensionsValueParcel)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeEnablerManager: void refresh(android.content.Context,androidx.preference.PreferenceFragment)>
<com.android.systemui.AutoReinflateContainer: void addInflateListener(com.android.systemui.AutoReinflateContainer.InflateListener)>
<com.android.server.pm.PackageManagerService: void setMimeGroup(java.lang.String,java.lang.String,java.util.List)>
<com.android.gallery3d.glrenderer.UploadedTexture: void setOpaque(boolean)>
<com.android.systemui.statusbar.phone.SystemUIDialog: void setShowForAllUsers(android.app.Dialog,boolean)>
<com.android.server.statusbar.StatusBarShellCommand: void <init>(com.android.server.statusbar.StatusBarManagerService,android.content.Context)>
<com.android.systemui.statusbar.notification.icon.IconPack: com.android.systemui.statusbar.StatusBarIconView getStatusBarIcon()>
<com.android.server.accessibility.AccessibilityManagerService: boolean notifyKeyEvent(android.view.KeyEvent,int)>
<com.android.systemui.statusbar.notification.row.AppOpsInfo: boolean needsFalsingProtection()>
<com.android.uiautomator.core.UiAutomationShellWrapper: void setRunAsMonkey(boolean)>
<com.android.systemui.pip.tv.PipControlButtonView: void setOnClickListener(android.view.View.OnClickListener)>
<com.android.systemui.statusbar.phone.PanelView: void setOnConfigurationChangedListener(com.android.systemui.statusbar.phone.PanelView.OnConfigurationChangedListener)>
<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>
<android.perftests.utils.TestPackageInstaller: void <init>(android.content.Context)>
<android.net.ip.IpServer: void <init>(java.lang.String,android.os.Looper,int,android.net.util.SharedLog,android.net.INetd,com.android.networkstack.tethering.BpfCoordinator,android.net.ip.IpServer.Callback,boolean,boolean,com.android.networkstack.tethering.PrivateAddressCoordinator,android.net.ip.IpServer.Dependencies)>
<com.android.server.statusbar.StatusBarManagerService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<com.android.server.IpSecService: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)>
<com.android.printservice.recommendation.plugin.mdnsFilter.VendorConfig: java.util.Collection getAllConfigs(android.content.Context)>
<com.android.server.accessibility.AbstractAccessibilityServiceConnection.SystemSupport: void setGestureDetectionPassthroughRegion(int,android.graphics.Region)>
<com.android.keyguard.KeyguardMessageArea: void onFinishInflate()>
<com.android.server.display.OverlayDisplayWindow.Listener: void onWindowDestroyed()>
<com.android.pacprocessor.PacService: void onCreate()>
<android.net.wifi.hotspot2.PasspointConfiguration: int getCarrierId()>
<com.android.server.pm.ApexManager: java.lang.String getApexModuleNameForPackageName(java.lang.String)>
<android.graphics.perftests.PathPerfTest: void testIsEmpty()>
<com.android.systemui.util.leak.LeakDetector: void <init>(com.android.systemui.util.leak.TrackedCollections,com.android.systemui.util.leak.TrackedGarbage,com.android.systemui.util.leak.TrackedObjects)>
<com.android.systemui.DessertCaseDream: void onDreamingStopped()>
<com.android.systemui.bubbles.animation.StackAnimationController: com.android.systemui.util.magnetictarget.MagnetizedObject getMagnetizedStack(com.android.systemui.util.magnetictarget.MagnetizedObject.MagneticTarget)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setQsExpanded(boolean)>
<com.android.server.ExtconUEventObserver: void onUEvent(com.android.server.ExtconUEventObserver.ExtconInfo,android.os.UEventObserver.UEvent)>
<com.android.systemui.util.Utils: boolean isHeadlessRemoteDisplayProvider(android.content.pm.PackageManager,java.lang.String)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeUtil: void saveInputMethodSubtypeList(androidx.preference.PreferenceFragment,android.content.ContentResolver,java.util.List,boolean)>
<com.android.systemui.pip.phone.PipTouchHandler: void setTouchGesture(com.android.systemui.pip.phone.PipTouchGesture)>
<com.android.server.security.VerityUtils: byte[] getVerityRootHash(java.lang.String)>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void notifyGroupChildAdded(com.android.systemui.statusbar.notification.row.ExpandableView)>
<com.android.systemui.assist.ui.CornerPathRenderer: android.graphics.Path getCornerPath(com.android.systemui.assist.ui.CornerPathRenderer.Corner)>
<com.android.settingslib.TwoTargetPreference: boolean shouldHideSecondTarget()>
<com.android.systemui.statusbar.phone.PanelViewController: void setExpandedFraction(float)>
<com.android.powermodel.component.ModemProfile.Builder: void setTxMa(float[])>
<com.android.systemui.qs.tileimpl.QSTileImpl: void resetStates()>
<android.net.TetheringManager.TetheringInterfaceRegexps: java.util.List getTetherableWifiRegexs()>
<com.android.systemui.statusbar.phone.BiometricUnlockController: void <init>(android.content.Context,com.android.systemui.statusbar.phone.DozeScrimController,com.android.systemui.keyguard.KeyguardViewMediator,com.android.systemui.statusbar.phone.ScrimController,com.android.systemui.statusbar.phone.StatusBar,com.android.systemui.statusbar.phone.ShadeController,com.android.systemui.statusbar.phone.NotificationShadeWindowController,com.android.systemui.statusbar.policy.KeyguardStateController,android.os.Handler,com.android.keyguard.KeyguardUpdateMonitor,android.content.res.Resources,com.android.systemui.statusbar.phon.KeyguardBypassController,com.android.systemui.statusbar.phone.DozeParameters,com.android.internal.logging.MetricsLogger,com.android.systemui.dump.DumpManager)>
<com.android.server.storage.CacheQuotaStrategy: android.util.Pair readFromXml(java.io.InputStream)>
<com.android.systemui.tuner.TunerSwitch: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.server.NetworkManagementService: void removeInterfaceFromNetwork(java.lang.String,int)>
<com.android.systemui.qs.external.TileServices: com.android.systemui.qs.external.TileServiceManager onCreateTileService(android.content.ComponentName,android.service.quicksettings.Tile,com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.server.accessibility.AbstractAccessibilityServiceConnection.SystemSupport: android.app.PendingIntent getPendingIntentActivity(android.content.Context,int,android.content.Intent,int)>
<com.android.systemui.volume.SafetyWarningDialog: void <init>(android.content.Context,android.media.AudioManager)>
<com.android.server.biometrics.AuthenticationClient: void onStop()>
<com.android.systemui.shared.system.InputChannelCompat: com.android.systemui.shared.system.InputChannelCompat.InputEventReceiver fromBundle(android.os.Bundle,java.lang.String,android.os.Looper,android.view.Choreographer,com.android.systemui.shared.system.InputChannelCompat.InputEventListener)>
<com.android.server.utils.DeviceConfigInterface: boolean getBoolean(java.lang.String,java.lang.String,boolean)>
<com.android.keyguard.KeyguardPasswordView: void afterTextChanged(android.text.Editable)>
<android.net.wifi.p2p.WifiP2pGroupList.GroupDeleteListener: void onDeleteGroup(int)>
<com.android.server.pm.permission.BasePermission: boolean isOEM()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onDetachedFromWindow()>
<com.android.server.devicepolicy.DevicePolicyManagerService.Lifecycle: void onStopUser(int)>
<com.android.media.remotedisplay.RemoteDisplay: void setName(java.lang.String)>
<com.android.systemui.statusbar.notification.collection.NotifPipeline: void setSections(java.util.List)>
<com.android.systemui.assist.ui.DisplayUtils: int convertDpToPx(float,android.content.Context)>
<com.android.systemui.util.concurrency.ExecutorImpl: java.lang.Runnable executeAtTime(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
<com.android.commands.hid.Event: int getVendorId()>
<com.android.server.biometrics.fingerprint.FingerprintConstants: java.lang.String tagAuthStartError()>
<android.net.wifi.WifiManager: void save(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager.ActionListener)>
<com.android.localtransport.LocalTransportParameters: void <init>(android.os.Handler,android.content.ContentResolver)>
<com.android.systemui.qs.PathInterpolatorBuilder: void <init>(float,float)>
<com.android.server.audio.AudioService: android.media.AudioDeviceAttributes getPreferredDeviceForStrategy(int)>
<com.android.systemui.recents.OverviewProxyService: void startConnectionToCurrentUser()>
<android.net.wifi.p2p.WifiP2pManager: void requestPersistentGroupInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.PersistentGroupInfoListener)>
<com.android.server.statusbar.StatusBarManagerInternal: void setTopAppHidesStatusBar(boolean)>
<com.android.systemui.statusbar.HeadsUpStatusBarView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.wallpapercropper.WallpaperCropActivity: android.graphics.Bitmap.CompressFormat convertExtensionToCompressFormat(java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getDoNotAskCredentialsOnBoot()>
<com.android.systemui.statusbar.notification.row.NotificationGutsManager: boolean bindGuts(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.MenuItem)>
<com.android.systemui.car.navigationbar.CarNavigationBarController: void registerTopBarTouchListener(android.view.View.OnTouchListener)>
<com.android.systemui.statusbar.phone.StatusBar: boolean isScreenFullyOff()>
<com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm: float getGapHeightForChild(com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm.SectionProvider,int,int,android.view.View,android.view.View)>
<com.android.systemui.statusbar.phone.PanelViewController: void setLaunchingNotification(boolean)>
<android.net.wifi.hotspot2.pps.HomeSp: boolean equals(java.lang.Object)>
<com.android.keyguard.clock.ImageClock: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.qs.QSSecurityFooter: java.lang.CharSequence getNetworkLoggingMessage(boolean)>
<com.android.settingslib.location.InjectedSetting: int hashCode()>
<android.net.wifi.p2p.WifiP2pDeviceList: void updateStatus(java.lang.String,int)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: boolean isTowardsMenu(float)>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void setChildLocationsChangedListener(com.android.systemui.statusbar.notification.logging.NotificationLogger.OnChildLocationsChangedListener)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: android.view.View getRightPreview()>
<com.android.systemui.statusbar.policy.FlashlightControllerImpl: void addCallback(com.android.systemui.statusbar.policy.FlashlightController.FlashlightListener)>
<android.view.textclassifier.TextClassificationManagerPerfTest: void tearDown()>
<com.android.systemui.bubbles.BubbleStackView: void subtractObscuredTouchableRegion(android.graphics.Region,android.view.View)>
<com.android.server.NetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean getUserCanSkipBouncer(int)>
<com.android.settingslib.wifi.AccessPoint: java.lang.CharSequence getSsid()>
<com.android.systemui.qs.tiles.ScreenRecordTile: int getMetricsCategory()>
<com.android.server.pm.Installer: long[] getExternalSize(java.lang.String,int,int,int[])>
<com.android.server.usb.UsbService: void onUnlockUser(int)>
<android.net.wifi.WifiManager.WifiConnectedNetworkScorer: void onStop(int)>
<com.android.keyguard.KeyguardHostView: boolean handleBackKey()>
<com.android.systemui.pip.phone.PipMotionHelper: void moveToBounds(android.graphics.Rect)>
<com.android.server.ConnectivityService: void startCaptivePortalAppInternal(android.net.Network,android.os.Bundle)>
<com.android.server.locksettings.SyntheticPasswordManager: byte[] scrypt(byte[],byte[],int,int,int,int)>
<com.google.android.startop.iorap.AppLaunchEvent.ActivityLaunchCancelled: void <init>(long,byte[])>
<com.android.systemui.statusbar.policy.UserSwitcherController.BaseUserAdapter: void switchTo(com.android.systemui.statusbar.policy.UserSwitcherController.UserRecord)>
<android.net.wifi.hotspot2.PasspointConfiguration: void setSubscriptionCreationTimeInMillis(long)>
<com.android.systemui.statusbar.policy.MobileSignalController: void setUserSetupComplete(boolean)>
<com.android.systemui.shared.system.InputConsumerController: boolean isRegistered()>
<com.android.settingslib.core.lifecycle.events.OnStart: void onStart()>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_sendsBroadcastToOtherProfile()>
<android.net.wifi.WifiManager: byte[] retrieveSoftApBackupData()>
<com.android.systemui.statusbar.policy.HeadsUpUtil: void setIsClickedHeadsUpNotification(android.view.View,boolean)>
<com.android.server.display.DisplayInfoProxy: void <init>(android.view.DisplayInfo)>
<com.android.server.PackageWatchdog: void scheduleCheckAndMitigateNativeCrashes()>
<com.android.gallery3d.exif.ExifInterface: void deleteTag(int)>
<com.android.systemui.statusbar.CommandQueue: void toggleKeyboardShortcutsMenu(int)>
<com.android.server.twilight.TwilightState: boolean isNight()>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void grantDefaultPermissionsToDefaultBrowser(java.lang.String,int)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone.AnimationStateHandler: void setHeadsUpGoingAwayAnimationsAllowed(boolean)>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: android.app.NotificationManager.Policy getConsolidatedPolicy()>
<com.android.systemui.plugins.GlobalActionsPanelPlugin.PanelViewController: void onDeviceLockStateChanged(boolean)>
<com.android.externalstorage.ExternalStorageProvider: android.net.Uri buildNotificationUri(java.lang.String)>
<com.android.systemui.qs.tileimpl.SlashImageView: com.android.systemui.qs.SlashDrawable getSlash()>
<com.android.server.DisplayThread: com.android.server.DisplayThread get()>
<com.android.systemui.tuner.LockscreenFragment.Holder: void <init>(android.view.View)>
<com.android.server.locksettings.recoverablekeystore.KeyStoreProxyImpl: void deleteEntry(java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotifRemoteViewCache: boolean hasCachedView(com.android.systemui.statusbar.notification.collection.NotificationEntry,int)>
<com.android.settingslib.media.InfoMediaManager: void <init>(android.content.Context,java.lang.String,android.app.Notification,com.android.settingslib.bluetooth.LocalBluetoothManager)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void notifyFullScreenIntentLaunched()>
<com.android.server.BatteryService: void onStart()>
<android.net.wifi.WifiScanner.OperationResult: int describeContents()>
<com.android.server.slice.PinnedSliceState: boolean unpin(java.lang.String,android.os.IBinder)>
<com.android.systemui.shared.system.ChoreographerCompat: android.view.Choreographer getSfInstance()>
<com.android.packageinstaller.PackageInstallerActivity: void onResume()>
<android.net.wifi.rtt.ResponderLocation: double getLongitude()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setChildrenContainer(com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer)>
<com.android.systemui.tuner.TunerFragment.TunerWarningFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.settingslib.bluetooth.HidProfile: java.lang.String toString()>
<com.android.systemui.egg.MLand: void stop()>
<android.net.wifi.aware.Characteristics: void writeToParcel(android.os.Parcel,int)>
<com.android.uiautomator.core.UiDevice: void runWatchers()>
<com.android.server.accessibility.AutoclickController: void clearEvents(int)>
<com.android.server.pm.UserTypeDetails: boolean hasBadge()>
<android.media.MediaParser.SeekPoint: int hashCode()>
<com.android.systemui.bubbles.BubbleData: void setSuppressionChangedListener(com.android.systemui.bubbles.BubbleController.NotificationSuppressionChangedListener)>
<android.net.wifi.EasyConnectStatusCallback: void onProgress(int)>
<com.android.server.compat.PlatformCompat: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>
<com.android.systemui.plugins.FalsingManager: android.net.Uri reportRejectedTouch()>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.statusbar.policy.RemoteInputView.RemoteEditText: boolean onKeyPreIme(int,android.view.KeyEvent)>
<com.android.systemui.util.wakelock.DelayedWakeLock: void <init>(android.os.Handler,com.android.systemui.util.wakelock.WakeLock)>
<com.android.server.usb.descriptors.UsbInterfaceDescriptor: byte getNumEndpoints()>
<android.media.MediaSession2.SessionCallback: void onCommandResult(android.media.MediaSession2,android.media.MediaSession2.ControllerInfo,java.lang.Object,android.media.Session2Command,android.media.Session2Command.Result)>
<com.android.systemui.qs.PathInterpolatorBuilder: android.view.animation.Interpolator getXInterpolator()>
<com.android.server.ConnectivityService: void setAvoidUnvalidated(android.net.Network)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setClipTopAmount(int)>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.SysuiStatusBarStateController providesSysuiStatusBarStateController(com.android.systemui.statusbar.StatusBarStateControllerImpl)>
<com.android.systemui.statusbar.phone.StatusBar: void toggleKeyboardShortcutsMenu(int)>
<com.android.systemui.statusbar.OperatorNameView: void onDetachedFromWindow()>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_userToSetInDifferentProfileGroupToCaller_setsAppOp()>
<com.android.server.SystemServiceManager: boolean isBootCompleted()>
<android.content.pm.PackageManagerInternal: boolean isResolveActivityComponent(android.content.pm.ComponentInfo)>
<com.android.keyguard.CarrierTextController: void <init>(android.content.Context,java.lang.CharSequence,boolean,boolean)>
<com.android.systemui.power.PowerUI.WarningsUI: void dump(java.io.PrintWriter)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: void <init>(android.graphics.drawable.Drawable,int,int,boolean,android.graphics.Color)>
<com.android.systemui.statusbar.phone.KeyguardPreviewContainer: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceController: boolean setLoggingEnabled(boolean)>
<com.android.systemui.shared.recents.model.Task: void dump(java.lang.String,java.io.PrintWriter)>
<com.android.systemui.statusbar.GestureRecorder.Gesture.TagRecord: void <init>(long,java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void onTrackingStopped(boolean)>
<android.net.TetheringManager: int untether(java.lang.String)>
<com.android.systemui.classifier.FalsingManagerFake: void onExpansionFromPulseStopped()>
<com.android.server.infra.ServiceNameResolver: java.lang.String getServiceName(int)>
<com.android.server.pm.PackageSetting: void dumpDebug(android.util.proto.ProtoOutputStream,long,java.util.List)>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindLatencyTester(com.android.systemui.LatencyTester)>
<com.android.systemui.egg.MLand: float frand()>
<com.android.settingslib.development.AbstractLogpersistPreferenceController: void enablePreference(boolean)>
<android.os.ParcelArrayPerfTest: java.util.Collection data()>
<com.android.systemui.qs.tiles.CastTile: android.content.Intent getLongClickIntent()>
<com.android.systemui.BatteryMeterView: void onPowerSaveChanged(boolean)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationCustomViewWrapper: int getCustomBackgroundColor()>
<com.android.systemui.statusbar.policy.AccessibilityController: void onTouchExplorationStateChanged(boolean)>
<android.net.wifi.WifiScanner.ParcelableScanData: void writeToParcel(android.os.Parcel,int)>
<com.android.keyguard.KeyguardUpdateMonitor: void <init>(android.content.Context,android.os.Looper,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.dump.DumpManager,com.android.systemui.util.RingerModeTracker,java.util.concurrent.Executor,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.internal.widget.LockPatternUtils)>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.gallery3d.util.IntArray: int removeLast()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setIsFullWidth(boolean)>
<com.android.server.audio.MediaFocusControl: void dump(java.io.PrintWriter)>
<com.android.printservice.recommendation.util.NsdResolveQueue: com.android.printservice.recommendation.util.NsdResolveQueue getInstance()>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void onShortPowerPressedGoHome()>
<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: void action(int,int,int,java.lang.String,int)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: int getContentHeight()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: byte[] getServerParams(int,int)>
<com.android.server.usb.UsbService: android.os.ParcelFileDescriptor getControlFd(long)>
<com.android.server.contentcapture.ContentCaptureManagerServiceShellCommand: int onCommand(java.lang.String)>
<com.android.systemui.statusbar.phone.StatusIconContainer: void onViewAdded(android.view.View)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceOwnerLockScreenInfo(android.content.ComponentName,java.lang.CharSequence)>
<com.android.systemui.qs.tiles.WifiTile: void handleClick()>
<com.android.server.audio.FocusRequester: void finalize()>
<com.android.soundpicker.RingtonePickerActivity: void onActivityResult(int,int,android.content.Intent)>
<com.android.server.slice.SliceProviderPermissions.SliceAuthority: java.util.Collection getPkgs()>
<com.android.server.autofill.RemoteInlineSuggestionRenderService: void renderSuggestion(android.service.autofill.IInlineSuggestionUiCallback,android.service.autofill.InlinePresentation,int,int,android.os.IBinder,int,int,int)>
<com.android.systemui.statusbar.phone.DozeServiceHost: void pulseWhileDozing(com.android.systemui.doze.DozeHost.PulseCallback,int)>
<com.android.server.pm.permission.PermissionsState: int grantRuntimePermission(com.android.server.pm.permission.BasePermission,int)>
<com.android.systemui.statusbar.phone.StatusIconContainer: void onMeasure(int,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: float getWakeUpHeight()>
<com.android.server.security.FileIntegrityService: void onStart()>
<com.android.systemui.qs.external.TileServices: void <init>(com.android.systemui.qs.QSTileHost,android.os.Looper,com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.server.testing.shadows.ShadowEventLog.Entry: void <init>(int,java.util.List)>
<com.android.networkstack.tethering.UpstreamNetworkMonitor: void stop()>
<com.android.systemui.qs.tileimpl.QSTileImpl: com.android.systemui.plugins.qs.QSTile.State getState()>
<com.android.systemui.qs.PseudoGridView.ViewGroupAdapterBridge: void onChanged()>
<com.android.server.pm.UserManagerService: boolean hasUserRestrictionOnAnyUser(java.lang.String)>
<com.android.settingslib.graph.BatteryMeterDrawableBase: boolean getPadding(android.graphics.Rect)>
<com.android.settingslib.fuelgauge.PowerWhitelistBackend: boolean isWhitelisted(java.lang.String)>
<com.android.systemui.plugins.PluginFragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)>
<android.os.StatsDimensionsValue: java.lang.String getStringValue()>
<com.android.systemui.bubbles.BubbleManageEducationView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.statusbar.notification.row.RowContentBindParams: int getDirtyContentViews()>
<com.android.systemui.statusbar.phone.StatusBar: void onBouncerPreHideAnimation()>
<com.android.keyguard.PasswordTextView: void setUserActivityListener(com.android.keyguard.PasswordTextView.UserActivityListener)>
<com.android.systemui.tuner.CustomListPreference.CustomListPreferenceDialogFragment: android.content.DialogInterface.OnClickListener getOnItemClickListener()>
<com.android.externalstorage.ExternalStorageProvider: android.provider.DocumentsContract.Path findDocumentPath(java.lang.String,java.lang.String)>
<com.android.server.PreloadsFileCacheExpirationJobService: boolean onStopJob(android.app.job.JobParameters)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int setGlobalPrivateDns(android.content.ComponentName,int,java.lang.String)>
<com.android.settingslib.datetime.ZoneGetter.ZoneGetterData: void <init>(android.content.Context)>
<com.android.server.ConnectivityService: byte[] getNetworkWatchlistConfigHash()>
<com.android.settingslib.core.instrumentation.LogWriter: void visible(android.content.Context,int,int,int)>
<android.content.pm.PackageManagerInternal: boolean isSuspendingAnyPackages(java.lang.String,int)>
<com.android.server.policy.PowerAction: void <init>(android.content.Context,com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs)>
<com.android.settingslib.wifi.WifiTracker: int getNumSavedNetworks()>
<android.net.wifi.IWifiManager: java.util.Map getAllMatchingFqdnsForScanResults(java.util.List)>
<com.android.server.pm.permission.PermissionSettings: void writePermissionTrees(org.xmlpull.v1.XmlSerializer)>
<com.android.printservice.recommendation.plugin.mopria.MopriaRecommendationPlugin: boolean matchesCriteria(java.lang.String,android.net.nsd.NsdServiceInfo)>
<com.android.server.pm.dex.DexManager: boolean auditUncompressedDexInApk(java.lang.String)>
<com.android.systemui.stackdivider.DividerView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.statusbar.phone.KeyguardEnvironmentImpl: boolean isDeviceProvisioned()>
<com.android.systemui.wm.DisplayLayout: int rotation()>
<com.android.keyguard.CarrierTextController.CarrierTextCallbackInfo: void <init>(java.lang.CharSequence,java.lang.CharSequence[],boolean,int[])>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: com.android.systemui.statusbar.phone.NotificationPanelViewController.MyOnHeadsUpChangedListener getOnHeadsUpChangedListener()>
<com.android.systemui.qs.external.TileLifecycleManager: void handleDestroy()>
<com.android.settingslib.drawer.DashboardCategory: int getTilesCount()>
<com.android.keyguard.KeyguardAbsKeyInputView: void showMessage(java.lang.CharSequence,android.content.res.ColorStateList)>
<android.net.wifi.aware.ConfigRequest: int describeContents()>
<com.android.systemui.statusbar.StatusBarIconView: void setIncreasedSize(boolean)>
<com.android.printservice.recommendation.PrintServicePlugin: int getName()>
<com.android.systemui.util.concurrency.ConcurrencyModule: android.os.Looper provideBgLooper()>
<com.android.server.slice.SliceFullAccessList: void removeGrant(java.lang.String,int)>
<com.android.server.hdmi.HdmiCecLocalDevice.PendingActionClearedCallback: void onCleared(com.android.server.hdmi.HdmiCecLocalDevice)>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator.ExpandAnimationParameters: int getTop()>
<com.android.systemui.statusbar.phone.NotificationGroupManager.NotificationGroup: java.lang.String toString()>
<com.android.settingslib.RestrictedSwitchPreference: void checkRestrictionAndSetDisabled(java.lang.String,int)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void setActualHeight(int,boolean)>
<com.android.systemui.screenrecord.RecordingController: void updateState(boolean)>
<com.android.server.slice.SliceClientPermissions: void onPersistableDirty(com.android.server.slice.DirtyTracker.Persistable)>
<com.android.systemui.shared.system.TransactionCompat: com.android.systemui.shared.system.TransactionCompat deferTransactionUntil(com.android.systemui.shared.system.SurfaceControlCompat,android.view.SurfaceControl,long)>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void onAttachedToWindow()>
<com.android.systemui.volume.MediaRouterWrapper: void unselect(int)>
<com.android.systemui.car.CarServiceProvider: void <init>(android.content.Context,android.car.Car)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.ParsedPackage setCoreApp(boolean)>
<com.android.server.testing.shadows.ShadowBinder: void reset()>
<com.android.server.tv.tunerresourcemanager.ClientProfile: void setPriority(int)>
<com.android.printspooler.ui.PageAdapter: long getItemId(int)>
<com.android.systemui.plugins.OverlayPlugin: void setup(android.view.View,android.view.View)>
<com.android.systemui.assist.AssistManager.UiController: void onInvocationProgress(int,float)>
<com.android.server.accessibility.gestures.TouchState: boolean isDragging()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: boolean getPanelExpanded()>
<com.android.server.display.BrightnessTracker: void onSwitchUser(int)>
<com.android.server.accessibility.AccessibilityManagerService.Lifecycle: void onStart()>
<android.perftests.utils.SettingsHelper: void syncDelete(android.content.Context,java.lang.String,java.lang.String)>
<android.net.wifi.WifiManager.NetworkRequestUserSelectionCallback: void select(android.net.wifi.WifiConfiguration)>
<com.android.server.ThreadPriorityBooster: void boost()>
<com.android.server.policy.PermissionPolicyInternal: void setOnInitializedCallback(com.android.server.policy.PermissionPolicyInternal.OnInitializedCallback)>
<com.android.systemui.statusbar.phone.NearestTouchFrame: void onMeasure(int,int)>
<com.android.server.updates.ConfigUpdateInstallReceiver: void writeUpdate(java.io.File,java.io.File,java.io.InputStream)>
<com.android.server.biometrics.LoggableMonitor: void logOnEnrolled(int,long,boolean)>
<com.android.server.accessibility.AccessibilityManagerService: boolean onGesture(android.accessibilityservice.AccessibilityGestureEvent)>
<com.android.server.people.data.ConversationInfo: boolean isDemoted()>
<com.android.systemui.statusbar.policy.BatteryController: boolean isReverseOn()>
<com.android.systemui.statusbar.notification.row.ExpandableView: int getClipTopAmount()>
<com.android.systemui.statusbar.notification.row.NotificationRowModule: com.android.systemui.statusbar.notification.row.NotificationRowContentBinder provideNotificationRowContentBinder(com.android.systemui.statusbar.notification.row.NotificationContentInflater)>
<com.android.settingslib.notification.EnableZenModeDialog: long getNextAlarm()>
<com.android.systemui.statusbar.notification.interruption.NotificationInterruptSuppressor: java.lang.String getName()>
<com.android.settingslib.applications.StorageStatsSource: com.android.settingslib.applications.StorageStatsSource.AppStorageStats getStatsForUid(java.lang.String,int)>
<com.android.settingslib.widget.RadioButtonPreference.OnClickListener: void onRadioButtonClicked(com.android.settingslib.widget.RadioButtonPreference)>
<com.android.settingslib.development.DevelopmentSettingsEnabler: void setDevelopmentSettingsEnabled(android.content.Context,boolean)>
<com.android.systemui.media.dialog.MediaOutputAdapter: void onBindViewHolder(com.android.systemui.media.dialog.MediaOutputBaseAdapter.MediaDeviceBaseViewHolder,int)>
<com.android.settingslib.NetworkPolicyEditor: android.net.NetworkPolicy getPolicyMaybeUnquoted(android.net.NetworkTemplate)>
<com.android.systemui.statusbar.CommandQueue: void <init>(android.content.Context,com.android.systemui.tracing.ProtoTracer)>
<com.android.server.contentcapture.ContentCaptureManagerServiceShellCommand: void onHelp()>
<com.android.systemui.statusbar.notification.TextViewTransformState: com.android.systemui.statusbar.notification.TextViewTransformState obtain()>
<com.android.permission.persistence.RuntimePermissionsState: int hashCode()>
<com.android.systemui.statusbar.phone.NavigationBarView: void setComponents(com.android.systemui.statusbar.phone.NotificationPanelViewController)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareLogging: void <init>(com.android.server.soundtrigger_middleware.ISoundTriggerMiddlewareInternal)>
<com.android.settingslib.wifi.TestAccessPointBuilder: com.android.settingslib.wifi.TestAccessPointBuilder setScoredNetworkCache(java.util.ArrayList)>
<com.android.systemui.statusbar.notification.MessagingLayoutTransformState: void setVisible(boolean,boolean)>
<android.net.wifi.WifiConfiguration: boolean isValidMacAddressForRandomization(android.net.MacAddress)>
<com.android.server.accessibility.magnification.MagnificationGestureHandler: void notifyShortcutTriggered()>
<com.android.systemui.plugins.qs.QSTile.Callback: void onToggleStateChanged(boolean)>
<com.android.settingslib.bluetooth.A2dpProfile: java.util.List getConnectableDevices()>
<com.android.systemui.volume.ZenModePanel: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.plugins.qs.QSTile.State: java.lang.StringBuilder toStringBuilder()>
<com.android.settingslib.media.MediaDeviceUtils: java.lang.String getId(android.bluetooth.BluetoothDevice)>
<com.android.packageinstaller.InstallStart: void onCreate(android.os.Bundle)>
<javax.obex.ClientSession: void <init>(javax.obex.ObexTransport)>
<com.android.photos.BitmapRegionTileSource.ResourceBitmapSource: android.graphics.Bitmap loadPreviewBitmap(android.graphics.BitmapFactory.Options)>
<com.android.systemui.statusbar.notification.FakeShadowView: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.TransformState: void resetTransformedView()>
<com.android.systemui.plugins.qs.DetailAdapter: int getMetricsCategory()>
<com.android.networkstack.tethering.TetheringConfiguration: boolean isNcm(java.lang.String)>
<com.android.server.tv.tunerresourcemanager.TunerResourceBasic: int getId()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setFinishScrollingCallback(java.lang.Runnable)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: float getMinAspectRatio()>
<com.android.systemui.wifi.WifiDebuggingActivity: void onWindowAttributesChanged(android.view.WindowManager.LayoutParams)>
<android.media.Session2Token: android.os.Bundle getExtras()>
<com.android.server.pm.PackageManagerService: android.content.pm.dex.IArtManager getArtManager()>
<com.android.server.NetworkScoreService.ScoringServiceConnection: android.net.NetworkScorerAppData getAppData()>
<com.android.settingslib.net.UidDetailProvider: boolean isKeyForUser(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getSecondaryUsers(android.content.ComponentName)>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglGetCurrentSurface(int)>
<com.android.systemui.globalactions.GlobalActionsDialog.MyPowerOptionsAdapter: int getCount()>
<android.net.wifi.util.HexEncoding: char[] encode(byte[],boolean)>
<com.android.systemui.statusbar.NotificationRemoteInputManager: void setUpWithCallback(com.android.systemui.statusbar.NotificationRemoteInputManager.Callback,com.android.systemui.statusbar.RemoteInputController.Delegate)>
<com.android.server.UserspaceRebootLogger: boolean shouldLogUserspaceRebootEvent()>
<com.android.server.usb.descriptors.Usb10ACInputTerminal: int getChannelConfig()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setExpandingEnabled(boolean)>
<com.android.localtransport.LocalTransport: int performFullBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor)>
<android.net.wifi.hotspot2.pps.UpdateParameter: void setServerUri(java.lang.String)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void notifyKeyguardAuthenticated(boolean)>
<com.android.server.locksettings.SyntheticPasswordManager: void <init>(android.content.Context,com.android.server.locksettings.LockSettingsStorage,android.os.UserManager,com.android.server.locksettings.PasswordSlotManager)>
<com.android.server.contentcapture.ContentCaptureManagerInternal: boolean isContentCaptureServiceForUser(int,int)>
<com.android.server.usb.UsbPortManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setFactoryTest(boolean)>
<com.android.gallery3d.common.Utils: int prevPowerOf2(int)>
<com.android.systemui.statusbar.CommandQueue: void appTransitionPending(int,boolean)>
<javax.microedition.khronos.opengles.GL10: void glGenTextures(int,int[],int)>
<javax.microedition.khronos.opengles.GL10: void glPushMatrix()>
<com.android.systemui.bubbles.BubbleController: void performBackPressIfNeeded()>
<com.android.systemui.qs.tiles.UserDetailView: void refreshAdapter()>
<com.android.systemui.bubbles.BubbleData: void setPendingIntentCancelledListener(com.android.systemui.bubbles.BubbleController.PendingIntentCanceledListener)>
<com.android.systemui.statusbar.phone.StatusBar: boolean inFullscreenMode()>
<com.android.server.usb.descriptors.UsbMSMidiInputJack: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<android.net.wifi.WifiInfo: boolean getMeteredHint()>
<com.android.server.pm.PackageManagerService: boolean setInstallLocation(int)>
<com.android.lock_checker.LockHook.LockChecker: void pre(java.lang.Object)>
<com.android.server.SensorPrivacyService: void onStart()>
<com.android.statementservice.retriever.Statement: com.android.statementservice.retriever.Statement create(com.android.statementservice.retriever.AbstractAsset,com.android.statementservice.retriever.AbstractAsset,com.android.statementservice.retriever.Relation)>
<android.net.wifi.WifiUsabilityStatsEntry: int getRssi()>
<com.android.server.pm.UserManagerService: boolean canHaveRestrictedProfile(int)>
<com.android.systemui.shared.system.RemoteAnimationTargetCompat: void <init>(android.view.RemoteAnimationTarget)>
<com.android.server.media.RemoteDisplayProviderWatcher: void start()>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: com.android.server.tv.tunerresourcemanager.LnbResource getLnbResource(int)>
<com.android.systemui.classifier.LengthCountClassifier: float getFalseTouchEvaluation(int,com.android.systemui.classifier.Stroke)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProvisioningAllowed(java.lang.String,java.lang.String)>
<android.net.wifi.hotspot2.pps.Policy.RoamingPartner: void setFqdnExactMatch(boolean)>
<com.android.server.usb.descriptors.Usb20ASGeneral: byte getTerminalLink()>
<com.android.server.display.whitebalance.DisplayWhiteBalanceSettings: void <init>(android.content.Context,android.os.Handler)>
<com.android.server.pm.AbstractStatsBase: void writeNow(java.lang.Object)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: int getNotGoneChildCount()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setMaxTopPadding(int)>
<com.android.systemui.statusbar.notification.row.HybridNotificationView: com.android.systemui.statusbar.notification.TransformState getCurrentState(int)>
<com.android.server.pm.PackageManagerService: int getMoveStatus(int)>
<com.android.server.ConnectivityService: android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int,java.lang.String)>
<com.android.settingslib.drawer.SwitchesProvider: boolean onCreate()>
<android.net.wifi.IWifiManager: void allowAutojoin(int,boolean)>
<com.android.systemui.pip.PipTaskOrganizer: void dump(java.io.PrintWriter,java.lang.String)>
<com.android.systemui.qs.QSHost: int indexOf(java.lang.String)>
<com.android.systemui.statusbar.phone.NavigationBarFragment: com.android.systemui.assist.AssistHandleViewController getAssistHandlerViewController()>
<com.android.uiautomator.core.UiObject: boolean isLongClickable()>
<com.android.dynsystem.SparseInputStream: int read(byte[])>
<com.android.systemui.wm.DisplayController: void removeDisplayChangingController(com.android.systemui.wm.DisplayChangeController.OnDisplayChangingListener)>
<com.android.settingslib.wifi.AccessPoint: java.lang.String getSpeedLabel(android.content.Context,android.net.ScoredNetwork,int)>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void onZenChanged(int)>
<com.android.server.RescueParty.RescuePartyObserver: boolean isPersistent()>
<com.android.systemui.statusbar.CommandQueue: void onDisplayAdded(int)>
<com.android.systemui.statusbar.notification.TransformState: void transformViewVerticalFrom(com.android.systemui.statusbar.notification.TransformState,com.android.systemui.statusbar.ViewTransformationHelper.CustomTransformation,float)>
<com.android.server.AttributeCache: void <init>(android.content.Context)>
<com.android.systemui.statusbar.phone.StatusBar: boolean isKeyguardShowing()>
<com.android.printspooler.ui.SelectPrinterActivity: void onStop()>
<com.android.server.audio.AudioService: int removeUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
<com.android.server.biometrics.fingerprint.FingerprintAuthenticator: void resetLockout(byte[])>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getSubjectMatch()>
<com.android.systemui.statusbar.policy.Clock: void setClockVisibilityByPolicy(boolean)>
<com.android.systemui.car.window.OverlayViewController: void inflate(android.view.ViewGroup)>
<com.android.systemui.media.MediaProjectionPermissionActivity: void onDestroy()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void showWirelessChargingAnimation(int)>
<com.android.systemui.statusbar.phone.ContextualButton: void <init>(int,int)>
<com.android.server.om.DumpState: void setVerbose(boolean)>
<com.android.server.vr.VrManagerService: void onStartUser(int)>
<com.android.settingslib.bluetooth.CachedBluetoothDeviceManager: void onBluetoothStateChanged(int)>
<com.android.server.infra.AbstractMasterSystemService: com.android.server.infra.AbstractPerUserSystemService newServiceLocked(int,boolean)>
<com.android.systemui.util.sensors.AsyncSensorManager: int configureDirectChannelImpl(android.hardware.SensorDirectChannel,android.hardware.Sensor,int)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationCustomViewWrapper: void setLegacy(boolean)>
<com.android.server.locksettings.recoverablekeystore.WrappedKey: byte[] getNonce()>
<com.android.server.usb.descriptors.UsbDescriptorParser: android.hardware.usb.UsbDevice.Builder toAndroidUsbDeviceBuilder()>
<com.android.systemui.classifier.AnglesClassifier: void <init>(com.android.systemui.classifier.ClassifierData)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void applyExpandAnimationParams(com.android.systemui.statusbar.notification.ActivityLaunchAnimator.ExpandAnimationParameters)>
<com.android.systemui.keyguard.KeyguardViewMediator: void onScreenTurningOn(com.android.internal.policy.IKeyguardDrawnCallback)>
<com.android.keyguard.ViewMediatorCallback: void keyguardGone()>
<com.android.settingslib.dream.DreamBackend: int getWhenToDreamSetting()>
<com.android.server.input.InputManagerService: void setInputFilter(android.view.IInputFilter)>
<com.android.server.pm.Policy: java.util.Map getInnerPackages()>
<com.android.systemui.qs.QuickStatusBarHeader: void setCallback(com.android.systemui.qs.QSDetail.Callback)>
<com.android.systemui.AutoReinflateContainer: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onEmergencyCallAction()>
<com.android.keyguard.KeyguardHostView: void <init>(android.content.Context)>
<android.net.wifi.RttManager.RttParams: java.lang.String toString()>
<com.android.printspooler.model.PageContentRepository.PageContentProvider: void <init>(int,android.view.View)>
<com.android.server.display.BrightnessTracker: void dump(java.io.PrintWriter)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void topAppWindowChanged(int,boolean,boolean)>
<android.media.MediaSession2Service: java.util.List getSessions()>
<com.android.systemui.pip.PipUI: void setPinnedStackAnimationListener(com.android.systemui.shared.recents.IPinnedStackAnimationListener)>
<com.android.systemui.statusbar.phone.NavigationBarEdgePanel: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void scheduleReadDefaultPermissionExceptions()>
<com.android.gallery3d.glrenderer.GLES20Canvas: void clearBuffer(float[])>
<com.android.settingslib.utils.AsyncLoader: void deliverResult(java.lang.Object)>
<com.android.server.adb.AdbDebuggingManager: boolean isAdbWifiEnabled()>
<com.android.server.policy.WindowManagerPolicy: void applyKeyguardPolicyLw(com.android.server.policy.WindowManagerPolicy.WindowState,com.android.server.policy.WindowManagerPolicy.WindowState)>
<com.android.server.pm.PackageManagerService.Injector: com.android.server.pm.permission.PermissionManagerServiceInternal getPermissionManagerServiceInternal()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onPanelTrackingStopped()>
<com.android.systemui.statusbar.phone.NavigationBarView: com.android.systemui.statusbar.phone.ButtonDispatcher getImeSwitchButton()>
<android.util.ArraySetPerfTest: void testRemoveIf_Small_RemoveNothing()>
<com.android.server.biometrics.BiometricServiceBase: boolean checkAppOps(int,java.lang.String)>
<com.android.systemui.screenshot.ScreenshotServiceErrorReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.qs.QSTileRevealController: void setExpansion(float)>
<com.android.systemui.settings.ToggleSliderView: void setValue(int)>
<com.android.shell.BugreportStorageProvider: boolean onCreate()>
<com.android.systemui.shared.recents.model.Task: void <init>(com.android.systemui.shared.recents.model.Task.TaskKey,android.graphics.drawable.Drawable,com.android.systemui.shared.recents.model.ThumbnailData,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,boolean,android.app.ActivityManager.TaskDescription,int,android.content.ComponentName,boolean)>
<com.android.systemui.biometrics.AuthBiometricView: void setPanelController(com.android.systemui.biometrics.AuthPanelController)>
<com.android.systemui.shared.system.SystemGestureExclusionListenerCompat: void onExclusionChanged(android.graphics.Region,android.graphics.Region)>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: java.util.List newInstance(java.lang.String,byte[])>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: int adjustDisableFlags(int)>
<com.android.server.accounts.AccountManagerBackupHelper: void restoreAccountAccessPermissions(byte[],int)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: boolean isBluetoothAudioActive()>
<com.android.systemui.egg.MLandActivity: void onResume()>
<com.android.keyguard.clock.BubbleClockController: void <init>(android.content.res.Resources,android.view.LayoutInflater,com.android.systemui.colorextraction.SysuiColorExtractor)>
<com.android.server.appop.AppOpsService: void setHistoryParameters(int,long,int)>
<com.android.systemui.util.LifecycleFragment: void onStart()>
<com.android.server.pm.PackageManagerService: boolean updateIntentVerificationStatus(java.lang.String,int,int)>
<com.android.systemui.qs.external.TileLifecycleManager: boolean hasPendingClick()>
<javax.obex.ServerOperation: boolean isValidBody()>
<com.android.systemui.statusbar.notification.AnimatableProperty: com.android.systemui.statusbar.notification.AnimatableProperty from(java.lang.String,java.util.function.BiConsumer,java.util.function.Function,int,int,int)>
<com.android.systemui.qs.QSFragment: void setHeightOverride(int)>
<com.android.systemui.stackdivider.DividerView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.net.util.BaseNetdUnsolicitedEventListener: void onInterfaceClassActivityChanged(boolean,int,long,int)>
<com.android.server.accessibility.EventStreamTransformation: void onDestroy()>
<com.android.photos.SimpleBitmapRegionDecoder: android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory.Options)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void setGlobalActionsVisible(boolean)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void startPreHideAnimation(java.lang.Runnable)>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: void addCallback(com.android.systemui.statusbar.policy.CastController.Callback)>
<android.net.wifi.rtt.RangingResult: int getNumAttemptedMeasurements()>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void onStateChanged(int)>
<com.android.systemui.statusbar.KeyboardShortcutAppItemLayout: void <init>(android.content.Context)>
<com.android.systemui.car.notification.NotificationPanelViewController: void <init>(android.content.Context,android.content.res.Resources,com.android.systemui.car.window.OverlayViewGlobalStateController,com.android.systemui.statusbar.FlingAnimationUtils.Builder,java.util.concurrent.Executor,com.android.systemui.car.CarServiceProvider,com.android.systemui.car.CarDeviceProvisionedController,com.android.internal.statusbar.IStatusBarService,com.android.systemui.statusbar.CommandQueue,com.android.car.notification.NotificationDataManager,com.android.car.notification.CarUxRestrictionManagerWrapper,com.android.car.notification.CarNotificationListener,com.android.car.notification.NotificationClickHandlerFactory,com.android.systemui.car.notification.NotificationVisibilityLogger,com.android.systemui.plugins.statusbar.StatusBarStateController)>
<com.android.server.biometrics.AuthenticationClient: int statsAction()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setContainingNotification(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.pm.Policy.PolicyBuilder: com.android.server.pm.Policy build()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationTemplateViewWrapper: void updateTransformedTypes()>
<com.android.systemui.pip.PipBoundsHandler: void <init>(android.content.Context,com.android.systemui.pip.PipSnapAlgorithm,com.android.systemui.wm.DisplayController)>
<android.net.util.TetheringUtils.ForwardedStats: android.net.util.TetheringUtils.ForwardedStats subtract(android.net.util.TetheringUtils.ForwardedStats)>
<android.net.ITetheringEventCallback: void onCallbackStarted(android.net.TetheringCallbackStartedParcel)>
<com.android.server.compat.PlatformCompat: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.settingslib.RestrictedLockUtils.EnforcedAdmin: java.lang.String toString()>
<com.android.systemui.dock.DockManagerImpl: boolean isDocked()>
<com.android.settingslib.wifi.AccessPoint: java.lang.String getSummary(android.content.Context,java.lang.String,android.net.NetworkInfo.DetailedState,boolean,java.lang.String)>
<com.android.systemui.pip.tv.PipManager.Listener: void onShowPipMenu()>
<com.android.server.pm.PackageManagerService: android.content.pm.ChangedPackages getChangedPackages(int,int)>
<com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry: void setEntry(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.volume.CaptionsToggleImageButton.ConfirmedTapListener: void onConfirmedTap()>
<com.android.systemui.statusbar.phone.ObservableScrollView: void setTouchEnabled(boolean)>
<com.android.systemui.qs.tiles.UserTile: com.android.systemui.plugins.qs.QSTile.State newTileState()>
<android.net.wifi.RttManager.ParcelableRttResults: int describeContents()>
<com.android.systemui.qs.tiles.UserTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.statusbar.policy.UserSwitcherController,com.android.systemui.statusbar.policy.UserInfoController)>
<com.android.server.pm.UserRestrictionsUtils: boolean areEqual(android.os.Bundle,android.os.Bundle)>
<com.android.settingslib.net.ChartDataLoader: void onStartLoading()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean isInSettings()>
<com.android.server.accessibility.AbstractAccessibilityServiceConnection.SystemSupport: void setTouchExplorationPassthroughRegion(int,android.graphics.Region)>
<com.android.server.inputmethod.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.ParceledListSlice retrievePreRebootSecurityLogs(android.content.ComponentName)>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: void onFinishInflate()>
<com.android.systemui.recents.OverviewProxyService.OverviewProxyListener: void onToggleRecentApps()>
<com.android.media.remotedisplay.RemoteDisplayProvider: void onDiscoveryModeChanged(int)>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindSystemActions(com.android.systemui.accessibility.SystemActions)>
<com.android.settingslib.fuelgauge.BatterySaverUtils: void setAutoBatterySaverTriggerLevel(android.content.Context,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setHeadsUpGoingAwayAnimationsAllowed(boolean)>
<android.os.TracePerfTest: void testBeginEndSection()>
<com.android.systemui.pip.PipUI: void setPinnedStackAnimationType(int)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: void releaseFrontendInternal(com.android.server.tv.tunerresourcemanager.FrontendResource)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isRowRemoved()>
<com.android.server.stats.StatsCompanionService: void cancelAnomalyAlarm()>
<com.android.server.locksettings.LockSettingsStorage.Callback: void initialize(android.database.sqlite.SQLiteDatabase)>
<android.util.StatsLog: boolean logStop(int)>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: boolean isLaunchTransitionFadingAway()>
<com.android.wallpapercropper.CropView: void <init>(android.content.Context)>
<com.android.server.usb.descriptors.UsbConfigDescriptor: int getTotalLength()>
<com.android.systemui.classifier.FalsingManagerFake: void onNotificatonStartDraggingDown()>
<com.android.systemui.log.dagger.LogModule: com.android.systemui.log.LogBuffer provideDozeLogBuffer(com.android.systemui.log.LogcatEchoTracker,com.android.systemui.dump.DumpManager)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: java.lang.String describe(int)>
<android.net.util.BaseNetdUnsolicitedEventListener: void onInterfaceRemoved(java.lang.String)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: java.lang.String getAddress()>
<com.android.systemui.statusbar.phone.FloatingRotationButton: android.view.View getCurrentView()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: int getIntrinsicPadding()>
<com.android.systemui.ExpandHelper.Callback: void expansionStateChanged(boolean)>
<android.content.pm.PackageManagerInternal: boolean isOnlyCoreApps()>
<com.android.systemui.statusbar.phone.PanelViewController: boolean isDozing()>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout: void addView(android.view.View,int,android.view.ViewGroup.LayoutParams)>
<com.android.server.hdmi.HdmiControlService: void onStart()>
<com.android.settingslib.utils.AsyncLoader: void onDiscardResult(java.lang.Object)>
<com.android.server.slice.PinnedSliceState: void <init>(com.android.server.slice.SliceManagerService,android.net.Uri,java.lang.String)>
<com.android.server.trust.TrustArchive: void logManagingTrust(int,android.content.ComponentName,boolean)>
<com.android.systemui.plugins.qs.QSTile: void setTileSpec(java.lang.String)>
<com.android.settingslib.development.AbstractLogpersistPreferenceController: java.lang.String getPreferenceKey()>
<com.android.settingslib.bluetooth.HidDeviceProfile: boolean setEnabled(android.bluetooth.BluetoothDevice,boolean)>
<com.android.systemui.ScreenDecorations.DisplayCutoutView: void setColor(int)>
<com.android.location.provider.LocationProviderBase: void onDisable()>
<com.android.systemui.recents.RecentsImplementation: void onAppTransitionFinished()>
<com.android.packageinstaller.InstallFailed.OutOfSpaceDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.server.attention.AttentionManagerService.AttentionHandler: void handleMessage(android.os.Message)>
<com.android.server.policy.SoftRestrictedPermissionPolicy: com.android.server.policy.SoftRestrictedPermissionPolicy forPermission(android.content.Context,android.content.pm.ApplicationInfo,com.android.server.pm.parsing.pkg.AndroidPackage,android.os.UserHandle,java.lang.String)>
<com.android.systemui.statusbar.notification.logging.NotificationLogger: void setUpWithContainer(com.android.systemui.statusbar.notification.stack.NotificationListContainer)>
<com.android.systemui.qs.tileimpl.QSTileBaseView: android.view.View getBgCircle()>
<com.android.server.usb.UsbService: void clearDefaults(java.lang.String,int)>
<com.android.server.search.SearchManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.location.provider.GeofenceProvider: android.os.IBinder getBinder()>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onTrustGrantedWithFlags(int,int)>
<com.android.server.input.InputManagerService: void requestPointerCapture(android.os.IBinder,boolean)>
<com.android.systemui.statusbar.phone.ShadeControllerImpl: void runPostCollapseRunnables()>
<com.android.systemui.statusbar.phone.HeadsUpAppearanceController: void <init>(com.android.systemui.statusbar.phone.NotificationIconAreaController,com.android.systemui.statusbar.phone.HeadsUpManagerPhone,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.phon.KeyguardBypassController,com.android.systemui.statusbar.notification.NotificationWakeUpCoordinator,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.statusbar.CommandQueue,com.android.systemui.statusbar.HeadsUpStatusBarView,com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout,com.android.systemui.statusbar.phone.NotificationPanelViewController,android.view.View,android.view.View,android.view.View)>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindsSizeCompatModeActivityController(com.android.systemui.SizeCompatModeActivityController)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean onKeyLongPress(int,android.view.KeyEvent)>
<com.android.server.infra.AbstractPerUserSystemService: int getTargedSdkLocked()>
<com.android.systemui.egg.MLand: void showSplash()>
<com.android.systemui.statusbar.phone.StatusBarIconList: void removeIcon(int,int)>
<com.android.server.pm.parsing.pkg.PackageImpl: boolean isVendor()>
<com.android.systemui.classifier.SpeedEvaluator: float evaluate(float)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout: void <init>(android.content.Context)>
<android.net.ip.IpClientCallbacks: void onLinkPropertiesChange(android.net.LinkProperties)>
<com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback: void authenticate(int,int,android.content.IntentSender,android.os.Bundle,boolean)>
<com.android.systemui.statusbar.policy.FlashlightControllerImpl: boolean hasFlashlight()>
<com.android.server.display.BrightnessTracker: void persistBrightnessTrackerState()>
<com.android.server.ConnectivityService: void reportInetCondition(int,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setUninstallBlocked(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>
<com.android.localtransport.LocalTransport: int getRestoreData(android.os.ParcelFileDescriptor)>
<com.android.server.pm.permission.PermissionsState: void setMissing(boolean,int)>
<com.android.server.policy.PhoneWindowManager: void updateSettings()>
<com.android.powermodel.component.CpuProfile.Builder: void setIdleMa(float)>
<com.android.server.pm.UserRestrictionsUtils: boolean isLocal(int,java.lang.String)>
<com.android.server.slice.SliceProviderPermissions: void <init>(com.android.server.slice.SlicePermissionManager.PkgUser,com.android.server.slice.DirtyTracker)>
<com.android.server.pm.permission.PermissionSettings: void addAppOpPackage(java.lang.String,java.lang.String)>
<com.android.settingslib.location.SettingsInjector.Setting: void startService()>
<com.android.systemui.tuner.PowerNotificationControlsFragment: void onPause()>
<com.android.systemui.statusbar.notification.NotificationClicker: void onClick(android.view.View)>
<com.android.systemui.statusbar.notification.collection.ListEntry: com.android.systemui.statusbar.notification.collection.GroupEntry getParent()>
<android.media.MediaParser.OutputConsumer: void onSampleCompleted(int,long,int,int,int,android.media.MediaCodec.CryptoInfo)>
<com.android.server.timedetector.TimeDetectorService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isAllowClearUserData()>
<com.android.server.biometrics.LoggableMonitor: void logOnError(android.content.Context,int,int,int)>
<android.graphics.perftests.VectorDrawablePerfTest: void testBitmapDrawPerf()>
<com.android.server.pm.ShortcutBitmapSaver: void removeIcon(android.content.pm.ShortcutInfo)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void setIconAccessibilityLiveRegion(java.lang.String,int)>
<com.android.systemui.statusbar.policy.CastController: void setCurrentUserId(int)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void resetAllRuntimePermissions(int)>
<com.android.server.SensorNotificationService: void onProviderDisabled(java.lang.String)>
<com.android.systemui.util.sensors.AsyncSensorManager: boolean registerPluginListener(com.android.systemui.plugins.SensorManagerPlugin.Sensor,com.android.systemui.plugins.SensorManagerPlugin.SensorEventListener)>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: java.util.ListIterator listIterator()>
<com.android.systemui.car.notification.NotificationPanelViewController: int getFocusAreaViewId()>
<com.android.systemui.statusbar.phone.PanelBar: void onClosingFinished()>
<com.android.systemui.shared.system.WindowCallbacksCompat: void onPostDraw(android.graphics.Canvas)>
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getAccessibilityShortcutTargets(int)>
<javax.microedition.khronos.opengles.GL10: void glDeleteTextures(int,java.nio.IntBuffer)>
<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse checkCredential(com.android.internal.widget.LockscreenCredential,int,com.android.internal.widget.ICheckCredentialProgressCallback)>
<com.android.settingslib.volume.Util: boolean setText(android.widget.TextView,java.lang.CharSequence)>
<com.android.server.usb.descriptors.Usb20ASGeneral: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.server.policy.WindowManagerPolicy.WindowState: com.android.server.wm.WindowFrames getWindowFrames()>
<com.android.server.NetworkScorerAppManager.SettingsFacade: boolean putInt(android.content.Context,java.lang.String,int)>
<com.android.server.audio.AudioService: void disableRingtoneSync(int)>
<com.android.systemui.media.RingtonePlayer: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.plugins.qs.QS: void notifyCustomizeChanged()>
<com.android.server.audio.AudioService: int getVolumeIndexForAttributes(android.media.AudioAttributes)>
<com.android.carrierdefaultapp.ProvisionObserver: boolean onStopJob(android.app.job.JobParameters)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void showAppOpsIcons(android.util.ArraySet)>
<com.android.settingslib.schedulesprovider.SchedulesProvider: boolean onCreate()>
<com.android.systemui.car.notification.BottomNotificationPanelViewMediator: void registerListeners()>
<android.net.TetheringManager: int tether(java.lang.String)>
<com.android.server.lights.LightsService: void onBootPhase(int)>
<com.android.systemui.statusbar.phone.KeyguardBouncer: boolean isSecure()>
<com.android.systemui.statusbar.policy.SecurityController: boolean hasWorkProfile()>
<com.android.server.pm.ComponentResolver: android.content.pm.parsing.component.ParsedActivity getActivity(android.content.ComponentName)>
<com.android.server.biometrics.iris.IrisService: com.android.server.biometrics.BiometricServiceBase.DaemonWrapper getDaemonWrapper()>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback.ActiveWakeLock: boolean isHeld()>
<com.android.server.pm.PackageManagerService: void freeStorage(java.lang.String,long,int)>
<com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper: void snooze(android.service.notification.StatusBarNotification,com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper.SnoozeOption)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationTemplateViewWrapper: boolean shouldClipToRounding(boolean,boolean)>
<com.android.server.audio.AudioService.VolumeController: boolean isSameBinder(android.media.IVolumeController)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setKeyguardGoingAway(boolean)>
<com.android.server.autofill.RemoteInlineSuggestionRenderService: void handleOnConnectedStateChanged(boolean)>
<com.android.systemui.shared.system.WindowManagerWrapper: boolean hasSoftNavigationBar(int)>
<com.android.settingslib.inputmethod.InputMethodSettingValuesWrapper: void refreshAllInputMethodAndSubtypes()>
<com.android.server.pm.UserManagerService: int getUserIconBadgeResId(int)>
<com.android.systemui.statusbar.policy.ExtensionController.Extension: java.lang.Object get()>
<com.android.server.autofill.RemoteAugmentedAutofillService.RemoteAugmentedAutofillServiceCallbacks: void logAugmentedAutofillSelected(int,java.lang.String,android.os.Bundle)>
<com.android.systemui.statusbar.notification.TransformState: float getTransformationStartScaleY()>
<android.net.wifi.WifiConfiguration.RecentFailure: void setAssociationStatus(int)>
<com.android.systemui.qs.tiles.WifiTile: boolean isAvailable()>
<com.android.systemui.doze.DozeSensors: void setProxListening(boolean)>
<com.android.server.locksettings.recoverablekeystore.KeyStoreProxy: boolean containsAlias(java.lang.String)>
<com.android.powermodel.util.Conversion: int[] toIntArray(float[])>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getCategory()>
<com.android.systemui.statusbar.policy.CallbackController: void addCallback(java.lang.Object)>
<com.android.systemui.pip.tv.PipControlsView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: boolean leaveOpenOnKeyguardHide()>
<com.android.systemui.car.window.OverlayPanelViewController: int getSettleClosePercentage()>
<com.android.systemui.SystemUIFactory: java.lang.String[] getSystemUIServiceComponents(android.content.res.Resources)>
<com.android.settingslib.deviceinfo.StorageManagerVolumeProvider: android.os.storage.VolumeInfo findEmulatedForPrivate(android.os.storage.VolumeInfo)>
<com.android.settingslib.drawer.SwitchesProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<com.android.settingslib.core.lifecycle.ObservablePreferenceFragment: void onPause()>
<com.android.systemui.MultiListLayout: float getAnimationOffsetX()>
<android.view.textclassifier.TextClassifierPerfTest: void testSuggestConversationActions()>
<com.android.server.pm.parsing.pkg.PackageImpl: java.lang.String getSecondaryNativeLibraryDir()>
<com.android.systemui.statusbar.policy.SignalController: void recordLastState()>
<com.android.systemui.statusbar.phone.NavigationBarFragment: int getA11yButtonState(boolean[])>
<com.android.settingslib.bluetooth.PanProfile: void finalize()>
<com.android.server.security.KeyAttestationApplicationIdProviderService: android.security.keymaster.KeyAttestationApplicationId getKeyAttestationApplicationId(int)>
<com.android.settingslib.bluetooth.LocalBluetoothManager: com.android.settingslib.bluetooth.LocalBluetoothAdapter getBluetoothAdapter()>
<com.android.systemui.statusbar.phone.UserAvatarView: void setAvatarWithBadge(android.graphics.Bitmap,int)>
<com.android.server.pm.parsing.pkg.PackageImpl: java.util.UUID getStorageUuid()>
<com.android.server.pm.PackageManagerException: com.android.server.pm.PackageManagerException from(android.content.pm.PackageParser.PackageParserException)>
<com.android.systemui.plugins.qs.QSTile: boolean isAvailable()>
<com.android.server.signedconfig.InvalidConfigException: void <init>(java.lang.String)>
<com.android.systemui.shared.system.SurfaceControlCompat: void <init>(android.view.SurfaceControl)>
<android.net.ip.IpServer: int lastError()>
<com.android.systemui.appops.AppOpsControllerImpl: void removeCallback(int[],com.android.systemui.appops.AppOpsController.Callback)>
<com.android.systemui.classifier.FalsingManagerFake: void setIsFalseTouch(boolean)>
<com.android.keyguard.CarrierTextController: void setListening(com.android.keyguard.CarrierTextController.CarrierTextCallback)>
<android.os.StatsDimensionsValue: boolean getBooleanValue()>
<com.android.systemui.statusbar.policy.HeadsUpManager: void addListener(com.android.systemui.statusbar.policy.OnHeadsUpChangedListener)>
<com.android.server.tv.UinputBridge: void sendPointerUp(android.os.IBinder,int)>
<com.android.systemui.util.InjectionInflationController.ViewInstanceCreator: com.android.systemui.qs.QuickQSPanel createQuickQSPanel()>
<com.android.keyguard.KeyguardUpdateMonitor: int getCurrentUser()>
<com.android.server.pm.SharedUserSetting: void updateProcesses()>
<com.android.systemui.statusbar.EmptyShadeView: void setText(int)>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: int getCameraLensCoverState()>
<com.android.systemui.statusbar.phone.RotationButton: void setDarkIntensity(float)>
<android.net.TetheringManager.TetheringRequest: boolean getShouldShowEntitlementUi()>
<com.android.systemui.statusbar.phone.LockscreenWallpaper.WallpaperDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>
<com.android.systemui.statusbar.StatusBarWifiView: com.android.systemui.statusbar.StatusBarWifiView fromContext(android.content.Context,java.lang.String)>
<com.android.settingslib.fuelgauge.PowerWhitelistBackend: com.android.settingslib.fuelgauge.PowerWhitelistBackend getInstance(android.content.Context)>
<android.graphics.perftests.TypefaceCreatePerfTest: void testCreate_fromFamily()>
<javax.obex.ClientOperation: void abort()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void resetScrollPosition()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isProfileableByShell()>
<com.android.systemui.statusbar.FeatureFlags: boolean isNewNotifPipelineRenderingEnabled()>
<com.android.systemui.Prefs: java.util.Map getAll(android.content.Context)>
<com.android.server.pm.PackageManagerService: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)>
<android.content.pm.PackageManagerInternal: void writeSettings(boolean)>
<com.android.systemui.statusbar.policy.ExtensionController.TunerFactory: java.lang.Object create(java.util.Map)>
<com.android.server.display.WifiDisplayController.Listener: void onScanResults(android.hardware.display.WifiDisplay[])>
<com.android.server.policy.WindowManagerPolicy: int getWindowLayerFromTypeLw(int)>
<com.android.server.biometrics.Utils: boolean isDebugEnabled(android.content.Context,int)>
<android.util.StatsEvent: int getNumBytes()>
<android.net.TcpKeepalivePacketData: int describeContents()>
<com.android.server.pm.parsing.pkg.PackageImpl: void <init>(android.os.Parcel)>
<android.net.wifi.hotspot2.OsuProvider: java.util.Map getFriendlyNameList()>
<com.android.systemui.car.window.SystemUIOverlayWindowController: void attach()>
<com.android.systemui.statusbar.phone.RotationButton: void setVisibilityChangedCallback(java.util.function.Consumer)>
<com.android.systemui.statusbar.phone.BarTransitions: void onTransition(int,int,boolean)>
<com.android.settingslib.net.NetworkCycleDataLoader: java.lang.Object loadInBackground()>
<com.android.server.infra.AbstractPerUserSystemService: android.content.ComponentName updateServiceInfoLocked()>
<com.android.server.locksettings.LockSettingsService.Lifecycle: void onStartUser(int)>
<com.android.server.policy.WindowManagerPolicy.WindowState: android.view.WindowManager.LayoutParams getAttrs()>
<com.android.systemui.screenshot.DeleteScreenshotReceiver: void <init>(com.android.systemui.screenshot.ScreenshotSmartActions,java.util.concurrent.Executor)>
<com.android.systemui.statusbar.phone.StatusBar: void onCameraHintStarted()>
<com.android.systemui.classifier.DurationCountClassifier: void <init>(com.android.systemui.classifier.ClassifierData)>
<com.android.keyguard.clock.AnalogClockController: android.graphics.Bitmap getThumbnail()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onNotificationStartDismissing()>
<com.android.server.os.SchedulingPolicyService: int requestPriority(int,int,int,boolean)>
<com.android.server.audio.AudioService: int getDeviceForStream(int)>
<com.android.server.audio.AudioService: int getMode()>
<android.perftests.utils.SettingsHelper: java.lang.String get(java.lang.String,java.lang.String)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean checkAccessibilityAccess(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: android.bluetooth.BluetoothDevice getDevice()>
<android.net.NetworkStackClient: void <init>(android.net.NetworkStackClient.Dependencies)>
<com.android.systemui.statusbar.phone.ContextualButton: void setVisibility(int)>
<android.processor.view.inspector.InspectableClassModel.Accessor: java.lang.String invocation()>
<com.android.printservice.recommendation.plugin.mopria.MopriaRecommendationPlugin: void <init>(android.content.Context)>
<com.android.settingslib.HelpUtils: android.content.Intent getHelpIntent(android.content.Context,java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setShelfIconVisible(boolean)>
<com.android.settingslib.Utils: int getDefaultStorageManagerDaysToRetain(android.content.res.Resources)>
<android.net.wifi.aware.WifiAwareUtils: boolean validatePmk(byte[])>
<com.android.keyguard.KeyguardMessageArea: void setMessage(int)>
<com.android.settingslib.bluetooth.CachedBluetoothDeviceManager: boolean isSubDevice(android.bluetooth.BluetoothDevice)>
<com.android.systemui.power.EnhancedEstimates: boolean getLowWarningEnabled()>
<com.android.systemui.statusbar.phone.KeyguardBouncer: void dump(java.io.PrintWriter)>
<com.android.statementservice.DirectStatementService: void onCreate()>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_setsAppOp()>
<com.android.systemui.recents.RecentsOnboarding: void hide(boolean)>
<com.android.settingslib.deviceinfo.AbstractWifiMacAddressPreferenceController: void displayPreference(androidx.preference.PreferenceScreen)>
<com.android.settingslib.media.BluetoothMediaDevice: boolean isFastPairDevice()>
<com.android.systemui.statusbar.notification.stack.AnimationFilter: com.android.systemui.statusbar.notification.stack.AnimationFilter animateZ()>
<com.android.systemui.statusbar.policy.RemoteInputView: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.server.soundtrigger.SoundTriggerDbHelper: void dump(java.io.PrintWriter)>
<com.android.settingslib.CustomEditTextPreference: void onPrepareDialogBuilder(android.app.AlertDialog.Builder,android.content.DialogInterface.OnClickListener)>
<android.net.wifi.WifiManager: boolean isWapiSupported()>
<com.android.settingslib.deviceinfo.StorageMeasurement: void onDestroy()>
<com.android.systemui.pip.phone.PipTouchHandler: void onActivityUnpinned(android.content.ComponentName)>
<com.android.systemui.statusbar.notification.stack.NotificationSection: com.android.systemui.statusbar.notification.row.ExpandableView getLastVisibleChild()>
<android.net.TetheringManager.TetheringEventCallback: void onOffloadStatusChanged(int)>
<com.android.server.pm.UserTypeDetails.Builder: com.android.server.pm.UserTypeDetails.Builder setIconBadge(int)>
<com.android.systemui.fragments.ExtensionFragmentListener: void accept(com.android.systemui.plugins.FragmentBase)>
<com.android.server.usb.descriptors.report.ReportCanvas: void closeListItem()>
<com.android.systemui.util.leak.GarbageMonitor: void startHeapTracking()>
<android.net.wifi.WifiScanner.ParcelableScanResults: int describeContents()>
<com.android.server.testing.shadows.ShadowSlog: void wtfQuiet(java.lang.String,java.lang.String)>
<com.android.powermodel.component.ModemRemainderActivity: void <init>(com.android.powermodel.AttributionKey)>
<com.android.systemui.fragments.FragmentHostManager: android.app.FragmentManager getFragmentManager()>
<com.android.server.hdmi.HdmiControlService: void allocateLogicalAddress(java.util.ArrayList,int)>
<com.android.systemui.pip.PipTaskOrganizer.PipTransitionCallback: void onPipTransitionFinished(android.content.ComponentName,int)>
<com.android.systemui.statusbar.KeyboardShortcutKeysLayout.LayoutParams: void <init>(int,int)>
<com.android.server.timezonedetector.TimeZoneDetectorCallbackImpl: boolean isAutoTimeZoneDetectionEnabled()>
<com.android.keyguard.PasswordTextView: void reset(boolean,boolean)>
<android.net.wifi.p2p.WifiP2pManager: void removeGroup(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.systemui.car.CarServiceProvider: void addListener(com.android.systemui.car.CarServiceProvider.CarServiceOnConnectedListener)>
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getSharedAccountsAsUser(int)>
<com.android.systemui.Prefs: void putString(android.content.Context,java.lang.String,java.lang.String)>
<com.android.server.pm.PackageInstallerSession: android.os.ParcelFileDescriptor openRead(java.lang.String)>
<com.android.server.policy.WindowManagerPolicy: void setOverrideFoldedArea(android.graphics.Rect)>
<com.android.systemui.statusbar.phone.NotificationIconContainer: int getIconSize()>
<com.android.server.devicepolicy.DevicePolicyManagerService: int logoutUser(android.content.ComponentName)>
<com.android.server.utils.quota.CountQuotaTracker: void dump(com.android.internal.util.IndentingPrintWriter)>
<com.android.systemui.qs.tiles.DndTile: com.android.systemui.plugins.qs.DetailAdapter getDetailAdapter()>
<com.android.keyguard.KeyguardHostView: boolean dismiss(boolean,int,boolean)>
<com.android.server.webkit.SystemImpl: void enablePackageForAllUsers(android.content.Context,java.lang.String,boolean)>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: void rebootSafeMode(boolean)>
<com.android.server.compat.PlatformCompat: int enableTargetSdkChanges(java.lang.String,int)>
<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager.AuthenticationToken initializeSyntheticPasswordLocked(byte[],com.android.internal.widget.LockscreenCredential,int)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void setBackgroundTop(int)>
<com.android.printspooler.ui.AddPrinterActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.statusbar.phone.NotificationListenerWithPlugins: boolean onPluginNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap)>
<com.android.systemui.qs.external.TileServices: void updateStatusIcon(android.os.IBinder,android.graphics.drawable.Icon,java.lang.String)>
<com.android.server.policy.PhoneWindowManager: void screenTurnedOn()>
<android.net.wifi.hotspot2.pps.Policy: java.lang.String[] getExcludedSsidList()>
<com.android.server.recoverysystem.RecoverySystemService: void rebootRecoveryWithCommand(java.lang.String)>
<com.android.uiautomator.core.UiDevice: boolean takeScreenshot(java.io.File,float,int)>
<javax.microedition.khronos.opengles.GL11: void glGetTexEnviv(int,int,int[],int)>
<com.android.server.usb.UsbDeviceManager: void setCurrentUser(int,com.android.server.usb.UsbProfileGroupSettingsManager)>
<com.android.server.locksettings.SyntheticPasswordManager: java.util.ArrayList toByteArrayList(byte[])>
<com.android.systemui.plugins.qs.QS.HeightListener: void onQsHeightChanged()>
<com.android.server.usb.descriptors.UsbHIDDescriptor: void <init>(int,byte)>
<com.android.server.LockGuard: java.lang.Object guard(java.lang.Object)>
<com.android.settingslib.widget.AppEntitiesHeaderController: com.android.settingslib.widget.AppEntitiesHeaderController setHeaderEmptyRes(int)>
<android.perftests.utils.TraceMarkParser.TraceMarkSlice: double getDurationInSeconds()>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setMinimumHeightForClipping(int)>
<com.android.systemui.util.leak.GarbageMonitor.MemoryTile: android.content.Intent getLongClickIntent()>
<com.android.settingslib.widget.apppreference.AppPreference: void setProgress(int)>
<com.android.server.policy.WindowManagerPolicy.WindowState: int getSurfaceLayer()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void goToFullShade(long)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.MenuItem getLongpressMenuItem(android.content.Context)>
<com.android.settingslib.schedulesprovider.ScheduleInfo: void writeToParcel(android.os.Parcel,int)>
<com.android.gallery3d.common.BitmapUtils: void recycleSilently(android.graphics.Bitmap)>
<com.android.systemui.shared.system.InputConsumerController: void setRegistrationListener(com.android.systemui.shared.system.InputConsumerController.RegistrationListener)>
<com.android.systemui.stackdivider.DividerView: void stopDragging(int,com.android.internal.policy.DividerSnapAlgorithm.SnapTarget,long,android.view.animation.Interpolator,long)>
<com.android.systemui.assist.DeviceConfigHelper: java.lang.String getString(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void init()>
<com.android.systemui.screenshot.ScreenshotNotificationsController: void cancelNotification()>
<com.android.systemui.qs.AutoAddTracker: void <init>(android.content.Context,int)>
<com.android.server.tv.TvInputHardwareManager.Listener: void onHardwareDeviceRemoved(android.media.tv.TvInputHardwareInfo)>
<com.android.systemui.statusbar.policy.NextAlarmControllerImpl: void <init>(android.content.Context)>
<android.net.wifi.WifiNetworkSuggestion: int hashCode()>
<android.net.wifi.p2p.WifiP2pManager: android.os.Messenger getMessenger(android.os.Binder)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean showingPulsing()>
<com.android.perftests.blob.BlobStorePerfTests: void testComputeDigest()>
<com.android.systemui.plugins.GlobalActionsPanelPlugin: com.android.systemui.plugins.GlobalActionsPanelPlugin.PanelViewController onPanelShown(com.android.systemui.plugins.GlobalActionsPanelPlugin.Callbacks,boolean)>
<com.android.systemui.shared.recents.model.Task.TaskKey: void writeToParcel(android.os.Parcel,int)>
<android.net.TetheringManager.TetheringInterfaceRegexps: boolean equals(java.lang.Object)>
<android.net.wifi.aware.IWifiAwareManager: void updateSubscribe(int,int,android.net.wifi.aware.SubscribeConfig)>
<com.android.server.ConnectivityService: android.net.ProxyInfo getProxyForNetwork(android.net.Network)>
<com.android.systemui.statusbar.policy.KeyButtonView: void setImageDrawable(android.graphics.drawable.Drawable)>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getSeInfo(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: int getActualHeight()>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: void setHasEverConnected(boolean)>
<com.android.server.usb.descriptors.Usb20ACOutputTerminal: byte getTerminalID()>
<com.android.server.input.InputManagerService.WindowManagerCallbacks: boolean requestPointerCapture(android.os.IBinder,boolean)>
<com.android.printspooler.util.BitmapSerializeUtils: void writeBitmapPixels(android.graphics.Bitmap,android.os.ParcelFileDescriptor)>
<android.net.wifi.ScanResult: void <init>(android.net.wifi.ScanResult)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void <init>(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.Ranking,boolean,long)>
<com.android.uiautomator.testrunner.UiAutomatorTestRunner: void removeTestListener(junit.framework.TestListener)>
<com.android.systemui.media.dialog.MediaOutputController: void onDeviceAttributesChanged()>
<com.android.systemui.biometrics.AuthContainerView: void onSaveState(android.os.Bundle)>
<android.os.IStatsManagerService: void registerPullAtomCallback(int,long,long,int[],android.os.IPullAtomCallback)>
<com.android.wallpapercropper.CropView: android.graphics.RectF getCrop()>
<android.app.ResourcesThemePerfTest: void setToSameAssetManager()>
<android.net.wifi.p2p.WifiP2pManager: void clearLocalServices(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<android.content.pm.PackageManagerInternal: void finishPackageInstall(int,boolean)>
<com.google.android.startop.iorap.PackageEvent: int describeContents()>
<com.android.packageinstaller.InstallStaging: void onResume()>
<com.android.systemui.statusbar.policy.ConfigurationController.ConfigurationListener: void onOverlayChanged()>
<lockedregioncodeinjection.LockTargetStateAnalysis: org.objectweb.asm.tree.analysis.BasicValue naryOperation(org.objectweb.asm.tree.AbstractInsnNode,java.util.List)>
<com.android.server.devicepolicy.DeviceAdminServiceController: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,com.android.server.devicepolicy.DevicePolicyConstants)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean hasInterrupted()>
<android.net.wifi.WifiScanner: void configureWifiChange(int,int,int,int,int,android.net.wifi.WifiScanner.BssidInfo[])>
<com.android.server.usb.UsbService.Lifecycle: void <init>(android.content.Context)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void showDetail(boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
<com.android.systemui.statusbar.phone.StatusBar: android.view.View.OnTouchListener getStatusBarWindowTouchListener()>
<com.android.uiautomator.core.UiScrollable: boolean ensureFullyVisible(com.android.uiautomator.core.UiObject)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isOnlyChildInGroup()>
<com.android.settingslib.accessibility.AccessibilityButtonHelper: boolean isRequestedByAccessibilityService(android.content.Context)>
<com.android.systemui.qs.TileLayout: void onMeasure(int,int)>
<com.android.gallery3d.common.Utils: java.lang.String ensureNotNull(java.lang.String)>
<com.android.server.policy.WindowManagerPolicy: void hideBootMessages()>
<com.android.systemui.bubbles.BubbleController: void updateStack()>
<com.android.server.MountServiceIdler: boolean onStopJob(android.app.job.JobParameters)>
<com.android.server.NetworkManagementService: void startInterfaceForwarding(java.lang.String,java.lang.String)>
<com.android.systemui.globalactions.GlobalActionsDialog.Action: boolean showBeforeProvisioning()>
<com.android.settingslib.bluetooth.MapClientProfile: void finalize()>
<com.android.systemui.statusbar.phone.PanelViewController: boolean flingExpands(float,float,float,float)>
<com.android.systemui.qs.QSFragment: void setExpanded(boolean)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void onDarkChanged(android.graphics.Rect,float,int)>
<android.net.wifi.WifiScanner: void startScan(android.net.wifi.WifiScanner.ScanSettings,android.net.wifi.WifiScanner.ScanListener,android.os.WorkSource)>
<com.android.gallery3d.util.IntArray: int size()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void onKeyguardFadedAway()>
<com.android.systemui.statusbar.StatusBarIconView: void <init>(android.content.Context,java.lang.String,android.service.notification.StatusBarNotification,boolean)>
<com.android.settingslib.core.AbstractPreferenceController: void refreshSummary(androidx.preference.Preference)>
<com.android.server.RescueParty.RescuePartyObserver: int onHealthCheckFailed(android.content.pm.VersionedPackage,int)>
<com.android.systemui.globalactions.GlobalActionsDialog.MyAdapter: boolean onLongClickItem(int)>
<android.net.wifi.WifiManager: void setPasspointMeteredOverride(java.lang.String,int)>
<android.net.wifi.WifiEnterpriseConfig: int describeContents()>
<com.android.systemui.plugins.PluginInitializerImpl: android.os.Looper getBgLooper()>
<com.android.gallery3d.glrenderer.GLES20Canvas: void save()>
<javax.obex.SessionNotifier: javax.obex.ObexSession acceptAndOpen(javax.obex.ServerRequestHandler,javax.obex.Authenticator)>
<android.net.wifi.hotspot2.pps.UpdateParameter: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.StatusBarMobileView: void applyMobileState(com.android.systemui.statusbar.phone.StatusBarSignalPolicy.MobileIconState)>
<com.android.server.accessibility.MagnificationController: void resetAllIfNeeded(int)>
<com.android.systemui.assist.AssistHandleBehaviorController.BehaviorController: void dump(java.io.PrintWriter,java.lang.String)>
<android.net.wifi.IWifiManager: android.net.wifi.SoftApConfiguration restoreSoftApBackupData(byte[])>
<com.android.server.testing.shadows.ShadowKeyValueBackupTask: void __constructor__(com.android.server.backup.UserBackupManagerService,com.android.server.backup.transport.TransportClient,java.lang.String,java.util.List,com.android.server.backup.DataChangedJournal,com.android.server.backup.keyvalue.KeyValueBackupReporter,com.android.server.backup.internal.OnTaskFinishedListener,java.util.List,boolean,boolean)>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameteriv(int,int,int[],int)>
<com.android.packageinstaller.wear.WearPackageIconProvider: boolean onCreate()>
<com.android.settingslib.drawer.ActivityTile: void <init>(android.content.pm.ActivityInfo,java.lang.String)>
<com.android.keyguard.KeyguardPatternView: void onEmergencyButtonClickedWhenInCall()>
<com.android.settingslib.bluetooth.BluetoothUtils: android.graphics.Bitmap createBitmap(android.graphics.drawable.Drawable,int,int)>
<com.android.printspooler.model.RemotePrintDocument.UpdateResultCallbacks: void onUpdateCanceled()>
<com.android.systemui.shared.system.QuickStepContract: java.lang.String getSystemUiStateString(int)>
<com.android.server.pm.UserRestrictionsUtils: boolean isGlobal(int,java.lang.String)>
<android.net.wifi.hotspot2.pps.Credential: void setCheckAaaServerCertStatus(boolean)>
<com.android.server.pm.KeySetManagerService: java.lang.String encodePublicKey(java.security.PublicKey)>
<com.android.systemui.bubbles.BubbleStackView: void onOrientationChanged(int)>
<com.android.server.audio.AudioService: int getUiSoundsStreamType()>
<com.android.server.textservices.TextServicesManagerService: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(int,java.lang.String)>
<com.android.systemui.qs.AutoAddTracker.Builder: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setHeadsUpAnimatingAway(boolean)>
<com.android.settingslib.applications.ServiceListing.Builder: com.android.settingslib.applications.ServiceListing.Builder setTag(java.lang.String)>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy: void onStateChanged()>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo: void bindNotification(android.content.pm.ShortcutManager,android.content.pm.PackageManager,android.app.INotificationManager,com.android.systemui.statusbar.notification.VisualStabilityManager,java.lang.String,android.app.NotificationChannel,com.android.systemui.statusbar.notification.collection.NotificationEntry,android.app.Notification.BubbleMetadata,com.android.systemui.statusbar.notification.row.NotificationConversationInfo.OnSettingsClickListener,com.android.systemui.statusbar.notification.row.NotificationConversationInfo.OnSnoozeClickListener,com.android.settingslib.notification.ConversationIconFactory,android.content.Context,javax.inject.Provider,boolean,android.os.Handler,android.os.Handler,com.android.systemui.statusbar.notification.row.NotificationConversationInfo.OnConversationSettingsClickListener,com.android.systemui.bubbles.BubbleController)>
<com.android.systemui.recents.OverviewProxyRecentsImpl: boolean splitPrimaryTask(int,android.graphics.Rect,int)>
<com.android.systemui.statusbar.policy.HeadsUpManager: com.android.systemui.statusbar.notification.collection.NotificationEntry getTopEntry()>
<com.android.systemui.qs.QSHost: android.content.Context getUserContext()>
<com.android.server.camera.CameraServiceProxy: void binderDied()>
<com.android.systemui.PluginInflateContainer: void onDetachedFromWindow()>
<com.android.server.NetworkManagementService: boolean isFirewallEnabled()>
<com.android.server.pm.PackageManagerService: void sendSessionUpdatedBroadcast(android.content.pm.PackageInstaller.SessionInfo,int)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean handleGiveAudioStatus(com.android.server.hdmi.HdmiCecMessage)>
<com.android.keyguard.KeyguardViewController: void onScreenTurnedOn()>
<com.android.server.infra.AbstractPerUserSystemService: void removeSelfFromCacheLocked()>
<android.text.DynamicLayoutPerfTest: void <init>(java.lang.String,float)>
<com.android.systemui.plugins.VolumeDialogController: void userActivity()>
<com.android.photos.views.BlockingGLTextureView: void finalize()>
<com.android.systemui.statusbar.notification.MediaNotificationProcessor: androidx.palette.graphics.Palette.Swatch findBackgroundSwatch(android.graphics.Bitmap)>
<android.net.ip.IpServer: android.net.LinkAddress getAddress()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: void setCurrentSubscriptionsLocked(java.util.List)>
<com.android.systemui.statusbar.phone.RotationButton: android.view.View getCurrentView()>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: boolean isTrackingHeadsUp()>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: void onSetIcon(int,com.android.internal.statusbar.StatusBarIcon)>
<com.android.server.accessibility.AccessibilityWindowManager: java.util.ArrayList getDisplayListLocked()>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: android.app.admin.DevicePolicyManagerInternal getDevicePolicyManagerInternal()>
<com.android.systemui.statusbar.notification.row.NotificationSnooze.NotificationSnoozeOption: android.service.notification.SnoozeCriterion getSnoozeCriterion()>
<com.android.systemui.car.window.OverlayViewGlobalStateController: void inflateView(com.android.systemui.car.window.OverlayViewController)>
<com.android.settingslib.wifi.AccessPoint: java.lang.String getKey()>
<com.android.uiautomator.core.UiObject: boolean waitUntilGone(long)>
<com.android.systemui.car.navigationbar.CarNavigationBarController: void registerRightBarTouchListener(android.view.View.OnTouchListener)>
<com.android.systemui.keyguard.KeyguardViewMediator: void start()>
<android.os.StrictModeTest: void timeThreadViolationNoStrictMode()>
<com.android.server.dreams.DreamManagerService: void <init>(android.content.Context)>
<com.android.server.accounts.AccountManagerService: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String)>
<com.android.settingslib.bluetooth.PanProfile: boolean isEnabled(android.bluetooth.BluetoothDevice)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onDeviceProvisioned()>
<com.android.systemui.Gefingerpoken: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.server.pm.PackageManagerService: android.content.ComponentName getInstantAppResolverSettingsComponent()>
<com.android.keyguard.KeyguardSecurityViewFlipper: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean getUserUnlockedWithBiometric(int)>
<com.android.settingslib.drawer.Tile: android.content.pm.ComponentInfo getComponentInfo(android.content.Context)>
<com.android.gallery3d.exif.ExifInterface: java.lang.Byte getTagByteValue(int,int)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareValidation: void <init>(com.android.server.soundtrigger_middleware.ISoundTriggerMiddlewareInternal,android.content.Context)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void setSwitchingUser(boolean)>
<com.android.systemui.qs.tiles.FlashlightTile: java.lang.String composeChangeAnnouncement()>
<com.android.server.usb.UsbService: long getCurrentFunctions()>
<com.google.android.startop.iorap.PackageEvent: com.google.android.startop.iorap.PackageEvent createReplaced(android.net.Uri,java.lang.String)>
<android.net.wifi.ScanResult: void <init>(java.lang.String,java.lang.String,long,int,java.lang.String,int,int,long,int,int,int,int,int,boolean)>
<com.android.systemui.power.PowerNotificationWarnings: boolean isInvalidChargerWarningShowing()>
<com.android.server.TelephonyRegistry: void notifySubscriptionInfoChanged()>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void setHeadsUpVisible(boolean)>
<com.android.server.accessibility.gestures.TouchExplorer: void onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)>
<com.android.server.recoverysystem.RecoverySystemService: boolean requestLskf(java.lang.String,android.content.IntentSender)>
<com.android.server.vr.VrManagerService: void <init>(android.content.Context)>
<com.android.settingslib.Utils: java.lang.String formatPercentage(double,boolean)>
<android.net.wifi.p2p.WifiP2pConfig: void invalidate()>
<com.android.systemui.statusbar.policy.KeyButtonRipple: void <init>(android.content.Context,android.view.View)>
<com.android.location.provider.ActivityRecognitionProvider: void unregisterSink(com.android.location.provider.ActivityRecognitionProvider.Sink)>
<com.android.printservice.recommendation.plugin.hp.ServiceListener: void <init>(android.content.Context,com.android.printservice.recommendation.plugin.hp.ServiceListener.Observer,java.lang.String[])>
<com.android.server.accessibility.FingerprintGestureDispatcher: void onClientActiveChanged(boolean)>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: int lastIndexOf(java.lang.Object)>
<com.android.systemui.bubbles.BubbleOverflow: int getDotColor()>
<android.net.wifi.SoftApConfiguration: android.net.MacAddress getBssid()>
<com.android.gallery3d.util.IntArray: void clear()>
<com.android.server.vr.SettingsObserver: void removeListener(com.android.server.vr.SettingsObserver.SettingChangeListener)>
<com.android.keyguard.KeyguardSliceView: boolean hasHeader()>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setDistanceToTopRoundness(float)>
<com.android.uiautomator.core.UiDevice: boolean openNotification()>
<com.android.server.twilight.TwilightService: void onProviderDisabled(java.lang.String)>
<com.android.systemui.bubbles.animation.AnimatableScaleMatrix: float getScaleY()>
<com.android.systemui.car.window.OverlayPanelViewController: void animateExpandPanel()>
<com.google.android.startop.iorapd.IorapWorkFlowTest: void setUp()>
<com.android.systemui.dagger.DependencyProvider: android.view.LayoutInflater providerLayoutInflater(android.content.Context)>
<com.android.server.policy.PermissionPolicyInternal: boolean checkStartActivity(android.content.Intent,int,java.lang.String)>
<com.android.server.wifi.SupplicantManager: void start()>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage markNotActivitiesAsNotExportedIfSingleUser()>
<com.android.systemui.keyguard.ScreenLifecycle: void dispatchScreenTurningOff()>
<com.android.systemui.statusbar.phone.PanelBar: android.os.Parcelable onSaveInstanceState()>
<com.android.printspooler.model.PrintSpoolerProvider: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.systemcaptions.SystemCaptionsManagerService: void onStart()>
<com.android.server.usb.descriptors.UsbACAudioControlEndpoint: byte getInterval()>
<com.android.server.accessibility.gestures.TouchExplorer: void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: byte getMfgIndex()>
<com.android.server.testing.shadows.ShadowEventLog: int writeEvent(int,java.lang.Object[])>
<com.android.printservice.recommendation.util.MDNSFilteredDiscovery: void onServiceFound(android.net.nsd.NsdServiceInfo)>
<com.android.settingslib.bluetooth.HidDeviceProfile: boolean isEnabled(android.bluetooth.BluetoothDevice)>
<com.android.settingslib.notification.ZenDurationDialog: android.app.Dialog createDialog()>
<com.android.systemui.keyguard.KeyguardSliceProvider: java.lang.String getFormattedDateLocked()>
<com.android.systemui.glwallpaper.ImageWallpaperRenderer: void finish()>
<com.android.systemui.shared.system.RecentsAnimationControllerCompat: boolean removeTask(int)>
<com.android.systemui.car.userswitcher.UserIconProvider: androidx.core.graphics.drawable.RoundedBitmapDrawable getRoundedGuestDefaultIcon(android.content.res.Resources)>
<com.android.systemui.util.sensors.AsyncSensorManager: boolean cancelTriggerSensorImpl(android.hardware.TriggerEventListener,android.hardware.Sensor,boolean)>
<com.android.systemui.Dependency.DependencyInjector: void createSystemUI(com.android.systemui.Dependency)>
<com.android.server.usb.descriptors.Usb10ACMixerUnit: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.keyguard.KeyguardMessageArea: com.android.keyguard.KeyguardMessageArea findSecurityMessageDisplay(android.view.View)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_toSameAsCurrent_doesNotSendBroadcast()>
<android.os.IStatsManagerService: long[] getRegisteredExperimentIds()>
<com.android.systemui.qs.PagedTileLayout: boolean hasOverlappingRendering()>
<android.net.wifi.WifiNetworkAgentSpecifier: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.policy.SmartReplyView: void onLayout(boolean,int,int,int,int)>
<com.android.server.accessibility.MagnificationController.ControllerContext: com.android.server.accessibility.AccessibilityManagerService getAms()>
<com.android.systemui.qs.carrier.QSCarrier: void onFinishInflate()>
<android.net.wifi.ISoftApCallback: void onBlockedClientConnecting(android.net.wifi.WifiClient,int)>
<android.app.usage.UsageStatsManagerInternal: void applyRestoredPayload(int,java.lang.String,byte[])>
<com.android.systemui.statusbar.notification.stack.ViewState: void abortAnimation(android.view.View,int)>
<com.android.systemui.statusbar.policy.BatteryControllerImpl: void <init>(android.content.Context,com.android.systemui.power.EnhancedEstimates,android.os.PowerManager,com.android.systemui.broadcast.BroadcastDispatcher,android.os.Handler,android.os.Handler)>
<android.net.wifi.IWifiConnectedNetworkScorer: void onStop(int)>
<com.android.systemui.keyguard.KeyguardLifecyclesDispatcher: void <init>(com.android.systemui.keyguard.ScreenLifecycle,com.android.systemui.keyguard.WakefulnessLifecycle)>
<com.android.systemui.statusbar.phone.ShadeController: boolean collapsePanel()>
<android.net.wifi.IWifiManager: void setDeviceMobilityState(int)>
<com.android.systemui.volume.ZenModePanel: void setAutoText(java.lang.CharSequence)>
<com.android.server.NsdService: void setEnabled(boolean)>
<com.android.server.pm.dex.PackageDexUsage.DexUseInfo: java.util.Set getLoadingPackages()>
<com.android.systemui.biometrics.AuthCredentialView.ErrorTimer: void onFinish()>
<com.android.systemui.car.statusbar.UnusedStatusBar: void notifyBiometricAuthModeChanged()>
<android.net.wifi.hotspot2.PasspointConfiguration: int getMeteredOverride()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isFullBackupOnly()>
<com.android.server.media.MediaSessionRecordImpl: java.lang.String getPackageName()>
<com.android.server.slice.SlicePermissionManager.PkgUser: void <init>(java.lang.String,int)>
<javax.microedition.khronos.opengles.GL10: void glLineWidth(float)>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: void setLockscreenPublicMode(boolean,int)>
<com.android.server.locksettings.RebootEscrowManager.Callbacks: boolean isUserSecure(int)>
<com.android.systemui.globalactions.ListGridLayout: void setSwapRowsAndColumns(boolean)>
<com.android.server.recoverysystem.RecoverySystemService.Lifecycle: void onStart()>
<com.android.systemui.media.MediaControlPanel: void attach(com.android.systemui.medi.PlayerViewHolder)>
<android.app.StatsManager: boolean addConfiguration(long,byte[])>
<com.android.server.policy.WindowManagerPolicy: void unregisterDisplayFoldListener(android.view.IDisplayFoldListener)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setLockTaskFeatures(android.content.ComponentName,int)>
<com.android.systemui.statusbar.notification.collection.coordinator.HeadsUpCoordinator: com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.NotifSection getSection()>
<android.net.ip.RouterAdvertisementDaemon: boolean start()>
<com.android.bluetoothmidiservice.BluetoothPacketDecoder: void decodePacket(byte[],android.media.midi.MidiReceiver)>
<com.android.keyguard.clock.AnalogClockController: void setColorPalette(boolean,int[])>
<android.net.wifi.aware.SubscribeConfig: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiInfo: int getWifiStandard()>
<com.android.future.usb.UsbAccessory: java.lang.String toString()>
<com.android.systemui.statusbar.phone.StatusBar: void topAppWindowChanged(int,boolean,boolean)>
<com.android.commands.bu.AdbBackupTest: void testRun_whenUserSpecified_callsBackupManagerAsSpecifiedUser()>
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getInstalledAccessibilityServiceList(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void updateFooter()>
<com.example.android.networkusage.NetworkActivity.NetworkReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void reportSuccessfulBiometricAttempt(int)>
<com.android.keyguard.AlphaOptimizedLinearLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.content.pm.PackageManagerInternal: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int,int)>
<com.android.server.pm.UserTypeDetails: void dump(java.io.PrintWriter)>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void onClosingFinished()>
<com.android.systemui.toast.ToastUI: void start()>
<com.android.server.inputmethod.InputMethodManagerInternal: com.android.server.inputmethod.InputMethodManagerInternal get()>
<com.android.systemui.plugins.qs.QSTile: java.lang.CharSequence getTileLabel()>
<com.android.systemui.statusbar.policy.BatteryController.BatteryStateChangeCallback: void onPowerSaveChanged(boolean)>
<com.android.systemui.shared.plugins.VersionInfo.InvalidVersionException: void <init>(java.lang.String,boolean)>
<com.android.server.hdmi.HdmiCecMessageValidator.ParameterValidator: int isValid(byte[])>
<com.android.printspooler.util.ApprovedPrintServices: boolean isApprovedService(android.content.ComponentName)>
<com.android.server.pm.PackageSetting: void <init>(java.lang.String,java.lang.String,java.io.File,java.io.File,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,int,int,int,java.lang.String[],long[],java.util.Map)>
<com.android.keyguard.ViewMediatorCallback: boolean isScreenOn()>
<com.android.settingslib.drawer.SwitchController.MetaData: com.android.settingslib.drawer.SwitchController.MetaData setTitle(int)>
<com.android.server.NetworkTimeUpdateService: void systemRunning()>
<com.android.systemui.pip.tv.PipManager: void suspendPipResizing(int)>
<com.android.systemui.qs.tiles.WifiTile: void handleSecondaryClick()>
<com.android.server.vr.VrManagerInternal: void addPersistentVrModeStateListener(android.service.vr.IPersistentVrStateCallbacks)>
<android.perftests.SystemPerfTest: void testJniArrayBasicAccess()>
<android.net.dhcp.DhcpServingParamsParcelExt: android.net.dhcp.DhcpServingParamsParcelExt setDefaultRouters(java.util.Set)>
<com.android.server.BinderCallsStatsService: void reset()>
<android.app.StatsManager: void addConfig(long,byte[])>
<com.android.systemui.classifier.Stroke: long getDurationNanos()>
<com.android.systemui.statusbar.phone.PanelBar: void onTrackingStarted()>
<com.android.systemui.qs.QSHost: android.content.Context getContext()>
<com.android.systemui.statusbar.SuperStatusBarViewFactory: com.android.systemui.statusbar.phone.NotificationShadeWindowView getNotificationShadeWindowView()>
<com.android.systemui.statusbar.phone.PanelBar: void collapsePanel(boolean,boolean,float)>
<com.android.settingslib.wifi.WifiUtils: java.lang.String buildLoggingSummary(com.android.settingslib.wifi.AccessPoint,android.net.wifi.WifiConfiguration)>
<com.android.server.biometrics.EnrollClient: void <init>(android.content.Context,com.android.server.biometrics.Constants,com.android.server.biometrics.BiometricServiceBase.DaemonWrapper,long,android.os.IBinder,com.android.server.biometrics.BiometricServiceBase.ServiceListener,int,int,byte[],boolean,java.lang.String,com.android.server.biometrics.BiometricUtils,int[],int)>
<com.android.systemui.qs.QSPanel.QSTileLayout: boolean setMaxColumns(int)>
<com.android.systemui.ResizingSpace: void onMeasure(int,int)>
<com.android.systemui.util.concurrency.DelayableExecutor: java.lang.Runnable executeDelayed(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: void setLeaveOpenOnKeyguardHide(boolean)>
<android.multiuser.BenchmarkRunner: android.os.Bundle getStatsToReport()>
<com.android.systemui.statusbar.notification.row.FooterView: com.android.systemui.statusbar.notification.stack.ExpandableViewState createExpandableViewState()>
<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: void acquireWakeLock()>
<com.android.uiautomator.testrunner.UiAutomatorInstrumentationTestRunner: android.test.AndroidTestRunner getAndroidTestRunner()>
<com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback: void save()>
<com.android.systemui.doze.DozeService: void dumpOnHandler(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.net.util.TetheringUtils.ForwardedStats: void <init>(long,long,long,long)>
<com.android.systemui.pip.phone.PipTouchHandler: void onShelfVisibilityChanged(boolean,int)>
<com.android.systemui.statusbar.notification.stack.SectionHeaderView: void applyContentTransformation(float,float)>
<com.android.server.pm.UserManagerService: java.lang.String getSeedAccountType()>
<com.android.systemui.colorextraction.SysuiColorExtractor: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.printspooler.ui.PageAdapter: android.print.PageRange[] getSelectedPages()>
<javax.microedition.khronos.egl.EGL10: boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>
<com.android.systemui.volume.VolumePrefs: void registerCallbacks(android.content.Context,android.content.SharedPreferences.OnSharedPreferenceChangeListener)>
<com.android.printspooler.util.PageRangeUtils: android.print.PageRange asAbsoluteRange(android.print.PageRange,int)>
<com.android.systemui.car.hvac.AnimatedTemperatureView: void setDisplayInFahrenheit(boolean)>
<com.android.server.usb.descriptors.UsbVCHeader: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.keyguard.KeyguardPinBasedInputView: boolean onRequestFocusInDescendants(int,android.graphics.Rect)>
<com.android.printservice.recommendation.plugin.hp.ServiceListener: void stop()>
<com.android.systemui.statusbar.phone.StatusBar: android.content.pm.PackageManager getPackageManagerForUser(android.content.Context,int)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onRefreshBatteryInfo(com.android.settingslib.fuelgauge.BatteryStatus)>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: void removeCallback(android.os.Handler.Callback)>
<com.android.server.appbinding.finders.AppServiceFinder: java.lang.String getTargetPackage(int)>
<com.android.server.pm.dex.ArtManagerService: void dumpProfiles(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.server.pm.ProtectedPackages: void setDeviceOwnerProtectedPackages(java.util.List)>
<com.android.systemui.statusbar.NotificationShelf: boolean needsOutline()>
<javax.microedition.khronos.opengles.GL10: void glEnable(int)>
<com.android.server.usb.descriptors.report.TextReportCanvas: void openParagraph(boolean)>
<com.android.server.biometrics.BiometricServiceBase.ServiceListener: void onEnrollResult(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.systemui.statusbar.phone.StatusBar: void onUnlockedChanged()>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: void expandFromStack(java.lang.Runnable,java.lang.Runnable)>
<com.android.systemui.plugins.qs.QSTile.SignalState: com.android.systemui.plugins.qs.QSTile.State copy()>
<com.android.server.biometrics.BiometricServiceBase.ServiceListener: void onAuthenticationFailedInternal()>
<com.android.systemui.statusbar.policy.HeadsUpManager: com.android.systemui.statusbar.policy.HeadsUpManager.HeadsUpEntry createAlertEntry()>
<com.android.systemui.qs.customize.CustomizeTileView: boolean isLongClickable()>
<com.android.systemui.car.bluetooth.CarBatteryController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.settingslib.display.DisplayDensityUtils: void <init>(android.content.Context)>
<com.android.systemui.pip.PipTaskOrganizer: void setOneShotAnimationType(int)>
<com.android.server.accessibility.magnification.WindowMagnificationManager: void setConnection(android.view.accessibility.IWindowMagnificationConnection)>
<com.android.systemui.dagger.DependencyProvider: android.os.Handler provideTimeTickHandler()>
<com.android.server.usb.descriptors.report.TextReportCanvas: void closeList()>
<android.net.TetheringManager: java.lang.String[] getTetherableWifiRegexs()>
<com.android.systemui.qs.tiles.DndTile: void showDetail(boolean)>
<com.android.server.pm.RestrictionsSet: void dumpRestrictions(java.io.PrintWriter,java.lang.String)>
<com.android.settingslib.deviceinfo.AbstractSerialNumberPreferenceController: boolean isAvailable()>
<android.net.wifi.hotspot2.pps.Policy: java.util.Map getRequiredProtoPortMap()>
<com.android.settingslib.wifi.AccessPoint: int hashCode()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean hasOverlappingRendering()>
<com.android.server.biometrics.BiometricService.Injector: java.lang.String[] getConfiguration(android.content.Context)>
<com.android.server.display.BrightnessMappingStrategy: void clearUserDataPoints()>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void onExpansionChanged()>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void grantRequestedRuntimePermissions(com.android.server.pm.parsing.pkg.AndroidPackage,int[],java.lang.String[],int)>
<android.text.TextPerfUtils: java.lang.CharSequence nextRandomParagraph(int,int,boolean,java.lang.String[])>
<com.android.packageinstaller.wear.PackageInstallerFactory: com.android.packageinstaller.wear.PackageInstallerImpl getPackageInstaller(android.content.Context)>
<android.util.ArraySetPerfTest: void testRemoveIf_Large_RemoveAll()>
<com.android.systemui.analytics.DataCollector: void onAffordanceSwipingAborted()>
<com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl.Callback: boolean isAutoTimeZoneDetectionEnabled()>
<android.multiuser.BenchmarkRunner: java.util.ArrayList getAllDurations()>
<com.android.gallery3d.exif.ExifInterface: android.util.SparseIntArray getTagInfo()>
<com.android.settingslib.applications.ApplicationsState.CompoundFilter: void init()>
<com.android.server.biometrics.BiometricServiceBase: void authenticateInternal(com.android.server.biometrics.BiometricServiceBase.AuthenticationClientImpl,long,java.lang.String,int,int,int)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage: void remove(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getCertInstallerPackage(android.content.ComponentName)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isAllowBackup()>
<com.android.systemui.qs.tiles.WifiTile.WifiDetailAdapter: java.lang.CharSequence getTitle()>
<com.android.server.usb.descriptors.Usb20ASFormatII: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<android.net.wifi.WifiManager.WifiLock: void release()>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileWithMinimumFailedPasswordsForWipe(int,boolean)>
<android.net.wifi.hotspot2.pps.Credential: boolean equals(java.lang.Object)>
<com.android.server.pm.PackageDexOptimizer.ForcedUpdatePackageDexOptimizer: void <init>(com.android.server.pm.PackageDexOptimizer)>
<com.android.systemui.keyguard.ScreenLifecycle: int getScreenState()>
<com.android.settingslib.NetworkPolicyEditor: void setPolicyWarningBytes(android.net.NetworkTemplate,long)>
<com.android.settingslib.wifi.WifiTracker.WifiListener: void onAccessPointsChanged()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void onInflationTaskFinished()>
<com.android.server.adb.AdbService: int handleShellCommand(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,java.lang.String[])>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: boolean hasComponentClassName(com.android.server.pm.parsing.pkg.AndroidPackage,java.lang.String)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: void onContentUpdated(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.usb.descriptors.UsbInterfaceAssoc: byte getFunction()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: android.view.View getGroupParentWhenDismissed()>
<com.android.systemui.classifier.ProximityClassifier: float getFalseTouchEvaluation(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void wipeDataWithReason(int,java.lang.String,boolean)>
<com.android.systemui.statusbar.policy.HotspotControllerImpl: int getNumConnectedDevices()>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: java.util.List subList(int,int)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void resetMenu()>
<android.net.wifi.WifiManager.ActionListener: void onSuccess()>
<com.android.server.pm.parsing.pkg.PackageImpl: boolean isSignedWithPlatformKey()>
<com.android.systemui.statusbar.notification.PropertyAnimator: boolean isAnimating(android.view.View,com.android.systemui.statusbar.notification.AnimatableProperty)>
<com.android.systemui.statusbar.NotificationHeaderUtil.ViewComparator: boolean isEmpty(android.view.View)>
<com.android.systemui.qs.tiles.HotspotTile: boolean isAvailable()>
<com.android.keyguard.KeyguardPinBasedInputView: boolean onKeyDown(int,android.view.KeyEvent)>
<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
<android.net.wifi.hotspot2.pps.Credential: void setSimCredential(android.net.wifi.hotspot2.pps.Credential.SimCredential)>
<com.android.systemui.classifier.FalsingManagerProxy: void onTouchEvent(android.view.MotionEvent,int,int)>
<com.android.systemui.qs.SlashDrawable: void setTint(int)>
<com.android.server.infra.ServiceNameResolver: void dumpShort(java.io.PrintWriter,int)>
<com.android.systemui.statusbar.phone.HeadsUpAppearanceController: void onFullyHiddenChanged(boolean)>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder: com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder withLayer(int)>
<com.android.systemui.statusbar.notification.row.ExpandableView: int getIntrinsicHeight()>
<com.android.server.usb.descriptors.Usb10ASFormatI: byte getNumChannels()>
<com.android.server.locksettings.recoverablekeystore.KeyStoreProxyImpl: java.security.Key getKey(java.lang.String,char[])>
<com.android.systemui.qs.tileimpl.SlashImageView: void ensureSlashDrawable()>
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setTerminateNotificationEnabled(boolean)>
<com.android.server.biometrics.BiometricService.Injector: android.security.KeyStore getKeyStore()>
<android.graphics.perftests.OutlinePerfTest: void testSetRoundRect()>
<com.android.server.soundtrigger_middleware.ISoundTriggerHw2: void stopAllRecognitions()>
<com.android.printspooler.model.PageContentRepository: void close(java.lang.Runnable)>
<android.widget.TextViewOnMeasurePerfTest: void testMeasure_AtMost()>
<android.net.util.BaseNetdUnsolicitedEventListener: void onRouteChanged(boolean,java.lang.String,java.lang.String,java.lang.String)>
<com.android.server.locksettings.LockSettingsService: byte[] startRecoverySessionWithCertPath(java.lang.String,java.lang.String,android.security.keystore.recovery.RecoveryCertPath,byte[],byte[],java.util.List)>
<com.android.systemui.ScreenDecorations: android.graphics.Region rectsToRegion(java.util.List)>
<com.android.server.SystemService: void onUserUnlocking(com.android.server.SystemService.TargetUser)>
<com.android.systemui.statusbar.KeyguardIndicationController.BaseKeyguardCallback: void onScreenTurnedOn()>
<com.android.server.usb.descriptors.report.ReportCanvas: java.lang.String getHexString(int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry.OnSensitivityChangedListener: void onSensitivityChanged(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.keyguard.KeyguardViewController: void showBouncer(boolean)>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getAltSubjectMatch()>
<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasMIDIInterface()>
<com.android.systemui.statusbar.NotificationLifetimeExtender.NotificationSafeToRemoveCallback: void onSafeToRemove(java.lang.String)>
<com.android.systemui.pip.phone.PipAccessibilityInteractionConnection: void findAccessibilityNodeInfosByViewId(long,java.lang.String,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec)>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy.WifiIconState: java.lang.String toString()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: void applyConversationSkin()>
<com.android.commands.uiautomator.RunTestCommand: com.android.uiautomator.testrunner.UiAutomatorTestRunner getRunner()>
<com.android.systemui.statusbar.notification.TextViewTransformState: int getViewHeight()>
<com.android.settingslib.drawer.Tile: boolean hasKey()>
<com.android.keyguard.clock.ClockLayout: void onFinishInflate()>
<com.android.printspooler.model.PageContentRepository: void startPreload(android.print.PageRange,android.print.PageRange[],android.print.PageRange[])>
<com.android.systemui.shared.recents.model.Task: void setWindowingMode(int)>
<android.net.wifi.WifiInfo: void setSuccessfulTxPacketsPerSecond(double)>
<com.android.settingslib.RestrictedLockUtils: android.content.Intent getShowAdminSupportDetailsIntent(android.content.Context,com.android.settingslib.RestrictedLockUtils.EnforcedAdmin)>
<com.android.server.slice.SliceProviderPermissions: com.android.server.slice.SliceProviderPermissions createFrom(org.xmlpull.v1.XmlPullParser,com.android.server.slice.DirtyTracker)>
<com.android.server.pm.permission.PermissionManagerServiceInternal.DefaultBrowserProvider: void setDefaultBrowserAsync(java.lang.String,int)>
<com.android.server.ConnectivityService: void notifyNetworkAvailable(com.android.server.connectivity.NetworkAgentInfo,com.android.server.ConnectivityService.NetworkRequestInfo)>
<com.android.server.policy.BurnInProtectionHelper: void onDisplayRemoved(int)>
<com.android.systemui.statusbar.ScreenRecordDrawable: int getIntrinsicHeight()>
<com.android.server.pm.PreferredComponent: void <init>(com.android.server.pm.PreferredComponent.Callbacks,org.xmlpull.v1.XmlPullParser)>
<com.android.systemui.statusbar.AlertingNotificationManager: void setShouldManageLifetime(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.settingslib.widget.AnimatedImageView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: float getRotation()>
<com.android.systemui.shared.system.WindowCallbacksCompat: void onWindowSizeIsChanging(android.graphics.Rect,boolean,android.graphics.Rect,android.graphics.Rect)>
<com.android.systemui.shared.system.UniversalSmartspaceUtils: android.content.Intent createRequestSmartspaceIntent(android.view.SurfaceView)>
<com.android.server.statusbar.StatusBarManagerInternal: void toggleRecentApps()>
<com.android.gallery3d.exif.ExifTag: int getDataSize()>
<com.android.settingslib.widget.AppEntitiesHeaderController: com.android.settingslib.widget.AppEntitiesHeaderController setHeaderDetailsClickListener(android.view.View.OnClickListener)>
<android.app.StatsManager.PullAtomMetadata.Builder: android.app.StatsManager.PullAtomMetadata.Builder setTimeoutMillis(long)>
<android.net.wifi.WifiManager: android.net.wifi.SoftApConfiguration restoreSoftApBackupData(byte[])>
<com.android.systemui.util.wakelock.KeepAwakeAnimationListener: void onAnimationRepeat(android.view.animation.Animation)>
<com.android.server.tv.tunerresourcemanager.ClientProfile: int getPriority()>
<com.android.commands.bu.AdbBackupTest: void testRun_whenUserNotSpecified_callsAdbBackupAsSystemUser()>
<com.android.keyguard.KeyguardPINView: void showUsabilityHint()>
<com.android.systemui.statusbar.phone.StatusBar: void requestFaceAuth()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean onKeyDown(int,android.view.KeyEvent)>
<com.android.photos.views.TiledImageRenderer: int getViewWidth()>
<com.android.systemui.statusbar.notification.collection.ShadeListBuilder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.plugins.qs.QSIconView: android.view.View getIconView()>
<com.android.settingslib.widget.settingsspinner.SettingsSpinner: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.FlingAnimationUtils.Builder: com.android.systemui.statusbar.FlingAnimationUtils.Builder setSpeedUpFactor(float)>
<com.android.gallery3d.exif.ExifInterface: java.lang.Integer getTagIntValue(int)>
<com.android.packageinstaller.UninstallerActivity: com.android.packageinstaller.UninstallerActivity.DialogInfo getDialogInfo()>
<com.android.systemui.statusbar.NotificationShelf: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)>
<com.android.wallpapercropper.WallpaperCropActivity.OnBitmapCroppedHandler: void onBitmapCropped(byte[])>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPackageSuspended(android.content.ComponentName,java.lang.String,java.lang.String)>
<com.android.server.locksettings.ManagedProfilePasswordCache: void storePassword(int,com.android.internal.widget.LockscreenCredential)>
<com.android.server.display.utils.AmbientFilterFactory: com.android.server.display.utils.AmbientFilter createColorTemperatureFilter(java.lang.String,android.content.res.Resources)>
<com.android.externalstorage.ExternalStorageProvider: android.database.Cursor queryRoots(java.lang.String[])>
<com.android.systemui.car.navigationbar.CarNavigationBarController: void showAllKeyguardButtons(boolean)>
<com.android.server.media.MediaSession2Record: void dump(java.io.PrintWriter,java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: boolean isContentViewInactive(int)>
<com.android.settingslib.notification.EnableZenModeDialog: java.lang.String getTime(long,long)>
<com.android.systemui.qs.PageIndicator: void setNumPages(int,int)>
<com.android.systemui.qs.external.TileLifecycleManager: void binderDied()>
<com.android.commands.content.Content: void main(java.lang.String[])>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onScreenTurningOn()>
<com.android.server.pm.ShortcutService.Lifecycle: void <init>(android.content.Context)>
<com.android.systemui.qs.external.TileServiceManager: void setShowingDialog(boolean)>
<com.android.systemui.statusbar.notification.row.PartialConversationInfo: boolean handleCloseControls(boolean,boolean)>
<com.android.settingslib.bluetooth.MapProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)>
<com.android.settingslib.widget.AnimatedImageView: void onDetachedFromWindow()>
<com.android.settingslib.suggestions.SuggestionControllerMixinCompat: void onLoadFinished(androidx.loader.content.Loader,java.util.List)>
<android.net.ip.IpClientCallbacks: void onIpClientCreated(android.net.ip.IIpClient)>
<com.android.systemui.statusbar.HeadsUpStatusBarView: void onLayout(boolean,int,int,int,int)>
<com.android.systemui.statusbar.phone.StatusBar: boolean headsUpShouldBeVisible()>
<com.android.systemui.statusbar.NotificationLifetimeExtender: boolean shouldExtendLifetime(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.policy.UserSwitcherController: void switchTo(com.android.systemui.statusbar.policy.UserSwitcherController.UserRecord)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone.HeadsUpEntryPhone: long calculateFinishTime()>
<com.android.systemui.qs.QSPanel: com.android.systemui.qs.QSPanel.TileRecord addTile(com.android.systemui.plugins.qs.QSTile,boolean)>
<com.android.systemui.statusbar.policy.BluetoothController: boolean isBluetoothAudioActive()>
<com.android.systemui.car.userswitcher.UserGridRecyclerView.UserRecord: void <init>(android.content.pm.UserInfo,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileContactsSearchDisabledForUser(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onThemeChanged()>
<com.android.uiautomator.core.UiDevice: java.lang.String getLastTraversedText()>
<com.android.server.rollback.AppDataRollbackHelper: void destroyApexDeSnapshots(int)>
<com.android.systemui.statusbar.phone.ShadeController: void goToLockedShade(android.view.View)>
<android.graphics.perftests.RenderNodePerfTest: void testMeasureRenderNodeJniOverhead()>
<com.android.systemui.qs.QuickQSPanel: void onDetachedFromWindow()>
<com.android.systemui.HardwareBgDrawable: void setCutPoint(int)>
<com.android.systemui.qs.external.TileServiceManager: android.service.quicksettings.IQSTileService getTileService()>
<android.net.wifi.WifiManager: void removeOnWifiUsabilityStatsListener(android.net.wifi.WifiManager.OnWifiUsabilityStatsListener)>
<com.android.systemui.car.navigationbar.CarNavigationBarController: void toggleAllNotificationsUnseenIndicator(boolean,boolean)>
<com.android.server.pm.LauncherAppsService: void <init>(android.content.Context)>
<com.android.server.ConnectivityService: boolean prepareVpn(java.lang.String,java.lang.String,int)>
<com.android.systemui.statusbar.notification.collection.NotifInflaterImpl: void inflateViews(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.collection.inflation.NotifInflater.InflationCallback)>
<android.net.wifi.SoftApConfiguration: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.policy.KeyButtonView: boolean performAccessibilityActionInternal(int,android.os.Bundle)>
<com.android.server.slice.SliceProviderPermissions.SliceAuthority: java.lang.String getFileName()>
<com.android.networkstack.tethering.OffloadController.Dependencies: com.android.networkstack.tethering.TetheringConfiguration getTetherConfig()>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.net.wifi.WifiConfiguration: java.lang.String getSsidAndSecurityTypeString()>
<android.net.wifi.hotspot2.PasspointConfiguration: void setPolicy(android.net.wifi.hotspot2.pps.Policy)>
<com.android.server.appop.AppOpsService: boolean isOperationActive(int,int,java.lang.String)>
<android.net.wifi.ScanResult.InformationElement: void <init>(android.net.wifi.ScanResult.InformationElement)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setOem(boolean)>
<android.net.wifi.RttManager.ParcelableRttResults: void <init>(android.net.wifi.RttManager.RttResult[])>
<com.android.systemui.qs.tiles.DndTile: java.lang.String composeChangeAnnouncement()>
<com.android.systemui.statusbar.TransformableView: void transformFrom(com.android.systemui.statusbar.TransformableView,float)>
<com.android.systemui.statusbar.notification.row.NotificationInfo: void setGutsParent(com.android.systemui.statusbar.notification.row.NotificationGuts)>
<com.android.systemui.statusbar.DragDownHelper.DragDownCallback: boolean onDraggedDown(android.view.View,int)>
<com.android.server.policy.WindowManagerPolicy.StartingSurface: void remove()>
<com.android.systemui.screenrecord.ScreenInternalAudioRecorder: void end()>
<com.android.systemui.statusbar.phone.StatusBar: boolean onMenuPressed()>
<com.android.systemui.statusbar.notification.NotificationEntryListener: void onPendingEntryAdded(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<javax.microedition.khronos.opengles.GL10: void glLightModelf(int,float)>
<com.android.settingslib.dream.DreamBackend: void <init>(android.content.Context)>
<com.android.systemui.qs.QSDetail: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.phone.KeyguardClockPositionAlgorithm: float getMinStackScrollerPadding()>
<com.android.systemui.qs.QSPanel: void setListening(boolean,boolean)>
<javax.obex.ApplicationParameter: void addAPPHeader(byte,byte,byte[])>
<com.android.printspooler.model.PrintSpoolerService: void setStatus(android.print.PrintJobId,java.lang.CharSequence)>
<com.android.systemui.media.dialog.MediaOutputBaseDialog: void dismissDialog()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: boolean glIsRenderbufferOES(int)>
<com.android.systemui.accessibility.SystemActions: void register(int)>
<com.android.systemui.statusbar.phone.StatusBarIconController: void setExternalIcon(java.lang.String)>
<com.android.systemui.assist.ui.InvocationLightsView: void setColors(java.lang.Integer)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator withStartVelocity(float)>
<android.processor.view.inspector.InspectableClassModel: void <init>(com.squareup.javapoet.ClassName)>
<com.android.settingslib.deviceinfo.AbstractSimStatusImeiInfoPreferenceController: void <init>(android.content.Context)>
<com.android.settingslib.graph.SignalDrawable: int getEmptyState(int)>
<com.android.providers.settings.SettingsProvider: int makeKey(int,int)>
<com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.NotifSection: boolean isInSection(com.android.systemui.statusbar.notification.collection.ListEntry)>
<com.android.server.adb.AdbService: void systemReady()>
<com.android.systemui.wm.SystemWindows: void addView(android.view.View,android.view.WindowManager.LayoutParams,int,int)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setHideSensitiveForIntrinsicHeight(boolean)>
<com.android.gallery3d.glrenderer.GLES20IdImpl: void glDeleteTextures(javax.microedition.khronos.opengles.GL11,int,int[],int)>
<com.android.systemui.statusbar.AlphaOptimizedView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest: android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest newInstance(java.lang.String)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationCustomViewWrapper: boolean shouldClearBackgroundOnReapply()>
<com.android.systemui.plugins.qs.QS: void animateHeaderSlidingIn(long)>
<com.android.printservice.recommendation.plugin.xerox.XeroxPrintServiceRecommendationPlugin: void start(com.android.printservice.recommendation.PrintServicePlugin.PrinterDiscoveryCallback)>
<com.android.packageinstaller.InstallInstalling: void onBackPressed()>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>
<com.android.systemui.statusbar.phone.ShadeControllerImpl: void addPostCollapseAction(java.lang.Runnable)>
<com.android.server.pm.dex.DexoptUtils: java.lang.String getClassLoaderContext(android.content.pm.SharedLibraryInfo)>
<com.android.server.audio.AudioService: void unregisterAudioPolicy(android.media.audiopolicy.IAudioPolicyCallback)>
<com.android.settingslib.Utils: java.lang.String getBatteryStatus(android.content.Context,android.content.Intent)>
<com.android.systemui.SystemUIFactory.ContextHolder: void <init>(android.content.Context)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void animateToFullShade(long)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void handleShowShutdownUi(boolean,java.lang.String)>
<com.android.settingslib.wifi.AccessPoint: boolean isActive()>
<com.android.systemui.statusbar.phone.StatusBar: void updateTheme()>
<com.android.nfc_extras.EeIOException: void <init>(java.lang.String)>
<android.media.MediaParser.OutputConsumer: void onSampleDataFound(int,android.media.MediaParser.InputReader)>
<com.android.networkstack.tethering.BpfCoordinator.Dependencies: android.app.usage.NetworkStatsManager getNetworkStatsManager()>
<com.android.systemui.car.statusbar.DozeServiceHost: void stopDozing()>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy: void setWifiIndicators(boolean,com.android.systemui.statusbar.policy.NetworkController.IconState,com.android.systemui.statusbar.policy.NetworkController.IconState,boolean,boolean,java.lang.String,boolean,java.lang.String)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setLayoutMinHeight(int)>
<android.net.wifi.rtt.ResponderLocation: boolean isLciSubelementValid()>
<com.android.systemui.doze.DozeWallpaperState: void transitionTo(com.android.systemui.doze.DozeMachine.State,com.android.systemui.doze.DozeMachine.State)>
<com.android.server.accessibility.SystemActionPerformer: void registerSystemAction(int,android.app.RemoteAction)>
<com.android.media.remotedisplay.RemoteDisplayProvider: java.util.Collection getDisplays()>
<com.android.settingslib.Utils: int getColorStateListDefaultColor(android.content.Context,int)>
<com.android.settingslib.media.MediaDevice: boolean isConnected()>
<com.android.systemui.glwallpaper.EglHelper: boolean createEglContext()>
<com.android.systemui.assist.ui.EdgeLight: void <init>(com.android.systemui.assist.ui.EdgeLight)>
<com.android.server.display.RampAnimator.Listener: void onAnimationEnd()>
<com.android.systemui.appops.AppOpsControllerImpl: java.util.List getActiveAppOpsForUser(int)>
<com.android.server.policy.BurnInProtectionHelper: void dump(java.lang.String,java.io.PrintWriter)>
<com.android.server.infra.ServiceNameResolver: boolean setDefaultServiceEnabled(int,boolean)>
<android.net.wifi.WifiScanner.OperationResult: void writeToParcel(android.os.Parcel,int)>
<com.android.server.NsdService: com.android.server.NsdService create(android.content.Context)>
<com.android.server.pm.parsing.PackageInfoUtils: int appInfoFlags(int,com.android.server.pm.PackageSetting)>
<android.net.util.TetheringUtils.ForwardedStats: android.net.util.TetheringUtils.ForwardedStats add(android.net.util.TetheringUtils.ForwardedStats)>
<com.android.server.RescueParty.RescuePartyObserver: java.lang.String getName()>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set getAcceptedCaCertificates(android.os.UserHandle)>
<com.android.server.pm.UserRestrictionsUtils: android.os.Bundle readRestrictions(org.xmlpull.v1.XmlPullParser)>
<com.android.settingslib.deviceinfo.AbstractIpAddressPreferenceController: void updateConnectivity()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setHasSentReply()>
<com.android.systemui.plugins.NotificationListenerController: android.service.notification.StatusBarNotification[] getActiveNotifications(android.service.notification.StatusBarNotification[])>
<com.android.systemui.media.NotificationPlayer: void onCompletion(android.media.MediaPlayer)>
<com.android.settingslib.media.MediaDevice: android.graphics.drawable.Drawable getIcon()>
<android.net.wifi.WifiManager: void registerNetworkRequestMatchCallback(java.util.concurrent.Executor,android.net.wifi.WifiManager.NetworkRequestMatchCallback)>
<com.android.systemui.statusbar.phone.DozeScrimController: com.android.systemui.statusbar.phone.ScrimController.Callback getScrimCallback()>
<com.android.systemui.pip.tv.PipControlsView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.shortcut.ShortcutKeyServiceProxy: void notifyShortcutKeyPressed(long)>
<com.android.systemui.util.sensors.ThresholdSensor: void pause()>
<com.android.server.LooperStatsService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<com.android.systemui.classifier.FalsingManagerFake: void cleanup()>
<com.android.server.policy.WindowManagerPolicy: void finishedGoingToSleep(int)>
<com.android.systemui.qs.QSAnimator: void onViewDetachedFromWindow(android.view.View)>
<com.android.server.usb.descriptors.Usb10ASFormatII: int[] getSampleRates()>
<android.media.Session2Command: int getCommandCode()>
<com.android.systemui.car.window.SystemUIOverlayWindowManager: void <init>(android.content.Context,java.util.Map,com.android.systemui.car.window.OverlayViewGlobalStateController)>
<com.android.companiondevicemanager.DeviceChooserActivity: void onStop()>
<com.android.server.display.DisplayModeDirector: void setDesiredDisplayModeSpecsListener(com.android.server.display.DisplayModeDirector.DesiredDisplayModeSpecsListener)>
<com.android.server.pm.PackageManagerService.Injector: java.lang.Object getInstallLock()>
<com.android.server.pm.permission.PermissionsState: boolean isPermissionReviewRequired(int)>
<com.android.systemui.qs.TileLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.security.PublicKey getRecoveryServicePublicKey(int,int)>
<com.android.settingslib.drawable.UserIconDrawable: int getOpacity()>
<android.net.wifi.IScoreUpdateObserver: void triggerUpdateOfWifiUsabilityStats(int)>
<com.android.systemui.shared.recents.utilities.BitmapUtil: android.graphics.Bitmap bundleToHardwareBitmap(android.os.Bundle)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void initializeTextureSize(com.android.gallery3d.glrenderer.BasicTexture,int,int)>
<com.android.systemui.statusbar.SuperStatusBarViewFactory: com.android.systemui.statusbar.NotificationShelf getNotificationShelf(android.view.ViewGroup)>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void onBluetoothStateChange(boolean)>
<com.android.systemui.plugins.qs.QSTile.Icon: android.graphics.drawable.Drawable getInvisibleDrawable(android.content.Context)>
<com.android.uiautomator.testrunner.UiAutomatorTestCase: void sleep(long)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void dump(java.io.PrintWriter)>
<com.android.settingslib.notification.ZenDurationDialog: void <init>(android.content.Context)>
<com.android.uiautomator.core.UiObject: boolean clickTopLeft()>
<com.android.server.pm.PackageManagerService: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator withPositionStartVelocities(float,float)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView: void onAttachedToWindow()>
<javax.obex.ServerOperation: void close()>
<com.android.server.role.RoleUserState: java.lang.String getPackagesHash()>
<com.android.systemui.media.NotificationPlayer: void stop()>
<com.android.printspooler.ui.PrintActivity: void onRequestContentUpdate()>
<com.android.settingslib.bluetooth.BluetoothCallback: void onDeviceBondStateChanged(com.android.settingslib.bluetooth.CachedBluetoothDevice,int)>
<com.android.uiautomator.core.ShellUiAutomatorBridge: long getSystemLongPressTime()>
<com.android.systemui.wm.DisplayImeController: com.android.internal.view.IInputMethodManager getImms()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void updateExpandability(boolean,android.view.View.OnClickListener)>
<com.android.systemui.car.navigationbar.CarNavigationBarController: void registerNotificationController(com.android.systemui.car.navigationbar.CarNavigationBarController.NotificationsShadeController)>
<com.android.gallery3d.glrenderer.GLPaint: int getColor()>
<com.android.systemui.statusbar.phone.StatusBarIconList: void <init>(java.lang.String[])>
<com.android.systemui.statusbar.phone.NavigationBarView: com.android.systemui.statusbar.phone.NavigationBarTransitions getBarTransitions()>
<com.android.server.statusbar.StatusBarManagerService: void remTile(android.content.ComponentName)>
<com.android.statementservice.retriever.URLFetcher: java.lang.String inputStreamToString(java.io.InputStream,int,long)>
<com.android.server.devicepolicy.DevicePolicyManagerService.Lifecycle: void <init>(android.content.Context)>
<com.google.android.startop.iorap.AppLaunchEvent.ActivityLaunchFinished: void <init>(long,byte[],long)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: boolean userAllowsNotificationsInPublic(int)>
<com.android.systemui.car.window.OverlayViewController: int getInsetTypesToFit()>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void onChangeAllowed()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setLaunchAffordanceListener(java.util.function.Consumer)>
<com.android.systemui.pip.phone.PipAccessibilityInteractionConnection: void findFocus(long,int,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec)>
<com.android.server.wallpaper.WallpaperManagerService.Lifecycle: void onBootPhase(int)>
<com.android.server.pm.permission.PermissionManagerService: void grantDefaultPermissionsToEnabledTelephonyDataServices(java.lang.String[],int)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void translate(float,float,float)>
<com.android.printspooler.model.PrintSpoolerService: boolean setPrintJobTag(android.print.PrintJobId,java.lang.String)>
<com.android.packageinstaller.PackageInstallerActivity.ExternalSourcesBlockedDialog: android.app.Dialog createDialog(java.lang.CharSequence)>
<com.android.server.input.InputManagerService: android.hardware.input.TouchCalibration getTouchCalibrationForInputDevice(java.lang.String,int)>
<com.android.server.compat.PlatformCompatNative: boolean isChangeEnabledByPackageName(long,java.lang.String,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void requestDisallowDismiss()>
<com.android.hotspot2.osulogin.OsuLoginActivity: void onCreate(android.os.Bundle)>
<android.net.wifi.SoftApConfiguration: int hashCode()>
<com.android.uiautomator.core.UiObject: boolean swipeRight(int)>
<com.android.server.pm.PackageSettingBase: void setIsOrphaned(boolean)>
<android.net.wifi.hotspot2.PasspointConfiguration: void setServiceFriendlyNames(java.util.Map)>
<com.android.systemui.util.concurrency.RepeatableExecutor: java.lang.Runnable executeRepeatedly(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>
<com.android.server.pm.Installer: void linkFile(java.lang.String,java.lang.String,java.lang.String)>
<com.android.systemui.car.window.OverlayPanelViewController: boolean isClosingAction(android.view.MotionEvent)>
<android.net.ip.IpClientManager: boolean notifyPreconnectionComplete(boolean)>
<com.android.server.locksettings.LockSettingsService: void userPresent(int)>
<com.android.server.soundtrigger_middleware.HalException: java.lang.String toString()>
<com.android.systemui.statusbar.phone.NavigationBarView: void setNavigationIconHints(int)>
<com.android.systemui.statusbar.notification.stack.ViewState: void applyToView(android.view.View)>
<com.android.systemui.statusbar.notification.collection.init.NotifPipelineInitializer: void initialize(com.android.systemui.statusbar.NotificationListener,com.android.systemui.statusbar.notification.collection.inflation.NotificationRowBinderImpl,com.android.systemui.statusbar.notification.stack.NotificationListContainer)>
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: android.net.wifi.aware.WifiAwareNetworkSpecifier build()>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onDevicePolicyManagerStateChanged()>
<com.android.systemui.statusbar.policy.AccessibilityManagerWrapper: void removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener)>
<com.android.server.biometrics.BiometricServiceBase.BiometricServiceListener: void onAuthenticationFailedInternal()>
<com.android.systemui.statusbar.notification.row.RowContentBindParams: boolean useIncreasedHeight()>
<com.android.server.ConnectivityService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void updateHeaderForExpansion(boolean)>
<com.android.gallery3d.glrenderer.BasicTexture: boolean isFlippedVertically()>
<com.android.systemui.ScreenDecorations.DisplayCutoutView: void setRotation(int)>
<com.android.systemui.qs.QSDetail.Callback: void onToggleStateChanged(boolean)>
<android.net.wifi.hotspot2.pps.UpdateParameter: void setRestriction(java.lang.String)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGeniv(int,int,int[],int)>
<com.android.gallery3d.glrenderer.GLCanvas: void drawRect(float,float,float,float,com.android.gallery3d.glrenderer.GLPaint)>
<android.net.wifi.WifiInfo: int getIpAddress()>
<com.android.uiautomator.testrunner.UiAutomatorTestCase: com.android.uiautomator.core.UiDevice getUiDevice()>
<com.android.systemui.qs.QSPanel: com.android.systemui.qs.QSTileRevealController getQsTileRevealController()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isExpanded()>
<com.android.systemui.statusbar.phone.StatusBar: void animateCollapsePanels(int,boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setHideAmount(float,float)>
<com.android.keyguard.KeyguardStatusView: int getLogoutButtonHeight()>
<com.android.systemui.statusbar.phone.NavigationBarInflaterView: void onFinishInflate()>
<com.android.systemui.statusbar.phone.StatusBar: void onKeyguardViewManagerStatesUpdated()>
<com.android.systemui.statusbar.phone.ButtonDispatcher: android.view.View getCurrentView()>
<com.android.server.pm.parsing.PackageCacher: void cleanCachedResult(java.io.File)>
<com.android.printspooler.ui.SelectPrinterActivity: boolean onContextItemSelected(android.view.MenuItem)>
<com.android.server.accessibility.MagnificationController.ControllerContext: com.android.server.wm.WindowManagerInternal getWindowManager()>
<javax.microedition.khronos.egl.EGL10: boolean eglQuerySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,int,int[])>
<com.android.systemui.shared.system.TransactionCompat: com.android.systemui.shared.system.TransactionCompat show(com.android.systemui.shared.system.SurfaceControlCompat)>
<android.media.Session2Link: void disconnect(android.media.Controller2Link,int)>
<com.android.printservice.recommendation.util.Preconditions: float[] checkArrayElementsInRange(float[],float,float,java.lang.String)>
<com.android.server.biometrics.EnumerateClient: boolean onEnumerationResult(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.systemui.plugins.qs.QSTile.Icon: int hashCode()>
<com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl: com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl create(android.content.Context)>
<android.net.wifi.SoftApConfiguration.Builder: android.net.wifi.SoftApConfiguration.Builder setBssid(android.net.MacAddress)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void addChildNotification(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.UiModeManagerInternal: boolean isNightMode()>
<android.net.wifi.aware.ConfigRequest.Builder: android.net.wifi.aware.ConfigRequest.Builder setSupport5gBand(boolean)>
<com.android.systemui.util.AutoMarqueeTextView: void onAttachedToWindow()>
<com.android.server.ConnectivityService: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void setLocationExtraPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.PackagesProvider)>
<com.android.systemui.usb.UsbAccessoryUriActivity: void onCreate(android.os.Bundle)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: void setHiSyncId(long)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void sendAccessibilityEvent(int)>
<com.android.server.accessibility.BaseEventStreamTransformation: void setNext(com.android.server.accessibility.EventStreamTransformation)>
<com.android.systemui.pip.tv.PipControlButtonView: void setText(int)>
<com.android.backupconfirm.BackupRestoreConfirmation: java.lang.Object onRetainNonConfigurationInstance()>
<com.android.systemui.qs.QSFooter: void setListening(boolean)>
<com.android.server.biometrics.BiometricServiceBase: void cancelEnrollmentInternal(android.os.IBinder)>
<com.android.systemui.util.wakelock.KeepAwakeAnimationListener: void onAnimationStart(android.animation.Animator)>
<com.android.server.audio.AudioSystemAdapter: int getDeviceConnectionState(int,java.lang.String)>
<javax.obex.ClientOperation: void sendHeaders(javax.obex.HeaderSet)>
<com.android.systemui.statusbar.phone.BarTransitions: void destroy()>
<com.android.localtransport.LocalTransport: int initializeDevice()>
<com.android.systemui.keyguard.WorkLockActivity: void setTaskDescription(android.app.ActivityManager.TaskDescription)>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean isSummaryWithChildren()>
<com.android.systemui.util.DeviceConfigProxy: boolean setProperty(java.lang.String,java.lang.String,java.lang.String,boolean)>
<com.android.settingslib.Utils: android.content.res.ColorStateList getColorAttr(android.content.Context,int)>
<com.android.systemui.statusbar.phone.StatusBar: void setInteracting(int,boolean)>
<com.android.systemui.wm.DisplayImeController.PerDisplay: void register()>
<com.android.settingslib.deviceinfo.StorageManagerVolumeProvider: void <init>(android.os.storage.StorageManager)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void onUnlockHintStarted()>
<com.android.powermodel.AppPower.Builder: com.android.powermodel.AppPower build()>
<com.android.keyguard.KeyguardSliceView: void refresh()>
<com.android.systemui.statusbar.phone.BarTransitions: java.lang.String modeToString(int)>
<com.android.systemui.qs.tiles.UiModeNightTile: int getMetricsCategory()>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams: void applyTo(android.view.SurfaceControl.Transaction)>
<com.android.systemui.plugins.DozeServicePlugin: void onDreamingStarted()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: android.app.NotificationChannel getChannel()>
<com.android.printspooler.model.PageContentRepository: void releasePageContentProvider(com.android.printspooler.model.PageContentRepository.PageContentProvider)>
<com.android.settingslib.inputmethod.InputMethodPreference: android.view.inputmethod.InputMethodInfo getInputMethodInfo()>
<com.android.settingslib.applications.ApplicationsState.Session: void onResume()>
<com.android.uiautomator.core.UiDevice: void setOrientationLeft()>
<com.android.systemui.statusbar.NotificationShelf: int getNotificationMergeSize()>
<lockedregioncodeinjection.LockTargetState: void <init>(org.objectweb.asm.Type,java.util.List)>
<com.android.server.usb.descriptors.Usb20ASFormatI: void <init>(int,byte,byte,byte,int)>
<com.android.systemui.tuner.CustomListPreference: void onDialogStateRestored(android.app.DialogFragment,android.app.Dialog,android.os.Bundle)>
<com.android.server.audio.SystemServerAdapter: void sendDeviceBecomingNoisyIntent()>
<com.android.server.testing.shadows.ShadowBackupDataOutput: java.io.ObjectOutputStream getOutputStream()>
<com.android.server.audio.AudioService: int setPreferredDeviceForStrategy(int,android.media.AudioDeviceAttributes)>
<com.android.systemui.statusbar.phone.NotificationsQuickSettingsContainer: void onDetachedFromWindow()>
<com.android.gallery3d.glrenderer.GLId: void glGenBuffers(int,int[],int)>
<com.android.systemui.statusbar.phone.BarTransitions.BarBackgroundDrawable: void setFrame(android.graphics.Rect)>
<javax.obex.Operation: int getMaxPacketSize()>
<com.android.systemui.ActivityStarterDelegate: void startActivity(android.content.Intent,boolean,boolean,int)>
<com.android.server.NetworkManagementService: void setAllowOnlyVpnForUids(boolean,android.net.UidRange[])>
<com.android.externalstorage.ExternalStorageProvider: android.database.Cursor querySearchDocuments(java.lang.String,java.lang.String[],android.os.Bundle)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setIntrinsicPadding(int)>
<com.android.systemui.plugins.ActivityStarter: void startActivity(android.content.Intent,boolean,boolean,int)>
<com.android.settingslib.applications.ApplicationsState: void invalidatePackage(java.lang.String,int)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getNativeLibraryDir()>
<com.android.server.usb.descriptors.report.UsbStrings: java.lang.String getAudioFormatName(int)>
<com.android.systemui.statusbar.phone.StatusBar: android.os.Bundle getActivityOptions(android.view.RemoteAnimationAdapter)>
<com.android.settingslib.bluetooth.HeadsetProfile: int getAudioState(android.bluetooth.BluetoothDevice)>
<com.android.server.pm.UserManagerService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<com.android.systemui.statusbar.phone.NavigationBarView: boolean isRecentsButtonVisible()>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void onBatteryLevelChanged(int,boolean,boolean)>
<android.net.wifi.hotspot2.PasspointConfiguration: void setAutojoinEnabled(boolean)>
<com.android.systemui.car.window.OverlayViewController: int getFocusAreaViewId()>
<com.android.systemui.car.window.OverlayPanelViewController: void onAnimateExpandPanel()>
<com.android.commands.hid.Event.Reader: void <init>(java.io.InputStreamReader)>
<com.android.settingslib.RestrictedPreferenceHelper: boolean performClick()>
<com.android.systemui.assist.ui.DisplayUtils: int getHeight(android.content.Context)>
<com.android.server.audio.MediaFocusControl: void <init>(android.content.Context,com.android.server.audio.PlayerFocusEnforcer)>
<com.android.settingslib.widget.ActionButtonsPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.app.usage.UsageStatsManagerInternal: boolean updatePackageMappingsData()>
<com.android.systemui.plugins.ActivityStarter: void postStartActivityDismissingKeyguard(android.content.Intent,int)>
<com.android.systemui.wm.DisplayImeController.PerDisplay: void topFocusedWindowChanged(java.lang.String)>
<com.android.systemui.statusbar.StatusBarIconView: void getDrawingRect(android.graphics.Rect)>
<android.net.wifi.WifiManager.MulticastLock: void acquire()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isShowingIcon()>
<com.android.systemui.recents.RecentsOnboarding: boolean show(int)>
<com.android.systemui.shared.system.SurfaceControlCompat: void <init>(android.view.View)>
<com.android.settingslib.utils.AsyncLoaderCompat: void <init>(android.content.Context)>
<com.android.server.display.color.DisplayTransformManager: void setDaltonizerMode(int)>
<com.android.systemui.util.leak.TrackedGarbage: void <init>(com.android.systemui.util.leak.TrackedCollections)>
<com.android.systemui.statusbar.AlphaOptimizedView: boolean hasOverlappingRendering()>
<com.android.server.slice.SliceProviderPermissions.SliceAuthority: void readFrom(org.xmlpull.v1.XmlPullParser)>
<com.android.systemui.pip.tv.PipControlsViewController: void setActions(java.util.List)>
<com.android.systemui.statusbar.KeyguardIndicationController: void onUnlockedChanged()>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLetters(android.content.ComponentName,int,boolean)>
<android.net.wifi.p2p.WifiP2pDeviceList: void <init>(android.net.wifi.p2p.WifiP2pDeviceList)>
<com.android.settingslib.RestrictedPreference: void performClick()>
<com.android.server.inputmethod.MultiClientInputMethodManagerService.Lifecycle: void onUnlockUser(int)>
<com.android.keyguard.KeyguardSimPukView: void onFinishInflate()>
<android.net.wifi.IWifiConnectedNetworkScorer: void onSetScoreUpdateObserver(android.net.wifi.IScoreUpdateObserver)>
<com.android.settingslib.wifi.WifiEntryPreference: void onClick(android.view.View)>
<com.android.server.audio.PlaybackActivityMonitor: java.util.HashMap getAllAllowedCapturePolicies()>
<com.android.systemui.shared.plugins.PluginManagerImpl: boolean dependsOn(com.android.systemui.plugins.Plugin,java.lang.Class)>
<com.android.systemui.util.InjectionInflationController.ViewInstanceCreator: com.android.systemui.qs.customize.QSCustomizer createQSCustomizer()>
<com.android.server.compat.CompatChange: void <init>(long)>
<com.android.server.locksettings.recoverablekeystore.WrappedKey: byte[] getKeyMaterial()>
<com.android.systemui.statusbar.NotificationRemoteInputManager.RemoteInputHistoryExtender: void setShouldManageLifetime(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.systemui.statusbar.phone.NavigationBarView: void setWakeAndUnlocking(boolean)>
<com.android.systemui.statusbar.notification.collection.NotifPipeline: java.util.Collection getAllNotifs()>
<com.android.printspooler.ui.PageAdapter: void <init>(android.content.Context,com.android.printspooler.ui.PageAdapter.ContentCallbacks,com.android.printspooler.ui.PageAdapter.PreviewArea)>
<com.android.systemui.statusbar.NotificationRemoteInputManager.RemoteInputActiveExtender: boolean shouldExtendLifetime(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.settingslib.bluetooth.LocalBluetoothProfile: boolean isProfileReady()>
<com.android.server.ConnectivityService: android.net.NetworkInfo[] getAllNetworkInfo()>
<javax.microedition.khronos.egl.EGL10: boolean eglQueryContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext,int,int[])>
<com.android.systemui.qs.tiles.DataSaverTile: void onDataSaverChanged(boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void applyViewState()>
<android.content.pm.PackageManagerInternal: android.util.ArraySet getDisabledComponents(java.lang.String,int)>
<com.android.systemui.statusbar.NotificationPresenter: void updateMediaMetaData(boolean,boolean)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: com.android.systemui.statusbar.RemoteInputController.Delegate createRemoteInputDelegate()>
<android.media.Session2Command.Result: void <init>(int,android.os.Bundle)>
<com.android.systemui.statusbar.phone.FloatingRotationButton: void updateIcon()>
<com.android.systemui.assist.DeviceConfigHelper: int getInt(java.lang.String,int)>
<com.android.printspooler.util.ApprovedPrintServices: void <init>(android.content.Context)>
<com.android.server.pm.PackageManagerService: void setUpdateAvailable(java.lang.String,boolean)>
<android.net.wifi.WifiClient: int describeContents()>
<android.net.wifi.WifiNetworkConnectionStatistics: int describeContents()>
<com.android.server.people.data.DataManager: com.android.server.people.data.PackageData getPackage(java.lang.String,int)>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: void notifyKeyguardGoingAway(boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int[] translateIdAttestationFlags(int)>
<com.android.systemui.tracing.ProtoTracer: com.android.systemui.tracing.nano.SystemUiTraceFileProto getEncapsulatingTraceProto()>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder: com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder withRelativeLayerTo(android.view.SurfaceControl,int)>
<com.android.systemui.qs.tiles.NightDisplayTile: void handleClick()>
<com.android.systemui.statusbar.FlingAnimationUtils: void apply(android.animation.Animator,float,float,float,float)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: void setShouldLog(boolean)>
<com.android.settingslib.graph.BatteryMeterDrawableBase: int getOpacity()>
<android.os.CpuUsageTrackingPerfTest: void timeReadThreadProcDirectly()>
<com.android.server.NetworkScoreService.Lifecycle: void <init>(android.content.Context)>
<com.android.uiautomator.core.Tracer: void trace(java.lang.Object[])>
<com.android.systemui.statusbar.CommandQueue: void removeCallback(com.android.systemui.statusbar.CommandQueue.Callbacks)>
<com.android.server.timezone.RulesManagerService.Lifecycle: void <init>(android.content.Context)>
<com.android.server.audio.AudioService: void setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(android.bluetooth.BluetoothDevice,int,int,boolean,int)>
<com.android.server.biometrics.face.FaceService: com.android.server.biometrics.Constants getConstants()>
<com.android.soundpicker.RingtonePickerActivity: void onPause()>
<com.android.server.infra.AbstractPerUserSystemService: boolean isEnabledLocked()>
<com.android.server.uri.UriGrantsManagerService: android.content.pm.ParceledListSlice getGrantedUriPermissions(java.lang.String,int)>
<android.media.Session2CommandGroup: java.util.Set getCommands()>
<com.android.media.tv.remoteprovider.TvRemoteProvider: void sendPointerUp(android.os.IBinder,int)>
<com.android.systemui.statusbar.phone.NavigationBarInflaterView: java.lang.String getDefaultLayout()>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: void snooze()>
<com.android.gallery3d.exif.ExifInterface: java.io.OutputStream getExifWriterStream(java.io.OutputStream)>
<com.android.systemui.usb.UsbDebuggingSecondaryUserActivity: void onStart()>
<com.android.settingslib.bluetooth.CachedBluetoothDeviceManager: boolean onProfileConnectionStateChangedIfProcessed(com.android.settingslib.bluetooth.CachedBluetoothDevice,int)>
<com.android.settingslib.bluetooth.HeadsetProfile: android.bluetooth.BluetoothDevice getActiveDevice()>
<com.android.systemui.plugins.FalsingManager: void onNotificationDoubleTap(boolean,float,float)>
<android.content.pm.PackageManagerInternal: void migrateLegacyObbData()>
<com.android.server.usb.descriptors.Usb10ASFormatI: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<javax.microedition.khronos.opengles.GL11Ext: void glEnableClientState(int)>
<com.android.gallery3d.exif.ExifTag: boolean isValidType(short)>
<com.android.systemui.statusbar.phone.StatusBarIconController.DarkIconManager: void <init>(android.widget.LinearLayout,com.android.systemui.statusbar.CommandQueue)>
<com.android.server.ConnectivityService: void handleUpdateLinkProperties(com.android.server.connectivity.NetworkAgentInfo,android.net.LinkProperties)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void setClipTopAmount(int)>
<com.android.systemui.statusbar.AlphaOptimizedFrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.DiskStatsService: void <init>(android.content.Context)>
<com.android.keyguard.KeyguardPasswordView: java.lang.CharSequence getTitle()>
<android.media.Session2Token: java.lang.String getPackageName()>
<com.android.systemui.statusbar.notification.stack.AmbientState: int getInnerHeight(boolean)>
<com.android.systemui.qs.tiles.NightDisplayTile: android.metrics.LogMaker populate(android.metrics.LogMaker)>
<com.android.systemui.qs.tiles.CastTile: void handleSetListening(boolean)>
<android.net.wifi.aware.DiscoverySession: void setTerminated()>
<com.android.server.DeviceIdleController: java.lang.String[] getUserPowerWhitelistInternal()>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setWpa2EnterpriseConfig(android.net.wifi.WifiEnterpriseConfig)>
<com.android.systemui.statusbar.policy.InflatedSmartReplies.SmartRepliesAndActions: java.util.List getSmartReplies()>
<com.android.keyguard.KeyguardHostView: void reset()>
<com.android.systemui.plugins.OverlayPlugin.Callback: void onHoldStatusBarOpenChange()>
<com.android.systemui.bubbles.BubbleData: java.util.List getBubbles()>
<javax.obex.Operation: javax.obex.HeaderSet getReceivedHeader()>
<com.android.server.BatteryService: void onBootPhase(int)>
<android.app.StatsManager.StatsUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>
<android.net.ip.IpServer: int interfaceType()>
<com.android.keyguard.KeyguardSecurityView: void onResume(int)>
<com.android.server.biometrics.BiometricServiceBase: com.android.server.biometrics.Constants getConstants()>
<com.android.packageinstaller.wear.WearPackageArgs: boolean skipIfSameVersion(android.os.Bundle)>
<com.android.systemui.volume.MediaRouterWrapper: void addCallback(androidx.mediarouter.media.MediaRouteSelector,androidx.mediarouter.media.MediaRouter.Callback,int)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: boolean isHeadsUp()>
<com.android.systemui.volume.VolumeUI: void onConfigurationChanged(android.content.res.Configuration)>
<android.text.StaticLayoutPerfTest: void testDraw_RandomText_NoStyled()>
<android.net.wifi.WifiScanner.PnoSettings: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.policy.SignalController: int getContentDescription()>
<com.android.systemui.stackdivider.Divider: void onDraggingEnd()>
<com.android.systemui.qs.external.CustomTile: java.lang.String getMetricsSpec()>
<com.android.systemui.util.sensors.ProximitySensor: void <init>(com.android.systemui.util.sensors.ThresholdSensor,com.android.systemui.util.sensors.ThresholdSensor,com.android.systemui.util.concurrency.DelayableExecutor)>
<android.multiuser.UserLifecycleTests: void ephemeralUserStopped()>
<com.android.server.autofill.Helper: android.metrics.LogMaker newLogMaker(int,android.content.ComponentName,java.lang.String,int,boolean)>
<com.android.systemui.dagger.SystemUIRootComponent: com.android.systemui.dump.DumpManager createDumpManager()>
<com.android.systemui.util.leak.GarbageMonitor: java.util.List getTrackedProcesses()>
<com.android.server.pm.parsing.PackageCacher: com.android.server.pm.parsing.pkg.ParsedPackage getCachedResult(java.io.File,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void choosePrivateKeyAlias(int,android.net.Uri,java.lang.String,android.os.IBinder)>
<com.android.server.timezonedetector.TimeZoneDetectorCallbackImpl: boolean isDeviceTimeZoneInitialized()>
<com.android.server.pm.PackageSessionProvider: com.android.server.pm.PackageInstallerSession getSession(int)>
<com.android.gallery3d.glrenderer.BasicTexture: void draw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)>
<com.android.systemui.statusbar.policy.KeyguardStateController.Callback: void onUnlockedChanged()>
<com.android.server.biometrics.BiometricService.SettingObserver: void notifyEnabledOnKeyguardCallbacks(int)>
<com.android.server.twilight.TwilightState: java.lang.String toString()>
<com.android.server.IntentResolver: void removeFilter(java.lang.Object)>
<com.google.android.startop.iorap.ActivityInfo: void <init>(java.lang.String,java.lang.String)>
<com.android.server.soundtrigger.SoundTriggerHelper: void onServiceStateChange(int)>
<com.android.server.display.AmbientBrightnessStatsTracker: java.util.ArrayList getUserStats(int)>
<com.android.systemui.statusbar.phone.EdgeBackGestureHandler: void onPluginConnected(com.android.systemui.plugins.NavigationEdgeBackPlugin,android.content.Context)>
<com.android.systemui.qs.tiles.UserDetailView: void <init>(android.content.Context,android.util.AttributeSet)>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLDisplay eglGetDisplay(java.lang.Object)>
<com.android.keyguard.KeyguardSimPinView: int getPromptReasonStringRes(int)>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: java.lang.String getPrimaryVpnName()>
<com.android.systemui.assist.AssistOrbView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.keyguard.KeyguardAbsKeyInputView: int getPromptReasonStringRes(int)>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void abortTransient(int,int[])>
<javax.microedition.khronos.opengles.GL10: void glTexEnvxv(int,int,int[],int)>
<android.net.wifi.WifiManager.ScanResultsCallback: void onScanResultsAvailable()>
<com.android.systemui.tuner.TunablePadding.TunablePaddingService: com.android.systemui.tuner.TunablePadding add(android.view.View,java.lang.String,int,int)>
<com.android.server.NetworkManagementService: void tetherLimitReached(android.net.ITetheringStatsProvider)>
<android.net.wifi.aware.WifiAwareManager: void <init>(android.content.Context,android.net.wifi.aware.IWifiAwareManager)>
<com.android.printspooler.ui.SelectPrinterActivity: void onLoaderReset(android.content.Loader)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout: boolean isFirstChildXLeftOfCenter(float)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean canCollapsePanelOnTouch()>
<com.android.server.usb.UsbHostManager: void setUsbDeviceConnectionHandler(android.content.ComponentName)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setUserExpanding(boolean)>
<com.android.uiautomator.core.UiObjectNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>
<com.android.server.pm.parsing.PackageInfoUtils: android.util.ArrayMap generateProcessInfo(java.util.Map,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void cancelExpandHelper()>
<com.android.server.CountryDetectorService: void setCountryListener(android.location.CountryListener)>
<com.android.systemui.keyboard.KeyboardUI: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: void onIconAdded(int,java.lang.String,boolean,com.android.systemui.statusbar.phone.StatusBarIconHolder)>
<com.android.server.accounts.AccountManagerService: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
<com.android.server.testing.shadows.ShadowBinder: void setCallingUserHandle(android.os.UserHandle)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean updateOverrideApn(android.content.ComponentName,int,android.telephony.data.ApnSetting)>
<com.android.systemui.qs.QSFooterImpl: void setQQSPanel(com.android.systemui.qs.QuickQSPanel)>
<com.android.settingslib.display.DisplayDensityUtils: java.lang.String[] getEntries()>
<com.android.server.rollback.RollbackPackageHealthObserver: boolean execute(android.content.pm.VersionedPackage,int)>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo newInstance(java.lang.String,java.lang.String,java.util.Map)>
<com.android.settingslib.CustomDialogPreferenceCompat.CustomPreferenceDialogFragment: void onPrepareDialogBuilder(androidx.appcompat.app.AlertDialog.Builder)>
<com.android.settingslib.net.NetworkCycleDataForUidLoader: com.android.settingslib.net.NetworkCycleDataForUidLoader.Builder builder(android.content.Context)>
<com.android.server.biometrics.Utils: int getAuthenticationTypeForResult(int)>
<com.android.systemui.car.navigationbar.CarNavigationBarController: boolean setBottomWindowVisibility(int)>
<com.android.systemui.qs.QSAnimator: void onPageChanged(boolean)>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy: void destroy()>
<com.android.systemui.shared.system.RotationWatcher: void <init>(android.content.Context)>
<com.android.settingslib.net.DataUsageController.Callback: void onMobileDataEnabled(boolean)>
<com.android.gallery3d.exif.ExifTag: com.android.gallery3d.exif.Rational getValueAsRational(com.android.gallery3d.exif.Rational)>
<com.android.systemui.statusbar.phone.NavigationBarTransitions: com.android.systemui.statusbar.phone.LightBarTransitionsController getLightTransitionsController()>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: void setGutsParent(com.android.systemui.statusbar.notification.row.NotificationGuts)>
<com.android.systemui.statusbar.notification.row.ExpandableView: float getContentTranslation()>
<com.android.server.soundtrigger_middleware.SoundTriggerHw2Enforcer: boolean unlinkToDeath(android.os.IHwBinder.DeathRecipient)>
<com.android.systemui.tuner.NavBarTuner: void onActivityCreated(android.os.Bundle)>
<com.android.server.pm.ShortcutService: byte[] getBackupPayload(int)>
<com.android.systemui.qs.QSDetail: void handleShowingDetail(com.android.systemui.plugins.qs.DetailAdapter,int,int,boolean)>
<com.android.systemui.DejankUtils: void detectBlockingIpcs(java.lang.Runnable)>
<com.android.server.testing.shadows.ShadowBackupDataOutput: void __constructor__(java.io.FileDescriptor,long,int)>
<com.android.server.slice.DirtyTracker: void onPersistableDirty(com.android.server.slice.DirtyTracker.Persistable)>
<com.android.server.usb.UsbDeviceManager: void bootCompleted()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUsingUnifiedPassword(android.content.ComponentName)>
<com.android.systemui.globalactions.GlobalActionsComponent: void onGlobalActionsShown()>
<com.android.printspooler.ui.PrintActivity: void onUpdateCompleted(com.android.printspooler.model.RemotePrintDocument.RemotePrintDocumentInfo)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onSecondaryLockscreenRequirementChanged(int)>
<com.android.printspooler.model.PrintSpoolerService: void checkAllPrintJobsHandled()>
<com.android.server.uri.NeededUriGrants: void <init>(java.lang.String,int,int)>
<android.app.StatsManager: void <init>(android.content.Context)>
<com.android.systemui.classifier.LengthCountClassifier: void <init>(com.android.systemui.classifier.ClassifierData)>
<com.android.settingslib.search.SearchIndexableResourcesBase: void addIndex(java.lang.Class)>
<com.google.android.startop.iorap.ActivityHintEvent: int describeContents()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: float getSnapBackThreshold()>
<com.android.systemui.qs.QSDetail: void setQsPanel(com.android.systemui.qs.QSPanel,com.android.systemui.qs.QuickStatusBarHeader,android.view.View)>
<com.android.server.display.color.ColorDisplayService.ColorDisplayServiceInternal: boolean attachColorTransformController(java.lang.String,int,java.lang.ref.WeakReference)>
<com.android.server.pm.dex.DexManager: void notifyPackageUpdated(java.lang.String,java.lang.String,java.lang.String[])>
<com.android.gallery3d.exif.ExifTag: long getValueAt(int)>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton4Visible(boolean)>
<com.android.systemui.statusbar.phone.StatusBar: void createNavigationBar(com.android.internal.statusbar.RegisterStatusBarResult)>
<com.android.gallery3d.common.BitmapUtils: boolean isRotationSupported(java.lang.String)>
<com.android.systemui.usb.UsbConfirmActivity: void onDestroy()>
<com.android.systemui.statusbar.TransformableView: void transformTo(com.android.systemui.statusbar.TransformableView,float)>
<com.android.settingslib.display.BrightnessUtils: int convertLinearToGamma(int,int,int)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onStartExpandingFromPulse()>
<com.android.server.infra.AbstractMasterSystemService: boolean isDefaultServiceEnabled(int)>
<android.os.PackageManagerPerfTest: void testCheckPermissionExistsWithFiltering()>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcher.Container: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.statusbar.phone.LockscreenLockIconController: void <init>(com.android.systemui.statusbar.phone.LockscreenGestureLogger,com.android.keyguard.KeyguardUpdateMonitor,com.android.internal.widget.LockPatternUtils,com.android.systemui.statusbar.phone.ShadeController,com.android.systemui.statusbar.policy.AccessibilityController,com.android.systemui.statusbar.KeyguardIndicationController,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.policy.ConfigurationController,com.android.systemui.statusbar.notification.NotificationWakeUpCoordinator,com.android.systemui.statusbar.phon.KeyguardBypassController,com.android.systemui.dock.DockManager,com.android.systemui.statusbar.policy.KeyguardStateController,android.content.res.Resources,com.android.systemui.statusbar.phone.HeadsUpManagerPhone)>
<com.android.printspooler.model.PrintSpoolerService: android.os.IBinder onBind(android.content.Intent)>
<com.android.server.contentcapture.ContentCaptureManagerServiceShellCommand: void <init>(com.android.server.contentcapture.ContentCaptureManagerService)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: com.android.systemui.statusbar.notification.row.ExpandableView getLastChildNotGone()>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: int getCollapsedHeight()>
<com.android.packageinstaller.PackageUtil.AppSnippet: void <init>(java.lang.CharSequence,android.graphics.drawable.Drawable)>
<com.android.systemui.statusbar.notification.row.HybridConversationNotificationView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setDefaultToDeviceProtectedStorage(boolean)>
<com.android.systemui.biometrics.AuthBiometricFaceView: void onAuthenticationFailed(java.lang.String)>
<com.android.systemui.shared.recents.utilities.AppTrace: void start(java.lang.String,int)>
<com.android.server.policy.WindowManagerPolicy: void screenTurnedOn()>
<com.android.server.ConnectivityService.Dependencies: com.android.server.connectivity.MockableSystemProperties getSystemProperties()>
<com.android.packageinstaller.wear.WearPackageArgs: int getCompanionDeviceVersion(android.os.Bundle)>
<com.android.systemui.statusbar.CommandQueue: boolean panelsEnabled()>
<com.android.systemui.tuner.ClockPreference: void onTuningChanged(java.lang.String,java.lang.String)>
<android.net.wifi.WifiConfiguration: int getAuthType()>
<com.android.server.media.MediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage: com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage.Entry get(int,java.lang.String)>
<android.graphics.perftests.PaintMeasureTextTest: void <init>(java.lang.String,int,java.lang.String)>
<com.android.systemui.wm.DisplayController: void removeDisplayWindowListener(com.android.systemui.wm.DisplayController.OnDisplaysChangedListener)>
<com.android.systemui.statusbar.notification.stack.NotificationRoundnessManager: void setTrackingHeadsUp(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.BatteryService.HealthServiceWrapper: void init()>
<com.android.systemui.statusbar.ScrimView: com.android.internal.colorextraction.ColorExtractor.GradientColors getColors()>
<com.android.server.display.whitebalance.DisplayWhiteBalanceController: boolean setAmbientColorTemperatureOverride(float)>
<com.android.settingslib.media.BluetoothMediaDevice: boolean isCarKitDevice()>
<com.android.systemui.qs.QSSecurityFooter: void onClick(android.view.View)>
<com.android.systemui.biometrics.AuthDialog: boolean isAllowDeviceCredentials()>
<com.android.systemui.tuner.TunerZenModePanel: void setCallback(com.android.systemui.volume.ZenModePanel.Callback)>
<com.android.shell.BugreportProgressService: void onCreate()>
<com.android.systemui.util.InjectionInflationController.ViewInstanceCreator: com.android.keyguard.KeyguardClockSwitch createKeyguardClockSwitch()>
<com.android.server.NetworkManagementService: void setFirewallInterfaceRule(java.lang.String,boolean)>
<com.android.server.ConsumerIrService: int[] getCarrierFrequencies()>
<com.android.server.AnimationThread: android.os.Handler getHandler()>
<javax.obex.ObexHelper: byte[] convertToUnicodeByteArray(java.lang.String)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void prepareExpansionChanged()>
<com.android.server.infra.AbstractMasterSystemService: com.android.server.infra.AbstractPerUserSystemService getServiceForUserLocked(int)>
<com.android.systemui.shared.system.LatencyTrackerCompat: boolean isEnabled(android.content.Context)>
<com.android.keyguard.KeyguardHostView: void setLockPatternUtils(com.android.internal.widget.LockPatternUtils)>
<com.android.systemui.statusbar.notification.row.PartialConversationInfo: int getActualHeight()>
<com.android.systemui.statusbar.notification.InstantAppNotifier: void start()>
<com.android.systemui.statusbar.phone.StatusBar: java.lang.String viewInfo(android.view.View)>
<com.android.systemui.globalactions.GlobalActionsLayout: android.view.View getWrapper()>
<com.android.systemui.qs.QSAnimator: void onTilesChanged()>
<com.android.localtransport.LocalTransport: android.app.backup.RestoreDescription nextRestorePackage()>
<com.android.systemui.shared.system.DockedStackListenerCompat: void onDockSideChanged(int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean isQsExpanded()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void wakeUpFromPulse()>
<android.text.PrecomputedTextMemoryUsageTest: void testMemoryUsage_Arabic_NoHyphenation()>
<com.android.server.locksettings.SyntheticPasswordCrypto: void destroyBlobKey(java.lang.String)>
<com.android.server.pm.PackageAbiHelper: java.lang.String getAdjustedAbiForSharedUser(java.util.Set,com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.systemui.car.window.OverlayWindowModule: com.android.systemui.car.window.OverlayViewMediator bindTopNotificationPanelViewMediator(com.android.systemui.car.notification.TopNotificationPanelViewMediator)>
<com.android.systemui.pip.phone.PipTouchHandler: void <init>(android.content.Context,android.app.IActivityManager,com.android.systemui.pip.phone.PipMenuActivityController,com.android.systemui.shared.system.InputConsumerController,com.android.systemui.pip.PipBoundsHandler,com.android.systemui.pip.PipTaskOrganizer,com.android.systemui.util.FloatingContentCoordinator,com.android.systemui.util.DeviceConfigProxy,com.android.systemui.pip.PipSnapAlgorithm,com.android.systemui.model.SysUiState,com.android.systemui.pip.PipUiEventLogger)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void addCallback(android.os.Handler.Callback)>
<com.android.systemui.biometrics.AuthCredentialView: void onCredentialVerified(byte[],int)>
<com.android.commands.input.Input: void main(java.lang.String[])>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: int getMaxContentHeight()>
<com.android.server.policy.PhoneWindowManager: void showRecentApps()>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: boolean disallowSingleClick(android.view.MotionEvent)>
<com.android.server.audio.AudioService: void setVibrateSetting(int,int)>
<com.android.systemui.qs.QSPanel: void drawTile(com.android.systemui.qs.QSPanel.TileRecord,com.android.systemui.plugins.qs.QSTile.State)>
<com.android.systemui.statusbar.notification.row.NotifRemoteViewCacheImpl: android.widget.RemoteViews getCachedView(com.android.systemui.statusbar.notification.collection.NotificationEntry,int)>
<com.android.printspooler.ui.PageAdapter.PreviewArea: int getHeight()>
<com.android.settingslib.graph.BatteryMeterDrawableBase: boolean getCharging()>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: java.lang.String getCertType()>
<android.net.wifi.aware.WifiAwareAgentNetworkSpecifier: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiManager: boolean isConnectedMacRandomizationSupported()>
<com.android.settingslib.media.LocalMediaManager: int getSessionVolumeMax()>
<com.android.printspooler.ui.SelectPrinterActivity: void onCreate(android.os.Bundle)>
<com.android.settingslib.applications.ApplicationsState: android.os.Looper getBackgroundLooper()>
<com.android.systemui.analytics.DataCollector: boolean isUnlockingDisabled()>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void setUserLocked(boolean)>
<com.android.server.contentcapture.ContentCaptureMetricsLogger: void writeServiceEvent(int,android.content.ComponentName)>
<com.android.server.usb.UsbDeviceManager: void resetUsbGadget()>
<android.os.ParcelArrayPerfTest: void timeWriteIntArray()>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setPanelTracking(boolean)>
<com.android.server.people.data.ConversationInfo: boolean isContactStarred()>
<com.android.server.SystemService: void onUserUnlocked(com.android.server.SystemService.TargetUser)>
<com.android.server.soundtrigger.SoundTriggerDbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>
<com.android.server.input.InputManagerService: void setTouchCalibrationForInputDevice(java.lang.String,int,android.hardware.input.TouchCalibration)>
<com.android.server.biometrics.AuthService.Injector: void publishBinderService(com.android.server.biometrics.AuthService,android.hardware.biometrics.IAuthService.Stub)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setDefaultToDeviceProtectedStorage(boolean)>
<com.android.systemui.bubbles.BubbleTaskView: android.view.IWindow getWindow()>
<com.android.systemui.statusbar.phone.NavigationBarTransitions: void onTransition(int,int,boolean)>
<com.android.printservice.recommendation.plugin.mdnsFilter.MDNSFilterPlugin: void <init>(android.content.Context,java.lang.String,java.lang.CharSequence,java.util.List)>
<android.net.wifi.aware.DiscoverySessionCallback: void onMessageReceived(android.net.wifi.aware.PeerHandle,byte[])>
<com.android.egg.neko.Cat: com.android.egg.neko.Cat create(android.content.Context)>
<com.android.server.hdmi.HdmiControlService: void <init>(android.content.Context)>
<com.android.server.pm.OtaDexoptService: float getProgress()>
<com.android.settingslib.RestrictedLockUtilsInternal: com.android.settingslib.RestrictedLockUtils.EnforcedAdmin checkIfMaximumTimeToLockIsSet(android.content.Context)>
<com.android.location.provider.GeocodeProvider: android.os.IBinder getBinder()>
<com.android.photos.views.BlockingGLTextureView: void onSurfaceTextureUpdated(android.graphics.SurfaceTexture)>
<com.android.systemui.pip.phone.PipMenuActivityController: void onPinnedStackAnimationEnded()>
<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasAudioPlayback()>
<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: void installLogWriters()>
<com.android.systemui.shared.system.ActivityManagerWrapper: java.lang.String getBadgedContentDescription(android.content.pm.ActivityInfo,int,android.app.ActivityManager.TaskDescription)>
<com.android.server.people.PeopleService: void onUserUnlocked(com.android.server.SystemService.TargetUser)>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton3Icon(int)>
<com.android.systemui.shared.system.InputConsumerController: com.android.systemui.shared.system.InputConsumerController getRecentsAnimationInputConsumer()>
<android.net.wifi.hotspot2.pps.Policy: long getMinHomeDownlinkBandwidth()>
<com.android.systemui.statusbar.notification.MessagingLayoutTransformState: void resetTransformedView()>
<com.android.server.pm.permission.PermissionManagerServiceInternal.DefaultBrowserProvider: java.lang.String getDefaultBrowser(int)>
<com.android.systemui.DessertCaseView: void place(android.view.View,boolean)>
<com.android.printspooler.widget.PrintOptionsLayout: void onMeasure(int,int)>
<com.android.server.integrity.model.BitOutputStream: void setNext(boolean)>
<com.android.server.locksettings.LockSettingsStrongAuth.Injector: long getElapsedRealtimeMs()>
<android.net.wifi.SoftApConfiguration.Builder: android.net.wifi.SoftApConfiguration.Builder setHiddenSsid(boolean)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void dismissAndCollapse()>
<com.android.systemui.qs.external.TileLifecycleManager.TileChangeListener: void onTileChanged(android.content.ComponentName)>
<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>
<com.android.settingslib.applications.ApplicationsState.CompoundFilter: boolean filterApp(com.android.settingslib.applications.ApplicationsState.AppEntry)>
<android.net.wifi.aware.ConfigRequest.Builder: android.net.wifi.aware.ConfigRequest.Builder setDiscoveryWindowInterval(int,int)>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: boolean isCountdownConditionSupported()>
<com.android.systemui.util.wakelock.DelayedWakeLock: void release(java.lang.String)>
<com.android.server.SystemService: void onStopUser(int)>
<com.android.server.media.MediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setOverrideApnsEnabled(android.content.ComponentName,boolean)>
<com.android.gallery3d.exif.ExifInterface: int getDefinedTagDefaultIfd(int)>
<android.text.StaticLayoutPerfTest: void setUp()>
<com.android.server.display.DisplayModeDirector.RefreshRateRange: java.lang.String toString()>
<com.android.server.twilight.TwilightManager: void unregisterListener(com.android.server.twilight.TwilightListener)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isOverlay()>
<com.android.server.pm.permission.BasePermission: boolean readLPw(java.util.Map,org.xmlpull.v1.XmlPullParser)>
<com.android.server.wallpaper.WallpaperManagerService: int getHeightHint(int)>
<android.os.StatsDimensionsValue: int getField()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void setMenuItems(java.util.ArrayList)>
<com.android.server.pm.permission.PermissionManagerService: java.lang.String[] getAppOpPermissionPackages(java.lang.String)>
<com.android.systemui.classifier.FalsingManagerFake: android.net.Uri reportRejectedTouch()>
<com.android.server.AppStateTracker: void onSystemServicesReady()>
<com.android.keyguard.KeyguardUpdateMonitor: void requestFaceAuth()>
<com.android.systemui.shared.system.InputChannelCompat.InputEventDispatcher: void dispose()>
<com.android.location.provider.LocationProviderBase: void onInit()>
<com.android.server.appop.AppOpsService: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>
<com.android.systemui.statusbar.policy.HotspotController: int getNumConnectedDevices()>
<com.android.systemui.car.window.OverlayViewController: boolean shouldShowHUN()>
<com.android.systemui.statusbar.policy.DataSaverController: void setDataSaverEnabled(boolean)>
<com.android.server.biometrics.BiometricServiceBase: int statsModality()>
<com.android.systemui.qs.external.TileLifecycleManager: boolean isTileAdded(android.content.Context,android.content.ComponentName)>
<android.net.wifi.WifiManager: void unregisterNetworkRequestMatchCallback(android.net.wifi.WifiManager.NetworkRequestMatchCallback)>
<com.android.preload.check.NotInitializedRegex: void main(java.lang.String[])>
<com.android.systemui.statusbar.phone.StatusBar: void updateVisibleToUser()>
<com.android.server.appbinding.AppBindingService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getDeviceOwnerName()>
<com.android.server.appop.AudioRestrictionManager: void setCameraAudioRestriction(int)>
<com.android.systemui.statusbar.NotificationRemoveInterceptor: boolean onNotificationRemoveRequested(java.lang.String,com.android.systemui.statusbar.notification.collection.NotificationEntry,int)>
<com.android.systemui.analytics.SensorLoggerSession: void addMotionEvent(android.view.MotionEvent)>
<com.android.systemui.statusbar.BackDropView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.gallery3d.glrenderer.GLCanvas: void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,int,int,int,int)>
<com.android.systemui.statusbar.phone.AutoHideController: void <init>(android.content.Context,android.os.Handler,android.view.IWindowManager)>
<com.android.egg.neko.NekoTile: void onTileRemoved()>
<com.android.systemui.globalactions.GlobalActionsGridLayout: void setupListView()>
<com.android.systemui.qs.customize.CustomizeTileView: boolean animationsEnabled()>
<com.android.systemui.statusbar.notification.collection.ShadeListBuilder.OnRenderListListener: void onRenderList(java.util.List)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setSeInfo(java.lang.String)>
<com.android.systemui.statusbar.phone.BarTransitions: void finishAnimations()>
<com.android.settingslib.NetworkPolicyEditor: long getPolicyLimitBytes(android.net.NetworkTemplate)>
<com.android.printspooler.ui.PrintErrorFragment: void onViewCreated(android.view.View,android.os.Bundle)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: void draw(android.graphics.Canvas)>
<com.android.server.biometrics.face.FaceService: void onStart()>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getPassword()>
<android.net.wifi.aware.PublishConfig: void assertValid(android.net.wifi.aware.Characteristics,boolean)>
<android.multiuser.UserLifecycleTests: void managedProfileUnlock_notUsingWhitelist()>
<com.android.server.testing.shadows.ShadowSlog: int w(java.lang.String,java.lang.Throwable)>
<com.android.systemui.ExpandHelper: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.server.pm.PackageSettingBase: void resetOverrideComponentLabelIcon(int)>
<com.android.systemui.assist.AssistOrbView: void startExitAnimation(long)>
<com.android.systemui.volume.VolumeDialogControllerImpl: void notifyVisible(boolean)>
<com.android.server.hdmi.HdmiCecMessage: void <init>(int,int,int,byte[])>
<com.android.systemui.egg.MLand: float getGameTime()>
<com.android.systemui.dump.SystemUIAuxiliaryDumpService: android.os.IBinder onBind(android.content.Intent)>
<com.android.server.webkit.SystemImpl: long getFactoryPackageVersion(java.lang.String)>
<com.android.systemui.statusbar.notification.collection.listbuilder.PipelineState: boolean is(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setRestrictionsProvider(android.content.ComponentName,android.content.ComponentName)>
<com.android.systemui.qs.QSDetailItems: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.phone.PanelViewController: float getOverExpansionPixels()>
<android.net.wifi.hotspot2.pps.Policy: void writeToParcel(android.os.Parcel,int)>
<com.google.android.startop.iorap.AppLaunchEvent: boolean equals(com.google.android.startop.iorap.AppLaunchEvent)>
<android.net.wifi.rtt.ResponderLocation: int getAltitudeType()>
<com.android.server.stats.StatsCompanionService: void setAnomalyAlarm(long)>
<com.android.server.usb.descriptors.Usb20ASFormatIII: void <init>(int,byte,byte,byte,int)>
<com.android.server.vr.EnabledComponentsObserver: void onSettingRestored(java.lang.String,java.lang.String,int)>
<com.android.settingslib.wifi.AccessPoint: void generateOpenNetworkConfig()>
<javax.microedition.khronos.opengles.GL10: void glBlendFunc(int,int)>
<com.android.server.pm.PackageInstallerSession: android.content.pm.DataLoaderParamsParcel getDataLoaderParams()>
<com.android.server.midi.MidiService: void <init>(android.content.Context)>
<com.android.server.audio.PlaybackActivityMonitor: int trackPlayer(android.media.PlayerBase.PlayerIdCard)>
<android.net.wifi.aware.DiscoverySession: android.net.NetworkSpecifier createNetworkSpecifierPassphrase(android.net.wifi.aware.PeerHandle,java.lang.String)>
<com.android.server.uri.UriGrantsManagerService: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int,int,int)>
<com.android.server.accessibility.gestures.TouchState: boolean isClear()>
<com.android.server.usb.descriptors.UsbACMidiEndpoint: byte getNumJacks()>
<com.android.settingslib.deviceinfo.AbstractConnectivityPreferenceController: void onStart()>
<com.android.systemui.usb.UsbResolverActivity: void onDestroy()>
<android.media.Session2Link: void onSessionCommand(android.media.Controller2Link,int,android.media.Session2Command,android.os.Bundle,android.os.ResultReceiver)>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: int getOverlayPriority()>
<com.android.systemui.wm.DisplayLayout: int navigationBarPosition(android.content.res.Resources,int,int,int)>
<com.android.server.adb.AdbDebuggingManager: void denyWirelessDebugging()>
<com.android.systemui.dagger.DependencyProvider: com.android.systemui.statusbar.policy.DataSaverController provideDataSaverController(com.android.systemui.statusbar.policy.NetworkController)>
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoForUid(int,boolean)>
<com.android.systemui.log.dagger.LogModule: com.android.systemui.log.LogBuffer provideBroadcastDispatcherLogBuffer(com.android.systemui.log.LogcatEchoTracker,com.android.systemui.dump.DumpManager)>
<com.android.systemui.ScreenDecorations.DisplayCutoutView: void onDisplayChanged(int)>
<com.android.server.display.BrightnessMappingStrategy: android.hardware.display.BrightnessConfiguration getDefaultConfig()>
<com.android.systemui.statusbar.phone.PanelViewController: boolean shouldExpandWhenNotFlinging()>
<com.android.server.pm.UserManagerService: int getUserBadgeResId(int)>
<com.android.systemui.statusbar.policy.BatteryController.BatteryStateChangeCallback: void onBatteryLevelChanged(int,boolean,boolean)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: boolean isGoingToNotificationShade()>
<android.os.BinderCallsStatsPerfTest: void timeCallSession_100_buckets_cpuNotRecorded()>
<com.android.systemui.qs.SecureSetting: void onChange(boolean)>
<com.android.server.pm.PackageInstallerService: void setPermissionsResult(int,boolean)>
<com.android.settingslib.bluetooth.LocalBluetoothManager: void setForegroundActivity(android.content.Context)>
<android.view.ViewShowHidePerfTest: void testInvisibleToVisible()>
<android.net.wifi.RttManager.RttCapabilities: void writeToParcel(android.os.Parcel,int)>
<com.android.gallery3d.exif.ExifInterface: java.lang.String getTagStringValue(int)>
<com.android.server.RescueParty.RescuePartyObserver: int onBootLoop()>
<com.android.server.media.MediaRouterService: void stopScan(android.media.IMediaRouter2Manager)>
<com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper.SnoozeOption: java.lang.CharSequence getConfirmation()>
<com.android.systemui.statusbar.policy.MobileSignalController: boolean isEmergencyOnly()>
<com.android.systemui.qs.tileimpl.QSTileView: void handleStateChanged(com.android.systemui.plugins.qs.QSTile.State)>
<android.os.SharedPreferencesTest: void timeCachedGetSharedPreferences()>
<com.android.systemui.statusbar.phone.SystemUIDialog: void registerDismissListener(android.app.Dialog)>
<android.media.Session2Command.Result: int getResultCode()>
<com.android.systemui.shortcut.ShortcutKeyServiceProxy.Callbacks: void onShortcutKeyPressed(long)>
<com.android.server.compat.PlatformCompat: void reportChange(long,android.content.pm.ApplicationInfo)>
<android.net.wifi.p2p.WifiP2pManager.DnsSdServiceResponseListener: void onDnsSdServiceAvailable(java.lang.String,java.lang.String,android.net.wifi.p2p.WifiP2pDevice)>
<com.android.gallery3d.exif.ExifInterface: int getComponentCountFromInfo(int)>
<com.android.systemui.SystemUIFactory: void initWithRootComponent(com.android.systemui.dagger.SystemUIRootComponent)>
<android.net.wifi.hotspot2.PasspointConfiguration: void setUsageLimitUsageTimePeriodInMinutes(long)>
<com.android.systemui.statusbar.phone.StatusBar: void onDensityOrFontScaleChanged()>
<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)>
<com.android.server.NetworkManagementService: void setDnsForwarders(android.net.Network,java.lang.String[])>
<android.net.wifi.RttManager.ResponderConfig: java.lang.String toString()>
<com.android.server.biometrics.Constants: java.lang.String tagAuthStartError()>
<com.android.server.tv.UinputBridge: void sendKeyUp(android.os.IBinder,int)>
<com.android.systemui.statusbar.SmartReplyController: void stopSending(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.plugins.qs.QSTile.SignalState: boolean copyTo(com.android.systemui.plugins.qs.QSTile.State)>
<com.android.systemui.statusbar.phone.StatusBar: com.android.systemui.statusbar.phone.NotificationPanelViewController getPanelController()>
<com.android.gallery3d.util.IntArray: int[] toArray(int[])>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void performRemoveNotification(android.service.notification.StatusBarNotification,int)>
<com.android.systemui.wm.SystemWindows: void setTouchableRegion(android.view.View,android.graphics.Region)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGenxv(int,int,int[],int)>
<com.android.systemui.doze.DozeLog: void traceEmergencyCall()>
<com.android.server.testing.shadows.ShadowApplicationPackageManager: int getPackageUidAsUser(java.lang.String,int,int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: java.lang.Throwable getDebugThrowable()>
<com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl: void suggestTelephonyTimeZone(android.app.timezonedetector.TelephonyTimeZoneSuggestion)>
<javax.microedition.khronos.opengles.GL10: void glMaterialxv(int,int,int[],int)>
<com.android.systemui.car.window.OverlayPanelViewController: void setIsTracking(boolean)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onTimeZoneChanged(java.util.TimeZone)>
<com.android.systemui.statusbar.StatusIconDisplayable: void setVisibleState(int)>
<com.android.printspooler.model.RemotePrintDocument: void destroy()>
<com.android.systemui.qs.external.TileServices: android.content.Context getContext()>
<com.android.settingslib.media.MediaManager.MediaDeviceCallback: void onDeviceAttributesChanged()>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setOnLongClickListener(android.view.View.OnLongClickListener)>
<com.android.systemui.statusbar.phone.RegionSamplingHelper.SamplingCallback: void onRegionDarknessChanged(boolean)>
<com.android.server.NativeDaemonEvent: java.lang.String toString()>
<android.net.wifi.rtt.ResponderLocation: double getHeightAboveFloorUncertaintyMeters()>
<android.app.OverlayManagerPerfTest: void getStringLargeTenOverlays()>
<com.android.systemui.shared.plugins.PluginManagerImpl: com.android.systemui.plugins.Plugin getOneShotPlugin(java.lang.String,java.lang.Class)>
<com.android.systemui.usb.UsbDebuggingActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.TransactionPool: void release(android.view.SurfaceControl.Transaction)>
<com.android.systemui.car.navigationbar.CarNavigationBarView: boolean onTouchEvent(android.view.MotionEvent)>
<javax.microedition.khronos.opengles.GL10: void glScalef(float,float,float)>
<com.android.egg.neko.Cat: java.lang.String getName()>
<com.android.systemui.recents.OverviewProxyService: void onActiveNavBarRegionChanges(android.graphics.Region)>
<com.android.printservice.recommendation.util.Preconditions: int checkFlagsArgument(int,int)>
<com.android.server.usb.descriptors.Usb20ASFormatII: int getSlotsPerFrame()>
<com.android.systemui.car.userswitcher.UserGridRecyclerView: void setCarUserManager(android.car.user.CarUserManager)>
<com.android.server.appop.AudioRestrictionManager: boolean hasActiveRestrictions()>
<com.android.settingslib.applications.ServiceListing: boolean isEnabled(android.content.ComponentName)>
<com.android.systemui.plugins.qs.QSTile.State: boolean copyTo(com.android.systemui.plugins.qs.QSTile.State)>
<com.android.systemui.statusbar.notification.row.PartialConversationInfo: void bindNotification(android.content.pm.PackageManager,android.app.INotificationManager,com.android.systemui.statusbar.notification.ro.ChannelEditorDialogController,java.lang.String,android.app.NotificationChannel,java.util.Set,com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.row.NotificationInfo.OnSettingsClickListener,boolean,boolean)>
<com.android.soundpicker.RingtoneOverlayService: int onStartCommand(android.content.Intent,int,int)>
<com.android.systemui.shared.plugins.PluginManagerImpl: void addPluginListener(java.lang.String,com.android.systemui.plugins.PluginListener,java.lang.Class)>
<com.android.systemui.globalactions.GlobalActionsDialog: void showOrHideDialog(boolean,boolean,com.android.systemui.plugins.GlobalActionsPanelPlugin)>
<com.android.systemui.plugins.FalsingManager: void onCameraHintStarted()>
<com.android.systemui.statusbar.StatusBarMobileView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.settingslib.Utils: boolean isAudioModeOngoingCall(android.content.Context)>
<com.android.systemui.keyguard.KeyguardViewMediator: void onScreenTurnedOff()>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: void onDensityOrFontScaleChanged()>
<com.android.server.infra.AbstractMasterSystemService: java.lang.String getServiceSettingsProperty()>
<com.android.systemui.media.ResumeMediaBrowserFactory: void <init>(android.content.Context,com.android.systemui.media.MediaBrowserFactory)>
<com.android.server.policy.PhoneWindowManager: void setDefaultDisplay(com.android.server.policy.WindowManagerPolicy.DisplayContentInfo)>
<com.android.location.fused.FusedLocationService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.tuner.DemoModeFragment: void onDestroy()>
<com.android.server.storage.DiskStatsLoggingService: boolean onStopJob(android.app.job.JobParameters)>
<com.android.systemui.statusbar.phone.KeyguardBouncer: void setExpansion(float)>
<com.android.settingslib.bluetooth.LocalBluetoothProfileManager: boolean isManagerReady()>
<android.net.wifi.p2p.WifiP2pGroup: void setFrequency(int)>
<com.android.systemui.volume.CaptionsToggleImageButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.os.ParcelArrayPerfTest: void timeWriteByteArray()>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexivOES(int[],int)>
<javax.obex.HeaderSet: void setEmptyNameHeader()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setAnimationRunning(boolean)>
<com.android.systemui.wm.BarControlPolicy.FilterListener: void onFilterUpdated()>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>
<com.android.systemui.charging.WirelessChargingAnimation.Callback: void onAnimationEnded()>
<com.android.systemui.car.volume.CarVolumeDialogImpl: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: boolean isMenuVisible()>
<com.android.systemui.plugins.qs.QSTile.SlashState: boolean equals(java.lang.Object)>
<com.android.settingslib.wifi.TestAccessPointBuilder: com.android.settingslib.wifi.TestAccessPointBuilder setSpeed(int)>
<com.android.systemui.statusbar.phone.DozeParameters: boolean getDisplayStateSupported()>
<com.android.systemui.qs.QSFooter: void setQSPanel(com.android.systemui.qs.QSPanel)>
<com.android.server.accessibility.MagnificationController: boolean setScale(int,float,float,float,boolean,int)>
<com.android.server.trust.TrustArchive: void logAgentConnected(int,android.content.ComponentName)>
<com.android.server.accessibility.AccessibilityWindowManager: android.view.accessibility.AccessibilityWindowInfo findA11yWindowInfoByIdLocked(int)>
<com.android.systemui.util.wakelock.KeepAwakeAnimationListener: void onAnimationStart(android.view.animation.Animation)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: int getNetworkSelectionStatus()>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setVendor(boolean)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setCarrierId(int)>
<com.android.systemui.qs.tileimpl.QSTileImpl: boolean isAvailable()>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void unregisterOnKeyguardCancelClickedListener(com.android.systemui.car.keyguard.CarKeyguardViewController.OnKeyguardCancelClickedListener)>
<android.media.Session2Token: int hashCode()>
<com.android.systemui.statusbar.phone.StatusBar: void finishKeyguardFadingAway()>
<com.android.systemui.statusbar.notification.row.NotificationGuts: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<android.net.wifi.p2p.WifiP2pDeviceList: void updateSupplicantDetails(android.net.wifi.p2p.WifiP2pDevice)>
<com.android.settingslib.WirelessUtils: boolean isAirplaneModeOn(android.content.Context)>
<com.android.server.pm.PackageManagerServiceUtils: java.lang.String packagesToString(java.util.List)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isUserUnlocked(int)>
<android.net.wifi.WifiUsabilityStatsEntry: long getTimeStampMillis()>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus.Builder: android.net.wifi.WifiConfiguration.NetworkSelectionStatus build()>
<com.android.settingslib.widget.LayoutPreference: android.view.View findViewById(int)>
<com.android.settingslib.widget.RadioButtonPreference: void onBindViewHolder(androidx.preference.PreferenceViewHolder)>
<com.android.systemui.util.concurrency.ConcurrencyModule: java.util.concurrent.Executor provideExecutor(android.os.Looper)>
<com.android.systemui.bubbles.BubbleStackView.SurfaceSynchronizer: void syncSurfaceAndRun(java.lang.Runnable)>
<javax.microedition.khronos.opengles.GL10: void glDepthFunc(int)>
<com.android.settingslib.dream.DreamBackend.DreamInfo: java.lang.String toString()>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean handleSetSystemAudioMode(com.android.server.hdmi.HdmiCecMessage)>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: boolean willBeRemoved()>
<com.android.settingslib.bluetooth.BluetoothCallback: void onDeviceAdded(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.systemui.SwipeHelper.Callback: void onBeginDrag(android.view.View)>
<android.net.wifi.IWifiManager: boolean startSoftAp(android.net.wifi.WifiConfiguration)>
<com.android.keyguard.KeyguardSimPinView: void startAppearAnimation()>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getRawPrimaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.gallery3d.common.BitmapUtils: int computeSampleSizeLarger(float)>
<com.android.systemui.qs.external.TileServiceManager: void setTileChangeListener(com.android.systemui.qs.external.TileLifecycleManager.TileChangeListener)>
<com.android.systemui.keyguard.WorkLockActivityController: void <init>(android.content.Context)>
<com.android.server.usb.descriptors.UsbACTerminal: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<android.media.MediaSession2Service: android.media.MediaSession2 onGetSession(android.media.MediaSession2.ControllerInfo)>
<com.android.systemui.statusbar.notification.row.HybridConversationNotificationView: void <init>(android.content.Context)>
<com.android.server.pm.Installer: boolean migrateLegacyObbData()>
<com.android.systemui.media.MediaControlPanel: com.android.systemui.medi.MediaViewController getMediaViewController()>
<com.android.systemui.statusbar.phone.NavigationBarEdgePanel: void setIsLeftPanel(boolean)>
<com.android.systemui.qs.tiles.NightDisplayTile: void onActivated(boolean)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: int getBluetoothState()>
<com.android.server.usb.UsbService: void systemReady()>
<com.android.powermodel.RawBatteryStats.Warning: int getLineNumber()>
<com.android.uiautomator.core.InstrumentationUiAutomatorBridge: void <init>(android.content.Context,android.app.UiAutomation)>
<com.android.systemui.statusbar.phone.MultiUserSwitch: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<javax.microedition.khronos.opengles.GL10: void glLightModelxv(int,java.nio.IntBuffer)>
<com.android.server.lights.LogicalLight: void pulse(int,int)>
<com.android.server.pm.Installer: boolean isQuotaSupported(java.lang.String)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setImageDrawable(com.android.systemui.statusbar.policy.KeyButtonDrawable)>
<com.android.systemui.power.EnhancedEstimates: long getSevereWarningThreshold()>
<com.android.systemui.statusbar.policy.KeyguardUserDetailItemView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.statusbar.notification.row.NotificationBlockingHelperManager: void setNotificationShadeExpanded(float)>
<com.android.systemui.statusbar.KeyguardIndicationController: void <init>(android.content.Context,com.android.systemui.util.wakelock.WakeLock.Builder,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.dock.DockManager,com.android.systemui.broadcast.BroadcastDispatcher,android.app.admin.DevicePolicyManager,com.android.internal.app.IBatteryStats,android.os.UserManager)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setSingleLineWidthIndention(int)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: boolean isClippingNeeded()>
<com.android.systemui.dagger.DefaultServiceBinder: android.app.Service bindDozeService(com.android.systemui.doze.DozeService)>
<android.app.ResourcesPerfTest: void getTextArray()>
<com.android.server.biometrics.BiometricService.AuthenticatorWrapper: java.lang.String toString()>
<com.android.systemui.volume.VolumeDialogControllerImpl: void setActiveStream(int)>
<com.android.server.biometrics.face.FaceService: boolean hasEnrolledBiometrics(int)>
<lockedregioncodeinjection.LockTarget: java.lang.String getPreMethod()>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setSystemExt(boolean)>
<com.android.systemui.doze.DozeMachine.Part: void destroy()>
<com.android.server.role.RoleUserState: android.util.ArrayMap getRolesAndHolders()>
<com.android.media.tv.remoteprovider.TvRemoteProvider: void sendKeyDown(android.os.IBinder,int)>
<com.android.systemui.statusbar.policy.SplitClockView: void onFinishInflate()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void updateExpandButtons(boolean)>
<com.android.systemui.statusbar.phone.StatusBarRemoteInputCallback.ChallengeReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.settingslib.notification.ConversationIconFactory.ConversationIconDrawable: int getIntrinsicHeight()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)>
<android.view.autofill.LoginTest: void testFocus_autofillBothFields()>
<com.android.systemui.statusbar.policy.CallbackHandler: void setEmergencyCallsOnly(boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void setUntruncatedChildCount(int)>
<com.android.systemui.statusbar.phone.KeyguardClockPositionAlgorithm: void run(com.android.systemui.statusbar.phone.KeyguardClockPositionAlgorithm.Result)>
<com.android.server.biometrics.fingerprint.FingerprintService: java.lang.String getLockoutBroadcastPermission()>
<com.android.server.print.RemotePrintService.PrintServiceCallbacks: void onCustomPrinterIconLoaded(android.print.PrinterId,android.graphics.drawable.Icon)>
<com.android.server.inputmethod.InputMethodManagerService: void onServiceDisconnected(android.content.ComponentName)>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalBackgroundScanTimeMillis()>
<com.android.settingslib.AppItem: void <init>(android.os.Parcel)>
<com.android.systemui.biometrics.AuthBiometricFingerprintView: void <init>(android.content.Context)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setForceWindowCollapsed(boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void reportFailedBiometricAttempt(int)>
<com.android.server.autofill.AutofillManagerService: java.lang.String getServiceSettingsProperty()>
<com.android.systemui.statusbar.CommandQueue: void onDisplayRemoved(int)>
<com.android.server.biometrics.BiometricServiceBase.ServiceListener: void onAuthenticationFailed(long)>
<com.android.powermodel.AttributionKey: com.google.common.collect.ImmutableSet getPackages()>
<com.android.server.policy.WindowOrientationListener: void <init>(android.content.Context,android.os.Handler)>
<com.android.server.infra.AbstractPerUserSystemService: java.lang.String getServicePackageName()>
<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>
<com.android.gallery3d.glrenderer.GLES20IdImpl: void glDeleteBuffers(javax.microedition.khronos.opengles.GL11,int,int[],int)>
<com.android.systemui.statusbar.phone.ScrimController: void setAodFrontScrimAlpha(float)>
<android.net.wifi.hotspot2.OsuProvider: java.lang.String getServiceDescription()>
<com.android.server.accessibility.AbstractAccessibilityServiceConnection.SystemSupport: com.android.server.accessibility.FingerprintGestureDispatcher getFingerprintGestureDispatcher()>
<com.android.server.media.MediaRouterService: java.util.List getSystemRoutes()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowViewController: void setExpandAnimationPending(boolean)>
<javax.obex.Operation: java.io.DataInputStream openDataInputStream()>
<com.android.systemui.shared.plugins.PluginInitializer: com.android.systemui.shared.plugins.PluginEnabler getPluginEnabler(android.content.Context)>
<com.android.server.ConnectivityService.Dependencies: android.net.util.MultinetworkPolicyTracker makeMultinetworkPolicyTracker(android.content.Context,android.os.Handler,java.lang.Runnable)>
<com.android.systemui.car.window.OverlayPanelViewController: boolean isPanelVisible()>
<com.android.localtransport.LocalTransportParameters: java.lang.String getSettingValue(android.content.ContentResolver)>
<com.android.powermodel.AppPower.Builder: void addComponentPower(com.android.powermodel.Component,com.android.powermodel.ComponentPower)>
<com.android.systemui.statusbar.phone.ShadeController: void animateCollapsePanels(int)>
<com.android.systemui.statusbar.phone.StatusBar: void onExpandAnimationFinished(boolean)>
<com.android.systemui.bubbles.BubbleLoggerImpl: void log(com.android.systemui.bubbles.Bubble,com.android.internal.logging.UiEventLogger.UiEventEnum)>
<com.android.systemui.qs.GlobalSetting: void setListening(boolean)>
<com.android.systemui.statusbar.phone.PanelViewController.TouchHandler: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.systemui.statusbar.phone.ContextualButtonGroup: void updateIcons()>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String getInstanceName()>
<com.android.server.ConnectivityService: void setVpnPackageAuthorization(java.lang.String,int,int)>
<android.net.wifi.WifiManager: int matchProviderWithCurrentNetwork(java.lang.String)>
<com.android.systemui.statusbar.phone.BiometricUnlockController: void onFinishedGoingToSleep(int)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void connect(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.media.remotedisplay.RemoteDisplay: java.lang.String getName()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void setRecentlyAudiblyAlerted(boolean)>
<com.android.server.usb.UsbService: boolean hasDefaults(java.lang.String,int)>
<android.multiuser.UserLifecycleTests: void managedProfileInstall()>
<com.android.systemui.shared.system.WindowCallbacksCompat: boolean attach()>
<com.android.server.vr.VrManagerService: void onAwakeStateChanged(boolean)>
<android.net.wifi.WifiInfo: boolean hasRealMacAddress()>
<com.android.server.accessibility.MotionEventInjector: void <init>(android.os.Handler)>
<com.android.systemui.qs.customize.TileAdapter: void onBindViewHolder(com.android.systemui.qs.customize.TileAdapter.Holder,int)>
<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: int systemClockUpdateThresholdMillis()>
<com.android.egg.neko.NekoDialog: void <init>(android.content.Context)>
<com.android.settingslib.bluetooth.BluetoothUtils: java.lang.String getStringMetaData(android.bluetooth.BluetoothDevice,int)>
<com.android.systemui.tuner.TunerService: void destroy()>
<com.android.systemui.statusbar.phone.DozeParameters: long getWallpaperFadeOutDuration()>
<android.content.pm.PackageManagerInternal: java.lang.String removeLegacyDefaultBrowserPackageName(int)>
<android.graphics.perftests.RenderNodePerfTest: void testHasIdentityMatrix()>
<com.android.systemui.Dependency: void destroy(java.lang.Class,java.util.function.Consumer)>
<android.net.wifi.hotspot2.pps.Credential: long getExpirationTimeInMillis()>
<com.android.settingslib.animation.DisappearAnimationUtils: void <init>(android.content.Context,long,float,float,android.view.animation.Interpolator,com.android.settingslib.animation.AppearAnimationUtils.RowTranslationScaler)>
<com.android.server.display.color.DisplayTransformManager: boolean needsLinearColorMatrix(int)>
<com.android.systemui.screenshot.ScreenshotActionChip: void onFinishInflate()>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton4Text(int)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: java.lang.String[] getAppOpPermissionPackages(java.lang.String,int)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void transformTo(com.android.systemui.statusbar.TransformableView,float)>
<android.widget.TextViewOnMeasurePerfTest: void testMeasure_Unspecified()>
<com.android.keyguard.KeyguardPatternView: void onLayout(boolean,int,int,int,int)>
<com.android.server.om.OverlayableInfoCallback: boolean doesTargetDefineOverlayable(java.lang.String,int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setIsChildInGroup(boolean,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: void getPrintJobInfo(android.print.PrintJobId,android.print.IPrintSpoolerCallbacks,int,int)>
<com.android.systemui.fragments.FragmentService: void destroyAll()>
<com.android.systemui.shared.system.RemoteAnimationDefinitionCompat: void addRemoteAnimation(int,com.android.systemui.shared.system.RemoteAnimationAdapterCompat)>
<lockedregioncodeinjection.LockTarget: java.lang.String getPre()>
<com.android.systemui.statusbar.policy.RemoteInputView: boolean isActive()>
<com.android.packageinstaller.InstallEventReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAlwaysOnVpnLockdownEnabledForUser(int)>
<com.android.systemui.classifier.ClassifierData: boolean update(android.view.MotionEvent)>
<com.android.keyguard.KeyguardSecurityViewFlipper.LayoutParams: void <init>(com.android.keyguard.KeyguardSecurityViewFlipper.LayoutParams)>
<com.android.egg.neko.PrefState: void addCat(com.android.egg.neko.Cat)>
<com.android.commands.svc.PowerCommand: java.lang.String shortHelp()>
<com.android.systemui.bubbles.BubbleController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.util.sensors.AsyncSensorManager: void <init>(android.hardware.SensorManager,com.android.systemui.shared.plugins.PluginManager,android.os.Handler)>
<com.android.settingslib.wifi.AccessPoint: void setTag(java.lang.Object)>
<com.android.server.timedetector.TimeDetectorStrategyImpl: void suggestManualTime(android.app.timedetector.ManualTimeSuggestion)>
<com.android.systemui.car.window.OverlayWindowModule: com.android.systemui.car.window.OverlayViewMediator bindNotificationPanelViewMediator(com.android.systemui.car.notification.NotificationPanelViewMediator)>
<com.android.systemui.pip.phone.PipMotionHelper: void dump(java.io.PrintWriter,java.lang.String)>
<com.android.systemui.globalactions.GlobalActionsDialog.MyAdapter: int getCount()>
<com.android.systemui.shared.system.WindowCallbacksCompat: void <init>(android.view.View)>
<com.android.systemui.statusbar.policy.EthernetSignalController: void <init>(android.content.Context,com.android.systemui.statusbar.policy.CallbackHandler,com.android.systemui.statusbar.policy.NetworkControllerImpl)>
<com.android.server.statusbar.StatusBarManagerInternal: void preloadRecentApps()>
<com.android.location.provider.ActivityRecognitionProvider: boolean disableActivityEvent(java.lang.String,int)>
<com.android.printspooler.ui.FusedPrintersProvider: boolean onCancelLoad()>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector checkable(boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isActivePasswordSufficient(int,boolean)>
<com.android.server.CountryDetectorService: void notifyReceivers(android.location.Country)>
<com.android.server.pm.parsing.pkg.PackageImpl: boolean isFactoryTest()>
<android.net.wifi.WifiEnterpriseConfig.SupplicantSaver: boolean saveValue(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: float getPulseHeight()>
<com.android.systemui.statusbar.phone.KeyguardBouncer: void ensureView()>
<com.android.systemui.qs.tiles.NfcTile: android.content.Intent getLongClickIntent()>
<com.android.lock_checker.LockHook: void dump(java.io.PrintWriter,java.lang.String)>
<android.net.wifi.hotspot2.PasspointConfiguration: void setUsageLimitTimeLimitInMinutes(long)>
<com.android.systemui.biometrics.AuthContainerView: void onError(java.lang.String)>
<android.net.wifi.IScoreUpdateObserver: void notifyScoreUpdate(int,int)>
<com.android.systemui.statusbar.phone.ContextualButtonGroup: void dump(java.io.PrintWriter)>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper: void animateHideLeftRightIcon()>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: boolean hasProfileOwner()>
<com.android.server.PinnerService: void onUnlockUser(int)>
<com.android.settingslib.location.SettingsInjector: java.util.Map getInjectedSettings(android.content.Context,int)>
<com.android.server.DropBoxManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.ScrimView: void setTint(int,boolean)>
<com.android.systemui.qs.external.TileLifecycleManager: void onStopListening()>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeUtilCompat: java.util.HashMap parseInputMethodsAndSubtypesString(java.lang.String)>
<com.android.systemui.assist.AssistManager: void showDisclosure()>
<com.android.server.NsdService.NsdSettings: boolean isEnabled()>
<com.android.server.biometrics.BiometricServiceBase.EnrollClientImpl: void <init>(android.content.Context,com.android.server.biometrics.BiometricServiceBase.DaemonWrapper,long,android.os.IBinder,com.android.server.biometrics.BiometricServiceBase.ServiceListener,int,int,byte[],boolean,java.lang.String,int[],int)>
<com.android.server.search.SearchManagerService: void launchAssist(int,android.os.Bundle)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.MenuItem getSnoozeMenuItem(android.content.Context)>
<com.android.settingslib.development.AbstractLogpersistPreferenceController: void onDestroy()>
<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>
<com.android.systemui.bubbles.BubbleManageEducationView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void onThemeChanged()>
<com.android.systemui.car.window.OverlayPanelViewController.CloseGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean onKeyUp(int,android.view.KeyEvent)>
<com.android.server.pm.PackageSettingBase: boolean getInstantApp(int)>
<com.android.server.biometrics.Constants: java.lang.String tagEnumerateStartError()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: int getMinHeight(boolean)>
<com.android.systemui.qs.QSPanel: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.powermodel.AttributionKey: boolean isSpecialApp()>
<com.android.server.accessibility.KeyEventDispatcher: void flush(com.android.server.accessibility.KeyEventDispatcher.KeyEventFilter)>
<com.android.location.provider.LocationProviderBase: boolean isEnabled()>
<com.android.systemui.statusbar.notification.row.NotificationGutsManager: void startAppOpsSettingsActivity(java.lang.String,int,android.util.ArraySet,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<android.media.Session2Token: int getUid()>
<android.net.wifi.IWifiManager: boolean startScan(java.lang.String,java.lang.String)>
<com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.PackageInfo generate(com.android.server.pm.parsing.pkg.AndroidPackage,int[],int,long,long,java.util.Set,android.content.pm.PackageUserState,int,com.android.server.pm.PackageSetting)>
<com.android.systemui.statusbar.notification.collection.ListDumper: java.lang.String dumpTree(java.util.List,com.android.systemui.statusbar.NotificationInteractionTracker,boolean,java.lang.String)>
<com.android.providers.settings.DeviceConfigService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<com.android.systemui.car.window.OverlayViewGlobalStateController: boolean shouldShowHUN()>
<android.net.wifi.aware.WifiAwareUtils: boolean validatePassphrase(java.lang.String)>
<com.android.server.stats.pull.IonMemoryUtil: long readSystemIonHeapSizeFromDebugfs()>
<com.android.settingslib.deviceinfo.AbstractSerialNumberPreferenceController: void displayPreference(androidx.preference.PreferenceScreen)>
<com.android.systemui.statusbar.phone.NavigationBarView: void setAutoHideController(com.android.systemui.statusbar.phone.AutoHideController)>
<com.android.systemui.statusbar.policy.SecurityController: void onUserSwitched(int)>
<com.android.systemui.qs.tiles.RotationLockTile: android.content.Intent getLongClickIntent()>
<com.android.systemui.statusbar.NotificationListener: void unsnoozeNotification(java.lang.String)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>
<com.android.server.usb.descriptors.UsbVCInputTerminal: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.commands.hid.Event: int getProductId()>
<com.android.server.attention.AttentionManagerService: com.android.server.attention.AttentionManagerService.UserState getOrCreateCurrentUserStateLocked()>
<com.android.server.statusbar.StatusBarManagerInternal: void setDisableFlags(int,int,java.lang.String)>
<com.android.systemui.statusbar.NotificationMediaManager: android.media.MediaMetadata getMediaMetadata()>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.phone.StatusBar: androidx.lifecycle.Lifecycle getLifecycle()>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isLogoutEnabled()>
<com.android.systemui.keyguard.DismissCallbackWrapper: void notifyDismissCancelled()>
<com.android.systemui.plugins.qs.QSTile.SlashState: com.android.systemui.plugins.qs.QSTile.SlashState copy()>
<android.net.wifi.aware.DiscoverySessionCallback: void onServiceDiscovered(android.net.wifi.aware.PeerHandle,byte[],java.util.List)>
<com.android.server.usb.UsbMidiDevice: void close()>
<com.android.smspush.WapPushManager: boolean isDataExist(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.android.server.pm.Installer: void deleteOdex(java.lang.String,java.lang.String,java.lang.String)>
<android.net.wifi.hotspot2.pps.UpdateParameter: java.lang.String getServerUri()>
<com.android.server.biometrics.BiometricUtils: void renameBiometricForUser(android.content.Context,int,int,java.lang.CharSequence)>
<android.net.wifi.hotspot2.pps.Credential: void setClientCertificateChain(java.security.cert.X509Certificate[])>
<com.android.systemui.statusbar.phone.FloatingRotationButton: void setDarkIntensity(float)>
<android.content.pm.PackageManagerInternal: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)>
<com.android.server.PackageWatchdog: com.android.server.PackageWatchdog getInstance(android.content.Context)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isSensitive()>
<javax.microedition.khronos.opengles.GL11: void glGetBooleanv(int,java.nio.IntBuffer)>
<com.android.systemui.wifi.WifiDebuggingActivity: void onClick(android.content.DialogInterface,int)>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.recents.Recents: void onBootCompleted()>
<com.android.server.display.color.ColorDisplayService.ColorDisplayServiceInternal: boolean setDisplayWhiteBalanceListener(com.android.server.display.color.ColorDisplayService.DisplayWhiteBalanceListener)>
<com.android.systemui.doze.DozeService: void onCreate()>
<com.android.systemui.keyguard.WakefulnessLifecycle: void dispatchFinishedWakingUp()>
<com.android.systemui.statusbar.phone.NavigationBarView: void setLayoutTransitionsEnabled(boolean)>
<com.android.systemui.statusbar.phone.NavigationBarFragment: android.view.View create(android.content.Context,com.android.systemui.fragments.FragmentHostManager.FragmentListener)>
<com.android.systemui.statusbar.phone.StatusBar: void onThemeChanged()>
<com.android.settingslib.users.AppRestrictionsHelper.SelectableAppInfo: java.lang.String toString()>
<com.android.systemui.statusbar.policy.KeyButtonView: boolean isClickable()>
<com.android.settingslib.inputmethod.InputMethodPreference: int compareTo(com.android.settingslib.inputmethod.InputMethodPreference,java.text.Collator)>
<com.android.server.voiceinteraction.VoiceInteractionManagerService: void onUserUnlocking(com.android.server.SystemService.TargetUser)>
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addAccessPoint(android.net.wifi.ScanResult)>
<com.android.systemui.shared.plugins.PluginManager: void addPluginListener(com.android.systemui.plugins.PluginListener,java.lang.Class,boolean)>
<com.android.systemui.bubbles.BubbleOverflow: void logUIEvent(int,int,float,float,int)>
<com.android.networkstack.tethering.OffloadHardwareInterface.ControlCallback: void onSupportAvailable()>
<com.android.systemui.qs.QSFragment: com.android.systemui.qs.QSPanel getQsPanel()>
<com.android.server.biometrics.fingerprint.FingerprintAuthenticator: void <init>(android.hardware.fingerprint.IFingerprintService)>
<com.android.server.usb.descriptors.UsbDescriptorParser: int getUsbSpec()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isKillAfterRestore()>
<com.android.systemui.bubbles.BadgedImageView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm: void initView(android.content.Context)>
<android.net.wifi.rtt.CivicLocation: java.lang.String toString()>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: byte getNumConfigs()>
<com.android.systemui.qs.QSFooter: void setVisibility(int)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void canUserAttemptToConfigureInteractAcrossProfiles_profileOwnerWorkProfile_returnsFalse()>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: com.android.systemui.util.magnetictarget.MagnetizedObject getMagnetizedBubbleDraggingOut()>
<com.android.server.usb.descriptors.UsbVCProcessingUnit: void <init>(int,byte,byte)>
<com.android.server.pm.PackageManagerService.Injector: android.os.UserManagerInternal getUserManagerInternal()>
<com.android.server.display.VirtualDisplayAdapter: void setVirtualDisplaySurfaceLocked(android.os.IBinder,android.view.Surface)>
<com.android.systemui.car.userswitcher.UserGridRecyclerView.UserAdapter: com.android.systemui.car.userswitcher.UserGridRecyclerView.UserAdapter.UserAdapterViewHolder onCreateViewHolder(android.view.ViewGroup,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: long forceSecurityLogs()>
<com.android.systemui.statusbar.tv.TvStatusBar: void <init>(android.content.Context,com.android.systemui.statusbar.CommandQueue,dagger.Lazy)>
<android.os.ParcelArrayPerfTest: void timeCreateLongArray()>
<com.android.server.usb.descriptors.UsbInterfaceAssoc: byte getFunctionClass()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationCustomViewWrapper: void onContentUpdated(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void updateContentTransformation()>
<com.android.systemui.statusbar.phone.RotationButton: com.android.systemui.statusbar.policy.KeyButtonDrawable getImageDrawable()>
<com.android.server.textservices.TextServicesManagerInternal: android.view.textservice.SpellCheckerInfo getCurrentSpellCheckerForUser(int)>
<com.android.server.pm.UserTypeDetails.Builder: com.android.server.pm.UserTypeDetails.Builder setMaxAllowed(int)>
<com.android.server.pm.PackageInstallerService: android.content.pm.ParceledListSlice getMySessions(java.lang.String,int)>
<com.android.systemui.qs.tileimpl.QSFactoryImpl: com.android.systemui.plugins.qs.QSTile createTile(java.lang.String)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationMediaTemplateViewWrapper: boolean shouldClipToRounding(boolean,boolean)>
<com.android.settingslib.search.SearchIndexableResourcesBase: java.util.Collection getProviderValues()>
<com.android.server.midi.MidiService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.processor.view.inspector.InspectableClassModel.IntEnumEntry: java.lang.String getName()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: int getMenuSnapTarget()>
<com.android.settingslib.graph.BatteryMeterDrawableBase: void setColorFilter(android.graphics.ColorFilter)>
<com.android.server.pm.PackageManagerServiceUtils: void enforceSystemOrPhoneCaller(java.lang.String,int)>
<com.android.printspooler.widget.EmbeddedContentContainer: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.NativeDaemonConnectorException: void <init>(java.lang.String,com.android.server.NativeDaemonEvent)>
<com.android.systemui.car.notification.NotificationPanelViewMediator: void onThemeChanged()>
<com.android.systemui.statusbar.NotificationLockscreenUserManager.UserChangedListener: void onCurrentProfilesChanged(android.util.SparseArray)>
<com.android.systemui.shared.system.TaskStackChangeListener: void onBackPressedOnTaskRoot(android.app.ActivityManager.RunningTaskInfo)>
<android.net.wifi.WifiConfiguration.RecentFailure: void clear()>
<com.android.server.Watchdog: void setAllowRestart(boolean)>
<com.android.systemui.statusbar.notification.collection.init.NotifPipelineInitializer: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.audio.AudioService: void initMinStreamVolumeWithoutModifyAudioSettings()>
<com.android.systemui.analytics.DataCollector: void onScreenOff()>
<com.android.systemui.statusbar.notification.row.NotificationContentInflater: void cancelBind(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.input.InputManagerService: void registerInputChannel(android.view.InputChannel)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: com.android.systemui.statusbar.policy.HeadsUpManager getHeadsUpManager()>
<com.android.systemui.qs.PathInterpolatorBuilder: android.view.animation.Interpolator getYInterpolator()>
<com.android.server.usb.descriptors.Usb20ASFormatI: byte getSubSlotSize()>
<com.android.systemui.keyguard.KeyguardViewMediator: void dismiss(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
<com.android.systemui.dagger.DependencyProvider: com.android.systemui.doze.AlwaysOnDisplayPolicy provideAlwaysOnDisplayPolicy(android.content.Context)>
<com.android.systemui.screenrecord.RecordingService: void onCreate()>
<com.android.systemui.statusbar.phone.NotificationPanelView: boolean shouldDelayChildPressedState()>
<com.android.server.tv.tunerresourcemanager.ClientProfile: java.lang.String toString()>
<com.android.commands.dpm.Dpm: void onRun()>
<com.android.settingslib.wifi.WifiEntryPreference: void setOnButtonClickListener(com.android.settingslib.wifi.WifiEntryPreference.OnButtonClickListener)>
<com.android.server.usb.UsbPortManager: void connectSimulatedPort(java.lang.String,int,boolean,int,boolean,int,boolean,com.android.internal.util.IndentingPrintWriter)>
<com.android.server.adb.AdbService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void setIcon(java.lang.String,com.android.internal.statusbar.StatusBarIcon)>
<com.android.server.print.PrintManagerService: void onStopUser(int)>
<com.android.systemui.shared.system.TaskDescriptionCompat: int getBackgroundColor()>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindsShortcutKeyDispatcher(com.android.systemui.shortcut.ShortcutKeyDispatcher)>
<android.text.StaticLayoutPerfTest: void testCreate_RandomText_NoStyled_Balanced_Hyphenation()>
<com.android.keyguard.KeyguardSecurityViewFlipper: void onMeasure(int,int)>
<com.android.settingslib.bluetooth.BluetoothCallback: void onActiveDeviceChanged(com.android.settingslib.bluetooth.CachedBluetoothDevice,int)>
<android.app.usage.UsageStatsManagerInternal: void reportContentProviderUsage(java.lang.String,java.lang.String,int)>
<com.android.systemui.assist.AssistHandleCallbacks: void showAndGo()>
<com.android.systemui.globalactions.GlobalActionsItem: boolean isTruncated()>
<com.android.server.pm.permission.PermissionManagerService: void addOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.util.Map getPackageDexMetadata(com.android.server.pm.parsing.pkg.AndroidPackage)>
<android.widget.TextViewAutoSizeLayoutPerfTest: void testConstruction()>
<com.android.keyguard.ViewMediatorCallback: void keyguardDone(boolean,int)>
<com.android.server.testing.shadows.ShadowAppBackupUtils: void setAppRunningAndEligibleForBackupWithTransport(java.lang.String)>
<com.android.systemui.qs.touch.SwipeDetector: boolean isSettlingState()>
<com.android.server.ServiceWatcher.BinderRunner: void run(android.os.IBinder)>
<com.android.systemui.statusbar.phone.DozeParameters: int getPulseInDuration()>
<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasAudioTerminal(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void clearProfileOwnerLocked(com.android.server.devicepolicy.DevicePolicyManagerService.ActiveAdmin,int)>
<android.net.wifi.hotspot2.pps.Policy.RoamingPartner: void <init>(android.net.wifi.hotspot2.pps.Policy.RoamingPartner)>
<com.android.server.biometrics.face.FaceConstants: java.lang.String tagHalDied()>
<com.android.server.accessibility.gestures.TouchExplorer: void clearEvents(int)>
<com.android.server.devicepolicy.OverlayPackagesProvider: java.util.Set getNonRequiredApps(android.content.ComponentName,int,java.lang.String)>
<com.android.systemui.shared.system.RecentsAnimationControllerCompat: void setAnimationTargetsBehindSystemBars(boolean)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onStartedGoingToSleep(int)>
<com.android.systemui.SwipeHelper: void dismissChild(android.view.View,float,java.lang.Runnable,long,boolean,long,boolean)>
<com.android.gallery3d.exif.ExifInterface: java.lang.Long getTagLongValue(int,int)>
<com.android.server.usb.UsbAlsaJackDetector: boolean isInputJackConnected()>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setRestrictUpdateHash(byte[])>
<com.android.systemui.statusbar.phone.StatusBarIconList: com.android.systemui.statusbar.phone.StatusBarIconList.Slot getSlot(java.lang.String)>
<com.android.server.attention.AttentionManagerService: void onSwitchUser(int)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void onProfileConnectionStateChanged(com.android.settingslib.bluetooth.CachedBluetoothDevice,int,int)>
<com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl.QualifiedTelephonyTimeZoneSuggestion: java.lang.String toString()>
<com.android.server.pm.permission.PermissionManagerService.Injector: void invalidatePackageInfoCache()>
<com.android.systemui.statusbar.OperatorNameView: void setIsAirplaneMode(com.android.systemui.statusbar.policy.NetworkController.IconState)>
<javax.obex.ServerSession: void run()>
<com.android.settingslib.widget.BarChartInfo.Builder: com.android.settingslib.widget.BarChartInfo.Builder addBarViewInfo(com.android.settingslib.widget.BarViewInfo)>
<com.android.server.pm.Settings: boolean isEnabledAndMatchLPr(com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.parsing.component.ParsedMainComponent,int,int)>
<com.android.systemui.GuestResumeSessionReceiver: void register(com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.systemui.util.InjectionInflationController.ViewCreator: com.android.systemui.util.InjectionInflationController.ViewInstanceCreator createInstanceCreator(com.android.systemui.util.InjectionInflationController.ViewAttributeProvider)>
<com.android.settingslib.utils.PowerUtil: java.lang.String getBatteryRemainingStringFormatted(android.content.Context,long,java.lang.String,boolean)>
<com.android.systemui.statusbar.phone.FloatingRotationButton: boolean hide()>
<com.android.server.media.MediaSession2Record: void adjustVolume(java.lang.String,java.lang.String,int,int,boolean,int,int,boolean)>
<com.android.server.accessibility.gestures.GestureUtils: boolean isDraggingGesture(float,float,float,float,float,float,float,float,float)>
<com.android.systemui.qs.tiles.FlashlightTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.statusbar.policy.FlashlightController)>
<com.android.systemui.statusbar.phone.KeyguardClockPositionAlgorithm: void setup(int,int,int,float,int,int,int,boolean,boolean,float,float,boolean,int)>
<javax.microedition.khronos.opengles.GL11: boolean glIsTexture(int)>
<com.android.settingslib.media.BluetoothMediaDevice: java.lang.String getSummary()>
<android.net.wifi.WifiScanner.PnoSettings.PnoNetwork: int hashCode()>
<android.text.StaticLayoutMultithreadPerfTest: void testCreate_RandomText_Thread_2()>
<com.android.systemui.screenrecord.ScreenRecordingMuxer: void mux()>
<com.android.server.pm.permission.PermissionManagerServiceInternal: java.util.ArrayList getAllPermissionsWithProtectionFlags(int)>
<com.android.systemui.statusbar.notification.row.NotificationRowContentBinder: void unbindContent(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,int)>
<android.net.wifi.p2p.WifiP2pWfdInfo: void setEnabled(boolean)>
<android.net.wifi.p2p.WifiP2pDevice: void updateSupplicantDetails(android.net.wifi.p2p.WifiP2pDevice)>
<com.android.systemui.bubbles.BubbleData: void setExpanded(boolean)>
<com.android.server.policy.GlobalActionsProvider.GlobalActionsListener: void onGlobalActionsShown()>
<com.android.systemui.pip.phone.PipTouchGesture: boolean onUp(com.android.systemui.pip.phone.PipTouchState)>
<com.android.systemui.globalactions.GlobalActionsColumnLayout: int getPowerButtonOffsetDistance()>
<com.android.printspooler.util.MediaSizeUtils.MediaSizeComparator: void onConfigurationChanged(android.content.res.Configuration)>
<android.net.wifi.p2p.WifiP2pManager.Channel: void <init>(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager.ChannelListener,android.os.Binder,android.net.wifi.p2p.WifiP2pManager)>
<com.android.systemui.statusbar.phone.ReverseLinearLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.infra.AbstractPerUserSystemService: void dumpLocked(java.lang.String,java.io.PrintWriter)>
<com.android.server.infra.AbstractPerUserSystemService: android.content.ComponentName getServiceComponentName()>
<com.android.systemui.plugins.NavigationEdgeBackPlugin.BackCallback: void triggerBack()>
<com.android.systemui.bubbles.animation.StackAnimationController: void moveStackFromTouch(float,float)>
<com.android.server.accounts.IAccountAuthenticatorCache: void setListener(android.content.pm.RegisteredServicesCacheListener,android.os.Handler)>
<com.android.statsd.shelltools.Utils: void runCommand(java.io.File,java.util.logging.Logger,java.lang.String[])>
<com.android.keyguard.EmergencyButton.EmergencyButtonCallback: void onEmergencyButtonClickedWhenInCall()>
<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: int getConnectionState()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: boolean isDimmable()>
<com.android.systemui.classifier.FalsingManagerProxy: void onCameraHintStarted()>
<com.android.systemui.statusbar.notification.row.NotificationGutsManager: void <init>(android.content.Context,com.android.systemui.statusbar.notification.VisualStabilityManager,dagger.Lazy,android.os.Handler,android.os.Handler,android.view.accessibility.AccessibilityManager,com.android.systemui.statusbar.notification.collection.provider.HighPriorityProvider,android.app.INotificationManager,android.content.pm.LauncherApps,android.content.pm.ShortcutManager,com.android.systemui.statusbar.notification.ro.ChannelEditorDialogController,com.android.systemui.settings.CurrentUserContextTracker,javax.inject.Provider,com.android.systemui.bubbles.BubbleController,com.android.internal.logging.UiEventLogger)>
<com.android.systemui.stackdivider.DividerView: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.pm.PackageManagerService: boolean isPackageSuspendedForUser(java.lang.String,int)>
<com.android.systemui.statusbar.phone.ContextualButtonGroup: com.android.systemui.statusbar.phone.ContextualButton getContextButton(int)>
<com.android.systemui.statusbar.notification.collection.coordinator.HeadsUpCoordinator: void <init>(com.android.systemui.statusbar.policy.HeadsUpManager,com.android.systemui.statusbar.notification.interruption.HeadsUpViewBinder,com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProvider,com.android.systemui.statusbar.NotificationRemoteInputManager)>
<com.android.systemui.statusbar.phone.StatusBarIconList.Slot: void removeForTag(int)>
<com.android.server.pm.PackageManagerService.PendingPackageBroadcasts: int userIdAt(int)>
<com.android.server.accessibility.AccessibilityWindowManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.IpSecService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.policy.MobileSignalController: boolean isInService()>
<com.android.settingslib.drawer.TileUtils: android.os.Bundle putBooleanToUriAndGetResult(android.content.Context,android.net.Uri,java.util.Map,java.lang.String,boolean)>
<com.android.commands.hid.Device: void sendReport(byte[])>
<android.app.backup.ForwardingBackupAgent: void attach(android.content.Context)>
<com.android.server.tv.TvInputHal.Callback: void onDeviceUnavailable(int)>
<com.android.printspooler.renderer.IPdfEditor: int openDocument(android.os.ParcelFileDescriptor)>
<android.multiuser.BenchmarkResults: android.os.Bundle getStatsToLog()>
<com.android.server.usb.descriptors.report.ReportCanvas: void <init>(com.android.server.usb.descriptors.UsbDescriptorParser)>
<com.android.server.pm.PreferredComponent.Callbacks: boolean onReadTag(java.lang.String,org.xmlpull.v1.XmlPullParser)>
<com.android.server.display.DisplayModeDirector.BrightnessObserver: void onDeviceConfigRefreshRateInLowZoneChanged(int)>
<com.android.systemui.qs.AlphaControlledSignalTileView.AlphaControlledSlashDrawable: void setDrawableTintList(android.content.res.ColorStateList)>
<com.android.server.slice.SliceClientPermissions: java.util.Collection getAuthorities()>
<com.android.systemui.qs.touch.SwipeDetector: void finishedScrolling()>
<com.android.printspooler.ui.PrintActivity: void onCreate(android.os.Bundle)>
<com.android.permission.persistence.RuntimePermissionsState: int getVersion()>
<com.android.systemui.car.userswitcher.FullScreenUserSwitcherViewController: void hideInternal()>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setWapiPassphrase(java.lang.String)>
<com.android.systemui.statusbar.phone.NotificationGroupManager.OnGroupChangeListener: void onGroupsChanged()>
<com.android.providers.settings.SettingsHelper: java.lang.String onBackupValue(java.lang.String,java.lang.String)>
<com.android.commands.svc.SystemServerCommand: java.lang.String longHelp()>
<com.android.server.inputmethod.InputMethodManagerService: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean)>
<com.android.photos.BitmapRegionTileSource.BitmapSource: android.graphics.Bitmap loadPreviewBitmap(android.graphics.BitmapFactory.Options)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void setIsolatedIconLocation(android.graphics.Rect,boolean)>
<com.android.systemui.assist.AssistHandleCallbacks: void showAndStay()>
<android.net.wifi.WifiConfiguration: java.lang.String toString()>
<com.android.systemui.power.PowerUI: void dismissInattentiveSleepWarning(boolean)>
<com.android.systemui.keyguard.KeyguardViewMediator: void setPulsing(boolean)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: void dumpInternal(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.settingslib.utils.AsyncLoaderCompat: void onDiscardResult(java.lang.Object)>
<com.android.uiautomator.core.UiScrollable: com.android.uiautomator.core.UiObject getChildByText(com.android.uiautomator.core.UiSelector,java.lang.String)>
<com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry: boolean wasShownLongEnough()>
<com.android.systemui.plugins.qs.QSTile: com.android.systemui.plugins.qs.QSIconView createTileView(android.content.Context)>
<com.android.systemui.qs.SlashDrawable: int getOpacity()>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: java.lang.String getNetworkSelectionDisableReasonString(int)>
<com.android.systemui.pip.PipSnapAlgorithm: float getSnapFraction(android.graphics.Rect,android.graphics.Rect)>
<com.android.server.ConnectivityService: void deleteVpnProfile(java.lang.String)>
<com.android.settingslib.applications.AppUtils: boolean isMainlineModule(android.content.pm.PackageManager,java.lang.String)>
<com.android.packageinstaller.InstallStaging.ErrorDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.systemui.bubbles.BubbleStackView: boolean dispatchTouchEvent(android.view.MotionEvent)>
<com.android.systemui.qs.external.TileLifecycleManager: void setBindService(boolean)>
<com.android.systemui.car.navigationbar.CarNavigationBarController: com.android.systemui.car.navigationbar.CarNavigationBarView getBottomBar(boolean)>
<com.android.statementservice.DirectStatementService: void onCreate(com.android.statementservice.retriever.AbstractStatementRetriever,android.os.Looper,java.io.File)>
<com.android.server.policy.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.os.IBinder,android.view.KeyEvent,int)>
<com.android.settingslib.drawable.UserIconDrawable: void setIntrinsicSize(int)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: void setName(java.lang.String)>
<com.android.systemui.car.window.SystemUIOverlayWindowController: void setWindowFocusable(boolean)>
<com.android.systemui.power.PowerNotificationWarnings: void userSwitched()>
<com.android.systemui.statusbar.phone.BarTransitions.BarBackgroundDrawable: void onBoundsChange(android.graphics.Rect)>
<com.android.systemui.statusbar.notification.row.StackScrollerDecorView: android.view.View findContentView()>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: boolean isEmpty()>
<com.android.systemui.statusbar.phone.PanelViewController: void flingToHeight(float,boolean,float,float,boolean)>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger.EditorLogger: android.content.SharedPreferences.Editor putString(java.lang.String,java.lang.String)>
<com.android.server.pm.permission.PermissionManagerService: boolean setAutoRevokeWhitelisted(java.lang.String,boolean,int)>
<com.android.server.NetworkScorerAppManager.SettingsFacade: boolean putString(android.content.Context,java.lang.String,java.lang.String)>
<com.android.keyguard.KeyguardPinBasedInputView: void setPasswordEntryEnabled(boolean)>
<com.android.packageinstaller.television.UninstallAppProgress.ProgressFragment: void showCompletion(java.lang.CharSequence)>
<com.android.systemui.statusbar.phone.EdgeBackGestureHandler: void updateCurrentUserResources()>
<com.android.systemui.biometrics.AuthCredentialView: void onErrorTimeoutFinish()>
<com.android.location.provider.LocationProviderBase: void setAdditionalProviderPackages(java.util.List)>
<com.android.keyguard.clock.DefaultClockController: android.view.View getView()>
<com.android.gallery3d.exif.ExifInterface: void forceRewriteExif(java.lang.String)>
<com.android.settingslib.fuelgauge.PowerWhitelistBackend: int getWhitelistSize()>
<com.android.server.soundtrigger_middleware.SoundTriggerHw2Enforcer: void setModelParameter(int,int,int)>
<com.android.systemui.statusbar.phone.MultiUserSwitch: void onClick(android.view.View)>
<com.android.soundpicker.RingtonePickerActivity: void onSaveInstanceState(android.os.Bundle)>
<com.android.server.ConnectivityService: void startVpnProfile(java.lang.String)>
<com.android.server.accessibility.MagnificationController: void register(int)>
<com.android.systemui.car.voicerecognition.ConnectedDeviceVoiceRecognitionNotifier: void onBootCompleted()>
<com.android.server.pm.PackageManagerService: int getFlagsForUid(int)>
<com.android.systemui.statusbar.TransformableView: void setVisible(boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: com.android.systemui.statusbar.notification.row.ActivatableNotificationView getActivatedChild()>
<com.android.systemui.statusbar.KeyboardShortcuts: void toggle(android.content.Context,int)>
<com.android.server.policy.PhoneWindowManager: void systemReady()>
<android.content.pm.PackageManagerInternal: java.util.List getApksInApex(java.lang.String)>
<com.android.keyguard.KeyguardHostView: void showPromptReason(int)>
<javax.obex.ClientOperation: java.io.DataOutputStream openDataOutputStream()>
<com.android.settingslib.media.MediaDevice: int compareTo(com.android.settingslib.media.MediaDevice)>
<com.android.server.biometrics.BiometricServiceBase: void authenticateInternal(com.android.server.biometrics.BiometricServiceBase.AuthenticationClientImpl,long,java.lang.String)>
<android.net.wifi.aware.TlvBufferUtils.TlvConstructor: android.net.wifi.aware.TlvBufferUtils.TlvConstructor putRawByteArray(byte[])>
<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService getSingleton()>
<com.android.server.ConnectivityService: android.net.Network[] getAllNetworks()>
<com.android.egg.neko.Food: int getType()>
<com.android.server.pm.permission.PermissionsState: com.android.server.pm.permission.PermissionsState.PermissionState getInstallPermissionState(java.lang.String)>
<com.android.server.pm.parsing.pkg.PackageImpl: java.lang.String getSecondaryCpuAbi()>
<com.android.preload.check.PreloadCheck: void testNoPreloadHolder()>
<android.net.wifi.WifiManager: int removeNetworkSuggestions(java.util.List)>
<com.android.uiautomator.core.UiObject: boolean isSelected()>
<com.android.systemui.globalactions.GlobalActionsPopupMenu: void setAdapter(android.widget.ListAdapter)>
<com.android.systemui.statusbar.phone.NotificationsQuickSettingsContainer: void onInflate(android.view.ViewStub,android.view.View)>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy: void setMobileDataIndicators(com.android.systemui.statusbar.policy.NetworkController.IconState,com.android.systemui.statusbar.policy.NetworkController.IconState,int,int,boolean,boolean,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,boolean,int,boolean)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: void setTranslation(float,float)>
<com.android.systemui.statusbar.HeadsUpStatusBarView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.packageinstaller.PackageInstallerActivity.NotSupportedOnWearDialog: void onCancel(android.content.DialogInterface)>
<com.android.systemui.statusbar.notification.stack.NotificationRoundnessManager: void setAnimatedChildren(java.util.HashSet)>
<com.android.settingslib.wifi.WifiSavedConfigUtils: int getAllConfigsCount(android.content.Context,android.net.wifi.WifiManager)>
<com.android.server.usb.descriptors.report.ReportCanvas: void closeParagraph()>
<com.android.systemui.statusbar.notification.collection.NotifPipeline: void addPreGroupFilter(com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.NotifFilter)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: boolean isBusy()>
<com.android.keyguard.KeyguardSecurityContainer: void onFinishInflate()>
<com.android.server.pm.PackageManagerService: void <init>(com.android.server.pm.PackageManagerService.Injector,boolean,boolean)>
<javax.microedition.khronos.opengles.GL10: void glFrontFace(int)>
<android.os.IIdmap2: boolean verifyIdmap(java.lang.String,java.lang.String,int,boolean,int)>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageCache: boolean hasEntry(android.net.Uri)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService.PackageFreezer freezePackageForDelete(java.lang.String,int,java.lang.String)>
<com.android.server.biometrics.ClientMonitor: java.lang.String getOwnerString()>
<com.android.systemui.pip.phone.PipTouchState: boolean isWaitingForDoubleTap()>
<com.android.systemui.statusbar.policy.BrightnessMirrorController: void <init>(com.android.systemui.statusbar.phone.NotificationShadeWindowView,com.android.systemui.statusbar.phone.NotificationPanelViewController,com.android.systemui.statusbar.NotificationShadeDepthController,java.util.function.Consumer)>
<com.android.systemui.screenrecord.RecordingService: void createRecordingNotification()>
<com.android.server.webkit.SystemInterface: int getMultiProcessSetting(android.content.Context)>
<com.android.systemui.shared.system.TaskInfoCompat: boolean supportsSplitScreenMultiWindow(android.app.TaskInfo)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: boolean isEntryAutoHeadsUpped(java.lang.String)>
<com.android.systemui.shared.system.WallpaperEngineCompat: void <init>(android.service.wallpaper.IWallpaperEngine)>
<com.android.gallery3d.exif.ExifTag: java.lang.String getValueAsString(java.lang.String)>
<com.android.systemui.car.notification.NotificationPanelViewController: void onAnimateExpandPanel()>
<com.google.android.startop.iorap.AppLaunchEvent.IntentProtoParcelable: void write(android.os.Parcel,android.content.Intent,int)>
<com.android.systemui.statusbar.phone.NavigationBarFrame: void <init>(android.content.Context,android.util.AttributeSet)>
<android.net.TetheredClient: void <init>(android.net.MacAddress,java.util.Collection,int)>
<com.android.systemui.statusbar.notification.MessagingLayoutTransformState: void prepareFadeIn()>
<com.android.server.accounts.AccountManagerService: void onServiceChanged(android.accounts.AuthenticatorDescription,int,boolean)>
<com.android.systemui.statusbar.policy.SignalController: void <init>(java.lang.String,android.content.Context,int,com.android.systemui.statusbar.policy.CallbackHandler,com.android.systemui.statusbar.policy.NetworkControllerImpl)>
<javax.obex.Operation: java.io.OutputStream openOutputStream()>
<com.android.server.IpSecService: void removeAddressFromTunnelInterface(int,android.net.LinkAddress,java.lang.String)>
<com.android.server.usb.descriptors.UsbACSelectorUnit: void <init>(int,byte,byte,int)>
<com.android.systemui.ForegroundServicesUserState: boolean removeNotification(java.lang.String,java.lang.String)>
<com.android.server.pm.PackageSettingBase: void writeUsersInfoToProto(android.util.proto.ProtoOutputStream,long)>
<android.net.wifi.aware.IWifiAwareManager: void subscribe(java.lang.String,java.lang.String,int,android.net.wifi.aware.SubscribeConfig,android.net.wifi.aware.IWifiAwareDiscoverySessionCallback)>
<com.android.settingslib.bluetooth.HeadsetProfile: boolean setEnabled(android.bluetooth.BluetoothDevice,boolean)>
<com.android.settingslib.drawable.CircleFramedDrawable: void setScale(float)>
<com.android.server.DynamicSystemService: boolean finishInstallation()>
<com.android.systemui.statusbar.FlingAnimationUtils.Builder: com.android.systemui.statusbar.FlingAnimationUtils.Builder setY2(float)>
<com.android.server.NetworkManagementService: void setDefaultNetId(int)>
<com.android.server.biometrics.RemovalClient: int stop(boolean)>
<com.android.server.pm.CrossProfileAppsServiceImpl: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)>
<com.android.server.NetworkManagementService: void setFirewallUidRules(int,int[],int[])>
<com.android.keyguard.KeyguardClockSwitch: void <init>(android.content.Context,android.util.AttributeSet,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.colorextraction.SysuiColorExtractor,com.android.keyguard.clock.ClockManager)>
<android.wm.WindowAddRemovePerfTest: void onFinished(int)>
<com.android.server.pm.UserManagerService: int[] getUserIdsIncludingPreCreated()>
<com.android.systemui.dock.DockManager.DockEventListener: void onEvent(int)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceFactory: com.android.server.display.whitebalance.AmbientSensor.AmbientBrightnessSensor createBrightnessSensor(android.os.Handler,android.hardware.SensorManager,android.content.res.Resources)>
<android.net.wifi.aware.TlvBufferUtils.TlvElement: short getShort()>
<android.net.wifi.hotspot2.ConfigParser: android.net.wifi.hotspot2.PasspointConfiguration parsePasspointConfig(java.lang.String,byte[])>
<com.android.server.accessibility.gestures.TouchState: boolean isTouchExploring()>
<com.android.systemui.statusbar.FlingAnimationUtils.Builder: com.android.systemui.statusbar.FlingAnimationUtils.Builder setX2(float)>
<com.android.server.pm.ApexManager: boolean restoreCeData(int,int,java.lang.String)>
<com.android.systemui.statusbar.phone.PanelViewController: void onUnlockHintStarted()>
<com.android.systemui.qs.QSTileHost: void addTile(java.lang.String)>
<android.perftests.utils.Stats: double getStandardDeviation()>
<com.android.systemui.util.concurrency.ConcurrencyModule: com.android.systemui.util.concurrency.RepeatableExecutor provideBackgroundRepeatableExecutor(com.android.systemui.util.concurrency.DelayableExecutor)>
<com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter: boolean accept(java.lang.Class)>
<com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter: void startHistoryIntent(boolean)>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: void addOnPreDrawRunnable(java.lang.Runnable)>
<com.android.settingslib.core.lifecycle.events.OnSaveInstanceState: void onSaveInstanceState(android.os.Bundle)>
<com.android.systemui.statusbar.notification.row.NotifRemoteViewCache: void removeCachedView(com.android.systemui.statusbar.notification.collection.NotificationEntry,int)>
<com.android.server.policy.SoftRestrictedPermissionPolicy: boolean mayGrantPermission()>
<com.android.systemui.statusbar.ScreenRecordDrawable: void onBoundsChange(android.graphics.Rect)>
<com.android.systemui.plugins.qs.QSTileView: int getDetailY()>
<com.android.systemui.classifier.EndPointLengthClassifier: java.lang.String getTag()>
<com.android.systemui.MultiListLayout: float getAnimationOffsetY()>
<com.android.systemui.screenrecord.ScreenInternalAudioRecorder: void <init>(java.lang.String,android.media.projection.MediaProjection,boolean)>
<com.android.server.usb.descriptors.ByteStream: void reverse(int)>
<com.google.android.startop.iorap.SystemServiceUserEvent: void writeToParcel(android.os.Parcel,int)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.Long getRecoveryServiceCertSerial(int,int,java.lang.String)>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void addActiveNotificationForTest(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.keyboard.BluetoothDialog: void <init>(android.content.Context)>
<com.android.server.pm.PackageManagerService.Injector: android.os.storage.StorageManager getStorageManager()>
<com.android.settingslib.widget.UpdatableListPreferenceDialogFragment: void onCreate(android.os.Bundle)>
<com.android.systemui.SwipeHelper: boolean handleUpEvent(android.view.MotionEvent,android.view.View,float,float)>
<com.android.systemui.car.navigationbar.NavigationBarViewFactory: com.android.systemui.car.navigationbar.CarNavigationBarView getRightBar(boolean)>
<com.android.systemui.DessertCaseView: void fillFreeList(int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean canCameraGestureBeLaunched()>
<com.android.server.pm.permission.PermissionManagerService: void revokeDefaultPermissionsFromLuiApps(java.lang.String[],int)>
<android.net.wifi.rtt.RangingResult: boolean equals(java.lang.Object)>
<com.android.mediadrm.signer.MediaDrmSigner.Certificate: byte[] getWrappedPrivateKey()>
<android.net.wifi.aware.WifiAwareNetworkInfo: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.qs.tileimpl.QSIconViewImpl: void <init>(android.content.Context)>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindAuthController(com.android.systemui.biometrics.AuthController)>
<com.android.systemui.qs.PagedTileLayout: void endFakeDrag()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void removeListItem(com.android.systemui.statusbar.notification.stack.NotificationListItem)>
<android.net.wifi.WifiManager: void cancelWps(android.net.wifi.WifiManager.WpsCallback)>
<android.net.wifi.SoftApConfiguration: android.net.wifi.WifiConfiguration toWifiConfiguration()>
<com.android.wallpapercropper.WallpaperCropActivity: void onCreate(android.os.Bundle)>
<com.android.server.protolog.common.ProtoLog: void e(com.android.server.protolog.common.IProtoLogGroup,java.lang.String,java.lang.Object[])>
<com.android.server.accessibility.AbstractAccessibilityServiceConnection.SystemSupport: com.android.server.accessibility.MotionEventInjector getMotionEventInjectorForDisplayLocked(int)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isSupportsNormalScreens()>
<com.android.server.infra.AbstractMasterSystemService: com.android.server.infra.AbstractPerUserSystemService peekServiceForUserLocked(int)>
<com.android.server.usb.descriptors.UsbACInterface: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.systemui.statusbar.NotificationRemoteInputManager: boolean isNotificationKeptForRemoteInputHistory(java.lang.String)>
<com.android.settingslib.core.lifecycle.ObservableDialogFragment: void onPrepareOptionsMenu(android.view.Menu)>
<com.android.settingslib.RestrictedPreference: void setDisabledByAdmin(com.android.settingslib.RestrictedLockUtils.EnforcedAdmin)>
<com.android.server.utils.ManagedApplicationService.LogEvent: java.lang.String eventToString(int)>
<com.android.systemui.plugins.VolumeDialogController: android.media.AudioManager getAudioManager()>
<com.android.server.accessibility.gestures.TouchState: boolean isGestureDetecting()>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone.HeadsUpEntryPhone: boolean isSticky()>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void onLocationActiveChanged(boolean)>
<com.android.server.usb.UsbDeviceManager: void updateUserRestrictions()>
<com.android.systemui.car.notification.PowerManagerHelper: void <init>(com.android.systemui.car.CarServiceProvider)>
<com.android.systemui.statusbar.policy.BatteryControllerImpl: void setPowerSaveMode(boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean setBottomRoundness(float,boolean)>
<com.android.systemui.statusbar.notification.collection.NotifPipeline: java.util.List getShadeList()>
<com.android.systemui.plugins.qs.DetailAdapter: java.lang.CharSequence getTitle()>
<com.android.externalstorage.TestDocumentsProvider: android.os.ParcelFileDescriptor openDocument(java.lang.String,java.lang.String,android.os.CancellationSignal)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_doesNotSendBroadcastToProfileWithoutPackage()>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: void setOutlineAlpha(float)>
<com.android.keyguard.KeyguardSecurityViewFlipper: android.view.ViewGroup.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams)>
<com.android.server.utils.TimingsTraceAndSlog: void <init>(java.lang.String)>
<com.android.server.broadcastradio.hal2.BroadcastRadioService: android.hardware.radio.ICloseHandle addAnnouncementListener(int[],android.hardware.radio.IAnnouncementListener)>
<com.android.packageinstaller.PackageInstallerActivity.InstallErrorDialog: android.app.Dialog createDialog(java.lang.CharSequence)>
<com.android.systemui.statusbar.StatusBarIconView: void setIconColor(int,boolean)>
<android.content.pm.PackageManagerInternal: void removeIsolatedUid(int)>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void setIsolatedIconLocation(android.graphics.Rect,boolean)>
<com.android.settingslib.development.SystemPropPoker: com.android.settingslib.development.SystemPropPoker getInstance()>
<com.android.egg.neko.NekoTile: void onCreate()>
<com.android.systemui.statusbar.phone.StatusBarWindowView: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>
<com.android.systemui.plugins.SensorManagerPlugin.SensorEventListener: void onSensorChanged(com.android.systemui.plugins.SensorManagerPlugin.SensorEvent)>
<com.android.systemui.qs.tileimpl.QSFactoryImpl: com.android.systemui.plugins.qs.QSTileView createTileView(com.android.systemui.plugins.qs.QSTile,boolean)>
<android.perftests.utils.PerfStatusReporter: android.perftests.utils.BenchmarkState getBenchmarkState()>
<com.android.server.display.color.DisplayTransformManager: void setColorMatrix(int,float[])>
<com.android.systemui.shared.recents.utilities.AppTrace: void start(java.lang.String)>
<android.net.wifi.hotspot2.PasspointConfiguration: int hashCode()>
<com.android.systemui.glwallpaper.EglHelper: void finish()>
<com.android.systemui.qs.tiles.DndTile: void handleSecondaryClick()>
<com.android.settingslib.widget.BarChartPreference: void setBarViewInfos(com.android.settingslib.widget.BarViewInfo[])>
<com.android.networkstack.tethering.TetheringConfiguration: java.lang.String getDeviceConfigProperty(java.lang.String)>
<com.android.server.inputmethod.InputMethodManagerService: boolean isInputMethodPickerShownForTest()>
<com.android.systemui.statusbar.policy.ExtensionController.Extension: void addCallback(java.util.function.Consumer)>
<com.android.keyguard.ViewMediatorCallback: void userActivity()>
<com.android.server.recoverysystem.RecoverySystemService: boolean setupBcb(java.lang.String)>
<com.android.systemui.car.window.OverlayViewMediator: void registerListeners()>
<com.android.systemui.MultiListLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger: java.util.Map getAll()>
<com.android.gallery3d.glrenderer.UploadedTexture: boolean onBind(com.android.gallery3d.glrenderer.GLCanvas)>
<com.android.systemui.assist.ui.EdgeLight: float getLength()>
<com.android.systemui.statusbar.policy.DeviceProvisionedControllerImpl: void onUserSwitched(int)>
<com.android.server.IntentResolver: void sortResults(java.util.List)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: int getMenuSnapTarget()>
<com.android.server.NetworkScoreService: boolean requestScores(android.net.NetworkKey[])>
<com.android.systemui.Prefs: void putBoolean(android.content.Context,java.lang.String,boolean)>
<android.net.wifi.rtt.IRttCallback: void onRangingResults(java.util.List)>
<com.android.systemui.pip.phone.PipMenuActivity: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.net.wifi.IWifiManager: boolean addOrUpdatePasspointConfiguration(android.net.wifi.hotspot2.PasspointConfiguration,java.lang.String)>
<com.android.settingslib.NetworkPolicyEditor: long getPolicyWarningBytes(android.net.NetworkTemplate)>
<com.android.server.usb.descriptors.Usb10ACHeader: byte getNumInterfaces()>
<com.android.systemui.statusbar.phone.MultiUserSwitch: void setUserSwitcherController(com.android.systemui.statusbar.policy.UserSwitcherController)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void handleRefreshState(java.lang.Object)>
<com.android.server.media.RemoteDisplayProviderProxy.Callback: void onDisplayStateChanged(com.android.server.media.RemoteDisplayProviderProxy,android.media.RemoteDisplayState)>
<com.android.server.usb.descriptors.UsbACFeatureUnit: int getNumChannels()>
<com.android.systemui.classifier.Stroke: void addPoint(float,float,long)>
<com.android.systemui.statusbar.phone.PhoneStatusBarTransitions: void onTransition(int,int,boolean)>
<com.android.keyguard.KeyguardClockSwitch: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.accessibility.AutoclickController: void onDestroy()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isRemoved()>
<com.android.systemui.qs.SlashDrawable: int getIntrinsicHeight()>
<com.android.server.locksettings.LockSettingsStrongAuth.StrongAuthTimeoutAlarmListener: long getLatestStrongAuthTime()>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: boolean hasAnimationCallbacks()>
<com.android.systemui.statusbar.phone.StatusBar: void showAssistDisclosure()>
<com.android.systemui.screenshot.TakeScreenshotService: boolean onUnbind(android.content.Intent)>
<com.android.location.provider.ActivityRecognitionProviderWatcher: com.android.location.provider.ActivityRecognitionProvider getActivityRecognitionProvider()>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getDelegatedScopes(android.content.ComponentName,java.lang.String)>
<com.android.server.compat.PlatformCompat: void resetReporting(android.content.pm.ApplicationInfo)>
<com.android.systemui.statusbar.phone.PanelViewController: void setTouchAndAnimationDisabled(boolean)>
<com.android.systemui.qs.QSFooterImpl: void setKeyguardShowing(boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean wasChildInGroupWhenRemoved()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalScanTimeMillis()>
<com.android.server.pm.PackageInstallerService: void updateSessionAppLabel(int,java.lang.String)>
<com.android.systemui.statusbar.notification.row.PartialConversationInfo: boolean isAnimating()>
<android.os.StatsDimensionsValue: int getIntValue()>
<com.android.systemui.tuner.ShortcutPicker: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.phone.ManagedProfileControllerImpl: void <init>(android.content.Context,com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setActualHeight(int,boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setExpandingVelocity(float)>
<com.android.server.pm.ApexManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: java.util.List getReqFeatures()>
<com.android.server.slice.SliceClientPermissions: java.lang.String getFileName()>
<com.android.systemui.statusbar.tv.micdisclosure.AudioRecordingDisclosureBar: void onAudioActivityStateChange(boolean,java.lang.String)>
<com.android.systemui.stackdivider.ForcedResizableInfoActivityController: void onAppTransitionFinished()>
<com.android.systemui.car.volume.CarVolumeDialogImpl: void dismiss(int)>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalRadioOnFreqTimeMillis()>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getOrganizationColor(android.content.ComponentName)>
<com.android.systemui.power.EnhancedEstimates: com.android.settingslib.fuelgauge.Estimate getEstimate()>
<android.net.wifi.hotspot2.pps.Policy: boolean validate()>
<android.net.wifi.WifiScanner.ScanListener: void onFullResult(android.net.wifi.ScanResult)>
<com.android.server.pm.permission.BasePermission: boolean isSoftRestricted()>
<com.android.settingslib.RestrictedLockUtilsInternal: boolean isAdminInCurrentUserOrProfile(android.content.Context,android.content.ComponentName)>
<com.android.server.audio.AudioService: boolean hasMediaDynamicPolicy()>
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>
<android.net.wifi.p2p.WifiP2pGroup: void setNetworkId(int)>
<com.android.server.biometrics.BiometricServiceBase: long getHalDeviceId()>
<com.android.server.usb.descriptors.report.ReportCanvas: java.lang.String getBCDString(int)>
<com.android.server.wallpaper.WallpaperManagerService: void clearWallpaper(java.lang.String,int,int)>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onTaskDisplayChanged(int,int)>
<com.android.uiautomator.core.Configurator: com.android.uiautomator.core.Configurator setWaitForSelectorTimeout(long)>
<com.android.networkstack.tethering.TetheringDependencies: com.android.networkstack.tethering.IPv6TetheringCoordinator getIPv6TetheringCoordinator(java.util.ArrayList,android.net.util.SharedLog)>
<com.android.networkstack.tethering.UpstreamNetworkMonitor: void updateMobileRequiresDun(boolean)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isFingerprintDetectionRunning()>
<com.android.server.TelephonyRegistry: void notifyCallForwardingChanged(boolean)>
<com.android.systemui.statusbar.policy.SignalController: com.android.systemui.statusbar.policy.SignalController.State getState()>
<com.android.commands.svc.UsbCommand: void run(java.lang.String[])>
<com.android.systemui.statusbar.notification.row.NotificationContentView: int getVisibleType()>
<com.android.server.wallpaper.WallpaperManagerService: android.app.WallpaperColors getWallpaperColors(int,int,int)>
<com.android.systemui.statusbar.phone.DozeServiceHost: void dozeTimeTick()>
<android.net.ip.IpClientManager: boolean confirmConfiguration()>
<com.android.systemui.statusbar.phone.NavigationHandle: void setAlpha(float)>
<com.android.server.media.MediaSessionRecord: int getUid()>
<com.android.systemui.statusbar.policy.BluetoothController: boolean isBluetoothEnabled()>
<com.android.server.inputmethod.InputMethodManagerService: void reportActivityView(com.android.internal.view.IInputMethodClient,int,float[])>
<com.android.server.updates.CertificateTransparencyLogInstallReceiver: void install(java.io.InputStream,int)>
<com.android.server.accessibility.AccessibilityManagerService: void onTouchInteractionEnd()>
<com.android.settingslib.drawer.Tile: boolean hasOrder()>
<com.android.server.VibratorService: void onInputDeviceRemoved(int)>
<com.android.systemui.statusbar.phone.ShadeControllerImpl: com.android.systemui.statusbar.phone.NotificationShadeWindowView getNotificationShadeWindowView()>
<com.android.server.accessibility.AccessibilityManagerService: void interrupt(int)>
<com.android.server.VibratorService: void onInputDeviceChanged(int)>
<com.android.server.autofill.RemoteInlineSuggestionRenderService: long getTimeoutIdleBindMillis()>
<javax.obex.ClientSession: boolean sendRequest(int,byte[],javax.obex.HeaderSet,javax.obex.PrivateInputStream,boolean)>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setExpandAnimationRunning(boolean)>
<com.android.systemui.plugins.VolumeDialogController: boolean areCaptionsEnabled()>
<com.android.systemui.plugins.NavigationEdgeBackPlugin: void setBackCallback(com.android.systemui.plugins.NavigationEdgeBackPlugin.BackCallback)>
<com.android.settingslib.drawer.SwitchesProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.net.wifi.rtt.RangingResult: int describeContents()>
<com.android.settingslib.development.AbstractEnableAdbPreferenceController: void updateState(androidx.preference.Preference)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isMarkedForUserTriggeredMovement()>
<com.android.systemui.usb.UsbResolverActivity: boolean onTargetSelected(com.android.internal.app.chooser.TargetInfo,boolean)>
<com.android.commands.uiautomator.EventsCommand: java.lang.String detailedOptions()>
<android.content.pm.PackageManagerInternal: boolean canAccessInstantApps(int,int)>
<com.android.server.stats.pull.netstats.SubInfo: int hashCode()>
<com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder: com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder withCallback(java.util.function.Consumer)>
<com.android.media.tv.remoteprovider.TvRemoteProvider: void onInputBridgeConnected(android.os.IBinder)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout: void cancelAnimationsOnView(android.view.View)>
<com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl: void suggestManualTimeZone(android.app.timezonedetector.ManualTimeZoneSuggestion)>
<com.android.server.people.prediction.AppTargetPredictor: java.util.function.Consumer getUpdatePredictionsMethod()>
<com.android.systemui.assist.AssistOrbView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.vr.EnabledComponentsObserver.EnabledComponentChangeListener: void onEnabledComponentChanged()>
<com.android.systemui.analytics.DataCollector: void onNotificationActive()>
<com.android.systemui.statusbar.notification.collection.NotifPipeline: void addOnBeforeFinalizeFilterListener(com.android.systemui.statusbar.notification.collection.listbuilder.OnBeforeFinalizeFilterListener)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: boolean isPermissionsReviewRequired(com.android.server.pm.parsing.pkg.AndroidPackage,int)>
<com.android.systemui.doze.DozeMachine: void requestState(com.android.systemui.doze.DozeMachine.State)>
<com.android.systemui.keyguard.ScreenLifecycle: void dispatchScreenTurningOn()>
<com.android.systemui.util.leak.GarbageMonitor.MemoryTile: int getMetricsCategory()>
<com.android.settingslib.bluetooth.A2dpProfile: boolean accessProfileEnabled()>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger.EditorLogger: android.content.SharedPreferences.Editor clear()>
<com.android.server.tv.tunerresourcemanager.UseCasePriorityHints: void parseInternal(java.io.InputStream)>
<com.android.systemui.statusbar.policy.ExtensionController.TunerFactory: java.lang.String[] keys()>
<android.media.MediaParser: android.media.MediaParser create(android.media.MediaParser.OutputConsumer,java.lang.String[])>
<com.android.uiautomator.testrunner.TestCaseCollector: void addSingleTestMethod(java.lang.Class,java.lang.String)>
<com.google.android.startop.iorap.ActivityHintEvent: void <init>(int,com.google.android.startop.iorap.ActivityInfo)>
<com.android.systemui.statusbar.notification.row.HybridNotificationView: void transformFrom(com.android.systemui.statusbar.TransformableView,float)>
<com.android.server.pm.UserManagerService.LifeCycle: void onStopUser(int)>
<com.android.systemui.statusbar.NotificationPresenter: boolean isCollapsing()>
<com.android.server.media.MediaSession2Record: void close()>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void initFrom(com.android.systemui.statusbar.phone.KeyguardBottomAreaView)>
<com.android.settingslib.utils.PowerUtil: long convertMsToUs(long)>
<javax.microedition.khronos.opengles.GL11: boolean glIsEnabled(int)>
<com.android.server.timezone.RulesManagerService: android.app.timezone.RulesState getRulesState()>
<com.android.systemui.media.dialog.MediaOutputBaseDialog: void onRouteChanged()>
<com.android.systemui.qs.tileimpl.QSTileImpl: void handleDestroy()>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onKeyguardBouncerChanged(boolean)>
<com.android.systemui.qs.AutoAddTracker: void changeUser(android.os.UserHandle)>
<com.android.systemui.statusbar.notification.TransformState: com.android.systemui.statusbar.notification.TransformState obtain()>
<com.android.server.role.RoleManagerService.RoleHoldersResolver: java.util.List getRoleHolders(java.lang.String,int)>
<com.android.settingslib.display.DisplayDensityUtils: int[] getValues()>
<com.android.systemui.glwallpaper.ImageWallpaperRenderer: android.util.Size reportSurfaceSize()>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcher: boolean hideIfNotSimple(boolean)>
<com.android.settingslib.Utils: void updateLocationEnabled(android.content.Context,boolean,int,int)>
<android.net.wifi.hotspot2.pps.Policy: int getMaximumBssLoadValue()>
<com.android.keyguard.KeyguardPinBasedInputView: int getPromptReasonStringRes(int)>
<com.android.systemui.statusbar.phone.StatusBar: boolean isPanelExpanded()>
<com.android.server.appwidget.AppWidgetService: void onBootPhase(int)>
<com.android.wallpapercropper.CropView: void onScaleEnd(android.view.ScaleGestureDetector)>
<com.android.systemui.statusbar.policy.RemoteInputView.RemoteEditText: boolean onKeyDown(int,android.view.KeyEvent)>
<com.android.server.accessibility.MagnificationController: void persistScale()>
<com.android.systemui.plugins.FalsingManager: void onNotificatonStopDraggingDown()>
<com.android.systemui.statusbar.ScalingDrawableWrapper: int getIntrinsicHeight()>
<com.android.systemui.car.window.OverlayPanelViewController: void onPanelExpanded(boolean)>
<com.android.systemui.statusbar.HeadsUpStatusBarView: void <init>(android.content.Context,android.util.AttributeSet)>
<javax.obex.ServerOperation: void ensureNotDone()>
<com.android.systemui.globalactions.GlobalActionsLayout: void addToSeparatedView(android.view.View,boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void setContainingNotification(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<android.net.ip.IpServer.Callback: void requestEnableTethering(int,boolean)>
<com.android.powermodel.component.CpuProfile.Builder: void setCorePower(int,float[])>
<com.android.systemui.statusbar.OperatorNameView: void <init>(android.content.Context)>
<javax.obex.BaseStream: void streamClosed(boolean)>
<com.android.server.pm.parsing.PackageCacher: byte[] toCacheEntryStatic(com.android.server.pm.parsing.pkg.ParsedPackage)>
<com.android.systemui.colorextraction.SysuiColorExtractor: void setHasMediaArtwork(boolean)>
<com.android.keyguard.NumPadKey: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.qs.PagedTileLayout: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.locksettings.LockSettingsStrongAuth: void requireStrongAuth(int,int)>
<com.android.server.SystemService: boolean isSafeMode()>
<com.android.systemui.classifier.FalsingManagerImpl: void onTrackingStopped()>
<com.android.server.slice.SliceClientPermissions: void grantUri(android.net.Uri,com.android.server.slice.SlicePermissionManager.PkgUser)>
<com.android.server.locksettings.PasswordSlotManager: java.util.Set getUsedSlots()>
<com.android.server.locksettings.SyntheticPasswordManager: boolean activateTokenBasedSyntheticPassword(long,com.android.server.locksettings.SyntheticPasswordManager.AuthenticationToken,int)>
<com.android.systemui.SwipeHelper.Callback: void onDragCancelled(android.view.View)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl clearAdoptPermissions()>
<com.android.photos.views.TiledImageView: void setTileSource(com.android.photos.views.TiledImageRenderer.TileSource,java.lang.Runnable)>
<com.android.server.accessibility.FullScreenMagnificationGestureHandler.State: void onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)>
<com.android.settingslib.fuelgauge.BatterySaverUtils: boolean setPowerSaveMode(android.content.Context,boolean,boolean)>
<com.android.systemui.qs.PagedTileLayout: int getOffsetTop(com.android.systemui.qs.QSPanel.TileRecord)>
<com.android.server.storage.FileCollector: com.android.server.storage.FileCollector.MeasurementResult getMeasurementResult(java.io.File)>
<com.android.packageinstaller.wear.InstallTask: boolean isError()>
<com.android.systemui.statusbar.SmartReplyController: void smartReplySent(com.android.systemui.statusbar.notification.collection.NotificationEntry,int,java.lang.CharSequence,int,boolean)>
<com.android.systemui.statusbar.phone.KeyguardClockPositionAlgorithm: void loadDimens(android.content.res.Resources)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: void <init>(android.view.View)>
<com.android.server.IpSecService.UidFdTagger: void tag(java.io.FileDescriptor,int)>
<com.android.systemui.statusbar.phone.LockscreenGestureLogger: void log(com.android.systemui.statusbar.phone.LockscreenGestureLogger.LockscreenUiEvent)>
<com.android.systemui.statusbar.notification.MessagingImageTransformState: boolean transformScale(com.android.systemui.statusbar.notification.TransformState)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void dismissWithAction(com.android.systemui.plugins.ActivityStarter.OnDismissAction,java.lang.Runnable,boolean)>
<com.android.server.pm.PackageManagerServiceUtils: void enforceShellRestriction(android.os.UserManagerInternal,java.lang.String,int,int)>
<javax.microedition.khronos.opengles.GL11: void glPointParameterfv(int,float[],int)>
<android.net.wifi.WifiSsid: int describeContents()>
<com.android.server.PersistentDataBlockService: void onBootPhase(int)>
<com.android.systemui.statusbar.phone.StatusBar: void suppressAmbientDisplay(boolean)>
<com.android.server.stats.StatsManagerService: long[] setActiveConfigsChangedOperation(android.app.PendingIntent,java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>
<com.android.carrierdefaultapp.CaptivePortalLoginActivity: void onBackPressed()>
<com.android.server.pm.PackageManagerService.Injector: com.android.server.pm.Installer getInstaller()>
<com.android.systemui.util.DeviceConfigProxy: long getLong(java.lang.String,java.lang.String,long)>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: int getSystemBarsAppearance()>
<com.android.systemui.car.sideloaded.SideLoadedAppController: void onBootCompleted()>
<com.android.systemui.classifier.FalsingManagerImpl: void onTrackingStarted(boolean)>
<com.android.systemui.statusbar.CommandQueue: void appTransitionStarting(int,long,long,boolean)>
<com.android.systemui.screenshot.ScrollCaptureController: void <init>(android.view.IWindowManager)>
<com.android.server.pm.permission.PermissionManagerServiceInternal.DefaultDialerProvider: java.lang.String getDefaultDialer(int)>
<com.android.systemui.car.window.OverlayViewController: boolean shouldShowNavigationBarInsets()>
<com.android.systemui.statusbar.notification.NotificationEntryManager.KeyguardEnvironment: boolean isDeviceProvisioned()>
<com.android.systemui.power.PowerNotificationWarnings: void dismissInvalidChargerWarning()>
<com.android.keyguard.KeyguardSecurityContainer.SecurityCallback: void userActivity()>
<com.android.server.lights.LightsManager: com.android.server.lights.LogicalLight getLight(int)>
<com.android.server.inputmethod.InputMethodManagerService: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
<com.android.server.midi.MidiService: void closeDevice(android.os.IBinder,android.os.IBinder)>
<com.android.server.pm.ApexManager.ApexManagerImpl: java.lang.String getActiveApexPackageNameContainingPackage(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: android.util.SparseArray getCurrentProfiles()>
<com.android.printspooler.renderer.IPdfEditor: void applyPrintAttributes(android.print.PrintAttributes)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean bouncerNeedsScrimming()>
<com.android.systemui.SizeCompatModeActivityController: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean)>
<android.app.OverlayManagerPerfTest: void classSetUp()>
<com.android.systemui.qs.QuickStatusBarHeader: void setExpandedScrollAmount(int)>
<com.android.localtransport.LocalTransport: java.lang.String transportDirName()>
<com.android.systemui.qs.external.TileLifecycleManager: void setBindRetryDelay(int)>
<com.android.systemui.statusbar.phone.BarTransitions: void <init>(android.view.View,int)>
<com.android.systemui.tuner.ClipboardView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.qs.tileimpl.QSTileBaseView: java.lang.String toString()>
<com.android.networkstack.tethering.OffloadHardwareInterface: boolean initOffloadControl(com.android.networkstack.tethering.OffloadHardwareInterface.ControlCallback)>
<com.android.systemui.statusbar.policy.InflatedSmartReplies.SmartRepliesAndActions: java.util.List getSmartActions()>
<com.android.settingslib.bluetooth.LocalBluetoothProfileManager: com.android.settingslib.bluetooth.A2dpProfile getA2dpProfile()>
<com.android.systemui.classifier.AccelerationClassifier: java.lang.String getTag()>
<com.android.systemui.statusbar.phone.StatusBarIconList.Slot: java.util.List getHolderListInViewOrder()>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void onDisplayChanged(int)>
<com.android.settingslib.dream.DreamBackend: void startDreaming()>
<com.android.systemui.qs.QSDualTileLabel: java.lang.String getText()>
<com.android.server.policy.PhoneWindowManager: void finishedGoingToSleep(int)>
<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal create(android.content.Context,java.lang.Object)>
<com.android.systemui.statusbar.StatusBarIconView: java.lang.String toString()>
<android.net.wifi.WifiManager: void connect(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager.ActionListener)>
<com.android.systemui.stackdivider.Divider: void onDraggingStart()>
<com.android.systemui.qs.QSContainerImpl: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.settingslib.RestrictedSwitchPreference: void setDisabledByAdmin(com.android.settingslib.RestrictedLockUtils.EnforcedAdmin)>
<com.android.server.audio.SystemServerAdapter: void <init>(android.content.Context)>
<android.net.ip.IpServer: int servingMode()>
<com.android.server.people.data.PackageData: com.android.server.people.data.ConversationInfo getConversationInfo(java.lang.String)>
<com.android.systemui.qs.tileimpl.QSIconViewImpl: void onLayout(boolean,int,int,int,int)>
<android.net.wifi.ScanResult: void <init>(android.net.wifi.WifiSsid,java.lang.String,java.lang.String,int,int,long,int,int)>
<com.android.systemui.shared.system.PinnedStackListenerForwarder: void onMovementBoundsChanged(boolean)>
<com.android.server.input.InputManagerService: void systemRunning()>
<com.android.server.uri.UriGrantsManagerInternal: void revokeUriPermission(java.lang.String,int,com.android.server.uri.GrantUri,int)>
<android.net.wifi.SoftApConfiguration: boolean equals(java.lang.Object)>
<com.android.systemui.doze.DozeLog: void traceState(com.android.systemui.doze.DozeMachine.State)>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void showSystemIconArea(boolean)>
<com.android.systemui.tracing.ProtoTracer: com.android.systemui.tracing.nano.SystemUiTraceEntryProto updateBufferProto(com.android.systemui.tracing.nano.SystemUiTraceEntryProto,java.util.ArrayList)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: boolean isTrusted()>
<android.content.pm.PackageManagerInternal: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int,int)>
<com.android.settingslib.core.instrumentation.VisibilityLoggerMixin: void onResume()>
<com.android.systemui.qs.QSFooterImpl: void updateEverything()>
<javax.obex.ServerOperation: java.io.DataInputStream openDataInputStream()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void animateExpandSettingsPanel(java.lang.String)>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setTerminateNotificationEnabled(boolean)>
<com.android.gallery3d.exif.ExifInterface: void writeExif(byte[],java.io.OutputStream)>
<com.android.systemui.statusbar.phone.dagger.StatusBarPhoneDependenciesModule: com.android.systemui.statusbar.phone.NotificationGroupAlertTransferHelper provideNotificationGroupAlertTransferHelper(com.android.systemui.statusbar.notification.row.RowContentBindStage)>
<com.android.systemui.statusbar.notification.row.FooterView: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.qs.tiles.FlashlightTile: com.android.systemui.plugins.qs.QSTile.BooleanState newTileState()>
<com.android.server.trust.TrustAgentWrapper: void onDeviceLocked()>
<com.android.server.companion.CompanionDeviceManagerService: void onStart()>
<com.android.server.audio.AudioService: void onAudioServerDied()>
<com.android.systemui.bubbles.BubbleTaskView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector longClickable(boolean)>
<com.android.systemui.assist.AssistOrbView: void startEnterAnimation()>
<com.android.systemui.statusbar.notification.logging.NotificationLogger: void setHeadsUpManager(com.android.systemui.statusbar.policy.HeadsUpManager)>
<com.android.systemui.statusbar.phone.ContextualButton: com.android.systemui.statusbar.policy.KeyButtonDrawable getNewDrawable()>
<android.net.wifi.p2p.WifiP2pDevice: int hashCode()>
<com.android.systemui.car.volume.CarVolumeItemAdapter: int getItemCount()>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Bundle getUserRestrictions(android.content.ComponentName,boolean)>
<javax.obex.BaseStream: void ensureOpen()>
<com.android.systemui.shared.plugins.VersionInfo: int getDefaultVersion()>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int findKeyReceiverAddress()>
<com.android.server.usb.UsbDeviceManager: android.hardware.usb.UsbAccessory getCurrentAccessory()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowViewController: com.android.systemui.statusbar.phone.PhoneStatusBarTransitions getBarTransitions()>
<com.google.android.startop.iorap.PackageEvent: java.lang.String toString()>
<com.android.systemui.statusbar.policy.BatteryController: boolean isWirelessCharging()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setExpandClickListener(android.view.View.OnClickListener)>
<com.android.server.usb.descriptors.Usb20ASFormatIIEx: int getSamplesPerFrame()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void transformTo(com.android.systemui.statusbar.TransformableView,java.lang.Runnable)>
<com.android.systemui.statusbar.phone.NotificationsQuickSettingsContainer: void dispatchDraw(android.graphics.Canvas)>
<com.android.server.usb.descriptors.report.HTMLReportCanvas: void writeParagraph(java.lang.String,boolean)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowViewController: void setService(com.android.systemui.statusbar.phone.StatusBar,com.android.systemui.statusbar.phone.NotificationShadeWindowController)>
<com.android.server.NativeDaemonConnectorException: void <init>(java.lang.String,java.lang.Throwable)>
<com.android.server.policy.PhoneWindowManager: void showBootMessage(java.lang.CharSequence,boolean)>
<android.net.wifi.WifiConfiguration: java.lang.String getMoTree()>
<android.net.wifi.RttManager.RttCapabilities: int describeContents()>
<com.android.systemui.qs.QuickStatusBarHeader: void onNextAlarmChanged(android.app.AlarmManager.AlarmClockInfo)>
<com.android.networkstack.tethering.BpfCoordinator.Ipv6ForwardingRule: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: void setPulsing(boolean)>
<com.android.externalstorage.ExternalStorageProvider: void onDocIdChanged(java.lang.String)>
<com.android.settingslib.RestrictedSwitchPreference: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isChildInGroup()>
<com.android.server.audio.PlaybackActivityMonitor: void unduckPlayers(com.android.server.audio.FocusRequester)>
<com.android.server.PackageWatchdog.SystemClock: long uptimeMillis()>
<com.android.systemui.statusbar.phone.StatusBar: java.lang.Object createHandler()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: int getOriginalIconColor()>
<com.android.systemui.statusbar.FeatureFlags: boolean isNewNotifPipelineEnabled()>
<com.android.systemui.statusbar.policy.Clock: void setClockVisibleByUser(boolean)>
<com.android.systemui.statusbar.AlertingNotificationManager: java.util.stream.Stream getAllEntries()>
<android.net.wifi.WifiNetworkSuggestion: android.net.wifi.WifiEnterpriseConfig getEnterpriseConfig()>
<com.android.server.audio.PlayerFocusEnforcer: void unduckPlayers(com.android.server.audio.FocusRequester)>
<com.android.egg.neko.Cat: void <init>(android.content.Context,long)>
<com.android.systemui.statusbar.notification.logging.NotificationLogger: void stopNotificationLogging()>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: void setSystemBarsAppearance(int,int)>
<com.android.systemui.statusbar.phone.StatusBarTouchableRegionManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.Watchdog.HandlerChecker: int getCompletionStateLocked()>
<com.android.systemui.tuner.TunerActivity: boolean onMenuItemSelected(int,android.view.MenuItem)>
<com.android.printspooler.model.CustomPrinterIconCache: void <init>(java.io.File)>
<com.android.systemui.car.CarDeviceProvisionedControllerImpl: void onUserSwitched(int)>
<com.android.systemui.assist.ui.EdgeLight: float getCenter()>
<com.android.systemui.statusbar.phone.NotificationIconContainer: int getFinalTranslationX()>
<com.android.server.pm.Settings: boolean canPropagatePermissionToInstantApp(java.lang.String)>
<javax.microedition.khronos.opengles.GL10: void glNormal3f(float,float,float)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: void showAppOpsIcons(android.util.ArraySet)>
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoUnfiltered()>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: java.lang.String getSharedUserId()>
<com.android.systemui.qs.QSTileHost: com.android.systemui.qs.external.TileServices getTileServices()>
<com.android.server.role.RoleUserState: void setPackagesHash(java.lang.String)>
<com.android.settingslib.bluetooth.LocalBluetoothManager: com.android.settingslib.bluetooth.LocalBluetoothManager create(android.content.Context,android.os.Handler)>
<com.android.systemui.settings.ToggleSeekBar: void setEnforcedAdmin(com.android.settingslib.RestrictedLockUtils.EnforcedAdmin)>
<com.android.systemui.settings.BrightnessController: void <init>(android.content.Context,com.android.systemui.settings.ToggleSlider,com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.server.pm.ShortcutService: boolean updateShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void keyguardGoingAway()>
<com.android.server.autofill.ui.InlineFillUi: com.android.server.autofill.ui.InlineFillUi emptyUi(android.view.autofill.AutofillId)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper getVisibleWrapper(int)>
<com.android.server.soundtrigger_middleware.SoundTriggerHw2Enforcer: android.hardware.soundtrigger.V2_3.Properties getProperties()>
<com.android.systemui.qs.tiles.UserTile: int getMetricsCategory()>
<com.android.systemui.shared.system.ActivityManagerWrapper: void removeTask(int)>
<com.android.systemui.statusbar.notification.row.FooterViewButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.qs.PageIndicator: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.appbinding.finders.CarrierMessagingClientServiceFinder: boolean isEnabled(com.android.server.appbinding.AppBindingConstants)>
<com.android.systemui.volume.SafetyWarningDialog: void onStart()>
<com.android.systemui.statusbar.NavigationBarController: com.android.systemui.assist.AssistHandleViewController getAssistHandlerViewController()>
<com.android.server.pm.ApexManager: long snapshotCeData(int,int,java.lang.String)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void initBackground()>
<com.android.server.hdmi.HdmiCecMessage: int getOpcode()>
<android.net.wifi.WifiInfo: void setRssi(int)>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy.MobileIconState: int hashCode()>
<com.android.server.appop.AppOpsService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<android.media.BufferingParams: int getResumePlaybackMarkMs()>
<com.android.systemui.qs.external.CustomTile: android.service.quicksettings.Tile getQsTile()>
<com.android.systemui.statusbar.phone.BiometricUnlockController: void onBiometricAuthFailed(android.hardware.biometrics.BiometricSourceType)>
<com.android.server.usb.UsbMidiDevice: void dump(java.lang.String,com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>
<android.app.backup.BackupUtilsTest: void testIsFileSpecifiedInPathList_whenDirectoryAndPathListContainsFirstNotRelatedAndSecondSameDirectory()>
<com.android.systemui.bubbles.BubbleData: boolean isExpanded()>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: android.content.pm.IPackageManager getIPackageManager()>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: void setFrontendInfoListInternal(android.media.tv.tunerresourcemanager.TunerFrontendInfo[])>
<com.android.media.tv.remoteprovider.TvRemoteProvider: void openGamepadBridge(android.os.IBinder,java.lang.String)>
<android.net.wifi.WifiManager: java.util.List getNetworkSuggestions()>
<com.android.systemui.statusbar.phone.LockscreenLockIconController: com.android.systemui.statusbar.phone.LockIcon getView()>
<com.android.systemui.statusbar.policy.PreviewInflater: void <init>(android.content.Context,com.android.internal.widget.LockPatternUtils,com.android.systemui.ActivityIntentHelper)>
<com.android.keyguard.KeyguardViewController: boolean shouldSubtleWindowAnimationsForUnlock()>
<com.android.settingslib.widget.AdaptiveIcon: void setBackgroundColor(int)>
<com.android.printspooler.ui.PageAdapter: void finalize()>
<com.android.server.inputmethod.InputMethodManagerInternal: void hideCurrentInputMethod(int)>
<android.net.wifi.WifiManager.LocalOnlyHotspotCallback: void onFailed(int)>
<com.android.server.pm.permission.BasePermission: void updateDynamicPermission(java.util.Collection)>
<com.android.server.soundtrigger_middleware.ISoundTriggerHw2.Callback: void phraseRecognitionCallback(android.hardware.soundtrigger.V2_1.ISoundTriggerHwCallback.PhraseRecognitionEvent,int)>
<com.android.server.accessibility.gestures.TouchExplorer: boolean onGestureCompleted(android.accessibilityservice.AccessibilityGestureEvent)>
<com.android.server.pm.InstructionSets: java.lang.String getPreferredInstructionSet()>
<com.android.systemui.qs.QSFooterImpl: void onUserInfoChanged(java.lang.String,android.graphics.drawable.Drawable,java.lang.String)>
<com.android.uiautomator.core.UiAutomatorBridge: boolean takeScreenshot(java.io.File,int)>
<com.android.systemui.statusbar.DragDownHelper: boolean isDragDownEnabled()>
<android.net.wifi.rtt.RangingResult: void <init>(int,android.net.wifi.aware.PeerHandle,int,int,int,int,int,byte[],byte[],android.net.wifi.rtt.ResponderLocation,long)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getUiOptions()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setNeedsRedaction(boolean)>
<com.android.server.statusbar.StatusBarManagerService: void suppressAmbientDisplay(boolean)>
<com.android.systemui.statusbar.phone.LightBarController: void onPowerSaveChanged(boolean)>
<android.net.ConnectivityModuleConnector.Dependencies: android.content.Intent getModuleServiceIntent(android.content.pm.PackageManager,java.lang.String,java.lang.String,boolean)>
<com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper.SnoozeOption: java.lang.CharSequence getDescription()>
<com.android.settingslib.animation.DisappearAnimationUtils: void <init>(android.content.Context,long,float,float,android.view.animation.Interpolator)>
<com.android.networkstack.tethering.TetheringDependencies: com.android.networkstack.tethering.TetheringConfiguration generateTetheringConfiguration(android.content.Context,android.net.util.SharedLog,int)>
<android.net.dhcp.DhcpServingParamsParcelExt: android.net.dhcp.DhcpServingParamsParcelExt setNoDnsServer()>
<com.android.settingslib.wifi.AccessPoint: java.lang.String convertToQuotedString(java.lang.String)>
<com.android.uiautomator.core.Tracer: com.android.uiautomator.core.Tracer getInstance()>
<com.android.systemui.statusbar.policy.LocationControllerImpl: boolean isLocationEnabled()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: java.util.List getSnoozeCriteria()>
<com.android.systemui.statusbar.policy.DeviceProvisionedControllerImpl: int getCurrentUser()>
<com.android.systemui.appops.AppOpsController: void removeCallback(int[],com.android.systemui.appops.AppOpsController.Callback)>
<com.android.server.usb.descriptors.UsbACMidiEndpoint: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.systemui.bubbles.BubbleStackView: boolean isExpanded()>
<com.android.systemui.statusbar.phone.RotationContextButton: void <init>(int,int)>
<com.android.server.soundtrigger.SoundTriggerService.LocalSoundTriggerService: int getParameter(int,int)>
<com.android.systemui.shared.system.WindowManagerWrapper: void overridePendingAppTransitionMultiThumbFuture(com.android.systemui.shared.recents.view.AppTransitionAnimationSpecsFuture,java.lang.Runnable,android.os.Handler,boolean,int)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void translate(float,float)>
<com.android.systemui.statusbar.policy.RemoteInputView: void onClick(android.view.View)>
<com.android.server.pm.dex.DexManager: boolean dexoptSecondaryDex(com.android.server.pm.dex.DexoptOptions)>
<com.android.server.compat.PlatformCompat: boolean isChangeEnabledByUid(long,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void markProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName,int)>
<javax.microedition.khronos.opengles.GL10: void glNormalPointer(int,int,java.nio.Buffer)>
<com.android.systemui.statusbar.phone.DemoStatusIcons: void onDarkChanged(android.graphics.Rect,float,int)>
<android.net.wifi.hotspot2.pps.Policy.RoamingPartner: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.car.window.OverlayPanelViewController: boolean shouldAnimateExpandPanel()>
<com.android.server.usb.descriptors.UsbDescriptorParser: java.lang.String getDescriptorString(int)>
<com.android.settingslib.RestrictedLockUtils: void sendShowAdminSupportDetailsIntent(android.content.Context,com.android.settingslib.RestrictedLockUtils.EnforcedAdmin)>
<android.net.wifi.ILocalOnlyHotspotCallback: void onHotspotStopped()>
<com.android.server.inputmethod.MultiClientInputMethodManagerService.Lifecycle: void onStopUser(int)>
<com.android.networkstack.tethering.BpfCoordinator: void addUpstreamNameToLookupTable(int,java.lang.String)>
<android.app.backup.BackupUtilsTest: void testIsFileSpecifiedInPathList_whenDirectoryAndPathListHasIt()>
<com.android.systemui.statusbar.StatusBarMobileView: com.android.systemui.statusbar.phone.StatusBarSignalPolicy.MobileIconState getState()>
<com.android.server.testing.shadows.FrameworkShadowLooper: void setCurrentThread(boolean)>
<javax.obex.ServerRequestHandler: void updateStatus(java.lang.String)>
<com.android.localtransport.LocalTransport: long getCurrentRestoreSet()>
<com.android.settingslib.fuelgauge.PowerWhitelistBackend: boolean isSysWhitelisted(java.lang.String)>
<com.android.systemui.doze.DozeService: void requestWakeUp()>
<android.net.wifi.WifiManager: boolean isDeviceToDeviceRttSupported()>
<com.android.systemui.AutoReinflateContainer: void onOverlayChanged()>
<com.android.server.usb.descriptors.Usb20ASFormatIIEx: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.networkstack.tethering.OffloadController: boolean start()>
<com.android.systemui.statusbar.policy.SignalController: com.android.systemui.statusbar.policy.SignalController.IconGroup getIcons()>
<com.android.printspooler.widget.PrintContentView: void setOpenOptionsController(com.android.printspooler.widget.PrintContentView.OptionsStateController)>
<com.android.server.biometrics.fingerprint.FingerprintUserState: java.lang.String getBiometricFile()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setActivatedChild(com.android.systemui.statusbar.notification.row.ActivatableNotificationView)>
<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isPinned()>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifCollectionListener: void onRankingUpdate(android.service.notification.NotificationListenerService.RankingMap)>
<com.android.server.pm.parsing.PackageCacher: byte[] toCacheEntry(com.android.server.pm.parsing.pkg.ParsedPackage)>
<com.android.systemui.tuner.BatteryPreference: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.phone.StatusBar: com.android.systemui.statusbar.phone.NavigationBarView getNavigationBarView()>
<com.android.settingslib.search.Indexable.SearchIndexProvider: java.util.List getXmlResourcesToIndex(android.content.Context,boolean)>
<com.android.systemui.car.navigationbar.CarNavigationBar: void abortTransient(int,int[])>
<com.android.systemui.statusbar.notification.VisualStabilityManager: void addReorderingAllowedCallback(com.android.systemui.statusbar.notification.VisualStabilityManager.Callback,boolean)>
<com.android.localtransport.LocalTransport: int startRestore(long,android.content.pm.PackageInfo[])>
<com.android.gallery3d.common.Utils: boolean isNullOrEmpty(java.lang.String)>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcher: void show(boolean)>
<com.android.settingslib.users.AppRestrictionsHelper: void fetchAndMergeApps()>
<com.android.server.accounts.AccountManagerService: boolean accountAuthenticated(android.accounts.Account)>
<com.android.preload.check.IntegrityCheck: void main(java.lang.String[])>
<com.android.settingslib.core.instrumentation.EventLogWriter: void action(android.content.Context,int,android.util.Pair[])>
<com.android.systemui.statusbar.notification.TransformState: boolean transformScale(com.android.systemui.statusbar.notification.TransformState)>
<com.android.systemui.statusbar.ScreenRecordDrawable: boolean onLayoutDirectionChanged(int)>
<com.android.powermodel.RawBatteryStats: java.util.List getRecords()>
<com.android.server.integrity.parser.LimitInputStream: long skip(long)>
<com.android.settingslib.widget.AnimatedImageView: void onAttachedToWindow()>
<com.android.location.provider.LocationProviderBase: boolean isAllowed()>
<android.net.wifi.hotspot2.PasspointConfiguration: int getCredentialPriority()>
<com.android.systemui.tuner.ClipboardView: void startListening()>
<com.android.systemui.statusbar.notification.row.NotifBindPipeline: void manageRow(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.statusbar.phone.StatusBar: void dismissKeyguardThenExecute(com.android.systemui.plugins.ActivityStarter.OnDismissAction,boolean)>
<com.android.systemui.statusbar.notification.row.RowInflaterTask.RowInflationFinishedListener: void onInflationFinished(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: boolean isNetworkPermanentlyDisabled()>
<com.android.systemui.plugins.VolumeDialogController.Callbacks: void onShowSilentHint()>
<com.android.systemui.stackdivider.ForcedResizableInfoActivity: boolean onTouch(android.view.View,android.view.MotionEvent)>
<com.android.systemui.appops.AppOpsControllerImpl.H: void scheduleRemoval(com.android.systemui.appops.AppOpItem,long)>
<com.android.systemui.appops.AppOpsControllerImpl: java.util.List getActiveAppOps()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenxv(int,int,int[],int)>
<com.android.dynsystem.InstallationAsyncTask.ProgressListener: void onProgressUpdate(com.android.dynsystem.InstallationAsyncTask.Progress)>
<com.android.server.biometrics.fingerprint.FingerprintAuthenticator: long getAuthenticatorId(int)>
<com.android.settingslib.core.instrumentation.VisibilityLoggerMixin: void onAttach()>
<com.android.proxyhandler.ProxyServer: void startServer()>
<android.net.wifi.WifiManager: boolean disableNetwork(int)>
<com.android.settingslib.drawer.SwitchController: java.lang.String getSwitchKey()>
<com.android.systemui.statusbar.phone.StatusBarIconList: int getSlotIndex(java.lang.String)>
<com.android.server.policy.keyguard.KeyguardStateMonitor.StateCallback: void onTrustedChanged()>
<com.android.systemui.plugins.ClockPlugin: void setTextColor(int)>
<com.android.server.pm.UserManagerService: int getUserBadgeLabelResId(int)>
<com.android.systemui.util.wakelock.KeepAwakeAnimationListener: void onAnimationEnd(android.animation.Animator)>
<com.android.server.timedetector.TimeDetectorService: void suggestNetworkTime(android.app.timedetector.NetworkTimeSuggestion)>
<com.android.systemui.plugins.qs.QS: void setHasNotifications(boolean)>
<android.content.pm.PackageManagerInternal: void setDeviceAndProfileOwnerPackages(int,java.lang.String,android.util.SparseArray)>
<com.android.server.soundtrigger_middleware.ISoundTriggerHw2: int loadSoundModel(android.hardware.soundtrigger.V2_1.ISoundTriggerHw.SoundModel,com.android.server.soundtrigger_middleware.SoundTriggerHw2Compat.Callback,int)>
<android.net.wifi.WifiManager: boolean isWpa3SaeSupported()>
<com.android.systemui.qs.QSScrollLayout: void <init>(android.content.Context,android.view.View[])>
<com.android.keyguard.KeyguardSecurityContainer: com.android.keyguard.KeyguardSecurityModel.SecurityMode getCurrentSecuritySelection()>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setWpa3EnterpriseConfig(android.net.wifi.WifiEnterpriseConfig)>
<android.provider.settings.validators.ComponentNameListValidator: void <init>(java.lang.String)>
<com.android.systemui.statusbar.phone.EdgeBackGestureHandler: void onUserSwitched(int)>
<com.android.settingslib.bluetooth.PbapServerProfile: boolean accessProfileEnabled()>
<com.android.systemui.statusbar.KeyguardAffordanceView: void setCircleRadiusWithoutAnimation(float)>
<com.android.systemui.statusbar.notification.row.StackScrollerDecorView: void setSecondaryVisible(boolean,boolean)>
<com.android.keyguard.KeyguardStatusView: void setHasVisibleNotifications(boolean)>
<android.net.wifi.hotspot2.OsuProvider: java.util.List getMethodList()>
<android.net.ip.IpClientCallbacks: void startReadPacketFilter()>
<com.android.systemui.statusbar.phone.NavigationBarView: void onLayout(boolean,int,int,int,int)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void preloadRecentApps()>
<com.android.systemui.shared.plugins.PluginManager: com.android.systemui.plugins.Plugin getOneShotPlugin(java.lang.Class)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: void resetAnimation()>
<com.android.server.pm.permission.BasePermission: void writeLPr(org.xmlpull.v1.XmlSerializer)>
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: void <init>(android.net.wifi.aware.DiscoverySession,android.net.wifi.aware.PeerHandle)>
<com.android.server.accessibility.AccessibilityManagerService: boolean sendFingerprintGesture(int)>
<com.android.server.policy.PhoneWindowManager: void setRecentsVisibilityLw(boolean)>
<com.android.systemui.classifier.FalsingManagerProxy: void onNotificationDismissed()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: java.lang.String getMobileDataNetworkName()>
<com.android.settingslib.CustomEditTextPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.pip.PipSurfaceTransactionHelper: void onDensityOrFontScaleChanged()>
<com.android.systemui.shared.tracing.ProtoTraceable: void writeToProto(java.lang.Object)>
<com.android.settingslib.RestrictedSwitchPreference: void useAdminDisabledSummary(boolean)>
<com.android.server.pm.AppsFilter.FeatureConfig: void updatePackageState(com.android.server.pm.PackageSetting,boolean)>
<com.android.server.ConnectivityService: int registerNetworkFactory(android.os.Messenger,java.lang.String)>
<com.android.systemui.plugins.ClockPlugin: boolean shouldShowStatusArea()>
<com.android.server.utils.quota.Category: int hashCode()>
<com.android.server.pm.UserTypeDetails.Builder: com.android.server.pm.UserTypeDetails.Builder setBadgePlain(int)>
<com.android.server.search.SearchManagerService.Lifecycle: void onCleanupUser(int)>
<com.android.systemui.volume.VolumeDialogControllerImpl: void <init>(android.content.Context,com.android.systemui.broadcast.BroadcastDispatcher,java.util.Optional,com.android.systemui.util.RingerModeTracker)>
<javax.obex.ServerOperation: java.io.InputStream openInputStream()>
<com.android.server.accessibility.AccessibilityManagerService: void unregisterSystemAction(int)>
<com.android.systemui.statusbar.CommandQueue: void recomputeDisableFlags(int,boolean)>
<android.net.TetheringManager: void stopAllTethering()>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onRecentTaskListFrozenChanged(boolean)>
<com.android.server.soundtrigger.SoundTriggerService.LocalSoundTriggerService: int stopRecognition(int,android.hardware.soundtrigger.IRecognitionStatusCallback)>
<javax.obex.ServerOperation: void <init>(javax.obex.ServerSession,java.io.InputStream,int,int,javax.obex.ServerRequestHandler)>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void onAddressAllocated(int,int)>
<com.android.server.compat.PlatformCompat: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)>
<com.android.settingslib.suggestions.SuggestionControllerMixin: void onStop()>
<com.android.server.testing.shadows.ShadowBackupDataOutput: int getTransportFlags()>
<com.android.server.audio.PlaybackActivityMonitor: void playerHasOpPlayAudio(int,boolean,int)>
<com.android.systemui.qs.PagedTileLayout: void saveInstanceState(android.os.Bundle)>
<com.android.server.VibratorService: void onInputDeviceAdded(int)>
<com.android.settingslib.media.MediaDevice: void requestSetVolume(int)>
<com.android.settingslib.media.MediaDevice: java.lang.String getName()>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void removeAllIconsForSlot(java.lang.String)>
<com.android.settingslib.Utils: java.lang.String getUserLabel(android.content.Context,android.content.pm.UserInfo)>
<com.android.packageinstaller.wear.PackageInstallerImpl.InstallListener: void installBeginning()>
<com.android.keyguard.clock.DefaultClockController: java.lang.String getTitle()>
<com.android.server.NetworkScoreService: void disableScoring()>
<com.android.server.usb.descriptors.UsbDescriptorParser: java.util.ArrayList getACInterfaceDescriptors(byte,int)>
<com.android.systemui.globalactions.GlobalActionsDialog.MyPowerOptionsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.systemui.statusbar.phone.DemoStatusIcons: void updateWifiState(com.android.systemui.statusbar.phone.StatusBarSignalPolicy.WifiIconState)>
<android.net.wifi.EasyConnectStatusCallback: void onFailure(int)>
<com.android.packageinstaller.wear.WearPackageArgs: android.os.Bundle setStartId(android.os.Bundle,int)>
<com.android.systemui.statusbar.KeyboardShortcutAppItemLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.qs.tiles.CastTile: void handleClick()>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setCurrentScrollVelocity(float)>
<com.android.systemui.ScreenDecorations.DisplayCutoutView: void onDisplayRemoved(int)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void updateBackgroundColor(boolean)>
<com.android.server.autofill.ui.FillUi.Callback: void requestHideFillUi()>
<com.android.systemui.statusbar.StatusBarIconView: void onDarkChanged(android.graphics.Rect,float,int)>
<com.android.systemui.statusbar.phone.StatusBar: com.android.systemui.statusbar.phone.NotificationShadeWindowView getNotificationShadeWindowView()>
<com.android.settingslib.wifi.AccessPoint: boolean isExpired()>
<com.android.server.pm.dex.DexManager: void reconcileSecondaryDexFiles(java.lang.String)>
<com.android.systemui.media.dialog.MediaOutputBaseDialog: void onWindowFocusChanged(boolean)>
<com.android.systemui.qs.tiles.ScreenRecordTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.BooleanState,java.lang.Object)>
<com.android.server.pm.PackageManagerService: android.util.ArrayMap getProcessesForUidLocked(int)>
<com.android.systemui.media.RingtonePlayer: void <init>(android.content.Context)>
<com.android.systemui.statusbar.policy.MobileSignalController: int getCurrentIconId()>
<com.android.settingslib.inputmethod.InputMethodSettingValuesWrapper: boolean isEnabledImi(android.view.inputmethod.InputMethodInfo)>
<com.android.server.usb.descriptors.ByteStream: int available()>
<com.android.server.biometrics.face.FaceConstants: java.lang.String tagAuthToken()>
<com.android.settingslib.accounts.AuthenticatorHelper: android.graphics.drawable.Drawable getDrawableForType(android.content.Context,java.lang.String)>
<com.android.server.ConnectivityService: void reportNetworkConnectivity(android.net.Network,boolean)>
<com.android.settingslib.net.SignalStrengthUtil: boolean shouldInflateSignalStrength(android.content.Context,int)>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback.ActiveWakeLock: void release()>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: boolean topAmountNeedsClipping()>
<com.android.uiautomator.core.UiObject: boolean swipeDown(int)>
<com.android.settingslib.TwoTargetPreference: void setIconSize(int)>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void onNotificationViewUpdateFinished()>
<android.net.ip.RouterAdvertisementDaemon: void buildNewRa(android.net.ip.RouterAdvertisementDaemon.RaParams,android.net.ip.RouterAdvertisementDaemon.RaParams)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: int getMinLayoutHeight()>
<com.android.systemui.statusbar.KeyguardAffordanceView: float getRestingAlpha()>
<com.android.server.pm.PackageManagerService: boolean isProtectedBroadcast(java.lang.String)>
<com.android.settingslib.drawable.UserIconDrawable: void <init>(int)>
<com.android.settingslib.search.SearchIndexableResources: java.util.Collection getProviderValues()>
<com.android.systemui.stackdivider.DividerView: int growsRecents()>
<android.perftests.utils.ManualBenchmarkState: void setCustomizedIterations(int,android.perftests.utils.ManualBenchmarkState.CustomizedIterationListener)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void dozeTimeTick()>
<com.android.settingslib.net.NetworkCycleDataForUidLoader.Builder: void <init>(android.content.Context)>
<com.android.server.pm.pkg.PackageStateUnserialized: java.util.List getUsesLibraryFiles()>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout: void removeViewAt(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getCurrentFailedPasswordAttempts(int,boolean)>
<com.android.systemui.qs.QSAnimator: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.server.NetworkScoreService.ServiceHandler: void handleMessage(android.os.Message)>
<com.android.systemui.statusbar.policy.CastControllerImpl: java.util.List getCastDevices()>
<com.android.settingslib.bluetooth.HearingAidProfile: void finalize()>
<com.android.systemui.car.window.OverlayWindowModule: com.android.systemui.car.window.OverlayViewMediator bindUserSwitchTransitionViewMediator(com.android.systemui.car.userswitcher.UserSwitchTransitionViewMediator)>
<com.android.systemui.shared.system.InputChannelCompat.InputEventListener: void onInputEvent(android.view.InputEvent)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canPerformGestures(com.android.server.accessibility.AccessibilityServiceConnection)>
<android.text.PaintMeasureDrawPerfTest: void timeMeasure()>
<com.android.keyguard.KeyguardPatternView: void createAnimation(com.android.internal.widget.LockPatternView.CellState,long,long,float,boolean,android.view.animation.Interpolator,java.lang.Runnable)>
<com.android.systemui.car.userswitcher.UserSwitcherContainer: void setKeyEventHandler(com.android.systemui.car.userswitcher.UserSwitcherContainer.KeyEventHandler)>
<com.android.systemui.statusbar.notification.TransformState: void transformViewVerticalTo(com.android.systemui.statusbar.notification.TransformState,com.android.systemui.statusbar.ViewTransformationHelper.CustomTransformation,float)>
<com.android.systemui.qs.external.TileServiceManager: boolean isToggleableTile()>
<com.android.systemui.statusbar.notification.stack.ViewState: void copyFrom(com.android.systemui.statusbar.notification.stack.ViewState)>
<com.android.server.autofill.RemoteInlineSuggestionRenderService: void destroySuggestionViews(int,int)>
<com.android.systemui.pip.phone.PipTouchState: boolean isUserInteracting()>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.plugins.VolumeDialogController provideVolumeDialogController(com.android.systemui.volume.VolumeDialogControllerImpl)>
<com.android.server.display.BrightnessMappingStrategy: boolean isDefaultConfig()>
<com.android.server.pm.Installer: boolean compileLayouts(java.lang.String,java.lang.String,java.lang.String,int)>
<com.android.systemui.car.window.OverlayViewGlobalStateController: void setOccluded(boolean)>
<com.android.settingslib.wifi.TestAccessPointBuilder: com.android.settingslib.wifi.TestAccessPointBuilder setScanResults(java.util.ArrayList)>
<com.android.systemui.keyguard.DismissCallbackRegistry: void notifyDismissSucceeded()>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: void addCallback(com.android.systemui.statusbar.policy.SecurityController.SecurityControllerCallback)>
<com.android.systemui.util.wakelock.SettableWakeLock: void setAcquired(boolean)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: boolean isBluetoothConnected()>
<android.net.wifi.IWifiManager: int addNetworkSuggestions(java.util.List,java.lang.String,java.lang.String)>
<com.android.server.print.PrintManagerService: void onUnlockUser(int)>
<com.android.systemui.analytics.DataCollector: void onQsDown()>
<com.android.server.rollback.WatchdogRollbackLogger: void logApexdRevert(android.content.Context,java.util.List,java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: float getMinimumSwipeDistance()>
<com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry: long calculateFinishTime()>
<com.android.networkstack.tethering.EntitlementManager: boolean isCellularUpstreamPermitted()>
<android.net.wifi.hotspot2.PasspointConfiguration: int describeContents()>
<com.android.systemui.statusbar.policy.DeviceProvisionedControllerImpl: void stopListening()>
<com.android.systemui.statusbar.phone.FloatingRotationButton: void setVisibilityChangedCallback(java.util.function.Consumer)>
<com.android.server.utils.DeviceConfigInterface: float getFloat(java.lang.String,java.lang.String,float)>
<com.android.server.contentsuggestions.RemoteContentSuggestionsService: android.service.contentsuggestions.IContentSuggestionsService getServiceInterface(android.os.IBinder)>
<android.net.dhcp.DhcpServingParamsParcelExt: android.net.dhcp.DhcpServingParamsParcelExt setNoDefaultRouter()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setBackgroundBlurRadius(int)>
<com.android.systemui.statusbar.notification.NotificationActivityStarter: void onNotificationClicked(android.service.notification.StatusBarNotification,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.statusbar.policy.NetworkControllerImpl.SubscriptionDefaults: int getDefaultDataSubId()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void forceRemoveActiveAdmin(android.content.ComponentName,int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void notifyHeightChanged(boolean)>
<android.net.wifi.hotspot2.pps.UpdateParameter: java.security.cert.X509Certificate getCaCertificate()>
<com.android.systemui.statusbar.policy.SignalController: void updateConnectivity(java.util.BitSet,java.util.BitSet)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenfv(int,int,java.nio.FloatBuffer)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void canUserAttemptToConfigureInteractAcrossProfiles_packageDoesNotRequestInteractAcrossProfiles_returnsFalse()>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: void <init>(int,int,int,android.net.wifi.p2p.WifiP2pDevice,byte[])>
<com.android.server.pm.UserManagerService: boolean isManagedProfile(int)>
<com.android.systemui.volume.VolumeDialogControllerImpl: void removeCallback(com.android.settingslib.volume.MediaSessions.Callbacks)>
<com.android.systemui.statusbar.notification.row.PartialConversationInfo: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.collection.coordinator.AppOpsCoordinator: void attach(com.android.systemui.statusbar.notification.collection.NotifPipeline)>
<com.android.systemui.ExpandHelper: void setEnabled(boolean)>
<com.android.server.adb.AdbService: void clearDebuggingKeys()>
<com.google.android.startop.iorap.AppLaunchEvent.IntentStarted: void writeToParcelImpl(android.os.Parcel,int)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean handleRequestShortAudioDescriptor(com.android.server.hdmi.HdmiCecMessage)>
<com.android.server.pm.DumpState: void setOptionEnabled(int)>
<com.android.keyguard.clock.DefaultClockController: void onTimeZoneChanged(java.util.TimeZone)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.MenuItem menuItemToExposeOnSnap()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationDecoratedCustomViewWrapper: void <init>(android.content.Context,android.view.View,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.ServiceWatcher.ServiceInfo: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.policy.SignalController: com.android.systemui.statusbar.policy.SignalController.State cleanState()>
<javax.obex.ClientSession: void close()>
<com.android.server.pm.Installer: void createAppDataBatched(java.lang.String[],java.lang.String[],int,int,int[],java.lang.String[],int[])>
<com.android.server.contentcapture.ContentCaptureMetricsLogger: void writeServiceEvent(int,android.content.ComponentName,java.lang.String)>
<com.android.systemui.qs.QSTileHost: void changeTiles(java.util.List,java.util.List)>
<com.android.server.biometrics.AuthService.Injector: android.hardware.biometrics.IBiometricService getBiometricService()>
<com.android.server.ConnectivityService: void unregisterNetworkFactory(android.os.Messenger)>
<com.android.uiautomator.core.UiObject: java.lang.String getText()>
<com.android.systemui.shared.system.ActivityManagerWrapper: void invalidateHomeTaskSnapshot(android.app.Activity)>
<com.android.systemui.stackdivider.DividerHandleView: boolean hasOverlappingRendering()>
<com.android.settingslib.fuelgauge.BatteryStatus: boolean isPluggedIn()>
<com.android.settingslib.media.LocalMediaManager: int getSessionVolume()>
<com.android.server.incident.IncidentCompanionService: void onStart()>
<com.android.server.accessibility.FingerprintGestureDispatcher: boolean handleMessage(android.os.Message)>
<com.android.settingslib.media.MediaDevice: int getState()>
<com.android.commands.bmgr.Bmgr: void run(java.lang.String[])>
<com.android.systemui.shared.plugins.PluginPrefs: boolean hasPlugins(android.content.Context)>
<com.android.networkstack.tethering.EntitlementManager: void setExemptedDownstreamType(int)>
<com.android.server.audio.PlayerFocusEnforcer: void mutePlayersForCall(int[])>
<com.android.server.textservices.TextServicesManagerService.Lifecycle: void <init>(android.content.Context)>
<com.android.settingslib.bluetooth.MapClientProfile: int getOrdinal()>
<com.android.printspooler.model.PrintSpoolerService: void onDestroy()>
<android.net.wifi.aware.TlvBufferUtils.TlvIterable: void <init>(int,int,byte[])>
<com.android.settingslib.bluetooth.PbapServerProfile: boolean setEnabled(android.bluetooth.BluetoothDevice,boolean)>
<com.android.systemui.pip.tv.dagger.TvPipComponent.Builder: com.android.systemui.pip.tv.dagger.TvPipComponent.Builder pipControlsView(com.android.systemui.pip.tv.PipControlsView)>
<com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter.Builder: com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter.Builder setNotificationPanelViewController(com.android.systemui.statusbar.phone.NotificationPanelViewController)>
<com.android.gallery3d.exif.ExifInterface: java.lang.Object getTagValue(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void onFinishedExpansionChange()>
<com.android.server.soundtrigger.SoundTriggerInternal: int unloadKeyphraseModel(int)>
<com.android.systemui.pip.tv.dagger.PipModule: com.android.systemui.pip.BasePipManager providePipManager(com.android.systemui.pip.tv.PipManager)>
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addResponder(android.net.wifi.rtt.ResponderConfig)>
<android.net.wifi.WifiManager: boolean getEnableAutoJoinWhenAssociated()>
<com.android.systemui.tuner.DemoModeFragment: void onResume()>
<com.android.server.hdmi.SelectRequestBuffer.PortSelectRequest: void process()>
<com.android.systemui.usb.UsbDebuggingSecondaryUserActivity: void onStop()>
<android.media.BufferingParams.Builder: android.media.BufferingParams build()>
<com.android.settingslib.bluetooth.HidProfile: int getProfileId()>
<com.android.server.audio.PlaybackActivityMonitor: int getAllowedCapturePolicy(int)>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger: java.lang.String buildPrefKey(java.lang.String,java.lang.String)>
<com.android.server.input.InputManagerService.WindowManagerCallbacks: long interceptKeyBeforeDispatching(android.os.IBinder,android.view.KeyEvent,int)>
<com.android.systemui.util.sensors.AsyncSensorManager: boolean injectSensorDataImpl(android.hardware.Sensor,float[],int,long)>
<com.android.settingslib.widget.AdaptiveIconShapeDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)>
<com.android.server.usb.descriptors.report.Reporting: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.systemui.statusbar.notification.stack.AmbientState: com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm.SectionProvider getSectionProvider()>
<com.android.systemui.util.wakelock.KeepAwakeAnimationListener: void onAnimationEnd(android.view.animation.Animation)>
<com.android.systemui.statusbar.policy.ExtensionControllerImpl.Producer: void destroy()>
<com.android.systemui.SlicePermissionActivity: void onDismiss(android.content.DialogInterface)>
<com.android.server.biometrics.face.FaceConstants: java.lang.String tagRemoveStartError()>
<com.android.permission.persistence.RuntimePermissionsState.PermissionState: int getFlags()>
<com.android.vpndialogs.ConfirmDialog: void onBackPressed()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: float getMaxAspectRatio()>
<com.android.server.pm.UserTypeDetails: boolean isManagedProfile()>
<com.android.systemui.util.sensors.AsyncSensorManager: java.util.List getFullDynamicSensorList()>
<com.android.server.trust.TrustManagerService: void <init>(android.content.Context)>
<com.android.server.accessibility.AccessibilityWindowManager: void disassociateEmbeddedHierarchyLocked(android.os.IBinder)>
<com.android.externalstorage.TestDocumentsProvider: android.content.res.AssetFileDescriptor openDocumentThumbnail(java.lang.String,android.graphics.Point,android.os.CancellationSignal)>
<com.android.server.biometrics.AuthenticationClient: void onStart()>
<com.android.server.storage.StorageUserConnection.AsyncStorageServiceCall: void run(android.service.storage.IExternalStorageService,android.os.RemoteCallback)>
<com.android.server.ExtconStateObserver: java.lang.Object parseStateFromFile(com.android.server.ExtconUEventObserver.ExtconInfo)>
<com.android.systemui.qs.QSFooterImpl: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<com.android.systemui.statusbar.policy.DeadZone: void onConfigurationChanged(int)>
<com.android.gallery3d.glrenderer.BasicTexture: void <init>(com.android.gallery3d.glrenderer.GLCanvas,int,int)>
<com.android.server.vr.VrManagerInternal: int hasVrPackage(android.content.ComponentName,int)>
<android.net.wifi.aware.WifiAwareManager: android.net.wifi.aware.Characteristics getCharacteristics()>
<com.android.systemui.statusbar.phone.ScreenPinningNotify: void showPinningExitToast()>
<com.android.settingslib.TwoTargetPreference: void <init>(android.content.Context)>
<com.android.systemui.screenrecord.ScreenRecordingAdapter: void <init>(android.content.Context,int,java.util.List)>
<com.android.server.inputmethod.InputMethodManagerService: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper.Callback: void onAnimationToSideEnded()>
<com.android.server.locksettings.SyntheticPasswordManager: com.android.internal.widget.VerifyCredentialResponse verifyFrpCredential(android.service.gatekeeper.IGateKeeperService,com.android.internal.widget.LockscreenCredential,com.android.internal.widget.ICheckCredentialProgressCallback)>
<com.android.systemui.qs.TileLayout: boolean setMinRows(int)>
<javax.microedition.khronos.opengles.GL10: void glMatrixMode(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGeniv(int,int,java.nio.IntBuffer)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: boolean isSnappedAndOnSameSide()>
<com.android.server.pm.DumpState: void setDump(int)>
<com.android.media.remotedisplay.RemoteDisplayProvider: void removeDisplay(com.android.media.remotedisplay.RemoteDisplay)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void handleStale()>
<com.android.systemui.plugins.FalsingManager: void onQsDown()>
<com.android.server.ConnectivityService: void startCaptivePortalApp(android.net.Network)>
<com.android.systemui.statusbar.phone.StatusBar: void startActivity(android.content.Intent,boolean,boolean,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceProvisioningConfigApplied()>
<com.android.server.statusbar.StatusBarManagerInternal: void showToast(int,java.lang.String,android.os.IBinder,java.lang.CharSequence,android.os.IBinder,int,android.app.ITransientNotificationCallback)>
<com.android.server.inputmethod.InputMethodManagerService: void reportPerceptible(android.os.IBinder,boolean)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: int getProfileConnectionState(com.android.settingslib.bluetooth.LocalBluetoothProfile)>
<com.android.settingslib.RestrictedPreference: void setEnabled(boolean)>
<com.android.systemui.SwipeHelper: void setDensityScale(float)>
<com.android.systemui.statusbar.phone.RotationButton: boolean hide()>
<com.android.server.statusbar.StatusBarManagerService: void clearInlineReplyUriPermissions(java.lang.String)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: long getLongVersionCode()>
<com.android.server.autofill.AutofillCompatAccessibilityService: void onInterrupt()>
<android.net.wifi.WifiConfiguration: android.net.wifi.WifiConfiguration.NetworkSelectionStatus getNetworkSelectionStatus()>
<android.net.wifi.IDppCallback: void onSuccess(int)>
<com.android.systemui.fragments.FragmentHostManager: java.lang.Object create(java.lang.Class)>
<com.android.providers.settings.SettingsProvider: boolean onCreate()>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector text(java.lang.String)>
<com.android.systemui.qs.tiles.HotspotTile: void handleSetListening(boolean)>
<com.android.server.broadcastradio.hal2.Utils.VoidFuncThrowingRemoteException: void exec()>
<com.android.server.pm.dex.ArtManagerService: boolean isRuntimeProfilingEnabled(int,java.lang.String)>
<com.android.settingslib.net.DataUsageController: void setMobileDataEnabled(boolean)>
<com.android.uiautomator.core.UiAutomationShellWrapper: void connect()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onTrackingStarted(boolean)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isUsesCleartextTraffic()>
<com.android.server.testing.shadows.ShadowKeyValueBackupTask: void reset()>
<com.android.server.display.DisplayAdapter.Listener: void onDisplayDeviceEvent(com.android.server.display.DisplayDevice,int)>
<com.android.server.accessibility.MagnificationController: void setUserId(int)>
<com.android.wallpapercropper.WallpaperCropActivity: void setCropViewTileSource(com.android.photos.BitmapRegionTileSource.BitmapSource,boolean,boolean,java.lang.Runnable)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: com.android.systemui.statusbar.notification.collection.NotificationEntry.DismissState getDismissState()>
<com.android.systemui.statusbar.phone.NotificationsQuickSettingsContainer: void <init>(android.content.Context,android.util.AttributeSet)>
<javax.microedition.khronos.opengles.GL11: void glTexEnviv(int,int,int[],int)>
<com.android.systemui.car.statusbar.UnusedStatusBar: com.android.systemui.statusbar.phone.NavigationBarView getNavigationBarView()>
<com.android.systemui.biometrics.AuthCredentialPatternView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.volume.VolumeDialogControllerImpl: boolean hasVibrator()>
<android.content.pm.PackageManagerInternal: void setEnableRollbackCode(int,int)>
<com.android.keyguard.KeyguardStatusView: void onLayout(boolean,int,int,int,int)>
<com.android.systemui.qs.customize.TileQueryHelper: void queryTiles(com.android.systemui.qs.QSTileHost)>
<javax.microedition.khronos.opengles.GL10: void glStencilFunc(int,int,int)>
<com.android.server.statusbar.StatusBarManagerService: void disable(int,android.os.IBinder,java.lang.String)>
<com.android.systemui.car.navigationbar.NavigationBarViewFactory: com.android.systemui.car.navigationbar.CarNavigationBarView getBottomBar(boolean)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void setAccessibilityManager(android.view.accessibility.AccessibilityManager)>
<com.android.systemui.plugins.NotificationListenerController.NotificationProvider: android.service.notification.StatusBarNotification[] getActiveNotifications()>
<com.android.systemui.statusbar.phone.PanelViewController: boolean shouldExpandToTopOfClearAll(float)>
<com.android.systemui.statusbar.NavigationBarController: void createNavigationBars(boolean,com.android.internal.statusbar.RegisterStatusBarResult)>
<com.android.systemui.statusbar.notification.collection.notifcollection.CollectionReadyForBuildListener: void onBuildList(java.util.Collection)>
<com.android.systemui.statusbar.phone.FloatingRotationButton: boolean isVisible()>
<com.android.server.pm.OtaDexoptService: void cleanup()>
<com.android.systemui.qs.tiles.WorkModeTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.statusbar.phone.ManagedProfileController)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: android.bluetooth.BluetoothClass getBtClass()>
<com.android.systemui.screenshot.ScreenshotActionChip: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.settingslib.net.NetworkCycleDataForUidLoader: java.util.List getUids()>
<com.android.systemui.statusbar.policy.SmartReplyView: com.android.systemui.statusbar.policy.SmartReplyView.LayoutParams generateLayoutParams(android.util.AttributeSet)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: com.android.systemui.statusbar.policy.KeyButtonDrawable create(android.content.Context,int,int,int,boolean,android.graphics.Color)>
<com.android.systemui.statusbar.phone.DozeScrimController: void pulse(com.android.systemui.doze.DozeHost.PulseCallback,int)>
<com.android.server.print.RemotePrintSpooler.PrintSpoolerCallbacks: void onAllPrintJobsForServiceHandled(android.content.ComponentName)>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: void fireConfigChanged(android.service.notification.ZenModeConfig)>
<com.android.powermodel.component.CpuProfile.Builder: void setCoreSpeeds(int,int[])>
<com.android.media.tv.remoteprovider.TvRemoteProvider: void openRemoteInputBridge(android.os.IBinder,java.lang.String,int,int,int)>
<android.net.wifi.WifiScanner.ParcelableScanResults: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.hotspot2.pps.Policy: android.net.wifi.hotspot2.pps.UpdateParameter getPolicyUpdate()>
<android.net.TetheringManager.RequestHelper: void runRequest(android.net.ITetheringConnector,android.net.IIntResultListener)>
<android.net.wifi.aware.WifiAwareManager: void attach(android.net.wifi.aware.AttachCallback,android.os.Handler)>
<com.android.server.display.AmbientBrightnessStatsTracker.Clock: long elapsedTimeMillis()>
<com.android.printspooler.ui.PageAdapter: void destroy(java.lang.Runnable)>
<com.android.keyguard.KeyguardPinBasedInputView: boolean onTouch(android.view.View,android.view.MotionEvent)>
<com.android.server.pm.PackageManagerServiceUtils: boolean verifySignatures(com.android.server.pm.PackageSetting,com.android.server.pm.PackageSetting,android.content.pm.PackageParser.SigningDetails,boolean,boolean)>
<android.net.wifi.hotspot2.pps.Policy.RoamingPartner: int describeContents()>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: java.lang.String getNetworkSelectionBSSID()>
<com.android.server.PackageWatchdog: void noteBoot()>
<com.android.server.twilight.TwilightState: java.time.LocalDateTime sunset()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onUnlockHintStarted()>
<javax.obex.BaseStream: void ensureNotDone()>
<com.android.systemui.tuner.TunerService: int getValue(java.lang.String,int)>
<android.net.wifi.hotspot2.pps.HomeSp: void setRoamingConsortiumOis(long[])>
<com.android.gallery3d.exif.ExifInterface: int getTagDefinitionForTag(com.android.gallery3d.exif.ExifTag)>
<com.android.systemui.plugins.qs.QS: android.view.View getHeader()>
<com.android.statementservice.retriever.AndroidPackageInfoFetcher: java.util.List getStatements(java.lang.String)>
<com.android.systemui.tuner.LockscreenFragment: com.android.systemui.tuner.ShortcutParser.Shortcut getShortcutInfo(android.content.Context,java.lang.String)>
<com.android.systemui.util.leak.GarbageMonitor.MemoryTile: long getHeapLimit()>
<com.android.server.pm.PackageKeySetData: void setProperSigningKeySet(long)>
<android.media.MediaSession2: java.lang.Object sendSessionCommand(android.media.MediaSession2.ControllerInfo,android.media.Session2Command,android.os.Bundle)>
<com.android.server.utils.ManagedApplicationService: boolean disconnectIfNotMatching(android.content.ComponentName,int)>
<com.android.uiautomator.core.UiDevice: android.graphics.Point getDisplaySizeDp()>
<com.android.server.integrity.model.IntegrityCheckResult: int getLoggingResponse()>
<com.android.systemui.assist.ui.InvocationLightsView: void <init>(android.content.Context)>
<com.android.server.usb.descriptors.UsbDescriptor: java.lang.String getStatusString()>
<com.android.keyguard.clock.DefaultClockController: android.view.View getBigClockView()>
<com.android.systemui.tuner.TunerActivity: void onDestroy()>
<com.android.server.timezone.PackageTrackerIntentHelper: void scheduleReliabilityTrigger(long)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean onGenericMotionEvent(android.view.MotionEvent)>
<javax.obex.ClientSession: void setConnectionID(long)>
<com.android.gallery3d.glrenderer.BasicTexture: void draw(com.android.gallery3d.glrenderer.GLCanvas,int,int)>
<com.android.settingslib.core.lifecycle.ObservablePreferenceFragment: void onResume()>
<com.android.systemui.pip.tv.PipManager: void onPipTransitionStarted(android.content.ComponentName,int)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: boolean isVisible()>
<com.android.systemui.classifier.DirectionClassifier: float getFalseTouchEvaluation(int,com.android.systemui.classifier.Stroke)>
<com.android.settingslib.dream.DreamBackend: void setActivatedOnDock(boolean)>
<android.net.wifi.IWifiManager: boolean reconnect(java.lang.String)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: android.view.NotificationHeaderView getNotificationHeader()>
<com.android.settingslib.development.AbstractLogpersistPreferenceController: void displayPreference(androidx.preference.PreferenceScreen)>
<com.android.systemui.util.wakelock.KeepAwakeAnimationListener: void <init>(android.content.Context)>
<com.android.keyguard.KeyguardSimPukView: java.lang.CharSequence getTitle()>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: boolean updateClientPriorityInternal(int,int,int)>
<com.android.server.display.whitebalance.AmbientSensor.AmbientBrightnessSensor.Callbacks: void onAmbientBrightnessChanged(float)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean isFullscreenBouncer()>
<com.android.server.webkit.SystemImpl: com.android.server.webkit.SystemImpl getInstance()>
<com.android.systemui.car.statusbar.DozeServiceHost: void extendPulse(int)>
<android.net.wifi.WifiInfo: void setMacAddress(java.lang.String)>
<com.android.settingslib.media.LocalMediaManager: java.lang.String getPackageName()>
<com.android.server.display.DisplayModeDirector.Injector: void registerPeakRefreshRateObserver(android.content.ContentResolver,android.database.ContentObserver)>
<com.android.systemui.globalactions.GlobalActionsLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.settingslib.notification.ConversationIconFactory: android.graphics.drawable.Drawable getBaseIconDrawable(android.content.pm.ShortcutInfo)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl removeUsesOptionalLibrary(java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void notifyPendingSystemUpdate(android.app.admin.SystemUpdateInfo)>
<com.android.server.display.DisplayModeDirector.BrightnessObserver: void registerLightSensor(android.hardware.SensorManager,android.hardware.Sensor)>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void panelScrimMinFractionChanged(float)>
<com.android.server.pm.UserManagerService: void setUserEnabled(int)>
<android.os.PackageManagerPerfTest: void testGetApplicationInfoWithFiltering()>
<com.android.systemui.statusbar.phone.FloatingRotationButton: com.android.systemui.statusbar.policy.KeyButtonDrawable getImageDrawable()>
<com.android.server.hdmi.HdmiControlService: void setAndBroadcastActiveSourceFromOneDeviceType(int,int)>
<com.android.server.biometrics.AuthService.Injector: java.lang.String[] getConfiguration(android.content.Context)>
<com.android.keyguard.KeyguardSecurityCallback: void reportUnlockAttempt(int,boolean,int)>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalNanScanTimeMillis()>
<com.android.systemui.power.PowerNotificationWarnings: void dump(java.io.PrintWriter)>
<com.android.systemui.car.navigationbar.CarNavigationButton: void setSelected(boolean)>
<com.android.keyguard.KeyguardStatusView: void onAttachedToWindow()>
<com.android.networkstack.tethering.UpstreamNetworkMonitor: java.util.Set getLocalPrefixes()>
<com.android.server.NetworkScoreService.ServiceHandler: void <init>(android.os.Looper)>
<com.android.printspooler.util.PageRangeUtils: boolean contains(android.print.PageRange[],android.print.PageRange[],int)>
<com.android.server.autofill.ui.InlineFillUi: void setFilterText(java.lang.String)>
<com.android.networkstack.tethering.EntitlementManager: android.content.Intent runUiTetherProvisioning(int,com.android.networkstack.tethering.TetheringConfiguration,android.os.ResultReceiver)>
<com.android.systemui.util.Assert: void isMainThread()>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.appops.AppOpsController provideAppOpsController(com.android.systemui.appops.AppOpsControllerImpl)>
<com.android.systemui.plugins.FragmentBase: android.content.Context getContext()>
<com.android.systemui.qs.tileimpl.SlashImageView: void setSlash(com.android.systemui.qs.SlashDrawable)>
<com.android.wallpapercropper.CropView: void setScale(float)>
<com.android.systemui.qs.QSFragment: void setShowCollapsedOnKeyguard(boolean)>
<android.graphics.perftests.PaintMeasureTextTest: java.util.Collection measureSpecs()>
<com.android.systemui.stackdivider.Divider: void onDisplayConfigurationChanged(int,android.content.res.Configuration)>
<com.android.keyguard.KeyguardUpdateMonitor: void handleStartedWakingUp()>
<com.android.systemui.statusbar.notification.row.RowContentBindParams: void rebindAllContentViews()>
<com.android.settingslib.wifi.AccessPoint: java.lang.String toString()>
<com.android.media.remotedisplay.RemoteDisplay: void setVolumeHandling(int)>
<com.android.systemui.shared.system.WallpaperEngineCompat: boolean supportsScalePreview()>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getStatus()>
<com.android.systemui.car.notification.NotificationPanelViewController: void onCarPowerStateOn()>
<com.android.server.pm.BackgroundDexOptService: void schedule(android.content.Context)>
<com.android.server.UiThread: void dispose()>
<com.android.server.ConsumerIrService: boolean hasIrEmitter()>
<com.android.printspooler.model.PrintSpoolerService: void setStatus(android.print.PrintJobId,int,java.lang.CharSequence)>
<com.android.server.accounts.AccountManagerService: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onHasLockscreenWallpaperChanged(boolean)>
<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,java.lang.String,int)>
<com.android.server.pm.permission.BasePermission: void <init>(java.lang.String,java.lang.String,int)>
<com.android.settingslib.wifi.WifiEntryPreference.OnButtonClickListener: void onButtonClick(com.android.settingslib.wifi.WifiEntryPreference)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void revokeRuntimePermissionsIfPermissionDefinitionChanged(java.util.List,java.util.ArrayList)>
<com.android.server.UserspaceRebootLogger: void logEventAsync(boolean,java.util.concurrent.Executor)>
<com.android.server.TelephonyRegistry: void notifyDisconnectCause(int,int,int,int)>
<com.android.uiautomator.core.UiCollection: int getChildCount(com.android.uiautomator.core.UiSelector)>
<com.android.server.role.RoleUserState: void <init>(int,com.android.server.role.RoleUserState.Callback)>
<com.android.systemui.util.AlarmTimeout: void <init>(android.app.AlarmManager,android.app.AlarmManager.OnAlarmListener,java.lang.String,android.os.Handler)>
<com.android.server.DropBoxManagerService: void <init>(android.content.Context,java.io.File,android.os.Looper)>
<com.android.packageinstaller.InstallInstalling: void onSaveInstanceState(android.os.Bundle)>
<com.android.systemui.pip.PipSnapAlgorithm: void applySnapFraction(android.graphics.Rect,android.graphics.Rect,float)>
<com.android.systemui.pip.phone.PipTouchState: void dump(java.io.PrintWriter,java.lang.String)>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: boolean isDeviceManaged()>
<android.net.TetheringManager.TetheringRequest: boolean checkStaticAddressConfiguration(android.net.LinkAddress,android.net.LinkAddress)>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: boolean shouldAllowLockscreenRemoteInput()>
<com.android.systemui.qs.tiles.WifiTile.WifiDetailAdapter: void onSettingsActivityTriggered(android.content.Intent)>
<com.android.systemui.qs.tileimpl.QSTileImpl.ResourceIcon: java.lang.String toString()>
<com.android.server.appprediction.AppPredictionPerUserService: void onCreatePredictionSessionLocked(android.app.prediction.AppPredictionContext,android.app.prediction.AppPredictionSessionId,android.os.IBinder)>
<com.android.systemui.car.window.OverlayViewController: void hideInternal()>
<com.android.systemui.qs.QSTileHost: void onPluginConnected(com.android.systemui.plugins.qs.QSFactory,android.content.Context)>
<com.android.gallery3d.exif.ExifInterface: void readExif(byte[])>
<com.android.systemui.qs.touch.SwipeDetector.Listener: void onDragEnd(float,boolean)>
<com.android.gallery3d.glrenderer.GLES20Canvas: int uploadBuffer(java.nio.FloatBuffer)>
<com.android.networkstack.tethering.UpstreamNetworkMonitor: void registerMobileNetworkRequest()>
<com.android.systemui.accessibility.SystemActions: void <init>(android.content.Context)>
<com.android.server.accounts.AccountManagerService: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
<com.android.server.locksettings.PasswordSlotManager: java.util.Map loadSlotMap(java.io.InputStream)>
<com.android.systemui.statusbar.notification.NotificationEntryListener: void onInflationError(android.service.notification.StatusBarNotification,java.lang.Exception)>
<javax.microedition.khronos.opengles.GL10: void glOrthof(float,float,float,float,float,float)>
<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: void action(android.content.Context,int,int)>
<com.android.keyguard.KeyguardHostView: void setOnDismissAction(com.android.systemui.plugins.ActivityStarter.OnDismissAction,java.lang.Runnable)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void remQsTile(android.content.ComponentName)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onKeyguardVisibilityChanged(boolean)>
<com.android.systemui.statusbar.policy.RemoteInputView: void setWrapper(com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper)>
<com.android.server.trust.TrustManagerService: boolean removeEscrowToken(long,int)>
<com.android.settingslib.RestrictedLockUtilsInternal: boolean hasBaseUserRestriction(android.content.Context,java.lang.String,int)>
<javax.microedition.khronos.opengles.GL10: void glTexParameterf(int,int,float)>
<com.android.server.usb.descriptors.Usb20ACMixerUnit: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<android.net.ip.IpClientUtil: void dumpIpClient(android.net.ip.IIpClient,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.adb.AdbService: void enablePairingByPairingCode()>
<com.android.systemui.qs.SlashDrawable: void setColorFilter(android.graphics.ColorFilter)>
<com.android.providers.settings.SettingsHelper: void restoreValue(android.content.Context,android.content.ContentResolver,android.content.ContentValues,android.net.Uri,java.lang.String,java.lang.String,int)>
<com.android.systemui.qs.QSPanel: void onFinishInflate()>
<com.android.systemui.statusbar.notification.NotificationUtils: boolean useNewInterruptionModel(android.content.Context)>
<com.android.uiautomator.core.Configurator: com.android.uiautomator.core.Configurator setScrollAcknowledgmentTimeout(long)>
<com.android.systemui.statusbar.policy.AccessPointControllerImpl: void addAccessPointCallback(com.android.systemui.statusbar.policy.NetworkController.AccessPointController.AccessPointCallback)>
<com.android.server.AnyMotionDetector.Vector3: com.android.server.AnyMotionDetector.Vector3 plus(com.android.server.AnyMotionDetector.Vector3)>
<com.android.server.protolog.common.ProtoLog: void v(com.android.server.protolog.common.IProtoLogGroup,java.lang.String,java.lang.Object[])>
<com.android.server.accessibility.AccessibilityManagerService: void notifyAccessibilityButtonVisibilityChanged(boolean)>
<com.android.systemui.qs.external.TileServices: void destroy()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGenRenderbuffersOES(int,int[],int)>
<com.android.systemui.statusbar.phone.FloatingRotationButton: void setRotationButtonController(com.android.systemui.statusbar.phone.RotationButtonController)>
<com.android.systemui.biometrics.AuthController: void onDismissed(int,byte[])>
<com.android.systemui.statusbar.ViewTransformationHelper: void resetTransformedView(android.view.View)>
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder setGroupOperatingFrequency(int)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void <init>(android.content.Context)>
<com.android.packageinstaller.PackageInstallerActivity.AppErrorDialog: android.app.Dialog createDialog(java.lang.CharSequence)>
<com.android.systemui.volume.VolumeDialogControllerImpl: void dismiss()>
<com.android.systemui.statusbar.phone.NavigationBarInflaterView: void onNavigationModeChanged(int)>
<com.android.systemui.keyguard.KeyguardSliceProvider: void onDozingChanged(boolean)>
<com.android.server.integrity.parser.RuleBinaryParser: java.util.List parse(byte[])>
<com.android.systemui.statusbar.CommandQueue: void hideRecentApps(boolean,boolean)>
<com.android.server.Watchdog.HandlerChecker: java.lang.String getName()>
<com.android.server.LockGuard: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.usb.descriptors.Usb10ACInputTerminal: byte getTerminal()>
<com.android.server.SystemServiceManager: void unlockUser(int)>
<com.android.settingslib.wifi.AccessPoint: void <init>(android.content.Context,android.os.Bundle)>
<javax.microedition.khronos.egl.EGL10: boolean eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getNetworkName()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean shouldDestroyViewOnReset()>
<com.android.server.textclassifier.IconsUriHelper: android.net.Uri getContentUri(java.lang.String,int)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: com.android.systemui.statusbar.StatusBarWifiView addSignalIcon(int,java.lang.String,com.android.systemui.statusbar.phone.StatusBarSignalPolicy.WifiIconState)>
<javax.microedition.khronos.opengles.GL10: void glPixelStorei(int,int)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void onScreenTurnedOff()>
<com.android.server.people.data.ConversationInfo: boolean equals(java.lang.Object)>
<com.android.networkstack.tethering.PrivateAddressCoordinator: void <init>(android.content.Context)>
<com.android.server.SystemUpdateManagerService: android.os.Bundle retrieveSystemUpdateInfo()>
<android.net.wifi.hotspot2.pps.UpdateParameter: java.lang.String getRestriction()>
<com.android.systemui.statusbar.notification.row.NotificationGuts: boolean willBeRemoved()>
<com.android.settingslib.deviceinfo.AbstractConnectivityPreferenceController: void onStop()>
<com.android.server.pm.BackgroundDexOptService: void removePackagesUpdatedListener(com.android.server.pm.BackgroundDexOptService.PackagesUpdatedListener)>
<com.android.egg.neko.NekoLockedActivity: void onCreate(android.os.Bundle)>
<android.net.wifi.IWifiManager: boolean removeNetwork(int,java.lang.String)>
<com.android.settingslib.wifi.AccessPoint.AccessPointListener: void onLevelChanged(com.android.settingslib.wifi.AccessPoint)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void onStartedWakingUp()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void onRotationProposal(int,boolean)>
<com.android.uiautomator.testrunner.TestCaseCollector.TestCaseFilter: boolean accept(java.lang.Class)>
<com.android.systemui.statusbar.NotificationMediaManager: java.lang.String getMediaNotificationKey()>
<com.android.systemui.qs.tiles.DataUsageDetailView: void bind(com.android.settingslib.net.DataUsageController.DataUsageInfo)>
<com.android.systemui.usb.UsbPermissionActivity: void onDestroy()>
<com.android.systemui.statusbar.policy.SignalController: void notifyListenersIfNecessary()>
<com.android.keyguard.KeyguardDisplayManager: void <init>(android.content.Context,com.android.systemui.util.InjectionInflationController)>
<com.android.server.infra.FrameworkResourcesServiceNameResolver: void <init>(android.content.Context,int)>
<android.text.PrecomputedTextMemoryUsageTest: void testMemoryUsage_Latin_NoHyphenation()>
<com.android.server.telecom.TelecomLoaderService: void onBootPhase(int)>
<com.android.systemui.statusbar.phone.PanelViewController: void fling(float,boolean,float,boolean)>
<com.android.server.pm.parsing.pkg.PackageImpl: boolean isProduct()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: java.util.List getConnectableProfiles()>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_configureInteractAcrossProfilesPermissionWithoutAppOpsPermissions_setsAppOp()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setInterruption()>
<com.android.server.lights.LightsService: void <init>(android.content.Context)>
<com.android.systemui.statusbar.tv.TvStatusBar: void start()>
<com.android.server.biometrics.BiometricServiceBase: java.lang.String getManageBiometricPermission()>
<com.android.systemui.doze.DozeHost: void setAodDimmingScrim(float)>
<com.android.statementservice.retriever.URLFetcher: com.android.statementservice.retriever.WebContent getWebContentFromUrlWithRetry(java.net.URL,long,int,int,int)>
<com.android.settingslib.bluetooth.MapClientProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)>
<android.widget.TextViewFontFamilyLayoutPerfTest: void testConstruction()>
<com.android.systemui.statusbar.notification.collection.NotifPipeline: void addOnBeforeTransformGroupsListener(com.android.systemui.statusbar.notification.collection.listbuilder.OnBeforeTransformGroupsListener)>
<com.android.systemui.statusbar.phone.ObservableScrollView: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.settingslib.wifi.WifiUtils: java.lang.String getMeteredLabel(android.content.Context,android.net.wifi.WifiConfiguration)>
<com.android.systemui.statusbar.policy.ExtensionController.Extension: void clearItem(boolean)>
<com.android.server.policy.WindowOrientationListener: void onTouchStart()>
<com.android.settingslib.bluetooth.LocalBluetoothProfileManager: void removeServiceListener(com.android.settingslib.bluetooth.LocalBluetoothProfileManager.ServiceListener)>
<com.android.systemui.statusbar.CommandQueue: void <init>(android.content.Context)>
<com.android.networkstack.tethering.BpfCoordinator.Dependencies: android.net.INetd getNetd()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void onSnapOpen()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: float getOverExpansionPixels()>
<com.android.server.policy.PowerAction: boolean onLongPress()>
<android.net.wifi.WifiScanner: void startScan(android.net.wifi.WifiScanner.ScanSettings,android.net.wifi.WifiScanner.ScanListener)>
<com.android.systemui.volume.VolumeDialogImpl: void setAutomute(boolean)>
<android.os.ParcelArrayPerfTest: void timeCreateIntArray()>
<android.net.ITetheringConnector: void tether(java.lang.String,java.lang.String,android.net.IIntResultListener)>
<com.android.systemui.plugins.qs.QSTile: void addCallback(com.android.systemui.plugins.qs.QSTile.Callback)>
<com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback: void dispatchUnhandledKey(android.view.autofill.AutofillId,android.view.KeyEvent)>
<com.android.server.media.RemoteDisplayProviderWatcher: void stop()>
<com.android.systemui.statusbar.phone.LightBarTransitionsController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.keyguard.KeyguardPasswordView: void onTextChanged(java.lang.CharSequence,int,int,int)>
<com.android.systemui.statusbar.notification.TransformState: void setIsSameAsAnyView(boolean)>
<android.net.wifi.WifiScanner: void <init>(android.content.Context,android.net.wifi.IWifiScanner,android.os.Looper)>
<com.android.server.pm.PackageKeySetData: boolean isUsingUpgradeKeySets()>
<com.android.settingslib.net.NetworkCycleChartData.Builder: com.android.settingslib.net.NetworkCycleChartData getObject()>
<com.android.server.timezone.TimeZoneUpdateIdler: boolean onStopJob(android.app.job.JobParameters)>
<com.android.systemui.accessibility.WindowMagnificationController: void surfaceCreated(android.view.SurfaceHolder)>
<com.android.systemui.statusbar.StatusBarIconView: boolean hasOverlappingRendering()>
<com.android.server.tv.tunerresourcemanager.CasResource: java.util.Set getOwnerClientIds()>
<com.android.server.pm.permission.PermissionManagerServiceInternal: com.android.server.pm.permission.BasePermission getPermissionTEMP(java.lang.String)>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: android.view.WindowInsetsAnimation.Bounds dispatchWindowInsetsAnimationStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation.Bounds)>
<com.android.systemui.qs.tileimpl.QSTileView: void onMeasure(int,int)>
<com.android.systemui.recents.RecentsImplementation: void dump(java.io.PrintWriter)>
<com.android.systemui.statusbar.notification.NotificationDozeHelper: android.graphics.ColorMatrix getGrayscaleColorMatrix()>
<android.net.wifi.p2p.WifiP2pDevice: boolean wpsKeypadSupported()>
<com.android.server.media.MediaRouterService: void deselectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: boolean isShowingWallpaper()>
<com.android.uiautomator.core.UiDevice: boolean waitForWindowUpdate(java.lang.String,long)>
<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>
<com.android.systemui.biometrics.AuthBiometricFingerprintView: boolean supportsSmallDialog()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getScreenCaptureDisabled(android.content.ComponentName,int,boolean)>
<com.android.systemui.util.leak.GarbageMonitor: void startLeakMonitor()>
<android.net.wifi.WifiManager: boolean isPreferredNetworkOffloadSupported()>
<com.android.systemui.statusbar.phone.KeyguardBouncer: boolean isFullscreenBouncer()>
<com.android.uiautomator.core.UiScrollable: boolean scrollForward()>
<com.android.server.pm.ShortcutBitmapSaver: void dumpLocked(java.io.PrintWriter,java.lang.String)>
<com.android.server.ThreadPriorityBooster: void <init>(int,int)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setVisibility(int)>
<com.android.gallery3d.glrenderer.BasicTexture: void yieldAllTextures()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: com.android.systemui.statusbar.notification.row.ExpandableView getFirstChildNotGone()>
<android.net.wifi.ScanResult: boolean is24GHz(int)>
<com.android.systemui.globalactions.GlobalActionsPopupMenu: void show()>
<com.android.nfc_extras.EeInitializationException: void <init>(java.lang.String)>
<com.android.server.usb.UsbService: void setScreenUnlockedFunctions(long)>
<com.android.server.trust.TrustManagerService: void updateTrust(int,int)>
<com.android.systemui.doze.DozeHost.PulseCallback: void onPulseStarted()>
<com.android.systemui.keyguard.KeyguardSliceProvider: void onPrimaryMetadataOrStateChanged(android.media.MediaMetadata,int)>
<android.net.wifi.WifiManager: int compareSignalLevel(int,int)>
<android.provider.settings.validators.AccessibilityShortcutTargetListValidator: boolean isEntryValid(java.lang.String)>
<android.app.StatsManager: boolean removeConfiguration(long)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>
<android.net.ip.IpClientManager: boolean completedPreDhcpAction()>
<android.net.wifi.hotspot2.pps.UpdateParameter: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.egg.MLand: float rlerp(float,float,float)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator translationY(float,float,java.lang.Runnable[])>
<com.android.systemui.statusbar.phone.StatusBar: void makeStatusBarView(com.android.internal.statusbar.RegisterStatusBarResult)>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: java.lang.String getUsername()>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setNativeLibraryDir(java.lang.String)>
<com.android.server.accessibility.AccessibilityManagerService: boolean accessibilityFocusOnlyInActiveWindow()>
<com.android.server.pm.pkg.PackageStateUnserialized: long[] getLastPackageUsageTimeInMills()>
<com.android.server.locksettings.PasswordSlotManager: void markSlotInUse(int)>
<com.android.systemui.car.userswitcher.UserGridRecyclerView.UserSelectionListener: void onUserSelected(com.android.systemui.car.userswitcher.UserGridRecyclerView.UserRecord)>
<com.android.server.pm.DataLoaderManagerService: void <init>(android.content.Context)>
<com.android.systemui.dagger.ContextComponentHelper: android.app.Service resolveService(java.lang.String)>
<android.net.ip.RouterAdvertisementDaemon.RaParams: void <init>(android.net.ip.RouterAdvertisementDaemon.RaParams)>
<com.android.server.pm.UserManagerService: long getUserCreationTime(int)>
<com.android.systemui.wm.DisplayLayout: int width()>
<com.android.server.display.BrightnessMappingStrategy: void addUserDataPoint(float,float)>
<com.android.systemui.statusbar.notification.InstantAppNotifier: void appTransitionStarting(int,long,long,boolean)>
<com.android.server.accessibility.AccessibilityManagerService: void removeAccessibilityInteractionConnection(android.view.IWindow)>
<com.android.systemui.screenshot.TakeScreenshotService: android.os.IBinder onBind(android.content.Intent)>
<com.android.server.locksettings.VersionedPasswordMetrics: int getVersion()>
<com.android.settingslib.RestrictedPreferenceHelper: void onBindViewHolder(androidx.preference.PreferenceViewHolder)>
<com.android.systemui.recents.ScreenPinningRequest: void showPrompt(int,boolean)>
<com.android.systemui.util.concurrency.ConcurrencyModule: android.os.Handler provideBgHandler(android.os.Looper)>
<com.android.shell.HeapDumpProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.server.policy.GlobalActionsProvider.GlobalActionsListener: void onGlobalActionsDismissed()>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: void setShadowProperties(int,int,int,int)>
<com.android.systemui.recents.OverviewProxyService.OverviewProxyListener: void onQuickScrubStarted()>
<com.android.server.accessibility.gestures.TouchExplorer: com.android.server.accessibility.gestures.TouchState getState()>
<com.android.systemui.egg.MLand: void setupPlayers(int)>
<com.android.server.NetworkScoreService.ScoringServiceConnection: void onServiceDisconnected(android.content.ComponentName)>
<com.android.systemui.qs.QSContainerImpl: void setHeightOverride(int)>
<com.android.systemui.qs.external.TileLifecycleManager: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.systemui.analytics.SensorLoggerSession: void addPhoneEvent(int,long)>
<android.net.wifi.WifiManager: boolean isPasspointSupported()>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: java.lang.String getDeviceReleaseString()>
<com.android.systemui.statusbar.notification.row.NotificationGuts: void setActualHeight(int)>
<com.android.settingslib.accessibility.AccessibilityUtils: void setAccessibilityServiceState(android.content.Context,android.content.ComponentName,boolean)>
<com.android.commands.locksettings.LockSettingsCmd: void onShowUsage(java.io.PrintStream)>
<javax.obex.ServerOperation: int getMaxPacketSize()>
<com.android.systemui.statusbar.phone.NavigationBarView: com.android.systemui.statusbar.phone.LightBarTransitionsController getLightTransitionsController()>
<android.net.wifi.p2p.WifiP2pWfdInfo: int getControlPort()>
<com.android.systemui.tuner.TunerServiceImpl: void removeTunable(com.android.systemui.tuner.TunerService.Tunable)>
<com.android.server.locksettings.recoverablekeystore.certificate.CertUtils: void validateCertPath(java.security.cert.X509Certificate,java.security.cert.CertPath)>
<com.android.systemui.statusbar.notification.stack.AmbientState: com.android.systemui.statusbar.NotificationShelf getShelf()>
<com.android.server.audio.AudioEventLogger: void <init>(int,java.lang.String)>
<com.android.uiautomator.core.UiAutomationShellWrapper: void setCompressedLayoutHierarchy(boolean)>
<com.android.systemui.media.NotificationPlayer: void setUsesWakeLock(android.content.Context)>
<com.android.systemui.statusbar.phone.BiometricUnlockController: void finishKeyguardFadingAway()>
<com.android.server.SystemServerInitThreadPool: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.String)>
<com.android.server.appop.AppOpsService: void setUserRestrictions(android.os.Bundle,android.os.IBinder,int)>
<com.android.systemui.statusbar.policy.CallbackController: void removeCallback(java.lang.Object)>
<com.android.systemui.ForegroundServicesUserState: android.util.ArraySet getStandardLayoutKeys(java.lang.String)>
<com.android.systemui.statusbar.notification.TransformState: void reset()>
<com.android.server.trust.TrustManagerService: void onCleanupUser(int)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: boolean isConnectedHfpDevice()>
<android.net.wifi.hotspot2.pps.UpdateParameter: java.lang.String getUsername()>
<com.android.server.stats.StatsCompanion.PendingIntentRef: void sendActiveConfigsChangedBroadcast(long[])>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onTrustManagedChanged(int)>
<android.net.wifi.WifiEnterpriseConfig: void setCaCertificateAliases(java.lang.String[])>
<android.net.wifi.hotspot2.PasspointConfiguration: void setCarrierId(int)>
<com.android.server.input.InputManagerService: void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>
<com.android.server.policy.IconUtilities: android.graphics.ColorFilter getDisabledColorFilter()>
<com.android.systemui.statusbar.notification.VisualStabilityManager: void addGroupChangesAllowedCallback(com.android.systemui.statusbar.notification.VisualStabilityManager.Callback,boolean)>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindDivider(com.android.systemui.stackdivider.Divider)>
<com.android.systemui.statusbar.phone.dagger.StatusBarComponent: com.android.systemui.statusbar.phone.NotificationPanelViewController getNotificationPanelViewController()>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: void releaseSurfaceControlFromRt(android.view.SurfaceControl)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl clearProtectedBroadcasts()>
<com.android.systemui.statusbar.phone.LightBarTransitionsController: void destroy(android.content.Context)>
<com.android.systemui.ExpandHelper: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.globalactions.GlobalActionsImpl: void showGlobalActions(com.android.systemui.plugins.GlobalActions.GlobalActionsManager)>
<android.net.wifi.IWifiManager: void removeOnWifiUsabilityStatsListener(int)>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onTaskMovedToFront(android.app.ActivityManager.RunningTaskInfo)>
<javax.microedition.khronos.opengles.GL10: void glGetIntegerv(int,int[],int)>
<com.android.systemui.biometrics.AuthContainerView: void onAuthenticationFailed(java.lang.String)>
<com.android.server.ConnectivityService: boolean addVpnAddress(java.lang.String,int)>
<android.net.wifi.aware.TlvBufferUtils.TlvConstructor: android.net.wifi.aware.TlvBufferUtils.TlvConstructor allocate(int)>
<com.android.systemui.classifier.FalsingManagerProxy: boolean isClassifierEnabled()>
<com.android.server.media.MediaSession2Record: boolean isSystemPriority()>
<com.android.systemui.qs.external.TileServices: void startUnlockAndRun(android.os.IBinder)>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: void setPrintJobState(android.print.PrintJobId,int,java.lang.String,android.print.IPrintSpoolerCallbacks,int)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setUpProfiles()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowViewController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setIsHiddenSsid(boolean)>
<com.android.server.midi.MidiService: android.media.midi.MidiDeviceStatus getDeviceStatus(android.media.midi.MidiDeviceInfo)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setScrollingEnabled(boolean)>
<com.android.systemui.statusbar.policy.UserSwitcherController: void exitGuest(int,int)>
<android.wm.WindowManagerPerfTestBase: void setUpOnce()>
<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse verifyCredential(com.android.internal.widget.LockscreenCredential,long,int)>
<android.net.dhcp.DhcpServingParamsParcelExt: android.net.dhcp.DhcpServingParamsParcelExt setServerAddr(android.net.LinkAddress)>
<com.android.systemui.statusbar.policy.SecurityController: boolean isVpnRestricted()>
<com.android.systemui.qs.QSTileHost: void <init>(android.content.Context,com.android.systemui.statusbar.phone.StatusBarIconController,com.android.systemui.plugins.qs.QSFactory,android.os.Handler,android.os.Looper,com.android.systemui.shared.plugins.PluginManager,com.android.systemui.tuner.TunerService,javax.inject.Provider,com.android.systemui.dump.DumpManager,com.android.systemui.broadcast.BroadcastDispatcher,java.util.Optional,com.android.systemui.qs.logging.QSLogger,com.android.internal.logging.UiEventLogger)>
<android.view.textclassifier.TextClassificationManagerPerfTest: void setUp()>
<com.android.server.display.BrightnessMappingStrategy: boolean setAutoBrightnessAdjustment(float)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void clearCrossProfileIntentFilters(android.content.ComponentName)>
<com.android.server.security.VerityUtils.SetupResult: com.android.server.security.VerityUtils.SetupResult skipped()>
<com.android.systemui.globalactions.GlobalActionsColumnLayout: boolean shouldSnapToPowerButton()>
<com.android.server.audio.AudioService.VolumeController: void setLayoutDirection(int)>
<com.android.server.appop.AppOpsService: void resetHistoryParameters()>
<com.android.networkstack.tethering.TetheringInterfaceUtils: java.lang.String getIPv6Interface(com.android.networkstack.tethering.UpstreamNetworkState)>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void setMaxDisplayedNotifications(int)>
<com.android.settingslib.deviceinfo.AbstractIpAddressPreferenceController: void <init>(android.content.Context,com.android.settingslib.core.lifecycle.Lifecycle)>
<com.android.systemui.ScreenDecorations.DisplayCutoutView: void boundsFromDirection(android.view.DisplayCutout,int,android.graphics.Rect)>
<com.android.keyguard.KeyguardStatusView: void onDetachedFromWindow()>
<com.android.keyguard.KeyguardSimPukView: int getPasswordTextViewId()>
<com.android.settingslib.animation.AppearAnimationUtils: void startAnimation(java.lang.Object[],java.lang.Runnable,com.android.settingslib.animation.AppearAnimationCreator)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void onStartedGoingToSleep(int)>
<com.android.systemui.car.userswitcher.UserGridRecyclerView.UserAdapter: void onBindViewHolder(com.android.systemui.car.userswitcher.UserGridRecyclerView.UserAdapter.UserAdapterViewHolder,int)>
<com.android.systemui.statusbar.phone.ReverseLinearLayout.ReverseRelativeLayout: void setDefaultGravity(int)>
<com.android.systemui.doze.DozeLog: void traceNotificationPulse()>
<com.android.settingslib.drawer.TileUtils: java.util.List getCategories(android.content.Context,java.util.Map)>
<com.android.settingslib.accounts.AuthenticatorHelper.OnAccountsUpdateListener: void onAccountsUpdate(android.os.UserHandle)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: boolean shouldShowLockscreenNotifications()>
<com.android.server.display.color.ColorDisplayService: void <init>(android.content.Context)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void setDetailListening(boolean)>
<com.android.server.audio.PlayerFocusEnforcer: void unmutePlayersForCall()>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceInfo: android.net.wifi.p2p.nsd.WifiP2pUpnpServiceInfo newInstance(java.lang.String,java.lang.String,java.util.List)>
<com.android.systemui.statusbar.notification.stack.NotificationSwipeHelper.NotificationCallback: boolean shouldDismissQuickly()>
<com.android.printspooler.ui.PageAdapter: void update(android.print.PageRange[],android.print.PageRange[],int,android.print.PrintAttributes.MediaSize,android.print.PrintAttributes.Margins)>
<com.android.keyguard.KeyguardSecurityContainer: void onResume(int)>
<com.android.server.signedconfig.SignedConfig: void <init>(int,java.util.List)>
<com.android.settingslib.drawer.Tile: java.lang.String getKey(android.content.Context)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: boolean isInteractive()>
<com.android.systemui.util.time.SystemClock: long uptimeMillis()>
<android.os.UserManagerInternal: void setDevicePolicyUserRestrictions(int,android.os.Bundle,com.android.server.pm.RestrictionsSet,boolean)>
<android.net.wifi.hotspot2.pps.HomeSp: void setFqdn(java.lang.String)>
<com.android.systemui.dagger.DefaultActivityBinder: android.app.Activity bindWorkLockActivity(com.android.systemui.keyguard.WorkLockActivity)>
<com.android.settingslib.notification.EnableZenModeDialog: void bindNextAlarm(android.service.notification.Condition)>
<com.android.server.timezone.PackageManagerHelper: long getInstalledPackageVersion(java.lang.String)>
<com.android.systemui.bubbles.BubbleOverflow: android.graphics.Bitmap getBadgedImage()>
<android.net.wifi.p2p.WifiP2pDeviceList: void update(android.net.wifi.p2p.WifiP2pDevice)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: boolean isDismissed()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void showEmptyShadeView(boolean)>
<com.android.server.biometrics.face.FaceService: void notifyClientActiveCallbacks(boolean)>
<com.android.systemui.shared.system.ActivityManagerWrapper: android.app.ActivityManager.RunningTaskInfo getRunningTask()>
<javax.obex.ServerOperation: boolean continueOperation(boolean,boolean)>
<com.android.systemui.statusbar.policy.NetworkController: int getNumberSubscriptions()>
<com.android.systemui.bubbles.BubbleData: void dismissBubbleWithKey(java.lang.String,int)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: float getDismissThreshold()>
<android.text.StaticLayoutCreateDrawPerfTest: void <init>(java.lang.String,int,android.text.NonEditableTextGenerator.TextType,boolean)>
<com.android.systemui.statusbar.notification.collection.listbuilder.OnBeforeSortListener: void onBeforeSort(java.util.List)>
<android.text.StaticLayoutPerfTest: void testCreate_FixedText_NoStyle_Greedy_NoHyphenation()>
<android.net.wifi.SoftApCapability: int describeContents()>
<com.android.systemui.assist.ui.DefaultUiController: void onInvocationProgress(int,float)>
<com.android.keyguard.KeyguardAbsKeyInputView: com.android.keyguard.KeyguardSecurityCallback getCallback()>
<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>
<com.android.commands.hid.Event: byte[] getReport()>
<android.net.wifi.p2p.nsd.WifiP2pServiceInfo: void writeToParcel(android.os.Parcel,int)>
<com.android.settingslib.RestrictedPreferenceHelper: boolean setDisabledByAdmin(com.android.settingslib.RestrictedLockUtils.EnforcedAdmin)>
<com.android.settingslib.location.SettingsInjector: java.util.List getSettings(android.os.UserHandle)>
<com.android.printservice.recommendation.PrintServicePlugin: void start(com.android.printservice.recommendation.PrintServicePlugin.PrinterDiscoveryCallback)>
<javax.microedition.khronos.opengles.GL11: void glPointSizePointerOES(int,int,java.nio.Buffer)>
<com.android.systemui.accessibility.SystemActions: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.IntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,java.lang.Object)>
<com.android.settingslib.HelpUtils: boolean prepareHelpMenuItem(android.app.Activity,android.view.Menu,java.lang.String,java.lang.String)>
<com.android.settingslib.wifi.AccessPoint: java.lang.String getSecurityString(boolean)>
<com.android.server.accessibility.FingerprintGestureDispatcher: boolean onFingerprintGesture(int)>
<com.android.systemui.statusbar.policy.HeadsUpManager.HeadsUpEntry: long calculateFinishTime()>
<com.android.server.usb.descriptors.UsbDescriptorParser: float getInputHeadsetProbability()>
<com.android.systemui.classifier.FalsingManagerProxy: void onNotificationStopDismissing()>
<android.net.TetheringManager.TetheringEventCallback: void onError(java.lang.String,int)>
<com.android.settingslib.notification.ZenDurationDialog: void setupRadioButtons(int)>
<com.android.packageinstaller.PackageInstallerActivity: void onBackPressed()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onReset(com.android.systemui.statusbar.notification.row.ExpandableView)>
<com.android.uiautomator.core.UiDevice: void waitForIdle(long)>
<com.android.server.devicepolicy.DevicePolicyManagerService: long getLastSecurityLogRetrievalTime()>
<android.net.wifi.rtt.RangingResult: byte[] getLcr()>
<com.android.systemui.assist.AssistHandleViewController: void setAssistHintVisible(boolean)>
<com.android.server.accessibility.MagnificationController: void getMagnificationRegion(int,android.graphics.Region)>
<com.android.systemui.plugins.qs.QSTile: void click()>
<javax.obex.ObexHelper: long convertToLong(byte[])>
<com.android.systemui.shared.system.TransactionCompat: com.android.systemui.shared.system.TransactionCompat setMatrix(com.android.systemui.shared.system.SurfaceControlCompat,float,float,float,float)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void setFakeShadowIntensity(float,float,int,int)>
<com.android.settingslib.wifi.AccessPoint: java.lang.String getBssid()>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback.ActiveWakeLock: void acquire()>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: com.android.systemui.statusbar.policy.KeyButtonDrawable create(android.content.Context,int,boolean,android.graphics.Color)>
<com.android.systemui.statusbar.policy.AccessibilityManagerWrapper: void addCallback(android.view.accessibility.AccessibilityManager.AccessibilityServicesStateChangeListener)>
<com.android.systemui.dagger.DefaultActivityBinder: android.app.Activity bindBubbleOverflowActivity(com.android.systemui.bubbles.BubbleOverflowActivity)>
<com.android.server.people.data.PackageData: boolean isDefaultSmsApp()>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_sendsBroadcast()>
<android.net.wifi.aware.TlvBufferUtils.TlvConstructor: android.net.wifi.aware.TlvBufferUtils.TlvConstructor putByte(int,byte)>
<android.os.TracePerfTest: void endTracing()>
<com.android.systemui.qs.tiles.UserDetailView.Adapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.server.timedetector.TimeDetectorStrategyImpl: void suggestNetworkTime(android.app.timedetector.NetworkTimeSuggestion)>
<com.android.shell.BugreportStorageProvider: android.database.Cursor queryChildDocuments(java.lang.String,java.lang.String[],java.lang.String)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean hasFinishedInitialization()>
<com.android.keyguard.KeyguardSecurityView: boolean disallowInterceptTouch(android.view.MotionEvent)>
<com.android.systemui.statusbar.policy.BrightnessMirrorController: void addCallback(com.android.systemui.statusbar.policy.BrightnessMirrorController.BrightnessMirrorListener)>
<com.android.systemui.qs.SignalTileView: com.android.systemui.qs.tileimpl.SlashImageView createSlashImageView(android.content.Context)>
<com.google.errorprone.matchers.FieldMatchers: com.google.inject.matcher.Matcher anyFieldInClass(java.lang.String)>
<com.android.systemui.biometrics.AuthCredentialPasswordView: void onFinishInflate()>
<com.android.systemui.wm.DisplayController: void addDisplayWindowListener(com.android.systemui.wm.DisplayController.OnDisplaysChangedListener)>
<com.android.systemui.dagger.SystemUIRootComponent: com.android.systemui.InitController getInitController()>
<com.android.systemui.qs.QSPanel: boolean isExpanded()>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.tuner.TunerService provideTunerService(com.android.systemui.tuner.TunerServiceImpl)>
<com.android.settingslib.bluetooth.BluetoothDiscoverableTimeoutReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.settingslib.deviceinfo.AbstractIpAddressPreferenceController: boolean isAvailable()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void onTouchStart()>
<com.android.packageinstaller.wear.WearPackageUtil: java.io.File getIconFile(android.content.Context,java.lang.String)>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void resetExposedMenuView(boolean,boolean)>
<com.android.server.autofill.ui.AutoFillUI: void setCallback(com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback)>
<com.android.systemui.qs.QSTileHost: void forceCollapsePanels()>
<com.android.packageinstaller.handheld.UninstallAlertDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.systemui.statusbar.policy.UserSwitcherController.BaseUserAdapter: java.lang.String getName(android.content.Context,com.android.systemui.statusbar.policy.UserSwitcherController.UserRecord)>
<android.net.wifi.WifiConfiguration: void setIpConfiguration(android.net.IpConfiguration)>
<com.android.server.biometrics.BiometricServiceBase: boolean canUseBiometric(java.lang.String,boolean,int,int,int)>
<com.android.printspooler.ui.FusedPrintersProvider: void <init>(android.app.Activity,int)>
<com.android.settingslib.volume.Util: java.lang.String playbackStateStateToString(int)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onTelephonyCapable(boolean)>
<com.android.future.usb.UsbAccessory: java.lang.String getDescription()>
<com.android.systemui.statusbar.phone.StatusBar: com.android.systemui.statusbar.NotificationPresenter getPresenter()>
<com.android.systemui.util.leak.GarbageMonitor: void <init>(android.content.Context,android.os.Looper,com.android.systemui.util.leak.LeakDetector,com.android.systemui.util.leak.LeakReporter)>
<android.net.wifi.ScanResult: boolean is6GHz()>
<com.android.systemui.qs.tiles.FlashlightTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.BooleanState,java.lang.Object)>
<com.android.settingslib.drawable.UserIconDrawable: android.graphics.drawable.Drawable getManagedUserDrawable(android.content.Context)>
<com.android.server.usb.descriptors.ByteStream: int getReadCount()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: void addEmergencyListener(com.android.systemui.statusbar.policy.NetworkController.EmergencyListener)>
<com.android.systemui.statusbar.phone.PanelExpansionListener: void onQsExpansionChanged(float)>
<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>
<com.android.systemui.statusbar.NotificationShelf: void setMaxLayoutHeight(int)>
<com.android.systemui.statusbar.notification.stack.AmbientState: com.android.systemui.statusbar.notification.row.ActivatableNotificationView getActivatedChild()>
<com.android.server.autofill.ui.CustomScrollView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.plugins.FalsingManager: void onScreenOnFromTouch()>
<com.android.gallery3d.glrenderer.GLES20Canvas: int uploadBuffer(java.nio.ByteBuffer)>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void disableDevice(boolean,com.android.server.hdmi.HdmiCecLocalDevice.PendingActionClearedCallback)>
<android.net.wifi.hotspot2.pps.Policy: void <init>(android.net.wifi.hotspot2.pps.Policy)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: void addSwipedOutNotification(java.lang.String)>
<com.android.server.pm.PackageAbiHelper: com.android.server.pm.PackageAbiHelper.Abis getBundledAppAbis(com.android.server.pm.parsing.pkg.AndroidPackage)>
<android.net.wifi.p2p.WifiP2pDevice: boolean isDeviceLimit()>
<com.android.server.ExtconUEventObserver.ExtconInfo: java.util.List getExtconInfos(java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void onVisibilityAggregated(boolean)>
<com.android.networkstack.tethering.EntitlementManager: android.content.Intent runSilentTetherProvisioning(int,com.android.networkstack.tethering.TetheringConfiguration)>
<com.android.systemui.doze.DozeReceiver: void dozeTimeTick()>
<com.android.systemui.statusbar.notification.MessagingLayoutTransformState: void recycle()>
<com.android.egg.neko.Cat: int getColorIndex(int,int[])>
<com.android.server.pm.ApexManager.ApexManagerImpl: android.apex.IApexService waitForApexService()>
<com.android.server.media.MediaSessionStack.OnMediaButtonSessionChangedListener: void onMediaButtonSessionChanged(com.android.server.media.MediaSessionRecordImpl,com.android.server.media.MediaSessionRecordImpl)>
<android.os.ParcelPerfTest: void setUp()>
<com.android.settingslib.net.DataUsageController: void setCallback(com.android.settingslib.net.DataUsageController.Callback)>
<com.android.systemui.keyguard.Lifecycle: void removeObserver(java.lang.Object)>
<com.android.keyguard.KeyguardViewController: void onScreenTurningOn()>
<android.net.wifi.aware.DiscoverySession: void finalize()>
<com.android.systemui.shared.system.RecentsAnimationControllerCompat: com.android.systemui.shared.recents.model.ThumbnailData screenshotTask(int)>
<com.android.server.NetIdManager: void releaseNetId(int)>
<com.android.server.slice.SliceManagerService: void unpinSlice(java.lang.String,android.net.Uri,android.os.IBinder)>
<com.android.systemui.statusbar.notification.collection.coordinator.MediaCoordinator: void <init>(com.android.systemui.media.MediaFeatureFlag)>
<com.android.systemui.qs.customize.TileAdapter: int getItemCount()>
<com.android.server.biometrics.EnrollClient: int stop(boolean)>
<com.android.systemui.statusbar.policy.RemoteInputView: void close()>
<android.media.Session2Link: void <init>(android.media.MediaSession2)>
<com.android.systemui.volume.VolumePrefs: boolean get(android.content.Context,java.lang.String,boolean)>
<android.os.ParcelPerfTest: void timeReadInt()>
<com.android.keyguard.KeyguardSecurityView: void setKeyguardCallback(com.android.keyguard.KeyguardSecurityCallback)>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.policy.KeyguardStateController provideKeyguardMonitor(com.android.systemui.statusbar.policy.KeyguardStateControllerImpl)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: android.view.NotificationHeaderView getNotificationHeader()>
<com.android.gallery3d.glrenderer.GLCanvas: void drawMixed(com.android.gallery3d.glrenderer.BasicTexture,int,float,android.graphics.RectF,android.graphics.RectF)>
<com.android.systemui.statusbar.notification.stack.SectionHeaderView: void onFinishInflate()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumLetters(android.content.ComponentName,int,boolean)>
<com.android.systemui.plugins.DarkIconDispatcher: void setIconsDarkArea(android.graphics.Rect)>
<com.android.systemui.volume.MediaRouterWrapper: void <init>(androidx.mediarouter.media.MediaRouter)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: float getCurrentTopRoundness()>
<com.android.systemui.classifier.FalsingManagerProxy: void onAffordanceSwipingAborted()>
<com.android.photos.views.TiledImageRenderer: int suggestedTileSize(android.content.Context)>
<com.android.settingslib.media.LocalMediaManager.DeviceCallback: void onSelectedDeviceStateChanged(com.android.settingslib.media.MediaDevice,int)>
<com.android.server.pm.AppsFilter: android.util.SparseArray getVisibilityWhitelist(com.android.server.pm.PackageSetting,int[],android.util.ArrayMap)>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: int getVendorID()>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onStartedGoingToSleep(int)>
<android.net.wifi.aware.DiscoverySession: void sendMessage(android.net.wifi.aware.PeerHandle,int,byte[],int)>
<com.android.systemui.classifier.FalsingManagerFake: void onNotificatonStopDraggingDown()>
<com.android.uiautomator.core.UiWatcher: boolean checkForCondition()>
<com.android.systemui.plugins.qs.QSTile: void clearState()>
<com.android.packageinstaller.television.UninstallAppProgress: void onCreate(android.os.Bundle)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: boolean shouldShowOnKeyguard(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.display.AmbientBrightnessStatsTracker: void readStats(java.io.InputStream)>
<com.android.server.appop.AppOpsService: void reloadNonHistoricalState()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onQsDown()>
<com.android.server.pm.dex.DexManager: java.util.Set getAllPackagesWithSecondaryDexFiles()>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void onViewAdded(android.view.View)>
<com.android.systemui.car.notification.NotificationPanelViewController: void onPanelVisible(boolean)>
<com.android.server.locksettings.LockSettingsStrongAuth.NonStrongBiometricIdleTimeoutAlarmListener: void onAlarm()>
<com.android.settingslib.drawable.UserIconDrawable: void setBadgeRadius(float)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: com.android.systemui.statusbar.DragDownHelper.DragDownCallback getDragDownCallback()>
<android.net.wifi.WifiNetworkSpecifier: boolean canBeSatisfiedBy(android.net.NetworkSpecifier)>
<android.net.wifi.WifiUsabilityStatsEntry: int getProbeStatusSinceLastUpdate()>
<com.android.server.utils.ManagedApplicationService.LogEvent: java.lang.String toLogString(java.text.SimpleDateFormat)>
<com.android.settingslib.deviceinfo.AbstractSerialNumberPreferenceController: void <init>(android.content.Context)>
<com.android.gallery3d.common.Utils: int clamp(int,int,int)>
<com.android.systemui.statusbar.phone.StatusBar: boolean hideKeyguardImpl()>
<com.android.perftests.blob.BlobStorePerfTests: void tearDown()>
<com.android.server.pm.UserTypeDetails: boolean isProfile()>
<com.android.systemui.keyguard.Lifecycle: void addObserver(java.lang.Object)>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifCollectionListener: void onEntryCleanUp(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.phone.UserAvatarView: void setBitmap(android.graphics.Bitmap)>
<com.android.server.HardwarePropertiesManagerService: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageResolver: android.graphics.drawable.BitmapDrawable resolveImageInternal(android.net.Uri)>
<com.android.server.policy.WindowManagerPolicy: android.view.animation.Animation createHiddenByKeyguardExit(boolean,boolean,boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean isInShelf()>
<android.content.pm.PackageManagerInternal: void setExternalSourcesPolicy(android.content.pm.PackageManagerInternal.ExternalSourcesPolicy)>
<com.android.systemui.media.dialog.MediaOutputController: void onDeviceListUpdate(java.util.List)>
<com.android.systemui.statusbar.notification.NotificationDozeHelper: void updateGrayscaleMatrix(float)>
<com.android.lock_checker.LockHook.LockChecker: int getNumDetectedUnique()>
<com.android.server.pm.PackageInstallerService: void updateSessionAppIcon(int,android.graphics.Bitmap)>
<com.android.keyguard.clock.AnalogClockController: void setTextColor(int)>
<com.android.systemui.statusbar.policy.KeyButtonRipple: int getOpacity()>
<android.net.wifi.IWifiManager: byte[] retrieveBackupData()>
<com.android.systemui.recents.RecentsModule: com.android.systemui.recents.RecentsImplementation bindOverviewProxyRecentsImpl(com.android.systemui.recents.OverviewProxyRecentsImpl)>
<com.android.systemui.bubbles.animation.StackAnimationController: float animateForImeVisibility(boolean)>
<android.net.TetheredClient: void writeToParcel(android.os.Parcel,int)>
<com.android.server.firewall.FilterFactory: void <init>(java.lang.String)>
<com.android.settingslib.wifi.AccessPoint: void <init>(android.content.Context,android.net.wifi.hotspot2.OsuProvider,java.util.Collection)>
<com.android.systemui.statusbar.phone.ShadeControllerImpl: void collapsePanel(boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void changeViewPosition(com.android.systemui.statusbar.notification.row.ExpandableView,int)>
<com.android.server.display.WifiDisplayController.Listener: void onDisplayChanged(android.hardware.display.WifiDisplay)>
<com.android.server.appop.AppOpsService: void publish()>
<com.android.systemui.statusbar.phone.ScrimController: void attachViews(com.android.systemui.statusbar.ScrimView,com.android.systemui.statusbar.ScrimView,com.android.systemui.statusbar.ScrimView)>
<com.android.server.stats.StatsManagerService: long[] getRegisteredExperimentIds()>
<android.os.PackageManagerPerfTest: void testGetPackageInfo()>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setUntrusted(boolean)>
<com.android.settingslib.CustomDialogPreference.CustomPreferenceDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void updateBackgroundClipping()>
<android.net.wifi.ScanResult.InformationElement: java.nio.ByteBuffer getBytes()>
<com.android.server.audio.AudioService: boolean hasAudioFocusUsers()>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void touchAutoDim()>
<com.android.settingslib.searchprovider.SettingsXmlIndexProvider: android.database.Cursor queryNonIndexableKeys(java.lang.String[])>
<com.android.wallpapercropper.WallpaperCropActivity: java.lang.String getSharedPreferencesKey()>
<com.android.systemui.plugins.qs.QSTile.Icon: java.lang.String toString()>
<com.android.printservice.recommendation.plugin.hp.HPRecommendationPlugin: void <init>(android.content.Context)>
<com.android.settingslib.bluetooth.BluetoothCallback: void onBluetoothStateChanged(int)>
<com.android.settingslib.net.NetworkStatsSummaryLoader: android.app.usage.NetworkStats loadInBackground()>
<com.android.server.pm.PackageSettingBase: int[] getNotInstalledUserIds()>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void onRotationProposal(int,boolean)>
<com.android.systemui.statusbar.notification.row.NotificationGuts.GutsContent: void setAccessibilityDelegate(android.view.View.AccessibilityDelegate)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector selected(boolean)>
<com.android.server.ConnectivityService.Dependencies: android.net.NetworkStackClient getNetworkStack()>
<android.net.wifi.IWifiManager: void setScanThrottleEnabled(boolean)>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void setServerParams(byte[])>
<com.android.server.slice.SlicePermissionManager.PkgUser: int hashCode()>
<com.android.settingslib.search.SearchIndexableResources: void addIndex(com.android.settingslib.search.SearchIndexableData)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: com.android.systemui.statusbar.notification.row.NotificationGuts getGuts()>
<com.android.systemui.shared.system.InputMonitorCompat: void dispose()>
<com.android.systemui.statusbar.InflationTask: void abort()>
<com.android.server.webkit.WebViewUpdateService: boolean entirePackageChanged(android.content.Intent)>
<com.android.settingslib.wifi.AccessPoint: boolean matches(com.android.settingslib.wifi.AccessPoint)>
<android.net.wifi.WifiClient: void writeToParcel(android.os.Parcel,int)>
<com.android.settingslib.graph.SignalDrawable: int getIntrinsicHeight()>
<com.android.systemui.tuner.DemoModeFragment: boolean onOptionsItemSelected(android.view.MenuItem)>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getQueriesPackages()>
<com.android.server.webkit.WebViewUpdateService: void <init>(android.content.Context)>
<com.android.systemui.car.notification.NotificationPanelViewMediator: void registerListeners()>
<com.android.server.locksettings.LockSettingsService: java.lang.String generateKeyWithMetadata(java.lang.String,byte[])>
<com.android.server.appbinding.finders.AppServiceFinder: android.os.IInterface asInterface(android.os.IBinder)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isRuntimePermission(java.lang.String)>
<com.android.printspooler.ui.AddPrinterActivity: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
<com.android.server.appop.AppOpsService: void setAudioRestriction(int,int,int,int,java.lang.String[])>
<com.android.server.soundtrigger_middleware.SoundTriggerHw2Enforcer: void startRecognition(int,android.hardware.soundtrigger.V2_3.RecognitionConfig,com.android.server.soundtrigger_middleware.ISoundTriggerHw2.Callback,int)>
<com.android.settingslib.deviceinfo.AbstractUptimePreferenceController: void onStop()>
<com.android.systemui.stackdivider.WindowManagerProxy: void setTouchRegion(android.graphics.Rect)>
<com.android.systemui.globalactions.GlobalActionsDialog.Action: boolean isEnabled()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalRoamScanTimeMillis()>
<com.android.server.infra.AbstractMasterSystemService: void onServicePackageUpdatingLocked(int)>
<com.android.networkstack.tethering.UpstreamNetworkMonitor: void <init>(android.net.ConnectivityManager,com.android.internal.util.StateMachine,android.net.util.SharedLog,int)>
<com.android.systemui.tuner.ShortcutParser: void <init>(android.content.Context,java.lang.String,java.lang.String,int)>
<com.android.pacprocessor.LibpacInterface: boolean stopPacSupport()>
<android.app.ResourcesPerfTest: void getFrameworkStringValue()>
<com.android.networkstack.tethering.EntitlementManager.TetheringConfigurationFetcher: com.android.networkstack.tethering.TetheringConfiguration fetchTetheringConfiguration()>
<com.android.systemui.car.window.SystemUIOverlayWindowManager: void start()>
<com.android.systemui.globalactions.GlobalActionsDialog.Action: void onPress()>
<com.android.keyguard.KeyguardAbsKeyInputView: boolean shouldLockout(long)>
<com.android.server.pm.IntentFilterVerificationState: void <init>(int,int,java.lang.String)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_setsAppOpWithFullAndWithoutUsers()>
<com.android.systemui.biometrics.AuthDialogCallback: void onDismissed(int,byte[])>
<com.android.server.inputmethod.InputMethodManagerInternal: void reportImeControl(android.os.IBinder)>
<android.net.wifi.aware.DiscoverySessionCallback: void onSessionConfigFailed()>
<android.perftests.utils.SettingsStateManager: void <init>(android.content.Context,java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.CastDrawable: boolean onLayoutDirectionChanged(int)>
<com.android.server.accessibility.gestures.GestureManifold.Listener: boolean onGestureCompleted(android.accessibilityservice.AccessibilityGestureEvent)>
<com.android.server.ConnectivityService: void setGlobalProxy(android.net.ProxyInfo)>
<com.android.photos.views.TiledImageRenderer.TileSource: com.android.gallery3d.glrenderer.BasicTexture getPreview()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setShortSupportMessage(android.content.ComponentName,java.lang.CharSequence)>
<com.android.server.storage.StorageUserConnection: void <init>(android.content.Context,int,com.android.server.storage.StorageSessionController)>
<com.android.printservice.recommendation.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>
<com.android.server.audio.AudioService: boolean isStreamMute(int)>
<com.android.server.pm.PackageList: void close()>
<com.android.systemui.assist.ui.DisplayUtils: int getWidth(android.content.Context)>
<com.android.smspush.WapPushManager: android.os.IBinder onBind(android.content.Intent)>
<com.android.server.pm.InstructionSets: java.util.List getAllInstructionSets()>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: void removeUserChangedListener(com.android.systemui.statusbar.NotificationLockscreenUserManager.UserChangedListener)>
<com.android.server.pm.UserTypeDetails: int getLabel()>
<com.android.systemui.doze.DozeAuthRemover: void <init>(android.content.Context)>
<com.android.server.testing.shadows.ShadowSlog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>
<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void sendRequestActiveSource()>
<com.android.systemui.bubbles.BubbleExpandedView: void cleanUpExpandedState()>
<com.android.server.usb.descriptors.Usb10ACMixerUnit: byte getChanNameID()>
<com.android.systemui.HardwareBgDrawable: void <init>(boolean,android.graphics.drawable.Drawable[])>
<com.android.systemui.qs.TileLayout: void <init>(android.content.Context)>
<com.android.keyguard.KeyguardUpdateMonitor.StrongAuthTracker: void onStrongAuthRequiredChanged(int)>
<com.android.systemui.statusbar.notification.collection.notifcollection.DismissedByUserStats: void <init>(int,int,com.android.internal.statusbar.NotificationVisibility)>
<com.android.systemui.classifier.ClassifierData: void <init>(float)>
<com.android.systemui.SwipeHelper.Callback: boolean canChildBeDismissed(android.view.View)>
<com.android.systemui.util.sensors.ProximitySensor: void alertListeners()>
<com.android.systemui.statusbar.policy.FlashlightController.FlashlightListener: void onFlashlightError()>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void onScreenTurnedOn()>
<com.android.systemui.statusbar.CommandQueue: void showPictureInPictureMenu()>
<com.google.android.startop.iorap.AppLaunchEvent.ReportFullyDrawn: void writeToParcelImpl(android.os.Parcel,int)>
<com.android.systemui.doze.DozeHost: void dozeTimeTick()>
<javax.obex.ServerRequestHandler: int onPut(javax.obex.Operation)>
<com.android.server.pm.UserTypeDetails: int getMaxAllowed()>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getStartUserSessionMessage(android.content.ComponentName)>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: void <init>(android.graphics.Point,int,int,java.lang.Runnable)>
<com.android.server.people.data.AbstractProtoDiskReadWriter.ProtoStreamWriter: void write(android.util.proto.ProtoOutputStream,java.lang.Object)>
<com.android.systemui.statusbar.policy.BatteryController.BatteryStateChangeCallback: void onExtremeBatterySaverChanged(boolean)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean rowExists()>
<com.android.server.SystemService: android.content.Context getContext()>
<android.net.wifi.WifiConfiguration: boolean isNoInternetAccessExpected()>
<com.android.server.pm.UserManagerService: android.os.ParcelFileDescriptor getUserIcon(int)>
<com.google.android.startop.iorap.JobScheduledEvent: int describeContents()>
<com.android.systemui.ExpandHelper.Callback: void setExpansionCancelled(android.view.View)>
<com.google.android.startop.iorap.AppLaunchEvent.ReportFullyDrawn: void <init>(long,byte[],long)>
<com.android.server.pm.parsing.PackageCacher: void <init>(java.io.File)>
<com.android.systemui.statusbar.notification.collection.inflation.NotificationRowBinderImpl: void setNotificationClicker(com.android.systemui.statusbar.notification.NotificationClicker)>
<com.android.systemui.statusbar.notification.stack.StackStateAnimator: void startAnimationForEvents(java.util.ArrayList,long)>
<com.android.server.textclassifier.IconsContentProvider: boolean onCreate()>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>
<com.android.server.biometrics.BiometricUserState: void doWriteState()>
<com.android.settingslib.CustomEditTextPreferenceCompat: android.app.Dialog getDialog()>
<com.android.systemui.biometrics.AuthCredentialView: void showError(java.lang.String)>
<com.android.server.pm.ShortcutService: boolean isSharingShortcut(int,java.lang.String,java.lang.String,java.lang.String,int,android.content.IntentFilter)>
<com.android.networkstack.tethering.EntitlementManager: void removeDownstreamMapping(int)>
<com.android.systemui.bubbles.animation.StackAnimationController: void springFirstBubbleWithStackFollowing(androidx.dynamicanimation.animation.DynamicAnimation.ViewProperty,androidx.dynamicanimation.animation.SpringForce,float,float,java.lang.Runnable[])>
<com.android.systemui.doze.DozeTriggers: void transitionTo(com.android.systemui.doze.DozeMachine.State,com.android.systemui.doze.DozeMachine.State)>
<com.android.server.RuntimeService: void <init>(android.content.Context)>
<com.android.systemui.plugins.statusbar.StatusBarStateController: void addCallback(com.android.systemui.plugins.statusbar.StatusBarStateController.StateListener)>
<com.android.systemui.shared.plugins.PluginManagerImpl.PluginInstanceManagerFactory: com.android.systemui.shared.plugins.PluginInstanceManager createPluginInstanceManager(android.content.Context,java.lang.String,com.android.systemui.plugins.PluginListener,boolean,android.os.Looper,java.lang.Class,com.android.systemui.shared.plugins.PluginManagerImpl)>
<com.android.systemui.statusbar.policy.DeviceProvisionedController: boolean isDeviceProvisioned()>
<com.android.printservice.recommendation.util.Preconditions: void checkState(boolean)>
<com.android.providers.settings.SettingsProvider: java.lang.String settingTypeToString(int)>
<com.android.systemui.bubbles.BubbleStackView: com.android.systemui.bubbles.BubbleStackView.RelativeStackPosition getRelativeStackPosition()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onCameraHintStarted()>
<android.os.TracePerfTest: void startTracing()>
<android.perftests.SystemPerfTest: void testBenchmarkOverhead()>
<com.android.systemui.qs.external.CustomTile: android.content.ComponentName getComponentFromSpec(java.lang.String)>
<com.android.server.audio.AudioService: int getRingerModeExternal()>
<com.android.systemui.settings.BrightnessController: void checkRestrictionAndSetEnabled()>
<com.android.systemui.qs.QSDetailItems: com.android.systemui.qs.QSDetailItems convertOrInflate(android.content.Context,android.view.View,android.view.ViewGroup)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone.HeadsUpEntryPhone: void setExpanded(boolean)>
<com.android.systemui.util.sensors.ProximitySensor: java.lang.Boolean isNear()>
<com.android.server.pm.PackageManagerService.Injector: android.app.ActivityManagerInternal getActivityManagerInternal()>
<com.android.localtransport.LocalTransport: java.lang.String currentDestinationString()>
<com.android.systemui.statusbar.DragDownHelper: void <init>(android.content.Context,android.view.View,com.android.systemui.ExpandHelper.Callback,com.android.systemui.statusbar.DragDownHelper.DragDownCallback,com.android.systemui.plugins.FalsingManager)>
<com.android.server.biometrics.Constants: int acquireVendorCode()>
<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getUserInfo(int)>
<com.android.networkstack.tethering.BpfCoordinator.Ipv6ForwardingRule: android.net.TetherOffloadRuleParcel toTetherOffloadRuleParcel()>
<com.android.gallery3d.glrenderer.GLES20Canvas: void initializeTexture(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.Bitmap)>
<com.android.server.wallpaper.WallpaperManagerService.Lifecycle: void onUnlockUser(int)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowViewController: void cancelCurrentTouch()>
<com.android.systemui.classifier.FalsingManagerProxy: void onNotificationActive()>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void dismiss(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
<com.android.server.IntentResolver: java.util.List queryIntentFromList(android.content.Intent,java.lang.String,boolean,java.util.ArrayList,int)>
<com.android.settingslib.AppItem: void writeToParcel(android.os.Parcel,int)>
<com.android.settingslib.drawer.ProviderTile: int getId()>
<com.android.server.pm.RestrictionsSet: void writeRestrictions(org.xmlpull.v1.XmlSerializer,java.lang.String)>
<com.android.systemui.usb.UsbDebuggingActivity: void onWindowAttributesChanged(android.view.WindowManager.LayoutParams)>
<com.android.server.pm.PackageInstallerSession: void removeChildSessionId(int)>
<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate[] getClientCertificateChain()>
<com.android.systemui.statusbar.policy.KeyguardUserDetailItemView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.ConnectivityService: android.net.Network getNetworkForType(int)>
<com.android.server.audio.AudioService: int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void startManagedQuickContact(java.lang.String,long,boolean,long,android.content.Intent)>
<com.android.systemui.statusbar.phone.NavigationBarView: void setLayoutDirection(int)>
<com.android.systemui.shared.system.TransactionCompat: com.android.systemui.shared.system.TransactionCompat setCornerRadius(com.android.systemui.shared.system.SurfaceControlCompat,float)>
<com.android.settingslib.widget.UpdatableListPreferenceDialogFragment: void onDialogClosed(boolean)>
<com.android.server.tv.tunerresourcemanager.TunerResourceBasic: int getOwnerClientId()>
<com.android.systemui.statusbar.phone.StatusBarIconList.Slot: boolean hasIconsInSlot()>
<com.android.systemui.qs.TouchAnimator.Builder: com.android.systemui.qs.TouchAnimator.Builder setInterpolator(android.view.animation.Interpolator)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: java.lang.String getName()>
<android.net.wifi.WifiManager.LocalOnlyHotspotReservation: void close()>
<com.android.server.media.MediaSessionRecordImpl: boolean isActive()>
<com.android.systemui.qs.tiles.CastTile: com.android.systemui.plugins.qs.DetailAdapter getDetailAdapter()>
<com.android.server.statusbar.StatusBarManagerInternal: void onDisplayReady(int)>
<com.android.server.autofill.ui.PendingUi: java.lang.String toString()>
<com.android.server.usb.descriptors.UsbInterfaceDescriptor: int getUsbClass()>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: void updateMediaMetaData(boolean,boolean)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setExpandingVelocity(float)>
<com.android.settingslib.drawable.UserIconDrawable: void setFrameWidth(float)>
<com.android.systemui.statusbar.policy.BatteryController: void setPowerSaveMode(boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getDeviceOwnerComponent(boolean)>
<com.android.systemui.biometrics.AuthContainerView: void show(android.view.WindowManager,android.os.Bundle)>
<com.android.systemui.screenrecord.ScreenRecordingMuxer: void <init>(int,java.lang.String,java.lang.String[])>
<com.android.systemui.statusbar.notification.MediaNotificationProcessor: int selectForegroundColor(int,androidx.palette.graphics.Palette)>
<com.android.printspooler.ui.PrintErrorFragment.OnActionListener: void onActionPerformed()>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationViewController: void <init>(com.android.systemui.statusbar.notification.row.ActivatableNotificationView,com.android.systemui.statusbar.notification.row.ExpandableOutlineViewController,android.view.accessibility.AccessibilityManager,com.android.systemui.plugins.FalsingManager)>
<com.android.settingslib.wifi.AccessPointPreference: void updateBadge(android.content.Context)>
<com.android.packageinstaller.wear.PackageInstallerImpl: void install(java.lang.String,android.os.ParcelFileDescriptor,com.android.packageinstaller.wear.PackageInstallerImpl.InstallListener)>
<com.android.settingslib.bluetooth.PbapServerProfile: int getDrawableResource(android.bluetooth.BluetoothClass)>
<com.android.systemui.statusbar.phone.StatusBar: void setUpDisableFlags(int,int)>
<com.android.server.slice.SlicePermissionManager: void writeBackup(org.xmlpull.v1.XmlSerializer)>
<com.android.packageinstaller.television.UninstallAppProgressFragment: void setUsersButtonVisible(boolean)>
<android.net.wifi.WifiEnterpriseConfig: void setFieldValue(java.lang.String,java.lang.String)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setPrimaryCpuAbi(java.lang.String)>
<com.android.server.pm.UserRestrictionsUtils: boolean contains(android.os.Bundle,java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: void setStatusBarNotification(android.service.notification.StatusBarNotification)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onFaceUnlockStateChanged(boolean,int)>
<com.android.server.textclassifier.IconsContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<com.android.settingslib.applications.ApplicationsState: void ensureIcon(com.android.settingslib.applications.ApplicationsState.AppEntry)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onAffordanceSwipingAborted()>
<com.android.server.security.KeyAttestationApplicationIdProviderService: void <init>(android.content.Context)>
<com.android.systemui.qs.QuickStatusBarHeader: void setContentMargins(int,int)>
<com.android.settingslib.location.RecentLocationApps: java.util.List getAppList(boolean)>
<com.android.systemui.statusbar.notification.row.RowContentBindParams: boolean useLowPriority()>
<com.android.server.timezonedetector.ArrayMapWithHistory: void <init>(int)>
<com.android.systemui.globalactions.GlobalActionsComponent: void shutdown()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: float getHeaderVisibleAmount()>
<com.android.systemui.statusbar.notification.row.AppOpsInfo: void bindGuts(android.content.pm.PackageManager,com.android.systemui.statusbar.notification.row.AppOpsInfo.OnSettingsClickListener,android.service.notification.StatusBarNotification,com.android.internal.logging.UiEventLogger,android.util.ArraySet)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getPrimaryCpuAbi()>
<com.android.systemui.statusbar.phone.LightBarController: void setQsCustomizing(boolean)>
<com.android.systemui.statusbar.phone.NavigationBarEdgePanel: void onDraw(android.graphics.Canvas)>
<com.android.server.audio.AudioService.AudioPolicyProxy: java.lang.String toLogFriendlyString()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void notifyHideAnimationStart(boolean)>
<com.android.server.people.data.DataManager: void pruneDataForUser(int,android.os.CancellationSignal)>
<com.android.server.policy.PhoneWindowManager: void init(android.content.Context,android.view.IWindowManager,com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs)>
<com.android.systemui.pip.tv.PipControlButtonView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.plugins.qs.DetailAdapter: java.lang.Boolean getToggleState()>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onTaskStackChanged()>
<com.android.server.usb.descriptors.UsbVCHeader: void <init>(int,byte,byte,int)>
<android.net.wifi.rtt.CivicLocation: void writeToParcel(android.os.Parcel,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getDeviceOwnerLockScreenInfo()>
<com.android.server.accessibility.AccessibilityWindowManager: void updateActiveAndAccessibilityFocusedWindowLocked(int,int,long,int,int)>
<android.graphics.perftests.PathPerfTest: void testIsConvex()>
<com.android.systemui.bubbles.BubbleOverflowActivity: void onPause()>
<com.android.gallery3d.common.BitmapUtils: int computeSampleSize(int,int,int,int)>
<com.android.server.pm.parsing.library.AndroidHidlUpdater: void updatePackage(com.android.server.pm.parsing.pkg.ParsedPackage,boolean)>
<com.android.server.inputmethod.InputMethodManagerService: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
<com.android.systemui.statusbar.policy.AccessPointControllerImpl: void onConnectedChanged()>
<com.android.systemui.statusbar.policy.RotationLockControllerImpl: boolean isRotationLockAffordanceVisible()>
<com.android.systemui.statusbar.policy.UserInfoControllerImpl: void addCallback(com.android.systemui.statusbar.policy.UserInfoController.OnUserInfoChangedListener)>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper: void reset(boolean)>
<com.android.systemui.bubbles.animation.StackAnimationController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.DejankUtils: void whitelistIpcs(java.lang.Runnable)>
<com.android.server.NetworkScorerAppManager: java.util.List getAllValidScorers()>
<com.android.systemui.MultiListLayout: void setListViewAccessibilityDelegate(android.view.View.AccessibilityDelegate)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void onUpdateRowStates()>
<android.net.wifi.IWifiManager: boolean setWifiEnabled(java.lang.String,boolean)>
<com.android.systemui.doze.DozeMachine.Part: void transitionTo(com.android.systemui.doze.DozeMachine.State,com.android.systemui.doze.DozeMachine.State)>
<com.android.server.pm.Installer.InstallerException: void <init>(java.lang.String)>
<android.net.wifi.ITxPacketCountListener: void onFailure(int)>
<com.android.server.audio.PlaybackActivityMonitor: void releasePlayer(int,int)>
<com.android.server.pm.dex.DexoptOptions: boolean isDexoptAsSharedLibrary()>
<com.android.systemui.plugins.FalsingManager: void onExpansionFromPulseStopped()>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: void setNetworkSelectionStatus(int)>
<com.android.systemui.settings.CurrentUserTracker: void stopTracking()>
<com.android.settingslib.bluetooth.HidProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: boolean hasWorkProfile()>
<com.android.systemui.globalactions.ListGridLayout: android.view.ViewGroup getParentView(int,boolean,boolean)>
<com.android.server.pm.PackageManagerService.IntentFilterVerifier: void receiveVerificationResponse(int)>
<com.android.media.remotedisplay.RemoteDisplayProvider: android.content.Context getContext()>
<com.android.settingslib.drawer.DashboardCategory: void sortTiles()>
<com.android.systemui.doze.DozeMachine.Service: void finish()>
<com.android.systemui.plugins.FalsingManager: void onTrackingStopped()>
<com.android.server.pm.permission.PermissionManagerService: boolean isPermissionEnforced(java.lang.String)>
<com.android.server.integrity.serializer.RuleMetadataSerializer: void serialize(com.android.server.integrity.model.RuleMetadata,java.io.OutputStream)>
<com.android.vpndialogs.ConfirmDialog: void <init>(int)>
<com.android.keyguard.KeyguardPINView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.settingslib.notification.ConversationIconFactory.ConversationIconDrawable: int getIntrinsicWidth()>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void onStartedWakingUp()>
<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>
<com.android.systemui.accessibility.MirrorWindowControl: void move(int,int)>
<android.content.pm.PackageManagerInternal: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int,int,boolean,int)>
<com.android.server.pm.permission.PermissionsState: java.util.Set getPermissions(int)>
<android.content.pm.PackageManagerInternal.PackageListObserver: void onPackageChanged(java.lang.String,int)>
<com.android.systemui.bubbles.BubbleStackView: void setUnbubbleConversationCallback(java.util.function.Consumer)>
<android.net.wifi.rtt.ResponderConfig: boolean equals(java.lang.Object)>
<com.android.uiautomator.core.UiDevice: void unfreezeRotation()>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector packageName(java.lang.String)>
<com.android.server.media.MediaRouterService: void requestUpdateVolume(android.media.IMediaRouterClient,java.lang.String,int)>
<com.android.settingslib.notification.EnableZenModeDialog: void <init>(android.content.Context)>
<com.android.settingslib.core.AbstractPreferenceController: java.lang.CharSequence getSummary()>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_withCrossProfileAttribute_manifestReceiversGetBroadcast()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isSystemExpanded()>
<com.android.server.input.InputManagerService: android.view.InputDevice getInputDevice(int)>
<com.android.server.ServiceWatcher: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.NsdService.DaemonConnection: void start()>
<com.android.systemui.screenshot.ScreenshotNotificationsController: void showScreenshotActionsNotification(com.android.systemui.screenshot.GlobalScreenshot.SavedImageData)>
<com.android.gallery3d.glrenderer.GLCanvas: void translate(float,float,float)>
<com.android.settingslib.development.AbstractLogpersistPreferenceController: void updateLogpersistValues()>
<com.android.systemui.statusbar.notification.NotificationEntryListener: void onEntryReinflated(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<android.net.wifi.WifiManager: void unregisterSoftApCallback(android.net.wifi.WifiManager.SoftApCallback)>
<com.android.systemui.statusbar.policy.AccessibilityManagerWrapper: void addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: void onSetMobileIcon(int,com.android.systemui.statusbar.phone.StatusBarSignalPolicy.MobileIconState)>
<com.android.server.pm.Installer: void createOatDir(java.lang.String,java.lang.String)>
<com.android.keyguard.KeyguardHostView: void onResume()>
<com.android.systemui.qs.AutoAddTracker: boolean isAdded(java.lang.String)>
<android.net.wifi.WifiNetworkAgentSpecifier: void <init>(android.net.wifi.WifiConfiguration)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setTrackedHeadsUpRow(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.settingslib.bluetooth.BluetoothCallback: void onProfileConnectionStateChanged(com.android.settingslib.bluetooth.CachedBluetoothDevice,int,int)>
<com.android.settingslib.drawer.TileUtils: boolean getBooleanFromUri(android.content.Context,android.net.Uri,java.util.Map,java.lang.String)>
<com.android.server.display.DisplayDeviceConfig: float[] getBrightness()>
<com.android.systemui.classifier.Point: void <init>(float,float)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowViewController: void setStatusBarView(com.android.systemui.statusbar.phone.PhoneStatusBarView)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setNotificationPanelController(com.android.systemui.statusbar.phone.NotificationPanelViewController)>
<com.android.powermodel.component.CpuProfile.Builder: void setActiveMa(float)>
<android.net.TetheringManager: int getLastTetherError(java.lang.String)>
<com.android.systemui.statusbar.phone.PanelViewController: boolean shouldGestureWaitForTouchSlop()>
<com.android.settingslib.schedulesprovider.SchedulesProvider: java.util.ArrayList getScheduleInfoList()>
<com.android.settingslib.bluetooth.HidProfile: boolean isProfileReady()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage: void <init>(java.io.File)>
<com.android.printspooler.model.PrintSpoolerService: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId)>
<android.app.ResourcesManagerPerfTest: void tearDown()>
<android.text.TextPerfUtils: java.lang.CharSequence nextRandomParagraph(int,int)>
<com.android.systemui.statusbar.StatusBarIconView: float getDotAppearAmount()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isTopLevelChild()>
<com.android.systemui.shared.plugins.PluginManager: boolean dependsOn(com.android.systemui.plugins.Plugin,java.lang.Class)>
<com.android.systemui.statusbar.phone.SettingsButton: void startContinuousSpin()>
<javax.obex.PrivateOutputStream: void write(byte[])>
<com.android.systemui.keyguard.ScreenLifecycle.Observer: void onScreenTurningOff()>
<com.android.server.pm.PackageManagerService: void updatePackagesIfNeeded()>
<com.android.systemui.qs.customize.TileAdapter: com.android.systemui.qs.customize.TileAdapter.Holder onCreateViewHolder(android.view.ViewGroup,int)>
<com.android.systemui.statusbar.phone.NavigationBarTransitions: void reapplyDarkIntensity()>
<com.android.server.UiThread: void run()>
<com.android.server.audio.AudioService: java.util.List getAudioVolumeGroups()>
<com.android.server.storage.DeviceStorageMonitorService: void <init>(android.content.Context)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView.InteractionEventHandler: boolean dispatchKeyEvent(android.view.KeyEvent)>
<com.android.printspooler.ui.FusedPrintersProvider: void onProviderEnabled(java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void applyContentTransformation(float,float)>
<com.android.systemui.screenrecord.RecordingController: void addCallback(com.android.systemui.screenrecord.RecordingController.RecordingStateChangeCallback)>
<com.android.location.fused.FusedLocationService: void onDestroy()>
<com.android.systemui.ForegroundServicesUserState: boolean removeNotification(android.util.ArrayMap,java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.settingslib.bluetooth.MapClientProfile: boolean setEnabled(android.bluetooth.BluetoothDevice,boolean)>
<com.android.server.input.InputManagerService: void setFocusedDisplay(int)>
<com.android.systemui.statusbar.RemoteInputController.Callback: void onRemoteInputSent(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.uri.UriGrantsManagerService.Lifecycle: com.android.server.uri.UriGrantsManagerService getService()>
<com.android.server.soundtrigger.SoundTriggerInternal: int startRecognition(int,android.hardware.soundtrigger.SoundTrigger.KeyphraseSoundModel,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger.RecognitionConfig)>
<com.android.server.pm.PackageManagerServiceUtils: boolean isUnusedSinceTimeInMillis(long,long,long,com.android.server.pm.dex.PackageDexUsage.PackageUseInfo,long,long)>
<com.android.server.webkit.SystemInterface: void notifyZygote(boolean)>
<android.net.wifi.WifiConfiguration: java.lang.String getKey()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGenerateMipmapOES(int)>
<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>
<com.android.systemui.statusbar.notification.row.NotificationContentInflater: void unbindContent(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,int)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void beginDrag()>
<com.android.systemui.statusbar.policy.Clock: void onDensityOrFontScaleChanged()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setPanelAlphaEndAction(java.lang.Runnable)>
<com.android.networkstack.tethering.EntitlementManager: boolean isTetherProvisioningRequired(com.android.networkstack.tethering.TetheringConfiguration)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void getBounds(android.graphics.Rect,int,int,int,int)>
<com.android.keyguard.KeyguardUpdateMonitor: void setSwitchingUser(boolean)>
<com.android.systemui.usb.UsbPermissionActivity: void onClick(android.content.DialogInterface,int)>
<com.android.printspooler.widget.PrintContentView: android.view.ViewGroup.LayoutParams generateLayoutParams(android.util.AttributeSet)>
<com.android.systemui.DessertCaseView: void start()>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: void updateZenMode(int)>
<com.android.systemui.qs.tiles.FlashlightTile: void handleUserSwitch(int)>
<com.android.settingslib.notification.EnableZenModeDialog: java.lang.String computeAlarmWarningText(android.service.notification.Condition)>
<com.android.systemui.stackdivider.DividerView: boolean isMinimized()>
<com.android.wallpapercropper.WallpaperCropActivity.BitmapCropTask: boolean cropBitmap()>
<com.android.systemui.statusbar.notification.stack.AnimationFilter: com.android.systemui.statusbar.notification.stack.AnimationFilter hasDelays()>
<com.android.systemui.statusbar.notification.ImageTransformState: void recycle()>
<com.android.systemui.bubbles.BubbleLogger: void logOverflowAdd(com.android.systemui.bubbles.Bubble,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.net.wifi.hotspot2.pps.Credential: void setCaCertificate(java.security.cert.X509Certificate)>
<com.android.server.IntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,boolean,int)>
<android.view.autofill.LoginTest: void onCreate(android.perftests.utils.PerfTestActivity)>
<com.android.settingslib.CustomEditTextPreferenceCompat: void onBindDialogView(android.view.View)>
<com.android.gallery3d.glrenderer.GLCanvas: void setTextureParameters(com.android.gallery3d.glrenderer.BasicTexture)>
<com.android.server.pm.PackageManagerService.IntentFilterVerifier: void startVerifications(int)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.qs.QuickQSPanel: void addViewsAboveTiles()>
<com.android.systemui.shared.system.TaskStackChangeListener: void onActivityRotation(int)>
<com.android.server.NetworkManagementService: java.lang.String[] listTetheredInterfaces()>
<com.android.server.pm.InstantAppResolver: android.content.pm.InstantAppResolveInfo.InstantAppDigest parseDigest(android.content.Intent)>
<com.android.server.biometrics.iris.IrisService: int statsModality()>
<com.android.systemui.tracing.ProtoTracer: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void onDeviceAttributesChanged()>
<com.android.server.accessibility.AbstractAccessibilityServiceConnection.SystemSupport: android.view.MagnificationSpec getCompatibleMagnificationSpecLocked(int)>
<com.android.printspooler.widget.PreviewPageFrame: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<com.android.server.pm.PackageSetting: java.util.List getMimeGroup(java.lang.String)>
<com.android.systemui.qs.QSFragment: void disable(int,int,int,boolean)>
<com.android.systemui.statusbar.policy.BatteryControllerImpl: void addCallback(com.android.systemui.statusbar.policy.BatteryController.BatteryStateChangeCallback)>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.qs.tileimpl.QSTileImpl: com.android.internal.logging.InstanceId getInstanceId()>
<com.android.systemui.classifier.FalsingManagerImpl: void onBouncerShown()>
<android.processor.view.inspector.InspectableClassModel.Property: void <init>(java.lang.String,android.processor.view.inspector.InspectableClassModel.Accessor,android.processor.view.inspector.InspectableClassModel.Property.Type)>
<com.android.systemui.statusbar.policy.SecurityController: boolean isProfileOwnerOfOrganizationOwnedDevice()>
<com.android.systemui.keyguard.KeyguardSliceProvider: void setContextAvailableCallback(com.android.systemui.SystemUIAppComponentFactory.ContextAvailableCallback)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: void setUpWithPresenter(com.android.systemui.statusbar.NotificationPresenter)>
<com.android.systemui.qs.QuickStatusBarHeader: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.infra.AbstractPerUserSystemService: boolean isTemporaryServiceSetLocked()>
<com.android.egg.neko.NekoActivationActivity: void onStart()>
<com.android.systemui.car.navigationbar.SystemBarConfigs: android.view.WindowManager.LayoutParams getLayoutParamsBySide(int)>
<com.android.systemui.pip.phone.PipMotionHelper: android.graphics.Rect getAllowedFloatingBoundsRegion()>
<com.android.systemui.statusbar.phone.StatusBarRemoteInputCallback: void onMakeExpandedVisibleForRemoteInput(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,android.view.View)>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstantApps(int)>
<com.android.systemui.statusbar.notification.TransformState: void initFrom(android.view.View,com.android.systemui.statusbar.notification.TransformState.TransformInfo)>
<com.android.systemui.car.navigationbar.CarNavigationBarController: com.android.systemui.car.navigationbar.CarNavigationBarView getRightBar(boolean)>
<com.android.keyguard.CarrierTextController.Builder: void <init>(android.content.Context,android.content.res.Resources)>
<com.android.keyguard.clock.BubbleClockController: void setTextColor(int)>
<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isUse32BitAbi()>
<com.android.systemui.volume.VolumeDialogImpl: void <init>(android.content.Context)>
<com.android.server.media.MediaSessionRecord: int getUserId()>
<com.android.settingslib.users.AppRestrictionsHelper: boolean isPackageSelected(java.lang.String)>
<com.android.systemui.statusbar.phone.LockIcon: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void onCreate(android.os.Bundle)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: void extendHeadsUp()>
<com.android.localtransport.LocalTransport: java.lang.String dataManagementLabel()>
<com.android.systemui.shared.system.InputConsumerController: void <init>(android.view.IWindowManager,java.lang.String)>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void setWillExpand(boolean)>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger: void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences.OnSharedPreferenceChangeListener)>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: java.lang.String getImsi()>
<com.android.server.pm.UserTypeDetails: java.lang.String getName()>
<com.android.server.audio.AudioService: int trackRecorder(android.os.IBinder)>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: int getDevClass()>
<com.android.lock_checker.LockHook.LockChecker: java.lang.String getCheckerName()>
<com.android.systemui.doze.DozeScreenStatePreventingAdapter: void setDozeScreenState(int)>
<com.android.systemui.qs.QSFooter: void setQQSPanel(com.android.systemui.qs.QuickQSPanel)>
<com.android.systemui.qs.QuickStatusBarHeaderController.Builder: com.android.systemui.qs.QuickStatusBarHeaderController build()>
<com.android.server.pm.ShortcutNonPersistentUser: boolean hasHostPackage(java.lang.String)>
<com.android.server.usb.descriptors.UsbACAudioControlEndpoint: byte getAddress()>
<android.net.wifi.WifiScanner.BssidListener: void onLost(android.net.wifi.ScanResult[])>
<com.android.systemui.statusbar.phone.ReverseLinearLayout: void addView(android.view.View)>
<com.android.keyguard.KeyguardPasswordView: void showUsabilityHint()>
<com.android.settingslib.widget.AppEntitiesHeaderController: com.android.settingslib.widget.AppEntitiesHeaderController setAppEntity(int,com.android.settingslib.widget.AppEntityInfo)>
<com.android.server.pm.PackageManagerService: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>
<com.android.systemui.statusbar.notification.NotificationListController: void bind()>
<com.android.systemui.shared.system.ActivityManagerWrapper: com.android.systemui.shared.recents.model.ThumbnailData getTaskThumbnail(int,boolean)>
<com.android.systemui.shared.system.TaskStackChangeListener: void onRecentTaskListFrozenChanged(boolean)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void attach()>
<android.view.textclassifier.TextClassifierPerfTest: void testDetectLanguage()>
<com.android.systemui.shared.recents.IPinnedStackAnimationListener: void onPinnedStackAnimationStarted()>
<com.android.bluetoothmidiservice.MidiBtleTimeTracker: void <init>(long)>
<com.android.systemui.BatteryMeterView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.statusbar.phone.StatusBar: void readyForKeyguardDone()>
<android.net.wifi.WifiInfo: void setTrusted(boolean)>
<android.os.PackageManagerPerfTest: void testGetActivityInfoWithFiltering()>
<com.android.server.locksettings.LockSettingsService: void requireStrongAuth(int,int)>
<com.android.systemui.statusbar.policy.NetworkController: void addEmergencyListener(com.android.systemui.statusbar.policy.NetworkController.EmergencyListener)>
<com.android.printspooler.widget.EmbeddedContentContainer: void setOnSizeChangeListener(com.android.printspooler.widget.EmbeddedContentContainer.OnSizeChangeListener)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void addQsTile(android.content.ComponentName)>
<com.android.server.SensorNotificationService: void <init>(android.content.Context)>
<com.android.systemui.plugins.ActivityStarter.OnDismissAction: boolean onDismiss()>
<com.android.server.AttributeCache: com.android.server.AttributeCache.Entry get(java.lang.String,int,int[],int)>
<android.net.wifi.IWifiManager: void restoreBackupData(byte[])>
<com.android.systemui.tuner.NavBarTuner: void onDestroy()>
<com.android.bluetoothmidiservice.BluetoothMidiDevice: void <init>(android.content.Context,android.bluetooth.BluetoothDevice,com.android.bluetoothmidiservice.BluetoothMidiService)>
<com.android.server.testing.shadows.ShadowPerformUnifiedRestoreTask: com.android.server.testing.shadows.ShadowPerformUnifiedRestoreTask getLastCreated()>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: void <init>(android.content.Context,com.android.keyguard.KeyguardUpdateMonitor,com.android.internal.widget.LockPatternUtils)>
<com.android.server.pm.Policy: boolean hasInnerPackages()>
<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasAudioCapture()>
<com.android.systemui.statusbar.phone.StatusBar: void remQsTile(android.content.ComponentName)>
<com.android.systemui.usb.UsbDebuggingSecondaryUserActivity: void onClick(android.content.DialogInterface,int)>
<com.android.gallery3d.exif.ExifInterface: java.lang.Object getTagValue(int,int)>
<com.android.systemui.statusbar.notification.NotificationUtils: float getRelativeYOffset(android.view.View,android.view.View)>
<com.android.systemui.shared.system.RecentsAnimationListener: void onAnimationStart(com.android.systemui.shared.system.RecentsAnimationControllerCompat,com.android.systemui.shared.system.RemoteAnimationTargetCompat[],com.android.systemui.shared.system.RemoteAnimationTargetCompat[],android.graphics.Rect,android.graphics.Rect)>
<com.android.settingslib.applications.ApplicationsState: com.android.settingslib.applications.ApplicationsState.Session newSession(com.android.settingslib.applications.ApplicationsState.Callbacks)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>
<com.android.server.infra.AbstractMasterSystemService: void onServicePackageUpdatedLocked(int)>
<com.android.systemui.statusbar.phone.NotificationPanelView: void onRtlPropertiesChanged(int)>
<com.android.systemui.statusbar.HeadsUpStatusBarView: void <init>(android.content.Context,android.view.View,android.widget.TextView)>
<com.android.server.timezone.PackageManagerHelper: boolean receiverRegistered(android.content.Intent,java.lang.String)>
<android.media.Session2Command: boolean equals(java.lang.Object)>
<com.android.settingslib.drawer.Tile: void overrideSummary(java.lang.CharSequence)>
<com.android.server.SystemService.TargetUser: java.lang.String toString()>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isSimPinVoiceSecure()>
<com.android.systemui.statusbar.GestureRecorder: void <init>(java.lang.String)>
<com.android.server.pm.OtaDexoptService: boolean isDone()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow.LayoutListener: void onLayout()>
<com.android.settingslib.net.NetworkCycleChartData.Builder: com.android.settingslib.net.NetworkCycleChartData.Builder setUsageBuckets(java.util.List)>
<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[],int,int[])>
<android.wm.WindowAddRemovePerfTest: void onStart(int)>
<com.android.packageinstaller.PackageInstallerActivity: void onActivityResult(int,int,android.content.Intent)>
<com.android.systemui.statusbar.notification.row.RowContentBindParams: void markContentViewsFreeable(int)>
<com.android.systemui.qs.QuickTileLayout: void addView(android.view.View,int,android.view.ViewGroup.LayoutParams)>
<com.android.systemui.statusbar.notification.row.NotificationGuts: void resetFalsingCheck()>
<android.content.pm.PackageManagerInternal: void freeStorage(java.lang.String,long,int)>
<android.perftests.SystemPerfTest: void testJniArrayNoop()>
<com.android.systemui.MultiListLayout.RotationListener: void onRotate(int,int)>
<com.google.android.startop.iorap.IorapForwardingService.IorapdJobServiceProxy: boolean onStartJob(android.app.job.JobParameters)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector focusable(boolean)>
<com.android.systemui.statusbar.notification.stack.AnimationFilter: com.android.systemui.statusbar.notification.stack.AnimationFilter animateDimmed()>
<com.android.systemui.shared.plugins.PluginInitializer: void handleWtfs()>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean canAcquireSleepToken()>
<com.android.systemui.util.InjectionInflationController.ViewInstanceCreator: com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout createNotificationStackScrollLayout()>
<com.android.settingslib.core.lifecycle.events.SetPreferenceScreen: void setPreferenceScreen(androidx.preference.PreferenceScreen)>
<com.android.server.trust.TrustAgentWrapper: boolean isTrusted()>
<com.android.settingslib.drawable.UserIconDrawable: com.android.settingslib.drawable.UserIconDrawable setBadge(android.graphics.drawable.Drawable)>
<com.android.systemui.qs.QSScrollLayout: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.systemui.qs.QSHost: void warn(java.lang.String,java.lang.Throwable)>
<com.android.server.pm.ApexManager.ApexManagerImpl: java.lang.String getApexModuleNameForPackageName(java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: android.view.View.OnClickListener getBubbleClickListener()>
<com.android.server.utils.DeviceConfigInterface: void addOnPropertiesChangedListener(java.lang.String,java.util.concurrent.Executor,android.provider.DeviceConfig.OnPropertiesChangedListener)>
<com.android.server.search.Searchables: java.util.ArrayList getSearchablesInGlobalSearchList()>
<com.android.server.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.Long getCounterId(int,int)>
<com.android.systemui.qs.external.CustomTile: com.android.systemui.plugins.qs.QSTile.State newTileState()>
<android.app.ResourcesPerfTest: void getVectorDrawable()>
<com.android.server.usb.descriptors.report.ReportCanvas: void writeHeader(int,java.lang.String)>
<android.media.Session2Link: void onCancelCommand(android.media.Controller2Link,int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setLayoutListener(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow.LayoutListener)>
<com.android.server.pm.PackageManagerService: void sendPackageAddedForNewUsers(java.lang.String,boolean,boolean,int,int[],int[],int)>
<com.android.server.stats.StatsCompanionService: void <init>(android.content.Context)>
<com.android.systemui.classifier.SpeedAnglesClassifier: void <init>(com.android.systemui.classifier.ClassifierData)>
<com.android.systemui.volume.Events: void writeState(long,com.android.systemui.plugins.VolumeDialogController.State)>
<com.android.systemui.qs.tiles.RotationLockTile: boolean isCurrentOrientationLockPortrait(com.android.systemui.statusbar.policy.RotationLockController,android.content.res.Resources)>
<com.android.systemui.statusbar.EmptyShadeView: android.view.View findSecondaryView()>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: boolean isKeyguardRequested()>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector cloneSelector()>
<com.android.photos.SimpleBitmapRegionDecoder: int getWidth()>
<com.android.systemui.statusbar.notification.stack.NotificationListItem: java.util.List getAttachedChildren()>
<com.android.settingslib.applications.StorageStatsSource.AppStorageStats: long getTotalBytes()>
<com.android.server.statusbar.StatusBarManagerService: void startTracing()>
<com.android.systemui.appops.AppOpsControllerImpl: void addCallback(int[],com.android.systemui.appops.AppOpsController.Callback)>
<com.android.systemui.bubbles.BubbleExpandedView: int getVirtualDisplayId()>
<android.net.wifi.WifiFrameworkInitializer: void registerServiceWrappers()>
<android.app.StatsManager: long[] getRegisteredExperimentIds()>
<com.android.server.AnyMotionDetector: void <init>(android.os.PowerManager,android.os.Handler,android.hardware.SensorManager,com.android.server.AnyMotionDetector.DeviceIdleCallback,float)>
<com.android.server.biometrics.fingerprint.FingerprintUtils: void addBiometricForUser(android.content.Context,int,android.hardware.biometrics.BiometricAuthenticator.Identifier)>
<lockedregioncodeinjection.Main: void main(java.lang.String[])>
<com.android.server.appbinding.finders.AppServiceFinder: java.lang.Class getServiceClass()>
<com.android.systemui.pip.PipBoundsHandler: android.graphics.Rect getDisplayBounds()>
<android.graphics.perftests.PaintMeasureTextTest: void testMeasureTextPerf()>
<com.android.systemui.qs.tiles.UserDetailItemView: void setDisabledByAdmin(boolean)>
<com.android.systemui.statusbar.notification.row.NotificationGuts.GutsContent: boolean handleCloseControls(boolean,boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isContentExpandable()>
<com.android.systemui.statusbar.phone.StatusBar: boolean isDeviceInVrMode()>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone.HeadsUpEntryPhone: void updateEntry(boolean)>
<com.android.settingslib.bluetooth.BluetoothCallback: void onDeviceDeleted(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: void updateEventSourceLocked(android.view.accessibility.AccessibilityEvent)>
<android.processor.view.inspector.InspectableClassModel.Accessor: java.lang.String getName()>
<com.android.server.pm.dex.DexManager: void notifyPackageDataDestroyed(java.lang.String,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean isScrolledToTop()>
<com.android.settingslib.bluetooth.HidDeviceProfile: int getNameResource(android.bluetooth.BluetoothDevice)>
<com.android.systemui.statusbar.policy.ExtensionControllerImpl: com.android.systemui.statusbar.policy.ExtensionControllerImpl.ExtensionBuilder newExtension(java.lang.Class)>
<com.android.server.usb.UsbHostManager: void systemReady()>
<com.android.systemui.pip.PipUI: void hidePipMenu(java.lang.Runnable,java.lang.Runnable)>
<com.android.externalstorage.TestDocumentsProvider: android.database.Cursor queryRoots(java.lang.String[])>
<com.android.server.print.PrintManagerService: void onStart()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: boolean dispatchTouchEvent(android.view.MotionEvent)>
<com.android.systemui.statusbar.phone.DozeParameters: com.android.systemui.doze.AlwaysOnDisplayPolicy getPolicy()>
<com.android.uiautomator.core.UiDevice: boolean takeScreenshot(java.io.File)>
<com.android.systemui.statusbar.policy.DataSaverController.Listener: void onDataSaverChanged(boolean)>
<com.android.server.locksettings.recoverablekeystore.KeySyncUtils: java.security.PublicKey deserializePublicKey(byte[])>
<com.android.systemui.statusbar.policy.RotationLockControllerImpl: int getRotationLockOrientation()>
<com.android.server.people.data.DataManager: void restore(int,byte[])>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setSensitive(boolean,boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean areChildrenExpanded()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isLowPriority()>
<com.android.systemui.statusbar.phone.AutoTileManager: void stopListening()>
<com.android.systemui.statusbar.policy.RotationLockController: boolean isRotationLocked()>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: void onUnstuckFromTarget()>
<com.android.systemui.pip.phone.PipTouchState: boolean isDragging()>
<com.android.systemui.shared.recents.model.Task: void notifyTaskDataLoaded(com.android.systemui.shared.recents.model.ThumbnailData,android.graphics.drawable.Drawable)>
<com.android.server.search.Searchables: android.content.ComponentName getWebSearchActivity()>
<com.android.server.timezonedetector.TimeZoneDetectorStrategy: void suggestManualTimeZone(android.app.timezonedetector.ManualTimeZoneSuggestion)>
<com.android.server.pm.PackageManagerService: boolean hasUidSigningCertificate(int,byte[],int)>
<com.android.systemui.qs.QuickQSPanel: int getDefaultMaxTiles()>
<com.android.settingslib.media.LocalMediaManager: void registerCallback(com.android.settingslib.media.LocalMediaManager.DeviceCallback)>
<com.android.settingslib.accounts.AuthenticatorHelper: void stopListeningToAccountUpdates()>
<com.android.server.adb.AdbService.Lifecycle: void onBootPhase(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)>
<com.android.server.pm.UserManagerService: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>
<com.android.systemui.shared.system.TransactionCompat: com.android.systemui.shared.system.TransactionCompat setColor(com.android.systemui.shared.system.SurfaceControlCompat,float[])>
<android.net.wifi.aware.IWifiAwareDiscoverySessionCallback: void onSessionTerminated(int)>
<com.android.server.pm.Installer: boolean createProfileSnapshot(int,java.lang.String,java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone.HeadsUpEntryPhone: void reset()>
<com.android.server.stats.pull.IonMemoryUtil: java.util.List readProcessSystemIonHeapSizesFromDebugfs()>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: int calculateBgColor()>
<com.android.server.audio.AudioService: int[] getSupportedSystemUsages()>
<com.android.commands.vr.Vr: void onShowUsage(java.io.PrintStream)>
<com.android.uiautomator.core.Configurator: com.android.uiautomator.core.Configurator setActionAcknowledgmentTimeout(long)>
<com.android.systemui.wm.SystemWindows: void updateViewLayout(android.view.View,android.view.ViewGroup.LayoutParams)>
<android.net.wifi.aware.WifiAwareNetworkSpecifier: void <init>(int,int,int,int,int,byte[],byte[],java.lang.String,int,int)>
<com.android.statementservice.retriever.Relation: java.lang.String getKind()>
<com.android.server.usb.descriptors.Usb20ACHeader: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<android.media.MediaParser.OutputConsumer: void onTrackCountFound(int)>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setIsEnhancedOpen(boolean)>
<com.android.gallery3d.common.BitmapUtils: android.graphics.Bitmap resizeAndCropCenter(android.graphics.Bitmap,int,boolean)>
<com.android.systemui.car.window.OverlayViewMediator: void setupOverlayContentViewControllers()>
<com.android.systemui.bubbles.animation.StackAnimationController: android.graphics.PointF getStackPosition()>
<com.android.systemui.doze.DozeMachine.Service: void setDozeScreenState(int)>
<com.android.systemui.pip.phone.PipTouchState: android.graphics.PointF getLastTouchDelta()>
<com.android.settingslib.CustomEditTextPreferenceCompat: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.collection.ShadeListBuilder: void attach(com.android.systemui.statusbar.notification.collection.NotifCollection)>
<com.android.server.audio.AudioSystemAdapter: int setCurrentImeUid(int)>
<com.android.server.stats.StatsCompanion.PendingIntentRef: void sendDataBroadcast(long)>
<com.android.systemui.statusbar.phone.PanelViewController: java.lang.String getName()>
<com.android.server.voiceinteraction.VoiceInteractionManagerService: boolean isUserSupported(com.android.server.SystemService.TargetUser)>
<com.android.systemui.classifier.FalsingManagerImpl: void onExpansionFromPulseStopped()>
<com.android.systemui.classifier.FalsingManagerImpl: void onNotificatonStartDraggingDown()>
<com.android.settingslib.widget.BarChartInfo: com.android.settingslib.widget.BarViewInfo[] getBarViewInfos()>
<com.android.systemui.keyguard.DismissCallbackWrapper: void notifyDismissSucceeded()>
<com.android.systemui.statusbar.phone.UserAvatarView: void setBadgeMargin(float)>
<com.android.server.integrity.parser.RuleIndexRange: int getEndIndex()>
<com.android.server.timedetector.TimeDetectorStrategyImpl: void initialize(com.android.server.timedetector.TimeDetectorStrategy.Callback)>
<com.android.systemui.qs.customize.TileAdapter.Holder: void startDrag()>
<android.os.IStatsManagerService: void unsetBroadcastSubscriber(long,long,java.lang.String)>
<com.android.server.timezone.RulesManagerIntentHelper: void sendTimeZoneOperationUnstaged()>
<com.android.systemui.statusbar.phone.ManagedProfileControllerImpl: boolean hasActiveProfile()>
<com.android.systemui.statusbar.notification.collection.listbuilder.OnBeforeFinalizeFilterListener: void onBeforeFinalizeFilter(java.util.List)>
<com.android.server.infra.AbstractPerUserSystemService: int getServiceUidLocked()>
<com.android.server.tv.tunerresourcemanager.FrontendResource: int getExclusiveGroupId()>
<com.android.systemui.media.dialog.MediaOutputController: void onSelectedDeviceStateChanged(com.android.settingslib.media.MediaDevice,int)>
<com.android.server.lights.LogicalLight: void setColor(int)>
<com.android.powermodel.AttributionKey: java.lang.String toString()>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: android.view.inputmethod.InputMethodManager getInputMethodManager()>
<com.android.server.pm.PackageManagerService: void notifyPackageUse(java.lang.String,int)>
<com.android.settingslib.wifi.AccessPoint: java.lang.String getSettingsSummary()>
<com.android.systemui.statusbar.phone.BiometricUnlockController: void setKeyguardViewController(com.android.keyguard.KeyguardViewController)>
<com.android.systemui.car.navigationbar.CarNavigationBar: void <init>(android.content.Context,android.content.res.Resources,com.android.systemui.car.navigationbar.CarNavigationBarController,com.android.systemui.statusbar.phone.LightBarController,com.android.systemui.plugins.DarkIconDispatcher,android.view.WindowManager,com.android.systemui.car.CarDeviceProvisionedController,com.android.systemui.statusbar.CommandQueue,com.android.systemui.statusbar.phone.AutoHideController,com.android.systemui.car.navigationbar.ButtonSelectionStateListener,android.os.Handler,java.util.concurrent.Executor,com.android.internal.statusbar.IStatusBarService,dagger.Lazy,dagger.Lazy,dagger.Lazy,com.android.systemui.car.navigationbar.SystemBarConfigs)>
<com.android.settingslib.media.MediaManager.MediaDeviceCallback: void onRequestFailed(int)>
<com.android.aapt.namespace.split.SplitActivity: void onCreate(android.os.Bundle)>
<com.android.server.input.InputManagerService.WiredAccessoryCallbacks: void notifyWiredAccessoryChanged(long,int,int)>
<android.net.wifi.WifiNetworkSuggestion: boolean isInitialAutojoinEnabled()>
<android.net.wifi.hotspot2.omadm.XMLParser: android.net.wifi.hotspot2.omadm.XMLNode parse(java.lang.String)>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean isAnimatingLw()>
<com.android.systemui.statusbar.policy.RemoteInputView.RemoteEditText: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>
<com.android.server.pm.KeySetManagerService: void addScannedPackageLPw(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.systemui.statusbar.phone.SysuiDarkIconDispatcher: com.android.systemui.statusbar.phone.LightBarTransitionsController getTransitionsController()>
<com.android.server.audio.MediaFocusControl: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
<com.android.keyguard.clock.ClockManager: void <init>(android.content.Context,com.android.systemui.util.InjectionInflationController,com.android.systemui.shared.plugins.PluginManager,com.android.systemui.colorextraction.SysuiColorExtractor,com.android.systemui.dock.DockManager,com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.systemui.wifi.WifiDebuggingActivity: void onDestroy()>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: boolean onRequestSendAccessibilityEventInternal(android.view.View,android.view.accessibility.AccessibilityEvent)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: int getMaxConnectionState(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.server.tv.tunerresourcemanager.TunerResourceBasic: void setOwner(int)>
<com.android.systemui.plugins.FalsingManager: void onNotificationActive()>
<com.android.systemui.statusbar.KeyguardAffordanceView: void setImageDrawable(android.graphics.drawable.Drawable,boolean)>
<com.android.systemui.statusbar.AlphaOptimizedFrameLayout: void <init>(android.content.Context)>
<com.android.server.TelephonyRegistry: void notifyPreciseDataConnectionFailed(int,int,int,java.lang.String,int)>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void setOpenedAmount(float)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void dispatchDraw(android.graphics.Canvas)>
<android.os.IPullAtomResultReceiver: void pullFinished(int,boolean,android.util.StatsEventParcel[])>
<com.android.server.slice.SlicePermissionManager.PkgUser: java.lang.String getPkg()>
<com.android.systemui.statusbar.NotificationLifetimeExtender: void setCallback(com.android.systemui.statusbar.NotificationLifetimeExtender.NotificationSafeToRemoveCallback)>
<com.android.server.pm.PackageManagerService: void restoreLabelAndIcon(android.content.ComponentName,int)>
<com.android.keyguard.KeyguardViewController: void dismissAndCollapse()>
<com.android.systemui.statusbar.phone.KeyguardIndicationTextView: void switchIndication(java.lang.CharSequence)>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: void writePrintJobData(android.os.ParcelFileDescriptor,android.print.PrintJobId)>
<com.android.server.DynamicSystemService: boolean isEnabled()>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: boolean isPresenterFullyCollapsed()>
<android.net.wifi.p2p.WifiP2pWfdInfo: java.lang.String getDeviceInfoHex()>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.util.Map getTxtRecord()>
<com.android.vpndialogs.AlwaysOnDisconnectedDialog: void onClick(android.content.DialogInterface,int)>
<com.android.networkstack.tethering.OffloadHardwareInterface: void stopOffloadControl()>
<com.android.server.accessibility.AccessibilityManagerService.AccessibilityDisplayListener: void onDisplayAdded(int)>
<android.graphics.perftests.RenderNodePerfTest: void testIsValid()>
<com.android.settingslib.utils.AsyncLoader: void onStartLoading()>
<com.android.systemui.statusbar.phone.StatusBar: com.android.systemui.statusbar.phone.StatusBarWindowView getStatusBarWindow()>
<com.android.server.accessibility.EventStreamTransformation: void setNext(com.android.server.accessibility.EventStreamTransformation)>
<com.android.systemui.car.navigationbar.CarNavigationBar: void showTransient(int,int[])>
<android.net.wifi.aware.PeerHandle: boolean equals(java.lang.Object)>
<android.net.wifi.aware.DiscoverySessionCallback: void onServiceDiscoveredWithinRange(android.net.wifi.aware.PeerHandle,byte[],java.util.List,int)>
<com.android.systemui.car.volume.CarVolumeItem: void setGroupId(int)>
<com.android.systemui.bubbles.BubbleData: void setSelectedBubble(com.android.systemui.bubbles.Bubble)>
<com.android.systemui.statusbar.phone.ScrimController: void transitionTo(com.android.systemui.statusbar.phone.ScrimState,com.android.systemui.statusbar.phone.ScrimController.Callback)>
<com.android.systemui.dock.DockManager: void removeAlignmentStateListener(com.android.systemui.dock.DockManager.AlignmentStateListener)>
<com.android.systemui.classifier.FalsingManagerFake: void onBouncerHidden()>
<com.android.server.pm.UserTypeDetails: int getBadgeColor(int)>
<com.android.systemui.statusbar.KeyguardIndicationController.BaseKeyguardCallback: void onBiometricError(int,java.lang.String,android.hardware.biometrics.BiometricSourceType)>
<com.android.server.display.WifiDisplayController.Listener: void onDisplayDisconnected()>
<com.android.server.biometrics.LoggableMonitor: boolean isCryptoOperation()>
<com.android.settingslib.RestrictedPreferenceHelper: void useAdminDisabledSummary(boolean)>
<com.android.systemui.statusbar.phone.BiometricUnlockController: void startKeyguardFadingAway()>
<com.android.systemui.media.dialog.MediaOutputAdapter: int getItemCount()>
<com.android.keyguard.KeyguardStatusView: int getClockPreferredY(int)>
<com.android.networkstack.tethering.TetheringDependencies: android.os.Looper getTetheringLooper()>
<com.android.keyguard.KeyguardSimPukView: void verifyPasswordAndUnlock()>
<com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage: void deleteEntry(int,int,java.lang.String)>
<com.android.systemui.dock.DockManager: void removeListener(com.android.systemui.dock.DockManager.DockEventListener)>
<com.android.server.pm.CrossProfileAppsServiceImpl: void <init>(android.content.Context)>
<com.android.server.biometrics.fingerprint.FingerprintService: boolean checkAppOps(int,java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getAlwaysOnVpnLockdownWhitelist(android.content.ComponentName)>
<com.android.server.biometrics.BiometricStrengthController: void startListening()>
<com.android.server.AttributeCache: void removePackage(java.lang.String)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean needsSlowUnlockTransition()>
<com.android.server.pm.UserTypeDetails: boolean isSystem()>
<com.android.server.pm.KeySetManagerService: void assertScannedPackageValid(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.server.pm.ApexManager.ApexManagerImpl: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>
<com.android.settingslib.dream.DreamBackend: android.graphics.drawable.Drawable getActiveIcon()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setLastAudiblyAlertedMs(long)>
<com.android.systemui.statusbar.notification.NotificationEntryManager: com.android.systemui.statusbar.notification.collection.NotificationEntry getActiveNotificationUnfiltered(java.lang.String)>
<android.net.TetheringManager.TetheringRequest: boolean isExemptFromEntitlementCheck()>
<com.android.server.usb.descriptors.report.ReportCanvas: void dumpHexArray(byte[],java.lang.StringBuilder)>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void onDozingChanged(boolean)>
<com.android.systemui.classifier.EndPointLengthClassifier: void <init>(com.android.systemui.classifier.ClassifierData)>
<android.net.wifi.hotspot2.PasspointConfiguration: void setTrustRootCertList(java.util.Map)>
<com.android.settingslib.bluetooth.BluetoothEventManager: void registerCallback(com.android.settingslib.bluetooth.BluetoothCallback)>
<android.net.wifi.aware.DiscoverySessionCallback: void onPublishStarted(android.net.wifi.aware.PublishDiscoverySession)>
<com.android.server.autofill.ui.AutoFillUI: boolean isSaveUiShowing()>
<com.android.keyguard.KeyguardAbsKeyInputView: void resetPasswordText(boolean,boolean)>
<com.android.systemui.qs.customize.TileAdapter: androidx.recyclerview.widget.ItemTouchHelper getItemTouchHelper()>
<com.android.systemui.shared.system.AssistDataReceiver: void onHandleAssistData(android.os.Bundle)>
<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasMic()>
<com.android.systemui.volume.VolumeDialogImpl: void dismiss(int)>
<android.wm.RecentsAnimationPerfTest: void setUpClass()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: android.view.ViewGroup getViewParentForNotification(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.usb.descriptors.ByteStream: int unpackUsbShort()>
<com.android.uiautomator.testrunner.UiAutomatorTestRunner: void start()>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>
<android.net.wifi.WifiManager: boolean saveConfiguration()>
<com.android.server.usb.UsbAlsaDevice: boolean isOutputHeadset()>
<com.android.systemui.bubbles.BubbleOverflowAdapter: void <init>(android.content.Context,java.util.List,java.util.function.Consumer,int,int)>
<com.android.systemui.statusbar.phone.StatusBarRemoteInputCallback: boolean handleRemoteViewClick(android.view.View,android.app.PendingIntent,com.android.systemui.statusbar.NotificationRemoteInputManager.ClickHandler)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void onPulseExpansionChanged(boolean)>
<com.android.server.slice.SliceFullAccessList: void readXml(org.xmlpull.v1.XmlPullParser)>
<com.android.systemui.qs.tiles.UserTile: java.lang.CharSequence getTileLabel()>
<android.media.MediaParser.InputReader: int read(byte[],int,int)>
<com.android.systemui.tuner.TunerActivity: boolean onPreferenceStartScreen(androidx.preference.PreferenceFragment,androidx.preference.PreferenceScreen)>
<com.android.systemui.wm.DisplayLayout: int navBarFrameHeight()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: android.view.View getShelfTransformationTarget()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setFooterView(com.android.systemui.statusbar.notification.row.FooterView)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView.InteractionEventHandler: java.lang.Boolean handleDispatchTouchEvent(android.view.MotionEvent)>
<com.android.systemui.wm.DisplayController.OnDisplaysChangedListener: void onFixedRotationStarted(int,int)>
<com.android.settingslib.CustomDialogPreference: void onPrepareDialogBuilder(android.app.AlertDialog.Builder,android.content.DialogInterface.OnClickListener)>
<com.android.server.locksettings.ManagedProfilePasswordCache: void <init>(java.security.KeyStore,android.os.UserManager)>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageCache: android.graphics.drawable.Drawable get(android.net.Uri)>
<com.android.systemui.statusbar.notification.row.NotificationGuts: boolean isLeavebehind()>
<com.android.server.policy.PhoneWindowManager: boolean performHapticFeedback(int,java.lang.String,int,boolean,java.lang.String)>
<android.net.wifi.hotspot2.ProvisioningCallback: void onProvisioningStatus(int)>
<android.net.wifi.aware.Characteristics: void <init>(android.os.Bundle)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: float getCurrentBackgroundRadiusTop()>
<com.android.settingslib.bluetooth.MapClientProfile: boolean isAutoConnectable()>
<android.provider.settings.validators.AccessibilityShortcutTargetListValidator: boolean isItemValid(java.lang.String)>
<com.android.systemui.assist.ui.EdgeLight: void <init>(int,float,float)>
<com.android.server.appop.AppOpsService: java.util.List getOpsForPackage(int,java.lang.String,int[])>
<com.android.settingslib.widget.BarView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.stats.StatsCompanion.Lifecycle: void onStart()>
<com.android.settingslib.drawer.Tile: java.lang.String getComponentName()>
<android.net.wifi.IWifiManager: void startWatchLocalOnlyHotspot(android.net.wifi.ILocalOnlyHotspotCallback)>
<com.android.settingslib.wifi.WifiEntryPreference: void onForgetResult(int)>
<com.android.keyguard.KeyguardMessageArea: void <init>(android.content.Context,android.util.AttributeSet,com.android.systemui.statusbar.policy.ConfigurationController)>
<com.android.server.lights.LogicalLight: void pulse()>
<com.android.settingslib.bluetooth.PbapClientProfile: int getProfileId()>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: byte[] getCertSha256Fingerprint()>
<com.android.printservice.recommendation.util.NsdResolveQueue: void resolve(android.net.nsd.NsdManager,android.net.nsd.NsdServiceInfo,android.net.nsd.NsdManager.ResolveListener)>
<com.android.systemui.statusbar.StatusBarMobileView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.usb.MtpNotificationManager.OnOpenInAppListener: void onOpenInApp(android.hardware.usb.UsbDevice)>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: boolean isShowing()>
<com.android.systemui.statusbar.notification.stack.AmbientState: int getBaseZHeight()>
<android.content.pm.PackageManagerInternal: void updateRuntimePermissionsFingerprint(int)>
<com.android.systemui.qs.tiles.WifiTile: boolean shouldAnnouncementBeDelayed()>
<com.android.systemui.car.CarDeviceProvisionedControllerImpl: void <init>(android.content.Context,android.os.Handler,com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.server.biometrics.ClientMonitor: int stop(boolean)>
<com.android.server.inputmethod.LocaleUtils.LocaleExtractor: java.util.Locale get(java.lang.Object)>
<com.android.settingslib.NetworkPolicyEditor: void write(android.net.NetworkPolicy[])>
<com.android.server.ConnectivityService.Dependencies: com.android.internal.app.IBatteryStats getBatteryStatsService()>
<com.android.server.usb.UsbService: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>
<javax.obex.PrivateInputStream: int read(byte[],int,int)>
<android.net.wifi.WifiManager: android.util.SparseArray parseDppChannelList(java.lang.String)>
<com.android.server.accessibility.AccessibilityManagerService: void performAccessibilityShortcut(java.lang.String)>
<com.android.settingslib.bluetooth.PbapClientProfile: boolean isAutoConnectable()>
<com.android.systemui.qs.QSSecurityFooter: java.lang.CharSequence getManagementMessage(boolean,java.lang.CharSequence,boolean,java.lang.CharSequence)>
<com.android.server.AnyMotionDetector.Vector3: java.lang.String toString()>
<com.android.server.ExtconUEventObserver: boolean extconExists()>
<com.android.systemui.wifi.WifiDebuggingActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.statusbar.phone.StatusBarRemoteInputCallback: void onStateChanged(int)>
<com.android.wallpaperbackup.WallpaperBackupAgent: void onCreate()>
<com.android.settingslib.media.MediaDevice: java.lang.String getId()>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void onSystemBarAppearanceChanged(int,int,com.android.internal.view.AppearanceRegion[],boolean)>
<com.android.systemui.statusbar.KeyboardShortcutKeysLayout: boolean checkLayoutParams(android.view.ViewGroup.LayoutParams)>
<com.android.systemui.statusbar.phone.NavigationBarInflaterView: java.lang.String extractSize(java.lang.String)>
<com.android.location.fused.FusedLocationProvider: void <init>(android.content.Context)>
<com.android.printspooler.widget.PrintOptionsLayout: android.view.ViewGroup.LayoutParams generateLayoutParams(android.util.AttributeSet)>
<com.android.systemui.statusbar.policy.BatteryControllerImpl: void getEstimatedTimeRemainingString(com.android.systemui.statusbar.policy.BatteryController.EstimateFetchCompletion)>
<com.android.systemui.qs.PagedTileLayout: void setCurrentItem(int,boolean)>
<com.android.systemui.appops.AppOpsControllerImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.accessibility.ActionReplacingCallback: void setFindAccessibilityNodeInfoResult(android.view.accessibility.AccessibilityNodeInfo,int)>
<com.android.systemui.shared.system.SurfaceViewRequestUtils: android.os.Bundle createSurfaceBundle(android.view.SurfaceView)>
<com.android.server.pm.permission.PermissionManagerService: void revokeRuntimePermission(java.lang.String,java.lang.String,int,java.lang.String)>
<com.android.server.usb.descriptors.Usb20ASGeneral: byte getNumChannels()>
<com.android.server.audio.AudioService: void playerEvent(int,int)>
<com.android.systemui.statusbar.phone.NotificationGroupManager: java.lang.String getGroupKey(android.service.notification.StatusBarNotification)>
<android.net.wifi.aware.TlvBufferUtils.TlvElement: byte[] getRawData()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationBigPictureTemplateViewWrapper: void onContentUpdated(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.shared.system.RecentsAnimationControllerCompat: void <init>(android.view.IRecentsAnimationController)>
<com.android.server.Watchdog.HandlerChecker: java.lang.Thread getThread()>
<com.android.systemui.statusbar.phone.NotificationsQuickSettingsContainer: void setCustomizerAnimating(boolean)>
<com.android.server.hdmi.HdmiCecController.NativeWrapper: int nativeGetVendorId()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isUserExpanded()>
<com.android.systemui.statusbar.BackDropView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserProvisioningState(int,int)>
<android.net.wifi.p2p.WifiP2pManager: void discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<android.text.PrecomputedTextPerfTest: void testCreate_Styled_Hyphenation_WidthOnly()>
<com.android.server.display.BrightnessTracker: void start(float)>
<com.android.gallery3d.common.Utils: void waitWithoutInterrupt(java.lang.Object)>
<com.android.server.display.color.ColorDisplayService.ColorDisplayServiceInternal: boolean resetDisplayWhiteBalanceColorTemperature()>
<com.android.server.IpSecService.IpSecServiceConfiguration: android.net.INetd getNetdInstance()>
<com.android.systemui.bubbles.animation.StackAnimationController: void setStackPosition(com.android.systemui.bubbles.BubbleStackView.RelativeStackPosition)>
<com.android.server.ExtconStateObserver: void updateState(com.android.server.ExtconUEventObserver.ExtconInfo,java.lang.String,java.lang.Object)>
<com.android.systemui.wm.SystemWindows: void removeView(android.view.View)>
<com.android.server.usb.descriptors.UsbACMixerUnit: byte getNumOutputs()>
<android.view.ViewShowHidePerfTest.TestCallback: void run(android.perftests.utils.BenchmarkState,int,int,android.view.ViewGroup,android.view.View)>
<com.android.statsd.shelltools.Utils: java.lang.String chooseDevice(java.lang.String,java.util.List,java.lang.String,java.util.logging.Logger)>
<com.android.media.remotedisplay.RemoteDisplay: int getPresentationDisplayId()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setOverExpansion(float,boolean)>
<android.perftests.utils.TraceMarkParser: java.lang.String toString()>
<com.android.settingslib.media.MediaDevice: boolean connect()>
<com.android.systemui.plugins.PluginDependencyProvider: void <init>(com.android.systemui.shared.plugins.PluginManager)>
<com.android.systemui.statusbar.phone.StatusBar: com.android.systemui.statusbar.notification.row.NotificationGutsManager getGutsManager()>
<com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper: void dismiss(android.view.View,float)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: android.view.View inflateIconArea(android.view.LayoutInflater)>
<com.android.server.inputmethod.InputMethodManagerService: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int)>
<com.android.systemui.tuner.TunerService: boolean parseIntegerSwitch(java.lang.String,boolean)>
<com.android.systemui.bubbles.BubbleFlyoutView: void onDraw(android.graphics.Canvas)>
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsForPackage(java.lang.String,int,java.lang.String)>
<com.android.server.policy.RestartAction: void onPress()>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setLayoutMaxHeight(int)>
<com.android.systemui.egg.MLand: void addPlayer()>
<com.android.systemui.stackdivider.ForcedResizableInfoActivity: void onCreate(android.os.Bundle)>
<com.android.server.PersistentDataBlockManagerInternal: byte[] getFrpCredentialHandle()>
<com.android.server.utils.AppInstallerUtil: java.lang.String getInstallerPackageName(android.content.Context,java.lang.String)>
<com.android.powermodel.AttributionKey: void <init>(int,java.util.Set)>
<com.android.server.om.DumpState: java.lang.String getPackageName()>
<com.android.server.biometrics.BiometricServiceBase: void cancelAuthenticationInternal(android.os.IBinder,java.lang.String,int,int,int,boolean)>
<com.android.systemui.statusbar.notification.collection.inflation.NotificationRowBinderImpl: void <init>(android.content.Context,com.android.internal.util.NotificationMessagingUtil,com.android.systemui.statusbar.NotificationRemoteInputManager,com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.statusbar.notification.row.NotifBindPipeline,com.android.systemui.statusbar.notification.row.RowContentBindStage,com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProvider,javax.inject.Provider,com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder,com.android.systemui.statusbar.notification.icon.IconManager,com.android.systemui.statusbar.notification.collection.inflation.LowPriorityInflationHelper)>
<com.android.systemui.statusbar.notification.stack.ViewState: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.net.wifi.WifiInfo: android.net.NetworkInfo.DetailedState getDetailedStateOf(android.net.wifi.SupplicantState)>
<com.android.systemui.pip.phone.PipMenuActivityController: void hideMenu()>
<com.android.systemui.PluginInflateContainer: void onAttachedToWindow()>
<android.net.wifi.aware.WifiAwareNetworkSpecifier: java.lang.String toString()>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setIsInitialAutojoinEnabled(boolean)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setVersionCodeMajor(int)>
<com.android.settingslib.AppItem: void addUid(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPersonalAppsSuspendedReasons(android.content.ComponentName)>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindSideLoadedAppController(com.android.systemui.car.sideloaded.SideLoadedAppController)>
<com.android.server.gpu.GpuService: void onStart()>
<com.android.systemui.pip.phone.PipMenuActivityController: void showMenu(int,android.graphics.Rect,boolean,boolean,boolean)>
<com.android.settingslib.media.MediaManager: void dispatchDeviceListAdded()>
<android.net.wifi.IWifiManager: void allowAutojoinGlobal(boolean)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void showAppOpsIcons(android.util.ArraySet)>
<com.android.systemui.assist.AssistOrbView: void animateCircleSize(float,long,long,android.view.animation.Interpolator)>
<com.android.systemui.statusbar.phone.NotificationListenerWithPlugins: android.service.notification.NotificationListenerService.RankingMap onPluginRankingUpdate(android.service.notification.NotificationListenerService.RankingMap)>
<com.android.server.pm.PreferredIntentResolver: com.android.server.pm.PreferredActivity[] newArray(int)>
<com.android.systemui.media.MediaControlPanel: android.media.session.MediaController getController()>
<com.android.server.camera.CameraServiceProxy: void onStart()>
<com.android.systemui.statusbar.policy.ZenModeController.Callback: void onZenAvailableChanged(boolean)>
<com.android.packageinstaller.television.ErrorFragment: void onCreateActions(java.util.List,android.os.Bundle)>
<com.android.systemui.statusbar.phone.BarTransitions.BarBackgroundDrawable: void draw(android.graphics.Canvas)>
<com.android.systemui.statusbar.policy.EthernetSignalController: void notifyListeners(com.android.systemui.statusbar.policy.NetworkController.SignalCallback)>
<com.android.settingslib.drawer.ProviderIcon: android.os.Bundle getProviderIcon()>
<com.android.server.pm.PackageManagerService.Injector: com.android.server.pm.UserManagerService getUserManagerService()>
<com.android.server.pm.dex.DexManager.RegisterDexModuleResult: void <init>(boolean,java.lang.String)>
<com.android.keyguard.KeyguardSliceView: void onDensityOrFontScaleChanged()>
<com.android.systemui.pip.BasePipManager: void setShelfHeight(boolean,int)>
<com.android.systemui.statusbar.notification.stack.AnimationProperties: void combineCustomInterpolators(com.android.systemui.statusbar.notification.stack.AnimationProperties)>
<com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.IntegrityFileManager getInstance()>
<com.android.systemui.keyguard.WorkLockActivity: void <init>(com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.server.input.InputManagerService.WindowManagerCallbacks: void notifyConfigurationChanged()>
<com.android.server.usb.UsbAlsaDevice: java.lang.String getDeviceAddress()>
<com.android.server.locksettings.SyntheticPasswordManager: void clearSidForUser(int)>
<com.android.systemui.plugin.testoverlayplugin.SampleOverlayPlugin: void setCollapseDesired(boolean)>
<com.android.systemui.statusbar.KeyguardAffordanceView: void setImageScale(float,boolean,long,android.view.animation.Interpolator)>
<com.android.systemui.qs.tiles.WifiTile.WifiDetailAdapter: java.lang.Boolean getToggleState()>
<com.android.settingslib.applications.ApplicationsState.Session: void onDestroy()>
<com.android.server.accessibility.gestures.GestureUtils: double distanceClosestPointerToPoint(android.graphics.PointF,android.view.MotionEvent)>
<com.android.systemui.biometrics.AuthDialog: void onHelp(java.lang.String)>
<com.android.server.display.DisplayModeDirector.BrightnessObserver: void observe(android.hardware.SensorManager)>
<com.android.settingslib.CustomEditTextPreference: void onBindDialogView(android.view.View)>
<com.android.systemui.statusbar.RemoteInputController: void addSpinning(java.lang.String,java.lang.Object)>
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setTtlSec(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setUnlockHintRunning(boolean)>
<com.android.settingslib.drawer.Tile: boolean hasSwitch()>
<com.android.systemui.settings.ToggleSliderView: boolean isChecked()>
<com.android.server.timezone.PackageTrackerIntentHelper: void unscheduleReliabilityTrigger()>
<com.android.systemui.doze.DozeMachine: boolean isExecutingTransition()>
<com.android.systemui.classifier.FalsingManagerProxy: void onScreenOff()>
<com.android.systemui.SystemUI: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.usb.descriptors.UsbVCSelectorUnit: void <init>(int,byte,byte)>
<com.android.settingslib.widget.apppreference.AppPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.KeyguardIndicationController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.notification.stack.StackStateAnimator: void setShadeExpanded(boolean)>
<com.android.systemui.tuner.ClipboardView: void onAttachedToWindow()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setPanelAlpha(int,boolean)>
<com.android.systemui.statusbar.phone.MultiUserSwitch: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.vr.VrManagerService: void onStopUser(int)>
<com.android.settingslib.dream.DreamBackend: com.android.settingslib.dream.DreamBackend getInstance(android.content.Context)>
<com.android.server.storage.CacheQuotaStrategy: void recalculateQuotas()>
<com.android.systemui.assist.DeviceConfigHelper: long getLong(java.lang.String,long)>
<com.android.systemui.assist.AssistManager: void onGestureCompletion(float)>
<com.android.server.usb.descriptors.UsbInterfaceDescriptor: int getInterfaceNumber()>
<com.android.settingslib.RestrictedLockUtils: boolean isCurrentUserOrProfile(android.content.Context,int)>
<com.android.systemui.qs.tiles.FlashlightTile: int getMetricsCategory()>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setAllComponentsDirectBootAware(boolean)>
<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager.RemoteAccessibilityConnection getPictureInPictureActionReplacingConnection()>
<com.android.server.wallpaper.WallpaperManagerService: boolean isWallpaperBackupEligible(int,int)>
<com.android.packageinstaller.wear.WearPackageInstallerService: android.os.IBinder onBind(android.content.Intent)>
<com.android.server.pm.permission.BasePermission: boolean isRemoved()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isMultiArch()>
<com.android.settingslib.drawer.Tile: void <init>(android.content.pm.ComponentInfo,java.lang.String)>
<com.android.systemui.statusbar.phone.NavigationModeController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.printservice.recommendation.plugin.hp.ServiceRecommendationPlugin: void stop()>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: java.util.Set getAnimatedProperties()>
<javax.obex.ClientOperation: java.io.OutputStream openOutputStream()>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareValidation: void dump(java.io.PrintWriter)>
<com.android.systemui.shared.system.ActivityManagerWrapper: boolean isLockTaskKioskModeActive()>
<com.android.systemui.qs.customize.CustomizeTileView: void <init>(android.content.Context,com.android.systemui.plugins.qs.QSIconView)>
<com.android.server.firewall.FilterFactory: java.lang.String getTagName()>
<com.android.server.ConnectivityService: int getLastTetherError(java.lang.String)>
<com.android.systemui.util.wakelock.WakeLock: com.android.systemui.util.wakelock.WakeLock createPartial(android.content.Context,java.lang.String,long)>
<com.android.printservice.recommendation.plugin.mdnsFilter.MDNSFilterPlugin: void stop()>
<com.android.systemui.statusbar.notification.row.HybridNotificationView: void transformTo(com.android.systemui.statusbar.TransformableView,java.lang.Runnable)>
<com.android.server.pm.PreferredComponent: java.lang.String getParseError()>
<com.android.server.webkit.WebViewUpdateServiceImpl: void <init>(android.content.Context,com.android.server.webkit.SystemInterface)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: float getOutlineAlpha()>
<com.android.photos.BitmapRegionTileSource.BitmapSource: com.android.photos.SimpleBitmapRegionDecoder loadBitmapRegionDecoder()>
<com.android.systemui.biometrics.AuthBiometricView: void setBackgroundView(android.view.View)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void setDefaultBrowserProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.DefaultBrowserProvider)>
<com.android.powermodel.component.ModemProfile.Builder: com.android.powermodel.component.ModemProfile build()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: android.view.NotificationHeaderView getVisibleNotificationHeader()>
<com.android.systemui.statusbar.policy.BatteryControllerImpl: boolean isAodPowerSave()>
<com.android.commands.input.Input: void onRun()>
<com.android.systemui.glwallpaper.EglHelper: boolean hasEglContext()>
<com.android.server.pm.CrossProfileAppsServiceImpl: void setInteractAcrossProfilesAppOp(java.lang.String,int)>
<com.android.server.slice.SliceClientPermissions: boolean hasPermission(android.net.Uri,int)>
<com.android.systemui.bubbles.BadgedImageView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.pm.ShortcutService: void enableShortcuts(java.lang.String,java.util.List,int)>
<com.android.systemui.egg.MLand: void onSizeChanged(int,int,int,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)>
<com.android.companiondevicemanager.DeviceChooserActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void showBouncerMessage(java.lang.String,android.content.res.ColorStateList)>
<com.android.server.DynamicSystemService: boolean abort()>
<com.android.server.people.data.Event: long getTimestamp()>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getAlwaysOnVpnPackageForUser(int)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.MenuItem getLongpressMenuItem(android.content.Context)>
<com.android.systemui.pip.phone.PipResizeGestureHandler: void onConfigurationChanged()>
<com.android.systemui.colorextraction.SysuiColorExtractor: void onColorsChanged(android.app.WallpaperColors,int,int)>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifCollectionListener: void onEntryAdded(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.settingslib.wifi.WifiEntryPreference: void onDisconnectResult(int)>
<com.android.systemui.statusbar.policy.BluetoothController: java.util.List getConnectedDevices()>
<android.os.UserManagerInternal: void addUserRestrictionsListener(android.os.UserManagerInternal.UserRestrictionsListener)>
<com.android.server.usb.UsbAlsaDevice: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>
<com.android.packageinstaller.television.ErrorFragment: int onProvideTheme()>
<com.android.systemui.statusbar.notification.row.ExpandableView: long performRemoveAnimation(long,long,float,boolean,float,java.lang.Runnable,android.animation.AnimatorListenerAdapter)>
<com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper: boolean swipedFastEnough(float,float)>
<android.processor.view.inspector.InspectableClassModel.Property: java.lang.String getName()>
<android.net.wifi.p2p.WifiP2pManager: void clearServiceRequests(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.systemui.MultiListLayout: void updateList()>
<android.net.wifi.WifiManager: int calculateSignalLevel(int,int)>
<com.android.settingslib.bluetooth.A2dpProfile: boolean isProfileReady()>
<android.os.StatsDimensionsValue: long getLongValue()>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: boolean isKeyguardGoingAway()>
<com.android.server.ZramWriteback: boolean onStopJob(android.app.job.JobParameters)>
<com.android.systemui.plugins.VolumeDialogController.Callbacks: void onLayoutDirectionChanged(int)>
<com.android.systemui.PluginInflateContainer: void inflateLayoutImpl()>
<com.android.server.policy.PhoneWindowManager: void registerShortcutKey(long,com.android.internal.policy.IShortcutService)>
<com.android.settingslib.display.DisplayDensityUtils: void clearForcedDisplayDensity(int)>
<com.android.systemui.stackdivider.DividerWindowManager: void remove()>
<com.android.printspooler.model.RemotePrintDocument: boolean hasUpdateError()>
<com.android.providers.settings.SettingsBackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<com.android.systemui.car.notification.NotificationPanelViewMediator: void onLocaleListChanged()>
<com.android.systemui.shared.plugins.PluginInstanceManager: boolean checkAndDisable(java.lang.String)>
<com.android.server.pm.permission.PermissionsState.PermissionState: java.lang.String getName()>
<com.android.printspooler.ui.PrintActivity: void onUpdateFailed(java.lang.CharSequence)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout: void removeView(android.view.View)>
<android.text.StaticLayoutCreateDrawPerfTest: java.util.Collection cases()>
<com.android.gallery3d.common.Utils: long crc64Long(java.lang.String)>
<com.android.systemui.qs.QSDetailItems.Callback: void onDetailItemDisconnect(com.android.systemui.qs.QSDetailItems.Item)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: float getTranslationY()>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector checked(boolean)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void onDreamingStopped()>
<com.google.android.startop.iorap.AppLaunchEvent.ActivityLaunched: boolean equals(java.lang.Object)>
<com.android.uiautomator.core.UiDevice: java.lang.String getProductName()>
<android.perftests.utils.BenchmarkState: void pauseTiming()>
<com.android.systemui.media.MediaProjectionPermissionActivity: void onCancel(android.content.DialogInterface)>
<com.android.systemui.car.userswitcher.UserSwitcherContainer: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.audio.AudioService: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
<com.android.systemui.stackdivider.DividerView: void setAdjustedForIme(boolean,long)>
<com.android.server.utils.UserTokenWatcher.Callback: void released(int)>
<com.android.server.locksettings.LockSettingsService: void onUnlockUser(int)>
<com.android.settingslib.applications.ApplicationsState.Session: java.util.ArrayList rebuild(com.android.settingslib.applications.ApplicationsState.AppFilter,java.util.Comparator,boolean)>
<com.android.server.accessibility.gestures.TouchState: java.lang.String toString()>
<com.android.commands.sm.Sm: void runGetPrimaryStorageUuid()>
<com.android.systemui.statusbar.notification.logging.NotificationLogger.OnChildLocationsChangedListener: void onChildLocationsChanged()>
<com.android.shell.BugreportStorageProvider: android.database.MatrixCursor.RowBuilder includeFile(android.database.MatrixCursor,java.lang.String,java.io.File)>
<android.net.wifi.ParcelUtil: java.security.cert.X509Certificate[] readCertificates(android.os.Parcel)>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: void onBindRow(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.autofill.RemoteInlineSuggestionRenderService: android.content.ComponentName getServiceComponentName(android.content.Context,int)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void onRecentsAnimationStateChanged(boolean)>
<android.net.wifi.WifiSsid: android.net.wifi.WifiSsid createFromAsciiEncoded(java.lang.String)>
<com.android.server.storage.FileCollector: long getSystemSize(android.content.Context)>
<com.android.powermodel.component.CpuProfile.Builder: com.android.powermodel.component.CpuProfile build()>
<com.android.server.search.SearchManagerService: android.content.ComponentName getWebSearchActivity()>
<com.android.server.attention.AttentionManagerService: long getStaleAfterMillis()>
<android.media.Session2Link: int describeContents()>
<com.android.server.soundtrigger_middleware.SoundTriggerHw2Enforcer: int loadPhraseSoundModel(android.hardware.soundtrigger.V2_1.ISoundTriggerHw.PhraseSoundModel,com.android.server.soundtrigger_middleware.ISoundTriggerHw2.Callback,int)>
<com.android.systemui.stackdivider.ForcedResizableInfoActivity: void onStop()>
<com.android.systemui.car.bluetooth.ConnectedDeviceSignalController: void onBluetoothStateChange(boolean)>
<com.android.systemui.statusbar.notification.row.NotificationInfo: boolean needsFalsingProtection()>
<com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm: int getMaxAllowedChildHeight(android.view.View)>
<com.android.keyguard.KeyguardViewController: void onStartedWakingUp()>
<com.android.server.timedetector.TimeDetectorStrategy.Callback: int systemClockUpdateThresholdMillis()>
<android.media.Controller2Link: void cancelSessionCommand(int)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void setKeyguardGoingAwayState(boolean)>
<com.android.settingslib.drawable.UserIconDrawable: void setFrameColor(android.content.res.ColorStateList)>
<com.android.systemui.qs.tiles.WifiTile.WifiDetailAdapter: android.view.View createDetailView(android.content.Context,android.view.View,android.view.ViewGroup)>
<com.android.systemui.dagger.ContextComponentHelper: com.android.systemui.SystemUI resolveSystemUI(java.lang.String)>
<com.android.server.FgThread: com.android.server.FgThread get()>
<com.android.systemui.classifier.FalsingLog: void log(java.lang.String,java.lang.String,java.lang.String)>
<com.android.server.storage.StorageUserConnection: void removeAllSessions()>
<com.android.settingslib.widget.BarChartInfo: android.view.View.OnClickListener getDetailsOnClickListener()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: boolean isConnectedA2dpDevice()>
<com.google.android.startop.iorap.AppIntentEvent: com.google.android.startop.iorap.AppIntentEvent createDefaultIntentChanged(com.google.android.startop.iorap.ActivityInfo,com.google.android.startop.iorap.ActivityInfo)>
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager,android.net.IDnsResolver,android.net.metrics.IpConnectivityLog,android.net.INetd,com.android.server.ConnectivityService.Dependencies)>
<android.net.wifi.hotspot2.omadm.XMLNode: android.net.wifi.hotspot2.omadm.XMLNode getParent()>
<com.android.server.media.MediaSession2Record: int getUid()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl.SubscriptionDefaults: int getDefaultVoiceSubId()>
<com.android.server.accessibility.MagnificationController: void offsetMagnifiedRegion(int,float,float,int)>
<com.android.systemui.tuner.RadioListPreference: void setSummary(java.lang.CharSequence)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void <init>(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.Ranking,long)>
<com.android.server.NetworkManagementService: void denyProtect(int)>
<com.android.server.usb.descriptors.tree.UsbDescriptorsACInterfaceNode: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.systemui.statusbar.phone.PanelViewController: void notifyExpandingStarted()>
<com.android.server.IntentResolver: java.lang.Object newResult(java.lang.Object,int,int)>
<com.android.uiautomator.core.Configurator: long getActionAcknowledgmentTimeout()>
<com.android.server.SystemService: void onBootPhase(int)>
<com.android.settingslib.volume.Util: java.lang.String audioManagerFlagsToString(int)>
<com.android.systemui.qs.touch.SwipeDetector: boolean isIdleState()>
<com.android.systemui.statusbar.policy.RemoteInputQuickSettingsDisabler: void <init>(android.content.Context,com.android.systemui.statusbar.policy.ConfigurationController,com.android.systemui.statusbar.CommandQueue)>
<com.android.server.wallpaper.WallpaperManagerService: void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
<com.android.systemui.recents.Recents: void cancelPreloadRecentApps()>
<com.android.server.ServiceWatcher: void <init>(android.content.Context,android.os.Handler,java.lang.String,com.android.server.ServiceWatcher.BinderRunner,java.lang.Runnable,int,int)>
<com.android.systemui.settings.ToggleSliderView: void setEnforcedAdmin(com.android.settingslib.RestrictedLockUtils.EnforcedAdmin)>
<com.android.systemui.qs.touch.SwipeDetector: long calculateDuration(float,float)>
<com.android.systemui.statusbar.phone.StatusBar: void onHeadsUpStateChanged(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.systemui.util.leak.TrackedObjects: boolean isTrackedObject(java.util.Collection)>
<com.android.server.pm.dex.DexoptOptions: java.lang.String getCompilerFilter()>
<com.android.printspooler.model.OpenDocumentCallback: void onFailure(int)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: boolean startPairing()>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void verifyUnlock(com.android.server.policy.WindowManagerPolicy.OnKeyguardExitResult)>
<com.android.settingslib.drawable.UserIconDrawable: void onBoundsChange(android.graphics.Rect)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: float getCurrentBackgroundRadiusBottom()>
<com.android.systemui.shared.system.PackageManagerWrapper: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>
<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: boolean setIsDozing(boolean)>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: int getVersionCodeMajor()>
<com.android.server.security.VerityUtils: boolean hasFsverity(java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean applyChildOrder(java.util.List,com.android.systemui.statusbar.notification.VisualStabilityManager,com.android.systemui.statusbar.notification.VisualStabilityManager.Callback)>
<com.android.keyguard.KeyguardUpdateMonitor: void cancelFaceAuth()>
<com.android.systemui.statusbar.phone.DozeServiceHost: void stopPulsing()>
<com.android.perftests.blob.AtraceUtils: void startTrace(java.lang.String)>
<com.android.systemui.qs.tiles.WorkModeTile: android.content.Intent getLongClickIntent()>
<com.android.externalstorage.ExternalStorageProvider: void updateVolumes()>
<com.android.server.tv.tunerresourcemanager.ClientProfile: java.util.Set getInUseLnbIds()>
<com.android.networkstack.tethering.EntitlementManager: android.os.PersistableBundle getCarrierConfig(com.android.networkstack.tethering.TetheringConfiguration)>
<com.android.server.display.color.ColorDisplayService: void onBootPhase(int)>
<com.android.settingslib.notification.EnableZenModeDialog: android.net.Uri getConditionId(android.service.notification.Condition)>
<com.android.server.appbinding.finders.AppServiceFinder: java.lang.String getServiceAction()>
<android.app.backup.ForwardingBackupAgent: void onRestore(android.app.backup.BackupDataInput,long,android.os.ParcelFileDescriptor)>
<com.android.server.utils.PriorityDump.PriorityDumper: void dumpCritical(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],boolean)>
<com.android.systemui.bubbles.BubbleManageEducationView: void onFinishInflate()>
<android.perftests.utils.ManualBenchmarkState.CustomizedIterationListener: void onFinished(int)>
<com.android.systemui.statusbar.notification.row.NotificationInfo.CheckSaveListener: void checkSave(java.lang.Runnable,android.service.notification.StatusBarNotification)>
<com.android.systemui.ScreenDecorations: void start()>
<com.android.server.media.MediaRoute2Provider.Callback: void onProviderStateChanged(com.android.server.media.MediaRoute2Provider)>
<android.net.wifi.p2p.WifiP2pWfdInfo: java.lang.String toString()>
<com.android.server.contentcapture.ContentCaptureManagerService: void onServiceRemoved(com.android.server.contentcapture.ContentCapturePerUserService,int)>
<android.util.StatsEvent.Builder: android.util.StatsEvent.Builder writeInt(int)>
<com.android.settingslib.RestrictedPreferenceHelper: boolean isDisabledByAdmin()>
<com.android.systemui.plugins.VolumeDialogController.State: java.lang.String toString(int)>
<com.android.systemui.media.dialog.MediaOutputController.Callback: void onRouteChanged()>
<com.android.systemui.statusbar.notification.logging.NotificationLogger: void setVisibilityReporter(java.lang.Runnable)>
<android.content.pm.PackageManagerInternal: void setDeviceOwnerProtectedPackages(java.util.List)>
<com.android.server.biometrics.fingerprint.FingerprintUtils: java.lang.CharSequence getUniqueName(android.content.Context,int)>
<com.android.settingslib.deviceinfo.StorageVolumeProvider: long getFreeBytes(android.app.usage.StorageStatsManager,android.os.storage.VolumeInfo)>
<com.android.photos.DumbBitmapRegionDecoder: android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory.Options)>
<com.android.systemui.car.window.OverlayPanelViewController: boolean shouldAnimateCollapsePanel()>
<com.android.server.pm.RestrictionsSet: void removeAllRestrictions()>
<com.android.server.locksettings.SyntheticPasswordCrypto: byte[] encrypt(byte[],byte[],byte[])>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext eglCreateContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,javax.microedition.khronos.egl.EGLContext,int[])>
<com.android.server.IntentResolver: boolean dump(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>
<android.net.wifi.p2p.WifiP2pDevice: int describeContents()>
<android.media.Controller2Link: void onConnected(int,android.os.Bundle)>
<com.android.settingslib.bluetooth.BluetoothUtils: android.net.Uri getUriMetaData(android.bluetooth.BluetoothDevice,int)>
<android.app.StatsManager: void removeConfig(long)>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean handleSystemAudioModeStatus(com.android.server.hdmi.HdmiCecMessage)>
<com.android.systemui.statusbar.policy.CallbackHandler: void setSubs(java.util.List)>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalRadioRxTimeMillis()>
<android.net.wifi.IWifiManager: boolean disableNetwork(int,java.lang.String)>
<com.android.server.utils.quota.Categorizer: com.android.server.utils.quota.Category getCategory(int,java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.phone.ScrimController.Callback: void onCancelled()>
<com.android.server.appop.AppOpsService: int noteProxyOperation(int,int,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>
<com.android.systemui.statusbar.HeadsUpStatusBarView: void setEntry(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.pm.PackageManagerService: boolean isStorageLow()>
<com.android.systemui.bubbles.BubbleController: void expandStackAndSelectBubble(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.printspooler.widget.PrintContentView.OptionsStateChangeListener: void onOptionsClosed()>
<com.android.settingslib.deviceinfo.StorageVolumeProvider: long getPrimaryStorageSize()>
<com.android.server.infra.ServiceNameResolver: void setOnTemporaryServiceNameChangedCallback(com.android.server.infra.ServiceNameResolver.NameResolverListener)>
<com.android.systemui.car.window.OverlayPanelViewController: void setPanelVisible(boolean)>
<android.net.wifi.hotspot2.pps.Policy.RoamingPartner: int getPriority()>
<com.android.systemui.keyguard.ScreenLifecycle.Observer: void onScreenTurnedOn()>
<com.android.server.integrity.serializer.RuleSerializeException: void <init>(java.lang.String,java.lang.Throwable)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: int getExtraBottomPadding()>
<com.android.systemui.statusbar.phone.NavigationBarView: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.externalstorage.TestDocumentsProvider: android.database.Cursor queryDocument(java.lang.String,java.lang.String[])>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setScrimsVisibilityListener(java.util.function.Consumer)>
<com.android.server.policy.WindowManagerPolicy.ScreenOffListener: void onScreenOff()>
<com.android.systemui.globalactions.GlobalActionsColumnLayout: void centerAlongEdge()>
<com.android.server.AppStateTracker: void dump(java.io.PrintWriter,java.lang.String)>
<com.android.settingslib.graph.SignalDrawable: boolean setVisible(boolean,boolean)>
<com.android.server.pm.IntentFilterVerificationState: boolean isVerified()>
<android.text.PrecomputedTextPerfTest: void testCreate_Styled_NoHyphenation()>
<com.android.egg.neko.Cat: int chooseP(java.util.Random,int[])>
<android.net.wifi.p2p.WifiP2pManager.DeviceInfoListener: void onDeviceInfoAvailable(android.net.wifi.p2p.WifiP2pDevice)>
<com.android.server.policy.BurnInProtectionHelper: void onAnimationStart(android.animation.Animator)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: void transformFrom(com.android.systemui.statusbar.TransformableView)>
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest build()>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: void <init>(int,java.lang.String)>
<com.android.server.timezone.PackageManagerHelper: boolean contentProviderRegistered(java.lang.String,java.lang.String)>
<com.android.server.testing.shadows.ShadowSlog: int println(int,java.lang.String,java.lang.String)>
<com.android.systemui.SwipeHelper: void onChildSnappedBack(android.view.View,float)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isUserInLockdown(int)>
<com.android.systemui.glwallpaper.ImageWallpaperRenderer: void onSurfaceCreated()>
<com.android.printservice.recommendation.util.MDNSFilteredDiscovery: void onDiscoveryStarted(java.lang.String)>
<com.android.systemui.biometrics.AuthBiometricView: void restoreState(android.os.Bundle)>
<com.android.settingslib.notification.ZenRadioLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.packageinstaller.handheld.ErrorDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper.SnoozeOption: int getMinutesToSnoozeFor()>
<com.android.systemui.statusbar.policy.AccessibilityController: void onAccessibilityStateChanged(boolean)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone.HeadsUpEntryPhone: void setEntry(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void onRemoteInputActive(boolean)>
<com.android.systemui.plugins.NotificationListenerController.NotificationProvider: void removeNotification(android.service.notification.StatusBarNotification)>
<android.net.wifi.WifiInfo: void setRetriedTxPacketsRate(double)>
<com.android.systemui.pip.PipTaskOrganizer: void scheduleResizePip(android.graphics.Rect,java.util.function.Consumer)>
<com.android.settingslib.core.AbstractPreferenceController: void setVisible(androidx.preference.PreferenceGroup,java.lang.String,boolean)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setRecoveryServiceCertPath(int,int,java.lang.String,java.security.cert.CertPath)>
<com.android.systemui.statusbar.StatusBarMobileView: java.lang.String toString()>
<com.android.settingslib.suggestions.SuggestionControllerMixin.SuggestionControllerHost: void onSuggestionReady(java.util.List)>
<com.android.settingslib.display.DisplayDensityConfiguration: void setForcedDisplayDensity(int,int)>
<android.multiuser.BenchmarkRunner: android.os.Bundle getStatsToLog()>
<com.android.server.biometrics.AuthenticationClient: long getStartTimeMs()>
<com.android.server.compat.PlatformCompat: com.android.internal.compat.CompatibilityChangeInfo[] listUIChanges()>
<com.android.systemui.statusbar.policy.SmartReplyConstants: int getMaxNumActions()>
<com.android.systemui.statusbar.phone.RegionSamplingHelper.SamplingCallback: android.graphics.Rect getSampledRegion(android.view.View)>
<android.content.pm.PackageManagerInternal: java.util.List getMimeGroup(java.lang.String,java.lang.String)>
<com.android.fakeoemfeatures.FakeView: void onAttachedToWindow()>
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)>
<com.android.systemui.dagger.DependencyProvider: android.util.DisplayMetrics provideDisplayMetrics(android.content.Context,android.view.WindowManager)>
<com.android.settingslib.core.instrumentation.LogWriter: void action(android.content.Context,int,java.lang.String)>
<com.android.server.utils.quota.CountQuotaTracker: void setCountLimit(com.android.server.utils.quota.Category,int,long)>
<com.android.systemui.statusbar.notification.collection.ListDumper: java.lang.String dumpList(java.util.List,boolean,java.lang.String)>
<com.android.server.locksettings.LockSettingsStrongAuth: void registerStrongAuthTracker(android.app.trust.IStrongAuthTracker)>
<com.android.providers.settings.SettingsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<com.android.systemui.recents.OverviewProxyService: void onUserSwitched(int)>
<com.android.systemui.statusbar.phone.StatusBarIconHolder: int getTag()>
<com.android.systemui.statusbar.notification.MessagingImageTransformState: int getStartActualHeight()>
<android.net.wifi.WifiEnterpriseConfig: boolean isSuiteBCipherCert(java.security.cert.X509Certificate)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeEnablerManager: void <init>(androidx.preference.PreferenceFragment)>
<javax.microedition.khronos.opengles.GL11: void glBindBuffer(int,int)>
<com.android.systemui.media.dialog.MediaOutputGroupAdapter: com.android.systemui.media.dialog.MediaOutputBaseAdapter.MediaDeviceBaseViewHolder onCreateViewHolder(android.view.ViewGroup,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: long forceNetworkLogs()>
<com.android.settingslib.display.BrightnessUtils: int convertGammaToLinear(int,int,int)>
<com.android.systemui.qs.external.TileServices: void freeService(com.android.systemui.qs.external.CustomTile,com.android.systemui.qs.external.TileServiceManager)>
<com.android.systemui.fragments.FragmentHostManager: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setHeadsUpShowing(boolean)>
<com.android.systemui.qs.SlashDrawable: int getIntrinsicWidth()>
<com.android.settingslib.media.MediaDevice: java.util.List getFeatures()>
<android.net.wifi.WifiScanner.PnoSettings: int describeContents()>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: boolean contains(java.lang.Object)>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: void setCertSha256Fingerprint(byte[])>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void generateHeadsUpAnimation(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,boolean)>
<com.android.uiautomator.core.UiObject: boolean isClickable()>
<com.android.server.SystemService: void onCleanupUser(int)>
<javax.obex.ObexHelper: byte[] createHeader(javax.obex.HeaderSet,boolean)>
<com.android.systemui.statusbar.notification.interruption.HeadsUpController: void attach(com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.systemui.statusbar.policy.HeadsUpManager)>
<com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage: com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage getInstance(android.security.KeyStore)>
<com.android.systemui.plugins.VolumeDialogController.Callbacks: void onStateChanged(com.android.systemui.plugins.VolumeDialogController.State)>
<com.android.systemui.shared.system.RecentsAnimationControllerCompat: void cleanupScreenshot()>
<com.android.systemui.util.concurrency.ConcurrencyModule: android.os.Handler provideMainHandler(android.os.Looper)>
<com.android.server.pm.PackageManagerService: byte[] getDefaultAppsBackup(int)>
<com.android.server.usb.descriptors.report.UsbStrings: java.lang.String getFormatName(int)>
<android.net.wifi.WifiEnterpriseConfig: void setEapMethod(int)>
<com.android.systemui.volume.SafetyWarningDialog: void onDismiss(android.content.DialogInterface)>
<com.android.uiautomator.core.ShellUiAutomatorBridge: void <init>(android.app.UiAutomation)>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameterfv(int,int,float[],int)>
<android.net.wifi.rtt.RangingResult: int getStatus()>
<com.android.server.lights.LogicalLight: void setFlashing(int,int,int,int)>
<com.android.systemui.qs.QSPanel: void reAttachMediaHost()>
<com.android.printservice.recommendation.plugin.hp.ServiceResolveQueue.ResolveCallback: void serviceResolved(android.net.nsd.NsdServiceInfo)>
<com.android.packageinstaller.wear.PackageInstallerImpl.InstallListener: void installFailed(int,java.lang.String)>
<com.android.systemui.settings.ToggleSeekBar: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.fragments.FragmentService.FragmentCreator: com.android.systemui.qs.QSFragment createQSFragment()>
<com.android.keyguard.KeyguardSecurityCallback: void onCancelClicked()>
<com.android.server.pm.PackageSetting: boolean isOdm()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isRemoved()>
<android.view.ViewShowHidePerfTest: void testRemove()>
<com.android.server.broadcastradio.hal2.BroadcastRadioService: java.util.Collection listModules()>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: android.content.ComponentName getEffectsSuppressor()>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: boolean performAccessibilityActionInternal(int,android.os.Bundle)>
<com.android.server.usb.descriptors.UsbUnknown: void <init>(int,byte)>
<javax.microedition.khronos.opengles.GL10: void glFlush()>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: int getOutlineTranslation()>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.server.protolog.ProtoLogImpl: void e(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>
<com.android.systemui.statusbar.notification.stack.AnimationFilter: com.android.systemui.statusbar.notification.stack.AnimationFilter animateY()>
<com.android.server.compat.PlatformCompatNative: boolean isChangeEnabledByUid(long,int)>
<com.android.systemui.MultiListLayout.MultiListAdapter: boolean hasSeparatedItems()>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindsTvStatusBar(com.android.systemui.statusbar.tv.TvStatusBar)>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: int getCurrentUserId()>
<com.android.systemui.qs.tiles.UserDetailItemView: void bind(java.lang.String,android.graphics.Bitmap,int)>
<com.android.server.accounts.AccountManagerService: boolean removeAccountExplicitly(android.accounts.Account)>
<android.net.TetheredClient: java.util.List getAddresses()>
<com.android.systemui.statusbar.policy.NetworkController: boolean hasMobileDataFeature()>
<com.android.settingslib.media.LocalMediaManager: void startScan()>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setProduct(boolean)>
<com.android.server.CountryDetectorService: void removeCountryListener(android.location.ICountryListener)>
<android.net.wifi.hotspot2.pps.HomeSp: void <init>(android.net.wifi.hotspot2.pps.HomeSp)>
<com.android.server.pm.permission.BasePermission: boolean isPermission(android.content.pm.parsing.component.ParsedPermission)>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: void collapseBackToStack(android.graphics.PointF,java.lang.Runnable)>
<com.android.systemui.statusbar.policy.UserInfoControllerImpl: void onDensityOrFontScaleChanged()>
<com.android.server.wallpaper.WallpaperManagerService: void settingsRestored()>
<com.android.systemui.qs.customize.QSCustomizer: boolean isCustomizing()>
<com.android.systemui.statusbar.notification.row.NotificationGuts: void onDraw(android.graphics.Canvas)>
<com.android.settingslib.bluetooth.PanProfile: int getNameResource(android.bluetooth.BluetoothDevice)>
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setServiceSpecificInfo(byte[])>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void initDependencies(com.android.systemui.statusbar.phone.StatusBar,com.android.systemui.statusbar.phone.NotificationGroupManager,com.android.systemui.statusbar.NotificationShelf,com.android.systemui.statusbar.phone.NotificationIconAreaController,com.android.systemui.statusbar.phone.ScrimController)>
<com.android.localtransport.LocalTransport: int performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int)>
<com.android.server.adb.AdbDebuggingManager: void <init>(android.content.Context)>
<com.android.server.GestureLauncherService: boolean isCameraLiftTriggerEnabled(android.content.res.Resources)>
<android.media.MediaController2.ControllerCallback: void onCommandResult(android.media.MediaController2,java.lang.Object,android.media.Session2Command,android.media.Session2Command.Result)>
<com.android.gallery3d.exif.ExifInterface: java.lang.Byte getTagByteValue(int)>
<com.android.keyguard.KeyguardUpdateMonitor: void sendKeyguardReset()>
<com.android.server.pm.permission.PermissionManagerService: boolean shouldShowRequestPermissionRationale(java.lang.String,java.lang.String,int)>
<com.android.keyguard.KeyguardViewController: boolean isBouncerShowing()>
<com.android.systemui.qs.external.TileLifecycleManager: void onTileAdded()>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onTaskRemoved(int)>
<com.android.server.pm.UserManagerService: void onUserLoggedIn(int)>
<android.net.NetworkStackClient.Dependencies: void addToServiceManager(android.os.IBinder)>
<android.widget.LayoutPerfTest: void <init>(java.lang.String,int,int)>
<android.net.util.PrefixUtils: android.net.IpPrefix asIpPrefix(android.net.LinkAddress)>
<com.android.server.usb.descriptors.UsbInterfaceDescriptor: byte getDescrIndex()>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setAccessibilityDelegate(android.view.View.AccessibilityDelegate)>
<com.android.systemui.analytics.DataCollector: void onExpansionFromPulseStopped()>
<com.android.server.stats.pull.IonMemoryUtil.IonAllocations: java.lang.String toString()>
<android.media.MediaSession2.Builder: android.media.MediaSession2.Builder setId(java.lang.String)>
<com.android.systemui.globalactions.ListGridLayout: android.view.ViewGroup getSublist(int)>
<com.android.server.policy.PhoneWindowManager: boolean canBeHiddenByKeyguardLw(com.android.server.policy.WindowManagerPolicy.WindowState)>
<com.android.settingslib.fuelgauge.PowerWhitelistBackend: boolean isDefaultActiveApp(java.lang.String)>
<com.android.systemui.statusbar.policy.HeadsUpManager: void setEntryPinned(com.android.systemui.statusbar.policy.HeadsUpManager.HeadsUpEntry,boolean)>
<android.net.wifi.IWifiManager: boolean startTetheredHotspot(android.net.wifi.SoftApConfiguration)>
<com.android.server.pm.UserManagerService: boolean removeUserEvenWhenDisallowed(int)>
<com.android.server.biometrics.face.FaceService: java.lang.String getManageBiometricPermission()>
<com.android.settingslib.fuelgauge.PowerWhitelistBackend: boolean isSysWhitelistedExceptIdle(java.lang.String)>
<com.android.systemui.qs.QSPanel: boolean shouldShowDetail()>
<com.android.systemui.volume.VolumePrefs: void unregisterCallbacks(android.content.Context,android.content.SharedPreferences.OnSharedPreferenceChangeListener)>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void setChildTransferInProgress(boolean)>
<com.android.systemui.statusbar.NotificationMediaManager: void removeCallback(com.android.systemui.statusbar.NotificationMediaManager.MediaListener)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.qs.NonInterceptingScrollView: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.server.om.OverlayReferenceMapper: void removePkg(java.lang.String)>
<com.android.server.pm.parsing.pkg.PackageImpl: java.lang.String getPrimaryCpuAbi()>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean hideLw(boolean)>
<com.android.systemui.statusbar.phone.AutoTileManager: void startControllersAndSettingsListeners()>
<com.android.server.appwidget.AppWidgetService: void onStopUser(int)>
<com.android.systemui.statusbar.notification.stack.ViewState: void cancelAnimations(android.view.View)>
<com.android.server.appop.AppOpsService: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getAutoTimeZoneEnabled(android.content.ComponentName)>
<com.android.server.statusbar.StatusBarManagerService: void setIconVisibility(java.lang.String,boolean)>
<com.android.systemui.volume.VolumeDialogImpl: void destroy()>
<com.android.gallery3d.common.Utils: int parseIntSafely(java.lang.String,int)>
<com.android.settingslib.RestrictedSwitchPreference: void setIconSize(int)>
<com.android.settingslib.net.NetworkCycleDataForUid.Builder: com.android.settingslib.net.NetworkCycleDataForUid.Builder setForegroundUsage(long)>
<com.android.keyguard.KeyguardMessageArea: void onDensityOrFontScaleChanged()>
<com.android.server.textservices.TextServicesManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.settingslib.widget.FooterPreference.Builder: com.android.settingslib.widget.FooterPreference.Builder setKey(java.lang.String)>
<com.android.aapt.namespace.libtwo.TextView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.settingslib.bluetooth.HeadsetProfile: boolean isAutoConnectable()>
<javax.microedition.khronos.opengles.GL10: void glFogf(int,float)>
<com.android.server.usb.descriptors.Usb20ASFormatII: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper: float getMinDismissVelocity()>
<com.android.systemui.globalactions.ListGridLayout: void setReverseSublists(boolean)>
<com.android.server.PackageWatchdog.PackageHealthObserver: int onBootLoop()>
<com.android.server.pm.ProtectedPackages: java.lang.String getDeviceOwnerOrProfileOwnerPackage(int)>
<com.android.systemui.appops.AppOpItem: void setSilenced(boolean)>
<com.android.systemui.statusbar.SysuiStatusBarStateController: boolean goingToFullShade()>
<android.net.wifi.hotspot2.PasspointConfiguration: boolean validate()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: int getConnectedWifiLevel()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: com.android.systemui.statusbar.notification.row.HybridNotificationView getSingleLineView()>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator: boolean isLaunchForActivity()>
<android.media.Session2Link: void linkToDeath(android.os.IBinder.DeathRecipient,int)>
<android.net.wifi.WifiScanner.PnoScanListener: void onPnoNetworkFound(android.net.wifi.ScanResult[])>
<com.android.server.audio.AudioEventLogger.Event: java.lang.String eventToString()>
<com.android.systemui.biometrics.AuthController: void onSystemEvent(int)>
<com.android.server.tv.tunerresourcemanager.CasResource: java.lang.String toString()>
<com.android.keyguard.KeyguardSliceView: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.phone.PanelViewController: void startExpandLatencyTracking()>
<com.android.server.dreams.DreamController.Listener: void onDreamStopped(android.os.Binder)>
<com.android.systemui.statusbar.notification.interruption.NotificationInterruptSuppressor: boolean suppressAwakeHeadsUp(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.slice.DirtyTracker.Persistable: java.lang.String getFileName()>
<android.os.PackageManagerPerfTest: void testGetInstalledPackages()>
<com.android.systemui.MultiListLayout: void setDivisionView(android.view.View)>
<com.android.server.pm.UserManagerService: boolean markGuestForDeletion(int)>
<com.android.server.audio.AudioEventLogger.StringEvent: void <init>(java.lang.String)>
<com.android.systemui.statusbar.phone.PhoneStatusBarTransitions: void <init>(com.android.systemui.statusbar.phone.PhoneStatusBarView,android.view.View)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void drawMesh(com.android.gallery3d.glrenderer.BasicTexture,int,int,int,int,int,int)>
<com.android.location.provider.ProviderRequestUnbundled: boolean getReportLocation()>
<com.android.powermodel.AppPower: double getAppPowerMah()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: boolean isWithinSnapMenuThreshold()>
<com.android.systemui.qs.external.CustomTile: android.content.ComponentName getComponent()>
<com.android.server.testing.shadows.ShadowKeyValueBackupJob: void schedule(int,android.content.Context,long,com.android.server.backup.BackupManagerConstants)>
<com.android.settingslib.media.MediaManager: void startScan()>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: android.net.wifi.p2p.WifiP2pDevice getSrcDevice()>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator: void <init>(com.android.systemui.statusbar.phone.NotificationShadeWindowViewController,com.android.systemui.statusbar.notification.ActivityLaunchAnimator.Callback,com.android.systemui.statusbar.phone.NotificationPanelViewController,com.android.systemui.statusbar.NotificationShadeDepthController,com.android.systemui.statusbar.notification.stack.NotificationListContainer,java.util.concurrent.Executor)>
<com.android.server.audio.AudioService: boolean isCameraSoundForced()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: com.android.systemui.statusbar.RemoteInputController.Delegate createDelegate()>
<com.android.systemui.car.userswitcher.UserSwitchTransitionViewMediator: void showUserSwitchDialog(int)>
<com.android.systemui.media.dialog.MediaOutputAdapter: void <init>(com.android.systemui.media.dialog.MediaOutputController)>
<android.net.wifi.ScanResult: void clearFlag(long)>
<com.android.keyguard.KeyguardAbsKeyInputView: void setPasswordEntryEnabled(boolean)>
<com.android.server.clipboard.ClipboardService: void onCleanupUser(int)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void registerStatusBar(com.android.systemui.statusbar.phone.StatusBar,android.view.ViewGroup,com.android.systemui.statusbar.phone.NotificationPanelViewController,com.android.systemui.statusbar.phone.BiometricUnlockController,com.android.systemui.keyguard.DismissCallbackRegistry,android.view.ViewGroup,android.view.View,com.android.systemui.statusbar.phone.KeyguardBypassController,com.android.systemui.plugins.FalsingManager)>
<com.android.server.display.BrightnessMappingStrategy: boolean setBrightnessConfiguration(android.hardware.display.BrightnessConfiguration)>
<com.android.systemui.shared.system.RecentsAnimationControllerCompat: void setDeferCancelUntilNextTransition(boolean,boolean)>
<com.android.settingslib.location.RecentLocationAccesses: void <init>(android.content.Context)>
<com.android.server.pm.permission.PermissionManagerServiceInternal.PermissionCallback: void onInstallPermissionUpdated()>
<com.android.server.audio.AudioService: void setStreamVolume(int,int,int,java.lang.String)>
<com.android.systemui.statusbar.phone.StatusBarIconList: java.util.ArrayList getSlots()>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeUtilCompat: boolean isValidSystemNonAuxAsciiCapableIme(android.view.inputmethod.InputMethodInfo)>
<javax.obex.PrivateOutputStream: int size()>
<com.android.server.appprediction.AppPredictionPerUserService: android.content.pm.ServiceInfo newServiceInfoLocked(android.content.ComponentName)>
<com.android.systemui.qs.tiles.NfcTile: java.lang.String composeChangeAnnouncement()>
<com.android.server.media.projection.MediaProjectionManagerService: void onStart()>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout: void cancelAllAnimationsOfProperties(androidx.dynamicanimation.animation.DynamicAnimation.ViewProperty[])>
<com.android.packageinstaller.TemporaryFileManager: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.locksettings.recoverablekeystore.WrappedKey: int getPlatformKeyGenerationId()>
<com.android.systemui.assist.ui.EdgeLight: void setStart(float)>
<com.android.server.biometrics.AuthenticationClient: boolean onAuthenticated(android.hardware.biometrics.BiometricAuthenticator.Identifier,boolean,java.util.ArrayList)>
<android.media.Controller2Link: int describeContents()>
<com.android.server.pm.UserManagerService: void setDefaultGuestRestrictions(android.os.Bundle)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowViewController: void setTouchActive(boolean)>
<com.android.systemui.statusbar.notification.row.NotificationGuts: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.ConnectivityService: boolean isNetworkSupported(int)>
<com.android.server.policy.WindowManagerPolicy: void keepScreenOnStoppedLw()>
<android.wm.RelayoutPerfTest: java.util.Collection getParameters()>
<com.android.systemui.media.dialog.MediaOutputGroupAdapter: int getItemCount()>
<com.android.systemui.globalactions.ListGridLayout: void removeAllItems()>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: java.lang.String getMfgString(com.android.server.usb.descriptors.UsbDescriptorParser)>
<com.android.systemui.plugins.GlobalActions.GlobalActionsManager: void onGlobalActionsShown()>
<com.android.uiautomator.core.UiDevice: boolean openQuickSettings()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: void unregisterCallback(com.android.settingslib.bluetooth.CachedBluetoothDevice.Callback)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void setShelfIconVisible(boolean)>
<android.net.wifi.aware.ConfigRequest: void validate()>
<com.android.systemui.statusbar.StatusBarIconView: void setStaticDrawableColor(int)>
<android.net.wifi.WifiConfiguration: boolean isMetered(android.net.wifi.WifiConfiguration,android.net.wifi.WifiInfo)>
<com.android.settingslib.applications.ApplicationsState.VolumeFilter: void <init>(java.lang.String)>
<com.android.server.storage.StorageSessionController: void onReset(android.os.IVold,java.lang.Runnable)>
<com.android.systemui.dock.DockManager: void addAlignmentStateListener(com.android.systemui.dock.DockManager.AlignmentStateListener)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setDebugThrowable(java.lang.Throwable)>
<com.android.server.biometrics.BiometricServiceBase.ServiceListener: void onAuthenticationSucceeded(long,android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.server.usb.descriptors.UsbDescriptor: int getOverUnderRunCount()>
<com.google.android.startop.iorap.AppLaunchEvent.IntentStarted: java.lang.String toStringBody()>
<com.android.settingslib.drawable.UserIconDrawable: int getIntrinsicWidth()>
<com.android.systemui.qs.QuickStatusBarHeader: void updateEverything()>
<com.android.systemui.statusbar.notification.row.ButtonLinearLayout: java.lang.CharSequence getAccessibilityClassName()>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo.OnAppSettingsClickListener: void onClick(android.view.View,android.content.Intent)>
<com.android.systemui.biometrics.AuthContainerView.Builder: com.android.systemui.biometrics.AuthContainerView.Builder setOperationId(long)>
<com.android.server.testing.shadows.ShadowKeyValueBackupTask: java.util.List getQueue()>
<com.android.server.autofill.FieldClassificationStrategy.Command: void run(android.service.autofill.IAutofillFieldClassificationService)>
<com.android.settingslib.bluetooth.LocalBluetoothProfileManager: com.android.settingslib.bluetooth.HeadsetProfile getHeadsetProfile()>
<com.android.systemui.util.Utils: void safeForeach(java.util.List,java.util.function.Consumer)>
<com.android.packageinstaller.wear.WearPackageUtil: java.io.File getTemporaryFile(android.content.Context,java.lang.String)>
<com.android.location.provider.ActivityChangedEvent: java.lang.String toString()>
<com.android.egg.neko.Cat: float frandrange(java.util.Random,float,float)>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: long getNextAlarm()>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void setIcon(java.lang.String,int,java.lang.CharSequence)>
<com.android.server.policy.keyguard.KeyguardStateMonitor: boolean isInputRestricted()>
<com.android.systemui.statusbar.phone.LockscreenWallpaper: void <init>(android.app.WallpaperManager,android.app.IWallpaperManager,com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.dump.DumpManager,com.android.systemui.statusbar.NotificationMediaManager,android.os.Handler)>
<com.android.systemui.doze.DozeHost: void cancelGentleSleep()>
<android.text.DynamicLayoutPerfTest: void testGetBlocksAlwaysNeedToBeRedrawn()>
<android.net.wifi.WifiManager: boolean stopSoftAp()>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: boolean setVisible(boolean,boolean)>
<com.android.settingslib.utils.ThreadUtils: void ensureMainThread()>
<com.android.systemui.classifier.brightline.FalsingDataProvider: boolean isDirty()>
<android.net.wifi.hotspot2.PasspointConfiguration: void <init>(android.net.wifi.hotspot2.PasspointConfiguration)>
<com.android.server.utils.quota.Category: boolean equals(java.lang.Object)>
<com.android.systemui.qs.tiles.FlashlightTile: void onFlashlightAvailabilityChanged(boolean)>
<com.android.systemui.qs.QSContainerImpl: int calculateContainerHeight()>
<com.android.server.protolog.ProtoLogImpl: void setSingleInstance(com.android.server.protolog.ProtoLogImpl)>
<com.android.systemui.statusbar.phone.HeadsUpTouchHelper.Callback: boolean isExpanded()>
<com.android.server.autofill.ui.AutoFillUI: void filterFillUi(java.lang.String,com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback)>
<com.android.server.autofill.ui.AutoFillUI: void showSaveUi(java.lang.CharSequence,android.graphics.drawable.Drawable,java.lang.String,android.service.autofill.SaveInfo,android.service.autofill.ValueFinder,android.content.ComponentName,com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback,com.android.server.autofill.ui.PendingUi,boolean,boolean)>
<com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper: void snapOpen(android.view.View,int,float)>
<com.android.systemui.doze.DozeScreenStatePreventingAdapter: com.android.systemui.doze.DozeMachine.Service wrapIfNeeded(com.android.systemui.doze.DozeMachine.Service,com.android.systemui.statusbar.phone.DozeParameters)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void addCallback(android.graphics.drawable.Drawable.Callback)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean isPanelVisibleBecauseOfHeadsUp()>
<com.android.server.testing.shadows.ShadowBackupDataInput: int readEntityData(byte[],int,int)>
<com.android.server.pm.SharedUserSetting: void fixSeInfoLocked()>
<com.android.server.pm.PackageManagerService: void systemReady()>
<com.android.server.pm.BackgroundDexOptService: boolean onStopJob(android.app.job.JobParameters)>
<com.android.systemui.statusbar.phone.NotificationGroupManager: void addOnGroupChangeListener(com.android.systemui.statusbar.phone.NotificationGroupManager.OnGroupChangeListener)>
<com.android.location.provider.ActivityRecognitionEvent: int getEventType()>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat: void <init>(android.view.View)>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean handleRoutingChange(com.android.server.hdmi.HdmiCecMessage)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void setSize(int,int)>
<com.android.server.pm.parsing.ParsedComponentStateUtils: android.util.Pair getNonLocalizedLabelAndIcon(android.content.pm.parsing.component.ParsedComponent,com.android.server.pm.PackageSetting,int)>
<com.android.server.pm.OtaDexoptService: java.lang.String nextDexoptCommand()>
<android.os.ParcelArrayPerfTest: void setUp()>
<com.android.systemui.statusbar.CommandQueue: void togglePanel()>
<com.android.settingslib.utils.AsyncLoaderCompat: void onCanceled(java.lang.Object)>
<com.android.printservice.recommendation.util.MDNSUtils: boolean isSupportedServiceType(android.net.nsd.NsdServiceInfo,java.util.Set)>
<com.android.systemui.shared.system.InputChannelCompat.InputEventDispatcher: void dispatch(android.view.InputEvent)>
<com.android.systemui.qs.tiles.DndTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.statusbar.policy.ZenModeController,com.android.systemui.plugins.ActivityStarter,com.android.systemui.broadcast.BroadcastDispatcher,android.content.SharedPreferences)>
<android.net.wifi.WifiManager: boolean isEasyConnectSupported()>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator: boolean isAnimationPending()>
<android.net.ip.IpServer.Dependencies: android.net.ip.IpNeighborMonitor getIpNeighborMonitor(android.os.Handler,android.net.util.SharedLog,android.net.ip.IpNeighborMonitor.NeighborEventConsumer)>
<com.android.systemui.statusbar.phone.StatusBar: void postQSRunnableDismissingKeyguard(java.lang.Runnable)>
<com.android.server.PackageWatchdog: void writeNow()>
<com.android.systemui.util.sensors.AsyncSensorManager: void <init>(android.hardware.SensorManager,com.android.systemui.shared.plugins.PluginManager)>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.Map getOverlayables()>
<com.android.gallery3d.exif.ExifInterface: com.android.gallery3d.exif.ExifTag getTag(int,int)>
<com.android.server.slice.PinnedSliceState: void destroy()>
<com.android.systemui.stackdivider.Divider: void onRecentsDrawn()>
<com.android.server.usb.descriptors.tree.UsbDescriptorsTree: void parse(com.android.server.usb.descriptors.UsbDescriptorParser)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: android.graphics.drawable.Drawable.ConstantState getConstantState()>
<com.android.server.appprediction.RemoteAppPredictionService: android.service.appprediction.IPredictionService getServiceInterface(android.os.IBinder)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void forceNoOverlappingRendering(boolean)>
<android.net.wifi.hotspot2.pps.Credential: void setRealm(java.lang.String)>
<android.graphics.perftests.PaintHasGlyphPerfTest: java.util.Collection glyphStrings()>
<android.net.wifi.WifiConfiguration: java.lang.String getPrintableSsid()>
<com.android.server.pm.permission.BasePermission: boolean isSignature()>
<android.media.Controller2Link: void notifyConnected(int,android.os.Bundle)>
<android.util.StatsEvent.Builder: android.util.StatsEvent build()>
<com.android.server.accessibility.AccessibilityWindowManager: android.os.IBinder getWindowTokenForUserAndWindowIdLocked(int,int)>
<com.android.systemui.statusbar.notification.row.FooterViewButton: void getDrawingRect(android.graphics.Rect)>
<com.android.systemui.statusbar.notification.ActionListTransformState: com.android.systemui.statusbar.notification.ActionListTransformState obtain()>
<com.android.powermodel.ActivityReport: com.android.powermodel.AppActivity findApp(com.android.powermodel.SpecialApp)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glFramebufferTexture2DOES(int,int,int,int,int)>
<com.android.systemui.volume.VolumeDialogImpl: void updateRingerH()>
<com.android.systemui.statusbar.phone.StatusBarIconHolder: com.android.systemui.statusbar.phone.StatusBarSignalPolicy.WifiIconState getWifiState()>
<com.android.systemui.shared.system.TaskInfoCompat: int getWindowingMode(android.app.TaskInfo)>
<android.net.wifi.ISoftApCallback: void onStateChanged(int,int)>
<com.android.systemui.qs.SignalTileView: void <init>(android.content.Context)>
<com.android.settingslib.core.instrumentation.EventLogWriter: void action(android.content.Context,int,int)>
<com.android.systemui.statusbar.notification.row.AppOpsInfo.OnSettingsClickListener: void onClick(android.view.View,java.lang.String,int,android.util.ArraySet)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isHeadsUpState()>
<android.widget.TextViewPrecomputedTextPerfTest: void testSetText_RandomText()>
<com.android.egg.neko.PrefState: void setWaterState(float)>
<com.android.server.adb.AdbDebuggingManager: java.util.Map getPairedDevices()>
<com.android.systemui.bubbles.BubbleTaskView: void setCallback(android.window.TaskEmbedder.Listener)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: boolean shouldRefocusOnDismiss()>
<android.ext.shared.Version: int getVersionCode()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: int getBondState()>
<com.android.printservice.recommendation.util.MDNSFilteredDiscovery: void onStartDiscoveryFailed(java.lang.String,int)>
<com.android.systemui.biometrics.AuthContainerView.Builder: com.android.systemui.biometrics.AuthContainerView.Builder setBiometricPromptBundle(android.os.Bundle)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: boolean hasOverlappingRendering()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: float calculateAppearFraction(float)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void onStartedWakingUp()>
<android.net.NetworkStackClient: void fetchIpMemoryStore(android.net.IIpMemoryStoreCallbacks)>
<com.android.networkstack.tethering.PrivateAddressCoordinator: void removeUpstreamPrefix(android.net.Network)>
<com.android.server.DeviceIdleController: boolean removeSystemPowerWhitelistAppInternal(java.lang.String)>
<android.app.StatsManager.PullAtomMetadata: long getCoolDownMillis()>
<com.android.systemui.statusbar.policy.MobileSignalController: void updateConnectivity(java.util.BitSet,java.util.BitSet)>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageResolver: boolean hasCache()>
<com.android.server.uri.UriGrantsManagerInternal: void revokeUriPermissionFromOwner(android.os.IBinder,android.net.Uri,int,int,java.lang.String,int)>
<com.android.server.usb.descriptors.UsbDescriptorParser: void <init>(java.lang.String,java.util.ArrayList)>
<android.media.filterfw.samples.CameraEffectsRecordingSample: void onPause()>
<com.android.systemui.shared.system.WindowManagerWrapper: void setNavBarVirtualKeyHapticFeedbackEnabled(boolean)>
<com.android.server.updates.ConfigUpdateInstallReceiver: void postInstall(android.content.Context,android.content.Intent)>
<com.android.settingslib.notification.ZenRadioLayout: void onMeasure(int,int)>
<com.android.settingslib.bluetooth.PanProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: void killUid(int)>
<com.android.systemui.statusbar.phone.NotificationGroupAlertTransferHelper: void <init>(com.android.systemui.statusbar.notification.row.RowContentBindStage)>
<com.android.settingslib.graph.BatteryMeterDrawableBase: void setCharging(boolean)>
<com.android.systemui.bubbles.BubbleStackView.RelativeStackPosition: android.graphics.PointF getAbsolutePositionInRegion(android.graphics.RectF)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>
<com.android.systemui.statusbar.CommandQueue: void animateCollapsePanels(int,boolean)>
<com.android.server.input.InputManagerService: void setFocusedApplication(int,android.view.InputApplicationHandle)>
<com.android.systemui.car.userswitcher.FullscreenUserSwitcherViewMediator: void <init>(com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.car.keyguard.CarKeyguardViewController,com.android.systemui.car.userswitcher.UserSwitchTransitionViewController,com.android.systemui.car.userswitcher.FullScreenUserSwitcherViewController)>
<javax.microedition.khronos.opengles.GL10: void glTexEnvf(int,int,float)>
<com.android.fakeoemfeatures.FakeCoreService: android.os.IBinder onBind(android.content.Intent)>
<com.android.systemui.statusbar.policy.HotspotController: boolean isHotspotTransient()>
<com.android.systemui.volume.VolumeDialogControllerImpl: void setZenMode(int)>
<com.android.shell.BugreportStorageProvider: android.database.Cursor queryRoots(java.lang.String[])>
<com.android.server.tv.tunerresourcemanager.ClientProfile: int getInUseCasSystemId()>
<com.android.server.input.InputManagerService: android.view.InputChannel monitorInput(java.lang.String,int)>
<com.android.server.autofill.AutofillManagerService: void onSwitchUser(int)>
<com.android.settingslib.bluetooth.HearingAidProfile: long getHiSyncId(android.bluetooth.BluetoothDevice)>
<com.android.systemui.tuner.TunerService: void removeTunable(com.android.systemui.tuner.TunerService.Tunable)>
<com.android.settingslib.bluetooth.HearingAidProfile: java.util.List getConnectedDevices()>
<com.android.systemui.qs.SlashDrawable: void draw(android.graphics.Canvas)>
<com.android.systemui.glwallpaper.GLWallpaperRenderer: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.statusbar.StatusBarShellCommand: int onCommand(java.lang.String)>
<com.android.systemui.qs.AlphaControlledSignalTileView.AlphaControlledSlashImageView: void <init>(android.content.Context)>
<android.net.wifi.ScanResult: void <init>(android.net.wifi.WifiSsid,java.lang.String,java.lang.String,long,int,java.lang.String,int,int,long,int,int,int,int,int,boolean)>
<com.android.settingslib.wifi.WifiStatusTracker: void <init>(android.content.Context,android.net.wifi.WifiManager,android.net.NetworkScoreManager,android.net.ConnectivityManager,java.lang.Runnable)>
<com.android.systemui.pip.tv.PipControlButtonView: void startFocusGainAnimation()>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String)>
<com.android.settingslib.suggestions.SuggestionController: java.util.List getSuggestions()>
<com.android.server.DeviceIdleController: java.lang.String[] getRemovedSystemPowerWhitelistAppsInternal()>
<com.android.fakeoemfeatures.FakeView: void <init>(android.content.Context)>
<android.widget.TextViewFontFamilyLayoutPerfTest: java.util.Collection layouts()>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String encodeCaCertificateAlias(java.lang.String)>
<com.android.server.TelephonyRegistry.ConfigurationProvider: boolean isRegistrationLimitEnabledInPlatformCompat(int)>
<com.android.server.tv.UinputBridge: void sendGamepadKey(android.os.IBinder,int,boolean)>
<android.net.wifi.hotspot2.PasspointConfiguration: java.lang.String[] getAaaServerTrustedNames()>
<com.android.shell.HeapDumpActivity: void onCreate(android.os.Bundle)>
<com.android.server.statusbar.StatusBarManagerInternal: void showScreenPinningRequest(int)>
<com.android.systemui.statusbar.dagger.StatusBarDependenciesModule: com.android.systemui.statusbar.NotificationMediaManager provideNotificationMediaManager(android.content.Context,dagger.Lazy,dagger.Lazy,com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.systemui.statusbar.MediaArtworkProcessor,com.android.systemui.statusbar.phone.KeyguardBypassController,com.android.systemui.util.concurrency.DelayableExecutor,com.android.systemui.util.DeviceConfigProxy,com.android.systemui.media.MediaDataManager)>
<com.android.server.usb.descriptors.report.UsbStrings: java.lang.String getACStreamingInterfaceName(byte)>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getPrimaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>
<com.google.android.startop.iorap.SystemServiceUserEvent: void <init>(int,int)>
<android.perftests.utils.Stats: long getMax()>
<android.os.ParcelPerfTest: void timeSetDataPosition()>
<com.android.networkstack.tethering.TetheringDependencies: com.android.networkstack.tethering.OffloadController getOffloadController(android.os.Handler,android.net.util.SharedLog,com.android.networkstack.tethering.OffloadController.Dependencies)>
<com.android.systemui.plugins.FalsingPlugin: com.android.systemui.plugins.FalsingManager getFalsingManager(android.content.Context)>
<com.android.systemui.classifier.FalsingManagerFake: void onUnlockHintStarted()>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger: int getInt(java.lang.String,int)>
<com.android.systemui.SystemUIService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.pm.ShortcutService: int getIconMaxDimensions(java.lang.String,int)>
<javax.microedition.khronos.opengles.GL10: void glDisable(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setOverScrolledPixels(float,boolean,boolean)>
<com.android.systemui.bubbles.BubbleStackView: com.android.systemui.bubbles.BadgedImageView getBubbleAt(int)>
<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller.SessionInfo generateInfoScrubbed(boolean)>
<android.graphics.perftests.RenderNodePerfTest: void testSetOutline()>
<com.android.server.statusbar.StatusBarManagerService: void onDisplayAdded(int)>
<com.android.server.pm.PackageManagerService: void <init>(com.android.server.pm.PackageManagerService.Injector,com.android.server.pm.PackageManagerService.TestParams)>
<android.net.wifi.hotspot2.pps.HomeSp: long[] getMatchAnyOis()>
<com.android.systemui.util.sensors.ProximitySensor: void unregister(com.android.systemui.util.sensors.ThresholdSensor.Listener)>
<com.android.server.accessibility.gestures.TouchState: com.android.server.accessibility.gestures.TouchState.ReceivedPointerTracker getReceivedPointerTracker()>
<com.android.wallpapercropper.WallpaperCropActivity.BitmapCropTask: void <init>(android.content.Context,android.content.res.Resources,int,android.graphics.RectF,int,int,int,boolean,boolean,java.lang.Runnable)>
<com.android.server.pm.ApexManager: com.android.server.pm.ApexManager getInstance()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean hasActiveClearableNotifications()>
<com.android.systemui.biometrics.AuthBiometricFaceView.IconController: void showStaticDrawable(int)>
<android.net.wifi.WifiConfiguration: java.lang.String getKeyIdForCredentials(android.net.wifi.WifiConfiguration)>
<android.perftests.utils.TraceMarkParser: void visit(java.lang.String)>
<com.android.server.timedetector.TimeDetectorStrategy.Callback: void acquireWakeLock()>
<com.android.systemui.volume.ConfigurableTexts: int add(android.widget.TextView,int)>
<com.android.server.slice.PinnedSliceState: void mergeSpecs(android.app.slice.SliceSpec[])>
<com.android.systemui.screenshot.ScreenshotSelectorView: void stopSelection()>
<com.android.systemui.qs.tiles.LocationTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.statusbar.policy.LocationController,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.plugins.ActivityStarter)>
<com.android.systemui.statusbar.notification.TransformState.TransformInfo: boolean isAnimating()>
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder setGroupOperatingBand(int)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean handleGiveSystemAudioModeStatus(com.android.server.hdmi.HdmiCecMessage)>
<com.android.systemui.statusbar.policy.InflatedSmartReplies: boolean hasFreeformRemoteInput(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.gallery3d.exif.ExifTag: boolean equals(java.lang.Object)>
<android.net.ip.IpClientCallbacks: void onReachabilityLost(java.lang.String)>
<com.android.statementservice.retriever.AbstractAssetMatcher: int getMatchedLookupKey()>
<com.android.settingslib.CustomDialogPreferenceCompat.CustomPreferenceDialogFragment: void onDialogClosed(boolean)>
<android.net.wifi.hotspot2.pps.Credential: void setCertCredential(android.net.wifi.hotspot2.pps.Credential.CertificateCredential)>
<com.android.server.contentcapture.ContentCaptureManagerService: com.android.server.contentcapture.ContentCapturePerUserService newServiceLocked(int,boolean)>
<com.android.systemui.statusbar.phone.NavigationBarTransitions: void applyDarkIntensity(float)>
<com.android.systemui.statusbar.ViewTransformationHelper: void setVisible(boolean)>
<com.google.android.startop.iorap.AppIntentEvent: void writeToParcel(android.os.Parcel,int)>
<com.android.settingslib.deviceinfo.StorageManagerVolumeProvider: long getFreeBytes(android.app.usage.StorageStatsManager,android.os.storage.VolumeInfo)>
<com.android.systemui.statusbar.CommandQueue: void onDisplayReady(int)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void onDensityOrFontScaleChanged()>
<com.android.server.biometrics.face.FaceAuthenticator: void <init>(android.hardware.face.IFaceService)>
<com.android.systemui.volume.VolumeDialogControllerImpl.MediaSessionsCallbacks: void onRemoteVolumeChanged(android.media.session.MediaSession.Token,int)>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setActualHeight(int)>
<android.content.pm.PackageManagerInternal: boolean isPlatformSigned(java.lang.String)>
<com.android.systemui.qs.QSDualTileLabel: void setFirstLineCaret(android.graphics.drawable.Drawable)>
<com.android.systemui.SlicePermissionActivity: void onCreate(android.os.Bundle)>
<com.android.settingslib.fuelgauge.BatteryStatus: boolean isOverheated()>
<com.android.settingslib.wifi.TestAccessPointBuilder: com.android.settingslib.wifi.TestAccessPointBuilder setRssi(int)>
<com.android.settingslib.wifi.WifiTrackerFactory: com.android.settingslib.wifi.WifiTracker create(android.content.Context,com.android.settingslib.wifi.WifiTracker.WifiListener,com.android.settingslib.core.lifecycle.Lifecycle,boolean,boolean)>
<com.android.systemui.pip.PipTaskOrganizer: android.graphics.Rect getLastReportedBounds()>
<com.android.systemui.qs.tiles.NfcTile: void handleUserSwitch(int)>
<com.android.systemui.statusbar.phone.DozeParameters: boolean getProxCheckBeforePulse()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: com.android.systemui.statusbar.notification.row.ExpandableNotificationRowController getRowController()>
<com.android.systemui.statusbar.CommandQueue: void showPinningEscapeToast()>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper.Callback: boolean needsAntiFalsing()>
<com.android.systemui.volume.ZenModePanel: void createZenButtons()>
<com.android.systemui.statusbar.policy.ConfigurationController.ConfigurationListener: void onLocaleListChanged()>
<com.android.settingslib.volume.Util: java.lang.String bitFieldToString(int,int[],java.lang.String[])>
<com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl: com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl.QualifiedTelephonyTimeZoneSuggestion getLatestTelephonySuggestion(int)>
<com.android.server.biometrics.face.FaceConstants: int actionBiometricAuth()>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: java.lang.String toString()>
<com.android.server.pm.dex.DexManager: void <init>(android.content.Context,android.content.pm.IPackageManager,com.android.server.pm.PackageDexOptimizer,com.android.server.pm.Installer,java.lang.Object)>
<android.net.wifi.rtt.WifiRttManager: void cancelRanging(android.os.WorkSource)>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void hideNotificationIconArea(boolean)>
<com.android.systemui.statusbar.policy.Clock: void dispatchDemoCommand(java.lang.String,android.os.Bundle)>
<com.android.settingslib.datetime.ZoneGetter: java.lang.CharSequence getTimeZoneOffsetAndName(android.content.Context,java.util.TimeZone,java.util.Date)>
<android.net.wifi.p2p.WifiP2pWfdInfo: boolean isContentProtectionSupported()>
<com.android.server.usb.descriptors.UsbEndpointDescriptor: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.systemui.statusbar.phone.HeadsUpAppearanceController: boolean isShown()>
<com.android.systemui.statusbar.policy.NetworkController: void removeCallback(com.android.systemui.statusbar.policy.NetworkController.SignalCallback)>
<com.android.server.biometrics.RemovalClient: boolean onRemoved(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.systemui.pip.tv.PipControlsViewController: void <init>(com.android.systemui.pip.tv.PipControlsView,com.android.systemui.pip.tv.PipManager,android.view.LayoutInflater,android.os.Handler)>
<android.net.wifi.WifiInfo.Builder: android.net.wifi.WifiInfo build()>
<com.android.server.accessibility.AccessibilityManagerService: void onServiceInfoChangedLocked(com.android.server.accessibility.AccessibilityUserState)>
<com.android.systemui.qs.external.CustomTile: int getMetricsCategory()>
<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfoForUid(android.net.Network,int,boolean)>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcher.Container: void setKeyguardUserSwitcher(com.android.systemui.statusbar.policy.KeyguardUserSwitcher)>
<com.android.systemui.car.userswitcher.UserGridRecyclerView.UserAdapter: void onCancel(android.content.DialogInterface)>
<com.android.server.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setRippleColor(int)>
<com.android.systemui.statusbar.phone.KeyguardIndicationTextView: void switchIndication(int)>
<com.android.server.webkit.SystemInterface: void killPackageDependents(java.lang.String)>
<com.android.keyguard.KeyguardAbsKeyInputView: void onPause()>
<com.android.server.wallpaper.WallpaperManagerService.Lifecycle: void <init>(android.content.Context)>
<com.android.server.storage.StorageUserConnection: void startSession(java.lang.String,android.os.ParcelFileDescriptor,java.lang.String,java.lang.String)>
<com.android.photos.views.TiledImageView: void setTranslationX(float)>
<com.android.systemui.statusbar.notification.row.HybridGroupManager: android.widget.TextView bindOverflowNumber(android.widget.TextView,int,android.view.ViewGroup)>
<com.android.server.DynamicSystemService: boolean remove()>
<com.android.systemui.statusbar.notification.stack.AnimationFilter: com.android.systemui.statusbar.notification.stack.AnimationFilter animateX()>
<com.android.systemui.statusbar.CommandQueue: void animateCollapsePanels()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setServerParams(int,int,byte[])>
<com.android.server.policy.keyguard.KeyguardStateMonitor: boolean hasLockscreenWallpaper()>
<com.android.systemui.car.volume.CarVolumeDialogImpl: void setCarServiceProvider(com.android.systemui.car.CarServiceProvider)>
<com.android.systemui.wifi.WifiDebuggingActivity: void onStop()>
<com.android.systemui.statusbar.notification.VisualStabilityManager: void setUpWithPresenter(com.android.systemui.statusbar.NotificationPresenter)>
<android.net.wifi.hotspot2.OsuProvider: void <init>(java.lang.String,java.util.Map,java.lang.String,android.net.Uri,java.lang.String,java.util.List)>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: void dispatchDemoCommand(java.lang.String,android.os.Bundle)>
<com.android.keyguard.clock.ClockOptionsProvider: java.lang.String getType(android.net.Uri)>
<com.android.systemui.statusbar.phone.StatusBar: boolean onBackPressed()>
<com.android.printspooler.ui.PageAdapter.ContentCallbacks: void onSecurePdfFile()>
<com.android.systemui.statusbar.dagger.StatusBarDependenciesModule: com.android.systemui.statusbar.CommandQueue provideCommandQueue(android.content.Context,com.android.systemui.tracing.ProtoTracer)>
<com.android.systemui.doze.DozeHost: void setAnimateWakeup(boolean)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: void <init>(com.android.internal.logging.UiEventLogger)>
<com.android.keyguard.clock.BubbleClockController: android.graphics.Bitmap getPreview(int,int)>
<com.android.systemui.qs.external.CustomTile: void handleClick()>
<android.net.wifi.WifiNetworkSuggestion: boolean isEnhancedOpen()>
<com.android.systemui.analytics.SensorLoggerSession: com.android.systemui.statusbar.phone.nano.TouchAnalyticsProto.Session toProto()>
<com.android.server.biometrics.BiometricServiceBase: void addLockoutResetCallback(android.hardware.biometrics.IBiometricServiceLockoutResetCallback)>
<com.android.server.Watchdog: void addThread(android.os.Handler,long)>
<com.android.settingslib.drawer.SwitchController.MetaData: com.android.settingslib.drawer.SwitchController.MetaData setSummary(java.lang.String)>
<com.android.hotspot2.osulogin.OsuLoginActivity: boolean onKeyDown(int,android.view.KeyEvent)>
<com.android.server.pm.UserTypeDetails: int getBadgeLabel(int)>
<com.android.server.pm.PackageManagerService: void checkPackageStartable(java.lang.String,int)>
<com.android.systemui.egg.MLand: void reset()>
<android.net.wifi.WifiNetworkAgentSpecifier: boolean satisfiesNetworkSpecifier(android.net.wifi.WifiNetworkSpecifier)>
<com.android.systemui.pip.tv.PipControlButtonView: void startFocusLossAnimation()>
<com.android.systemui.plugins.ClockPlugin: void onDestroyView()>
<com.example.android.networkusage.NetworkActivity: boolean onCreateOptionsMenu(android.view.Menu)>
<com.android.server.lights.LogicalLight: void turnOff()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void reportSuccessfulPasswordAttempt(int)>
<com.android.settingslib.widget.ActionBarShadowController: com.android.settingslib.widget.ActionBarShadowController attachToView(android.view.View,androidx.lifecycle.Lifecycle,android.view.View)>
<com.android.systemui.doze.DozeHost.PulseCallback: void onPulseFinished()>
<com.android.systemui.pip.phone.PipTouchHandler: void onAspectRatioChanged()>
<com.android.systemui.classifier.DirectionClassifier: java.lang.String getTag()>
<com.android.server.uri.UriGrantsManagerInternal: void removeUriPermissionIfNeeded(com.android.server.uri.UriPermission)>
<android.net.wifi.rtt.ResponderLocation: double getLatitudeUncertainty()>
<com.android.server.policy.WindowManagerPolicy: void enableScreenAfterBoot()>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: int getVersionCode()>
<android.app.backup.ForwardingBackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<com.android.systemui.volume.VolumeToolTipView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.net.wifi.rtt.ResponderConfig: android.net.wifi.rtt.ResponderConfig fromScanResult(android.net.wifi.ScanResult)>
<android.os.ParcelArrayPerfTest: void timeReadIntArray()>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: boolean shouldPanelBeVisible()>
<com.android.server.pm.PackageManagerService: void notifyPackageChanged(java.lang.String,int)>
<com.android.systemui.qs.external.TileServices: void updateQsTile(android.service.quicksettings.Tile,android.os.IBinder)>
<com.android.systemui.qs.touch.SwipeDetector: void setDetectableScrollConditions(int,boolean)>
<com.android.server.biometrics.face.FaceService: com.android.server.biometrics.BiometricUtils getBiometricUtils()>
<com.android.settingslib.media.InfoMediaDevice: java.lang.String getName()>
<android.net.wifi.WifiScanner.ScanData: void addResults(android.net.wifi.ScanResult[])>
<android.perftests.utils.PerfManualStatusReporter: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>
<com.android.server.CountryDetectorService: android.location.Country detectCountry()>
<com.android.systemui.statusbar.notification.TransformState: void transformViewFrom(com.android.systemui.statusbar.notification.TransformState,int,com.android.systemui.statusbar.ViewTransformationHelper.CustomTransformation,float)>
<com.android.server.pm.PreferredIntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,com.android.server.pm.PreferredActivity)>
<com.android.systemui.util.concurrency.ConcurrencyModule: java.util.concurrent.Executor provideLongRunningExecutor(android.os.Looper)>
<com.android.systemui.stackdivider.DividerWindowManager: void setSlippery(boolean)>
<com.android.systemui.statusbar.notification.ImageTransformState: android.graphics.drawable.Icon getIcon()>
<com.android.server.stats.StatsManagerService: void unsetBroadcastSubscriber(long,long,java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: int getPositionOfChild(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.wallpapercropper.WallpaperCropActivity.BitmapCropTask: void onPostExecute(java.lang.Boolean)>
<com.android.settingslib.CustomDialogPreference: void setOnShowListener(android.content.DialogInterface.OnShowListener)>
<com.android.server.pm.UserManagerService: int getUserHandle(int)>
<com.android.systemui.SwipeHelper: float getUnscaledEscapeVelocity()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow.LongPressListener: boolean onLongPress(android.view.View,int,int,com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.MenuItem)>
<com.android.systemui.car.userswitcher.CarStatusBarHeader: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setStatusBarState(int)>
<com.android.server.ConnectivityService: android.net.LinkProperties getLinkPropertiesForType(int)>
<com.android.systemui.pip.phone.PipTouchHandler: void onImeVisibilityChanged(boolean,int)>
<com.android.systemui.globalactions.GlobalActionsDialog.MyPowerOptionsAdapter: long getItemId(int)>
<com.android.server.BatteryService: void <init>(android.content.Context)>
<com.android.commands.sm.Sm: void runIsolatedStorage()>
<com.android.systemui.statusbar.phone.RotationButton: boolean isVisible()>
<com.android.settingslib.widget.AppEntityInfo.Builder: com.android.settingslib.widget.AppEntityInfo.Builder setSummary(java.lang.CharSequence)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isUserLocked()>
<com.android.systemui.statusbar.notification.row.NotifBindPipeline.BindCallback: void onBindFinished(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean,boolean)>
<com.android.uiautomator.testrunner.TestCaseCollector: void addTestClass(java.lang.String,java.lang.String)>
<com.android.systemui.car.statusbar.DozeServiceHost: boolean isPowerSaveActive()>
<com.android.systemui.statusbar.CrossFadeHelper: void fadeOut(android.view.View,float)>
<com.android.server.policy.WindowManagerPolicy: boolean hasNavigationBar()>
<com.android.server.SensorNotificationService: void onProviderEnabled(java.lang.String)>
<com.android.systemui.fragments.FragmentService: com.android.systemui.fragments.FragmentHostManager getFragmentHostManager(android.view.View)>
<com.android.server.pm.dex.DexoptOptions: boolean isDexoptInstallForRestore()>
<android.net.wifi.p2p.WifiP2pGroup: java.util.Collection getClientList()>
<com.android.settingslib.Utils: int getDisabled(android.content.Context,int)>
<com.android.uiautomator.core.UiScrollable: boolean exists(com.android.uiautomator.core.UiSelector)>
<com.android.systemui.statusbar.phone.PanelViewController: void setExpandedHeightInternal(float)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean handleInitiateArc(com.android.server.hdmi.HdmiCecMessage)>
<android.net.wifi.ISuggestionConnectionStatusListener: void onConnectionStatus(android.net.wifi.WifiNetworkSuggestion,int)>
<com.android.systemui.shared.system.ActivityManagerWrapper: void cancelRecentsAnimation(boolean)>
<com.android.providers.settings.SettingsProvider: void writeFallBackSettingsFiles(java.util.List)>
<android.app.usage.UsageStatsManagerInternal: void reportShortcutUsage(java.lang.String,java.lang.String,int)>
<android.net.TetheringManager: boolean isTetheringSupported()>
<com.android.keyguard.clock.ImageClock: void onAttachedToWindow()>
<android.util.StatsEvent.Builder: android.util.StatsEvent.Builder writeAttributionChain(int[],java.lang.String[])>
<com.android.server.compat.OverrideValidatorImpl: com.android.internal.compat.OverrideAllowedState getOverrideAllowedState(long,java.lang.String)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void updateFooterView(boolean,boolean,boolean)>
<com.android.systemui.statusbar.phone.ShadeControllerImpl: void animateCollapsePanels(int,boolean,boolean)>
<android.view.autofill.LoginTest: void testChange_noService()>
<com.android.systemui.statusbar.phone.DozeScrimController: void cancelPendingPulseTimeout()>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String decodeCaCertificateAlias(java.lang.String)>
<com.android.server.display.DisplayModeDirector.BrightnessObserver: void onDeviceConfigHighBrightnessThresholdsChanged(int[],int[])>
<com.android.systemui.statusbar.notification.stack.SwipeableView: boolean hasFinishedInitialization()>
<com.android.systemui.doze.DozeLog: void traceDozeSuppressed(com.android.systemui.doze.DozeMachine.State)>
<android.perftests.utils.SettingsStateManager: void set(java.lang.String)>
<com.android.systemui.qs.external.TileLifecycleManager: boolean isToggleableTile()>
<com.android.systemui.pip.tv.PipControlButtonView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.gallery3d.glrenderer.UploadedTexture: void onFreeBitmap(android.graphics.Bitmap)>
<com.android.systemui.statusbar.CommandQueue: void showPinningEnterExitToast(boolean)>
<com.android.keyguard.NumPadKey: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.net.wifi.p2p.WifiP2pManager.ActionListener: void onSuccess()>
<com.android.server.twilight.TwilightService: void onStatusChanged(java.lang.String,int,android.os.Bundle)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSeInfoUser(java.lang.String)>
<com.android.systemui.qs.tiles.UserTile: android.content.Intent getLongClickIntent()>
<android.net.wifi.WifiScanner.ParcelableScanData: int describeContents()>
<com.android.systemui.shared.system.WallpaperManagerCompat: float getWallpaperZoomOutMaxScale(android.content.Context)>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.settingslib.applications.StorageStatsSource.AppStorageStatsImpl: long getDataBytes()>
<com.android.systemui.statusbar.phone.SystemUIDialog: void setNegativeButton(int,com.android.systemui.statusbar.phone.NotificationPanelViewController.OnClickListener)>
<com.android.settingslib.bluetooth.HidProfile: int getDrawableResource(android.bluetooth.BluetoothClass)>
<com.android.systemui.doze.DozeHost: void removeCallback(com.android.systemui.doze.DozeHost.Callback)>
<com.android.location.provider.LocationProviderBase: void setAllowed(boolean)>
<android.content.pm.PackageManagerInternal: java.lang.String getSetupWizardPackageName()>
<android.os.ParcelArrayPerfTest: void timeReadByteArray()>
<com.android.server.pm.permission.BasePermission: boolean isConfigurator()>
<com.android.systemui.plugins.qs.QSTile: java.lang.String getTileSpec()>
<com.android.networkstack.tethering.BpfCoordinator: void dump(com.android.internal.util.IndentingPrintWriter)>
<com.android.systemui.statusbar.policy.UserSwitcherController: void addAdapter(java.lang.ref.WeakReference)>
<com.android.server.audio.AudioService: void setMasterMute(boolean,int,java.lang.String,int)>
<com.android.settingslib.drawer.DynamicSummary: java.lang.String getDynamicSummary()>
<javax.microedition.khronos.opengles.GL11: void glTexEnviv(int,int,java.nio.IntBuffer)>
<com.android.photos.views.TiledImageView: void onLayout(boolean,int,int,int,int)>
<com.android.server.usb.descriptors.UsbVCOutputTerminal: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setDirectBootAware(boolean)>
<com.android.printspooler.widget.PrintOptionsLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.assist.ui.InvocationLightsView: void onDarkIntensity(float)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getUserControlDisabledPackages(android.content.ComponentName)>
<com.android.server.pm.permission.BasePermission: boolean addToTree(int,android.content.pm.PermissionInfo,com.android.server.pm.permission.BasePermission)>
<com.android.egg.neko.NekoLand: void onCreate(android.os.Bundle)>
<com.android.systemui.classifier.AnglesClassifier: java.lang.String getTag()>
<com.android.systemui.classifier.FalsingManagerFake: void onLeftAffordanceHintStarted()>
<com.android.server.policy.WindowOrientationListener: void onTouchEnd()>
<com.android.systemui.util.DeviceConfigProxy: java.lang.String getProperty(java.lang.String,java.lang.String)>
<com.android.server.pm.Installer: void destroyAppData(java.lang.String,java.lang.String,int,int,long)>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator: void setLaunchResult(int,boolean)>
<com.android.keyguard.KeyguardHostView: void setViewMediatorCallback(com.android.keyguard.ViewMediatorCallback)>
<android.content.pm.PackageManagerInternal: int[] getPermissionGids(java.lang.String,int)>
<com.android.systemui.analytics.DataCollector: void onTrackingStopped()>
<com.android.systemui.statusbar.notification.TransformState: void prepareFadeIn()>
<android.net.ip.IpServer: java.lang.String interfaceName()>
<com.android.settingslib.bluetooth.PanProfile: int getDrawableResource(android.bluetooth.BluetoothClass)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: android.view.ViewGroup getCurrentHeaderView()>
<com.android.systemui.car.navigationbar.CarNavigationBarController: void <init>(android.content.Context,com.android.systemui.car.navigationbar.NavigationBarViewFactory,com.android.systemui.car.navigationbar.ButtonSelectionStateController,dagger.Lazy,com.android.systemui.car.navigationbar.ButtonRoleHolderController,com.android.systemui.car.navigationbar.SystemBarConfigs)>
<com.android.server.pm.PackageManagerServiceCompilerMapping: java.lang.String getReasonName(int)>
<com.android.server.IntentResolver: int register_intent_filter(java.lang.Object,java.util.Iterator,android.util.ArrayMap,java.lang.String)>
<com.android.server.pm.PackageManagerService: boolean hasSystemUidErrors()>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: com.android.printspooler.model.PrintSpoolerService getService()>
<com.android.systemui.bubbles.BubbleIconFactory: android.graphics.Bitmap getCircleBitmap(android.graphics.drawable.AdaptiveIconDrawable,int)>
<com.android.server.display.BrightnessMappingStrategy: float convertToNits(int)>
<com.android.settingslib.schedulesprovider.SchedulesProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.server.accessibility.AccessibilityWindowManager: void <init>(java.lang.Object,android.os.Handler,com.android.server.wm.WindowManagerInternal,com.android.server.accessibility.AccessibilityWindowManager.AccessibilityEventSender,com.android.server.accessibility.AccessibilitySecurityPolicy,com.android.server.accessibility.AccessibilitySecurityPolicy.AccessibilityUserManager)>
<com.android.powermodel.AppActivity.Builder: void addComponentActivity(com.android.powermodel.Component,com.android.powermodel.ComponentActivity)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void onDetachedFromWindow()>
<com.android.systemui.globalactions.GlobalActionsGridLayout: void addToListView(android.view.View,boolean)>
<com.android.systemui.qs.tileimpl.QSIconViewImpl: void disableAnimation()>
<com.google.errorprone.bugpatterns.android.RethrowFromSystemChecker: com.google.errorprone.matchers.Description matchCatch(com.sun.source.tree.CatchTree,com.google.errorprone.VisitorState)>
<com.android.settingslib.core.lifecycle.ObservableFragment: com.android.settingslib.core.lifecycle.Lifecycle getSettingsLifecycle()>
<com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter: boolean accept(java.lang.reflect.Method)>
<com.android.gallery3d.common.Utils: boolean handleInterrruptedException(java.lang.Throwable)>
<com.android.server.audio.AudioService: void unregisterAudioFocusClient(java.lang.String)>
<com.android.server.locksettings.LockSettingsService: void setLong(java.lang.String,long,int)>
<com.android.systemui.doze.DozeService: void onPluginConnected(com.android.systemui.plugins.DozeServicePlugin,android.content.Context)>
<com.android.systemui.qs.tiles.UserDetailItemView: void <init>(android.content.Context)>
<android.widget.EditTextCursorMovementPerfTest: void testCursorMovement()>
<com.android.settingslib.Utils: int getTetheringLabel(android.net.ConnectivityManager)>
<com.android.systemui.settings.ToggleSlider.Listener: void onInit(com.android.systemui.settings.ToggleSlider)>
<com.android.systemui.statusbar.phone.StatusBarRemoteInputCallback: void onLockedRemoteInput(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,android.view.View)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void applyRoundness()>
<com.android.systemui.shared.system.ActivityManagerWrapper: boolean setTaskWindowingModeSplitScreenPrimary(int,int,android.graphics.Rect)>
<com.android.settingslib.widget.AdaptiveOutlineDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getLongSupportMessage(android.content.ComponentName)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: int resolveProfileParentLocked(int)>
<com.android.systemui.qs.QSPanel: void onCollapse()>
<com.android.commands.uiautomator.Launcher.Command: java.lang.String name()>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void setAutoHideController(com.android.systemui.statusbar.phone.AutoHideController)>
<com.android.systemui.statusbar.phone.NavigationHandle: void onDraw(android.graphics.Canvas)>
<com.google.android.startop.iorap.AppLaunchEvent.IntentStarted: void <init>(long,android.content.Intent,long)>
<com.android.systemui.doze.DozeLog: void traceKeyguardBouncerChanged(boolean)>
<com.android.systemui.wm.DisplayLayout: android.view.DisplayCutout computeSafeInsets(android.view.DisplayCutout,int,int)>
<android.net.wifi.p2p.WifiP2pGroupList: void remove(int)>
<com.android.server.TelephonyRegistry: void removeOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
<com.android.server.soundtrigger.SoundTriggerLogger.Event: com.android.server.soundtrigger.SoundTriggerLogger.Event printLog(java.lang.String)>
<com.android.settingslib.suggestions.SuggestionControllerMixin: void <init>(android.content.Context,com.android.settingslib.suggestions.SuggestionControllerMixin.SuggestionControllerHost,com.android.settingslib.core.lifecycle.Lifecycle,android.content.ComponentName)>
<com.android.systemui.classifier.FalsingManagerImpl: void onScreenOff()>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void onStandby(boolean,int)>
<com.android.systemui.shared.plugins.PluginInstanceManager.PluginContextWrapper: void <init>(android.content.Context,java.lang.ClassLoader)>
<com.android.settingslib.suggestions.SuggestionControllerMixin: void dismissSuggestion(android.service.settings.suggestions.Suggestion)>
<com.android.printservice.recommendation.util.Preconditions: float checkArgumentInRange(float,float,float,java.lang.String)>
<android.app.backup.BackupUtilsTest: void testIsFileSpecifiedInPathList_whenFileAndPathListHasDirectoryWhoseNameIsPrefix2()>
<com.android.systemui.doze.DozeSuspendScreenStatePreventingAdapter: com.android.systemui.doze.DozeMachine.Service wrapIfNeeded(com.android.systemui.doze.DozeMachine.Service,com.android.systemui.statusbar.phone.DozeParameters)>
<javax.microedition.khronos.opengles.GL11: void glGetClipPlanex(int,java.nio.IntBuffer)>
<com.android.systemui.shared.system.TaskStackChangeListener: void onTaskDescriptionChanged(android.app.ActivityManager.RunningTaskInfo)>
<com.android.server.appop.AppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>
<com.android.server.pm.UserRestrictionsUtils: void merge(android.os.Bundle,android.os.Bundle)>
<com.android.server.usb.descriptors.report.ReportCanvas: void write(java.lang.String)>
<com.android.server.infra.ServiceNameResolver: java.lang.String getDefaultServiceName(int)>
<com.android.settingslib.deviceinfo.AbstractWifiMacAddressPreferenceController: void <init>(android.content.Context,com.android.settingslib.core.lifecycle.Lifecycle)>
<com.android.photos.views.TiledImageView: void <init>(android.content.Context)>
<android.net.wifi.aware.WifiAwareManager: void terminateSession(int,int)>
<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: boolean logStartedIntent(android.content.Intent,int)>
<com.android.systemui.statusbar.policy.BluetoothController: int getMaxConnectionState(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.server.media.MediaSessionRecord: void <init>(int,int,int,java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,com.android.server.media.MediaSessionService,android.os.Looper,int)>
<com.android.systemui.statusbar.notification.stack.ViewState: void animateTo(android.view.View,com.android.systemui.statusbar.notification.stack.AnimationProperties)>
<com.android.systemui.SwipeHelper: void <init>(int,com.android.systemui.SwipeHelper.Callback,android.content.Context,com.android.systemui.plugins.FalsingManager)>
<com.android.server.pm.permission.BasePermission: int[] computeGids(int)>
<javax.microedition.khronos.egl.EGLContext: javax.microedition.khronos.egl.EGL getEGL()>
<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: int getGenerationId(int)>
<com.android.systemui.statusbar.phone.StatusBar: void showKeyguard()>
<com.android.location.provider.ActivityRecognitionEvent: void <init>(java.lang.String,int,long)>
<com.android.server.usb.descriptors.UsbACAudioStreamEndpoint: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.server.pm.PackageSettingBase: void setInstallerPackageName(java.lang.String)>
<android.net.wifi.ParcelUtil: void writeCertificates(android.os.Parcel,java.security.cert.X509Certificate[])>
<com.android.settingslib.core.instrumentation.LogWriter: void action(int,int,int,java.lang.String,int)>
<com.android.settingslib.RestrictedPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: int hashCode()>
<com.android.systemui.model.SysUiState: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.doze.DozeMachine.Part: void dump(java.io.PrintWriter)>
<com.android.server.search.Searchables: void <init>(android.content.Context,int)>
<com.android.gallery3d.common.Utils: byte[] getBytes(java.lang.String)>
<com.android.systemui.doze.DozeLog: void tracePickupWakeUp(boolean)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void routeToInputFromPortId(int)>
<android.net.wifi.p2p.WifiP2pGroup: boolean removeClient(java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void initialize(java.lang.String,java.lang.String,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow.ExpansionLogger,com.android.systemui.statusbar.phone.KeyguardBypassController,com.android.systemui.statusbar.phone.NotificationGroupManager,com.android.systemui.statusbar.policy.HeadsUpManager,com.android.systemui.statusbar.notification.row.RowContentBindStage,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow.OnExpandClickListener,com.android.systemui.statusbar.NotificationMediaManager,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow.OnAppOpsClickListener,com.android.systemui.plugins.FalsingManager,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.notification.people.PeopleNotificationIdentifier)>
<com.android.systemui.qs.QSFragment: void animateHeaderSlidingIn(long)>
<android.net.util.PrefixUtils: android.net.IpPrefix ipAddressAsPrefix(java.net.InetAddress)>
<com.android.systemui.qs.QSContainerImpl: void updateExpansion()>
<com.android.server.DeviceIdleController: void onAnyMotionResult(int)>
<com.android.settingslib.graph.BatteryMeterDrawableBase: void setPadding(int,int,int,int)>
<com.android.systemui.statusbar.notification.row.ExpandableView: com.android.systemui.statusbar.notification.stack.ExpandableViewState getViewState()>
<com.android.systemui.tuner.StatusBarSwitch: void onAttached()>
<com.android.systemui.keyguard.KeyguardViewMediator: com.android.keyguard.KeyguardViewController registerStatusBar(com.android.systemui.statusbar.phone.StatusBar,android.view.ViewGroup,com.android.systemui.statusbar.phone.NotificationPanelViewController,com.android.systemui.statusbar.phone.BiometricUnlockController,android.view.ViewGroup,android.view.View,com.android.systemui.statusbar.phone.KeyguardBypassController)>
<com.android.server.media.MediaSessionRecord: com.android.server.media.MediaButtonReceiverHolder getMediaButtonReceiver()>
<com.android.server.hdmi.HdmiCecMessage: int getSource()>
<com.android.server.wallpaper.IWallpaperManagerService: void onUnlockUser(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void updateNotificationColor()>
<com.android.settingslib.drawable.UserIconDrawable: void invalidateSelf()>
<com.android.server.biometrics.ClientMonitor: void destroy()>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton3Text(int)>
<com.android.server.display.utils.AmbientFilter: boolean addValue(long,float)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isTrusted()>
<com.android.server.policy.WindowManagerPolicy.WindowState: java.lang.String getOwningPackage()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getUid()>
<com.android.settingslib.graph.BatteryMeterDrawableBase: int getIntrinsicWidth()>
<com.android.server.usb.UsbAlsaDevice: void updateWiredDeviceConnectionState(boolean)>
<com.android.systemui.statusbar.phone.ManagedProfileController.Callback: void onManagedProfileChanged()>
<com.android.systemui.globalactions.ListGridLayout: int getColumnCount()>
<com.android.gallery3d.glrenderer.BasicTexture: boolean isLoaded()>
<com.android.systemui.qs.QSContainerImpl: void disable(int,int,boolean)>
<com.android.networkstack.tethering.UpstreamNetworkState: void <init>(android.net.LinkProperties,android.net.NetworkCapabilities,android.net.Network)>
<com.android.systemui.globalactions.GlobalActionsFlatLayout: void onLayout(boolean,int,int,int,int)>
<com.android.systemui.VendorServices: void start()>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: boolean needsFalsingProtection()>
<android.content.pm.PackageManagerInternal: void grantImplicitAccess(int,android.content.Intent,int,int,boolean)>
<com.android.server.people.data.ConversationInfo: boolean isPersonImportant()>
<com.android.settingslib.applications.ServiceListing.Builder: com.android.settingslib.applications.ServiceListing build()>
<com.android.systemui.analytics.DataCollector: void onSucccessfulUnlock()>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void setShelfIconVisible(boolean)>
<com.android.systemui.statusbar.StatusBarIconView: void setOnDismissListener(java.lang.Runnable)>
<com.android.uiautomator.core.Configurator: long getKeyInjectionDelay()>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean isInputMethodTarget()>
<com.android.egg.neko.Cat: int getBodyColor()>
<android.media.MediaSession2: void cancelSessionCommand(android.media.MediaSession2.ControllerInfo,java.lang.Object)>
<com.android.systemui.statusbar.HeadsUpStatusBarView: void onMeasure(int,int)>
<com.android.systemui.util.sensors.ThresholdSensor: void register(com.android.systemui.util.sensors.ThresholdSensor.Listener)>
<com.android.photos.DumbBitmapRegionDecoder: int getWidth()>
<com.android.server.pm.PackageManagerService: void forceDexOpt(java.lang.String)>
<com.android.systemui.statusbar.NavigationBarController: void touchAutoDim(int)>
<com.android.systemui.car.window.OverlayViewGlobalStateController: void <init>(com.android.systemui.car.window.SystemUIOverlayWindowController)>
<com.android.systemui.qs.PagedTileLayout: void setExpansion(float)>
<javax.microedition.khronos.opengles.GL10: void glMaterialxv(int,int,java.nio.IntBuffer)>
<com.android.server.usb.descriptors.UsbACMixerUnit: byte getNumInputs()>
<com.android.server.statusbar.StatusBarManagerService: void onNotificationVisibilityChanged(com.android.internal.statusbar.NotificationVisibility[],com.android.internal.statusbar.NotificationVisibility[])>
<com.android.systemui.dagger.SystemUIModule: com.android.systemui.dagger.ContextComponentHelper bindComponentHelper(com.android.systemui.dagger.ContextComponentResolver)>
<android.net.wifi.p2p.WifiP2pConfig: void writeToParcel(android.os.Parcel,int)>
<android.app.StatsManager: void setBroadcastSubscriber(android.app.PendingIntent,long,long)>
<com.android.systemui.statusbar.phone.ScrimController: void setScrimBehindChangeRunnable(java.lang.Runnable)>
<android.widget.EditTextLongTextPerfTest: void <init>(java.lang.String,int,int)>
<com.android.systemui.statusbar.notification.collection.coordinator.HideNotifsForOtherUsersCoordinator: void <init>(com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.statusbar.notification.collection.coordinato.SharedCoordinatorLogger)>
<com.android.uiautomator.core.UiScrollable: boolean flingForward()>
<com.android.server.soundtrigger.SoundTriggerHelper: android.hardware.soundtrigger.SoundTrigger.ModuleProperties getModuleProperties()>
<com.android.vpndialogs.ConfirmDialog: void onCreate(android.os.Bundle)>
<com.android.systemui.classifier.FalsingManagerProxy: boolean shouldEnforceBouncer()>
<com.android.systemui.statusbar.notification.row.NotificationGutsManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean isFirstInSection()>
<com.android.commands.bmgr.Bmgr: void main(java.lang.String[])>
<com.android.systemui.tuner.BetterListPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.car.volume.CarVolumeDialogComponent: com.android.systemui.plugins.VolumeDialog createDefault()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean shouldDelayChildPressedState()>
<com.android.settingslib.bluetooth.A2dpProfile: int getProfileId()>
<com.android.systemui.glwallpaper.ImageWallpaperRenderer: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.settingslib.location.InjectedSetting: boolean equals(java.lang.Object)>
<com.android.keyguard.KeyguardMessageArea: void onThemeChanged()>
<com.android.keyguard.KeyguardSliceView: void onVisibilityAggregated(boolean)>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: void updateZenModeConfig()>
<android.net.wifi.aware.DiscoverySessionCallback: void onMessageSendFailed(int)>
<com.android.systemui.statusbar.StatusBarIconView: com.android.internal.statusbar.StatusBarIcon getStatusBarIcon()>
<com.android.server.usb.descriptors.Usb10ASFormatI: void <init>(int,byte,byte,byte,int)>
<com.android.systemui.statusbar.AnimatedImageView: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setRoundness(float,float)>
<com.android.systemui.car.window.OverlayViewGlobalStateController: void registerMediator(com.android.systemui.car.window.OverlayViewMediator)>
<javax.obex.ObexHelper: byte[] getTagValue(byte,byte[])>
<com.android.systemui.car.window.OverlayPanelViewController: void animatePanel(float,boolean)>
<com.android.server.pm.UserManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.statusbar.StatusBarManagerInternal: void startAssist(android.os.Bundle)>
<com.android.systemui.statusbar.notification.stack.SectionHeaderView: boolean needsClippingToShelf()>
<com.android.systemui.qs.QSTileHost: void addTile(android.content.ComponentName,boolean)>
<com.android.systemui.recents.OverviewProxyRecentsImpl: void hideRecentApps(boolean,boolean)>
<com.android.systemui.pip.PipBoundsHandler: boolean onDisplayRotationChanged(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,int,int,int,android.window.WindowContainerTransaction)>
<com.android.server.PruneInstantAppsJobService: boolean onStartJob(android.app.job.JobParameters)>
<com.android.server.pm.Installer: void linkNativeLibraryDirectory(java.lang.String,java.lang.String,java.lang.String,int)>
<com.android.statementservice.retriever.Utils: java.util.List getCertFingerprintsFromPackageManager(java.lang.String,android.content.Context)>
<com.android.server.infra.AbstractPerUserSystemService: java.lang.CharSequence getServiceLabelLocked()>
<com.android.systemui.statusbar.notification.NotificationEntryManager: boolean hasVisibleNotifications()>
<com.android.server.pm.PackageManagerServiceCompilerMapping: java.lang.String getCompilerFilterForReason(int)>
<com.android.systemui.qs.customize.TileAdapter.Holder: void clearDrag()>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: int getBondState(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.NotifPromoter: boolean shouldPromoteToTopLevel(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void bindService(android.content.Context)>
<android.net.TetheringManager.TetheringRequest.Builder: android.net.TetheringManager.TetheringRequest build()>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean hasKeyguard()>
<javax.obex.ServerOperation: javax.obex.HeaderSet getReceivedHeader()>
<lockedregioncodeinjection.LockTargetState: java.util.List getTargets()>
<com.android.keyguard.KeyguardPasswordView: void setPasswordEntryInputEnabled(boolean)>
<com.android.gallery3d.exif.ExifInterface: double convertLatOrLongToDouble(com.android.gallery3d.exif.Rational[],java.lang.String)>
<com.android.printspooler.widget.CustomErrorEditText: java.lang.CharSequence getError()>
<com.android.media.remotedisplay.RemoteDisplay: int getVolume()>
<com.android.egg.neko.PrefState: void setFoodState(int)>
<com.android.server.locksettings.LockSettingsService: void tieManagedProfileLockIfNecessary(int,com.android.internal.widget.LockscreenCredential)>
<android.net.ITetheringConnector: void unregisterTetheringEventCallback(android.net.ITetheringEventCallback,java.lang.String)>
<com.android.gallery3d.glrenderer.GLCanvas: void clearBuffer(float[])>
<com.android.systemui.qs.PseudoGridView.ViewGroupAdapterBridge: void link(android.view.ViewGroup,android.widget.BaseAdapter)>
<android.net.ip.IpClientManager: boolean readPacketFilterComplete(byte[])>
<com.android.server.pm.PackageManagerService: int checkUidSignatures(int,int)>
<com.android.server.soundtrigger_middleware.HalFactory: android.hardware.soundtrigger.V2_0.ISoundTriggerHw create()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isNetworkLoggingEnabled(android.content.ComponentName,java.lang.String)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void resetInitializationTime()>
<android.text.StaticLayoutMultithreadPerfTest: void testCreate_RandomText_Thread_4()>
<android.net.wifi.aware.DiscoverySession: void <init>(android.net.wifi.aware.WifiAwareManager,int,int)>
<com.android.systemui.pip.phone.PipMenuActivityController: void onActivityUnpinned()>
<com.android.photos.BitmapRegionTileSource.BitmapSource: int getPreviewSize()>
<com.android.systemui.volume.VolumeDialogControllerImpl: void setVolumePolicy(android.media.VolumePolicy)>
<com.android.systemui.statusbar.policy.SecurityController: java.lang.CharSequence getDeviceOwnerOrganizationName()>
<com.android.server.vr.VrManagerInternal: boolean isCurrentVrListener(java.lang.String,int)>
<com.android.systemui.statusbar.policy.ConfigurationController.ConfigurationListener: void onThemeChanged()>
<com.android.systemui.util.sensors.ProximitySensor.ProximityCheck: void setTag(java.lang.String)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void addAllPermissionGroups(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>
<com.android.server.biometrics.BiometricUserState: java.lang.String getUniqueName()>
<android.text.StaticLayoutPerfTest: void testCreate_RandomText_NoStyled_Greedy_Hyphenation()>
<com.android.systemui.statusbar.notification.row.NotificationGuts.OnSettingsClickListener: void onClick(android.view.View,int)>
<com.android.server.locksettings.LockSettingsService: void systemReady()>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl removePermission(int)>
<com.android.settingslib.TwoTargetPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.keyguard.DismissCallbackRegistry: void notifyDismissCancelled()>
<com.android.server.pm.PackageManagerService: android.content.pm.IPackageInstaller getPackageInstaller()>
<com.android.systemui.statusbar.KeyguardAffordanceView: void onDraw(android.graphics.Canvas)>
<com.android.server.accessibility.gestures.GestureUtils: boolean isMultiTap(android.view.MotionEvent,android.view.MotionEvent,int,int)>
<com.android.server.biometrics.AuthenticationClient: boolean shouldFrameworkHandleLockout()>
<com.android.server.accessibility.gestures.TouchState: android.view.MotionEvent getLastReceivedEvent()>
<android.net.wifi.WifiEnterpriseConfig.SupplicantLoader: java.lang.String loadValue(java.lang.String)>
<com.android.systemui.tuner.CustomListPreference: void onPrepareDialogBuilder(android.app.AlertDialog.Builder,android.content.DialogInterface.OnClickListener)>
<com.android.systemui.qs.tiles.RotationLockTile: void handleClick()>
<com.android.systemui.car.window.OverlayPanelViewController.OpenGestureListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<com.android.systemui.statusbar.policy.ZenModeController: boolean areNotificationsHiddenInShade()>
<com.android.server.pm.Policy: boolean hasGlobalSeinfo()>
<com.android.server.usb.descriptors.Usb10ASGeneral: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<android.net.wifi.hotspot2.pps.Policy.RoamingPartner: java.lang.String toString()>
<com.android.server.biometrics.ClientMonitor: boolean getIsRestricted()>
<android.net.NetworkMonitorManager: boolean notifyNetworkConnected(android.net.LinkProperties,android.net.NetworkCapabilities)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: void unpair()>
<com.android.shell.BugreportWarningActivity: void onClick(android.content.DialogInterface,int)>
<com.android.gallery3d.exif.ExifTag: void setOffset(int)>
<com.android.systemui.shared.system.TaskStackChangeListener: void onActivityLaunchOnSecondaryDisplayRerouted()>
<android.net.TetheringManager.TetheringEventCallback: void onTetheredInterfacesChanged(java.util.List)>
<com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProvider: boolean shouldHeadsUp(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.gallery3d.util.IntArray: void add(int)>
<android.net.NetworkStackClient.Dependencies: android.net.ConnectivityModuleConnector getConnectivityModuleConnector()>
<com.android.settingslib.deviceinfo.AbstractUptimePreferenceController: void <init>(android.content.Context,com.android.settingslib.core.lifecycle.Lifecycle)>
<android.os.ParcelPerfTest: void timeWriteByte()>
<com.android.systemui.bubbles.BubbleStackView: void getTouchableRegion(android.graphics.Rect)>
<com.android.server.usb.descriptors.Usb20ASFormatIII: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.server.accessibility.AccessibilityWindowManager: int findWindowIdLocked(int,android.os.IBinder)>
<com.android.server.media.MediaRouterService: void unregisterManager(android.media.IMediaRouter2Manager)>
<com.android.systemui.shared.system.TransactionCompat: void deferTransactionUntil(android.view.SurfaceControl.Transaction,android.view.SurfaceControl,android.view.SurfaceControl,long)>
<com.android.settingslib.media.LocalMediaManager: void <init>(android.content.Context,java.lang.String,android.app.Notification)>
<com.android.server.soundtrigger_middleware.ISoundTriggerHw2: void getModelState(int)>
<android.view.ViewShowHidePerfTest: void testAdd()>
<com.android.systemui.statusbar.phone.NotificationGroupManager: void setHeadsUpManager(com.android.systemui.statusbar.policy.HeadsUpManager)>
<com.android.server.pm.UserTypeDetails: void addDefaultRestrictionsTo(android.os.Bundle)>
<com.android.systemui.statusbar.policy.KeyButtonView: void setCode(int)>
<com.android.server.testing.shadows.ShadowEventLog: void setUp()>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent,java.lang.String,int,int)>
<com.android.systemui.statusbar.policy.MobileSignalController: void setAirplaneMode(boolean)>
<com.android.systemui.statusbar.notification.row.NotificationInfo.OnSettingsClickListener: void onClick(android.view.View,android.app.NotificationChannel,int)>
<com.android.server.biometrics.BiometricServiceBase.ServiceListener: void onAcquired(long,int,int)>
<com.android.systemui.wm.DisplayLayout: int densityDpi()>
<com.android.systemui.qs.QSFragment: android.view.View getHeader()>
<com.android.systemui.statusbar.policy.OnHeadsUpChangedListener: void onHeadsUpStateChanged(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.server.PersistentDataBlockManagerInternal: void setTestHarnessModeData(byte[])>
<android.net.wifi.p2p.WifiP2pManager: void cancelConnect(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.server.media.MediaRouterService: void setSessionVolumeWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,int)>
<com.android.systemui.shared.plugins.PluginInitializer: java.lang.String[] getWhitelistedPlugins(android.content.Context)>
<com.android.systemui.qs.tiles.DataSaverTile: com.android.systemui.plugins.qs.QSTile.BooleanState newTileState()>
<com.android.systemui.bubbles.animation.AnimatableScaleMatrix: float getScaleX()>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector scrollable(boolean)>
<com.android.server.NetworkScoreService: void registerNetworkScoreCache(int,android.net.INetworkScoreCache,int)>
<com.android.gallery3d.exif.ExifInterface: java.io.OutputStream getExifWriterStream(java.lang.String)>
<com.android.server.ConnectivityService: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
<com.android.externalstorage.TestDocumentsProvider: boolean onCreate()>
<com.android.systemui.screenshot.ScreenshotSelectorView: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.AnimatableProperty: com.android.systemui.statusbar.notification.AnimatableProperty from(android.util.Property,int,int,int)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService.PackageFreezer freezePackageForInstall(java.lang.String,int,java.lang.String)>
<com.android.systemui.recents.Recents: void showRecentApps(boolean)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: java.lang.CharSequence getActiveRemoteInputText()>
<com.android.systemui.tuner.LockscreenFragment.Adapter: void onBindViewHolder(com.android.systemui.tuner.LockscreenFragment.Holder,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setOnPulseHeightChangedListener(java.lang.Runnable)>
<com.android.printservice.recommendation.plugin.hp.MDnsUtils: boolean isVendorPrinter(android.net.nsd.NsdServiceInfo,java.lang.String[])>
<android.net.wifi.aware.ConfigRequest: int hashCode()>
<com.android.systemui.statusbar.policy.SmartReplyView: void onMeasure(int,int)>
<com.android.systemui.statusbar.CommandQueue: void onBiometricAuthenticated()>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: int getProductID()>
<com.android.systemui.statusbar.phone.ManagedProfileControllerImpl: void setWorkModeEnabled(boolean)>
<com.android.systemui.keyguard.KeyguardSliceProvider: void updateClockLocked()>
<com.android.systemui.statusbar.policy.BatteryController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.settingslib.bluetooth.HidDeviceProfile: int getConnectionPolicy(android.bluetooth.BluetoothDevice)>
<com.android.server.policy.WakeGestureListener: void <init>(android.content.Context,android.os.Handler)>
<com.android.statementservice.retriever.AbstractAsset: boolean followInsecureInclude()>
<android.net.wifi.p2p.WifiP2pWfdInfo: void <init>(android.net.wifi.p2p.WifiP2pWfdInfo)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setContentHeightAnimating(boolean)>
<com.android.systemui.qs.tiles.BatterySaverTile: android.content.Intent getLongClickIntent()>
<com.android.systemui.qs.external.CustomTile: com.android.systemui.qs.external.CustomTile create(com.android.systemui.qs.QSHost,java.lang.String,android.content.Context)>
<android.net.wifi.p2p.WifiP2pWfdInfo: void setControlPort(int)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: int getCustomBackgroundColor()>
<com.android.systemui.statusbar.CastDrawable: boolean getPadding(android.graphics.Rect)>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: com.android.server.policy.WindowManagerPolicy.WindowState getInputMethodWindowLw()>
<com.android.server.broadcastradio.hal2.AnnouncementAggregator: void close()>
<android.net.wifi.aware.IWifiAwareDiscoverySessionCallback: void onMessageSendSuccess(int)>
<com.android.server.locksettings.SyntheticPasswordManager: long generateHandle()>
<javax.microedition.khronos.opengles.GL11: void glGetBufferParameteriv(int,int,int[],int)>
<javax.obex.ClientOperation: java.io.DataInputStream openDataInputStream()>
<com.android.systemui.qs.QSSecurityFooter.VpnSpan: int hashCode()>
<com.android.systemui.statusbar.NotificationShelf: void bind(com.android.systemui.statusbar.notification.stack.AmbientState,com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout)>
<javax.obex.ServerRequestHandler: void onDisconnect(javax.obex.HeaderSet,javax.obex.HeaderSet)>
<com.android.systemui.statusbar.policy.RemoteInputView: boolean requestScrollTo()>
<com.android.server.appop.AppOpsService: void stopWatchingMode(com.android.internal.app.IAppOpsCallback)>
<android.net.wifi.WifiInfo: void setPasspointUniqueId(java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(android.os.UserHandle)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void updateBackgroundTint()>
<com.android.server.GestureLauncherService: boolean isCameraLaunchSettingEnabled(android.content.Context,int)>
<com.android.systemui.statusbar.phone.StatusBarIconController.DarkIconManager: android.widget.LinearLayout.LayoutParams onCreateLayoutParams()>
<com.android.systemui.plugins.ActivityStarter: void postQSRunnableDismissingKeyguard(java.lang.Runnable)>
<com.android.server.stats.StatsCompanionService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.keyguard.KeyguardAbsKeyInputView: void showPromptReason(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getAccountTypesWithManagementDisabled()>
<lockedregioncodeinjection.LockTarget: java.lang.String getPostOwner()>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: void setLaunchTransitionFadingAway(boolean)>
<com.android.server.ServiceWatcher: com.android.server.ServiceWatcher.ServiceInfo getBoundService()>
<com.android.systemui.statusbar.notification.FakeShadowView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.net.wifi.WifiInfo: java.lang.String toString()>
<com.android.server.pm.PackageList: void onPackageAdded(java.lang.String,int)>
<com.android.systemui.statusbar.phone.DozeServiceHost: void removeCallback(com.android.systemui.doze.DozeHost.Callback)>
<com.android.systemui.statusbar.AlertingNotificationManager: void showNotification(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.phone.PanelBar: boolean panelEnabled()>
<com.android.systemui.tuner.ShortcutParser.Shortcut: com.android.systemui.tuner.ShortcutParser.Shortcut create(android.content.Context,java.lang.String)>
<com.android.systemui.statusbar.notification.stack.AmbientState: float getStackTranslation()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setHeadsUpAnimatingAway(boolean)>
<com.android.settingslib.dream.DreamBackend: void setActivatedOnSleep(boolean)>
<com.android.server.timezonedetector.TimeZoneDetectorStrategy: void handleAutoTimeZoneDetectionChanged()>
<com.android.server.autofill.RemoteFillService.FillServiceCallbacks: void onFillRequestSuccess(int,android.service.autofill.FillResponse,java.lang.String,int)>
<com.android.systemui.statusbar.phone.LightBarController: void setNavigationBar(com.android.systemui.statusbar.phone.LightBarTransitionsController)>
<com.android.systemui.statusbar.notification.row.FooterViewButton: void <init>(android.content.Context)>
<com.android.systemui.assist.AssistManager: int toLoggingSubType(int)>
<com.android.server.autofill.AutofillManagerService: void onSettingsChanged(int,java.lang.String)>
<com.android.systemui.statusbar.StatusBarIconView.OnVisibilityChangedListener: void onVisibilityChanged(int)>
<com.android.systemui.ResizingSpace: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getAllIntentFilters(java.lang.String)>
<com.android.keyguard.KeyguardHostView: com.android.keyguard.KeyguardSecurityModel.SecurityMode getSecurityMode()>
<com.android.server.pm.permission.PermissionsState: boolean isMissing(int)>
<com.android.systemui.util.leak.LeakDetector: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.google.android.startop.iorap.AppLaunchEvent.ActivityRecordProtoParcelable: byte[] create(android.os.Parcel)>
<com.android.server.vr.VrManagerService: void onBootPhase(int)>
<com.android.server.usb.descriptors.UsbACAudioControlEndpoint: int getMaxPacketSize()>
<com.android.networkstack.tethering.OffloadHardwareInterface.ControlCallback: void onStoppedUnsupported()>
<android.net.wifi.SoftApCapability: boolean equals(java.lang.Object)>
<com.android.server.audio.AudioEventLogger.Event: java.lang.String toString()>
<com.android.server.pm.parsing.pkg.AndroidPackage: byte[] getRestrictUpdateHash()>
<com.android.systemui.statusbar.notification.row.HybridGroupManager: com.android.systemui.statusbar.notification.row.HybridNotificationView bindFromNotification(com.android.systemui.statusbar.notification.row.HybridNotificationView,android.view.View,android.service.notification.StatusBarNotification,android.view.ViewGroup)>
<com.android.server.contentcapture.ContentCaptureMetricsLogger: void writeSessionEvent(int,int,int,android.content.ComponentName,android.content.ComponentName,boolean)>
<com.android.systemui.classifier.FalsingManagerFake: boolean isFalseTouch(int)>
<com.android.settingslib.widget.BarViewInfo: int compareTo(com.android.settingslib.widget.BarViewInfo)>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindGlobalActionsComponent(com.android.systemui.globalactions.GlobalActionsComponent)>
<com.android.systemui.qs.QSPanel: void showEdit(android.view.View)>
<com.android.server.biometrics.Utils: boolean isCredentialRequested(android.os.Bundle)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector focused(boolean)>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String toAppInfoToString()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void onChildVisibilityChanged(android.view.View,int,int)>
<com.android.gallery3d.exif.ExifInterface: int getFlagsFromAllowedIfds(int[])>
<android.os.UserManagerInternal: boolean exists(int)>
<com.android.systemui.qs.tileimpl.QSTileImpl.H: void <init>(android.os.Looper)>
<com.android.location.provider.LocationProviderBase: boolean onSendExtraCommand(java.lang.String,android.os.Bundle)>
<com.android.keyguard.PasswordTextView: void deleteLastChar()>
<com.android.systemui.qs.QuickStatusBarHeader: void onDetachedFromWindow()>
<com.android.systemui.CornerHandleView: void onDraw(android.graphics.Canvas)>
<com.android.server.pm.pkg.PackageStateUnserialized: com.android.server.pm.pkg.PackageStateUnserialized setHiddenUntilInstalled(boolean)>
<com.android.settingslib.wifi.AccessPoint: java.util.Map getScoredNetworkCache()>
<com.android.systemui.tuner.ClockPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.biometrics.BiometricServiceBase.BiometricServiceListener: void onAuthenticationSucceededInternal(boolean,byte[],boolean)>
<com.android.systemui.shared.system.InputMonitorCompat: void pilferPointers()>
<com.android.systemui.car.volume.VolumeUI: void <init>(android.content.Context,android.content.res.Resources,android.os.Handler,com.android.systemui.car.CarServiceProvider,dagger.Lazy)>
<com.android.systemui.statusbar.phone.UserAvatarView: void setFrameColor(android.content.res.ColorStateList)>
<com.android.server.pm.PackageManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.notification.MessagingLayoutTransformState: void reset()>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setNativeLibraryRootDir(java.lang.String)>
<com.android.systemui.car.navigationbar.CarNavigationButton: java.lang.String getRoleName()>
<com.android.systemui.doze.DozeScreenBrightness: void <init>(android.content.Context,com.android.systemui.doze.DozeMachine.Service,android.hardware.SensorManager,android.hardware.Sensor,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.doze.DozeHost,android.os.Handler,com.android.systemui.doze.AlwaysOnDisplayPolicy)>
<com.android.server.biometrics.ClientMonitor: int getTargetUserId()>
<com.android.systemui.plugins.FalsingManager: void onSuccessfulUnlock()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationTemplateViewWrapper: void onContentUpdated(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.statusbar.notification.collection.provider.HighPriorityProvider: boolean isHighPriority(com.android.systemui.statusbar.notification.collection.ListEntry)>
<com.android.server.policy.WakeGestureListener: boolean isSupported()>
<com.android.uiautomator.core.UiScrollable: com.android.uiautomator.core.UiObject getChildByDescription(com.android.uiautomator.core.UiSelector,java.lang.String)>
<com.android.gallery3d.exif.ExifInterface: boolean isIfdAllowed(int,int)>
<com.android.server.input.InputManagerService: android.view.VerifiedInputEvent verifyInputEvent(android.view.InputEvent)>
<com.android.systemui.qs.SecureSetting: boolean isListening()>
<com.android.systemui.statusbar.phone.ScrimController: void onHideWallpaperTimeout()>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: void setAlpha(int)>
<com.android.printservice.recommendation.PrintServicePlugin: java.lang.CharSequence getPackageName()>
<com.android.systemui.qs.tileimpl.QSTileImpl: void setListening(java.lang.Object,boolean)>
<com.android.keyguard.KeyguardHostView: void showMessage(java.lang.CharSequence,android.content.res.ColorStateList)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isRemovingAdmin(android.content.ComponentName,int)>
<com.android.systemui.SizeCompatModeActivityController: void onDisplayRemoved(int)>
<com.android.systemui.car.window.OverlayWindowModule: com.android.systemui.car.window.OverlayViewMediator bindCarKeyguardViewMediator(com.android.systemui.car.keyguard.CarKeyguardViewMediator)>
<com.android.systemui.assist.AssistDisclosure: void <init>(android.content.Context,android.os.Handler)>
<com.android.systemui.volume.VolumeUI: void <init>(android.content.Context,com.android.systemui.volume.VolumeDialogComponent)>
<com.android.systemui.statusbar.policy.NetworkController.AccessPointController: void scanForAccessPoints()>
<com.android.settingslib.development.DeveloperOptionsPreferenceController: void onDeveloperOptionsSwitchEnabled()>
<javax.microedition.khronos.opengles.GL11: void glGetClipPlanex(int,int[],int)>
<com.android.systemui.shared.system.MetricsLoggerCompat: void action(int,int)>
<com.android.settingslib.RestrictedPreferenceHelper: void <init>(android.content.Context,androidx.preference.Preference,android.util.AttributeSet)>
<com.android.systemui.qs.PagedTileLayout: int getNumPages()>
<com.android.systemui.util.AlarmTimeout: boolean isScheduled()>
<com.android.server.pm.PackageSetting: boolean isSystem()>
<com.android.systemui.statusbar.phone.DozeServiceHost: void onSlpiTap(float,float)>
<com.android.systemui.util.wakelock.WakeLock: java.lang.Runnable wrap(java.lang.Runnable)>
<android.app.ResourcesManagerPerfTest: void getResourcesCompressedUncached()>
<com.android.server.display.utils.RollingBuffer: long getTime(int)>
<com.android.server.om.OverlayableInfoCallback: android.content.om.OverlayableInfo getOverlayableForTarget(java.lang.String,java.lang.String,int)>
<com.example.android.networkusage.NetworkActivity: void onDestroy()>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean isChangingPosition()>
<android.net.wifi.IWifiConnectedNetworkScorer: void onStart(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserRestriction(android.content.ComponentName,java.lang.String,boolean,boolean)>
<com.android.systemui.statusbar.policy.DeadZone: float getFlash()>
<com.android.systemui.statusbar.notification.stack.AmbientState: int getAnchorViewIndex()>
<com.android.keyguard.KeyguardStatusView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.accessibility.gestures.TouchState: boolean isTouchInteracting()>
<com.android.server.biometrics.BiometricUtils: void addBiometricForUser(android.content.Context,int,android.hardware.biometrics.BiometricAuthenticator.Identifier)>
<com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder: com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder withTunerFactory(com.android.systemui.statusbar.policy.ExtensionController.TunerFactory)>
<com.android.server.locksettings.LockSettingsStrongAuth: void reportSuccessfulStrongAuthUnlock(int)>
<com.android.systemui.statusbar.phone.StatusBarIconHolder: com.android.systemui.statusbar.phone.StatusBarIconHolder fromResId(android.content.Context,int,java.lang.CharSequence)>
<com.android.systemui.keyguard.KeyguardViewMediator: void onDreamingStarted()>
<com.android.printservice.recommendation.plugin.xerox.XeroxPrintServiceRecommendationPlugin: int getName()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setAboveShelf(boolean)>
<android.net.wifi.IOnWifiUsabilityStatsListener: void onWifiUsabilityStats(int,boolean,android.net.wifi.WifiUsabilityStatsEntry)>
<android.net.wifi.SoftApConfiguration.Builder: android.net.wifi.SoftApConfiguration.Builder setClientControlByUserEnabled(boolean)>
<com.android.settingslib.RestrictedLockUtilsInternal: com.android.settingslib.RestrictedLockUtils.EnforcedAdmin getDeviceOwner(android.content.Context)>
<com.android.systemui.statusbar.NotificationRemoteInputManager.RemoteInputActiveExtender: void setShouldManageLifetime(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.keyguard.KeyguardMessageArea: void <init>(android.content.Context,android.util.AttributeSet,com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.statusbar.policy.ConfigurationController)>
<com.android.server.textservices.TextServicesManagerService: void getSpellCheckerService(int,java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>
<com.android.keyguard.KeyguardSliceView: void onDetachedFromWindow()>
<com.android.systemui.classifier.FalsingManagerProxy: void onScreenTurningOn()>
<com.android.server.contentcapture.ContentCaptureManagerService: void onSettingsChanged(int,java.lang.String)>
<com.android.systemui.media.dialog.MediaOutputBaseDialog: void <init>(android.content.Context,com.android.systemui.media.dialog.MediaOutputController)>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void disable(int,int,int,boolean)>
<com.android.settingslib.media.LocalMediaManager: boolean connectDevice(com.android.settingslib.media.MediaDevice)>
<com.android.server.NativeDaemonEvent: java.lang.String getField(int)>
<com.android.keyguard.KeyguardHostView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.policy.ConfigurationController.ConfigurationListener: void onConfigChanged(android.content.res.Configuration)>
<com.android.systemui.statusbar.notification.collection.coalescer.GroupCoalescer: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.util.leak.GarbageMonitor: com.android.systemui.util.leak.GarbageMonitor.ProcessMemInfo getMemInfo(int)>
<android.net.wifi.WifiManager: android.net.Network getCurrentNetwork()>
<com.android.printservice.recommendation.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<com.android.systemui.statusbar.policy.KeyButtonView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<com.android.server.RescueParty: void registerHealthObserver(android.content.Context)>
<com.android.statementservice.retriever.Relation: com.android.statementservice.retriever.Relation create(java.lang.String)>
<com.android.commands.svc.NfcCommand: java.lang.String longHelp()>
<com.android.settingslib.development.AbstractEnableAdbPreferenceController: void writeAdbSetting(boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void onLayout(boolean,int,int,int,int)>
<com.android.server.biometrics.ClientMonitor: int[] getAcquireIgnorelist()>
<com.android.server.webkit.SystemInterface: android.webkit.WebViewProviderInfo[] getWebViewPackages()>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: boolean isCurrentProfile(int)>
<com.android.systemui.SwipeHelper: float getEscapeVelocity()>
<com.android.systemui.plugins.statusbar.StatusBarStateController: float getDozeAmount()>
<android.text.PrecomputedTextMemoryUsageTest: void testMemoryUsage_Latin_Hyphenation()>
<com.android.systemui.statusbar.phone.NotificationsQuickSettingsContainer: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>
<android.net.wifi.rtt.ResponderLocation: double getAltitude()>
<com.android.systemui.statusbar.notification.row.NotificationGuts: void setClipBottomAmount(int)>
<com.android.server.accessibility.AccessibilityManagerService: void notifyAccessibilityButtonClicked(int,java.lang.String)>
<com.example.android.networkusage.SettingsActivity: void onResume()>
<com.android.egg.neko.PrefState: int getFoodState()>
<com.android.uiautomator.core.UiSelector: java.lang.String toString()>
<android.media.Session2Command: int describeContents()>
<android.net.wifi.WifiNetworkSuggestion: boolean isMetered()>
<com.android.settingslib.notification.EnableZenModeDialog: void bindConditions(android.service.notification.Condition)>
<android.net.wifi.WifiNetworkSuggestion: boolean isAppInteractionRequired()>
<android.net.wifi.p2p.WifiP2pManager: void responderReportNfcHandover(android.net.wifi.p2p.WifiP2pManager.Channel,java.lang.String,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void dumpDebug(android.util.proto.ProtoOutputStream,long)>
<com.android.systemui.biometrics.AuthBiometricView: void onMeasure(int,int)>
<android.net.wifi.WifiManager.NetworkRequestMatchCallback: void onMatch(java.util.List)>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: android.view.View getDraggedOutBubble()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView: android.widget.FrameLayout.LayoutParams generateLayoutParams(android.util.AttributeSet)>
<com.android.systemui.pip.phone.PipMenuActivity: void onUserInteraction()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setChildrenExpanded(boolean,boolean)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceController: void onAmbientColorTemperatureChanged(float)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: void setDisableReasonCounter(int,int)>
<android.util.StatsEvent.Builder: android.util.StatsEvent.Builder addBooleanAnnotation(byte,boolean)>
<com.android.settingslib.core.ConfirmationDialogController: void showConfirmationDialog(androidx.preference.Preference)>
<com.android.server.LockGuard: java.lang.Object installNewLock(int)>
<com.android.settingslib.location.SettingsInjector.Setting: long getElapsedTime()>
<com.android.systemui.shared.system.ActivityOptionsCompat: android.app.ActivityOptions setFreezeRecentTasksList(android.app.ActivityOptions)>
<com.android.systemui.car.window.OverlayViewController: boolean isVisible()>
<com.android.gallery3d.exif.Rational: long getDenominator()>
<com.android.powermodel.AppActivity.Builder: com.android.powermodel.AppActivity build()>
<com.android.server.textclassifier.FixedSizeQueue: boolean remove(java.lang.Object)>
<com.android.packageinstaller.PackageInstallerActivity.AppErrorDialog: void setArgument(java.lang.CharSequence)>
<com.android.server.audio.AudioSystemAdapter: int handleDeviceConfigChange(int,java.lang.String,java.lang.String,int)>
<com.android.server.textclassifier.TextClassificationManagerService: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage.Request,android.service.textclassifier.ITextClassifierCallback)>
<com.android.systemui.statusbar.notification.collection.coordinator.PreparationCoordinator: void <init>(com.android.systemui.statusbar.notification.collection.coordinato.PreparationCoordinatorLogger,com.android.systemui.statusbar.notification.collection.NotifInflaterImpl,com.android.systemui.statusbar.notification.row.NotifInflationErrorManager,com.android.systemui.statusbar.notification.collection.NotifViewBarn,com.android.internal.statusbar.IStatusBarService)>
<com.android.server.biometrics.face.FaceAuthenticator: void prepareForAuthentication(boolean,android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiverInternal,java.lang.String,int,int,int,int)>
<com.android.systemui.qs.tiles.DataSaverTile: android.content.Intent getLongClickIntent()>
<com.android.systemui.statusbar.phone.NotificationListenerWithPlugins: void onPluginConnected(com.android.systemui.plugins.NotificationListenerController,android.content.Context)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setJustClicked(boolean)>
<com.android.settingslib.widget.FooterPreference.Builder: com.android.settingslib.widget.FooterPreference.Builder setTitle(java.lang.CharSequence)>
<com.android.server.pm.dex.DexoptOptions: java.lang.String getSplitName()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void onDensityOrFontScaleChanged()>
<com.android.server.pm.permission.PermissionManagerServiceInternal.PermissionCallback: void onPermissionGranted(int,int)>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy: void setSubs(java.util.List)>
<com.android.systemui.statusbar.StatusBarWifiView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.qs.external.TileServices: com.android.systemui.qs.QSTileHost getHost()>
<android.net.wifi.WifiUsabilityStatsEntry: int getCellularSignalStrengthDb()>
<com.android.systemui.bubbles.animation.AnimatableScaleMatrix: void setPivotX(float)>
<com.android.systemui.keyguard.KeyguardViewMediator: void doKeyguardTimeout(android.os.Bundle)>
<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasInput()>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.plugins.ActivityStarter provideActivityStarter(com.android.systemui.ActivityStarterDelegate)>
<android.os.ParcelPerfTest: void tearDown()>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: float getBubbleLeft(int)>
<android.app.backup.ForwardingBackupAgent: void onFullBackup(android.app.backup.FullBackupDataOutput)>
<com.android.systemui.statusbar.HeadsUpStatusBarView: boolean fitSystemWindows(android.graphics.Rect)>
<com.android.systemui.qs.QSDetail: void setupDetailFooter(com.android.systemui.plugins.qs.DetailAdapter)>
<com.android.server.autofill.ui.SaveUi.OnSaveListener: void onDestroy()>
<com.android.server.om.OverlayReferenceMapper: void addPkg(com.android.server.pm.parsing.pkg.AndroidPackage,java.util.Map)>
<com.android.systemui.qs.SignalTileView: android.view.View createIcon()>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: void setMinimumHeightForClipping(int)>
<com.android.systemui.qs.tiles.NfcTile: int getMetricsCategory()>
<com.google.android.startop.iorap.SystemServiceEvent: int describeContents()>
<com.android.server.display.AmbientBrightnessStatsTracker: void stop()>
<com.android.systemui.Prefs: void registerListener(android.content.Context,android.content.SharedPreferences.OnSharedPreferenceChangeListener)>
<com.android.server.usb.UsbService: void enableContaminantDetection(java.lang.String,boolean)>
<com.android.systemui.statusbar.policy.DeviceProvisionedController.DeviceProvisionedListener: void onUserSetupChanged()>
<android.graphics.perftests.PathPerfTest: void testRewind()>
<android.net.wifi.SoftApConfiguration: java.lang.String getPassphrase()>
<com.android.server.pm.PackageManagerService: void deletePreloadsFileCache()>
<com.android.systemui.recents.OverviewProxyService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.phone.NotificationIconContainer.IconState: void initFrom(android.view.View)>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: android.os.UserManager getUserManager()>
<com.android.systemui.statusbar.policy.CallbackController: java.lang.Object observe(androidx.lifecycle.LifecycleOwner,java.lang.Object)>
<com.android.systemui.classifier.HumanInteractionClassifier: void setType(int)>
<com.android.settingslib.bluetooth.HearingAidProfile: void setVolume(int)>
<android.net.wifi.WifiEnterpriseConfig: boolean isAppInstalledDeviceKeyAndCert()>
<com.android.systemui.power.PowerNotificationWarnings: void showThermalShutdownWarning()>
<com.android.systemui.shared.plugins.VersionInfo.InvalidVersionException: boolean isTooNew()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isAllowTaskReparenting()>
<com.android.gallery3d.exif.ExifTag: boolean setValue(long)>
<android.net.wifi.p2p.WifiP2pConfig: int getNetworkId()>
<com.android.systemui.tuner.TunerService.ClearReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.statusbar.CommandQueue: void animateExpandNotificationsPanel()>
<com.android.settingslib.media.BluetoothMediaDevice: java.lang.String getName()>
<com.android.systemui.pip.tv.PipManager.Listener: void onPipActivityClosed()>
<com.android.systemui.InitController: void addPostInitTask(java.lang.Runnable)>
<android.net.wifi.WifiManager.LocalOnlyHotspotSubscription: void finalize()>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: boolean hasCACertInCurrentUser()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void installUpdateFromFile(android.content.ComponentName,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void <init>(android.content.Context,com.android.systemui.statusbar.notification.people.PeopleNotificationIdentifier)>
<com.android.systemui.qs.QSDetail: void animateDetailVisibleDiff(int,int,boolean,android.animation.Animator.AnimatorListener)>
<com.android.server.timezonedetector.ArrayMapWithHistory: int getHistoryCountForKeyForTests(java.lang.Object)>
<com.android.aapt.namespace.app.MainActivity: void onCreate(android.os.Bundle)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void onAddressAllocated(int,int)>
<com.google.android.startop.iorap.SystemServiceUserEvent: java.lang.String toString()>
<com.android.wallpapercropper.WallpaperCropActivity.BitmapCropTask: android.graphics.Point getImageBounds()>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: boolean isOccluded()>
<com.android.systemui.statusbar.phone.StatusBar: void setBouncerShowing(boolean)>
<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy.StartingSurface addSplashScreen(android.os.IBinder,int,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,int,android.content.res.Configuration,int)>
<com.android.server.pm.PackageInstallerService: android.content.pm.ParceledListSlice getStagedSessions()>
<com.android.systemui.statusbar.ViewTransformationHelper.CustomTransformation: boolean customTransformTarget(com.android.systemui.statusbar.notification.TransformState,com.android.systemui.statusbar.notification.TransformState)>
<com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder: com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder withPlugin(java.lang.Class,java.lang.String)>
<com.android.systemui.statusbar.NotificationMediaManager.MediaListener: void onPrimaryMetadataOrStateChanged(android.media.MediaMetadata,int)>
<com.android.uiautomator.core.UiAutomatorBridge: long getSystemLongPressTime()>
<com.android.server.devicepolicy.DevicePolicyCacheImpl: void setScreenCaptureAllowed(int,boolean)>
<com.android.systemui.statusbar.phone.HeadsUpTouchHelper.Callback: android.content.Context getContext()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void onBiometricAuthenticated()>
<com.google.android.startop.iorap.ActivityInfo: boolean equals(java.lang.Object)>
<com.android.server.voiceinteraction.VoiceInteractionManagerService: void onStart()>
<com.android.systemui.screenrecord.RecordingController.RecordingStateChangeCallback: void onCountdownEnd()>
<com.android.systemui.statusbar.policy.CallbackHandler: void setMobileDataEnabled(boolean)>
<com.android.keyguard.KeyguardViewController: void reset(boolean)>
<com.android.server.pm.Installer: void restoreconAppData(java.lang.String,java.lang.String,int,int,int,java.lang.String)>
<com.android.externalstorage.ExternalStorageProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.autofill.ui.SaveUi.OnSaveListener: void onSave()>
<com.android.systemui.statusbar.phone.PanelViewController: float getExpandedHeight()>
<com.android.systemui.statusbar.CommandQueue: void remQsTile(android.content.ComponentName)>
<com.android.systemui.globalactions.GlobalActionsDialog.MyOverflowAdapter: int getCount()>
<com.android.server.locksettings.LockSettingsService: boolean hasPendingEscrowToken(int)>
<com.android.uiautomator.core.UiObject: boolean dragTo(com.android.uiautomator.core.UiObject,int)>
<com.android.systemui.statusbar.phone.NavigationBarFrame: void <init>(android.content.Context)>
<android.net.wifi.IWifiManager: java.util.Map getMatchingOsuProviders(java.util.List)>
<android.os.UserManagerInternal: void setDeviceManaged(boolean)>
<android.net.wifi.hotspot2.pps.Credential: java.security.cert.X509Certificate getCaCertificate()>
<com.android.systemui.biometrics.AuthBiometricView: void onDetachedFromWindow()>
<android.net.wifi.WifiEnterpriseConfig: void setCaCertificateAlias(java.lang.String)>
<com.android.systemui.dagger.ContextComponentResolver: com.android.systemui.recents.RecentsImplementation resolveRecents(java.lang.String)>
<com.android.server.infra.FrameworkResourcesServiceNameResolver: void dumpShort(java.io.PrintWriter)>
<android.util.perftests.LogPerfTest: void testLogPerf()>
<com.android.settingslib.location.InjectedSetting.Builder: com.android.settingslib.location.InjectedSetting.Builder setSettingsActivity(java.lang.String)>
<com.android.systemui.qs.tiles.WifiTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.statusbar.policy.NetworkController,com.android.systemui.plugins.ActivityStarter)>
<com.android.systemui.util.sensors.ProximitySensor: void register(com.android.systemui.util.sensors.ThresholdSensor.Listener)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector fromParent(com.android.uiautomator.core.UiSelector)>
<com.android.server.tv.tunerresourcemanager.ClientProfile: void useLnb(int)>
<com.android.keyguard.PasswordTextView.UserActivityListener: void onUserActivity()>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void setIsStaticLayout(boolean)>
<com.android.server.BinderCallsStatsService.LifeCycle: void onStart()>
<com.android.systemui.car.userswitcher.UserIconProvider: android.graphics.Bitmap assignDefaultIcon(android.os.UserManager,android.content.res.Resources,android.content.pm.UserInfo)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onNotificationDoubleTap(boolean,float,float)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setKeyguardOccluded(boolean)>
<com.android.server.pm.UserManagerService: void setUserRestriction(java.lang.String,boolean,int)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareLogging: void setCaptureState(boolean)>
<com.android.packageinstaller.wear.WearPackageUtil: java.lang.String getSanitizedPackageName(android.net.Uri)>
<com.android.printspooler.model.RemotePrintDocument.UpdateResultCallbacks: void onUpdateCompleted(com.android.printspooler.model.RemotePrintDocument.RemotePrintDocumentInfo)>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: boolean isVolumeRestricted()>
<com.android.settingslib.bluetooth.LocalBluetoothProfileManager: com.android.settingslib.bluetooth.A2dpSinkProfile getA2dpSinkProfile()>
<com.android.settingslib.Utils: int applyAlpha(float,int)>
<com.android.server.wifi.SupplicantManager: void stop()>
<android.net.wifi.hotspot2.PasspointConfiguration: void setCredential(android.net.wifi.hotspot2.pps.Credential)>
<android.net.TetheredClient.AddressInfo: int hashCode()>
<com.android.systemui.qs.QSPanel.QSTileLayout: boolean setMinRows(int)>
<com.android.systemui.statusbar.policy.KeyButtonRipple: float getGlowAlpha()>
<com.android.server.slice.SliceManagerService: java.lang.String[] getAllPackagesGranted(java.lang.String)>
<com.android.server.pm.parsing.PackageParser2: void <init>(java.lang.String[],boolean,android.util.DisplayMetrics,java.io.File,com.android.server.pm.parsing.PackageParser2.Callback)>
<com.android.server.usb.descriptors.Usb10ASFormatII: byte getSamFreqType()>
<com.android.systemui.InitController: void executePostInitTasks()>
<com.android.server.audio.AudioService.VolumeController: void setA11yMode(int)>
<com.android.systemui.statusbar.policy.BatteryControllerImpl: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper.SnoozeOption: android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction getAccessibilityAction()>
<com.android.systemui.statusbar.NotificationHeaderUtil.ResultApplicator: void apply(android.view.View,android.view.View,boolean,boolean)>
<com.android.printspooler.util.BitmapSerializeUtils: void readBitmapPixels(android.graphics.Bitmap,android.os.ParcelFileDescriptor)>
<com.android.systemui.statusbar.phone.DarkIconDispatcherImpl: void applyDark(com.android.systemui.plugins.DarkIconDispatcher.DarkReceiver)>
<com.android.printservice.recommendation.plugin.mdnsFilter.VendorConfig: java.lang.String toString()>
<com.android.server.usb.descriptors.Usb10ACMixerUnit: byte[] getControls()>
<com.android.systemui.doze.DozeMachine: void requestPulse(int)>
<com.android.systemui.classifier.FalsingManagerImpl: boolean isReportingEnabled()>
<com.android.server.media.MediaRouterService: void transferToRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>
<com.android.systemui.statusbar.phone.NavigationModeController: android.content.Context getCurrentUserContext()>
<com.android.server.accounts.AccountManagerService: java.lang.String readAuthTokenInternal(com.android.server.accounts.AccountManagerService.UserAccounts,android.accounts.Account,java.lang.String)>
<com.android.server.pm.UserManagerService: java.util.List getUsers(boolean)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void cancelAppearDrawing()>
<com.android.systemui.biometrics.AuthCredentialView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindSystemUIPrimaryWindowManager(com.android.systemui.car.window.SystemUIOverlayWindowManager)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: int getOriginalIconColor()>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getSharedLibraries(java.lang.String,int,int)>
<com.android.systemui.statusbar.NotificationRemoteInputManager.SmartReplyHistoryExtender: void setShouldManageLifetime(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.server.input.InputManagerService: android.view.InputDevice[] getInputDevices()>
<com.android.server.integrity.serializer.RuleSerializer: void serialize(java.util.List,java.util.Optional,java.io.OutputStream,java.io.OutputStream)>
<com.android.systemui.statusbar.phone.NotificationGroupManager: boolean isSummaryOfGroup(android.service.notification.StatusBarNotification)>
<com.android.systemui.statusbar.CommandQueue: void onRecentsAnimationStateChanged(boolean)>
<com.android.systemui.statusbar.notification.ActionListTransformState: void transformViewFullyTo(com.android.systemui.statusbar.notification.TransformState,float)>
<com.android.server.policy.PhoneWindowManager: void systemBooted()>
<com.android.systemui.classifier.AccelerationClassifier: float getFalseTouchEvaluation(int,com.android.systemui.classifier.Stroke)>
<com.android.server.pm.PackageManagerServiceUtils: void dumpCriticalInfo(java.io.PrintWriter,java.lang.String)>
<com.android.systemui.qs.TileLayout: boolean updateResources()>
<com.android.gallery3d.glrenderer.UploadedTexture: void recycle()>
<com.android.systemui.volume.VolumeDialogControllerImpl: void register()>
<com.android.systemui.volume.MediaRouterWrapper: java.util.List getRoutes()>
<com.android.server.ConnectivityService: java.lang.String getMobileProvisioningUrl()>
<com.android.systemui.util.sensors.ThresholdSensor: void setTag(java.lang.String)>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void addIconGroup(com.android.systemui.statusbar.phone.StatusBarIconController.IconManager)>
<com.android.systemui.qs.tiles.RotationLockTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.statusbar.policy.RotationLockController)>
<com.android.server.locksettings.recoverablekeystore.WrappedKey: byte[] getKeyMetadata()>
<android.net.wifi.ITrafficStateCallback: void onStateChanged(int)>
<android.graphics.perftests.PathPerfTest: void testGetSetFillType()>
<com.android.settingslib.NetworkPolicyEditor: void setPolicyCycleDay(android.net.NetworkTemplate,int,java.lang.String)>
<android.net.wifi.WifiInfo.Builder: android.net.wifi.WifiInfo.Builder setNetworkId(int)>
<com.android.keyguard.KeyguardSecurityViewFlipper: void setKeyguardCallback(com.android.keyguard.KeyguardSecurityCallback)>
<com.android.systemui.qs.tileimpl.QSIconViewImpl: void updateIcon(android.widget.ImageView,com.android.systemui.plugins.qs.QSTile.State,boolean)>
<com.android.server.ConnectivityService: int getRestoreDefaultNetworkDelay(int)>
<com.android.preload.check.PreloadCheck: void testAnimator()>
<com.android.systemui.classifier.Stroke: long getLastEventTimeNano()>
<com.android.systemui.shared.recents.model.Task.TaskKey: boolean equals(java.lang.Object)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getBindDeviceAdminTargetUsers(android.content.ComponentName)>
<com.android.systemui.statusbar.phone.NavigationBarFrame: void <init>(android.content.Context,android.util.AttributeSet,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBindFramebufferOES(int,int)>
<com.android.server.tv.tunerresourcemanager.ClientProfile.Builder: com.android.server.tv.tunerresourcemanager.ClientProfile.Builder useCase(int)>
<android.net.ip.IpClientManager: void <init>(android.net.ip.IIpClient,java.lang.String)>
<com.android.systemui.dagger.DefaultBroadcastReceiverBinder: android.content.BroadcastReceiver bindSmartActionsReceiver(com.android.systemui.screenshot.SmartActionsReceiver)>
<com.android.server.utils.ManagedApplicationService.BinderChecker: android.os.IInterface asInterface(android.os.IBinder)>
<com.android.printspooler.ui.SelectPrinterActivity: void onActivityResult(int,int,android.content.Intent)>
<com.android.systemui.car.window.OverlayPanelViewController: void animateCollapsePanel()>
<android.app.usage.UsageStatsManagerInternal: boolean pruneUninstalledPackagesData(int)>
<com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder: com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder onExpandClickListener(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow.OnExpandClickListener)>
<com.android.server.pm.PackageManagerService: int getInstallLocation()>
<com.android.systemui.qs.customize.TileAdapter: androidx.recyclerview.widget.RecyclerView.ItemDecoration getItemDecoration()>
<com.android.systemui.car.window.OverlayViewController: boolean shouldShowStatusBarInsets()>
<com.android.systemui.shared.plugins.PluginInstanceManager: boolean disableAll()>
<com.android.systemui.statusbar.notification.row.BindRequester: androidx.core.os.CancellationSignal requestRebind(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.row.NotifBindPipeline.BindCallback)>
<android.net.wifi.rtt.ResponderLocation: java.util.List getColocatedBssids()>
<com.android.server.pm.CrossProfileAppsServiceImpl: void resetInteractAcrossProfilesAppOps(java.util.List)>
<com.android.systemui.statusbar.policy.UserSwitcherController: void switchToUserId(int)>
<com.android.server.search.SearchManagerService: android.content.ComponentName getGlobalSearchActivity()>
<com.android.systemui.statusbar.phone.DozeParameters: boolean getAlwaysOn()>
<com.google.android.startop.iorap.AppLaunchEvent.ActivityRecordProtoParcelable: void write(android.os.Parcel,byte[],int)>
<com.android.server.pm.PackageManagerService.Injector: com.android.server.policy.PermissionPolicyInternal getPermissionPolicyInternal()>
<android.media.Session2Command: void <init>(java.lang.String,android.os.Bundle)>
<com.android.systemui.plugins.ActivityStarter: void startPendingIntentDismissingKeyguard(android.app.PendingIntent)>
<com.android.systemui.statusbar.policy.KeyButtonRipple: void setAlpha(int)>
<com.android.systemui.statusbar.notification.collection.coalescer.GroupCoalescer.BatchableNotificationHandler: void onNotificationBatchPosted(java.util.List)>
<com.android.systemui.power.EnhancedEstimatesImpl: boolean getLowWarningEnabled()>
<com.android.systemui.globalactions.GlobalActionsComponent: void onGlobalActionsHidden()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setKeepInParent(boolean)>
<com.android.systemui.statusbar.phone.DarkIconDispatcherImpl: void removeDarkReceiver(com.android.systemui.plugins.DarkIconDispatcher.DarkReceiver)>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setWpa2EnterpriseConfig(android.net.wifi.WifiEnterpriseConfig)>
<com.android.systemui.classifier.HumanInteractionClassifier: boolean isEnabled()>
<com.android.systemui.statusbar.phone.NavigationBarView: com.android.systemui.statusbar.phone.RotationButtonController getRotationButtonController()>
<com.android.systemui.statusbar.KeyguardIndicationController.BaseKeyguardCallback: void onUserUnlocked()>
<com.android.settingslib.applications.ApplicationsState.Session: void setSessionFlags(int)>
<com.android.networkstack.tethering.BpfCoordinator.Dependencies: com.android.networkstack.tethering.TetheringConfiguration getTetherConfig()>
<com.android.settingslib.net.UidDetailProvider: void clearCache()>
<com.android.server.pm.permission.PermissionsState: boolean hasRequestedPermission(android.util.ArraySet)>
<com.android.server.LockGuard: void guard(int)>
<com.android.server.audio.PlaybackActivityMonitor: void disableAudioForUid(boolean,int)>
<com.android.systemui.qs.QSPanel.QSTileLayout: void setListening(boolean)>
<android.net.wifi.WifiConfiguration: boolean isEphemeral()>
<com.android.server.accessibility.gestures.TouchState: android.view.MotionEvent getLastInjectedHoverEvent()>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: void setPrintJobCancelling(android.print.PrintJobId,boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setSystemChildExpanded(boolean)>
<com.android.systemui.keyguard.KeyguardViewMediator: void onDreamingStopped()>
<com.android.systemui.statusbar.GestureRecorder.Gesture: boolean isComplete()>
<com.android.printspooler.widget.PageContentView: void onPageContentAvailable(android.graphics.drawable.BitmapDrawable)>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.ParceledListSlice retrieveSecurityLogs(android.content.ComponentName)>
<com.android.systemui.statusbar.notification.stack.NotificationSection: void startBackgroundAnimation(boolean,boolean)>
<javax.microedition.khronos.opengles.GL11: void glGetTexEnvxv(int,int,int[],int)>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: java.util.List getUniqueServiceNames()>
<com.android.gallery3d.glrenderer.GLES20Canvas: void setTextureParameters(com.android.gallery3d.glrenderer.BasicTexture)>
<com.android.systemui.keyguard.WakefulnessLifecycle: void dispatchStartedWakingUp()>
<com.android.keyguard.KeyguardClockSwitch: void onFinishInflate()>
<com.android.systemui.statusbar.MediaTransferManager: void setRemoved(android.view.View)>
<com.android.systemui.statusbar.notification.row.ExpandableView.OnHeightChangedListener: void onHeightChanged(com.android.systemui.statusbar.notification.row.ExpandableView,boolean)>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void dump(java.io.PrintWriter,java.lang.String)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: int getMaxNetworkSelectionDisableReason()>
<com.android.systemui.pip.phone.PipMenuActivity: void onPictureInPictureModeChanged(boolean)>
<com.android.shell.BugreportStorageProvider: android.database.Cursor queryDocument(java.lang.String,java.lang.String[])>
<com.android.systemui.volume.SegmentedButtons.Callback: void onSelected(java.lang.Object,boolean)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isAllowClearUserDataOnFailedRestore()>
<com.android.server.pm.permission.PermissionsState: int grantInstallPermission(com.android.server.pm.permission.BasePermission)>
<android.net.wifi.aware.WifiAwareManager: boolean isAvailable()>
<javax.microedition.khronos.opengles.GL10: void glPopMatrix()>
<com.android.systemui.tuner.ClipboardView: void onDetachedFromWindow()>
<com.android.server.biometrics.BiometricStrengthController: void updateStrengths()>
<com.android.systemui.shared.system.InputConsumerController: void registerInputConsumer(boolean)>
<com.android.systemui.recents.OverviewProxyService.OverviewProxyListener: void startAssistant(android.os.Bundle)>
<android.content.pm.PackageManagerInternal: java.lang.String[] getSharedUserPackagesForPackage(java.lang.String,int)>
<com.android.wallpapercropper.CropView: int getImageRotation()>
<com.android.settingslib.bluetooth.HidProfile: int getConnectionPolicy(android.bluetooth.BluetoothDevice)>
<com.android.server.protolog.common.ProtoLog: void i(com.android.server.protolog.common.IProtoLogGroup,java.lang.String,java.lang.Object[])>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: android.view.MotionEvent get(int)>
<com.android.gallery3d.common.Utils: java.lang.String getUserAgent(android.content.Context)>
<android.net.wifi.p2p.WifiP2pDeviceList: java.lang.String toString()>
<com.android.settingslib.widget.AnimatedImageView: void onVisibilityChanged(android.view.View,int)>
<android.text.StaticLayoutPerfTest: void testCreate_PrecomputedText_Styled_Greedy_NoHyphenation()>
<com.android.server.firewall.IntentFirewall: boolean checkStartActivity(android.content.Intent,int,int,java.lang.String,android.content.pm.ApplicationInfo)>
<com.android.systemui.plugins.NotificationListenerController: boolean onNotificationPosted(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap)>
<com.android.systemui.shared.recents.model.ThumbnailData: void <init>(android.app.ActivityManager.TaskSnapshot)>
<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasVideoPlayback()>
<com.android.systemui.ForegroundServicesUserState: boolean removeOp(java.lang.String,int)>
<com.android.printspooler.model.PageContentRepository: int getFilePageCount()>
<com.android.server.usb.descriptors.UsbACInterface: byte getSubtype()>
<com.android.systemui.qs.GlobalSetting: void setValue(int)>
<com.android.server.NetworkManagementService: void setUidCleartextNetworkPolicy(int,int)>
<com.android.server.pm.parsing.pkg.PackageImpl: boolean isOem()>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton2Enabled(boolean)>
<com.android.gallery3d.exif.ExifInterface: void writeExif(java.lang.String,java.lang.String)>
<com.android.systemui.MultiListLayout: void removeAllItems()>
<com.android.systemui.pip.tv.PipManager: void closePip()>
<android.text.StaticLayoutPerfTest: void testCreate_PrecomputedText_NoStyled_Balanced_NoHyphenation()>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: java.lang.String getNetworkStatusString()>
<com.android.systemui.statusbar.phone.StatusBar: void keyguardGoingAway()>
<com.android.wallpapercropper.CropView: void moveToLeft()>
<com.android.systemui.statusbar.notification.collection.coordinator.KeyguardCoordinator: void attach(com.android.systemui.statusbar.notification.collection.NotifPipeline)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: boolean needsSeparateWorkChallenge(int)>
<com.android.server.usb.UsbAlsaJackDetector: com.android.server.usb.UsbAlsaJackDetector startJackDetect(com.android.server.usb.UsbAlsaDevice)>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: boolean isBypassFadingAnimation()>
<com.android.keyguard.KeyguardHostView: com.android.keyguard.KeyguardSecurityView getCurrentSecurityView()>
<javax.obex.PrivateInputStream: int read(byte[])>
<com.android.systemui.statusbar.notification.VisualStabilityManager: void setPulsing(boolean)>
<com.android.systemui.Prefs: void remove(android.content.Context,java.lang.String)>
<com.android.systemui.statusbar.NotificationMediaManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.phone.ScrimController.Callback: void onDisplayBlanked()>
<com.android.systemui.power.PowerUI.WarningsUI: void update(int,int,long)>
<com.android.server.pm.PackageManagerServiceCompilerMapping: java.lang.String getDefaultCompilerFilter()>
<com.android.systemui.qs.tileimpl.QSTileImpl: com.android.systemui.plugins.qs.QSTile.State newTileState()>
<android.os.IPullAtomCallback: void onPullAtom(int,android.os.IPullAtomResultReceiver)>
<com.android.systemui.statusbar.policy.KeyButtonRipple: void setColorFilter(android.graphics.ColorFilter)>
<com.android.printspooler.renderer.IPdfEditor: void removePages(android.print.PageRange[])>
<com.android.systemui.shared.system.WindowCallbacksCompat: void onWindowDragResizeStart(android.graphics.Rect,boolean,android.graphics.Rect,android.graphics.Rect,int)>
<com.android.media.tv.remoteprovider.TvRemoteProvider: void sendTimestamp(android.os.IBinder,long)>
<com.android.server.pm.PackageSetting: boolean isOem()>
<com.android.keyguard.KeyguardViewController: void onCancelClicked()>
<com.android.printspooler.ui.PrintActivity: boolean onKeyDown(int,android.view.KeyEvent)>
<com.android.systemui.shared.system.QuickStepContract: int getQuickStepTouchSlopPx()>
<com.android.systemui.statusbar.policy.RotationLockControllerImpl: void removeCallback(com.android.systemui.statusbar.policy.RotationLockController.RotationLockControllerCallback)>
<com.android.systemui.plugins.qs.QSTile.Callback: void onScanStateChanged(boolean)>
<com.android.settingslib.core.lifecycle.ObservableFragment: void onDestroy()>
<com.android.companiondevicemanager.DeviceDiscoveryService: void onCreate()>
<android.net.wifi.p2p.WifiP2pDevice: boolean isServiceDiscoveryCapable()>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: void start(java.lang.Runnable[])>
<com.android.systemui.plugins.ActivityStarter.Callback: void onActivityStarted(int)>
<com.android.commands.uiautomator.EventsCommand: java.lang.String shortHelp()>
<com.android.photos.views.TiledImageView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.biometrics.face.FaceUserState: java.lang.String getBiometricsTag()>
<android.app.ResourcesPerfTest: void getFont()>
<com.android.packageinstaller.InstallFailed.OutOfSpaceDialog: void onCancel(android.content.DialogInterface)>
<javax.microedition.khronos.opengles.GL10: void glTexEnvxv(int,int,java.nio.IntBuffer)>
<com.android.server.soundtrigger.SoundTriggerInternal: int getParameter(int,int)>
<com.android.systemui.statusbar.NotificationListener: void addNotificationSettingsListener(com.android.systemui.statusbar.NotificationListener.NotificationSettingsListener)>
<com.android.systemui.statusbar.notification.stack.AmbientState: int getZDistanceBetweenElements()>
<android.net.TetheringManager: int setUsbTethering(boolean)>
<com.android.settingslib.core.instrumentation.LogWriter: void hidden(android.content.Context,int,int)>
<com.android.systemui.classifier.HumanInteractionClassifier: java.lang.String getTag()>
<com.android.settingslib.bluetooth.HearingAidProfile: boolean setEnabled(android.bluetooth.BluetoothDevice,boolean)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: void resetMenu()>
<com.android.printspooler.model.RemotePrintDocument: boolean isUpdating()>
<com.android.systemui.statusbar.DragDownHelper.DragDownCallback: void setEmptyDragAmount(float)>
<com.android.server.display.BrightnessMappingStrategy: float getBrightness(float,java.lang.String,int)>
<android.view.autofill.AbstractAutofillPerfTestCase: void prepareActivity()>
<com.android.systemui.plugins.qs.QS: boolean disallowPanelTouches()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getBluetoothContactSharingDisabledForUser(int)>
<com.android.server.locksettings.recoverablekeystore.certificate.CertUtils: byte[] decodeBase64(java.lang.String)>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.power.PowerUI.WarningsUI provideWarningsUi(com.android.systemui.power.PowerNotificationWarnings)>
<android.net.wifi.aware.ParcelablePeerHandle: int describeContents()>
<com.android.server.autofill.ui.FillUi.Callback: void onResponsePicked(android.service.autofill.FillResponse)>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcher: void setKeyguard(boolean,boolean)>
<com.android.systemui.classifier.FalsingManagerImpl: void onAffordanceSwipingStarted(boolean)>
<com.android.providers.settings.SettingsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>
<javax.obex.Operation: java.lang.String getEncoding()>
<com.android.systemui.statusbar.notification.interruption.HeadsUpViewBinder: void abortBindCallback(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: int getIntrinsicHeight()>
<com.android.printspooler.model.PageContentRepository.RenderSpec: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.phone.KeyguardBouncer: boolean onBackPressed()>
<com.android.server.autofill.ui.PendingUi: void setState(int)>
<com.android.server.timezone.PackageTracker: int getCheckFailureCountForTests()>
<com.android.server.input.InputManagerService: void start()>
<com.android.server.infra.ServiceNameResolver: void setTemporaryService(int,java.lang.String,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void updateEmptyShadeView(boolean)>
<com.android.server.pm.AppsFilter: void addPackage(com.android.server.pm.PackageSetting)>
<com.android.server.testing.shadows.ShadowSlog: int i(java.lang.String,java.lang.String)>
<android.content.pm.PackageManagerInternal.PackageListObserver: void onPackageRemoved(java.lang.String,int)>
<com.android.systemui.statusbar.notification.stack.ExpandableViewState: void cancelAnimations(android.view.View)>
<android.net.wifi.WifiNetworkAgentSpecifier: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm createStackScrollAlgorithm(android.content.Context)>
<com.android.server.slice.SliceClientPermissions: void clear()>
<com.android.systemui.qs.external.TileServices: com.android.systemui.qs.external.TileServiceManager getTileWrapper(com.android.systemui.qs.external.CustomTile)>
<com.android.server.appprediction.AppPredictionManagerServiceShellCommand: void onHelp()>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: java.util.List getServices()>
<com.android.settingslib.widget.apppreference.AppPreference: void onBindViewHolder(androidx.preference.PreferenceViewHolder)>
<com.android.systemui.statusbar.phone.NavigationBarView: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.systemui.statusbar.EmptyShadeView: android.view.View findContentView()>
<com.android.server.usb.descriptors.tree.UsbDescriptorsConfigNode: void <init>(com.android.server.usb.descriptors.UsbConfigDescriptor)>
<com.android.systemui.keyguard.KeyguardViewMediator: void onSystemReady()>
<com.android.systemui.shared.system.WindowCallbacksCompat: boolean onContentDrawn(int,int,int,int)>
<com.android.server.locksettings.LockSettingsService: void setRecoveryStatus(java.lang.String,int)>
<com.android.keyguard.KeyguardAbsKeyInputView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.phone.StatusBarIconController.DarkIconManager: void destroy()>
<com.android.systemui.plugins.qs.QSTile: java.lang.String getMetricsSpec()>
<com.android.systemui.qs.QSTileHost: com.android.internal.logging.UiEventLogger getUiEventLogger()>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo: boolean shouldBeSaved()>
<com.android.server.audio.AudioService: void forceVolumeControlStream(int,android.os.IBinder)>
<android.net.wifi.SoftApInfo: void setFrequency(int)>
<com.android.server.pm.parsing.pkg.AndroidPackage: long[] getUsesStaticLibrariesVersions()>
<com.android.systemui.statusbar.policy.RotationLockControllerImpl: void setRotationLockedAtAngle(boolean,int)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: com.android.systemui.statusbar.notification.row.ExpandableNotificationRow getViewAtPosition(float)>
<com.android.systemui.bubbles.BadgedImageView: void onDraw(android.graphics.Canvas)>
<android.net.wifi.hotspot2.pps.HomeSp: java.lang.String toString()>
<com.android.server.NetworkScoreService.ScoringServiceConnection: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: boolean logSettingsTileClick(java.lang.String,int)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void onStartedGoingToSleep()>
<com.android.server.audio.AudioService: java.lang.String makeAlsaAddressString(int,int)>
<com.android.systemui.car.notification.NotificationPanelViewController: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean)>
<com.android.server.infra.AbstractMasterSystemService: void registerForExtraSettingsChanges(android.content.ContentResolver,android.database.ContentObserver)>
<com.android.systemui.statusbar.policy.NetworkController: com.android.settingslib.net.DataUsageController getMobileDataController()>
<com.android.server.AppStateTracker.Listener: void updateJobsForUidPackage(int,java.lang.String,boolean)>
<com.android.systemui.statusbar.NotificationListener: void onSilentStatusBarIconsVisibilityChanged(boolean)>
<com.android.server.ConnectivityService: void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isRequestLegacyExternalStorage()>
<com.android.systemui.statusbar.phone.DozeServiceHost: java.lang.String toString()>
<com.android.server.policy.PhoneWindowManager: void setPipVisibilityLw(boolean)>
<com.android.systemui.tuner.AutoScrollView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.logging.NotificationPanelLogger: com.android.systemui.statusbar.notification.logging.nano.Notifications.NotificationList toNotificationProto(java.util.List)>
<javax.obex.ServerOperation: java.io.DataOutputStream openDataOutputStream()>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void onSaveInstanceState(android.os.Bundle)>
<com.android.server.pm.AbstractStatsBase: void readInternal(java.lang.Object)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isGroupNotFullyVisible()>
<com.android.server.om.DumpState: java.lang.String getField()>
<com.android.powermodel.component.CpuProfile.Builder: void setClusterPower(int,float)>
<android.net.wifi.hotspot2.pps.HomeSp: int hashCode()>
<com.android.settingslib.widget.BarChartInfo: int getTitle()>
<com.android.systemui.keyguard.KeyguardViewMediator: boolean isSecure(int)>
<com.android.localtransport.LocalTransport: int getTransportFlags()>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: void onInsetsModified(android.view.InsetsState)>
<android.view.textclassifier.TextClassificationManagerPerfTest: void testGetTextClassifier_systemTextClassifierEnabled()>
<com.android.server.uri.UriGrantsManagerInternal: int checkGrantUriPermission(int,java.lang.String,android.net.Uri,int,int)>
<com.android.systemui.statusbar.ScrimView: void onLayout(boolean,int,int,int,int)>
<com.android.keyguard.CarrierText: void onFinishInflate()>
<com.android.server.usb.descriptors.UsbConfigDescriptor: byte getConfigIndex()>
<com.android.systemui.statusbar.phone.RotationContextButton: com.android.systemui.statusbar.policy.KeyButtonDrawable getNewDrawable()>
<com.android.commands.input.Input: void onShowUsage(java.io.PrintStream)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onFinishedGoingToSleep(int,boolean)>
<com.android.server.appbinding.finders.CarrierMessagingClientServiceFinder: java.lang.String getServiceAction()>
<android.net.wifi.WifiManager: boolean startTetheredHotspot(android.net.wifi.SoftApConfiguration)>
<com.android.systemui.statusbar.RemoteInputController: boolean isRemoteInputActive()>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.android.systemui.power.InattentiveSleepWarningView: void dismiss(boolean)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setHeadsUpIsVisible()>
<com.android.server.biometrics.BiometricServiceBase: com.android.server.biometrics.ClientMonitor getPendingClient()>
<com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProviderImpl: boolean shouldLaunchFullScreenIntentWhenAdded(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.keyguard.KeyguardPatternView: void cleanUp()>
<com.android.systemui.qs.tileimpl.QSTileBaseView: android.graphics.drawable.Drawable newTileBackground()>
<com.android.server.pm.KeySetManagerService: void dumpLPr(java.io.PrintWriter,java.lang.String,com.android.server.pm.DumpState)>
<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog logCurve(java.lang.String,float[],float[])>
<com.android.systemui.statusbar.phone.KeyguardBouncer.BouncerExpansionCallback: void onFullyHidden()>
<com.android.systemui.statusbar.notification.row.HybridGroupManager: java.lang.CharSequence resolveText(android.app.Notification)>
<com.android.systemui.statusbar.notification.VisualStabilityManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.timezone.PackageTracker: void recordCheckResult(com.android.server.timezone.CheckToken,boolean)>
<com.android.server.AppStateTracker: void <init>(android.content.Context,android.os.Looper)>
<com.android.server.pm.UserManagerService: int getCredentialOwnerProfile(int)>
<com.android.systemui.qs.external.QSTileServiceWrapper: boolean onUnlockComplete()>
<com.android.systemui.classifier.FalsingManagerProxy: android.net.Uri reportRejectedTouch()>
<android.net.wifi.aware.PublishConfig: void <init>(byte[],byte[],byte[],int,int,boolean,boolean)>
<com.android.networkstack.tethering.TetheringDependencies: com.android.networkstack.tethering.OffloadHardwareInterface getOffloadHardwareInterface(android.os.Handler,android.net.util.SharedLog)>
<com.android.server.biometrics.BiometricServiceBase.DaemonWrapper: int cancel()>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindAuthController(com.android.systemui.biometrics.AuthController)>
<com.android.uiautomator.core.UiDevice: boolean hasWatcherTriggered(java.lang.String)>
<com.android.systemui.Prefs: void putInt(android.content.Context,java.lang.String,int)>
<com.android.systemui.shared.system.SurfaceViewRequestReceiver: void onReceive(android.content.Context,android.os.Bundle,android.view.View)>
<com.android.systemui.SwipeHelper: void prepareDismissAnimation(android.view.View,android.animation.Animator)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setExpansionChanging(boolean)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setActivatedChild(com.android.systemui.statusbar.notification.row.ActivatableNotificationView)>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: void applySurfaceParams(android.view.SyncRtSurfaceTransactionApplier.SurfaceParams[])>
<com.android.systemui.statusbar.policy.CastController: void startCasting(com.android.systemui.statusbar.policy.CastController.CastDevice)>
<com.android.server.audio.AudioEventLogger.Event: com.android.server.audio.AudioEventLogger.Event printLog(java.lang.String)>
<com.android.server.om.OverlayManagerService: void onStart()>
<android.net.wifi.p2p.WifiP2pGroup: void addClient(java.lang.String)>
<com.android.systemui.statusbar.phone.ShadeControllerImpl: com.android.systemui.statusbar.phone.PhoneStatusBarView getStatusBarView()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void updateStates()>
<com.android.server.LooperStatsService.Lifecycle: void <init>(android.content.Context)>
<com.android.server.pm.PackageInstallerSession: long getUpdatedMillis()>
<com.android.systemui.car.navigationbar.CarNavigationBarController: com.android.systemui.car.navigationbar.CarNavigationBarView getTopBar(boolean)>
<com.android.server.pm.dex.ViewCompiler: void <init>(java.lang.Object,com.android.server.pm.Installer)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: float getPeekHeight()>
<javax.microedition.khronos.opengles.GL10: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<com.android.settingslib.core.instrumentation.VisibilityLoggerMixin: void <init>(int,com.android.settingslib.core.instrumentation.MetricsFeatureProvider)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isFaceAuthEnabledForUser(int)>
<android.net.wifi.aware.WifiAwareManager: void disconnect(int,android.os.Binder)>
<com.android.server.NetworkTimeUpdateService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.uiautomator.core.UiDevice: boolean pressDPadLeft()>
<com.android.server.statusbar.StatusBarManagerService: void handleSystemKey(int)>
<com.android.settingslib.core.lifecycle.ObservableActivity: com.android.settingslib.core.lifecycle.Lifecycle getSettingsLifecycle()>
<com.android.server.emergency.EmergencyAffordanceService: void <init>(android.content.Context)>
<com.android.keyguard.KeyguardPatternView: void <init>(android.content.Context)>
<com.android.server.policy.WindowManagerPolicy: int getUiMode()>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void setVoiceInteractionPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.PackagesProvider)>
<com.android.systemui.analytics.SensorLoggerSession: void <init>(long,long)>
<com.android.systemui.statusbar.notification.collection.GroupEntry: void setUntruncatedChildCount(int)>
<com.android.systemui.qs.customize.TileAdapter: void setHost(com.android.systemui.qs.QSTileHost)>
<com.android.keyguard.KeyguardAbsKeyInputView: int getPasswordTextViewId()>
<com.android.server.biometrics.BiometricServiceBase: void serviceDied(long)>
<com.android.gallery3d.exif.ExifTag: int getValueAsInt(int)>
<com.android.systemui.statusbar.CommandQueue: void appTransitionFinished(int)>
<com.android.server.SystemService: void publishLocalService(java.lang.Class,java.lang.Object)>
<com.android.server.NetworkManagementService: void stopInterfaceForwarding(java.lang.String,java.lang.String)>
<com.android.systemui.bubbles.BubbleController: com.android.systemui.statusbar.ScrimView getScrimForBubble()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: int getIntrinsicHeight()>
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCache(com.android.server.accounts.AccountManagerService.UserAccounts,java.lang.String,int,java.lang.String,boolean)>
<com.android.server.policy.PhoneWindowManager: void setNavBarVirtualKeyHapticFeedbackEnabledLw(boolean)>
<com.android.systemui.statusbar.phone.NavigationBarTransitions: float addDarkIntensityListener(com.android.systemui.statusbar.phone.NavigationBarTransitions.DarkIntensityListener)>
<com.android.server.slice.SliceShellCommand: int onCommand(java.lang.String)>
<com.android.systemui.car.userswitcher.UserGridRecyclerView.UserAdapter: int getItemCount()>
<com.android.wallpapercropper.WallpaperCropActivity: void cropImageAndSetWallpaper(android.net.Uri,com.android.wallpapercropper.WallpaperCropActivity.OnBitmapCroppedHandler,boolean)>
<com.android.uiautomator.core.UiScrollable: boolean flingToBeginning(int)>
<com.android.systemui.statusbar.StatusBarMobileView: void getDrawingRect(android.graphics.Rect)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void applyState()>
<android.content.pm.PackageManagerInternal: void requestInstantAppResolutionPhaseTwo(android.content.pm.AuxiliaryResolveInfo,android.content.Intent,java.lang.String,java.lang.String,java.lang.String,boolean,android.os.Bundle,int)>
<com.android.systemui.statusbar.notification.TransformState: void transformViewFrom(com.android.systemui.statusbar.notification.TransformState,float)>
<com.android.server.people.PeopleServiceInternal: void pruneDataForUser(int,android.os.CancellationSignal)>
<android.net.wifi.rtt.ResponderLocation: double getAltitudeUncertainty()>
<android.net.ConnectivityModuleConnector: void startModuleService(java.lang.String,java.lang.String,android.net.ConnectivityModuleConnector.ModuleServiceCallback)>
<com.android.systemui.keyguard.WakefulnessLifecycle.Observer: void onStartedGoingToSleep()>
<android.net.wifi.hotspot2.pps.Policy: void setMinHomeDownlinkBandwidth(long)>
<com.android.systemui.qs.SecureSetting: void handleValueChanged(int,boolean)>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageResolver: int getMaxImageHeight()>
<android.widget.TextViewPrecomputedTextPerfTest: void testOnMeasure_RandomText()>
<com.android.powermodel.AttributionKey: com.android.powermodel.SpecialApp getSpecialApp()>
<android.net.wifi.p2p.WifiP2pGroup: boolean contains(android.net.wifi.p2p.WifiP2pDevice)>
<com.android.settingslib.net.SummaryForAllUidLoader: android.net.NetworkStats loadInBackground()>
<com.android.settingslib.bluetooth.HearingAidProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)>
<com.android.systemui.tuner.DemoModeFragment: void onCreatePreferences(android.os.Bundle,java.lang.String)>
<com.android.uiautomator.core.UiScrollable: boolean scrollDescriptionIntoView(java.lang.String)>
<com.android.server.BatteryService.HealthServiceWrapper: android.hardware.health.V2_0.IHealth getLastService()>
<com.android.server.integrity.parser.BinaryFileOperations: boolean getBooleanValue(com.android.server.integrity.model.BitInputStream)>
<com.android.settingslib.location.InjectedSetting.Builder: com.android.settingslib.location.InjectedSetting.Builder setTitle(java.lang.String)>
<com.android.settingslib.suggestions.SuggestionControllerMixinCompat: void onStop()>
<com.android.systemui.car.userswitcher.FullScreenUserSwitcherViewController: void showInternal()>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void panelExpansionChanged(float,boolean)>
<android.net.wifi.hotspot2.OsuProvider: int hashCode()>
<com.android.keyguard.KeyguardHostView: void userActivity()>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getManifestPackageName()>
<com.android.systemui.shared.tracing.FrameProtoTracer: float getBufferUsagePct()>
<com.android.systemui.screenshot.ScreenshotSelectorView: android.graphics.Rect getSelectionRect()>
<com.android.pacprocessor.PacNative: boolean startPacSupport()>
<com.android.server.pm.PackageInstallerSession: void removeSplit(java.lang.String)>
<com.android.systemui.pip.phone.PipMenuActivityController: void addListener(com.android.systemui.pip.phone.PipMenuActivityController.Listener)>
<com.android.sharedstoragebackup.SharedStorageAgent: void onFullBackup(android.app.backup.FullBackupDataOutput)>
<com.android.server.pm.ProtectedPackages: boolean isPackageDataProtected(int,java.lang.String)>
<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo getLastChosenActivity(android.content.Intent,java.lang.String,int)>
<com.android.powermodel.component.GpsProfile.Builder: com.android.powermodel.component.GpsProfile build()>
<com.android.server.accessibility.KeyEventDispatcher.KeyEventFilter: boolean onKeyEvent(android.view.KeyEvent,int)>
<com.android.systemui.HardwareBgDrawable: void setColorFilter(android.graphics.ColorFilter)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRowController: void setOnDismissRunnable(java.lang.Runnable)>
<com.android.systemui.tuner.TunerSwitch: void onDetached()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setRequiredStrongAuthTimeout(android.content.ComponentName,long,boolean)>
<android.app.PendingIntentPerfTest: void createWithUpdateFlag()>
<android.net.wifi.WifiManager: void allowAutojoin(int,boolean)>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcherScrim: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)>
<com.android.systemui.statusbar.phone.ShadeController: void runPostCollapseRunnables()>
<com.android.settingslib.CustomEditTextPreference: android.widget.EditText getEditText()>
<com.android.server.audio.MediaFocusControl: void discardAudioFocusOwner()>
<com.android.systemui.shared.system.ActivityManagerWrapper: void removeAllRecentTasks()>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void updateGroupOverflow()>
<com.android.gallery3d.glrenderer.GLES20Canvas: void texSubImage2D(com.android.gallery3d.glrenderer.BasicTexture,int,int,android.graphics.Bitmap,int,int)>
<android.view.CutoutSpecificationBenchmark: void parseByOldMethodForDoubleCutout()>
<com.android.networkstack.tethering.EntitlementManager: void addDownstreamMapping(int,int)>
<com.android.settingslib.core.lifecycle.ObservableActivity: boolean onPrepareOptionsMenu(android.view.Menu)>
<com.android.server.statusbar.StatusBarManagerService: void onNotificationActionClick(java.lang.String,int,android.app.Notification.Action,com.android.internal.statusbar.NotificationVisibility,boolean)>
<com.android.gallery3d.glrenderer.GLCanvas: void beginRenderTarget(com.android.gallery3d.glrenderer.RawTexture)>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalTxSuccess()>
<com.android.server.twilight.TwilightService: void onLocationChanged(android.location.Location)>
<com.android.systemui.qs.TileLayout: void removeTile(com.android.systemui.qs.QSPanel.TileRecord)>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: boolean hasOverlappingRendering()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: float calculateGapHeight(com.android.systemui.statusbar.notification.row.ExpandableView,com.android.systemui.statusbar.notification.row.ExpandableView,int)>
<com.android.networkstack.tethering.TetheringConfiguration: java.lang.String toString()>
<com.android.server.usb.descriptors.UsbACFeatureUnit: byte getControlSize()>
<com.android.keyguard.KeyguardStatusView: void onFinishInflate()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasLockdownAdminConfiguredNetworks(android.content.ComponentName)>
<com.android.server.display.DisplayModeDirector: void setLoggingEnabled(boolean)>
<com.android.server.pm.KeySetManagerService: void <init>(android.util.ArrayMap)>
<com.android.networkstack.tethering.EntitlementManager: void setTetheringConfigurationFetcher(com.android.networkstack.tethering.EntitlementManager.TetheringConfigurationFetcher)>
<com.android.server.locksettings.ManagedProfilePasswordCache: void removePassword(int)>
<com.android.systemui.qs.QSAnimator: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)>
<com.android.wallpapercropper.CropView.TouchCallback: void onTap()>
<com.android.systemui.analytics.DataCollector: boolean isReportingEnabled()>
<com.android.statementservice.retriever.Statement: com.android.statementservice.retriever.AbstractAsset getTarget()>
<com.android.systemui.statusbar.policy.UserSwitcherController: void onDensityOrFontScaleChanged()>
<com.android.settingslib.net.SummaryForAllUidLoader: void <init>(android.content.Context,android.net.INetworkStatsSession,android.os.Bundle)>
<com.android.systemui.statusbar.policy.NextAlarmController.NextAlarmChangeCallback: void onNextAlarmChanged(android.app.AlarmManager.AlarmClockInfo)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView: android.widget.FrameLayout.LayoutParams generateDefaultLayoutParams()>
<com.android.systemui.wm.DisplayImeController.ImePositionProcessor: int onImeStartPositioning(int,int,int,boolean,boolean,android.view.SurfaceControl.Transaction)>
<com.android.systemui.car.notification.NotificationPanelViewMediator: void onUiModeChanged()>
<javax.microedition.khronos.opengles.GL10: void glPointSize(float)>
<com.android.settingslib.development.AbstractLogdSizePreferenceController: java.lang.String getPreferenceKey()>
<android.app.backup.BackupUtilsTest: void testIsFileSpecifiedInPathList_whenFileAndPathListContainsFirstNotRelatedAndSecondContainingDirectory()>
<com.android.server.pm.UserManagerService: boolean isUserNameSet(int)>
<com.android.egg.neko.PrefState: float getWaterState()>
<com.android.systemui.tuner.TunerService: void addTunable(com.android.systemui.tuner.TunerService.Tunable,java.lang.String[])>
<com.android.server.locksettings.LockSettingsStrongAuth.NonStrongBiometricTimeoutAlarmListener: void onAlarm()>
<com.android.keyguard.KeyguardSecurityCallback: boolean isVerifyUnlockOnly()>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean handleReportPhysicalAddress(com.android.server.hdmi.HdmiCecMessage)>
<com.android.keyguard.ViewMediatorCallback: void readyForKeyguardDone()>
<com.android.printspooler.util.PageRangeUtils: boolean isAllPages(android.print.PageRange,int)>
<com.android.systemui.pip.phone.PipAppOpsListener: void <init>(android.content.Context,android.app.IActivityManager,com.android.systemui.pip.phone.PipAppOpsListener.Callback)>
<com.android.statementservice.retriever.AssociationServiceException: void <init>(java.lang.String)>
<android.net.wifi.hotspot2.pps.HomeSp: java.lang.String getFqdn()>
<com.android.systemui.shortcut.ShortcutKeyDispatcher: void start()>
<com.android.printspooler.model.MutexFileProvider: void <init>(java.io.File)>
<android.net.wifi.WifiManager.NetworkRequestMatchCallback: void onAbort()>
<com.android.settingslib.deviceinfo.AbstractBluetoothAddressPreferenceController: java.lang.String getPreferenceKey()>
<com.android.systemui.SystemUIFactory: void createFromConfig(android.content.Context)>
<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardHostWindow(android.view.WindowManager.LayoutParams)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.MenuItem: android.view.View getGutsView()>
<com.android.server.locksettings.LockSettingsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.glwallpaper.EglHelper: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.tv.tunerresourcemanager.ClientProfile: int getId()>
<android.util.ArraySetPerfTest: void testValueAt_InBounds()>
<android.text.NonEditableTextGenerator.RandomCharSequenceGenerator: java.lang.CharSequence buildLatinWord()>
<com.android.settingslib.bluetooth.PanProfile: boolean setEnabled(android.bluetooth.BluetoothDevice,boolean)>
<com.android.keyguard.KeyguardUpdateMonitor: void onFaceAuthenticated(int,boolean)>
<com.android.systemui.statusbar.phone.StatusBar.H: void handleMessage(android.os.Message)>
<android.net.wifi.hotspot2.pps.Policy: long getMinRoamingUplinkBandwidth()>
<com.android.printservice.recommendation.plugin.hp.ServiceRecommendationPlugin: java.util.ArrayList getPrinters()>
<com.android.server.pm.PackageManagerServiceUtils: java.util.List getPackagesForDexopt(java.util.Collection,com.android.server.pm.PackageManagerService)>
<com.android.systemui.doze.DozeSensors: void requestTemporaryDisable()>
<com.android.systemui.statusbar.KeyguardIndicationController: void setRestingIndication(java.lang.String)>
<com.android.server.autofill.RemoteFillService.FillServiceCallbacks: void onSaveRequestFailure(java.lang.CharSequence,java.lang.String)>
<com.android.server.pm.PackageManagerService: boolean performDexOptSecondary(java.lang.String,java.lang.String,boolean)>
<com.android.server.biometrics.fingerprint.FingerprintConstants: int acquireVendorCode()>
<com.android.externalstorage.TestDocumentsProvider: android.database.Cursor queryChildDocuments(java.lang.String,java.lang.String[],java.lang.String)>
<com.android.systemui.statusbar.CommandQueue: void showScreenPinningRequest(int)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setCounterId(int,int,long)>
<com.android.server.hdmi.HdmiControlService.SendMessageCallback: void onSendCompleted(int)>
<com.android.settingslib.CustomDialogPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.server.locksettings.PasswordSlotManager: java.lang.String getSlotMapDir()>
<com.android.systemui.statusbar.phone.KeyguardIndicationTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.dagger.DefaultServiceBinder: android.app.Service bindSystemUIService(com.android.systemui.SystemUIService)>
<com.android.systemui.car.window.OverlayViewGlobalStateController: void showView(com.android.systemui.car.window.OverlayPanelViewController)>
<com.android.systemui.volume.SegmentedButtons: void setSelectedValue(java.lang.Object,boolean)>
<com.android.systemui.car.userswitcher.UserGridRecyclerView: void setUserSelectionListener(com.android.systemui.car.userswitcher.UserGridRecyclerView.UserSelectionListener)>
<com.android.server.timedetector.TimeDetectorService: void <init>(android.content.Context,android.os.Handler,com.android.server.timedetector.TimeDetectorStrategy)>
<com.android.systemui.statusbar.NotificationLockscreenUserManager.UserChangedListener: void onUserChanged(int)>
<com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder: com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder withPlugin(java.lang.Class,java.lang.String,com.android.systemui.statusbar.policy.ExtensionController.PluginConverter)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: int getContainerChildCount()>
<com.android.server.pm.ShortcutBitmapSaver: java.lang.String getBitmapPathMayWaitLocked(android.content.pm.ShortcutInfo)>
<com.android.server.inputmethod.MultiClientInputMethodManagerService.Lifecycle: void <init>(android.content.Context)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.hardware.hdmi.HdmiDeviceInfo addDeviceInfo(android.hardware.hdmi.HdmiDeviceInfo)>
<javax.microedition.khronos.opengles.GL10: void glDepthMask(boolean)>
<com.android.systemui.plugins.GlobalActions.GlobalActionsManager: void onGlobalActionsHidden()>
<android.net.wifi.WifiConfiguration: android.net.IpConfiguration.ProxySettings getProxySettings()>
<com.android.server.TelephonyRegistry: void notifyImsDisconnectCause(int,android.telephony.ims.ImsReasonInfo)>
<com.android.server.usb.UsbService.Lifecycle: void onUserUnlocking(com.android.server.SystemService.TargetUser)>
<com.android.server.IpSecService.RefcountedResource: com.android.server.IpSecService.IResource getResource()>
<android.net.wifi.p2p.WifiP2pManager: void setMiracastMode(int)>
<com.android.server.biometrics.BiometricUserState: java.lang.String getBiometricsTag()>
<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>
<com.android.systemui.car.navigationbar.CarNavigationBarController.NotificationsShadeController: boolean isNotificationPanelOpen()>
<com.android.server.TelephonyRegistry: void notifySrvccStateChanged(int,int)>
<com.android.keyguard.clock.ClockOptionsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.systemui.statusbar.notification.row.RowContentBindStage: void abortStage(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean handleSetSystemAudioMode(com.android.server.hdmi.HdmiCecMessage)>
<com.android.server.infra.AbstractMasterSystemService: void setTemporaryService(int,java.lang.String,int)>
<com.android.systemui.statusbar.phone.StatusBar: void handleSystemKey(int)>
<com.android.server.soundtrigger.SoundTriggerLogger.StringEvent: java.lang.String eventToString()>
<com.android.server.autofill.RemoteInlineSuggestionRenderService: void ensureBound()>
<com.android.keyguard.clock.ClockManager: void removeOnClockChangedListener(com.android.keyguard.clock.ClockManager.ClockChangedListener)>
<com.android.server.AttributeCache: void init(android.content.Context)>
<com.android.systemui.classifier.Point: float dist(com.android.systemui.classifier.Point)>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void setSpeedBumpIndex(int)>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: void removeCallback(com.android.systemui.statusbar.policy.CastController.Callback)>
<com.android.wallpaperbackup.WallpaperBackupAgent: void backupFile(java.io.File,android.app.backup.FullBackupDataOutput)>
<com.android.systemui.statusbar.AnimatedImageView: void setAllowAnimation(boolean)>
<com.android.server.biometrics.fingerprint.FingerprintUtils: java.util.List getBiometricsForUser(android.content.Context,int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setSensitive(boolean,boolean)>
<com.android.server.PackageWatchdog: void registerHealthObserver(com.android.server.PackageWatchdog.PackageHealthObserver)>
<com.android.powermodel.component.ModemProfile: float getRxMa()>
<com.android.systemui.globalactions.GlobalActionsLayout: void onUpdateList()>
<com.android.server.pm.PackageManagerService: void clearPackagePreferredActivities(java.lang.String)>
<com.android.systemui.statusbar.policy.RemoteInputView: com.android.systemui.statusbar.policy.RemoteInputView inflate(android.content.Context,android.view.ViewGroup,com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.RemoteInputController)>
<com.android.systemui.qs.QSPanel: void showDeviceMonitoringDialog()>
<com.android.systemui.statusbar.phone.NavigationBarEdgePanel: void setInsets(int,int)>
<com.android.systemui.statusbar.policy.FlashlightControllerImpl: boolean isAvailable()>
<com.android.systemui.statusbar.phone.PanelViewController: float getTouchSlop(android.view.MotionEvent)>
<com.android.systemui.statusbar.phone.NavigationBarView: com.android.systemui.statusbar.phone.ButtonDispatcher getAccessibilityButton()>
<com.android.settingslib.widget.AppEntityInfo: android.graphics.drawable.Drawable getIcon()>
<com.android.server.accessibility.AccessibilityManagerService: android.app.PendingIntent getPendingIntentActivity(android.content.Context,int,android.content.Intent,int)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onStrongAuthStateChanged(int)>
<com.android.server.statusbar.StatusBarManagerService: java.lang.String[] getStatusBarIcons()>
<com.android.systemui.classifier.HistoryEvaluator: void addStroke(float)>
<com.android.systemui.plugins.FalsingPlugin: void dataCollected(boolean,byte[])>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.policy.FlashlightController provideFlashlightController(com.android.systemui.statusbar.policy.FlashlightControllerImpl)>
<android.processor.view.inspector.InspectableClassModel.IntFlagEntry: java.lang.String getName()>
<com.android.systemui.statusbar.phone.NotificationsQuickSettingsContainer: void setCustomizerShowing(boolean)>
<com.android.server.pm.permission.PermissionManagerService: void updatePermissionFlagsForAllApps(int,int,int)>
<com.android.server.autofill.AutofillManagerService: void <init>(android.content.Context)>
<com.android.settingslib.widget.FooterPreference: void onBindViewHolder(androidx.preference.PreferenceViewHolder)>
<com.android.systemui.qs.PathInterpolatorBuilder: void <init>(float,float,float,float)>
<com.android.systemui.shared.system.SurfaceViewRequestUtils: int getDisplayId(android.os.Bundle)>
<com.android.systemui.ScreenDecorations.DisplayCutoutView: void onDraw(android.graphics.Canvas)>
<com.android.systemui.bubbles.BadgedImageView: void setRenderedBubble(com.android.systemui.bubbles.BubbleViewProvider)>
<com.android.server.usb.UsbAlsaDevice: void <init>(android.media.IAudioService,int,int,java.lang.String,boolean,boolean,boolean,boolean)>
<com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] decryptRecoveryKey(byte[],byte[])>
<com.android.systemui.statusbar.phone.StatusBar: void setLockscreenUser(int)>
<com.android.systemui.statusbar.notification.row.StackScrollerDecorView: boolean needsClippingToShelf()>
<com.android.systemui.classifier.SpeedAnglesPercentageEvaluator: float evaluate(float)>
<com.android.server.audio.AudioService: void postObserveDevicesForAllStreams()>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: java.lang.String getVersionName()>
<com.android.providers.settings.SettingsProvider: void scheduleWriteFallbackFilesJob()>
<com.android.systemui.statusbar.phone.StatusBar: void onUiModeChanged()>
<com.android.server.policy.WindowManagerPolicy.WindowState: android.graphics.Rect getDisplayFrameLw()>
<com.android.systemui.statusbar.phone.StatusBar: void toggleKeyboardShortcuts(int)>
<android.net.wifi.p2p.WifiP2pWfdInfo: boolean setDeviceType(int)>
<android.text.PrecomputedTextPerfTest: void testCreate_NoStyled_Hyphenation_WidthOnly()>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector classNameMatches(java.lang.String)>
<com.android.server.statusbar.StatusBarManagerInternal: void topAppWindowChanged(int,boolean,boolean)>
<com.android.systemui.qs.QSFooter: void disable(int,int,boolean)>
<com.android.systemui.statusbar.phone.PanelViewController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.car.navigationbar.CarNavigationBarController: boolean setRightWindowVisibility(int)>
<com.android.keyguard.KeyguardPatternView: boolean hasOverlappingRendering()>
<com.android.server.accessibility.MagnificationController: java.lang.String toString()>
<com.android.server.testing.shadows.ShadowPerformUnifiedRestoreTask: void reset()>
<com.android.server.SystemService: android.content.Context getUiContext()>
<javax.microedition.khronos.opengles.GL11: void glPointParameterf(int,float)>
<com.android.systemui.assist.AssistOrbContainer: void onFinishInflate()>
<com.android.server.policy.PhoneWindowManager: void enableKeyguard(boolean)>
<com.android.settingslib.bluetooth.BluetoothDiscoverableTimeoutReceiver: void cancelDiscoverableAlarm(android.content.Context)>
<com.android.server.uri.GrantUri: com.android.server.uri.GrantUri resolve(int,android.net.Uri,int)>
<com.android.server.pm.parsing.library.PackageBackwardCompatibility.AndroidTestRunnerSplitUpdater: void updatePackage(com.android.server.pm.parsing.pkg.ParsedPackage,boolean)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isExternalStorage()>
<javax.obex.ServerRequestHandler: int onDelete(javax.obex.HeaderSet,javax.obex.HeaderSet)>
<com.android.settingslib.net.NetworkCycleChartData.Builder: com.android.settingslib.net.NetworkCycleChartData build()>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void setOccluded(boolean,boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setOverScrollAmount(float,boolean,boolean)>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.NotificationRemoteInputManager.Callback provideNotificationRemoteInputManager(com.android.systemui.statusbar.phone.StatusBarRemoteInputCallback)>
<com.android.providers.settings.SettingsProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<com.android.systemui.shared.system.TransactionCompat: com.android.systemui.shared.system.TransactionCompat setMatrix(com.android.systemui.shared.system.SurfaceControlCompat,android.graphics.Matrix)>
<com.android.server.testing.shadows.ShadowBackupDataInput: boolean readNextHeader()>
<com.android.systemui.statusbar.notification.stack.NotificationSection: boolean setFirstVisibleChild(com.android.systemui.statusbar.notification.row.ExpandableView)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void resetUserExpansion()>
<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger.Event)>
<com.android.server.ConnectivityService: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
<javax.microedition.khronos.opengles.GL10: void glLightxv(int,int,java.nio.IntBuffer)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setCameraDisabled(android.content.ComponentName,boolean,boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: void releaseLnbInternal(com.android.server.tv.tunerresourcemanager.LnbResource)>
<com.android.server.pm.PackageManagerService: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>
<com.android.systemui.qs.tileimpl.SlashImageView: boolean getAnimationEnabled()>
<com.android.server.adb.AdbService: void denyWirelessDebugging()>
<com.android.server.uri.UriGrantsManagerInternal: void onSystemReady()>
<com.android.server.pm.InstantAppResolver: android.content.pm.AuxiliaryResolveInfo doInstantAppResolutionPhaseOne(com.android.server.pm.InstantAppResolverConnection,android.content.pm.InstantAppRequest)>
<com.android.soundpicker.RingtonePickerActivity: void onClick(android.content.DialogInterface,int)>
<com.android.shell.BugreportProgressService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.NotificationRemoteInputManager: com.android.systemui.statusbar.RemoteInputController getController()>
<com.android.server.policy.WindowManagerPolicy: int interceptMotionBeforeQueueingNonInteractive(int,long,int)>
<com.android.settingslib.suggestions.SuggestionController: void stop()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>
<com.android.keyguard.KeyguardHostView: void onSecurityModeChanged(com.android.keyguard.KeyguardSecurityModel.SecurityMode,boolean)>
<com.android.settingslib.Utils: boolean isDeviceProvisioningPackage(android.content.res.Resources,java.lang.String)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean hasPulsingNotifications()>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: boolean containsView(android.view.View)>
<com.android.server.appprediction.RemoteAppPredictionService: void executeOnResolvedService(com.android.internal.infra.AbstractRemoteService.AsyncRequest)>
<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: boolean isTestOnlyCertificateAlias(java.lang.String)>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: boolean panelEnabled()>
<android.net.wifi.aware.TlvBufferUtils.TlvConstructor: android.net.wifi.aware.TlvBufferUtils.TlvConstructor wrap(byte[])>
<com.android.keyguard.KeyguardClockSwitch: void setStyle(android.graphics.Paint.Style)>
<com.android.systemui.qs.QSDetailItems: void setItemsVisible(boolean)>
<com.android.systemui.util.DeviceConfigProxy: void addOnPropertiesChangedListener(java.lang.String,java.util.concurrent.Executor,android.provider.DeviceConfig.OnPropertiesChangedListener)>
<com.android.systemui.statusbar.notification.TransformState: void ensureVisible()>
<com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm: void <init>(android.content.Context,android.view.ViewGroup)>
<com.android.server.trust.TrustManagerService: long addEscrowToken(byte[],int)>
<com.android.systemui.pip.tv.PipControlsViewController: void setListener(com.android.systemui.pip.tv.PipControlsViewController.Listener)>
<com.android.server.locksettings.recoverablekeystore.storage.CleanupManager: void registerRecoveryAgent(int,int)>
<android.app.usage.UsageStatsManagerInternal: void reportEvent(android.content.ComponentName,int,int,int,android.content.ComponentName)>
<android.net.util.VersionedBroadcastListener: void <init>(java.lang.String,android.content.Context,android.os.Handler,android.content.IntentFilter,java.util.function.Consumer)>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: java.lang.CharSequence getWorkProfileOrganizationName()>
<com.android.settingslib.schedulesprovider.ScheduleInfo.Builder: com.android.settingslib.schedulesprovider.ScheduleInfo build()>
<com.android.systemui.qs.QSPanel.QSTileLayout: boolean updateResources()>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setDrawableAlpha(int)>
<com.android.settingslib.search.SearchIndexableData: java.lang.Class getTargetClass()>
<com.android.systemui.doze.DozeLog: java.lang.String reasonToString(int)>
<com.android.settingslib.wifi.AccessPointPreference: com.android.settingslib.wifi.AccessPoint getAccessPoint()>
<com.android.systemui.analytics.DataCollector: void onLeftAffordanceHintStarted()>
<com.android.systemui.volume.VolumeDialogControllerImpl: void getState()>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void setDialerAppPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.PackagesProvider)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: void onActiveDeviceChanged(boolean,int)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onBiometricAcquired(android.hardware.biometrics.BiometricSourceType)>
<android.content.pm.PackageManagerInternal: android.content.ComponentName getDefaultHomeActivity(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setStatusBarState(int)>
<com.android.settingslib.drawer.DashboardCategory: void sortTiles(java.lang.String)>
<android.processor.view.inspector.InspectableClassModel.Accessor: android.processor.view.inspector.InspectableClassModel.Accessor.Type getType()>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void grantDefaultPermissions(int)>
<com.android.systemui.car.statusbar.DozeServiceHost: boolean isPulsingBlocked()>
<com.android.server.pm.permission.PermissionManagerServiceInternal: android.permission.PermissionManagerInternal.CheckPermissionDelegate getCheckPermissionDelegate()>
<com.android.systemui.volume.VolumeToolTipView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: int getImportance()>
<com.android.systemui.statusbar.CrossFadeHelper: void fadeIn(android.view.View)>
<com.android.settingslib.widget.BarChartInfo: int getDetails()>
<com.android.settingslib.core.lifecycle.ObservablePreferenceFragment: boolean onOptionsItemSelected(android.view.MenuItem)>
<com.android.systemui.plugins.qs.QSTile.State: com.android.systemui.plugins.qs.QSTile.State copy()>
<com.android.systemui.statusbar.phone.StatusBarRemoteInputCallback: void onWorkChallengeChanged()>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: void setAnimationStateHandler(com.android.systemui.statusbar.phone.HeadsUpManagerPhone.AnimationStateHandler)>
<com.android.systemui.pip.PipBoundsHandler: void getInsetBounds(android.graphics.Rect)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: int getMaxExpandHeight()>
<com.android.settingslib.notification.EnableZenModeDialog: com.android.settingslib.notification.EnableZenModeDialog.ConditionTag getConditionTagAt(int)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void onPanelExpansionChanged(float,boolean)>
<com.android.server.tv.tunerresourcemanager.CasResource: int getUsedSessionNum()>
<com.android.systemui.statusbar.policy.SignalController: void notifyListeners()>
<com.android.systemui.statusbar.phone.NotificationIconContainer.IconState: void applyToView(android.view.View)>
<com.android.systemui.statusbar.policy.RemoteInputView: void afterTextChanged(android.text.Editable)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void onExpandedByGesture(boolean)>
<com.android.systemui.statusbar.phone.ManagedProfileControllerImpl: boolean isWorkModeEnabled()>
<com.android.systemui.shared.plugins.PluginManagerImpl: void <init>(android.content.Context,com.android.systemui.shared.plugins.PluginInitializer)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: com.android.systemui.statusbar.notification.row.HybridNotificationView getSingleLineView()>
<com.android.server.pm.Settings: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentityLPw()>
<android.net.wifi.hotspot2.PasspointConfiguration: void setHomeSp(android.net.wifi.hotspot2.pps.HomeSp)>
<com.android.server.accessibility.AccessibilityManagerService: int getCurrentUserIdLocked()>
<com.android.settingslib.SliceBroadcastRelay: void unregisterReceivers(android.content.Context,android.net.Uri)>
<com.android.server.LooperStatsService.Lifecycle: void onBootPhase(int)>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isQsCustomizerShowing()>
<com.android.settingslib.drawer.ProviderTile: int getComponentIcon(android.content.pm.ComponentInfo)>
<com.android.systemui.statusbar.notification.stack.SectionHeaderView: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.systemui.statusbar.notification.stack.AnimationFilter: com.android.systemui.statusbar.notification.stack.AnimationFilter animateScale()>
<com.android.systemui.statusbar.phone.MultiUserSwitch: boolean hasMultipleUsers()>
<com.android.systemui.statusbar.phone.StatusBarIconController: void setMobileIcons(java.lang.String,java.util.List)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void showIconIsolated(com.android.systemui.statusbar.StatusBarIconView,boolean)>
<com.android.systemui.Prefs: void unregisterListener(android.content.Context,android.content.SharedPreferences.OnSharedPreferenceChangeListener)>
<com.android.systemui.doze.DozeSensors: void ignoreTouchScreenSensorsSettingInterferingWithDocking(boolean)>
<com.android.settingslib.widget.AnimatedImageView: void setImageResource(int)>
<android.util.ArraySetPerfTest: void testRemoveIf_Large_RemoveHalf()>
<com.android.systemui.statusbar.phone.StatusBar: void animateExpandSettingsPanel(java.lang.String)>
<com.android.systemui.tuner.TunerFragment: void onResume()>
<com.android.server.audio.AudioSystemAdapter: boolean isStreamActive(int,int)>
<com.android.server.ConnectivityService: void stopKeepalive(android.net.Network,int)>
<com.android.systemui.classifier.FalsingManagerFake: void onLeftAffordanceOn()>
<com.android.systemui.statusbar.GestureRecorder.Gesture.Record: java.lang.String toJson()>
<com.android.systemui.globalactions.ListGridLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.wallpaper.WallpaperManagerService: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int)>
<com.android.server.pm.PackageManagerService: boolean getBlockUninstallForUser(java.lang.String,int)>
<com.android.fakeoemfeatures.FakeBackgroundService: void onDestroy()>
<com.android.server.policy.WindowManagerPolicy.RotationSource: int getProposedRotation()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean shouldSuppressNotificationList()>
<com.android.networkstack.tethering.BpfCoordinator: void stopPolling()>
<com.android.systemui.statusbar.phone.KeyguardBouncer: void <init>(android.content.Context,com.android.keyguard.ViewMediatorCallback,com.android.internal.widget.LockPatternUtils,android.view.ViewGroup,com.android.systemui.keyguard.DismissCallbackRegistry,com.android.systemui.plugins.FalsingManager,com.android.systemui.statusbar.phone.KeyguardBouncer.BouncerExpansionCallback,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.statusbar.phon.KeyguardBypassController,android.os.Handler)>
<com.android.server.autofill.AutofillManagerService: void enforceCallingPermissionForManagement()>
<com.android.gallery3d.glrenderer.GLES20Canvas: void setAlpha(float)>
<com.android.systemui.egg.MLand: int irand(int,int)>
<com.android.keyguard.KeyguardSliceView: void setDarkAmount(float)>
<com.android.server.devicepolicy.OverlayPackagesProvider: void <init>(android.content.Context)>
<com.android.settingslib.media.MediaManager: void registerCallback(com.android.settingslib.media.MediaManager.MediaDeviceCallback)>
<com.android.gallery3d.common.Utils: boolean isOpaque(int)>
<com.android.systemui.screenrecord.RecordingController: boolean isStarting()>
<com.android.server.pm.PersistentPreferredIntentResolver: com.android.server.pm.PersistentPreferredActivity[] newArray(int)>
<com.android.server.biometrics.face.FaceUserState: void <init>(android.content.Context,int)>
<com.android.systemui.statusbar.notification.stack.NotificationRoundnessManager: void onHeadsUpPinned(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.tuner.ClockPreference: void onAttached()>
<com.android.systemui.statusbar.phone.RegionSamplingHelper: void updateSamplingRect()>
<android.net.TetheringManager: void stopTethering(int)>
<com.android.systemui.SystemUIAppComponentFactory: android.content.ContentProvider instantiateProviderCompat(java.lang.ClassLoader,java.lang.String)>
<com.android.systemui.util.leak.WeakIdentityHashMap: java.lang.Object get(java.lang.Object)>
<com.android.server.compat.PlatformCompat: boolean registerListener(long,com.android.server.compat.CompatChange.ChangeListener)>
<com.android.server.accessibility.AccessibilityManagerService: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>
<com.android.systemui.qs.customize.QSCustomizer: void setEditLocation(int,int)>
<com.android.systemui.DessertCaseView.RescalingContainer: void <init>(android.content.Context)>
<com.android.systemui.egg.MLand: float clamp(float)>
<android.net.wifi.rtt.CivicLocation: int hashCode()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setHideSensitiveForIntrinsicHeight(boolean)>
<com.android.server.testing.shadows.ShadowAppBackupUtils: void setAppEligibleForBackup(java.lang.String)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getCompileSdkVersion()>
<com.android.server.pm.Settings: com.android.server.pm.Settings.VersionInfo getInternalVersion()>
<com.android.uiautomator.core.UiDevice: boolean isScreenOn()>
<com.android.settingslib.bluetooth.MapClientProfile: int getNameResource(android.bluetooth.BluetoothDevice)>
<com.android.settingslib.widget.AppEntitiesHeaderController: com.android.settingslib.widget.AppEntitiesHeaderController newInstance(android.content.Context,android.view.View)>
<com.android.systemui.tuner.AutoScrollView: boolean onDragEvent(android.view.DragEvent)>
<com.android.server.slice.SliceFullAccessList: void <init>(android.content.Context)>
<com.android.systemui.qs.tiles.UserDetailView: com.android.systemui.qs.tiles.UserDetailView inflate(android.content.Context,android.view.ViewGroup,boolean)>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.lang.String importKey(java.lang.String,byte[])>
<com.android.keyguard.KeyguardPatternView: boolean disallowInterceptTouch(android.view.MotionEvent)>
<com.android.systemui.pip.tv.PipManager: void showPictureInPictureMenu()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean isBouncerShowing()>
<android.net.TetheringManager: void requestLatestTetheringEntitlementResult(int,boolean,java.util.concurrent.Executor,android.net.TetheringManager.OnTetheringEntitlementResultListener)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void appTransitionPending(int,boolean)>
<com.android.server.Watchdog.OpenFdMonitor: com.android.server.Watchdog.OpenFdMonitor create()>
<com.android.systemui.statusbar.notification.stack.NotificationSwipeHelper.NotificationCallback: void onSnooze(android.service.notification.StatusBarNotification,int)>
<com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper: void snooze(android.service.notification.StatusBarNotification,int)>
<com.android.server.biometrics.face.FaceAuthenticator: boolean isHardwareDetected(java.lang.String)>
<com.android.powermodel.AttributionKey: int getUid()>
<com.android.networkstack.tethering.TetheringDependencies: com.android.networkstack.tethering.EntitlementManager getEntitlementManager(android.content.Context,android.os.Handler,android.net.util.SharedLog,java.lang.Runnable)>
<com.android.server.appprediction.RemoteAppPredictionService: long getRemoteRequestMillis()>
<com.android.printservice.recommendation.plugin.samsung.SamsungRecommendationPlugin: java.lang.CharSequence getPackageName()>
<com.android.systemui.util.leak.DumpTruck: void <init>(android.content.Context)>
<com.android.commands.sm.Sm: void runSetSdcardfs()>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void setListening(boolean)>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setMatchFilter(java.util.List)>
<com.android.bluetoothmidiservice.BluetoothPacketEncoder: void <init>(com.android.bluetoothmidiservice.PacketEncoder.PacketReceiver,int)>
<com.android.systemui.statusbar.policy.NetworkController.AccessPointController.AccessPointCallback: void onAccessPointsChanged(java.util.List)>
<com.android.systemui.statusbar.policy.KeyButtonRipple: void setGlowAlpha(float)>
<com.android.shell.BugreportRequestedReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.statusbar.notification.row.NotificationGuts: void openControls(boolean,int,int,boolean,java.lang.Runnable)>
<android.net.wifi.p2p.WifiP2pDevice: boolean isGroupLimit()>
<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>
<com.android.systemui.classifier.SpeedClassifier: java.lang.String getTag()>
<com.android.systemui.power.PowerUI: void <init>(android.content.Context,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.statusbar.CommandQueue,dagger.Lazy)>
<com.android.systemui.statusbar.phone.StatusBar: void postAnimateForceCollapsePanels()>
<android.view.CutoutSpecificationBenchmark: void setUp()>
<com.android.keyguard.KeyguardAbsKeyInputView: void onUserInput()>
<com.android.systemui.statusbar.phone.BiometricUnlockController: void onBiometricError(int,java.lang.String,android.hardware.biometrics.BiometricSourceType)>
<com.android.printspooler.model.RemotePrintDocument: boolean update(android.print.PrintAttributes,android.print.PageRange[],boolean)>
<com.android.server.usb.descriptors.report.ReportCanvas: com.android.server.usb.descriptors.UsbDescriptorParser getParser()>
<com.android.server.ConnectivityService: boolean avoidBadWifi()>
<com.android.systemui.classifier.FalsingManagerProxy: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void resetUserExpansion()>
<com.android.systemui.dagger.DefaultActivityBinder: android.app.Activity bindUsbDebuggingActivity(com.android.systemui.usb.UsbDebuggingActivity)>
<android.net.TetheringManager.TetheringInterfaceRegexps: java.util.List getTetherableUsbRegexs()>
<android.widget.TextViewOnMeasurePerfTest: void testMeasure_Exactly()>
<com.android.systemui.stackdivider.SyncTransactionQueue.TransactionRunnable: void runWithTransaction(android.view.SurfaceControl.Transaction)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isPinnedAndExpanded()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>
<com.android.server.policy.PhoneWindowManager: void setOverrideFoldedArea(android.graphics.Rect)>
<com.android.server.policy.WindowManagerPolicy: void onKeyguardOccludedChangedLw(boolean)>
<com.android.settingslib.suggestions.SuggestionController: void start()>
<com.android.server.biometrics.AuthService: void <init>(android.content.Context,com.android.server.biometrics.AuthService.Injector)>
<com.android.settingslib.applications.DefaultAppInfo: void <init>(android.content.Context,android.content.pm.PackageManager,int,android.content.pm.PackageItemInfo,java.lang.String,boolean)>
<com.android.settingslib.wifi.AccessPoint: boolean isOweTransitionMode()>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void hide(long,long)>
<com.android.gallery3d.exif.ExifTag: java.lang.String forceGetValueAsString()>
<com.android.systemui.assist.AssistManager: void onInvocationProgress(int,float)>
<com.android.systemui.qs.tiles.LocationTile: int getMetricsCategory()>
<com.android.systemui.statusbar.NotificationListener: void onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap)>
<com.android.printservice.recommendation.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>
<javax.microedition.khronos.opengles.GL11: void glGenBuffers(int,int[],int)>
<android.view.autofill.AbstractAutofillPerfTestCase: void onCreate(android.perftests.utils.PerfTestActivity)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void drawRect(float,float,float,float,com.android.gallery3d.glrenderer.GLPaint)>
<com.android.gallery3d.exif.ExifInterface: void writeExif(java.io.InputStream,java.io.OutputStream)>
<com.android.networkstack.tethering.OffloadHardwareInterface: boolean setDataLimit(java.lang.String,long)>
<com.android.gallery3d.exif.ExifInterface: int getRotationForOrientationValue(short)>
<com.android.server.pm.UserManagerService: void onBeforeStartUser(int)>
<com.android.systemui.statusbar.notification.logging.NotificationLogger: void startNotificationLogging()>
<com.android.gallery3d.exif.ExifTag: void getBytes(byte[])>
<com.android.systemui.statusbar.phone.NavigationBarView: void updateDisabledSystemUiStateFlags()>
<android.media.Session2Link: void onDisconnect(android.media.Controller2Link,int)>
<android.perftests.utils.StateKeeperRule: void <init>(android.perftests.utils.StateManager)>
<com.android.printservice.recommendation.util.Preconditions: java.util.Collection checkCollectionNotEmpty(java.util.Collection,java.lang.String)>
<com.android.systemui.qs.QuickQSPanel: boolean displayMediaMarginsOnMedia()>
<com.android.systemui.qs.TouchAnimator.ListenerAdapter: void onAnimationAtEnd()>
<com.android.systemui.statusbar.phone.StatusBar: void endAffordanceLaunch()>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void onThemeChanged()>
<com.android.systemui.statusbar.policy.EmergencyCryptkeeperText: void onDetachedFromWindow()>
<com.android.systemui.biometrics.AuthContainerView.Builder: com.android.systemui.biometrics.AuthContainerView.Builder setRequireConfirmation(boolean)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage: android.security.keystore.recovery.KeyChainSnapshot get(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean disallowSingleClick(android.view.MotionEvent)>
<com.android.printspooler.widget.PrintContentView: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setMaxHeadsUpTranslation(float)>
<com.android.systemui.statusbar.phone.StatusBarIconController: void addIconGroup(com.android.systemui.statusbar.phone.StatusBarIconController.IconManager)>
<com.android.media.remotedisplay.RemoteDisplay: void <init>(java.lang.String,java.lang.String)>
<com.android.systemui.plugins.qs.DetailAdapter: com.android.internal.logging.UiEventLogger.UiEventEnum closeDetailEvent()>
<com.android.systemui.media.RingtonePlayer: void start()>
<com.android.dynsystem.DynamicSystemInstallationService: void onCreate()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void flingSettings(float,int,java.lang.Runnable,boolean)>
<com.android.systemui.shared.plugins.PluginInstanceManager: com.android.systemui.shared.plugins.PluginInstanceManager.PluginInfo getPlugin()>
<com.android.server.autofill.ui.FillUi.Callback: void onDatasetPicked(android.service.autofill.Dataset)>
<com.android.server.audio.AudioService: void handleVolumeKey(android.view.KeyEvent,boolean,java.lang.String,java.lang.String)>
<com.android.settingslib.RestrictedLockUtilsInternal: com.android.settingslib.RestrictedLockUtils.EnforcedAdmin checkIfInputMethodDisallowed(android.content.Context,java.lang.String,int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void removeOnSensitivityChangedListener(com.android.systemui.statusbar.notification.collection.NotificationEntry.OnSensitivityChangedListener)>
<android.net.wifi.ScanResult: int describeContents()>
<com.android.systemui.statusbar.policy.BatteryController: void getEstimatedTimeRemainingString(com.android.systemui.statusbar.policy.BatteryController.EstimateFetchCompletion)>
<com.android.systemui.qs.customize.CustomizeTileView: android.widget.TextView getAppLabel()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void showBouncer(boolean)>
<com.android.gallery3d.exif.ExifInterface: double[] getLatLongAsDoubles()>
<com.android.systemui.ActivityIntentHelper: boolean wouldShowOverLockscreen(android.content.Intent,int)>
<com.android.server.integrity.parser.RandomAccessInputStream: int getPosition()>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void showOperatorName(boolean)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setDozeAmount(float)>
<com.android.settingslib.wifi.WifiTracker: java.util.List getAccessPoints()>
<com.android.egg.neko.PrefState: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)>
<android.net.wifi.WifiManager: boolean isAutoWakeupEnabled()>
<com.android.systemui.qs.QSFragment: int getQsMinExpansionHeight()>
<com.android.systemui.egg.MLand: int getControllerPlayer(int)>
<com.android.systemui.pip.phone.PipManager: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.ServiceWatcher.ServiceInfo: int compareTo(com.android.server.ServiceWatcher.ServiceInfo)>
<com.android.commands.hid.Event: java.util.Map getOutputs()>
<com.android.systemui.plugins.DarkIconDispatcher: void removeDarkReceiver(android.widget.ImageView)>
<com.android.server.vr.VrManagerInternal: int getVr2dDisplayId()>
<com.android.server.utils.AppInstallerUtil: android.content.Intent createIntent(android.content.Context,java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setTranslation(float)>
<com.android.commands.svc.SystemServerCommand: java.lang.String shortHelp()>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: void startAnimation()>
<com.android.systemui.recents.OverviewProxyService: com.android.systemui.shared.recents.IOverviewProxy getProxy()>
<javax.obex.ServerOperation: java.lang.String getType()>
<com.android.systemui.classifier.FalsingManagerFake: void onAffordanceSwipingStarted(boolean)>
<com.android.systemui.statusbar.notification.InstantAppNotifier: void preloadRecentApps()>
<com.android.server.TelephonyRegistry: void addOnOpportunisticSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage: void add(int,com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage.Entry)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void invertViewLuminosity(android.view.View)>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: void writeToParcel(android.os.Parcel,int)>
<com.android.keyguard.KeyguardMessageArea: void onDetachedFromWindow()>
<javax.microedition.khronos.opengles.GL11: void glGetLightxv(int,int,java.nio.IntBuffer)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: int getHeadsUpHeightWithoutHeader()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isDimmable()>
<com.android.settingslib.dream.DreamBackend: android.content.ComponentName getActiveDream()>
<com.android.server.biometrics.iris.IrisAuthenticator: long getAuthenticatorId(int)>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void setKeyguardUserSwitcher(com.android.systemui.statusbar.policy.KeyguardUserSwitcher)>
<com.android.systemui.statusbar.ScrimView: float getViewAlpha()>
<com.android.server.usb.UsbService: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
<com.android.server.usb.descriptors.Usb20ACOutputTerminal: byte getClkSourceID()>
<com.android.systemui.car.navigationbar.CarNavigationBarController: com.android.systemui.car.navigationbar.CarNavigationBarView getLeftBar(boolean)>
<com.android.server.pm.dex.DexoptOptions: boolean isForce()>
<com.android.server.slice.SliceManagerService: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onHeightChanged(com.android.systemui.statusbar.notification.row.ExpandableView,boolean)>
<com.android.settingslib.widget.LayoutPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void unbindCameraPrewarmService(boolean)>
<com.android.gallery3d.exif.ExifInterface: boolean setTagValue(int,java.lang.Object)>
<com.android.gallery3d.exif.ExifTag: long[] getValueAsLongs()>
<android.net.wifi.WifiInfo: double getLostTxPacketsPerSecond()>
<com.android.server.policy.PhoneWindowManager: boolean isKeyguardShowingAndNotOccluded()>
<com.android.server.pm.permission.BasePermission: java.lang.String getName()>
<com.android.systemui.statusbar.phone.PanelViewController: void <init>(com.android.systemui.statusbar.phone.PanelView,com.android.systemui.plugins.FalsingManager,com.android.systemui.doze.DozeLog,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.statusbar.SysuiStatusBarStateController,com.android.systemui.statusbar.VibratorHelper,com.android.internal.util.LatencyTracker,com.android.systemui.statusbar.FlingAnimationUtils.Builder,com.android.systemui.statusbar.phone.StatusBarTouchableRegionManager)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: void onStateChanged(int)>
<com.android.egg.neko.Food: void <init>(int)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: com.android.systemui.statusbar.StatusIconDisplayable addHolder(int,java.lang.String,boolean,com.android.systemui.statusbar.phone.StatusBarIconHolder)>
<com.android.systemui.wm.DisplayLayout: android.view.DisplayCutout calculateDisplayCutoutForRotation(android.view.DisplayCutout,int,int,int)>
<com.android.server.locksettings.LockSettingsStrongAuth: void reportSuccessfulBiometricUnlock(boolean,int)>
<com.android.server.pm.PackageManagerService: java.lang.String[] getNamesForUids(int[])>
<com.android.server.SystemServiceManager: boolean isRuntimeRestarted()>
<com.android.systemui.assist.AssistHandleBehaviorController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.pm.pkg.PackageStateUnserialized: java.lang.String getOverrideSeInfo()>
<com.android.settingslib.deviceinfo.StorageMeasurement.MeasurementReceiver: void onDetailsChanged(com.android.settingslib.deviceinfo.StorageMeasurement.MeasurementDetails)>
<com.android.systemui.qs.QSPanel: void setDetailRecord(com.android.systemui.qs.QSPanel.Record)>
<com.android.carrierdefaultapp.CustomConfigLoader: java.util.List loadCarrierActionList(android.content.Context,android.content.Intent)>
<com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.ActivityInfo generateActivityInfo(com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.parsing.component.ParsedActivity,int,android.content.pm.PackageUserState,int,com.android.server.pm.PackageSetting)>
<com.android.settingslib.media.ConnectionRecordManager: java.lang.String getLastSelectedDevice()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: android.graphics.Path getCustomClipPath(android.view.View)>
<com.android.systemui.volume.ZenModePanel: void onVisibilityAggregated(boolean)>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void removeIcon(java.lang.String)>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void setSimCallManagerPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.PackagesProvider)>
<com.android.settingslib.applications.ApplicationsState.AppEntry: void ensureLabel(android.content.Context)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setEndUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>
<com.android.systemui.statusbar.NotificationUiAdjustment: boolean needReinflate(com.android.systemui.statusbar.NotificationUiAdjustment,com.android.systemui.statusbar.NotificationUiAdjustment)>
<com.android.systemui.car.navigationbar.CarNavigationBarController.NotificationsShadeController: void togglePanel()>
<com.android.settingslib.users.AppRestrictionsHelper: void applyUserAppsStates(com.android.settingslib.users.AppRestrictionsHelper.OnDisableUiForPackageListener)>
<com.android.server.input.InputManagerService: int isInTabletMode()>
<com.android.settingslib.utils.PowerUtil: long roundTimeToNearestThreshold(long,long)>
<android.net.wifi.WifiConfiguration: android.net.StaticIpConfiguration getStaticIpConfiguration()>
<com.android.server.clipboard.ClipboardService: void onStart()>
<com.android.systemui.statusbar.KeyboardShortcutKeysLayout: void onLayout(boolean,int,int,int,int)>
<com.android.systemui.shared.system.TransactionCompat: com.android.systemui.shared.system.TransactionCompat setSize(com.android.systemui.shared.system.SurfaceControlCompat,int,int)>
<com.android.settingslib.graph.BatteryMeterDrawableBase: void <init>(android.content.Context,int)>
<com.android.systemui.bubbles.BubbleController: void onUserChangedImportance(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexfvOES(java.nio.FloatBuffer)>
<com.android.systemui.globalactions.GlobalActionsDialog.MyAdapter: boolean areAllItemsEnabled()>
<com.android.settingslib.bluetooth.A2dpProfile: android.bluetooth.BluetoothDevice getActiveDevice()>
<com.android.settingslib.animation.AppearAnimationUtils: void <init>(android.content.Context)>
<com.android.server.media.MediaRouterService: void transferToRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>
<android.net.util.TetheringUtils.ForwardedStats: java.lang.String toString()>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void setExpandingNotification(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<android.net.wifi.ScanResult: boolean is24GHz()>
<com.android.systemui.statusbar.phone.StatusBarIconHolder: int getType()>
<com.android.keyguard.KeyguardAbsKeyInputView: void onFinishInflate()>
<com.android.systemui.statusbar.StatusBarIconView: boolean isDismissed()>
<com.android.server.appop.AppOpsService: void addHistoricalOps(android.app.AppOpsManager.HistoricalOps)>
<com.android.systemui.tuner.LockscreenFragment: android.content.pm.ActivityInfo getActivityinfo(android.content.Context,java.lang.String)>
<com.android.systemui.classifier.SpeedRatioEvaluator: float evaluate(float)>
<com.android.systemui.plugins.GlobalActionsPanelPlugin.PanelViewController: android.graphics.drawable.Drawable getBackgroundDrawable()>
<com.android.systemui.SwipeHelper: float getSize(android.view.View)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void onFinishedWakingUp()>
<com.android.systemui.statusbar.phone.NotificationGroupManager: void onEntryUpdated(com.android.systemui.statusbar.notification.collection.NotificationEntry,java.lang.String,boolean,boolean)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: com.android.systemui.statusbar.phone.PanelViewController.OnConfigurationChangedListener createOnConfigurationChangedListener()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void animateExpandNotificationsPanel()>
<com.android.server.biometrics.face.FaceService: void serviceDied(long)>
<com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage: void setSymmetricKeyEntry(int,int,java.lang.String,byte[])>
<com.android.server.pm.UserTypeDetails.Builder: com.android.server.pm.UserTypeDetails.Builder setBadgeNoBackground(int)>
<com.android.systemui.appops.AppOpItem: void <init>(int,int,java.lang.String,long)>
<com.android.server.accounts.AccountManagerService: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
<android.os.ParcelPerfTest: void timeReadLong()>
<com.android.printspooler.model.PrintSpoolerService: void onCreate()>
<com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.NotifFilter: boolean shouldFilterOut(com.android.systemui.statusbar.notification.collection.NotificationEntry,long)>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void updateNotification(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap)>
<com.android.systemui.keyguard.WakefulnessLifecycle: void dispatchFinishedGoingToSleep()>
<com.android.server.usb.descriptors.Usb20ASFormatIII: byte getSubslotSize()>
<com.android.systemui.DessertCaseView.RescalingContainer: void onLayout(boolean,int,int,int,int)>
<com.android.server.usb.descriptors.tree.UsbDescriptorsTreeNode: void shortReport(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void recreateNotificationHeader(android.view.View.OnClickListener,boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: android.graphics.Path getClipPath(boolean)>
<com.android.systemui.dagger.ContextComponentResolver: android.content.BroadcastReceiver resolveBroadcastReceiver(java.lang.String)>
<com.android.systemui.doze.DozePauser: void transitionTo(com.android.systemui.doze.DozeMachine.State,com.android.systemui.doze.DozeMachine.State)>
<android.net.wifi.WifiEnterpriseConfig: void setAltSubjectMatch(java.lang.String)>
<com.android.systemui.statusbar.GestureRecorder: void saveLater()>
<com.android.server.voiceinteraction.DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>
<com.android.server.appop.AppOpsService: java.util.List getPackagesForOps(int[])>
<com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper: boolean isFalseGesture()>
<com.android.server.pm.permission.PermissionManagerService: void grantDefaultPermissionsToEnabledImsServices(java.lang.String[],int)>
<com.android.settingslib.bluetooth.PbapServerProfile: boolean isAutoConnectable()>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean isDimming()>
<com.android.systemui.qs.QSPanel: boolean needsDynamicRowsAndColumns()>
<com.android.server.pm.ShortcutService: boolean isUserUnlockedL(int)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: void releaseCasSessionInternal(com.android.server.tv.tunerresourcemanager.CasResource,int)>
<com.android.printspooler.util.MediaSizeUtils.MediaSizeComparator: java.lang.String getLabel(android.content.Context,android.print.PrintAttributes.MediaSize)>
<com.android.settingslib.media.MediaDeviceUtils: java.lang.String getId(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.server.locksettings.LockSettingsService: boolean shouldMigrateToSyntheticPasswordLocked(int)>
<com.android.settingslib.location.SettingsInjector.Setting: java.lang.String toString()>
<com.android.systemui.volume.VolumeDialogComponent: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.gallery3d.glrenderer.RawTexture: boolean onBind(com.android.gallery3d.glrenderer.GLCanvas)>
<com.example.android.networkusage.NetworkActivity: boolean onOptionsItemSelected(android.view.MenuItem)>
<com.android.server.audio.AudioDeviceInventory: void onSetA2dpSinkConnectionState(com.android.server.audio.BtHelper.BluetoothA2dpDeviceInfo,int)>
<com.android.settingslib.bluetooth.LocalBluetoothProfile: int getDrawableResource(android.bluetooth.BluetoothClass)>
<com.android.systemui.shared.plugins.PluginInitializer: android.os.Looper getBgLooper()>
<com.android.server.pm.Policy: java.lang.String toString()>
<com.android.server.devicepolicy.CryptoTestHelper: void runAndLogSelfTest()>
<com.android.systemui.statusbar.phone.SystemUIDialog: void setWindowOnTop(android.app.Dialog)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setOdm(boolean)>
<com.android.systemui.statusbar.notification.row.NotificationSnooze.NotificationSnoozeOption: void <init>(android.service.notification.SnoozeCriterion,int,java.lang.CharSequence,java.lang.CharSequence,android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction)>
<com.android.systemui.pip.tv.PipMenuActivity: void onPipMenuActionsChanged(android.content.pm.ParceledListSlice)>
<android.net.wifi.WifiManager.WpsCallback: void onSucceeded()>
<com.android.settingslib.development.SystemPropPoker.PokerTask: java.lang.Void doInBackground(java.lang.Void[])>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: boolean isEmergencyOnly()>
<com.android.gallery3d.glrenderer.GLCanvas: void deleteRecycledResources()>
<com.android.systemui.statusbar.HeadsUpStatusBarView: void <init>(android.content.Context)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isScreenOn()>
<com.android.keyguard.KeyguardUpdateMonitor: void onTrustError(java.lang.CharSequence)>
<com.android.uiautomator.core.UiDevice: void waitForIdle()>
<com.android.settingslib.widget.ActionButtonsPreference: void onBindViewHolder(androidx.preference.PreferenceViewHolder)>
<com.android.server.policy.WindowManagerPolicy: int getMaxWindowLayer()>
<com.android.systemui.statusbar.phone.DozeParameters: void <init>(android.content.res.Resources,android.hardware.display.AmbientDisplayConfiguration,com.android.systemui.doze.AlwaysOnDisplayPolicy,android.os.PowerManager,com.android.systemui.tuner.TunerService)>
<com.android.systemui.statusbar.phone.StatusBarIconList: int size()>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: void setMenuShown(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<android.net.wifi.hotspot2.IProvisioningCallback: void onProvisioningComplete()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenf(int,int,float)>
<com.android.mediadrm.signer.MediaDrmSigner: com.android.mediadrm.signer.MediaDrmSigner.Certificate provideCertificateResponse(android.media.MediaDrm,byte[])>
<com.android.printservice.recommendation.plugin.mdnsFilter.MDNSFilterPlugin: int getName()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGenfv(int,int,float[],int)>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean needsClippingToShelf()>
<com.android.providers.settings.SettingsBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>
<com.android.settingslib.drawable.CircleFramedDrawable: float getScale()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void removeOnExpandedHeightChangedListener(java.util.function.BiConsumer)>
<com.android.server.usb.descriptors.UsbMSMidiHeader: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.server.pm.StagingManager.Lifecycle: void <init>(android.content.Context)>
<com.android.packageinstaller.wear.WearPackageIconProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.server.usb.descriptors.report.UsbStrings: java.lang.String getACInterfaceSubclassName(int)>
<com.android.server.usb.descriptors.report.ReportCanvas: void openListItem()>
<com.android.printservice.recommendation.util.MDNSUtils: java.lang.String getString(byte[])>
<com.android.settingslib.graph.BluetoothDeviceLayerDrawable: com.android.settingslib.graph.BluetoothDeviceLayerDrawable createLayerDrawable(android.content.Context,int,int)>
<android.net.wifi.hotspot2.pps.Policy: void setPreferredRoamingPartnerList(java.util.List)>
<android.net.ip.IpClientCallbacks: void onPreDhcpAction()>
<com.android.keyguard.KeyguardSecurityContainer: void setSecurityCallback(com.android.keyguard.KeyguardSecurityContainer.SecurityCallback)>
<com.android.settingslib.fuelgauge.BatterySaverUtils: boolean maybeShowBatterySaverConfirmation(android.content.Context,android.os.Bundle)>
<com.android.systemui.statusbar.notification.stack.MediaHeaderView: void setContentView(android.view.ViewGroup)>
<com.android.server.slice.SliceManagerService: boolean hasSliceAccess(java.lang.String)>
<com.android.systemui.plugins.qs.QSFactory: com.android.systemui.plugins.qs.QSTileView createTileView(com.android.systemui.plugins.qs.QSTile,boolean)>
<com.android.systemui.qs.PagedTileLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.settingslib.net.DataUsageController: com.android.settingslib.net.DataUsageController.DataUsageInfo getDataUsageInfo(android.net.NetworkTemplate)>
<com.android.server.testing.shadows.ShadowApplicationPackageManager: void setPackageUid(java.lang.String,int)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void onBluetoothStateChanged(int)>
<com.android.keyguard.KeyguardPasswordView: boolean needsInput()>
<com.android.systemui.SystemUIService: void onCreate()>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator.ExpandAnimationParameters: int getParentStartClipTopAmount()>
<android.net.wifi.WifiEnterpriseConfig: void setOcsp(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void generateAddAnimation(com.android.systemui.statusbar.notification.row.ExpandableView,boolean)>
<com.android.commands.svc.Svc.Command: java.lang.String name()>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void doKeyguardTimeout(android.os.Bundle)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean shouldDisableWindowAnimationsForUnlock()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setKeyguardIndicationController(com.android.systemui.statusbar.KeyguardIndicationController)>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onActivityLaunchOnSecondaryDisplayFailed(android.app.ActivityManager.RunningTaskInfo,int)>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: android.app.ActivityManagerInternal getActivityManagerInternal()>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareService.Lifecycle: void onStart()>
<com.android.systemui.plugins.VolumeDialogController.Callbacks: void onScreenOff()>
<com.android.systemui.statusbar.phone.NavigationModeController.ModeChangedListener: void onNavigationModeChanged(int)>
<com.android.systemui.bubbles.animation.AnimatableScaleMatrix: float getPivotY()>
<com.android.systemui.shared.system.KeyguardManagerCompat: void <init>(android.content.Context)>
<com.android.systemui.statusbar.phone.StatusBarWindowView: android.util.Pair cornerCutoutMargins(android.view.DisplayCutout,android.view.Display)>
<com.android.settingslib.bluetooth.HeadsetProfile: int getNameResource(android.bluetooth.BluetoothDevice)>
<com.android.server.attention.AttentionManagerService.AttentionCheckCacheBuffer: com.android.server.attention.AttentionManagerService.AttentionCheckCache getLast()>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: int getSharedUserLabel()>
<com.android.photos.BitmapRegionTileSource.ResourceBitmapSource: boolean readExif(com.android.gallery3d.exif.ExifInterface)>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: boolean needsSeparateWorkChallenge(int)>
<com.android.systemui.qs.tileimpl.QSIconViewImpl: int getIconMeasureMode()>
<com.android.systemui.qs.external.CustomTile: int getUser()>
<com.android.server.PinnerService: void <init>(android.content.Context)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: float getTranslationX()>
<com.android.wallpaperbackup.WallpaperBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>
<com.android.systemui.appops.AppOpItem: java.lang.String toString()>
<com.android.server.EntropyMixer: void <init>(android.content.Context)>
<com.android.systemui.ActivityStarterDelegate: void postStartActivityDismissingKeyguard(android.app.PendingIntent)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setLongSupportMessage(android.content.ComponentName,java.lang.CharSequence)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void onHeightUpdated(float)>
<com.android.systemui.qs.QSPanel: com.android.systemui.qs.QSEvent openPanelEvent()>
<com.android.systemui.statusbar.NotificationRemoteInputManager: boolean activateRemoteInput(android.view.View,android.app.RemoteInput[],android.app.RemoteInput,android.app.PendingIntent,com.android.systemui.statusbar.notification.collection.NotificationEntry.EditedSuggestionInfo)>
<com.android.settingslib.development.DeveloperOptionsPreferenceController: boolean isAvailable()>
<android.net.wifi.aware.IWifiAwareManager: boolean isUsageEnabled()>
<com.android.server.usb.descriptors.report.TextReportCanvas: void openHeader(int)>
<com.android.server.biometrics.BiometricService.Injector: void publishBinderService(com.android.server.biometrics.BiometricService,android.hardware.biometrics.IBiometricService.Stub)>
<com.android.server.accessibility.gestures.GestureManifold.Listener: void onDoubleTapAndHold(android.view.MotionEvent,android.view.MotionEvent,int)>
<com.android.systemui.qs.tiles.ColorInversionTile: java.lang.CharSequence getTileLabel()>
<com.android.server.uri.UriPermissionOwner: void addWritePermission(com.android.server.uri.UriPermission)>
<com.google.android.startop.iorap.AppLaunchEvent: void writeToParcelImpl(android.os.Parcel,int)>
<com.android.server.pm.ShortcutService: int getRemainingCallCount(java.lang.String,int)>
<javax.microedition.khronos.opengles.GL10: void glTexEnvfv(int,int,java.nio.FloatBuffer)>
<com.android.server.pm.PackageInstallerService: android.content.pm.IPackageInstallerSession openSession(int)>
<com.android.server.display.DisplayModeDirector.DesiredDisplayModeSpecs: boolean equals(java.lang.Object)>
<android.net.wifi.SoftApConfiguration.Builder: android.net.wifi.SoftApConfiguration.Builder setSsid(java.lang.String)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void makeInactive(boolean)>
<com.android.settingslib.Utils: java.lang.String formatPercentage(long,long)>
<com.android.server.locksettings.recoverablekeystore.certificate.CertXml: com.android.server.locksettings.recoverablekeystore.certificate.CertXml parse(byte[])>
<com.android.systemui.statusbar.notification.row.HybridConversationNotificationView: void onFinishInflate()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: com.android.settingslib.net.DataUsageController getMobileDataController()>
<com.android.server.pm.PackageManagerService: int movePrimaryStorage(java.lang.String)>
<com.android.server.AppStateTracker: void addListener(com.android.server.AppStateTracker.Listener)>
<com.android.networkstack.tethering.EntitlementManager.OnUiEntitlementFailedListener: void onUiEntitlementFailed(int)>
<com.android.systemui.statusbar.NotificationRemoteInputManager.Callback: void onMakeExpandedVisibleForRemoteInput(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,android.view.View)>
<com.android.systemui.statusbar.phone.BarTransitions: void setAlwaysOpaque(boolean)>
<com.android.server.biometrics.fingerprint.FingerprintService: com.android.server.biometrics.BiometricServiceBase.DaemonWrapper getDaemonWrapper()>
<com.android.server.appbinding.finders.CarrierMessagingClientServiceFinder: java.lang.String getServicePermission()>
<android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener: void onConnectionInfoAvailable(android.net.wifi.p2p.WifiP2pInfo)>
<com.android.systemui.statusbar.AlphaOptimizedButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.SystemUI: void start()>
<com.android.packageinstaller.television.UninstallAppProgress: android.content.pm.ApplicationInfo getAppInfo()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean canProfileOwnerResetPasswordWhenLocked(int)>
<lockedregioncodeinjection.LockTargetStateAnalysis: void <init>(java.util.List)>
<com.android.gallery3d.glrenderer.BasicTexture: boolean onBind(com.android.gallery3d.glrenderer.GLCanvas)>
<com.android.systemui.statusbar.phone.PanelViewController: void maybeVibrateOnOpening()>
<com.android.settingslib.Utils: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>
<com.android.server.autofill.AutofillCompatAccessibilityService: void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.app.usage.UsageStatsManagerInternal: byte[] getBackupPayload(int,java.lang.String)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void longClick()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void addAfterKeyguardGoneRunnable(java.lang.Runnable)>
<com.android.server.people.data.PackageData: java.lang.String getPackageName()>
<com.android.systemui.qs.tiles.DndTile: void setVisible(android.content.Context,boolean)>
<android.net.wifi.WifiManager.OnWifiActivityEnergyInfoListener: void onWifiActivityEnergyInfo(android.os.connectivity.WifiActivityEnergyInfo)>
<com.android.systemui.volume.VolumeDialogControllerImpl: int getAudioManagerStreamMinVolume(int)>
<com.android.server.audio.AudioService: void setBluetoothScoOn(boolean)>
<com.android.keyguard.KeyguardUpdateMonitor: void setCurrentUser(int)>
<com.android.systemui.util.sensors.ThresholdSensor: void unregister(com.android.systemui.util.sensors.ThresholdSensor.Listener)>
<com.android.keyguard.clock.AnalogClockController: boolean shouldShowStatusArea()>
<com.android.server.voiceinteraction.VoiceInteractionManagerService: void onBootPhase(int)>
<com.android.systemui.statusbar.NotificationShelf: boolean hasItemsInStableShelf()>
<com.android.systemui.assist.AssistHandleViewController: void onDarkIntensity(float)>
<com.android.systemui.tuner.BatteryPreference: void onAttached()>
<com.android.settingslib.bluetooth.HeadsetProfile: int getProfileId()>
<com.android.dynsystem.DynamicSystemInstallationService: android.os.IBinder onBind(android.content.Intent)>
<com.android.systemui.shared.system.ActivityManagerWrapper: boolean isScreenPinningActive()>
<com.android.packageinstaller.television.UninstallAppProgressFragment: void setDeviceManagerButtonVisible(boolean)>
<com.android.systemui.car.window.OverlayPanelViewController: void onAnimateCollapsePanel()>
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfaces()>
<com.android.server.NetworkManagementService: void addIdleTimer(java.lang.String,int,int)>
<com.android.server.biometrics.BiometricServiceBase.BiometricServiceListener: void <init>(android.hardware.biometrics.IBiometricServiceReceiverInternal)>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void updateRanking(android.service.notification.NotificationListenerService.RankingMap,java.lang.String)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl forParsing(java.lang.String,java.lang.String,java.lang.String,android.content.res.TypedArray,boolean)>
<com.android.server.usb.descriptors.UsbACAudioControlEndpoint: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.systemui.statusbar.notification.row.HybridConversationNotificationView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.qs.TileLayout: void removeAllViews()>
<com.android.media.remotedisplay.RemoteDisplayProvider: com.android.media.remotedisplay.RemoteDisplay findRemoteDisplay(java.lang.String)>
<com.android.systemui.biometrics.AuthDialog: void onAuthenticationFailed(java.lang.String)>
<com.android.systemui.biometrics.AuthController: void hideAuthenticationDialog()>
<com.android.nfc_extras.NfcAdapterExtras: com.android.nfc_extras.NfcAdapterExtras.CardEmulationRoute getCardEmulationRoute()>
<com.android.server.statusbar.StatusBarManagerInternal: boolean showShutdownUi(boolean,java.lang.String)>
<com.android.systemui.qs.tileimpl.QSTileBaseView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.net.wifi.p2p.WifiP2pManager.OngoingPeerInfoListener: void onOngoingPeerAvailable(android.net.wifi.p2p.WifiP2pConfig)>
<com.android.statsd.shelltools.Utils: com.android.os.StatsLog.ConfigMetricsReportList getReportList(long,boolean,boolean,java.util.logging.Logger,java.lang.String)>
<android.util.ArraySetPerfTest: void testValueAt_OutOfBounds_Negative()>
<android.net.wifi.p2p.WifiP2pDevice: boolean isInvitationCapable()>
<com.android.systemui.tuner.BetterListPreference: void setSummary(java.lang.CharSequence)>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwnerAsUser(int)>
<javax.obex.Operation: int getResponseCode()>
<com.android.settingslib.wifi.TestAccessPointBuilder: com.android.settingslib.wifi.TestAccessPointBuilder setBssid(java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: com.android.systemui.statusbar.notification.row.ExpandableNotificationRow getViewAtPosition(float)>
<com.android.systemui.statusbar.phone.PanelBar: void setBouncerShowing(boolean)>
<com.android.systemui.statusbar.policy.HotspotController: void setHotspotEnabled(boolean)>
<com.android.bluetoothmidiservice.PacketEncoder: void writeComplete()>
<com.android.server.tv.TvInputManagerService: void onUnlockUser(int)>
<com.android.systemui.statusbar.policy.AccessibilityManagerWrapper: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<com.android.server.appbinding.finders.AppServiceFinder: android.content.pm.ServiceInfo findService(int,android.content.pm.IPackageManager,com.android.server.appbinding.AppBindingConstants)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: boolean shouldSnapBack()>
<com.android.gallery3d.exif.ExifInterface: short getDefinedTagType(int)>
<com.android.keyguard.KeyguardSecurityView: void startAppearAnimation()>
<com.android.systemui.statusbar.ViewTransformationHelper: void addRemainingTransformTypes(android.view.View)>
<com.android.systemui.statusbar.ScalingDrawableWrapper: int getIntrinsicWidth()>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getRealPackage()>
<android.net.wifi.WifiConfiguration: android.net.ProxyInfo getHttpProxy()>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setShadeExpanded(boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int setStorageEncryption(android.content.ComponentName,boolean)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: com.android.server.tv.tunerresourcemanager.CasResource getCasResource(int)>
<javax.obex.ClientOperation: void ensureNotDone()>
<com.android.systemui.shared.system.TaskStackChangeListeners: void <init>(android.os.Looper)>
<com.android.location.provider.LocationProviderBase: void reportLocation(android.location.Location)>
<com.android.systemui.qs.tileimpl.QSTileBaseView: void onStateChanged(com.android.systemui.plugins.qs.QSTile.State)>
<com.android.server.biometrics.BiometricServiceBase: void handleError(long,int,int)>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: long getKeyguardFadingAwayDuration()>
<android.media.MediaController2.ControllerCallback: void onConnected(android.media.MediaController2,android.media.Session2CommandGroup)>
<com.android.uiautomator.core.UiAutomatorBridge: int getRotation()>
<com.android.server.appprediction.RemoteAppPredictionService.RemoteAppPredictionServiceCallbacks: void onFailureOrTimeout(boolean)>
<com.android.systemui.shared.system.PinnedStackListenerForwarder: void onConfigurationChanged()>
<com.android.server.infra.FrameworkResourcesServiceNameResolver: void dumpShort(java.io.PrintWriter,int)>
<com.android.printspooler.model.PrintSpoolerService: com.android.printspooler.model.PrintSpoolerService peekInstance()>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger.EditorLogger: android.content.SharedPreferences.Editor putFloat(java.lang.String,float)>
<com.android.server.usb.descriptors.report.TextReportCanvas: void closeParagraph()>
<com.android.systemui.fragments.FragmentHostManager.FragmentListener: void onFragmentViewCreated(java.lang.String,android.app.Fragment)>
<com.android.server.pm.PackageManagerService: android.content.pm.ModuleInfo getModuleInfo(java.lang.String,int)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService.PackageFreezer freezePackageForInstall(java.lang.String,int,int,java.lang.String)>
<com.android.server.biometrics.BiometricServiceBase: boolean isCurrentUserOrProfile(int)>
<javax.obex.ClientOperation: void setGetFinalFlag(boolean)>
<javax.microedition.khronos.opengles.GL10: void glClear(int)>
<com.android.systemui.qs.QSTileHost: void removeTile(java.lang.String)>
<com.android.server.soundtrigger.SoundTriggerService: void onStart()>
<com.android.systemui.statusbar.notification.stack.NotificationSwipeHelper.NotificationCallback: void onDismiss()>
<com.android.systemui.tuner.StatusBarSwitch: boolean persistBoolean(boolean)>
<com.android.systemui.statusbar.notification.NotificationUtils: boolean isGrayscale(android.widget.ImageView,com.android.internal.util.ContrastColorUtil)>
<android.net.wifi.p2p.WifiP2pDevice: boolean isGroupOwner()>
<android.util.StatsEvent.Builder: android.util.StatsEvent.Builder writeByteArray(byte[])>
<com.android.systemui.shared.system.InputChannelCompat.InputEventReceiver: void dispose()>
<javax.microedition.khronos.opengles.GL10: void glLightModelfv(int,float[],int)>
<com.android.perftests.blob.AtraceUtils: com.android.perftests.blob.AtraceUtils getInstance(android.app.Instrumentation)>
<com.android.server.usb.descriptors.UsbACAudioControlEndpoint: void <init>(int,byte,int)>
<com.android.server.biometrics.BiometricUtils: void removeBiometricForUser(android.content.Context,int,int)>
<com.android.systemui.car.window.OverlayViewGlobalStateController: void showView(com.android.systemui.car.window.OverlayViewController,java.lang.Runnable)>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: int checkComponentPermission(java.lang.String,int,int,boolean)>
<com.android.systemui.recents.OverviewProxyRecentsImpl: void toggleRecentApps()>
<com.android.systemui.statusbar.policy.KeyguardStateController: boolean isOccluded()>
<android.net.wifi.WifiManager: void setAutoWakeupEnabled(boolean)>
<android.view.CutoutSpecificationBenchmark: void parseLongEdgeCutout()>
<com.android.server.usb.descriptors.ByteStream: int unpackUsbInt()>
<com.android.systemui.bubbles.animation.StackAnimationController: void springStackAfterFling(float,float)>
<com.android.startop.colorchanging.MainActivity: void goGreen(android.view.View)>
<com.android.systemui.qs.QSPanel: void setCallback(com.android.systemui.qs.QSDetail.Callback)>
<android.net.wifi.WifiManager.LocalOnlyHotspotCallback: void onStopped()>
<com.android.server.usb.UsbPortManager: void enableContaminantDetection(java.lang.String,boolean,com.android.internal.util.IndentingPrintWriter)>
<com.android.systemui.qs.tiles.UserDetailItemView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.networkstack.tethering.TetheringDependencies: android.net.INetd getINetd(android.content.Context)>
<android.net.wifi.WifiInfo: void setRxLinkSpeedMbps(int)>
<com.android.systemui.settings.BrightnessDialog: void <init>(com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.systemui.statusbar.KeyguardAffordanceView: void setImageAlpha(float,boolean)>
<com.android.systemui.tuner.TunerServiceImpl: void clearAllFromUser(int)>
<com.android.systemui.statusbar.policy.UserSwitcherController.BaseUserAdapter: void <init>(com.android.systemui.statusbar.policy.UserSwitcherController)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setShouldCreateSnapshot(int,int,boolean)>
<com.android.server.biometrics.AuthService: void onStart()>
<com.android.server.audio.AudioService: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>
<javax.obex.PasswordAuthentication: byte[] getUserName()>
<com.android.server.pm.UserTypeDetails.Builder: com.android.server.pm.UserTypeDetails.Builder setMaxAllowedPerParent(int)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setNotTouchable(boolean)>
<com.android.systemui.statusbar.phone.ShadeController: void instantExpandNotificationsPanel()>
<com.android.server.ConnectivityService: void unregisterConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: boolean isConnected()>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.LockGuard: java.lang.Object installLock(java.lang.Object,int,boolean)>
<com.android.server.media.MediaSessionRecord: void close()>
<com.android.server.people.data.EventHistory: com.android.server.people.data.EventIndex getEventIndex(java.util.Set)>
<com.android.server.slice.SliceProviderPermissions.SliceAuthority: void <init>(java.lang.String,com.android.server.slice.DirtyTracker)>
<com.android.server.tv.TvInputHal.Callback: void onFirstFrameCaptured(int,int)>
<com.android.server.pm.dex.DexManager: boolean isPackageSelectedToRunOob(java.util.Collection)>
<android.net.wifi.WifiManager: void updateInterfaceIpState(java.lang.String,int)>
<android.net.wifi.hotspot2.pps.Policy: void setMaximumBssLoadValue(int)>
<android.net.wifi.aware.Characteristics: int getSupportedCipherSuites()>
<com.android.server.locksettings.SyntheticPasswordCrypto: byte[] decryptBlobV1(java.lang.String,byte[],byte[])>
<com.android.settingslib.drawer.SwitchesProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<com.android.systemui.car.navigationbar.CarNavigationButton: java.lang.String[] getCategories()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void inflateFooterView()>
<com.android.systemui.qs.tiles.UserDetailItemView: void setEnabled(boolean)>
<com.android.systemui.keyguard.ScreenLifecycle: void dispatchScreenTurnedOn()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void onRemoteInputInserted()>
<com.android.settingslib.TwoTargetPreference: void onBindViewHolder(androidx.preference.PreferenceViewHolder)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void transformFrom(com.android.systemui.statusbar.TransformableView)>
<com.android.server.biometrics.EnrollClient: boolean shouldVibrate()>
<com.android.systemui.qs.QSDualTileLabel: void setTextSize(int,float)>
<com.android.server.policy.WindowManagerPolicy: void userActivity()>
<com.android.systemui.statusbar.phone.DozeScrimController: void pulseOutNow()>
<com.android.systemui.qs.PagedTileLayout: void addTile(com.android.systemui.qs.QSPanel.TileRecord)>
<com.android.systemui.statusbar.policy.SignalController: void notifyListeners(com.android.systemui.statusbar.policy.NetworkController.SignalCallback)>
<com.android.systemui.statusbar.phone.StatusBar: void startPendingIntentDismissingKeyguard(android.app.PendingIntent,java.lang.Runnable,android.view.View)>
<com.android.server.pm.UserTypeDetails.Builder: com.android.server.pm.UserTypeDetails createUserTypeDetails()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>
<com.android.systemui.bubbles.BadgedImageView: void <init>(android.content.Context)>
<com.android.server.policy.WindowManagerPolicy: int getSubWindowLayerFromTypeLw(int)>
<com.android.systemui.qs.tiles.NfcTile: void handleSecondaryClick()>
<com.android.server.policy.PhoneWindowManager: void exitKeyguardSecurely(com.android.server.policy.WindowManagerPolicy.OnKeyguardExitResult)>
<com.android.systemui.bubbles.BubbleOverflowActivity: void onRestart()>
<com.android.systemui.qs.tiles.NightDisplayTile: void handleUserSwitch(int)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: boolean shouldClipToRounding(boolean,boolean)>
<com.android.server.usb.descriptors.UsbVCHeaderInterface: int getVDCRelease()>
<com.android.server.accessibility.ActionReplacingCallback: void setFindAccessibilityNodeInfosResult(java.util.List,int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isSummaryWithChildren()>
<com.android.server.policy.WindowManagerPolicy: int getWindowLayerFromTypeLw(int,boolean)>
<com.android.systemui.plugins.Plugin: void onCreate(android.content.Context,android.content.Context)>
<com.android.server.accessibility.KeyEventDispatcher: boolean notifyKeyEventLocked(android.view.KeyEvent,int,java.util.List)>
<com.android.server.input.InputManagerService: java.lang.String[] getEnabledKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>
<com.android.settingslib.net.NetworkCycleData.Builder: com.android.settingslib.net.NetworkCycleData.Builder setTotalUsage(long)>
<com.android.systemui.usb.UsbDebuggingActivity: void <init>(com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.server.biometrics.BiometricStrengthController: void <init>(com.android.server.biometrics.BiometricService)>
<com.android.systemui.recents.Recents: boolean splitPrimaryTask(int,android.graphics.Rect,int)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_appOpsPermissionsWithoutConfigureInteractAcrossProfilesPermission_setsAppOp()>
<com.android.systemui.bubbles.animation.StackAnimationController: void flingThenSpringFirstBubbleWithStackFollowing(androidx.dynamicanimation.animation.DynamicAnimation.ViewProperty,float,float,androidx.dynamicanimation.animation.SpringForce,java.lang.Float)>
<com.android.systemui.statusbar.notification.VisualStabilityManager: boolean isReorderingAllowed()>
<com.android.settingslib.applications.StorageStatsSource.ExternalStorageStats: void <init>(long,long,long,long,long)>
<com.android.systemui.keyboard.KeyboardUI: void onBootCompletedInternal()>
<com.android.server.locksettings.recoverablekeystore.InsecureUserException: void <init>(java.lang.String)>
<com.android.server.hdmi.HdmiCecController.NativeWrapper: int nativeGetVersion()>
<android.media.MediaSession2.ControllerInfo: boolean isTrusted()>
<com.android.systemui.statusbar.notification.MessagingLayoutTransformState: void initFrom(android.view.View,com.android.systemui.statusbar.notification.TransformState.TransformInfo)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl clearOriginalPackages()>
<com.android.systemui.biometrics.AuthDialogCallback: void onDeviceCredentialPressed()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)>
<com.android.systemui.statusbar.SmartReplyController: boolean isSendingSmartReply(java.lang.String)>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator.ExpandAnimationParameters: float getStartTranslationZ()>
<com.android.server.DeviceIdleController: void exitIdleInternal(java.lang.String)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onBiometricsCleared()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getAppComponentFactory()>
<com.android.systemui.statusbar.policy.ZenModeController: android.content.ComponentName getEffectsSuppressor()>
<com.android.systemui.statusbar.phone.MultiUserSwitch: boolean hasOverlappingRendering()>
<com.android.server.search.SearchManagerService.Lifecycle: void <init>(android.content.Context)>
<com.android.systemui.fragments.FragmentHostManager: void removeTagListener(java.lang.String,com.android.systemui.fragments.FragmentHostManager.FragmentListener)>
<android.net.ip.IpServer: java.lang.String getStateString(int)>
<com.android.settingslib.suggestions.SuggestionController: void <init>(android.content.Context,android.content.ComponentName,com.android.settingslib.suggestions.SuggestionController.ServiceConnectionListener)>
<com.android.server.usb.UsbDeviceManager: long getScreenUnlockedFunctions()>
<com.android.settingslib.widget.AppEntityInfo.Builder: com.android.settingslib.widget.AppEntityInfo.Builder setOnClickListener(android.view.View.OnClickListener)>
<android.os.ParcelArrayPerfTest: void timeReadLongArray()>
<com.android.systemui.statusbar.notification.row.ExpandableView: float getHeaderVisibleAmount()>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindSliceBroadcastRelayHandler(com.android.systemui.SliceBroadcastRelayHandler)>
<com.android.settingslib.net.NetworkCycleDataForUidLoader.Builder: com.android.settingslib.net.NetworkCycleDataForUidLoader.Builder setRetrieveDetail(boolean)>
<com.android.server.pm.AppsFilter: void grantImplicitAccess(int,int)>
<com.android.systemui.statusbar.policy.BrightnessMirrorController: void onDensityOrFontScaleChanged()>
<android.app.backup.BackupUtilsTest: void testIsFileSpecifiedInPathList_whenDirectoryAndPathListEmpty()>
<com.android.systemui.statusbar.phone.ObservableScrollView: void onScrollChanged(int,int,int,int)>
<com.android.server.display.WifiDisplayController.Listener: void onDisplaySessionInfo(android.hardware.display.WifiDisplaySessionInfo)>
<android.net.wifi.IWifiManager: boolean enableNetwork(int,boolean,java.lang.String)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeEnablerManagerCompat: void refresh(android.content.Context,androidx.preference.PreferenceFragmentCompat)>
<com.android.server.appbinding.finders.AppServiceFinder: java.lang.String getServicePermission()>
<com.android.systemui.statusbar.phone.StatusBar: void dismissKeyboardShortcuts()>
<android.net.ip.IpClientCallbacks: void installPacketFilter(byte[])>
<android.net.wifi.WifiManager.WifiLock: void finalize()>
<com.android.server.uri.UriGrantsManagerInternal: boolean checkUriPermission(com.android.server.uri.GrantUri,int,int)>
<android.net.wifi.util.HexEncoding: byte[] decode(char[])>
<com.android.settingslib.RestrictedLockUtilsInternal: com.android.settingslib.RestrictedLockUtils.EnforcedAdmin checkIfAccessibilityServiceDisallowed(android.content.Context,java.lang.String,int)>
<com.android.server.wallpaper.WallpaperManagerService: boolean isWallpaperSupported(java.lang.String)>
<android.os.UserManagerInternal: boolean getUserRestriction(int,java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationContentInflater.AsyncInflationTask: int getReInflateFlags()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: android.widget.TextView getHeaderDebugInfo()>
<android.perftests.utils.StateKeeperRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>
<com.android.systemui.statusbar.policy.HotspotControllerImpl: boolean isHotspotEnabled()>
<com.android.systemui.tuner.TunerServiceImpl: void reregisterAll()>
<com.android.systemui.qs.customize.TileAdapter: void onDetachedFromRecyclerView(androidx.recyclerview.widget.RecyclerView)>
<com.android.systemui.bubbles.BubbleTaskView: void startShortcutActivity(android.content.pm.ShortcutInfo,android.app.ActivityOptions,android.graphics.Rect)>
<com.android.settingslib.dream.DreamBackend: android.content.ComponentName getDefaultDream()>
<com.android.systemui.qs.tiles.BluetoothTile.BluetoothDetailAdapter: void onDetailItemDisconnect(com.android.systemui.qs.QSDetailItems.Item)>
<com.android.settingslib.RestrictedLockUtils: com.android.settingslib.RestrictedLockUtils.EnforcedAdmin getProfileOrDeviceOwner(android.content.Context,android.os.UserHandle)>
<android.net.wifi.ITxPacketCountListener: void onSuccess(int)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getClassName()>
<com.android.server.usb.UsbPortManager: void <init>(android.content.Context)>
<com.android.systemui.dagger.DefaultBroadcastReceiverBinder: android.content.BroadcastReceiver bindMediaOutputDialogReceiver(com.android.systemui.media.dialog.MediaOutputDialogReceiver)>
<com.android.printspooler.model.PrintSpoolerService: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int)>
<com.android.encryptedlocaltransport.EncryptedLocalTransport: int getRestoreData(android.os.ParcelFileDescriptor)>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: java.lang.String cameraLensStateToString(int)>
<com.android.server.tv.tunerresourcemanager.ClientProfile: int getProcessId()>
<com.android.settingslib.RestrictedLockUtilsInternal: com.android.settingslib.RestrictedLockUtils.EnforcedAdmin checkIfAccountManagementDisabled(android.content.Context,java.lang.String,int)>
<android.net.wifi.p2p.WifiP2pManager: void setOngoingPeerConfig(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.server.appbinding.finders.CarrierMessagingClientServiceFinder: int getBindFlags(com.android.server.appbinding.AppBindingConstants)>
<com.android.server.webkit.SystemImpl: boolean systemIsDebuggable()>
<com.android.systemui.plugins.GlobalActionsPanelPlugin.PanelViewController: void onDismissed()>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: boolean canDismissLockScreen()>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifCollectionListener: void onEntryUpdated(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.phone.ManagedProfileControllerImpl: void removeCallback(com.android.systemui.statusbar.phone.HeadsUpTouchHelper.Callback)>
<com.android.server.TelephonyRegistry: void notifyDataActivityForSubscriber(int,int)>
<com.android.printservice.recommendation.plugin.google.CloudPrintPlugin: void <init>(android.content.Context)>
<com.android.systemui.tuner.ClipboardView: void stopListening()>
<com.android.settingslib.media.PhoneMediaDevice: boolean isConnected()>
<com.android.server.UiThread: com.android.server.UiThread get()>
<com.android.systemui.plugins.qs.QS: int getDesiredHeight()>
<com.android.settingslib.deviceinfo.AbstractImsStatusPreferenceController: java.lang.String[] getConnectivityIntents()>
<com.android.systemui.qs.external.TileLifecycleManager: android.os.IBinder asBinder()>
<com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProviderImpl: boolean shouldHeadsUp(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.settingslib.drawable.UserIconDrawable: com.android.settingslib.drawable.UserIconDrawable setIconDrawable(android.graphics.drawable.Drawable)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean canViewBeDismissed()>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Intent createAdminSupportIntent(java.lang.String)>
<com.android.server.AnyMotionDetector.DeviceIdleCallback: void onAnyMotionResult(int)>
<com.android.systemui.util.AutoMarqueeTextView: void onFinishInflate()>
<com.android.server.EntropyMixer: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String)>
<com.android.keyguard.KeyguardSecurityView: boolean needsInput()>
<com.android.systemui.classifier.EndPointRatioEvaluator: float evaluate(float)>
<com.android.systemui.ExpandHelper: void <init>(android.content.Context,com.android.systemui.ExpandHelper.Callback,int,int)>
<com.android.systemui.statusbar.phone.NotificationGroupManager: boolean isLogicalGroupExpanded(android.service.notification.StatusBarNotification)>
<com.android.settingslib.suggestions.SuggestionControllerMixinCompat: void <init>(android.content.Context,com.android.settingslib.suggestions.SuggestionControllerMixinCompat.SuggestionControllerHost,com.android.settingslib.core.lifecycle.Lifecycle,android.content.ComponentName)>
<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardTrustedLw()>
<com.android.settingslib.development.AbstractEnableAdbPreferenceController: void resetPreference()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalRadioOnTimeMillis()>
<com.android.systemui.qs.QuickQSPanel: com.android.systemui.qs.QSEvent closePanelEvent()>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void startPreHideAnimation(java.lang.Runnable)>
<com.android.keyguard.clock.DefaultClockController: boolean shouldShowStatusArea()>
<com.android.systemui.statusbar.NotificationShelf: void onUiModeChanged()>
<com.android.packageinstaller.PackageUtil: com.android.packageinstaller.PackageUtil.AppSnippet getAppSnippet(android.app.Activity,android.content.pm.ApplicationInfo,java.io.File)>
<com.android.server.pm.UserManagerService: void onBeforeUnlockUser(int)>
<com.android.server.pm.PackageManagerService: void overrideLabelAndIcon(android.content.ComponentName,java.lang.String,int,int)>
<com.android.settingslib.media.InfoMediaDevice: boolean isConnected()>
<android.media.MediaParser.SeekPoint: boolean equals(java.lang.Object)>
<com.android.packageinstaller.UninstallEventReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.volume.ZenModePanel: void addZenConditions(int)>
<com.android.photos.views.TiledImageRenderer: boolean draw(com.android.gallery3d.glrenderer.GLCanvas)>
<com.android.systemui.media.ResumeMediaBrowser: android.media.session.MediaSession.Token getToken()>
<com.android.server.tv.tunerresourcemanager.TunerResourceBasic: void removeOwner()>
<com.android.egg.neko.Cat: void setColorFilter(android.graphics.ColorFilter)>
<android.media.MediaParser: void seek(android.media.MediaParser.SeekPoint)>
<com.android.location.provider.ProviderPropertiesUnbundled: java.lang.String toString()>
<com.android.server.pm.InstantAppResolver: android.content.Intent buildEphemeralInstallerIntent(android.content.Intent,android.content.Intent,android.content.Intent,java.lang.String,java.lang.String,android.os.Bundle,java.lang.String,int,android.content.ComponentName,java.lang.String,boolean,java.util.List)>
<com.android.server.pm.ShortcutService: long getRateLimitResetTime(java.lang.String,int)>
<com.android.settingslib.widget.AppEntityInfo: java.lang.CharSequence getSummary()>
<com.android.server.trust.TrustAgentWrapper: void onEscrowTokenActivated(long,int)>
<com.android.server.pm.PackageManagerService: java.lang.String[] getSystemSharedLibraryNames()>
<com.android.systemui.statusbar.StatusBarMobileView: void setDecorColor(int)>
<com.android.server.biometrics.iris.IrisService: void checkUseBiometricPermission()>
<com.android.server.media.MediaSessionRecordImpl: void close()>
<com.android.server.broadcastradio.BroadcastRadioService: void <init>(android.content.Context)>
<com.android.systemui.statusbar.policy.HotspotControllerImpl: void <init>(android.content.Context,android.os.Handler,android.os.Handler)>
<com.android.systemui.FontSizeUtils: void updateFontSize(android.view.View,int,int)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: void readFromParcel(android.os.Parcel)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setBssid(android.net.MacAddress)>
<com.android.printspooler.ui.PrinterRegistry: java.util.List getPrinters()>
<android.net.wifi.SoftApConfiguration: int getMaxNumberOfClients()>
<com.android.server.integrity.parser.RandomAccessInputStream: void close()>
<com.android.location.provider.FusedProvider: android.os.IBinder getBinder()>
<com.android.server.inputmethod.InputMethodManagerService: void updateKeyboardFromSettingsLocked()>
<com.android.server.accounts.AccountManagerBackupHelper: void <init>(com.android.server.accounts.AccountManagerService,android.accounts.AccountManagerInternal)>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void grantDefaultPermissionsToDefaultUseOpenWifiApp(java.lang.String,int)>
<com.android.server.policy.WakeGestureListener: void requestWakeUpTrigger()>
<com.android.systemui.statusbar.phone.ExpandableIndicator: void onFinishInflate()>
<com.android.server.recoverysystem.RecoverySystemService.Lifecycle: void <init>(android.content.Context)>
<com.android.server.TelephonyRegistry: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
<com.android.server.pm.UserManagerService: android.os.Bundle getDefaultGuestRestrictions()>
<android.view.textclassifier.TextClassifierPerfTest: void <init>(int)>
<android.net.wifi.hotspot2.pps.Policy: void setMinRoamingDownlinkBandwidth(long)>
<com.android.server.pm.permission.BasePermission: int getProtectionLevel()>
<com.android.systemui.shared.system.SurfaceViewRequestUtils: android.os.IBinder getHostToken(android.os.Bundle)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void <init>(android.content.Context,com.android.keyguard.ViewMediatorCallback,com.android.internal.widget.LockPatternUtils,com.android.systemui.statusbar.SysuiStatusBarStateController,com.android.systemui.statusbar.policy.ConfigurationController,com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.statusbar.phone.NavigationModeController,com.android.systemui.dock.DockManager,com.android.systemui.statusbar.phone.NotificationShadeWindowController,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.statusbar.NotificationMediaManager)>
<com.android.systemui.stackdivider.DividerWindowManager: void setTouchRegion(android.graphics.Region)>
<javax.microedition.khronos.opengles.GL10: void glLightf(int,int,float)>
<android.view.autofill.LoginTest: void testCallbacks()>
<com.android.systemui.statusbar.notification.row.StackScrollerDecorView: void onFinishInflate()>
<com.android.systemui.statusbar.EmptyShadeView: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.timezonedetector.ArrayMapWithHistory: void dump(com.android.internal.util.IndentingPrintWriter)>
<com.android.settingslib.net.NetworkCycleData: long getTotalUsage()>
<com.android.server.usb.descriptors.UsbVCHeader: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.systemui.globalactions.GlobalActionsDialog.MyPowerOptionsAdapter: com.android.systemui.globalactions.GlobalActionsDialog.Action getItem(int)>
<com.android.server.slice.SliceProviderPermissions.SliceAuthority: void writeTo(org.xmlpull.v1.XmlSerializer)>
<com.android.server.audio.AudioService: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
<com.android.server.pm.parsing.pkg.PackageImpl: void writeToParcel(android.os.Parcel,int)>
<com.android.server.integrity.AppIntegrityManagerServiceImpl: void updateRuleSet(java.lang.String,android.content.pm.ParceledListSlice,android.content.IntentSender)>
<com.android.systemui.statusbar.NotificationMediaManager: void <init>(android.content.Context,dagger.Lazy,dagger.Lazy,com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.systemui.statusba.MediaArtworkProcessor,com.android.systemui.statusbar.phone.KeyguardBypassController,com.android.systemui.util.concurrency.DelayableExecutor,com.android.systemui.util.DeviceConfigProxy,com.android.systemui.media.MediaDataManager)>
<com.android.server.policy.WindowManagerPolicy: void exitKeyguardSecurely(com.android.server.policy.WindowManagerPolicy.OnKeyguardExitResult)>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator.ExpandAnimationParameters: int getHeight()>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: void onExpandingFinished()>
<com.android.server.usb.descriptors.Usb10ASFormatII: int getSamplesPerFrame()>
<com.android.systemui.screenrecord.RecordingController: void removeCallback(com.android.systemui.screenrecord.RecordingController.RecordingStateChangeCallback)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void verifyUnlock(com.android.internal.policy.IKeyguardExitCallback)>
<com.android.settingslib.schedulesprovider.SchedulesProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>
<android.graphics.perftests.RenderNodePerfTest: void testCreateRenderNode()>
<com.android.server.om.OverlayableInfoCallback: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout: java.lang.String getReadablePropertyName(androidx.dynamicanimation.animation.DynamicAnimation.ViewProperty)>
<com.android.wallpapercropper.WallpaperCropActivity: android.graphics.RectF getMaxCropRect(int,int,int,int,boolean)>
<com.android.server.locksettings.LockSettingsService: void resetKeyStore(int)>
<com.android.server.display.utils.RollingBuffer: float getValue(int)>
<com.android.server.input.InputManagerService: void setInTouchMode(boolean)>
<com.android.systemui.statusbar.policy.SmartReplyConstants: boolean requiresTargetingP()>
<com.android.server.input.InputManagerService: void removePortAssociation(java.lang.String)>
<com.android.systemui.qs.customize.TileAdapter: void setTileSpecs(java.util.List)>
<com.android.server.audio.AudioService: boolean isValidRingerMode(int)>
<com.android.server.protolog.ProtoLogImpl: void stopProtoLog(java.io.PrintWriter,boolean)>
<android.net.wifi.WifiConfiguration: void setProxy(android.net.IpConfiguration.ProxySettings,android.net.ProxyInfo)>
<com.android.systemui.statusbar.StatusBarIconView: void executeOnLayout(java.lang.Runnable)>
<com.android.systemui.statusbar.policy.UserSwitcherController.BaseUserAdapter: com.android.systemui.statusbar.policy.UserSwitcherController.UserRecord getItem(int)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onStartedWakingUp()>
<android.text.NonEditableTextGenerator: void <init>(java.util.Random)>
<com.android.systemui.pip.phone.PipResizeGestureHandler: boolean isWithinTouchRegion(int,int)>
<android.net.wifi.SoftApConfiguration: long getShutdownTimeoutMillis()>
<com.android.systemui.classifier.FalsingManagerFake: void onQsDown()>
<com.android.keyguard.clock.DefaultClockController: int getPreferredY(int)>
<android.net.wifi.ParcelUtil: void writePrivateKey(android.os.Parcel,java.security.PrivateKey)>
<com.android.server.NsdService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.qs.tiles.BluetoothTile.BluetoothDetailAdapter: java.lang.Boolean getToggleState()>
<android.net.wifi.hotspot2.PasspointConfiguration: boolean isOsuProvisioned()>
<com.android.server.IpSecService: void addAddressToTunnelInterface(int,android.net.LinkAddress,java.lang.String)>
<com.android.systemui.statusbar.phone.StatusBarIconController: void removeAllIconsForSlot(java.lang.String)>
<com.android.server.accessibility.gestures.TouchState: void onReceivedAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<com.android.keyguard.KeyguardSecurityContainer: com.android.keyguard.KeyguardSecurityModel.SecurityMode getCurrentSecurityMode()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: com.android.systemui.statusbar.phone.KeyguardBouncer getBouncer()>
<com.android.systemui.statusbar.phone.NavigationModeController: void <init>(android.content.Context,com.android.systemui.statusbar.policy.DeviceProvisionedController,com.android.systemui.statusbar.policy.ConfigurationController,java.util.concurrent.Executor)>
<com.android.server.slice.SliceClientPermissions: com.android.server.slice.SlicePermissionManager.PkgUser getPkg()>
<com.android.server.DynamicSystemService: boolean submitFromAshmem(long)>
<com.android.settingslib.bluetooth.HidProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)>
<com.android.systemui.qs.QSPanel.QSTileLayout: void restoreInstanceState(android.os.Bundle)>
<android.net.wifi.hotspot2.pps.UpdateParameter: void setUpdateMethod(java.lang.String)>
<com.android.systemui.statusbar.policy.SecurityController: java.lang.String getWorkProfileVpnName()>
<com.android.server.infra.AbstractMasterSystemService: com.android.server.infra.AbstractPerUserSystemService removeCachedServiceLocked(int)>
<javax.obex.ClientSession: javax.obex.HeaderSet connect(javax.obex.HeaderSet)>
<com.android.systemui.recents.OverviewProxyService: void removeCallback(com.android.systemui.recents.OverviewProxyService.OverviewProxyListener)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: void setDozeAmount(float,boolean)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isFaceUnlockRunning(int)>
<android.net.NetworkStackClient: android.net.NetworkStackClient getInstance()>
<com.android.server.slice.SliceClientPermissions: java.lang.String getFileName(com.android.server.slice.SlicePermissionManager.PkgUser)>
<com.android.systemui.qs.QSAnimator: void setPosition(float)>
<com.android.systemui.assist.ui.PerimeterPathGuide: void <init>(android.content.Context,com.android.systemui.assist.ui.CornerPathRenderer,int,int,int)>
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfo()>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void onScreenTurnedOn()>
<com.android.systemui.assist.ui.InvocationLightsView: void onLayout(boolean,int,int,int,int)>
<com.android.server.statusbar.StatusBarManagerInternal: void appTransitionPending(int)>
<com.android.systemui.media.ResumeMediaBrowser.Callback: void addTrack(android.media.MediaDescription,android.content.ComponentName,com.android.systemui.media.ResumeMediaBrowser)>
<com.android.server.pm.permission.PermissionManagerService: void removeOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>
<com.android.server.pm.permission.PermissionsState: int revokeRuntimePermission(com.android.server.pm.permission.BasePermission,int)>
<javax.microedition.khronos.opengles.GL10: void glClearDepthf(float)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationViewController: void init()>
<android.net.wifi.hotspot2.PasspointConfiguration: boolean isMacRandomizationEnabled()>
<com.android.systemui.statusbar.phone.NotificationGroupManager: void setGroupExpanded(android.service.notification.StatusBarNotification,boolean)>
<com.android.systemui.globalactions.GlobalActionsGridLayout: float getAnimationDistance()>
<android.net.ip.IpServer.Callback: void updateLinkProperties(android.net.ip.IpServer,android.net.LinkProperties)>
<com.android.systemui.doze.DozeHost: boolean isProvisioned()>
<com.android.server.statusbar.StatusBarManagerService: void onNotificationExpansionChanged(java.lang.String,boolean,boolean,int)>
<android.net.wifi.IWifiManager: android.net.wifi.WifiInfo getConnectionInfo(java.lang.String,java.lang.String)>
<com.android.server.pm.PackageManagerService: android.content.ComponentName getInstantAppInstallerComponent()>
<com.android.wallpapercropper.CropView: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.settingslib.drawer.DashboardCategory: int describeContents()>
<android.wm.RecentsAnimationPerfTest: void testRecentsAnimation()>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger: java.util.Set getStringSet(java.lang.String,java.util.Set)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: android.util.SparseArray getSplitDependencies()>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage clearOriginalPackages()>
<com.android.settingslib.net.DataUsageController.NetworkNameProvider: java.lang.String getMobileDataNetworkName()>
<com.android.systemui.statusbar.phone.StatusBar: void showTransient(int,int[])>
<com.android.systemui.statusbar.StatusBarIconView: void onRtlPropertiesChanged(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: com.android.systemui.statusbar.notification.row.NotificationContentView getPrivateLayout()>
<com.android.server.soundtrigger.SoundTriggerService: void onSwitchUser(int)>
<android.os.PackageManagerPerfTest: void testQueryIntentActivities()>
<com.android.systemui.statusbar.notification.row.AppOpsInfo: android.view.View getContentView()>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: int getHiddenApiEnforcementPolicy(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>
<com.android.systemui.statusbar.phone.KeyguardIndicationTextView: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer getChildrenContainer()>
<com.android.systemui.statusbar.NotificationRemoteInputManager: java.util.ArrayList getLifetimeExtenders()>
<com.android.systemui.car.window.OverlayViewController: void start()>
<com.android.server.display.utils.RollingBuffer: int size()>
<com.android.systemui.statusbar.notification.TransformState: void setDefaultInterpolator(android.view.animation.Interpolator)>
<com.android.systemui.statusbar.notification.TransformState: float getTransformationStartX()>
<com.android.server.testing.shadows.ShadowUserManager: int[] getProfileIds(int,boolean)>
<com.android.systemui.SystemUIFactory: com.android.systemui.statusbar.phone.BackGestureTfClassifierProvider createBackGestureTfClassifierProvider(android.content.res.AssetManager,java.lang.String)>
<com.android.systemui.statusbar.notification.AboveShelfObserver: void onAboveShelfStateChanged(boolean)>
<com.android.systemui.statusbar.phone.DozeParameters: boolean getDisplayNeedsBlanking()>
<android.processor.view.inspector.InspectableClassModel.IntFlagEntry: void <init>(int,java.lang.String)>
<android.net.wifi.ScanResult.InformationElement: int getId()>
<com.android.pacprocessor.PacNative: boolean isActive()>
<com.android.server.pm.permission.PermissionManagerService: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String,int)>
<com.android.server.people.data.AppUsageStatsData: void <init>(int,int)>
<com.android.server.DeviceIdleController: boolean addPowerSaveWhitelistExceptIdleInternal(java.lang.String)>
<com.android.server.pm.PackageManagerService: int getIntentVerificationStatus(java.lang.String,int)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isDirectConnectToTv()>
<com.android.systemui.Prefs: void putLong(android.content.Context,java.lang.String,long)>
<com.android.systemui.statusbar.notification.row.NotificationGuts: void closeControls(boolean,boolean,int,int,boolean)>
<android.net.wifi.ScanResult: java.lang.String toString()>
<com.android.systemui.statusbar.phone.DozeScrimController: void <init>(com.android.systemui.statusbar.phone.DozeParameters,com.android.systemui.doze.DozeLog)>
<com.android.gallery3d.common.Utils: int floorLog2(float)>
<com.android.systemui.qs.GlobalSetting: int getValue()>
<com.android.photos.views.BlockingGLTextureView: void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int)>
<com.android.systemui.statusbar.HeadsUpStatusBarView: void onAttachedToWindow()>
<com.android.keyguard.KeyguardPasswordView: void startAppearAnimation()>
<com.android.gallery3d.exif.ExifTag: int getComponentCount()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean shouldSuppressNotificationDot()>
<android.media.Session2Token: int describeContents()>
<android.text.PrecomputedTextPerfTest: void testCreate_NoStyled_Hyphenation()>
<com.android.server.soundtrigger_middleware.ISoundTriggerHw2: void stopRecognition(int)>
<com.android.systemui.wm.DisplayLayout: void set(com.android.systemui.wm.DisplayLayout)>
<com.android.systemui.statusbar.phone.StatusBarIconHolder: com.android.internal.statusbar.StatusBarIcon getIcon()>
<com.android.systemui.globalactions.GlobalActionsLayout: void onMeasure(int,int)>
<com.android.systemui.keyguard.KeyguardSliceProvider: boolean needsMediaLocked()>
<android.net.wifi.WifiScanner.PnoSettings.PnoNetwork: boolean equals(java.lang.Object)>
<android.net.wifi.rtt.RangingResult: byte[] getLci()>
<com.android.server.audio.AudioService: void sendVolumeUpdate(int,int,int,int,int)>
<com.android.server.tv.tunerresourcemanager.LnbResource: java.lang.String toString()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String[] getSplitClassLoaderNames()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void runAfterAnimationFinished(java.lang.Runnable)>
<com.android.server.pm.PackageManagerService: java.lang.String[] getUnsuspendablePackagesForUser(java.lang.String[],int)>
<com.android.server.usb.descriptors.tree.UsbDescriptorsInterfaceNode: void <init>(com.android.server.usb.descriptors.UsbInterfaceDescriptor)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setHeadsUpIsVisible()>
<com.android.systemui.statusbar.phone.StatusBarIconList.Slot: java.util.List getHolderList()>
<com.android.server.ConnectivityService: void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo,int,int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setPanelScrimMinFraction(float)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean getUserTrustIsManaged(int)>
<com.android.server.policy.WindowManagerPolicy.WindowState: android.graphics.Rect getContentFrameLw()>
<android.media.MediaSession2.ControllerInfo: boolean equals(java.lang.Object)>
<com.android.server.pm.Installer: void fixupAppData(java.lang.String,int)>
<com.android.server.webkit.SystemInterface: android.content.pm.PackageInfo getPackageInfoForProvider(android.webkit.WebViewProviderInfo)>
<com.android.systemui.car.bluetooth.ConnectedDeviceSignalController: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void applyChildrenState()>
<com.android.systemui.bubbles.BubbleController: boolean isBubbleExpanded(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void onQsExpansionChanged(float)>
<com.android.systemui.statusbar.KeyguardIndicationController: void setVisible(boolean)>
<com.android.systemui.qs.customize.QSCustomizer: void setHost(com.android.systemui.qs.QSTileHost)>
<com.android.systemui.screenshot.SmartActionsReceiver: void onReceive(android.content.Context,android.content.Intent)>
<android.app.backup.BackupUtilsTest: void testIsFileSpecifiedInPathList_whenFileAndPathListDoesntContainDirectory()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)>
<com.android.printservice.recommendation.plugin.mopria.MopriaRecommendationPlugin: java.util.ArrayList getPrinters()>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: java.lang.String toString()>
<android.net.wifi.WifiManager: int calculateSignalLevel(int)>
<com.android.server.timezone.ConfigHelper: boolean isTrackingEnabled()>
<com.android.settingslib.graph.BluetoothDeviceLayerDrawable: com.android.settingslib.graph.BluetoothDeviceLayerDrawable createLayerDrawable(android.content.Context,int,int,float)>
<com.android.systemui.power.PowerNotificationWarnings: void update(int,int,long)>
<com.android.settingslib.wifi.WifiUtils: boolean isMeteredOverridden(android.net.wifi.WifiConfiguration)>
<com.android.server.utils.ManagedApplicationService: void sendEvent(com.android.server.utils.ManagedApplicationService.PendingEvent)>
<com.android.keyguard.KeyguardUpdateMonitor: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: boolean isValidRootCertificateAlias(java.lang.String)>
<com.android.server.accessibility.MagnificationController: void unregisterAll()>
<com.android.settingslib.users.AppRestrictionsHelper: void applyUserAppState(java.lang.String,boolean,com.android.settingslib.users.AppRestrictionsHelper.OnDisableUiForPackageListener)>
<android.net.wifi.rtt.ResponderLocation: java.lang.String getCivicLocationElementValue(int)>
<com.android.settingslib.fuelgauge.BatterySaverUtils: void revertScheduleToNoneIfNeeded(android.content.Context)>
<com.android.server.accessibility.gestures.TouchExplorer: void onDoubleTapAndHold(android.view.MotionEvent,android.view.MotionEvent,int)>
<android.net.wifi.WifiInfo: void setOsuAp(boolean)>
<com.android.server.wallpaper.WallpaperManagerService: void setWallpaperComponent(android.content.ComponentName)>
<com.android.systemui.PluginInflateContainer: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.location.provider.ProviderRequestUnbundled: long getInterval()>
<com.android.server.NetworkScorerAppManager: void <init>(android.content.Context)>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: void <init>(android.content.Context,com.android.systemui.statusbar.phone.NotificationPanelViewController,com.android.systemui.statusbar.phone.HeadsUpManagerPhone,com.android.systemui.statusbar.phone.NotificationShadeWindowView,android.view.ViewGroup,com.android.systemui.statusbar.phone.DozeScrimController,com.android.systemui.statusbar.phone.ScrimController,com.android.systemui.statusbar.notification.ActivityLaunchAnimator,com.android.systemui.statusbar.notification.DynamicPrivacyController,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.statusbar.KeyguardIndicationController,com.android.systemui.statusbar.phone.StatusBar,com.android.systemui.statusbar.phone.ShadeController,com.android.systemui.statusbar.CommandQueue,com.android.systemui.InitController,com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProvider)>
<com.android.uiautomator.core.InstrumentationUiAutomatorBridge: boolean isScreenOn()>
<com.android.systemui.statusbar.policy.Clock: void onAttachedToWindow()>
<com.android.systemui.statusbar.CommandQueue: void toggleSplitScreen()>
<com.android.settingslib.net.NetworkCycleDataLoader.Builder: com.android.settingslib.net.NetworkCycleDataLoader.Builder setNetworkTemplate(android.net.NetworkTemplate)>
<com.android.systemui.glwallpaper.ImageWallpaperRenderer: boolean isWcgContent()>
<com.android.systemui.statusbar.notification.row.AppOpsInfo: void setGutsParent(com.android.systemui.statusbar.notification.row.NotificationGuts)>
<com.android.systemui.statusbar.phone.PanelBar: void onPanelPeeked()>
<com.android.server.usb.UsbAlsaManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>
<com.android.systemui.car.notification.NotificationVisibilityLogger: void log(boolean)>
<android.os.PackageManagerPerfTest: void testGetPackageInfoWithFiltering()>
<com.android.systemui.statusbar.notification.stack.NotificationRoundnessManager: void onHeadsUpUnPinned(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<android.net.wifi.WifiManager: boolean startScan(android.os.WorkSource)>
<android.net.wifi.WifiManager.SoftApCallback: void onCapabilityChanged(android.net.wifi.SoftApCapability)>
<com.android.systemui.screenrecord.RecordingController: android.content.Intent getPromptIntent()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean wasJustClicked()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: boolean isSwipedEnoughToShowMenu()>
<com.android.systemui.plugins.qs.QS: int getQsMinExpansionHeight()>
<android.os.UserManagerInternal: android.content.pm.UserInfo createUserEvenWhenDisallowed(java.lang.String,java.lang.String,int,java.lang.String[])>
<com.android.systemui.statusbar.policy.ExtensionController: com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder newExtension(java.lang.Class)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void onMeasure(int,int)>
<com.android.server.pm.PackageSetting: void copyFrom(com.android.server.pm.PackageSetting)>
<com.android.systemui.theme.ThemeOverlayController: void <init>(android.content.Context,com.android.systemui.broadcast.BroadcastDispatcher,android.os.Handler)>
<com.android.systemui.statusbar.phone.BarTransitions.BarBackgroundDrawable: void setAlpha(int)>
<com.android.systemui.media.dialog.MediaOutputBaseDialog: void onMediaChanged()>
<com.android.server.adb.AdbService: void allowWirelessDebugging(boolean,java.lang.String)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationDecoratedCustomViewWrapper: void onContentUpdated(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.statusbar.HeadsUpStatusBarView: void onFinishInflate()>
<com.android.server.hdmi.HdmiCecStandbyModeHandler: void <init>(com.android.server.hdmi.HdmiControlService,com.android.server.hdmi.HdmiCecLocalDeviceTv)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setHeadsUpBoundaries(int,int)>
<android.net.wifi.WifiManager: void setTdlsEnabledWithMacAddress(java.lang.String,boolean)>
<com.android.server.utils.DeviceConfigInterface: int getInt(java.lang.String,java.lang.String,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setWillExpand(boolean)>
<com.android.systemui.statusbar.phone.ContextualButton.ContextButtonListener: void onVisibilityChanged(com.android.systemui.statusbar.phone.ContextualButton,boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: int getCollapsedHeightWithoutHeader()>
<com.android.server.locksettings.LockSettingsStrongAuth.Injector: android.app.AlarmManager getAlarmManager(android.content.Context)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceController: boolean setEnabled(boolean)>
<com.android.systemui.pip.phone.PipUtils: android.util.Pair getTopPipActivity(android.content.Context,android.app.IActivityManager)>
<com.android.systemui.util.AutoMarqueeTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void updateSystemUiStateFlags(int)>
<com.android.systemui.shared.system.TaskStackChangeListener: void onTaskMovedToFront(int)>
<com.android.systemui.statusbar.CommandQueue: void onBiometricError(int,int,int)>
<com.android.server.policy.WindowManagerPolicy: int getWindowLayerLw(com.android.server.policy.WindowManagerPolicy.WindowState)>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void <init>(android.net.wifi.hotspot2.pps.Credential.UserCredential)>
<com.android.systemui.statusbar.policy.SmartReplyView: java.util.List inflateRepliesFromRemoteInput(com.android.systemui.statusbar.policy.SmartReplyView.SmartReplies,com.android.systemui.statusbar.SmartReplyController,com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.systemui.shared.plugins.PluginPrefs: void setHasPlugins(android.content.Context)>
<com.android.systemui.statusbar.phone.NotificationsQuickSettingsContainer: void onAttachedToWindow()>
<com.android.server.webkit.SystemInterface: void enableFallbackLogic(boolean)>
<com.android.server.adb.AdbService: void allowDebugging(boolean,java.lang.String)>
<com.android.server.testing.shadows.ShadowApplicationPackageManager: void setPackageUidAsUser(java.lang.String,int,int)>
<com.android.server.statusbar.StatusBarManagerInternal: void onCameraLaunchGestureDetected(int)>
<com.android.server.trust.TrustArchive: void logGrantTrust(int,android.content.ComponentName,java.lang.String,long,int)>
<com.android.systemui.statusbar.phone.PanelViewController: com.android.systemui.statusbar.phone.PanelViewController.OnLayoutChangeListener createLayoutChangeListener()>
<com.android.server.stats.pull.IonMemoryUtil.IonAllocations: int hashCode()>
<com.android.server.pm.PackageManagerService.PendingPackageBroadcasts: void remove(int)>
<com.android.systemui.SystemUIFactory: com.android.systemui.dagger.SystemUIRootComponent buildSystemUIRootComponent(android.content.Context)>
<com.android.server.hdmi.HdmiCecMessage: int hashCode()>
<com.android.systemui.util.InjectionInflationController.ViewInstanceCreator: com.android.systemui.qs.QSFooterImpl createQsFooter()>
<com.android.systemui.biometrics.AuthBiometricFingerprintView: void handleResetAfterError()>
<com.android.systemui.plugins.PluginInitializerImpl: void handleWtfs()>
<com.android.printservice.recommendation.RecommendationServiceImpl: void onChanged()>
<com.android.server.inputmethod.MultiClientInputMethodManagerService.Lifecycle: void onStart()>
<javax.obex.ClientOperation: void noBodyHeader()>
<com.android.keyguard.clock.BubbleClockController: void setStyle(android.graphics.Paint.Style)>
<com.android.keyguard.CarrierTextController.Builder: com.android.keyguard.CarrierTextController.Builder setShowAirplaneMode(boolean)>
<com.android.server.autofill.ui.FillUi.Callback: void startIntentSender(android.content.IntentSender)>
<com.android.server.policy.WindowManagerPolicy: void setKeyguardCandidateLw(com.android.server.policy.WindowManagerPolicy.WindowState)>
<com.android.server.pm.permission.PermissionManagerService.Injector: void disablePermissionCache()>
<com.android.systemui.statusbar.notification.row.PartialConversationInfo: void onFinishInflate()>
<com.android.systemui.statusbar.notification.MessagingImageTransformState: void recycle()>
<com.android.settingslib.core.lifecycle.ObservableActivity: void onResume()>
<com.android.server.pm.Installer: boolean mergeProfiles(int,java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: com.android.systemui.statusbar.StatusBarIconView getShelfIcon()>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest newInstance()>
<com.android.systemui.shared.system.TransactionCompat: com.android.systemui.shared.system.TransactionCompat setBackgroundBlurRadius(com.android.systemui.shared.system.SurfaceControlCompat,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout.OnOverscrollTopChangedListener: void onOverscrollTopChanged(float,boolean)>
<com.android.server.updates.NetworkWatchlistInstallReceiver: void postInstall(android.content.Context,android.content.Intent)>
<com.android.settingslib.bluetooth.PbapClientProfile: void finalize()>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: void setStatus(android.print.PrintJobId,java.lang.CharSequence)>
<com.android.server.trust.TrustManagerService: void onStopUser(int)>
<com.android.systemui.statusbar.phone.StatusBar: void collapseShade()>
<android.text.BoringLayoutIsBoringPerfTest: java.util.Collection cases()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: float getMaximumSwipeDistance()>
<com.android.server.usb.descriptors.UsbInterfaceDescriptor: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProvider: boolean shouldLaunchFullScreenIntentWhenAdded(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setStateListener(com.android.systemui.statusbar.phone.NotificationShadeWindowController.OtherwisedCollapsedListener)>
<com.android.server.display.HysteresisLevels: float getBrighteningThreshold(float)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getDeviceOwnerUserId()>
<com.android.keyguard.clock.AnalogClockController: android.view.View getView()>
<javax.microedition.khronos.opengles.GL11: void glGetMaterialxv(int,int,int[],int)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void setSimCallManagerPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.PackagesProvider)>
<com.android.systemui.bubbles.BubbleController.BubbleExpandListener: void onBubbleExpandChanged(boolean,java.lang.String)>
<com.android.server.accessibility.MagnificationController.ControllerContext: void putMagnificationScale(float,int)>
<com.android.server.pm.PackageSender: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],int[],android.util.SparseArray)>
<lockedregioncodeinjection.Utils: java.util.List getTargetsFromLegacyJackConfig(java.lang.String,java.lang.String,java.lang.String)>
<com.android.systemui.bubbles.BubbleIconFactory: void <init>(android.content.Context)>
<com.android.systemui.classifier.FalsingManagerFake: boolean isClassifierEnabled()>
<com.android.server.SystemService: void onSwitchUser(android.content.pm.UserInfo,android.content.pm.UserInfo)>
<com.android.systemui.statusbar.phone.StatusBar: void toggleSplitScreen()>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageCache: void preload(android.net.Uri)>
<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice releaseVirtualDisplayLocked(android.os.IBinder)>
<com.android.systemui.Prefs: java.lang.String getString(android.content.Context,java.lang.String,java.lang.String)>
<com.android.settingslib.widget.ActionButtonsPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.recents.OverviewProxyService: void addCallback(com.android.systemui.recents.OverviewProxyService.OverviewProxyListener)>
<com.android.server.usb.descriptors.UsbDescriptorParser: int getACInterfaceSpec()>
<com.android.systemui.statusbar.notification.stack.ViewState: boolean isAnimating(android.view.View,com.android.systemui.statusbar.notification.AnimatableProperty)>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: void prepareForBubbleDrag(android.view.View,com.android.systemui.util.magnetictarget.MagnetizedObject.MagneticTarget,com.android.systemui.util.magnetictarget.MagnetizedObject.MagnetListener)>
<com.android.server.pm.parsing.library.PackageBackwardCompatibility: boolean bootClassPathContainsATB()>
<com.android.settingslib.CustomEditTextPreferenceCompat: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: boolean userAllowsNotificationsInPublic(int)>
<com.android.systemui.statusbar.policy.RotationLockControllerImpl: void setRotationLocked(boolean)>
<com.android.systemui.plugins.NotificationPersonExtractorPlugin: boolean isPersonNotification(android.service.notification.StatusBarNotification)>
<com.android.settingslib.graph.SignalDrawable: boolean onLevelChange(int)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: int getMinHeight()>
<com.android.server.audio.AudioService: void setSupportedSystemUsages(int[])>
<com.android.statementservice.IntentFilterVerificationReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.media.MediaSessionRecordImpl: int getUid()>
<com.android.server.recoverysystem.RecoverySystemService.Lifecycle: void onBootPhase(int)>
<com.android.server.audio.RecordingActivityMonitor: void recorderEvent(int,int)>
<com.android.systemui.pip.PipTaskOrganizer: void registerPipTransitionCallback(com.android.systemui.pip.PipTaskOrganizer.PipTransitionCallback)>
<com.android.systemui.util.leak.DumpTruck: android.net.Uri getDumpUri()>
<com.android.commands.hid.Event: android.util.SparseArray getFeatureReports()>
<com.android.server.policy.role.LegacyRoleResolutionPolicy: java.util.List getRoleHolders(java.lang.String,int)>
<com.android.settingslib.bluetooth.PbapClientProfile: int getNameResource(android.bluetooth.BluetoothDevice)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isUseEmbeddedDex()>
<com.android.server.accessibility.AccessibilityManagerService: void persistComponentNamesToSettingLocked(java.lang.String,java.util.Set,int)>
<com.android.systemui.volume.Events: java.lang.String logEvent(int,java.lang.Object[])>
<com.android.lock_checker.LockHook.LockChecker: void post(java.lang.Object)>
<com.android.systemui.bubbles.animation.StackAnimationController: void updateResources(int)>
<com.android.server.pm.AppsFilter.FeatureConfig: boolean packageIsEnabled(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setPulsing(boolean,boolean)>
<com.android.systemui.statusbar.notification.collection.NotifCollection: void <init>(com.android.internal.statusbar.IStatusBarService,com.android.systemui.util.time.SystemClock,com.android.systemui.statusbar.FeatureFlags,com.android.systemui.statusbar.notification.collection.notifcollection.NotifCollectionLogger,com.android.systemui.dump.LogBufferEulogizer,com.android.systemui.dump.DumpManager)>
<android.net.wifi.WifiInfo: boolean is24GHz()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setHeadsUp(boolean)>
<com.android.systemui.biometrics.AuthBiometricView: void handleResetAfterHelp()>
<com.android.systemui.biometrics.AuthController: void onTryAgainPressed()>
<com.android.server.accessibility.AbstractAccessibilityServiceConnection.SystemSupport: com.android.server.accessibility.KeyEventDispatcher getKeyEventDispatcher()>
<com.android.encryptedlocaltransport.EncryptedLocalTransport: void <init>(android.content.Context,com.android.localtransport.LocalTransportParameters)>
<com.android.externalstorage.MountReceiver: void onReceive(android.content.Context,android.content.Intent)>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLDisplay eglGetCurrentDisplay()>
<com.android.systemui.qs.QSFragment: void setPanelView(com.android.systemui.plugins.qs.QS.HeightListener)>
<com.android.systemui.statusbar.phone.NotificationGroupManager: void onStateChanged(int)>
<com.android.server.testing.shadows.ShadowBackupDataInput: void throwInNextHeaderRead()>
<com.android.server.biometrics.fingerprint.FingerprintService: void notifyClientActiveCallbacks(boolean)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: int getClientPriority(int,int)>
<com.android.systemui.car.navigationbar.NavigationBarViewFactory: android.view.ViewGroup getTopWindow()>
<com.android.systemui.dagger.DefaultServiceBinder: android.app.Service bindImageWallpaper(com.android.systemui.ImageWallpaper)>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: boolean isMethodSecure()>
<android.media.Session2Link: boolean equals(java.lang.Object)>
<com.android.printservice.recommendation.plugin.samsung.SamsungRecommendationPlugin: void stop()>
<com.android.settingslib.development.AbstractLogdSizePreferenceController: void <init>(android.content.Context)>
<android.media.MediaSession2.ControllerInfo: android.os.Bundle getConnectionHints()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean isInsideQsContainer(android.view.MotionEvent)>
<com.android.systemui.pip.PipTaskOrganizer: boolean isInPip()>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.powermodel.AppActivity: com.android.powermodel.ComponentActivity getComponentActivity(com.android.powermodel.Component)>
<com.android.server.infra.AbstractPerUserSystemService: boolean isDebug()>
<com.android.packageinstaller.wear.WearPackageIconProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<com.android.settingslib.utils.AsyncLoaderCompat: void deliverResult(java.lang.Object)>
<com.android.systemui.statusbar.KeyguardAffordanceView: void setImageAlpha(float,boolean,long,android.view.animation.Interpolator,java.lang.Runnable)>
<com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey: android.security.keystore.AndroidKeyStoreSecretKey getKey()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void onPluginDisconnected(com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin)>
<com.android.server.usb.descriptors.UsbHIDDescriptor: int getRelease()>
<com.android.packageinstaller.handheld.UninstallAlertDialogFragment: void onClick(android.content.DialogInterface,int)>
<com.android.server.search.SearchManagerService.Lifecycle: void onStart()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: long getHiSyncId()>
<com.android.server.pm.DumpState: boolean isOptionEnabled(int)>
<com.android.server.audio.AudioService: void reloadAudioSettings()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setOverscrollTopChangedListener(com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout.OnOverscrollTopChangedListener)>
<com.android.server.locksettings.SyntheticPasswordManager: void migrateFrpPasswordLocked(long,android.content.pm.UserInfo,int)>
<android.net.wifi.WifiInfo: void setMeteredHint(boolean)>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifDismissInterceptor: boolean shouldInterceptDismissal(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.KeyguardAffordanceView: void <init>(android.content.Context)>
<android.multiuser.UserLifecycleTests: void managedProfileUnlockAndLaunchApp_stopped()>
<com.android.systemui.pip.PipTaskOrganizer: android.os.Handler getUpdateHandler()>
<android.net.wifi.WifiConfiguration: void setPasspointUniqueId(java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setHeaderVisibleAmount(float)>
<com.android.systemui.qs.tileimpl.QSTileImpl.ResourceIcon: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.phone.ScrimController: void onColorsChanged(com.android.internal.colorextraction.ColorExtractor,int)>
<com.android.systemui.statusbar.phone.ShadeControllerImpl: void animateCollapsePanels(int)>
<android.net.wifi.WifiNetworkAgentSpecifier: boolean canBeSatisfiedBy(android.net.NetworkSpecifier)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPermissionPolicy(android.content.ComponentName)>
<android.net.wifi.p2p.WifiP2pGroup: void writeToParcel(android.os.Parcel,int)>
<com.android.server.media.MediaSessionRecord: boolean isPlaybackTypeLocal()>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isDismissAllInProgress()>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getProtectedBroadcasts()>
<com.android.server.ConnectivityService: boolean isCallerCurrentAlwaysOnVpnLockdownApp()>
<com.android.settingslib.applications.ApplicationsState.Session: int getSessionFlags()>
<com.android.settingslib.media.LocalMediaManager: void adjustSessionVolume(java.lang.String,int)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onLeftAffordanceHintStarted()>
<android.media.MediaController2.ControllerCallback: void onDisconnected(android.media.MediaController2)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setBackupServiceEnabled(android.content.ComponentName,boolean)>
<com.android.systemui.globalactions.GlobalActionsColumnLayout: boolean shouldReverseListItems()>
<com.android.settingslib.Utils: int applyAlphaAttr(android.content.Context,int,int)>
<com.android.server.TelephonyRegistry: void addOnSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
<com.android.systemui.statusbar.notification.stack.NotificationSection: void cancelAnimators()>
<com.android.server.soundtrigger.SoundTriggerDbHelper: boolean deleteGenericSoundModel(java.util.UUID)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: void onIconExternal(int,int)>
<com.android.keyguard.KeyguardHostView: void resetSecurityContainer()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: android.view.View getChildAfterViewWhenDismissed()>
<com.android.server.pm.PackageManagerService: int getInstallReason(java.lang.String,int)>
<com.android.systemui.util.leak.TrackedGarbage: int countOldGarbage()>
<com.android.server.usb.descriptors.tree.UsbDescriptorsEndpointNode: void <init>(com.android.server.usb.descriptors.UsbEndpointDescriptor)>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: void setTransactionId(int)>
<com.android.systemui.statusbar.AlphaOptimizedTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.shared.system.PinnedStackListenerForwarder: void onAspectRatioChanged(float)>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getIdentity()>
<com.android.server.CountryDetectorService: void addCountryListener(android.location.ICountryListener)>
<javax.microedition.khronos.opengles.GL10: void glStencilMask(int)>
<com.android.systemui.statusbar.BackDropView: void <init>(android.content.Context)>
<com.android.server.accessibility.KeyEventDispatcher: void <init>(android.os.Handler,int,java.lang.Object,android.os.PowerManager,android.os.Handler)>
<com.android.networkstack.tethering.TetheringDependencies: android.content.Context getContext()>
<com.android.systemui.DessertCaseView: void fillFreeList()>
<com.android.server.policy.WindowManagerPolicy.WindowState: int getRotationAnimationHint()>
<com.android.vpndialogs.ManageDialog: void onCreate(android.os.Bundle)>
<com.android.settingslib.net.NetworkCycleDataLoader: void onReset()>
<com.android.systemui.qs.QuickStatusBarHeader: void onZenChanged(int)>
<com.android.server.attention.AttentionManagerService: void onBootPhase(int)>
<com.android.keyguard.KeyguardUpdateMonitor: android.telephony.SubscriptionInfo getSubscriptionInfoForSubId(int)>
<com.android.settingslib.wifi.AccessPoint: java.lang.Object getTag()>
<com.android.server.soundtrigger_middleware.SoundTriggerHw2Enforcer: void unloadSoundModel(int)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeUtilCompat: java.lang.String getSubtypeLocaleNameListAsSentence(java.util.List,android.content.Context,android.view.inputmethod.InputMethodInfo)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void setKeyguardGoingAwayState(boolean)>
<com.android.settingslib.graph.SignalDrawable: void setColorFilter(android.graphics.ColorFilter)>
<com.android.systemui.statusbar.notification.row.FooterView: boolean isButtonVisible()>
<com.android.uiautomator.core.UiScrollable: double getSwipeDeadZonePercentage()>
<com.android.systemui.shared.system.RemoteAnimationRunnerCompat: void onAnimationCancelled()>
<com.android.systemui.plugins.statusbar.StatusBarStateController: boolean isDozing()>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void onExpandingFinished()>
<com.android.systemui.wm.DisplayImeController.PerDisplay.DisplayWindowInsetsControllerImpl: void insetsControlChanged(android.view.InsetsState,android.view.InsetsSourceControl[])>
<com.android.uiautomator.core.UiScrollable: boolean scrollIntoView(com.android.uiautomator.core.UiObject)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onBiometricHelp(int,java.lang.String,android.hardware.biometrics.BiometricSourceType)>
<com.android.systemui.qs.QSFragment: void onViewCreated(android.view.View,android.os.Bundle)>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper: void onConfigurationChanged()>
<com.android.server.pm.permission.PermissionSettings: void transferPermissions(java.lang.String,java.lang.String)>
<com.android.keyguard.KeyguardClockSwitch: void setShowCurrentUserTime(boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void changeViewPosition(com.android.systemui.statusbar.notification.row.ExpandableView,int)>
<com.android.systemui.pip.phone.PipManager: void setShelfHeight(boolean,int)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void onReinflated()>
<com.android.systemui.keyguard.ScreenLifecycle.Observer: void onScreenTurningOn()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onExpansionStopped()>
<com.android.server.TelephonyRegistry: void notifyEmergencyNumberList(int,int)>
<com.android.location.provider.LocationRequestUnbundled: int getQuality()>
<com.android.systemui.statusbar.phone.SystemUIDialog: void <init>(android.content.Context,int)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_toAllowed_doesNotKillApp()>
<com.android.server.pm.PackageManagerService: void setPackageStoppedState(java.lang.String,boolean,int)>
<com.android.systemui.statusbar.StatusIconDisplayable: void setStaticDrawableColor(int)>
<com.android.server.pm.permission.PermissionManagerService: java.util.List getSplitPermissions()>
<com.android.systemui.biometrics.AuthCredentialView.ErrorTimer: void onTick(long)>
<com.android.systemui.statusbar.policy.MobileSignalController: void registerListener()>
<com.android.server.pm.PackageKeySetData: void addUpgradeKeySet(java.lang.String)>
<com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm: void resetViewStates(com.android.systemui.statusbar.notification.stack.AmbientState)>
<com.android.systemui.statusbar.notification.row.NotifRemoteViewCacheImpl: boolean hasCachedView(com.android.systemui.statusbar.notification.collection.NotificationEntry,int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isRowPinned()>
<com.android.server.DynamicSystemService: boolean getAvbPublicKey(android.gsi.AvbPublicKey)>
<com.android.settingslib.bluetooth.LocalBluetoothManager: com.android.settingslib.bluetooth.CachedBluetoothDeviceManager getCachedDeviceManager()>
<com.android.systemui.statusbar.notification.TransformState: void setTransformationEndY(float)>
<android.processor.view.inspector.InspectableClassModel.Accessor: void <init>(java.lang.String,android.processor.view.inspector.InspectableClassModel.Accessor.Type)>
<com.android.server.integrity.AppIntegrityManagerServiceImpl: com.android.server.integrity.AppIntegrityManagerServiceImpl create(android.content.Context)>
<com.android.server.CachedDeviceStateService: void onBootPhase(int)>
<com.android.egg.paint.PaintActivity: void onPostResume()>
<com.android.server.broadcastradio.hal2.AnnouncementAggregator: void watchModule(com.android.server.broadcastradio.hal2.RadioModule,int[])>
<com.android.settingslib.bluetooth.MapProfile: java.lang.String toString()>
<com.android.commands.bu.Backup: void main(java.lang.String[])>
<android.app.usage.UsageStatsManagerInternal: void setLastJobRunTime(java.lang.String,int,long)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: void setOutlineRect(android.graphics.RectF)>
<javax.obex.PrivateOutputStream: void close()>
<android.app.StatsManager.PullAtomMetadata: int[] getAdditiveFields()>
<com.android.systemui.qs.AutoAddTracker: int getCurrentUserId()>
<com.android.systemui.plugins.OverlayPlugin: void setCollapseDesired(boolean)>
<com.android.settingslib.core.lifecycle.Lifecycle: void setPreferenceScreen(androidx.preference.PreferenceScreen)>
<com.android.packageinstaller.UninstallerActivity: void startUninstallProgress(boolean)>
<android.net.wifi.WifiManager: void removePasspointConfiguration(java.lang.String)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeEnablerManagerCompat: void save(android.content.Context,androidx.preference.PreferenceFragmentCompat)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean handleActiveSource(com.android.server.hdmi.HdmiCecMessage)>
<com.android.systemui.statusbar.policy.OnHeadsUpChangedListener: void onHeadsUpPinnedModeChanged(boolean)>
<com.android.server.pm.UserRestrictionsUtils: boolean canProfileOwnerOfOrganizationOwnedDeviceChange(java.lang.String)>
<com.android.settingslib.bluetooth.MapProfile: int getProfileId()>
<com.android.systemui.assist.DeviceConfigHelper: void addOnPropertiesChangedListener(java.util.concurrent.Executor,android.provider.DeviceConfig.OnPropertiesChangedListener)>
<com.android.server.pm.permission.PermissionsState: boolean hasPermission(java.lang.String,int)>
<com.android.settingslib.bluetooth.HidProfile: boolean accessProfileEnabled()>
<com.android.server.ConnectivityService: boolean removeVpnAddress(java.lang.String,int)>
<com.android.systemui.statusbar.policy.KeyguardStateController: void setLaunchTransitionFadingAway(boolean)>
<com.android.server.display.color.DisplayTransformManager: float[] getColorMatrix(int)>
<com.android.server.usb.descriptors.Usb10ASFormatI: byte getBitResolution()>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean handleRequestArcInitiate(com.android.server.hdmi.HdmiCecMessage)>
<com.android.systemui.statusbar.NotificationHeaderUtil.DataExtractor: java.lang.Object extractData(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.pm.PackageSettingBase: java.lang.String getVolumeUuid()>
<com.android.proxyhandler.ProxyServer: void setPort(int)>
<com.android.settingslib.drawer.Tile: java.lang.String getPackageName()>
<com.android.server.inputmethod.InputMethodManagerInternal: void registerInputMethodListListener(com.android.server.inputmethod.InputMethodManagerInternal.InputMethodListListener)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setHeaderVisibleAmount(float)>
<com.android.systemui.statusbar.notification.row.ExpandableView: int getRelativeTopPadding(android.view.View)>
<android.media.MediaSession2: void broadcastSessionCommand(android.media.Session2Command,android.os.Bundle)>
<com.android.systemui.statusbar.policy.KeyButtonView: void abortCurrentGesture()>
<javax.obex.ObexTransport: void create()>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareImpl: void <init>(com.android.server.soundtrigger_middleware.HalFactory,com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareImpl.AudioSessionProvider)>
<com.android.egg.neko.PrefState: java.util.List getCats()>
<javax.obex.ObexTransport: int getMaxReceivePacketSize()>
<com.android.networkstack.tethering.UpstreamNetworkMonitor: void startTrackDefaultNetwork(android.net.NetworkRequest,com.android.networkstack.tethering.EntitlementManager)>
<com.android.server.NetworkScoreService: void unregisterNetworkScoreCache(int,android.net.INetworkScoreCache)>
<com.android.server.display.utils.Plog: void emit(java.lang.String)>
<com.android.systemui.statusbar.phone.NavigationBarView: void showPinningEscapeToast()>
<com.android.server.devicepolicy.CertificateMonitor: void onCertificateApprovalsChanged(int)>
<com.android.systemui.statusbar.policy.BatteryControllerImpl: boolean isPluggedIn()>
<android.util.StatsEvent: byte[] getBytes()>
<com.android.server.pm.permission.PermissionManagerService: void stopOneTimePermissionSession(java.lang.String,int)>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void onPause()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void onDisplayReady(int)>
<android.net.wifi.hotspot2.pps.Policy.RoamingPartner: java.lang.String getCountries()>
<com.android.printspooler.model.CustomPrinterIconCache: void onCustomPrinterIconLoaded(android.print.PrinterId,android.graphics.drawable.Icon)>
<com.android.server.biometrics.BiometricUserState: void renameBiometric(int,java.lang.CharSequence)>
<javax.microedition.khronos.opengles.GL11: void glGetClipPlanef(int,float[],int)>
<com.android.systemui.wm.DisplayController.OnDisplaysChangedListener: void onDisplayConfigurationChanged(int,android.content.res.Configuration)>
<com.android.server.contentsuggestions.RemoteContentSuggestionsService: long getRemoteRequestMillis()>
<com.android.systemui.plugins.qs.QS: void setPanelView(com.android.systemui.plugins.qs.QS.HeightListener)>
<com.android.server.soundtrigger.SoundTriggerHelper: void onRecognition(android.hardware.soundtrigger.SoundTrigger.RecognitionEvent)>
<com.android.server.timezonedetector.ArrayMapWithHistory: java.lang.Object get(java.lang.Object)>
<com.android.systemui.media.dialog.MediaOutputAdapter: com.android.systemui.media.dialog.MediaOutputBaseAdapter.MediaDeviceBaseViewHolder onCreateViewHolder(android.view.ViewGroup,int)>
<com.android.server.IpSecService.RefcountedResource: java.lang.String toString()>
<com.android.systemui.statusbar.policy.CastControllerImpl: void stopCasting(com.android.systemui.statusbar.policy.CastController.CastDevice)>
<com.android.systemui.statusbar.policy.Clock: void onDarkChanged(android.graphics.Rect,float,int)>
<com.android.settingslib.net.NetworkCycleDataForUidLoader.Builder: com.android.settingslib.net.NetworkCycleDataForUidLoader.Builder addUid(int)>
<com.android.settingslib.deviceinfo.AbstractImsStatusPreferenceController: void <init>(android.content.Context,com.android.settingslib.core.lifecycle.Lifecycle)>
<com.android.systemui.statusbar.policy.NetworkController.IconState: void <init>(boolean,int,int,android.content.Context)>
<com.android.server.soundtrigger_middleware.SoundTriggerHw2Enforcer: java.lang.String interfaceDescriptor()>
<com.android.location.provider.ActivityRecognitionProviderClient: android.os.IBinder getBinder()>
<android.net.NetworkMonitorManager: boolean notifyCaptivePortalAppFinished(int)>
<com.android.systemui.shared.recents.utilities.BitmapUtil: android.os.Bundle hardwareBitmapToBundle(android.graphics.Bitmap)>
<android.net.wifi.IWifiManager: void save(android.net.wifi.WifiConfiguration,android.os.IBinder,android.net.wifi.IActionListener,int)>
<com.android.systemui.usb.UsbDebuggingActivity: void onClick(android.content.DialogInterface,int)>
<com.android.systemui.SwipeHelper.Callback: android.view.View getChildAtPosition(android.view.MotionEvent)>
<com.android.settingslib.Utils: android.content.res.ColorStateList getColorAccent(android.content.Context)>
<com.android.server.ConnectivityService: boolean isDefaultNetwork(com.android.server.connectivity.NetworkAgentInfo)>
<com.android.server.policy.PhoneWindowManager: boolean isKeyguardHostWindow(android.view.WindowManager.LayoutParams)>
<androidx.window.sidecar.SidecarProvider: androidx.window.sidecar.SidecarInterface getSidecarImpl(android.content.Context)>
<android.app.ResourcesPerfTest: void getQuantityString()>
<com.android.server.pm.PackageInstallerService: int createSession(android.content.pm.PackageInstaller.SessionParams,java.lang.String,int)>
<com.android.settingslib.bluetooth.HearingAidProfile: java.util.List getActiveDevices()>
<com.android.systemui.screenrecord.RecordingService: com.android.systemui.screenrecord.ScreenMediaRecorder getRecorder()>
<com.android.server.compat.PlatformCompat: boolean isKnownChangeId(long)>
<javax.microedition.khronos.opengles.GL10: void glMultMatrixf(float[],int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>
<com.android.systemui.statusbar.policy.NetworkController: java.lang.String getMobileDataNetworkName()>
<com.android.systemui.statusbar.notification.MediaNotificationProcessor: void processNotification(android.app.Notification,android.app.Notification.Builder)>
<com.android.systemui.Dependency: void start()>
<android.perftests.utils.TraceMarkParser: void <init>(java.util.function.Predicate)>
<com.android.systemui.ExpandHelper.Callback: boolean canChildBeExpanded(android.view.View)>
<com.android.packageinstaller.wear.WearPackageArgs: boolean skipIfLowerVersion(android.os.Bundle)>
<com.android.server.usb.descriptors.UsbInterfaceDescriptor: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: android.view.NotificationHeaderView getHeaderView()>
<com.android.role.persistence.RolesState: boolean equals(java.lang.Object)>
<com.android.systemui.pip.phone.PipManager: void setTouchGesture(com.android.systemui.pip.phone.PipTouchGesture)>
<com.android.systemui.assist.AssistManager: void startAssist(android.os.Bundle)>
<com.android.server.pm.dex.ArtManagerService: void prepareAppProfiles(com.android.server.pm.parsing.pkg.AndroidPackage,int[],boolean)>
<com.android.systemui.doze.DozeLog: void traceScreenOn()>
<com.android.systemui.volume.VolumeDialogControllerImpl: boolean isCaptionStreamOptedOut()>
<com.android.server.PinnerService: void onSwitchUser(int)>
<android.net.TetheringManager: java.lang.String[] getTetheringErroredIfaces()>
<com.android.systemui.statusbar.policy.AccessPointControllerImpl: void onUserSwitched(int)>
<com.android.systemui.media.dialog.MediaOutputGroupAdapter: void onBindViewHolder(com.android.systemui.media.dialog.MediaOutputBaseAdapter.MediaDeviceBaseViewHolder,int)>
<com.android.systemui.statusbar.ViewTransformationHelper: void transformTo(com.android.systemui.statusbar.TransformableView,float)>
<com.android.keyguard.clock.ImageClock: void <init>(android.content.Context)>
<com.android.systemui.statusbar.policy.ZenModeController.Callback: void onConditionsChanged(android.service.notification.Condition[])>
<com.android.systemui.recents.OverviewProxyService: void <init>(android.content.Context,com.android.systemui.statusbar.CommandQueue,com.android.systemui.statusbar.NavigationBarController,com.android.systemui.statusbar.phone.NavigationModeController,com.android.systemui.statusbar.phone.NotificationShadeWindowController,com.android.systemui.model.SysUiState,com.android.systemui.pip.PipUI,java.util.Optional,java.util.Optional,com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationTemplateViewWrapper: int getExtraMeasureHeight()>
<com.android.server.NetworkManagementService: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>
<com.android.server.usb.descriptors.Usb20ASFormatIIEx: int getMaxBitRate()>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareValidation: void setCaptureState(boolean)>
<com.android.commands.uiautomator.Launcher.Command: void <init>(java.lang.String)>
<com.android.server.locksettings.recoverablekeystore.certificate.CertXml: java.security.cert.CertPath getRandomEndpointCert(java.security.cert.X509Certificate)>
<android.net.ip.IpClientUtil.WaitForProvisioningCallbacks: void onProvisioningFailure(android.net.LinkProperties)>
<android.net.wifi.AnqpInformationElement: byte[] getPayload()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationBigTextTemplateViewWrapper: void onContentUpdated(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.statementservice.retriever.URLFetcher: com.android.statementservice.retriever.WebContent getWebContentFromUrl(java.net.URL,long,int)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: void getRoundedRectPath(int,int,int,int,float,float,android.graphics.Path)>
<com.android.settingslib.notification.EnableZenModeDialog: void bind(android.service.notification.Condition,android.view.View,int)>
<com.android.settingslib.search.SearchIndexableData: void <init>(java.lang.Class,com.android.settingslib.search.Indexable.SearchIndexProvider)>
<com.android.systemui.settings.ToggleSlider: int getValue()>
<android.net.wifi.IWifiManager: void setPasspointMeteredOverride(java.lang.String,int)>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void closeSession(java.lang.String)>
<javax.microedition.khronos.opengles.GL10: void glColor4f(float,float,float,float)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: int getCurrentUserId()>
<android.net.wifi.aware.PublishConfig: int hashCode()>
<com.android.server.pm.PackageManagerService: android.content.ComponentName getInstantAppResolverComponent()>
<com.android.server.pm.PackageManagerService: boolean isInstantApp(java.lang.String,int)>
<android.net.wifi.hotspot2.OsuProvider: java.lang.String getFriendlyName()>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isInputReady(int)>
<com.android.server.ConnectivityService: int getConnectionOwnerUid(android.net.ConnectionInfo)>
<com.android.server.compat.CompatChange: java.lang.String toString()>
<com.android.keyguard.EmergencyButton: void onFinishInflate()>
<com.android.systemui.bubbles.BubbleController: void <init>(android.content.Context,com.android.systemui.statusbar.phone.NotificationShadeWindowController,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.phone.ShadeController,com.android.systemui.bubbles.BubbleData,com.android.systemui.bubbles.BubbleStackView.SurfaceSynchronizer,com.android.systemui.statusbar.policy.ConfigurationController,com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProvider,com.android.systemui.statusbar.policy.ZenModeController,com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.statusbar.phone.NotificationGroupManager,com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.systemui.statusbar.notification.collection.NotifPipeline,com.android.systemui.statusbar.FeatureFlags,com.android.systemui.dump.DumpManager,com.android.systemui.util.FloatingContentCoordinator,com.android.systemui.bubble.BubbleDataRepository,com.android.systemui.model.SysUiState,android.app.INotificationManager,com.android.internal.statusbar.IStatusBarService,android.view.WindowManager,android.content.pm.LauncherApps)>
<android.net.wifi.WifiUsabilityStatsEntry: int describeContents()>
<com.android.systemui.statusbar.phone.HeadsUpTouchHelper: void <init>(com.android.systemui.statusbar.phone.HeadsUpManagerPhone,com.android.systemui.statusbar.phone.HeadsUpTouchHelper.Callback,com.android.systemui.statusbar.phone.NotificationPanelViewController)>
<com.android.server.testing.shadows.ShadowKeyValueBackupTask: java.util.List getPendingFullBackups()>
<com.android.server.pm.PackageManagerService: java.util.List getMimeGroup(java.lang.String,java.lang.String)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: void setDismissRtl(boolean)>
<android.net.wifi.WifiNetworkSuggestion: int describeContents()>
<com.android.systemui.statusbar.phone.PanelViewController: void startExpandingFromPeek()>
<com.android.systemui.biometrics.AuthController: void onBiometricAuthenticated()>
<com.android.systemui.car.statusbar.DummyNotificationShadeWindowController: void setForceDozeBrightness(boolean)>
<com.android.server.recoverysystem.RecoverySystemService.UncryptSocket: void sendAck()>
<com.android.startop.colorchanging.MainActivity: void goCyan(android.view.View)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(android.content.ComponentName)>
<com.android.server.pm.UserManagerService: void setUserIcon(int,android.graphics.Bitmap)>
<com.android.server.usb.descriptors.Usb20ACOutputTerminal: int getControls()>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: int getProtocol()>
<com.android.systemui.shared.system.TaskStackChangeListeners: void removeListener(com.android.systemui.shared.system.TaskStackChangeListener)>
<com.android.server.usb.UsbAlsaDevice: boolean hasOutput()>
<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.KeySyncTask newInstance(android.content.Context,com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb,com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage,com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage,int,int,byte[],boolean)>
<com.android.server.pm.ShortcutService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.media.NotificationPlayer: void play(android.content.Context,android.net.Uri,boolean,android.media.AudioAttributes)>
<com.android.server.display.DisplayDeviceConfig: float[] getNits()>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindKeyguardViewMediator(com.android.systemui.keyguard.KeyguardViewMediator)>
<android.net.wifi.IWifiManager: void setMacRandomizationSettingPasspointEnabled(java.lang.String,boolean)>
<com.android.server.pm.PackageManagerService: android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String)>
<javax.obex.ObexTransport: java.io.OutputStream openOutputStream()>
<com.android.gallery3d.exif.ExifInterface: com.android.gallery3d.exif.ExifTag buildTag(int,int,java.lang.Object)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void setCurrentBottomRoundness(float)>
<com.android.systemui.bubbles.BubbleExpandedView: void <init>(android.content.Context)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone.HeadsUpEntryPhone: void setMenuShownPinned(boolean)>
<com.android.server.companion.CompanionDeviceManagerService: void onUnlockUser(int)>
<com.android.server.biometrics.fingerprint.FingerprintUtils: void renameBiometricForUser(android.content.Context,int,int,java.lang.CharSequence)>
<com.android.systemui.qs.external.TileServices: void onDialogHidden(android.os.IBinder)>
<com.android.systemui.statusbar.policy.CallbackHandler: void setListening(com.android.systemui.statusbar.policy.NetworkController.EmergencyListener,boolean)>
<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLId getGLId()>
<com.android.settingslib.applications.DefaultAppInfo: java.lang.String getKey()>
<com.android.server.pm.AppsFilter: boolean shouldFilterApplication(int,com.android.server.pm.SettingBase,com.android.server.pm.PackageSetting,int)>
<com.android.server.pm.permission.PermissionManagerService: java.util.List getWhitelistedRestrictedPermissions(java.lang.String,int,int)>
<com.android.systemui.SystemUIFactory: com.android.systemui.screenshot.ScreenshotNotificationSmartActionsProvider createScreenshotNotificationSmartActionsProvider(android.content.Context,java.util.concurrent.Executor,android.os.Handler)>
<com.android.printservice.recommendation.plugin.hp.ServiceRecommendationPlugin: void dataSetChanged()>
<com.android.printspooler.ui.PageAdapter: void stopPreloadContent()>
<com.android.systemui.settings.BrightnessDialog: void onStart()>
<com.android.systemui.egg.MLand: boolean onKeyUp(int,android.view.KeyEvent)>
<android.view.ViewShowHidePerfTest: void testVisibleToGone()>
<com.android.networkstack.tethering.UpstreamNetworkMonitor: void releaseMobileNetworkRequest()>
<com.android.server.role.RoleUserState: boolean isRoleAvailable(java.lang.String)>
<com.android.settingslib.net.UidDetailProvider: int buildKeyForUser(int)>
<com.android.server.oemlock.OemLockService: void onStart()>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: void onCustomPrinterIconLoaded(android.print.PrinterId,android.graphics.drawable.Icon,android.print.IPrintSpoolerCallbacks,int)>
<com.android.server.NetworkManagementService: void setInterfaceUp(java.lang.String)>
<com.android.server.pm.pkg.PackageStateUnserialized: com.android.server.pm.pkg.PackageStateUnserialized setUpdatedSystemApp(boolean)>
<com.android.server.policy.WindowManagerPolicy.WindowState: void writeIdentifierToProto(android.util.proto.ProtoOutputStream,long)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOpDefault()>
<com.android.uiautomator.core.UiDevice: boolean drag(int,int,int,int,int)>
<com.android.systemui.pip.tv.PipManager.Listener: void onMoveToFullscreen()>
<com.android.server.textclassifier.IconsContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<com.android.systemui.accessibility.MirrorWindowControl: void destroyControl()>
<android.net.wifi.p2p.WifiP2pGroup: void setPassphrase(java.lang.String)>
<com.android.server.uri.GrantUri: boolean equals(java.lang.Object)>
<com.android.server.appop.AppOpsService: int permissionToOpCode(java.lang.String)>
<com.android.keyguard.KeyguardUpdateMonitor: void dispatchStartedWakingUp()>
<com.android.systemui.car.hvac.AnimatedTemperatureView: int getAreaId()>
<com.android.systemui.bubbles.BubbleManageEducationView: void <init>(android.content.Context)>
<com.android.gallery3d.common.Utils: int ceilLog2(float)>
<com.android.systemui.car.navigationbar.CarNavigationBar: void onSystemBarAppearanceChanged(int,int,com.android.internal.view.AppearanceRegion[],boolean)>
<com.android.settingslib.bluetooth.MapClientProfile: boolean isProfileReady()>
<com.android.providers.settings.SettingsService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<com.android.systemui.tuner.ClipboardView: boolean onDragEvent(android.view.DragEvent)>
<com.android.server.NetworkManagementService: void addInterfaceToNetwork(java.lang.String,int)>
<com.android.systemui.volume.VolumeDialogControllerImpl: void scheduleTouchFeedback()>
<com.android.server.integrity.model.BitInputStream: void <init>(java.io.InputStream)>
<com.android.systemui.tuner.RadioListPreference.RadioFragment: void setPreference(com.android.systemui.tuner.RadioListPreference)>
<com.android.server.ConnectivityService: boolean isVpnLockdownEnabled(int)>
<com.android.settingslib.widget.AppEntitiesHeaderController: com.android.settingslib.widget.AppEntitiesHeaderController clearAllAppEntities()>
<com.android.settingslib.drawer.ProviderTile: void <init>(android.content.pm.ProviderInfo,java.lang.String,android.os.Bundle)>
<com.android.systemui.statusbar.policy.KeyguardUserDetailItemView: void <init>(android.content.Context)>
<com.android.server.timezone.PackageTracker: java.lang.String toString()>
<com.android.server.role.RoleUserState: void setRoleNames(java.util.List)>
<com.android.settingslib.wifi.AccessPoint: void <init>(android.content.Context,android.net.wifi.WifiConfiguration)>
<com.google.android.startop.iorap.AppLaunchEvent.BaseWithActivityRecordData: java.lang.String toStringBody()>
<com.android.systemui.media.MediaBrowserFactory: void <init>(android.content.Context)>
<com.android.systemui.statusbar.SmartReplyController: void <init>(com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.internal.statusbar.IStatusBarService,com.android.systemui.statusba.NotificationClickNotifier)>
<com.android.systemui.statusbar.StatusBarIconView: int getStaticDrawableColor()>
<com.android.server.appop.AppOpsService: void rebootHistory(long)>
<com.android.systemui.shared.plugins.PluginPrefs: java.util.Set getPluginList()>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: void onNotificationUpdated(android.service.notification.StatusBarNotification)>
<com.android.systemui.statusbar.policy.BatteryController: boolean isExtremeSaverOn()>
<com.android.systemui.bubbles.BubbleManageEducationView: void setLayoutDirection(int)>
<android.net.wifi.WifiManager: int getMaxSignalLevel()>
<javax.microedition.khronos.opengles.GL11: void glClipPlanex(int,java.nio.IntBuffer)>
<android.net.wifi.p2p.WifiP2pManager.PersistentGroupInfoListener: void onPersistentGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroupList)>
<com.android.server.statusbar.StatusBarManagerInternal: void appTransitionStarting(int,long,long)>
<com.android.settingslib.widget.AppEntityInfo.Builder: com.android.settingslib.widget.AppEntityInfo build()>
<com.android.server.ConnectivityService: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
<com.android.server.timezonedetector.ArrayMapWithHistory: java.lang.Object put(java.lang.Object,java.lang.Object)>
<android.net.wifi.rtt.RangingRequest: boolean equals(java.lang.Object)>
<com.android.systemui.stackdivider.DividerView: void stopDragging(int,float,boolean,boolean)>
<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>
<android.media.MediaSession2Service.MediaNotification: int getNotificationId()>
<com.android.systemui.dagger.SystemUIRootComponent: boolean allowNotificationLongPressName()>
<com.android.server.pm.permission.PermissionManagerServiceInternal: java.util.List addAllPermissions(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>
<com.android.systemui.statusbar.notification.NotificationChannelHelper: android.app.NotificationChannel createConversationChannelIfNeeded(android.content.Context,android.app.INotificationManager,com.android.systemui.statusbar.notification.collection.NotificationEntry,android.app.NotificationChannel)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isAnyDensity()>
<com.android.systemui.screenrecord.RecordingService: android.content.Intent getNotificationIntent(android.content.Context)>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void onRotationLockStateChanged(boolean,boolean)>
<com.google.android.startop.iorap.ActivityHintEvent: java.lang.String toString()>
<com.android.systemui.statusbar.phone.KeyguardBouncer.BouncerExpansionCallback: void onStartingToHide()>
<android.net.wifi.WifiInfo: java.lang.String getBSSID()>
<com.android.server.storage.AppCollector: void <init>(android.content.Context,android.os.storage.VolumeInfo)>
<com.android.settingslib.RestrictedPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.shared.system.TransactionCompat: com.android.systemui.shared.system.TransactionCompat setPosition(com.android.systemui.shared.system.SurfaceControlCompat,float,float)>
<com.android.systemui.biometrics.AuthController: void <init>(android.content.Context,com.android.systemui.statusbar.CommandQueue)>
<com.android.systemui.statusbar.policy.ExtensionControllerImpl: void <init>(android.content.Context,com.android.systemui.util.leak.LeakDetector,com.android.systemui.shared.plugins.PluginManager,com.android.systemui.tuner.TunerService,com.android.systemui.statusbar.policy.ConfigurationController)>
<com.android.settingslib.widget.AppEntitiesHeaderController: com.android.settingslib.widget.AppEntitiesHeaderController setHeaderDetails(java.lang.CharSequence)>
<android.media.Session2Link: void onConnect(android.media.Controller2Link,int,int,int,android.os.Bundle)>
<com.android.systemui.statusbar.policy.SensorPrivacyController: boolean isSensorPrivacyEnabled()>
<android.net.wifi.p2p.WifiP2pDevice: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.notification.stack.SwipeableView: float getTranslation()>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean showLw(boolean)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.ParsedPackage hideAsParsed()>
<com.android.server.RescueParty.RescuePartyObserver: boolean execute(android.content.pm.VersionedPackage,int)>
<com.android.systemui.statusbar.policy.KeyButtonRipple: void setDarkIntensity(float)>
<com.android.systemui.statusbar.phone.NotificationGroupManager: void updateIsolation(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.google.android.startop.iorap.AppLaunchEvent: boolean equals(java.lang.Object)>
<com.android.systemui.plugins.IntentButtonProvider.IntentButton: com.android.systemui.plugins.IntentButtonProvider.IntentButton.IconState getIcon()>
<com.android.uiautomator.core.UiScrollable: com.android.uiautomator.core.UiObject getChildByInstance(com.android.uiautomator.core.UiSelector,int)>
<com.android.systemui.ForegroundServiceController: boolean isSystemAlertWarningNeeded(int,java.lang.String)>
<com.android.settingslib.utils.AsyncLoader: void <init>(android.content.Context)>
<com.android.systemui.plugins.qs.QSTile.Callback: void onAnnouncementRequested(java.lang.CharSequence)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void disableDevice(boolean,com.android.server.hdmi.HdmiCecLocalDevice.PendingActionClearedCallback)>
<com.android.systemui.statusbar.TransformableView: com.android.systemui.statusbar.notification.TransformState getCurrentState(int)>
<com.android.systemui.keyguard.KeyguardViewMediator: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.settingslib.CustomEditTextPreferenceCompat.CustomPreferenceDialogFragment: void onPrepareDialogBuilder(androidx.appcompat.app.AlertDialog.Builder)>
<com.android.server.biometrics.iris.IrisService: java.lang.String getLockoutBroadcastPermission()>
<com.android.server.audio.AudioService.VolumeController: void setVisible(boolean)>
<com.android.server.pm.permission.BasePermission: int getUid()>
<com.android.systemui.biometrics.AuthCredentialView: void onLayout(boolean,int,int,int,int)>
<com.android.systemui.statusbar.notification.collection.coordinator.HeadsUpCoordinator: void attach(com.android.systemui.statusbar.notification.collection.NotifPipeline)>
<com.android.server.IntentResolver: void addFilter(java.lang.Object)>
<com.android.settingslib.core.lifecycle.events.OnStop: void onStop()>
<com.android.keyguard.clock.BubbleClockController: android.view.View getView()>
<com.android.systemui.statusbar.SysuiStatusBarStateController: boolean setIsDozing(boolean)>
<com.android.systemui.statusbar.phone.ContextualButton: boolean show()>
<com.android.server.stats.StatsCompanion.Lifecycle: void <init>(android.content.Context)>
<com.android.server.PinnerService: void onBootPhase(int)>
<com.android.settingslib.schedulesprovider.SchedulesProvider: java.lang.String getType(android.net.Uri)>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)>
<com.android.server.pm.PackageManagerService: void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceFactory: com.android.server.display.whitebalance.AmbientSensor.AmbientColorTemperatureSensor createColorTemperatureSensor(android.os.Handler,android.hardware.SensorManager,android.content.res.Resources)>
<com.android.server.audio.AudioService: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)>
<com.android.systemui.model.SysUiState: com.android.systemui.model.SysUiState setFlag(int,boolean)>
<com.android.systemui.statusbar.policy.SmartReplyView: void resetSmartSuggestions(android.view.View)>
<com.android.server.integrity.model.BitInputStream: int getNext(int)>
<android.processor.view.inspector.InspectionCompanionGenerator: void generate(android.processor.view.inspector.InspectableClassModel)>
<android.os.BatteryStatsInternal: java.lang.String[] getWifiIfaces()>
<com.android.server.AnyMotionDetector.Vector3: float norm()>
<android.net.wifi.WifiManager: java.lang.String getCountryCode()>
<com.android.server.webkit.SystemInterface: void enablePackageForAllUsers(android.content.Context,java.lang.String,boolean)>
<com.android.systemui.statusbar.notification.collection.coordinator.KeyguardCoordinator: void <init>(android.content.Context,android.os.Handler,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.statusbar.notification.collection.provider.HighPriorityProvider)>
<com.android.gallery3d.common.BitmapUtils: android.graphics.Bitmap resizeDownBySideLength(android.graphics.Bitmap,int,boolean)>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void onDetachedFromWindow()>
<com.android.systemui.statusbar.policy.SecurityController: boolean isDeviceManaged()>
<com.android.server.usb.descriptors.Usb10ACOutputTerminal: void <init>(int,byte,byte,int)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onUserSwitching(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setScrimController(com.android.systemui.statusbar.phone.ScrimController)>
<com.google.android.startop.iorap.AppLaunchEvent: java.lang.String toStringBody()>
<com.android.printspooler.widget.PageContentView: void onSizeChanged(int,int,int,int)>
<com.android.server.usb.descriptors.UsbDescriptorParser: boolean isInputHeadset()>
<com.android.systemui.bubbles.BubbleExpandedView: void setOverflow(boolean)>
<com.android.printspooler.model.PageContentRepository.RenderSpec: boolean hasSameSize(com.android.printspooler.model.PageContentRepository.RenderedPage)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setKeyguardDisabled(android.content.ComponentName,boolean)>
<com.android.systemui.ActivityStarterDelegate: void startPendingIntentDismissingKeyguard(android.app.PendingIntent)>
<com.android.server.input.InputManagerService.WindowManagerCallbacks: void notifyLidSwitchChanged(long,boolean)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void setNeedsInput(boolean)>
<com.android.systemui.statusbar.policy.KeyButtonView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.photos.BitmapRegionTileSource.UriBitmapSource: void <init>(android.content.Context,android.net.Uri,int)>
<com.android.server.ConnectivityService: boolean isAlwaysOnVpnPackageSupported(int,java.lang.String)>
<com.android.server.pm.Installer: void createUserData(java.lang.String,int,int,int)>
<com.android.systemui.statusbar.phone.StatusBarIconController: void removeIcon(java.lang.String,int)>
<com.android.server.input.InputManagerService.WindowManagerCallbacks: void notifyCameraLensCoverSwitchChanged(long,boolean)>
<com.android.server.pm.dex.PackageDexUsage.PackageUseInfo: boolean isAnyCodePathUsedByOtherApps()>
<android.os.IStatsManagerService: void setBroadcastSubscriber(long,long,android.app.PendingIntent,java.lang.String)>
<com.android.server.media.MediaRoute2Provider.Callback: void onRequestFailed(com.android.server.media.MediaRoute2Provider,long,int)>
<com.android.server.pm.PackageManagerService.Injector: android.os.storage.StorageManagerInternal getStorageManagerInternal()>
<android.widget.TextViewPrecomputedTextPerfTest: void testNewLayout_PrecomputedText_Selectable()>
<com.android.systemui.keyguard.KeyguardViewMediator: void onScreenTurnedOn()>
<com.android.systemui.util.concurrency.ConcurrencyModule: com.android.systemui.util.concurrency.RepeatableExecutor provideRepeatableExecutor(com.android.systemui.util.concurrency.DelayableExecutor)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void onAppearAnimationFinished(boolean)>
<com.android.systemui.doze.DozeUi: void transitionTo(com.android.systemui.doze.DozeMachine.State,com.android.systemui.doze.DozeMachine.State)>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.plugins.DarkIconDispatcher provideDarkIconDispatcher(com.android.systemui.statusbar.phone.DarkIconDispatcherImpl)>
<com.android.server.pm.PackageKeySetData: void setAliases(java.util.Map)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getTaskAffinity()>
<com.android.server.contentcapture.ContentCaptureManagerService: void <init>(android.content.Context)>
<com.android.server.biometrics.fingerprint.FingerprintConstants: java.lang.String tagAuthToken()>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: void updatePublicMode()>
<com.android.sharedstoragebackup.SharedStorageAgent: void onCreate()>
<com.android.systemui.assist.ui.PerimeterPathGuide: float getBottomCornerRadiusPx()>
<com.android.systemui.statusbar.NotificationUiAdjustment: com.android.systemui.statusbar.NotificationUiAdjustment extractFromNotificationEntry(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.infra.FrameworkResourcesServiceNameResolver: java.lang.String toString()>
<android.app.ResourcesManagerPerfTest: void applyConfigurationToResourcesLocked()>
<com.android.server.NetworkManagementService: void removeVpnUidRanges(int,android.net.UidRange[])>
<com.android.settingslib.TwoTargetPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.policy.WindowManagerPolicy: boolean isScreenOn()>
<com.android.systemui.shared.tracing.FrameProtoTracer: void scheduleFrameUpdate()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setForceUnlocked(boolean)>
<com.android.systemui.statusbar.policy.WifiSignalController: void handleBroadcast(android.content.Intent)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: boolean isNetworkTemporaryDisabled()>
<com.android.server.pm.IntentFilterVerificationState: boolean setVerifierResponse(int,int)>
<com.android.nfc_extras.NfcAdapterExtras.CardEmulationRoute: void <init>(int,com.android.nfc_extras.NfcExecutionEnvironment)>
<com.android.systemui.screenrecord.RecordingController: boolean isRecording()>
<com.android.settingslib.wifi.AccessPoint: boolean update(android.net.wifi.WifiConfiguration,android.net.wifi.WifiInfo,android.net.NetworkInfo)>
<com.android.systemui.pip.tv.PipMenuActivity: void onPipEntered(java.lang.String)>
<android.net.wifi.WifiInfo: double getSuccessfulRxPacketsPerSecond()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getBackupAgentName()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalCcaBusyFreqTimeMillis()>
<android.net.wifi.p2p.nsd.WifiP2pServiceInfo: int describeContents()>
<com.android.systemui.statusbar.phone.ScrimController: void updateScrims()>
<com.android.settingslib.development.AbstractEnableAdbPreferenceController: void <init>(android.content.Context)>
<com.android.systemui.util.sensors.ThresholdSensor.Listener: void onThresholdCrossed(com.android.systemui.util.sensors.ThresholdSensor.ThresholdSensorEvent)>
<com.android.systemui.pip.PipUI: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean onTouchEvent(android.view.MotionEvent)>
<javax.obex.ClientOperation: void close()>
<com.android.systemui.shared.system.TaskStackChangeListener: void onTaskDisplayChanged(int,int)>
<com.android.systemui.pip.phone.PipMenuActivity: void onUserLeaveHint()>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifLifetimeExtender: java.lang.String getName()>
<com.android.commands.incident.Section: void run(java.io.InputStream,java.io.OutputStream,java.util.List)>
<com.android.server.infra.FrameworkResourcesServiceNameResolver: java.lang.String getDefaultServiceName(int)>
<android.net.wifi.WifiNetworkSpecifier: java.lang.String toString()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAffiliatedUser()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: boolean shouldShowMenu()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void updateSpeedBumpIndex()>
<com.android.uiautomator.core.UiObject: boolean setText(java.lang.String)>
<com.android.systemui.statusbar.NotificationListener: void onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap,int)>
<com.android.settingslib.development.SystemPropPoker: void blockPokes()>
<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()>
<com.android.server.accessibility.AccessibilityManagerService: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
<com.android.server.ConnectivityService.Dependencies: com.android.server.NetIdManager makeNetIdManager()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getAutoTimeRequired()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean getLastNavBarVisible()>
<com.android.settingslib.core.lifecycle.ObservableDialogFragment: void onCreate(android.os.Bundle)>
<com.android.server.voiceinteraction.DatabaseHelper: boolean deleteKeyphraseSoundModel(int,int,java.lang.String)>
<com.android.systemui.statusbar.CommandQueue: void showRecentApps(boolean)>
<com.android.media.remotedisplay.RemoteDisplayProvider: android.app.PendingIntent getSettingsPendingIntent()>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)>
<com.android.systemui.statusbar.policy.KeyButtonView: void loadAsync(android.graphics.drawable.Icon)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void startAssist(android.os.Bundle)>
<com.android.server.SystemService: void onStartUser(android.content.pm.UserInfo)>
<com.android.settingslib.media.InfoMediaDevice: android.graphics.drawable.Drawable getIconWithoutBackground()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getLogo()>
<com.android.systemui.statusbar.phone.PanelBar: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.qs.external.CustomTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.State,java.lang.Object)>
<android.database.SQLiteDatabasePerfTest: void testInsert()>
<com.android.server.slice.SliceManagerService.Lifecycle: void onUnlockUser(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean approveCaCert(java.lang.String,int,boolean)>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void onPanelCollapsed()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isBackupInForeground()>
<com.android.systemui.statusbar.phone.NavigationBarEdgePanel: boolean hasOverlappingRendering()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: com.android.systemui.statusbar.phone.HeadsUpTouchHelper.Callback getHeadsUpCallback()>
<com.android.server.infra.AbstractMasterSystemService: android.os.UserManagerInternal getUserManagerInternal()>
<android.net.wifi.aware.WifiAwareNetworkInfo: void <init>(java.net.Inet6Address)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: void unregisterClientProfileInternal(int)>
<com.android.systemui.qs.DataUsageGraph: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.gallery3d.glrenderer.GLES20IdImpl: void glGenBuffers(int,int[],int)>
<com.android.settingslib.wifi.AccessPoint: void setListener(com.android.settingslib.wifi.AccessPoint.AccessPointListener)>
<com.android.location.provider.GeocodeProvider: java.lang.String onGetFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>
<com.android.server.pm.AppsFilter: com.android.server.pm.AppsFilter create(android.content.pm.PackageManagerInternal,com.android.server.pm.PackageManagerService.Injector)>
<com.android.soundpicker.RingtonePickerActivity: void onPrepareListView(android.widget.ListView)>
<com.android.egg.neko.Cat: void logShare(android.content.Context)>
<com.android.server.statusbar.StatusBarManagerService: void onBiometricAuthenticated()>
<android.net.wifi.rtt.ResponderLocation: boolean getRetransmitPolicyIndication()>
<com.android.server.media.MediaSessionRecordImpl: void adjustVolume(java.lang.String,java.lang.String,int,int,boolean,int,int,boolean)>
<com.android.server.NetworkManagementService: java.lang.String[] listInterfaces()>
<com.android.settingslib.AppItem: int describeContents()>
<com.android.systemui.statusbar.policy.Clock: void disable(int,int,int,boolean)>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger.EditorLogger: android.content.SharedPreferences.Editor putLong(java.lang.String,long)>
<com.android.systemui.ExpandHelper: void onlyObserveMovements(boolean)>
<com.android.systemui.statusbar.notification.row.StackScrollerDecorView: long performRemoveAnimation(long,long,float,boolean,float,java.lang.Runnable,android.animation.AnimatorListenerAdapter)>
<com.android.systemui.qs.AlphaControlledSignalTileView.AlphaControlledSlashImageView: void setFinalImageTintList(android.content.res.ColorStateList)>
<com.android.server.pm.PackageManagerService: void sendSessionCommitBroadcast(android.content.pm.PackageInstaller.SessionInfo,int)>
<com.android.keyguard.KeyguardAbsKeyInputView: void setPasswordEntryInputEnabled(boolean)>
<com.android.systemui.statusbar.phone.DozeParameters: int getPickupVibrationThreshold()>
<com.android.systemui.biometrics.AuthBiometricView: void handleResetAfterError()>
<com.android.printspooler.ui.PrintActivity: void onStart()>
<com.android.systemui.pip.PipUI: void showPictureInPictureMenu()>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void onDeviceBondStateChanged(com.android.settingslib.bluetooth.CachedBluetoothDevice,int)>
<com.android.soundpicker.RingtonePickerActivity: void onDestroy()>
<com.android.systemui.statusbar.phone.StatusBar: void dismissKeyboardShortcutsMenu()>
<com.android.photos.views.TiledImageView: void destroy()>
<com.android.server.tv.tunerresourcemanager.ClientProfile.Builder: com.android.server.tv.tunerresourcemanager.ClientProfile.Builder tvInputSessionId(java.lang.String)>
<android.net.ip.IpClientManager: boolean startProvisioning(android.net.shared.ProvisioningConfiguration)>
<com.android.systemui.statusbar.notification.NotificationDozeHelper: void startIntensityAnimation(android.animation.ValueAnimator.AnimatorUpdateListener,boolean,long,android.animation.Animator.AnimatorListener)>
<com.android.systemui.qs.QSContainerImpl: void onLayout(boolean,int,int,int,int)>
<com.android.systemui.keyguard.WorkLockActivity: void onBackPressed()>
<com.android.systemui.qs.tiles.CellularTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.SignalState,java.lang.Object)>
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsTethering(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setClipToActualHeight(boolean)>
<com.android.systemui.statusbar.phone.PanelViewController: boolean isFullyCollapsed()>
<com.android.systemui.statusbar.notification.stack.AmbientState: float getHideAmount()>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean shouldClipToActualHeight()>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void updateNotificationIcons()>
<com.android.systemui.keyguard.WakefulnessLifecycle.Observer: void onFinishedWakingUp()>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.policy.NextAlarmController provideNextAlarmController(com.android.systemui.statusbar.policy.NextAlarmControllerImpl)>
<com.android.networkstack.tethering.EntitlementManager: void startProvisioningIfNeeded(int,boolean)>
<com.android.server.DeviceIdleController: int[] getAppIdWhitelistInternal()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setUserSetupComplete(boolean)>
<android.app.OverlayManagerPerfTest: void setEnabledWarmCache()>
<com.android.server.biometrics.iris.IrisAuthenticator: boolean hasEnrolledTemplates(int,java.lang.String)>
<com.android.settingslib.drawable.UserIconDrawable: void setAlpha(int)>
<com.android.server.pm.PackageInstallerSession: void commit(android.content.IntentSender,boolean)>
<com.android.packageinstaller.PackageInstallerActivity.SimpleErrorDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.networkstack.tethering.EntitlementManager: void stopProvisioningIfNeeded(int)>
<com.android.server.pm.PackageManagerService: boolean addPermission(android.content.pm.PermissionInfo)>
<com.android.server.pm.CrossProfileAppsServiceImpl: boolean canRequestInteractAcrossProfiles(java.lang.String)>
<com.android.server.policy.WindowManagerPolicy.WindowState: android.graphics.Rect getGivenVisibleInsetsLw()>
<com.android.systemui.qs.QSContainerImpl: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.policy.KeyguardStateController.Callback: void onKeyguardFadingAwayChanged()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationMediaTemplateViewWrapper: boolean isDimmable()>
<com.android.server.pm.dex.PackageDexUsage.PackageUseInfo: java.util.Map getDexUseInfoMap()>
<com.android.photos.views.BlockingGLTextureView: void destroy()>
<com.android.systemui.statusbar.phone.ScreenPinningNotify: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: boolean isDrawingAppearAnimation()>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean isInputMethodWindow()>
<com.android.systemui.statusbar.phone.PanelViewController: void startExpandMotion(float,float,boolean,float)>
<com.android.shell.HeapDumpProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<com.android.settingslib.widget.BarChartPreference: void initializeBarChart(com.android.settingslib.widget.BarChartInfo)>
<com.android.systemui.qs.tiles.DataSaverTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.statusbar.policy.NetworkController)>
<com.android.settingslib.bluetooth.PbapServerProfile: void finalize()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setFocusOnVisibilityChange()>
<com.android.server.pm.permission.PermissionManagerServiceInternal.PackagesProvider: java.lang.String[] getPackages(int)>
<com.android.server.role.RoleUserState: boolean addRoleName(java.lang.String)>
<com.android.settingslib.bluetooth.LocalBluetoothProfileManager.ServiceListener: void onServiceConnected()>
<com.android.settingslib.wifi.TestAccessPointBuilder: com.android.settingslib.wifi.TestAccessPointBuilder setLevel(int)>
<com.android.networkstack.tethering.BpfCoordinator: void startPolling()>
<com.android.settingslib.bluetooth.HearingAidProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)>
<android.net.NetworkStackClient.NetworkStackCallback: void onNetworkStackConnected(android.net.INetworkStackConnector)>
<com.android.server.search.Searchables: java.util.ArrayList getGlobalSearchActivities()>
<com.android.systemui.car.window.OverlayWindowModule: com.android.systemui.car.window.OverlayViewMediator bindBottomNotificationPanelViewMediator(com.android.systemui.car.notification.BottomNotificationPanelViewMediator)>
<com.android.server.NetworkManagementService: void setFirewallUidRule(int,int,int)>
<com.android.systemui.statusbar.policy.AccessibilityController: void <init>(android.content.Context)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean shouldSubtleWindowAnimationsForUnlock()>
<com.android.server.pm.PackageManagerService: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>
<com.android.server.SystemService: void onUnlockUser(android.content.pm.UserInfo)>
<android.net.wifi.WifiInfo: int getTxLinkSpeedMbps()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onUiModeChanged()>
<com.android.systemui.statusbar.notification.row.NotificationContentInflater: void setInflateSynchronously(boolean)>
<com.android.egg.neko.Cat: void setAlpha(int)>
<com.google.android.startop.iorap.AppLaunchEvent.ActivityLaunchFinished: java.lang.String toStringBody()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void closeQsDetail()>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageResolver.ImageCache: android.graphics.drawable.Drawable get(android.net.Uri)>
<com.android.systemui.statusbar.notification.collection.listbuilder.OnBeforeRenderListListener: void onBeforeRenderList(java.util.List)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSignedWithPlatformKey(boolean)>
<com.android.server.BinderCallsStatsService: void systemReady(android.content.Context)>
<com.android.systemui.qs.external.TileServices: void onShowDialog(android.os.IBinder)>
<com.android.printspooler.model.PageContentRepository: void <init>(android.content.Context)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: void setLockscreenPublicMode(boolean,int)>
<com.android.systemui.dagger.DefaultServiceBinder: android.app.Service bindRecordingService(com.android.systemui.screenrecord.RecordingService)>
<com.android.server.policy.PermissionPolicyService: void onStopUser(int)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: boolean isDismissing()>
<com.android.server.biometrics.fingerprint.FingerprintService: long getHalDeviceId()>
<com.android.systemui.statusbar.phone.EdgeBackGestureHandler: void onDisplayChanged(int)>
<com.android.systemui.doze.DozeScreenBrightness: void onAccuracyChanged(android.hardware.Sensor,int)>
<com.android.systemui.statusbar.notification.collection.NotifPipeline: void addPromoter(com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.NotifPromoter)>
<com.android.server.inputmethod.InputMethodManagerInternal: boolean transferTouchFocusToImeWindow(android.os.IBinder,int)>
<com.android.server.security.VerityUtils: com.android.server.security.VerityUtils.SetupResult generateApkVeritySetupData(java.lang.String)>
<com.android.systemui.util.leak.GarbageMonitor.MemoryTile: void handleSetListening(boolean)>
<com.android.settingslib.NetworkPolicyEditor: android.net.NetworkPolicy getOrCreatePolicy(android.net.NetworkTemplate)>
<com.android.systemui.statusbar.notification.row.NotificationContentInflater: void bindContent(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,int,com.android.systemui.statusbar.notification.row.NotificationRowContentBinder.BindParams,boolean,com.android.systemui.statusbar.notification.row.NotificationRowContentBinder.InflationCallback)>
<com.android.systemui.statusbar.phone.NotificationGroupManager.OnGroupChangeListener: void onGroupSuppressionChanged(com.android.systemui.statusbar.phone.NotificationGroupManager.NotificationGroup,boolean)>
<com.android.systemui.statusbar.notification.stack.SectionHeaderView: android.view.View findContentView()>
<com.android.systemui.recents.RecentsOnboarding: void onNavigationModeChanged(int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: float getOpeningHeight()>
<com.android.powermodel.component.GpsProfile.Builder: void setOnMa(float)>
<com.android.systemui.statusbar.policy.SmartReplyView: com.android.systemui.statusbar.policy.SmartReplyView inflate(android.content.Context)>
<com.android.systemui.statusbar.StatusBarMobileView: com.android.systemui.statusbar.StatusBarMobileView fromContext(android.content.Context,java.lang.String)>
<com.android.systemui.keyguard.KeyguardViewMediator: void userActivity()>
<com.android.server.infra.AbstractMasterSystemService.Visitor: void visit(java.lang.Object)>
<com.android.server.usb.descriptors.tree.UsbDescriptorsConfigNode: void addInterfaceNode(com.android.server.usb.descriptors.tree.UsbDescriptorsInterfaceNode)>
<com.android.server.soundtrigger.SoundTriggerService.LocalSoundTriggerService: int unloadKeyphraseModel(int)>
<com.android.systemui.statusbar.AlertingNotificationManager: boolean isAlerting(java.lang.String)>
<com.android.systemui.statusbar.policy.DeviceProvisionedControllerImpl: void <init>(android.content.Context,android.os.Handler,com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.systemui.statusbar.NotificationListener: void onNotificationRankingUpdate(android.service.notification.NotificationListenerService.RankingMap)>
<com.android.systemui.shared.recents.utilities.AppTrace: void endSection()>
<com.android.packageinstaller.PackageInstallerActivity: void onCreate(android.os.Bundle)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: long getDiscoveryEndMillis()>
<com.android.server.display.DisplayModeDirector.BrightnessObserver: void setLoggingEnabled(boolean)>
<com.android.server.statusbar.StatusBarManagerService: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean,boolean)>
<com.android.wallpapercropper.WallpaperCropActivity.BitmapCropTask: void <init>(android.content.Context,android.net.Uri,android.graphics.RectF,int,int,int,boolean,boolean,java.lang.Runnable)>
<com.android.printspooler.renderer.IPdfRenderer: int openDocument(android.os.ParcelFileDescriptor)>
<android.net.wifi.WifiScanner: void setScanningEnabled(boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineViewController: void <init>(com.android.systemui.statusbar.notification.row.ExpandableOutlineView,com.android.systemui.statusbar.notification.row.ExpandableViewController)>
<com.android.keyguard.KeyguardSliceView.Row: boolean hasOverlappingRendering()>
<com.android.settingslib.deviceinfo.StorageVolumeProvider: long getTotalBytes(android.app.usage.StorageStatsManager,android.os.storage.VolumeInfo)>
<com.android.server.contentcapture.ContentCaptureMetricsLogger: void writeServiceEvent(int,java.lang.String,java.lang.String)>
<javax.obex.HeaderSet: void createAuthenticationChallenge(java.lang.String,boolean,boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdminActive(android.content.ComponentName,int)>
<android.net.wifi.EasyConnectStatusCallback: void onFailure(int,java.lang.String,android.util.SparseArray,int[])>
<com.android.settingslib.animation.AppearAnimationUtils: void startAnimation(android.view.View[],java.lang.Runnable)>
<com.android.server.input.InputManagerService.WindowManagerCallbacks: int getPointerLayer()>
<com.android.server.pm.permission.PermissionSettings: void readPermissions(android.util.ArrayMap,org.xmlpull.v1.XmlPullParser)>
<com.android.location.provider.ActivityRecognitionProvider.Sink: void onActivityChanged(com.android.location.provider.ActivityChangedEvent)>
<android.net.wifi.IWifiManager: boolean stopSoftAp()>
<com.android.systemui.qs.tiles.WifiTile.WifiDetailAdapter: int getMetricsCategory()>
<com.android.systemui.statusbar.phone.ScreenPinningNotify: void showEscapeToast(boolean,boolean)>
<com.android.systemui.statusbar.KeyboardShortcutsReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.printservice.recommendation.plugin.hp.ServiceRecommendationPlugin: void start(com.android.printservice.recommendation.PrintServicePlugin.PrinterDiscoveryCallback)>
<com.android.settingslib.core.lifecycle.ObservableActivity: void onCreate(android.os.Bundle)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName)>
<com.android.systemui.colorextraction.SysuiColorExtractor: com.android.internal.colorextraction.ColorExtractor.GradientColors getColors(int,int)>
<com.android.media.tv.remoteprovider.TvRemoteProvider: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void setRecentlyAudiblyAlerted(boolean)>
<android.net.wifi.p2p.WifiP2pManager.Channel: void finalize()>
<com.android.systemui.statusbar.notification.NotificationDozeHelper: void fadeGrayscale(android.widget.ImageView,boolean,long)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: boolean goingToFullShade()>
<com.android.systemui.statusbar.policy.EmergencyCryptkeeperText: void <init>(android.content.Context,android.util.AttributeSet)>
<android.app.ResourcesManagerPerfTest: void getResourcesUncompressedUncached()>
<com.android.server.SerialService: java.lang.String[] getSerialPorts()>
<com.android.server.accessibility.MagnificationController: boolean isRegistered(int)>
<com.android.server.signedconfig.SignatureVerifier: boolean verifySignature(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.policy.UserSwitcherController.UserRecord: void <init>(android.content.pm.UserInfo,android.graphics.Bitmap,boolean,boolean,boolean,boolean,boolean)>
<com.android.systemui.statusbar.notification.collection.listbuilder.PipelineState: void setState(int)>
<com.android.systemui.classifier.FalsingManagerFake: void setQsExpanded(boolean)>
<com.android.systemui.screenrecord.ScreenRecordingAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_missingInteractAcrossUsersAndFull_throwsSecurityException()>
<com.android.server.DynamicSystemService: boolean isInstalled()>
<com.android.settingslib.core.lifecycle.ObservableFragment: void onCreate(android.os.Bundle)>
<com.android.systemui.statusbar.KeyboardShortcutKeysLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void invalidateKeysForUserIdOnCustomScreenLock(int)>
<com.android.keyguard.KeyguardSliceView.Row: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.statusbar.CommandQueue: void showToast(int,java.lang.String,android.os.IBinder,java.lang.CharSequence,android.os.IBinder,int,android.app.ITransientNotificationCallback)>
<com.android.systemui.statusbar.phone.ScrimController: void setLaunchingAffordanceWithPreview(boolean)>
<com.android.systemui.tuner.TunerSwitch: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.ConnectivityService: android.net.Network getActiveNetwork()>
<com.android.server.accounts.AccountManagerService: java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)>
<com.android.server.pm.Installer: void <init>(android.content.Context)>
<android.perftests.utils.ManualBenchmarkState: void sendFullStatusReport(android.app.Instrumentation,java.lang.String)>
<android.text.StaticLayoutPerfTest: void testCreate_PrecomputedText_NoStyled_Greedy_NoHyphenation_DirDifferent()>
<com.android.server.policy.BurnInProtectionHelper: void onAnimationEnd(android.animation.Animator)>
<com.android.systemui.statusbar.KeyboardShortcutKeysLayout: com.android.systemui.statusbar.KeyboardShortcutKeysLayout.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams)>
<com.android.startop.colorchanging.ExampleInstrumentedTest: void useAppContext()>
<com.android.systemui.statusbar.ScrimView: boolean hasOverlappingRendering()>
<com.android.server.biometrics.face.FaceConstants: java.lang.String tagEnumerateStartError()>
<android.net.wifi.IWifiManager: void unregisterSoftApCallback(int)>
<com.android.soundpicker.RingtonePickerActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>
<com.android.server.pm.UserManagerService: boolean hasBadge(int)>
<com.android.systemui.statusbar.policy.HeadsUpManager: void <init>(android.content.Context)>
<com.android.gallery3d.glrenderer.BitmapTexture: void onFreeBitmap(android.graphics.Bitmap)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void setDefaultDialerProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.DefaultDialerProvider)>
<com.android.server.appop.AudioRestrictionManager: boolean dump(java.io.PrintWriter)>
<com.android.settingslib.drawer.TileUtils: android.util.Pair getIconFromUri(android.content.Context,java.lang.String,android.net.Uri,java.util.Map)>
<com.android.server.SystemConfigService: void onStart()>
<com.android.server.biometrics.ClientMonitor: int start()>
<com.android.server.accessibility.SystemActionPerformer.SystemActionsChangedListener: void onSystemActionsChanged()>
<com.android.systemui.pip.tv.PipManager: void <init>(android.content.Context,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.pip.PipBoundsHandler,com.android.systemui.pip.PipTaskOrganizer,com.android.systemui.pip.PipSurfaceTransactionHelper,com.android.systemui.stackdivider.Divider)>
<com.android.settingslib.drawer.SwitchController: java.lang.String getErrorMessage(boolean)>
<com.android.systemui.statusbar.OperatorNameView: void onDarkChanged(android.graphics.Rect,float,int)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void setUserSetupComplete(boolean)>
<com.android.server.NetworkScoreService.DispatchingContentObserver: void <init>(android.content.Context,android.os.Handler)>
<com.android.server.voiceinteraction.VoiceInteractionManagerService: void <init>(android.content.Context)>
<com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback: void startIntentSender(android.content.IntentSender,android.content.Intent)>
<com.android.systemui.assist.ui.InvocationLightsView: void onDraw(android.graphics.Canvas)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onAffordanceSwipingStarted(boolean)>
<com.android.settingslib.applications.ApplicationsState.AppEntry: void ensureLabelDescriptionLocked(android.content.Context)>
<com.android.wallpapercropper.WallpaperCropActivity: int getRotationFromExif(java.lang.String)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: void setVisible(boolean)>
<android.net.wifi.WifiManager: void queryPasspointIcon(long,java.lang.String)>
<android.net.wifi.p2p.WifiP2pDevice: void <init>(android.net.wifi.p2p.WifiP2pDevice)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setGroupManager(com.android.systemui.statusbar.phone.NotificationGroupManager)>
<com.android.systemui.qs.QSPanel.QSTileLayout: void addTile(com.android.systemui.qs.QSPanel.TileRecord)>
<com.example.android.networkusage.SettingsActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)>
<com.android.systemui.statusbar.notification.VisualStabilityManager: void notifyViewAddition(android.view.View)>
<com.android.uiautomator.testrunner.UiAutomatorTestCase: void setUp()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: int getPlatformKeyGenerationId(int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void onQsExpansionStarted(int)>
<com.android.systemui.volume.VolumeDialogControllerImpl: void setAudioManagerStreamVolume(int,int,int)>
<com.android.server.stats.pull.ProcfsMemoryUtil: com.android.server.stats.pull.ProcfsMemoryUtil.MemorySnapshot readMemorySnapshotFromProcfs(int)>
<com.android.powermodel.component.ModemProfile: float[] getTxMa()>
<com.android.keyguard.clock.ClockOptionsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<com.android.powermodel.ActivityReport: com.google.common.collect.ImmutableList getRegularApps()>
<com.android.settingslib.development.AbstractLogpersistPreferenceController: boolean isAvailable()>
<com.android.server.policy.WindowManagerPolicy: void notifyCameraLensCoverSwitchChanged(long,boolean)>
<android.net.wifi.WifiNetworkSuggestion: void <init>(android.net.wifi.WifiConfiguration,android.net.wifi.hotspot2.PasspointConfiguration,boolean,boolean,boolean,boolean)>
<com.android.server.twilight.TwilightService: void onBootPhase(int)>
<com.android.systemui.bubbles.BubbleExpandedView: void getManageButtonBoundsOnScreen(android.graphics.Rect)>
<com.android.systemui.statusbar.phone.PanelViewController: void onUnlockHintFinished()>
<com.android.systemui.statusbar.RemoteInputController: boolean isRemoteInputActive(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.display.HysteresisLevels: float getDarkeningThreshold(float)>
<com.android.systemui.shared.recents.model.Task: com.android.systemui.shared.recents.model.Task from(com.android.systemui.shared.recents.model.Task.TaskKey,android.app.TaskInfo,boolean)>
<android.net.wifi.rtt.RangingResult: android.net.wifi.rtt.ResponderLocation getUnverifiedResponderLocation()>
<com.android.server.autofill.RemoteFillService.FillServiceCallbacks: void onFillRequestFailure(int,java.lang.CharSequence)>
<com.android.server.media.MediaSessionService: void <init>(android.content.Context)>
<com.android.server.storage.StorageUserConnection: void notifyVolumeStateChanged(java.lang.String,android.os.storage.StorageVolume)>
<com.android.systemui.volume.SafetyWarningDialog: void onClick(android.content.DialogInterface,int)>
<com.android.systemui.statusbar.policy.ExtensionController.Extension: java.lang.Object reload()>
<com.android.commands.uiautomator.EventsCommand: void run(java.lang.String[])>
<com.android.keyguard.KeyguardUpdateMonitor: void onKeyguardVisibilityChanged(boolean)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: boolean isEnabled()>
<com.android.server.contentcapture.ContentCaptureManagerInternal: android.content.ContentCaptureOptions getOptionsForPackage(int,java.lang.String)>
<com.android.systemui.statusbar.KeyguardAffordanceView: void onLayout(boolean,int,int,int,int)>
<com.android.systemui.statusbar.notification.row.ButtonLinearLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.row.NotificationInfo: void onFinishedClosing()>
<android.net.wifi.rtt.RangingResult: void <init>(int,android.net.MacAddress,int,int,int,int,int,byte[],byte[],android.net.wifi.rtt.ResponderLocation,long)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceSettings: boolean setLoggingEnabled(boolean)>
<com.android.settingslib.core.lifecycle.ObservableDialogFragment: void onAttach(android.content.Context)>
<com.android.systemui.statusbar.phone.StatusBar: boolean shouldUnlockOnMenuPressed()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: void switchSubDeviceContent()>
<com.android.printspooler.widget.PrintContentView: void onClick(android.view.View)>
<com.android.systemui.statusbar.phone.StatusBar: void setWindowState(int,int,int)>
<com.android.systemui.statusbar.phone.StatusBarWindowController: void refreshStatusBarHeight()>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setNativeLibraryDir(java.lang.String)>
<com.android.systemui.qs.external.TileLifecycleManager: void flushMessagesAndUnbind()>
<com.android.server.pm.dex.PackageDexUsage.DexUseInfo: boolean isUsedByOtherApps()>
<com.android.settingslib.graph.BatteryMeterDrawableBase: void setPowerSaveAsColorError(boolean)>
<javax.microedition.khronos.opengles.GL10: void glClearDepthx(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean isPinnedHeadsUp(android.view.View)>
<com.android.keyguard.KeyguardSliceView: void onFinishInflate()>
<com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProviderImpl: boolean shouldBubbleUp(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.gallery3d.exif.Rational: void <init>(com.android.gallery3d.exif.Rational)>
<android.net.wifi.WifiScanner.ScanData: void <init>(android.net.wifi.WifiScanner.ScanData)>
<com.android.server.usb.descriptors.UsbACTerminal: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.server.pm.PackageInstallerService: android.content.pm.PackageInstaller.SessionInfo getSessionInfo(int)>
<com.android.systemui.tuner.ShortcutParser: java.util.List getShortcuts()>
<android.net.wifi.IWifiManager: java.util.List getScanResults(java.lang.String,java.lang.String)>
<com.android.systemui.qs.tileimpl.QSTileImpl: com.android.systemui.plugins.qs.DetailAdapter createDetailAdapter()>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.FactoryResetProtectionPolicy getFactoryResetProtectionPolicy(android.content.ComponentName)>
<com.android.server.timezone.TimeZoneUpdateIdler: void unschedule(android.content.Context)>
<com.android.systemui.qs.QSPanel: void updateMediaHostContentMargins()>
<com.android.systemui.shared.plugins.PluginManagerImpl: java.lang.String[] getWhitelistedPlugins()>
<com.android.systemui.plugins.NavigationEdgeBackPlugin.BackCallback: void cancelBack()>
<com.android.smspush.WapPushManager: boolean verifyData(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)>
<com.android.keyguard.KeyguardSecurityViewFlipper: void showMessage(java.lang.CharSequence,android.content.res.ColorStateList)>
<com.android.statementservice.retriever.AbstractAsset: java.lang.String toJson()>
<com.android.server.SystemService: void onUnlockUser(int)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setNotificationShadeView(android.view.ViewGroup)>
<com.android.systemui.ForegroundServicesUserState: void addImportantNotification(java.lang.String,java.lang.String)>
<com.android.systemui.Prefs: int getInt(android.content.Context,java.lang.String,int)>
<com.android.systemui.pip.tv.PipControlButtonView: void onFinishInflate()>
<com.android.systemui.globalactions.GlobalActionsLayout: void addToListView(android.view.View,boolean)>
<com.android.networkstack.tethering.BpfCoordinator: void tetherOffloadRuleUpdate(android.net.ip.IpServer,int)>
<android.net.wifi.hotspot2.pps.Credential: void writeToParcel(android.os.Parcel,int)>
<com.android.server.pm.parsing.pkg.PackageImpl: boolean isOdm()>
<android.net.wifi.WifiInfo: java.lang.String getPasspointUniqueId()>
<com.android.systemui.shared.system.PinnedStackListenerForwarder: void onActionsChanged(android.content.pm.ParceledListSlice)>
<com.android.server.usb.descriptors.report.UsbStrings: java.lang.String getDescriptorName(byte)>
<android.net.wifi.aware.TlvBufferUtils.TlvConstructor: android.net.wifi.aware.TlvBufferUtils.TlvConstructor putRawByte(byte)>
<android.content.pm.PackageManagerInternal: void pruneCachedApksInApex(java.util.List)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSeInfo(java.lang.String)>
<com.android.systemui.statusbar.CastDrawable: boolean canApplyTheme()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: com.android.systemui.statusbar.notification.row.ExpandableView getViewBeforeView(com.android.systemui.statusbar.notification.row.ExpandableView)>
<com.android.server.TelephonyRegistry: void notifyDataConnectionForSubscriber(int,int,int,android.telephony.PreciseDataConnectionState)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeEnablerManagerCompat: boolean onPreferenceChange(androidx.preference.Preference,java.lang.Object)>
<com.android.server.recoverysystem.RecoverySystemShellCommand: int onCommand(java.lang.String)>
<com.android.systemui.plugins.statusbar.StatusBarStateController: boolean isPulsing()>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper.Callback: void onSwipingAborted()>
<android.os.StrictModeTest: void timeVmViolationNoStrictMode()>
<com.android.providers.settings.SettingsBackupAgent: void onRestore(android.app.backup.BackupDataInput,long,android.os.ParcelFileDescriptor,java.util.Set)>
<com.android.server.pm.PackageManagerService: java.lang.String getInstallerPackageName(java.lang.String)>
<com.android.server.slice.SliceClientPermissions.SliceAuthority: boolean hasPermission(java.util.List)>
<com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry: void removeAutoRemovalCallbacks()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void applyTint(android.view.View,int)>
<android.net.ip.IpClientUtil: void makeIpClient(android.content.Context,java.lang.String,android.net.ip.IpClientCallbacks)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: void transformTo(com.android.systemui.statusbar.TransformableView,float)>
<com.android.settingslib.bluetooth.CachedBluetoothDeviceManager: void onScanningStateChanged(boolean)>
<com.android.settingslib.accounts.AuthenticatorHelper: boolean containsAccountType(java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>
<com.android.server.accessibility.AccessibilityWindowManager: void startTrackingWindows(int)>
<com.android.printspooler.util.PageRangeUtils: android.print.PageRange[] normalize(android.print.PageRange[])>
<com.android.settingslib.drawer.Tile: int getComponentIcon(android.content.pm.ComponentInfo)>
<com.android.server.adb.AdbDebuggingManager: void disablePairing()>
<com.android.systemui.statusbar.policy.UserSwitcherController: void setResumeUserOnGuestLogout(boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPasswordSufficientAfterProfileUnification(int,int)>
<android.net.TetheringManager: void registerTetheringEventCallback(java.util.concurrent.Executor,android.net.TetheringManager.TetheringEventCallback)>
<com.android.settingslib.graph.SignalDrawable: void setTintList(android.content.res.ColorStateList)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>
<com.android.systemui.media.dialog.MediaOutputGroupDialog: void onCreate(android.os.Bundle)>
<com.android.server.pm.PreferredIntentResolver: android.content.IntentFilter getIntentFilter(com.android.server.pm.PreferredActivity)>
<com.android.systemui.doze.DozeMachine: com.android.systemui.doze.DozeMachine.State getState()>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void onFinishInflate()>
<com.android.systemui.statusbar.phone.StatusBar: boolean interceptMediaKey(android.view.KeyEvent)>
<android.os.ParcelPerfTest: void timeSetDataSize()>
<com.android.systemui.statusbar.phone.KeyguardBouncer: void reset()>
<android.net.wifi.WifiScanner.ScanData: void <init>(int,int,android.net.wifi.ScanResult[])>
<com.android.server.storage.StorageUserConnection: java.util.Set getAllSessionIds()>
<com.android.server.accounts.AccountManagerService: void writeUserDataIntoCacheLocked(com.android.server.accounts.AccountManagerService.UserAccounts,android.accounts.Account,java.lang.String,java.lang.String)>
<com.android.settingslib.core.lifecycle.ObservablePreferenceFragment: void setPreferenceScreen(androidx.preference.PreferenceScreen)>
<com.android.systemui.qs.QSSecurityFooter: void <init>(com.android.systemui.qs.QSPanel,android.content.Context)>
<com.android.server.pm.Installer: void clearAppData(java.lang.String,java.lang.String,int,int,long)>
<com.android.keyguard.KeyguardSecurityView: java.lang.CharSequence getTitle()>
<com.android.systemui.car.navigationbar.ButtonSelectionStateController: void taskChanged(java.util.List)>
<com.android.systemui.qs.PageIndicator: void setNumPages(int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setLaunchTransitionEndRunnable(java.lang.Runnable)>
<com.android.keyguard.KeyguardUpdateMonitor: void onTrustManagedChanged(boolean,int)>
<com.android.systemui.qs.external.TileServiceManager: void calculateBindPriority(long)>
<com.android.systemui.doze.DozeSensors: void setListening(boolean,boolean)>
<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: int getMetricsCategory(java.lang.Object)>
<com.android.server.policy.PhoneWindowManager: void keepScreenOnStartedLw()>
<android.net.wifi.IWifiManager: int removeNetworkSuggestions(java.util.List,java.lang.String)>
<com.android.server.display.DisplayManagerService: void setupSchedulerPolicies()>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isInputRestricted()>
<com.android.settingslib.animation.AppearAnimationUtils: android.view.animation.Interpolator getInterpolator()>
<com.android.keyguard.AlphaOptimizedRelativeLayout: boolean hasOverlappingRendering()>
<android.app.OverlayManagerPerfTest: void setEnabledColdCacheSmallOverlay()>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator translationX(float,float,java.lang.Runnable[])>
<com.android.server.audio.PlaybackActivityMonitor: void unmutePlayersForCall()>
<com.android.server.timezonedetector.TimeZoneDetectorStrategy: void dump(java.io.PrintWriter,java.lang.String[])>
<com.android.settingslib.core.lifecycle.events.OnCreateOptionsMenu: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
<com.android.lock_checker.LockHook: void dump()>
<com.android.settingslib.Utils: boolean isSystemPackage(android.content.res.Resources,android.content.pm.PackageManager,android.content.pm.PackageInfo)>
<com.android.location.provider.ActivityRecognitionProviderClient: void onProviderChanged(boolean,com.android.location.provider.ActivityRecognitionProvider)>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy: void setIsAirplaneMode(com.android.systemui.statusbar.policy.NetworkController.IconState)>
<android.media.MediaParser.OutputConsumer: void onTrackDataFound(int,android.media.MediaParser.TrackData)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: java.util.List getSmartActions()>
<com.android.systemui.statusbar.ScrimView: int getTint()>
<com.android.systemui.DemoMode: void dispatchDemoCommand(java.lang.String,android.os.Bundle)>
<com.android.systemui.classifier.DurationCountEvaluator: float evaluate(float)>
<com.android.systemui.statusbar.notification.ImageTransformState: void appear(float,com.android.systemui.statusbar.TransformableView)>
<com.android.settingslib.CustomDialogPreference.CustomPreferenceDialogFragment: void onClick(android.content.DialogInterface,int)>
<com.android.server.policy.WindowManagerPolicy: com.android.server.policy.WindowManagerPolicy.StartingSurface addSplashScreen(android.os.IBinder,int,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,int,android.content.res.Configuration,int)>
<com.android.server.pm.dex.DexoptOptions: boolean isDexoptOnlySharedDex()>
<com.android.systemui.statusbar.phone.KeyguardPreviewContainer: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.pm.dex.DexManager: void notifyPackageInstalled(android.content.pm.PackageInfo,int)>
<com.android.server.pm.PackageSettingBase: boolean overrideNonLocalizedLabelAndIcon(android.content.ComponentName,java.lang.String,java.lang.Integer,int)>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences.OnSharedPreferenceChangeListener)>
<com.android.server.om.OverlayReferenceMapper.Provider: java.lang.String getActorPkg(java.lang.String)>
<com.android.systemui.doze.DozeSensors: java.lang.Boolean isProximityCurrentlyNear()>
<com.android.server.contentcapture.ContentCaptureManagerService: void enforceCallingPermissionForManagement()>
<com.android.server.biometrics.BiometricServiceBase.ServiceListener: void onRemoved(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.statsd.shelltools.Utils: java.lang.String getDefaultDevice(java.util.logging.Logger)>
<com.android.systemui.classifier.FalsingManagerFake: void onNotificationDismissed()>
<com.android.systemui.qs.QSSecurityFooter: boolean hasFooter()>
<com.android.server.pm.permission.BasePermission: boolean dumpPermissionsLPr(java.io.PrintWriter,java.lang.String,java.util.Set,boolean,boolean,com.android.server.pm.DumpState)>
<com.android.server.biometrics.face.FaceAuthenticator: long getAuthenticatorId(int)>
<android.net.ip.IpClientCallbacks: void onProvisioningSuccess(android.net.LinkProperties)>
<com.android.server.pm.PackageManagerService: void clearApplicationProfileData(java.lang.String)>
<com.android.systemui.statusbar.policy.BatteryControllerImpl: void fireBatteryLevelChanged()>
<com.android.server.ExtconUEventObserver: void onUEvent(android.os.UEventObserver.UEvent)>
<com.android.server.pm.UserManagerService: boolean canAddMoreManagedProfiles(int,boolean)>
<com.android.systemui.statusbar.CommandQueue: void dismissKeyboardShortcutsMenu()>
<android.net.wifi.SoftApConfiguration: boolean isHiddenSsid()>
<com.android.systemui.wifi.WifiDebuggingSecondaryUserActivity: void onClick(android.content.DialogInterface,int)>
<com.android.server.policy.WindowManagerPolicy: android.graphics.Rect getFoldedArea()>
<com.android.server.adb.AdbDebuggingManager: int getAdbWirelessPort()>
<com.android.systemui.shared.plugins.PluginManagerImpl: com.android.systemui.plugins.Plugin getOneShotPlugin(java.lang.Class)>
<com.android.systemui.statusbar.phone.StatusBar: void dismissKeyguardThenExecute(com.android.systemui.plugins.ActivityStarter.OnDismissAction,java.lang.Runnable,boolean)>
<com.android.systemui.statusbar.KeyguardIndicationController: void setIndicationArea(android.view.ViewGroup)>
<com.android.server.audio.AudioService: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)>
<android.net.wifi.WifiManager: void restoreSupplicantBackupData(byte[],byte[])>
<android.os.PackageManagerPerfTest: void testGetInstalledPackagesWithFiltering()>
<com.android.systemui.util.concurrency.DelayableExecutor: java.lang.Runnable executeAtTime(java.lang.Runnable,long)>
<com.android.systemui.statusbar.policy.KeyButtonRipple: float getGlowScale()>
<com.android.printspooler.ui.PrintActivity: android.content.Loader onCreateLoader(int,android.os.Bundle)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: com.android.systemui.statusbar.phone.PanelViewController.TouchHandler createTouchHandler()>
<com.android.settingslib.media.MediaManager.MediaDeviceCallback: void onConnectedDeviceChanged(java.lang.String)>
<com.android.location.provider.ActivityRecognitionEvent: long getTimestampNs()>
<android.view.autofill.MyAutofillService: void onFillRequest(android.service.autofill.FillRequest,android.os.CancellationSignal,android.service.autofill.FillCallback)>
<javax.microedition.khronos.opengles.GL10: void glColorMask(boolean,boolean,boolean,boolean)>
<com.android.systemui.statusbar.phone.LockscreenWallpaper.WallpaperDrawable: void setXfermode(android.graphics.Xfermode)>
<com.android.server.audio.RecordingActivityMonitor: void onRecordingConfigurationChanged(int,int,int,int,int,int,boolean,int[],android.media.audiofx.AudioEffect.Descriptor[],android.media.audiofx.AudioEffect.Descriptor[],int,java.lang.String)>
<com.android.server.NetworkScoreService.ScoringServiceConnection: android.net.INetworkRecommendationProvider getRecommendationProvider()>
<com.android.keyguard.AdminSecondaryLockScreenController: void show(android.content.Intent)>
<com.android.server.attention.AttentionManagerService.AttentionCheckCacheBuffer: com.android.server.attention.AttentionManagerService.AttentionCheckCache get(int)>
<com.android.systemui.qs.QSContainerImpl: void updateExpansion(boolean)>
<com.android.systemui.classifier.HumanInteractionClassifier: void onTouchEvent(android.view.MotionEvent)>
<com.android.server.statusbar.StatusBarManagerInternal: void showAssistDisclosure()>
<com.android.server.AnyMotionDetector.Vector3: com.android.server.AnyMotionDetector.Vector3 times(float)>
<com.android.settingslib.schedulesprovider.SchedulesProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<com.android.systemui.qs.tiles.AirplaneModeTile: android.content.Intent getLongClickIntent()>
<com.android.systemui.statusbar.NotificationPresenter: int getMaxNotificationsWhileLocked(boolean)>
<com.android.server.usb.UsbAlsaJackDetector: boolean jackDetectCallback()>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector descriptionContains(java.lang.String)>
<com.android.server.audio.AudioDeviceInventory: boolean isA2dpDeviceConnected(android.bluetooth.BluetoothDevice)>
<com.android.wallpapercropper.CropView: void setTileSource(com.android.photos.views.TiledImageRenderer.TileSource,java.lang.Runnable)>
<com.android.systemui.plugins.ClockPlugin: java.lang.String getTitle()>
<com.android.systemui.pip.phone.PipMediaController.ActionListener: void onMediaActionsChanged(java.util.List)>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: boolean equals(java.lang.Object)>
<com.android.systemui.tuner.BetterListPreference: java.lang.CharSequence getSummary()>
<com.android.server.locksettings.SyntheticPasswordManager: com.android.server.locksettings.SyntheticPasswordManager.AuthenticationResult unwrapPasswordBasedSyntheticPassword(android.service.gatekeeper.IGateKeeperService,long,com.android.internal.widget.LockscreenCredential,int,com.android.internal.widget.ICheckCredentialProgressCallback)>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void updateResources()>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void drawableStateChanged()>
<com.android.systemui.power.PowerUI: void showInattentiveSleepWarning()>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageResolver: void purgeCache()>
<com.android.egg.neko.Cat: android.graphics.drawable.Icon createShortcutIcon(android.content.Context)>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: boolean retainAll(java.util.Collection)>
<com.android.keyguard.KeyguardViewController: void setKeyguardGoingAwayState(boolean)>
<com.android.server.search.Searchables: java.util.ArrayList getSearchablesList()>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int,boolean)>
<com.android.server.pm.UserRestrictionsUtils: boolean canProfileOwnerChange(java.lang.String,int)>
<com.android.server.appop.AppOpsService: void collectNoteOpCallsForValidation(java.lang.String,int,java.lang.String,long)>
<com.android.systemui.statusbar.StatusBarIconView: void setDismissed()>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void onDeviceAdded(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.settingslib.bluetooth.A2dpProfile: boolean isAutoConnectable()>
<com.android.settingslib.CustomEditTextPreference.CustomPreferenceDialogFragment: void onClick(android.content.DialogInterface,int)>
<com.android.commands.sm.Sm: void runSetForceAdoptable()>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setAlpha(float,boolean)>
<com.android.server.media.MediaRouterService: void monitor()>
<com.android.systemui.statusbar.policy.KeyButtonView: void setOnClickListener(android.view.View.OnClickListener)>
<com.android.server.display.AmbientBrightnessStatsTracker: void writeStats(java.io.OutputStream)>
<com.android.uiautomator.core.UiObject: android.graphics.Rect getBounds()>
<com.android.settingslib.bluetooth.BluetoothUtils: int getIntMetaData(android.bluetooth.BluetoothDevice,int)>
<com.android.server.timezone.RulesManagerIntentHelper: void sendTimeZoneOperationStaged()>
<com.android.systemui.car.statusbar.DozeServiceHost: void cancelGentleSleep()>
<com.android.settingslib.media.MediaManager: void stopScan()>
<javax.microedition.khronos.opengles.GL10: void glColorPointer(int,int,int,java.nio.Buffer)>
<com.android.keyguard.KeyguardSliceView.Row: void <init>(android.content.Context)>
<com.android.systemui.qs.QuickQSPanel: com.android.systemui.qs.TileLayout createRegularTileLayout()>
<com.android.keyguard.KeyguardViewController: void setOccluded(boolean,boolean)>
<com.android.printspooler.util.PageRangeUtils: boolean isAllPages(android.print.PageRange[])>
<com.android.systemui.statusbar.notification.stack.AmbientState: java.lang.Runnable getOnPulseHeightChangedListener()>
<com.android.systemui.qs.QSFooterImpl: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.car.window.OverlayViewGlobalStateController: boolean isWindowVisible()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: java.lang.CharSequence getActiveRemoteInputText()>
<com.android.server.slice.SliceClientPermissions: void <init>(com.android.server.slice.SlicePermissionManager.PkgUser,com.android.server.slice.DirtyTracker)>
<com.android.settingslib.bluetooth.A2dpProfile: java.lang.String toString()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void showAppOpsIcons(android.util.ArraySet)>
<com.android.server.usb.descriptors.Usb10ASFormatI: byte getSubframeSize()>
<com.android.settingslib.bluetooth.BluetoothUtils: android.util.Pair getBtDrawableWithDescription(android.content.Context,com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: com.android.systemui.statusbar.StatusBarIconView addIcon(int,java.lang.String,boolean,com.android.internal.statusbar.StatusBarIcon)>
<com.android.server.biometrics.iris.IrisService: boolean hasEnrolledBiometrics(int)>
<com.android.systemui.statusbar.policy.MobileSignalController: void dump(java.io.PrintWriter)>
<com.android.settingslib.bluetooth.LocalBluetoothProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)>
<com.android.server.usb.descriptors.Usb10ACOutputTerminal: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.systemui.bubbles.BubbleStackView: void onLayoutDirectionChanged(int)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void setBluetoothEnabled(boolean)>
<com.android.server.usb.descriptors.Usb20ASFormatIIEx: byte getSidebandProtocol()>
<com.android.systemui.model.SysUiState.SysUiStateCallback: void onSystemUiStateChanged(int)>
<com.android.server.soundtrigger.SoundTriggerDbHelper: void <init>(android.content.Context)>
<com.android.server.accounts.AccountManagerService: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
<com.example.android.networkusage.SettingsActivity: void onPause()>
<com.android.server.display.BrightnessMappingStrategy: android.hardware.display.BrightnessConfiguration getBrightnessConfiguration()>
<android.net.wifi.IWifiManager: boolean isAutoWakeupEnabled()>
<com.android.server.slice.SliceClientPermissions.SliceAuthority: boolean equals(java.lang.Object)>
<com.android.server.tv.UinputBridge: void <init>(android.os.IBinder,java.lang.String,int,int,int)>
<android.net.wifi.WifiEnterpriseConfig: void resetCaCertificate()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void setUsername(java.lang.String)>
<android.net.wifi.p2p.WifiP2pDevice: android.net.wifi.p2p.WifiP2pWfdInfo getWfdInfo()>
<com.android.server.stats.StatsManagerService: void addConfiguration(long,byte[],java.lang.String)>
<com.android.settingslib.bluetooth.PbapServerProfile: int getOrdinal()>
<android.net.wifi.rtt.RangingResult: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.bubbles.BubbleData: void setListener(com.android.systemui.bubbles.BubbleData.Listener)>
<com.android.systemui.classifier.EndPointRatioClassifier: void <init>(com.android.systemui.classifier.ClassifierData)>
<android.os.TracePerfTest: void testEnabled()>
<com.android.systemui.statusbar.NotificationMediaManager: void addCallback(com.android.systemui.statusbar.NotificationMediaManager.MediaListener)>
<com.android.systemui.statusbar.notification.dagger.NotificationsModule: com.android.systemui.statusbar.notification.logging.NotificationLogger provideNotificationLogger(com.android.systemui.statusbar.NotificationListener,java.util.concurrent.Executor,com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.notification.logging.NotificationLogger.ExpansionStateLogger,com.android.systemui.statusbar.notification.logging.NotificationPanelLogger)>
<com.android.systemui.statusbar.policy.AccessPointControllerImpl: void finalize()>
<com.android.providers.settings.SettingsHelper: android.os.LocaleList resolveLocales(android.os.LocaleList,android.os.LocaleList,java.lang.String[])>
<com.android.gallery3d.glrenderer.BasicTexture: int getId()>
<android.app.ResourcesManagerPerfTest: void setUp()>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindThemeOverlayController(com.android.systemui.theme.ThemeOverlayController)>
<android.net.wifi.aware.TlvBufferUtils.TlvIterable: java.util.List toList()>
<com.android.server.audio.AudioService: int setAllowedCapturePolicy(int)>
<com.android.server.protolog.ProtoLogViewerConfigReader: int knownViewerStringsNumber()>
<com.android.systemui.bubbles.BubbleStackView: float getNormalizedXPosition()>
<com.android.server.locksettings.SyntheticPasswordManager: byte[] secureRandom(int)>
<com.android.settingslib.core.lifecycle.ObservableDialogFragment: void onDestroy()>
<com.android.server.appprediction.AppPredictionManagerServiceShellCommand: int onCommand(java.lang.String)>
<com.android.systemui.statusbar.phone.RegionSamplingHelper: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)>
<android.content.pm.PackageManagerInternal: java.util.List getInstalledApplications(int,int,int)>
<com.android.uiautomator.core.UiScrollable: boolean scrollToEnd(int,int)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void multiplyMatrix(float[],int)>
<com.android.settingslib.CustomDialogPreference: void onDialogClosed(boolean)>
<com.android.systemui.statusbar.phone.ContextualButtonGroup: int setButtonVisibility(int,boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void prepareExpansionChanged()>
<com.android.settingslib.drawable.UserIconDrawable: void setTintMode(android.graphics.PorterDuff.Mode)>
<com.android.server.policy.PhoneWindowManager: void unregisterDisplayFoldListener(android.view.IDisplayFoldListener)>
<com.android.server.policy.WindowManagerPolicy: boolean canBeHiddenByKeyguardLw(com.android.server.policy.WindowManagerPolicy.WindowState)>
<com.android.networkstack.tethering.OffloadHardwareInterface: boolean addDownstreamPrefix(java.lang.String,java.lang.String)>
<com.android.systemui.model.SysUiState: void addCallback(com.android.systemui.model.SysUiState.SysUiStateCallback)>
<com.android.systemui.stackdivider.DividerView: android.graphics.Rect getNonMinimizedSplitScreenSecondaryBounds()>
<com.android.systemui.statusbar.phone.UserAvatarView: void <init>(android.content.Context)>
<com.android.server.timedetector.TimeDetectorStrategyImpl: void handleAutoTimeDetectionChanged()>
<com.android.server.om.DumpState: void setPackageName(java.lang.String)>
<com.android.settingslib.core.instrumentation.Instrumentable: int getMetricsCategory()>
<com.android.server.textclassifier.IconsUriHelper: com.android.server.textclassifier.IconsUriHelper newInstanceForTesting(java.util.function.Supplier)>
<com.android.server.usb.UsbPortManager: android.hardware.usb.UsbPort[] getPorts()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setStartUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>
<com.android.systemui.qs.QSFooterImpl: void setExpanded(boolean)>
<com.android.server.infra.ServiceNameResolver: void dumpShort(java.io.PrintWriter)>
<com.android.systemui.classifier.FalsingManagerImpl: void onNotificatonStopDraggingDown()>
<android.media.Controller2Link: void onSessionCommand(int,android.media.Session2Command,android.os.Bundle,android.os.ResultReceiver)>
<com.android.server.pm.ModuleInfoProvider: void systemReady()>
<com.android.server.infra.AbstractMasterSystemService: void onServicePackageRestartedLocked(int)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isResizeable()>
<android.text.PaintMeasureDrawPerfTest: void <init>(int,boolean)>
<com.android.systemui.tuner.CustomListPreference.CustomListPreferenceDialogFragment: void setClickedDialogEntryIndex(int)>
<com.android.server.infra.AbstractPerUserSystemService: void resetTemporaryServiceLocked()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void onUnlockHintFinished()>
<com.android.server.pm.Settings: com.android.server.pm.Settings.VersionInfo getExternalVersion()>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: void clearDisableReasonCounter(int)>
<com.android.systemui.doze.DozeTriggers: void destroy()>
<com.android.server.pm.PackageManagerService: boolean hasSigningCertificate(java.lang.String,byte[],int)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: java.lang.String getDefaultBrowser(int)>
<com.android.shell.HeapDumpProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<com.android.server.webkit.SystemImpl: java.lang.String getUserChosenWebViewProvider(android.content.Context)>
<com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] encrypt(java.security.PublicKey,byte[],byte[],byte[])>
<android.os.ParcelPerfTest: void timeReadException()>
<com.android.server.infra.AbstractMasterSystemService: void <init>(android.content.Context,com.android.server.infra.ServiceNameResolver,java.lang.String,int)>
<com.android.server.tv.TvInputManagerService: void <init>(android.content.Context)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: java.lang.String getAddress()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: boolean validate()>
<com.android.systemui.util.leak.TrackedCollections: void dump(java.io.PrintWriter,java.util.function.Predicate)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGenRenderbuffersOES(int,java.nio.IntBuffer)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationBigPictureTemplateViewWrapper: void <init>(android.content.Context,android.view.View,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.statusbar.policy.RemoteInputView: void setRevealParameters(int,int,int)>
<com.android.server.usb.descriptors.report.HTMLReportCanvas: void openHeader(int)>
<com.android.server.slice.SliceManagerService: void grantPermissionFromUser(android.net.Uri,java.lang.String,java.lang.String,boolean)>
<com.android.systemui.statusbar.phone.StatusIconContainer: void setIgnoredSlots(java.util.List)>
<com.android.systemui.bubbles.BubbleLogger: void logOverflowRemove(com.android.systemui.bubbles.Bubble,int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isPinnedAndExpanded()>
<com.android.server.biometrics.EnumerateClient: boolean onRemoved(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.systemui.statusbar.policy.HeadsUpManager: void setUser(int)>
<android.net.wifi.IWifiManager: void setAutoWakeupEnabled(boolean)>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat: void scheduleApply(com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams[])>
<com.android.server.usb.UsbService: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)>
<android.net.ip.IpClientManager: boolean shutdown()>
<com.android.server.pm.PackageManagerService: java.lang.String[] getPackagesForUid(int)>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getRawSecondaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.server.pm.permission.BasePermission: boolean isIncidentReportApprover()>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void onViewCreated(android.view.View,android.os.Bundle)>
<com.android.media.remotedisplay.RemoteDisplay: java.lang.String toString()>
<com.android.systemui.wm.DisplayImeController.ImePositionProcessor: void onImeEndPositioning(int,boolean,android.view.SurfaceControl.Transaction)>
<com.android.server.policy.PhoneWindowManager: int checkAddPermission(int,boolean,java.lang.String,int[])>
<com.android.server.pm.UserManagerService: boolean isSameProfileGroup(int,int)>
<com.android.keyguard.CarrierText: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: com.android.systemui.statusbar.notification.row.ExpandableNotificationRow getParent()>
<com.android.systemui.statusbar.phone.NotificationGroupManager: void onEntryAdded(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.phone.KeyguardBouncer: boolean willDismissWithAction()>
<com.android.server.accessibility.MagnificationController: void <init>(android.content.Context,com.android.server.accessibility.AccessibilityManagerService,java.lang.Object)>
<com.android.powermodel.PowerReport: java.util.List getRegularApps()>
<com.android.systemui.statusbar.policy.ZenModeController: android.service.notification.ZenModeConfig getConfig()>
<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: void action(android.content.Context,int,boolean)>
<com.android.server.pm.PackageManagerService: void verifyPendingInstall(int,int)>
<com.android.server.pm.permission.BasePermission: boolean isVerifier()>
<com.android.server.devicepolicy.DevicePolicyManagerService.Lifecycle: void onBootPhase(int)>
<com.android.systemui.statusbar.notification.row.BindStage: void abortStage(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccounts(int,java.lang.String)>
<com.android.systemui.stackdivider.Divider: void <init>(android.content.Context,java.util.Optional,com.android.systemui.wm.DisplayController,com.android.systemui.wm.SystemWindows,com.android.systemui.wm.DisplayImeController,android.os.Handler,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.TransactionPool)>
<com.android.systemui.pip.phone.PipMenuActivity: void finish()>
<com.android.systemui.stackdivider.ForcedResizableInfoActivity: void finish()>
<com.android.systemui.qs.tileimpl.QSTileBaseView: void handleStateChanged(com.android.systemui.plugins.qs.QSTile.State)>
<com.android.systemui.shared.recents.model.Task: void notifyTaskDataUnloaded(android.graphics.drawable.Drawable)>
<com.android.settingslib.search.Indexable.SearchIndexProvider: java.util.List getRawDataToIndex(android.content.Context,boolean)>
<com.android.systemui.log.dagger.LogModule: com.android.systemui.log.LogBuffer provideQuickSettingsLogBuffer(com.android.systemui.log.LogcatEchoTracker,com.android.systemui.dump.DumpManager)>
<android.text.BoringLayoutCreateDrawPerfTest: void <init>(java.lang.String,int,android.text.NonEditableTextGenerator.TextType,boolean)>
<com.android.server.integrity.model.BitOutputStream: void flush()>
<com.android.server.compat.PlatformCompat: void <init>(android.content.Context)>
<com.android.systemui.Dependency.DependencyKey: java.lang.String toString()>
<com.android.settingslib.net.NetworkCycleDataLoader: long getTotalUsage(android.app.usage.NetworkStats)>
<com.android.systemui.egg.MLand: boolean willNotDraw()>
<com.android.systemui.qs.external.TileServices: void onStartSuccessful(android.os.IBinder)>
<com.android.server.media.MediaSessionService: void notifyRemoteVolumeChanged(int,com.android.server.media.MediaSessionRecord)>
<com.android.systemui.car.userswitcher.UserGridRecyclerView: void onDetachedFromWindow()>
<com.android.systemui.statusbar.policy.InflatedSmartReplies: com.android.systemui.statusbar.policy.InflatedSmartReplies.SmartRepliesAndActions chooseSmartRepliesAndActions(com.android.systemui.statusbar.policy.SmartReplyConstants,com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.notification.TransformState: float getTransformationStartScaleX()>
<com.android.server.autofill.RemoteAugmentedAutofillService.RemoteAugmentedAutofillServiceCallbacks: void setLastResponse(int)>
<com.android.systemui.statusbar.CastDrawable: void setAlpha(int)>
<com.android.systemui.dagger.DependencyProvider: com.android.internal.logging.MetricsLogger provideMetricsLogger()>
<com.android.packageinstaller.PackageInstallerActivity.AnonymousSourceDialog: void onCancel(android.content.DialogInterface)>
<com.android.settingslib.utils.PowerUtil: java.lang.String getBatteryRemainingShortStringFormatted(android.content.Context,long)>
<com.android.settingslib.bluetooth.BluetoothUtils: android.util.Pair getBtRainbowDrawableWithDescription(android.content.Context,com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.systemui.statusbar.NotificationRemoteInputManager.ClickHandler: boolean handleClick()>
<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: long elapsedRealtimeMillis()>
<com.android.systemui.statusbar.notification.row.NotifInflationErrorManager: boolean hasInflationError(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: boolean setActive()>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator scaleY(float,float,java.lang.Runnable[])>
<com.android.server.appop.AppOpsService: void shutdown()>
<com.android.server.people.data.PackageData: void forAllConversations(java.util.function.Consumer)>
<com.android.systemui.volume.VolumeDialogControllerImpl: void vibrate(android.os.VibrationEffect)>
<com.android.server.broadcastradio.hal2.BroadcastRadioService: void <init>(int)>
<com.android.systemui.statusbar.policy.SignalController: void saveLastState()>
<com.android.systemui.shared.system.PinnedStackListenerForwarder.PinnedStackListener: void onConfigurationChanged()>
<com.android.systemui.settings.ToggleSliderView: int getValue()>
<com.android.startop.colorchanging.MainActivity: void goRed(android.view.View)>
<android.net.wifi.WifiScanner: void registerScanListener(java.util.concurrent.Executor,android.net.wifi.WifiScanner.ScanListener)>
<android.os.UserManagerInternal: java.util.List getUsers(boolean)>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: int hashCode()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean isExpanding()>
<com.android.systemui.qs.tileimpl.QSTileBaseView: android.view.View getIconWithBackground()>
<com.android.systemui.MultiListLayout.MultiListAdapter: int countSeparatedItems()>
<javax.obex.PrivateInputStream: void writeBytes(byte[],int)>
<com.android.settingslib.development.AbstractLogpersistPreferenceController: void <init>(android.content.Context,com.android.settingslib.core.lifecycle.Lifecycle)>
<com.android.server.pm.UserManagerService: int[] getUserIds()>
<com.android.server.media.MediaSession2Record: int getUserId()>
<com.android.server.usb.descriptors.report.ReportCanvas: void openList()>
<javax.obex.ClientSession: javax.obex.Operation get(javax.obex.HeaderSet)>
<com.android.gallery3d.exif.ExifTag: void setIfd(int)>
<com.android.systemui.statusbar.policy.RotationLockControllerImpl: void setListening(boolean)>
<com.android.systemui.statusbar.NotificationShelf: void setFakeShadowIntensity(float,float,int,int)>
<com.android.systemui.assist.ui.PerimeterPathGuide: float getRegionCenter(com.android.systemui.assist.ui.PerimeterPathGuide.Region)>
<com.android.systemui.statusbar.ViewTransformationHelper: void transformFrom(com.android.systemui.statusbar.TransformableView,float)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getShortSupportMessage(android.content.ComponentName)>
<com.android.systemui.statusbar.phone.PanelViewController: void fling(float,boolean)>
<com.android.server.pm.permission.BasePermission: java.lang.String getSourcePackageName()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: com.android.systemui.statusbar.notification.collection.NotificationEntry getEntry()>
<com.android.systemui.statusbar.policy.PreviewInflater: android.view.View inflatePreviewFromService(android.content.ComponentName)>
<com.android.uiautomator.core.UiScrollable: boolean flingBackward()>
<com.android.server.integrity.serializer.RuleBinarySerializer: byte[] serialize(java.util.List,java.util.Optional)>
<com.android.systemui.statusbar.notification.row.PartialConversationInfo: boolean shouldBeSaved()>
<com.android.systemui.media.MediaControlPanel: boolean isPlaying()>
<com.android.server.attention.AttentionManagerService: boolean isServiceEnabled()>
<android.content.pm.PackageManagerInternal: boolean canAccessComponent(int,android.content.ComponentName,int)>
<com.android.packageinstaller.handheld.UninstallAlertDialogFragment: void onDismiss(android.content.DialogInterface)>
<com.android.server.DiskStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder: com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder withPlugin(java.lang.Class)>
<com.android.systemui.volume.VolumeDialogControllerImpl: void showDndTile(boolean)>
<com.android.gallery3d.exif.ExifInterface: void forceRewriteExif(java.lang.String,java.util.Collection)>
<com.android.server.locksettings.PasswordSlotManager: void markSlotDeleted(int)>
<android.net.wifi.IWifiManager: android.net.Network getCurrentNetwork()>
<com.android.server.NetworkManagementService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setAnchorViewIndex(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setIconAreaController(com.android.systemui.statusbar.phone.NotificationIconAreaController)>
<com.android.systemui.pip.phone.PipManager: void setPinnedStackAnimationType(int)>
<android.text.DynamicLayoutPerfTest: java.util.Collection cases()>
<com.android.systemui.qs.tiles.FlashlightTile: android.content.Intent getLongClickIntent()>
<com.android.settingslib.wifi.AccessPoint: boolean isPasspointConfigurationOsuProvisioned()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: boolean isConnectedProfile(com.android.settingslib.bluetooth.LocalBluetoothProfile)>
<com.android.server.policy.WindowManagerPolicy.WindowState: int getActivityType()>
<android.content.pm.PackageManagerInternal: void forEachPackage(java.util.function.Consumer)>
<com.android.server.pm.PackageManagerService.Injector: com.android.server.DeviceIdleInternal getLocalDeviceIdleController()>
<com.android.server.display.DisplayBlanker: void requestDisplayState(int,float)>
<android.net.wifi.rtt.ResponderLocation: int getLciVersion()>
<com.android.settingslib.wifi.AccessPoint: void <init>(android.content.Context,android.net.wifi.WifiConfiguration,java.util.Collection,java.util.Collection)>
<com.android.server.appop.AppOpsService: void setAppOpsServiceDelegate(android.app.AppOpsManagerInternal.CheckOpsDelegate)>
<com.android.keyguard.clock.ImageClock: void onFinishInflate()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setForcePluginOpenListener(com.android.systemui.statusbar.phone.NotificationShadeWindowController.ForcePluginOpenListener)>
<com.android.location.provider.ActivityRecognitionProviderWatcher: com.android.location.provider.ActivityRecognitionProviderWatcher getInstance()>
<com.android.systemui.statusbar.notification.TransformState: void appear(float,com.android.systemui.statusbar.TransformableView)>
<com.android.systemui.globalactions.GlobalActionsFlatLayout: float getAnimationDistance()>
<com.android.systemui.statusbar.DragDownHelper: boolean isDraggingDown()>
<com.android.systemui.statusbar.phone.ObservableScrollView: void fling(int)>
<com.android.keyguard.KeyguardPatternView: boolean onTouchEvent(android.view.MotionEvent)>
<android.net.wifi.WifiNetworkAgentSpecifier: java.lang.String toString()>
<com.android.systemui.ExpandHelper.Callback: com.android.systemui.statusbar.notification.row.ExpandableView getChildAtPosition(float,float)>
<com.android.settingslib.bluetooth.PanProfile: java.lang.String toString()>
<com.android.systemui.wm.DisplayLayout: void <init>(android.content.Context,android.view.Display)>
<com.android.systemui.statusbar.notification.row.StackScrollerDecorView: void onLayout(boolean,int,int,int,int)>
<com.android.server.om.OverlayReferenceMapper: void <init>(boolean,com.android.server.om.OverlayReferenceMapper.Provider)>
<com.android.systemui.util.DeviceConfigProxy: void removeOnPropertiesChangedListener(android.provider.DeviceConfig.OnPropertiesChangedListener)>
<com.android.settingslib.widget.AdaptiveIcon: android.graphics.drawable.Drawable.ConstantState getConstantState()>
<android.net.wifi.IWifiManager: void setScanAlwaysAvailable(boolean)>
<android.net.wifi.WifiManager: java.util.List getPrivilegedConfiguredNetworks()>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat: void create(android.view.View,java.util.function.Consumer)>
<com.android.server.audio.AudioService: void postSetVolumeIndexOnDevice(int,int,int,java.lang.String)>
<com.android.server.locksettings.PasswordSlotManager: void refreshActiveSlots(java.util.Set)>
<com.android.settingslib.widget.BarChartInfo.Builder: com.android.settingslib.widget.BarChartInfo.Builder setDetails(int)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void updateDevicePowerStatus(int,int)>
<com.android.settingslib.applications.ServiceListing.Callback: void onServicesReloaded(java.util.List)>
<com.android.server.pm.pkg.PackageStateUnserialized: boolean isHiddenUntilInstalled()>
<com.android.systemui.wifi.WifiDebuggingSecondaryUserActivity: void onStart()>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void removeNotification(java.lang.String,android.service.notification.NotificationListenerService.RankingMap,int)>
<com.android.server.display.WifiDisplayController.Listener: void onDisplayConnecting(android.hardware.display.WifiDisplay)>
<com.android.server.pm.PackageSettingBase: void setTimeStamp(long)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setTopPadding(int)>
<com.android.server.ConnectivityService: android.net.Network getActiveNetworkForUid(int,boolean)>
<com.android.server.usb.descriptors.UsbACTerminal: void <init>(int,byte,byte,int)>
<com.android.media.tv.remoteprovider.TvRemoteProvider: void clearInputBridge(android.os.IBinder)>
<com.android.settingslib.net.ChartDataLoader: com.android.settingslib.net.ChartData loadInBackground()>
<com.android.systemui.classifier.FalsingManagerImpl: void onNotificationDismissed()>
<com.android.server.pm.dex.DexoptOptions: java.lang.String getPackageName()>
<com.android.systemui.statusbar.policy.CastControllerImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.assist.AssistManager: android.content.ComponentName getVoiceInteractorComponentName()>
<com.android.server.pm.AppsFilter.FeatureConfig: boolean isGloballyEnabled()>
<com.android.systemui.globalactions.GlobalActionsGridLayout: void onUpdateList()>
<com.android.systemui.bubbles.animation.AnimatableScaleMatrix: float getPivotX()>
<com.android.server.audio.AudioService: void releasePlayer(int)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: java.util.ArrayList getMenuItems(android.content.Context)>
<com.android.server.utils.ManagedApplicationService: com.android.server.utils.ManagedApplicationService build(android.content.Context,android.content.ComponentName,int,int,java.lang.String,com.android.server.utils.ManagedApplicationService.BinderChecker,boolean,int,android.os.Handler,com.android.server.utils.ManagedApplicationService.EventCallback)>
<com.android.settingslib.net.DataUsageUtils: android.net.NetworkTemplate getMobileTemplate(android.content.Context,int)>
<com.android.server.pm.PackageManagerService: android.util.ArraySet getOptimizablePackages()>
<com.android.gallery3d.glrenderer.UploadedTexture: boolean isUploading()>
<com.android.server.pm.Installer: void moveAb(java.lang.String,java.lang.String,java.lang.String)>
<com.android.packageinstaller.PackageUtil: android.view.View initSnippetForInstalledApp(android.content.Context,android.content.pm.ApplicationInfo,android.view.View,android.os.UserHandle)>
<com.android.systemui.statusbar.notification.MediaNotificationProcessor: androidx.palette.graphics.Palette.Swatch findBackgroundSwatch(androidx.palette.graphics.Palette)>
<com.android.systemui.statusbar.AnimatedImageView: void onAttachedToWindow()>
<com.android.systemui.pip.tv.PipControlButtonView: void reset()>
<com.android.server.people.PeopleService: void onBootPhase(int)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: boolean allowsManagedPrivateNotificationsInPublic()>
<com.android.keyguard.KeyguardHostView: void cancelDismissAction()>
<com.android.server.usb.descriptors.Usb20ACInputTerminal: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: void removeCallback(com.android.systemui.plugins.statusbar.StatusBarStateController.StateListener)>
<com.android.gallery3d.exif.ExifTag: boolean setValue(byte)>
<com.android.systemui.statusbar.HeadsUpStatusBarView: void onRestoreInstanceState(android.os.Parcelable)>
<com.android.systemui.statusbar.notification.row.NotificationInfo: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.locksettings.LockSettingsService: void <init>(android.content.Context)>
<com.android.settingslib.deviceinfo.AbstractUptimePreferenceController: void onStart()>
<com.android.systemui.qs.QuickQSPanel: void setVisibility(int)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector textContains(java.lang.String)>
<com.android.settingslib.CustomDialogPreferenceCompat: void onDialogClosed(boolean)>
<com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] generateKeyClaimant()>
<com.android.server.appop.AppOpsService: int checkPackage(int,java.lang.String)>
<com.android.systemui.qs.GlobalSetting: void handleValueChanged(int)>
<com.android.server.protolog.ProtoLogViewerConfigReader: void loadViewerConfig(java.io.PrintWriter,java.lang.String)>
<com.android.systemui.plugins.NotificationPersonExtractorPlugin: com.android.systemui.plugins.NotificationPersonExtractorPlugin.PersonData extractPerson(android.service.notification.StatusBarNotification)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean isFullyHidden()>
<com.android.systemui.plugins.FalsingManager: void onScreenTurningOn()>
<com.android.server.twilight.TwilightManager: com.android.server.twilight.TwilightState getLastTwilightState()>
<com.android.server.slice.SliceClientPermissions.SliceAuthority: void readFrom(org.xmlpull.v1.XmlPullParser)>
<com.android.systemui.doze.DozeLog: void traceKeyguard(boolean)>
<android.net.wifi.aware.Characteristics: int getMaxServiceNameLength()>
<android.net.wifi.aware.IWifiAwareDiscoverySessionCallback: void onSessionStarted(int)>
<com.android.systemui.bubbles.BubbleStackView.RelativeStackPosition: void <init>(boolean,float)>
<com.android.systemui.analytics.SensorLoggerSession: void setTouchArea(int,int)>
<com.android.server.soundtrigger.SoundTriggerService.LocalSoundTriggerService: int startRecognition(int,android.hardware.soundtrigger.SoundTrigger.KeyphraseSoundModel,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger.RecognitionConfig)>
<com.android.systemui.HardwareBgDrawable: void draw(android.graphics.Canvas)>
<com.android.systemui.statusbar.phone.LockscreenGestureLogger: void writeAtFractionalPosition(int,int,int,int)>
<com.android.systemui.qs.touch.SwipeDetector: void <init>(android.content.Context,com.android.systemui.qs.touch.SwipeDetector.Listener,com.android.systemui.qs.touch.SwipeDetector.Direction)>
<com.android.uiautomator.core.UiDevice: int getDisplayHeight()>
<android.net.wifi.RttManager: void disableResponder(android.net.wifi.RttManager.ResponderCallback)>
<com.android.server.ConnectivityService: void startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)>
<com.android.systemui.assist.ui.InvocationLightsView: void onFinishInflate()>
<com.android.systemui.stackdivider.Divider: boolean isHomeStackResizable()>
<com.android.server.ExtconStateObserver: java.lang.Object parseState(com.android.server.ExtconUEventObserver.ExtconInfo,java.lang.String)>
<com.android.server.SystemService.TargetUser: android.content.pm.UserInfo getUserInfo()>
<com.android.server.pm.PackageManagerService: java.lang.String getAppPredictionServicePackageName()>
<com.android.systemui.util.sensors.ProximitySensor.ProximityCheck: void <init>(com.android.systemui.util.sensors.ProximitySensor,com.android.systemui.util.concurrency.DelayableExecutor)>
<com.android.systemui.statusbar.phone.BiometricUnlockController: void startWakeAndUnlock(android.hardware.biometrics.BiometricSourceType,boolean)>
<android.net.wifi.IWifiManager: void clearWifiConnectedNetworkScorer()>
<com.android.server.pm.UserManagerService: boolean hasRestrictedProfiles()>
<com.android.server.pm.PackageKeySetData: void addUpgradeKeySetById(long)>
<com.android.wallpapercropper.CropView: boolean onScale(android.view.ScaleGestureDetector)>
<android.net.wifi.WifiNetworkSpecifier: void <init>(android.os.PatternMatcher,android.util.Pair,android.net.wifi.WifiConfiguration)>
<com.android.keyguard.KeyguardAbsKeyInputView: void setKeyguardCallback(com.android.keyguard.KeyguardSecurityCallback)>
<com.android.systemui.qs.QSFooterImpl: void <init>(android.content.Context,android.util.AttributeSet,com.android.systemui.plugins.ActivityStarter,com.android.systemui.statusbar.policy.UserInfoController,com.android.systemui.statusbar.policy.DeviceProvisionedController)>
<com.android.systemui.CornerHandleView: void setAlpha(float)>
<com.android.systemui.biometrics.AuthPanelController: android.animation.ValueAnimator getTranslationAnimator(float)>
<com.android.server.tv.tunerresourcemanager.FrontendResource.Builder: com.android.server.tv.tunerresourcemanager.FrontendResource.Builder type(int)>
<com.android.settingslib.net.NetworkStatsSummaryLoader.Builder: com.android.settingslib.net.NetworkStatsSummaryLoader.Builder setEndTime(long)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: android.view.NotificationHeaderView getVisibleNotificationHeader()>
<com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.Pluggable: java.lang.String getName()>
<com.android.server.audio.AudioService: int getAllowedCapturePolicy()>
<com.android.server.usb.descriptors.UsbMSMidiOutputJack: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.server.usb.descriptors.Usb20ACInputTerminal: byte getClkSourceID()>
<com.android.keyguard.clock.BubbleClockController: android.graphics.Bitmap getThumbnail()>
<com.android.server.NetworkManagementService: void setMtu(java.lang.String,int)>
<com.android.systemui.statusbar.policy.KeyButtonView: void setDarkIntensity(float)>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: boolean add(android.view.MotionEvent)>
<android.processor.view.inspector.InspectableClassModel.Property: void setAttributeIdInferrableFromR(boolean)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void updateQsExpansion()>
<com.android.server.accessibility.MagnificationController: boolean setScaleAndCenter(int,float,float,float,boolean,int)>
<com.android.systemui.statusbar.phone.DozeServiceHost: boolean isDozeSuppressed()>
<com.android.settingslib.wifi.LongPressWifiEntryPreference: void <init>(android.content.Context,com.android.wifitrackerlib.WifiEntry,androidx.fragment.app.Fragment)>
<com.android.uiautomator.core.UiScrollable: void <init>(com.android.uiautomator.core.UiSelector)>
<com.android.server.hdmi.SelectRequestBuffer: com.android.server.hdmi.SelectRequestBuffer.PortSelectRequest newPortSelect(com.android.server.hdmi.HdmiControlService,int,android.hardware.hdmi.IHdmiControlCallback)>
<com.android.server.policy.RestartAction: boolean showDuringKeyguard()>
<com.android.systemui.bubbles.BubbleStackView: void onDisplaySizeChanged()>
<com.android.systemui.statusbar.policy.BluetoothController: void setBluetoothEnabled(boolean)>
<com.android.location.provider.ProviderPropertiesUnbundled: com.android.location.provider.ProviderPropertiesUnbundled create(boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>
<com.android.systemui.statusbar.policy.KeyguardStateController: boolean isFaceAuthEnabled()>
<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>
<com.android.systemui.media.dialog.MediaOutputMetricLogger: void <init>(android.content.Context,java.lang.String)>
<com.android.systemui.qs.QSAnimator: void onAnimationAtStart()>
<com.android.server.policy.WindowOrientationListener: void dumpDebug(android.util.proto.ProtoOutputStream,long)>
<com.android.systemui.shared.system.ViewRootImplCompat: android.view.SurfaceControl getRenderSurfaceControl()>
<com.android.gallery3d.common.BitmapUtils: int computeSampleSize(float)>
<com.android.uiautomator.core.UiScrollable: boolean scrollToEnd(int)>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void grantDefaultPermissionsToDefaultSimCallManager(java.lang.String,int)>
<com.android.systemui.qs.external.TileLifecycleManager: boolean isActiveTile()>
<com.android.settingslib.notification.EnableZenModeDialog: android.service.notification.Condition forever()>
<android.multiuser.UserLifecycleTests: void setUp()>
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService.PackageFreezer freezePackage(java.lang.String,int,java.lang.String)>
<com.android.systemui.util.AlarmTimeout: void cancel()>
<com.android.systemui.shared.system.DockedStackListenerCompat: void onDockedStackMinimizedChanged(boolean,long,boolean)>
<com.android.settingslib.wifi.AccessPoint: java.lang.String getKey(android.net.wifi.hotspot2.OsuProvider)>
<com.android.server.storage.StorageUserConnection: void removeSessionAndWait(java.lang.String)>
<com.android.systemui.media.MediaProjectionPermissionActivity: void onCreate(android.os.Bundle)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSigningDetails(android.content.pm.PackageParser.SigningDetails)>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onTaskProfileLocked(int,int)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.OnMenuEventListener: void onMenuClicked(android.view.View,int,int,com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.MenuItem)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void onDragFinished(android.view.View)>
<com.android.systemui.statusbar.phone.PanelBar: void onTrackingStopped(boolean)>
<com.android.systemui.bubbles.BubbleController.NotificationSuppressionChangedListener: void onBubbleNotificationSuppressionChange(com.android.systemui.bubbles.Bubble)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canRetrieveWindowContentLocked(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>
<com.android.systemui.statusbar.phone.PanelViewController: void cancelHeightAnimator()>
<com.android.server.utils.AppInstallerUtil: android.content.Intent createIntent(android.content.Context,java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.SysuiStatusBarStateController: boolean leaveOpenOnKeyguardHide()>
<com.android.settingslib.accounts.AuthenticatorHelper: boolean hasAccountPreferences(java.lang.String)>
<com.android.systemui.qs.tileimpl.QSTileBaseView: int getDetailY()>
<com.android.settingslib.net.UidDetailProvider: int getUserIdForKey(int)>
<com.android.settingslib.deviceinfo.PrivateStorageInfo: long getTotalSize(android.os.storage.VolumeInfo,long)>
<com.android.systemui.plugins.qs.QSTile: void removeCallback(com.android.systemui.plugins.qs.QSTile.Callback)>
<com.android.settingslib.accounts.AuthenticatorHelper: void <init>(android.content.Context,android.os.UserHandle,com.android.settingslib.accounts.AuthenticatorHelper.OnAccountsUpdateListener)>
<com.android.systemui.tuner.ClockPreference: boolean persistString(java.lang.String)>
<com.android.server.policy.WindowManagerPolicy.WindowState: android.graphics.Rect getFrameLw()>
<com.android.packageinstaller.RemoveReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.statusbar.policy.CastControllerImpl: void removeCallback(android.media.MediaRouter.Callback)>
<com.android.server.AppStateTracker: boolean isUidPowerSaveWhitelisted(int)>
<com.android.settingslib.utils.ColorUtil: float getDisabledAlpha(android.content.Context)>
<com.android.settingslib.volume.MediaSessions: void onActiveSessionsUpdatedH(java.util.List)>
<com.android.systemui.pip.PipAnimationController.PipAnimationCallback: void onPipAnimationStart(com.android.systemui.pip.PipAnimationController.PipTransitionAnimator)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: boolean isSwipedEnoughToShowMenu()>
<com.android.settingslib.drawer.TileUtils: android.net.Uri getCompleteUri(com.android.settingslib.drawer.Tile,java.lang.String,java.lang.String)>
<com.android.settingslib.DeviceInfoUtils: java.lang.String getSecurityPatch()>
<com.android.gallery3d.glrenderer.GLES20Canvas: float getAlpha()>
<com.android.systemui.statusbar.notification.dagger.NotificationsModule: com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProvider bindNotificationInterruptStateProvider(com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProviderImpl)>
<com.android.systemui.classifier.FalsingManagerFake: void onScreenOnFromTouch()>
<com.android.systemui.statusbar.policy.AccessPointControllerImpl: boolean connect(com.android.settingslib.wifi.AccessPoint)>
<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()>
<com.android.server.soundtrigger_middleware.SoundTriggerHw2Enforcer: boolean linkToDeath(android.os.IHwBinder.DeathRecipient,long)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: float getIncreasedPaddingAmount()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isAmbient()>
<com.android.systemui.pip.PipBoundsHandler: void onSaveReentryBounds(android.content.ComponentName,android.graphics.Rect)>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: boolean isFaceAuthEnabled()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: android.view.NotificationHeaderView getNotificationHeader()>
<com.android.systemui.wm.DisplayImeController.PerDisplay.DisplayWindowInsetsControllerImpl: void showInsets(int,boolean)>
<com.android.gallery3d.glrenderer.RawTexture: void <init>(int,int,boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setSingleLineWidthIndention(int)>
<com.android.server.display.DisplayModeDirector: com.android.server.display.DisplayModeDirector.AppRequestObserver getAppRequestObserver()>
<android.net.wifi.rtt.ResponderConfig: void <init>(android.net.wifi.aware.PeerHandle,int,boolean,int,int,int,int,int)>
<com.android.server.biometrics.BiometricServiceBase: void setActiveUserInternal(int)>
<android.net.wifi.hotspot2.omadm.XMLNode: java.lang.String getText()>
<com.android.systemui.shared.system.TransactionCompat: com.android.systemui.shared.system.TransactionCompat setLayer(com.android.systemui.shared.system.SurfaceControlCompat,int)>
<android.media.Controller2Link: int hashCode()>
<com.android.printspooler.ui.PageAdapter.PreviewArea: int getWidth()>
<com.android.server.biometrics.RemovalClient: void notifyUserActivity()>
<com.android.keyguard.KeyguardUpdateMonitor: void onTrustChanged(boolean,int,int)>
<com.android.systemui.statusbar.GestureRecorder.Gesture: void add(android.view.MotionEvent)>
<com.android.gallery3d.exif.ExifInterface: boolean isOffsetTag(short)>
<javax.microedition.khronos.opengles.GL11: void glGetMaterialxv(int,int,java.nio.IntBuffer)>
<com.android.systemui.statusbar.notification.row.HybridNotificationView: void setVisible(boolean)>
<com.android.server.media.MediaRouterService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.gallery3d.exif.ExifInterface: boolean rewriteExif(java.lang.String,java.util.Collection)>
<com.android.powermodel.RawBatteryStats.Warning: java.lang.String[] getExtras()>
<android.content.pm.PackageManagerInternal: boolean wasPackageEverLaunched(java.lang.String,int)>
<com.android.systemui.qs.QuickQSPanel: void setQSPanelAndHeader(com.android.systemui.qs.QSPanel,android.view.View)>
<com.android.server.webkit.SystemImpl: int getMultiProcessSetting(android.content.Context)>
<android.net.wifi.WifiManager: int getVerboseLoggingLevel()>
<com.android.server.policy.WindowManagerPolicy: boolean isUserSetupComplete()>
<com.android.server.wallpaper.WallpaperManagerService: void onUnlockUser(int)>
<com.android.systemui.qs.QSHost.Callback: void onTilesChanged()>
<com.android.systemui.statusbar.EmptyShadeView: com.android.systemui.statusbar.notification.stack.ExpandableViewState createExpandableViewState()>
<com.android.systemui.qs.QSPanel.QSTileLayout: int getNumVisibleTiles()>
<com.android.settingslib.drawer.SwitchController.MetaData: com.android.settingslib.drawer.SwitchController.MetaData setIconTintable(boolean)>
<android.graphics.perftests.PathPerfTest: void testAddRewind()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeUser(android.content.ComponentName,android.os.UserHandle)>
<com.android.systemui.pip.phone.PipManager: void dump(java.io.PrintWriter)>
<com.android.uiautomator.core.UiDevice: boolean pressDPadUp()>
<com.android.keyguard.KeyguardViewController: void keyguardGoingAway()>
<com.android.systemui.dock.DockManager: boolean isDocked()>
<com.android.systemui.car.keyguard.CarKeyguardViewController.OnKeyguardCancelClickedListener: void onCancelClicked()>
<com.android.systemui.keyguard.WorkLockActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.statusbar.phone.StatusBarIconList.Slot: void <init>(java.lang.String,com.android.systemui.statusbar.phone.StatusBarIconHolder)>
<com.android.uiautomator.core.UiDevice: boolean pressHome()>
<com.android.server.pm.ShortcutService: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,int,int)>
<com.android.server.policy.PhoneWindowManager: boolean okToAnimate()>
<com.android.keyguard.KeyguardPasswordView: com.android.internal.widget.LockscreenCredential getEnteredCredential()>
<com.android.server.pm.PackageInstallerService: android.util.ArraySet newArraySet(java.lang.Object[])>
<com.android.systemui.SliceBroadcastRelayHandler: void start()>
<com.android.systemui.car.bluetooth.CarBatteryController: boolean isAodPowerSave()>
<com.android.systemui.qs.QSTileHost: int indexOf(java.lang.String)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glDeleteRenderbuffersOES(int,java.nio.IntBuffer)>
<com.android.systemui.qs.tiles.DataSaverTile: java.lang.String composeChangeAnnouncement()>
<com.android.server.policy.WindowManagerPolicy: void lockNow(android.os.Bundle)>
<com.android.systemui.util.leak.RotationUtils: int getExactRotation(android.content.Context)>
<com.android.settingslib.datetime.ZoneGetter.ZoneGetterData: java.util.List lookupTimeZoneIdsByCountry(java.lang.String)>
<android.net.wifi.hotspot2.pps.Credential: java.security.cert.X509Certificate[] getCaCertificates()>
<com.android.systemui.statusbar.NotificationViewHierarchyManager: void updateRowStates()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void handleShowGlobalActionsMenu()>
<com.android.packageinstaller.wear.WearPackageIconProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<com.android.settingslib.widget.FooterPreference: void setSummary(java.lang.CharSequence)>
<com.android.settingslib.CustomEditTextPreferenceCompat.CustomPreferenceDialogFragment: void onClick(android.content.DialogInterface,int)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isCantSaveState()>
<com.android.systemui.util.DeviceConfigProxy: float getFloat(java.lang.String,java.lang.String,float)>
<com.android.systemui.globalactions.GlobalActionsColumnLayout: float getAnimationOffsetX()>
<com.android.systemui.car.statusbar.DummyNotificationShadeWindowController: void <init>(android.content.Context,android.view.WindowManager,android.app.IActivityManager,com.android.systemui.statusbar.phone.DozeParameters,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.policy.ConfigurationController,com.android.systemui.keyguard.KeyguardViewMediator,com.android.systemui.statusbar.phone.KeyguardBypassController,com.android.systemui.colorextraction.SysuiColorExtractor,com.android.systemui.dump.DumpManager,com.android.systemui.car.window.SystemUIOverlayWindowController)>
<com.android.server.accessibility.AccessibilityWindowManager: boolean isTrackingWindowsLocked(int)>
<com.android.systemui.assist.ui.EdgeLight: void setLength(float)>
<com.android.systemui.statusbar.policy.ZenModeController: int getCurrentUser()>
<com.android.permission.persistence.RuntimePermissionsState.PermissionState: boolean isGranted()>
<com.android.server.statusbar.StatusBarManagerService: void reboot(boolean)>
<com.android.role.persistence.RolesState: java.util.Map getRoles()>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: boolean isAnyProfilePublicMode()>
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager.Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager.ChannelListener)>
<com.android.server.timezone.RulesManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.text.NonEditableTextGenerator.RandomCharSequenceGenerator: void <init>(java.util.Random)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void keyguardGoingAway()>
<com.android.server.audio.RecordingActivityMonitor: boolean isRecordingActiveForUid(int)>
<com.android.settingslib.bluetooth.PanProfile: int getProfileId()>
<com.android.systemui.tuner.CustomListPreference.CustomListPreferenceDialogFragment: void onSaveInstanceState(android.os.Bundle)>
<com.android.uiautomator.core.UiObject: boolean isFocused()>
<com.android.keyguard.KeyguardSecurityContainer: void showUsabilityHint()>
<com.android.gallery3d.glrenderer.GLCanvas: void drawMesh(com.android.gallery3d.glrenderer.BasicTexture,int,int,int,int,int,int)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isOem()>
<com.android.server.broadcastradio.hal2.Utils.FuncThrowingRemoteException: java.lang.Object exec()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setQsExpansionEnabled(boolean)>
<com.android.systemui.statusbar.phone.StatusBar: void animateCollapseQuickSettings()>
<com.android.systemui.doze.DozeLog: void traceDozing(boolean)>
<com.android.keyguard.KeyguardClockSwitch: void setDarkAmount(float)>
<com.android.systemui.statusbar.policy.AccessPointControllerImpl: void <init>(android.content.Context)>
<com.android.systemui.screenshot.GlobalScreenshot: void onComputeInternalInsets(android.view.ViewTreeObserver.InternalInsetsInfo)>
<com.android.systemui.accessibility.WindowMagnification: void start()>
<android.net.wifi.WifiEnterpriseConfig: int getPhase2Method()>
<com.android.server.testing.shadows.ShadowAppBackupUtils: void setAppGetsFullBackup(java.lang.String)>
<com.android.server.media.MediaSessionRecordImpl: boolean isPlaybackTypeLocal()>
<com.android.server.soundtrigger.SoundTriggerInternal: android.hardware.soundtrigger.SoundTrigger.ModelParamRange queryParameter(int,int)>
<android.net.wifi.p2p.nsd.WifiP2pServiceInfo: void <init>(java.util.List)>
<com.android.systemui.assist.ui.EdgeLight: void setEndpoints(float,float)>
<com.android.server.usb.descriptors.report.ReportCanvas: void closeList()>
<com.android.settingslib.wifi.AccessPointPreference: void refresh()>
<android.content.pm.PackageManagerInternal: void setKeepUninstalledPackages(java.util.List)>
<com.android.commands.am.Am: void runInstrument()>
<com.android.server.locksettings.LockSettingsService.Lifecycle: void <init>(android.content.Context)>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindToastUI(com.android.systemui.toast.ToastUI)>
<com.android.server.locksettings.recoverablekeystore.certificate.CertXml: long getSerial()>
<com.android.server.pm.InstructionSets: java.lang.String getPrimaryInstructionSet(com.android.server.pm.PackageAbiHelper.Abis)>
<javax.obex.ClientSession: long getConnectionID()>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: void setLnbInfoListInternal(int[])>
<com.android.server.voiceinteraction.VoiceInteractionManagerService: void onSwitchUser(android.content.pm.UserInfo,android.content.pm.UserInfo)>
<com.android.systemui.pip.phone.PipResizeGestureHandler: void <init>(android.content.Context,com.android.systemui.pip.PipBoundsHandler,com.android.systemui.pip.phone.PipMotionHelper,com.android.systemui.util.DeviceConfigProxy,com.android.systemui.pip.PipTaskOrganizer,com.android.systemui.pip.phone.PipMenuActivityController,java.util.function.Function,java.lang.Runnable,com.android.systemui.model.SysUiState,com.android.systemui.pip.PipUiEventLogger)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: void writeToParcel(android.os.Parcel)>
<com.android.systemui.util.sensors.ProximitySensor: boolean isLoaded()>
<android.net.wifi.WifiManager: void startWps(android.net.wifi.WpsInfo,android.net.wifi.WifiManager.WpsCallback)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: java.util.Map getFrontendResources()>
<android.net.wifi.IWifiManager: android.content.pm.ParceledListSlice getPrivilegedConfiguredNetworks(java.lang.String,java.lang.String)>
<android.net.wifi.hotspot2.pps.Credential: void setExpirationTimeInMillis(long)>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcher: void onDensityOrFontScaleChanged()>
<com.android.uiautomator.core.UiAutomatorBridge: void setCompressedLayoutHierarchy(boolean)>
<com.android.systemui.qs.customize.QSCustomizer: boolean isShown()>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void onScreenTurningOn(com.android.internal.policy.IKeyguardDrawnCallback)>
<com.android.systemui.statusbar.policy.KeyButtonView: void sendEvent(int,int)>
<com.android.server.pm.dex.DexManager: void notifyDexLoad(android.content.pm.ApplicationInfo,java.util.Map,java.lang.String,int)>
<android.net.wifi.hotspot2.omadm.XMLParser: void characters(char[],int,int)>
<com.android.systemui.statusbar.AnimatedImageView: void setImageResource(int)>
<com.android.systemui.plugins.statusbar.StatusBarStateController.StateListener: void onPulsingChanged(boolean)>
<android.net.wifi.WifiManager: java.util.List getPasspointConfigurations()>
<com.android.systemui.statusbar.notification.interruption.NotificationInterruptSuppressor: boolean suppressAwakeInterruptions(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isDozing()>
<com.android.packageinstaller.DeviceUtils: boolean isTelevision(android.content.Context)>
<com.android.server.testing.shadows.ShadowEnvironment: void reset()>
<com.android.systemui.statusbar.phone.SystemUIDialog: android.app.AlertDialog applyFlags(android.app.AlertDialog)>
<com.android.server.usb.descriptors.UsbACSelectorUnit: byte getNumPins()>
<com.android.systemui.statusbar.NotificationRemoteInputManager: boolean shouldKeepForRemoteInputHistory(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.qs.DataUsageGraph: void setLevels(long,long,long)>
<com.android.settingslib.applications.ApplicationsState.Session: java.util.ArrayList getAllApps()>
<android.content.pm.PackageManagerInternal: boolean hasSignatureCapability(int,int,int)>
<com.android.settingslib.bluetooth.BluetoothDiscoverableTimeoutReceiver: void setDiscoverableAlarm(android.content.Context,long)>
<com.android.settingslib.RestrictedLockUtils.EnforcedAdmin: int hashCode()>
<com.android.server.slice.PinnedSliceState: boolean hasPinOrListener()>
<com.android.server.uri.UriGrantsManagerInternal: boolean checkAuthorityGrants(int,android.content.pm.ProviderInfo,int,boolean)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexxvOES(java.nio.IntBuffer)>
<com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.NotifComparator: int compare(com.android.systemui.statusbar.notification.collection.ListEntry,com.android.systemui.statusbar.notification.collection.ListEntry)>
<com.android.keyguard.ViewMediatorCallback: int getBouncerPromptReason()>
<com.android.server.UserspaceRebootLogger: void noteUserspaceRebootSuccess()>
<android.os.IStatsManagerService: void setDataFetchOperation(long,android.app.PendingIntent,java.lang.String)>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: void dismissDraggedOutBubble(android.view.View,float,java.lang.Runnable)>
<com.android.server.appop.AppOpsService: void uidRemoved(int)>
<com.android.systemui.tuner.TunerZenModePanel: void setDoneListener(android.view.View.OnClickListener)>
<com.android.systemui.statusbar.phone.StatusBar: void startAssist(android.os.Bundle)>
<com.android.systemui.bubbles.BubbleTaskView: android.graphics.Matrix getScreenToTaskMatrix()>
<com.android.keyguard.KeyguardUpdateMonitor: void setHasLockscreenWallpaper(boolean)>
<com.android.settingslib.wifi.AccessPoint: java.lang.String getConfigName()>
<com.android.systemui.statusbar.notification.collection.inflation.NotifInflater.InflationCallback: void onInflationFinished(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.qs.QSPanel: void refreshAllTiles()>
<com.android.systemui.statusbar.NotificationRemoteInputManager: android.widget.RemoteViews.OnClickHandler getRemoteViewsOnClickHandler()>
<com.android.media.remotedisplay.RemoteDisplay: void setStatus(int)>
<com.android.printspooler.ui.PrinterRegistry: void addHistoricalPrinter(android.print.PrinterInfo)>
<com.android.systemui.assist.ui.CircularCornerPathRenderer: android.graphics.Path getCornerPath(com.android.systemui.assist.ui.CircularCornerPathRenderer.Corner)>
<com.android.systemui.qs.NonInterceptingScrollView: int getScrollRange()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: boolean shouldClipToRounding(boolean,boolean)>
<com.android.server.policy.WindowManagerPolicy: void onDefaultDisplayFocusChangedLw(com.android.server.policy.WindowManagerPolicy.WindowState)>
<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: int getAttribution(android.app.Activity)>
<com.android.server.rollback.AppDataRollbackHelper: void snapshotAppData(int,android.content.rollback.PackageRollbackInfo,int[])>
<com.android.server.biometrics.BiometricServiceBase: int getUserOrWorkProfileId(java.lang.String,int)>
<com.android.systemui.qs.external.TileServiceManager: boolean hasPendingBind()>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void setBelowSpeedBump(boolean)>
<com.android.systemui.bubbles.animation.StackAnimationController: void setStackStartPosition(com.android.systemui.bubbles.BubbleStackView.RelativeStackPosition)>
<com.android.systemui.statusbar.CommandQueue: void onProposedRotationChanged(int,boolean)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isSupportsExtraLargeScreens()>
<com.android.keyguard.KeyguardSimPukView: boolean startDisappearAnimation(java.lang.Runnable)>
<com.android.server.pm.dex.ArtManagerService: boolean compileLayouts(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.server.ConnectivityService: com.android.internal.net.VpnConfig getVpnConfig(int)>
<com.android.systemui.qs.QuickQSPanel: int parseNumTiles(java.lang.String)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setWpa3EnterpriseConfig(android.net.wifi.WifiEnterpriseConfig)>
<com.android.server.trust.TrustArchive: void logTrustTimeout(int,android.content.ComponentName)>
<com.android.printservice.recommendation.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>
<com.android.preload.check.PreloadCheck: void setDevice(com.android.tradefed.device.ITestDevice)>
<com.android.server.storage.AppFuseBridge: void run()>
<com.android.systemui.statusbar.phone.StatusIconContainer: void onViewRemoved(android.view.View)>
<com.android.keyguard.KeyguardPinBasedInputView: void onFinishInflate()>
<com.android.systemui.ForegroundServicesDialog: void onPrepareListView(android.widget.ListView)>
<com.android.gallery3d.glrenderer.BasicTexture: void invalidateAllTextures()>
<com.android.systemui.statusbar.policy.KeyButtonRipple: boolean setVisible(boolean,boolean)>
<com.android.server.biometrics.fingerprint.FingerprintConstants: int actionBiometricEnroll()>
<com.android.systemui.statusbar.notification.row.FooterView: boolean isHistoryShown()>
<com.android.wallpapercropper.WallpaperCropActivity.BitmapCropTask: java.lang.Boolean doInBackground(java.lang.Void[])>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper: boolean isOnAffordanceIcon(float,float)>
<com.android.printservice.recommendation.util.Preconditions: void checkArgument(boolean)>
<android.net.wifi.WifiConfiguration: int getRecentFailureReason()>
<com.android.systemui.statusbar.phone.ContextualButtonGroup: com.android.systemui.statusbar.phone.ContextualButton getVisibleContextButton()>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setPersistent(boolean)>
<com.android.systemui.statusbar.notification.NotificationEntryListener: void onNotificationAdded(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.screenrecord.RecordingController: void <init>(com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.printspooler.model.PrintSpoolerProvider: void destroy()>
<com.android.systemui.statusbar.StatusBarIconView: void setVisibility(int)>
<com.android.server.media.MediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>
<android.content.pm.PackageManagerInternal: boolean isInstantApp(java.lang.String,int)>
<com.android.systemui.shared.system.ViewRootImplCompat: android.view.SurfaceControl getSurfaceControl()>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setSignedWithPlatformKey(boolean)>
<javax.microedition.khronos.opengles.GL11: void glGetBooleanv(int,boolean[],int)>
<com.android.systemui.qs.tiles.BluetoothTile: android.content.Intent getLongClickIntent()>
<android.net.wifi.rtt.CivicLocation: java.lang.String getCivicElementValue(int)>
<com.android.systemui.util.wakelock.WakeLock: android.os.PowerManager.WakeLock createPartialInner(android.content.Context,java.lang.String)>
<com.android.systemui.power.PowerUI.WarningsUI: void showUsbHighTemperatureAlarm()>
<com.android.settingslib.applications.ServiceListing: void removeCallback(com.android.settingslib.applications.ServiceListing.Callback)>
<com.android.server.audio.AudioService.VolumeController: android.os.IBinder asBinder()>
<com.android.server.appprediction.AppPredictionPerUserService: void requestPredictionUpdateLocked(android.app.prediction.AppPredictionSessionId)>
<com.android.server.pm.Installer: boolean copySystemProfile(java.lang.String,int,java.lang.String,java.lang.String)>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: int describeContents()>
<com.android.systemui.pip.phone.PipMenuActivityController: boolean isMenuActivityVisible()>
<android.media.BufferingParams: int describeContents()>
<com.android.systemui.keyguard.KeyguardViewMediator: void setCurrentUser(int)>
<com.android.systemui.shared.system.InputConsumerController: void setInputListener(com.android.systemui.shared.system.InputConsumerController.InputListener)>
<com.android.server.VibratorService: boolean registerVibratorStateListener(android.os.IVibratorStateListener)>
<com.android.systemui.doze.DozeLog: void tracePulseStart(int)>
<com.android.systemui.statusbar.NotificationShelf: void onFinishInflate()>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void initializeNotificationAreaViews(android.content.Context)>
<com.android.keyguard.SecurityMessageDisplay: void setNextMessageColor(android.content.res.ColorStateList)>
<com.android.systemui.AutoReinflateContainer: void onUiModeChanged()>
<com.android.systemui.statusbar.notification.stack.SectionHeaderView: boolean isTransparent()>
<com.android.systemui.qs.tiles.ScreenRecordTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.screenrecord.RecordingController,com.android.systemui.statusbar.phone.KeyguardDismissUtil)>
<com.android.keyguard.KeyguardSecurityViewFlipper: void showUsabilityHint()>
<com.android.server.usb.UsbAlsaJackDetector: void pleaseStop()>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: int describeContents()>
<com.android.gallery3d.common.Utils: void closeSilently(java.io.Closeable)>
<com.android.networkstack.tethering.TetheringConfiguration: boolean isWigig(java.lang.String)>
<com.android.systemui.globalactions.GlobalActionsDialog.PowerOptionsAction: boolean showDuringKeyguard()>
<com.android.keyguard.KeyguardSecurityContainer: void reset()>
<com.android.server.pm.PackageManagerService: void updateComponentLabelIcon(android.content.ComponentName,java.lang.String,java.lang.Integer,int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isSummaryWithChildren()>
<com.android.server.statusbar.StatusBarManagerInternal: void setWindowState(int,int,int)>
<com.android.systemui.statusbar.phone.NotificationGroupAlertTransferHelper: void onDozingChanged(boolean)>
<com.android.preload.check.PreloadCheck: com.android.tradefed.device.ITestDevice getDevice()>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void wakeUpIfActiveSource()>
<com.android.gallery3d.exif.ExifInterface: void setTags(java.util.Collection)>
<com.android.systemui.classifier.FalsingManagerFake: void onAffordanceSwipingAborted()>
<com.android.settingslib.RestrictedLockImageSpan: android.graphics.drawable.Drawable getDrawable()>
<com.android.packageinstaller.wear.InstallTask: void safeClose(java.io.Closeable)>
<com.android.settingslib.datetime.ZoneGetter: java.util.List getZonesList(android.content.Context)>
<com.android.powermodel.component.ModemProfile: float getIdleMa()>
<com.android.server.NetworkManagementService: void setInterfaceDown(java.lang.String)>
<com.android.settingslib.RestrictedSwitchPreference: void onBindViewHolder(androidx.preference.PreferenceViewHolder)>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: long getKeyguardFadingAwayDelay()>
<com.android.systemui.statusbar.phone.PanelViewController: int getClearAllHeightWithPadding()>
<com.android.systemui.shared.plugins.PluginManager: void addPluginListener(java.lang.String,com.android.systemui.plugins.PluginListener,java.lang.Class)>
<com.android.systemui.tuner.RadioListPreference: void onPrepareDialogBuilder(android.app.AlertDialog.Builder,android.content.DialogInterface.OnClickListener)>
<com.android.systemui.statusbar.phone.BiometricUnlockController: android.hardware.biometrics.BiometricSourceType getBiometricType()>
<com.android.settingslib.CustomDialogPreference.CustomPreferenceDialogFragment: void onPrepareDialogBuilder(android.app.AlertDialog.Builder)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.networkstack.tethering.OffloadHardwareInterface: void <init>(android.os.Handler,android.net.util.SharedLog)>
<com.android.server.devicepolicy.DevicePolicyCacheImpl: void dump(com.android.internal.util.IndentingPrintWriter)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canCaptureFingerprintGestures(com.android.server.accessibility.AccessibilityServiceConnection)>
<com.android.server.vr.EnabledComponentsObserver: int isValid(android.content.ComponentName,int)>
<com.android.server.ServiceWatcher: boolean register()>
<com.android.systemui.qs.tileimpl.QSIconViewImpl: void setIcon(com.android.systemui.plugins.qs.QSTile.State,boolean)>
<com.android.systemui.util.sensors.AsyncSensorManager: void onPluginDisconnected(com.android.systemui.plugins.SensorManagerPlugin)>
<com.android.keyguard.KeyguardPatternView: void onFinishInflate()>
<android.net.wifi.WifiNetworkSuggestion: android.net.wifi.hotspot2.PasspointConfiguration getPasspointConfig()>
<com.android.systemui.statusbar.NotificationLifetimeExtender: void setShouldManageLifetime(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.systemui.fragments.FragmentHostManager: com.android.systemui.fragments.FragmentHostManager addTagListener(java.lang.String,com.android.systemui.fragments.FragmentHostManager.FragmentListener)>
<com.android.server.biometrics.iris.IrisService: java.lang.String getManageBiometricPermission()>
<com.android.gallery3d.glrenderer.GLES20Canvas: void beginRenderTarget(com.android.gallery3d.glrenderer.RawTexture)>
<com.android.systemui.statusbar.phone.KeyguardDismissHandler: void executeWhenUnlocked(com.android.systemui.plugins.ActivityStarter.OnDismissAction,boolean)>
<android.perftests.utils.SettingsHelper: void syncSet(android.content.Context,java.lang.String,java.lang.String,java.lang.String)>
<android.net.wifi.rtt.RangingRequest: void writeToParcel(android.os.Parcel,int)>
<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.FingerprintGestureDispatcher getFingerprintGestureDispatcher()>
<com.android.server.usb.UsbService: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>
<com.android.server.media.MediaRouterService: void registerManager(android.media.IMediaRouter2Manager,java.lang.String)>
<com.android.systemui.SystemUIFactory.ContextHolder: android.content.Context provideContext()>
<com.android.server.biometrics.face.FaceAuthenticator: void startPreparedClient(int)>
<com.android.systemui.egg.MLand: java.util.ArrayList getGameControllers()>
<android.net.wifi.p2p.WifiP2pDeviceList: boolean remove(android.net.wifi.p2p.WifiP2pDevice)>
<com.android.server.accessibility.gestures.TouchExplorer: java.lang.String toString()>
<com.android.systemui.settings.ToggleSeekBar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.pm.PackageManagerService.Injector: com.android.server.compat.PlatformCompat getCompatibility()>
<android.net.wifi.aware.IWifiAwareDiscoverySessionCallback: void onSessionConfigSuccess()>
<com.android.systemui.statusbar.ViewTransformationHelper: void setCustomTransformation(com.android.systemui.statusbar.ViewTransformationHelper.CustomTransformation,int)>
<com.android.systemui.statusbar.notification.row.NotificationGutsManager: void onDensityOrFontScaleChanged(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.qs.tiles.UserDetailItemView: int getFontSizeDimen()>
<com.android.keyguard.KeyguardUpdateMonitor: android.telephony.ServiceState getServiceState(int)>
<android.app.ResourcesPerfTest: void getQuantityText()>
<com.android.systemui.statusbar.AlphaOptimizedFrameLayout: boolean hasOverlappingRendering()>
<com.android.server.utils.ManagedApplicationService.LogFormattable: java.lang.String toLogString(java.text.SimpleDateFormat)>
<com.android.server.inputmethod.InputMethodManagerService.Lifecycle: void onBootPhase(int)>
<com.android.systemui.qs.QuickStatusBarHeader: void setupHost(com.android.systemui.qs.QSTileHost)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setForceUserActivity(boolean)>
<com.android.systemui.util.sensors.ProximitySensor: void unregisterInternal()>
<android.net.wifi.SoftApConfiguration: int getSecurityType()>
<com.android.systemui.statusbar.notification.row.ExpandableView: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.qs.QSHost: java.util.Collection getTiles()>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: int getActualHeight()>
<com.android.server.usb.descriptors.UsbACAudioStreamEndpoint: void <init>(int,byte,int)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void handleRoutingChangeAndInformation(int,com.android.server.hdmi.HdmiCecMessage)>
<com.android.systemui.statusbar.notification.row.HybridGroupManager: void initDimens()>
<com.android.server.biometrics.BiometricServiceBase.DaemonWrapper: int enroll(byte[],int,int,java.util.ArrayList)>
<com.android.server.VibratorService: boolean hasAmplitudeControl()>
<com.android.server.policy.PhoneWindowManager: void userActivity()>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindPowerUI(com.android.systemui.power.PowerUI)>
<com.android.server.tv.TvRemoteService: void monitor()>
<com.android.settingslib.animation.AppearAnimationUtils: void startTranslationYAnimation(android.view.View,long,long,float,android.view.animation.Interpolator)>
<com.android.keyguard.KeyguardSecurityViewFlipper: void startAppearAnimation()>
<com.android.systemui.util.leak.LeakDetector: void trackGarbage(java.lang.Object)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordHistoryLength(android.content.ComponentName,int,boolean)>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getUsesOptionalLibraries()>
<com.android.systemui.shared.system.TaskStackChangeListener: void onSingleTaskDisplayEmpty(int)>
<com.android.systemui.statusbar.phone.DozeParameters: int getPulseVisibleDurationExtended()>
<com.android.server.input.InputManagerService.WindowManagerCallbacks: android.view.KeyEvent dispatchUnhandledKey(android.os.IBinder,android.view.KeyEvent,int)>
<com.android.systemui.globalactions.GlobalActionsDialog: void createActionItems()>
<com.android.server.contentsuggestions.ContentSuggestionsManagerServiceShellCommand: int onCommand(java.lang.String)>
<com.android.systemui.globalactions.GlobalActionsDialog.Action: android.view.View create(android.content.Context,android.view.View,android.view.ViewGroup,android.view.LayoutInflater)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setExpandingNotification(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.shared.system.PackageManagerWrapper: com.android.systemui.shared.system.PackageManagerWrapper getInstance()>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: void copy(android.net.wifi.WifiConfiguration.NetworkSelectionStatus)>
<com.android.server.biometrics.AuthenticationClient: int start()>
<com.android.server.hdmi.SelectRequestBuffer.DeviceSelectRequest: void process()>
<com.android.systemui.bubbles.BubbleTaskView: android.graphics.Rect getScreenBounds()>
<com.android.server.usb.descriptors.Usb10ACMixerUnit: void <init>(int,byte,byte,int)>
<com.android.systemui.statusbar.notification.TransformState: com.android.systemui.statusbar.notification.TransformState createFrom(android.view.View,com.android.systemui.statusbar.notification.TransformState.TransformInfo)>
<android.net.TetheringManager: void startTethering(android.net.TetheringManager.TetheringRequest,java.util.concurrent.Executor,android.net.TetheringManager.StartTetheringCallback)>
<com.android.server.pm.ShortcutService: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
<com.android.systemui.statusbar.policy.BluetoothController: java.util.Collection getDevices()>
<com.android.server.pm.RestrictionsSet: boolean containsKey(int)>
<com.android.uiautomator.core.UiObject: boolean isFocusable()>
<com.android.systemui.statusbar.notification.stack.AmbientState: void <init>(android.content.Context,com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm.SectionProvider,com.android.systemui.statusbar.policy.HeadsUpManager)>
<com.android.systemui.statusbar.policy.RemoteInputQuickSettingsDisabler: void onConfigChanged(android.content.res.Configuration)>
<com.android.systemui.statusbar.phone.StatusBarIconController.DarkIconManager: void exitDemoMode()>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_toAllowed_whenNotAbleToRequest_doesNotSet()>
<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getPrimaryUser()>
<com.android.systemui.statusbar.phone.StatusBar: void onLaunchAnimationCancelled()>
<com.android.systemui.statusbar.CommandQueue: void appTransitionPending(int)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: boolean isNetworkEnabled()>
<com.android.packageinstaller.InstallInstalling: void onStop()>
<com.android.systemui.statusbar.policy.Listenable: void setListening(boolean)>
<com.android.systemui.assist.ui.InvocationLightsView: void setLight(int,float,float)>
<com.android.server.usb.descriptors.tree.UsbDescriptorsInterfaceNode: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.packageinstaller.television.UninstallAlertFragment: void onGuidedActionClicked(androidx.leanback.widget.GuidedAction)>
<android.net.ip.IpServer: void stop()>
<com.android.systemui.globalactions.GlobalActionsDialog.MyAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.perftests.utils.ManualBenchmarkState: boolean keepRunning(java.util.List)>
<android.net.wifi.p2p.WifiP2pInfo: int describeContents()>
<com.android.nfc_extras.NfcAdapterExtras: com.android.nfc_extras.NfcAdapterExtras get(android.nfc.NfcAdapter)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setScrollingEnabled(boolean)>
<com.android.server.media.MediaSession2Record: void <init>(android.media.Session2Token,com.android.server.media.MediaSessionService,android.os.Looper,int)>
<com.android.keyguard.KeyguardUpdateMonitor: void destroy()>
<com.android.server.accounts.AccountManagerService: void invalidateAuthToken(java.lang.String,java.lang.String)>
<com.android.server.pm.AppsFilter.FeatureConfig: void onSystemReady()>
<com.android.server.lights.LogicalLight: void setVrMode(boolean)>
<com.android.systemui.util.leak.WeakIdentityHashMap: java.util.Collection values()>
<com.android.settingslib.bluetooth.MapClientProfile: java.util.List getConnectedDevices()>
<com.android.server.print.RemotePrintService.PrintServiceCallbacks: void onPrintersRemoved(java.util.List)>
<com.android.server.accessibility.AccessibilityWindowManager: int resolveParentWindowIdLocked(int)>
<com.android.future.usb.UsbAccessory: java.lang.String getManufacturer()>
<com.android.systemui.statusbar.notification.row.ExpandableViewController: void init()>
<com.android.server.pm.DumpState: boolean isDumping(int)>
<com.android.systemui.volume.ZenModePanel.Callback: void onPrioritySettings()>
<com.android.server.SensorNotificationService: void onStart()>
<com.android.systemui.classifier.AnglesClassifier: float getFalseTouchEvaluation(int,com.android.systemui.classifier.Stroke)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: boolean isBluetoothEnabled()>
<com.android.server.accounts.AccountManagerService: void writeAuthTokenIntoCacheLocked(com.android.server.accounts.AccountManagerService.UserAccounts,android.accounts.Account,java.lang.String,java.lang.String)>
<com.android.server.audio.AudioService: void setMicrophoneMute(boolean,java.lang.String,int)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: int getPositionInLinearLayout(android.view.View)>
<com.android.server.appwidget.AppWidgetService: void <init>(android.content.Context)>
<android.net.wifi.WifiConfiguration: boolean isEnterprise()>
<com.android.server.biometrics.ClientMonitor: void notifyUserActivity()>
<com.android.systemui.bubbles.BubbleViewProvider: java.lang.String getKey()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setUserExpanded(boolean,boolean)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void clearBuffer()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isExpanded(boolean)>
<com.android.settingslib.applications.ApplicationsState.Session: void onPause()>
<com.android.server.ConnectivityService: java.lang.String[] getTetherableUsbRegexs()>
<com.android.server.AlarmManagerInternal.InFlightListener: void broadcastAlarmComplete(int)>
<com.android.systemui.ScreenDecorations: void setSize(android.view.View,android.graphics.Point)>
<com.android.settingslib.CustomDialogPreferenceCompat: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowViewController: com.android.systemui.statusbar.phone.NotificationShadeWindowView getView()>
<com.android.server.integrity.model.ByteTrackedOutputStream: void write(byte[])>
<android.app.ResourcesThemePerfTest: void rebase()>
<com.android.server.accessibility.AccessibilityWindowManager: void onTouchInteractionStart()>
<com.android.settingslib.applications.ApplicationsState: void ensureLabelDescription(com.android.settingslib.applications.ApplicationsState.AppEntry)>
<com.android.systemui.plugins.ClockPlugin: void setDarkAmount(float)>
<com.android.server.pm.PackageManagerService: void restorePreferredActivities(byte[],int)>
<com.android.systemui.pip.phone.PipTouchState: android.graphics.PointF getDownTouchDelta()>
<com.android.keyguard.KeyguardUpdateMonitor: void reportSimUnlocked(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void <init>(android.content.Context,android.util.AttributeSet,boolean,com.android.systemui.statusbar.notification.stack.NotificationRoundnessManager,com.android.systemui.statusbar.notification.DynamicPrivacyController,com.android.systemui.statusbar.SysuiStatusBarStateController,com.android.systemui.statusbar.phone.HeadsUpManagerPhone,com.android.systemui.statusbar.phone.KeyguardBypassController,com.android.systemui.media.KeyguardMediaController,com.android.systemui.plugins.FalsingManager,com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.statusbar.notification.row.NotificationGutsManager,com.android.systemui.statusbar.policy.ZenModeController,com.android.systemui.statusbar.notification.stac.NotificationSectionsManager,com.android.systemui.statusbar.notification.stac.ForegroundServiceSectionController,com.android.systemui.statusbar.notification.ForegroundServiceDismissalFeatureController,com.android.systemui.statusbar.FeatureFlags,com.android.systemui.statusbar.notification.collection.NotifPipeline,com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.systemui.statusbar.notification.collection.NotifCollection,com.android.internal.logging.UiEventLogger)>
<com.android.server.biometrics.EnumerateClient: int start()>
<com.android.systemui.statusbar.HeadsUpStatusBarView: void setPanelTranslation(float)>
<com.android.systemui.statusbar.notification.row.NotificationInfo: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: void binderDied()>
<com.android.systemui.pip.PipSnapAlgorithm: void snapRectToClosestEdge(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>
<com.android.systemui.statusbar.phone.LightBarController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.car.notification.NotificationPanelViewMediator: com.android.systemui.car.notification.NotificationPanelViewController getNotificationPanelViewController()>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper: void onRtlPropertiesChanged()>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void setOccluded(boolean,boolean)>
<com.android.server.usb.descriptors.UsbACTerminal: int getTerminalType()>
<com.android.systemui.shared.recents.model.Task.TaskKey: void <init>(int,int,android.content.Intent,android.content.ComponentName,int,long)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canGetAccessibilityNodeInfoLocked(int,com.android.server.accessibility.AbstractAccessibilityServiceConnection,int)>
<com.android.wallpaperbackup.WallpaperBackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<com.android.server.appop.AppOpsService: void systemReady()>
<com.android.keyguard.ViewMediatorCallback: void keyguardDoneDrawing()>
<android.net.wifi.INetworkRequestMatchCallback: void onUserSelectionConnectFailure(android.net.wifi.WifiConfiguration)>
<com.android.systemui.pip.PipTaskOrganizer: void removePip()>
<com.android.systemui.volume.VolumeDialogImpl: void setStreamImportant(int,boolean)>
<com.android.systemui.util.LifecycleFragment: void onStop()>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: boolean validate()>
<android.net.wifi.SoftApInfo: void <init>(android.net.wifi.SoftApInfo)>
<com.android.systemui.util.io.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>
<com.android.settingslib.Utils: android.graphics.Bitmap convertCornerRadiusBitmap(android.content.Context,android.graphics.Bitmap,float)>
<com.android.server.pm.dex.DexoptOptions: int getCompilationReason()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onMeasure(int,int)>
<com.android.systemui.pip.PipUI: void expandPip()>
<com.android.server.infra.AbstractMasterSystemService: com.android.server.infra.AbstractPerUserSystemService updateCachedServiceLocked(int,boolean)>
<com.android.systemui.accessibility.SystemActions: void unregister(int)>
<com.android.systemui.SwipeHelper: void dismissChild(android.view.View,float,boolean)>
<com.android.systemui.qs.external.TileLifecycleManager: void onStartListening()>
<com.android.systemui.shared.recents.model.Task.TaskKey: void <init>(android.app.TaskInfo)>
<com.android.systemui.doze.DozeHost: void pulseWhileDozing(com.android.systemui.doze.DozeHost.PulseCallback,int)>
<com.android.systemui.statusbar.policy.KeyguardUserDetailItemView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.biometrics.fingerprint.FingerprintUserState: int getNameTemplateResource()>
<com.android.systemui.util.io.Files: java.util.stream.Stream lines(java.nio.file.Path)>
<com.android.server.camera.CameraServiceProxy: void onStartUser(int)>
<com.android.packageinstaller.TemporaryFileManager: java.io.File getInstallStateFile(android.content.Context)>
<com.android.systemui.shared.recents.model.Task.TaskCallbacks: void onTaskWindowingModeChanged()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: android.view.ViewRootImpl getViewRootImpl()>
<com.android.server.appbinding.finders.AppServiceFinder: void startMonitoring()>
<com.android.server.usb.descriptors.ByteStream: int getUnsignedByte()>
<com.android.systemui.assist.ui.PathSpecCornerPathRenderer: void <init>(android.content.Context)>
<com.android.server.timezonedetector.ReferenceWithHistory: void <init>(int)>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: void removeObsoletePrintJobs()>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onScreenTurnedOff()>
<com.android.systemui.doze.DozeHost: void startDozing()>
<com.android.keyguard.AlphaOptimizedImageButton: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean hasActiveClearableNotifications(int)>
<com.android.settingslib.schedulesprovider.ScheduleInfo: java.lang.String getTitle()>
<com.android.systemui.statusbar.KeyguardIndicationController: void showTransientIndication(java.lang.CharSequence)>
<com.android.systemui.util.sensors.AsyncSensorManager: android.hardware.SensorDirectChannel createDirectChannelImpl(android.os.MemoryFile,android.hardware.HardwareBuffer)>
<com.android.systemui.qs.QSPanel: void updateMargins(android.view.View,int,int)>
<com.android.settingslib.bluetooth.LocalBluetoothManager: com.android.settingslib.bluetooth.LocalBluetoothProfileManager getProfileManager()>
<android.view.autofill.MyAutofillService: void onSaveRequest(android.service.autofill.SaveRequest,android.service.autofill.SaveCallback)>
<com.android.settingslib.development.AbstractLogpersistPreferenceController: void writeLogpersistOption(java.lang.Object,boolean)>
<android.net.wifi.hotspot2.omadm.PpsMoParser: android.net.wifi.hotspot2.PasspointConfiguration parseMoText(java.lang.String)>
<com.android.server.timezone.PackageManagerHelper: boolean isPrivilegedApp(java.lang.String)>
<com.android.systemui.power.PowerNotificationWarnings: void showHighTemperatureWarning()>
<android.net.wifi.p2p.WifiP2pDeviceList: boolean remove(android.net.wifi.p2p.WifiP2pDeviceList)>
<com.android.server.media.VolumeCtrl: void run(com.android.server.media.MediaShellCommand)>
<android.net.wifi.WifiUsabilityStatsEntry: void <init>(long,int,int,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,int,int,int,int,int,int,int,boolean)>
<com.android.server.protolog.common.IProtoLogGroup: void setLogToLogcat(boolean)>
<com.android.settingslib.CustomEditTextPreference: android.app.Dialog getDialog()>
<com.android.systemui.qs.tiles.UserDetailItemView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.pip.PipTaskOrganizer: void scheduleUserResizePip(android.graphics.Rect,android.graphics.Rect,java.util.function.Consumer)>
<com.android.systemui.statusbar.policy.UserSwitcherController.BaseUserAdapter: int getUserCount()>
<com.android.systemui.statusbar.notification.collection.coordinator.NotifCoordinators: void <init>(com.android.systemui.dump.DumpManager,com.android.systemui.statusbar.FeatureFlags,com.android.systemui.statusbar.notification.collection.coordinator.HideNotifsForOtherUsersCoordinator,com.android.systemui.statusbar.notification.collection.coordinator.KeyguardCoordinator,com.android.systemui.statusbar.notification.collection.coordinator.RankingCoordinator,com.android.systemui.statusbar.notification.collection.coordinator.AppOpsCoordinator,com.android.systemui.statusbar.notification.collection.coordinator.DeviceProvisionedCoordinator,com.android.systemui.statusbar.notification.collection.coordinator.BubbleCoordinator,com.android.systemui.statusbar.notification.collection.coordinator.HeadsUpCoordinator,com.android.systemui.statusbar.notification.collection.coordinato.ConversationCoordinator,com.android.systemui.statusbar.notification.collection.coordinator.PreparationCoordinator,com.android.systemui.statusbar.notification.collection.coordinator.MediaCoordinator)>
<com.android.systemui.statusbar.phone.AutoTileManager: com.android.systemui.qs.SecureSetting getSecureSettingForKey(java.lang.String)>
<android.os.UserManagerInternal: void removeAllUsers()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView.InteractionEventHandler: boolean interceptMediaKey(android.view.KeyEvent)>
<com.android.systemui.BatteryMeterView: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.systemui.qs.tiles.DndTile: java.lang.CharSequence getTileLabel()>
<com.android.server.ConnectivityService: java.util.List getVpnLockdownWhitelist(int)>
<com.android.settingslib.core.instrumentation.LogWriter: void action(android.content.Context,int,int)>
<com.android.systemui.statusbar.AlertingNotificationManager: int getContentFlag()>
<com.android.systemui.statusbar.phone.DozeParameters: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.Long getSnapshotVersion(int,int)>
<com.android.server.accessibility.EventStreamTransformation: void onKeyEvent(android.view.KeyEvent,int)>
<com.android.printspooler.ui.PrinterRegistry: void setTrackedPrinter(android.print.PrinterId)>
<com.android.systemui.biometrics.AuthBiometricView.Callback: void onAction(int)>
<com.android.systemui.SystemUIFactory: com.android.systemui.SystemUIFactory getInstance()>
<com.android.systemui.statusbar.ViewTransformationHelper: void addViewTransformingToSimilar(int,android.view.View)>
<com.android.server.vr.EnabledComponentsObserver: void rebuildAll()>
<com.android.systemui.qs.customize.QSCustomizer: void saveInstanceState(android.os.Bundle)>
<com.android.settingslib.deviceinfo.AbstractWifiMacAddressPreferenceController: void updateConnectivity()>
<com.android.gallery3d.exif.ExifInterface: int getTagDefinition(short,int)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: void setConnectChoice(java.lang.String)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setShelfIconVisible(boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void fling(int)>
<android.net.wifi.RttManager.ParcelableRttResults: java.lang.String toString()>
<android.text.StaticLayoutGetOffsetForHorizontalPerfTest: void testGetOffsetForHorizontal_RTL()>
<android.text.TextViewSetTextMeasurePerfTest: void timeCreate()>
<com.android.server.appbinding.finders.CarrierMessagingClientServiceFinder: void <init>(android.content.Context,java.util.function.BiConsumer,android.os.Handler)>
<com.android.settingslib.bluetooth.LocalBluetoothProfile: boolean isEnabled(android.bluetooth.BluetoothDevice)>
<com.android.systemui.qs.QuickStatusBarHeader: void setListening(boolean)>
<com.android.uiautomator.core.UiScrollable: boolean scrollToBeginning(int,int)>
<com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.ProviderInfo generateProviderInfo(com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.parsing.component.ParsedProvider,int,android.content.pm.PackageUserState,android.content.pm.ApplicationInfo,int,com.android.server.pm.PackageSetting)>
<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)>
<com.android.server.pm.permission.PermissionManagerService.Injector: java.lang.Object getSystemService(java.lang.String)>
<com.android.systemui.classifier.FalsingManagerFake: void setShowingAod(boolean)>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: boolean remove(java.lang.Object)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)>
<com.android.systemui.util.sensors.AsyncSensorManager: boolean requestTriggerSensorImpl(android.hardware.TriggerEventListener,android.hardware.Sensor)>
<com.android.systemui.plugins.PluginEnablerImpl: void setDisabled(android.content.ComponentName,int)>
<com.android.server.pm.KeySetManagerService: android.util.ArraySet getPublicKeysFromKeySetLPr(long)>
<com.android.server.accessibility.AccessibilityWindowManager.AccessibilityEventSender: void sendAccessibilityEventForCurrentUserLocked(android.view.accessibility.AccessibilityEvent)>
<com.android.permission.persistence.RuntimePermissionsPersistence: com.android.permission.persistence.RuntimePermissionsState readForUser(android.os.UserHandle)>
<com.android.systemui.qs.tiles.FlashlightTile: void onFlashlightError()>
<com.android.systemui.qs.QuickQSPanel: void updatePadding()>
<com.android.systemui.tuner.ClipboardView: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.power.PowerUI.WarningsUI: void dismissHighTemperatureWarning()>
<com.android.systemui.assist.ui.EdgeLight: boolean setColor(int)>
<com.android.systemui.qs.QSScrollLayout: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.server.biometrics.iris.IrisService: boolean checkAppOps(int,java.lang.String)>
<android.net.wifi.WifiInfo: int getScore()>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setHideAmount(float)>
<com.android.server.usb.descriptors.UsbVCOutputTerminal: void <init>(int,byte,byte)>
<android.accounts.AccountManagerPerfTest: void testGetAccounts()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void removeActiveAdmin(android.content.ComponentName,int)>
<com.android.systemui.classifier.FalsingManagerFake: void onCameraHintStarted()>
<com.android.systemui.tuner.TunerFragment: void onActivityCreated(android.os.Bundle)>
<com.android.settingslib.core.lifecycle.ObservableFragment: void onPrepareOptionsMenu(android.view.Menu)>
<android.net.util.TetheringUtils: boolean isTetheringRequestEquals(android.net.TetheringRequestParcel,android.net.TetheringRequestParcel)>
<com.android.server.policy.WakeGestureListener: void onWakeUp()>
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getEnabledAccessibilityServiceList(int,int)>
<com.android.systemui.statusbar.NotificationRemoteInputManager: void bindRow(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<android.app.StatsManager.PullAtomMetadata.Builder: android.app.StatsManager.PullAtomMetadata.Builder setAdditiveFields(int[])>
<com.android.uiautomator.testrunner.UiAutomatorTestCase: android.os.Bundle getParams()>
<com.android.settingslib.wifi.TestAccessPointBuilder: com.android.settingslib.wifi.TestAccessPointBuilder setSaved(boolean)>
<android.net.wifi.RttManager.RttListener: void onFailure(int,java.lang.String)>
<com.android.server.audio.AudioService: void playSoundEffect(int)>
<com.android.settingslib.applications.ApplicationsState.Session: java.util.ArrayList rebuild(com.android.settingslib.applications.ApplicationsState.AppFilter,java.util.Comparator)>
<com.android.server.appop.AppOpsService: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>
<com.android.server.tv.tunerresourcemanager.ClientProfile: void releaseFrontend(int)>
<com.android.systemui.car.navigationbar.CarNavigationBarView: void onNotificationsClick(android.view.View)>
<com.android.server.VibratorService: boolean hasVibrator()>
<android.net.wifi.WifiEnterpriseConfig: void setClientCertificateAlias(java.lang.String)>
<com.android.systemui.qs.tiles.WorkModeTile: int getMetricsCategory()>
<com.android.systemui.qs.tiles.NightDisplayTile: com.android.systemui.plugins.qs.QSTile.BooleanState newTileState()>
<com.android.keyguard.KeyguardViewController: void notifyKeyguardAuthenticated(boolean)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: java.lang.String resolveValidReportedPackageLocked(java.lang.CharSequence,int,int,int)>
<com.android.server.usb.descriptors.Usb20ACInputTerminal: int getChanConfig()>
<com.android.commands.hid.Event: java.lang.String getName()>
<com.android.server.pm.Installer: boolean reconcileSecondaryDexFile(java.lang.String,java.lang.String,int,java.lang.String[],java.lang.String,int)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setWillBeGone(boolean)>
<com.android.systemui.qs.QuickStatusBarHeader: void <init>(android.content.Context,android.util.AttributeSet,com.android.systemui.statusbar.policy.NextAlarmController,com.android.systemui.statusbar.policy.ZenModeController,com.android.systemui.statusbar.phone.StatusBarIconController,com.android.systemui.plugins.ActivityStarter,com.android.systemui.privacy.PrivacyItemController,com.android.systemui.statusbar.CommandQueue,com.android.systemui.util.RingerModeTracker,com.android.internal.logging.UiEventLogger)>
<com.google.android.startop.iorap.EventSequenceValidator: void onActivityLaunchCancelled(byte[])>
<com.android.server.autofill.ui.AutoFillUI: void showError(int,com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback)>
<com.android.server.usb.descriptors.UsbACMixerUnit: byte[] getInputIDs()>
<com.android.photos.views.TiledImageRenderer: void setViewSize(int,int)>
<android.net.wifi.SoftApCapability: void <init>(android.net.wifi.SoftApCapability)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: boolean requestCasSessionInternal(android.media.tv.tunerresourcemanager.CasSessionRequest,int[])>
<com.android.settingslib.accounts.AuthenticatorHelper: void listenToAccountUpdates()>
<javax.obex.ClientSession: javax.obex.HeaderSet disconnect(javax.obex.HeaderSet)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPackageAllowedToAccessCalendarForUser(java.lang.String,int)>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setMaxDistanceMm(int)>
<com.android.systemui.shared.system.ActivityOptionsCompat: android.app.ActivityOptions makeSplitScreenOptions(boolean,boolean)>
<com.android.server.tv.tunerresourcemanager.ClientProfile.Builder: com.android.server.tv.tunerresourcemanager.ClientProfile.Builder processId(int)>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void writeToParcel(android.os.Parcel,int)>
<com.android.server.om.OverlayableInfoCallback: void enforcePermission(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.phone.NavigationBarFrame: boolean dispatchTouchEvent(android.view.MotionEvent)>
<com.google.android.startop.iorap.AppLaunchEvent.ActivityLaunchFinished: void writeToParcelImpl(android.os.Parcel,int)>
<com.android.server.policy.PhoneWindowManager: void dump(java.lang.String,java.io.PrintWriter,java.lang.String[])>
<com.android.server.rollback.RollbackManagerService: void onStart()>
<com.android.server.policy.WindowManagerPolicy: void setNavBarVirtualKeyHapticFeedbackEnabledLw(boolean)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setRecentlyAudiblyAlerted(boolean)>
<com.android.server.audio.AudioService: void handleBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice)>
<com.android.systemui.assist.ui.CircularCornerPathRenderer: void <init>(android.content.Context)>
<com.android.systemui.statusbar.FlingAnimationUtils.Builder: com.android.systemui.statusbar.FlingAnimationUtils.Builder reset()>
<com.android.server.policy.WindowManagerPolicy: boolean performHapticFeedback(int,java.lang.String,int,boolean,java.lang.String)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceController: boolean setCallbacks(com.android.server.display.whitebalance.DisplayWhiteBalanceController.Callbacks)>
<com.android.printservice.recommendation.plugin.mdnsFilter.MDNSFilterPlugin: void start(com.android.printservice.recommendation.PrintServicePlugin.PrinterDiscoveryCallback)>
<com.android.server.trust.TrustAgentWrapper: void onUnlockLockout(int)>
<android.net.wifi.p2p.nsd.WifiP2pServiceInfo: int hashCode()>
<com.android.server.integrity.parser.RuleParseException: void <init>(java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setActualHeightAnimating(boolean)>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator: android.view.RemoteAnimationAdapter getLaunchAnimation(android.view.View,boolean)>
<com.android.server.pm.PackageSetting: int getSharedUserId()>
<com.android.server.pm.KeySetManagerService: boolean isIdValidKeySetId(long)>
<com.android.server.pm.permission.PermissionsState: void reset()>
<com.android.systemui.qs.customize.TileQueryHelper: void <init>(android.content.Context,java.util.concurrent.Executor,java.util.concurrent.Executor)>
<com.android.server.os.BugreportManagerService: void onStart()>
<com.android.server.display.VirtualDisplayAdapter.SurfaceControlDisplayFactory: android.os.IBinder createDisplay(java.lang.String,boolean)>
<com.android.server.locksettings.recoverablekeystore.KeyStoreProxy: java.security.Key getKey(java.lang.String,char[])>
<com.android.systemui.classifier.FalsingManagerFake: void onStartExpandingFromPulse()>
<com.android.server.pm.PackageInstallerSession: java.lang.String[] getNames()>
<com.android.settingslib.CustomEditTextPreferenceCompat.CustomPreferenceDialogFragment: void onBindDialogView(android.view.View)>
<android.view.textclassifier.TextClassifierPerfTest: java.util.Collection data()>
<com.android.printspooler.util.PageRangeUtils: void offset(android.print.PageRange[],int)>
<com.android.server.autofill.ui.AutoFillUI: void dump(java.io.PrintWriter)>
<android.net.ip.IpServer.Callback: void updateInterfaceState(android.net.ip.IpServer,int,int)>
<com.android.settingslib.schedulesprovider.ScheduleInfo.Builder: com.android.settingslib.schedulesprovider.ScheduleInfo.Builder setTitle(java.lang.String)>
<android.net.wifi.WifiManager: java.util.Map getMatchingPasspointConfigsForOsuProviders(java.util.Set)>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: java.lang.Object[] toArray()>
<com.android.server.utils.quota.CountQuotaTracker: boolean noteEvent(int,java.lang.String,java.lang.String)>
<com.android.uiautomator.core.UiDevice: boolean pressRecentApps()>
<com.android.server.pm.SharedUserSetting: java.lang.String toString()>
<android.net.wifi.WifiInfo: int getMaxSupportedTxLinkSpeedMbps()>
<android.os.IStatsManagerService: void removeDataFetchOperation(long,java.lang.String)>
<com.android.systemui.assist.ui.CornerPathRenderer: android.graphics.Path getInsetPath(com.android.systemui.assist.ui.CornerPathRenderer.Corner,float)>
<com.android.systemui.recents.RecentsImplementation: void showRecentApps(boolean)>
<com.android.server.pm.Installer: void <init>(android.content.Context,boolean)>
<com.android.networkstack.tethering.TetheringNotificationUpdater: void <init>(android.content.Context,android.os.Looper)>
<com.android.systemui.car.notification.NotificationPanelViewController: boolean shouldShowHUN()>
<com.android.server.usb.descriptors.report.UsbStrings: java.lang.String getClassName(int)>
<com.android.systemui.ActivityStarterDelegate: void dismissKeyguardThenExecute(com.android.systemui.plugins.ActivityStarter.OnDismissAction,java.lang.Runnable,boolean)>
<com.android.server.devicepolicy.CertificateMonitor: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,com.android.server.devicepolicy.DevicePolicyManagerService.Injector,android.os.Handler)>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: void setSystemBarsBehavior(int)>
<com.android.server.statusbar.StatusBarManagerService: void onNotificationClick(java.lang.String,com.android.internal.statusbar.NotificationVisibility)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void routeToTvInputFromPortId(int)>
<com.android.server.accessibility.AccessibilityManagerService: android.view.MagnificationSpec getCompatibleMagnificationSpecLocked(int)>
<com.android.systemui.statusbar.phone.StatusBar: void handleVisibleToUserChanged(boolean)>
<com.android.keyguard.KeyguardHostView: void onCancelClicked()>
<com.android.systemui.statusbar.notification.stack.AnimationProperties: android.view.animation.Interpolator getCustomInterpolator(android.view.View,android.util.Property)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setPrivileged(boolean)>
<com.android.server.accessibility.gestures.TouchState: void onReceivedMotionEvent(android.view.MotionEvent)>
<com.android.server.tv.TvInputHardwareManager.Listener: void onHdmiDeviceAdded(android.hardware.hdmi.HdmiDeviceInfo)>
<com.android.server.slice.SliceFullAccessList: void upgradeXml(int,int)>
<com.android.powermodel.PowerReport: java.util.List findApp(java.lang.String)>
<com.android.server.people.data.Event: java.lang.String toString()>
<android.net.ip.IpClientUtil.WaitForProvisioningCallbacks: android.net.LinkProperties waitForProvisioning()>
<com.android.printspooler.model.PageContentRepository.RenderSpec: int hashCode()>
<com.android.systemui.Somnambulator: void onStart()>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: void add(int,android.view.MotionEvent)>
<com.android.server.people.data.ConversationInfo: java.lang.String toString()>
<android.app.StatsManager: byte[] getReports(long)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: boolean isDiscovering()>
<com.android.server.soundtrigger_middleware.SoundTriggerHw2Enforcer: void getModelState(int)>
<com.android.server.usb.descriptors.UsbMSMidiOutputJack: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.settingslib.bluetooth.PbapClientProfile: boolean isEnabled(android.bluetooth.BluetoothDevice)>
<com.android.server.appprediction.AppPredictionPerUserService: void registerPredictionUpdatesLocked(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
<com.android.server.pm.PackageManagerService: boolean hasSystemFeature(java.lang.String,int)>
<com.android.server.pm.permission.PermissionManagerService: boolean addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int,int)>
<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardSecure(int)>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: java.lang.String getRootViewTitle()>
<com.android.settingslib.accounts.AuthenticatorHelper: java.util.ArrayList getAuthoritiesForAccountType(java.lang.String)>
<com.android.networkstack.tethering.IPv6TetheringCoordinator: void <init>(java.util.ArrayList,android.net.util.SharedLog)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean keepInParent()>
<com.android.systemui.SwipeHelper.Callback: float getFalsingThresholdFactor()>
<com.android.server.pm.ShortcutService: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: float getExpandedY()>
<android.net.wifi.WifiManager: boolean isWpa3SuiteBSupported()>
<com.android.server.NetworkManagementService: void registerNetworkActivityListener(android.os.INetworkActivityListener)>
<com.android.systemui.statusbar.phone.DoubleTapHelper.ActivationListener: void onActiveChanged(boolean)>
<com.android.server.accessibility.AccessibilityManagerService: android.os.IBinder getWindowToken(int,int)>
<com.android.server.usb.descriptors.Usb10ACInputTerminal: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<android.net.wifi.hotspot2.pps.Policy: long getMinRoamingDownlinkBandwidth()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setInflationTask(com.android.systemui.statusbar.InflationTask)>
<com.android.server.usb.descriptors.UsbEndpointDescriptor: int getAttributes()>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: void dispatchWindowInsetsAnimationPrepare(android.view.WindowInsetsAnimation)>
<com.android.server.slice.SliceClientPermissions.SliceAuthority: void <init>(java.lang.String,com.android.server.slice.SlicePermissionManager.PkgUser,com.android.server.slice.DirtyTracker)>
<com.android.printspooler.ui.SelectPrinterActivity: void onStart()>
<com.android.settingslib.fuelgauge.PowerWhitelistBackend: boolean isSysWhitelistedExceptIdle(java.lang.String[])>
<com.android.systemui.biometrics.AuthBiometricView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.car.voicerecognition.ConnectedDeviceVoiceRecognitionNotifier: void <init>(android.content.Context,android.os.Handler)>
<com.android.server.appop.AppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>
<android.net.wifi.hotspot2.PasspointConfiguration: void setMacRandomizationEnabled(boolean)>
<android.perftests.utils.OneTimeSettingsListener: void onChange(boolean,android.net.Uri)>
<com.android.server.IntentResolver: void dumpFilterLabel(java.io.PrintWriter,java.lang.String,java.lang.Object,int)>
<android.app.usage.UsageStatsManagerInternal: void reportAppJobState(java.lang.String,int,int,long)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: java.lang.String getConnectionSummary()>
<com.android.future.usb.UsbAccessory: int hashCode()>
<com.android.systemui.statusbar.phone.StatusBarIconList.Slot: java.lang.String getName()>
<com.android.systemui.qs.tiles.HotspotTile: java.lang.CharSequence getTileLabel()>
<com.android.systemui.statusbar.notification.dagger.NotificationsModule: com.android.systemui.statusbar.notification.row.NotificationBlockingHelperManager provideNotificationBlockingHelperManager(android.content.Context,com.android.systemui.statusbar.notification.row.NotificationGutsManager,com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.internal.logging.MetricsLogger)>
<com.android.uiautomator.core.UiObject: com.android.uiautomator.core.UiObject getFromParent(com.android.uiautomator.core.UiSelector)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage removeUsesOptionalLibrary(java.lang.String)>
<com.android.settingslib.deviceinfo.AbstractBluetoothAddressPreferenceController: void displayPreference(androidx.preference.PreferenceScreen)>
<com.android.server.pm.SharedUserSetting: com.android.server.pm.SharedUserSetting updateFrom(com.android.server.pm.SharedUserSetting)>
<com.android.server.media.MediaRouterService: void startScan(android.media.IMediaRouter2Manager)>
<com.android.systemui.statusbar.policy.BatteryController: boolean isAodPowerSave()>
<javax.obex.ObexHelper: byte[] updateHeaderSet(javax.obex.HeaderSet,byte[])>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)>
<com.android.server.SystemService: void publishBinderService(java.lang.String,android.os.IBinder,boolean,int)>
<com.android.server.vr.VrManagerService: void onCleanupUser(int)>
<com.android.systemui.volume.VolumeDialogComponent: void <init>(android.content.Context,com.android.systemui.keyguard.KeyguardViewMediator,com.android.systemui.volume.VolumeDialogControllerImpl)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)>
<com.android.systemui.statusbar.notification.row.NotificationGuts.GutsContent: void onFinishedClosing()>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService.ResourcesReclaimListenerRecord: int getId()>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: void setUpWithPresenter(com.android.systemui.statusbar.NotificationPresenter)>
<com.android.settingslib.core.lifecycle.ObservableFragment: boolean onOptionsItemSelected(android.view.MenuItem)>
<com.android.systemui.statusbar.phone.LightBarTransitionsController: void appTransitionStarting(int,long,long,boolean)>
<com.android.server.autofill.ui.InlineFillUi: com.android.server.autofill.ui.InlineFillUi forAutofill(android.view.inputmethod.InlineSuggestionsRequest,android.service.autofill.FillResponse,android.view.autofill.AutofillId,java.lang.String,com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback,java.lang.Runnable,com.android.server.autofill.RemoteInlineSuggestionRenderService,int,int)>
<com.android.systemui.doze.DozeMachine.Part: void onScreenState(int)>
<com.android.server.Watchdog: com.android.server.Watchdog getInstance()>
<com.android.keyguard.KeyguardAbsKeyInputView: void onAttachedToWindow()>
<com.android.systemui.keyguard.DismissCallbackWrapper: void <init>(com.android.internal.policy.IKeyguardDismissCallback)>
<com.android.keyguard.KeyguardUpdateMonitor: int getNextSubIdForState(int)>
<com.android.systemui.pip.phone.PipManager: void onPipTransitionCanceled(android.content.ComponentName,int)>
<com.android.printspooler.model.CustomPrinterIconCache: void removeOldFiles(int)>
<com.android.keyguard.KeyguardMessageArea: void onAttachedToWindow()>
<com.android.systemui.ImageWallpaper: void onDestroy()>
<com.android.server.security.VerityUtils.SetupResult: com.android.server.security.VerityUtils.SetupResult ok(java.io.FileDescriptor,int)>
<com.android.systemui.statusbar.ScrimView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setKeepUninstalledPackages(android.content.ComponentName,java.lang.String,java.util.List)>
<com.android.systemui.shared.system.ActivityCompat: void registerRemoteAnimations(com.android.systemui.shared.system.RemoteAnimationDefinitionCompat)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void onConfigurationChanged()>
<android.net.wifi.hotspot2.pps.Policy: void setPolicyUpdate(android.net.wifi.hotspot2.pps.UpdateParameter)>
<android.net.wifi.aware.ConfigRequest.Builder: android.net.wifi.aware.ConfigRequest.Builder setClusterLow(int)>
<com.android.systemui.qs.QSAnimator: void onAnimationAtEnd()>
<com.android.systemui.doze.DozeHost: boolean isPowerSaveActive()>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: java.util.List getActivities()>
<com.android.server.accounts.AccountManagerService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<com.android.server.pm.dex.DexManager: void load(java.util.Map)>
<com.android.systemui.statusbar.notification.logging.NotificationLogger.ExpansionStateLogger: void <init>(java.util.concurrent.Executor)>
<com.android.server.pm.ShortcutService: java.lang.String injectGetLocaleTagsForUser(int)>
<com.android.systemui.bubbles.BubbleExpandedView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.statusbar.policy.BrightnessMirrorController: void setLocation(android.view.View)>
<com.android.systemui.car.volume.CarVolumeItemAdapter: void onBindViewHolder(com.android.systemui.car.volume.CarVolumeItem.CarVolumeItemViewHolder,int)>
<com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder: com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder rowContentBindStage(com.android.systemui.statusbar.notification.row.RowContentBindStage)>
<com.android.server.audio.PlaybackActivityMonitor: void mutePlayersForCall(int[])>
<com.android.gallery3d.glrenderer.GLCanvas: void setSize(int,int)>
<com.android.settingslib.core.lifecycle.ObservableActivity: void onStop()>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setSystem(boolean)>
<android.text.StaticLayoutPerfTest: void testDraw_RandomText_Styled_WithoutCache()>
<com.android.systemui.statusbar.notification.CustomInterpolatorTransformation: boolean transformTo(com.android.systemui.statusbar.notification.TransformState,com.android.systemui.statusbar.TransformableView,float)>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setPressedAllowed(boolean)>
<com.android.settingslib.wifi.AccessPointPreference: void onLevelChanged()>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: boolean isBluetoothAudioProfileOnly()>
<com.android.server.systemcaptions.SystemCaptionsManagerService: com.android.server.systemcaptions.SystemCaptionsManagerPerUserService newServiceLocked(int,boolean)>
<com.android.server.usb.descriptors.Usb20ASFormatIIEx: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.systemui.statusbar.policy.CastControllerImpl: void setDiscovering(boolean)>
<com.android.keyguard.KeyguardUpdateMonitor: void registerCallback(com.android.keyguard.KeyguardUpdateMonitorCallback)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean handleSlideBack()>
<android.net.wifi.p2p.WifiP2pWfdInfo: boolean isEnabled()>
<com.android.printservice.recommendation.util.MDNSFilteredDiscovery.PrinterFilter: boolean matchesCriteria(android.net.nsd.NsdServiceInfo)>
<android.app.ResourcesPerfTest: void getLayoutAndTravese()>
<com.android.systemui.qs.PagedTileLayout: boolean setMinRows(int)>
<com.android.systemui.statusbar.policy.HotspotControllerImpl: void onConnectedClientsChanged(java.util.List)>
<com.android.packageinstaller.television.UninstallAlertFragment: void onCreateActions(java.util.List,android.os.Bundle)>
<com.android.settingslib.inputmethod.InputMethodSettingValuesWrapper: com.android.settingslib.inputmethod.InputMethodSettingValuesWrapper getInstance(android.content.Context)>
<com.android.systemui.analytics.SensorLoggerSession: long getStartTimestampMillis()>
<com.android.printspooler.model.MutexFileProvider.OnReleaseRequestCallback: void onReleaseRequested(java.io.File)>
<com.android.server.integrity.parser.RuleIndexRange: java.lang.String toString()>
<com.android.keyguard.clock.BubbleClockController: java.lang.String getName()>
<com.android.photos.views.TiledImageRenderer.TileSource: int getImageWidth()>
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig build()>
<com.android.systemui.tuner.TunerActivity: void onCreate(android.os.Bundle)>
<com.android.server.locksettings.ManagedProfilePasswordCache: com.android.internal.widget.LockscreenCredential retrievePassword(int)>
<javax.obex.ObexTransport: int getMaxTransmitPacketSize()>
<android.graphics.perftests.TypefaceCreatePerfTest: void testCreate_fromResources()>
<com.android.systemui.statusbar.phone.ExpandableIndicator: void setDefaultDirection(boolean)>
<com.android.systemui.car.CarDeviceProvisionedListener: void onUserSwitched()>
<com.android.systemui.pip.tv.PipMenuActivity: void onPipResizeAboutToStart()>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void <init>(int)>
<com.android.server.stats.StatsManagerService: void setBroadcastSubscriber(long,long,android.app.PendingIntent,java.lang.String)>
<android.net.wifi.rtt.IWifiRttManager: void cancelRanging(android.os.WorkSource)>
<android.net.wifi.p2p.WifiP2pDeviceList: int describeContents()>
<com.android.server.DynamicSystemService: boolean setEnable(boolean,boolean)>
<com.android.server.voiceinteraction.VoiceInteractionSessionConnection.Callback: void sessionConnectionGone(com.android.server.voiceinteraction.VoiceInteractionSessionConnection)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onBiometricRunningStateChanged(boolean,android.hardware.biometrics.BiometricSourceType)>
<com.android.settingslib.display.DisplayDensityUtils: int getCurrentIndex()>
<com.android.systemui.statusbar.policy.AccessibilityController.AccessibilityStateChangedCallback: void onStateChanged(boolean,boolean)>
<com.android.systemui.bubbles.animation.AnimatableScaleMatrix: boolean equals(java.lang.Object)>
<com.android.commands.incident.ExecutionException: void <init>(java.lang.Exception)>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo.OnSnoozeClickListener: void onClick(android.view.View,int)>
<com.android.encryptedlocaltransport.EncryptedLocalTransport: boolean hasRestoreDataForPackage(java.lang.String)>
<com.android.settingslib.core.lifecycle.Lifecycle: void <init>(androidx.lifecycle.LifecycleOwner)>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setLastInSection(boolean)>
<com.android.systemui.statusbar.phone.StatusIconContainer: void setShouldRestrictIcons(boolean)>
<com.android.systemui.statusbar.policy.AccessibilityController: boolean isTouchExplorationEnabled()>
<com.android.server.policy.PhoneWindowManager: void applyKeyguardPolicyLw(com.android.server.policy.WindowManagerPolicy.WindowState,com.android.server.policy.WindowManagerPolicy.WindowState)>
<com.android.uiautomator.core.UiAutomatorBridge: boolean isScreenOn()>
<com.android.systemui.statusbar.notification.row.HybridNotificationView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.statusbar.phone.NavigationHandle: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void removeIcon(int,int)>
<com.android.systemui.statusbar.policy.SmartReplyConstants: boolean getShowInHeadsUp()>
<com.android.server.accessibility.gestures.GestureManifold.Listener: boolean onGestureStarted()>
<com.android.keyguard.KeyguardSliceView.Row: void onMeasure(int,int)>
<com.android.gallery3d.exif.ExifTag: boolean setValue(long[])>
<com.android.systemui.dagger.ContextComponentHelper: android.content.BroadcastReceiver resolveBroadcastReceiver(java.lang.String)>
<com.android.printspooler.model.CustomPrinterIconCache: android.graphics.drawable.Icon getIcon(android.print.PrinterId)>
<com.android.server.AppStateTracker: void dumpProto(android.util.proto.ProtoOutputStream,long)>
<com.android.server.usb.descriptors.UsbConfigDescriptor: int getMaxPower()>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.commands.bmgr.BmgrTest: void setUp()>
<com.android.systemui.glwallpaper.EglHelper: boolean createEglSurface(android.view.SurfaceHolder,boolean)>
<com.android.systemui.classifier.DirectionEvaluator: float evaluate(float,float,int)>
<com.android.systemui.qs.tiles.DataUsageDetailView: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.AllAnimationsForPropertyFinishedEndListener: void onAnimationEnd(androidx.dynamicanimation.animation.DynamicAnimation,boolean,float,float)>
<com.android.systemui.car.hvac.AnimatedTemperatureView: void setTemp(float)>
<com.android.systemui.plugins.qs.QSTile: com.android.systemui.plugins.qs.QSTile.State getState()>
<com.android.systemui.tuner.LockscreenFragment.LockButtonFactory: void <init>(android.content.Context,java.lang.String)>
<android.media.MediaParser.SeekMap: android.util.Pair getSeekPoints(long)>
<com.android.server.MmsServiceBroker: void onStart()>
<com.android.systemui.tuner.SelectablePreference: java.lang.String toString()>
<javax.obex.ServerOperation: java.lang.String getEncoding()>
<com.android.systemui.statusbar.notification.row.AppOpsInfo: boolean shouldBeSaved()>
<com.android.server.IpSecService: void deleteTunnelInterface(int,java.lang.String)>
<com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey: void <init>(int,android.security.keystore.AndroidKeyStoreSecretKey)>
<com.android.server.audio.AudioService: int getStreamVolume(int)>
<com.android.systemui.statusbar.notification.stack.NotificationSection: boolean needsBackground()>
<android.net.wifi.WifiManager.MulticastLock: void finalize()>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: void onUserSwitched(int)>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator.ExpandAnimationParameters: float getProgress()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isVmSafeMode()>
<android.net.wifi.hotspot2.pps.Policy.RoamingPartner: boolean validate()>
<com.android.systemui.statusbar.ScreenRecordDrawable: int getIntrinsicWidth()>
<com.android.settingslib.net.NetworkCycleData.Builder: com.android.settingslib.net.NetworkCycleData getObject()>
<com.google.android.startop.iorap.ActivityHintEvent: boolean equals(java.lang.Object)>
<com.android.server.SerialService: void <init>(android.content.Context)>
<com.android.server.biometrics.face.FaceUserState: void parseBiometricsLocked(org.xmlpull.v1.XmlPullParser)>
<com.android.systemui.qs.tiles.BatterySaverTile: void handleSetListening(boolean)>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getImplicitPermissions()>
<com.android.systemui.statusbar.phone.StatusBar: void showChargingAnimation(int,int,long)>
<com.android.server.contentsuggestions.RemoteContentSuggestionsService: long getTimeoutIdleBindMillis()>
<com.android.systemui.qs.SlashDrawable: void setTintList(android.content.res.ColorStateList)>
<com.android.server.AppStateTracker.Listener: void unblockAllUnrestrictedAlarms()>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: boolean requestDescramblerInternal(android.media.tv.tunerresourcemanager.TunerDescramblerRequest,int[])>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: byte getSerialIndex()>
<com.android.systemui.statusbar.phone.StatusBar: android.view.View getStatusBarView()>
<com.android.server.pm.PackageManagerService: android.content.pm.KeySet getKeySetByAlias(java.lang.String,java.lang.String)>
<com.android.systemui.classifier.FalsingManagerImpl: void setQsExpanded(boolean)>
<com.android.server.accessibility.AccessibilityWindowManager: android.view.WindowInfo findWindowInfoByIdLocked(int)>
<com.android.server.webkit.SystemImpl: android.webkit.WebViewProviderInfo[] getWebViewPackages()>
<com.android.systemui.qs.tileimpl.QSTileBaseView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)>
<android.net.ip.IpClientManager: boolean setMulticastFilter(boolean)>
<com.android.systemui.shared.system.TaskStackChangeListener: void onActivityPinned(java.lang.String,int,int,int)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector className(java.lang.String)>
<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String getCurrentRuleSetProvider()>
<com.android.settingslib.widget.AdaptiveOutlineDrawable: int getIntrinsicHeight()>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setProduct(boolean)>
<com.android.uiautomator.core.UiObject: void <init>(com.android.uiautomator.core.UiSelector)>
<com.android.settingslib.core.ConfirmationDialogController: void dismissConfirmationDialog()>
<com.android.systemui.statusbar.RemoteInputController.Delegate: void setRemoteInputActive(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.server.twilight.TwilightListener: void onTwilightStateChanged(com.android.server.twilight.TwilightState)>
<com.android.systemui.car.navigationbar.NavigationBarViewFactory: void <init>(android.content.Context)>
<com.android.server.soundtrigger_middleware.RecoverableException: void <init>(int)>
<android.net.wifi.WifiManager: void startSubscriptionProvisioning(android.net.wifi.hotspot2.OsuProvider,java.util.concurrent.Executor,android.net.wifi.hotspot2.ProvisioningCallback)>
<android.net.ip.IpClientCallbacks: void onNewDhcpResults(android.net.DhcpResultsParcelable)>
<com.android.systemui.qs.QSFragment: void <init>(com.android.systemui.statusbar.policy.RemoteInputQuickSettingsDisabler,com.android.systemui.util.InjectionInflationController,com.android.systemui.qs.QSTileHost,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.CommandQueue,com.android.systemui.qs.QSContainerImplController.Builder)>
<com.android.systemui.classifier.FalsingManagerImpl: android.net.Uri reportRejectedTouch()>
<com.android.systemui.statusbar.policy.BatteryController.BatteryStateChangeCallback: void onBatteryUnknownStateChanged(boolean)>
<com.android.server.pm.UserManagerService.LifeCycle: void onStartUser(int)>
<com.android.settingslib.applications.ServiceListing.Builder: com.android.settingslib.applications.ServiceListing.Builder setAddDeviceLockedFlags(boolean)>
<android.net.wifi.IWifiManager: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)>
<com.android.server.policy.WindowManagerPolicy: android.view.animation.Animation createKeyguardWallpaperExit(boolean)>
<com.android.systemui.qs.QSAnimator: void onQsScrollingChanged()>
<com.android.systemui.assist.AssistHandleBehaviorController: void showAndGoDelayed(long,boolean)>
<com.android.systemui.qs.QSTileHost: java.util.Collection getTiles()>
<com.android.server.locksettings.LockSettingsService: void onCleanupUser(int)>
<android.net.TcpKeepalivePacketData: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.shared.plugins.PluginInstanceManager.PluginContextWrapper: java.lang.ClassLoader getClassLoader()>
<com.android.settingslib.development.AbstractEnableAdbPreferenceController: boolean handlePreferenceTreeClick(androidx.preference.Preference)>
<com.android.server.biometrics.fingerprint.FingerprintUtils: com.android.server.biometrics.fingerprint.FingerprintUtils getInstance()>
<com.android.server.NetworkScoreService.Lifecycle: void onStart()>
<com.android.settingslib.location.SettingsInjector: androidx.preference.Preference createPreference(android.content.Context,com.android.settingslib.location.InjectedSetting)>
<com.android.systemui.statusbar.phone.ButtonInterface: void setImageDrawable(android.graphics.drawable.Drawable)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setDozing(boolean)>
<com.android.systemui.classifier.ProximityClassifier: void onSensorChanged(android.hardware.SensorEvent)>
<com.android.systemui.plugins.ActivityStarter: void startActivity(android.content.Intent,boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void bindRow(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.recoverysystem.RecoverySystemService.UncryptSocket: void sendCommand(java.lang.String)>
<com.android.systemui.car.volume.CarVolumeDialogImpl: void rescheduleTimeoutH()>
<com.android.server.incident.IncidentCompanionService: void <init>(android.content.Context)>
<com.android.server.NetworkManagementService: void addVpnUidRanges(int,android.net.UidRange[])>
<com.android.systemui.statusbar.AlphaOptimizedTextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.os.ParcelArrayPerfTest: void <init>(int)>
<com.android.systemui.statusbar.phone.NotificationIconContainer: boolean hasPartialOverflow()>
<com.android.systemui.statusbar.NotificationPresenter: boolean isPresenterFullyCollapsed()>
<com.android.systemui.recents.Recents: void hideRecentApps(boolean,boolean)>
<com.android.server.policy.WindowManagerPolicy: void keepScreenOnStartedLw()>
<com.android.settingslib.utils.ThreadUtils: void postOnMainThread(java.lang.Runnable)>
<com.android.server.security.VerityUtils.SetupResult: int getContentSize()>
<com.android.systemui.statusbar.policy.SecurityController: boolean isVpnEnabled()>
<com.android.server.emergency.EmergencyAffordanceService: void onBootPhase(int)>
<com.android.server.usb.descriptors.UsbASFormat: com.android.server.usb.descriptors.UsbDescriptor allocDescriptor(com.android.server.usb.descriptors.UsbDescriptorParser,com.android.server.usb.descriptors.ByteStream,int,byte,byte,int)>
<com.android.systemui.statusbar.phone.StatusBar: void togglePanel()>
<com.android.systemui.screenrecord.RecordingController: void stopRecording()>
<com.android.server.AttributeCache.Package: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void runAfterAnimationFinished(java.lang.Runnable)>
<com.android.systemui.doze.DozeMachine: int getPulseReason()>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void setActualPaddingStart(float)>
<com.android.uiautomator.core.ShellUiAutomatorBridge: android.view.Display getDefaultDisplay()>
<com.android.server.biometrics.LoggableMonitor: void logOnAuthenticated(android.content.Context,boolean,boolean,int,boolean)>
<com.android.server.pm.parsing.PackageParser2: void close()>
<android.os.IPendingIntentRef: void sendActiveConfigsChangedBroadcast(long[])>
<com.android.settingslib.media.BluetoothMediaDevice: java.lang.String getId()>
<com.android.server.trust.TrustArchive: void logDevicePolicyChanged()>
<com.android.systemui.doze.DozeTriggers: void onScreenState(int)>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: void setCertType(java.lang.String)>
<com.android.systemui.util.leak.LeakReporter: void <init>(android.content.Context,com.android.systemui.util.leak.LeakDetector,java.lang.String)>
<com.android.systemui.statusbar.phone.PanelViewController: boolean canCollapsePanelOnTouch()>
<com.android.systemui.shared.system.MetricsLoggerCompat: void hidden(int)>
<com.android.server.slice.SliceManagerService: int checkSlicePermission(android.net.Uri,java.lang.String,java.lang.String,int,int,java.lang.String[])>
<com.android.systemui.statusbar.KeyguardIndicationController: void onDozingChanged(boolean)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onScreenTurnedOn()>
<com.android.systemui.statusbar.phone.StatusBarRemoteInputCallback: void onLockedWorkRemoteInput(int,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,android.view.View)>
<com.android.systemui.statusbar.CastDrawable: android.graphics.drawable.Drawable mutate()>
<com.android.systemui.car.hvac.TemperatureView: int getPropertyId()>
<android.net.wifi.WifiClient: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.policy.RemoteInputView: android.content.Intent prepareRemoteInputFromText()>
<com.android.server.timedetector.TimeDetectorStrategyImpl: android.app.timedetector.NetworkTimeSuggestion findLatestValidNetworkSuggestionForTests()>
<com.android.photos.views.TiledImageRenderer.TileSource: android.graphics.Bitmap getTile(int,int,int,android.graphics.Bitmap)>
<com.android.systemui.shared.recents.model.Task: java.lang.String toString()>
<com.android.systemui.keyguard.KeyguardSliceProvider: void onNextAlarmChanged(android.app.AlarmManager.AlarmClockInfo)>
<com.android.systemui.statusbar.notification.row.NotificationGuts.GutsContent: boolean isLeavebehind()>
<com.android.systemui.qs.tiles.WorkModeTile: java.lang.String composeChangeAnnouncement()>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void unDismiss()>
<com.android.systemui.statusbar.phone.NearestTouchFrame: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.qs.SlashDrawable: void <init>(android.graphics.drawable.Drawable)>
<com.android.server.pm.permission.BasePermission: boolean isRuntime()>
<com.android.settingslib.NetworkPolicyEditor: void read()>
<com.android.server.utils.ManagedApplicationService.EventCallback: void onServiceEvent(com.android.server.utils.ManagedApplicationService.LogEvent)>
<com.android.systemui.car.window.OverlayPanelViewController: boolean isOpeningAction(android.view.MotionEvent)>
<com.android.server.stats.StatsCompanionService: void cancelAlarmForSubscriberTriggering()>
<com.android.server.adb.AdbService.Lifecycle: void onStart()>
<com.android.systemui.car.hvac.TemperatureView: void setTemp(float)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: boolean isAnyProfilePublicMode()>
<android.net.wifi.aware.Characteristics: int getMaxServiceSpecificInfoLength()>
<com.android.server.protolog.ProtoLogImpl: com.android.server.protolog.ProtoLogImpl getSingleInstance()>
<android.util.StatsLog: void writeRaw(byte[],int)>
<com.android.systemui.classifier.FalsingLog: void dump(java.io.PrintWriter)>
<com.android.settingslib.graph.SignalDrawable: int getState(int)>
<com.android.settingslib.core.instrumentation.EventLogWriter: void action(android.content.Context,int,java.lang.String)>
<com.android.server.pm.pkg.PackageStateUnserialized: com.android.server.pm.pkg.PackageStateUnserialized setUsesLibraryFiles(java.util.List)>
<android.app.StatsManager: byte[] getStatsMetadata()>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: void onSnapClosed()>
<android.net.NetworkMonitorManager: boolean forceReevaluation(int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isGroupNotFullyVisible()>
<com.android.settingslib.Utils: android.graphics.drawable.Drawable getBadgedIcon(android.content.Context,android.content.pm.ApplicationInfo)>
<android.net.wifi.AnqpInformationElement: int getVendorId()>
<com.android.systemui.statusbar.phone.StatusBar: void onClosingFinished()>
<com.android.server.biometrics.fingerprint.FingerprintAuthenticator: void cancelAuthenticationFromService(android.os.IBinder,java.lang.String,int,int,int,boolean)>
<com.android.systemui.statusbar.notification.collection.inflation.NotificationRowBinder: void onNotificationRankingUpdated(com.android.systemui.statusbar.notification.collection.NotificationEntry,java.lang.Integer,com.android.systemui.statusbar.NotificationUiAdjustment,com.android.systemui.statusbar.NotificationUiAdjustment,com.android.systemui.statusbar.notification.row.NotificationRowContentBinder.InflationCallback)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void expandWithoutQs()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void onStateChanged(int)>
<com.android.systemui.stackdivider.DividerView: boolean onTouch(android.view.View,android.view.MotionEvent)>
<com.android.systemui.plugins.qs.QS: void animateHeaderSlidingOut()>
<com.android.systemui.statusbar.phone.NotificationIconContainer: int getActualWidth()>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getStorageEncryptionStatus(java.lang.String,int)>
<com.android.systemui.ActivityIntentHelper: boolean wouldLaunchResolverActivity(android.content.Intent,int)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceSettings: void onDisplayWhiteBalanceStatusChanged(boolean)>
<android.os.PackageManagerPerfTest: void testCheckPermissionExists()>
<com.android.server.locksettings.LockSettingsService: boolean setLockCredential(com.android.internal.widget.LockscreenCredential,com.android.internal.widget.LockscreenCredential,int)>
<com.android.systemui.car.notification.NotificationPanelViewMediator: void setupOverlayContentViewControllers()>
<com.android.systemui.car.bluetooth.CarBatteryController: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.qs.AlphaControlledSignalTileView: com.android.systemui.qs.tileimpl.SlashImageView createSlashImageView(android.content.Context)>
<com.android.systemui.wm.SystemWindows.SysUiWindowManager: int relayout(android.view.IWindow,int,android.view.WindowManager.LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout.ParcelableWrapper,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl[],android.graphics.Point,android.view.SurfaceControl)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator position(float,float,java.lang.Runnable[])>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: int getDevSubClass()>
<com.android.server.policy.WindowManagerPolicy: void screenTurningOn(com.android.server.policy.WindowManagerPolicy.ScreenOnListener)>
<com.android.server.pm.PackageInstallerSession: boolean isMultiPackage()>
<com.android.keyguard.KeyguardPasswordView: void setPasswordEntryEnabled(boolean)>
<com.android.gallery3d.common.BitmapUtils: boolean isSupportedByRegionDecoder(java.lang.String)>
<com.android.settingslib.net.NetworkCycleDataLoader: void onStopLoading()>
<javax.microedition.khronos.opengles.GL10: void glSampleCoveragex(int,boolean)>
<com.android.systemui.globalactions.GlobalActionsDialog.MyAdapter: int countListItems()>
<com.android.systemui.util.DismissCircleView: void onConfigurationChanged(android.content.res.Configuration)>
<android.net.wifi.WifiScanner.ScanSettings: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: void setTranslationY(float)>
<com.android.systemui.qs.external.TileColorPicker: com.android.systemui.qs.external.TileColorPicker getInstance(android.content.Context)>
<com.android.systemui.statusbar.phone.PanelViewController: void onExpandingStarted()>
<com.android.systemui.statusbar.policy.RemoteInputView.RemoteEditText: void onVisibilityChanged(android.view.View,int)>
<com.android.server.UpdateLockService: void releaseUpdateLock(android.os.IBinder)>
<com.android.systemui.statusbar.policy.NetworkController: boolean isMobileDataNetworkInService()>
<com.android.systemui.statusbar.phone.NotificationsQuickSettingsContainer: void onFragmentViewCreated(java.lang.String,android.app.Fragment)>
<com.android.server.twilight.TwilightState: int hashCode()>
<com.android.systemui.qs.tiles.BluetoothTile.BluetoothDetailAdapter: int getMetricsCategory()>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void removePendingHideExpandedRunnables()>
<com.android.egg.neko.Food: android.graphics.drawable.Icon getIcon(android.content.Context)>
<com.android.systemui.qs.tiles.HotspotTile: android.content.Intent getLongClickIntent()>
<com.android.server.pm.Installer: void clearAppProfiles(java.lang.String,java.lang.String)>
<com.android.settingslib.wifi.WifiTracker: void <init>(android.content.Context,com.android.settingslib.wifi.WifiTracker.WifiListener,com.android.settingslib.core.lifecycle.Lifecycle,boolean,boolean)>
<com.android.systemui.classifier.ProximityClassifier: void onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.plugins.qs.DetailAdapter: void setToggleState(boolean)>
<com.android.systemui.qs.TouchAnimator.ListenerAdapter: void onAnimationAtStart()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setOrganizationColor(android.content.ComponentName,int)>
<android.net.TetheringManager.TetheringRequest: android.net.TetheringRequestParcel getParcel()>
<com.android.server.pm.permission.PermissionManagerServiceInternal.PermissionCallback: void onInstallPermissionGranted()>
<com.android.systemui.plugins.VolumeDialogController.State: java.lang.String toString()>
<com.android.server.biometrics.fingerprint.FingerprintUserState: java.lang.String getBiometricsTag()>
<com.android.server.autofill.AutofillManagerServiceShellCommand: int onCommand(java.lang.String)>
<com.android.permission.persistence.RuntimePermissionsPersistenceImpl: com.android.permission.persistence.RuntimePermissionsState readForUser(android.os.UserHandle)>
<javax.microedition.khronos.opengles.GL10: void glSampleCoverage(float,boolean)>
<com.android.server.wallpaper.WallpaperManagerService: boolean isSetWallpaperAllowed(java.lang.String)>
<android.net.wifi.WifiManager: boolean isDeviceToApRttSupported()>
<android.net.wifi.rtt.RangingResult: int hashCode()>
<com.android.printspooler.ui.FusedPrintersProvider: void forgetFavoritePrinter(android.print.PrinterId)>
<com.android.systemui.qs.QSPanel: com.android.systemui.qs.QSPanel.QSTileLayout createHorizontalTileLayout()>
<com.android.systemui.statusbar.NotificationListener.NotificationHandler: void onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isArcEnabled()>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.util.List getAllCodePaths(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.systemui.statusbar.phone.StatusBar: void onVoiceAssistHintStarted()>
<com.android.server.biometrics.BiometricServiceBase: void removeClient(com.android.server.biometrics.ClientMonitor)>
<com.android.server.soundtrigger.SoundTriggerService.LocalSoundTriggerService: android.hardware.soundtrigger.SoundTrigger.ModuleProperties getModuleProperties()>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStorageException: void <init>(java.lang.String,java.lang.Throwable)>
<com.android.startop.colorchanging.MainActivity: void goBlue(android.view.View)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCallerCanRequestDeviceIdAttestation(android.content.ComponentName,java.lang.String,int)>
<com.android.networkstack.tethering.TetheringDependencies: boolean isTetheringSupported()>
<com.android.settingslib.license.LicenseHtmlLoaderCompat: void onDiscardResult(java.io.File)>
<com.android.systemui.ForegroundServicesUserState: void addOp(java.lang.String,int)>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledPackages(int,int)>
<com.android.egg.neko.Cat: com.android.egg.neko.Cat fromShortcutId(android.content.Context,java.lang.String)>
<com.android.systemui.util.wakelock.SettableWakeLock: void <init>(com.android.systemui.util.wakelock.WakeLock,java.lang.String)>
<com.android.server.pm.UserRestrictionsUtils: boolean isEmpty(android.os.Bundle)>
<javax.obex.ServerRequestHandler: int onAbort(javax.obex.HeaderSet,javax.obex.HeaderSet)>
<com.android.server.accessibility.FullScreenMagnificationGestureHandler.State: void clear()>
<com.android.systemui.doze.DozeWallpaperState: void dump(java.io.PrintWriter)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setActualHeight(int,boolean)>
<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerSession getSession(int)>
<android.net.dhcp.DhcpServingParamsParcelExt: android.net.dhcp.DhcpServingParamsParcelExt setChangePrefixOnDecline(boolean)>
<com.android.server.usb.descriptors.ByteStream: byte getByte()>
<com.android.systemui.statusbar.notification.PropertyAnimator: void cancelAnimation(android.view.View,com.android.systemui.statusbar.notification.AnimatableProperty)>
<com.android.systemui.car.window.OverlayViewController: void <init>(int,com.android.systemui.car.window.OverlayViewGlobalStateController)>
<com.android.server.policy.WindowManagerPolicy: void dump(java.lang.String,java.io.PrintWriter,java.lang.String[])>
<com.android.server.policy.WakeGestureListener: void cancelWakeUpTrigger()>
<android.net.util.InterfaceSet: java.lang.String toString()>
<com.android.photos.BitmapRegionTileSource.FilePathBitmapSource: com.android.photos.SimpleBitmapRegionDecoder loadBitmapRegionDecoder()>
<com.android.startop.colorchanging.MainActivity: void goViolet(android.view.View)>
<javax.microedition.khronos.opengles.GL11Ext: void glEnable(int)>
<com.android.systemui.tuner.TunablePadding: void destroy()>
<android.net.wifi.hotspot2.PasspointConfiguration: long getUsageLimitStartTimeInMillis()>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean isHeadsUpAnimatingAway()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void appTransitionStarting(int,long,long,boolean)>
<android.wm.InternalWindowOperationPerfTest: void testLaunchAndFinishActivity()>
<com.android.server.webkit.SystemInterface: java.lang.String getUserChosenWebViewProvider(android.content.Context)>
<com.android.networkstack.tethering.UpstreamNetworkMonitor: com.android.networkstack.tethering.UpstreamNetworkState getCurrentPreferredUpstream()>
<com.android.server.pm.PackageInstallerSession: void close()>
<com.android.systemui.statusbar.policy.KeyguardStateController: boolean isKeyguardFadingAway()>
<com.android.server.biometrics.Constants: java.lang.String tagHalDied()>
<com.android.server.pm.PackageManagerException: void <init>(java.lang.Throwable)>
<android.app.StatsManager: byte[] getData(long)>
<com.android.systemui.statusbar.notification.TextViewTransformState: void reset()>
<com.android.systemui.VendorServices: void <init>(android.content.Context)>
<com.android.settingslib.deviceinfo.AbstractBluetoothAddressPreferenceController: void <init>(android.content.Context,com.android.settingslib.core.lifecycle.Lifecycle)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void grantDefaultPermissionsToDefaultUseOpenWifiApp(java.lang.String,int)>
<com.android.server.NetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setDefaultSmsApplication(android.content.ComponentName,java.lang.String,boolean)>
<com.android.server.pm.ShortcutService.Lifecycle: void onUnlockUser(int)>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: android.view.MotionEvent remove(int)>
<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: void hidden(android.content.Context,int,int)>
<com.android.server.usb.descriptors.UsbACTerminal: byte getAssocTerminal()>
<com.android.server.audio.MediaFocusControl: boolean duckPlayers(com.android.server.audio.FocusRequester,com.android.server.audio.FocusRequester,boolean)>
<javax.microedition.khronos.opengles.GL11Ext: void glWeightPointerOES(int,int,int,java.nio.Buffer)>
<com.android.server.audio.AudioService: boolean isMicrophoneMuted()>
<com.android.server.slice.SliceShellCommand: void <init>(com.android.server.slice.SliceManagerService)>
<android.processor.view.inspector.InspectableClassModel.Property: boolean isAttributeIdInferrableFromR()>
<com.android.settingslib.inputmethod.InputMethodSubtypePreference: int compareTo(androidx.preference.Preference,java.text.Collator)>
<android.net.wifi.SoftApConfiguration: boolean isClientControlByUserEnabled()>
<com.android.settingslib.drawer.Tile: android.content.Intent getIntent()>
<com.android.systemui.statusbar.policy.LocationControllerImpl: void removeCallback(com.android.systemui.statusbar.policy.LocationController.LocationChangeCallback)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void onNotificationUpdated(android.service.notification.StatusBarNotification)>
<com.android.server.biometrics.AuthenticationClient: boolean isStrongBiometric()>
<com.android.systemui.statusbar.notification.collection.NotifInflaterImpl: void setRowBinder(com.android.systemui.statusbar.notification.collection.inflation.NotificationRowBinderImpl)>
<com.android.systemui.statusbar.notification.row.StackScrollerDecorView: void setContentVisible(boolean)>
<android.net.wifi.WifiSsid: byte[] getOctets()>
<com.android.keyguard.ViewMediatorCallback: void setNeedsInput(boolean)>
<com.android.systemui.bubbles.BubbleOverflow: android.graphics.Path getDotPath()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setGroupExpansionChanging(boolean)>
<com.android.server.wallpaper.WallpaperManagerService: boolean hasNamedWallpaper(java.lang.String)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onBootCompleted()>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: void setKeyguardRequested(boolean)>
<com.android.systemui.statusbar.policy.RemoteInputUriController: void attach(com.android.systemui.statusbar.notification.NotificationEntryManager)>
<com.android.keyguard.KeyguardHostView: boolean hasDismissActions()>
<com.android.systemui.globalactions.ListGridLayout: void setReverseItems(boolean)>
<com.android.server.usb.UsbAlsaDevice: int getCardNum()>
<com.android.systemui.qs.tiles.ColorInversionTile: void handleUserSwitch(int)>
<com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.Pluggable: void setInvalidationListener(com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.Pluggable.PluggableListener)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetIntegerv(int,int[],int)>
<com.android.systemui.shared.recents.utilities.RectFEvaluator: android.graphics.RectF evaluate(float,android.graphics.RectF,android.graphics.RectF)>
<com.android.systemui.keyguard.ScreenLifecycle: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.policy.BurnInProtectionHelper: void onAnimationCancel(android.animation.Animator)>
<com.android.systemui.plugins.FalsingManager: void onTrackingStarted(boolean)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: void setIsDemoable(boolean)>
<com.android.systemui.statusbar.policy.DateView: void setDatePattern(java.lang.String)>
<android.os.UserManagerInternal: boolean isSettingRestrictedForUser(java.lang.String,int,java.lang.String,int)>
<android.widget.TextViewSetTextLocalePerfTest: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<com.android.systemui.doze.DozeHost: boolean isDozeSuppressed()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isOrganizationOwnedDeviceWithManagedProfile()>
<com.android.systemui.biometrics.AuthDialog: void onAuthenticationSucceeded()>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyGenerator: void importKey(com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey,int,int,java.lang.String,byte[],byte[])>
<com.android.systemui.statusbar.phone.ButtonInterface: void setDarkIntensity(float)>
<com.android.server.tv.tunerresourcemanager.ClientProfile.Builder: com.android.server.tv.tunerresourcemanager.ClientProfile build()>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isSystemAudioActivated()>
<com.android.systemui.plugins.qs.QS: void setOverscrolling(boolean)>
<android.text.PrecomputedTextMemoryUsageTest: void setUp()>
<com.android.systemui.recents.OverviewProxyService.OverviewProxyListener: void onAssistantProgress(float)>
<com.android.systemui.statusbar.phone.StatusBar: void fadeKeyguardAfterLaunchTransition(java.lang.Runnable,java.lang.Runnable)>
<android.net.wifi.WifiScanner.ScanData: int getFlags()>
<com.android.printspooler.widget.PrintContentView: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.qs.QSDetail.Callback: void onShowingDetail(com.android.systemui.plugins.qs.DetailAdapter,int,int)>
<com.android.systemui.statusbar.policy.HotspotControllerImpl: void onStateChanged(int,int)>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: void <init>(android.content.Context,android.util.AttributeSet)>
<android.util.StatsEvent.Builder: android.util.StatsEvent.Builder writeString(java.lang.String)>
<com.android.systemui.recents.Recents: void growRecents()>
<com.android.server.display.DisplayInfoProxy: android.view.DisplayInfo get()>
<com.android.server.accounts.AccountManagerService: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>
<com.android.systemui.qs.QSDetailItems: void setCallback(com.android.systemui.qs.QSDetailItems.Callback)>
<javax.microedition.khronos.opengles.GL10: void glLoadMatrixf(float[],int)>
<android.net.wifi.IWifiManager: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)>
<com.android.systemui.statusbar.StatusBarIconView: void setDotAppearAmount(float)>
<com.android.systemui.qs.QSFooterImpl: void setExpandClickListener(android.view.View.OnClickListener)>
<com.android.keyguard.KeyguardSecurityContainer: com.android.keyguard.KeyguardSecurityCallback getCallback()>
<com.android.systemui.car.userswitcher.FullScreenUserSwitcherViewController: int getFocusAreaViewId()>
<com.android.keyguard.KeyguardUpdateMonitor: void setKeyguardBypassController(com.android.systemui.statusbar.phone.KeyguardBypassController)>
<com.android.systemui.egg.MLand: int getNumPlayers()>
<com.android.systemui.keyguard.KeyguardViewMediator: void onShortPowerPressedGoHome()>
<com.android.uiautomator.core.UiScrollable: boolean scrollForward(int)>
<com.android.systemui.usb.StorageNotification: void start()>
<android.net.wifi.WifiManager: java.util.List getScanResults()>
<android.net.wifi.WifiConfiguration: android.net.IpConfiguration getIpConfiguration()>
<com.android.server.appop.AppOpsService: com.android.internal.app.MessageSamplingConfig reportRuntimeAppOpAccessMessageAndGetConfig(java.lang.String,android.app.SyncNotedAppOp,java.lang.String)>
<com.android.server.pm.PackageSettingBase: void setInstallSource(com.android.server.pm.InstallSource)>
<com.android.systemui.biometrics.AuthDialog: void show(android.view.WindowManager,android.os.Bundle)>
<javax.obex.HeaderSet: int[] getHeaderList()>
<com.android.systemui.dagger.DependencyProvider: com.android.systemui.statusbar.NavigationBarController provideNavigationBarController(android.content.Context,android.os.Handler,com.android.systemui.statusbar.CommandQueue)>
<com.android.systemui.statusbar.policy.RemoteInputView: void stealFocusFrom(com.android.systemui.statusbar.policy.RemoteInputView)>
<com.android.systemui.wm.DisplayImeController: void onDisplayConfigurationChanged(int,android.content.res.Configuration)>
<com.android.systemui.statusbar.phone.StatusBar: void startActivity(android.content.Intent,boolean,boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setTransientContainer(android.view.ViewGroup)>
<android.net.wifi.rtt.RangingResultCallback: void onRangingFailure(int)>
<com.android.server.accessibility.AbstractAccessibilityServiceConnection.SystemSupport: com.android.server.accessibility.MagnificationController getMagnificationController()>
<android.net.wifi.util.HexEncoding: byte[] decode(char[],boolean)>
<com.android.systemui.statusbar.notification.collection.NotifCollection: void dismissAllNotifications(int)>
<com.google.android.startop.iorap.SystemServiceEvent: boolean equals(java.lang.Object)>
<android.net.wifi.WifiInfo: void setFrequency(int)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setBackgroundTintColor(int)>
<com.android.server.biometrics.EnrollClient: boolean onError(long,int,int)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: void startPathAnimation()>
<com.android.systemui.statusbar.ViewTransformationHelper: com.android.systemui.statusbar.notification.TransformState getCurrentState(int)>
<com.android.systemui.biometrics.AuthPanelController: void getOutline(android.view.View,android.graphics.Outline)>
<com.android.systemui.shared.system.RecentsAnimationListener: void onAnimationCanceled(com.android.systemui.shared.recents.model.ThumbnailData)>
<com.android.server.pm.parsing.PackageParser2: com.android.server.pm.parsing.PackageParser2 forParsingFileWithDefaults()>
<com.android.systemui.car.navigationbar.CarNavigationButton: int getDisplayId()>
<com.android.server.usb.descriptors.UsbDescriptorParser: void setVCInterfaceSpec(int)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void abortTransient(int,int[])>
<android.net.wifi.WifiSsid: boolean isHidden()>
<com.android.server.media.MediaRoute2Provider.Callback: void onSessionReleased(com.android.server.media.MediaRoute2Provider,android.media.RoutingSessionInfo)>
<com.android.keyguard.PasswordTextView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<com.android.server.biometrics.BiometricService.Injector: com.android.server.biometrics.BiometricService.SettingObserver getSettingObserver(android.content.Context,android.os.Handler,java.util.List)>
<com.android.server.locksettings.LockSettingsService: java.util.Map recoverKeyChainSnapshot(java.lang.String,byte[],java.util.List)>
<com.android.settingslib.core.lifecycle.events.OnPause: void onPause()>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onActivityForcedResizable(java.lang.String,int,int)>
<com.android.gallery3d.exif.ExifTag: java.lang.Object getValue()>
<com.android.systemui.statusbar.notification.row.HybridConversationNotificationView: void bind(java.lang.CharSequence,java.lang.CharSequence,android.view.View)>
<javax.microedition.khronos.opengles.GL10: void glFogfv(int,float[],int)>
<com.android.settingslib.wifi.AccessPoint: java.lang.String securityToString(int,int)>
<com.android.server.usb.descriptors.Usb10ACInputTerminal: byte getNrChannels()>
<com.android.server.biometrics.BiometricServiceBase.EnrollClientImpl: void notifyUserActivity()>
<com.android.systemui.assist.ui.DefaultUiController: void <init>(android.content.Context,com.android.systemui.assist.AssistLogger)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setAllComponentsDirectBootAware(boolean)>
<android.net.wifi.p2p.WifiP2pGroup: int getFrequency()>
<com.android.server.display.DisplayManagerService: void onSwitchUser(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void clearSystemUpdatePolicyFreezePeriodRecord()>
<com.android.server.TelephonyRegistry: void notifyBarringInfoChanged(int,int,android.telephony.BarringInfo)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setIsEnhancedOpen(boolean)>
<com.android.systemui.wm.DisplayImeController.PerDisplay.DisplayWindowInsetsControllerImpl: void topFocusedWindowChanged(java.lang.String)>
<com.android.server.storage.AppFuseBridge.MountScope: android.os.ParcelFileDescriptor open()>
<com.android.server.appprediction.RemoteAppPredictionService: long getTimeoutIdleBindMillis()>
<com.android.systemui.statusbar.policy.CastController: java.util.List getCastDevices()>
<com.android.settingslib.deviceinfo.AbstractBluetoothAddressPreferenceController: void updateConnectivity()>
<com.android.systemui.statusbar.NotificationViewHierarchyManager: void setUpWithPresenter(com.android.systemui.statusbar.NotificationPresenter,com.android.systemui.statusbar.notification.stack.NotificationListContainer)>
<com.android.systemui.biometrics.AuthBiometricView: void setBiometricPromptBundle(android.os.Bundle)>
<com.android.server.timedetector.TimeDetectorService: void suggestManualTime(android.app.timedetector.ManualTimeSuggestion)>
<javax.microedition.khronos.opengles.GL10: void glLightModelx(int,int)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: float getDarkIntensity()>
<com.android.systemui.qs.tiles.AirplaneModeTile: java.lang.String composeChangeAnnouncement()>
<com.android.server.compat.PlatformCompat: long lookupChangeId(java.lang.String)>
<com.android.server.pm.PackageInstallerSession: void write(java.lang.String,long,long,android.os.ParcelFileDescriptor)>
<com.android.server.audio.BtHelper: java.lang.String bluetoothCodecToEncodingString(int)>
<android.net.wifi.aware.WifiAwareNetworkInfo: int getTransportProtocol()>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: void screenTurningOff(com.android.server.policy.WindowManagerPolicy.ScreenOffListener)>
<com.android.systemui.util.sensors.ProximitySensor: void setSecondarySafe(boolean)>
<com.android.server.media.MediaSessionRecord: boolean isActive()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setInHeadsUpPinnedMode(boolean)>
<com.android.systemui.assist.AssistDisclosure: void postShow()>
<com.android.systemui.statusbar.phone.ObservableScrollView: boolean isScrolledToBottom()>
<com.android.systemui.shared.system.ActivityManagerWrapper: void registerTaskStackListener(com.android.systemui.shared.system.TaskStackChangeListener)>
<com.android.server.biometrics.BiometricUserState: void removeBiometric(int)>
<com.android.systemui.plugins.GlobalActions.GlobalActionsManager: void reboot(boolean)>
<com.android.server.display.DisplayManagerService: void windowManagerAndInputReady()>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo: boolean needsFalsingProtection()>
<com.android.server.display.BrightnessIdleJob: void scheduleJob(android.content.Context)>
<android.net.ip.IpClientManager: boolean addKeepalivePacketFilter(int,android.net.NattKeepalivePacketData)>
<com.android.systemui.statusbar.phone.DarkIconDispatcherImpl: void addDarkReceiver(android.widget.ImageView)>
<com.android.systemui.qs.tiles.NfcTile: void handleClick()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: float getStackTranslation()>
<com.android.systemui.fragments.FragmentHostManager: void reloadFragments()>
<android.net.wifi.BatchedScanResult: java.lang.String toString()>
<com.android.systemui.settings.ToggleSliderView: void setMax(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setAutoTimeRequired(android.content.ComponentName,boolean)>
<com.android.systemui.plugins.VolumeDialogController: void setCaptionsEnabled(boolean)>
<com.android.systemui.qs.TouchAnimator.Builder: com.android.systemui.qs.TouchAnimator.Builder addInt(java.lang.Object,java.lang.String,int[])>
<com.android.server.appop.AppOpsService: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])>
<com.android.systemui.statusbar.phone.HeadsUpAppearanceController: void <init>(com.android.systemui.statusbar.phone.NotificationIconAreaController,com.android.systemui.statusbar.phone.HeadsUpManagerPhone,android.view.View,com.android.systemui.statusbar.SysuiStatusBarStateController,com.android.systemui.statusbar.phon.KeyguardBypassController,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.statusbar.notification.NotificationWakeUpCoordinator,com.android.systemui.statusbar.CommandQueue,com.android.systemui.statusbar.phone.NotificationPanelViewController,android.view.View)>
<com.android.systemui.SystemUIApplication: com.android.systemui.SystemUI[] getServices()>
<com.android.systemui.qs.tileimpl.QSTileImpl: java.lang.String getTileSpec()>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcher: void <init>(android.content.Context,android.view.ViewStub,com.android.systemui.statusbar.phone.KeyguardStatusBarView,com.android.systemui.statusbar.phone.NotificationPanelViewController)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: boolean onInterceptTouchEvent(android.view.View,android.view.MotionEvent)>
<android.os.IStatsCompanionService: void cancelPullingAlarm()>
<com.android.server.VibratorService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.policy.RemoteInputView.RemoteEditText: boolean onCheckIsTextEditor()>
<com.android.gallery3d.glrenderer.GLCanvas: void drawLine(float,float,float,float,com.android.gallery3d.glrenderer.GLPaint)>
<com.android.server.protolog.common.LogDataType: int bitmaskToLogDataType(int,int)>
<com.android.settingslib.widget.BarViewInfo: void <init>(android.graphics.drawable.Drawable,int,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
<com.android.printspooler.widget.PrintContentView: int getChildDrawingOrder(int,int)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: boolean isBluetoothSupported()>
<android.net.TcpKeepalivePacketData: android.net.TcpKeepalivePacketDataParcelable toStableParcelable()>
<com.android.server.pm.permission.PermissionManagerServiceInternal.PermissionCallback: void onPermissionUpdated(int[],boolean)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: void clearConversationSkin()>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeUtilCompat: void saveInputMethodSubtypeList(androidx.preference.PreferenceFragmentCompat,android.content.ContentResolver,java.util.List,boolean)>
<android.net.wifi.IWifiManager: boolean disconnect(java.lang.String)>
<com.android.systemui.statusbar.policy.RemoteInputView: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.server.stats.StatsCompanionService: boolean checkPermission(java.lang.String,int,int)>
<com.android.systemui.qs.QuickStatusBarHeader: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void onFinishedGoingToSleep(int,boolean)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector description(java.lang.String)>
<com.android.server.infra.AbstractMasterSystemService: void onServicePackageDataClearedLocked(int)>
<javax.microedition.khronos.opengles.GL11: void glTexCoordPointer(int,int,int,int)>
<com.android.externalstorage.TestDocumentsProvider: java.lang.String createDocument(java.lang.String,java.lang.String,java.lang.String)>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: boolean isOverlayIsStatic()>
<android.media.MediaParser.SeekPoint: java.lang.String toString()>
<com.android.systemui.qs.QuickStatusBarHeaderController.Builder: void <init>(com.android.systemui.qs.carrier.QSCarrierGroupController.Builder)>
<com.android.printservice.recommendation.util.MDNSFilteredDiscovery: void onServiceLost(android.net.nsd.NsdServiceInfo)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void flingSettings(float,int)>
<com.android.uiautomator.core.UiDevice: java.lang.String getCurrentActivityName()>
<android.net.util.TetheringUtils: int uint16(short)>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: boolean isVpnRestricted()>
<com.android.gallery3d.glrenderer.GLES20Canvas: boolean unloadTexture(com.android.gallery3d.glrenderer.BasicTexture)>
<com.android.server.MountServiceIdler: boolean onStartJob(android.app.job.JobParameters)>
<com.android.gallery3d.glrenderer.UploadedTexture: void setThrottled(boolean)>
<com.android.systemui.statusbar.policy.RemoteInputView: android.app.PendingIntent getPendingIntent()>
<com.android.keyguard.KeyguardSimPinView: boolean shouldLockout(long)>
<com.android.server.adb.AdbDebuggingManager: void enablePairingByQrCode(java.lang.String,java.lang.String)>
<com.android.systemui.tuner.OtherPrefs: void onCreatePreferences(android.os.Bundle,java.lang.String)>
<com.android.systemui.statusbar.notification.logging.NotificationLogger: void <init>(com.android.systemui.statusbar.NotificationListener,java.util.concurrent.Executor,com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.notification.logging.NotificationLogger.ExpansionStateLogger,com.android.systemui.statusbar.notification.logging.NotificationPanelLogger)>
<com.android.server.display.DisplayModeDirector.DesiredDisplayModeSpecs: void copyFrom(com.android.server.display.DisplayModeDirector.DesiredDisplayModeSpecs)>
<com.android.systemui.statusbar.NotificationShelf: boolean needsClippingToShelf()>
<com.android.settingslib.drawer.DashboardCategory: com.android.settingslib.drawer.Tile getTile(int)>
<com.android.systemui.statusbar.CommandQueue: void startTracing()>
<com.android.systemui.keyguard.WorkLockActivity: void onDestroy()>
<com.android.systemui.statusbar.policy.RemoteInputView: android.content.Intent prepareRemoteInputFromData(java.lang.String,android.net.Uri)>
<com.android.server.biometrics.fingerprint.FingerprintService: void updateActiveGroup(int,java.lang.String)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void setAntiBurnInOffsetX(int)>
<com.android.systemui.dagger.DefaultServiceBinder: android.app.Service bindKeyguardService(com.android.systemui.keyguard.KeyguardService)>
<com.android.server.accounts.IAccountAuthenticatorCache: void updateServices(int)>
<com.android.systemui.pip.phone.PipAppOpsListener: void onActivityPinned(java.lang.String)>
<com.android.systemui.statusbar.NotificationRemoteInputManager: void checkRemoteInputOutside(android.view.MotionEvent)>
<javax.obex.ServerRequestHandler: boolean isSrmSupported()>
<com.android.systemui.statusbar.phone.ShadeControllerImpl: void goToLockedShade(android.view.View)>
<com.android.settingslib.net.NetworkCycleDataLoader.Builder: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void reset()>
<com.android.systemui.plugins.DarkIconDispatcher: void addDarkReceiver(android.widget.ImageView)>
<com.android.systemui.media.ResumeMediaBrowser: void findRecentMedia()>
<com.android.systemui.car.navigationbar.CarNavigationButton: java.lang.String[] getComponentName()>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int getPreferredAddress()>
<com.android.server.AnyMotionDetector.Vector3: float dotProduct(com.android.server.AnyMotionDetector.Vector3)>
<com.android.systemui.shared.system.ActivityManagerWrapper: boolean isHomeTask(android.app.ActivityManager.RunningTaskInfo)>
<com.android.settingslib.Utils: android.graphics.drawable.Drawable getUserIcon(android.content.Context,android.os.UserManager,android.content.pm.UserInfo)>
<com.android.gallery3d.glrenderer.BitmapTexture: void <init>(android.graphics.Bitmap,boolean)>
<com.android.systemui.car.window.OverlayViewController: com.android.systemui.car.window.OverlayViewGlobalStateController getOverlayViewGlobalStateController()>
<com.android.server.pm.permission.PermissionSettings: boolean isPermissionInstant(java.lang.String)>
<com.android.systemui.statusbar.policy.MobileSignalController: void <init>(android.content.Context,com.android.systemui.statusbar.policy.NetworkControllerImpl.Config,boolean,android.telephony.TelephonyManager,com.android.systemui.statusbar.policy.CallbackHandler,com.android.systemui.statusbar.policy.NetworkControllerImpl,android.telephony.SubscriptionInfo,com.android.systemui.statusbar.policy.NetworkControllerImpl.SubscriptionDefaults,android.os.Looper)>
<com.android.systemui.shared.plugins.VersionInfo: com.android.systemui.shared.plugins.VersionInfo addClass(java.lang.Class)>
<com.android.systemui.pip.phone.PipUpdateThread: com.android.systemui.pip.phone.PipUpdateThread get()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: boolean isRadioOn()>
<com.android.settingslib.deviceinfo.AbstractConnectivityPreferenceController: void <init>(android.content.Context,com.android.settingslib.core.lifecycle.Lifecycle)>
<android.net.wifi.WifiInfo: boolean isOsuAp()>
<com.android.systemui.wm.DisplayImeController.PerDisplay: void insetsControlChanged(android.view.InsetsState,android.view.InsetsSourceControl[])>
<com.android.server.media.MediaSession2Record: android.media.Session2Token getSession2Token()>
<android.util.StatsEvent: int getAtomId()>
<com.android.server.biometrics.BiometricUserState: java.util.List getBiometrics()>
<com.android.systemui.statusbar.policy.DataSaverControllerImpl: void <init>(android.content.Context)>
<com.android.settingslib.wifi.AccessPoint: android.net.wifi.WifiConfiguration getConfig()>
<com.android.keyguard.clock.ClockLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.ActionListTransformState: boolean sameAs(com.android.systemui.statusbar.notification.TransformState)>
<android.net.wifi.rtt.ResponderConfig: int hashCode()>
<com.android.systemui.recents.RecentsImplementation: boolean splitPrimaryTask(int,android.graphics.Rect,int)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: boolean isMenuOnLeft()>
<com.android.systemui.statusbar.notification.row.ExpandableView: int getMinHeight(boolean)>
<com.android.settingslib.deviceinfo.AbstractImsStatusPreferenceController: boolean isAvailable()>
<com.android.server.trust.TrustAgentWrapper: boolean isManagingTrust()>
<com.android.systemui.plugins.FalsingManager: void onNotificationStopDismissing()>
<com.android.bluetoothmidiservice.BluetoothMidiDevice: android.os.IBinder getBinder()>
<android.os.UserManagerInternal: boolean isUserRunning(int)>
<com.android.systemui.statusbar.phone.NavigationBarInflaterView: int extractKeycode(java.lang.String)>
<android.media.MediaSession2.SessionCallback: void onDisconnected(android.media.MediaSession2,android.media.MediaSession2.ControllerInfo)>
<com.android.systemui.statusbar.phone.DozeParameters: boolean shouldControlScreenOff()>
<com.android.printspooler.model.PrintSpoolerService: void createPrintJob(android.print.PrintJobInfo)>
<com.android.server.integrity.model.RuleMetadata: java.lang.String getVersion()>
<com.android.systemui.globalactions.GlobalActionsComponent: void handleShowGlobalActionsMenu()>
<com.android.settingslib.net.UidDetailProvider: void <init>(android.content.Context)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSeparateProfileChallengeAllowed(int)>
<com.android.uiautomator.testrunner.TestCaseCollector: void <init>(java.lang.ClassLoader,com.android.uiautomator.testrunner.TestCaseCollector.TestCaseFilter)>
<com.android.systemui.shared.system.PinnedStackListenerForwarder: void addListener(com.android.systemui.shared.system.PinnedStackListenerForwarder.PinnedStackListener)>
<com.android.server.usb.descriptors.UsbACSelectorUnit: byte getUnitID()>
<com.android.settingslib.notification.EnableZenModeDialog: boolean isCountdown(android.service.notification.Condition)>
<com.android.systemui.plugins.qs.QSTile.State: java.lang.String toString()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setNetworkLoggingEnabled(android.content.ComponentName,java.lang.String,boolean)>
<com.android.server.appbinding.finders.AppServiceFinder: int getBindFlags(com.android.server.appbinding.AppBindingConstants)>
<com.android.systemui.qs.PathInterpolatorBuilder: void <init>(android.graphics.Path)>
<com.android.systemui.plugins.qs.QSTile: int getMetricsCategory()>
<com.android.systemui.qs.NonInterceptingScrollView: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.server.infra.FrameworkResourcesServiceNameResolver: void resetTemporaryService(int)>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator.Callback: boolean areLaunchAnimationsEnabled()>
<com.android.server.biometrics.face.FaceService: void removeClient(com.android.server.biometrics.ClientMonitor)>
<com.android.settingslib.RestrictedPreference: void onBindViewHolder(androidx.preference.PreferenceViewHolder)>
<android.database.CursorWindowPerfTest: void loadInt_doubleRef()>
<android.net.wifi.RttManager: android.net.wifi.RttManager.RttCapabilities getRttCapabilities()>
<com.android.systemui.volume.VolumeDialogControllerImpl: boolean areCaptionsEnabled()>
<com.android.systemui.qs.tiles.CellularTile: com.android.systemui.plugins.qs.QSTile.SignalState newTileState()>
<com.android.systemui.doze.DozeSensors: void <init>(android.content.Context,android.app.AlarmManager,com.android.systemui.util.sensors.AsyncSensorManager,com.android.systemui.statusbar.phone.DozeParameters,android.hardware.display.AmbientDisplayConfiguration,com.android.systemui.util.wakelock.WakeLock,com.android.systemui.doze.DozeSensors.Callback,java.util.function.Consumer,com.android.systemui.doze.DozeLog,com.android.systemui.util.sensors.ProximitySensor)>
<android.net.wifi.hotspot2.pps.HomeSp: int getUniqueId()>
<com.android.server.pm.PackageInstallerService: java.lang.String allocateExternalStageCidLegacy()>
<com.android.server.protolog.ProtoLogImpl: boolean isProtoEnabled()>
<com.android.settingslib.widget.apppreference.AppPreference: void <init>(android.content.Context)>
<com.android.settingslib.widget.UpdatableListPreferenceDialogFragment: void onPrepareDialogBuilder(androidx.appcompat.app.AlertDialog.Builder)>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void onDensityOrFontScaleChanged()>
<com.android.systemui.statusbar.policy.KeyButtonRipple: void setType(com.android.systemui.statusbar.policy.KeyButtonRipple.Type)>
<com.android.server.input.InputManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.usb.descriptors.Usb10ASFormatI: int[] getChannelCounts()>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: java.lang.String lidStateToString(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean containsView(android.view.View)>
<com.android.systemui.util.DismissCircleView: void <init>(android.content.Context)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void setDefaultHome(java.lang.String,int,java.util.function.Consumer)>
<com.android.server.usb.descriptors.Usb10ACMixerUnit: int getChannelConfig()>
<android.net.wifi.WifiManager: void removeSuggestionConnectionStatusListener(android.net.wifi.WifiManager.SuggestionConnectionStatusListener)>
<com.android.egg.neko.Cat: android.app.Notification.Builder buildNotification(android.content.Context)>
<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo findPersistentPreferredActivity(android.content.Intent,int)>
<android.net.util.InterfaceSet: boolean equals(java.lang.Object)>
<android.widget.TextViewFontFamilyLayoutPerfTest: void <init>(java.lang.String,int)>
<com.android.systemui.qs.tiles.WifiTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.SignalState,java.lang.Object)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: float getCurrentOverScrollAmount(boolean)>
<com.android.server.biometrics.face.FaceService: void <init>(android.content.Context)>
<com.android.server.tv.TvRemoteService: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onPanelTrackingStarted()>
<com.android.systemui.shared.system.InputChannelCompat.InputEventReceiver: void <init>(android.view.InputChannel,android.os.Looper,android.view.Choreographer,com.android.systemui.shared.system.InputChannelCompat.InputEventListener)>
<com.android.systemui.statusbar.StatusBarIconView: boolean showsConversation()>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void dump(com.android.internal.util.IndentingPrintWriter)>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: com.android.internal.content.NativeLibraryHelper.Handle createNativeLibraryHandle(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.server.policy.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int)>
<com.android.systemui.statusbar.policy.CallbackHandler: void handleMessage(android.os.Message)>
<com.android.location.provider.ActivityRecognitionProvider: boolean flush()>
<com.android.server.pm.PackageManagerService: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>
<android.net.wifi.rtt.ResponderConfig: void <init>(android.net.MacAddress,android.net.wifi.aware.PeerHandle,int,boolean,int,int,int,int,int)>
<android.net.wifi.aware.DiscoverySession: android.net.NetworkSpecifier createNetworkSpecifierOpen(android.net.wifi.aware.PeerHandle)>
<com.android.server.wallpaper.WallpaperManagerService: int getWidthHint(int)>
<com.android.server.accessibility.AccessibilityWindowManager: com.android.server.accessibility.AccessibilityWindowManager.RemoteAccessibilityConnection getConnectionLocked(int,int)>
<com.android.packageinstaller.InstallInstalling: void onResume()>
<com.android.systemui.plugins.OverlayPlugin: void setup(android.view.View,android.view.View,com.android.systemui.plugins.OverlayPlugin.Callback,com.android.systemui.plugins.statusbar.DozeParameters)>
<com.android.systemui.qs.tiles.FlashlightTile: void handleDestroy()>
<com.android.commands.bu.Backup: void run(java.lang.String[])>
<android.net.wifi.SoftApConfiguration: java.util.List getBlockedClientList()>
<com.android.server.input.InputManagerService.WiredAccessoryCallbacks: void systemReady()>
<com.android.settingslib.drawer.SwitchController.MetaData: com.android.settingslib.drawer.SwitchController.MetaData setIconBackgoundArgb(int)>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void lockScreenSecretAvailable(int,byte[],int)>
<com.android.server.ServiceWatcher: java.lang.Object runOnBinderBlocking(com.android.server.ServiceWatcher.BlockingBinderRunner,java.lang.Object)>
<android.net.wifi.rtt.RangingResult: int getDistanceStdDevMm()>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])>
<com.android.gallery3d.glrenderer.BasicTexture: boolean inFinalizer()>
<com.android.networkstack.tethering.OffloadController: void stop()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSecondaryLockscreenEnabled(android.os.UserHandle)>
<com.android.systemui.doze.DozeHost: void setDozeScreenBrightness(int)>
<com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl.Callback: java.lang.String getDeviceTimeZone()>
<javax.microedition.khronos.egl.EGL10: boolean eglWaitNative(int,java.lang.Object)>
<com.android.server.locksettings.recoverablekeystore.KeyStoreProxy: void deleteEntry(java.lang.String)>
<com.android.keyguard.KeyguardSimPukView: void resetState()>
<javax.microedition.khronos.opengles.GL10: void glLightx(int,int,int)>
<com.android.server.pm.permission.PermissionManagerServiceInternal.PermissionCallback: void onPermissionChanged()>
<com.android.server.pm.PackageManagerService: boolean isDeviceUpgrading()>
<com.android.systemui.statusbar.notification.stack.AnimationFilter: com.android.systemui.statusbar.notification.stack.AnimationFilter animateY(android.view.View)>
<com.android.server.devicepolicy.DevicePolicyManagerService.RestrictionsListener: void <init>(android.content.Context)>
<com.google.android.startop.iorap.DexOptEvent: java.lang.String toString()>
<com.android.systemui.statusbar.KeyguardIndicationController: void setStatusBarKeyguardViewManager(com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setVersionCode(int)>
<com.android.server.accounts.AccountManagerService: android.accounts.AccountAndUser[] getAllAccounts()>
<com.android.server.protolog.common.IProtoLogGroup: boolean isLogToAny()>
<com.android.printspooler.renderer.IPdfEditor: void write(android.os.ParcelFileDescriptor)>
<com.android.systemui.statusbar.policy.KeyButtonRipple: boolean onStateChange(int[])>
<com.android.settingslib.users.AppRestrictionsHelper: void <init>(android.content.Context,android.os.UserHandle)>
<android.net.wifi.WifiManager: boolean isEnhancedOpenSupported()>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onBiometricError(int,java.lang.String,android.hardware.biometrics.BiometricSourceType)>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void onTrackingStopped(boolean)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage: int size()>
<com.android.systemui.tuner.TunerZenModePanel: void onDetachedFromWindow()>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setSubscribeType(int)>
<com.android.server.ZramWriteback: void scheduleZramWriteback(android.content.Context)>
<com.android.settingslib.development.AbstractLogdSizePreferenceController: void updateLogdSizeValues()>
<android.net.wifi.hotspot2.omadm.XMLNode: void <init>(android.net.wifi.hotspot2.omadm.XMLNode,java.lang.String)>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: int getSpec()>
<com.android.systemui.util.leak.GarbageMonitor.MemoryTile: com.android.systemui.plugins.qs.QSTile.State newTileState()>
<com.android.systemui.statusbar.phone.PanelView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.wm.DisplayImeController: void addPositionProcessor(com.android.systemui.wm.DisplayImeController.ImePositionProcessor)>
<com.android.server.pm.permission.PermissionManagerService: void killUid(int,int,java.lang.String)>
<com.android.server.usb.descriptors.UsbACInterface: int getSubclass()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: android.view.View getShelfTransformationTarget()>
<com.android.server.audio.AudioService: int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
<com.android.commands.hid.Event: int getId()>
<com.android.server.accessibility.AccessibilityManagerService: int getActiveWindowId()>
<com.android.systemui.util.sensors.ProximitySensor.ProximityCheck: void run()>
<com.google.android.startop.iorap.CheckHelpers: void checkStateInRange(int,int)>
<com.android.gallery3d.common.Utils: long clamp(long,long,long)>
<com.android.server.policy.keyguard.KeyguardStateMonitor.StateCallback: void onShowingChanged()>
<com.android.server.audio.AudioService: java.util.List getAudioProductStrategies()>
<com.android.systemui.biometrics.AuthPanelController: void setUseFullScreen(boolean)>
<com.android.systemui.statusbar.notification.NotificationActivityStarter: boolean isCollapsingToShowActivityOverLockscreen()>
<com.android.systemui.qs.QSSecurityFooter: void setListening(boolean)>
<com.android.server.protolog.common.IProtoLogGroup: java.lang.String name()>
<com.android.systemui.statusbar.KeyguardAffordanceView: boolean shouldTint()>
<com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>
<com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpWindowToFile(android.view.accessibility.AccessibilityNodeInfo,int,int,int)>
<com.android.server.NetworkScoreService.ScoringServiceConnection: java.lang.String getPackageName()>
<android.perftests.utils.ShellHelper: java.lang.String runShellCommand(java.lang.String,java.lang.Object[])>
<com.android.server.Watchdog: void processDied(java.lang.String,int)>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo: android.view.View getContentView()>
<com.android.server.pm.AppsFilter: void dumpQueries(java.io.PrintWriter,com.android.server.pm.PackageManagerService,java.lang.Integer,com.android.server.pm.DumpState,int[])>
<com.android.systemui.biometrics.AuthContainerView.Builder: com.android.systemui.biometrics.AuthContainerView build(int)>
<com.android.server.media.MediaSession2Record: boolean isClosed()>
<com.android.server.pm.PackageManagerService.PendingPackageBroadcasts: int size()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void onViewAdded(android.view.View)>
<com.android.systemui.statusbar.phone.ScrimController: com.android.systemui.statusbar.phone.ScrimState getState()>
<com.android.systemui.qs.tileimpl.QSTileImpl.DrawableIconWithRes: void <init>(android.graphics.drawable.Drawable,int)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void save(int)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: java.util.Map getCasResources()>
<com.android.systemui.assist.AssistManager: void launchVoiceAssistFromKeyguard()>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onDreamingStarted()>
<com.android.server.audio.MediaFocusControl: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,int,boolean)>
<com.android.systemui.statusbar.StatusIconDisplayable: int getVisibleState()>
<com.android.systemui.qs.SlashDrawable: void setAlpha(int)>
<android.net.NetworkMonitorManager: void <init>(android.net.INetworkMonitor)>
<com.android.keyguard.KeyguardHostView: void startAppearAnimation()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isNativeLibraryRootRequiresIsa()>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindPowerUI(com.android.systemui.power.PowerUI)>
<com.android.systemui.qs.tiles.BluetoothTile: java.lang.CharSequence getTileLabel()>
<com.android.server.pm.ShortcutDumpFiles: boolean save(java.lang.String,java.util.function.Consumer)>
<com.android.systemui.statusbar.phone.DozeScrimController: void onDozingChanged(boolean)>
<com.android.systemui.pip.phone.PipMediaController: void removeListener(com.android.systemui.pip.phone.PipMediaController.ActionListener)>
<com.android.systemui.shared.plugins.PluginManagerImpl: java.lang.ClassLoader getClassLoader(android.content.pm.ApplicationInfo)>
<com.android.wallpaperbackup.WallpaperBackupAgent: void onFullBackup(android.app.backup.FullBackupDataOutput)>
<com.android.systemui.volume.SegmentedButtons: void update()>
<com.android.keyguard.KeyguardDisplayManager: boolean updateDisplays(boolean)>
<com.android.settingslib.media.MediaManager.MediaDeviceCallback: void onDeviceRemoved(com.android.settingslib.media.MediaDevice)>
<android.net.wifi.rtt.ResponderConfig: void <init>(android.net.MacAddress,int,boolean,int,int,int,int,int)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: boolean shouldShowGutsOnSnapOpen()>
<com.android.server.pm.UserManagerService: boolean isDemoUser(int)>
<com.android.server.testing.shadows.FrameworkShadowLooper: void reset()>
<android.net.TetheredClient.AddressInfo: int describeContents()>
<com.android.networkstack.tethering.EntitlementManager: void dump(java.io.PrintWriter)>
<com.android.server.pm.Settings: void <init>(java.util.Map)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void onLayout(boolean,int,int,int,int)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareLogging: android.media.soundtrigger_middleware.SoundTriggerModuleDescriptor[] listModules()>
<com.android.server.slice.SliceClientPermissions: void removeAuthority(java.lang.String,int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void applyExpandAnimationParams(com.android.systemui.statusbar.notification.ActivityLaunchAnimator.ExpandAnimationParameters)>
<com.android.server.pm.ShortcutService: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>
<com.android.settingslib.deviceinfo.StorageManagerVolumeProvider: java.util.List getVolumes()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: boolean isOnView(android.view.View,float,float)>
<com.android.systemui.globalactions.GlobalActionsLayout: android.view.ViewGroup getListView()>
<com.android.settingslib.search.SearchIndexableData: com.android.settingslib.search.Indexable.SearchIndexProvider getSearchIndexProvider()>
<com.android.server.locksettings.LockSettingsService: java.lang.String importKey(java.lang.String,byte[])>
<com.android.statementservice.retriever.WebContent: java.lang.String getContent()>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setClickable(boolean)>
<com.android.systemui.tuner.CustomListPreference.CustomListPreferenceDialogFragment: void onDialogClosed(boolean)>
<com.android.systemui.keyguard.WakefulnessLifecycle: int getWakefulness()>
<com.android.settingslib.net.NetworkCycleData: long getStartTime()>
<com.android.settingslib.media.LocalMediaManager: void <init>(android.content.Context,com.android.settingslib.bluetooth.LocalBluetoothManager,com.android.settingslib.media.InfoMediaManager,java.lang.String)>
<com.android.keyguard.KeyguardSliceView.Row: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.policy.AccessibilityManagerWrapper: int getRecommendedTimeoutMillis(int,int)>
<com.android.systemui.plugins.qs.QS: void setExpanded(boolean)>
<android.os.IPendingIntentRef: void sendSubscriberBroadcast(long,long,long,long,java.lang.String[],android.os.StatsDimensionsValueParcel)>
<com.android.systemui.statusbar.phone.StatusBarWindowController: void <init>(android.content.Context,android.view.WindowManager,com.android.systemui.statusbar.SuperStatusBarViewFactory,android.content.res.Resources)>
<com.android.systemui.plugins.GlobalActionsPanelPlugin.Callbacks: void startPendingIntentDismissingKeyguard(android.app.PendingIntent)>
<com.android.server.audio.AudioService: void releaseRecorder(int)>
<com.android.systemui.qs.SlashDrawable: void setSlashed(boolean)>
<com.android.server.integrity.parser.RandomAccessObject: int read()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: boolean isHearingAidDevice()>
<com.android.systemui.statusbar.OperatorNameView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcherScrim: void draw(android.graphics.Canvas)>
<com.android.systemui.power.PowerUI: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.qs.PagedTileLayout.PageListener: void onPageChanged(boolean)>
<com.android.server.SystemUpdateManagerService: void <init>(android.content.Context)>
<com.android.server.broadcastradio.hal2.AnnouncementAggregator: void <init>(android.hardware.radio.IAnnouncementListener)>
<com.android.systemui.SwipeHelper.Callback: boolean canChildBeDragged(android.view.View)>
<com.android.systemui.plugins.GlobalActions.GlobalActionsManager: void shutdown()>
<com.android.uiautomator.core.UiDevice: boolean hasAnyWatcherTriggered()>
<com.android.systemui.media.MediaControllerFactory: android.media.session.MediaController create(android.media.session.MediaSession.Token)>
<com.android.server.policy.BurnInProtectionHelper: void onDisplayAdded(int)>
<com.android.server.usb.UsbDeviceManager: void setCurrentFunctions(long)>
<com.android.server.pm.DumpState: com.android.server.pm.SharedUserSetting getSharedUser()>
<com.android.systemui.statusbar.notification.row.NotificationSnooze.NotificationSnoozeOption: java.lang.CharSequence getDescription()>
<com.android.server.ExtconUEventObserver.ExtconInfo: java.lang.String getStatePath()>
<com.android.systemui.stackdivider.Divider: boolean isMinimized()>
<com.android.systemui.statusbar.ScreenRecordDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)>
<com.android.server.display.DisplayManagerService: void <init>(android.content.Context)>
<com.android.server.pm.ComponentResolver: boolean componentExists(android.content.ComponentName)>
<android.database.SQLiteDatabasePerfTest: void testDelete()>
<com.android.systemui.qs.tiles.CastTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.BooleanState,java.lang.Object)>
<com.android.server.audio.AudioService.VolumeController: void postMasterMuteChanged(int)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setExpandAnimationTopChange(int)>
<com.android.printservice.recommendation.RecommendationServiceImpl: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.photos.BitmapRegionTileSource: void <init>(android.content.Context,com.android.photos.BitmapRegionTileSource.BitmapSource)>
<com.android.systemui.statusbar.phone.StatusBar: void clickTile(android.content.ComponentName)>
<com.android.systemui.qs.tileimpl.QSTileImpl: int getColorForState(android.content.Context,int)>
<com.android.server.timezone.RulesManagerService.Lifecycle: void onStart()>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void systemReady()>
<com.android.systemui.statusbar.policy.KeyButtonRipple: boolean hasFocusStateSpecified()>
<com.android.systemui.statusbar.policy.BatteryController: void init()>
<android.net.wifi.hotspot2.OsuProvider: void setOsuSsid(android.net.wifi.WifiSsid)>
<com.android.server.textclassifier.TextClassificationManagerService: void onConnectedStateChanged(int)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void onLayout(boolean,int,int,int,int)>
<com.android.server.LockGuard: java.lang.Object installNewLock(int,boolean)>
<com.android.server.soundtrigger_middleware.ISoundTriggerHw2: void startRecognition(int,android.hardware.soundtrigger.V2_3.RecognitionConfig,com.android.server.soundtrigger_middleware.SoundTriggerHw2Compat.Callback,int)>
<com.android.settingslib.media.LocalMediaManager: com.android.settingslib.media.MediaDevice getCurrentConnectedDevice()>
<com.android.server.hdmi.SelectRequestBuffer.SelectRequest: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>
<com.android.systemui.statusbar.CommandQueue: void showInattentiveSleepWarning()>
<com.android.soundpicker.CheckedListItem: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.ForegroundServicesUserState: java.lang.String toString()>
<com.android.gallery3d.glrenderer.BasicTexture: int getTextureHeight()>
<com.android.settingslib.bluetooth.HeadsetProfile: java.lang.String toString()>
<com.android.settingslib.wifi.AccessPoint: android.net.NetworkInfo getNetworkInfo()>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: java.util.List getAttachedChildren()>
<com.android.systemui.media.ResumeMediaBrowser: void testConnection()>
<com.android.systemui.statusbar.NotificationLifetimeExtender: boolean shouldExtendLifetimeForPendingNotification(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.usb.descriptors.UsbDescriptor: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<android.net.NetworkMonitorManager: boolean setAcceptPartialConnectivity()>
<com.android.systemui.SystemUIFactory: com.android.systemui.statusbar.phone.KeyguardBouncer createKeyguardBouncer(android.content.Context,com.android.keyguard.ViewMediatorCallback,com.android.internal.widget.LockPatternUtils,android.view.ViewGroup,com.android.systemui.keyguard.DismissCallbackRegistry,com.android.systemui.statusbar.phone.KeyguardBouncer.BouncerExpansionCallback,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.plugins.FalsingManager,com.android.systemui.statusbar.phone.KeyguardBypassController)>
<android.net.wifi.aware.WifiAwareUtils: void validateServiceName(byte[])>
<com.android.systemui.pip.phone.PipMenuActivityController: void <init>(android.content.Context,com.android.systemui.pip.phone.PipMediaController,com.android.systemui.shared.system.InputConsumerController)>
<com.android.systemui.statusbar.policy.RemoteInputView: void focus()>
<com.android.networkstack.tethering.ConnectedClientsTracker: boolean updateConnectedClients(java.lang.Iterable,java.util.List)>
<android.net.wifi.util.HexEncoding: char[] encode(byte[])>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: boolean childNeedsClipping(android.view.View)>
<com.android.systemui.qs.tileimpl.SlashImageView: void setState(com.android.systemui.plugins.qs.QSTile.SlashState,android.graphics.drawable.Drawable)>
<com.android.server.biometrics.BiometricService.SettingObserver: boolean getFaceEnabledForApps(int)>
<com.android.settingslib.DeviceInfoUtils: java.lang.String getBidiFormattedPhoneNumber(android.content.Context,android.telephony.SubscriptionInfo)>
<com.android.server.locksettings.LockSettingsService.SynchronizedStrongAuthTracker: void handleStrongAuthRequiredChanged(int,int)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setNotificationShadeFocusable(boolean)>
<com.android.egg.neko.Cat: int getOpacity()>
<com.android.server.attention.AttentionManagerService: com.android.server.attention.AttentionManagerService.UserState getOrCreateUserStateLocked(int)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: java.util.Set getBondedDevices()>
<com.android.systemui.statusbar.OperatorNameView: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.settingslib.CustomDialogPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.policy.UserSwitcherController.UserRecord: java.lang.String toString()>
<com.android.systemui.qs.tiles.UiModeNightTile: void handleClick()>
<com.android.server.ConnectivityService: void setAcceptPartialConnectivity(android.net.Network,boolean,boolean)>
<com.android.systemui.volume.SegmentedButtons: java.lang.Object getSelectedValue()>
<com.android.systemui.MultiListLayout: android.view.ViewGroup getListView()>
<com.android.keyguard.KeyguardPatternView: java.lang.CharSequence getTitle()>
<com.android.server.pm.PackageInstallerService: void uninstall(android.content.pm.VersionedPackage,java.lang.String,int,android.content.IntentSender,int)>
<com.android.systemui.doze.DozeFactory: void <init>(com.android.systemui.plugins.FalsingManager,com.android.systemui.doze.DozeLog,com.android.systemui.statusbar.phone.DozeParameters,com.android.systemui.statusbar.policy.BatteryController,com.android.systemui.util.sensors.AsyncSensorManager,android.app.AlarmManager,com.android.systemui.keyguard.WakefulnessLifecycle,com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.dock.DockManager,android.app.IWallpaperManager,com.android.systemui.util.sensors.ProximitySensor,com.android.systemui.util.sensors.ProximitySensor.ProximityCheck,com.android.systemui.util.wakelock.DelayedWakeLock.Builder,android.os.Handler,com.android.systemui.statusbar.phone.BiometricUnlockController,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.doze.DozeHost)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: void setActualHeight(int,boolean)>
<android.net.wifi.hotspot2.ProvisioningCallback: void onProvisioningComplete()>
<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasHIDInterface()>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.uri.UriGrantsManagerInternal: com.android.server.uri.NeededUriGrants checkGrantUriPermissionFromIntent(android.content.Intent,int,java.lang.String,int)>
<com.android.server.NetworkScoreService.ScoringServiceConnection: void unbind(android.content.Context)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: com.android.systemui.ExpandHelper.Callback getExpandHelperCallback()>
<com.android.server.pm.dex.DynamicCodeLogger: void recordNative(int,java.lang.String)>
<com.android.systemui.accessibility.SystemActions: void start()>
<com.android.systemui.car.userswitcher.UserSwitcherContainer.KeyEventHandler: boolean dispatchKeyEvent(android.view.KeyEvent)>
<com.android.server.pm.KeySetManagerService: com.android.server.pm.KeySetHandle getKeySetByAliasAndPackageNameLPr(java.lang.String,java.lang.String)>
<com.android.server.contentsuggestions.ContentSuggestionsManagerService: int getMaximumTemporaryServiceDurationMs()>
<com.android.systemui.pip.tv.PipControlButtonView: void setImageDrawable(android.graphics.drawable.Drawable)>
<com.android.systemui.qs.PagedTileLayout: void setExcessHeight(int)>
<com.android.systemui.statusbar.policy.RemoteInputView: void onDetachedFromWindow()>
<com.android.server.testing.shadows.ShadowApplicationPackageManager: java.util.List queryBroadcastReceiversAsUser(android.content.Intent,int,android.os.UserHandle)>
<android.net.wifi.WifiInfo: java.lang.String getPasspointFqdn()>
<com.android.systemui.qs.QSContainerImplController.Builder: void <init>(com.android.systemui.qs.QuickStatusBarHeaderController.Builder)>
<android.net.wifi.SoftApConfiguration.Builder: android.net.wifi.SoftApConfiguration.Builder setAutoShutdownEnabled(boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>
<com.android.systemui.statusbar.notification.stack.StackStateAnimator: void removeTransientView(com.android.systemui.statusbar.notification.row.ExpandableView)>
<com.android.systemui.recents.RecentsImplementation: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.statusbar.phone.NavigationBarInflaterView: void onDetachedFromWindow()>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void generateAddAnimation(com.android.systemui.statusbar.notification.row.ExpandableView,boolean)>
<com.android.systemui.classifier.FalsingManagerProxy: void onScreenOnFromTouch()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void setRemoved()>
<com.android.systemui.statusbar.notification.stack.AmbientState: int getScrollY()>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void hideClock(boolean)>
<com.android.systemui.qs.TileLayout: int getColumnStart(int)>
<com.android.server.rollback.RollbackPackageHealthObserver: int onHealthCheckFailed(android.content.pm.VersionedPackage,int)>
<com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException: void <init>(java.lang.String,java.lang.Exception)>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: void setSnoozeOptions(java.util.List)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void onBiometricError(int,int,int)>
<com.android.media.remotedisplay.RemoteDisplayProvider: void onAdjustVolume(com.android.media.remotedisplay.RemoteDisplay,int)>
<com.android.settingslib.core.lifecycle.Lifecycle: void onPrepareOptionsMenu(android.view.Menu)>
<com.android.server.SystemService.TargetUser: android.os.UserHandle getUserHandle()>
<com.android.server.ConnectivityService: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: android.view.View getView()>
<com.android.systemui.bubbles.BubbleData: boolean hasBubbleInStackWithKey(java.lang.String)>
<com.android.server.pm.PackageManagerService: boolean isOrphaned(java.lang.String)>
<com.android.printspooler.ui.SelectPrinterActivity: android.content.Loader onCreateLoader(int,android.os.Bundle)>
<android.net.wifi.WifiManager: boolean isPortableHotspotSupported()>
<com.android.server.display.utils.RollingBuffer: void truncate(long)>
<com.android.server.IpSecService.IResource: void freeUnderlyingResources()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void setMenuAlpha(float)>
<com.android.systemui.plugins.qs.DetailAdapter: boolean getToggleEnabled()>
<com.android.systemui.statusbar.phone.KeyguardBouncer: void showMessage(java.lang.String,android.content.res.ColorStateList)>
<com.android.server.IoThread: java.util.concurrent.Executor getExecutor()>
<android.net.wifi.aware.TlvBufferUtils.TlvElement: byte getByte()>
<com.android.systemui.statusbar.phone.HeadsUpTouchHelper: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.networkstack.tethering.BpfCoordinator.Dependencies: android.os.Handler getHandler()>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifDismissInterceptor.OnEndDismissInterception: void onEndDismissInterception(com.android.systemui.statusbar.notification.collection.notifcollection.NotifDismissInterceptor,com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.collection.notifcollection.DismissedByUserStats)>
<com.android.systemui.dagger.DefaultBroadcastReceiverBinder: android.content.BroadcastReceiver bindActionProxyReceiver(com.android.systemui.screenshot.ActionProxyReceiver)>
<com.android.settingslib.NetworkPolicyEditor: android.net.NetworkPolicy getPolicy(android.net.NetworkTemplate)>
<com.android.server.audio.AudioService: void scheduleLoadSoundEffects()>
<com.android.server.usb.descriptors.Usb10ASFormatI: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.keyguard.KeyguardHostView: boolean interceptMediaKey(android.view.KeyEvent)>
<com.android.server.om.DumpState: void setField(java.lang.String)>
<javax.obex.Operation: void sendHeaders(javax.obex.HeaderSet)>
<com.android.server.soundtrigger.SoundTriggerService: void <init>(android.content.Context)>
<com.android.systemui.qs.tiles.AirplaneModeTile: void handleSetListening(boolean)>
<com.android.server.rollback.AppDataRollbackHelper: void <init>(com.android.server.pm.Installer)>
<android.net.wifi.WpsInfo: int describeContents()>
<com.android.settingslib.wifi.AccessPoint: java.lang.String getKey(android.net.wifi.WifiConfiguration)>
<com.android.settingslib.applications.ApplicationsState: boolean haveInstantApps()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean shouldExpandToTopOfClearAll(float)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setUserSerialNumber(int,long)>
<com.android.server.slice.SlicePermissionManager: void onPersistableDirty(com.android.server.slice.DirtyTracker.Persistable)>
<com.android.systemui.log.dagger.LogModule: com.android.systemui.log.LogBuffer provideNotificationsLogBuffer(com.android.systemui.log.LogcatEchoTracker,com.android.systemui.dump.DumpManager)>
<com.android.server.Watchdog.OpenFdMonitor: boolean monitor()>
<com.android.server.pm.parsing.pkg.PackageImpl: android.content.pm.ApplicationInfo toAppInfoWithoutState()>
<com.android.systemui.statusbar.phone.StatusBar: com.android.systemui.statusbar.phone.NotificationShadeWindowViewController getNotificationShadeWindowViewController()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setDozing(boolean,boolean,android.graphics.PointF)>
<com.android.systemui.statusbar.phone.DozeParameters: float getScreenBrightnessDoze()>
<com.android.server.compat.PlatformCompat: long[] getDisabledChanges(android.content.pm.ApplicationInfo)>
<com.android.systemui.statusbar.CommandQueue: void setWindowState(int,int,int)>
<com.android.systemui.statusbar.notification.stack.NotificationSection: boolean isTargetTop(int)>
<com.android.systemui.statusbar.notification.row.ExpandableView: int getExtraBottomPadding()>
<com.android.systemui.statusbar.CommandQueue: void handleSystemKey(int)>
<com.android.systemui.statusbar.phone.LockIcon: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.people.prediction.AppTargetPredictor: com.android.server.people.prediction.AppTargetPredictor create(android.app.prediction.AppPredictionContext,java.util.function.Consumer,com.android.server.people.data.DataManager,int)>
<com.android.systemui.glwallpaper.GLWallpaperRenderer: boolean isWcgContent()>
<com.android.systemui.statusbar.policy.DeviceProvisionedControllerImpl: void removeCallback(com.android.systemui.statusbar.policy.DeviceProvisionedController.DeviceProvisionedListener)>
<com.android.server.slice.SliceClientPermissions: void setHasFullAccess(boolean)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setPrimaryCpuAbi(java.lang.String)>
<com.android.settingslib.suggestions.SuggestionControllerMixin: void launchSuggestion(android.service.settings.suggestions.Suggestion)>
<com.android.printspooler.widget.PrintContentView: void onFinishInflate()>
<com.android.server.accessibility.AccessibilityManagerService: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)>
<com.android.powermodel.CsvParser.LineProcessor: void onLine(int,java.util.ArrayList)>
<com.android.location.provider.ProviderRequestUnbundled: java.util.List getLocationRequests()>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: byte[] startRecoverySessionWithCertPath(java.lang.String,java.lang.String,android.security.keystore.recovery.RecoveryCertPath,byte[],byte[],java.util.List)>
<android.net.NetworkStackClient: void start()>
<android.net.wifi.WifiManager.WifiLock: void acquire()>
<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isForceQueryable()>
<com.android.systemui.MultiListLayout: void setSeparatedViewVisibility(boolean)>
<com.android.server.usb.descriptors.report.HTMLReportCanvas: void closeList()>
<com.android.server.display.BrightnessMappingStrategy: float getAutoBrightnessAdjustment()>
<com.android.printspooler.ui.PageAdapter.PreviewArea: void setColumnCount(int)>
<com.android.systemui.car.statusbar.DozeServiceHost: void pulseWhileDozing(com.android.systemui.doze.DozeHost.PulseCallback,int)>
<com.android.server.HardwarePropertiesManagerService: float[] getFanSpeeds(java.lang.String)>
<com.android.systemui.statusbar.phone.PanelViewController: boolean isTracking()>
<com.android.settingslib.media.PhoneMediaDevice: android.graphics.drawable.Drawable getIcon()>
<com.android.systemui.pip.tv.PipManager: void addMediaListener(com.android.systemui.pip.tv.PipManager.MediaListener)>
<com.android.server.audio.AudioService: void playerAttributes(int,android.media.AudioAttributes)>
<com.android.systemui.qs.QSSecurityFooter: java.lang.CharSequence getCaCertsMessage(boolean,boolean,boolean)>
<com.android.settingslib.net.NetworkStatsSummaryLoader: void onStartLoading()>
<com.android.server.PreloadsFileCacheExpirationJobService: void schedule(android.content.Context)>
<com.android.systemui.SystemUISecondaryUserService: void onCreate()>
<com.android.server.accessibility.AccessibilitySecurityPolicy: void <init>(android.content.Context,com.android.server.accessibility.AccessibilitySecurityPolicy.AccessibilityUserManager)>
<com.android.shell.HeapDumpReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.google.android.startop.iorap.DexOptEvent: com.google.android.startop.iorap.DexOptEvent createPackageUpdate(java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setRecommendedGlobalProxy(android.content.ComponentName,android.net.ProxyInfo)>
<com.android.server.tv.TvInputManagerService: void onBootPhase(int)>
<com.android.server.BrickReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.car.notification.NotificationPanelViewMediator: void onDensityOrFontScaleChanged()>
<com.android.server.pm.dex.DexoptOptions: void <init>(java.lang.String,java.lang.String,int)>
<com.android.systemui.volume.VolumeDialogControllerImpl.UserActivityListener: void onUserActivity()>
<com.android.systemui.pip.phone.PipTouchHandler: void onConfigurationChanged()>
<com.android.server.usb.descriptors.tree.UsbDescriptorsInterfaceNode: void addEndpointNode(com.android.server.usb.descriptors.tree.UsbDescriptorsEndpointNode)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice.Callback: void onDeviceAttributesChanged()>
<javax.microedition.khronos.opengles.GL10: void glViewport(int,int,int,int)>
<com.android.server.biometrics.BiometricServiceBase: void checkPermission(java.lang.String)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void switchInputOnReceivingNewActivePath(int)>
<com.android.systemui.qs.QuickStatusBarHeader: float getColorIntensity(int)>
<com.android.systemui.statusbar.NavigationBarController: void checkNavBarModes(int)>
<com.android.systemui.plugins.NotificationListenerController.NotificationProvider: void addNotification(android.service.notification.StatusBarNotification)>
<com.android.systemui.pip.phone.PipManager: void <init>(android.content.Context,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.wm.DisplayController,com.android.systemui.util.FloatingContentCoordinator,com.android.systemui.util.DeviceConfigProxy,com.android.systemui.pip.PipBoundsHandler,com.android.systemui.pip.PipSnapAlgorithm,com.android.systemui.pip.PipTaskOrganizer,com.android.systemui.model.SysUiState,com.android.systemui.pip.PipUiEventLogger)>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton2Icon(int)>
<com.android.server.pm.permission.PermissionManagerService: void removePermission(java.lang.String)>
<com.android.server.pm.permission.PermissionsState: com.android.server.pm.permission.PermissionsState.PermissionState getRuntimePermissionState(java.lang.String,int)>
<com.android.systemui.qs.touch.SwipeDetector: boolean isDraggingState()>
<com.android.systemui.usb.UsbConfirmActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: void onSetSignalIcon(int,com.android.systemui.statusbar.phone.StatusBarSignalPolicy.WifiIconState)>
<com.android.systemui.DessertCase: void onResume()>
<com.android.server.AppStateTracker: boolean isUidInForeground(int)>
<android.os.UserManagerInternal: boolean isDeviceManaged()>
<com.android.systemui.biometrics.AuthDialogCallback: void onTryAgainPressed()>
<com.android.systemui.statusbar.policy.DataSaverController: boolean isDataSaverEnabled()>
<android.net.wifi.WifiUsabilityStatsEntry: int getCellularSignalStrengthDbm()>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onStartedWakingUp()>
<com.android.server.TelephonyRegistry: void notifyOutgoingEmergencyCall(int,int,android.telephony.emergency.EmergencyNumber)>
<com.android.systemui.statusbar.UserUtil: void deleteUserWithPrompt(android.content.Context,int,com.android.systemui.statusbar.policy.UserSwitcherController)>
<android.net.wifi.p2p.WifiP2pManager.DnsSdTxtRecordListener: void onDnsSdTxtRecordAvailable(java.lang.String,java.util.Map,android.net.wifi.p2p.WifiP2pDevice)>
<com.android.systemui.plugins.DozeServicePlugin.RequestDoze: void onRequestHideDoze()>
<com.android.systemui.statusbar.StatusBarIconView: android.service.notification.StatusBarNotification getNotification()>
<com.android.server.contentcapture.ContentCaptureManagerService: void registerForExtraSettingsChanges(android.content.ContentResolver,android.database.ContentObserver)>
<com.android.systemui.statusbar.RemoteInputController: void grantInlineReplyUriPermission(android.service.notification.StatusBarNotification,android.net.Uri)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onNotificatonStartDraggingDown()>
<com.android.server.pm.DumpState: void setSharedUser(com.android.server.pm.SharedUserSetting)>
<android.net.wifi.WifiInfo: boolean is6GHz()>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: com.android.server.wm.ActivityTaskManagerInternal getActivityTaskManagerInternal()>
<com.android.systemui.tuner.BatteryPreference: void onDetached()>
<com.android.settingslib.location.RecentLocationAccesses: java.util.List getAppListSorted()>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: boolean hasPulsingNotifications()>
<com.android.systemui.statusbar.phone.DoubleTapHelper: void <init>(android.view.View,com.android.systemui.statusbar.phone.DoubleTapHelper.ActivationListener,com.android.systemui.statusbar.phone.DoubleTapHelper.DoubleTapListener,com.android.systemui.statusbar.phone.DoubleTapHelper.SlideBackListener,com.android.systemui.statusbar.phone.DoubleTapHelper.DoubleTapLogListener)>
<android.net.wifi.SoftApConfiguration: int describeContents()>
<android.net.wifi.WifiScanner: void configureWifiChange(android.net.wifi.WifiScanner.WifiChangeSettings)>
<android.graphics.perftests.TypefaceCreatePerfTest: void testCreate_fromFamilyName()>
<android.text.StaticLayoutPerfTest: void testCreate_PrecomputedText_NoStyled_Balanced_Hyphenation()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage: void remove(int,java.lang.String)>
<com.android.systemui.statusbar.policy.FlashlightController.FlashlightListener: void onFlashlightChanged(boolean)>
<com.android.systemui.util.sensors.ThresholdSensor: void setDelay(int)>
<com.android.settingslib.core.lifecycle.ObservableActivity: void onDestroy()>
<com.android.systemui.plugins.NotificationListenerController.NotificationProvider: android.service.notification.NotificationListenerService.RankingMap getRankingMap()>
<com.android.systemui.statusbar.notification.row.NotificationInfo: void onFinishInflate()>
<com.android.server.audio.AudioService: int getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)>
<com.android.server.utils.PriorityDump.PriorityDumper: void dumpHigh(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],boolean)>
<com.android.photos.views.BlockingGLTextureView: boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)>
<com.android.settingslib.utils.AsyncLoader: void onCanceled(java.lang.Object)>
<com.android.server.inputmethod.InputMethodManagerService: void systemRunning(com.android.server.statusbar.StatusBarManagerService)>
<android.net.wifi.aware.IWifiAwareMacAddressProvider: void macAddress(java.util.Map)>
<com.android.systemui.media.dialog.MediaOutputBaseDialog: void onStart()>
<com.android.server.people.PeopleService: void <init>(android.content.Context)>
<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int)>
<com.android.server.biometrics.iris.IrisService: com.android.server.biometrics.Constants getConstants()>
<com.android.systemui.car.userswitcher.UserGridRecyclerView.UserAdapter.UserAdapterViewHolder: void <init>(android.view.View)>
<com.android.systemui.statusbar.phone.PanelBar: void onPanelCollapsed()>
<com.android.server.SystemService: void publishBinderService(java.lang.String,android.os.IBinder,boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getStorageEncryption(android.content.ComponentName,int)>
<com.android.systemui.statusbar.policy.NetworkController: boolean hasEmergencyCryptKeeperText()>
<com.android.systemui.screenshot.ScreenshotNotificationSmartActionsProvider: void notifyOp(java.lang.String,com.android.systemui.screenshot.ScreenshotNotificationSmartActionsProvider.ScreenshotOp,com.android.systemui.screenshot.ScreenshotNotificationSmartActionsProvider.ScreenshotOpStatus,long)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean isSecure(int)>
<com.android.server.statusbar.StatusBarManagerService: void showPinningEnterExitToast(boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void onPluginConnected(com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin,android.content.Context)>
<com.android.systemui.statusbar.policy.KeyguardStateController: long getShortenedFadingAwayDuration()>
<com.android.systemui.util.sensors.ProximitySensor: java.lang.String toString()>
<com.android.server.accessibility.AccessibilityWindowManager: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>
<com.android.settingslib.widget.AdaptiveIconShapeDrawable: void <init>(android.content.res.Resources)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int checkProvisioningPreCondition(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.RemoteInputController: boolean isSpinning(java.lang.String)>
<com.android.systemui.statusbar.AlphaOptimizedButton: boolean hasOverlappingRendering()>
<com.android.systemui.classifier.Classifier: void onTouchEvent(android.view.MotionEvent)>
<com.android.server.uri.UriGrantsManagerInternal: void grantUriPermissionUncheckedFromIntent(com.android.server.uri.NeededUriGrants,com.android.server.uri.UriPermissionOwner)>
<com.android.server.biometrics.ClientMonitor: void vibrateError()>
<com.android.server.pm.ShortcutService: void setShortcutHostPackage(java.lang.String,java.lang.String,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenxv(int,int,java.nio.IntBuffer)>
<com.android.systemui.biometrics.AuthContainerView: void onAuthenticationSucceeded()>
<com.android.server.contentsuggestions.ContentSuggestionsManagerServiceShellCommand: void onHelp()>
<android.os.StrictModeTest: void timeCrossBinderThreadViolationNoStrictMode()>
<com.android.printspooler.ui.PrintActivity: void onOptionsOpened()>
<com.android.systemui.power.PowerUI: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.settingslib.graph.BluetoothDeviceLayerDrawable: android.graphics.drawable.Drawable.ConstantState getConstantState()>
<android.content.pm.PackageManagerInternal: boolean isSystemPackage(java.lang.String)>
<com.android.server.pm.ShortcutService: boolean hasShareTargets(java.lang.String,java.lang.String,int)>
<com.android.localtransport.LocalTransport: long requestBackupTime()>
<android.net.util.BaseNetdUnsolicitedEventListener: void onInterfaceAddressUpdated(java.lang.String,java.lang.String,int,int)>
<android.net.util.TetheringUtils.ForwardedStats: void <init>(android.net.util.TetheringUtils.ForwardedStats)>
<com.android.server.accessibility.FingerprintGestureDispatcher.FingerprintGestureClient: void onFingerprintGesture(int)>
<com.android.server.slice.SliceClientPermissions.SliceAuthority: java.lang.String getFileName()>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void setDefaultHomeProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.DefaultHomeProvider)>
<com.android.systemui.statusbar.phone.StatusBar: void abortTransient(int,int[])>
<com.android.statementservice.retriever.AssociationServiceException: void <init>(java.lang.String,java.lang.Exception)>
<com.android.uiautomator.testrunner.UiAutomatorTestRunner: void addTestListener(junit.framework.TestListener)>
<com.android.systemui.car.navigationbar.CarNavigationBarController: android.view.ViewGroup getLeftWindow()>
<android.net.wifi.IActionListener: void onFailure(int)>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: void updateNotificationViews(java.lang.String)>
<com.android.systemui.statusbar.policy.RemoteInputView: void setOnVisibilityChangedListener(java.util.function.Consumer)>
<com.android.gallery3d.glrenderer.GLCanvas: void recoverFromLightCycle()>
<com.android.systemui.plugins.DarkIconDispatcher.DarkReceiver: void onDarkChanged(android.graphics.Rect,float,int)>
<android.net.wifi.aware.DiscoverySessionCallback: void onSessionConfigUpdated()>
<com.android.server.DeviceIdleController: boolean isPowerSaveWhitelistAppInternal(java.lang.String)>
<com.android.systemui.util.LifecycleFragment: void onDestroy()>
<com.android.gallery3d.exif.ExifInterface: boolean setTagValue(int,int,java.lang.Object)>
<com.android.systemui.statusbar.phone.NearestTouchFrame: void onLayout(boolean,int,int,int,int)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareLogging: android.media.soundtrigger_middleware.ISoundTriggerModule attach(int,android.media.soundtrigger_middleware.ISoundTriggerCallback)>
<com.android.systemui.statusbar.notification.TransformState: void setTransformationEndX(float)>
<com.android.systemui.car.userswitcher.CarStatusBarHeader: void onFinishInflate()>
<com.android.server.SystemServiceManager: void switchUser(int,int)>
<com.android.printspooler.ui.PrintActivity: void onMalformedPdfFile()>
<android.app.usage.UsageStatsManagerInternal: void setActiveAdminApps(java.util.Set,int)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void onScreenTurningOff()>
<com.android.server.pm.permission.PermissionManagerService: java.util.List getAutoRevokeExemptionRequestedPackages(int)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: void setShelfIconVisible(boolean)>
<android.net.wifi.ParcelUtil: void writeCertificate(android.os.Parcel,java.security.cert.X509Certificate)>
<com.android.systemui.shared.system.RotationWatcher: void disable()>
<com.android.systemui.statusbar.notification.collection.ListEntry: com.android.systemui.statusbar.notification.collection.NotificationEntry getRepresentativeEntry()>
<com.android.systemui.car.userswitcher.UserGridRecyclerView: void buildAdapter()>
<com.android.server.locksettings.recoverablekeystore.serialization.KeyChainSnapshotParserException: void <init>(java.lang.String,java.lang.Throwable)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getVersionCode()>
<com.android.printspooler.ui.PageAdapter: void onOrientationChanged()>
<com.android.server.inputmethod.InputMethodManagerInternal: java.util.List getEnabledInputMethodListAsUser(int)>
<com.android.keyguard.KeyguardPasswordView: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<com.android.gallery3d.glrenderer.BasicTexture: void recycle()>
<com.android.systemui.statusbar.FlingAnimationUtils: void apply(android.view.ViewPropertyAnimator,float,float,float)>
<com.android.systemui.SwipeHelper: void cancelLongPress()>
<com.android.settingslib.location.RecentLocationApps.Request: void <init>(java.lang.String,android.os.UserHandle,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.CharSequence,long)>
<com.android.systemui.classifier.FalsingManagerProxy: void onNotificatonStartDraggingDown()>
<com.android.server.policy.WindowManagerPolicy: void dumpDebug(android.util.proto.ProtoOutputStream,long)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage removeUsesLibrary(java.lang.String)>
<com.android.server.policy.WindowOrientationListener: void enable()>
<com.android.systemui.statusbar.phone.RotationButton: boolean acceptRotationProposal()>
<com.android.server.usb.descriptors.Usb20ACOutputTerminal: byte getSourceID()>
<android.net.wifi.hotspot2.OsuProvider: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: com.android.systemui.statusbar.policy.HeadsUpManager.HeadsUpEntry createAlertEntry()>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexxvOES(int[],int)>
<com.android.systemui.shared.recents.model.Task.TaskKey: void <init>(int,int,android.content.Intent,android.content.ComponentName,int,long,int)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.statusbar.phone.ShadeControllerImpl: void postOnShadeExpanded(java.lang.Runnable)>
<com.android.server.locksettings.LockSettingsStrongAuth.StrongAuthTimeoutAlarmListener: void setLatestStrongAuthTime(long)>
<com.android.gallery3d.glrenderer.GLCanvas: void save(int)>
<com.android.server.pm.PersistentPreferredIntentResolver: boolean isPackageForFilter(java.lang.String,com.android.server.pm.PersistentPreferredActivity)>
<com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException: void <init>(java.lang.Exception)>
<com.android.server.policy.WindowManagerPolicy.WindowState: int getOwningUid()>
<com.android.keyguard.CarrierTextController.CarrierTextCallback: void finishedWakingUp()>
<com.android.server.textclassifier.IconsContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<com.android.server.AnimationThread: com.android.server.AnimationThread get()>
<com.android.wallpapercropper.WallpaperCropActivity.BitmapCropTask: void setNoCrop(boolean)>
<com.android.systemui.statusbar.KeyguardIndicationController: void updateIndication(boolean)>
<com.android.keyguard.KeyguardHostView: void startDisappearAnimation(java.lang.Runnable)>
<com.android.systemui.egg.MLandActivity: void playerPlus(android.view.View)>
<com.android.systemui.statusbar.notification.stack.AnimationFilter: void applyCombination(java.util.ArrayList)>
<com.android.server.inputmethod.InputMethodManagerService.ImeDisplayValidator: boolean displayCanShowIme(int)>
<com.android.systemui.statusbar.phone.BarTransitions.BarBackgroundDrawable: void <init>(android.content.Context,int)>
<android.net.ip.IpClientCallbacks: void onProvisioningFailure(android.net.LinkProperties)>
<android.net.wifi.SoftApConfiguration: java.util.List getAllowedClientList()>
<com.android.systemui.analytics.SensorLoggerSession: java.lang.String toString()>
<com.android.server.input.InputManagerService: void setPointerIconType(int)>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: int getEapType()>
<com.android.systemui.statusbar.policy.NetworkController.SignalCallback: void setSubs(java.util.List)>
<android.net.wifi.WifiInfo: void setInetAddress(java.net.InetAddress)>
<com.android.systemui.statusbar.policy.KeyButtonRipple: void setPressed(boolean)>
<android.net.wifi.p2p.nsd.WifiP2pServiceInfo: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.phone.BackGestureTfClassifierProvider: float predict(java.lang.Object[])>
<com.android.server.autofill.AutofillManagerService: void onServiceEnabledLocked(com.android.server.autofill.AutofillManagerServiceImpl,int)>
<com.android.server.accessibility.AccessibilityWindowManager: int getActiveWindowId(int)>
<com.android.systemui.statusbar.policy.BluetoothController: int getBondState(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator alpha(float,float,java.lang.Runnable[])>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setSecurityLoggingEnabled(android.content.ComponentName,boolean)>
<com.android.server.pm.UserManagerService.LifeCycle: void onBootPhase(int)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: boolean needsRedaction(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: com.android.systemui.statusbar.notification.row.ExpandableNotificationRow getNotificationParent()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setBlockingHelperShowing(boolean)>
<com.android.keyguard.KeyguardViewController: boolean shouldDisableWindowAnimationsForUnlock()>
<com.android.systemui.plugins.VolumeDialogController: void setRingerMode(int,boolean)>
<com.android.server.media.MediaSessionRecord: void setSessionPolicies(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void requestDisallowInterceptTouchEvent(boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void updateChildrenStates(com.android.systemui.statusbar.notification.stack.AmbientState)>
<com.android.systemui.media.MediaProjectionPermissionActivity: void onClick(android.content.DialogInterface,int)>
<com.android.server.NetworkManagementService: void tetherInterface(java.lang.String)>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: void dispatchWindowInsetsAnimationEnd(android.view.WindowInsetsAnimation)>
<com.android.systemui.media.dialog.MediaOutputController.Callback: void onMediaChanged()>
<com.android.packageinstaller.wear.WearPackageIconProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<com.android.server.pm.permission.BasePermission: android.content.pm.PermissionInfo generatePermissionInfo(int,int)>
<android.net.wifi.WifiManager.WifiLock: void setWorkSource(android.os.WorkSource)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void deleteBuffer(int)>
<android.net.wifi.rtt.RangingRequest: int hashCode()>
<com.android.server.accessibility.gestures.GestureManifold.Listener: boolean onGestureCancelled(android.view.MotionEvent,android.view.MotionEvent,int)>
<com.android.settingslib.widget.FooterPreference.Builder: com.android.settingslib.widget.FooterPreference.Builder setTitle(int)>
<android.net.wifi.p2p.WifiP2pManager: void requestP2pState(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.P2pStateListener)>
<com.android.systemui.statusbar.NotificationListener.NotificationHandler: void onNotificationsInitialized()>
<com.android.systemui.statusbar.notification.TransformState: void transformViewFullyFrom(com.android.systemui.statusbar.notification.TransformState,float)>
<com.android.printservice.recommendation.util.DiscoveryListenerMultiplexer: void addListener(android.net.nsd.NsdManager,java.lang.String,android.net.nsd.NsdManager.DiscoveryListener)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isDefaultToDeviceProtectedStorage()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setExpandAnimationRunning(boolean)>
<com.android.systemui.qs.tileimpl.QSTileImpl: long getStaleTimeout()>
<com.android.systemui.statusbar.policy.UserInfoController: void reloadUserInfo()>
<com.android.systemui.dagger.SystemUIDefaultModule: com.android.systemui.plugins.qs.QSFactory bindQSFactory(com.android.systemui.qs.tileimpl.QSFactoryImpl)>
<com.android.systemui.statusbar.phone.NavigationBarView: void setAccessibilityButtonState(boolean,boolean)>
<com.android.uiautomator.core.UiObject: boolean performTwoPointerGesture(android.graphics.Point,android.graphics.Point,android.graphics.Point,android.graphics.Point,int)>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isPulsing()>
<com.google.android.startop.iorap.ActivityInfo: void writeToParcel(android.os.Parcel,int)>
<com.android.keyguard.AlphaOptimizedImageButton: boolean hasOverlappingRendering()>
<com.android.systemui.plugins.qs.QS: void setQsExpansion(float,float)>
<com.android.systemui.tuner.BatteryPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.commands.telecom.Telecom: void onShowUsage(java.io.PrintStream)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void updateBackgroundAlpha(float)>
<com.android.systemui.statusbar.policy.AccessPointControllerImpl: void scanForAccessPoints()>
<com.android.server.soundtrigger_middleware.Dumpable: void dump(java.io.PrintWriter)>
<com.android.server.integrity.model.ByteTrackedOutputStream: int getWrittenBytesCount()>
<com.android.systemui.classifier.HistoryEvaluator: float getEvaluation()>
<com.android.server.role.RoleUserState: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>
<com.android.keyguard.KeyguardStatusView: float getClockTextSize()>
<com.android.printspooler.ui.PrinterRegistry.OnPrintersChangeListener: void onPrintersInvalid()>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: boolean isMenuVisible()>
<com.android.gallery3d.common.Utils: void closeSilently(android.database.Cursor)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: boolean isCurrentProfile(int)>
<com.android.systemui.shared.system.SystemGestureExclusionListenerCompat: void onExclusionChanged(android.graphics.Region)>
<android.net.wifi.p2p.IWifiP2pManager: void setMiracastMode(int)>
<android.widget.TextViewPrecomputedTextPerfTest: void testSetText_PrecomputedText()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setOrganizationColorForUser(int,int)>
<com.android.systemui.biometrics.AuthBiometricView: void setCallback(com.android.systemui.biometrics.AuthBiometricView.Callback)>
<com.android.systemui.qs.customize.CustomizeTileView: void handleStateChanged(com.android.systemui.plugins.qs.QSTile.State)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void expand(boolean)>
<android.media.Controller2Link: void <init>(android.media.MediaController2)>
<com.android.systemui.plugins.PluginEnablerImpl: int getDisableReason(android.content.ComponentName)>
<android.net.wifi.aware.ParcelablePeerHandle: void <init>(android.net.wifi.aware.PeerHandle)>
<com.android.systemui.power.PowerUI: void maybeShowBatteryWarning(com.android.systemui.powe.BatteryStateSnapshot,com.android.systemui.powe.BatteryStateSnapshot)>
<com.android.systemui.statusbar.notification.row.NotifRemoteViewCache: android.widget.RemoteViews getCachedView(com.android.systemui.statusbar.notification.collection.NotificationEntry,int)>
<com.android.systemui.statusbar.phone.SystemUIDialog: void onStop()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: java.lang.String getPassword()>
<com.android.server.trust.TrustAgentWrapper: void onUnlockAttempt(boolean)>
<com.android.systemui.statusbar.DragDownHelper: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.systemui.statusbar.notification.MessagingImageTransformState: void reset()>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void resetRuntimePermissions(com.android.server.pm.parsing.pkg.AndroidPackage,int)>
<com.android.systemui.shared.plugins.PluginInitializer: void onPluginManagerInit()>
<com.android.shell.BugreportStorageProvider: android.os.ParcelFileDescriptor openDocument(java.lang.String,java.lang.String,android.os.CancellationSignal)>
<com.android.systemui.qs.QuickStatusBarHeader: void onClick(android.view.View)>
<android.content.pm.PackageManagerInternal: void removeAllNonSystemPackageSuspensions(int)>
<com.android.server.usb.descriptors.UsbVCSelectorUnit: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.settingslib.display.BrightnessUtils: float convertGammaToLinearFloat(int,float,float)>
<com.android.systemui.pip.tv.PipMenuActivity: void onShowPipMenu()>
<com.android.systemui.car.userswitcher.FullScreenUserSwitcherViewController: void <init>(android.content.Context,android.content.res.Resources,com.android.systemui.car.CarServiceProvider,com.android.systemui.car.window.OverlayViewGlobalStateController)>
<com.android.mediadrm.signer.MediaDrmSigner.CertificateRequest: java.lang.String getDefaultUrl()>
<com.android.systemui.qs.tileimpl.SlashImageView: void setImageViewDrawable(com.android.systemui.qs.SlashDrawable)>
<com.android.systemui.assist.ui.InvocationLightsView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.net.wifi.aware.SubscribeConfig: void <init>(byte[],byte[],byte[],int,int,boolean,boolean,int,boolean,int)>
<com.android.commands.appwidget.AppWidget: void main(java.lang.String[])>
<android.text.NonEditableTextGenerator: java.lang.CharSequence build()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvxv(int,int,java.nio.IntBuffer)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: float getGroupExpandFraction()>
<com.android.server.media.MediaSessionRecord: int getSessionPolicies()>
<android.net.wifi.hotspot2.pps.Policy.RoamingPartner: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.policy.NetworkController: void removeEmergencyListener(com.android.systemui.statusbar.policy.NetworkController.EmergencyListener)>
<com.android.server.usb.UsbService: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>
<com.android.networkstack.tethering.TetheringService: void onCreate()>
<com.android.server.pm.permission.BasePermission: void transfer(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.MenuItem getAppOpsMenuItem(android.content.Context)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: int getBucket()>
<com.android.settingslib.CustomEditTextPreference.CustomPreferenceDialogFragment: void onPrepareDialogBuilder(android.app.AlertDialog.Builder)>
<com.android.server.pm.PackageManagerService: void setRuntimePermissionsVersion(int,int)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: boolean shouldHideNotifications(java.lang.String)>
<com.android.server.accessibility.gestures.TouchExplorer: boolean onGestureStarted()>
<com.android.systemui.globalactions.GlobalActionsDialog: int getMaxShownPowerItems()>
<com.android.server.statusbar.StatusBarManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.policy.WindowManagerPolicy: void showBootMessage(java.lang.CharSequence,boolean)>
<android.net.wifi.hotspot2.pps.UpdateParameter: long getUpdateIntervalInMinutes()>
<com.android.settingslib.animation.AppearAnimationUtils: void startAnimation2d(java.lang.Object[][],java.lang.Runnable,com.android.settingslib.animation.AppearAnimationCreator)>
<com.android.server.infra.AbstractPerUserSystemService: void handlePackageUpdateLocked(java.lang.String)>
<android.net.wifi.WifiScanner.WifiChangeSettings: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.hotspot2.pps.Credential: java.security.PrivateKey getClientPrivateKey()>
<com.android.systemui.power.PowerNotificationWarnings: void updateSnapshot(com.android.systemui.powe.BatteryStateSnapshot)>
<com.android.server.biometrics.ClientMonitor: int[] getAcquireVendorIgnorelist()>
<com.android.systemui.globalactions.GlobalActionsDialog: void dismissDialog()>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: boolean isLibrary(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)>
<android.net.wifi.hotspot2.OsuProvider: void <init>(android.net.wifi.hotspot2.OsuProvider)>
<com.android.settingslib.net.NetworkStatsSummaryLoader: void onStopLoading()>
<com.android.systemui.classifier.FalsingManagerImpl: void setShowingAod(boolean)>
<android.perftests.utils.SettingsStateManager: java.lang.String get()>
<com.android.settingslib.applications.ApplicationsState.Callbacks: void onPackageSizeChanged(java.lang.String)>
<com.android.systemui.stackdivider.Divider: void onDisplayAdded(int)>
<com.android.server.usb.descriptors.Usb10ACHeader: byte[] getInterfaceNums()>
<com.android.systemui.qs.tileimpl.QSTileBaseView: void init(android.view.View.OnClickListener,android.view.View.OnClickListener,android.view.View.OnLongClickListener)>
<com.android.systemui.qs.tiles.BatterySaverTile: void handleDestroy()>
<com.android.systemui.qs.QSFragment: void setQsExpansion(float,float)>
<com.android.server.pm.UserRestrictionsUtils: boolean isValidRestriction(java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isGroupExpansionChanging()>
<com.android.settingslib.Utils: java.lang.String formatPercentage(double)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_toAllowed_whenNotAbleToRequest_doesNotSendBroadcast()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: int compareTo(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.server.ConnectivityService: boolean setAlwaysOnVpnPackage(int,java.lang.String,boolean,java.util.List)>
<com.android.server.attention.AttentionManagerService: com.android.server.attention.AttentionManagerService.UserState peekCurrentUserStateLocked()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void requestDisallowLongPress()>
<com.android.systemui.statusbar.policy.RemoteInputView: void dispatchFinishTemporaryDetach()>
<com.android.systemui.statusbar.notification.stack.ViewState: boolean isAnimatingY(android.view.View)>
<com.android.pacprocessor.LibpacInterface: java.lang.String makeProxyRequest(java.lang.String,java.lang.String)>
<com.android.systemui.biometrics.AuthBiometricView: void onSaveState(android.os.Bundle)>
<com.android.systemui.pip.PipBoundsHandler: void onConfigurationChanged()>
<javax.microedition.khronos.opengles.GL10: void glFogx(int,int)>
<android.media.Session2Link: void cancelSessionCommand(android.media.Controller2Link,int)>
<com.android.server.storage.FileCollector.MeasurementResult: long totalAccountedSize()>
<android.net.util.BaseNetdUnsolicitedEventListener: void onInterfaceAdded(java.lang.String)>
<com.android.keyguard.KeyguardClockSwitch: void refresh()>
<com.android.server.policy.WindowManagerPolicy: void showRecentApps()>
<com.android.systemui.statusbar.policy.DataSaverControllerImpl: void addCallback(android.net.NetworkPolicyManager.Listener)>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.lang.String generateKeyWithMetadata(java.lang.String,byte[])>
<com.android.server.AppStateTracker: void dump(com.android.internal.util.IndentingPrintWriter)>
<com.android.keyguard.KeyguardViewController: void setNeedsInput(boolean)>
<com.android.systemui.statusbar.phone.DozeServiceHost: void stopDozing()>
<com.android.encryptedlocaltransport.EncryptedLocalTransportService: void onCreate()>
<com.android.server.pm.UserTypeDetails: boolean isFull()>
<com.android.systemui.pip.PipTaskOrganizer: android.graphics.Rect getCurrentOrAnimatingBounds()>
<javax.microedition.khronos.opengles.GL10: void glMaterialf(int,int,float)>
<com.android.systemui.shared.plugins.PluginManagerImpl: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.shared.recents.model.Task.TaskCallbacks: void onTaskDataLoaded(com.android.systemui.shared.recents.model.Task,com.android.systemui.shared.recents.model.ThumbnailData)>
<com.android.server.pm.PackageSender: void sendPackageAddedForNewUsers(java.lang.String,boolean,boolean,int,int[],int[],int)>
<com.android.server.protolog.common.InvalidFormatStringException: void <init>(java.lang.String,java.lang.Throwable)>
<com.android.server.statusbar.StatusBarShellCommand: void onHelp()>
<com.android.systemui.shared.system.TaskStackChangeListener: void onActivityLaunchOnSecondaryDisplayFailed()>
<com.android.systemui.statusbar.phone.StatusBarIconController: void setIcon(java.lang.String,int,java.lang.CharSequence)>
<com.android.systemui.statusbar.StatusBarIconView: void setVisibleState(int)>
<com.android.systemui.statusbar.policy.KeyguardStateController: boolean canDismissLockScreen()>
<com.android.systemui.statusbar.phone.StatusBar: void postAnimateCollapsePanels()>
<com.android.settingslib.accounts.AuthenticatorHelper: void preloadDrawableForType(android.content.Context,java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setForceEphemeralUsers(android.content.ComponentName,boolean)>
<com.android.systemui.statusbar.notification.row.NotificationGutsManager: void setCallback(com.android.systemui.statusbar.NotificationLifetimeExtender.NotificationSafeToRemoveCallback)>
<com.android.systemui.biometrics.AuthBiometricView: void setEffectiveUserId(int)>
<com.android.server.NetworkScoreService: android.net.NetworkScorerAppData getActiveScorer()>
<com.android.gallery3d.glrenderer.GLES20Canvas: void scale(float,float,float)>
<com.android.systemui.volume.ZenModePanel.Callback: void onInteraction()>
<com.android.server.ServiceWatcher.ServiceInfo: java.lang.String toString()>
<com.android.systemui.statusbar.StatusIconDisplayable: boolean isIconVisible()>
<android.net.wifi.INetworkRequestUserSelectionCallback: void reject()>
<com.android.systemui.qs.tiles.WifiTile.WifiDetailAdapter: void setToggleState(boolean)>
<com.android.systemui.analytics.DataCollector: void onTrackingStarted()>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: boolean canConfigBluetooth()>
<com.android.systemui.pip.tv.PipMenuActivity: void onMoveToFullscreen()>
<com.android.systemui.qs.tileimpl.QSTileImpl: java.lang.String getMetricsSpec()>
<android.net.wifi.WifiManager: boolean isWifiScannerSupported()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void notifyGroupChildRemoved(com.android.systemui.statusbar.notification.row.ExpandableView,android.view.ViewGroup)>
<android.net.wifi.WifiInfo: void setRequestingPackageName(java.lang.String)>
<com.android.systemui.statusbar.notification.row.HybridGroupManager: java.lang.CharSequence resolveTitle(android.app.Notification)>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void cleanUpViewStateForEntry(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.pm.permission.PermissionManagerServiceInternal.PermissionCallback: void onGidsChanged(int,int)>
<com.android.settingslib.suggestions.SuggestionLoaderCompat: void <init>(android.content.Context,com.android.settingslib.suggestions.SuggestionController)>
<com.android.server.accounts.AccountManagerService: java.lang.String getUserData(android.accounts.Account,java.lang.String)>
<com.android.systemui.plugins.PluginFragment: void onSaveInstanceState(android.os.Bundle)>
<com.android.systemui.shared.tracing.FrameProtoTracer: void <init>(com.android.systemui.shared.tracing.FrameProtoTracer.ProtoTraceParams)>
<com.android.systemui.statusbar.phone.KeyguardBouncer: void notifyKeyguardAuthenticated(boolean)>
<com.android.commands.hid.Event: int getBus()>
<com.android.systemui.plugins.FalsingManager: void onScreenOff()>
<android.net.ConnectivityModuleConnector.ModuleServiceCallback: void onModuleServiceConnected(android.os.IBinder)>
<com.android.settingslib.drawer.Tile: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiManager: boolean is6GHzBandSupported()>
<com.android.systemui.statusbar.phone.ScrimController: void setCurrentUser(int)>
<com.android.server.pm.PackageManagerService: void deleteApplicationCacheFilesAsUser(java.lang.String,int,android.content.pm.IPackageDataObserver)>
<com.android.server.locksettings.SyntheticPasswordManager: void destroyEscrowData(int)>
<com.android.server.NetworkManagementService: void addInterfaceToLocalNetwork(java.lang.String,java.util.List)>
<com.google.android.startop.iorap.AppLaunchEvent.ActivityLaunchCancelled: void writeToParcelImpl(android.os.Parcel,int)>
<com.android.server.wallpaper.WallpaperManagerService: void onBootPhase(int)>
<android.multiuser.UserLifecycleTests: void switchUser_stopped()>
<android.net.wifi.WifiManager: boolean setWifiConnectedNetworkScorer(java.util.concurrent.Executor,android.net.wifi.WifiManager.WifiConnectedNetworkScorer)>
<com.android.server.audio.AudioService: void unregisterRecordingCallback(android.media.IRecordingConfigDispatcher)>
<com.android.systemui.statusbar.NotificationListener.NotificationHandler: void onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap,int)>
<com.android.server.audio.AudioService: void setMicrophoneMuteFromSwitch(boolean)>
<com.android.printspooler.ui.PageAdapter: void open(android.os.ParcelFileDescriptor,java.lang.Runnable)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void onAppearAnimationFinished(boolean)>
<com.android.server.accessibility.gestures.TouchState: boolean isInjectedPointerDown(int)>
<com.android.server.media.MediaRouterService: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>
<com.android.settingslib.searchprovider.SettingsXmlIndexProvider: android.database.Cursor queryXmlResources(java.lang.String[])>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getNativeLibraryRootDir()>
<com.android.server.pm.permission.BasePermission: boolean isDynamic()>
<com.android.systemui.classifier.FalsingManagerFake: void setNotificationExpanded()>
<com.android.photos.views.TiledImageView: boolean isTilingSupported()>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setPulseHeight(float)>
<com.android.systemui.shared.system.ActivityManagerWrapper: boolean isLockToAppActive()>
<com.android.server.accessibility.EventStreamTransformation: com.android.server.accessibility.EventStreamTransformation getNext()>
<com.android.systemui.statusbar.policy.SecurityController.SecurityControllerCallback: void onStateChanged()>
<android.net.wifi.rtt.ResponderLocation: int getExpectedToMove()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setKeyguardShowing(boolean)>
<javax.microedition.khronos.opengles.GL10: void glLightfv(int,int,java.nio.FloatBuffer)>
<com.android.server.display.utils.Plog.SystemPlog: void emit(java.lang.String)>
<javax.microedition.khronos.opengles.GL10: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)>
<com.android.systemui.statusbar.SuperStatusBarViewFactory: com.android.systemui.statusbar.phone.StatusBarWindowView getStatusBarWindowView()>
<com.android.localtransport.LocalTransportParameters: void update(android.util.KeyValueListParser)>
<com.android.systemui.screenrecord.RecordingController.RecordingStateChangeCallback: void onRecordingStart()>
<com.android.printservice.recommendation.plugin.xerox.XeroxPrintServiceRecommendationPlugin: java.lang.CharSequence getPackageName()>
<com.android.server.infra.AbstractMasterSystemService: void onBootPhase(int)>
<com.android.systemui.statusbar.notification.stack.ExpandableViewState: void copyFrom(com.android.systemui.statusbar.notification.stack.ViewState)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setOnKeyguard(boolean)>
<com.android.systemui.model.SysUiState: void removeCallback(com.android.systemui.model.SysUiState.SysUiStateCallback)>
<com.google.android.startop.iorap.EventSequenceValidator: void onActivityLaunchFinished(byte[],long)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void reboot(android.content.ComponentName)>
<android.net.wifi.WifiScanner: boolean isFullBandScan(int,boolean)>
<com.android.settingslib.wifi.AccessPointPreference: void onBindViewHolder(androidx.preference.PreferenceViewHolder)>
<com.android.systemui.statusbar.StatusBarWifiView: void setDecorColor(int)>
<com.android.systemui.util.leak.DumpTruck: com.android.systemui.util.leak.DumpTruck captureHeaps(java.util.List)>
<com.android.server.biometrics.BiometricServiceBase: void <init>(android.content.Context)>
<android.net.TetheredClient: android.net.MacAddress getMacAddress()>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.policy.SensorPrivacyController provideSensorPrivacyControllerImpl(com.android.systemui.statusbar.policy.SensorPrivacyControllerImpl)>
<com.android.systemui.statusbar.phone.RotationButton: boolean show()>
<com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm.StackScrollAlgorithmState: int getPaddingAfterChild(com.android.systemui.statusbar.notification.row.ExpandableView)>
<com.android.systemui.statusbar.phone.ScrimController: void onScreenTurnedOn()>
<android.net.wifi.aware.IWifiAwareManager: android.net.wifi.aware.Characteristics getCharacteristics()>
<com.android.systemui.volume.ZenModePanel: void onFinishInflate()>
<android.perftests.utils.Stats: long getMin()>
<android.net.wifi.WifiManager: java.util.List getWifiConfigForMatchedNetworkSuggestionsSharedWithUser(java.util.List)>
<com.android.systemui.analytics.DataCollector: void onCameraOn()>
<com.android.systemui.recents.Recents: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.notification.NotificationActivityStarter: void startNotificationGutsIntent(android.content.Intent,int,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.plugins.FalsingManager: boolean shouldEnforceBouncer()>
<com.android.systemui.statusbar.policy.BatteryController.EstimateFetchCompletion: void onBatteryRemainingEstimateRetrieved(java.lang.String)>
<com.android.permission.persistence.RuntimePermissionsState.PermissionState: boolean equals(java.lang.Object)>
<com.android.server.GestureLauncherService: void onStart()>
<com.android.systemui.tuner.PowerNotificationControlsFragment: void onViewCreated(android.view.View,android.os.Bundle)>
<com.android.server.print.RemotePrintServiceRecommendationService.RemotePrintServiceRecommendationServiceCallbacks: void onPrintServiceRecommendationsUpdated(java.util.List)>
<com.android.server.usb.descriptors.report.HTMLReportCanvas: void openListItem()>
<com.android.server.statusbar.StatusBarManagerService: void onNotificationClear(java.lang.String,java.lang.String,int,int,java.lang.String,int,int,com.android.internal.statusbar.NotificationVisibility)>
<com.android.settingslib.widget.BarChartPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.utils.DeviceConfigInterface: void removeOnPropertiesChangedListener(android.provider.DeviceConfig.OnPropertiesChangedListener)>
<com.android.server.pm.InstructionSets: java.lang.String[] getAllDexCodeInstructionSets()>
<com.android.server.search.Searchables: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>
<com.android.systemui.glwallpaper.EglHelper: void destroyEglContext()>
<com.android.systemui.settings.ToggleSliderView: void onAttachedToWindow()>
<com.android.systemui.pip.PipTaskOrganizer: void onFixedRotationFinished(int)>
<com.android.server.pm.PackageAbiHelper: android.util.Pair derivePackageAbi(com.android.server.pm.parsing.pkg.AndroidPackage,boolean,java.lang.String,boolean)>
<com.android.nfc_extras.NfcAdapterExtras: void setCardEmulationRoute(com.android.nfc_extras.NfcAdapterExtras.CardEmulationRoute)>
<android.net.wifi.p2p.WifiP2pManager: void setUpnpServiceResponseListener(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.UpnpServiceResponseListener)>
<com.android.server.textclassifier.IconsContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<com.android.settingslib.media.InfoMediaManager: void stopScan()>
<com.android.systemui.shared.tracing.FrameProtoTracer.ProtoTraceParams: java.io.File getTraceFile()>
<com.android.localtransport.LocalTransport: int performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor)>
<com.android.settingslib.applications.InterestingConfigChanges: boolean applyNewConfig(android.content.res.Resources)>
<com.android.server.accessibility.MagnificationController: boolean magnificationRegionContains(int,float,float)>
<com.android.printspooler.util.PageRangeUtils: int getNormalizedPageCount(android.print.PageRange[],int)>
<android.view.CutoutSpecificationBenchmark: void parseByNewMethodForDoubleCutout()>
<com.android.server.pm.ShortcutNonPersistentUser: void dump(java.io.PrintWriter,java.lang.String,com.android.server.pm.ShortcutService.DumpFilter)>
<com.android.systemui.classifier.FalsingManagerProxy: void onNotificationDoubleTap(boolean,float,float)>
<com.android.server.media.RemoteDisplayProviderWatcher: void dump(java.io.PrintWriter,java.lang.String)>
<com.android.server.locksettings.LockSettingsService: java.lang.String importKeyWithMetadata(java.lang.String,byte[],byte[])>
<com.android.systemui.statusbar.notification.icon.IconPack: com.android.systemui.statusbar.notification.icon.IconPack buildPack(com.android.systemui.statusbar.StatusBarIconView,com.android.systemui.statusbar.StatusBarIconView,com.android.systemui.statusbar.StatusBarIconView,com.android.systemui.statusbar.StatusBarIconView,com.android.systemui.statusbar.notification.icon.IconPack)>
<com.android.settingslib.RestrictedPreference: void onAttachedToHierarchy(androidx.preference.PreferenceManager)>
<com.android.server.display.DisplayModeDirector.BrightnessObserver: void onDeviceConfigRefreshRateInHighZoneChanged(int)>
<com.android.systemui.volume.VolumeDialogControllerImpl: void setVolumeController()>
<com.android.server.accounts.AccountManagerService.Lifecycle: void onStart()>
<com.android.systemui.statusbar.policy.HeadsUpManager: void removeListener(com.android.systemui.statusbar.policy.OnHeadsUpChangedListener)>
<android.net.wifi.RttManager.ParcelableRttParams: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.SoftApCapability: void <init>(long)>
<com.android.photos.views.TiledImageRenderer.TileSource: int getTileSize()>
<com.android.systemui.SystemUIAppComponentFactory: android.app.Service instantiateServiceCompat(java.lang.ClassLoader,java.lang.String,android.content.Intent)>
<com.android.server.biometrics.face.FaceService: void updateActiveGroup(int,java.lang.String)>
<com.android.systemui.statusbar.notification.icon.IconPack: com.android.systemui.statusbar.StatusBarIconView getShelfIcon()>
<com.android.systemui.ForegroundServicesDialog: void onStop()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSystemOnlyUser(android.content.ComponentName)>
<com.android.systemui.statusbar.policy.FlashlightController: void setFlashlight(boolean)>
<com.android.keyguard.KeyguardAbsKeyInputView: boolean startDisappearAnimation(java.lang.Runnable)>
<com.android.settingslib.widget.RadioButtonPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.qs.tiles.NightDisplayTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.BooleanState,java.lang.Object)>
<com.android.systemui.keyguard.WakefulnessLifecycle.Observer: void onFinishedGoingToSleep()>
<android.net.wifi.aware.TlvBufferUtils.TlvConstructor: android.net.wifi.aware.TlvBufferUtils.TlvConstructor putShort(int,short)>
<com.android.systemui.util.LifecycleFragment: void onPause()>
<com.android.server.media.MediaSessionRecord: void binderDied()>
<com.android.server.locksettings.recoverablekeystore.storage.CleanupManager: void verifyKnownUsers()>
<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>
<com.android.server.pm.PackageManagerService.Injector: com.android.server.wm.ActivityTaskManagerInternal getActivityTaskManagerInternal()>
<android.os.ParcelPerfTest: void timeGetDataCapacity()>
<android.net.wifi.WifiManager.SoftApCallback: void onConnectedClientsChanged(java.util.List)>
<com.android.systemui.statusbar.phone.StatusBar: void showScreenPinningRequest(int,boolean)>
<android.net.wifi.hotspot2.pps.Policy: void setMinHomeUplinkBandwidth(long)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isEnabled()>
<com.android.gallery3d.glrenderer.GLES20Canvas: void restore()>
<com.android.systemui.shared.system.RecentsAnimationControllerCompat: void setInputConsumerEnabled(boolean)>
<android.net.TetheringManager.TetheringRequest: android.net.LinkAddress getClientStaticIpv4Address()>
<com.android.systemui.qs.PagedTileLayout: void setListening(boolean)>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>
<com.android.systemui.pip.tv.PipMenuActivity: void onPipActivityClosed()>
<com.android.systemui.dagger.DefaultActivityBinder: android.app.Activity bindScreenRecordDialog(com.android.systemui.screenrecord.ScreenRecordDialog)>
<android.net.wifi.SoftApConfiguration: java.lang.String getSsid()>
<com.android.systemui.statusbar.notification.stack.AnimationFilter: void combineFilter(com.android.systemui.statusbar.notification.stack.AnimationFilter)>
<com.android.server.integrity.parser.RandomAccessObject: com.android.server.integrity.parser.RandomAccessObject ofFile(java.io.File)>
<com.android.systemui.statusbar.notification.stack.ViewState: long cancelAnimatorAndGetNewDuration(long,android.animation.ValueAnimator)>
<com.android.systemui.statusbar.KeyguardIndicationController: void setDozing(boolean)>
<com.android.systemui.globalactions.GlobalActionsDialog: void onShow(android.content.DialogInterface)>
<com.android.server.display.BrightnessMappingStrategy: boolean setLoggingEnabled(boolean)>
<com.android.systemui.screenshot.ScreenshotNotificationSmartActionsProvider: void notifyAction(java.lang.String,java.lang.String,boolean)>
<android.multiuser.UserLifecycleTests: void tearDown()>
<com.android.settingslib.suggestions.SuggestionControllerMixin: boolean isSuggestionLoaded()>
<com.android.printspooler.widget.PrintContentView: void computeScroll()>
<android.net.wifi.hotspot2.pps.Credential: android.net.wifi.hotspot2.pps.Credential.SimCredential getSimCredential()>
<com.android.settingslib.DeviceInfoUtils: java.lang.String getMsvSuffix()>
<com.android.keyguard.clock.BubbleClockController: void onTimeZoneChanged(java.util.TimeZone)>
<com.android.systemui.bubbles.BubbleViewProvider: int getDotColor()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: int getMaxConnectionState()>
<android.net.wifi.WifiManager.WifiLock: boolean isHeld()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void setLegacy(boolean)>
<com.android.server.biometrics.face.FaceService: com.android.server.biometrics.BiometricServiceBase.DaemonWrapper getDaemonWrapper()>
<com.android.systemui.statusbar.policy.NetworkController.AccessPointController: void removeAccessPointCallback(com.android.systemui.statusbar.policy.NetworkController.AccessPointController.AccessPointCallback)>
<com.android.systemui.car.notification.NotificationPanelViewMediator: void onOverlayChanged()>
<com.android.wallpapercropper.CropView: void setTouchEnabled(boolean)>
<com.android.systemui.car.window.OverlayViewController: boolean shouldShowWhenOccluded()>
<com.android.settingslib.license.LicenseHtmlLoaderCompat: java.io.File loadInBackground()>
<com.android.systemui.util.Utils: boolean useQsMediaPlayer(android.content.Context)>
<com.android.keyguard.KeyguardSecurityContainer: void setLockPatternUtils(com.android.internal.widget.LockPatternUtils)>
<com.android.systemui.shared.system.InputConsumerController.InputListener: boolean onInputEvent(android.view.InputEvent)>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: void onOverlayChanged()>
<com.android.providers.settings.WifiSoftApConfigChangedNotifier: void notifyUserOfConfigConversion(android.content.Context)>
<com.android.systemui.car.navigationbar.CarNavigationBarController: boolean setTopWindowVisibility(int)>
<android.net.wifi.INetworkRequestMatchCallback: void onAbort()>
<javax.microedition.khronos.egl.EGL10: boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay,int[])>
<com.android.server.media.projection.MediaProjectionManagerService: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.ExpandableView.OnHeightChangedListener: void onReset(com.android.systemui.statusbar.notification.row.ExpandableView)>
<com.android.server.ConnectivityService: void simulateDataStall(int,long,android.net.Network,android.os.PersistableBundle)>
<android.text.StaticLayoutPerfTest: void testDraw_PrecomputedText_NoStyled()>
<android.net.wifi.hotspot2.PasspointConfiguration: void setUsageLimitStartTimeInMillis(long)>
<android.text.NonEditableTextGenerator: android.text.NonEditableTextGenerator setSequenceLength(int)>
<com.android.settingslib.wifi.TestAccessPointBuilder: com.android.settingslib.wifi.TestAccessPointBuilder setSecurity(int)>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: java.lang.String getOverlayTarget()>
<com.android.systemui.qs.QSFooterImpl: void disable(int,int,boolean)>
<javax.microedition.khronos.opengles.GL10: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)>
<com.android.server.media.RemoteDisplayProviderWatcher.Callback: void removeProvider(com.android.server.media.RemoteDisplayProviderProxy)>
<com.android.server.biometrics.EnumerateClient: boolean onEnrollResult(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.systemui.dagger.DefaultServiceBinder: android.app.Service bindTakeScreenshotService(com.android.systemui.screenshot.TakeScreenshotService)>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger: boolean getBoolean(java.lang.String,boolean)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void removeVerticalTranslationListener(java.lang.Runnable)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void notifyGroupChildAdded(android.view.View)>
<com.android.systemui.statusbar.policy.HeadsUpManager.HeadsUpEntry: void setExpanded(boolean)>
<com.android.gallery3d.glrenderer.BasicTexture: int getWidth()>
<com.android.gallery3d.glrenderer.GLCanvas: void rotate(float,float,float,float)>
<android.net.wifi.rtt.ResponderLocation: android.net.Uri getMapImageUri()>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexsOES(short,short,short,short,short)>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.providers.settings.SettingsBackupAgent: java.util.Set getBlockedSettings(int)>
<com.android.server.usb.UsbService: void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
<android.app.usage.UsageStatsManagerInternal: void prepareForPossibleShutdown()>
<com.android.systemui.statusbar.phone.BarTransitions: void transitionTo(int,boolean)>
<com.android.server.biometrics.ClientMonitor: java.lang.String getLogTag()>
<com.android.systemui.ScreenDecorations.DisplayCutoutView: void onDisplayAdded(int)>
<android.net.wifi.WifiManager: void unregisterScanResultsCallback(android.net.wifi.WifiManager.ScanResultsCallback)>
<com.android.server.biometrics.fingerprint.FingerprintService: boolean hasEnrolledBiometrics(int)>
<com.android.settingslib.widget.LayoutPreference: void onBindViewHolder(androidx.preference.PreferenceViewHolder)>
<com.android.systemui.classifier.FalsingManagerProxy: void cleanup()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setTime(android.content.ComponentName,long)>
<com.android.permission.persistence.RuntimePermissionsState: java.lang.String getFingerprint()>
<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: void visible(android.content.Context,int,int,int)>
<com.android.server.ConnectivityService: void stopVpnProfile(java.lang.String)>
<com.android.commands.sm.Sm: void runFstrim()>
<com.android.printspooler.ui.PageAdapter: int getFilePageCount()>
<com.android.systemui.biometrics.AuthDialog: void dismissWithoutCallback(boolean)>
<com.android.server.pm.PackageManagerService: boolean activitySupportsIntent(android.content.ComponentName,android.content.Intent,java.lang.String)>
<com.android.networkstack.tethering.OffloadController: void notifyDownstreamLinkProperties(android.net.LinkProperties)>
<com.android.systemui.bubbles.BubbleTaskView: void startActivity(android.app.PendingIntent,android.content.Intent,android.app.ActivityOptions)>
<com.android.systemui.statusbar.notification.icon.IconPack: com.android.systemui.statusbar.notification.icon.IconPack buildEmptyPack(com.android.systemui.statusbar.notification.icon.IconPack)>
<com.android.powermodel.PowerReport: com.android.powermodel.PowerReport createReport(com.android.powermodel.PowerProfile,com.android.powermodel.ActivityReport)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setSigningDetails(android.content.pm.PackageParser.SigningDetails)>
<com.android.server.NetworkManagementService: int removeRoutesFromLocalNetwork(java.util.List)>
<com.android.server.usb.UsbService: void bootCompleted()>
<com.android.server.soundtrigger_middleware.HalException: void <init>(int)>
<com.android.systemui.recents.OverviewProxyRecentsImpl: void <init>(java.util.Optional,java.util.Optional)>
<android.net.wifi.util.HexEncoding: java.lang.String encodeToString(byte[],boolean)>
<com.android.systemui.tuner.RadioListPreference.RadioFragment: boolean onPreferenceTreeClick(androidx.preference.Preference)>
<com.android.providers.settings.SettingsService: void <init>(com.android.providers.settings.SettingsProvider)>
<com.android.settingslib.bluetooth.MapProfile: boolean isProfileReady()>
<com.android.systemui.ForegroundServicesUserState: void addStandardLayoutNotification(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.phone.ContextualButtonGroup: boolean isButtonVisibleWithinGroup(int)>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getTransactionId()>
<com.android.server.biometrics.fingerprint.FingerprintConstants: java.lang.String logTag()>
<com.android.systemui.qs.QSPanel: void setHost(com.android.systemui.qs.QSTileHost,com.android.systemui.qs.customize.QSCustomizer)>
<com.android.server.oemlock.OemLockService: boolean isHalPresent()>
<com.android.server.testing.shadows.ShadowBinder: long clearCallingIdentity()>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setBaseCodePath(java.lang.String)>
<com.android.server.accessibility.AccessibilityWindowManager: int getDisplayIdByUserIdAndWindowIdLocked(int,int)>
<com.android.systemui.assist.AssistOrbContainer: void show(boolean,boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setUserExpanded(boolean)>
<com.android.systemui.car.navigationbar.AssitantButton: java.lang.String getRoleName()>
<com.android.statementservice.retriever.AbstractAsset: int lookupKey()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setHeadsUpAnimatingAway(boolean)>
<com.android.server.os.DeviceIdentifiersPolicyService: void onStart()>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton1Text(int)>
<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageList getPackageList()>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void setQSPanel(com.android.systemui.qs.QSPanel)>
<com.android.systemui.assist.AssistManager: void onLockscreenShown()>
<com.android.systemui.biometrics.AuthContainerView: void onDetachedFromWindow()>
<com.android.gallery3d.glrenderer.RawTexture: boolean isOpaque()>
<android.net.wifi.hotspot2.pps.Policy: int describeContents()>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger: boolean contains(java.lang.String)>
<android.net.wifi.aware.TlvBufferUtils.TlvConstructor: android.net.wifi.aware.TlvBufferUtils.TlvConstructor putByteArray(int,byte[],int,int)>
<javax.obex.HeaderSet: int getResponseCode()>
<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: void action(android.content.Context,int,android.util.Pair[])>
<com.android.systemui.statusbar.phone.NavigationBarTransitions: int getTintAnimationDuration()>
<android.net.wifi.rtt.ResponderLocation: boolean getRegisteredLocationDseIndication()>
<com.android.settingslib.bluetooth.BluetoothCallback: void onAclConnectionStateChanged(com.android.settingslib.bluetooth.CachedBluetoothDevice,int)>
<com.android.systemui.plugins.FalsingManager: boolean isFalseTouch(int)>
<com.android.server.pm.permission.PermissionManagerService.Injector: void restoreCallingIdentity(long)>
<com.android.systemui.screenrecord.ScreenMediaRecorder.SavedRecording: android.graphics.Bitmap getThumbnail()>
<com.android.systemui.statusbar.policy.NetworkController.AccessPointController: boolean canConfigWifi()>
<com.android.settingslib.suggestions.SuggestionControllerMixin: void onServiceConnected()>
<com.android.systemui.util.InjectionInflationController.ViewInstanceCreator: com.android.systemui.qs.QuickStatusBarHeader createQsHeader()>
<com.android.systemui.appops.AppOpsControllerImpl: void onOpActiveChanged(int,int,java.lang.String,boolean)>
<com.android.systemui.classifier.FalsingManagerImpl: void setNotificationExpanded()>
<com.android.systemui.statusbar.phone.StatusBarIconController.TintedIconManager: com.android.systemui.statusbar.phone.DemoStatusIcons createDemoStatusIcons()>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindWindowMagnification(com.android.systemui.accessibility.WindowMagnification)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean isOccluded()>
<com.android.systemui.qs.customize.QSCustomizer: void setContainer(com.android.systemui.statusbar.phone.NotificationsQuickSettingsContainer)>
<com.android.systemui.statusbar.KeyguardIndicationController: void hideTransientIndicationDelayed(long)>
<com.android.server.usb.descriptors.tree.UsbDescriptorsInterfaceNode: void addACInterfaceNode(com.android.server.usb.descriptors.tree.UsbDescriptorsACInterfaceNode)>
<com.android.systemui.pip.PipBoundsHandler: void transformBoundsToAspectRatio(android.graphics.Rect)>
<com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.PermissionInfo generatePermissionInfo(android.content.pm.parsing.component.ParsedPermission,int)>
<com.android.server.appbinding.AppBindingService.Lifecycle: void onUnlockUser(int)>
<com.android.settingslib.media.LocalMediaManager: boolean addDeviceToPlayMedia(com.android.settingslib.media.MediaDevice)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedCrossProfileNotificationListeners(android.content.ComponentName)>
<com.android.systemui.assist.AssistHandleBehaviorController: void showAndGo()>
<com.android.server.NetworkManagementService: com.android.server.NetworkManagementService create(android.content.Context)>
<com.android.systemui.volume.VolumeDialogComponent: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isFactoryTest()>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareImpl.AudioSessionProvider: com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareImpl.AudioSessionProvider.AudioSession acquireSession()>
<com.android.server.usb.UsbService.Lifecycle: void onStart()>
<android.net.wifi.WifiScanner.ScanData: int describeContents()>
<com.android.server.usb.descriptors.tree.UsbDescriptorsEndpointNode: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger: long getLong(java.lang.String,long)>
<com.android.systemui.tuner.TunerServiceImpl: void <init>(android.content.Context,android.os.Handler,com.android.systemui.util.leak.LeakDetector,com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getProfileOwnerName(int)>
<com.android.settingslib.drawer.DynamicTitle: java.lang.String getDynamicTitle()>
<android.net.wifi.rtt.ResponderConfig: android.net.wifi.rtt.ResponderConfig fromWifiAwarePeerMacAddressWithDefaults(android.net.MacAddress)>
<android.net.wifi.p2p.WifiP2pManager: void factoryReset(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setScrollY(int)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: java.util.ArrayList getAllPermissionsWithProtection(int)>
<android.app.backup.ForwardingBackupAgent: void onDestroy()>
<com.android.systemui.statusbar.CommandQueue: void showWirelessChargingAnimation(int)>
<com.android.server.VibratorService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<com.android.systemui.wm.DisplayImeController: void removePositionProcessor(com.android.systemui.wm.DisplayImeController.ImePositionProcessor)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void addChildNotification(com.android.systemui.statusbar.notification.stack.NotificationListItem,int)>
<com.android.systemui.statusbar.ViewTransformationHelper: void addViewTransformingToSimilar(android.view.View)>
<com.android.server.SystemServiceManager: void onUserUnlocked(int)>
<android.net.util.NetdService: android.net.INetd get()>
<android.net.wifi.hotspot2.pps.Credential: void setCreationTimeInMillis(long)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isChildInGroup()>
<com.android.systemui.biometrics.AuthContainerView: void onHelp(java.lang.String)>
<com.android.systemui.statusbar.NotificationListener.NotificationHandler: void onNotificationPosted(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: boolean reclaimResource(int,int)>
<com.android.systemui.AutoReinflateContainer: void onDensityOrFontScaleChanged()>
<javax.microedition.khronos.opengles.GL10: void glLightfv(int,int,float[],int)>
<com.android.gallery3d.exif.ExifTag: boolean setValue(byte[])>
<com.android.systemui.SwipeHelper: void snapChildIfNeeded(android.view.View,boolean,float)>
<com.android.server.TelephonyRegistry: void notifyDisplayInfoChanged(int,int,android.telephony.TelephonyDisplayInfo)>
<com.android.systemui.tuner.TunerFragment: void onCreate(android.os.Bundle)>
<com.android.settingslib.schedulesprovider.ScheduleInfo.Builder: com.android.settingslib.schedulesprovider.ScheduleInfo.Builder setSummary(java.lang.String)>
<com.android.systemui.tuner.TunerService: void setTunerEnabled(android.content.Context,boolean)>
<com.android.systemui.ExpandHelper.Callback: void setUserLockedChild(android.view.View,boolean)>
<com.android.server.pm.PackageManagerService: boolean getApplicationHiddenSettingAsUser(java.lang.String,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.List)>
<android.net.wifi.WifiManager.NetworkRequestMatchCallback: void onUserSelectionConnectSuccess(android.net.wifi.WifiConfiguration)>
<com.android.server.policy.BurnInProtectionHelper: void onAnimationUpdate(android.animation.ValueAnimator)>
<com.android.server.pm.PackageManagerService.Injector.Producer: java.lang.Object produce(com.android.server.pm.PackageManagerService.Injector,com.android.server.pm.PackageManagerService)>
<android.net.wifi.WifiUsabilityStatsEntry: boolean isSameRegisteredCell()>
<com.android.systemui.qs.tiles.CastTile: void showDetail(boolean)>
<javax.obex.ClientSession: javax.obex.HeaderSet delete(javax.obex.HeaderSet)>
<com.android.server.pm.PackageManagerService: void reportSettingsProblem(int,java.lang.String)>
<com.android.systemui.tuner.CustomListPreference.CustomListPreferenceDialogFragment: androidx.preference.ListPreferenceDialogFragment newInstance(java.lang.String)>
<com.android.server.ConnectivityService: boolean setUnderlyingNetworksForVpn(android.net.Network[])>
<com.android.server.usb.descriptors.UsbACHeaderInterface: void <init>(int,byte,byte,int,int)>
<com.android.settingslib.notification.ZenDurationDialog: void updateUi(com.android.settingslib.notification.ZenDurationDialog.ConditionTag,android.view.View,int)>
<com.android.settingslib.core.lifecycle.ObservableDialogFragment: void onPause()>
<com.android.systemui.statusbar.phone.KeyguardBouncer: boolean needsFullscreenBouncer()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationMediaTemplateViewWrapper: void onContentUpdated(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.qs.PageIndicator: void onMeasure(int,int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isAutoHeadsUp()>
<com.android.server.usb.descriptors.UsbDescriptorParser: java.lang.String getDeviceAddr()>
<android.view.autofill.AbstractAutofillPerfTestCase: void resetService()>
<com.android.systemui.shared.system.PinnedStackListenerForwarder.PinnedStackListener: void onActivityHidden(android.content.ComponentName)>
<com.android.systemui.car.notification.TopNotificationPanelViewMediator: void registerListeners()>
<com.android.statementservice.retriever.Relation: boolean equals(java.lang.Object)>
<com.android.systemui.pip.PipAnimationController: boolean isOutPipDirection(int)>
<com.android.systemui.car.notification.NotificationPanelViewController: void setOnUnseenCountUpdateListener(com.android.systemui.car.notification.NotificationPanelViewController.OnUnseenCountUpdateListener)>
<com.android.keyguard.KeyguardStatusView: void setDarkAmount(float)>
<com.android.systemui.statusbar.notification.row.FooterView: void setDismissButtonClickListener(android.view.View.OnClickListener)>
<com.android.systemui.classifier.FalsingManagerImpl: void dump(java.io.PrintWriter)>
<com.android.server.pm.PackageSetting: boolean isSystemExt()>
<com.android.systemui.stackdivider.DividerView: com.android.internal.policy.DividerSnapAlgorithm getSnapAlgorithm()>
<javax.obex.ObexHelper: int getMaxRxPacketSize(javax.obex.ObexTransport)>
<android.app.OverlayManagerPerfTest: void setEnabledColdCacheLargeOverlay()>
<com.android.server.textservices.TextServicesManagerService.Lifecycle: void onStart()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isDebuggable()>
<com.android.systemui.statusbar.FeatureFlags: void <init>(java.util.concurrent.Executor)>
<com.android.server.Watchdog: void run()>
<com.android.systemui.pip.phone.PipTouchHandler: void dump(java.io.PrintWriter,java.lang.String)>
<android.os.ParcelPerfTest: void timeWriteLong()>
<com.android.gallery3d.exif.ExifInterface: java.lang.Integer getTagIntValue(int,int)>
<com.android.systemui.ForegroundServicesUserState: void addNotification(android.util.ArrayMap,java.lang.String,java.lang.String)>
<com.android.systemui.car.notification.NotificationPanelViewController: boolean shouldShowNavigationBarInsets()>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: boolean disable()>
<com.android.settingslib.bluetooth.MapProfile: boolean isEnabled(android.bluetooth.BluetoothDevice)>
<com.android.systemui.statusbar.FlingAnimationUtils: void apply(android.animation.Animator,float,float,float)>
<com.android.systemui.qs.tiles.LocationTile: void handleClick()>
<com.android.server.ConnectivityService: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>
<com.android.systemui.statusbar.notification.collection.listbuilder.PipelineState: int getState()>
<com.android.systemui.recents.RecentsImplementation: void growRecents()>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeEnablerManagerCompat: void init(androidx.preference.PreferenceFragmentCompat,java.lang.String,androidx.preference.PreferenceScreen)>
<com.android.systemui.statusbar.policy.SecurityController: boolean isVpnBranded()>
<com.android.server.audio.AudioService: boolean loadSoundEffects()>
<android.os.ParcelPerfTest: void timeSetDataCapacity()>
<com.android.keyguard.clock.DefaultClockController: void onTimeTick()>
<android.util.StatsEvent.Builder: android.util.StatsEvent.Builder writeLong(long)>
<com.android.systemui.qs.AutoAddTracker.Builder: com.android.systemui.qs.AutoAddTracker build()>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper.Callback: com.android.systemui.statusbar.KeyguardAffordanceView getLeftIcon()>
<com.android.settingslib.schedulesprovider.SchedulesProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.net.wifi.WifiManager.WifiLock: java.lang.String toString()>
<com.android.systemui.pip.PipTaskOrganizer: void onBackPressedOnTaskRoot(android.app.ActivityManager.RunningTaskInfo)>
<com.android.server.biometrics.BiometricUserState: java.lang.String getBiometricFile()>
<android.net.TetheringManager.ConnectorConsumer: void onConnectorAvailable(android.net.ITetheringConnector)>
<com.android.settingslib.wifi.AccessPointPreference: boolean shouldShowDivider()>
<com.android.systemui.globalactions.GlobalActionsLayout: android.view.ViewGroup getSeparatedView()>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat: void addAfterApplyCallback(java.lang.Runnable)>
<com.android.settingslib.bluetooth.LocalBluetoothProfile: int getOrdinal()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void applyRoundness()>
<com.android.server.pm.KeySetManagerService: boolean checkUpgradeKeySetLocked(com.android.server.pm.PackageSettingBase,com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isSecure(int)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationMessagingTemplateViewWrapper: void onContentUpdated(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.policy.PhoneWindowManager: boolean isUserSetupComplete()>
<com.android.systemui.volume.ZenModePanel: void setCallback(com.android.systemui.volume.ZenModePanel.Callback)>
<android.media.MediaParser.SeekMap: long getDurationMicros()>
<javax.obex.ObexTransport: java.io.DataInputStream openDataInputStream()>
<com.android.server.integrity.parser.RandomAccessInputStream: void seek(int)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void setLocationPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.PackagesProvider)>
<com.android.server.display.DisplayModeDirector.BrightnessObserver: void onRefreshRateSettingChangedLocked(float,float)>
<com.android.systemui.statusbar.phone.NavigationHandle: void setVertical(boolean)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void suppressAmbientDisplay(boolean)>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton3OnClickListener(android.view.View.OnClickListener)>
<com.android.media.remotedisplay.RemoteDisplayProvider: void onDisconnect(com.android.media.remotedisplay.RemoteDisplay)>
<com.android.systemui.volume.VolumeDialogControllerImpl: void setExitCondition(android.service.notification.Condition)>
<com.android.server.accessibility.AccessibilityWindowManager: void stopTrackingWindows(int)>
<com.android.server.policy.PhoneWindowManager: boolean setAodShowing(boolean)>
<com.android.settingslib.notification.ConversationIconFactory.ConversationIconDrawable: void <init>(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,int,int,boolean)>
<com.android.settingslib.widget.LayoutPreference: void <init>(android.content.Context,int)>
<com.android.systemui.bubbles.BubbleData: void <init>(android.content.Context)>
<com.android.systemui.plugins.ClockPlugin: void setStyle(android.graphics.Paint.Style)>
<com.android.server.webkit.SystemInterface: void updateUserSetting(android.content.Context,java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void onParentTranslationUpdate(float)>
<com.android.systemui.qs.QuickQSPanel: void setHost(com.android.systemui.qs.QSTileHost,com.android.systemui.qs.customize.QSCustomizer)>
<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey getDecryptKey(int)>
<com.android.systemui.settings.BrightnessController: void unregisterCallbacks()>
<com.android.server.pm.Settings: void writeRuntimePermissionsForUserLPr(int,boolean)>
<com.android.server.integrity.model.RuleMetadata: void <init>(java.lang.String,java.lang.String)>
<com.android.server.audio.AudioService.VolumeController: void postDisplaySafeVolumeWarning(int)>
<com.android.systemui.plugins.DarkIconDispatcher: void addDarkReceiver(com.android.systemui.plugins.DarkIconDispatcher.DarkReceiver)>
<android.net.wifi.WifiEnterpriseConfig: void resetClientKeyEntry()>
<com.android.egg.neko.Cat: void setName(java.lang.String)>
<com.android.systemui.classifier.FalsingManagerProxy: void onAffordanceSwipingStarted(boolean)>
<com.android.systemui.car.navigationbar.CarNavigationBarController: void registerBottomBarTouchListener(android.view.View.OnTouchListener)>
<com.android.server.storage.DiskStatsFileLogger: void <init>(com.android.server.storage.FileCollector.MeasurementResult,com.android.server.storage.FileCollector.MeasurementResult,java.util.List,long)>
<com.android.keyguard.KeyguardSliceView: void setupUri(java.lang.String)>
<com.android.systemui.bubbles.BubbleViewInfoTask.Callback: void onBubbleViewsReady(com.android.systemui.bubbles.Bubble)>
<com.android.systemui.statusbar.phone.NotificationGroupAlertTransferHelper: void onStateChanged(int)>
<com.android.server.display.utils.AmbientFilter: void clear()>
<com.android.server.accessibility.MagnificationController: void <init>(com.android.server.accessibility.MagnificationController.ControllerContext,java.lang.Object)>
<com.android.server.timedetector.TimeDetectorService.Lifecycle: void onStart()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void setWindowState(int,int,int)>
<com.android.server.search.SearchManagerService: java.util.List getSearchablesInGlobalSearch()>
<com.android.server.pm.permission.PermissionManagerService: void setPermissionEnforced(java.lang.String,boolean)>
<com.android.server.pm.parsing.PackageCacher: void cacheResult(java.io.File,int,com.android.server.pm.parsing.pkg.ParsedPackage)>
<com.android.server.pm.PackageSender: void notifyPackageChanged(java.lang.String,int)>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.policy.ExtensionController provideExtensionController(com.android.systemui.statusbar.policy.ExtensionControllerImpl)>
<com.google.errorprone.matchers.FieldMatchers: com.google.inject.matcher.Matcher instanceField(java.lang.String,java.lang.String)>
<com.android.settingslib.drawer.MasterSwitchController: com.android.settingslib.drawer.SwitchController.MetaData getMetaData()>
<com.android.systemui.statusbar.NotificationShelf: com.android.systemui.statusbar.phone.NotificationIconContainer getShelfIcons()>
<com.android.systemui.statusbar.policy.CallbackHandler: void setNoSims(boolean,boolean)>
<com.android.systemui.qs.external.TileServiceManager: void handleDestroy()>
<com.android.server.timezonedetector.ArrayMapWithHistory: java.lang.String toString()>
<com.android.server.usb.descriptors.UsbEndpointDescriptor: int getPacketSize()>
<com.android.printservice.recommendation.plugin.xerox.ServiceResolver.Observer: void dataSetChanged()>
<com.android.settingslib.drawable.UserIconDrawable: int getIntrinsicHeight()>
<com.android.systemui.statusbar.notification.row.NotificationSnooze.NotificationSnoozeOption: java.lang.CharSequence getConfirmation()>
<com.android.server.usb.descriptors.UsbDescriptorParser: int getVCInterfaceSpec()>
<com.android.server.ConnectivityService: void setProvisioningNotificationVisible(boolean,int,java.lang.String)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeUtilCompat: void loadInputMethodSubtypeList(androidx.preference.PreferenceFragmentCompat,android.content.ContentResolver,java.util.List,java.util.Map)>
<com.android.server.pm.permission.BasePermission: boolean isInstaller()>
<com.android.systemui.recents.RecentsOnboarding: void dump(java.io.PrintWriter)>
<com.android.systemui.car.window.OverlayPanelViewController.OpenGestureListener: void open()>
<com.android.networkstack.tethering.TetheringConfiguration: android.content.res.Resources getResourcesForSubIdWrapper(android.content.Context,int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setDozing(boolean,boolean,android.graphics.PointF)>
<com.android.server.pm.PackageManagerService: void notifyDexLoad(java.lang.String,java.util.Map,java.lang.String)>
<com.android.server.compat.CompatChange.ChangeListener: void onCompatChange(java.lang.String)>
<com.android.systemui.dagger.DefaultActivityBinder: android.app.Activity bindBrightnessDialog(com.android.systemui.settings.BrightnessDialog)>
<com.android.server.pm.permission.BasePermission: void setGids(int[],boolean)>
<com.android.systemui.shared.recents.utilities.AppTrace: void end(java.lang.String,int)>
<com.android.server.usb.descriptors.UsbEndpointDescriptor: void <init>(int,byte)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareValidation: android.media.soundtrigger_middleware.ISoundTriggerModule attach(int,android.media.soundtrigger_middleware.ISoundTriggerCallback)>
<com.android.systemui.plugin.testoverlayplugin.CustomView: void onAttachedToWindow()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: android.view.View getExpandedContentView()>
<com.android.systemui.globalactions.GlobalActionsDialog.Action: boolean shouldShow()>
<android.net.wifi.RttManager.ResponderConfig: int describeContents()>
<com.android.systemui.doze.DozeScreenState: void transitionTo(com.android.systemui.doze.DozeMachine.State,com.android.systemui.doze.DozeMachine.State)>
<com.android.server.pm.PackageInstallerSession: int getParentSessionId()>
<com.android.server.statusbar.StatusBarManagerInternal: void toggleKeyboardShortcutsMenu(int)>
<com.android.server.storage.StorageSessionController.ExternalStorageServiceException: void <init>(java.lang.String,java.lang.Throwable)>
<com.android.systemui.qs.QSPanel: void setHeaderContainer(android.view.ViewGroup)>
<com.android.server.people.data.EventHistory: java.util.List queryEvents(java.util.Set,long,long)>
<com.android.systemui.plugins.VolumeDialogController.Callbacks: void onCaptionComponentStateChanged(java.lang.Boolean,java.lang.Boolean)>
<android.net.ip.RouterAdvertisementDaemon: void stop()>
<com.android.systemui.shared.system.ActivityCompat: void <init>(android.app.Activity)>
<com.android.systemui.statusbar.HeadsUpStatusBarView: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getVolumeUuid()>
<android.widget.TextViewPrecomputedTextPerfTest: void testOnMeasure_PrecomputedText()>
<com.android.media.tv.remoteprovider.TvRemoteProvider: void sendPointerDown(android.os.IBinder,int,int,int)>
<com.android.printspooler.model.OpenDocumentCallback: void onSuccess()>
<javax.microedition.khronos.opengles.GL10: void glFrustumx(int,int,int,int,int,int)>
<android.net.TetheringManager: void unregisterTetheringEventCallback(android.net.TetheringManager.TetheringEventCallback)>
<com.android.systemui.keyguard.KeyguardViewMediator: com.android.keyguard.ViewMediatorCallback getViewMediatorCallback()>
<com.android.server.accessibility.AccessibilityManagerService: void setTouchExplorationPassthroughRegion(int,android.graphics.Region)>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void setLightBarController(com.android.systemui.statusbar.phone.LightBarController)>
<com.android.server.biometrics.iris.IrisAuthenticator: boolean isHardwareDetected(java.lang.String)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowViewController: void <init>(com.android.systemui.util.InjectionInflationController,com.android.systemui.statusbar.notification.NotificationWakeUpCoordinator,com.android.systemui.statusbar.PulseExpansionHandler,com.android.systemui.statusbar.notification.DynamicPrivacyController,com.android.systemui.statusbar.phon.KeyguardBypassController,com.android.systemui.plugins.FalsingManager,com.android.systemui.shared.plugins.PluginManager,com.android.systemui.tuner.TunerService,com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.statusbar.SysuiStatusBarStateController,com.android.systemui.doze.DozeLog,com.android.systemui.statusbar.phone.DozeParameters,com.android.systemui.statusbar.CommandQueue,com.android.systemui.statusbar.phone.ShadeController,com.android.systemui.dock.DockManager,com.android.systemui.statusbar.NotificationShadeDepthController,com.android.systemui.statusbar.phone.NotificationShadeWindowView,com.android.systemui.statusbar.phone.NotificationPanelViewController,com.android.systemui.statusbar.SuperStatusBarViewFactory)>
<com.android.gallery3d.exif.ExifTag: int getElementSize(short)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onBouncerHidden()>
<com.android.egg.neko.PrefState.PrefsListener: void onPrefsChanged()>
<com.google.android.startop.iorap.AppLaunchEvent.ActivityLaunchFinished: boolean equals(java.lang.Object)>
<android.net.ITetheringConnector: void setUsbTethering(boolean,java.lang.String,android.net.IIntResultListener)>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageResolver: void <init>(android.content.Context,com.android.systemui.statusbar.notification.row.NotificationInlineImageResolver.ImageCache)>
<com.android.server.pm.permission.PermissionSettings: boolean canPropagatePermissionToInstantApp(java.lang.String)>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifLifetimeExtender: void cancelLifetimeExtension(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.commands.incident.sections.PersistLogSection: void run(java.io.InputStream,java.io.OutputStream,java.util.List)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isFaceDetectionRunning()>
<com.android.server.pm.PackageList: void onPackageChanged(java.lang.String,int)>
<com.android.server.NetworkScoreService: boolean updateScores(android.net.ScoredNetwork[])>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: boolean shouldBeSaved()>
<com.android.server.timezonedetector.TimeZoneDetectorStrategy: void suggestTelephonyTimeZone(android.app.timezonedetector.TelephonyTimeZoneSuggestion)>
<com.android.systemui.statusbar.phone.EdgeBackGestureHandler: void onNavBarAttached()>
<com.android.systemui.plugins.FalsingManager: void onTouchEvent(android.view.MotionEvent,int,int)>
<com.android.systemui.qs.QSPanel: void showDetailAdapter(boolean,com.android.systemui.plugins.qs.DetailAdapter,int[])>
<com.android.server.IpSecService: android.net.IpSecUdpEncapResponse openUdpEncapsulationSocket(int,android.os.IBinder)>
<com.android.printservice.recommendation.PrintServicePlugin: void stop()>
<com.android.server.companion.CompanionDeviceManagerService: void <init>(android.content.Context)>
<com.android.systemui.tuner.LockscreenFragment.Adapter: void remItem(com.android.systemui.tuner.LockscreenFragment.Item)>
<com.android.gallery3d.glrenderer.BasicTexture: void finalize()>
<com.android.server.pm.PreferredComponent: boolean sameSet(java.util.List,boolean)>
<android.net.wifi.WifiScanner.WifiChangeSettings: int describeContents()>
<com.android.systemui.tracing.ProtoTracer: void remove(com.android.systemui.shared.tracing.ProtoTraceable)>
<com.android.server.AnimationThread: void dispose()>
<android.net.wifi.WifiNetworkSuggestion: boolean isHiddenSsid()>
<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey getEncryptKey(int)>
<com.android.systemui.qs.tiles.AirplaneModeTile: int getMetricsCategory()>
<com.android.systemui.doze.DozeHost.Callback: void onPowerSaveChanged(boolean)>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String[] getCaCertificateAliases()>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void setCurrentUser(int)>
<com.android.systemui.shared.system.InputMonitorCompat: com.android.systemui.shared.system.InputChannelCompat.InputEventReceiver getInputReceiver(android.os.Looper,android.view.Choreographer,com.android.systemui.shared.system.InputChannelCompat.InputEventListener)>
<android.content.pm.PackageManagerInternal.PackageListObserver: void onPackageAdded(java.lang.String,int)>
<com.android.systemui.volume.Interaction.Callback: void onInteraction()>
<com.android.server.pm.AppsFilter: void addPackage(com.android.server.pm.PackageSetting,boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareValidation: android.media.soundtrigger_middleware.SoundTriggerModuleDescriptor[] listModules()>
<com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent: com.android.systemui.statusbar.notification.row.ExpandableNotificationRowController getExpandableNotificationRowController()>
<com.android.server.display.utils.Plog.SystemPlog: void <init>(java.lang.String)>
<android.database.TableHelper: java.lang.String createSql()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean hasJustSentRemoteInput()>
<com.android.server.tv.tunerresourcemanager.CasResource: void updateMaxSessionNum(int)>
<com.android.systemui.ForegroundServicesDialog: void onNothingSelected(android.widget.AdapterView)>
<com.android.server.AppStateTracker: boolean isUidActiveSynced(int)>
<com.android.server.pm.Installer: void destroyUserData(java.lang.String,int,int)>
<com.android.systemui.qs.tiles.ColorInversionTile: void handleSetListening(boolean)>
<com.android.server.pm.UserManagerService: java.lang.String getSeedAccountName()>
<com.android.gallery3d.exif.ExifInterface: java.util.List getTagsForTagId(short)>
<com.android.settingslib.bluetooth.PbapClientProfile: boolean setEnabled(android.bluetooth.BluetoothDevice,boolean)>
<com.android.photos.DumbBitmapRegionDecoder: com.android.photos.DumbBitmapRegionDecoder newInstance(java.lang.String)>
<com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage: void setSnapshotListener(int,android.app.PendingIntent)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: boolean bouncerIsOrWillBeShowing()>
<com.android.systemui.statusbar.policy.AccessibilityController: void addStateChangedCallback(com.android.systemui.statusbar.policy.AccessibilityController.AccessibilityStateChangedCallback)>
<android.widget.TextViewPrecomputedTextPerfTest: void testNewLayout_RandomText_Selectable()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGenfv(int,int,java.nio.FloatBuffer)>
<com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter: void startNotificationGutsIntent(android.content.Intent,int,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.printspooler.model.RemotePrintDocument: void kill(java.lang.String)>
<com.android.settingslib.schedulesprovider.ScheduleInfo.Builder: com.android.settingslib.schedulesprovider.ScheduleInfo.Builder setPendingIntent(android.app.PendingIntent)>
<com.android.settingslib.bluetooth.PbapServerProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)>
<com.android.systemui.shared.tracing.FrameProtoTracer.ProtoTraceParams: byte[] serializeEncapsulatingProto(java.lang.Object,java.util.Queue)>
<com.android.settingslib.RestrictedLockUtilsInternal: com.android.settingslib.RestrictedLockUtils.EnforcedAdmin checkIfUninstallBlocked(android.content.Context,java.lang.String,int)>
<com.android.server.pm.PackageDexOptimizer: int adjustDexoptFlags(int)>
<android.content.pm.PackageManagerInternal: void onDefaultSimCallManagerAppChanged(java.lang.String,int)>
<android.media.Controller2Link: void sendSessionCommand(int,android.media.Session2Command,android.os.Bundle,android.os.ResultReceiver)>
<com.android.server.pm.parsing.PackageCacher: com.android.server.pm.parsing.pkg.ParsedPackage fromCacheEntry(byte[])>
<android.net.wifi.SoftApConfiguration: int getBand()>
<com.android.systemui.statusbar.AlphaOptimizedTextView: boolean hasOverlappingRendering()>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper.Callback: android.view.View getRightPreview()>
<com.android.powermodel.ActivityReport: com.android.powermodel.ComponentActivity findGlobalComponent(com.android.powermodel.Component)>
<com.android.systemui.plugins.statusbar.StatusBarStateController.StateListener: void onFullscreenStateChanged(boolean,boolean)>
<com.android.systemui.qs.QSFragment: void onSaveInstanceState(android.os.Bundle)>
<com.android.systemui.util.Assert: void isNotMainThread()>
<com.android.server.audio.PlaybackActivityMonitor: void setAllowedCapturePolicy(int,int)>
<com.android.server.pm.PackageSender: void notifyPackageRemoved(java.lang.String,int)>
<com.android.systemui.globalactions.GlobalActionsFlatLayout: boolean shouldReverseListItems()>
<com.android.systemui.qs.tiles.UiModeNightTile: void onUiModeChanged()>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameterxv(int,int,java.nio.IntBuffer)>
<com.android.systemui.statusbar.DragDownHelper.DragDownCallback: void onCrossedThreshold(boolean)>
<android.util.StatsLog: boolean logStart(int)>
<com.android.keyguard.KeyguardUpdateMonitor: void reportEmergencyCallAction(boolean)>
<com.android.settingslib.media.BluetoothMediaDevice: android.graphics.drawable.Drawable getIconWithoutBackground()>
<com.android.server.biometrics.fingerprint.FingerprintConstants: java.lang.String tagEnrollStartError()>
<com.android.systemui.statusbar.NotificationMediaManager: android.graphics.drawable.Icon getMediaIcon()>
<com.google.errorprone.bugpatterns.android.TargetSdkChecker: com.google.errorprone.matchers.Description matchBinary(com.sun.source.tree.BinaryTree,com.google.errorprone.VisitorState)>
<com.android.uiautomator.core.Tracer: void setOutputMode(com.android.uiautomator.core.Tracer.Mode)>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: android.net.wifi.p2p.nsd.WifiP2pServiceRequest newInstance(int,java.lang.String)>
<com.android.settingslib.location.InjectedSetting.Builder: com.android.settingslib.location.InjectedSetting.Builder setUserRestriction(java.lang.String)>
<android.net.wifi.p2p.WifiP2pGroupList: java.lang.String toString()>
<com.android.systemui.statusbar.phone.NotificationGroupManager: boolean isGroupSummary(android.service.notification.StatusBarNotification)>
<com.android.server.pm.permission.BasePermission: boolean isAppPredictor()>
<com.android.settingslib.wifi.WifiTrackerFactory: void setTestingWifiTracker(com.android.settingslib.wifi.WifiTracker)>
<com.android.server.statusbar.StatusBarManagerService: void onDisplayChanged(int)>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.phone.ManagedProfileController provideManagedProfileController(com.android.systemui.statusbar.phone.ManagedProfileControllerImpl)>
<com.android.systemui.pip.tv.PipManager.Listener: void onPipMenuActionsChanged(android.content.pm.ParceledListSlice)>
<com.android.commands.svc.BluetoothCommand: java.lang.String shortHelp()>
<com.android.photos.SimpleBitmapRegionDecoderWrapper: int getWidth()>
<android.content.pm.PackageManagerInternal: java.lang.String getNameForUid(int)>
<com.android.gallery3d.exif.ExifTag: com.android.gallery3d.exif.Rational getValueAsRational(long)>
<com.android.server.accessibility.MagnificationController.ControllerContext: void <init>(android.content.Context,com.android.server.accessibility.AccessibilityManagerService,com.android.server.wm.WindowManagerInternal,android.os.Handler,long)>
<android.text.PrecomputedTextMemoryUsageTest: void testMemoryUsage_CJK_NoHyphenation()>
<com.android.systemui.stackdivider.Divider: void onUndockingTask()>
<com.android.systemui.statusbar.policy.SplitClockView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.phone.StatusBar: void onOverlayChanged()>
<com.android.server.trust.TrustArchive: void logRevokeTrust(int,android.content.ComponentName)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void showBouncer(boolean)>
<com.android.systemui.statusbar.notification.row.NotificationInfo: boolean willBeRemoved()>
<com.android.systemui.statusbar.phone.NotificationGroupManager: boolean toggleGroupExpansion(android.service.notification.StatusBarNotification)>
<android.database.CursorWindowPerfTest: void loadInt()>
<com.android.systemui.statusbar.phone.SystemUIDialog: void setMessage(int)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void showBouncerOrKeyguard(boolean)>
<com.android.systemui.volume.SystemUIInterpolators.LogDecelerateInterpolator: float getInterpolation(float)>
<com.android.settingslib.CustomDialogPreferenceCompat: void onPrepareDialogBuilder(androidx.appcompat.app.AlertDialog.Builder,android.content.DialogInterface.OnClickListener)>
<com.android.server.appprediction.AppPredictionPerUserService: boolean updateLocked(boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setClipToActualHeight(boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setOverScrollAmount(float,boolean,boolean,boolean,boolean)>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void dispatchDemoCommand(java.lang.String,android.os.Bundle)>
<com.android.keyguard.NumPadKey: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.Prefs: long getLong(android.content.Context,java.lang.String,long)>
<com.android.settingslib.RestrictedPreference: void checkRestrictionAndSetDisabled(java.lang.String,int)>
<com.android.commands.vr.Vr: void onRun()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void animateCloseQs(boolean)>
<com.android.systemui.plugins.FalsingManager: void setNotificationExpanded()>
<com.android.server.rollback.RollbackManagerService: void onBootPhase(int)>
<com.android.server.contentsuggestions.ContentSuggestionsManagerService: com.android.server.contentsuggestions.ContentSuggestionsPerUserService newServiceLocked(int,boolean)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: int getResourceIdFromHandle(int)>
<com.android.systemui.shared.system.WindowManagerWrapper: void setRecentsVisibility(boolean)>
<com.android.server.pm.UserRestrictionsUtils: void readRestrictions(org.xmlpull.v1.XmlPullParser,android.os.Bundle)>
<com.android.settingslib.bluetooth.CachedBluetoothDeviceManager: void onDeviceUnpaired(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.systemui.statusbar.CommandQueue: void animateExpandSettingsPanel(java.lang.String)>
<android.os.UserManagerInternal: boolean isUserManaged(int)>
<com.android.systemui.statusbar.notification.collection.listbuilder.PipelineState: void incrementTo(int)>
<com.android.settingslib.users.AppRestrictionsHelper.OnDisableUiForPackageListener: void onDisableUiForPackage(java.lang.String)>
<com.android.keyguard.KeyguardViewController: void registerStatusBar(com.android.systemui.statusbar.phone.StatusBar,android.view.ViewGroup,com.android.systemui.statusbar.phone.NotificationPanelViewController,com.android.systemui.statusbar.phone.BiometricUnlockController,com.android.systemui.keyguard.DismissCallbackRegistry,android.view.ViewGroup,android.view.View,com.android.systemui.statusbar.phone.KeyguardBypassController,com.android.systemui.plugins.FalsingManager)>
<com.android.server.telecom.TelecomLoaderService: void <init>(android.content.Context)>
<com.android.settingslib.net.NetworkCycleDataForUid.Builder: com.android.settingslib.net.NetworkCycleDataForUid.Builder setBackgroundUsage(long)>
<com.android.systemui.bubbles.BubbleController: boolean isStackExpanded()>
<com.android.systemui.stackdivider.ForcedResizableInfoActivityController: void <init>(android.content.Context,com.android.systemui.stackdivider.Divider)>
<com.android.settingslib.deviceinfo.AbstractUptimePreferenceController: boolean isAvailable()>
<com.android.server.protolog.ProtoLogImpl: int onShellCommand(android.os.ShellCommand)>
<com.android.settingslib.CustomEditTextPreferenceCompat: void onClick(android.content.DialogInterface,int)>
<com.android.systemui.car.volume.CarVolumeItem: void setSupplementalIcon(android.graphics.drawable.Drawable,boolean)>
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>
<com.android.server.hdmi.ArcTerminationActionFromAvr: void sendTerminateArc()>
<javax.microedition.khronos.opengles.GL10: void glLoadMatrixf(java.nio.FloatBuffer)>
<com.android.systemui.pip.tv.PipManager: void removeMediaListener(com.android.systemui.pip.tv.PipManager.MediaListener)>
<com.android.server.statusbar.StatusBarManagerService: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)>
<com.android.systemui.qs.touch.SwipeDetector.Listener: void onDragStart(boolean)>
<com.android.settingslib.applications.StorageStatsSource.ExternalStorageStats: void <init>(android.app.usage.ExternalStorageStats)>
<com.android.systemui.qs.tiles.UserDetailItemView: void onFinishInflate()>
<com.android.server.testing.shadows.ShadowBinder: void restoreCallingIdentity(long)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void setKeyguardEnabled(boolean)>
<android.multiuser.BenchmarkResults: void addDuration(long)>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: void getCustomPrinterIcon(android.print.PrinterId,android.print.IPrintSpoolerCallbacks,int)>
<com.android.server.accessibility.MotionEventInjector: void <init>(android.os.Looper)>
<com.android.server.display.color.ColorDisplayService.ColorDisplayServiceInternal: boolean isDisplayWhiteBalanceEnabled()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: float getContentTransformationShift()>
<com.android.systemui.doze.DozeHost: void stopPulsing()>
<com.android.server.storage.DiskStatsFileLogger: void dumpToFile(java.io.File)>
<com.android.systemui.statusbar.AnimatedImageView: void onDetachedFromWindow()>
<com.android.server.audio.AudioService: int getVibrateSetting(int)>
<com.android.systemui.statusbar.OperatorNameView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setBouncerShowing(boolean)>
<com.android.server.locksettings.LockSettingsStrongAuth: void reportUnlock(int)>
<com.android.server.audio.PlaybackActivityMonitor: boolean isPlaybackActiveForUid(int)>
<com.android.packageinstaller.UninstallUninstalling: void onDestroy()>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean handleSystemAudioModeStatus(com.android.server.hdmi.HdmiCecMessage)>
<com.android.providers.settings.SettingsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.systemui.statusbar.NotificationRemoteInputManager: void <init>(android.content.Context,com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.statusbar.SmartReplyController,com.android.systemui.statusbar.notification.NotificationEntryManager,dagger.Lazy,com.android.systemui.plugins.statusbar.StatusBarStateController,android.os.Handler,com.android.systemui.statusbar.policy.RemoteInputUriController,com.android.systemui.statusba.NotificationClickNotifier,com.android.systemui.statusba.ActionClickLogger)>
<com.android.settingslib.widget.AppEntityInfo: android.view.View.OnClickListener getClickListener()>
<com.android.keyguard.KeyguardSecurityContainer: void showPromptReason(int)>
<com.android.server.om.DumpState: int getUserId()>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexivOES(java.nio.IntBuffer)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int getPreferredAddress()>
<com.android.systemui.statusbar.notification.stack.ViewState: float getFinalTranslationY(android.view.View)>
<com.android.printspooler.util.PageRangeUtils: boolean isAllPages(android.print.PageRange[],int)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isHasCode()>
<com.android.systemui.settings.ToggleSeekBar: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void drawableStateChanged()>
<com.android.server.usb.UsbDeviceManager: void <init>(android.content.Context,com.android.server.usb.UsbAlsaManager,com.android.server.usb.UsbSettingsManager,com.android.server.usb.UsbPermissionManager)>
<com.android.systemui.shared.plugins.VersionInfo: boolean hasClass(java.lang.Class)>
<com.android.server.testing.shadows.ShadowBackupDataOutput: int writeEntityHeader(java.lang.String,int)>
<com.android.systemui.power.InattentiveSleepWarningView: void show()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void <init>(com.android.systemui.classifier.brightline.FalsingDataProvider,com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.util.sensors.ProximitySensor,com.android.systemui.util.DeviceConfigProxy,com.android.systemui.dock.DockManager,com.android.systemui.plugins.statusbar.StatusBarStateController)>
<com.android.systemui.statusbar.KeyguardIndicationController.BaseKeyguardCallback: void onBiometricHelp(int,java.lang.String,android.hardware.biometrics.BiometricSourceType)>
<com.android.systemui.statusbar.SysuiStatusBarStateController: void setDozeAmount(float,boolean)>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindGarbageMonitorService(com.android.systemui.util.leak.GarbageMonitor.Service)>
<android.net.wifi.IWifiManager: int startLocalOnlyHotspot(android.net.wifi.ILocalOnlyHotspotCallback,java.lang.String,java.lang.String,android.net.wifi.SoftApConfiguration)>
<javax.microedition.khronos.opengles.GL11: void glPointParameterxv(int,java.nio.IntBuffer)>
<com.android.systemui.wm.DisplayChangeController: void <init>(android.os.Handler,android.view.IWindowManager)>
<com.android.systemui.plugins.ClockPlugin: java.lang.String getName()>
<android.net.wifi.hotspot2.IProvisioningCallback: void onProvisioningStatus(int)>
<com.android.settingslib.applications.ApplicationsState.VolumeFilter: void init()>
<com.android.systemui.statusbar.MediaTransferManager: void applyMediaTransferView(android.view.ViewGroup,com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.colorextraction.SysuiColorExtractor: com.android.internal.colorextraction.ColorExtractor.GradientColors getNeutralColors()>
<android.database.CursorWindowPerfTest: void loadUser()>
<com.android.server.locksettings.LockSettingsService.SynchronizedStrongAuthTracker: void <init>(android.content.Context)>
<com.android.systemui.glwallpaper.ImageWallpaperRenderer: void onSurfaceChanged(int,int)>
<com.android.server.accounts.AccountManagerService: void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
<com.android.systemui.tuner.TunablePadding.TunablePaddingService: void <init>(com.android.systemui.tuner.TunerService)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isResizeableActivityViaSdkVersion()>
<com.android.systemui.car.navigationbar.SystemBarConfigs: void insetSystemBar(int,com.android.systemui.car.navigationbar.CarNavigationBarView)>
<com.android.server.stats.StatsManagerService: byte[] getData(long,java.lang.String)>
<com.android.keyguard.KeyguardHostView: boolean dismiss(int)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void <init>(android.content.Context,com.android.internal.policy.IKeyguardService,com.android.server.policy.keyguard.KeyguardStateMonitor.StateCallback)>
<com.android.systemui.screenrecord.RecordingService: void <init>(com.android.systemui.screenrecord.RecordingController,java.util.concurrent.Executor,com.android.internal.logging.UiEventLogger,android.app.NotificationManager,com.android.systemui.settings.CurrentUserContextTracker,com.android.systemui.statusbar.phone.KeyguardDismissUtil)>
<com.android.systemui.recents.ScreenPinningRequest: void onNavigationModeChanged(int)>
<com.android.server.pm.PackageManagerService: boolean isPackageAvailable(java.lang.String,int)>
<com.android.server.RescueParty.RescuePartyObserver: boolean executeBootLoopMitigation()>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: int hashCode()>
<com.android.server.appbinding.finders.AppServiceFinder: void onUserRemoved(int)>
<com.android.systemui.dagger.SystemUIModule: com.android.systemui.statusbar.notification.collection.inflation.NotificationRowBinder bindNotificationRowBinder(com.android.systemui.statusbar.notification.collection.inflation.NotificationRowBinderImpl)>
<android.net.wifi.p2p.WifiP2pGroupList: void <init>(android.net.wifi.p2p.WifiP2pGroupList,android.net.wifi.p2p.WifiP2pGroupList.GroupDeleteListener)>
<com.android.server.compat.PlatformCompat: void clearOverrides(java.lang.String)>
<com.android.systemui.qs.tiles.BluetoothTile.BluetoothDetailAdapter: void onDetailItemClick(com.android.systemui.qs.QSDetailItems.Item)>
<com.android.systemui.dagger.DefaultActivityBinder: android.app.Activity bindTunerActivity(com.android.systemui.tuner.TunerActivity)>
<javax.obex.ObexSession: boolean handleAuthResp(byte[])>
<android.net.wifi.SoftApConfiguration: java.lang.String toString()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: int getNotificationColor()>
<com.android.settingslib.drawer.ActivityTile: int getComponentIcon(android.content.pm.ComponentInfo)>
<com.android.systemui.statusbar.KeyguardAffordanceView: void setCircleRadius(float,boolean)>
<com.android.commands.incident.IncidentHelper: void main(java.lang.String[])>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: android.widget.LinearLayout.LayoutParams onCreateLayoutParams()>
<com.android.settingslib.core.lifecycle.events.OnCreate: void onCreate(android.os.Bundle)>
<com.android.systemui.qs.QSHost: void openPanels()>
<com.android.server.compat.PlatformCompat: void clearOverridesForTest(java.lang.String)>
<com.android.systemui.statusbar.policy.Clock: android.os.Parcelable onSaveInstanceState()>
<com.android.server.appbinding.finders.CarrierMessagingClientServiceFinder: java.lang.String getTargetPackage(int)>
<android.net.wifi.WifiManager.WpsCallback: void onStarted(java.lang.String)>
<com.android.systemui.statusbar.phone.LockscreenWallpaper: void onWallpaperColorsChanged(android.app.WallpaperColors,int,int)>
<com.android.systemui.statusbar.phone.ReverseLinearLayout: void onFinishInflate()>
<com.android.systemui.DessertCaseView: void stop()>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeUtil: java.lang.String buildInputMethodsAndSubtypesString(java.util.HashMap)>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.DeviceAdminInfo findAdmin(android.content.ComponentName,int,boolean)>
<javax.microedition.khronos.opengles.GL10: void glFogxv(int,int[],int)>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: void updatePublicMode()>
<com.android.server.locksettings.LockSettingsService: boolean hasSecureLockScreen()>
<com.android.server.locksettings.LockSettingsStrongAuth.Injector: int getDefaultStrongAuthFlags(android.content.Context)>
<com.android.server.media.MediaSessionRecordImpl: boolean isSystemPriority()>
<com.android.systemui.statusbar.phone.PanelViewController: boolean isFullyExpanded()>
<com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry: void reset()>
<com.android.systemui.tuner.CustomListPreference.CustomListPreferenceDialogFragment: void onItemConfirmed()>
<com.android.server.pm.UserManagerService: boolean removeUser(int)>
<android.net.ip.IpServer: java.util.List getAllLeases()>
<com.android.settingslib.bluetooth.HeadsetProfile: int getOrdinal()>
<lockedregioncodeinjection.LockTargetStateAnalysis: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>
<com.android.systemui.pip.tv.PipManager: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isMediaNotification()>
<com.android.server.display.color.ColorDisplayService: void onStopUser(int)>
<com.android.systemui.statusbar.phone.NotificationGroupManager.OnGroupChangeListener: void onGroupExpansionChanged(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,boolean)>
<android.net.wifi.aware.DiscoverySessionCallback: void onSessionTerminated()>
<com.android.server.display.BrightnessIdleJob: void cancelJob(android.content.Context)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareImpl: android.media.soundtrigger_middleware.ISoundTriggerModule attach(int,android.media.soundtrigger_middleware.ISoundTriggerCallback)>
<com.android.server.audio.AudioService: void setMode(int,android.os.IBinder,java.lang.String)>
<com.android.systemui.plugins.VolumeDialogController: boolean isCaptionStreamOptedOut()>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isShadeExpanded()>
<com.android.server.appprediction.RemoteAppPredictionService: void reconnect()>
<com.android.systemui.classifier.FalsingManagerProxy: void onLeftAffordanceHintStarted()>
<com.android.systemui.classifier.FalsingManagerImpl: void onAffordanceSwipingAborted()>
<com.android.systemui.tuner.ClipboardView: void startPocketDrag()>
<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo[] getDevices()>
<com.android.keyguard.KeyguardClockSwitch: android.graphics.Paint getPaint()>
<com.android.systemui.car.keyguard.CarKeyguardViewController: boolean isBouncerShowing()>
<com.android.server.policy.WindowManagerPolicy: void setAllowLockscreenWhenOn(int,boolean)>
<com.android.systemui.pip.phone.PipUpdateThread: android.os.Handler getHandler()>
<com.android.settingslib.RestrictedLockUtilsInternal: void setTextViewPadlock(android.content.Context,android.widget.TextView,boolean)>
<com.android.server.biometrics.ClientMonitor: boolean onEnumerationResult(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.server.audio.AudioService: void postAccessoryPlugMediaUnmute(int)>
<com.android.server.SystemService: void onUserStarting(com.android.server.SystemService.TargetUser)>
<com.android.server.vr.VrManagerService: void onEnabledComponentChanged()>
<com.android.server.statusbar.StatusBarManagerService: void collapsePanels()>
<com.android.systemui.SystemUIFactory: com.android.systemui.statusbar.phone.NotificationIconAreaController createNotificationIconAreaController(android.content.Context,com.android.systemui.statusbar.phone.StatusBar,com.android.systemui.statusbar.notification.NotificationWakeUpCoordinator,com.android.systemui.statusbar.phone.KeyguardBypassController,com.android.systemui.plugins.statusbar.StatusBarStateController)>
<com.android.packageinstaller.television.UninstallAppProgress.ProgressFragment: void setUsersButtonVisible(boolean)>
<com.android.server.pm.permission.PermissionsState: void setGlobalGids(int[])>
<com.android.server.input.InputManagerService: void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>
<com.android.settingslib.CustomEditTextPreferenceCompat: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.SystemService.TargetUser: int getUserIdentifier()>
<com.android.systemui.qs.PagedTileLayout: int getNumVisibleTiles()>
<com.android.server.pm.PackageManagerService: boolean isSafeMode()>
<com.android.server.biometrics.EnumerateClient: boolean onAuthenticated(android.hardware.biometrics.BiometricAuthenticator.Identifier,boolean,java.util.ArrayList)>
<com.android.settingslib.net.NetworkCycleDataForUid: long getForegroudUsage()>
<com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpWindowsToFile(android.util.SparseArray,java.io.File,android.hardware.display.DisplayManagerGlobal)>
<com.android.egg.neko.NekoTile: void onStopListening()>
<com.android.systemui.doze.DozeMachine: void destroy()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void dismissWithAction(com.android.systemui.plugins.ActivityStarter.OnDismissAction,java.lang.Runnable,boolean,java.lang.String)>
<com.android.wallpapercropper.CropView: void setTouchCallback(com.android.wallpapercropper.CropView.TouchCallback)>
<com.android.settingslib.core.lifecycle.Lifecycle: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
<com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder: com.android.systemui.statusbar.policy.ExtensionController.Extension build()>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean isLetterboxedForDisplayCutoutLw()>
<com.android.systemui.biometrics.AuthContainerView.Builder: com.android.systemui.biometrics.AuthContainerView.Builder setSkipIntro(boolean)>
<com.android.server.LooperStatsService.Lifecycle: void onStart()>
<com.android.uiautomator.core.UiAutomatorBridge: boolean injectInputEvent(android.view.InputEvent,boolean)>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: java.lang.String getRequiredAccountType()>
<com.android.server.devicepolicy.DevicePolicyManagerService: long getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)>
<com.android.systemui.statusbar.OperatorNameView: void dispatchDemoCommand(java.lang.String,android.os.Bundle)>
<javax.microedition.khronos.opengles.GL10: void glBindTexture(int,int)>
<com.android.server.tv.tunerresourcemanager.LnbResource.Builder: com.android.server.tv.tunerresourcemanager.LnbResource build()>
<com.android.systemui.statusbar.notification.collection.GroupEntry: void <init>(java.lang.String)>
<com.android.settingslib.bluetooth.HearingAidProfile: int getOrdinal()>
<android.net.wifi.aware.TlvBufferUtils.TlvConstructor: android.net.wifi.aware.TlvBufferUtils.TlvConstructor putInt(int,int)>
<com.android.keyguard.KeyguardViewController: boolean isUnlockWithWallpaper()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void loadDimens()>
<com.android.systemui.statusbar.notification.row.PartialConversationInfo: android.view.View getContentView()>
<com.android.server.autofill.ui.CustomScrollView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.server.testing.shadows.ShadowSlog: int v(java.lang.String,java.lang.String)>
<com.android.server.people.data.ConversationInfo: int hashCode()>
<com.android.systemui.qs.QSFooter: void setExpansion(float)>
<com.android.keyguard.EmergencyButton: boolean performLongClick()>
<com.android.settingslib.notification.ConversationIconFactory.ConversationIconDrawable: void setImportant(boolean)>
<com.android.server.usb.descriptors.UsbACMidiEndpoint: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.packageinstaller.UninstallUninstalling: void onSaveInstanceState(android.os.Bundle)>
<com.android.systemui.statusbar.StatusBarIconView: void setVisibleState(int,boolean,java.lang.Runnable,long)>
<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDevicePlayback playback()>
<com.android.systemui.dump.SystemUIAuxiliaryDumpService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.settingslib.drawer.SwitchController: void notifySummaryChanged(android.content.Context)>
<com.android.uiautomator.core.UiDevice: boolean swipe(int,int,int,int,int)>
<com.android.settingslib.CustomEditTextPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.settingslib.CustomEditTextPreferenceCompat: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.shared.system.QuickStepContract: int getQuickStepDragSlopPx()>
<com.android.photos.views.TiledImageView: void invalidate()>
<com.android.systemui.statusbar.notification.stack.AnimationProperties: com.android.systemui.statusbar.notification.stack.AnimationProperties setAnimationEndAction(java.util.function.Consumer)>
<com.android.settingslib.license.LicenseHtmlLoader: java.io.File loadInBackground()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setLogoutEnabled(android.content.ComponentName,boolean)>
<com.android.statsd.shelltools.Utils: java.util.List getDeviceSerials(java.util.logging.Logger)>
<com.android.printspooler.ui.PrintActivity: void onActionPerformed()>
<com.android.server.slice.SliceProviderPermissions: com.android.server.slice.SlicePermissionManager.PkgUser getPkg()>
<com.android.printspooler.ui.SelectPrinterActivity: boolean onOptionsItemSelected(android.view.MenuItem)>
<com.android.commands.svc.Svc.Command: java.lang.String longHelp()>
<com.android.systemui.pip.PipTaskOrganizer: void onTaskVanished(android.app.ActivityManager.RunningTaskInfo)>
<com.android.systemui.statusbar.phone.NavigationBarTransitions: void removeDarkIntensityListener(com.android.systemui.statusbar.phone.NavigationBarTransitions.DarkIntensityListener)>
<com.android.providers.settings.SettingsProvider: java.lang.String keyToString(int)>
<com.android.systemui.qs.tileimpl.QSTileView: void init(android.view.View.OnClickListener,android.view.View.OnClickListener,android.view.View.OnLongClickListener)>
<com.android.server.pm.AppsFilter.ToString: java.lang.String toString(java.lang.Object)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isPrivileged()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void dismissAndCollapse()>
<com.android.server.biometrics.BiometricUserState: void addBiometric(android.hardware.biometrics.BiometricAuthenticator.Identifier)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void closeQs()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setActivatedChild(com.android.systemui.statusbar.notification.row.ActivatableNotificationView)>
<com.android.systemui.plugins.statusbar.StatusBarStateController.StateListener: void onDozeAmountChanged(float,float)>
<com.android.powermodel.component.ModemProfile.Builder: void setIdleMa(float)>
<com.android.systemui.assist.AssistHandleBehaviorController: boolean areHandlesShowing()>
<android.net.wifi.WifiScanner: void startTrackingBssids(android.net.wifi.WifiScanner.BssidInfo[],int,android.net.wifi.WifiScanner.BssidListener)>
<com.android.server.input.InputManagerService: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>
<com.android.systemui.statusbar.phone.DemoStatusIcons: void dispatchDemoCommand(java.lang.String,android.os.Bundle)>
<com.android.systemui.pip.phone.PipManager: void showPictureInPictureMenu()>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: byte getProductIndex()>
<com.android.systemui.qs.external.TileServiceManager: int getBindPriority()>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean isDisplayedLw()>
<com.android.systemui.plugins.GlobalActions: void destroy()>
<com.android.uiautomator.core.UiObject: boolean clickAndWaitForNewWindow(long)>
<com.android.systemui.statusbar.FlingAnimationUtils: float getMinVelocityPxPerSecond()>
<com.android.server.locksettings.LockSettingsService: int getCredentialTypeInternal(int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setHeadsUpAnimatingAway(boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setBackgroundTintColor(int)>
<com.android.server.TelephonyRegistry: void notifyCallQualityChanged(android.telephony.CallQuality,int,int,int)>
<com.android.server.pm.permission.PermissionsState: int revokeInstallPermission(com.android.server.pm.permission.BasePermission)>
<com.android.commands.uiautomator.Launcher.Command: java.lang.String shortHelp()>
<com.android.systemui.statusbar.policy.Clock: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileParentId(int)>
<com.android.settingslib.drawer.SwitchesProvider: java.lang.String getType(android.net.Uri)>
<com.android.server.accessibility.MagnificationController: float getScale(int)>
<com.android.keyguard.KeyguardHostView: boolean dispatchKeyEvent(android.view.KeyEvent)>
<com.android.systemui.qs.QSHost: com.android.internal.logging.UiEventLogger getUiEventLogger()>
<com.android.systemui.statusbar.KeyboardShortcutKeysLayout: com.android.systemui.statusbar.KeyboardShortcutKeysLayout.LayoutParams generateDefaultLayoutParams()>
<com.android.systemui.statusbar.notification.row.HybridConversationNotificationView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.statusbar.notification.collection.NotifCollection: void dismissNotifications(java.util.List)>
<com.android.server.textclassifier.TextClassificationManagerService: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions.Request,android.service.textclassifier.ITextClassifierCallback)>
<com.android.settingslib.bluetooth.LocalBluetoothProfileManager: com.android.settingslib.bluetooth.HearingAidProfile getHearingAidProfile()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.settings.ToggleSlider: boolean isChecked()>
<com.android.systemui.recents.RecentsOnboarding: void setNavBarHeight(int)>
<com.android.server.integrity.IntegrityFileManager: boolean initialized()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getLargestWidthLimitDp()>
<com.android.nfc_extras.NfcAdapterExtras: com.android.nfc_extras.NfcExecutionEnvironment getEmbeddedExecutionEnvironment()>
<com.android.systemui.analytics.DataCollector: void onSensorChanged(android.hardware.SensorEvent)>
<com.android.systemui.statusbar.policy.EthernetSignalController: com.android.systemui.statusbar.policy.SignalController.State cleanState()>
<com.android.systemui.car.navigationbar.NavigationBarViewFactory: com.android.systemui.car.navigationbar.CarNavigationBarView getTopBar(boolean)>
<com.android.systemui.car.navigationbar.NavigationBarViewFactory: android.view.ViewGroup getRightWindow()>
<com.android.systemui.bubbles.BubbleViewProvider: android.graphics.Path getDotPath()>
<com.android.systemui.globalactions.GlobalActionsDialog: void destroy()>
<com.android.uiautomator.core.UiDevice: void wakeUp()>
<com.android.systemui.statusbar.NavigationBarController: void <init>(android.content.Context,android.os.Handler,com.android.systemui.statusbar.CommandQueue)>
<com.android.systemui.statusbar.phone.ScrimController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.notification.stack.StackStateAnimator: boolean isRunning()>
<com.android.systemui.statusbar.phone.KeyguardBouncer: boolean interceptMediaKey(android.view.KeyEvent)>
<android.view.CutoutSpecificationBenchmark: void parseShortEdgeCutout()>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: void createMenu(android.view.ViewGroup,android.service.notification.StatusBarNotification)>
<com.android.location.provider.LocationProviderBase: void setProperties(com.android.location.provider.ProviderPropertiesUnbundled)>
<com.android.providers.settings.WriteFallbackSettingsFilesJobService: boolean onStartJob(android.app.job.JobParameters)>
<com.android.systemui.ForegroundServiceNotificationListener: void <init>(android.content.Context,com.android.systemui.ForegroundServiceController,com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.systemui.statusbar.notification.collection.NotifPipeline,com.android.systemui.ForegroundServiceLifetimeExtender,com.android.systemui.util.time.SystemClock)>
<android.net.wifi.hotspot2.pps.UpdateParameter: java.lang.String getTrustRootCertUrl()>
<com.android.systemui.statusbar.phone.MultiUserSwitch: void setQsPanel(com.android.systemui.qs.QSPanel)>
<com.android.server.NetworkScoreService: boolean setActiveScorer(java.lang.String)>
<com.android.server.pm.UserManagerService.LifeCycle: void onStart()>
<android.net.wifi.hotspot2.omadm.XMLNode: void addChild(android.net.wifi.hotspot2.omadm.XMLNode)>
<com.android.settingslib.bluetooth.BluetoothUtils: android.graphics.drawable.Drawable buildBtRainbowDrawable(android.content.Context,android.graphics.drawable.Drawable,int)>
<com.google.android.startop.iorap.SystemServiceEvent: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiInfo: int describeContents()>
<com.android.server.GestureLauncherService: void <init>(android.content.Context)>
<com.android.server.infra.AbstractMasterSystemService: void setAllowInstantService(boolean)>
<com.android.systemui.biometrics.AuthCredentialView.ErrorTimer: void <init>(android.content.Context,long,long,android.widget.TextView)>
<com.android.server.updates.ConfigUpdateInstallReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.pm.Policy.PolicyBuilder: com.android.server.pm.Policy.PolicyBuilder setGlobalSeinfoOrThrow(java.lang.String)>
<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppAndroidId(java.lang.String,int)>
<com.android.server.ConnectivityService: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo(int)>
<com.android.server.SerialService: android.os.ParcelFileDescriptor openSerialPort(java.lang.String)>
<com.android.settingslib.bluetooth.LocalBluetoothProfile: boolean isAutoConnectable()>
<com.android.systemui.qs.carrier.QSCarrier: void <init>(android.content.Context)>
<android.net.NetworkMonitorManager: boolean notifyNetworkCapabilitiesChanged(android.net.NetworkCapabilities)>
<javax.obex.ServerOperation: java.io.OutputStream openOutputStream()>
<com.android.server.accessibility.AutoclickController: void <init>(android.content.Context,int)>
<com.android.server.uri.UriGrantsManagerInternal: android.os.IBinder newUriPermissionOwner(java.lang.String)>
<android.text.NonEditableTextGenerator: android.text.NonEditableTextGenerator setCreateBoring(boolean)>
<com.android.systemui.statusbar.phone.RotationContextButton: void setVisibilityChangedCallback(java.util.function.Consumer)>
<com.android.printspooler.ui.PrintErrorFragment: com.android.printspooler.ui.PrintErrorFragment newInstance(java.lang.CharSequence,int)>
<com.android.settingslib.bluetooth.A2dpProfile: boolean setEnabled(android.bluetooth.BluetoothDevice,boolean)>
<com.android.server.trust.TrustManagerService: void onStartUser(int)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getZygotePreloadName()>
<com.android.server.input.InputManagerService: boolean transferTouchFocus(android.os.IBinder,android.os.IBinder)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getDisallowedSystemApps(android.content.ComponentName,int,java.lang.String)>
<com.android.systemui.shared.system.PackageManagerWrapper: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void updateTopPadding(float,boolean)>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void initNotificationIconArea(com.android.systemui.statusbar.phone.NotificationIconAreaController)>
<com.android.settingslib.core.lifecycle.ObservableDialogFragment: void onResume()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: com.android.systemui.statusbar.notification.row.ActivatableNotificationView getActivatedChild()>
<com.android.settingslib.applications.AppUtils: java.lang.String getAppContentDescription(android.content.Context,java.lang.String,int)>
<com.android.server.audio.AudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
<com.android.server.pm.UserRestrictionsUtils: void writeRestrictions(org.xmlpull.v1.XmlSerializer,android.os.Bundle,java.lang.String)>
<android.net.util.NetdService: void run(android.net.util.NetdService.NetdCommand)>
<com.android.systemui.qs.tiles.UiModeNightTile: com.android.systemui.plugins.qs.QSTile.BooleanState newTileState()>
<com.android.systemui.statusbar.notification.stack.AnimationFilter: com.android.systemui.statusbar.notification.stack.AnimationFilter animate(android.util.Property)>
<com.android.systemui.statusbar.VibratorHelper: void vibrate(int)>
<com.android.systemui.statusbar.phone.StatusBar: void fadeKeyguardWhilePulsing()>
<com.android.systemui.statusbar.phone.NotificationGroupManager: boolean isSummaryOfSuppressedGroup(android.service.notification.StatusBarNotification)>
<com.android.server.statusbar.StatusBarManagerService: void disableForUser(int,android.os.IBinder,java.lang.String,int)>
<com.android.systemui.qs.tiles.RotationLockTile: com.android.systemui.plugins.qs.QSTile.BooleanState newTileState()>
<com.android.systemui.statusbar.tv.TvStatusBar: void startAssist(android.os.Bundle)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.AndroidPackage hideAsFinal()>
<com.android.server.usb.descriptors.Usb20ASGeneral: int getFormats()>
<com.android.settingslib.bluetooth.A2dpProfile: void finalize()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGenFramebuffersOES(int,java.nio.IntBuffer)>
<com.android.server.pm.parsing.PackageInfoUtils: int appInfoPrivateFlags(int,com.android.server.pm.PackageSetting)>
<com.android.systemui.biometrics.AuthContainerView: void onMeasure(int,int)>
<com.android.keyguard.KeyguardUpdateMonitor: void dispatchStartedGoingToSleep(int)>
<com.android.systemui.qs.tiles.DndTile: void handleSetListening(boolean)>
<com.android.server.appop.AudioRestrictionManager: void setZenModeAudioRestriction(int,int,int,int,java.lang.String[])>
<com.android.systemui.tracing.ProtoTracer: void scheduleFrameUpdate()>
<com.android.systemui.wm.DisplayImeController.PerDisplay.DisplayWindowInsetsControllerImpl: void hideInsets(int,boolean)>
<com.android.server.locksettings.recoverablekeystore.serialization.KeyChainSnapshotSerializer: void serialize(android.security.keystore.recovery.KeyChainSnapshot,java.io.OutputStream)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setClipTopAmount(int)>
<com.example.android.networkusage.NetworkActivity: void onStart()>
<com.android.systemui.doze.AlwaysOnDisplayPolicy: void <init>(android.content.Context)>
<com.android.server.slice.SliceProviderPermissions: java.lang.String getFileName()>
<com.android.server.pm.PackageKeySetData: android.util.ArrayMap getAliases()>
<com.android.systemui.statusbar.policy.KeyButtonRipple: void setGlowScale(float)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>
<com.android.server.pm.PackageManagerServiceUtils: void makeDirRecursive(java.io.File,int)>
<com.android.systemui.util.leak.GarbageMonitor.ProcessMemInfo: long getUptime()>
<android.graphics.perftests.CanvasPerfTest: void testRecordSimpleBitmapView()>
<com.android.settingslib.drawer.Tile: boolean isPrimaryProfileOnly()>
<android.net.wifi.aware.WifiAwareUtils: boolean isLegacyVersion(android.content.Context,int)>
<com.android.systemui.keyguard.WakefulnessLifecycle.Observer: void onStartedWakingUp()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void updateVerticalPanelPosition(float)>
<com.android.server.pm.PackageSettingBase: android.content.pm.PackageUserState readUserState(int)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void removeCallback(android.graphics.drawable.Drawable.Callback)>
<com.android.systemui.screenrecord.ScreenMediaRecorder.SavedRecording: android.net.Uri getUri()>
<javax.microedition.khronos.opengles.GL10: void glFogxv(int,java.nio.IntBuffer)>
<com.android.uiautomator.core.UiDevice: boolean pressEnter()>
<com.android.wallpapercropper.WallpaperCropActivity: boolean enableRotation()>
<com.android.server.INativeDaemonConnectorCallbacks: boolean onCheckHoldWakeLock(int)>
<com.android.systemui.bubbles.BubbleOverflow: com.android.systemui.bubbles.BubbleExpandedView getExpandedView()>
<android.net.wifi.aware.SubscribeConfig: java.lang.String toString()>
<com.android.systemui.RegionInterceptingFrameLayout.RegionInterceptableView: android.graphics.Region getInterceptRegion()>
<com.android.systemui.appops.AppOpItem: int getCode()>
<com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper.SnoozeOption: android.service.notification.SnoozeCriterion getSnoozeCriterion()>
<com.android.systemui.statusbar.phone.StatusBar: void disable(int,int,int,boolean)>
<com.android.networkstack.tethering.OffloadHardwareInterface.ForwardedStats: void <init>(long,long)>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton1Visible(boolean)>
<android.net.wifi.WifiEnterpriseConfig: void setCaPath(java.lang.String)>
<com.android.systemui.plugin.testoverlayplugin.SampleOverlayPlugin: boolean holdStatusBarOpen()>
<com.android.systemui.statusbar.notification.stack.MediaHeaderView: void performAddAnimation(long,long,boolean)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.util.Map getUserSerialNumbers()>
<com.android.keyguard.KeyguardPINView: boolean startDisappearAnimation(java.lang.Runnable)>
<com.android.systemui.statusbar.policy.FlashlightControllerImpl: boolean isEnabled()>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: void triggerAnimationFailsafe()>
<com.android.systemui.statusbar.notification.MessagingImageTransformState: void transformViewFrom(com.android.systemui.statusbar.notification.TransformState,int,com.android.systemui.statusbar.ViewTransformationHelper.CustomTransformation,float)>
<com.android.systemui.statusbar.phone.StatusIconContainer: void addIgnoredSlots(java.util.List)>
<com.android.localtransport.LocalTransport: int clearBackupData(android.content.pm.PackageInfo)>
<com.android.networkstack.tethering.TetheringConfiguration: boolean isWifi(java.lang.String)>
<com.android.systemui.ExpandHelper.Callback: void setUserExpandedChild(android.view.View,boolean)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onTrackingStopped()>
<com.android.server.slice.SliceManagerService: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>
<com.android.settingslib.bluetooth.LocalBluetoothProfileManager: com.android.settingslib.bluetooth.HfpClientProfile getHfpClientProfile()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean hasExpandingChild()>
<android.net.wifi.aware.TlvBufferUtils.TlvConstructor: void <init>(int,int)>
<com.android.server.usb.descriptors.UsbACMidiEndpoint: byte[] getJackIds()>
<com.android.systemui.qs.customize.QSCustomizer: boolean onMenuItemClick(android.view.MenuItem)>
<com.android.server.accounts.AccountManagerBackupHelper: byte[] backupAccountAccessPermissions(int)>
<com.android.settingslib.graph.SignalDrawable: void setDarkIntensity(float)>
<com.android.uiautomator.core.UiObject: boolean longClick()>
<com.android.systemui.util.Utils.DisableStateTracker: boolean isDisabled()>
<android.net.wifi.WifiNetworkSuggestion: android.net.MacAddress getBssid()>
<android.net.wifi.WifiManager: int addNetworkSuggestions(java.util.List)>
<com.android.server.SystemServiceManager: void dump()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: boolean pointInView(float,float,float)>
<com.android.settingslib.net.NetworkStatsSummaryLoader: void onReset()>
<com.android.server.textclassifier.TextClassificationManagerService.Lifecycle: void onUnlockUser(int)>
<android.net.wifi.aware.DiscoverySessionCallback: void onMessageSendSucceeded(int)>
<com.android.server.pm.ShortcutService: void pushDynamicShortcut(java.lang.String,android.content.pm.ShortcutInfo,int)>
<com.android.server.usb.descriptors.Usb20ASFormatI: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.server.uri.UriGrantsManagerService.Lifecycle: void <init>(android.content.Context)>
<com.android.settingslib.deviceinfo.StorageManagerVolumeProvider: long getTotalBytes(android.app.usage.StorageStatsManager,android.os.storage.VolumeInfo)>
<com.android.server.autofill.FieldClassificationStrategy.MetadataParser: java.lang.Object get(android.content.res.Resources,int)>
<com.android.server.ThreadPriorityBooster: void reset()>
<com.android.egg.neko.Cat: boolean isDark(int)>
<com.google.android.startop.iorap.AppLaunchEvent.ActivityLaunched: java.lang.String toStringBody()>
<com.android.systemui.statusbar.ScrimView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedInputMethodsForCurrentUser()>
<com.android.keyguard.KeyguardSecurityViewFlipper: void onPause()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean hasJustLaunchedFullScreenIntent()>
<com.android.systemui.statusbar.phone.AutoTileManager: void unmarkTileAsAutoAdded(java.lang.String)>
<com.android.server.PersistentDataBlockManagerInternal: byte[] getTestHarnessModeData()>
<com.android.server.policy.GlobalActionsProvider.GlobalActionsListener: void onGlobalActionsAvailableChanged(boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableView: int getHeadsUpHeightWithoutHeader()>
<com.android.uiautomator.core.UiObject: boolean longClickTopLeft()>
<com.android.gallery3d.glrenderer.UploadedTexture: int getTarget()>
<com.android.server.usb.descriptors.UsbACFeatureUnit: byte getSourceID()>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void grantDefaultPermissionsToEnabledImsServices(java.lang.String[],int)>
<com.android.photos.BitmapRegionTileSource.BitmapSource: boolean readExif(com.android.gallery3d.exif.ExifInterface)>
<com.android.settingslib.widget.BarChartInfo.Builder: com.android.settingslib.widget.BarChartInfo.Builder setDetailsOnClickListener(android.view.View.OnClickListener)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: android.view.NotificationHeaderView getNotificationHeader()>
<com.android.server.camera.CameraStatsJobService: boolean onStopJob(android.app.job.JobParameters)>
<com.android.server.accessibility.gestures.TouchExplorer: boolean onGestureCancelled(android.view.MotionEvent,android.view.MotionEvent,int)>
<com.android.systemui.shared.system.ViewRootImplCompat: android.view.View getView()>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()>
<com.android.systemui.statusbar.phone.ScrimController: int getBackgroundColor()>
<com.android.server.AppStateTracker.Listener: void stopForegroundServicesForUidPackage(int,java.lang.String)>
<com.android.systemui.car.bluetooth.CarBatteryController: void <init>(android.content.Context)>
<com.android.server.devicepolicy.DevicePolicyCacheImpl: int getPasswordQuality(int)>
<com.android.systemui.pip.phone.dagger.PipModule: com.android.systemui.pip.BasePipManager providePipManager(com.android.systemui.pip.phone.PipManager)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setHeadsUp(boolean)>
<com.android.systemui.qs.tileimpl.QSTileImpl.ResourceIcon: android.graphics.drawable.Drawable getDrawable(android.content.Context)>
<com.android.systemui.Dependency: void clearDependencies()>
<com.android.permission.persistence.RuntimePermissionsState: void <init>(int,java.lang.String,java.util.Map,java.util.Map)>
<com.google.android.startop.iorap.AppLaunchEvent.ActivityLaunchCancelled: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.NotificationListener: void onListenerConnected()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void performOnIntrinsicHeightReached(java.lang.Runnable)>
<com.android.systemui.statusbar.phone.NavigationBarView: com.android.systemui.statusbar.phone.ButtonDispatcher getHomeButton()>
<android.net.wifi.IWifiManager: boolean setWifiConnectedNetworkScorer(android.os.IBinder,android.net.wifi.IWifiConnectedNetworkScorer)>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void setNonEapInnerMethod(java.lang.String)>
<com.android.systemui.tuner.RadioListPreference: java.lang.CharSequence getSummary()>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: int getTransactionId()>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper: void startHintAnimation(boolean,java.lang.Runnable)>
<com.android.gallery3d.exif.ExifInterface: void writeExif(byte[],java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: int getBackgroundColor(int)>
<com.android.settingslib.wifi.TestAccessPointBuilder: com.android.settingslib.wifi.TestAccessPointBuilder setNetworkInfo(android.net.NetworkInfo)>
<android.os.ParcelPerfTest: void timeReadByte()>
<com.android.systemui.screenshot.ScreenshotNotificationsController: void setImage(android.graphics.Bitmap)>
<com.android.powermodel.AttributionKey: boolean hasPackage(java.lang.String)>
<com.android.systemui.statusbar.notification.collection.provider.HighPriorityProvider: void <init>(com.android.systemui.statusbar.notification.people.PeopleNotificationIdentifier,com.android.systemui.statusbar.phone.NotificationGroupManager)>
<com.android.systemui.qs.tiles.WorkModeTile: void handleClick()>
<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: void <init>(android.content.Context)>
<com.android.systemui.screenrecord.RecordingService: int onStartCommand(android.content.Intent,int,int)>
<com.android.systemui.plugin.testoverlayplugin.PluginSettings: void onCreate(android.os.Bundle)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow.NotificationMenuItem: java.lang.String getContentDescription()>
<com.android.systemui.statusbar.phone.AutoHideController: void touchAutoHide()>
<com.android.settingslib.wifi.TestAccessPointBuilder: void <init>(android.content.Context)>
<com.android.systemui.statusbar.StatusBarIconView: void updateDrawable()>
<com.android.server.usb.descriptors.Usb10ACOutputTerminal: byte getSourceID()>
<com.android.printspooler.widget.PrintContentView: boolean isOptionsOpened()>
<android.app.ResourcesThemePerfTest: void setUp()>
<com.android.server.NativeDaemonConnectorException: java.lang.String getCmd()>
<android.net.wifi.hotspot2.PasspointConfiguration: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.phone.LockscreenWallpaper: android.graphics.Bitmap getBitmap()>
<com.android.systemui.statusbar.phone.ScrimController: void setExpansionAffectsAlpha(boolean)>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.settings.BrightnessDialog: void onCreate(android.os.Bundle)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void canConfigureInteractAcrossProfiles_packageDoesNotRequestInteractAcrossProfiles_returnsFalse()>
<com.android.systemui.statusbar.notification.row.NotifInflationErrorManager: void addInflationErrorListener(com.android.systemui.statusbar.notification.row.NotifInflationErrorManager.NotifInflationErrorListener)>
<android.net.util.TetheringUtils: void setupRaSocket(java.io.FileDescriptor,int)>
<com.android.systemui.shared.recents.utilities.AppTrace: void beginSection(java.lang.String)>
<com.android.systemui.statusbar.phone.StatusIconContainer: void <init>(android.content.Context)>
<com.android.settingslib.HelpUtils: boolean prepareHelpMenuItem(android.app.Activity,android.view.Menu,int,java.lang.String)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: boolean isFalseTouch(int)>
<com.android.printservice.recommendation.util.PrinterHashMap: void clear()>
<com.android.systemui.plugins.Plugin: void onDestroy()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getSeInfo()>
<android.net.wifi.aware.DiscoverySession: int getSessionId()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isHasDomainUrls()>
<com.android.server.biometrics.fingerprint.FingerprintAuthenticator: void prepareForAuthentication(boolean,android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiverInternal,java.lang.String,int,int,int,int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: java.util.List getAttachedNotifChildren()>
<com.android.gallery3d.glrenderer.BasicTexture: int getTextureWidth()>
<com.android.systemui.appops.AppOpsControllerImpl: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.shared.plugins.PluginManagerImpl: void addPluginListener(java.lang.String,com.android.systemui.plugins.PluginListener,java.lang.Class,boolean)>
<com.android.keyguard.KeyguardAbsKeyInputView: void resetState()>
<com.android.server.attention.AttentionManagerService.AttentionCheckCacheBuffer: void add(com.android.server.attention.AttentionManagerService.AttentionCheckCache)>
<com.android.settingslib.volume.Util: java.lang.String volumeProviderControlToString(int)>
<com.android.systemui.plugins.IntentButtonProvider: com.android.systemui.plugins.IntentButtonProvider.IntentButton getIntentButton()>
<com.android.systemui.qs.external.TileLifecycleManager: void <init>(android.os.Handler,android.content.Context,android.service.quicksettings.IQSService,android.service.quicksettings.Tile,android.content.Intent,android.os.UserHandle,com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.print.RemotePrintService.PrintServiceCallbacks: void onServiceDied(com.android.server.print.RemotePrintService)>
<com.android.systemui.car.hvac.TemperatureTextView: int getAreaId()>
<com.android.server.devicepolicy.DeviceAdminServiceController: void startServiceForOwner(java.lang.String,int,java.lang.String)>
<com.android.systemui.biometrics.AuthBiometricView: void onAttachedToWindow()>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: void createPrintJob(android.print.PrintJobInfo)>
<com.android.perftests.blob.AtraceUtils: void stopTrace()>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onTrustChanged(int)>
<com.android.uiautomator.core.UiDevice: boolean pressDPadCenter()>
<com.android.settingslib.core.instrumentation.LogWriter: void action(android.content.Context,int,android.util.Pair[])>
<com.android.systemui.statusbar.StatusIconDisplayable: void setDecorColor(int)>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindsShortcutKeyDispatcher(com.android.systemui.shortcut.ShortcutKeyDispatcher)>
<com.android.keyguard.PasswordTextView: boolean hasOverlappingRendering()>
<com.android.systemui.statusbar.notification.VisualStabilityManager: boolean canReorderNotification(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.tv.tunerresourcemanager.ClientProfile: java.lang.String getTvInputSessionId()>
<com.android.server.usb.descriptors.report.ReportCanvas: java.lang.String getHexString(byte)>
<com.android.printservice.recommendation.util.Preconditions: int[] checkArrayElementsInRange(int[],int,int,java.lang.String)>
<com.android.server.NetworkManagementService: void disableNat(java.lang.String,java.lang.String)>
<android.net.wifi.IWifiManager: void initializeMulticastFiltering()>
<android.net.wifi.p2p.WifiP2pGroup: void setOwner(android.net.wifi.p2p.WifiP2pDevice)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.util.Map getAllKeys(int,int,int)>
<com.android.systemui.recents.RecentsImplementation: void hideRecentApps(boolean,boolean)>
<com.android.server.NetworkManagementService: void unregisterNetworkActivityListener(android.os.INetworkActivityListener)>
<com.android.shell.BugreportWarningActivity: void onCreate(android.os.Bundle)>
<com.android.server.biometrics.BiometricService.SettingObserver: void <init>(android.content.Context,android.os.Handler,java.util.List)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isDeviceProvisioned()>
<com.android.settingslib.applications.StorageStatsSource.AppStorageStats: long getDataBytes()>
<android.net.wifi.p2p.WifiP2pInfo: void writeToParcel(android.os.Parcel,int)>
<com.android.server.usb.descriptors.Usb10ASFormatII: void <init>(int,byte,byte,byte,int)>
<com.android.server.audio.RecordingActivityMonitor: void dump(java.io.PrintWriter)>
<com.android.systemui.statusbar.notification.row.ExpandableView: int getRelativeStartPadding(android.view.View)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin createMenu()>
<com.android.systemui.plugins.VolumeDialog: void init(int,com.android.systemui.plugins.VolumeDialog.Callback)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)>
<com.android.systemui.keyboard.KeyboardUI: void onBootCompleted()>
<com.android.settingslib.wifi.WifiStatusTracker: void handleBroadcast(android.content.Intent)>
<com.android.systemui.doze.DozeHost: void setAnimateScreenOff(boolean)>
<com.android.server.infra.AbstractMasterSystemService: boolean setDefaultServiceEnabled(int,boolean)>
<com.android.server.pm.ShortcutParser: java.util.List parseShortcuts(com.android.server.pm.ShortcutService,java.lang.String,int,java.util.List)>
<com.android.systemui.shared.system.SurfaceViewRequestReceiver: void <init>(int)>
<com.android.systemui.car.window.OverlayPanelViewController: int getPercentageFromEndingEdge()>
<com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl.Callback: boolean isDeviceTimeZoneInitialized()>
<com.android.server.utils.ManagedApplicationService.PendingEvent: void runEvent(android.os.IInterface)>
<android.net.wifi.p2p.WifiP2pManager: void startWps(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.WpsInfo,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.systemui.screenshot.ScreenshotActionChip: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.appprediction.AppPredictionManagerService: com.android.server.appprediction.AppPredictionPerUserService newServiceLocked(int,boolean)>
<com.android.settingslib.applications.StorageStatsSource.AppStorageStatsImpl: long getCodeBytes()>
<android.net.wifi.WifiEnterpriseConfig: int getOcsp()>
<com.android.uiautomator.core.UiScrollable: com.android.uiautomator.core.UiObject getChildByDescription(com.android.uiautomator.core.UiSelector,java.lang.String,boolean)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void onActiveDeviceChanged(com.android.settingslib.bluetooth.CachedBluetoothDevice,int)>
<com.android.server.pm.UserRestrictionsUtils: void moveRestriction(java.lang.String,android.util.SparseArray,com.android.server.pm.RestrictionsSet)>
<android.text.StaticLayoutPerfTest: void testDraw_RandomText_NoStyled_WithoutCache()>
<com.android.server.timezonedetector.TimeZoneDetectorService: void suggestManualTimeZone(android.app.timezonedetector.ManualTimeZoneSuggestion)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: void registerClientProfileInternal(android.media.tv.tunerresourcemanager.ResourceClientProfile,android.media.tv.tunerresourcemanager.IResourcesReclaimListener,int[])>
<javax.obex.ClientSession: void setAuthenticator(javax.obex.Authenticator)>
<com.android.systemui.statusbar.notification.PropertyAnimator: void setProperty(android.view.View,com.android.systemui.statusbar.notification.AnimatableProperty,float,com.android.systemui.statusbar.notification.stack.AnimationProperties,boolean)>
<android.view.autofill.LoginTest: void testChange_autofillUsernameOnly()>
<com.android.settingslib.bluetooth.BluetoothUtils: androidx.core.graphics.drawable.IconCompat createIconWithDrawable(android.graphics.drawable.Drawable)>
<com.android.printservice.recommendation.plugin.mdnsFilter.MDNSFilterPlugin: java.lang.CharSequence getPackageName()>
<com.android.settingslib.net.SummaryForAllUidLoader: void onReset()>
<android.database.SQLiteDatabasePerfTest: void testCursorIterateForward()>
<com.android.systemui.statusbar.phone.StatusBarIconList: java.lang.String getSlotName(int)>
<android.media.MediaParser.InputReader: long getPosition()>
<com.android.systemui.util.leak.GarbageMonitor.MemoryTile: java.lang.CharSequence getTileLabel()>
<com.android.systemui.statusbar.notification.stack.ExpandableViewState: void animateTo(android.view.View,com.android.systemui.statusbar.notification.stack.AnimationProperties)>
<com.android.server.compat.CompatChange: void <init>(long,java.lang.String,int,boolean,boolean,java.lang.String)>
<com.android.powermodel.util.Conversion: double msToHr(double)>
<com.android.server.biometrics.face.FaceAuthenticator: void setActiveUser(int)>
<com.android.settingslib.core.ConfirmationDialogController: boolean isConfirmationDialogShowing()>
<com.android.systemui.statusbar.RemoteInputController: void removeRemoteInput(com.android.systemui.statusbar.notification.collection.NotificationEntry,java.lang.Object)>
<android.content.pm.PackageManagerInternal: boolean isPermissionUpgradeNeeded(int)>
<android.net.wifi.aware.IWifiAwareEventCallback: void onConnectFail(int)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void onTracingStateChanged(boolean)>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.systemui.qs.tiles.DndTile: void setCombinedIcon(android.content.Context,boolean)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.util.Map getStatusForAllKeys(int)>
<com.android.systemui.statusbar.notification.row.ExpandableView: int getMaxContentHeight()>
<com.android.server.usb.descriptors.UsbDescriptorParser: void setACInterfaceSpec(int)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setClipTopAmount(int)>
<com.android.systemui.bubbles.animation.StackAnimationController: void springStack(float,float,float)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void onThemeChanged()>
<com.android.systemui.statusbar.phone.ObservableScrollView: void onOverScrolled(int,int,boolean,boolean)>
<com.android.systemui.colorextraction.SysuiColorExtractor: void onUiModeChanged()>
<android.widget.TextViewPrecomputedTextPerfTest: void testSetText_RandomText_Selectable()>
<com.android.server.role.RoleUserState: void setVersion(int)>
<com.android.server.biometrics.face.FaceUserState: void doWriteState()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: void <init>(android.content.Context,android.view.View,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.adb.AdbService: boolean isAdbWifiSupported()>
<com.android.settingslib.license.LicenseHtmlLoaderCompat: void <init>(android.content.Context)>
<com.android.systemui.volume.ZenModePanel: void setState(int)>
<com.android.systemui.statusbar.phone.LightBarTransitionsController: void restoreState(android.os.Bundle)>
<com.android.systemui.shared.system.TransactionCompat: com.android.systemui.shared.system.TransactionCompat setAlpha(com.android.systemui.shared.system.SurfaceControlCompat,float)>
<com.android.systemui.media.MediaControlPanel: android.content.Context getContext()>
<com.android.systemui.tuner.TunerServiceImpl: int getValue(java.lang.String,int)>
<com.android.systemui.shared.plugins.PluginManagerImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.audio.AudioService.Lifecycle: void onBootPhase(int)>
<android.os.StatsDimensionsValue: void <init>(android.os.Parcel)>
<com.android.systemui.screenrecord.RecordingService: android.content.Intent getStopIntent(android.content.Context)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: com.android.systemui.statusbar.InflationTask getRunningTask()>
<com.android.systemui.car.window.OverlayViewGlobalStateController: void hideView(com.android.systemui.car.window.OverlayPanelViewController)>
<com.android.systemui.statusbar.phone.BarTransitions: boolean isAlwaysOpaque()>
<com.android.server.display.BrightnessMappingStrategy: boolean shouldResetShortTermModel(float,float)>
<com.android.systemui.wm.SystemWindows: android.view.SurfaceControl getViewSurface(android.view.View)>
<com.android.settingslib.core.lifecycle.ObservableFragment: void onStop()>
<com.android.systemui.statusbar.notification.stack.NotificationSwipeHelper.NotificationCallback: void handleChildViewDismissed(android.view.View)>
<com.android.server.usb.descriptors.UsbASFormat: int[] getChannelCounts()>
<com.android.server.timezonedetector.TimeZoneDetectorService: void handleAutoTimeZoneDetectionChanged()>
<com.android.systemui.util.Assert: void setTestableLooper(android.os.Looper)>
<android.net.ip.RouterAdvertisementDaemon.RaParams: android.net.ip.RouterAdvertisementDaemon.RaParams getDeprecatedRaParams(android.net.ip.RouterAdvertisementDaemon.RaParams,android.net.ip.RouterAdvertisementDaemon.RaParams)>
<com.android.printspooler.model.RemotePrintDocument: com.android.printspooler.model.RemotePrintDocument.RemotePrintDocumentInfo getDocumentInfo()>
<com.android.server.testing.shadows.ShadowCloseGuard: boolean hasReported()>
<com.android.server.pm.permission.PermissionSettings: void readPermissions(org.xmlpull.v1.XmlPullParser)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void registerStatusBar(com.android.systemui.statusbar.phone.StatusBar,android.view.ViewGroup,com.android.systemui.statusbar.phone.NotificationPanelViewController,com.android.systemui.statusbar.phone.BiometricUnlockController,com.android.systemui.keyguard.DismissCallbackRegistry,android.view.ViewGroup,android.view.View,com.android.systemui.statusbar.phon.KeyguardBypassController,com.android.systemui.plugins.FalsingManager)>
<com.android.powermodel.AttributionKey: void <init>(com.android.powermodel.SpecialApp)>
<com.android.keyguard.CarrierTextController.Builder: com.android.keyguard.CarrierTextController build()>
<javax.microedition.khronos.opengles.GL11: void glTexParameterxv(int,int,int[],int)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: boolean isDemoable()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isSupportsLargeScreens()>
<com.android.systemui.dagger.DependencyProvider: android.content.SharedPreferences provideSharePreferences(android.content.Context)>
<com.android.server.compat.PlatformCompat: com.android.internal.compat.CompatibilityChangeInfo[] listAllChanges()>
<com.android.server.firewall.IntentFirewall: void <init>(com.android.server.firewall.IntentFirewall.AMSInterface,android.os.Handler)>
<com.android.server.biometrics.face.FaceService: java.util.List getEnrolledTemplates(int)>
<com.android.settingslib.core.lifecycle.events.OnOptionsItemSelected: boolean onOptionsItemSelected(android.view.MenuItem)>
<com.android.settingslib.applications.StorageStatsSource.AppStorageStatsImpl: void <init>(android.app.usage.StorageStats)>
<com.android.systemui.statusbar.policy.RemoteInputView.RemoteEditText: void getFocusedRect(android.graphics.Rect)>
<com.android.server.audio.AudioService: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)>
<com.android.server.biometrics.fingerprint.FingerprintUserState: void parseBiometricsLocked(org.xmlpull.v1.XmlPullParser)>
<com.android.systemui.qs.QSPanel: boolean isShowingCustomize()>
<com.android.server.pm.permission.BasePermission: boolean isSystemTextClassifier()>
<com.android.systemui.biometrics.AuthCredentialPasswordView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)>
<com.android.systemui.classifier.GestureClassifier: float getFalseTouchEvaluation(int)>
<com.android.server.slice.SliceManagerService: android.os.Handler getHandler()>
<com.android.server.NetworkScoreService.ScoringServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.hdmi.HdmiCecController.NativeWrapper: boolean nativeIsConnected(int)>
<android.net.wifi.WifiEnterpriseConfig: java.security.PrivateKey getClientPrivateKey()>
<com.android.systemui.pip.phone.PipMenuActivityController.Listener: void onPipShowMenu()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void onExpandingStarted()>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: java.util.List getPermissions()>
<com.android.systemui.statusbar.phone.ShadeController: boolean closeShadeIfOpen()>
<com.android.systemui.appops.AppOpItem: int getUid()>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexsvOES(short[],int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: com.android.systemui.statusbar.notification.row.ExpandableNotificationRow getRow()>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindThemeOverlayController(com.android.systemui.theme.ThemeOverlayController)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void performDismiss(boolean)>
<com.android.server.pm.PackageManagerService.Injector: com.android.server.net.NetworkPolicyManagerInternal getNetworkPolicyManagerInternal()>
<com.android.server.media.MediaSessionRecord: android.media.session.ISession getSessionBinder()>
<com.android.systemui.assist.AssistManager: void registerVoiceInteractionSessionListener()>
<com.android.systemui.pip.tv.PipMenuActivity: void <init>(com.android.systemui.pip.tv.dagger.TvPipComponent.Builder,com.android.systemui.pip.tv.PipManager)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: void cancelDiscovery()>
<com.android.systemui.plugins.DarkIconDispatcher: boolean isInArea(android.graphics.Rect,android.view.View)>
<com.android.server.PackageWatchdog.PackageHealthObserver: boolean executeBootLoopMitigation()>
<com.android.server.locksettings.SyntheticPasswordManager: void newSidForUser(android.service.gatekeeper.IGateKeeperService,com.android.server.locksettings.SyntheticPasswordManager.AuthenticationToken,int)>
<com.android.printspooler.widget.PrintContentView: void requestDisallowInterceptTouchEvent(boolean)>
<com.android.server.rollback.AppDataRollbackHelper: boolean isUserCredentialLocked(int)>
<android.os.StrictModeTest: void timeThreadViolation()>
<com.android.systemui.biometrics.AuthBiometricView: void onLayout(boolean,int,int,int,int)>
<com.android.keyguard.KeyguardSecurityViewFlipper: void reset()>
<com.android.keyguard.clock.DefaultClockController: void setStyle(android.graphics.Paint.Style)>
<com.android.server.AppStateTracker.Listener: void unblockAlarmsForUidPackage(int,java.lang.String)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationTemplateViewWrapper: void <init>(android.content.Context,android.view.View,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.wallpapercropper.WallpaperCropActivity.BitmapCropTask: void <init>(byte[],android.graphics.RectF,int,int,int,boolean,boolean,java.lang.Runnable)>
<com.android.server.slice.PinnedSliceState: android.app.slice.SliceSpec[] getSpecs()>
<android.net.wifi.SoftApConfiguration.Builder: void <init>(android.net.wifi.SoftApConfiguration)>
<com.android.keyguard.KeyguardSimPinView: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordQuality(android.content.ComponentName,int,boolean)>
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder enablePersistentMode(boolean)>
<com.android.server.pm.UserManagerService: java.lang.String getUserAccount(int)>
<com.android.systemui.qs.tiles.BluetoothTile.BluetoothDetailAdapter: java.lang.CharSequence getTitle()>
<com.android.systemui.statusbar.policy.NetworkController.AccessPointController: void addAccessPointCallback(com.android.systemui.statusbar.policy.NetworkController.AccessPointController.AccessPointCallback)>
<com.android.server.NetworkTimeUpdateService: void <init>(android.content.Context)>
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder setPskPassphrase(java.lang.String)>
<com.android.printspooler.ui.PrintActivity: void onSecurePdfFile()>
<com.android.systemui.doze.DozeHost: void onSlpiTap(float,float)>
<com.android.server.testing.shadows.ShadowApplicationPackageManager: java.util.List getInstalledPackagesAsUser(int,int)>
<com.android.systemui.plugins.FalsingManager: void onStartExpandingFromPulse()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void makeActionsVisibile()>
<android.net.wifi.p2p.WifiP2pManager: void requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener)>
<lockedregioncodeinjection.LockTargetStateAnalysis: org.objectweb.asm.tree.analysis.BasicValue merge(org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue)>
<android.net.wifi.aware.WifiAwareAgentNetworkSpecifier: boolean isEmpty()>
<com.android.server.usb.descriptors.Usb10ASGeneral: void <init>(int,byte,byte,int)>
<android.app.backup.BackupUtilsTest: void testIsFileSpecifiedInPathList_whenFileAndPathListHasOtherFile()>
<android.net.wifi.rtt.ResponderLocation: void <init>(byte[],byte[])>
<com.android.server.accessibility.AccessibilityManagerService: void notifyMagnificationChanged(int,android.graphics.Region,float,float,float)>
<com.android.systemui.recents.TriangleShape: com.android.systemui.recents.TriangleShape createHorizontal(float,float,boolean)>
<com.android.systemui.usb.UsbResolverActivity: boolean shouldShowTabs()>
<com.android.server.devicepolicy.DevicePolicyManagerService: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean)>
<com.android.photos.SimpleBitmapRegionDecoderWrapper: int getHeight()>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onRingerModeChanged(int)>
<com.android.uiautomator.core.UiDevice: boolean pressMenu()>
<javax.microedition.khronos.opengles.GL11: void glGetFixedv(int,java.nio.IntBuffer)>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getPreferredActivityFilters()>
<com.android.systemui.glwallpaper.EglHelper: boolean swapBuffer()>
<com.android.settingslib.animation.AppearAnimationUtils: void startAnimation2d(android.view.View[][],java.lang.Runnable)>
<com.android.powermodel.component.ModemProfile: float getScanningMa()>
<com.android.server.pm.parsing.pkg.PackageImpl: boolean isSystemExt()>
<com.android.packageinstaller.wear.WearPackageIconProvider: java.lang.String getType(android.net.Uri)>
<com.android.networkstack.tethering.UpstreamNetworkMonitor: com.android.networkstack.tethering.UpstreamNetworkState selectPreferredUpstreamType(java.lang.Iterable)>
<com.android.systemui.doze.DozeLog: void traceWakeDisplay(boolean)>
<com.android.systemui.statusbar.CommandQueue: void cancelPreloadRecentApps()>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void onDestroy()>
<com.android.systemui.pip.BasePipManager: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.settingslib.drawer.ActivityTile: java.lang.String getDescription()>
<com.android.server.media.MediaSessionRecord: boolean isClosed()>
<com.android.systemui.ExpandHelper: void cancelImmediately()>
<com.android.server.accessibility.AccessibilityWindowManager: void removeAccessibilityInteractionConnection(android.view.IWindow)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setResetPasswordToken(android.content.ComponentName,byte[])>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void canUserAttemptToConfigureInteractAcrossProfiles_profileOwnerOtherProfile_returnsFalse()>
<com.android.systemui.media.MediaControlPanel: void onDestroy()>
<com.android.systemui.statusbar.policy.LocationController.LocationChangeCallback: void onLocationActiveChanged(boolean)>
<com.android.systemui.bubbles.BadgedImageView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setCodePath(java.lang.String)>
<com.google.android.startop.iorap.AppIntentEvent: int describeContents()>
<com.android.server.utils.quota.CountQuotaTracker: int getLimit(com.android.server.utils.quota.Category)>
<com.android.systemui.util.LifecycleFragment: void onCreate(android.os.Bundle)>
<com.android.systemui.classifier.FalsingManagerProxy: boolean isFalseTouch(int)>
<com.android.server.slice.SliceManagerService: android.net.Uri[] getPinnedSlices(java.lang.String)>
<javax.microedition.khronos.opengles.GL11: void glClipPlanex(int,int[],int)>
<com.android.keyguard.KeyguardMessageArea: void <init>(android.content.Context)>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: void setPrintJobTag(android.print.PrintJobId,java.lang.String,android.print.IPrintSpoolerCallbacks,int)>
<com.android.systemui.statusbar.notification.row.RowContentBindParams: boolean useIncreasedHeadsUpHeight()>
<com.android.systemui.qs.customize.TileAdapter: void resetTileSpecs(com.android.systemui.qs.QSTileHost,java.util.List)>
<com.android.systemui.qs.tiles.ColorInversionTile: android.content.Intent getLongClickIntent()>
<com.android.systemui.doze.DozeService: void onRequestShowDoze()>
<com.android.statementservice.retriever.Relation: boolean matches(com.android.statementservice.retriever.Relation)>
<com.android.systemui.statusbar.phone.UserAvatarView: void setFrameWidth(float)>
<com.android.server.locksettings.recoverablekeystore.certificate.SigXml: void verifyFileSignature(java.security.cert.X509Certificate,byte[])>
<android.perftests.utils.StateManager: java.lang.Object get()>
<com.android.server.stats.pull.StatsPullAtomService: void <init>(android.content.Context)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: java.lang.String[] computeValidReportedPackages(java.lang.String,int)>
<com.android.systemui.Dependency: java.lang.Object getDependency(java.lang.Class)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage.Entry: byte[] getKeyClaimant()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setLongPressListener(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow.LongPressListener)>
<com.android.systemui.statusbar.phone.KeyguardClockPositionAlgorithm: int getExpandedClockPosition()>
<com.android.settingslib.accessibility.AccessibilityButtonHelper: boolean isRequestedByMagnification(android.content.Context)>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: void updateYPosition(java.lang.Runnable)>
<android.perftests.utils.Stats: long getMedian()>
<android.net.TetheringManager.TetheringRequest: int getTetheringType()>
<com.android.systemui.shared.recents.utilities.Utilities: float computeContrastBetweenColors(int,int)>
<com.android.packageinstaller.PackageInstallerActivity.AppErrorDialog: void onCancel(android.content.DialogInterface)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void setLastInSection(boolean)>
<com.android.server.compat.PlatformCompatNative: void reportChangeByUid(long,int)>
<com.android.server.hdmi.HdmiControlService: void oneTouchPlay(android.hardware.hdmi.IHdmiControlCallback)>
<com.android.server.biometrics.RemovalClient: void <init>(android.content.Context,com.android.server.biometrics.Constants,com.android.server.biometrics.BiometricServiceBase.DaemonWrapper,long,android.os.IBinder,com.android.server.biometrics.BiometricServiceBase.ServiceListener,int,int,int,boolean,java.lang.String,com.android.server.biometrics.BiometricUtils)>
<com.android.systemui.doze.DozeUi: void <init>(android.content.Context,android.app.AlarmManager,com.android.systemui.doze.DozeMachine,com.android.systemui.util.wakelock.WakeLock,com.android.systemui.doze.DozeHost,android.os.Handler,com.android.systemui.statusbar.phone.DozeParameters,com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.doze.DozeLog)>
<com.android.systemui.qs.tiles.BatterySaverTile: com.android.systemui.plugins.qs.QSTile.BooleanState newTileState()>
<com.android.systemui.dagger.SystemUIRootComponent: void inject(android.content.ContentProvider)>
<com.android.systemui.qs.QSFragment: void onStateChanged(int)>
<com.android.settingslib.bluetooth.PanProfile: int getOrdinal()>
<com.android.server.tv.TvInputHardwareManager.Listener: void onHdmiDeviceRemoved(android.hardware.hdmi.HdmiDeviceInfo)>
<javax.microedition.khronos.opengles.GL11: void glGenBuffers(int,java.nio.IntBuffer)>
<com.android.server.stats.StatsCompanionService: void statsdReady()>
<com.android.server.recoverysystem.RecoverySystemService.UncryptSocket: int getPercentageUncrypted()>
<com.android.server.compat.PlatformCompat: boolean isChangeEnabledInternal(long,android.content.pm.ApplicationInfo)>
<com.android.systemui.car.navigationbar.CarNavigationBarController: void showBars()>
<com.android.server.input.InputManagerService: boolean hasKeys(int,int,int[],boolean[])>
<com.android.systemui.statusbar.AlphaOptimizedTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.logging.NotificationLogger: java.lang.Runnable getVisibilityReporter()>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setStackTranslation(float)>
<com.android.server.display.BrightnessMappingStrategy: float normalizeAbsoluteBrightness(int)>
<com.android.server.policy.WindowManagerPolicy: int checkAddPermission(int,boolean,java.lang.String,int[])>
<com.android.systemui.statusbar.KeyguardAffordanceView: void setImageScale(float,boolean)>
<com.android.systemui.shared.system.TaskStackChangeListener: void onTaskCreated(int,android.content.ComponentName)>
<com.android.server.pm.permission.PermissionsState.PermissionState: boolean isGranted()>
<com.android.server.display.BrightnessMappingStrategy: float getBrightness(float)>
<com.android.systemui.statusbar.CastDrawable: void draw(android.graphics.Canvas)>
<com.android.server.pm.PackageManagerService: void notifyPackageAdded(java.lang.String,int)>
<com.android.systemui.statusbar.NotificationShelf: boolean hasOverlappingRendering()>
<com.android.systemui.statusbar.policy.SmartReplyView: java.util.List inflateSmartActions(android.content.Context,com.android.systemui.statusbar.policy.SmartReplyView.SmartActions,com.android.systemui.statusbar.SmartReplyController,com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.policy.HeadsUpManager,boolean)>
<com.android.printservice.recommendation.util.Preconditions: long checkArgumentNonnegative(long)>
<com.android.gallery3d.exif.ExifInterface: boolean hasThumbnail()>
<android.text.StaticLayoutPerfTest: void testCreate_RandomText_Styled_Greedy_NoHyphenation()>
<com.android.systemui.statusbar.policy.RemoteInputView: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<com.android.systemui.statusbar.StatusBarIconView: void setShowsConversation(boolean)>
<com.android.server.soundtrigger_middleware.ISoundTriggerHw2: void unloadSoundModel(int)>
<com.android.server.pm.UserTypeDetails: int getDefaultUserInfoFlags()>
<com.android.server.pm.BackgroundDexOptService.PackagesUpdatedListener: void onPackagesUpdated(android.util.ArraySet)>
<com.android.systemui.shared.system.InputConsumerController: void dump(java.io.PrintWriter,java.lang.String)>
<com.android.settingslib.suggestions.SuggestionControllerMixinCompat: boolean isSuggestionLoaded()>
<android.net.wifi.aware.WifiAwareAgentNetworkSpecifier: boolean canBeSatisfiedBy(android.net.NetworkSpecifier)>
<com.android.settingslib.bluetooth.HidProfile: int getNameResource(android.bluetooth.BluetoothDevice)>
<com.android.server.usb.descriptors.Usb20ASGeneral: byte getControls()>
<com.android.server.audio.AudioSystemAdapter: int removePreferredDeviceForStrategy(int)>
<com.android.server.storage.StorageUserConnection: void resetUserSessions()>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: void setCandidateScore(int)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,boolean,java.lang.String)>
<com.android.server.soundtrigger.SoundTriggerLogger.Event: java.lang.String eventToString()>
<com.android.systemui.plugins.qs.QS: boolean isShowingDetail()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void onScreenTurningOn()>
<com.android.server.uri.UriPermissionOwner: void dumpDebug(android.util.proto.ProtoOutputStream,long)>
<com.android.server.usb.UsbHostManager: void setCurrentUserSettings(com.android.server.usb.UsbProfileGroupSettingsManager)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
<com.android.server.textservices.TextServicesManagerService: void finishSpellCheckerService(int,com.android.internal.textservice.ISpellCheckerSessionListener)>
<com.android.server.NetworkManagementService: void unregisterObserver(android.net.INetworkManagementEventObserver)>
<com.android.systemui.statusbar.ViewTransformationHelper: boolean isAnimating()>
<com.android.server.ConnectivityService.Dependencies: android.os.HandlerThread makeHandlerThread()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void setContentHeight(int,int)>
<com.android.localtransport.LocalTransport: java.lang.String name()>
<com.android.keyguard.PasswordTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onUserInfoChanged(int)>
<com.android.systemui.assist.AssistHandleViewController: void <init>(android.os.Handler,android.view.View)>
<com.android.systemui.util.concurrency.ExecutorImpl: void execute(java.lang.Runnable)>
<com.android.systemui.volume.VolumeDialogComponent: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.statusbar.phone.BarTransitions: boolean isLightsOut(int)>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onTaskSnapshotChanged(int,android.app.ActivityManager.TaskSnapshot)>
<com.android.packageinstaller.television.UninstallAppProgressFragment: void showCompletion(java.lang.CharSequence)>
<com.android.systemui.assist.AssistOrbContainer: boolean isShowing()>
<com.android.systemui.screenrecord.RecordingService: android.app.Notification createProcessingNotification()>
<com.android.settingslib.notification.ConversationIconFactory: void <init>(android.content.Context,android.content.pm.LauncherApps,android.content.pm.PackageManager,android.util.IconDrawableFactory,int)>
<com.android.server.biometrics.Utils: boolean isUserEncryptedOrLockdown(com.android.internal.widget.LockPatternUtils,int)>
<com.android.systemui.qs.QSFooterImpl: boolean performAccessibilityAction(int,android.os.Bundle)>
<com.android.systemui.globalactions.GlobalActionsDialog: void dismissGlobalActionsMenu()>
<com.android.systemui.car.notification.BottomNotificationPanelViewMediator: void <init>(com.android.systemui.car.navigationbar.CarNavigationBarController,com.android.systemui.car.notification.NotificationPanelViewController,com.android.systemui.car.notification.PowerManagerHelper,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.car.CarDeviceProvisionedController,com.android.systemui.statusbar.policy.ConfigurationController)>
<com.android.server.biometrics.Constants: java.lang.String tagRemoveStartError()>
<com.android.systemui.statusbar.phone.ButtonInterface: void setDelayTouchFeedback(boolean)>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void onDataSaverChanged(boolean)>
<com.android.server.slice.SliceManagerService: void grantSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: long performRemoveAnimation(long,long,float,boolean,float,java.lang.Runnable,android.animation.AnimatorListenerAdapter)>
<com.android.systemui.statusbar.NotificationRemoteInputManager.Callback: void onLockedWorkRemoteInput(int,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,android.view.View)>
<android.content.pm.PackageManagerInternal: boolean isApexPackage(java.lang.String)>
<com.android.settingslib.wifi.TestAccessPointBuilder: com.android.settingslib.wifi.TestAccessPointBuilder setReachable(boolean)>
<com.android.server.integrity.engine.RuleEvaluationEngine: com.android.server.integrity.model.IntegrityCheckResult evaluate(android.content.integrity.AppInstallMetadata)>
<com.android.systemui.pip.phone.PipMenuActivityController.Listener: void onPipDismiss()>
<com.android.systemui.util.time.SystemClockImpl: long currentTimeMillis()>
<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>
<com.android.systemui.settings.CurrentUserObservable: void <init>(com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.server.autofill.ui.AutoFillUI: void destroyAll(com.android.server.autofill.ui.PendingUi,com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback,boolean)>
<android.text.StaticLayoutPerfTest: void testCreate_RandomText_NoStyled_Balanced_NoHyphenation()>
<com.android.server.biometrics.fingerprint.FingerprintService: com.android.server.biometrics.Constants getConstants()>
<com.android.server.ServiceWatcher: void runOnBinder(com.android.server.ServiceWatcher.BinderRunner)>
<com.android.settingslib.wifi.WifiTracker: void onStop()>
<com.android.systemui.util.sensors.AsyncSensorManager: java.util.List getFullSensorList()>
<com.android.systemui.statusbar.phone.StatusBar: void onInputFocusTransfer(boolean,boolean,float)>
<com.android.systemui.statusbar.NavigationBarController: com.android.systemui.statusbar.phone.NavigationBarView getNavigationBarView(int)>
<com.android.server.protolog.common.ProtoLog: void d(com.android.server.protolog.common.IProtoLogGroup,java.lang.String,java.lang.Object[])>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onViewRemoved(android.view.View)>
<com.android.gallery3d.exif.ExifInterface: void writeExif(android.graphics.Bitmap,java.lang.String)>
<com.android.systemui.qs.QSTileHost: java.util.List loadTileSpecs(android.content.Context,java.lang.String)>
<com.android.server.PersistentDataBlockManagerInternal: void setFrpCredentialHandle(byte[])>
<com.android.server.pm.DynamicCodeLoggingService: void schedule(android.content.Context)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareLogging: android.os.IBinder asBinder()>
<com.android.systemui.shared.recents.model.Task: void addCallback(com.android.systemui.shared.recents.model.Task.TaskCallbacks)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getLabelRes()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setLocationEnabled(android.content.ComponentName,boolean)>
<com.android.server.pm.AppsFilter.StateProvider: void runWithState(com.android.server.pm.AppsFilter.StateProvider.CurrentStateCallback)>
<android.text.TextPerfUtils: java.lang.CharSequence nextRandomParagraph(int,boolean,java.lang.String)>
<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice createVirtualDisplayLocked(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,android.view.Surface,int,android.hardware.display.VirtualDisplayConfig)>
<com.android.systemui.assist.ui.PerimeterPathGuide: float makeClockwise(float)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: float getHeaderTranslation()>
<com.android.settingslib.suggestions.SuggestionLoader: void <init>(android.content.Context,com.android.settingslib.suggestions.SuggestionController)>
<com.android.systemui.statusbar.phone.DozeParameters: boolean getDozeSuspendDisplayStateSupported()>
<com.android.systemui.statusbar.phone.NavigationBarView: void reorient()>
<com.android.server.media.MediaSessionRecordImpl: int getUserId()>
<com.android.systemui.statusbar.policy.BrightnessMirrorController: void removeCallback(com.android.systemui.statusbar.policy.BrightnessMirrorController.BrightnessMirrorListener)>
<javax.microedition.khronos.opengles.GL10: java.lang.String glGetString(int)>
<com.android.systemui.qs.tiles.WifiTile: com.android.systemui.plugins.qs.DetailAdapter getDetailAdapter()>
<com.android.server.pm.PackageManagerService: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()>
<android.text.BoringLayoutCreateDrawPerfTest: void timeDraw()>
<com.android.systemui.statusbar.notification.TransformState: void abortTransformation()>
<com.android.server.usb.UsbService: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void <init>(android.content.Context,android.util.AttributeSet)>
<android.media.MediaController2.ControllerCallback: android.media.Session2Command.Result onSessionCommand(android.media.MediaController2,android.media.Session2Command,android.os.Bundle)>
<com.android.systemui.keyguard.KeyguardViewMediator: com.android.internal.widget.LockPatternUtils getLockPatternUtils()>
<android.net.wifi.WifiUsabilityStatsEntry: int getLinkSpeedMbps()>
<android.net.wifi.IWifiManager: void getWifiActivityEnergyInfoAsync(android.net.wifi.IOnWifiActivityEnergyInfoListener)>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getSystemAvailableFeatures()>
<com.android.server.IntentResolver: java.util.ArrayList findFilters(android.content.IntentFilter)>
<com.android.systemui.statusbar.phone.QuickswitchOrientedNavHandle: void <init>(android.content.Context)>
<com.android.server.security.VerityUtils.SetupResult: java.io.FileDescriptor getUnownedFileDescriptor()>
<com.android.server.SystemService: void onUserSwitching(com.android.server.SystemService.TargetUser,com.android.server.SystemService.TargetUser)>
<android.app.usage.UsageStatsManagerInternal: int[] getIdleUidsForUser(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setDismissAllInProgress(boolean)>
<com.android.printspooler.ui.PageAdapter: int getItemCount()>
<com.android.server.slice.SliceFullAccessList: void writeXml(org.xmlpull.v1.XmlSerializer,int)>
<com.android.systemui.statusbar.policy.HeadsUpManager: boolean hasFullScreenIntent(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.NsdService.NsdSettings: void putEnabledStatus(boolean)>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton1Icon(int)>
<com.android.server.pm.DynamicCodeLoggingService: boolean onStartJob(android.app.job.JobParameters)>
<com.android.settingslib.schedulesprovider.ScheduleInfo: java.lang.String getSummary()>
<com.android.gallery3d.exif.ExifInterface: void readExif(java.lang.String)>
<com.android.systemui.MultiListLayout.MultiListAdapter: boolean shouldBeSeparated(int)>
<com.android.systemui.bubbles.BubbleController.NotifCallback: void maybeCancelSummary(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.ExpandHelper: void setScrollAdapter(com.android.systemui.statusbar.policy.ScrollAdapter)>
<com.android.server.inputmethod.InputMethodManagerService: void <init>(android.content.Context)>
<com.android.gallery3d.exif.ExifInvalidFormatException: void <init>(java.lang.String)>
<com.android.systemui.screenrecord.ScreenRecordDialog: void <init>(com.android.systemui.screenrecord.RecordingController,com.android.systemui.settings.CurrentUserContextTracker)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: void transformTo(com.android.systemui.statusbar.TransformableView,java.lang.Runnable)>
<com.android.settingslib.widget.BarChartInfo: int getEmptyText()>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexsvOES(java.nio.ShortBuffer)>
<com.android.settingslib.bluetooth.MapClientProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)>
<com.android.commands.uiautomator.Launcher.Command: java.lang.String detailedOptions()>
<com.android.server.accounts.AccountManagerService: boolean someUserHasAccount(android.accounts.Account)>
<com.android.settingslib.wifi.WifiStatusTracker: void setListening(boolean)>
<com.android.settingslib.applications.DefaultAppInfo: void <init>(android.content.Context,android.content.pm.PackageManager,int,android.content.ComponentName,java.lang.String,boolean)>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton4Enabled(boolean)>
<com.android.server.stats.pull.StatsPullAtomService: void onBootPhase(int)>
<com.android.systemui.plugins.PluginFragment: android.content.Context getContext()>
<com.android.settingslib.net.NetworkCycleDataLoader: void <init>(com.android.settingslib.net.NetworkCycleDataLoader.Builder)>
<com.android.server.compat.PlatformCompat: int disableTargetSdkChanges(java.lang.String,int)>
<com.android.systemui.statusbar.policy.DataSaverControllerImpl: void setDataSaverEnabled(boolean)>
<com.android.systemui.qs.QSTileHost: void unmarkTileAsAutoAdded(java.lang.String)>
<com.android.systemui.qs.external.TileLifecycleManager: void onTileRemoved()>
<com.android.systemui.statusbar.KeyguardIndicationController.BaseKeyguardCallback: void onRefreshBatteryInfo(com.android.settingslib.fuelgauge.BatteryStatus)>
<com.android.settingslib.fuelgauge.PowerWhitelistBackend: boolean isWhitelisted(java.lang.String[])>
<com.android.systemui.statusbar.phone.StatusBarIconList.Slot: int viewIndexOffsetForTag(int)>
<com.android.packageinstaller.television.UninstallAppProgress: void setResultAndFinish()>
<com.android.systemui.qs.QSDetailItems: void setEmptyState(int,int)>
<com.android.systemui.statusbar.phone.ScrimController: void setKeyguardOccluded(boolean)>
<com.android.server.pm.IntentFilterVerificationState: void setPendingState()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>
<com.android.systemui.car.notification.PowerManagerHelper: void setCarPowerStateListener(android.car.hardware.power.CarPowerManager.CarPowerStateListener)>
<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.util.List getWhitelistedRuleProviders()>
<com.android.server.pm.UserRestrictionsUtils: boolean restrictionsChanged(android.os.Bundle,android.os.Bundle,java.lang.String[])>
<com.android.settingslib.Utils: android.content.res.ColorStateList getColorError(android.content.Context)>
<android.media.MediaSession2.ControllerInfo: java.lang.String getPackageName()>
<com.android.settingslib.core.lifecycle.ObservableActivity: boolean onCreateOptionsMenu(android.view.Menu)>
<com.android.server.pm.ShortcutService: void reportShortcutUsed(java.lang.String,java.lang.String,int)>
<com.android.server.usb.UsbHostManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>
<com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] decryptApplicationKey(byte[],byte[],byte[])>
<com.android.server.autofill.ui.PendingUi: int getState()>
<android.app.usage.UsageStatsManagerInternal: void reportConfigurationChange(android.content.res.Configuration,int)>
<com.android.server.people.data.AppUsageStatsData: int getLaunchCount()>
<com.android.gallery3d.glrenderer.GLES20Canvas: void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,int,int,int,int)>
<com.android.systemui.statusbar.CommandQueue: void onCameraLaunchGestureDetected(int)>
<com.android.server.inputmethod.MultiClientInputMethodManagerService.Lifecycle: void onStartUser(int)>
<com.android.settingslib.bluetooth.LocalBluetoothProfile: int getProfileId()>
<com.android.networkstack.tethering.OffloadHardwareInterface: boolean removeDownstreamPrefix(java.lang.String,java.lang.String)>
<com.android.settingslib.inputmethod.InputMethodSettingValuesWrapper: boolean isAlwaysCheckedIme(android.view.inputmethod.InputMethodInfo)>
<com.google.android.startop.iorapd.IorapWorkFlowTest: void testUpdateApp()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCurrentInputMethodSetByOwner()>
<android.media.BufferingParams: void writeToParcel(android.os.Parcel,int)>
<com.android.server.usb.UsbService.Lifecycle: void onUserStopping(com.android.server.SystemService.TargetUser)>
<com.android.photos.BitmapRegionTileSource: com.android.gallery3d.glrenderer.BasicTexture getPreview()>
<android.net.wifi.WifiScanner.ScanListener: void onPeriodChanged(int)>
<android.net.wifi.IWifiManager: java.util.Map getMatchingScanResults(java.util.List,java.util.List,java.lang.String,java.lang.String)>
<android.net.wifi.aware.WifiAwareNetworkSpecifier: boolean canBeSatisfiedBy(android.net.NetworkSpecifier)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isFactoryResetProtectionPolicySupported()>
<com.android.systemui.qs.QSSecurityFooter: void showDeviceMonitoringDialog()>
<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: boolean doesCredentialSupportInsecureMode(int,byte[])>
<android.media.MediaParser: boolean advance(android.media.MediaParser.SeekableInputReader)>
<com.android.systemui.globalactions.GlobalActionsDialog.MyOverflowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder: com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder withFeature(java.lang.String,java.util.function.Supplier)>
<com.android.systemui.classifier.FalsingManagerProxy: void onNotificationStartDismissing()>
<com.android.server.infra.AbstractMasterSystemService: void resetTemporaryService(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetFramebufferAttachmentParameterivOES(int,int,int,int[],int)>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy.MobileIconState: com.android.systemui.statusbar.phone.StatusBarSignalPolicy.MobileIconState copy()>
<android.net.wifi.aware.ConfigRequest: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.rtt.ResponderLocation: boolean equals(java.lang.Object)>
<com.android.server.policy.WindowManagerPolicy: boolean isTopLevelWindow(int)>
<com.android.systemui.qs.QSDetailItems: void onFinishInflate()>
<com.android.server.adb.AdbService: void disablePairing()>
<com.android.systemui.assist.AssistHandleBehaviorController: long getShowAndGoRemainingTimeMs()>
<com.android.networkstack.tethering.OffloadController: void <init>(android.os.Handler,com.android.networkstack.tethering.OffloadHardwareInterface,android.content.ContentResolver,android.app.usage.NetworkStatsManager,android.net.util.SharedLog,com.android.networkstack.tethering.OffloadController.Dependencies)>
<com.android.server.tv.tunerresourcemanager.ClientProfile: void useCas(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCommonCriteriaModeEnabled(android.content.ComponentName)>
<android.net.wifi.hotspot2.PasspointConfiguration: android.net.wifi.hotspot2.pps.Credential getCredential()>
<com.android.systemui.statusbar.policy.DeadZone: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeUtil: java.lang.String getSubtypeLocaleNameListAsSentence(java.util.List,android.content.Context,android.view.inputmethod.InputMethodInfo)>
<com.android.settingslib.applications.PermissionsSummaryHelper.PermissionsResultCallback: void onPermissionSummaryResult(int,int,int,java.util.List)>
<com.android.server.biometrics.LoggableMonitor: int statsAction()>
<com.android.systemui.statusbar.notification.collection.ListEntry: java.lang.String getKey()>
<com.android.server.accounts.AccountManagerService: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: int getExpandHeight()>
<com.android.systemui.globalactions.GlobalActionsItem: void setMarquee(boolean)>
<com.android.server.recoverysystem.RecoverySystemService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<com.android.systemui.qs.tiles.NfcTile: boolean isAvailable()>
<com.android.systemui.doze.DozeMachine: void <init>(com.android.systemui.doze.DozeMachine.Service,android.hardware.display.AmbientDisplayConfiguration,com.android.systemui.util.wakelock.WakeLock,com.android.systemui.keyguard.WakefulnessLifecycle,com.android.systemui.statusbar.policy.BatteryController,com.android.systemui.doze.DozeLog,com.android.systemui.dock.DockManager,com.android.systemui.doze.DozeHost)>
<com.android.systemui.ActivityStarterDelegate: void startPendingIntentDismissingKeyguard(android.app.PendingIntent,java.lang.Runnable,android.view.View)>
<android.os.IStatsCompanionService: void setPullingAlarm(long)>
<android.net.wifi.aware.WifiAwareAgentNetworkSpecifier: int describeContents()>
<com.android.server.accounts.AccountManagerService: void removeAccountInternal(android.accounts.Account)>
<com.android.systemui.statusbar.StatusBarIconView: boolean isIconBlocked()>
<android.net.wifi.aware.DiscoverySession: void close()>
<com.android.systemui.statusbar.KeyguardAffordanceView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.statusbar.KeyboardShortcutAppItemLayout: void onMeasure(int,int)>
<com.android.server.usb.descriptors.tree.UsbDescriptorsDeviceNode: void addConfigDescriptorNode(com.android.server.usb.descriptors.tree.UsbDescriptorsConfigNode)>
<com.android.server.integrity.parser.RuleIndexRange: void <init>(int,int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void onDensityOrFontScaleChanged()>
<com.android.systemui.car.hvac.TemperatureTextView: int getPropertyId()>
<com.android.server.NetworkScorerAppManager: void migrateNetworkScorerAppSettingIfNeeded()>
<com.android.settingslib.media.PhoneMediaDevice: void updateSummary(boolean)>
<com.android.systemui.qs.QuickStatusBarHeader: void setQSPanel(com.android.systemui.qs.QSPanel)>
<com.android.systemui.statusbar.phone.StatusBarIconController.DarkIconManager: void onIconAdded(int,java.lang.String,boolean,com.android.systemui.statusbar.phone.StatusBarIconHolder)>
<com.android.systemui.statusbar.notification.VisualStabilityManager: void setScreenOn(boolean)>
<javax.obex.ObexTransport: boolean isSrmSupported()>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void setReplacingIcons(androidx.collection.ArrayMap)>
<com.android.systemui.SystemUIService: android.os.IBinder onBind(android.content.Intent)>
<com.android.systemui.statusbar.notification.collection.coordinator.MediaCoordinator: void attach(com.android.systemui.statusbar.notification.collection.NotifPipeline)>
<android.net.wifi.hotspot2.pps.Policy: void setMinRoamingUplinkBandwidth(long)>
<com.android.systemui.statusbar.notification.row.NotificationGutsManager: boolean openGuts(android.view.View,int,int,com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.MenuItem)>
<com.android.settingslib.core.instrumentation.EventLogWriter: void action(int,int,int,java.lang.String,int)>
<com.android.server.policy.PhoneWindowManager: android.view.animation.Animation createKeyguardWallpaperExit(boolean)>
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)>
<com.android.settingslib.widget.UpdatableListPreferenceDialogFragment: com.android.settingslib.widget.UpdatableListPreferenceDialogFragment newInstance(java.lang.String,int)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: boolean isUnlockWithWallpaper()>
<com.android.printspooler.model.MutexFileProvider: java.io.File acquireFile(com.android.printspooler.model.MutexFileProvider.OnReleaseRequestCallback)>
<android.net.wifi.p2p.WifiP2pGroup: int describeContents()>
<com.android.server.biometrics.BiometricServiceBase.AuthenticationClientImpl: void notifyUserActivity()>
<android.text.NonEditableTextGenerator.RandomCharSequenceGenerator: java.lang.CharSequence buildLatinSequence()>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setIsUserInteractionRequired(boolean)>
<com.android.server.media.MediaSessionRecordImpl: boolean isClosed()>
<com.android.systemui.bubbles.BubbleController.PendingIntentCanceledListener: void onPendingIntentCanceled(com.android.systemui.bubbles.Bubble)>
<com.android.server.usb.UsbService: void setCurrentFunction(java.lang.String,boolean)>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams: void <init>(com.android.systemui.shared.system.SurfaceControlCompat,float,android.graphics.Matrix,android.graphics.Rect,int,android.view.SurfaceControl,int,float)>
<com.android.server.appbinding.AppBindingUtils: android.content.pm.ServiceInfo findService(java.lang.String,int,java.lang.String,java.lang.String,java.lang.Class,android.content.pm.IPackageManager,java.lang.StringBuilder)>
<com.android.systemui.statusbar.notification.row.RowContentBindParams: void setNeedsReinflation(boolean)>
<com.android.systemui.statusbar.notification.row.FooterView: void setTextColor(int)>
<com.android.server.people.data.ConversationInfo: java.lang.String getShortcutId()>
<com.android.settingslib.Utils: int getCombinedServiceState(android.telephony.ServiceState)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin getProvider()>
<com.android.systemui.statusbar.phone.KeyguardDismissUtil: void setDismissHandler(com.android.systemui.statusbar.phone.KeyguardDismissHandler)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean userNeedsStrongAuth()>
<com.android.systemui.statusbar.ScrimView: void setViewAlpha(float)>
<android.net.TetheredClient: android.net.TetheredClient addAddresses(android.net.TetheredClient)>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo: boolean isAnimating()>
<com.android.commands.sm.Sm: void runMount()>
<com.android.server.pm.dex.DexoptOptions: void <init>(java.lang.String,int,int)>
<com.android.systemui.statusbar.phone.UserAvatarView: void setBadgeDiameter(float)>
<com.android.server.uri.UriPermissionOwner: void removeWritePermission(com.android.server.uri.UriPermission)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void addOnSensitivityChangedListener(com.android.systemui.statusbar.notification.collection.NotificationEntry.OnSensitivityChangedListener)>
<com.android.systemui.statusbar.phone.BarTransitions.BarBackgroundDrawable: void setTintMode(android.graphics.PorterDuff.Mode)>
<com.android.systemui.plugins.ClockPlugin: android.view.View getView()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setForcePluginOpen(boolean)>
<com.android.systemui.qs.tiles.ScreenRecordTile: void handleClick()>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void setDistanceToTopRoundness(float)>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcherScrim: void setAlpha(int)>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: java.lang.Object[] toArray(java.lang.Object[])>
<com.android.commands.svc.PowerCommand: java.lang.String longHelp()>
<com.android.systemui.statusbar.phone.HeadsUpTouchHelper.Callback: com.android.systemui.statusbar.notification.row.ExpandableView getChildAtRawPosition(float,float)>
<android.net.wifi.hotspot2.PasspointConfiguration: java.lang.String getServiceFriendlyName()>
<com.android.server.GestureLauncherService: boolean isCameraLaunchEnabled(android.content.res.Resources)>
<com.android.server.textclassifier.TextClassificationManagerService.Lifecycle: void onStartUser(int)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void revokeRuntimePermissionsIfGroupChanged(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.parsing.pkg.AndroidPackage,java.util.ArrayList)>
<com.android.systemui.qs.QSFragment: boolean isShowingDetail()>
<com.android.systemui.util.sensors.AsyncSensorManager: void destroyDirectChannelImpl(android.hardware.SensorDirectChannel)>
<android.net.wifi.WifiInfo: void setTxLinkSpeedMbps(int)>
<com.android.server.pm.permission.BasePermission: java.lang.String toString()>
<com.android.systemui.classifier.FalsingManagerFake: void onSuccessfulUnlock()>
<com.android.server.NetworkScoreService.ScoringServiceConnection: boolean isAlive()>
<com.android.externalstorage.ExternalStorageProvider: int enforceWritePermissionInner(android.net.Uri,java.lang.String,java.lang.String,android.os.IBinder)>
<com.android.systemui.util.concurrency.ConcurrencyModule: com.android.systemui.util.concurrency.DelayableExecutor provideBackgroundDelayableExecutor(android.os.Looper)>
<android.net.wifi.p2p.IWifiP2pManager: android.os.Messenger getMessenger(android.os.IBinder)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeUtil: java.lang.String getSubtypeLocaleNameAsSentence(android.view.inputmethod.InputMethodSubtype,android.content.Context,android.view.inputmethod.InputMethodInfo)>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean canShowWhenLocked()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: boolean getMachineManaged()>
<com.android.systemui.wm.DisplayImeController: void onDisplayAdded(int)>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: boolean isMatchForSystemOnly(com.android.server.pm.parsing.pkg.AndroidPackage,int)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeUtilCompat: void removeUnnecessaryNonPersistentPreference(androidx.preference.Preference)>
<com.android.printspooler.ui.PageAdapter: void onPreviewAreaSizeChanged()>
<com.android.systemui.statusbar.phone.StatusBarTouchableRegionManager: void <init>(android.content.Context,com.android.systemui.statusbar.phone.NotificationShadeWindowController,com.android.systemui.statusbar.policy.ConfigurationController,com.android.systemui.statusbar.phone.HeadsUpManagerPhone)>
<com.android.systemui.util.AlarmTimeout: void onAlarm()>
<com.android.systemui.statusbar.phone.PanelViewController: boolean onEmptySpaceClick(float)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceController: void <init>(com.android.server.display.whitebalance.AmbientSensor.AmbientBrightnessSensor,com.android.server.display.utils.AmbientFilter,com.android.server.display.whitebalance.AmbientSensor.AmbientColorTemperatureSensor,com.android.server.display.utils.AmbientFilter,com.android.server.display.whitebalance.DisplayWhiteBalanceThrottler,float[],float[],float,float[],float[],float,float[],float[])>
<com.android.settingslib.deviceinfo.StorageMeasurement.MeasurementDetails: java.lang.String toString()>
<com.android.systemui.statusbar.policy.NextAlarmControllerImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.net.wifi.WpsInfo: void <init>(android.net.wifi.WpsInfo)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void <init>(android.content.Context,android.view.WindowManager,android.app.IActivityManager,com.android.systemui.statusbar.phone.DozeParameters,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.policy.ConfigurationController,com.android.systemui.keyguard.KeyguardViewMediator,com.android.systemui.statusbar.phon.KeyguardBypassController,com.android.systemui.colorextraction.SysuiColorExtractor,com.android.systemui.dump.DumpManager)>
<com.android.systemui.statusbar.phone.PanelViewController: float getContentHeight()>
<com.android.systemui.pip.phone.PipTouchState: boolean allowDraggingOffscreen()>
<com.android.server.people.data.EventHistory: com.android.server.people.data.EventIndex getEventIndex(int)>
<android.content.pm.PackageManagerInternal: void removeAllDistractingPackageRestrictions(int)>
<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: void action(android.content.Context,int,java.lang.String)>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: void setClient(android.print.IPrintSpoolerClient)>
<com.android.systemui.statusbar.phone.StatusBar: boolean isPulsing()>
<com.android.packageinstaller.InstallStaging: void onDestroy()>
<com.android.systemui.statusbar.notification.row.PartialConversationInfo: boolean post(java.lang.Runnable)>
<com.android.settingslib.applications.ApplicationsState.Callbacks: void onPackageIconChanged()>
<android.media.Session2Command: int hashCode()>
<com.android.systemui.shared.system.WindowManagerWrapper: void getStableInsets(android.graphics.Rect)>
<android.net.wifi.hotspot2.omadm.XMLParser: void endElement(java.lang.String,java.lang.String,java.lang.String)>
<com.android.commands.sm.Sm: void runSetVirtualDisk()>
<javax.microedition.khronos.opengles.GL11: void glBufferData(int,int,java.nio.Buffer,int)>
<com.android.systemui.statusbar.phone.ObservableScrollView: void setBlockFlinging(boolean)>
<com.android.uiautomator.core.UiScrollable: com.android.uiautomator.core.UiScrollable setMaxSearchSwipes(int)>
<com.android.commands.hid.Device: void close()>
<com.android.settingslib.wifi.AccessPoint.AccessPointListener: void onAccessPointChanged(com.android.settingslib.wifi.AccessPoint)>
<android.perftests.utils.LayoutUtils: java.util.List gatherViewTree(android.view.ViewGroup)>
<com.android.systemui.qs.QSPanel: void setMediaVisibilityChangedListener(java.util.function.Consumer)>
<android.net.wifi.p2p.WifiP2pManager: void setWFDInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pWfdInfo,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.media.tv.remoteprovider.TvRemoteProvider: android.content.Context getContext()>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void showAppOpsIcons(android.util.ArraySet)>
<com.android.server.integrity.model.IntegrityCheckResult: com.android.server.integrity.model.IntegrityCheckResult allow()>
<com.android.server.biometrics.AuthenticationClient: void binderDied()>
<com.android.server.IntentResolver: java.lang.Object[] newArray(int)>
<com.android.systemui.car.bluetooth.CarBatteryController: void addCallback(com.android.systemui.statusbar.policy.BatteryController.BatteryStateChangeCallback)>
<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasVideoCapture()>
<com.android.server.textclassifier.TextClassificationManagerService: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification.Request,android.service.textclassifier.ITextClassifierCallback)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareImpl: android.os.IBinder asBinder()>
<com.android.server.slice.SliceClientPermissions: void writeTo(org.xmlpull.v1.XmlSerializer)>
<com.android.systemui.statusbar.policy.BrightnessMirrorController: void showMirror()>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setActualHeight(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setIconAnimationRunning(boolean)>
<com.android.systemui.egg.MLand: boolean onGenericMotionEvent(android.view.MotionEvent)>
<com.android.systemui.pip.phone.PipTouchState: void onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.statusbar.policy.RotationLockController: boolean isRotationLockAffordanceVisible()>
<com.android.server.audio.AudioService: int getStreamMaxVolume(int)>
<com.android.server.usb.UsbAlsaJackDetector: boolean isOutputJackConnected()>
<com.android.server.infra.AbstractMasterSystemService: void updateCachedServiceLocked(int)>
<com.android.powermodel.RawBatteryStats.Warning: void <init>(int,com.android.powermodel.RawBatteryStats.WarningId,java.util.ArrayList,java.lang.String,java.lang.String[])>
<com.android.gallery3d.exif.ExifInterface: java.util.List getAllTags()>
<com.android.systemui.qs.tiles.CastTile: int getMetricsCategory()>
<com.android.server.audio.AudioService: boolean isHdmiSystemAudioSupported()>
<com.android.systemui.qs.tileimpl.QSTileImpl: void fireScanStateChanged(boolean)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setCodePath(java.lang.String)>
<com.android.server.appbinding.finders.AppServiceFinder: void dumpSimple(java.io.PrintWriter)>
<com.android.packageinstaller.UninstallerActivity: void dispatchAborted()>
<com.android.server.soundtrigger_middleware.HalException: void <init>(int,java.lang.String)>
<com.android.systemui.car.navigationbar.CarNavigationButton: boolean getUnseen()>
<com.android.systemui.statusbar.policy.KeyButtonView: void onWindowVisibilityChanged(int)>
<com.android.settingslib.core.lifecycle.ObservableDialogFragment: void onStop()>
<com.android.systemui.statusbar.AlertingNotificationManager: com.android.systemui.statusbar.notification.collection.NotificationEntry getEntry(java.lang.String)>
<com.android.systemui.statusbar.GestureRecorder: void tag(long,java.lang.String,java.lang.String)>
<com.android.settingslib.bluetooth.LocalBluetoothManager: com.android.settingslib.bluetooth.LocalBluetoothManager create(android.content.Context,android.os.Handler,android.os.UserHandle)>
<com.android.server.locksettings.SyntheticPasswordManager: android.app.admin.PasswordMetrics getPasswordMetrics(com.android.server.locksettings.SyntheticPasswordManager.AuthenticationToken,long,int)>
<com.android.systemui.assist.AssistManager: boolean shouldShowOrb()>
<com.android.server.biometrics.fingerprint.FingerprintService: void <init>(android.content.Context)>
<com.android.systemui.assist.AssistHandleBehaviorController: void hide()>
<com.android.systemui.shared.plugins.PluginInstanceManager: void loadAll()>
<com.android.systemui.tuner.TunerZenModePanel: void setZenState(int)>
<com.android.server.media.MediaShellCommand: void onHelp()>
<com.android.server.audio.AudioService: void playSoundEffectVolume(int,float)>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindsStatusBar(com.android.systemui.statusbar.phone.StatusBar)>
<com.android.systemui.recents.OverviewProxyService.OverviewProxyListener: void onSystemUiStateChanged(int)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareLogging: void dump(java.io.PrintWriter)>
<com.android.keyguard.clock.SettingsWrapper.Migration: void migrate(java.lang.String,int)>
<com.android.systemui.globalactions.GlobalActionsFlatLayout: float getAnimationOffsetX()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void reportFailedPasswordAttempt(int)>
<android.os.TracePerfTest: void verifyTracingEnabled()>
<com.android.fakeoemfeatures.FakeApp: void onCreate()>
<android.net.wifi.WifiManager.MulticastLock: void release()>
<com.android.systemui.dagger.DefaultActivityBinder: android.app.Activity bindForegroundServicesDialog(com.android.systemui.ForegroundServicesDialog)>
<com.android.systemui.pip.PipUiEventLogger: void <init>(com.android.internal.logging.UiEventLogger,android.content.pm.PackageManager)>
<com.android.server.ExtconUEventObserver: boolean namedExtconDirExists(java.lang.String)>
<com.android.printspooler.model.PageContentRepository.PageContentProvider: android.view.View getOwner()>
<com.android.commands.sm.Sm: void runSetEmulateFbe()>
<com.android.server.pm.Settings: com.android.server.pm.Settings.VersionInfo findOrCreateVersion(java.lang.String)>
<com.android.server.pm.PackageSettingBase: boolean isSharedUser()>
<com.android.settingslib.bluetooth.HeadsetProfile: boolean accessProfileEnabled()>
<com.android.systemui.tuner.TunerFragment: void onPause()>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage addUsesLibrary(int,java.lang.String)>
<com.android.location.provider.LocationRequestUnbundled: long getFastestInterval()>
<com.android.server.pm.dex.DexManager: com.android.server.pm.dex.DynamicCodeLogger getDynamicCodeLogger()>
<com.android.bluetoothmidiservice.BluetoothMidiService: android.os.IBinder onBind(android.content.Intent)>
<com.android.systemui.power.PowerUI.WarningsUI: void showHighTemperatureWarning()>
<com.android.systemui.qs.PagedTileLayout: void removeTile(com.android.systemui.qs.QSPanel.TileRecord)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void expandNotification()>
<com.android.systemui.plugins.NotificationPersonExtractorPlugin: java.lang.String extractPersonKey(android.service.notification.StatusBarNotification)>
<com.android.server.biometrics.BiometricUtils: java.lang.CharSequence getUniqueName(android.content.Context,int)>
<com.android.server.pm.dex.PackageDexUsage: void readInternal(java.lang.Void)>
<com.android.server.usb.descriptors.report.HTMLReportCanvas: void openList()>
<com.android.systemui.fragments.FragmentService: void removeAndDestroy(android.view.View)>
<android.net.ip.IpClientCallbacks: void onPostDhcpAction()>
<com.android.server.TelephonyRegistry: void notifyCellInfoForSubscriber(int,java.util.List)>
<com.android.printspooler.model.PageContentRepository.PageContentProvider: int getPageIndex()>
<com.android.server.usb.descriptors.Usb10ACHeader: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.server.inputmethod.InputMethodManagerService.Lifecycle: void onSwitchUser(int)>
<android.app.StatsManager.PullAtomMetadata.Builder: android.app.StatsManager.PullAtomMetadata build()>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: boolean needsOutline()>
<android.media.MediaSession2.ControllerInfo: int getUid()>
<com.android.printspooler.ui.PrintActivity: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.devicepolicy.DevicePolicyManagerService: long getPasswordExpiration(android.content.ComponentName,int,boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void addOnExpandedHeightChangedListener(java.util.function.BiConsumer)>
<com.android.server.pm.Installer.InstallerException: com.android.server.pm.Installer.InstallerException from(java.lang.Exception)>
<com.android.server.pm.permission.PermissionsState.PermissionState: int getFlags()>
<com.android.server.hdmi.SelectRequestBuffer: com.android.server.hdmi.SelectRequestBuffer.DeviceSelectRequest newDeviceSelect(com.android.server.hdmi.HdmiControlService,int,android.hardware.hdmi.IHdmiControlCallback)>
<com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.model.RuleMetadata readMetadata()>
<com.android.server.rollback.RollbackManagerService: void onUnlockUser(int)>
<com.android.systemui.shared.system.TaskInfoCompat: int getActivityType(android.app.TaskInfo)>
<com.android.server.utils.UserTokenWatcher: void release(android.os.IBinder,int)>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindKeyguardViewMediator(com.android.systemui.keyguard.KeyguardViewMediator)>
<com.android.systemui.wm.DisplaySystemBarsController: void <init>(android.content.Context,android.view.IWindowManager,com.android.systemui.wm.DisplayController,android.os.Handler,com.android.systemui.TransactionPool)>
<com.android.systemui.toast.ToastUI: void <init>(android.content.Context,com.android.systemui.statusbar.CommandQueue)>
<com.android.server.pm.UserManagerService: void clearSeedAccountData()>
<com.android.settingslib.CustomEditTextPreferenceCompat: boolean isDialogOpen()>
<com.android.systemui.qs.QSPanel.QSTileLayout: void saveInstanceState(android.os.Bundle)>
<com.android.systemui.DessertCaseView.RescalingContainer: void setView(com.android.systemui.DessertCaseView)>
<android.graphics.perftests.PathPerfTest: void testReset()>
<com.android.systemui.statusbar.notification.ImageTransformState: void disappear(float,com.android.systemui.statusbar.TransformableView)>
<com.android.systemui.util.wakelock.DelayedWakeLock.Builder: com.android.systemui.util.wakelock.DelayedWakeLock build()>
<com.android.systemui.statusbar.phone.SettingsButton: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter getTestCaseFilter()>
<com.android.server.ServiceThread: void run()>
<com.android.commands.locksettings.LockSettingsCmd: void main(java.lang.String[])>
<com.android.server.accessibility.gestures.TouchState: boolean isDelegating()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setClipChildren(boolean)>
<com.android.server.audio.AudioService: int trackPlayer(android.media.PlayerBase.PlayerIdCard)>
<com.android.systemui.statusbar.phone.StatusIconContainer.StatusIconState: void applyToView(android.view.View)>
<com.android.settingslib.core.lifecycle.Lifecycle: void removeObserver(androidx.lifecycle.LifecycleObserver)>
<com.android.server.audio.AudioService: void disableSafeMediaVolume(java.lang.String)>
<com.android.gallery3d.exif.ExifInterface: boolean setCompressedThumbnail(android.graphics.Bitmap)>
<com.android.media.remotedisplay.RemoteDisplay: void setDescription(java.lang.String)>
<com.android.networkstack.tethering.IPv6TetheringCoordinator: void addActiveDownstream(android.net.ip.IpServer,int)>
<com.android.systemui.screenshot.ScreenshotSelectorView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.policy.CallbackHandler: void setMobileDataIndicators(com.android.systemui.statusbar.policy.NetworkController.IconState,com.android.systemui.statusbar.policy.NetworkController.IconState,int,int,boolean,boolean,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,boolean,int,boolean)>
<com.android.systemui.statusbar.CommandQueue: void abortTransient(int,int[])>
<com.android.systemui.biometrics.AuthCredentialPasswordView: void onCredentialVerified(byte[],int)>
<com.android.systemui.util.leak.TrackedGarbage: void dump(java.io.PrintWriter)>
<com.android.systemui.plugins.ActivityStarter: void startActivity(android.content.Intent,boolean,com.android.systemui.plugins.ActivityStarter.Callback)>
<com.android.systemui.volume.VolumeDialogControllerImpl.MediaSessionsCallbacks: void setStreamVolume(int,int)>
<com.android.systemui.car.hvac.AnimatedTemperatureView: int getPropertyId()>
<com.android.server.usb.descriptors.UsbVCOutputTerminal: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.systemui.statusbar.notification.stack.AmbientState: float getOverScrollAmount(boolean)>
<com.android.systemui.SystemUIAppComponentFactory: android.app.Activity instantiateActivityCompat(java.lang.ClassLoader,java.lang.String,android.content.Intent)>
<com.android.server.devicepolicy.DevicePolicyManagerService: long getLastBugReportRequestTime()>
<android.net.wifi.ISoftApCallback: void onConnectedClientsChanged(java.util.List)>
<com.android.server.pm.PackageList: void onPackageRemoved(java.lang.String,int)>
<com.android.systemui.biometrics.AuthBiometricFaceView: void handleResetAfterHelp()>
<com.android.aapt.namespace.libtwo.TextView: java.lang.String getTextViewAttr()>
<com.android.gallery3d.glrenderer.RawTexture: boolean isFlippedVertically()>
<com.android.systemui.statusbar.notification.row.NotificationContentInflater.AsyncInflationTask: void onAsyncInflationFinished(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.pm.PackageSetting: boolean isSharedUser()>
<android.media.Session2CommandGroup: boolean hasCommand(int)>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator.ExpandAnimationParameters: int getWidth()>
<com.android.keyguard.ViewMediatorCallback: java.lang.CharSequence consumeCustomMessage()>
<com.android.settingslib.Utils: int getThemeAttr(android.content.Context,int)>
<android.net.wifi.p2p.WifiP2pConfig: int describeContents()>
<com.android.systemui.screenshot.ScreenshotNotificationsController: void notifyScreenshotError(int)>
<com.android.systemui.classifier.HumanInteractionClassifier: boolean isFalseTouch()>
<com.android.server.om.OverlayableInfoCallback: java.lang.String[] getPackagesForUid(int)>
<android.net.wifi.aware.SubscribeConfig: boolean equals(java.lang.Object)>
<com.android.server.accounts.AccountManagerService: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
<android.content.pm.PackageManagerInternal: boolean isPermissionsReviewRequired(java.lang.String,int)>
<com.android.settingslib.wifi.TestAccessPointBuilder: com.android.settingslib.wifi.TestAccessPointBuilder setActive(boolean)>
<com.android.systemui.shared.system.PinnedStackListenerForwarder.PinnedStackListener: void onListenerRegistered(android.view.IPinnedStackController)>
<com.android.systemui.statusbar.StatusBarIconView: float getIconScaleIncreased()>
<com.android.systemui.bubbles.BubbleStackView: void onImeVisibilityChanged(boolean,int)>
<javax.microedition.khronos.egl.EGL10: boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)>
<android.net.TetheringManager: void startTethering(int,java.util.concurrent.Executor,android.net.TetheringManager.StartTetheringCallback)>
<com.android.systemui.classifier.PointerCountClassifier: float getFalseTouchEvaluation(int)>
<com.android.systemui.plugins.qs.QSTile.BooleanState: java.lang.StringBuilder toStringBuilder()>
<com.android.systemui.stackdivider.DividerView: boolean isHorizontalDivision()>
<com.android.server.role.RoleUserState: void destroy()>
<com.android.keyguard.KeyguardClockSwitch: void onAttachedToWindow()>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName)>
<android.app.ResourcesPerfTest: void getValueString()>
<android.widget.LayoutPerfTest: java.util.Collection measureSpecs()>
<com.android.server.vr.EnabledComponentsObserver: void onPackagesChanged()>
<com.android.wallpapercropper.WallpaperCropActivity: void cropImageAndSetWallpaper(android.content.res.Resources,int,boolean)>
<com.android.server.biometrics.ClientMonitor: void binderDied()>
<com.android.systemui.bubbles.BubbleController: void onUserChangedBubble(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.systemui.statusbar.phone.ObservableScrollView.Listener: void onScrollChanged()>
<android.net.wifi.SoftApCapability: boolean areFeaturesSupported(long)>
<com.android.systemui.pip.PipSurfaceTransactionHelper.SurfaceControlTransactionFactory: android.view.SurfaceControl.Transaction getTransaction()>
<com.android.systemui.plugins.VolumeDialogController.Callbacks: void onShowRequested(int)>
<com.android.server.contentsuggestions.ContentSuggestionsManagerService: void <init>(android.content.Context)>
<com.android.server.contentcapture.ContentCaptureManagerService: void onServicePackageUpdatedLocked(int)>
<com.android.systemui.tuner.TunerActivity.SubSettingsFragment: void onDestroy()>
<com.android.server.media.AudioPlayerStateMonitor.OnAudioPlayerActiveStateChangedListener: void onAudioPlayerActiveStateChanged(android.media.AudioPlaybackConfiguration,boolean)>
<com.android.systemui.statusbar.phone.EdgeBackGestureHandler: void onPluginDisconnected(com.android.systemui.plugins.NavigationEdgeBackPlugin)>
<com.android.systemui.statusbar.GestureRecorder: java.lang.String toJson()>
<com.android.systemui.qs.tiles.WifiTile: void setDetailListening(boolean)>
<com.android.systemui.statusbar.ScreenRecordDrawable: boolean canApplyTheme()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow.OnAppOpsClickListener: boolean onClick(android.view.View,int,int,com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.MenuItem)>
<android.net.wifi.WifiManager: void enableVerboseLogging(int)>
<com.android.server.display.DisplayManagerService: void systemReady(boolean,boolean)>
<com.android.systemui.assist.AssistManager.UiController: void onGestureCompletion(float)>
<android.net.wifi.WifiManager: boolean setSoftApConfiguration(android.net.wifi.SoftApConfiguration)>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: void updateResources(int,android.graphics.Point)>
<com.android.server.integrity.parser.RuleIndexingController: java.util.List identifyRulesToEvaluate(android.content.integrity.AppInstallMetadata)>
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder setPort(int)>
<com.android.networkstack.tethering.PrivateAddressCoordinator: void clearUpstreamPrefixes()>
<com.android.systemui.util.InjectionInflationController.ViewAttributeProvider: android.util.AttributeSet provideAttributeSet()>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getUsesLibraries()>
<com.android.settingslib.widget.LayoutPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.BinderCallsStatsService.Internal: java.util.ArrayList getExportedCallStats()>
<com.android.commands.am.Instrument: void <init>(android.app.IActivityManager,android.content.pm.IPackageManager)>
<com.android.systemui.assist.ui.EdgeLight: float getStart()>
<com.android.systemui.plugins.qs.QS: void closeDetail()>
<android.view.autofill.MyAutofillCallback: void expectEvent(android.view.View,int)>
<com.android.systemui.statusbar.phone.NavigationBarView: void onFinishInflate()>
<android.net.wifi.hotspot2.pps.HomeSp: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.phone.DozeServiceHost: void <init>(com.android.systemui.doze.DozeLog,android.os.PowerManager,com.android.systemui.keyguard.WakefulnessLifecycle,com.android.systemui.statusbar.SysuiStatusBarStateController,com.android.systemui.statusbar.policy.DeviceProvisionedController,com.android.systemui.statusbar.phone.HeadsUpManagerPhone,com.android.systemui.statusbar.policy.BatteryController,com.android.systemui.statusbar.phone.ScrimController,dagger.Lazy,com.android.systemui.keyguard.KeyguardViewMediator,dagger.Lazy,com.android.systemui.statusbar.phone.DozeScrimController,com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.statusbar.notification.VisualStabilityManager,com.android.systemui.statusbar.PulseExpansionHandler,com.android.systemui.statusbar.phone.NotificationShadeWindowController,com.android.systemui.statusbar.notification.NotificationWakeUpCoordinator,com.android.systemui.statusbar.phone.LockscreenLockIconController)>
<com.android.systemui.statusbar.policy.HotspotControllerImpl: void setHotspotEnabled(boolean)>
<com.android.server.appop.AppOpsService: void setMode(int,int,java.lang.String,int)>
<com.android.settingslib.drawer.Tile: java.lang.CharSequence getSummary(android.content.Context)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: com.android.systemui.statusbar.phone.DemoStatusIcons createDemoStatusIcons()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void showAuthenticationDialog(android.os.Bundle,android.hardware.biometrics.IBiometricServiceReceiverInternal,int,boolean,int,java.lang.String,long,int)>
<com.android.server.biometrics.BiometricServiceBase: void handleAcquired(long,int,int)>
<com.android.server.display.DisplayModeDirector.BrightnessObserver: void setDefaultDisplayState(int)>
<com.android.systemui.fragments.ExtensionFragmentListener: void attachExtensonToFragment(android.view.View,java.lang.String,int,com.android.systemui.statusbar.policy.ExtensionController.Extension)>
<com.android.printservice.recommendation.plugin.hp.ServiceListener.Observer: boolean matchesCriteria(java.lang.String,android.net.nsd.NsdServiceInfo)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void registerOnKeyguardCancelClickedListener(com.android.systemui.car.keyguard.CarKeyguardViewController.OnKeyguardCancelClickedListener)>
<android.net.wifi.p2p.WifiP2pGroup: boolean isClientListEmpty()>
<com.android.systemui.qs.external.TileServices: void recalculateBindAllowance()>
<android.net.wifi.aware.PublishConfig: boolean equals(java.lang.Object)>
<com.android.systemui.plugins.qs.QS: boolean isCustomizing()>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: int getIcon(android.content.pm.parsing.ParsingPackageRead)>
<com.android.systemui.qs.tileimpl.QSIconViewImpl: int getColor(int)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector clickable(boolean)>
<com.android.server.audio.AudioService: boolean isSpeakerphoneOn()>
<com.android.systemui.qs.tileimpl.QSTileImpl: androidx.lifecycle.Lifecycle getLifecycle()>
<com.android.systemui.biometrics.AuthBiometricView: void onFinishInflate()>
<com.android.server.DeviceIdleController.Constants: void onChange(boolean,android.net.Uri)>
<com.android.systemui.statusbar.notification.stack.NotificationSection: int updateBounds(int,int,boolean)>
<com.android.server.autofill.AutofillManagerService: void registerForExtraSettingsChanges(android.content.ContentResolver,android.database.ContentObserver)>
<android.text.BoringLayoutCreateDrawPerfTest: java.util.Collection cases()>
<com.android.systemui.statusbar.phone.FloatingRotationButton: void setOnHoverListener(android.view.View.OnHoverListener)>
<com.android.keyguard.KeyguardUpdateMonitor: void onAuthInterruptDetected(boolean)>
<com.android.systemui.qs.tiles.UserDetailView.Adapter: void onClick(android.view.View)>
<com.android.systemui.qs.tiles.RotationLockTile: java.lang.String composeChangeAnnouncement()>
<com.android.settingslib.media.InfoMediaManager: int getSessionVolumeMax()>
<com.android.systemui.bubbles.BubbleManageEducationView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.input.InputManagerService: boolean canDispatchToDisplay(int,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean hasPulsingNotifications()>
<com.android.server.integrity.engine.RuleEvaluationEngine: com.android.server.integrity.engine.RuleEvaluationEngine getRuleEvaluationEngine()>
<android.perftests.utils.ManualBenchmarkState.CustomizedIterationListener: void onStart(int)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: boolean isContentExpandable()>
<com.android.server.contentsuggestions.ContentSuggestionsPerUserService: boolean updateLocked(boolean)>
<com.android.server.pm.AppsFilter: com.android.server.pm.AppsFilter.FeatureConfig getFeatureConfig()>
<javax.obex.ClientOperation: javax.obex.HeaderSet getReceivedHeader()>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setSsidPattern(android.os.PatternMatcher)>
<com.android.settingslib.utils.StringUtil: java.lang.CharSequence formatRelativeTime(android.content.Context,double,boolean)>
<com.android.server.vr.EnabledComponentsObserver: void onSettingChanged()>
<com.android.systemui.statusbar.notification.VisualStabilityManager: boolean areGroupChangesAllowed()>
<android.net.wifi.hotspot2.PasspointConfiguration: void setUpdateIdentifier(int)>
<com.android.settingslib.wifi.WifiTracker: void resumeScanning()>
<com.android.systemui.qs.QuickStatusBarHeaderController.Builder: com.android.systemui.qs.QuickStatusBarHeaderController.Builder setQuickStatusBarHeader(com.android.systemui.qs.QuickStatusBarHeader)>
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager)>
<com.android.systemui.util.InjectionInflationController.ViewInstanceCreator: com.android.keyguard.KeyguardMessageArea createKeyguardMessageArea()>
<com.android.settingslib.bluetooth.BluetoothCallback: void onConnectionStateChanged(com.android.settingslib.bluetooth.CachedBluetoothDevice,int)>
<com.android.settingslib.bluetooth.HearingAidProfile: boolean isAutoConnectable()>
<com.android.printspooler.widget.PreviewPageFrame: java.lang.CharSequence getAccessibilityClassName()>
<com.android.systemui.classifier.EndPointLengthClassifier: float getFalseTouchEvaluation(int,com.android.systemui.classifier.Stroke)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSystemExt(boolean)>
<com.android.systemui.SwipeHelper: boolean isDismissGesture(android.view.MotionEvent)>
<android.net.wifi.IWifiManager: void queryPasspointIcon(long,java.lang.String)>
<com.android.server.accounts.IAccountAuthenticatorCache: android.content.pm.RegisteredServicesCache.ServiceInfo getServiceInfo(android.accounts.AuthenticatorDescription,int)>
<com.android.future.usb.UsbAccessory: java.lang.String getVersion()>
<com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.Pluggable.PluggableListener: void onPluggableInvalidated(java.lang.Object)>
<com.android.settingslib.net.DataUsageController: long getDefaultWarningLevel()>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: boolean containsAll(java.util.Collection)>
<com.android.systemui.statusbar.DragDownHelper.DragDownCallback: boolean isDragDownEnabledForView(com.android.systemui.statusbar.notification.row.ExpandableView)>
<com.android.systemui.egg.MLand: void onAttachedToWindow()>
<com.android.systemui.statusbar.policy.NetworkController: com.android.systemui.statusbar.policy.NetworkController.AccessPointController getAccessPointController()>
<android.os.IStatsCompanionService: void statsdReady()>
<android.net.wifi.aware.SubscribeDiscoverySession: void updateSubscribe(android.net.wifi.aware.SubscribeConfig)>
<com.android.systemui.qs.external.PackageManagerAdapter: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>
<com.android.systemui.qs.tileimpl.QSTileView: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.testing.shadows.ShadowEventLog.Entry: java.lang.String toString()>
<com.android.systemui.settings.ToggleSeekBar: void setAccessibilityLabel(java.lang.String)>
<com.android.server.usb.descriptors.ByteStream: byte peekByte()>
<com.android.systemui.util.concurrency.DelayableExecutor: java.lang.Runnable executeDelayed(java.lang.Runnable,long)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onNotificationStopDismissing()>
<com.android.systemui.statusbar.notification.collection.inflation.NotifInflater: void inflateViews(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.collection.inflation.NotifInflater.InflationCallback)>
<com.android.permission.persistence.RuntimePermissionsState.PermissionState: int hashCode()>
<com.android.systemui.ImageWallpaper: android.service.wallpaper.WallpaperService.Engine onCreateEngine()>
<android.app.backup.ForwardingBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>
<com.android.systemui.statusbar.phone.StatusBar: void postAnimateOpenPanels()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void disable(int,int,int,boolean)>
<com.android.keyguard.KeyguardSecurityViewFlipper: java.lang.CharSequence getTitle()>
<com.android.server.NativeDaemonConnectorException: int getCode()>
<android.net.wifi.p2p.WifiP2pManager: void requestGroupInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.GroupInfoListener)>
<com.android.keyguard.EmergencyButton: void onAttachedToWindow()>
<com.android.settingslib.media.MediaManager: void dispatchDeviceListRemoved(java.util.List)>
<com.android.systemui.statusbar.phone.NavigationBarEdgePanel: void onLayout(boolean,int,int,int,int)>
<com.android.settingslib.CustomDialogPreference: void onClick(android.content.DialogInterface,int)>
<com.android.settingslib.wifi.WifiSavedConfigUtils: java.util.List getAllConfigs(android.content.Context,android.net.wifi.WifiManager)>
<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>
<com.android.server.systemcaptions.SystemCaptionsManagerService: void onServiceRemoved(com.android.server.systemcaptions.SystemCaptionsManagerPerUserService,int)>
<com.android.systemui.stackdivider.DividerView: void stopDragging(int,com.android.internal.policy.DividerSnapAlgorithm.SnapTarget,long,long,long,android.view.animation.Interpolator)>
<com.android.systemui.car.sideloaded.SideLoadedAppController: void start()>
<android.multiuser.UserLifecycleTests: void managedProfileCreateUnlockInstallAndLaunchApp()>
<com.android.server.accessibility.MagnificationController.ControllerContext: float getMagnificationScale(int)>
<android.os.UserManagerInternal: int getProfileParentId(int)>
<android.net.wifi.rtt.ResponderLocation: boolean isValid()>
<com.android.systemui.assist.ui.InvocationLightsView: void hide()>
<com.android.server.pm.ApexManager.ApexManagerImpl: boolean destroyDeSnapshots(int)>
<com.android.systemui.classifier.FalsingManagerFake: void dump(java.io.PrintWriter)>
<com.android.server.accessibility.AccessibilityManagerService: void associateEmbeddedHierarchy(android.os.IBinder,android.os.IBinder)>
<android.net.wifi.WifiManager: android.net.wifi.WifiManager.MulticastLock createMulticastLock(java.lang.String)>
<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: void setSystemClock(long)>
<com.android.systemui.shared.system.WindowManagerWrapper: void overridePendingAppTransitionRemote(com.android.systemui.shared.system.RemoteAnimationAdapterCompat,int)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: com.android.systemui.statusbar.policy.KeyButtonDrawable getImageDrawable()>
<com.android.server.accounts.AccountManagerService: android.accounts.AccountAndUser[] getRunningAccounts()>
<com.android.server.rollback.WatchdogRollbackLogger: void logEvent(android.content.pm.VersionedPackage,int,int,java.lang.String)>
<com.android.systemui.car.CarDeviceProvisionedController: boolean isCurrentUserSetupInProgress()>
<com.android.systemui.car.navigationbar.CarNavigationButton: void setUpIntents(android.content.res.TypedArray)>
<com.android.systemui.qs.QSTileHost: void onPluginDisconnected(com.android.systemui.plugins.qs.QSFactory)>
<com.android.systemui.statusbar.policy.LocationController: boolean isLocationEnabled()>
<com.android.server.biometrics.face.FaceService: java.lang.String getLockoutBroadcastPermission()>
<com.android.systemui.statusbar.SysuiStatusBarStateController: float getInterpolatedDozeAmount()>
<com.android.settingslib.development.DeveloperOptionsPreferenceController: void onDeveloperOptionsDisabled()>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: boolean setScanMode(int,int)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: float getAlpha()>
<com.android.server.pm.PackageManagerServiceUtils: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getDefaultCrossProfilePackages()>
<com.android.server.IpSecService.RefcountedResource: void releaseReference()>
<com.android.settingslib.CustomEditTextPreference: boolean isDialogOpen()>
<com.android.systemui.statusbar.policy.InflatedSmartReplies: com.android.systemui.statusbar.policy.SmartReplyView getSmartReplyView()>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getRealm()>
<com.android.uiautomator.core.UiAutomatorBridge: boolean setRotation(int)>
<com.android.systemui.statusbar.CommandQueue: void addCallback(com.android.systemui.statusbar.CommandQueue.Callbacks)>
<com.android.server.biometrics.BiometricServiceBase: java.util.List getEnrolledTemplates(int)>
<com.android.server.media.MediaRouterService: android.media.MediaRouterClientState getState(android.media.IMediaRouterClient)>
<com.android.systemui.volume.VolumeDialogControllerImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.bubbles.BubbleManageEducationView: int getManageViewHeight()>
<com.android.server.protolog.common.InvalidFormatStringException: void <init>(java.lang.String)>
<com.android.printspooler.ui.PrintActivity: void onStop()>
<com.android.settingslib.media.MediaDevice: boolean equals(java.lang.Object)>
<android.media.Controller2Link: void notifyDisconnected(int)>
<com.android.server.autofill.ui.FillUi.Callback: void requestShowFillUi(int,int,android.view.autofill.IAutofillWindowPresenter)>
<com.android.server.pm.PackageManagerService: int getPrivateFlagsForUid(int)>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: void onDensityOrFontScaleChanged()>
<com.android.server.NetworkManagementService: void setGlobalAlert(long)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setHeadsUpInflatedSmartReplies(com.android.systemui.statusbar.policy.InflatedSmartReplies)>
<com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.PermissionGroupInfo generatePermissionGroupInfo(android.content.pm.parsing.component.ParsedPermissionGroup,int)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void canUserAttemptToConfigureInteractAcrossProfiles_packageNotWhitelisted_returnsTrue()>
<com.android.commands.incident.ExecutionException: void <init>(java.lang.String)>
<com.android.server.timedetector.TimeDetectorStrategy: void dump(java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.phone.NotificationGroupManager: void updateSuppression(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.photos.BitmapRegionTileSource: int getImageHeight()>
<android.content.pm.PackageManagerInternal: int getPackageUid(java.lang.String,int,int)>
<com.android.server.tv.TvRemoteService: void onBootPhase(int)>
<com.android.server.NetworkManagementService: void untetherInterface(java.lang.String)>
<com.android.systemui.qs.PseudoGridView: void onLayout(boolean,int,int,int,int)>
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(com.android.server.pm.PackageSetting)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isSimPinSecure()>
<com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl.Callback: void setDeviceTimeZone(java.lang.String)>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getFieldValue(java.lang.String)>
<com.android.systemui.statusbar.KeyguardIndicationController: java.lang.String computePowerIndication()>
<com.android.server.dreams.DreamManagerService: void onStart()>
<com.android.systemui.globalactions.GlobalActionsColumnLayout: void onLayout(boolean,int,int,int,int)>
<android.net.util.NetdService.NetdCommand: void run(android.net.INetd)>
<com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>
<com.android.server.tv.TvInputHal.Callback: void onStreamConfigurationChanged(int,android.media.tv.TvStreamConfig[])>
<com.android.systemui.media.dialog.MediaOutputMetricLogger: void logOutputFailure(java.util.List,int)>
<com.android.systemui.bubbles.BubbleOverflowAdapter: com.android.systemui.bubbles.BubbleOverflowAdapter.ViewHolder onCreateViewHolder(android.view.ViewGroup,int)>
<com.android.systemui.statusbar.AlertingNotificationManager: void onAlertEntryRemoved(com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry)>
<android.media.MediaSession2.SessionCallback: android.media.Session2Command.Result onSessionCommand(android.media.MediaSession2,android.media.MediaSession2.ControllerInfo,android.media.Session2Command,android.os.Bundle)>
<android.text.CanvasDrawTextTest: void drawText_LongText_SmallWindow()>
<com.android.server.soundtrigger_middleware.SoundTriggerHw2Enforcer: void stopRecognition(int)>
<com.android.settingslib.TronUtils: void logWifiSettingsSpeed(android.content.Context,int)>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean isGroupExpansionChanging()>
<android.net.wifi.SoftApConfiguration.Builder: android.net.wifi.SoftApConfiguration build()>
<com.android.systemui.media.MediaControllerFactory: void <init>(android.content.Context)>
<com.android.server.pm.PackageManagerService: java.lang.String getServicesSystemSharedLibraryPackageName()>
<com.android.server.appprediction.RemoteAppPredictionService: void scheduleOnResolvedService(com.android.internal.infra.AbstractRemoteService.AsyncRequest)>
<com.android.systemui.pip.tv.PipManager: void addListener(com.android.systemui.pip.tv.PipManager.Listener)>
<com.android.commands.sm.Sm: void runHasAdoptable()>
<com.android.systemui.statusbar.KeyguardAffordanceView: void setLaunchingAffordance(boolean)>
<com.android.keyguard.KeyguardPasswordView: void resetState()>
<com.android.powermodel.PowerReport: java.util.List getAllApps()>
<com.android.server.midi.MidiService: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerApplicationRestrictionsManagingPackage(java.lang.String)>
<android.net.wifi.WifiEnterpriseConfig: void setPlmn(java.lang.String)>
<android.net.wifi.p2p.WifiP2pManager: void startListening(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.systemui.bubbles.BubbleData: void dismissAll(int)>
<com.android.systemui.statusbar.phone.HeadsUpTouchHelper: void notifyFling(boolean)>
<com.android.systemui.assist.AssistHandleBehaviorController.BehaviorController: void onModeDeactivated()>
<com.android.server.pm.parsing.library.PackageBackwardCompatibility: void updatePackage(com.android.server.pm.parsing.pkg.ParsedPackage,boolean)>
<com.android.permission.persistence.RuntimePermissionsPersistenceImpl: void deleteForUser(android.os.UserHandle)>
<javax.microedition.khronos.opengles.GL10: void glDisableClientState(int)>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void onPrivacyItemsChanged(java.util.List)>
<android.net.ConnectivityModuleConnector: void registerHealthListener(android.net.ConnectivityModuleConnector.ConnectivityModuleHealthListener)>
<android.net.TetheringManager: java.lang.String[] getTetherableUsbRegexs()>
<com.android.server.pm.PackageManagerService: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>
<com.android.settingslib.schedulesprovider.ScheduleInfo: java.lang.String toString()>
<com.android.uiautomator.core.UiDevice: java.lang.String getCurrentPackageName()>
<com.android.powermodel.AttributionKey: int hashCode()>
<com.android.systemui.statusbar.NotificationRemoteInputManager.RemoteInputHistoryExtender: boolean shouldExtendLifetime(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.google.android.startop.iorap.TaskResult: int describeContents()>
<com.android.server.biometrics.fingerprint.FingerprintAuthenticator: void setActiveUser(int)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean isShowing()>
<com.android.server.IpSecService: android.net.IpSecSpiResponse allocateSecurityParameterIndex(java.lang.String,int,android.os.IBinder)>
<com.android.server.pm.UserManagerService: void setApplicationRestrictions(java.lang.String,android.os.Bundle,int)>
<com.android.systemui.tuner.TunerServiceImpl: java.lang.String getValue(java.lang.String,java.lang.String)>
<com.android.server.accounts.AccountManagerService: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>
<com.android.systemui.statusbar.phone.KeyguardBouncer: void show(boolean,boolean)>
<com.android.systemui.analytics.DataCollector: void onTouchEvent(android.view.MotionEvent,int,int)>
<com.android.photos.BitmapRegionTileSource.FilePathBitmapSource: void <init>(java.lang.String,int)>
<javax.microedition.khronos.opengles.GL11: void glPointParameterxv(int,int[],int)>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.policy.HotspotController provideHotspotController(com.android.systemui.statusbar.policy.HotspotControllerImpl)>
<com.android.fakeoemfeatures.FakeView: void onDetachedFromWindow()>
<javax.microedition.khronos.opengles.GL10: void glLightModelxv(int,int[],int)>
<com.android.systemui.qs.tileimpl.ButtonRelativeLayout: java.lang.CharSequence getAccessibilityClassName()>
<android.content.pm.PackageManagerInternal: boolean isPackageEphemeral(int,java.lang.String)>
<android.os.UserManagerInternal: boolean isUserUnlockingOrUnlocked(int)>
<com.android.uiautomator.core.UiObject: boolean click()>
<android.net.TetheringManager.TetheringInterfaceRegexps: void <init>(java.lang.String[],java.lang.String[],java.lang.String[])>
<com.android.server.policy.WindowManagerPolicy: void finishedWakingUp(int)>
<com.android.systemui.plugins.statusbar.StatusBarStateController.StateListener: void onStatePreChange(int,int)>
<com.android.server.pm.permission.BasePermission: boolean isRuntimeOnly()>
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getPassphrase()>
<com.android.systemui.stackdivider.DividerView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.gallery3d.exif.ExifTag: void forceSetComponentCount(int)>
<android.net.wifi.WifiManager: boolean isStaApConcurrencySupported()>
<com.android.keyguard.KeyguardStatusView: void onLocaleListChanged()>
<com.android.systemui.statusbar.phone.PanelView: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.systemui.qs.touch.SwipeDetector.Listener: boolean onDrag(float,float)>
<com.android.settingslib.license.LicenseHtmlLoader: void <init>(android.content.Context)>
<com.android.server.SystemServiceManager: void startService(com.android.server.SystemService)>
<com.android.server.contentcapture.ContentCaptureManagerService: boolean isDisabledLocked(int)>
<com.android.systemui.statusbar.SysuiStatusBarStateController: void setLeaveOpenOnKeyguardHide(boolean)>
<com.android.systemui.statusbar.notification.icon.IconPack: boolean getAreIconsAvailable()>
<com.android.server.policy.WindowManagerPolicy: long interceptKeyBeforeDispatching(android.os.IBinder,android.view.KeyEvent,int)>
<com.android.server.timedetector.TimeDetectorService: void suggestTelephonyTime(android.app.timedetector.TelephonyTimeSuggestion)>
<com.android.printspooler.renderer.IPdfEditor: void closeDocument()>
<com.android.systemui.doze.DozeSensors.Callback: void onSensorPulse(int,float,float,float[])>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: java.util.List getRemovedProfiles()>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindConnectedDeviceVoiceRecognitionNotifier(com.android.systemui.car.voicerecognition.ConnectedDeviceVoiceRecognitionNotifier)>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: android.security.keystore.recovery.KeyChainSnapshot getKeyChainSnapshot()>
<com.android.systemui.statusbar.CommandQueue: void toggleRecentApps()>
<com.android.systemui.plugins.DarkIconDispatcher: float getDarkIntensity(android.graphics.Rect,android.view.View,float)>
<com.android.gallery3d.exif.ExifTag: int[] getValueAsInts()>
<com.android.server.slice.SliceProviderPermissions: void writeTo(org.xmlpull.v1.XmlSerializer)>
<com.android.systemui.statusbar.phone.DozeServiceHost: void startDozing()>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void setDozing(boolean,boolean,long)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isSupportsRtl()>
<com.android.systemui.car.volume.CarVolumeDialogImpl: void show(int)>
<android.content.pm.PackageManagerInternal: java.lang.String getDisabledSystemPackageName(java.lang.String)>
<com.android.systemui.statusbar.notification.collection.NotifPipeline: void addFinalizeFilter(com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.NotifFilter)>
<android.net.wifi.hotspot2.PasspointConfiguration: long getUsageLimitTimeLimitInMinutes()>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: boolean isWithinSnapMenuThreshold()>
<javax.obex.ClientSession: javax.obex.Operation put(javax.obex.HeaderSet)>
<com.android.systemui.power.PowerNotificationWarnings: void showInvalidChargerWarning()>
<com.android.server.autofill.RemoteInlineSuggestionRenderService: android.service.autofill.IInlineSuggestionRenderService getServiceInterface(android.os.IBinder)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: android.view.View getCenteredNotificationAreaView()>
<com.android.systemui.doze.DozeFalsingManagerAdapter: void transitionTo(com.android.systemui.doze.DozeMachine.State,com.android.systemui.doze.DozeMachine.State)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName)>
<com.android.systemui.car.window.OverlayViewGlobalStateController: void hideView(com.android.systemui.car.window.OverlayViewController,java.lang.Runnable)>
<com.android.systemui.bubbles.animation.AnimatableScaleMatrix: void setScaleX(float)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean topAmountNeedsClipping()>
<com.android.settingslib.widget.AppEntityInfo.Builder: com.android.settingslib.widget.AppEntityInfo.Builder setTitle(java.lang.CharSequence)>
<com.android.printservice.recommendation.plugin.google.CloudPrintPlugin: java.lang.CharSequence getPackageName()>
<com.android.settingslib.widget.LayoutPreference: boolean isAllowDividerBelow()>
<com.android.systemui.statusbar.phone.LightBarTransitionsController.DarkIntensityApplier: int getTintAnimationDuration()>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void addCollectionListener(com.android.systemui.statusbar.notification.collection.notifcollection.NotifCollectionListener)>
<android.view.autofill.AbstractAutofillPerfTestCase: void enableService()>
<android.net.wifi.p2p.WifiP2pDevice: boolean wpsDisplaySupported()>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindSliceBroadcastRelayHandler(com.android.systemui.SliceBroadcastRelayHandler)>
<com.android.future.usb.UsbAccessory: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.policy.Clock: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.stackdivider.Divider: com.android.systemui.stackdivider.DividerView getView()>
<com.android.server.devicepolicy.DevicePolicyManagerService.Lifecycle: void onStart()>
<com.android.systemui.assist.AssistOrbView: void onLayout(boolean,int,int,int,int)>
<android.net.wifi.p2p.WifiP2pDeviceList: void updateGroupCapability(java.lang.String,int)>
<com.android.server.display.BrightnessIdleJob: boolean onStartJob(android.app.job.JobParameters)>
<com.android.server.appbinding.AppBindingService.Lifecycle: void onStart()>
<android.net.wifi.hotspot2.pps.Credential: void setClientPrivateKey(java.security.PrivateKey)>
<com.android.systemui.plugins.PluginInitializerImpl: com.android.systemui.shared.plugins.PluginEnabler getPluginEnabler(android.content.Context)>
<com.android.preload.check.PreloadCheck: void testAsyncTask()>
<com.android.systemui.qs.QuickStatusBarHeader: void onFinishInflate()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: boolean disallowSingleClick(float,float)>
<com.android.gallery3d.glrenderer.GLPaint: void setColor(int)>
<com.android.settingslib.graph.BluetoothDeviceLayerDrawable: void setConstantState(android.content.Context,int,int,float)>
<com.android.server.pm.parsing.pkg.PackageImpl: boolean isSystem()>
<com.android.server.usb.UsbHostManager: android.os.ParcelFileDescriptor openDevice(java.lang.String,com.android.server.usb.UsbUserPermissionManager,java.lang.String,int,int)>
<com.android.server.pm.parsing.PackageInfoUtils: int appInfoPrivateFlags(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>
<com.android.systemui.statusbar.policy.BatteryControllerImpl: boolean isPowerSave()>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setOnHeightChangedListener(com.android.systemui.statusbar.notification.row.ExpandableView.OnHeightChangedListener)>
<com.android.server.autofill.Helper: android.metrics.LogMaker newLogMaker(int,java.lang.String,java.lang.String,int,boolean)>
<com.android.server.webkit.SystemImpl: void ensureZygoteStarted()>
<com.android.server.display.DisplayModeDirector.BrightnessObserver: void onChange(boolean,android.net.Uri,int)>
<com.android.systemui.statusbar.policy.HeadsUpManager: boolean shouldHeadsUpBecomePinned(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.bubbles.BubbleTaskView: boolean canReceivePointerEvents()>
<android.net.wifi.WifiInfo: void setEphemeral(boolean)>
<com.android.server.devicepolicy.DeviceStateCacheImpl: void dump(com.android.internal.util.IndentingPrintWriter)>
<com.android.server.infra.FrameworkResourcesServiceNameResolver: boolean setDefaultServiceEnabled(int,boolean)>
<com.android.systemui.MultiListLayout: void onUpdateList()>
<com.android.systemui.car.navigationbar.ButtonSelectionStateController: void removeAll()>
<com.android.systemui.statusbar.phone.ExpandableIndicator: void setExpanded(boolean)>
<com.android.server.biometrics.BiometricServiceBase: void onStart()>
<com.android.systemui.appops.AppOpsControllerImpl: void setListening(boolean)>
<com.android.server.usb.descriptors.UsbACMixerUnit: int calcControlArraySize(int,int)>
<com.android.server.uri.UriPermissionOwner: void removeUriPermissions()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.NotifFilter getExcludingFilter()>
<com.android.systemui.shared.system.RotationWatcher: void enable()>
<com.android.server.pm.PackageInstallerService: void <init>(android.content.Context,com.android.server.pm.PackageManagerService,java.util.function.Supplier)>
<android.media.Session2CommandGroup: void writeToParcel(android.os.Parcel,int)>
<com.android.gallery3d.exif.ExifInterface: com.android.gallery3d.exif.ExifTag buildUninitializedTag(int)>
<com.android.aapt.namespace.libtwo.TextView: void <init>(android.content.Context)>
<com.android.settingslib.CustomDialogPreference: void <init>(android.content.Context)>
<com.android.systemui.pip.PipBoundsHandler: float getAspectRatio()>
<com.android.systemui.statusbar.notification.AnimatableProperty: int getAnimationStartTag()>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void revokeDefaultPermissionsFromDisabledTelephonyDataServices(java.lang.String[],int)>
<com.android.settingslib.animation.AppearAnimationCreator: void createAnimation(java.lang.Object,long,long,float,boolean,android.view.animation.Interpolator,java.lang.Runnable)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isTrustUsuallyManaged(int)>
<android.net.wifi.aware.TlvBufferUtils.TlvConstructor: android.net.wifi.aware.TlvBufferUtils.TlvConstructor putZeroLengthElement(int)>
<com.android.server.testing.shadows.ShadowEventLog.Entry: boolean equals(java.lang.Object)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setRealPackage(java.lang.String)>
<com.android.settingslib.core.instrumentation.LogWriter: void action(android.content.Context,int,boolean)>
<com.android.systemui.assist.ui.DisplayUtils: int getCornerRadiusTop(android.content.Context)>
<com.android.settingslib.net.ChartDataLoader: void onReset()>
<com.android.networkstack.tethering.PrivateAddressCoordinator: int getRandomSubAddr()>
<com.android.printspooler.model.PageContentRepository.RenderSpec: void <init>(int,int,android.print.PrintAttributes.MediaSize,android.print.PrintAttributes.Margins)>
<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager getInstance(android.content.Context,com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb)>
<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasSpeaker()>
<com.android.server.locksettings.LockSettingsService: void setServerParams(byte[])>
<com.android.systemui.statusbar.notification.InstantAppNotifier: void <init>(android.content.Context,com.android.systemui.statusbar.CommandQueue,java.util.concurrent.Executor,com.android.systemui.stackdivider.Divider)>
<com.android.gallery3d.exif.ExifInterface: int defineTag(int,short)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void setPulsing(boolean)>
<com.android.server.biometrics.iris.IrisAuthenticator: void setActiveUser(int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setQsScrimEnabled(boolean)>
<com.android.keyguard.PasswordTextView: void append(char)>
<android.net.wifi.hotspot2.pps.Credential: java.lang.String toString()>
<com.android.systemui.statusbar.phone.NotificationIconContainer.IconState: boolean hasCustomTransformHeight()>
<com.android.photos.BitmapRegionTileSource.BitmapSource: android.graphics.Bitmap getPreviewBitmap()>
<com.android.server.appop.AppOpsService: int checkOperationRaw(int,int,java.lang.String)>
<com.android.systemui.ForegroundServicesDialog: void onPause()>
<com.android.gallery3d.glrenderer.Texture: int getWidth()>
<com.android.systemui.shared.system.TaskDescriptionCompat: void <init>(android.app.ActivityManager.TaskDescription)>
<android.media.MediaSession2: boolean isPlaybackActive()>
<com.android.systemui.statusbar.phone.ShadeControllerImpl: boolean collapsePanel()>
<com.android.systemui.statusbar.phone.DemoStatusIcons: void remove()>
<com.android.systemui.doze.DozeLog: void <init>(com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.dump.DumpManager,com.android.systemui.doz.DozeLogger)>
<com.android.statementservice.retriever.Statement: com.android.statementservice.retriever.AbstractAsset getSource()>
<com.android.server.textclassifier.TextClassificationManagerService: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)>
<com.android.systemui.shared.system.ActivityManagerWrapper: int getCurrentUserId()>
<com.android.systemui.ScreenDecorations.DisplayCutoutView: void <init>(android.content.Context,int,com.android.systemui.ScreenDecorations)>
<com.android.systemui.classifier.PointerCountEvaluator: float evaluate(int)>
<com.android.systemui.shared.system.ActivityOptionsCompat: android.app.ActivityOptions makeCustomAnimation(android.content.Context,int,int,java.lang.Runnable,android.os.Handler)>
<com.android.commands.sm.Sm: void runForget()>
<com.android.server.usb.descriptors.UsbInterfaceAssoc: byte getInterfaceCount()>
<com.android.server.lights.LogicalLight: void setBrightness(float,int)>
<com.android.systemui.plugins.FalsingManager: void setShowingAod(boolean)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setRanking(android.service.notification.NotificationListenerService.Ranking)>
<com.android.systemui.qs.QSTileHost: java.util.List getDefaultSpecs(android.content.Context)>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getServiceType()>
<com.android.systemui.qs.tiles.FlashlightTile: java.lang.CharSequence getTileLabel()>
<com.android.uiautomator.core.UiDevice: void removeWatcher(java.lang.String)>
<com.android.systemui.qs.QSFragment: void notifyCustomizeChanged()>
<com.android.systemui.statusbar.policy.WifiSignalController: void fetchInitialState()>
<com.android.server.inputmethod.InputMethodManagerService: java.util.List getInputMethodList(int)>
<com.example.android.networkusage.NetworkActivity: void onCreate(android.os.Bundle)>
<com.android.keyguard.CarrierTextController.CarrierTextCallbackInfo: void <init>(java.lang.CharSequence,java.lang.CharSequence[],boolean,int[],boolean)>
<android.net.wifi.IWifiManager: boolean isScanThrottleEnabled()>
<com.android.systemui.statusbar.phone.StatusBarIconHolder: void setWifiState(com.android.systemui.statusbar.phone.StatusBarSignalPolicy.WifiIconState)>
<com.android.server.accessibility.FullScreenMagnificationGestureHandler.State: java.lang.String name()>
<com.android.server.pm.UserManagerService: android.os.Bundle getUserRestrictions(int)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: android.view.NotificationHeaderView getLowPriorityHeaderView()>
<com.android.systemui.qs.external.TileServiceManager: android.os.IBinder getToken()>
<android.net.wifi.p2p.WifiP2pManager: void deletePersistentGroup(android.net.wifi.p2p.WifiP2pManager.Channel,int,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void updateIconAreaViews()>
<com.android.server.hdmi.SelectRequestBuffer: void process()>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void onViewCreated(android.view.View,android.os.Bundle)>
<com.android.systemui.statusbar.notification.row.NotificationInfo: boolean handleCloseControls(boolean,boolean)>
<com.android.server.pm.ProcessLoggingHandler: void handleMessage(android.os.Message)>
<com.android.printspooler.ui.FusedPrintersProvider: void onStartLoading()>
<com.android.systemui.statusbar.notification.row.NotificationGuts.OnHeightChangedListener: void onHeightChanged(com.android.systemui.statusbar.notification.row.NotificationGuts)>
<com.android.server.biometrics.ClientMonitor: android.os.IBinder getToken()>
<com.android.server.adb.AdbService: boolean isAdbWifiQrSupported()>
<com.android.media.tv.remoteprovider.TvRemoteProvider: void closeInputBridge(android.os.IBinder)>
<com.android.server.autofill.RemoteAugmentedAutofillService.RemoteAugmentedAutofillServiceCallbacks: void logAugmentedAutofillShown(int,android.os.Bundle)>
<com.android.server.input.InputManagerService: void setSystemUiVisibility(int)>
<android.net.NetworkStackClient: void makeDhcpServer(java.lang.String,android.net.dhcp.DhcpServingParamsParcel,android.net.dhcp.IDhcpServerCallbacks)>
<com.android.systemui.statusbar.phone.BarTransitions: void applyModeBackground(int,int,boolean)>
<com.android.systemui.ScreenDecorations.DisplayCutoutView: void onAttachedToWindow()>
<android.net.wifi.WifiConfiguration: android.net.IpConfiguration.IpAssignment getIpAssignment()>
<android.os.UserManagerInternal: void removeUserState(int)>
<android.media.Session2CommandGroup.Builder: void <init>(android.media.Session2CommandGroup)>
<com.android.keyguard.KeyguardHostView: void dispatchDraw(android.graphics.Canvas)>
<com.android.nfc_extras.NfcExecutionEnvironment: byte[] transceive(byte[])>
<com.android.gallery3d.exif.ExifInterface: com.android.gallery3d.exif.ExifTag buildTag(int,java.lang.Object)>
<com.android.server.locksettings.LockSettingsService: long getLong(java.lang.String,long,int)>
<com.android.server.usb.descriptors.UsbDescriptorParser: com.android.server.usb.descriptors.UsbInterfaceDescriptor getCurInterface()>
<javax.microedition.khronos.opengles.GL10: void glAlphaFunc(int,float)>
<android.multiuser.UserLifecycleTests: void switchUser_running()>
<com.android.server.locksettings.LockSettingsService: void setSnapshotCreatedPendingIntent(android.app.PendingIntent)>
<javax.microedition.khronos.opengles.GL10: void glRotatex(int,int,int,int)>
<com.android.systemui.BatteryMeterView: void setForceShowPercent(boolean)>
<com.android.server.display.DisplayModeDirector.Injector: void registerBrightnessObserver(android.content.ContentResolver,android.database.ContentObserver)>
<com.android.systemui.plugins.FalsingManager: void onNotificationStartDismissing()>
<com.android.systemui.util.leak.TrackedGarbage: void track(java.lang.Object)>
<com.android.server.people.data.PackageData: com.android.server.people.data.EventHistory getClassLevelEventHistory(java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean performAccessibilityActionInternal(int,android.os.Bundle)>
<com.android.printspooler.util.ApprovedPrintServices: java.util.Set getApprovedServices()>
<com.android.systemui.bubbles.BubbleOverflowAdapter: int getItemCount()>
<com.android.server.broadcastradio.hal1.BroadcastRadioService: void finalize()>
<com.android.systemui.ForegroundServicesDialog: void onCreate(android.os.Bundle)>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: void addCallback(android.os.Handler.Callback)>
<com.android.settingslib.bluetooth.HeadsetProfile: void finalize()>
<com.android.settingslib.wifi.AccessPointPreference: void setShowDivider(boolean)>
<com.android.systemui.statusbar.phone.NavigationBarView: com.android.systemui.statusbar.phone.FloatingRotationButton getFloatingRotationButton()>
<com.android.networkstack.tethering.TetheringDependencies: android.bluetooth.BluetoothAdapter getBluetoothAdapter()>
<com.android.server.GestureLauncherService: boolean isCameraDoubleTapPowerEnabled(android.content.res.Resources)>
<com.android.server.MemoryPressureUtil: java.lang.String currentPsiState()>
<com.android.server.pm.PackageSetting: boolean setMimeGroup(java.lang.String,java.util.List)>
<com.android.server.IpSecService: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>
<com.android.systemui.statusbar.StatusBarIconView: boolean set(com.android.internal.statusbar.StatusBarIcon)>
<com.android.packageinstaller.InstallSuccess: void onCreate(android.os.Bundle)>
<com.android.systemui.plugins.FalsingManager: boolean isClassifierEnabled()>
<com.android.server.TelephonyRegistry: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glDrawArrays(int,int,int)>
<com.android.systemui.biometrics.AuthContainerView: android.view.WindowManager.LayoutParams getLayoutParams(android.os.IBinder)>
<com.android.powermodel.AppPower: com.android.powermodel.ComponentPower getComponentPower(com.android.powermodel.Component)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: java.lang.String getCarConnectionSummary()>
<com.android.photos.views.BlockingGLTextureView: void setRenderer(android.opengl.GLSurfaceView.Renderer)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setSecureStateProvider(java.util.function.BooleanSupplier)>
<com.android.systemui.car.notification.NotificationVisibilityLogger: void <init>(java.util.concurrent.Executor,com.android.internal.statusbar.IStatusBarService,com.android.car.notification.NotificationDataManager)>
<android.net.wifi.IOnWifiActivityEnergyInfoListener: void onWifiActivityEnergyInfo(android.os.connectivity.WifiActivityEnergyInfo)>
<com.android.systemui.pip.PipTaskOrganizer: void <init>(android.content.Context,com.android.systemui.pip.PipBoundsHandler,com.android.systemui.pip.PipSurfaceTransactionHelper,com.android.systemui.stackdivider.Divider,com.android.systemui.wm.DisplayController,com.android.systemui.pip.PipAnimationController,com.android.systemui.pip.PipUiEventLogger)>
<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.LockscreenCredential getDecryptedPasswordForTiedProfile(int)>
<com.android.server.NetworkScorerAppManager: void <init>(android.content.Context,com.android.server.NetworkScorerAppManager.SettingsFacade)>
<com.android.systemui.qs.PagedTileLayout.TilePage: int maxTiles()>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setMinClipTopAmount(int)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: float getInterpolatedDozeAmount()>
<android.net.wifi.WifiManager: boolean isOffChannelTdlsSupported()>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void setWhitelistedRestrictedPermissions(com.android.server.pm.parsing.pkg.AndroidPackage,int[],java.util.List,int,int)>
<com.android.server.usb.descriptors.Usb20ACInputTerminal: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.systemui.qs.tileimpl.QSTileImpl: int getMetricsCategory()>
<com.android.server.pm.CrossProfileAppsService: void <init>(android.content.Context)>
<com.android.server.pm.permission.BasePermission: boolean isPre23()>
<com.android.gallery3d.exif.ExifInterface: int getTagDefinitionForTag(short,short,int,int)>
<com.android.egg.neko.Cat: void logAdd(android.content.Context)>
<com.android.settingslib.wifi.AccessPointPreference: void notifyChanged()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: int getHeight()>
<com.android.systemui.statusbar.phone.NavigationBarView: com.android.systemui.statusbar.policy.KeyButtonDrawable getBackDrawable()>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator.ExpandAnimationParameters: int getBottom()>
<com.android.keyguard.NumPadKey: void doHapticKeyClick()>
<javax.obex.ClientOperation: long getLength()>
<com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.ServiceInfo generateServiceInfo(com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.parsing.component.ParsedService,int,android.content.pm.PackageUserState,int,com.android.server.pm.PackageSetting)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onUpdateRowStates()>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void onNavigationModeChanged(int)>
<com.android.keyguard.KeyguardStatusView: boolean hasCustomClock()>
<com.android.server.accessibility.gestures.GestureUtils: double distance(android.view.MotionEvent,android.view.MotionEvent)>
<com.android.uiautomator.core.Configurator: com.android.uiautomator.core.Configurator setWaitForIdleTimeout(long)>
<com.android.systemui.statusbar.notification.CustomInterpolatorTransformation: boolean hasCustomTransformation()>
<com.android.systemui.statusbar.phone.ManagedProfileController: boolean hasActiveProfile()>
<javax.microedition.khronos.opengles.GL10: void glScissor(int,int,int,int)>
<com.android.systemui.statusbar.notification.collection.listbuilder.PipelineState: void requireIsBefore(int)>
<com.android.systemui.statusbar.notification.row.NotificationGuts.GutsContent: boolean needsFalsingProtection()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void onBelowSpeedBumpChanged()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onViewAdded(android.view.View)>
<com.android.settingslib.net.NetworkCycleDataLoader: java.util.ArrayList getCycles()>
<com.android.systemui.statusbar.policy.NetworkController.EmergencyListener: void setEmergencyCallsOnly(boolean)>
<com.android.server.usb.descriptors.Usb10ACMixerUnit: byte getNameID()>
<com.android.systemui.qs.tiles.NightDisplayTile: java.lang.CharSequence getTileLabel()>
<android.net.wifi.WifiScanner.ScanSettings.HiddenNetwork: void <init>(java.lang.String)>
<com.android.server.IntentResolver: java.lang.Object filterToLabel(java.lang.Object)>
<com.android.server.biometrics.Constants: int actionBiometricEnroll()>
<com.android.systemui.car.hvac.AnimatedTemperatureView: void onDetachedFromWindow()>
<com.android.server.pm.StagingManager.Lifecycle: void onStart()>
<com.android.server.locksettings.LockSettingsStrongAuth.Injector: long getNextAlarmTimeMs(long)>
<com.android.systemui.pip.tv.PipControlsViewController: com.android.systemui.pip.tv.PipControlsView getView()>
<com.android.server.devicepolicy.DevicePolicyCacheImpl: void setPasswordQuality(int,int)>
<com.android.systemui.qs.QSDetailItems: void onAttachedToWindow()>
<com.android.systemui.statusbar.StatusBarIconView: void setNotification(android.service.notification.StatusBarNotification)>
<com.android.systemui.statusbar.policy.NextAlarmControllerImpl: void onReceive(android.content.Context,android.content.Intent)>
<com.android.keyguard.KeyguardHostView: void onStartingToHide()>
<com.android.systemui.tuner.CustomListPreference: boolean isAutoClosePreference()>
<com.android.systemui.util.sensors.ThresholdSensor: boolean isLoaded()>
<android.net.wifi.WifiConfiguration: void setProxySettings(android.net.IpConfiguration.ProxySettings)>
<com.android.systemui.screenrecord.ScreenMediaRecorder.SavedRecording: void <init>(android.net.Uri,java.io.File,android.util.Size)>
<com.android.gallery3d.glrenderer.GLId: int generateTexture()>
<com.android.server.usb.UsbService: void setPortRoles(java.lang.String,int,int)>
<com.android.systemui.statusbar.phone.LightBarTransitionsController: void <init>(android.content.Context,com.android.systemui.statusbar.phone.LightBarTransitionsController.DarkIntensityApplier,com.android.systemui.statusbar.CommandQueue)>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: void lockDeviceNow()>
<com.android.server.pm.ApexManager: boolean isFactory(android.content.pm.PackageInfo)>
<com.android.systemui.statusbar.policy.DeviceProvisionedController.DeviceProvisionedListener: void onDeviceProvisionedChanged()>
<com.android.systemui.statusbar.notification.row.NotificationGutsManager: com.android.systemui.statusbar.notification.row.NotificationGuts getExposedGuts()>
<com.android.systemui.tuner.NavBarTuner: void onCreate(android.os.Bundle)>
<com.android.server.integrity.parser.RandomAccessObject: int length()>
<com.android.server.display.utils.RollingBuffer: void clear()>
<com.android.server.policy.PhoneWindowManager: void startedWakingUp(int)>
<com.android.server.usb.UsbPortManager: void addSimulatedPort(java.lang.String,int,com.android.internal.util.IndentingPrintWriter)>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig build()>
<com.android.server.pm.BackgroundDexOptService: void addPackagesUpdatedListener(com.android.server.pm.BackgroundDexOptService.PackagesUpdatedListener)>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setWpa3Passphrase(java.lang.String)>
<com.android.server.statusbar.StatusBarManagerService: void onNotificationSmartSuggestionsAdded(java.lang.String,int,int,boolean,boolean)>
<com.android.systemui.statusbar.StatusIconDisplayable: java.lang.String getSlot()>
<com.android.server.usb.descriptors.UsbACAudioControlEndpoint: byte getAttribs()>
<com.android.systemui.shared.system.MetricsLoggerCompat: void visible(int)>
<com.android.systemui.statusbar.phone.DozeParameters: int getPulseVisibleDuration()>
<com.android.server.usb.descriptors.UsbDescriptor: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.systemui.statusbar.policy.AccessibilityManagerWrapper: void removeCallback(android.view.accessibility.AccessibilityManager.AccessibilityServicesStateChangeListener)>
<com.android.server.audio.MediaFocusControl: void unduckPlayers(com.android.server.audio.FocusRequester)>
<com.android.server.pm.permission.PermissionsState: int[] computeGids(int[])>
<android.net.wifi.IWifiManager: void forget(int,android.os.IBinder,android.net.wifi.IActionListener,int)>
<com.android.server.slice.SliceManagerService: void removePinnedSlice(android.net.Uri)>
<com.android.server.protolog.common.IProtoLogGroup: java.lang.String getTag()>
<com.android.systemui.qs.tiles.CellularTile: void handleSecondaryClick()>
<com.android.systemui.statusbar.phone.NotificationsQuickSettingsContainer: void onHasViewsAboveShelfChanged(boolean)>
<com.android.systemui.screenshot.ScreenshotNotificationsController: void showSavingScreenshotNotification()>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: void onDismiss()>
<com.android.preload.check.Util: boolean isInitialized(java.lang.Class)>
<com.android.server.media.MediaRouterService: void <init>(android.content.Context)>
<com.android.server.compat.PlatformCompat: void setOverrides(com.android.internal.compat.CompatibilityChangeConfig,java.lang.String)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean getUserHasTrust(int)>
<com.android.printspooler.ui.FusedPrintersProvider: void onStatusChanged(java.lang.String,int,android.os.Bundle)>
<com.android.systemui.volume.VolumeComponent: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setQsExpansionFraction(float)>
<com.android.server.midi.MidiService: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)>
<android.perftests.utils.SettingsStateManager: java.lang.String toString()>
<com.android.server.pm.PackageInstallerService: void registerCallback(android.content.pm.IPackageInstallerCallback,java.util.function.IntPredicate)>
<com.android.systemui.statusbar.notification.stack.NotificationRoundnessManager: void setExpanded(float,float)>
<android.net.wifi.WifiSsid: boolean equals(java.lang.Object)>
<com.android.settingslib.accessibility.AccessibilityUtils: boolean hasServiceCrashed(java.lang.String,java.lang.String,java.util.List)>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.Set getUpgradeKeySets()>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.infra.SecureSettingsServiceNameResolver: java.lang.String getDefaultServiceName(int)>
<javax.microedition.khronos.opengles.GL10: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: int getMinExpansionHeight()>
<com.android.systemui.statusbar.phone.StatusBarIconList.Slot: java.lang.String toString()>
<android.net.wifi.hotspot2.pps.Credential: boolean getCheckAaaServerCertStatus()>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo: boolean handleCloseControls(boolean,boolean)>
<com.android.systemui.classifier.FalsingLog: void wLogcat(java.lang.String,java.lang.String)>
<com.android.systemui.shared.recents.view.AppTransitionAnimationSpecsFuture: java.util.List composeSpecs()>
<com.android.settingslib.CustomDialogPreferenceCompat: void setOnShowListener(android.content.DialogInterface.OnShowListener)>
<com.android.settingslib.CustomDialogPreferenceCompat: boolean isDialogOpen()>
<com.android.systemui.DejankUtils: void setImmediate(boolean)>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: void removeUserChangedListener(com.android.systemui.statusbar.NotificationLockscreenUserManager.UserChangedListener)>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean hasExpandingChild()>
<com.android.systemui.statusbar.phone.PanelViewController: void expand(boolean)>
<com.android.systemui.qs.TileLayout: void setListening(boolean)>
<com.android.systemui.qs.QuickQSPanel: boolean needsDynamicRowsAndColumns()>
<com.android.server.accessibility.gestures.TouchState: int getLastTouchedWindowId()>
<com.android.systemui.dock.DockManagerImpl: void removeAlignmentStateListener(com.android.systemui.dock.DockManager.AlignmentStateListener)>
<com.android.keyguard.clock.AnalogClockController: java.lang.String getName()>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getUserProvisioningState()>
<com.android.settingslib.search.IndexableProcessor: boolean process(java.util.Set,javax.annotation.processing.RoundEnvironment)>
<com.android.systemui.statusbar.notification.row.NotificationGuts: void setHeightChangedListener(com.android.systemui.statusbar.notification.row.NotificationGuts.OnHeightChangedListener)>
<com.android.systemui.car.window.OverlayWindowModule: com.android.systemui.car.window.OverlayViewMediator bindFullscreenUserSwitcherViewsMediator(com.android.systemui.car.userswitcher.FullscreenUserSwitcherViewMediator)>
<com.android.server.policy.RestartAction: boolean showBeforeProvisioning()>
<com.android.systemui.plugins.PluginDependency: java.lang.Object get(com.android.systemui.plugins.Plugin,java.lang.Class)>
<com.android.powermodel.BatteryStatsReader: com.android.powermodel.ActivityReport parse(java.io.InputStream)>
<com.android.powermodel.RawBatteryStats: com.android.powermodel.RawBatteryStats parse(java.io.InputStream)>
<com.android.server.pm.AppsFilter.FeatureConfig: boolean isLoggingEnabled(int)>
<android.net.wifi.WifiConfiguration: java.lang.String getPasspointUniqueId()>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo: void onFinishInflate()>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void setCheckPermissionDelegate(android.permission.PermissionManagerInternal.CheckPermissionDelegate)>
<com.android.keyguard.KeyguardHostView: void onFinishInflate()>
<com.android.settingslib.fuelgauge.BatterySaverUtils: void ensureAutoBatterySaver(android.content.Context,int)>
<com.android.settingslib.location.InjectedSetting.Builder: com.android.settingslib.location.InjectedSetting.Builder setUserHandle(android.os.UserHandle)>
<com.android.server.audio.AudioService.VolumeController: void loadSettings(android.content.ContentResolver)>
<com.android.systemui.plugins.IntentButtonProvider.IntentButton: android.content.Intent getIntent()>
<com.android.systemui.stackdivider.Divider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.notification.interruption.HeadsUpViewBinder: void unbindHeadsUpView(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setRemoteInputVisible(boolean)>
<javax.obex.HeaderSet: void setHeader(int,java.lang.Object)>
<com.google.android.startop.iorap.JobScheduledEvent: java.lang.String toString()>
<com.android.systemui.keyguard.KeyguardViewMediator: void onStartedGoingToSleep(int)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: void updateCasInfoInternal(int,int)>
<com.android.server.pm.PackageManagerService: void setLastChosenActivity(android.content.Intent,java.lang.String,int,android.content.IntentFilter,int,android.content.ComponentName)>
<com.android.server.AnyMotionDetector.Vector3: com.android.server.AnyMotionDetector.Vector3 minus(com.android.server.AnyMotionDetector.Vector3)>
<com.android.settingslib.RestrictedLockUtilsInternal: com.android.settingslib.RestrictedLockUtils.EnforcedAdmin checkIfRestrictionEnforced(android.content.Context,java.lang.String,int)>
<android.content.pm.PackageManagerInternal: android.content.ComponentName getSystemUiServiceComponent()>
<android.app.usage.UsageStatsManagerInternal: void reportEvent(java.lang.String,int,int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean shouldSuppressAmbient()>
<com.android.server.AppStateTracker: boolean areForegroundServicesRestricted(int,java.lang.String)>
<com.android.systemui.qs.QSHost: com.android.systemui.qs.external.TileServices getTileServices()>
<com.android.systemui.statusbar.policy.HeadsUpManager: com.android.systemui.statusbar.policy.HeadsUpManager.HeadsUpEntry getTopHeadsUpEntry()>
<com.android.printservice.recommendation.plugin.google.CloudPrintPlugin: int getName()>
<com.android.systemui.statusbar.phone.PanelViewController: int getMaxPanelHeight()>
<com.android.settingslib.CustomDialogPreference.CustomPreferenceDialogFragment: void onDialogClosed(boolean)>
<com.android.systemui.statusbar.policy.Clock: void onRestoreInstanceState(android.os.Parcelable)>
<com.android.server.pm.RestrictionsSet: void moveRestriction(com.android.server.pm.RestrictionsSet,java.lang.String)>
<com.android.server.pm.PackageManagerService: int getRuntimePermissionsVersion(int)>
<android.net.wifi.SoftApInfo: void setBandwidth(int)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: com.android.systemui.statusbar.policy.KeyButtonDrawable create(android.content.Context,android.content.Context,int,boolean,android.graphics.Color)>
<com.android.settingslib.graph.SignalDrawable: void draw(android.graphics.Canvas)>
<com.android.server.pm.PackageManagerServiceUtils: java.lang.String realpath(java.io.File)>
<com.android.server.utils.PriorityDump.PriorityDumper: void dumpNormal(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>
<android.net.wifi.rtt.ResponderLocation: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.notification.row.NotificationSnooze.NotificationSnoozeOption: int getMinutesToSnoozeFor()>
<com.android.systemui.qs.tileimpl.QSIconViewImpl: java.lang.String toString()>
<com.android.systemui.appops.AppOpsController: java.util.List getActiveAppOps()>
<javax.microedition.khronos.opengles.GL10: void glMultMatrixf(java.nio.FloatBuffer)>
<com.android.systemui.statusbar.policy.DeadZone: void setFlashOnTouchCapture(boolean)>
<com.android.systemui.plugins.VolumeDialogController: void scheduleTouchFeedback()>
<com.android.gallery3d.glrenderer.Texture: boolean isOpaque()>
<com.android.systemui.statusbar.notification.stack.AnimationFilter: com.android.systemui.statusbar.notification.stack.AnimationFilter animateHideSensitive()>
<com.android.systemui.qs.QSContainerImpl: void measureChildWithMargins(android.view.View,int,int,int,int)>
<com.android.systemui.statusbar.NotificationMediaManager: void onNotificationRemoved(java.lang.String)>
<android.net.wifi.p2p.WifiP2pGroupList: java.util.List getGroupList()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(android.content.ComponentName,int)>
<com.android.systemui.plugins.VolumeDialogController.Callbacks: void onShowSafetyWarning(int)>
<android.media.MediaSession2.Builder: android.media.MediaSession2.Builder setSessionCallback(java.util.concurrent.Executor,android.media.MediaSession2.SessionCallback)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void setAppName(java.lang.String)>
<com.android.settingslib.applications.ApplicationsState.AppEntry: java.lang.String getNormalizedLabel()>
<com.android.server.display.DisplayModeDirector.Injector: void unregisterBrightnessObserver(android.content.ContentResolver,android.database.ContentObserver)>
<com.android.settingslib.net.DataUsageController: boolean isMobileDataSupported()>
<com.android.server.twilight.TwilightService: void <init>(android.content.Context)>
<com.android.server.locksettings.LockSettingsService: void registerStrongAuthTracker(android.app.trust.IStrongAuthTracker)>
<com.android.role.persistence.RolesState: void <init>(int,java.lang.String,java.util.Map)>
<com.android.server.locksettings.SyntheticPasswordManager: java.util.Set getPendingTokensForUser(int)>
<com.android.systemui.statusbar.phone.StatusBarIconHolder: boolean isVisible()>
<com.android.systemui.statusbar.notification.TransformState: void transformViewFullyTo(com.android.systemui.statusbar.notification.TransformState,com.android.systemui.statusbar.ViewTransformationHelper.CustomTransformation,float)>
<com.android.systemui.statusbar.phone.StatusBar: void executeRunnableDismissingKeyguard(java.lang.Runnable,java.lang.Runnable,boolean,boolean,boolean)>
<android.net.wifi.WifiManager: void setScanAlwaysAvailable(boolean)>
<com.android.server.twilight.TwilightState: boolean equals(java.lang.Object)>
<com.android.server.timezonedetector.TimeZoneDetectorService.Lifecycle: void <init>(android.content.Context)>
<com.android.server.companion.CompanionDeviceManagerService: void binderDied()>
<com.android.systemui.statusbar.policy.UserSwitcherController: void startActivity(android.content.Intent)>
<com.android.server.recoverysystem.RecoverySystemService: boolean uncrypt(java.lang.String,android.os.IRecoverySystemProgressListener)>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: java.lang.String getSoftTokenApp()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void dump(java.io.PrintWriter)>
<com.android.server.pm.dex.ArtManagerService: void prepareAppProfiles(com.android.server.pm.parsing.pkg.AndroidPackage,int,boolean)>
<com.google.android.startop.iorap.AppLaunchEvent.BaseWithActivityRecordData: void writeToParcelImpl(android.os.Parcel,int)>
<com.android.systemui.tuner.PowerNotificationControlsFragment: void onResume()>
<android.net.wifi.WifiClient: android.net.MacAddress getMacAddress()>
<com.android.systemui.statusbar.phone.ContextualButtonGroup: void addButton(com.android.systemui.statusbar.phone.ContextualButton)>
<com.android.server.DeviceIdleController: void <init>(android.content.Context)>
<com.android.systemui.qs.external.CustomTile: android.metrics.LogMaker populate(android.metrics.LogMaker)>
<com.android.printspooler.widget.PreviewPageFrame: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<com.android.server.locksettings.SyntheticPasswordCrypto: byte[] personalisedHash(byte[],byte[][])>
<com.android.server.pm.PackageManagerException: com.android.server.pm.PackageManagerException from(com.android.server.pm.Installer.InstallerException)>
<com.android.systemui.statusbar.TransformableView: void transformFrom(com.android.systemui.statusbar.TransformableView)>
<com.android.server.slice.SliceManagerService.Lifecycle: void onStopUser(int)>
<com.android.systemui.statusbar.policy.KeyButtonRipple: void setDelayTouchFeedback(boolean)>
<com.android.systemui.util.InjectionInflationController.ViewInstanceCreator: com.android.keyguard.KeyguardSliceView createKeyguardSliceView()>
<com.android.server.TelephonyRegistry.ConfigurationProvider: int getRegistrationLimit()>
<com.android.uiautomator.core.ShellUiAutomatorBridge: boolean isScreenOn()>
<android.net.ip.IpClientCallbacks: void onPreconnectionStart(java.util.List)>
<com.android.systemui.stackdivider.DividerView: void onAttachedToWindow()>
<com.android.server.inputmethod.InputMethodManagerService: java.util.List getEnabledInputMethodList(int)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout: void setActiveController(com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsAnimationController)>
<com.android.systemui.statusbar.StatusBarIconView: void <init>(android.content.Context,java.lang.String,android.service.notification.StatusBarNotification)>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void onDraw(android.graphics.Canvas)>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.doze.DozeHost: boolean isBlockingDoze()>
<android.net.wifi.WifiScanner: boolean getScanResults()>
<com.android.server.adb.AdbService: void enablePairingByQrCode(java.lang.String,java.lang.String)>
<com.android.networkstack.tethering.TetheringService: com.android.networkstack.tethering.Tethering makeTethering(com.android.networkstack.tethering.TetheringDependencies)>
<com.android.settingslib.widget.AnimatedImageView: void <init>(android.content.Context)>
<com.android.systemui.qs.TileLayout: void addTileView(com.android.systemui.qs.QSPanel.TileRecord)>
<com.android.server.om.DumpState: void setUserId(int)>
<com.android.server.policy.RestartAction: boolean onLongPress()>
<com.android.systemui.biometrics.AuthBiometricFaceView: boolean supportsSmallDialog()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: boolean hasVoiceCallingFeature()>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcher.Container: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.appops.AppOpsControllerImpl: void <init>(android.content.Context,android.os.Looper,com.android.systemui.dump.DumpManager,com.android.systemui.appop.PermissionFlagsCache,android.media.AudioManager,com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.settingslib.utils.StringUtil: java.lang.CharSequence formatRelativeTime(android.content.Context,double,boolean,android.icu.text.RelativeDateTimeFormatter.Style)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void onVisibilityChanged(android.view.View,int)>
<com.android.packageinstaller.handheld.ErrorDialogFragment: void onDismiss(android.content.DialogInterface)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setUsesIncreasedCollapsedHeight(boolean)>
<com.android.server.display.WifiDisplayController.Listener: void onFeatureStateChanged(int)>
<com.android.settingslib.media.LocalMediaManager: boolean removeDeviceFromPlayMedia(com.android.settingslib.media.MediaDevice)>
<com.android.systemui.keyguard.KeyguardViewMediator: boolean isHiding()>
<com.android.server.usb.descriptors.Usb20ACOutputTerminal: void <init>(int,byte,byte,int)>
<com.android.systemui.statusbar.phone.PanelBar: void onExpandingFinished()>
<com.android.server.NativeDaemonTimeoutException: void <init>(java.lang.String,com.android.server.NativeDaemonEvent)>
<com.android.server.stats.StatsManagerService: void removeConfiguration(long,java.lang.String)>
<com.android.server.usb.descriptors.report.HTMLReportCanvas: void closeHeader(int)>
<com.android.systemui.qs.QuickQSPanel: void setMaxTiles(int)>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindVolumeUI(com.android.systemui.volume.VolumeUI)>
<com.android.systemui.statusbar.NotificationShelf: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setPulsing(boolean)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow.NotificationMenuItem: void <init>(android.content.Context,java.lang.String,com.android.systemui.statusbar.notification.row.NotificationGuts.GutsContent,int)>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int describeContents()>
<com.android.systemui.assist.AssistHandleBehaviorController.BehaviorController: void onModeActivated(android.content.Context,com.android.systemui.assist.AssistHandleCallbacks)>
<com.android.settingslib.core.lifecycle.events.OnDestroy: void onDestroy()>
<com.android.server.twilight.TwilightManager: void registerListener(com.android.server.twilight.TwilightListener,android.os.Handler)>
<com.android.server.IpSecService: void applyTunnelModeTransform(int,int,int,java.lang.String)>
<com.android.printspooler.ui.FusedPrintersProvider: void addHistoricalPrinter(android.print.PrinterInfo)>
<com.android.server.input.InputManagerService: void setCustomPointerIcon(android.view.PointerIcon)>
<com.android.server.pm.PackageManagerService: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isNotificationListenerServicePermitted(java.lang.String,int)>
<com.android.systemui.bubbles.animation.AnimatableScaleMatrix: float getAnimatableValueForScaleFactor(float)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: boolean hasOverlappingRendering()>
<com.google.android.startop.iorap.AppLaunchEvent.ReportFullyDrawn: boolean equals(java.lang.Object)>
<com.android.server.integrity.parser.BinaryFileOperations: java.lang.String getStringValue(com.android.server.integrity.model.BitInputStream)>
<com.android.server.integrity.parser.RandomAccessObject: void close()>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void setStatusBar(com.android.systemui.statusbar.phone.StatusBar)>
<com.android.systemui.qs.tiles.BluetoothTile.BluetoothDetailAdapter: android.view.View createDetailView(android.content.Context,android.view.View,android.view.ViewGroup)>
<android.wm.WindowManagerPerfTestBase: void tearDownOnce()>
<android.net.ITetheringConnector: void untether(java.lang.String,java.lang.String,android.net.IIntResultListener)>
<com.android.server.AppStateTracker: boolean isUidPowerSaveUserWhitelisted(int)>
<com.android.systemui.car.window.SystemUIOverlayWindowController: void setFitInsetsTypes(int)>
<android.net.ip.IpClientManager: boolean addKeepalivePacketFilter(int,android.net.TcpKeepalivePacketData)>
<com.android.location.provider.LocationProviderBase: void onDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void transitionTo(int,boolean)>
<com.android.systemui.statusbar.policy.KeyButtonView: void playSoundEffect(int)>
<com.android.systemui.bubbles.BubbleOverflowActivity: void onStop()>
<com.android.uiautomator.core.UiObject: int getChildCount()>
<com.android.systemui.media.dialog.MediaOutputMetricLogger: void updateOutputEndPoints(com.android.settingslib.media.MediaDevice,com.android.settingslib.media.MediaDevice)>
<com.google.android.startop.iorap.IorapForwardingService: void onStart()>
<com.android.systemui.statusbar.dagger.StatusBarDependenciesModule: com.android.systemui.statusbar.NotificationViewHierarchyManager provideNotificationViewHierarchyManager(android.content.Context,android.os.Handler,com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.statusbar.phone.NotificationGroupManager,com.android.systemui.statusbar.notification.VisualStabilityManager,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.systemui.statusbar.phone.KeyguardBypassController,com.android.systemui.bubbles.BubbleController,com.android.systemui.statusbar.notification.DynamicPrivacyController,com.android.systemui.statusbar.notification.stack.ForegroundServiceSectionController,com.android.systemui.statusbar.notification.DynamicChildBindController,com.android.systemui.statusbar.notification.collection.inflation.LowPriorityInflationHelper)>
<android.net.wifi.p2p.WifiP2pWfdInfo: int getDeviceType()>
<com.android.systemui.statusbar.policy.DataSaverControllerImpl: boolean isDataSaverEnabled()>
<com.android.systemui.doze.DozeSensors: void onUserSwitched()>
<com.android.server.pm.PackageManagerService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<com.android.systemui.statusbar.ViewTransformationHelper: void reset()>
<android.processor.view.inspector.InspectablePropertyProcessor: void process(javax.lang.model.element.Element,android.processor.view.inspector.InspectableClassModel)>
<com.android.systemui.statusbar.phone.StatusBar: void userActivity()>
<com.android.settingslib.media.MediaDeviceUtils: java.lang.String getId(android.media.MediaRoute2Info)>
<com.android.server.pm.parsing.pkg.PackageImpl: android.content.pm.parsing.ParsingPackage forTesting(java.lang.String)>
<com.android.systemui.tracing.ProtoTracer: byte[] serializeEncapsulatingProto(com.android.systemui.tracing.nano.SystemUiTraceFileProto,java.util.Queue)>
<com.android.printservice.recommendation.util.Preconditions: long checkArgumentNonnegative(long,java.lang.String)>
<com.android.server.policy.keyguard.KeyguardStateMonitor: void onSimSecureStateChanged(boolean)>
<com.android.systemui.statusbar.policy.KeyguardStateController: long getKeyguardFadingAwayDuration()>
<com.android.systemui.assist.AssistManager: void replaceDrawable(android.widget.ImageView,android.content.ComponentName,java.lang.String,boolean)>
<com.android.server.locksettings.VersionedPasswordMetrics: android.app.admin.PasswordMetrics getMetrics()>
<com.android.systemui.car.window.OverlayPanelViewController: void onCollapseAnimationEnd()>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onSingleTaskDisplayEmpty(int)>
<android.net.wifi.hotspot2.pps.UpdateParameter: java.lang.String getBase64EncodedPassword()>
<com.android.systemui.statusbar.CommandQueue: void setIcon(java.lang.String,com.android.internal.statusbar.StatusBarIcon)>
<com.android.systemui.usb.UsbContaminantActivity: void onClick(android.view.View)>
<com.android.settingslib.bluetooth.PbapClientProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)>
<com.google.android.startop.iorapd.IorapWorkFlowTest: void tearDown()>
<com.android.printservice.recommendation.util.PrinterHashMap: java.lang.String getKey(android.net.nsd.NsdServiceInfo)>
<com.android.systemui.util.sensors.AsyncSensorManager: void unregisterListenerImpl(android.hardware.SensorEventListener,android.hardware.Sensor)>
<com.android.powermodel.RawBatteryStats.Warning: java.util.ArrayList getFields()>
<com.android.powermodel.PowerProfile: com.android.powermodel.ComponentProfile getComponent(com.android.powermodel.Component)>
<com.android.server.pm.SELinuxMMAC: boolean readInstallPolicy()>
<com.android.systemui.Prefs: android.content.SharedPreferences get(android.content.Context)>
<com.android.server.accessibility.FingerprintGestureDispatcher: void <init>(android.hardware.fingerprint.IFingerprintService,android.content.res.Resources,java.lang.Object,android.os.Handler)>
<com.google.android.startop.iorap.AppLaunchEvent: void <init>(android.os.Parcel)>
<com.android.systemui.qs.external.CustomTile: android.content.Intent getLongClickIntent()>
<com.android.systemui.ScreenDecorations: void <init>(android.content.Context,android.os.Handler,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.tuner.TunerService)>
<com.android.networkstack.tethering.TetheringDependencies: android.net.ip.IpServer.Dependencies getIpServerDependencies()>
<com.android.server.devicepolicy.DeviceAdminServiceController: void stopServiceForOwner(int,java.lang.String)>
<com.android.server.usb.descriptors.UsbInterfaceAssoc: byte getFunctionSubClass()>
<com.android.server.pm.PackageKeySetData: boolean isUsingDefinedKeySets()>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.AndroidPackage buildFakeForDeletion(java.lang.String,java.lang.String)>
<com.android.statsd.shelltools.Utils: boolean isAcceptableStatsd(java.util.logging.Logger,int,java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.phone.PanelBar: void onRestoreInstanceState(android.os.Parcelable)>
<com.android.server.statusbar.StatusBarManagerService: void shutdown()>
<com.android.systemui.AutoReinflateContainer: void onDetachedFromWindow()>
<com.android.server.uri.UriPermissionOwner: void dump(java.io.PrintWriter,java.lang.String)>
<com.android.systemui.statusbar.phone.PanelExpansionListener: void onPanelExpansionChanged(float,boolean)>
<com.android.settingslib.suggestions.SuggestionController.ServiceConnectionListener: void onServiceConnected()>
<android.net.wifi.WifiInfo: void setLostTxPacketsPerSecond(double)>
<com.android.server.timezone.RulesManagerService: java.lang.String toString()>
<com.android.systemui.qs.QSFooter: void setExpandClickListener(android.view.View.OnClickListener)>
<com.android.server.usb.descriptors.Usb10ACMixerUnit: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<android.net.wifi.WifiNetworkConnectionStatistics: void <init>(int,int)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator scaleX(float,java.lang.Runnable[])>
<com.android.gallery3d.glrenderer.BitmapTexture: void <init>(android.graphics.Bitmap)>
<com.android.systemui.statusbar.phone.StatusBarWindowController: void attach()>
<com.android.server.accessibility.gestures.TouchState: void onInjectedAccessibilityEvent(int)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: void setBackgroundTop(int)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setDismissAllInProgress(boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void addNotification(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,int)>
<com.android.systemui.statusbar.phone.LockscreenWallpaper: com.android.systemui.statusbar.phone.LockscreenWallpaper.LoaderResult loadBitmap(int,android.os.UserHandle)>
<android.net.wifi.aware.IWifiAwareManager: void publish(java.lang.String,java.lang.String,int,android.net.wifi.aware.PublishConfig,android.net.wifi.aware.IWifiAwareDiscoverySessionCallback)>
<com.android.systemui.car.window.SystemUIOverlayWindowController: void setWindowVisible(boolean)>
<com.android.server.contentsuggestions.ContentSuggestionsManagerServiceShellCommand: void <init>(com.android.server.contentsuggestions.ContentSuggestionsManagerService)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void setSmsAppPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.PackagesProvider)>
<com.android.server.NetworkManagementService: void systemReady()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void animateCollapsePanels(int,boolean)>
<com.android.systemui.statusbar.phone.PanelBar: void LOG(java.lang.String,java.lang.Object[])>
<com.android.uiautomator.testrunner.UiAutomatorTestCase: void tearDown()>
<com.android.server.display.AutomaticBrightnessController.Callbacks: void updateBrightness()>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: boolean isEncryptionAware(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.server.tv.tunerresourcemanager.FrontendResource: void removeExclusiveGroupMemberFeId(int)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSecondaryCpuAbi(java.lang.String)>
<com.android.egg.neko.Cat: android.graphics.drawable.Icon createIcon(android.content.Context,int,int)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: int getNetworkSelectionDisableReason()>
<com.android.server.pm.SELinuxMMAC: java.lang.String getSeInfo(com.android.server.pm.parsing.pkg.AndroidPackage,boolean,int)>
<com.android.server.textservices.TextServicesManagerService: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(int,boolean)>
<com.android.systemui.BatteryMeterView: void setColorsFromContext(android.content.Context)>
<com.android.nfc_extras.NfcExecutionEnvironment: void open()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void setIsChildInGroup(boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getAnonymousIdentity()>
<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canRegisterService(android.content.pm.ServiceInfo)>
<com.android.server.protolog.ProtoLogImpl: void writeProtoLogToFile()>
<com.android.systemui.statusbar.phone.StatusBar: boolean shouldIgnoreTouch()>
<com.android.server.usb.descriptors.UsbDescriptorParser: boolean isOutputHeadset()>
<android.text.PrecomputedTextPerfTest: void setUp()>
<android.net.wifi.rtt.ResponderLocation: double getFloorNumber()>
<android.content.pm.PackageManagerInternal: void writePermissionSettings(int[],boolean)>
<com.android.networkstack.tethering.UpstreamNetworkMonitor: void setCurrentUpstream(android.net.Network)>
<com.android.systemui.statusbar.phone.StatusBar: void startActivity(android.content.Intent,boolean)>
<android.os.IStatsManagerService: void addConfiguration(long,byte[],java.lang.String)>
<com.android.server.role.RoleManagerService: void onRoleHoldersChanged(java.lang.String,int,java.lang.String,java.lang.String)>
<com.android.sharedstoragebackup.SharedStorageAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long)>
<com.android.server.usb.descriptors.Usb10ASFormatII: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.systemui.statusbar.FlingAnimationUtils: void applyDismissing(android.animation.Animator,float,float,float,float)>
<com.android.systemui.statusbar.policy.AccessibilityController: boolean isAccessibilityEnabled()>
<android.net.wifi.WifiUsabilityStatsEntry: int getProbeMcsRateSinceLastUpdate()>
<com.android.server.utils.UserTokenWatcher: void <init>(com.android.server.utils.UserTokenWatcher.Callback,android.os.Handler,java.lang.String)>
<com.android.systemui.qs.tileimpl.QSTileBaseView: android.view.View updateAccessibilityOrder(android.view.View)>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void onFinishInflate()>
<com.android.systemui.qs.carrier.QSCarrierGroupController.Builder: void <init>(com.android.systemui.plugins.ActivityStarter,android.os.Handler,android.os.Looper,com.android.systemui.statusbar.policy.NetworkController,com.android.keyguard.CarrierTextController.Builder)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void launchLeftAffordance()>
<com.android.egg.neko.NekoService: void cancelJob(android.content.Context)>
<com.android.server.storage.StorageSessionController: com.android.server.storage.StorageUserConnection onVolumeRemove(android.os.storage.VolumeInfo)>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder: com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder withVisibility(boolean)>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void checkNavBarModes()>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: boolean showingAsLowPriority()>
<com.android.systemui.tuner.TunerSwitch: boolean persistBoolean(boolean)>
<com.android.systemui.statusbar.NotificationShelf: void setAnimationsEnabled(boolean)>
<com.android.settingslib.suggestions.SuggestionControllerMixinCompat: void onStart()>
<com.android.server.display.utils.AmbientFilterFactory: com.android.server.display.utils.AmbientFilter createBrightnessFilter(java.lang.String,android.content.res.Resources)>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: android.view.ViewGroup getViewParentForNotification(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setHeadsUpChild(android.view.View)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationMediaTemplateViewWrapper: void setRemoved()>
<com.android.systemui.statusbar.notification.collection.NotifCollection: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.media.MediaSessionRecord: void dump(java.io.PrintWriter,java.lang.String)>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: int getCurrentUser()>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void <init>(com.android.systemui.statusbar.notificatio.NotificationEntryManagerLogger,com.android.systemui.statusbar.phone.NotificationGroupManager,com.android.systemui.statusbar.notification.collection.NotificationRankingManager,com.android.systemui.statusbar.notification.NotificationEntryManager.KeyguardEnvironment,com.android.systemui.statusbar.FeatureFlags,dagger.Lazy,dagger.Lazy,com.android.systemui.util.leak.LeakDetector,dagger.Lazy,com.android.systemui.statusbar.notificatio.ForegroundServiceDismissalFeatureController)>
<com.android.systemui.statusbar.StatusBarMobileView: void setVisibleState(int,boolean)>
<com.android.server.usb.descriptors.UsbVCSelectorUnit: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.systemui.statusbar.phone.DemoStatusIcons: void onRemoveIcon(com.android.systemui.statusbar.StatusIconDisplayable)>
<android.net.dhcp.DhcpServingParamsParcelExt: android.net.dhcp.DhcpServingParamsParcelExt setDefaultRouters(java.net.Inet4Address[])>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isPartiallyDirectBootAware()>
<com.google.android.startop.iorap.AppLaunchEvent: void <init>(long)>
<android.widget.TextViewPrecomputedTextPerfTest: void testSetText_PrecomputedText_Selectable()>
<com.android.location.fused.FusedLocationProvider: void onSetRequest(com.android.location.provider.ProviderRequestUnbundled,android.os.WorkSource)>
<com.android.systemui.statusbar.notification.stack.AnimationFilter: void reset()>
<com.android.server.audio.AudioService: boolean isCallScreeningModeSupported()>
<com.android.server.infra.FrameworkResourcesServiceNameResolver: void setOnTemporaryServiceNameChangedCallback(com.android.server.infra.ServiceNameResolver.NameResolverListener)>
<com.android.server.security.FileIntegrityService: void <init>(android.content.Context)>
<com.android.server.TelephonyRegistry: void notifyOpportunisticSubscriptionInfoChanged()>
<com.android.systemui.statusbar.phone.KeyguardBouncer: void onScreenTurnedOff()>
<com.android.keyguard.PasswordTextView: java.lang.String getText()>
<com.android.server.biometrics.BiometricUserState: int getNameTemplateResource()>
<android.processor.view.inspector.InspectableClassModel.Property: void setAttributeId(int)>
<com.android.server.policy.PermissionPolicyService: void onStartUser(int)>
<android.net.wifi.WifiScanner: void stopPnoScan(android.net.wifi.WifiScanner.ScanListener)>
<com.android.printspooler.model.RemotePrintDocument.UpdateResultCallbacks: void onUpdateFailed(java.lang.CharSequence)>
<com.android.server.biometrics.AuthenticationClient: int stop(boolean)>
<com.android.pacprocessor.PacWebView: boolean setCurrentProxyScript(java.lang.String)>
<com.android.systemui.pip.phone.PipAccessibilityInteractionConnection: void notifyOutsideTouch()>
<com.android.commands.hid.Event.Reader: com.android.commands.hid.Event getNextEvent()>
<com.android.keyguard.KeyguardUpdateMonitor.StrongAuthTracker: void <init>(android.content.Context,java.util.function.Consumer)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void setOccluded(boolean,boolean)>
<com.android.uiautomator.core.UiObject: boolean isChecked()>
<com.android.systemui.statusbar.phone.KeyguardBouncer.BouncerExpansionCallback: void onFullyShown()>
<com.android.systemui.statusbar.notification.stack.NotificationListItem: android.view.View getView()>
<com.android.systemui.statusbar.NavigationBarController: com.android.systemui.statusbar.phone.NavigationBarView getDefaultNavigationBarView()>
<android.net.wifi.rtt.ResponderLocation: void setCivicLocationSubelementDefaults()>
<com.android.packageinstaller.UninstallUninstalling: void onBackPressed()>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void onCreate(android.os.Bundle)>
<com.android.server.autofill.ui.InlineFillUi: android.view.inputmethod.InlineSuggestionsResponse getInlineSuggestionsResponse()>
<com.android.commands.telecom.Telecom: void main(java.lang.String[])>
<android.net.wifi.p2p.WifiP2pGroup: void setIsGroupOwner(boolean)>
<com.android.settingslib.development.AbstractEnableAdbPreferenceController: boolean haveDebugSettings()>
<com.android.fakeoemfeatures.FakeBackgroundService: android.os.IBinder onBind(android.content.Intent)>
<com.android.systemui.util.concurrency.ConcurrencyModule: com.android.systemui.util.concurrency.DelayableExecutor provideDelayableExecutor(android.os.Looper)>
<com.android.proxyhandler.SocketConnect: void <init>(java.net.Socket,java.net.Socket)>
<com.android.server.uri.UriGrantsManagerInternal: void removeUriPermissionsForPackage(java.lang.String,int,boolean,boolean)>
<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardShowingAndNotOccluded()>
<com.android.server.biometrics.fingerprint.FingerprintService: java.util.List getEnrolledTemplates(int)>
<com.android.server.SystemServiceManager: void stopUser(int)>
<com.android.systemui.statusbar.notification.stack.AnimationProperties: com.android.systemui.statusbar.notification.stack.AnimationProperties setDuration(long)>
<com.android.systemui.statusbar.notification.stack.NotificationListItem: void setUntruncatedChildCount(int)>
<android.net.wifi.hotspot2.PasspointConfiguration: void setCredentialPriority(int)>
<com.android.systemui.statusbar.phone.DozeServiceHost: void extendPulse(int)>
<com.android.systemui.pip.BasePipManager: void setPinnedStackAnimationType(int)>
<com.android.server.slice.SlicePermissionManager.PkgUser: void <init>(java.lang.String)>
<com.android.systemui.statusbar.phone.NavigationBarView: void abortCurrentGesture()>
<com.android.systemui.volume.SegmentedButtons: void setSelectedStyle(android.widget.TextView,boolean)>
<com.android.systemui.qs.AutoAddTracker: void destroy()>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo.OnSettingsClickListener: void onClick(android.view.View,android.app.NotificationChannel,int)>
<com.android.server.utils.quota.Category: void <init>(java.lang.String)>
<com.android.systemui.statusbar.policy.NetworkController.AccessPointController: int getIcon(com.android.settingslib.wifi.AccessPoint)>
<com.android.systemui.doze.DozeSensors: void destroy()>
<com.android.systemui.qs.QSSecurityFooter: void onConfigurationChanged()>
<com.android.systemui.car.notification.NotificationPanelViewController.OnUnseenCountUpdateListener: void onUnseenCountUpdate(int)>
<android.processor.view.inspector.InspectableClassModel: void putProperty(android.processor.view.inspector.InspectableClassModel.Property)>
<com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl: void dump(java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.tuner.TunerFragment: boolean onOptionsItemSelected(android.view.MenuItem)>
<com.android.server.pm.PackageManagerServiceUtils: com.android.server.pm.permission.PermissionsState getPermissionsState(android.content.pm.PackageManagerInternal,com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.server.audio.AudioService: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>
<com.android.systemui.classifier.Stroke: java.util.ArrayList getPoints()>
<com.android.systemui.ForegroundServiceController.UserStateUpdateCallback: boolean updateUserState(com.android.systemui.ForegroundServicesUserState)>
<com.android.systemui.classifier.FalsingManagerImpl: void onStartExpandingFromPulse()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.qs.tileimpl.QSTileBaseView: boolean hasOverlappingRendering()>
<com.android.systemui.assist.ui.EdgeLight: com.android.systemui.assist.ui.EdgeLight[] copy(com.android.systemui.assist.ui.EdgeLight[])>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindRecents(com.android.systemui.recents.Recents)>
<com.android.keyguard.ViewMediatorCallback: void onBouncerVisiblityChanged(boolean)>
<com.android.systemui.Dependency: java.lang.Object getDependency(com.android.systemui.Dependency.DependencyKey)>
<com.android.gallery3d.common.Utils: float parseFloatSafely(java.lang.String,float)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void onTouchMove(float)>
<com.android.server.pm.UserManagerService: java.util.List getUserRestrictionSources(java.lang.String,int)>
<com.android.server.biometrics.RemovalClient: boolean onEnrollResult(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.systemui.statusbar.phone.PanelViewController: void resetViews(boolean)>
<com.android.systemui.tracing.ProtoTracer: void add(com.android.systemui.shared.tracing.ProtoTraceable)>
<com.android.systemui.qs.QSTileHost: com.android.systemui.plugins.qs.QSTile createTile(java.lang.String)>
<com.android.uiautomator.core.UiDevice: boolean pressSearch()>
<com.android.server.accessibility.gestures.TouchExplorer: void setTouchExplorationPassthroughRegion(android.graphics.Region)>
<com.android.systemui.statusbar.notification.ActionListTransformState: void transformViewFullyFrom(com.android.systemui.statusbar.notification.TransformState,float)>
<com.android.systemui.media.dialog.MediaOutputController: void <init>(android.content.Context,java.lang.String,boolean,android.media.session.MediaSessionManager,com.android.settingslib.bluetooth.LocalBluetoothManager,com.android.systemui.statusbar.phone.ShadeController,com.android.systemui.plugins.ActivityStarter,com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.internal.logging.UiEventLogger,android.media.MediaRouter2Manager)>
<com.android.systemui.statusbar.AutoHideUiElement: void synchronizeState()>
<com.android.systemui.statusbar.CommandQueue: void onDisplayChanged(int)>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void reapplyFilterAndSort(java.lang.String)>
<com.android.sharedstoragebackup.ObbBackupService: android.os.IBinder onBind(android.content.Intent)>
<com.android.systemui.qs.SecureSetting: void <init>(android.content.Context,android.os.Handler,java.lang.String,int)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setIsLowPriority(boolean)>
<com.android.systemui.assist.ui.PerimeterPathGuide: float getCoord(com.android.systemui.assist.ui.PerimeterPathGuide.Region,float)>
<com.android.server.usb.descriptors.UsbInterfaceDescriptor: byte getAlternateSetting()>
<com.android.systemui.volume.VolumeComponent: void onConfigurationChanged(android.content.res.Configuration)>
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setMatchFilter(java.util.List)>
<com.android.systemui.globalactions.GlobalActionsColumnLayout: void snapToPowerButton()>
<com.android.server.gpu.GpuService: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.TransformState: void setVisible(boolean,boolean)>
<com.android.server.autofill.ui.InlineFillUi.InlineUiEventCallback: void notifyInlineUiHidden(android.view.autofill.AutofillId)>
<com.android.systemui.shared.system.ActivityManagerWrapper: boolean showVoiceSession(android.os.IBinder,android.os.Bundle,int)>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void onPanelFullyOpened()>
<com.android.printspooler.ui.PrintActivity: boolean canCloseOptions()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void updateSpeedBumpIndex(int,boolean)>
<com.android.systemui.statusbar.phone.RotationContextButton: void setRotationButtonController(com.android.systemui.statusbar.phone.RotationButtonController)>
<android.net.wifi.IWifiManager: void enableTdls(java.lang.String,boolean)>
<com.android.gallery3d.exif.ExifInterface: int getTrueIfd(int)>
<com.android.server.usb.descriptors.UsbASFormat: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<android.text.StaticLayoutCreateDrawPerfTest: void timeCreate()>
<com.android.server.biometrics.BiometricServiceBase: boolean isStrongBiometric()>
<com.android.server.telecom.InternalServiceRepository: com.android.internal.telecom.IDeviceIdleControllerAdapter getDeviceIdleController()>
<android.net.wifi.rtt.RangingRequest: int getMaxPeers()>
<android.widget.LayoutPerfTest: void testLayoutPerf()>
<com.android.media.remotedisplay.RemoteDisplayProvider: void onConnect(com.android.media.remotedisplay.RemoteDisplay)>
<com.android.server.recoverysystem.RecoverySystemService.UncryptSocket: void close()>
<android.database.SQLiteDatabasePerfTest: void testInnerJoin()>
<com.android.server.integrity.model.IntegrityCheckResult: boolean isCausedByInstallerRule()>
<com.android.systemui.appops.AppOpsController: void addCallback(int[],com.android.systemui.appops.AppOpsController.Callback)>
<com.android.server.pm.PackageManagerService: int getComponentEnabledSetting(android.content.ComponentName,int)>
<com.android.server.policy.WindowManagerPolicy: void setTopFocusedDisplay(int)>
<com.android.systemui.statusbar.phone.PanelView: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void removeChildNotification(com.android.systemui.statusbar.notification.stack.NotificationListItem)>
<com.android.systemui.qs.tileimpl.QSIconViewImpl: void layout(android.view.View,int,int)>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void removeIcon(java.lang.String,int)>
<com.android.systemui.qs.external.CustomTile: java.lang.CharSequence getTileLabel()>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_userToSetInDifferentProfileGroupToCaller_setsAppOpOnOtherProfile()>
<com.android.server.role.RoleUserState.Callback: void onRoleHoldersChanged(java.lang.String,int,java.lang.String,java.lang.String)>
<com.android.systemui.tuner.NavBarTuner: void onCreatePreferences(android.os.Bundle,java.lang.String)>
<com.android.keyguard.KeyguardSecurityContainer: void <init>(android.content.Context)>
<com.android.server.slice.SlicePermissionManager: void <init>(android.content.Context,android.os.Looper)>
<com.android.systemui.power.PowerNotificationWarnings: void showWarningNotification()>
<com.android.systemui.analytics.DataCollector: void onNotificationDismissed()>
<android.net.wifi.rtt.RangingResult: android.net.MacAddress getMacAddress()>
<com.android.systemui.statusbar.phone.PanelViewController: void cancelPeek()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setGutsView(com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.MenuItem)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setTimeZone(android.content.ComponentName,java.lang.String)>
<com.android.settingslib.widget.RadioButtonPreference: void setAppendixVisibility(int)>
<android.net.wifi.WifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()>
<com.android.server.infra.AbstractPerUserSystemService: boolean isSetupCompletedLocked()>
<com.android.networkstack.tethering.BpfCoordinator: void tetherOffloadRuleClear(android.net.ip.IpServer)>
<com.android.server.pm.PackageManagerService: void freeStorage(java.lang.String,long,int,android.content.IntentSender)>
<com.android.server.timezonedetector.ReferenceWithHistory: java.lang.Object set(java.lang.Object)>
<android.net.wifi.aware.WifiAwareNetworkSpecifier: int describeContents()>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder: void <init>(android.view.SurfaceControl)>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils.ThrowingRunnable)>
<android.net.ip.RouterAdvertisementDaemon: void <init>(android.net.util.InterfaceParams)>
<com.android.systemui.pip.phone.PipAccessibilityInteractionConnection: void <init>(android.content.Context,com.android.systemui.pip.phone.PipMotionHelper,com.android.systemui.pip.PipTaskOrganizer,com.android.systemui.pip.PipSnapAlgorithm,com.android.systemui.pip.phone.PipAccessibilityInteractionConnection.AccessibilityCallbacks,java.lang.Runnable,android.os.Handler)>
<com.android.systemui.volume.VolumeDialogImpl: void setSilentMode(boolean)>
<com.android.server.media.MediaRouterService: void requestSetVolume(android.media.IMediaRouterClient,java.lang.String,int)>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void disable(int,int,int,boolean)>
<com.android.networkstack.tethering.OffloadHardwareInterface.ForwardedStats: java.lang.String toString()>
<com.android.systemui.statusbar.phone.StatusBar: void onDozingChanged(boolean)>
<com.android.settingslib.core.instrumentation.EventLogWriter: void action(android.content.Context,int,boolean)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isUsesNonSdkApi()>
<com.android.systemui.qs.external.TileLifecycleManager: void setTileChangeListener(com.android.systemui.qs.external.TileLifecycleManager.TileChangeListener)>
<com.android.settingslib.dream.DreamBackend: void preview(com.android.settingslib.dream.DreamBackend.DreamInfo)>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: byte[] getRawData()>
<com.android.systemui.pip.phone.PipManager: void onPipTransitionFinished(android.content.ComponentName,int)>
<com.android.systemui.statusbar.policy.CastController: void stopCasting(com.android.systemui.statusbar.policy.CastController.CastDevice)>
<com.android.systemui.car.userswitcher.UserSwitcherContainer: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryInstrumentation(java.lang.String,int)>
<com.android.server.accounts.AccountManagerService: void validateAccounts(int)>
<com.android.systemui.util.wakelock.DelayedWakeLock.Builder: com.android.systemui.util.wakelock.DelayedWakeLock.Builder setTag(java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setFakeShadowIntensity(float,float,int,int)>
<com.android.systemui.shared.system.SurfaceControlCompat: android.view.SurfaceControl getSurfaceControl()>
<com.android.systemui.shared.system.DevicePolicyManagerWrapper: com.android.systemui.shared.system.DevicePolicyManagerWrapper getInstance()>
<com.android.server.pm.PackageManagerService: java.lang.String getAttentionServicePackageName()>
<com.android.settingslib.development.AbstractLogdSizePreferenceController: void enablePreference(boolean)>
<com.android.settingslib.RestrictedSwitchPreference: void performClick()>
<com.android.printspooler.widget.EmbeddedContentContainer.OnSizeChangeListener: void onSizeChanged(int,int)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator withDampingRatio(float)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void addContainerView(android.view.View)>
<com.android.server.pm.PackageManagerService: int movePackage(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: int getSuppressedVisualEffects()>
<javax.obex.ObexTransport: void close()>
<com.android.server.NativeDaemonEvent: void checkCode(int)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector childSelector(com.android.uiautomator.core.UiSelector)>
<com.android.packageinstaller.InstallInstalling: void onStart()>
<com.android.systemui.car.notification.PowerManagerHelper: void connectToCarService()>
<com.android.server.pm.UserManagerService: int getUserRestrictionSource(java.lang.String,int)>
<com.android.systemui.statusbar.phone.LightBarTransitionsController: void setIconsDark(boolean,boolean)>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: boolean requestAccessibilityFocus()>
<com.android.server.webkit.SystemImpl: void killPackageDependents(java.lang.String)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: boolean isSecure(int)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void setNeedsInput(boolean)>
<com.android.gallery3d.exif.ExifInterface: void removeTagDefinition(int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean shouldSuppressFullScreenIntent()>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setFirstInSection(boolean)>
<android.net.wifi.SoftApInfo: int describeContents()>
<com.android.settingslib.development.AbstractLogpersistPreferenceController: boolean onPreferenceChange(androidx.preference.Preference,java.lang.Object)>
<com.android.systemui.statusbar.phone.LockscreenWallpaper: void onWallpaperChanged()>
<com.android.server.biometrics.AuthenticationClient: int handleFailedAttempt()>
<com.android.systemui.statusbar.KeyguardAffordanceView: float getCircleRadius()>
<com.android.server.uri.NeededUriGrants: void dumpDebug(android.util.proto.ProtoOutputStream,long)>
<com.android.systemui.qs.tiles.ColorInversionTile: int getMetricsCategory()>
<com.android.server.timezone.RulesManagerService: void requestNothing(byte[],boolean)>
<android.net.TetheredClient.AddressInfo: android.net.LinkAddress getAddress()>
<com.android.server.pm.PackageInstallerSession: void open()>
<javax.obex.PrivateInputStream: int read()>
<com.android.systemui.qs.tiles.UiModeNightTile: java.lang.CharSequence getTileLabel()>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setChangingPosition(boolean)>
<com.android.systemui.statusbar.policy.NetworkController.AccessPointController: boolean connect(com.android.settingslib.wifi.AccessPoint)>
<android.net.TcpKeepalivePacketData: android.net.TcpKeepalivePacketData tcpKeepalivePacket(android.net.TcpKeepalivePacketDataParcelable)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void recoverFromLightCycle()>
<com.android.systemui.statusbar.phone.PanelView: void dispatchConfigurationChanged(android.content.res.Configuration)>
<com.android.keyguard.ViewMediatorCallback: void resetKeyguard()>
<android.processor.view.inspector.InspectableClassModel: java.util.Collection getAllProperties()>
<com.android.localtransport.LocalTransport: long requestFullBackupTime()>
<com.android.server.biometrics.fingerprint.FingerprintUserState: void addBiometric(android.hardware.biometrics.BiometricAuthenticator.Identifier)>
<com.android.server.appop.AppOpsService: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
<com.android.systemui.statusbar.phone.LightBarController: void setBiometricUnlockController(com.android.systemui.statusbar.phone.BiometricUnlockController)>
<com.android.statsd.shelltools.Utils: void setUpLogger(java.util.logging.Logger,boolean)>
<com.android.server.pm.AbstractStatsBase: void <init>(java.lang.String,java.lang.String,boolean)>
<com.android.server.biometrics.ClientMonitor: boolean isAlreadyDone()>
<com.android.server.pm.ShortcutService: void removeAllDynamicShortcuts(java.lang.String,int)>
<com.android.gallery3d.exif.ExifTag: byte[] getValueAsBytes()>
<com.android.systemui.statusbar.phone.PanelViewController: com.android.systemui.statusbar.phone.PanelViewController.OnConfigurationChangedListener createOnConfigurationChangedListener()>
<com.android.systemui.keyguard.KeyguardViewMediator: void onWakeAndUnlocking()>
<com.android.server.people.data.EventIndex: android.util.Range getMostRecentActiveTimeSlot()>
<com.android.server.AnyMotionDetector: boolean hasSensor()>
<com.android.commands.sm.Sm: void runUnmount()>
<com.android.commands.sm.Sm: void runGetFbeMode()>
<com.android.statementservice.retriever.WebContent: void <init>(java.lang.String,java.lang.Long)>
<android.net.TetheredClient.AddressInfo: java.lang.String toString()>
<com.android.server.pm.PackageManagerService.BlobXmlRestorer: void apply(org.xmlpull.v1.XmlPullParser,int)>
<android.net.ip.IpClientManager: boolean updateLayer2Information(android.net.shared.Layer2Information)>
<com.android.server.audio.AudioService: boolean isMasterMute()>
<com.android.gallery3d.glrenderer.GLCanvas: void drawMixed(com.android.gallery3d.glrenderer.BasicTexture,int,float,int,int,int,int)>
<com.android.server.NetworkManagementService: void stopTethering()>
<com.android.server.NetworkManagementService: java.lang.String[] getDnsForwarders()>
<com.android.settingslib.applications.AppUtils: boolean isInstant(android.content.pm.ApplicationInfo)>
<com.android.systemui.statusbar.ScrimView: void setColors(com.android.internal.colorextraction.ColorExtractor.GradientColors)>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onActivityRestartAttempt(android.app.ActivityManager.RunningTaskInfo,boolean,boolean,boolean)>
<com.android.systemui.qs.external.TileLifecycleManager: void onServiceDisconnected(android.content.ComponentName)>
<com.android.server.pm.PackageSettingBase: void setUpdateAvailable(boolean)>
<com.android.systemui.statusbar.GestureRecorder.Gesture: void tag(long,java.lang.String,java.lang.String)>
<com.android.server.pm.permission.PermissionManagerServiceInternal.PermissionCallback: void onPermissionUpdatedNotifyListener(int[],boolean,int)>
<com.android.systemui.wm.DisplayImeController.PerDisplay: void insetsChanged(android.view.InsetsState)>
<com.android.systemui.util.leak.TrackedCollections: void track(java.util.Collection,java.lang.String)>
<com.android.server.usb.UsbHostManager: void <init>(android.content.Context,com.android.server.usb.UsbAlsaManager,com.android.server.usb.UsbPermissionManager)>
<com.android.systemui.keyguard.KeyguardSliceProvider: void addNextAlarmLocked(androidx.slice.builders.ListBuilder)>
<com.android.server.tv.tunerresourcemanager.CasResource: int getMaxSessionNum()>
<com.android.printspooler.ui.PageAdapter: android.support.v7.widget.RecyclerView.ViewHolder onCreateViewHolder(android.view.ViewGroup,int)>
<com.android.systemui.qs.QSPanel: void setContentMargins(int,int)>
<com.android.systemui.ExpandHelper: void cancel()>
<com.android.systemui.statusbar.phone.NavigationBarInflaterView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.phone.StatusBarIconHolder: com.android.systemui.statusbar.phone.StatusBarIconHolder fromWifiIconState(com.android.systemui.statusbar.phone.StatusBarSignalPolicy.WifiIconState)>
<com.android.systemui.statusbar.CrossFadeHelper: void fadeIn(android.view.View,float)>
<com.android.systemui.statusbar.policy.DeviceProvisionedControllerImpl: void startListening(int)>
<com.android.settingslib.media.PhoneMediaDevice: java.lang.String getSummary()>
<com.android.keyguard.KeyguardPatternView: com.android.keyguard.KeyguardSecurityCallback getCallback()>
<com.android.settingslib.search.IndexableProcessor: void init(javax.annotation.processing.ProcessingEnvironment)>
<com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm: void setIsExpanded(boolean)>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getPermissionGroups()>
<com.android.systemui.statusbar.notification.interruption.HeadsUpViewBinder: void bindHeadsUpView(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.row.NotifBindPipeline.BindCallback)>
<com.android.server.pm.Installer: boolean restoreAppDataSnapshot(java.lang.String,int,java.lang.String,int,int,int)>
<com.android.systemui.plugins.statusbar.StatusBarStateController.StateListener: void onStatePostChange()>
<com.android.settingslib.media.LocalMediaManager: java.util.List getActiveMediaSession()>
<com.android.server.policy.WindowManagerPolicy.WindowState: android.graphics.Rect getGivenContentInsetsLw()>
<com.android.systemui.statusbar.phone.StatusBar: boolean toggleSplitScreenMode(int,int)>
<com.android.server.tv.tunerresourcemanager.ClientProfile: java.util.Set getInUseFrontendIds()>
<android.net.wifi.WifiManager: boolean isWifiAwareSupported()>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus.Builder: android.net.wifi.WifiConfiguration.NetworkSelectionStatus.Builder setNetworkSelectionDisableReason(int)>
<com.android.server.webkit.WebViewUpdateService: void onStart()>
<com.android.systemui.statusbar.notification.NotificationIconDozeHelper: void setColor(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRowController: void <init>(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,com.android.systemui.statusbar.notification.row.ActivatableNotificationViewController,com.android.systemui.statusbar.NotificationMediaManager,com.android.systemui.shared.plugins.PluginManager,com.android.systemui.util.time.SystemClock,java.lang.String,java.lang.String,com.android.systemui.statusbar.phone.KeyguardBypassController,com.android.systemui.statusbar.phone.NotificationGroupManager,com.android.systemui.statusbar.notification.row.RowContentBindStage,com.android.systemui.statusbar.notification.logging.NotificationLogger,com.android.systemui.statusbar.policy.HeadsUpManager,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow.OnExpandClickListener,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.notification.row.NotificationGutsManager,boolean,java.lang.Runnable,com.android.systemui.plugins.FalsingManager,com.android.systemui.statusbar.notification.people.PeopleNotificationIdentifier)>
<com.android.systemui.plugin.testoverlayplugin.CustomView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.phone.NotificationPanelView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.preload.check.PreloadCheck: void testStatus()>
<android.app.StatsManager: boolean setBroadcastSubscriber(long,long,android.app.PendingIntent)>
<com.android.systemui.car.userswitcher.FullscreenUserSwitcherViewMediator: void setupOverlayContentViewControllers()>
<com.android.server.statusbar.StatusBarManagerService: void onNotificationSmartReplySent(java.lang.String,int,java.lang.CharSequence,int,boolean)>
<com.google.android.startop.iorap.RequestId: int hashCode()>
<com.android.systemui.recents.OverviewProxyService.OverviewProxyListener: void onQuickStepStarted()>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton4OnClickListener(android.view.View.OnClickListener)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator translationX(float,java.lang.Runnable[])>
<com.android.server.pm.InstructionSets: java.lang.String getDexCodeInstructionSet(java.lang.String)>
<com.android.server.pm.PackageManagerService: boolean isUidPrivileged(int)>
<com.android.systemui.SystemUIApplication: void onCreate()>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void reInflateViews(android.view.View.OnClickListener,android.service.notification.StatusBarNotification)>
<com.android.server.media.MediaSessionService: void onMediaButtonReceiverChanged(com.android.server.media.MediaSessionRecordImpl)>
<com.android.systemui.statusbar.phone.StatusBar: void wakeUpIfDozing(long,android.view.View,java.lang.String)>
<com.android.location.provider.ActivityChangedEvent: java.lang.Iterable getActivityRecognitionEvents()>
<com.android.printspooler.ui.PrintErrorFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.android.server.locksettings.SyntheticPasswordManager: void initWeaverService()>
<com.android.systemui.bubbles.BubbleStackView: android.graphics.PointF getStackPosition()>
<android.net.wifi.aware.DiscoverySession: int getMaxSendRetryCount()>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setContentTransformationAmount(float,boolean)>
<com.android.systemui.classifier.FalsingManagerImpl: void onCameraHintStarted()>
<com.android.systemui.AutoReinflateContainer: void inflateLayoutImpl()>
<com.android.networkstack.tethering.TetheringDependencies: com.android.networkstack.tethering.TetheringNotificationUpdater getNotificationUpdater(android.content.Context,android.os.Looper)>
<com.android.systemui.qs.TileLayout: boolean hasOverlappingRendering()>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setClipTopAmount(int)>
<com.android.server.NetworkScorerAppManager: android.net.NetworkScorerAppData getActiveScorer()>
<com.android.systemui.util.sensors.ProximitySensor.ProximityCheck: void check(long,java.util.function.Consumer)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: android.service.notification.StatusBarNotification getSbn()>
<android.net.wifi.aware.SubscribeConfig: void assertValid(android.net.wifi.aware.Characteristics,boolean)>
<com.android.systemui.globalactions.GlobalActionsDialog.MyAdapter: int countSeparatedItems()>
<com.android.systemui.media.ResumeMediaBrowser: void restart()>
<com.android.systemui.statusbar.phone.LockscreenLockIconController: void setBouncerShowingScrimmed(boolean)>
<com.android.settingslib.dream.DreamBackend: java.lang.CharSequence getActiveDreamName()>
<com.android.systemui.statusbar.policy.HeadsUpManager: boolean hasPinnedHeadsUp()>
<com.android.systemui.statusbar.notification.row.dagger.ActivatableNotificationViewModule: com.android.systemui.statusbar.notification.row.ExpandableView bindExpandableView(com.android.systemui.statusbar.notification.row.ActivatableNotificationView)>
<com.android.server.usb.descriptors.Usb20ASGeneral: int getChannelConfig()>
<com.android.server.wallpaper.WallpaperManagerInternal: void onDisplayReady(int)>
<android.os.TracePerfTest: void testCounter()>
<com.android.systemui.usb.UsbConfirmActivity: void onClick(android.content.DialogInterface,int)>
<javax.microedition.khronos.opengles.GL10: void glCullFace(int)>
<com.android.systemui.bubbles.BubbleStackView: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void onDestroyView()>
<com.android.systemui.statusbar.NotificationHeaderUtil: void updateChildrenHeaderAppearance()>
<com.android.commands.hid.Event: int getDuration()>
<android.media.BufferingParams.Builder: android.media.BufferingParams.Builder setResumePlaybackMarkMs(int)>
<com.android.systemui.shared.system.WallpaperManagerCompat: void setWallpaperZoomOut(android.os.IBinder,float)>
<com.android.server.appprediction.AppPredictionPerUserService: void onDestroyPredictionSessionLocked(android.app.prediction.AppPredictionSessionId)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_userToSetInDifferentProfileGroupToCaller_doesNotSetCallerAppOp()>
<com.android.server.clipboard.ClipboardService: void <init>(android.content.Context)>
<com.android.systemui.statusbar.StatusBarIconView: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.locksettings.recoverablekeystore.WrappedKey: void <init>(byte[],byte[],byte[],int)>
<com.android.systemui.statusbar.policy.ZenModeController.Callback: void onConsolidatedPolicyChanged(android.app.NotificationManager.Policy)>
<com.android.settingslib.wifi.AccessPoint: int getLevel()>
<com.android.server.display.utils.AmbientFilter: boolean setLoggingEnabled(boolean)>
<com.android.systemui.volume.ZenModePanel: void setEmptyState(int,int)>
<com.android.commands.hid.Event: java.lang.String getCommand()>
<com.android.systemui.shared.system.RemoteAnimationTargetCompat: com.android.systemui.shared.system.RemoteAnimationTargetCompat[] wrap(android.view.RemoteAnimationTarget[])>
<android.net.wifi.hotspot2.omadm.XMLNode: void close()>
<com.android.settingslib.core.instrumentation.VisibilityLoggerMixin: void writeElapsedTimeMetric(int,java.lang.String)>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: java.util.List getRequestedPermissions()>
<com.android.keyguard.KeyguardSecurityViewFlipper: boolean checkLayoutParams(android.view.ViewGroup.LayoutParams)>
<com.android.packageinstaller.television.UninstallAlertFragment: androidx.leanback.widget.GuidanceStylist.Guidance onCreateGuidance(android.os.Bundle)>
<com.android.server.AttributeCache: void updateConfiguration(android.content.res.Configuration)>
<com.android.server.locksettings.recoverablekeystore.KeySyncUtils: javax.crypto.SecretKey generateRecoveryKey()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void flingToHeight(float,boolean,float,float,boolean)>
<com.android.keyguard.KeyguardPasswordView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)>
<com.android.server.pm.PackageManagerService: android.os.Bundle getSuspendedPackageAppExtras(java.lang.String,int)>
<com.android.systemui.statusbar.notification.stack.AmbientState: float getTopPadding()>
<com.android.server.policy.WindowOrientationListener: void dump(java.io.PrintWriter,java.lang.String)>
<com.android.uiautomator.core.InstrumentationUiAutomatorBridge: long getSystemLongPressTime()>
<android.content.pm.PackageManagerInternal: boolean isDataRestoreSafe(byte[],java.lang.String)>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void onTrackingStarted()>
<com.android.server.SystemConfigService: void <init>(android.content.Context)>
<com.android.systemui.bubbles.BubbleController.NotifCallback: void removeNotification(com.android.systemui.statusbar.notification.collection.NotificationEntry,int)>
<android.net.wifi.hotspot2.pps.UpdateParameter: byte[] getTrustRootCertSha256Fingerprint()>
<com.android.systemui.classifier.FalsingManagerFake: void onBouncerShown()>
<com.android.systemui.UiOffloadThread: java.util.concurrent.Future execute(java.lang.Runnable)>
<com.android.systemui.qs.QSDetail: void setHost(com.android.systemui.qs.QSTileHost)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setFirstInSection(boolean)>
<com.android.keyguard.clock.ImageClock: void onTimeChanged()>
<com.android.settingslib.widget.AppEntitiesHeaderController: com.android.settingslib.widget.AppEntitiesHeaderController removeAppEntity(int)>
<com.android.systemui.util.LifecycleFragment: androidx.lifecycle.Lifecycle getLifecycle()>
<com.android.keyguard.KeyguardSimPinView: void resetState()>
<com.android.systemui.statusbar.NotificationRemoteInputManager: java.util.Set getEntriesKeptForRemoteInputActive()>
<android.os.IStatsManagerService: void removeConfiguration(long,java.lang.String)>
<android.media.MediaController2: void close()>
<android.net.wifi.WifiNetworkSuggestion: java.lang.String getSsid()>
<com.android.server.protolog.ProtoLogViewerConfigReader: java.lang.String getViewerString(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void onNotificationUpdated()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout.OnOverscrollTopChangedListener: void flingTopOverscroll(float,boolean)>
<com.android.keyguard.KeyguardPatternView: void startAppearAnimation()>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)>
<com.android.systemui.car.navigationbar.CarNavigationBarView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.dagger.ContextComponentResolver: android.app.Service resolveService(java.lang.String)>
<com.android.systemui.settings.BrightnessController: void registerCallbacks()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: boolean isSnappedAndOnSameSide()>
<com.android.server.NetIdManager: int reserveNetId()>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void onPanelPeeked()>
<com.android.systemui.volume.VolumeDialogControllerImpl.MediaSessionsCallbacks: void onRemoteUpdate(android.media.session.MediaSession.Token,java.lang.String,android.media.session.MediaController.PlaybackInfo)>
<com.android.server.ConnectivityService: int registerNetworkProvider(android.os.Messenger,java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean isExpandAnimationRunning()>
<com.android.systemui.statusbar.phone.NavigationBarView: void onAttachedToWindow()>
<com.android.printspooler.ui.PrintActivity: void onPrinterUnavailable(android.print.PrinterInfo)>
<com.android.keyguard.KeyguardUpdateMonitor: void awakenFromDream()>
<com.android.server.usb.UsbAlsaManager: void logDevicesList(java.lang.String)>
<com.android.server.NetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void onDensityOrFontScaleChanged()>
<com.android.server.biometrics.BiometricServiceBase: com.android.server.biometrics.BiometricServiceBase.DaemonWrapper getDaemonWrapper()>
<com.android.systemui.statusbar.policy.HeadsUpManager: void updateNotification(java.lang.String,boolean)>
<com.android.systemui.statusbar.policy.ZenModeController: android.service.notification.ZenModeConfig.ZenRule getManualRule()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void appTransitionCancelled(int)>
<com.android.server.TelephonyRegistry: void systemRunning()>
<com.android.systemui.statusbar.phone.AutoTileManager: void changeUser(android.os.UserHandle)>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void setLocationExtraPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.PackagesProvider)>
<android.net.wifi.aware.ConfigRequest.Builder: android.net.wifi.aware.ConfigRequest.Builder setMasterPreference(int)>
<com.android.systemui.car.notification.NotificationPanelViewController: boolean shouldAnimateExpandPanel()>
<com.android.server.ConnectivityService: boolean shouldAvoidBadWifi()>
<android.net.ip.IpServer: void unwanted()>
<com.android.systemui.statusbar.phone.PanelView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.net.NetworkMonitorManager: boolean notifyPrivateDnsChanged(android.net.PrivateDnsConfigParcel)>
<com.android.server.usb.descriptors.UsbACFeatureUnit: void <init>(int,byte,byte,int)>
<com.android.systemui.statusbar.notification.ActionListTransformState: void resetTransformedView()>
<com.android.companiondevicemanager.DeviceChooserActivity: java.lang.String getCallingPackage()>
<com.android.systemui.statusbar.phone.RotationButtonController: boolean isRotationLocked()>
<com.android.server.accessibility.gestures.TouchState: int getInjectedPointerDownCount()>
<com.android.systemui.statusbar.policy.SmartReplyView: com.android.systemui.statusbar.policy.SmartReplyView.LayoutParams generateDefaultLayoutParams()>
<android.net.wifi.hotspot2.pps.Credential: void <init>(android.net.wifi.hotspot2.pps.Credential)>
<com.android.systemui.volume.SegmentedButtons: void setCallback(com.android.systemui.volume.SegmentedButtons.Callback)>
<com.android.server.audio.MediaFocusControl.AudioFocusDeathHandler: void binderDied()>
<com.android.systemui.volume.VolumeDialogControllerImpl: int getAudioManagerStreamVolume(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasDeviceOwner()>
<android.net.wifi.ScanResult: boolean is6GHz(int)>
<com.android.commands.input.Input.InputCmd: void run(int,int)>
<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>
<com.android.server.camera.CameraServiceProxy: void onSwitchUser(int)>
<com.android.systemui.assist.AssistManager.UiController: void hide()>
<com.android.settingslib.volume.MediaSessions: void setVolume(android.media.session.MediaSession.Token,int)>
<com.android.systemui.statusbar.policy.HotspotControllerImpl: void removeCallback(android.os.Handler.Callback)>
<com.android.server.input.InputManagerService.WindowManagerCallbacks: long notifyANR(android.view.InputApplicationHandle,android.os.IBinder,java.lang.String)>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: void onPowerKeyDown(boolean)>
<com.android.systemui.media.NotificationPlayer: void <init>(java.lang.String)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isRowDismissed()>
<android.net.wifi.hotspot2.pps.UpdateParameter: int describeContents()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setMaxDisplayedNotifications(int)>
<com.android.systemui.statusbar.ScrimView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.car.CarDeviceProvisionedControllerImpl: void addCallback(com.android.systemui.statusbar.policy.DeviceProvisionedController.DeviceProvisionedListener)>
<com.android.settingslib.bluetooth.LocalBluetoothProfileManager: com.android.settingslib.bluetooth.LocalBluetoothProfile getProfileByName(java.lang.String)>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isPanelTracking()>
<com.android.systemui.globalactions.GlobalActionsDialog.Action: boolean showDuringKeyguard()>
<com.android.systemui.statusbar.phone.RotationButton: void setRotationButtonController(com.android.systemui.statusbar.phone.RotationButtonController)>
<com.android.keyguard.KeyguardPINView: void startAppearAnimation()>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int getLocalActivePath()>
<com.android.systemui.statusbar.notification.collection.coordinator.BubbleCoordinator: void <init>(com.android.systemui.bubbles.BubbleController,com.android.systemui.statusbar.notification.collection.NotifCollection)>
<com.android.egg.neko.NekoService: void registerJobIfNeeded(android.content.Context,long)>
<com.android.systemui.statusbar.notification.row.StackScrollerDecorView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.pm.PackageManagerService: boolean isPackageSignedByKeySet(java.lang.String,android.content.pm.KeySet)>
<com.android.gallery3d.glrenderer.GLCanvas: void texSubImage2D(com.android.gallery3d.glrenderer.BasicTexture,int,int,android.graphics.Bitmap,int,int)>
<com.android.systemui.statusbar.phone.ShadeController: void collapsePanel(boolean)>
<com.android.systemui.plugins.VolumeDialogController: void vibrate(android.os.VibrationEffect)>
<com.android.systemui.biometrics.AuthController: void start()>
<android.content.pm.PackageManagerInternal: boolean isCallerInstallerOfRecord(com.android.server.pm.parsing.pkg.AndroidPackage,int)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setShelfIconVisible(boolean)>
<com.android.systemui.qs.TileLayout: void layoutTileRecords(int)>
<com.android.server.attention.AttentionManagerService: boolean isServiceConfigured(android.content.Context)>
<com.android.systemui.statusbar.policy.SensorPrivacyControllerImpl: void <init>(android.content.Context)>
<com.android.server.HardwarePropertiesManagerService: float[] getDeviceTemperatures(java.lang.String,int,int)>
<com.android.systemui.biometrics.AuthBiometricFaceView: void <init>(android.content.Context)>
<com.android.lock_checker.LockHook.Violation: java.lang.Throwable getException()>
<android.net.wifi.WifiManager.MulticastLock: java.lang.String toString()>
<com.android.systemui.statusbar.policy.RotationLockController: void setRotationLocked(boolean)>
<com.android.systemui.statusbar.phone.PanelBar: void setPanel(com.android.systemui.statusbar.phone.PanelViewController)>
<android.net.TetheringManager.TetheringEventCallback: void onClientsChanged(java.util.Collection)>
<com.android.server.pm.KeySetManagerService: void removeAppKeySetDataLPw(java.lang.String)>
<com.android.server.NetworkScoreService: java.lang.String getActiveScorerPackage()>
<com.android.server.usb.UsbAlsaDevice: java.lang.String getAlsaCardDeviceString()>
<com.android.systemui.shared.plugins.VersionInfo: boolean hasVersionInfo()>
<com.android.server.testing.shadows.ShadowSystemServiceRegistry: void __staticInitializer__()>
<com.android.server.media.MediaResourceMonitorService: void onStart()>
<android.media.Session2Link: void writeToParcel(android.os.Parcel,int)>
<com.android.settingslib.bluetooth.PbapClientProfile: int getConnectionPolicy(android.bluetooth.BluetoothDevice)>
<com.android.keyguard.EmergencyButton: void setCallback(com.android.keyguard.EmergencyButton.EmergencyButtonCallback)>
<com.android.printspooler.widget.PageContentView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.settingslib.widget.LinkTextView: void setText(java.lang.CharSequence,android.widget.TextView.BufferType)>
<android.net.wifi.p2p.WifiP2pGroupList: boolean clear()>
<com.android.systemui.globalactions.GlobalActionsDialog.MyAdapter: boolean shouldBeSeparated(int)>
<com.android.server.stats.pull.ProcfsMemoryUtil: android.util.SparseArray getProcessCmdlines()>
<com.android.server.display.WifiDisplayController.Listener: void onScanStarted()>
<com.android.server.statusbar.StatusBarManagerService: void showAuthenticationDialog(android.os.Bundle,android.hardware.biometrics.IBiometricServiceReceiverInternal,int,boolean,int,java.lang.String,long,int)>
<android.perftests.utils.TestPackageInstaller: android.perftests.utils.TestPackageInstaller.InstalledPackage installPackage(java.lang.String)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void expandWithQs()>
<android.text.StaticLayoutGetOffsetForHorizontalPerfTest: void testGetOffsetForHorizontal_LTR()>
<com.android.systemui.statusbar.KeyguardIndicationController: void showTransientIndication(int)>
<com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildStandby(int,int)>
<com.android.systemui.toast.ToastUI: void showToast(int,java.lang.String,android.os.IBinder,java.lang.CharSequence,android.os.IBinder,int,android.app.ITransientNotificationCallback)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: boolean hasHumanReadableName()>
<com.android.systemui.wm.DisplayLayout: int getNavigationBarSize(android.content.res.Resources,int,boolean,int)>
<com.google.android.startop.iorap.TaskResult: void writeToParcel(android.os.Parcel,int)>
<com.android.server.tv.tunerresourcemanager.CasResource: void removeOwner(int)>
<com.android.uiautomator.core.UiScrollable: boolean scrollToBeginning(int)>
<android.view.autofill.LoginTest: void testFocus_noService()>
<com.android.systemui.qs.QSFooterImpl: void onAttachedToWindow()>
<com.android.settingslib.suggestions.SuggestionLoaderCompat: java.util.List loadInBackground()>
<com.android.systemui.tuner.TunerService: void clearAll()>
<android.net.wifi.ScanResult: int convertFrequencyMhzToChannel(int)>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator.Callback: void onExpandAnimationFinished(boolean)>
<com.android.printspooler.widget.PrintContentView: void setOptionsStateChangeListener(com.android.printspooler.widget.PrintContentView.OptionsStateChangeListener)>
<com.android.server.usb.UsbAlsaDevice: int hashCode()>
<com.android.server.display.BrightnessMappingStrategy: android.util.Pair getAdjustedCurve(float[],float[],float,float,float,float)>
<com.android.systemui.statusbar.notification.ProgressTransformState: boolean sameAs(com.android.systemui.statusbar.notification.TransformState)>
<com.android.server.utils.PriorityDump.PriorityDumper: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],boolean)>
<com.android.server.appprediction.AppPredictionManagerService: void <init>(android.content.Context)>
<com.android.server.audio.AudioService.VolumeController: void postDismiss()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void onInstalledCertificatesChanged(android.os.UserHandle,java.util.Collection)>
<com.android.server.infra.AbstractMasterSystemService: void onServiceRemoved(com.android.server.infra.AbstractPerUserSystemService,int)>
<com.android.systemui.statusbar.policy.DateView: void updateClock()>
<com.android.server.hdmi.SelectRequestBuffer: void set(com.android.server.hdmi.SelectRequestBuffer.SelectRequest)>
<com.android.server.pm.UserManagerService: int[] getProfileIds(int,boolean)>
<com.android.server.pm.IntentFilterVerificationState: int getUserId()>
<com.android.proxyhandler.SocketConnect: void run()>
<com.android.server.slice.SlicePermissionManager: void grantFullAccess(java.lang.String,int)>
<com.android.server.input.InputManagerService: void setWiredAccessoryCallbacks(com.android.server.input.InputManagerService.WiredAccessoryCallbacks)>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: java.lang.String toString()>
<com.android.server.webkit.SystemInterface: boolean isFallbackLogicEnabled()>
<com.android.systemui.Gefingerpoken: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.localtransport.LocalTransportService: void onCreate()>
<com.android.server.tv.TvInputHardwareManager.Listener: void onHardwareDeviceAdded(android.media.tv.TvInputHardwareInfo)>
<com.android.server.FgThread: android.os.Handler getHandler()>
<com.android.server.usb.descriptors.Usb20ASFormatII: void <init>(int,byte,byte,byte,int)>
<com.android.server.display.OverlayDisplayWindow.Listener: void onStateChanged(int)>
<com.android.systemui.qs.tileimpl.QSTileBaseView: void onLayout(boolean,int,int,int,int)>
<com.android.systemui.statusbar.phone.PanelViewController.TouchHandler: boolean onTouch(android.view.View,android.view.MotionEvent)>
<com.android.server.input.InputManagerService: java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)>
<com.android.systemui.shared.plugins.PluginManagerImpl.CrashWhilePluginActiveException: void <init>(java.lang.Throwable)>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String toString()>
<com.android.systemui.shared.system.ActivityManagerWrapper: void startRecentsActivity(android.content.Intent,com.android.systemui.shared.system.AssistDataReceiver,com.android.systemui.shared.system.RecentsAnimationListener,java.util.function.Consumer,android.os.Handler)>
<android.app.usage.UsageStatsManagerInternal: android.app.usage.UsageStatsManagerInternal.AppUsageLimitData getAppUsageLimit(java.lang.String,android.os.UserHandle)>
<com.android.server.biometrics.fingerprint.FingerprintAuthenticator: void startPreparedClient(int)>
<com.android.systemui.statusbar.StatusBarWifiView: java.lang.String getSlot()>
<com.android.systemui.stackdivider.SplitDisplayLayout: void <init>(android.content.Context,com.android.systemui.wm.DisplayLayout,com.android.systemui.stackdivider.SplitScreenTaskOrganizer)>
<com.android.systemui.statusbar.ScrimView: void setColors(com.android.internal.colorextraction.ColorExtractor.GradientColors,boolean)>
<com.android.systemui.statusbar.StatusBarIconView: void debug(int)>
<com.android.server.accounts.AccountManagerService: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getCrossProfileCalendarPackagesForUser(int)>
<com.android.server.ConnectivityService.Dependencies: boolean queryUserAccess(int,int)>
<com.android.systemui.stackdivider.MinimizedDockShadow: void setDockSide(int)>
<com.android.systemui.statusbar.phone.PanelBar: void panelExpansionChanged(float,boolean)>
<com.android.keyguard.KeyguardSecurityViewFlipper: com.android.keyguard.KeyguardSecurityCallback getCallback()>
<com.android.keyguard.KeyguardUpdateMonitor: java.util.List getSubscriptionInfo(boolean)>
<com.android.server.AnyMotionDetector: int getStationaryStatus()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalTxRetries()>
<com.android.server.integrity.model.ByteTrackedOutputStream: void <init>(java.io.OutputStream)>
<android.processor.view.inspector.InspectableClassModel.IntFlagEntry: int getMask()>
<com.android.server.policy.WindowManagerPolicy: boolean setAodShowing(boolean)>
<com.android.systemui.classifier.FalsingLog: void i(java.lang.String,java.lang.String)>
<com.android.server.media.RemoteDisplayProviderWatcher: void <init>(android.content.Context,com.android.server.media.RemoteDisplayProviderWatcher.Callback,android.os.Handler,int)>
<com.android.systemui.statusbar.notification.NotificationEntryManager.KeyguardEnvironment: boolean isNotificationForCurrentProfiles(android.service.notification.StatusBarNotification)>
<com.android.systemui.plugins.qs.DetailAdapter: com.android.internal.logging.UiEventLogger.UiEventEnum moreSettingsEvent()>
<com.android.systemui.usb.UsbConfirmActivity: void onCheckedChanged(android.widget.CompoundButton,boolean)>
<com.android.systemui.car.notification.NotificationPanelViewController: void onExpandAnimationEnd()>
<com.android.systemui.doze.DozeHost: void onIgnoreTouchWhilePulsing(boolean)>
<com.android.server.dreams.DreamManagerService: void onBootPhase(int)>
<com.android.server.DeviceIdleController: boolean getPowerSaveWhitelistAppInternal(java.lang.String)>
<com.android.systemui.statusbar.phone.ButtonInterface: void abortCurrentGesture()>
<com.android.settingslib.core.lifecycle.ObservableActivity: boolean onOptionsItemSelected(android.view.MenuItem)>
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder setPassphrase(java.lang.String)>
<com.android.systemui.qs.tiles.WifiTile: com.android.systemui.plugins.qs.DetailAdapter createDetailAdapter()>
<com.android.server.pm.PackageInstallerSession: void addClientProgress(float)>
<com.android.systemui.shared.system.InputConsumerController: void unregisterInputConsumer()>
<com.android.server.biometrics.RemovalClient: int start()>
<com.android.settingslib.RestrictedPreferenceHelper: void onAttachedToHierarchy()>
<android.net.wifi.WifiScanner.ActionListener: void onFailure(int,java.lang.String)>
<com.android.keyguard.KeyguardSecurityContainer: void <init>(android.content.Context,android.util.AttributeSet)>
<android.net.wifi.WifiManager.MulticastLock: boolean isHeld()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController.OtherwisedCollapsedListener: void setWouldOtherwiseCollapse(boolean)>
<com.android.systemui.stackdivider.DividerWindowManager: void add(android.view.View,int,int,int)>
<com.android.server.stats.StatsManagerService: byte[] getMetadata(java.lang.String)>
<com.android.systemui.qs.carrier.QSCarrier: boolean updateState(com.android.systemui.qs.carrie.CellSignalState)>
<com.android.externalstorage.ExternalStorageProvider: java.lang.String getDocIdForFile(java.io.File)>
<androidx.window.sidecar.SidecarProvider: java.lang.String getApiVersion()>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger: java.lang.String getString(java.lang.String,java.lang.String)>
<com.android.printspooler.ui.SelectPrinterActivity: void onDestroy()>
<javax.microedition.khronos.opengles.GL11: void glColorPointer(int,int,int,int)>
<android.os.UserManagerInternal: boolean isUserInitialized(int)>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: int[] getRecoverySecretTypes()>
<com.android.systemui.MultiListLayout: com.android.systemui.MultiListLayout get(android.view.View)>
<com.android.server.tv.tunerresourcemanager.FrontendResource.Builder: com.android.server.tv.tunerresourcemanager.FrontendResource build()>
<com.android.media.remotedisplay.RemoteDisplay: int getStatus()>
<android.net.wifi.aware.WifiAwareAgentNetworkSpecifier: void <init>(android.net.wifi.aware.WifiAwareNetworkSpecifier)>
<com.android.server.VibratorService: void systemReady()>
<com.android.systemui.statusbar.AlertingNotificationManager: com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry createAlertEntry()>
<com.android.systemui.wm.DisplayLayout: android.graphics.Rect stableInsets()>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageResolver.ImageCache: void preload(android.net.Uri)>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void restoreAppearanceAndTransientState()>
<com.android.server.SystemService: void onSwitchUser(int)>
<com.android.printspooler.ui.FusedPrintersProvider: void onStopLoading()>
<com.android.systemui.statusbar.phone.NavigationHandle: void <init>(android.content.Context)>
<android.net.wifi.util.HexEncoding: java.lang.String encodeToString(byte[])>
<com.android.server.vr.VrManagerInternal: void setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)>
<android.net.wifi.WifiInfo: void setBSSID(java.lang.String)>
<com.android.settingslib.media.MediaManager: void unregisterCallback(com.android.settingslib.media.MediaManager.MediaDeviceCallback)>
<com.android.server.uri.UriGrantsManagerInternal: void dump(java.io.PrintWriter,boolean,java.lang.String)>
<com.android.systemui.statusbar.phone.NavigationBarView: void setOnVerticalChangedListener(com.android.systemui.statusbar.phone.NavigationBarView.OnVerticalChangedListener)>
<com.android.systemui.statusbar.notification.row.NotificationInfo: boolean shouldBeSaved()>
<android.net.wifi.IWifiManager: int calculateSignalLevel(int)>
<com.android.systemui.qs.TouchAnimator.Builder: com.android.systemui.qs.TouchAnimator.Builder addFloat(java.lang.Object,java.lang.String,float[])>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcher.Adapter: void onClick(android.view.View)>
<com.android.server.accessibility.MagnificationController: void getMagnificationBounds(int,android.graphics.Rect)>
<com.android.server.SystemService.TargetUser: void <init>(android.content.pm.UserInfo)>
<android.os.CpuUsageTrackingPerfTest: void timeReadPidProcDirectly()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setBluetoothContactSharingDisabled(android.content.ComponentName,boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: long getManagedProfileMaximumTimeOff(android.content.ComponentName)>
<android.net.wifi.WifiManager: boolean isScanAlwaysAvailable()>
<com.android.systemui.statusbar.notification.row.NotificationContentInflater.AsyncInflationTask: void handleInflationException(com.android.systemui.statusbar.notification.collection.NotificationEntry,java.lang.Exception)>
<com.android.systemui.wm.DisplayController: com.android.systemui.wm.DisplayLayout getDisplayLayout(int)>
<com.android.externalstorage.ExternalStorageProvider: void onDocIdDeleted(java.lang.String)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void hideKeyguardToPrepareBouncer()>
<com.android.systemui.statusbar.BackDropView: boolean hasOverlappingRendering()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: float getTranslation()>
<com.android.settingslib.graph.BatteryMeterDrawableBase: void setPowerSave(boolean)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setDelayTouchFeedback(boolean)>
<com.android.systemui.statusbar.phone.PanelViewController.OnLayoutChangeListener: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void updatePermissions(java.lang.String,com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback: void startIntentSenderAndFinishSession(android.content.IntentSender)>
<com.android.settingslib.deviceinfo.PrivateStorageInfo: void <init>(long,long)>
<com.android.systemui.statusbar.policy.SignalController: int getCurrentIconId()>
<android.net.wifi.hotspot2.PasspointConfiguration: int getUpdateIdentifier()>
<com.android.systemui.biometrics.AuthBiometricView: void onAuthenticationFailed(java.lang.String)>
<android.net.wifi.RttManager.RttListener: void onSuccess(android.net.wifi.RttManager.RttResult[])>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger.EditorLogger: void apply()>
<com.android.server.pm.UserManagerService: int getUserSerialNumber(int)>
<com.android.keyguard.KeyguardSecurityContainer: void setKeyguardCallback(com.android.keyguard.KeyguardSecurityCallback)>
<com.android.server.statusbar.StatusBarManagerService: void onNotificationDirectReplied(java.lang.String)>
<com.android.server.input.InputManagerService.WindowManagerCallbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int)>
<com.android.systemui.dagger.DefaultActivityBinder: android.app.Activity bindUsbDebuggingSecondaryUserActivity(com.android.systemui.usb.UsbDebuggingSecondaryUserActivity)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glEnable(int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void removeRow()>
<com.android.printspooler.ui.PrintActivity: void onActivityResult(int,int,android.content.Intent)>
<com.android.statementservice.retriever.AbstractAssetMatcher: com.android.statementservice.retriever.AbstractAssetMatcher createMatcher(java.lang.String)>
<com.android.settingslib.wifi.AccessPoint: boolean isReachable()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void removeChildNotification(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<android.net.wifi.hotspot2.pps.HomeSp: void setFriendlyName(java.lang.String)>
<com.android.systemui.statusbar.phone.NavigationBarView: android.util.SparseArray getButtonDispatchers()>
<com.android.server.testing.shadows.ShadowApplicationPackageManager: void reset()>
<com.android.systemui.DessertCase: void onStart()>
<android.net.ConnectivityModuleConnector: void dump(java.io.PrintWriter)>
<com.android.systemui.screenshot.TakeScreenshotService: void <init>(com.android.systemui.screenshot.GlobalScreenshot,android.os.UserManager,com.android.internal.logging.UiEventLogger)>
<com.google.android.startop.iorap.SystemServiceUserEvent: int describeContents()>
<com.android.systemui.statusbar.phone.ObservableScrollView.Listener: void onOverscrolled(float,float,int)>
<com.android.systemui.pip.phone.PipTouchHandler: com.android.systemui.pip.phone.PipMotionHelper getMotionHelper()>
<com.android.preload.check.Initialized: void main(java.lang.String[])>
<com.android.server.policy.WindowManagerPolicy.WindowState: android.view.IApplicationToken getAppToken()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean hasCustomClock()>
<com.android.settingslib.widget.BarChartInfo.Builder: com.android.settingslib.widget.BarChartInfo.Builder setEmptyText(int)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setUpCrossProfileAppUidsAndPackageNames()>
<com.android.server.IpSecService: void applyTransportModeTransform(android.os.ParcelFileDescriptor,int,int)>
<com.android.server.media.MediaRouterService: void deselectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: com.android.server.tv.tunerresourcemanager.ClientProfile getClientProfile(int)>
<com.android.systemui.qs.QSHost: void removeTile(java.lang.String)>
<com.android.server.audio.PlaybackActivityMonitor: boolean duckPlayers(com.android.server.audio.FocusRequester,com.android.server.audio.FocusRequester,boolean)>
<com.android.systemui.statusbar.policy.HeadsUpManager.HeadsUpEntry: boolean isSticky()>
<com.android.systemui.statusbar.policy.BluetoothController: boolean isBluetoothConnecting()>
<com.android.systemui.keyguard.KeyguardViewMediator: void setOccluded(boolean,boolean)>
<com.android.systemui.statusbar.notification.dagger.NotificationsModule: com.android.systemui.statusbar.notification.row.NotificationGutsManager provideNotificationGutsManager(android.content.Context,com.android.systemui.statusbar.notification.VisualStabilityManager,dagger.Lazy,android.os.Handler,android.os.Handler,android.view.accessibility.AccessibilityManager,com.android.systemui.statusbar.notification.collection.provider.HighPriorityProvider,android.app.INotificationManager,android.content.pm.LauncherApps,android.content.pm.ShortcutManager,com.android.systemui.statusbar.notification.row.ChannelEditorDialogController,com.android.systemui.settings.CurrentUserContextTracker,javax.inject.Provider,com.android.systemui.bubbles.BubbleController,com.android.internal.logging.UiEventLogger)>
<com.android.systemui.SwipeHelper: float getTranslation(android.view.View)>
<com.android.printspooler.ui.PrintActivity: void onPrinterAvailable(android.print.PrinterInfo)>
<com.android.systemui.Dependency: java.lang.Object get(java.lang.Class)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: android.os.ParcelUuid[] getUuids()>
<com.android.server.usb.descriptors.UsbACMixerUnit: void <init>(int,byte,byte,int)>
<com.android.settingslib.bluetooth.LocalBluetoothManager: android.content.Context getForegroundActivity()>
<com.android.location.provider.LocationRequestUnbundled: long getInterval()>
<com.android.systemui.statusbar.phone.PanelViewController: boolean shouldUseDismissingAnimation()>
<com.android.keyguard.KeyguardViewController: void onStartedGoingToSleep()>
<com.android.server.pm.PackageInstallerService: boolean isStageName(java.lang.String)>
<com.android.uiautomator.core.UiScrollable: boolean scrollIntoView(com.android.uiautomator.core.UiSelector)>
<android.net.wifi.rtt.ResponderLocation: boolean getExtraInfoOnAssociationIndication()>
<android.net.wifi.p2p.WifiP2pManager: void getNfcHandoverRequest(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.HandoverMessageListener)>
<android.net.wifi.IWifiManager: boolean isMulticastEnabled()>
<android.database.SQLiteDatabaseIoPerfTest: void testInsertsWithTransactions()>
<com.android.providers.settings.SettingsBackupAgent: void onCreate()>
<com.android.systemui.car.window.OverlayViewController: void stop()>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean isDrawnLw()>
<com.android.systemui.util.time.DateFormatUtil: boolean is24HourFormat()>
<com.android.systemui.qs.tiles.BatterySaverTile: void handleClick()>
<com.android.systemui.statusbar.ScrimView: void invalidateDrawable(android.graphics.drawable.Drawable)>
<com.android.systemui.doze.DozeService: void onDestroy()>
<com.android.settingslib.drawer.SwitchesProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.systemui.statusbar.phone.NavigationBarView: boolean isQuickStepSwipeUpEnabled()>
<com.android.systemui.statusbar.policy.SmartReplyConstants: boolean getEffectiveEditChoicesBeforeSending(int)>
<android.net.wifi.rtt.RangingResult: android.net.wifi.aware.PeerHandle getPeerHandle()>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void addContainerView(android.view.View)>
<android.net.wifi.IWifiManager: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration,java.lang.String)>
<com.android.server.pm.dex.DexManager: int dexoptSystemServer(com.android.server.pm.dex.DexoptOptions)>
<com.android.systemui.egg.MLandActivity: void playerMinus(android.view.View)>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper.Callback: android.view.View getLeftPreview()>
<com.android.server.appop.AppOpsService: void stopWatchingNoted(com.android.internal.app.IAppOpsNotedCallback)>
<android.multiuser.UserLifecycleTests: void managedProfileUnlockAndLaunchApp()>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void onKeyguardShowingChanged()>
<com.android.systemui.glwallpaper.GLWallpaperRenderer: void finish()>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onDreamingStateChanged(boolean)>
<com.android.server.biometrics.BiometricServiceBase: boolean hasReachedEnrollmentLimit(int)>
<com.android.systemui.recents.ScreenPinningRequest: void clearPrompt()>
<com.android.server.pm.PackageManagerServiceUtils: java.lang.String buildVerificationRootHashString(java.lang.String,java.lang.String[])>
<com.android.systemui.globalactions.GlobalActionsImpl: void <init>(android.content.Context,com.android.systemui.statusbar.CommandQueue,dagger.Lazy,com.android.systemui.statusbar.BlurUtils)>
<android.net.wifi.ScanResult: int convertChannelToFrequencyMhz(int,int)>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setCustomBackground(android.graphics.drawable.Drawable)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void lockNow(int,boolean)>
<com.android.settingslib.widget.FooterPreference.Builder: com.android.settingslib.widget.FooterPreference build()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow.OnExpandClickListener: void onExpandClicked(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.server.MmsServiceBroker: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void applyContentTransformation(float,float)>
<com.android.systemui.qs.QSDetailItems: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.policy.ZenModeController provideZenModeController(com.android.systemui.statusbar.policy.ZenModeControllerImpl)>
<com.android.systemui.biometrics.AuthPanelController: android.animation.ValueAnimator getAlphaAnimator(float)>
<com.android.server.biometrics.face.FaceUtils: void removeBiometricForUser(android.content.Context,int,int)>
<com.android.systemui.statusbar.phone.ScrimController: void setWallpaperSupportsAmbientMode(boolean)>
<com.android.settingslib.RestrictedSwitchPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<javax.microedition.khronos.opengles.GL11: void glClipPlanef(int,float[],int)>
<com.android.systemui.statusbar.notification.row.RowInflaterTask: void onInflateFinished(android.view.View,int,android.view.ViewGroup)>
<com.android.server.ConnectivityService: java.lang.String[] getTetherableIfaces()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setPulseSuppressed(boolean)>
<com.android.systemui.recents.OverviewProxyService: void onNavigationModeChanged(int)>
<com.android.vpndialogs.ManageDialog: void onClick(android.content.DialogInterface,int)>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setBssidPattern(android.net.MacAddress,android.net.MacAddress)>
<javax.microedition.khronos.opengles.GL11Ext: void glCurrentPaletteMatrixOES(int)>
<com.android.commands.hid.Device: void <init>(int,java.lang.String,int,int,int,byte[],byte[],android.util.SparseArray,java.util.Map)>
<com.android.server.input.InputManagerService: void setInputDispatchMode(boolean,boolean)>
<com.android.server.pm.UserManagerService: boolean isUserUnlocked(int)>
<android.net.wifi.WifiInfo: void setMaxSupportedTxLinkSpeedMbps(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setOnClickListener(android.view.View.OnClickListener)>
<com.android.systemui.statusbar.phone.BiometricUnlockController: boolean hasPendingAuthentication()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void requestScrollerTopPaddingUpdate(boolean)>
<com.android.systemui.statusbar.StatusBarWifiView: void setStaticDrawableColor(int)>
<com.android.keyguard.clock.AnalogClockController: void onTimeTick()>
<com.android.location.provider.LocationProviderBase: void setEnabled(boolean)>
<com.android.server.locksettings.PasswordSlotManager: int getGsiImageNumber()>
<com.android.systemui.qs.customize.TileAdapter: boolean onFailedToRecycleView(com.android.systemui.qs.customize.TileAdapter.Holder)>
<com.android.server.pm.UserTypeDetails.Builder: com.android.server.pm.UserTypeDetails.Builder setDefaultRestrictions(android.os.Bundle)>
<com.android.server.trust.TrustArchive: java.lang.String formatDuration(long)>
<com.android.settingslib.deviceinfo.AbstractWifiMacAddressPreferenceController: java.lang.String getPreferenceKey()>
<com.android.systemui.car.window.OverlayPanelViewController: void <init>(android.content.Context,android.content.res.Resources,int,com.android.systemui.car.window.OverlayViewGlobalStateController,com.android.systemui.statusbar.FlingAnimationUtils.Builder,com.android.systemui.car.CarDeviceProvisionedController)>
<com.android.systemui.bubbles.BubbleStackView: boolean performAccessibilityActionInternal(int,android.os.Bundle)>
<javax.microedition.khronos.opengles.GL10: void glPolygonOffsetx(int,int)>
<com.android.systemui.shared.system.RecentsAnimationListener: void onTaskAppeared(com.android.systemui.shared.system.RemoteAnimationTargetCompat)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceController: void updateDisplayColorTemperature()>
<com.android.systemui.statusbar.policy.NetworkController.IconState: void <init>(boolean,int,java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void addCrossProfileIntentFilter(android.content.ComponentName,android.content.IntentFilter,int)>
<com.android.systemui.biometrics.AuthDialog: void animateToCredentialUI()>
<com.google.android.startop.iorap.AppLaunchEvent.ActivityLaunched: void <init>(long,byte[],int)>
<com.android.server.biometrics.BiometricServiceBase: void updateActiveGroup(int,java.lang.String)>
<com.android.settingslib.wifi.AccessPoint: boolean isPasspoint()>
<com.android.settingslib.core.AbstractPreferenceController: void displayPreference(androidx.preference.PreferenceScreen)>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: long calculateGoingToFullShadeDelay()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow.NotificationMenuItem: android.view.View getMenuView()>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onBiometricAuthenticated(int,android.hardware.biometrics.BiometricSourceType,boolean)>
<com.android.systemui.statusbar.notification.collection.NotifPipeline: void addOnBeforeSortListener(com.android.systemui.statusbar.notification.collection.listbuilder.OnBeforeSortListener)>
<com.android.printspooler.widget.PrintContentView: void openOptions()>
<com.android.pacprocessor.PacNative: com.android.pacprocessor.PacNative getInstance()>
<com.android.systemui.statusbar.phone.DozeServiceHost: boolean isProvisioned()>
<com.android.packageinstaller.wear.WearPackageArgs: android.os.Bundle setPackageName(android.os.Bundle,java.lang.String)>
<android.multiuser.BenchmarkRunner: boolean keepRunning()>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: void setTranslationX(float)>
<com.android.keyguard.KeyguardSecurityContainer: void dismiss(boolean,int)>
<com.android.systemui.statusbar.phone.BarTransitions.BarBackgroundDrawable: int getOpacity()>
<com.android.server.locksettings.LockSettingsStrongAuth: void unregisterStrongAuthTracker(android.app.trust.IStrongAuthTracker)>
<com.android.systemui.SwipeHelper: void setMaxSwipeProgress(float)>
<com.android.server.accessibility.FullScreenMagnificationGestureHandler.State: java.lang.String nameOf(com.android.server.accessibility.FullScreenMagnificationGestureHandler.State)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setAlpha(float,boolean,boolean)>
<com.android.server.accessibility.KeyboardInterceptor: void onKeyEvent(android.view.KeyEvent,int)>
<com.android.server.DynamicSystemService: boolean setAshmem(android.os.ParcelFileDescriptor,long)>
<com.android.systemui.statusbar.phone.StatusBar: void onHeadsUpPinnedModeChanged(boolean)>
<android.net.wifi.p2p.WifiP2pGroup: void <init>(android.net.wifi.p2p.WifiP2pGroup)>
<com.android.systemui.statusbar.notification.row.NotificationGuts: com.android.systemui.statusbar.notification.row.NotificationGuts.GutsContent getGutsContent()>
<android.net.wifi.IWifiManager: boolean removePasspointConfiguration(java.lang.String,java.lang.String)>
<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)>
<com.android.systemui.qs.external.CustomTile: long getStaleTimeout()>
<com.android.settingslib.development.AbstractLogdSizePreferenceController: boolean onPreferenceChange(androidx.preference.Preference,java.lang.Object)>
<com.android.server.ConnectivityService: java.lang.String[] getTetheringErroredIfaces()>
<com.android.settingslib.bluetooth.MapClientProfile: int getConnectionPolicy(android.bluetooth.BluetoothDevice)>
<com.android.server.biometrics.BiometricServiceBase: com.android.server.biometrics.BiometricUtils getBiometricUtils()>
<com.android.keyguard.KeyguardPinBasedInputView: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.NotificationUtils: int getFontScaledHeight(android.content.Context,int)>
<com.android.systemui.car.navigationbar.CarNavigationButton: android.view.View.OnClickListener getButtonClickListener(android.content.Intent)>
<com.android.server.telecom.TelecomLoaderService: void onStart()>
<android.net.wifi.p2p.WifiP2pManager: void connect(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.packageinstaller.PackageInstallerActivity.AppErrorDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.soundpicker.RingtoneReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.slice.SliceManagerService: void applyRestore(byte[],int)>
<android.net.wifi.p2p.WifiP2pManager.GroupInfoListener: void onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup)>
<com.android.settingslib.media.LocalMediaManager.DeviceCallback: void onRequestFailed(int)>
<com.android.systemui.util.leak.LeakDetector: void trackCollection(java.util.Collection,java.lang.String)>
<com.android.server.GestureLauncherService: boolean isCameraLiftTriggerSettingEnabled(android.content.Context,int)>
<com.android.server.Watchdog: void setActivityController(android.app.IActivityController)>
<com.android.server.pm.permission.PermissionManagerService: android.content.pm.ParceledListSlice queryPermissionsByGroup(java.lang.String,int)>
<com.android.systemui.statusbar.StatusBarIconView: float getIconScale()>
<com.android.systemui.statusbar.notification.row.HybridNotificationView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.shared.plugins.PluginManager: void addPluginListener(com.android.systemui.plugins.PluginListener,java.lang.Class)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: boolean handleSlideBack()>
<com.android.server.pm.SharedUserSetting: int[] getNotInstalledUserIds()>
<com.android.server.devicepolicy.DeviceStateCacheImpl: void setDeviceProvisioned(boolean)>
<com.android.systemui.statusbar.notification.row.NotifInflationErrorManager.NotifInflationErrorListener: void onNotifInflationErrorCleared(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<android.net.TetheredClient.AddressInfo: java.lang.String getHostname()>
<com.android.systemui.statusbar.phone.DozeParameters: int getPulseOutDuration()>
<com.android.systemui.car.navigationbar.CarNavigationBarController: void registerLeftBarTouchListener(android.view.View.OnTouchListener)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: void <init>(android.view.ViewGroup,com.android.systemui.statusbar.CommandQueue)>
<com.android.systemui.statusbar.phone.BiometricUnlockController: int getMode()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: boolean hasEmergencyCryptKeeperText()>
<com.android.photos.views.TiledImageRenderer.TileSource: int getImageHeight()>
<com.android.server.usb.descriptors.UsbConfigDescriptor: int getConfigValue()>
<android.net.wifi.WifiInfo.Builder: android.net.wifi.WifiInfo.Builder setSsid(byte[])>
<com.android.server.soundtrigger_middleware.SoundTriggerHw2Enforcer: void <init>(com.android.server.soundtrigger_middleware.ISoundTriggerHw2)>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.server.NativeDaemonEvent: java.io.FileDescriptor[] getFileDescriptors()>
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()>
<com.android.systemui.plugins.qs.QSTile.Icon: int getPadding()>
<com.android.statementservice.retriever.Utils: java.lang.String computeNormalizedSha256Fingerprint(byte[])>
<javax.microedition.khronos.opengles.GL10: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onActivityPinned(java.lang.String,int,int,int)>
<com.android.printspooler.widget.PageContentView: void init(com.android.printspooler.model.PageContentRepository.PageContentProvider,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.print.PrintAttributes.MediaSize,android.print.PrintAttributes.Margins)>
<com.android.keyguard.AlphaOptimizedLinearLayout: boolean hasOverlappingRendering()>
<com.android.server.pm.ShortcutService: boolean addDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
<com.android.systemui.SystemUIAppComponentFactory: android.content.BroadcastReceiver instantiateReceiverCompat(java.lang.ClassLoader,java.lang.String,android.content.Intent)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getProcessName()>
<com.android.systemui.statusbar.notification.collection.inflation.LowPriorityInflationHelper: void recheckLowPriorityViewAndInflate(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])>
<com.android.systemui.statusbar.phone.ObservableScrollView: boolean isHandlingTouchEvent()>
<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>
<javax.obex.ServerOperation: void streamClosed(boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onDraw(android.graphics.Canvas)>
<com.android.systemui.statusbar.notification.stack.AnimationFilter: boolean shouldAnimateY(android.view.View)>
<com.android.systemui.qs.tiles.UiModeNightTile: void onPowerSaveChanged(boolean)>
<com.android.systemui.dock.DockManagerImpl: void addAlignmentStateListener(com.android.systemui.dock.DockManager.AlignmentStateListener)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setSplitCodePaths(java.lang.String[])>
<com.android.systemui.statusbar.RemoteInputController: boolean isSpinning(java.lang.String,java.lang.Object)>
<com.android.packageinstaller.UninstallUninstalling: void onResult(int,int,java.lang.String)>
<javax.obex.ClientOperation: void <init>(int,javax.obex.ClientSession,javax.obex.HeaderSet,boolean)>
<com.android.server.pm.PackageManagerServiceUtils: boolean compressedFileExists(java.lang.String)>
<com.android.photos.BitmapRegionTileSource.BitmapSource: boolean loadInBackground()>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper: void updatePreviews()>
<com.android.systemui.statusbar.NotificationShelf: int getNotGoneIndex()>
<com.android.systemui.analytics.SensorLoggerSession: int getResult()>
<com.android.server.usb.descriptors.report.ReportCanvas: void openHeader(int)>
<com.android.nfc_extras.NfcAdapterExtras: java.lang.String getDriverName()>
<com.android.systemui.plugins.FalsingManager: void setQsExpanded(boolean)>
<com.android.systemui.qs.QSContainerImplController.Builder: com.android.systemui.qs.QSContainerImplController build()>
<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfoVersioned(android.content.pm.VersionedPackage,int,int)>
<android.net.wifi.IWifiScanner: android.os.Bundle getAvailableChannels(int,java.lang.String,java.lang.String)>
<com.android.server.media.MediaRouterService: void registerClientGroupId(android.media.IMediaRouterClient,java.lang.String)>
<com.android.systemui.plugins.qs.QSTile: com.android.systemui.plugins.qs.DetailAdapter getDetailAdapter()>
<com.android.server.locksettings.recoverablekeystore.serialization.KeyChainSnapshotParserException: void <init>(java.lang.String)>
<com.android.server.pm.parsing.pkg.PackageImpl: java.lang.String getSeInfo()>
<com.android.server.usb.UsbService: android.os.ParcelFileDescriptor openDevice(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.CommandQueue: void showShutdownUi(boolean,java.lang.String)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canDispatchAccessibilityEventLocked(int,android.view.accessibility.AccessibilityEvent)>
<android.net.wifi.util.HexEncoding: char[] encode(byte[],int,int)>
<com.android.systemui.statusbar.phone.KeyguardIndicationTextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.statusbar.notification.row.HybridNotificationView: android.widget.TextView getTextView()>
<com.android.systemui.statusbar.notification.row.ExpandableView: float getOutlineAlpha()>
<com.android.systemui.qs.tiles.UserDetailItemView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.SwipeHelper: void setPagingTouchSlop(float)>
<com.android.server.usb.descriptors.UsbInterfaceAssoc: void <init>(int,byte)>
<com.android.photos.views.TiledImageRenderer.TileSource: int getRotation()>
<com.android.server.media.MediaShellCommand: int onCommand(java.lang.String)>
<com.google.android.startop.iorap.ActivityInfo: java.lang.String toString()>
<com.android.keyguard.KeyguardAbsKeyInputView: void <init>(android.content.Context)>
<android.net.wifi.hotspot2.pps.UpdateParameter: void setTrustRootCertSha256Fingerprint(byte[])>
<com.android.server.NetworkManagementService: void clearDefaultNetId()>
<android.net.wifi.aware.PeerHandle: void <init>(int)>
<android.net.wifi.ScanResult: void setFlag(long)>
<javax.obex.ClientOperation: java.lang.String getType()>
<com.android.systemui.qs.tileimpl.QSIconViewImpl: android.view.View createIcon()>
<android.text.StaticLayoutPerfTest: void testDraw_PrecomputedText_Styled()>
<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.KeyEventDispatcher getKeyEventDispatcher()>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.plugins.GlobalActions.GlobalActionsManager provideGlobalActionsManager(com.android.systemui.globalactions.GlobalActionsComponent)>
<com.android.systemui.statusbar.phone.UserAvatarView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.car.navigationbar.CarNavigationBarView: void toggleNotificationUnseenIndicator(java.lang.Boolean)>
<com.android.systemui.qs.QSAnimator: void onRtlChanged()>
<android.net.IpMemoryStore: void <init>(android.content.Context)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean hasLockscreenWallpaper()>
<com.android.systemui.statusbar.policy.InflatedSmartReplies: boolean shouldShowSmartReplyView(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.policy.InflatedSmartReplies.SmartRepliesAndActions)>
<com.android.systemui.statusbar.policy.DeviceProvisionedController: int getCurrentUser()>
<com.android.systemui.statusbar.notification.MessagingImageTransformState: void setStartActualHeight(int)>
<com.android.systemui.statusbar.notification.row.NotificationGuts.GutsContent: android.view.View getContentView()>
<com.android.systemui.shared.plugins.PluginInstanceManager.PluginContextWrapper: java.lang.Object getSystemService(java.lang.String)>
<com.android.server.wallpaper.WallpaperManagerService.Lifecycle: void onStart()>
<com.android.systemui.statusbar.notification.NotificationEntryManager: java.util.List getActiveNotificationsForCurrentUser()>
<com.android.systemui.statusbar.CrossFadeHelper: void fadeOut(android.view.View,long,int,java.lang.Runnable)>
<com.android.systemui.statusbar.phone.UserAvatarView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.statusbar.phone.KeyguardBouncer: boolean shouldDismissOnMenuPressed()>
<com.android.systemui.tuner.PowerNotificationControlsFragment: void onCreate(android.os.Bundle)>
<com.android.printspooler.ui.PrinterRegistry: boolean isFavoritePrinter(android.print.PrinterId)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: void setClipTopAmount(int)>
<com.android.server.soundtrigger_middleware.ISoundTriggerHw2: boolean linkToDeath(android.os.IHwBinder.DeathRecipient,long)>
<com.android.systemui.statusbar.AnimatedImageView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.assist.ui.InvocationLightsView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.net.wifi.WifiScanner: void stopScan(android.net.wifi.WifiScanner.ScanListener)>
<com.android.systemui.statusbar.phone.NavigationBarView: com.android.systemui.statusbar.phone.RotationContextButton getRotateSuggestionButton()>
<com.android.systemui.tuner.StatusBarSwitch: void onDetached()>
<javax.microedition.khronos.egl.EGL10: boolean eglTerminate(javax.microedition.khronos.egl.EGLDisplay)>
<com.android.server.pm.PackageInstallerService: android.content.pm.ParceledListSlice getAllSessions(int)>
<com.android.server.biometrics.LoggableMonitor: void logOnAcquired(android.content.Context,int,int,int)>
<android.app.usage.UsageStatsManagerInternal: void reportInterruptiveNotification(java.lang.String,java.lang.String,int)>
<com.android.systemui.screenshot.ScreenshotNotificationSmartActionsProvider: java.util.concurrent.CompletableFuture getActions(java.lang.String,android.net.Uri,android.graphics.Bitmap,android.content.ComponentName,android.os.UserHandle)>
<com.android.systemui.statusbar.notification.collection.coalescer.GroupCoalescer: void attach(com.android.systemui.statusbar.NotificationListener)>
<com.android.systemui.volume.VolumeDialogControllerImpl: void setStreamVolume(int,int)>
<com.android.server.SystemServiceManager: boolean isSafeMode()>
<com.android.server.pm.PackageInstallerService: void systemReady()>
<com.android.systemui.qs.QuickStatusBarHeader: androidx.lifecycle.Lifecycle getLifecycle()>
<com.android.systemui.statusbar.policy.UserSwitcherController.BaseUserAdapter: long getItemId(int)>
<android.os.PackageManagerPerfTest: void testGetActivityInfo()>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone.OnHeadsUpPhoneListenerChange: void onHeadsUpGoingAwayStateChanged(boolean)>
<com.android.packageinstaller.television.ErrorFragment: void onGuidedActionClicked(androidx.leanback.widget.GuidedAction)>
<com.android.server.pm.dex.DynamicCodeLogger: java.util.Set getAllPackagesWithDynamicCodeLoading()>
<com.android.server.accessibility.BaseEventStreamTransformation: com.android.server.accessibility.EventStreamTransformation getNext()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setRowPinned(boolean)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setHeadsUpAnimatingAway(boolean)>
<com.android.systemui.biometrics.AuthContainerView.Builder: com.android.systemui.biometrics.AuthContainerView.Builder setCallback(com.android.systemui.biometrics.AuthDialogCallback)>
<com.android.systemui.util.DeviceConfigProxy: java.lang.String getString(java.lang.String,java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.SuperStatusBarViewFactory: void <init>(android.content.Context,com.android.systemui.util.InjectionInflationController,com.android.systemui.statusbar.notification.row.dagger.NotificationRowComponent.Builder,com.android.systemui.statusbar.phone.LockscreenLockIconController)>
<android.net.TetheringManager: void requestLatestTetheringEntitlementResult(int,android.os.ResultReceiver,boolean)>
<com.android.server.locksettings.LockSettingsStrongAuth: void dump(com.android.internal.util.IndentingPrintWriter)>
<com.android.server.usb.descriptors.report.ReportCanvas: void writeListItem(java.lang.String)>
<android.net.wifi.WifiInfo: boolean isTrusted()>
<com.android.keyguard.KeyguardSecurityCallback: void dismiss(boolean,int)>
<com.android.server.compat.PlatformCompat: boolean isChangeEnabledByPackageName(long,java.lang.String,int)>
<android.net.ConnectivityModuleConnector.ConnectivityModuleHealthListener: void onNetworkStackFailure(java.lang.String)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: void <init>(android.content.Context,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.phon.KeyguardBypassController,com.android.systemui.statusbar.phone.NotificationGroupManager,com.android.systemui.statusbar.policy.ConfigurationController)>
<com.android.server.pm.PackageManagerService: void extendVerificationTimeout(int,int,long)>
<com.android.server.appop.AppOpsService: void stopWatchingActive(com.android.internal.app.IAppOpsActiveCallback)>
<com.android.server.Watchdog.Monitor: void monitor()>
<com.android.server.display.BrightnessTracker: android.content.pm.ParceledListSlice getEvents(int,boolean)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void refreshState(java.lang.Object)>
<com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry: void updateEntry(boolean)>
<com.android.systemui.statusbar.notification.stack.AmbientState: int getInnerHeight()>
<com.android.server.locksettings.SyntheticPasswordManager: byte[] decryptSPBlob(java.lang.String,byte[],byte[])>
<android.net.wifi.rtt.ResponderLocation: int hashCode()>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void onBluetoothDevicesChanged()>
<android.net.wifi.hotspot2.pps.HomeSp: boolean validate()>
<com.android.systemui.statusbar.policy.RemoteInputView: void setRemoved()>
<com.android.systemui.statusbar.policy.BluetoothController: void disconnect(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<android.net.wifi.WifiScanner: void startScan(android.net.wifi.WifiScanner.ScanSettings,java.util.concurrent.Executor,android.net.wifi.WifiScanner.ScanListener,android.os.WorkSource)>
<com.google.android.startop.iorap.AppLaunchEvent.IntentProtoParcelable: android.content.Intent create(android.os.Parcel)>
<com.android.systemui.assist.AssistOrbView: android.widget.ImageView getLogo()>
<com.android.server.tv.tunerresourcemanager.ClientProfile: void releaseCas()>
<android.content.pm.PackageManagerInternal: android.content.ComponentName getHomeActivitiesAsUser(java.util.List,int)>
<com.android.egg.neko.Cat: android.graphics.Bitmap createBitmap(int,int)>
<com.android.server.infra.AbstractPerUserSystemService: android.graphics.drawable.Drawable getServiceIconLocked()>
<com.android.keyguard.KeyguardSecurityCallback: void reset()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: int getBatteryLevel()>
<com.android.server.pm.pkg.PackageStateUnserialized: void updateFrom(com.android.server.pm.pkg.PackageStateUnserialized)>
<com.android.server.trust.TrustArchive: void dump(java.io.PrintWriter,int,int,java.lang.String,boolean)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView.InteractionEventHandler: void didNotHandleTouchEvent(android.view.MotionEvent)>
<com.android.systemui.statusbar.notification.row.RowInflaterTask: void abort()>
<com.android.systemui.car.hvac.TemperatureView: float convertToFahrenheit(float)>
<com.android.systemui.statusbar.policy.UserSwitcherController: void showAddUserDialog()>
<com.android.systemui.car.window.OverlayPanelViewController: void setPanelExpanded(boolean)>
<com.android.systemui.qs.tiles.UserTile: void handleClick()>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: int getCallingUserId()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean clearResetPasswordToken(android.content.ComponentName)>
<com.android.server.usb.descriptors.report.UsbStrings: java.lang.String getAudioSubclassName(int)>
<com.android.systemui.statusbar.phone.NavigationBarView: void setWindowVisible(boolean)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isSystem()>
<com.android.server.compat.PlatformCompat: void reportChangeByPackageName(long,java.lang.String,int)>
<com.android.server.infra.AbstractPerUserSystemService: android.content.Context getContext()>
<android.net.wifi.util.HexEncoding: byte[] decode(java.lang.String)>
<android.content.pm.PackageManagerInternal: void removePackageListObserver(android.content.pm.PackageManagerInternal.PackageListObserver)>
<com.android.server.testing.shadows.ShadowBackupDataInput: void reset()>
<android.media.Session2Token: java.lang.String getServiceName()>
<com.android.printservice.recommendation.plugin.xerox.XeroxPrintServiceRecommendationPlugin: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean performDismissWithBlockingHelper(boolean)>
<com.android.systemui.car.userswitcher.FullScreenUserSwitcherViewController: boolean shouldFocusWindow()>
<com.android.uiautomator.core.Tracer: boolean isTracingEnabled()>
<com.android.server.infra.SecureSettingsServiceNameResolver: java.lang.String toString()>
<com.android.server.media.MediaRouterService: void selectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>
<com.android.server.pm.UserTypeDetails: int getMaxAllowedPerParent()>
<com.android.server.om.PackageManagerHelper: java.util.List getOverlayPackages(int)>
<com.android.gallery3d.glrenderer.GLCanvas: void restore()>
<com.android.systemui.car.userswitcher.UserGridRecyclerView.UserAdapter: android.content.pm.UserInfo createNewOrFindExistingGuest(android.content.Context)>
<com.android.server.contentsuggestions.ContentSuggestionsManagerService: void onStart()>
<com.android.systemui.statusbar.notification.NotificationUtils: float interpolate(float,float,float)>
<com.android.systemui.util.wakelock.DelayedWakeLock: java.lang.Runnable wrap(java.lang.Runnable)>
<android.graphics.perftests.RenderNodePerfTest: void testCreateRenderNodeNoName()>
<com.android.server.accessibility.AccessibilityManagerService: void onSystemActionsChanged()>
<com.android.systemui.statusbar.phone.StatusBar: void startLaunchTransitionTimeout()>
<com.android.keyguard.KeyguardSecurityViewFlipper: void showPromptReason(int)>
<com.android.systemui.statusbar.notification.collection.inflation.NotifInflater: void rebindViews(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.collection.inflation.NotifInflater.InflationCallback)>
<com.android.systemui.pip.phone.PipMenuActivityController.Listener: void onPipMenuStateChanged(int,boolean,java.lang.Runnable)>
<com.android.server.rollback.AppDataRollbackHelper: void destroyAppDataSnapshot(int,android.content.rollback.PackageRollbackInfo,int)>
<com.android.server.pm.PackageManagerService: void enterSafeMode()>
<com.android.systemui.statusbar.notification.NotificationIconDozeHelper: void <init>(android.content.Context)>
<com.android.packageinstaller.DeviceUtils: boolean isWear(android.content.Context)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void onNavigationModeChanged(int)>
<com.android.systemui.statusbar.ScreenRecordDrawable: boolean setVisible(boolean,boolean)>
<com.android.systemui.statusbar.phone.DozeServiceHost: boolean isPulsingBlocked()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileOwner(android.content.ComponentName,int)>
<com.android.settingslib.RestrictedLockImageSpan: int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint.FontMetricsInt)>
<com.android.keyguard.NumPadKey: void onLayout(boolean,int,int,int,int)>
<com.android.systemui.qs.tiles.DataSaverTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.BooleanState,java.lang.Object)>
<com.android.systemui.statusbar.phone.PanelViewController.OnConfigurationChangedListener: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.keyguard.KeyguardViewMediator: void setKeyguardEnabled(boolean)>
<com.android.keyguard.clock.BubbleClockController: boolean shouldShowStatusArea()>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: android.view.View getContentView()>
<com.android.systemui.qs.tiles.DataSaverTile: java.lang.CharSequence getTileLabel()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setRow(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.soundpicker.RingtonePickerActivity: void onNothingSelected(android.widget.AdapterView)>
<com.android.systemui.statusbar.phone.HeadsUpAppearanceController: void updatePanelTranslation()>
<com.android.server.pm.PackageManagerService: boolean performDexOptMode(java.lang.String,boolean,java.lang.String,boolean,boolean,java.lang.String)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: com.android.settingslib.bluetooth.CachedBluetoothDevice getSubDevice()>
<com.android.server.accounts.AccountManagerService: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void dozeTimeTick()>
<com.android.systemui.pip.phone.PipTouchHandler: android.graphics.Rect getNormalBounds()>
<com.android.systemui.qs.tileimpl.QSTileImpl: java.lang.CharSequence getTileLabel()>
<com.android.printservice.recommendation.plugin.xerox.XeroxPrintServiceRecommendationPlugin: void dataSetChanged()>
<com.android.systemui.shared.system.QuickStepContract: float getWindowCornerRadius(android.content.res.Resources)>
<com.android.server.pm.PackageManagerService: void waitForAppDataPrepared()>
<com.android.externalstorage.ExternalStorageProvider: void ejectRoot(java.lang.String)>
<com.android.server.biometrics.face.FaceService: long getHalDeviceId()>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(android.os.UserHandle)>
<com.android.systemui.tuner.TunerServiceImpl: void addTunable(com.android.systemui.tuner.TunerService.Tunable,java.lang.String[])>
<javax.microedition.khronos.egl.EGLContext: javax.microedition.khronos.opengles.GL getGL()>
<com.android.settingslib.inputmethod.InputMethodPreference: void updatePreferenceViews()>
<com.android.systemui.statusbar.policy.SmartReplyConstants: int getMaxSqueezeRemeasureAttempts()>
<com.android.server.devicepolicy.DevicePolicyManagerService: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)>
<com.android.systemui.statusbar.phone.StatusBar: void startPendingIntentDismissingKeyguard(android.app.PendingIntent)>
<android.net.wifi.rtt.IWifiRttManager: void startRanging(android.os.IBinder,java.lang.String,java.lang.String,android.os.WorkSource,android.net.wifi.rtt.RangingRequest,android.net.wifi.rtt.IRttCallback)>
<com.android.systemui.shared.system.InputMonitorCompat: com.android.systemui.shared.system.InputMonitorCompat fromBundle(android.os.Bundle,java.lang.String)>
<com.android.gallery3d.common.Utils: java.lang.String escapeXml(java.lang.String)>
<android.text.PrecomputedTextPerfTest: void testCreate_NoStyled_NoHyphenation()>
<com.android.server.audio.AudioService: void <init>(android.content.Context,com.android.server.audio.AudioSystemAdapter,com.android.server.audio.SystemServerAdapter)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void updateChildrenHeaderAppearance()>
<com.android.systemui.statusbar.phone.StatusBar: void preloadRecentApps()>
<android.app.usage.UsageStatsManagerInternal: void reportLocusUpdate(android.content.ComponentName,int,android.content.LocusId,android.os.IBinder)>
<com.android.printservice.recommendation.plugin.hp.ServiceListener: void start()>
<com.android.server.Watchdog.HandlerChecker: void run()>
<android.perftests.utils.ManualBenchmarkState: boolean keepRunning(long)>
<com.android.systemui.statusbar.notification.stack.NotificationListItem: void addChildNotification(com.android.systemui.statusbar.notification.stack.NotificationListItem,int)>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void removeListItem(com.android.systemui.statusbar.notification.stack.NotificationListItem)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setInShelf(boolean)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setPackageName(java.lang.String)>
<com.android.server.usb.descriptors.Usb10ASFormatI: byte getSampleFreqType()>
<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasStorageInterface()>
<com.android.systemui.car.window.SystemUIOverlayWindowController: android.view.ViewGroup getBaseLayout()>
<com.android.systemui.statusbar.phone.LightBarController: void <init>(android.content.Context,com.android.systemui.plugins.DarkIconDispatcher,com.android.systemui.statusbar.policy.BatteryController,com.android.systemui.statusbar.phone.NavigationModeController)>
<com.android.settingslib.utils.IconCache: android.graphics.drawable.Drawable getIcon(android.graphics.drawable.Icon)>
<android.net.wifi.hotspot2.pps.Credential: boolean isX509CertificateEquals(java.security.cert.X509Certificate,java.security.cert.X509Certificate)>
<com.android.systemui.qs.tiles.BluetoothTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.statusbar.policy.BluetoothController,com.android.systemui.plugins.ActivityStarter)>
<com.android.server.protolog.common.IProtoLogGroup: void setLogToProto(boolean)>
<com.android.server.policy.PhoneWindowManager: void screenTurningOff(com.android.server.policy.WindowManagerPolicy.ScreenOffListener)>
<com.android.systemui.statusbar.phone.NotificationListenerWithPlugins: android.service.notification.NotificationListenerService.RankingMap getCurrentRanking()>
<com.android.printspooler.widget.PrintContentView.OptionsStateController: boolean canCloseOptions()>
<com.android.systemui.statusbar.policy.NetworkController.SignalCallback: void setMobileDataIndicators(com.android.systemui.statusbar.policy.NetworkController.IconState,com.android.systemui.statusbar.policy.NetworkController.IconState,int,int,boolean,boolean,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,boolean,int,boolean)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void reset(boolean)>
<com.android.systemui.statusbar.AlertingNotificationManager: boolean removeNotification(java.lang.String,boolean)>
<com.android.settingslib.bluetooth.MapProfile: void finalize()>
<com.android.server.infra.AbstractMasterSystemService: boolean isBindInstantServiceAllowed()>
<com.android.server.biometrics.EnumerateClient: void notifyUserActivity()>
<com.android.providers.settings.SettingsHelper: boolean isReplacedSystemSetting(java.lang.String)>
<com.android.server.usb.descriptors.UsbDescriptor: byte getType()>
<android.net.wifi.aware.PublishDiscoverySession: void <init>(android.net.wifi.aware.WifiAwareManager,int,int)>
<android.net.wifi.WifiInfo: int getLinkSpeed()>
<com.android.server.vr.EnabledComponentsObserver: void onUsersChanged()>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean isDefaultDisplay()>
<com.android.systemui.dagger.DependencyProvider: com.android.internal.util.NotificationMessagingUtil provideNotificationMessagingUtil(android.content.Context)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: java.lang.String getDefaultDialer(int)>
<com.android.settingslib.media.PhoneMediaDevice: java.lang.String getName()>
<com.android.server.pm.PackageManagerService: void freeStorageAndNotify(java.lang.String,long,int,android.content.pm.IPackageDataObserver)>
<com.android.server.biometrics.face.FaceService: boolean hasReachedEnrollmentLimit(int)>
<com.android.server.media.MediaSessionService: void onSwitchUser(int)>
<android.net.wifi.rtt.ResponderLocation: boolean isZaxisSubelementValid()>
<com.android.server.autofill.ui.SaveUi.OnSaveListener: void startIntentSender(android.content.IntentSender,android.content.Intent)>
<android.net.wifi.WifiManager.LocalOnlyHotspotReservation: android.net.wifi.SoftApConfiguration getSoftApConfiguration()>
<com.android.server.audio.MediaFocusControl: void updateMultiAudioFocus(boolean)>
<com.android.systemui.plugins.PluginEnablerImpl: void setEnabled(android.content.ComponentName)>
<com.android.systemui.media.dialog.MediaOutputController: void onRequestFailed(int)>
<com.android.systemui.util.InjectionInflationController.ViewInstanceCreator: com.android.systemui.statusbar.NotificationShelf creatNotificationShelf()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void showRecentApps(boolean)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: void <init>(android.content.Context)>
<com.android.statementservice.retriever.AndroidPackageInfoFetcher: java.util.List getCertFingerprints(java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyCacheImpl: void onUserRemoved(int)>
<com.android.server.accounts.AccountManagerService: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],java.lang.String)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean isSecure()>
<com.android.server.locksettings.LockSettingsStrongAuth: void removeUser(int)>
<com.android.systemui.PluginInflateContainer: void onPluginDisconnected(com.android.systemui.plugins.ViewProvider)>
<com.android.server.audio.AudioService.AudioPolicyProxy: void binderDied()>
<com.android.server.media.MediaSession2Record: boolean checkPlaybackActiveState(boolean)>
<com.android.powermodel.ComponentActivity: void <init>(com.android.powermodel.AttributionKey)>
<com.android.systemui.statusbar.phone.NavigationBarInflaterView: void onLikelyDefaultLayoutChange()>
<com.android.systemui.biometrics.AuthBiometricView: void onAuthenticationSucceeded()>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setWapiEnterpriseConfig(android.net.wifi.WifiEnterpriseConfig)>
<com.android.systemui.classifier.FalsingManagerImpl: void onNotificationDoubleTap(boolean,float,float)>
<com.android.server.hdmi.SelectRequestBuffer.SelectRequest: boolean isLocalDeviceReady()>
<com.android.systemui.statusbar.phone.NavigationBarView: void setDisabledFlags(int)>
<com.android.systemui.usb.UsbDebuggingSecondaryUserActivity: void <init>(com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setDismissRtl(boolean)>
<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(int)>
<javax.microedition.khronos.opengles.GL11: void glGetLightxv(int,int,int[],int)>
<com.android.systemui.SystemUIApplication: void startServicesIfNeeded()>
<com.android.systemui.statusbar.notification.stack.NotificationSwipeHelper.NotificationCallback: void onSnooze(android.service.notification.StatusBarNotification,com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper.SnoozeOption)>
<android.net.wifi.WifiManager.ActionListener: void onFailure(int)>
<com.android.server.pm.SharedUserSetting: java.util.List getPackages()>
<com.android.server.policy.PhoneWindowManager: int getMaxWallpaperLayer()>
<com.android.server.inputmethod.InputMethodManagerService: int getInputMethodWindowVisibleHeight()>
<com.android.providers.settings.SettingsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<com.android.systemui.car.navigationbar.CarNavigationBarController: android.view.ViewGroup getBottomWindow()>
<com.android.systemui.statusbar.phone.ShadeController: void animateCollapsePanels(int,boolean,boolean,float)>
<com.android.server.audio.AudioSystemAdapter: int setDeviceConnectionState(int,int,java.lang.String,java.lang.String,int)>
<com.android.server.SystemService: void publishBinderService(java.lang.String,android.os.IBinder)>
<com.android.server.testing.shadows.ShadowUserManager: boolean isUserUnlocked(int)>
<com.android.systemui.statusbar.notification.row.PartialConversationInfo: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<com.android.systemui.statusbar.policy.SecurityController: java.lang.String getDeviceOwnerName()>
<com.android.systemui.tv.TvSystemUIFactory: com.android.systemui.dagger.SystemUIRootComponent buildSystemUIRootComponent(android.content.Context)>
<com.android.server.timezonedetector.TimeZoneDetectorService.Lifecycle: void onStart()>
<com.android.server.pm.PackageSettingBase: void setVolumeUuid(java.lang.String)>
<com.android.server.contentcapture.ContentCaptureManagerService: void onServiceNameChanged(int,java.lang.String,boolean)>
<com.android.systemui.statusbar.policy.ScrollAdapter: android.view.View getHostView()>
<com.android.printspooler.widget.PrintContentView.OptionsStateController: boolean canOpenOptions()>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: boolean isInputRestricted()>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: android.view.View getMenuView()>
<com.android.server.display.DisplayModeDirector.DesiredDisplayModeSpecs: void <init>(int,com.android.server.display.DisplayModeDirector.RefreshRateRange,com.android.server.display.DisplayModeDirector.RefreshRateRange)>
<com.android.systemui.volume.VolumeDialogImpl: void onStateChangedH(com.android.systemui.plugins.VolumeDialogController.State)>
<com.android.systemui.tuner.CustomListPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.server.lights.LightsService: void onStart()>
<com.android.server.contentsuggestions.ContentSuggestionsManagerService: void enforceCallingPermissionForManagement()>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector descriptionMatches(java.lang.String)>
<com.android.server.pm.permission.PermissionManagerService: boolean addPermission(android.content.pm.PermissionInfo,boolean)>
<com.android.server.incident.IncidentCompanionService: void onBootPhase(int)>
<com.android.systemui.appops.AppOpItem: long getTimeStarted()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void stopWaitingForOpenPanelGesture(boolean,float)>
<com.android.server.usb.descriptors.report.HTMLReportCanvas: void openParagraph(boolean)>
<com.android.server.input.InputManagerService.WindowManagerCallbacks: boolean notifyFocusChanged(android.os.IBinder,android.os.IBinder)>
<com.android.server.TelephonyRegistry: void notifyCellInfo(java.util.List)>
<com.android.server.inputmethod.InputMethodManagerInternal: java.util.List getInputMethodListAsUser(int)>
<com.android.server.storage.DeviceStorageMonitorInternal: void checkMemory()>
<com.android.settingslib.drawable.UserIconDrawable: android.graphics.drawable.Drawable.ConstantState getConstantState()>
<com.android.server.utils.ManagedApplicationService.LogEvent: void <init>(long,android.content.ComponentName,int)>
<com.android.systemui.globalactions.GlobalActionsDialog.MyAdapter: com.android.systemui.globalactions.GlobalActionsDialog.Action getItem(int)>
<com.android.keyguard.KeyguardClockSwitch: void setFormat24Hour(java.lang.CharSequence)>
<com.android.gallery3d.glrenderer.GLCanvas: void setAlpha(float)>
<com.android.server.pm.dex.PackageDexUsage.DexUseInfo: java.util.Set getLoaderIsas()>
<android.os.StatsDimensionsValue: void writeToParcel(android.os.Parcel,int)>
<com.android.settingslib.widget.AppEntityInfo: java.lang.CharSequence getTitle()>
<com.android.packageinstaller.television.UninstallAppProgress.ProgressFragment: void setDeviceManagerButtonVisible(boolean)>
<com.android.server.people.data.EventIndex: boolean isEmpty()>
<com.android.server.usb.descriptors.UsbVCInputTerminal: void <init>(int,byte,byte)>
<javax.microedition.khronos.opengles.GL11Ext: void glTexParameterfv(int,int,float[],int)>
<com.android.systemui.bubbles.BubbleOverflowActivity: void onResume()>
<com.android.keyguard.clock.AnalogClockController: void setDarkAmount(float)>
<com.android.settingslib.CustomDialogPreferenceCompat.CustomPreferenceDialogFragment: void onClick(android.content.DialogInterface,int)>
<com.android.printspooler.ui.FusedPrintersProvider: void onLocationChanged(android.location.Location)>
<com.android.systemui.bubbles.BubbleData: void removeBubblesWithPackageName(java.lang.String,int)>
<com.android.systemui.media.dialog.MediaOutputBaseDialog: void onMediaStoppedOrPaused()>
<com.android.server.audio.BtHelper: java.lang.String scoAudioModeToString(int)>
<com.android.settingslib.CustomEditTextPreference: void onClick(android.content.DialogInterface,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void generateChildOrderChangedEvent()>
<com.android.gallery3d.glrenderer.GLES20IdImpl: void glDeleteFramebuffers(javax.microedition.khronos.opengles.GL11ExtensionPack,int,int[],int)>
<com.android.server.statusbar.StatusBarManagerService: void onNotificationBubbleChanged(java.lang.String,boolean,int)>
<com.android.powermodel.ActivityReport.Builder: void addActivity(com.android.powermodel.Component,com.android.powermodel.ComponentActivity)>
<com.android.printspooler.ui.PageAdapter: boolean isOpened()>
<com.android.packageinstaller.PackageUtil: android.view.View initSnippet(android.view.View,java.lang.CharSequence,android.graphics.drawable.Drawable)>
<com.android.systemui.qs.SlashDrawable: void setAnimationEnabled(boolean)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void revokeStoragePermissionsIfScopeExpanded(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.server.appop.AppOpsService: android.app.RuntimeAppOpAccessMessage collectRuntimeAppOpAccessMessage()>
<com.android.server.people.data.PackageData: int getUserId()>
<com.android.server.usb.UsbAlsaDevice: void stop()>
<com.android.systemui.statusbar.notification.PropertyAnimator: void applyImmediately(android.view.View,com.android.systemui.statusbar.notification.AnimatableProperty,float)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void setLeftAssistIcon(android.graphics.drawable.Drawable)>
<com.android.systemui.toast.ToastUI: void hideToast(java.lang.String,android.os.IBinder)>
<com.android.systemui.globalactions.GlobalActionsDialog.Action: boolean shouldBeSeparated()>
<com.android.server.ConnectivityService: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
<com.android.server.textclassifier.FixedSizeQueue: boolean isEmpty()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onAttachedToWindow()>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setPanelFullWidth(boolean)>
<com.android.printspooler.widget.CustomErrorEditText: void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)>
<com.android.systemui.qs.AutoSizingList: void setAdapter(android.widget.ListAdapter)>
<com.android.settingslib.NetworkPolicyEditor: void writeAsync()>
<com.android.server.display.DisplayModeDirector: com.android.server.display.DisplayModeDirector.DesiredDisplayModeSpecs getDesiredDisplayModeSpecs(int)>
<com.android.settingslib.volume.MediaSessions: void <init>(android.content.Context,android.os.Looper,com.android.settingslib.volume.MediaSessions.Callbacks)>
<android.app.PendingIntentPerfTest: void setUp()>
<com.android.systemui.assist.ui.InvocationLightsView: void updateDarkness(float)>
<android.net.wifi.hotspot2.pps.HomeSp: long[] getMatchAllOis()>
<com.android.systemui.car.notification.CarHeadsUpNotificationSystemContainer: boolean isVisible()>
<com.android.server.utils.DeviceConfigInterface: long getLong(java.lang.String,java.lang.String,long)>
<com.android.commands.hid.Device: void addDelay(int)>
<com.android.systemui.keyboard.KeyboardUI: void onTabletModeChanged(long,boolean)>
<com.android.systemui.statusbar.phone.LockscreenLockIconController: void onBiometricAuthModeChanged(boolean,boolean,android.hardware.biometrics.BiometricSourceType)>
<com.android.settingslib.wifi.AccessPoint: java.lang.String getTitle()>
<com.android.server.pm.PackageKeySetData: void removeAllDefinedKeySets()>
<com.android.server.pm.PackageManagerService: java.lang.String getWellbeingPackageName()>
<android.net.wifi.hotspot2.PasspointConfiguration: long getUsageLimitUsageTimePeriodInMinutes()>
<com.android.systemui.qs.QSFragment: void setHost(com.android.systemui.qs.QSTileHost)>
<com.android.server.locksettings.LockSettingsService.Lifecycle: void onCleanupUser(int)>
<com.android.uiautomator.testrunner.TestCaseCollector: java.util.List getTestCases()>
<com.android.systemui.theme.ThemeOverlayController: void start()>
<com.android.printspooler.ui.FusedPrintersProvider: void onReset()>
<com.android.systemui.statusbar.NotificationShelf: boolean isInteractive()>
<com.android.server.appprediction.AppPredictionPerUserService: void sortAppTargetsLocked(android.app.prediction.AppPredictionSessionId,android.content.pm.ParceledListSlice,android.app.prediction.IPredictionCallback)>
<com.android.systemui.statusbar.NavigationBarController: void onDisplayRemoved(int)>
<com.android.systemui.plugins.ViewProvider: android.view.View getView()>
<com.android.server.ConsumerIrService: void transmit(java.lang.String,int,int[])>
<com.android.systemui.qs.QuickQSPanel: void addSecurityFooter()>
<com.android.systemui.statusbar.StatusBarMobileView: int getVisibleState()>
<com.android.systemui.qs.PagedTileLayout: void onRtlPropertiesChanged(int)>
<com.android.server.accounts.AccountManagerService: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
<com.android.server.policy.PhoneWindowManager: android.view.KeyEvent dispatchUnhandledKey(android.os.IBinder,android.view.KeyEvent,int)>
<com.android.server.uri.GrantUri: void dumpDebug(android.util.proto.ProtoOutputStream,long)>
<com.android.server.textclassifier.FixedSizeQueue: java.lang.Object poll()>
<com.android.server.HardwarePropertiesManagerService: android.os.CpuUsageInfo[] getCpuUsages(java.lang.String)>
<com.android.systemui.keyguard.WakefulnessLifecycle: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.AlertingNotificationManager: void removeAlertEntry(java.lang.String)>
<com.android.systemui.plugins.FalsingManager: void onLeftAffordanceOn()>
<com.android.location.provider.LocationProviderBase: int onGetStatus(android.os.Bundle)>
<com.android.systemui.accessibility.MirrorWindowControl.MirrorWindowDelegate: void move(int,int)>
<com.android.systemui.qs.SignalTileView: void onLayout(boolean,int,int,int,int)>
<com.android.server.IntentResolver: void dumpDebug(android.util.proto.ProtoOutputStream,long)>
<com.android.server.webkit.SystemInterface: int onWebViewProviderChanged(android.content.pm.PackageInfo)>
<com.android.systemui.plugins.ClockPlugin: int getPreferredY(int)>
<android.net.wifi.WifiEnterpriseConfig: boolean saveToSupplicant(android.net.wifi.WifiEnterpriseConfig.SupplicantSaver)>
<com.android.systemui.classifier.FalsingManagerFake: void onTrackingStarted(boolean)>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isHiddenAtAll()>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: long getDisableTime()>
<com.android.server.rollback.RollbackPackageHealthObserver: java.lang.String getName()>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: void reboot(boolean)>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void onCountdown(long)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isEphemeralUser(android.content.ComponentName)>
<com.android.systemui.statusbar.policy.SecurityController: boolean isNetworkLoggingEnabled()>
<com.android.server.locksettings.LockSettingsService.Lifecycle: void onBootPhase(int)>
<android.net.TetheringManager.StartTetheringCallback: void onTetheringStarted()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetFramebufferAttachmentParameterivOES(int,int,int,java.nio.IntBuffer)>
<com.android.systemui.statusbar.phone.BackGestureTfClassifierProvider: void release()>
<com.android.systemui.statusbar.phone.DemoStatusIcons: void addDemoWifiView(com.android.systemui.statusbar.phone.StatusBarSignalPolicy.WifiIconState)>
<com.android.systemui.shared.system.BackgroundExecutor: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>
<com.android.systemui.pip.PipBoundsHandler: void dump(java.io.PrintWriter,java.lang.String)>
<android.widget.TextViewPrecomputedTextPerfTest: void testOnMeasure_PrecomputedText_Selectable()>
<android.processor.view.inspector.InspectableClassModel.IntEnumEntry: void <init>(int,java.lang.String)>
<com.android.systemui.pip.tv.PipManager: void onPipTransitionFinished(android.content.ComponentName,int)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void requestSelectLayout(boolean)>
<com.android.settingslib.deviceinfo.AbstractConnectivityPreferenceController: void updateConnectivity()>
<com.android.dynsystem.SparseInputStream: long getUnsparseSize()>
<com.android.settingslib.utils.applications.AppUtils: java.lang.CharSequence getApplicationLabel(android.content.pm.PackageManager,java.lang.String)>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: boolean isCollapsing()>
<com.android.server.usb.descriptors.report.HTMLReportCanvas: void <init>(com.android.server.usb.descriptors.UsbDescriptorParser,java.lang.StringBuilder)>
<com.android.systemui.globalactions.GlobalActionsDialog.MyAdapter: long getItemId(int)>
<com.android.systemui.statusbar.HeadsUpStatusBarView: android.os.Bundle onSaveInstanceState()>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.plugins.GlobalActions provideGlobalActions(com.android.systemui.globalactions.GlobalActionsImpl)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void updateStatusBarIcons()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: int getOriginalIconColor()>
<com.android.systemui.plugins.ClockPlugin: android.view.View getBigClockView()>
<com.android.systemui.qs.QSPanel: void onMediaVisibilityChanged(java.lang.Boolean)>
<com.android.settingslib.widget.AppEntitiesHeaderController: com.android.settingslib.widget.AppEntitiesHeaderController setHeaderTitleRes(int)>
<com.android.statementservice.retriever.Statement: boolean equals(java.lang.Object)>
<com.android.systemui.settings.ToggleSliderView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.DessertCaseDream: void onDreamingStarted()>
<com.android.keyguard.KeyguardUpdateMonitor: void onCameraLaunched()>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStorageException: void <init>(java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: boolean disallowSingleClick(float,float)>
<android.net.wifi.ScanResult.RadioChainInfo: boolean equals(java.lang.Object)>
<android.net.IpMemoryStore: android.net.IpMemoryStore getMemoryStore(android.content.Context)>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void onPowerSaveChanged(boolean)>
<com.android.server.pm.pkg.PackageStateUnserialized: com.android.server.pm.pkg.PackageStateUnserialized setLastPackageUsageTimeInMills(int,long)>
<com.android.systemui.classifier.FalsingManagerImpl: void onLeftAffordanceOn()>
<com.android.systemui.statusbar.phone.KeyguardBouncer: boolean isShowing()>
<com.android.systemui.statusbar.CommandQueue: void showAssistDisclosure()>
<com.android.pacprocessor.PacService: void onDestroy()>
<com.android.server.media.MediaSessionRecordImpl: void dump(java.io.PrintWriter,java.lang.String)>
<javax.microedition.khronos.opengles.GL10: void glRotatef(float,float,float,float)>
<com.android.server.usb.UsbHostManager: void dumpDescriptors(com.android.internal.util.IndentingPrintWriter,java.lang.String[])>
<android.net.wifi.IActionListener: void onSuccess()>
<com.android.server.statusbar.StatusBarManagerInternal: void abortTransient(int,int[])>
<com.android.server.biometrics.AuthenticationClient: boolean wasUserDetected()>
<com.android.server.integrity.parser.RandomAccessInputStream: long skip(long)>
<com.android.server.audio.AudioService: boolean isStreamAffectedByRingerMode(int)>
<com.android.systemui.doze.DozeScreenBrightness: void onSensorChanged(android.hardware.SensorEvent)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileActivePasswordSufficientForParent(int)>
<com.android.systemui.qs.tiles.HotspotTile: com.android.systemui.plugins.qs.QSTile.BooleanState newTileState()>
<com.android.server.accessibility.gestures.GestureMatcher.StateChangeListener: void onStateChanged(int,int,android.view.MotionEvent,android.view.MotionEvent,int)>
<com.android.systemui.shared.recents.view.AppTransitionAnimationSpecsFuture: android.view.IAppTransitionAnimationSpecsFuture getFuture()>
<com.android.systemui.statusbar.phone.NavigationBarView: android.view.View getCurrentView()>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<android.net.wifi.p2p.WifiP2pManager: void setWfdInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pWfdInfo,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.systemui.assist.AssistManager: void <init>(com.android.systemui.statusbar.policy.DeviceProvisionedController,android.content.Context,com.android.internal.app.AssistUtils,com.android.systemui.assist.AssistHandleBehaviorController,com.android.systemui.statusbar.CommandQueue,com.android.systemui.assist.PhoneStateMonitor,com.android.systemui.recents.OverviewProxyService,com.android.systemui.statusbar.policy.ConfigurationController,dagger.Lazy,com.android.systemui.assist.ui.DefaultUiController,com.android.systemui.assis.AssistLogger)>
<com.android.shell.HeapDumpActivity: void onStop()>
<com.android.server.biometrics.LoggableMonitor: int statsModality()>
<com.android.systemui.SliceBroadcastRelayHandler: void <init>(android.content.Context,com.android.systemui.broadcast.BroadcastDispatcher)>
<android.net.wifi.WifiConfiguration: void setPasspointManagementObjectTree(java.lang.String)>
<com.android.systemui.statusbar.phone.StatusBar: boolean inImmersiveMode()>
<com.android.wallpapercropper.WallpaperCropActivity: void init()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void checkSnoozeLeavebehind()>
<com.android.commands.incident.IncidentHelper: void log(int,java.lang.String,java.lang.String)>
<com.android.server.pm.UserManagerService: boolean isUserOfType(int,java.lang.String)>
<com.android.systemui.car.statusbar.DozeServiceHost: boolean isBlockingDoze()>
<com.android.gallery3d.glrenderer.GLCanvas: void save()>
<com.android.systemui.statusbar.notification.row.RowContentBindParams: int getContentViews()>
<android.widget.TextViewAutoSizeLayoutPerfTest: void <init>(java.lang.String,int)>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isFullyAwake()>
<com.android.systemui.bubbles.BubbleTaskView: void surfaceCreated(android.view.SurfaceHolder)>
<com.android.server.audio.AudioService.Lifecycle: void <init>(android.content.Context)>
<javax.obex.ServerOperation: void abort()>
<com.android.settingslib.searchprovider.SettingsXmlIndexProvider: java.util.Collection getIntentResources()>
<android.net.wifi.aware.ConfigRequest.Builder: android.net.wifi.aware.ConfigRequest.Builder setClusterHigh(int)>
<com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProvider: boolean shouldBubbleUp(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.phone.BounceInterpolator: float getInterpolation(float)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: android.graphics.Point getRevealAnimationOrigin()>
<com.android.media.remotedisplay.RemoteDisplay: void setPresentationDisplayId(int)>
<com.android.powermodel.AppPower: java.util.Set getComponents()>
<com.android.systemui.statusbar.notification.row.NotificationGutsManager.OnSettingsClickListener: void onSettingsClick(java.lang.String)>
<com.android.printspooler.model.PrintSpoolerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexxOES(int,int,int,int,int)>
<com.android.systemui.statusbar.phone.NotificationGroupManager: java.util.ArrayList getLogicalChildren(android.service.notification.StatusBarNotification)>
<com.android.server.usb.descriptors.report.HTMLReportCanvas: void closeParagraph()>
<com.android.settingslib.drawer.SwitchController: com.android.settingslib.drawer.SwitchController.MetaData getMetaData()>
<com.android.server.biometrics.AuthenticationClient: boolean onEnumerationResult(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.server.display.whitebalance.AmbientSensor.AmbientColorTemperatureSensor.Callbacks: void onAmbientColorTemperatureChanged(float)>
<com.android.systemui.SwipeHelper: void onDownUpdate(android.view.View,android.view.MotionEvent)>
<android.net.util.NetdService: android.net.INetd get(long)>
<com.android.keyguard.KeyguardClockSwitch: boolean hasCustomClock()>
<com.android.packageinstaller.wear.WearPackageArgs: java.lang.String getPackageName(android.os.Bundle)>
<com.android.server.tv.UinputBridge: void sendPointerDown(android.os.IBinder,int,int,int)>
<com.android.commands.sm.Sm: void runFormat()>
<com.android.server.PinnerService: void update(android.util.ArraySet,boolean)>
<com.android.server.usb.descriptors.report.HTMLReportCanvas: void closeListItem()>
<com.google.android.startop.iorapd.IorapWorkFlowTest: void testNormalWorkFlow()>
<com.android.systemui.bubbles.BubbleData.Listener: void applyUpdate(com.android.systemui.bubbles.BubbleData.Update)>
<com.android.media.tv.remoteprovider.TvRemoteProvider: void sendGamepadKeyDown(android.os.IBinder,int)>
<com.android.server.biometrics.BiometricServiceBase: com.android.server.biometrics.ClientMonitor getCurrentClient()>
<android.net.wifi.WifiInfo: int getNetworkId()>
<com.android.uiautomator.core.UiAutomatorBridge: android.view.accessibility.AccessibilityEvent executeCommandAndWaitForAccessibilityEvent(java.lang.Runnable,android.app.UiAutomation.AccessibilityEventFilter,long)>
<com.android.gallery3d.glrenderer.GLCanvas: void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,float[],int,int,int,int)>
<com.android.systemui.shared.plugins.PluginInstanceManager: void onPackageRemoved(java.lang.String)>
<com.android.settingslib.NetworkPolicyEditor: int getPolicyCycleDay(android.net.NetworkTemplate)>
<com.android.systemui.qs.TouchAnimator.Builder: com.android.systemui.qs.TouchAnimator.Builder setStartDelay(float)>
<com.android.gallery3d.glrenderer.RawTexture: int getTarget()>
<com.android.settingslib.media.MediaDevice: void disconnect()>
<com.android.settingslib.suggestions.SuggestionControllerMixinCompat.SuggestionControllerHost: androidx.loader.app.LoaderManager getLoaderManager()>
<android.net.wifi.aware.IWifiAwareManager: void connect(android.os.IBinder,java.lang.String,java.lang.String,android.net.wifi.aware.IWifiAwareEventCallback,android.net.wifi.aware.ConfigRequest,boolean)>
<com.android.systemui.util.leak.GarbageMonitor.MemoryTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.State,java.lang.Object)>
<com.android.settingslib.inputmethod.InputMethodSubtypePreference: void <init>(android.content.Context,android.view.inputmethod.InputMethodSubtype,android.view.inputmethod.InputMethodInfo)>
<com.android.systemui.keyguard.KeyguardSliceProvider: void registerClockUpdate()>
<com.android.systemui.statusbar.notification.TransformState: int getViewHeight()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.keyguard.KeyguardSecurityCallback: void onUserInput()>
<com.android.printspooler.model.PrintSpoolerService: void setPrintJobCancelling(android.print.PrintJobId,boolean)>
<com.android.systemui.assist.AssistOrbContainer: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void updateContentTransformation()>
<com.android.server.recoverysystem.RecoverySystemService: boolean rebootWithLskf(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setContractedChild(android.view.View)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void onCancelClicked()>
<com.android.systemui.statusbar.phone.StatusBar: boolean hideStatusBarIconsForBouncer()>
<com.android.server.tv.tunerresourcemanager.CasResource: int getSystemId()>
<com.android.systemui.pip.phone.PipAccessibilityInteractionConnection.AccessibilityCallbacks: void onAccessibilityShowMenu()>
<com.android.simappdialog.InstallCarrierAppActivity: void onClick(android.view.View)>
<android.app.StatsManager.StatsUnavailableException: void <init>(java.lang.String)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void onRemoteInputActive(boolean)>
<com.android.systemui.qs.QSPanel: void onConfigurationChanged(android.content.res.Configuration)>
<android.net.wifi.WifiManager: void setScanThrottleEnabled(boolean)>
<com.android.shell.HeapDumpProvider: boolean onCreate()>
<android.net.wifi.ScanResult: int getWifiStandard()>
<com.android.systemui.statusbar.phone.LockscreenLockIconController: void attach(com.android.systemui.statusbar.phone.LockIcon)>
<com.android.server.biometrics.Utils: boolean isKeyguard(android.content.Context,java.lang.String)>
<com.android.keyguard.clock.AnalogClockController: int getPreferredY(int)>
<com.android.server.biometrics.iris.IrisService: java.util.List getEnrolledTemplates(int)>
<com.android.systemui.statusbar.policy.NetworkController: com.android.systemui.statusbar.policy.DataSaverController getDataSaverController()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setKeyguardFadingAway(boolean)>
<com.android.systemui.statusbar.notification.collection.NotifCollection: void attach(com.android.systemui.statusbar.notification.collection.coalescer.GroupCoalescer)>
<com.android.systemui.car.keyguard.CarKeyguardViewMediator: void setupOverlayContentViewControllers()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage.Entry: byte[] getLskfHash()>
<com.android.systemui.statusbar.notification.logging.NotificationPanelLoggerImpl: void logPanelShown(boolean,java.util.List)>
<com.android.systemui.statusbar.policy.LocationControllerImpl: boolean isLocationActive()>
<com.android.systemui.SwipeHelper: boolean isFalseGesture()>
<com.android.systemui.screenshot.ScreenshotSelectorView: void startSelection(int,int)>
<com.android.systemui.CarSystemUIFactory: java.lang.String[] getSystemUIServiceComponents(android.content.res.Resources)>
<com.android.server.policy.WindowManagerPolicy.InputConsumer: void dispose()>
<com.android.systemui.statusbar.notification.row.ExpandableView: float getContentTransformationShift()>
<com.android.systemui.globalactions.GlobalActionsGridLayout: boolean shouldSwapRowsAndColumns()>
<android.media.MediaController2: void cancelSessionCommand(java.lang.Object)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isHasFragileUserData()>
<javax.obex.Operation: void noBodyHeader()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setSystemExpanded(boolean)>
<com.android.server.pm.PackageManagerShellCommandDataLoader: android.service.dataloader.DataLoaderService.DataLoader onCreateDataLoader(android.content.pm.DataLoaderParams)>
<com.android.systemui.pip.PipTaskOrganizer: int getOutPipWindowingMode()>
<com.android.server.pm.PackageSetting: boolean isPrivileged()>
<com.android.systemui.qs.QuickQSPanel: void initMediaHostState()>
<com.android.server.DisplayThread: void dispose()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glDeleteFramebuffersOES(int,java.nio.IntBuffer)>
<com.android.systemui.statusbar.phone.DoubleTapHelper.DoubleTapListener: boolean onDoubleTap()>
<com.android.systemui.statusbar.notification.collection.coordinator.BubbleCoordinator: void attach(com.android.systemui.statusbar.notification.collection.NotifPipeline)>
<com.android.systemui.qs.tileimpl.QSTileImpl.H: void handleMessage(android.os.Message)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setQsExpanded(boolean)>
<com.android.systemui.AutoReinflateContainer: void onAttachedToWindow()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void setSoftTokenApp(java.lang.String)>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: void addCallback(com.android.systemui.statusbar.policy.NetworkController.SignalCallback)>
<com.android.systemui.car.volume.CarVolumeItem: void setProgress(int)>
<android.net.wifi.IWifiManager: void enableVerboseLogging(int)>
<com.android.server.biometrics.ClientMonitor: com.android.server.biometrics.BiometricServiceBase.DaemonWrapper getDaemonWrapper()>
<com.android.packageinstaller.PackageInstallerActivity.OutOfSpaceDialog: android.app.Dialog createDialog(java.lang.CharSequence)>
<com.android.systemui.classifier.Point: float dotProduct(com.android.systemui.classifier.Point,com.android.systemui.classifier.Point)>
<com.android.server.policy.WindowOrientationListener: void onProposedRotationChanged(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: com.android.systemui.statusbar.notification.row.ExpandableView getChildAtRawPosition(float,float)>
<android.media.MediaParser: void release()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void updateBubbleButton(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.gallery3d.glrenderer.BasicTexture: int getTarget()>
<com.android.systemui.wm.DisplayLayout: float density()>
<com.android.server.usb.UsbHostManager: void getDeviceList(android.os.Bundle)>
<com.android.systemui.tuner.BatteryPreference: boolean persistString(java.lang.String)>
<com.android.systemui.dagger.DependencyProvider: com.android.systemui.shared.system.DevicePolicyManagerWrapper provideDevicePolicyManagerWrapper()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void setMachineManaged(boolean)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glDeleteFramebuffersOES(int,int[],int)>
<com.android.server.statusbar.StatusBarManagerService: void <init>(android.content.Context)>
<com.android.server.accessibility.gestures.TouchExplorer: void setNext(com.android.server.accessibility.EventStreamTransformation)>
<com.android.server.pm.PackageManagerService.Injector: android.hardware.display.DisplayManager getDisplayManager()>
<com.android.systemui.statusbar.policy.HeadsUpManager.HeadsUpEntry: int compareTo(com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry)>
<com.android.server.autofill.Helper: android.app.assist.AssistStructure.ViewNode findViewNodeByAutofillId(android.app.assist.AssistStructure,android.view.autofill.AutofillId)>
<android.net.wifi.p2p.WifiP2pManager.ActionListener: void onFailure(int)>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcher.Adapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.net.wifi.hotspot2.pps.UpdateParameter: void setUsername(java.lang.String)>
<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasAudioInterface()>
<com.android.photos.BitmapRegionTileSource.FilePathBitmapSource: android.graphics.Bitmap loadPreviewBitmap(android.graphics.BitmapFactory.Options)>
<android.text.BoringLayoutIsBoringPerfTest: void <init>(java.lang.String,int,boolean,android.text.NonEditableTextGenerator.TextType,boolean)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setPeopleNotificationIdentifier(com.android.systemui.statusbar.notification.people.PeopleNotificationIdentifier)>
<com.android.systemui.statusbar.phone.DarkIconDispatcherImpl: com.android.systemui.statusbar.phone.LightBarTransitionsController getTransitionsController()>
<com.android.server.autofill.ui.FillUi.Callback: void onCanceled()>
<com.android.systemui.qs.QSDetailClipper: void <init>(android.view.View)>
<com.android.systemui.statusbar.phone.DozeServiceHost: void onIgnoreTouchWhilePulsing(boolean)>
<com.android.systemui.statusbar.Abortable: void abort()>
<com.android.server.audio.AudioService: void setRingerModeInternal(int,java.lang.String)>
<com.android.server.accessibility.MagnificationController.ControllerContext: android.os.Handler getHandler()>
<com.android.systemui.car.notification.NotificationPanelViewController: void reinflate()>
<android.net.wifi.ScanResult: boolean isPasspointNetwork()>
<javax.microedition.khronos.opengles.GL10: void glHint(int,int)>
<com.android.systemui.classifier.brightline.TypeClassifier: boolean isFalseTouch()>
<com.android.systemui.settings.ToggleSliderView: void setOnChangedListener(com.android.systemui.settings.ToggleSlider.Listener)>
<com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder: com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder withUiMode(int,java.util.function.Supplier)>
<com.android.settingslib.widget.AppEntityInfo.Builder: com.android.settingslib.widget.AppEntityInfo.Builder setIcon(android.graphics.drawable.Drawable)>
<com.android.server.audio.AudioService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.pm.SharedUserSetting: boolean isPrivileged()>
<com.android.systemui.statusbar.policy.BatteryController: boolean isPluggedIn()>
<com.android.systemui.qs.QSDualTileLabel: void <init>(android.content.Context)>
<com.android.server.usb.descriptors.Usb10ACHeader: byte getControls()>
<com.android.systemui.plugins.qs.QS: void setHeaderClickable(boolean)>
<com.android.printspooler.model.PrintSpoolerProvider: com.android.printspooler.model.PrintSpoolerService getSpooler()>
<com.android.systemui.shortcut.ShortcutKeyServiceProxy: void <init>(com.android.systemui.shortcut.ShortcutKeyServiceProxy.Callbacks)>
<com.android.server.inputmethod.InputMethodManagerService: void removeImeSurfaceFromWindow(android.os.IBinder)>
<com.android.systemui.qs.QSFooterImpl: void onFinishInflate()>
<com.android.printservice.recommendation.util.Preconditions: void checkState(boolean,java.lang.String)>
<com.android.keyguard.KeyguardPinBasedInputView: boolean onKey(android.view.View,int,android.view.KeyEvent)>
<com.android.systemui.classifier.EndPointRatioClassifier: java.lang.String getTag()>
<com.android.server.people.data.Event: int getType()>
<com.android.systemui.statusbar.policy.RemoteInputView.RemoteEditText: boolean onKeyUp(int,android.view.KeyEvent)>
<android.net.wifi.WifiScanner: void startBackgroundScan(android.net.wifi.WifiScanner.ScanSettings,android.net.wifi.WifiScanner.ScanListener)>
<com.android.systemui.statusbar.StatusIconDisplayable: void setVisibleState(int,boolean)>
<com.android.systemui.statusbar.phone.AutoTileManager: void init()>
<com.android.settingslib.volume.MediaSessions: void init()>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void setSmsAppPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.PackagesProvider)>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: android.content.pm.PackageManager getPackageManager()>
<com.android.commands.vr.Vr: void main(java.lang.String[])>
<com.android.systemui.statusbar.phone.DoubleTapHelper: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: boolean isShowing()>
<com.android.server.biometrics.BiometricService.SettingObserver: void updateContentObserver()>
<com.android.server.os.SchedulingPolicyService: int requestCpusetBoost(boolean,android.os.IBinder)>
<android.content.pm.PackageManagerInternal: void flushPackageRestrictions(int)>
<com.android.systemui.statusbar.CommandQueue: void setTopAppHidesStatusBar(boolean)>
<com.android.server.storage.StorageSessionController: void onVolumeUnmount(android.os.storage.VolumeInfo)>
<com.android.systemui.statusbar.notification.stack.ViewState: boolean isAnimating(android.view.View)>
<com.android.server.pm.UserManagerService: void setSeedAccountData(int,java.lang.String,java.lang.String,android.os.PersistableBundle,boolean)>
<com.android.systemui.plugins.ClockPlugin: android.graphics.Bitmap getThumbnail()>
<com.android.systemui.recents.OverviewProxyService: boolean shouldShowSwipeUpUI()>
<android.net.wifi.p2p.WifiP2pManager: android.os.Messenger getP2pStateMachineMessenger()>
<android.net.wifi.IWifiManager: int getVerboseLoggingLevel()>
<com.android.vpndialogs.ManageDialog: boolean handleMessage(android.os.Message)>
<com.android.systemui.volume.ZenModePanel: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.keyguard.KeyguardSimPukView: void startAppearAnimation()>
<com.android.systemui.dagger.DependencyProvider: com.android.systemui.util.leak.LeakDetector provideLeakDetector()>
<com.android.systemui.qs.external.TileColorPicker: int getColor(int)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setHideSensitive(boolean)>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void setPassword(java.lang.String)>
<com.android.systemui.keyguard.ScreenLifecycle.Observer: void onScreenTurnedOff()>
<com.android.systemui.tuner.LockscreenFragment.Adapter: void addItem(com.android.systemui.tuner.LockscreenFragment.Item)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void markForUserTriggeredMovement(boolean)>
<com.android.systemui.globalactions.GlobalActionsComponent: void start()>
<com.android.systemui.statusbar.policy.EmergencyCryptkeeperText: void onAttachedToWindow()>
<com.android.systemui.recents.TriangleShape: void getOutline(android.graphics.Outline)>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean hasOverlappingRendering()>
<com.android.systemui.SysuiRestartReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void setDarkAmount(float)>
<android.multiuser.BenchmarkResultsReporter: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>
<com.android.server.accessibility.AccessibilityManagerService: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
<com.android.photos.BitmapRegionTileSource.UriBitmapSource: com.android.photos.SimpleBitmapRegionDecoder loadBitmapRegionDecoder()>
<com.android.systemui.qs.SlashDrawable: void setDrawable(android.graphics.drawable.Drawable)>
<com.android.packageinstaller.wear.WearPackageArgs: android.net.Uri getPermUri(android.os.Bundle)>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: void validatePackageDexMetadata(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.server.contentcapture.ContentCaptureMetricsLogger: void writeSetWhitelistEvent(android.content.ComponentName,java.util.List,java.util.List)>
<android.net.wifi.WifiScanner: void unregisterScanListener(android.net.wifi.WifiScanner.ScanListener)>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void setAnimationsEnabled(boolean)>
<com.android.systemui.qs.customize.TileQueryHelper: void setListener(com.android.systemui.qs.customize.TileQueryHelper.TileStateListener)>
<com.android.systemui.classifier.FalsingManagerImpl: boolean shouldEnforceBouncer()>
<com.android.server.pm.PackageManagerServiceUtils: long calculateInstalledSize(java.lang.String,java.lang.String)>
<com.example.android.networkusage.StackOverflowXmlParser: java.util.List parse(java.io.InputStream)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: android.view.View.OnClickListener getAppOpsOnClickListener()>
<com.android.printspooler.ui.SelectPrinterActivity: boolean onCreateOptionsMenu(android.view.Menu)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.MenuItem menuItemToExposeOnSnap()>
<com.android.server.pm.PackageManagerService.Injector: android.content.Context getContext()>
<com.android.server.display.color.DisplayTransformManager: boolean setColorMode(int,float[],int)>
<com.android.server.slice.SliceManagerService: java.lang.String getDefaultHome(int)>
<com.android.systemui.statusbar.phone.NavigationModeController: void updateCurrentInteractionMode(boolean)>
<com.android.server.audio.AudioService: void setVolumePolicy(android.media.VolumePolicy)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController.ForcePluginOpenListener: void onChange(boolean)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void abortCurrentGesture()>
<com.android.systemui.SystemUI: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.qs.QSDualTileLabel: void setText(java.lang.CharSequence)>
<com.android.systemui.car.userswitcher.FullScreenUserSwitcherViewController: void onFinishInflate()>
<com.android.server.pm.PackageManagerService: java.util.List getInstalledModules(int)>
<com.android.server.updates.CarrierIdInstallReceiver: void postInstall(android.content.Context,android.content.Intent)>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void applyIconStates()>
<com.android.systemui.statusbar.notification.NotificationEntryManager: int getActiveNotificationsCount()>
<com.android.powermodel.component.ModemGlobalActivity: void <init>(com.android.powermodel.AttributionKey)>
<com.android.systemui.statusbar.notification.row.NotificationInfo: void onLayout(boolean,int,int,int,int)>
<com.android.systemui.statusbar.notification.row.dagger.NotificationRowComponent.Builder: com.android.systemui.statusbar.notification.row.dagger.NotificationRowComponent build()>
<com.android.settingslib.wifi.AccessPoint: boolean isEphemeral()>
<com.android.systemui.util.leak.GarbageMonitor.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.timezonedetector.TimeZoneDetectorService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setSystemSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.policy.LocationController: boolean setLocationEnabled(boolean)>
<com.android.keyguard.KeyguardClockSwitch: float getTextSize()>
<android.net.wifi.WifiManager: void restoreBackupData(byte[])>
<com.android.systemui.plugins.SensorManagerPlugin: void unregisterListener(com.android.systemui.plugins.SensorManagerPlugin.Sensor,com.android.systemui.plugins.SensorManagerPlugin.SensorEventListener)>
<com.android.server.storage.CacheQuotaStrategy: long setupQuotasFromFile()>
<com.android.systemui.statusbar.RemoteInputController: void removeSpinning(java.lang.String,java.lang.Object)>
<com.android.externalstorage.ExternalStorageProvider: boolean onCreate()>
<com.android.systemui.qs.external.TileLifecycleManager: android.os.IBinder getToken()>
<com.android.systemui.shared.system.ViewRootImplCompat: void <init>(android.view.View)>
<com.android.settingslib.bluetooth.A2dpProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)>
<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardDrawnLw()>
<com.android.settingslib.inputmethod.SwitchWithNoTextPreference: void <init>(android.content.Context)>
<com.android.server.pm.permission.BasePermission: boolean isDevelopment()>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isDimmed()>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: void shutdown(boolean)>
<com.android.gallery3d.glrenderer.GLId: void glDeleteTextures(javax.microedition.khronos.opengles.GL11,int,int[],int)>
<android.app.backup.ForwardingBackupAgent: android.app.backup.BackupAgent forward(android.app.backup.BackupAgent)>
<com.android.keyguard.KeyguardHostView: void showErrorMessage(java.lang.CharSequence)>
<com.android.systemui.statusbar.notification.row.StackScrollerDecorView: void setVisible(boolean,boolean)>
<javax.microedition.khronos.opengles.GL10: void glClearColor(float,float,float,float)>
<com.android.settingslib.media.MediaDevice: boolean isFastPairDevice()>
<android.text.PrecomputedTextMemoryUsageTest: void testMemoryUsage_Arabic_Hyphenation()>
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder setTransportProtocol(int)>
<com.android.server.media.RemoteDisplayProviderWatcher.Callback: void addProvider(com.android.server.media.RemoteDisplayProviderProxy)>
<com.android.server.DeviceIdleController: int[] getAppIdUserWhitelistInternal()>
<com.android.systemui.shared.plugins.PluginPrefs: void addAction(java.lang.String)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isPersistent()>
<com.android.systemui.doze.DozeScreenBrightness: void transitionTo(com.android.systemui.doze.DozeMachine.State,com.android.systemui.doze.DozeMachine.State)>
<android.media.Session2Command.Result: android.os.Bundle getResultData()>
<com.android.systemui.statusbar.phone.StatusBar: boolean areLaunchAnimationsEnabled()>
<com.android.systemui.pip.phone.PipMenuActivity: void onTopResumedActivityChanged(boolean)>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setBottomAmountClips(boolean)>
<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)>
<com.android.server.pm.PackageManagerService: void addPersistentPreferredActivity(android.content.IntentFilter,android.content.ComponentName,int)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.CompilerStats.PackageStats getOrCreateCompilerPackageStats(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.server.locksettings.LockSettingsService: void setRecoverySecretTypes(int[])>
<android.content.pm.PackageManagerInternal: boolean setEnabledOverlayPackages(int,java.lang.String,java.util.List,java.util.Collection)>
<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardLocked()>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: void clearCustomPrinterIconCache(android.print.IPrintSpoolerCallbacks,int)>
<com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey: void <init>(int,android.security.keystore.AndroidKeyStoreSecretKey)>
<com.android.server.TelephonyRegistry: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)>
<com.android.systemui.util.wakelock.DelayedWakeLock: java.lang.String toString()>
<com.android.systemui.statusbar.notification.collection.inflation.NotificationRowBinderImpl: void setUpWithPresenter(com.android.systemui.statusbar.NotificationPresenter,com.android.systemui.statusbar.notification.stack.NotificationListContainer,com.android.systemui.statusbar.notification.collection.inflation.NotificationRowBinderImpl.BindRowCallback)>
<com.android.systemui.shared.plugins.PluginManagerImpl: void addPluginListener(com.android.systemui.plugins.PluginListener,java.lang.Class,boolean)>
<com.android.systemui.bubbles.BubbleController: void collapseStack()>
<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>
<android.perftests.utils.Stats: long getPercentile(int)>
<com.android.server.policy.PhoneWindowManager: void screenTurnedOff()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.security.cert.CertPath getRecoveryServiceCertPath(int,int,java.lang.String)>
<com.android.server.ConnectivityService.Dependencies: android.net.IIpConnectivityMetrics getIpConnectivityMetrics()>
<android.net.wifi.ScanResult.RadioChainInfo: int hashCode()>
<com.android.settingslib.drawable.UserIconDrawable: com.android.settingslib.drawable.UserIconDrawable setBadgeIfManagedUser(android.content.Context,int)>
<com.android.systemui.classifier.FalsingManagerImpl: void onLeftAffordanceHintStarted()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void resetViews(boolean)>
<javax.obex.ObexTransport: void connect()>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindGarbageMonitorService(com.android.systemui.util.leak.GarbageMonitor.Service)>
<com.android.systemui.statusbar.ScrimView: void setTint(int)>
<com.android.systemui.statusbar.phone.dagger.StatusBarViewModule: com.android.systemui.statusbar.phone.NotificationPanelView getNotificationPanelView(com.android.systemui.statusbar.phone.NotificationShadeWindowView)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationMediaTemplateViewWrapper: void <init>(android.content.Context,android.view.View,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onDensityOrFontScaleChanged()>
<com.android.settingslib.bluetooth.HidDeviceProfile: boolean isAutoConnectable()>
<com.android.keyguard.KeyguardSecurityViewFlipper: boolean startDisappearAnimation(java.lang.Runnable)>
<com.android.egg.neko.NekoService: boolean onStopJob(android.app.job.JobParameters)>
<com.android.systemui.classifier.FalsingManagerImpl: void updateSessionActive()>
<com.android.systemui.plugins.VolumeDialogController.Callbacks: void onShowVibrateHint()>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void onDetachedFromWindow()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void registerCallback(com.android.systemui.statusbar.phone.StatusBarWindowCallback)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: int resolveCallingUserIdEnforcingPermissionsLocked(int)>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo: boolean willBeRemoved()>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void setVoiceInteractionPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.PackagesProvider)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setClipBottomAmount(int)>
<com.android.server.usb.descriptors.UsbDescriptor: int getStatus()>
<com.android.settingslib.notification.ConversationIconFactory.ConversationIconDrawable: void draw(android.graphics.Canvas)>
<com.android.systemui.statusbar.phone.EdgeBackGestureHandler: void writeToProto(com.android.systemui.tracing.nano.SystemUiTraceProto)>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onActivityRotation(int)>
<android.net.wifi.rtt.IRttCallback: void onRangingFailure(int)>
<com.android.server.pm.PackageManagerService: byte[] getPreferredActivityBackup(int)>
<android.net.wifi.WifiConfiguration.RecentFailure: int getAssociationStatus()>
<android.os.StatsDimensionsValue: java.util.List getTupleValueList()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: int resolveBackgroundColor()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: com.android.systemui.statusbar.notification.row.ExpandableView getClosestChildAtRawPosition(float,float)>
<com.android.server.autofill.ui.PendingUi: android.os.IBinder getToken()>
<com.android.systemui.statusbar.phone.NavigationBarInflaterView: void setButtonDispatchers(android.util.SparseArray)>
<com.android.settingslib.accounts.AuthenticatorHelper: void updateAuthDescriptions(android.content.Context)>
<com.android.settingslib.applications.ApplicationsState.Callbacks: void onPackageListChanged()>
<com.android.printspooler.widget.PrintContentView: void onLayout(boolean,int,int,int,int)>
<com.android.server.testing.shadows.ShadowEventLog: int writeEvent(int,java.lang.String)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.AndroidPackage hideAsFinal()>
<com.android.server.integrity.parser.RuleParseException: void <init>(java.lang.String,java.lang.Throwable)>
<com.android.server.audio.AudioService: void avrcpSupportsAbsoluteVolume(java.lang.String,boolean)>
<com.android.systemui.statusbar.SmartReplyController: void smartActionClicked(com.android.systemui.statusbar.notification.collection.NotificationEntry,int,android.app.Notification.Action,boolean)>
<com.android.server.pm.permission.BasePermission: boolean isHardOrSoftRestricted()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void onClosingFinished()>
<com.android.server.locksettings.SyntheticPasswordManager: boolean removePendingToken(long,int)>
<com.android.server.accessibility.AccessibilityManagerService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean hasNoContentHeight()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: boolean isActiveDevice(int)>
<android.media.Controller2Link: void onPlaybackActiveChanged(int,boolean)>
<com.android.pacprocessor.PacNative: boolean stopPacSupport()>
<com.android.systemui.car.window.OverlayPanelViewController: void calculatePercentageFromEndingEdge(float)>
<com.android.systemui.car.navigationbar.ButtonSelectionStateController: void taskChanged(java.util.List,int)>
<com.android.server.usb.descriptors.UsbACSelectorUnit: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.systemui.qs.touch.OverScroll: int dampedScroll(float,int)>
<com.android.networkstack.tethering.OffloadHardwareInterface: com.android.networkstack.tethering.OffloadHardwareInterface.ForwardedStats getForwardedStats(java.lang.String)>
<com.android.server.soundtrigger.SoundTriggerLogger.StringEvent: void <init>(java.lang.String)>
<android.os.StrictModeTest: void timeCrossBinderThreadViolation()>
<com.android.systemui.egg.MLand: void start(boolean)>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: boolean isZenAvailable()>
<com.android.server.infra.FrameworkResourcesServiceNameResolver: boolean isDefaultServiceEnabled(int)>
<com.android.server.appprediction.AppPredictionManagerService: void onStart()>
<com.android.pacprocessor.PacNative: java.lang.String makeProxyRequest(java.lang.String,java.lang.String)>
<com.android.server.policy.keyguard.KeyguardStateMonitor: boolean isSecure(int)>
<com.android.server.biometrics.AuthService.Injector: android.hardware.iris.IIrisService getIrisService()>
<com.android.systemui.qs.QSSecurityFooter: void onClick(android.content.DialogInterface,int)>
<com.android.server.uri.UriPermissionOwner: void removeReadPermission(com.android.server.uri.UriPermission)>
<com.android.settingslib.applications.ApplicationsState.AppFilter: void init()>
<com.android.networkstack.tethering.OffloadHardwareInterface.ControlCallback: void onStoppedError()>
<com.android.systemui.statusbar.phone.PanelBar: boolean isClosed()>
<com.android.printservice.recommendation.plugin.samsung.SamsungRecommendationPlugin: void <init>(android.content.Context)>
<android.net.wifi.p2p.WifiP2pGroup: void setNetworkName(java.lang.String)>
<com.android.server.updates.ConversationActionsInstallReceiver: boolean verifyVersion(int,int)>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger.EditorLogger: android.content.SharedPreferences.Editor remove(java.lang.String)>
<com.android.systemui.statusbar.policy.SignalController: int getQsCurrentIconId()>
<com.android.server.statusbar.StatusBarManagerService: void disable2(int,android.os.IBinder,java.lang.String)>
<com.android.systemui.tuner.TunerSwitch: void onClick()>
<com.android.systemui.tracing.ProtoTracer: java.io.File getTraceFile()>
<com.android.systemui.statusbar.phone.RotationButton: void updateIcon()>
<com.android.systemui.pip.phone.PipMediaController: void addListener(com.android.systemui.pip.phone.PipMediaController.ActionListener)>
<android.net.util.TetheringUtils.ForwardedStats: void <init>(android.net.TetherStatsParcel)>
<com.android.commands.uiautomator.RunTestCommand: java.lang.String shortHelp()>
<com.android.systemui.shared.system.PinnedStackListenerForwarder.PinnedStackListener: void onDisplayInfoChanged(android.view.DisplayInfo)>
<com.android.systemui.globalactions.GlobalActionsPowerDialog: android.app.Dialog create(android.content.Context,android.widget.ListAdapter)>
<com.android.settingslib.bluetooth.HeadsetProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: int getCallingPid()>
<com.android.keyguard.KeyguardSimPinView: java.lang.CharSequence getTitle()>
<com.android.printspooler.widget.ClickInterceptSpinner: void setPerformClickListener(com.android.systemui.statusbar.phone.NotificationPanelViewController.OnClickListener)>
<com.android.systemui.qs.QSFragment: void closeDetail()>
<com.android.server.accessibility.AccessibilityWindowManager: void associateEmbeddedHierarchyLocked(android.os.IBinder,android.os.IBinder)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator scaleX(float,float,java.lang.Runnable[])>
<android.net.IIntResultListener: void onResult(int)>
<com.android.server.inputmethod.InputMethodManagerInternal: boolean switchToInputMethod(java.lang.String,int)>
<com.android.gallery3d.exif.ExifInterface: long[] getTagLongValues(int,int)>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isPanelFullWidth()>
<com.android.server.pm.PreferredComponent: void writeToXml(org.xmlpull.v1.XmlSerializer,boolean)>
<com.android.server.pm.PackageManagerService: boolean setApplicationHiddenSettingAsUser(java.lang.String,boolean,int)>
<com.android.server.pm.dex.DexoptOptions: com.android.server.pm.dex.DexoptOptions overrideCompilerFilter(java.lang.String)>
<com.android.server.hdmi.HdmiCecController.NativeWrapper: void nativeEnableAudioReturnChannel(int,boolean)>
<com.android.server.policy.WindowOrientationListener: android.os.Handler getHandler()>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: boolean isActive()>
<com.android.systemui.ForegroundServicesUserState: android.util.ArraySet getFeatures(java.lang.String)>
<com.android.providers.settings.SettingsProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>
<com.android.settingslib.drawer.SwitchController.MetaData: com.android.settingslib.drawer.SwitchController.MetaData setIcon(int)>
<android.net.wifi.p2p.WifiP2pGroupList: void add(android.net.wifi.p2p.WifiP2pGroup)>
<com.android.settingslib.wifi.AccessPointPreference: void <init>(com.android.settingslib.wifi.AccessPoint,android.content.Context,com.android.settingslib.wifi.AccessPointPreference.UserBadgeCache,int,boolean)>
<com.android.systemui.statusbar.notification.row.NotificationInfo: void bindNotification(android.content.pm.PackageManager,android.app.INotificationManager,com.android.systemui.statusbar.notification.VisualStabilityManager,com.android.systemui.statusbar.notification.ro.ChannelEditorDialogController,java.lang.String,android.app.NotificationChannel,java.util.Set,com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.row.NotificationInfo.OnSettingsClickListener,com.android.systemui.statusbar.notification.row.NotificationInfo.OnAppSettingsClickListener,com.android.internal.logging.UiEventLogger,boolean,boolean,boolean)>
<com.android.server.pm.permission.BasePermission: boolean isHardRestricted()>
<com.android.server.biometrics.fingerprint.FingerprintAuthenticator: boolean hasEnrolledTemplates(int,java.lang.String)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isDreaming()>
<com.android.server.TelephonyRegistry: void notifyMessageWaitingChangedForPhoneId(int,int,boolean)>
<com.android.systemui.classifier.FalsingManagerProxy: void onCameraOn()>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void setKeyguardEnabled(boolean)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void <init>(com.android.systemui.statusbar.phone.NotificationPanelView,com.android.systemui.util.InjectionInflationController,com.android.systemui.statusbar.notification.NotificationWakeUpCoordinator,com.android.systemui.statusbar.PulseExpansionHandler,com.android.systemui.statusbar.notification.DynamicPrivacyController,com.android.systemui.statusbar.phon.KeyguardBypassController,com.android.systemui.plugins.FalsingManager,com.android.systemui.statusbar.phone.ShadeController,com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.doze.DozeLog,com.android.systemui.statusbar.phone.DozeParameters,com.android.systemui.statusbar.CommandQueue,com.android.systemui.statusbar.VibratorHelper,com.android.internal.util.LatencyTracker,android.os.PowerManager,android.view.accessibility.AccessibilityManager,int,com.android.keyguard.KeyguardUpdateMonitor,com.android.internal.logging.MetricsLogger,android.app.ActivityManager,com.android.systemui.statusbar.policy.ZenModeController,com.android.systemui.statusbar.policy.ConfigurationController,com.android.systemui.statusbar.FlingAnimationUtils.Builder,com.android.systemui.statusbar.phone.StatusBarTouchableRegionManager,com.android.systemui.statusbar.notification.ConversationNotificationManager,com.android.systemui.media.MediaHierarchyManager,com.android.systemui.statusbar.phone.BiometricUnlockController,com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager)>
<com.android.systemui.statusbar.CommandQueue: void removeIcon(java.lang.String)>
<com.android.systemui.statusbar.notification.MessagingImageTransformState: void setStartActualWidth(int)>
<com.android.server.pm.permission.PermissionManagerServiceInternal.DefaultBrowserProvider: boolean setDefaultBrowser(java.lang.String,int)>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean isContentExpandable()>
<com.android.server.uri.UriPermissionOwner: java.lang.String toString()>
<com.android.systemui.statusbar.phone.NotificationIconContainer: int getNoOverflowExtraPadding()>
<com.android.server.pm.permission.BasePermission: boolean isWellbeing()>
<com.android.systemui.statusbar.AlphaOptimizedButton: void <init>(android.content.Context,android.util.AttributeSet)>
<javax.obex.ServerRequestHandler: void onAuthenticationFailure(byte[])>
<com.android.systemui.stackdivider.DividerWindowManager: void setTouchable(boolean)>
<android.net.wifi.WifiManager: void unregisterLocalOnlyHotspotObserver()>
<com.android.systemui.car.navigationbar.CarNavigationBarView: android.view.View.OnTouchListener getStatusBarWindowTouchListener()>
<com.android.systemui.statusbar.AnimatedImageView: boolean hasOverlappingRendering()>
<android.net.wifi.hotspot2.pps.UpdateParameter: boolean validate()>
<com.android.server.storage.DiskStatsLoggingService: void schedule(android.content.Context)>
<com.android.systemui.recents.OverviewProxyService: boolean isEnabled()>
<android.util.StatsEvent.Builder: android.util.StatsEvent.Builder setAtomId(int)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationMessagingTemplateViewWrapper: void <init>(android.content.Context,android.view.View,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.policy.WindowManagerPolicy: void startKeyguardExitAnimation(long,long)>
<com.android.systemui.recents.OverviewProxyService.OverviewProxyListener: void onAssistantGestureCompletion(float)>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils.ThrowingSupplier)>
<com.android.systemui.stackdivider.Divider: void registerInSplitScreenListener(java.util.function.Consumer)>
<com.android.gallery3d.glrenderer.GLCanvas: void initializeTexture(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.Bitmap)>
<com.android.systemui.statusbar.policy.FlashlightControllerImpl: void <init>(android.content.Context)>
<android.net.wifi.WifiManager.SuggestionConnectionStatusListener: void onConnectionStatus(android.net.wifi.WifiNetworkSuggestion,int)>
<com.android.systemui.shared.system.TonalCompat: com.android.systemui.shared.system.TonalCompat.ExtractionInfo extractDarkColors(android.app.WallpaperColors)>
<com.android.server.ServiceWatcher.ServiceInfo: int hashCode()>
<com.android.systemui.pip.phone.PipTouchHandler: void onMovementBoundsChanged(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,boolean,boolean,int)>
<com.android.systemui.classifier.FalsingLog: void w(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.phone.ButtonInterface: void setVertical(boolean)>
<com.android.server.locksettings.LockSettingsService: void onStartUser(int)>
<com.android.server.biometrics.fingerprint.FingerprintAuthenticator: boolean isHardwareDetected(java.lang.String)>
<com.android.networkstack.tethering.OffloadHardwareInterface: boolean setLocalPrefixes(java.util.ArrayList)>
<com.android.systemui.statusbar.policy.SmartReplyConstants: void <init>(android.os.Handler,android.content.Context,com.android.systemui.util.DeviceConfigProxy)>
<com.android.systemui.MultiListLayout: void onConfigurationChanged(android.content.res.Configuration)>
<javax.microedition.khronos.egl.EGL10: boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay,int[],javax.microedition.khronos.egl.EGLConfig[],int,int[])>
<com.android.backupconfirm.BackupRestoreConfirmation: void onNewIntent(android.content.Intent)>
<com.android.server.tv.TvInputHardwareManager.Listener: void onHdmiDeviceUpdated(java.lang.String,android.hardware.hdmi.HdmiDeviceInfo)>
<android.net.TetheringManager.TetheringEventCallback: void onTetheringSupported(boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>
<com.android.server.om.OverlayReferenceMapper: void rebuildIfDeferred()>
<com.android.settingslib.applications.ApplicationsState: boolean haveDisabledApps()>
<com.android.systemui.car.navigationbar.CarNavigationBarView: void setNotificationsPanelController(com.android.systemui.car.navigationbar.CarNavigationBarController.NotificationsShadeController)>
<android.wm.WindowAddRemovePerfTest: void testAddRemoveWindow()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean,boolean)>
<com.android.systemui.car.window.OverlayPanelViewController: void onPanelVisible(boolean)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.CompilerStats.PackageStats getOrCreateCompilerPackageStats(java.lang.String)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareValidation: java.lang.String toString()>
<com.android.server.pm.permission.PermissionManagerServiceInternal.PermissionCallback: void onInstallPermissionUpdatedNotifyListener(int)>
<com.android.systemui.volume.SafetyWarningDialog: boolean onKeyUp(int,android.view.KeyEvent)>
<android.perftests.utils.TestPackageInstaller.InstalledPackage: void uninstall()>
<com.android.printservice.recommendation.util.MDNSFilteredDiscovery: void onDiscoveryStopped(java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationGutsManager: boolean shouldExtendLifetime(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.car.volume.CarVolumeItem: void setOnSeekBarChangeListener(android.widget.SeekBar.OnSeekBarChangeListener)>
<com.android.server.biometrics.face.FaceService: void handleUserSwitching(int)>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: void onExpandClicked(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.server.pm.RestrictionsSet: int keyAt(int)>
<com.android.server.integrity.parser.RandomAccessObject: com.android.server.integrity.parser.RandomAccessObject ofBytes(byte[])>
<com.android.server.appop.AppOpsService: void packageRemoved(int,java.lang.String)>
<com.android.settingslib.widget.RadioButtonPreference: void setOnClickListener(com.android.settingslib.widget.RadioButtonPreference.OnClickListener)>
<com.android.server.hdmi.HdmiCecMessage: boolean equals(java.lang.Object)>
<com.android.systemui.keyguard.KeyguardSliceProvider: androidx.slice.Slice onBindSlice(android.net.Uri)>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo: void setGutsParent(com.android.systemui.statusbar.notification.row.NotificationGuts)>
<com.android.systemui.classifier.FalsingManagerImpl: void onBouncerHidden()>
<com.android.systemui.tuner.ShortcutPicker: void onCreatePreferences(android.os.Bundle,java.lang.String)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: int getFooterViewHeightWithPadding()>
<com.android.systemui.statusbar.ScreenRecordDrawable: boolean getPadding(android.graphics.Rect)>
<com.android.server.usb.descriptors.UsbHIDDescriptor: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.server.biometrics.fingerprint.FingerprintService: com.android.server.biometrics.BiometricUtils getBiometricUtils()>
<com.android.systemui.statusbar.notification.AboveShelfChangedListener: void onAboveShelfStateChanged(boolean)>
<android.net.wifi.IWifiManager: void enableTdlsWithMacAddress(java.lang.String,boolean)>
<android.os.ISomeService: void readDisk(int)>
<com.android.uiautomator.core.UiObject: java.lang.String getClassName()>
<android.net.ITetheringEventCallback: void onUpstreamChanged(android.net.Network)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setKeyguardUserSwitcher(com.android.systemui.statusbar.policy.KeyguardUserSwitcher)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceSettings: boolean setCallbacks(com.android.server.display.whitebalance.DisplayWhiteBalanceController.Callbacks)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setSecondaryNativeLibraryDir(java.lang.String)>
<com.android.settingslib.drawable.UserIconDrawable: void setFramePadding(float)>
<com.android.systemui.biometrics.AuthBiometricView: int getDelayAfterAuthenticatedDurationMs()>
<android.net.dhcp.DhcpServingParamsParcelExt: android.net.dhcp.DhcpServingParamsParcelExt setDnsServers(java.util.Set)>
<com.android.systemui.statusbar.CrossFadeHelper: void fadeOut(android.view.View,java.lang.Runnable)>
<com.android.systemui.car.navigationbar.SystemBarConfigs: void <init>(android.content.res.Resources)>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyGenerator: byte[] generateAndStoreKey(com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey,int,int,java.lang.String,byte[])>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: android.view.View getExpandButton()>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator.ExpandAnimationParameters: int getStartClipTopAmount()>
<com.android.systemui.qs.tiles.UserDetailView.Adapter: com.android.systemui.qs.tiles.UserDetailItemView createUserDetailItemView(android.view.View,android.view.ViewGroup,com.android.systemui.statusbar.policy.UserSwitcherController.UserRecord)>
<com.android.systemui.statusbar.notification.logging.NotificationLogger: com.android.internal.statusbar.NotificationVisibility.NotificationLocation getNotificationLocation(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent,java.lang.String,int,int)>
<android.media.Session2Token: int getType()>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: void setStatusRes(android.print.PrintJobId,int,java.lang.CharSequence)>
<com.android.server.pm.PackageManagerService: java.util.List getAllPackages()>
<com.android.systemui.qs.tiles.WorkModeTile: void onManagedProfileRemoved()>
<com.android.server.soundtrigger.SoundTriggerLogger: void log(com.android.server.soundtrigger.SoundTriggerLogger.Event)>
<com.android.egg.neko.Cat: void draw(android.graphics.Canvas)>
<com.android.server.usb.descriptors.UsbACInterface: com.android.server.usb.descriptors.UsbDescriptor allocDescriptor(com.android.server.usb.descriptors.UsbDescriptorParser,com.android.server.usb.descriptors.ByteStream,int,byte)>
<com.android.server.biometrics.AuthenticationClient: boolean onEnrollResult(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.systemui.qs.QSTileHost: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.systemui.volume.VolumeDialogControllerImpl: void setUserActivityListener(com.android.systemui.volume.VolumeDialogControllerImpl.UserActivityListener)>
<com.android.settingslib.bluetooth.MapProfile: int getConnectionPolicy(android.bluetooth.BluetoothDevice)>
<com.android.systemui.usb.UsbDebuggingActivity: void onDestroy()>
<com.android.systemui.statusbar.OperatorNameView: void onAttachedToWindow()>
<com.android.server.usb.descriptors.UsbInterfaceAssoc: byte getFunctionProtocol()>
<com.android.server.Watchdog: void pauseWatchingCurrentThread(java.lang.String)>
<com.android.systemui.statusbar.policy.SmartReplyConstants: boolean isEnabled()>
<com.android.systemui.classifier.FalsingManagerProxy: void dump(java.io.PrintWriter)>
<com.android.systemui.statusbar.phone.PanelViewController: void onTrackingStopped(boolean)>
<com.android.gallery3d.glrenderer.BasicTexture: void setSize(int,int)>
<com.android.systemui.shared.system.TaskStackChangeListener: void onActivityForcedResizable(java.lang.String,int,int)>
<com.android.server.statusbar.StatusBarManagerInternal: void setCurrentUser(int)>
<com.android.server.accounts.AccountManagerService: void registerAccountListener(java.lang.String[],java.lang.String)>
<android.app.StatsManager.PullAtomMetadata: long getTimeoutMillis()>
<com.android.systemui.qs.QSFooter: void setExpanded(boolean)>
<com.android.server.pm.IntentFilterVerificationState: java.util.ArrayList getFilters()>
<com.android.systemui.statusbar.CommandQueue: void topAppWindowChanged(int,boolean,boolean)>
<com.android.systemui.statusbar.notification.row.NotificationGuts: void drawableStateChanged()>
<com.android.systemui.statusbar.StatusBarWifiView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.dagger.DependencyProvider: com.android.internal.widget.LockPatternUtils provideLockPatternUtils(android.content.Context)>
<com.android.server.webkit.SystemInterface: boolean systemIsDebuggable()>
<android.net.wifi.WifiScanner.ChannelSpec: void <init>(int)>
<javax.microedition.khronos.opengles.GL10: void glFinish()>
<com.android.systemui.statusbar.GestureRecorder: void save()>
<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: java.lang.String getDefaultCertificateAliasIfEmpty(java.lang.String)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setUid(int)>
<com.android.keyguard.KeyguardSecurityContainer.SecurityCallback: void reset()>
<com.android.server.display.utils.AmbientFilter: float filter(long,com.android.server.display.utils.RollingBuffer)>
<android.net.wifi.hotspot2.pps.UpdateParameter: java.lang.String getUpdateMethod()>
<com.android.settingslib.widget.settingsspinner.SettingsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.om.OverlayManagerService: void onSwitchUser(int)>
<com.google.android.startop.iorap.IorapForwardingService: boolean isIorapEnabled()>
<com.android.networkstack.tethering.EntitlementManager: void setOnUiEntitlementFailedListener(com.android.networkstack.tethering.EntitlementManager.OnUiEntitlementFailedListener)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: android.view.ViewPropertyAnimator fadeOut(long,long,java.lang.Runnable)>
<com.android.server.pm.PackageInstallerService: void bypassNextStagedInstallerCheck(boolean)>
<com.android.systemui.statusbar.notification.stack.AnimationProperties: android.animation.AnimatorListenerAdapter getAnimationFinishListener(android.util.Property)>
<com.android.systemui.dock.DockManagerImpl: void addListener(com.android.systemui.dock.DockManager.DockEventListener)>
<com.android.uiautomator.testrunner.TestCaseCollector: void addTestClasses(java.util.List)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onInitializeAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)>
<android.net.wifi.aware.TlvBufferUtils.TlvConstructor: android.net.wifi.aware.TlvBufferUtils.TlvConstructor allocateAndPut(java.util.List)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void setDimmed(boolean,boolean)>
<com.android.systemui.statusbar.NotificationHeaderUtil: void <init>(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.settingslib.Utils: int getColorAccentDefaultColor(android.content.Context)>
<com.android.server.biometrics.face.FaceService: int statsModality()>
<com.android.systemui.assist.AssistHandleBehaviorController.BehaviorController: void onAssistantGesturePerformed()>
<com.android.settingslib.net.UidDetailProvider: com.android.settingslib.net.UidDetail getUidDetail(int,boolean)>
<com.android.server.autofill.ui.AutoFillUI: void clearCallback(com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback)>
<com.android.systemui.util.wakelock.WakeLock: void acquire(java.lang.String)>
<com.android.server.role.RoleUserState: boolean addRoleHolder(java.lang.String,java.lang.String)>
<com.android.server.pm.PackageSettingBase: android.content.pm.PackageParser.SigningDetails getSigningDetails()>
<com.android.systemui.bubbles.BubbleData: com.android.systemui.bubbles.Bubble getSelectedBubble()>
<android.net.wifi.p2p.WifiP2pManager: void setDnsSdResponseListeners(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DnsSdServiceResponseListener,android.net.wifi.p2p.WifiP2pManager.DnsSdTxtRecordListener)>
<com.android.systemui.statusbar.notification.row.ExpandableView: float getIncreasedPaddingAmount()>
<com.android.server.people.data.DataMaintenanceService: boolean onStopJob(android.app.job.JobParameters)>
<android.net.wifi.IWifiManager: java.util.List getWifiConfigsForPasspointProfiles(java.util.List)>
<com.android.server.usb.descriptors.UsbACInterfaceUnparsed: void <init>(int,byte,byte,int)>
<com.android.systemui.qs.external.QSTileServiceWrapper: android.service.quicksettings.IQSTileService getService()>
<javax.obex.ServerOperation: void ensureOpen()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setHeadsUpAnimatingAwayListener(java.util.function.Consumer)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.net.wifi.IWifiManager: java.util.Map getAllMatchingPasspointProfilesForScanResults(java.util.List)>
<com.android.server.statusbar.StatusBarManagerService: int[] getDisableFlags(android.os.IBinder,int)>
<com.android.packageinstaller.InstallStaging.ErrorDialog: void onAttach(android.content.Context)>
<com.android.server.NativeDaemonEvent: boolean isClassContinue()>
<com.android.systemui.statusbar.notification.row.HybridGroupManager: void setOverflowNumberColor(android.widget.TextView,int)>
<com.android.server.usb.descriptors.UsbACHeaderInterface: int getADCRelease()>
<com.google.android.startop.iorap.TaskResult: java.lang.String toString()>
<com.android.systemui.qs.external.PackageManagerAdapter: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)>
<com.android.keyguard.PasswordTextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.settingslib.bluetooth.HeadsetProfile: java.util.List getConnectedDevices()>
<com.android.systemui.statusbar.phone.StatusBar: void <init>(android.content.Context,com.android.systemui.statusbar.notification.init.NotificationsController,com.android.systemui.statusbar.phone.LightBarController,com.android.systemui.statusbar.phone.AutoHideController,com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.statusbar.phone.StatusBarIconController,com.android.systemui.statusbar.PulseExpansionHandler,com.android.systemui.statusbar.notification.NotificationWakeUpCoordinator,com.android.systemui.statusbar.phon.KeyguardBypassController,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.statusbar.phone.HeadsUpManagerPhone,com.android.systemui.statusbar.notification.DynamicPrivacyController,com.android.systemui.statusbar.notification.interruption.BypassHeadsUpNotifier,com.android.systemui.plugins.FalsingManager,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.statusbar.policy.RemoteInputQuickSettingsDisabler,com.android.systemui.statusbar.notification.row.NotificationGutsManager,com.android.systemui.statusbar.notification.logging.NotificationLogger,com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProvider,com.android.systemui.statusbar.NotificationViewHierarchyManager,com.android.systemui.keyguard.KeyguardViewMediator,android.util.DisplayMetrics,com.android.internal.logging.MetricsLogger,java.util.concurrent.Executor,com.android.systemui.statusbar.NotificationMediaManager,com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.statusbar.NotificationRemoteInputManager,com.android.systemui.statusbar.policy.UserSwitcherController,com.android.systemui.statusbar.policy.NetworkController,com.android.systemui.statusbar.policy.BatteryController,com.android.systemui.colorextraction.SysuiColorExtractor,com.android.systemui.keyguard.ScreenLifecycle,com.android.systemui.keyguard.WakefulnessLifecycle,com.android.systemui.statusbar.SysuiStatusBarStateController,com.android.systemui.statusbar.VibratorHelper,com.android.systemui.bubbles.BubbleController,com.android.systemui.statusbar.phone.NotificationGroupManager,com.android.systemui.statusbar.notification.VisualStabilityManager,com.android.systemui.statusbar.policy.DeviceProvisionedController,com.android.systemui.statusbar.NavigationBarController,dagger.Lazy,com.android.systemui.statusbar.policy.ConfigurationController,com.android.systemui.statusbar.phone.NotificationShadeWindowController,com.android.systemui.statusbar.phone.LockscreenLockIconController,com.android.systemui.statusbar.phone.DozeParameters,com.android.systemui.statusbar.phone.ScrimController,com.android.systemui.statusbar.phon.KeyguardLiftController,dagger.Lazy,dagger.Lazy,com.android.systemui.statusbar.phone.DozeServiceHost,android.os.PowerManager,com.android.systemui.recents.ScreenPinningRequest,com.android.systemui.statusbar.phone.DozeScrimController,com.android.systemui.volume.VolumeComponent,com.android.systemui.statusbar.CommandQueue,java.util.Optional,javax.inject.Provider,com.android.systemui.shared.plugins.PluginManager,java.util.Optional,com.android.systemui.statusbar.phone.LightsOutNotifController,com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter.Builder,com.android.systemui.statusbar.phone.ShadeController,com.android.systemui.statusbar.SuperStatusBarViewFactory,com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager,com.android.keyguard.ViewMediatorCallback,com.android.systemui.InitController,com.android.systemui.plugins.DarkIconDispatcher,android.os.Handler,com.android.systemui.plugins.PluginDependencyProvider,com.android.systemui.statusbar.phone.KeyguardDismissUtil,com.android.systemui.statusbar.policy.ExtensionController,com.android.systemui.statusbar.policy.UserInfoControllerImpl,com.android.systemui.statusbar.phone.PhoneStatusBarPolicy,com.android.systemui.statusbar.KeyguardIndicationController,com.android.systemui.keyguard.DismissCallbackRegistry,dagger.Lazy,com.android.systemui.statusbar.phone.StatusBarTouchableRegionManager)>
<com.android.keyguard.KeyguardPatternView: boolean startDisappearAnimation(java.lang.Runnable)>
<com.android.systemui.statusbar.policy.SmartReplyView: int getHeightUpperLimit()>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: android.view.View getLeftPreview()>
<com.android.systemui.car.window.SystemUIOverlayWindowController: boolean isAttached()>
<com.android.server.pm.PackageSetting: boolean areInstallPermissionsFixed()>
<android.perftests.utils.BitmapUtils: void saveBitmapIntoPNG(android.content.Context,android.graphics.Bitmap,int)>
<com.android.keyguard.KeyguardStatusView: void setPulsing(boolean)>
<com.android.server.policy.WindowOrientationListener: void disable()>
<com.android.systemui.globalactions.GlobalActionsLayout: void setDivisionView(android.view.View)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setChildLocationsChangedListener(com.android.systemui.statusbar.notification.logging.NotificationLogger.OnChildLocationsChangedListener)>
<com.android.server.AlarmManagerInternal: void remove(android.app.PendingIntent)>
<com.android.systemui.qs.tiles.BatterySaverTile: void onBatteryLevelChanged(int,boolean,boolean)>
<com.android.server.biometrics.Utils: boolean isValidAuthenticatorConfig(int)>
<com.android.systemui.pip.phone.PipManager: void updateReentryBounds()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setContentBackground(int,boolean,com.android.systemui.statusbar.notification.row.NotificationContentView)>
<com.android.systemui.statusbar.NotificationMediaManager: boolean getShowCompactMediaSeekbar()>
<com.android.server.media.MediaSession2Record: int getSessionPolicies()>
<com.android.settingslib.notification.ZenDurationDialog: void onClickTimeButton(android.view.View,com.android.settingslib.notification.ZenDurationDialog.ConditionTag,boolean,int)>
<android.net.wifi.WifiScanner: java.util.List getAvailableChannels(int)>
<com.android.systemui.statusbar.phone.BarTransitions.BarBackgroundDrawable: void finishAnimation()>
<com.android.server.NetworkManagementService: void setIPv6AddrGenMode(java.lang.String,int)>
<com.android.server.pm.PackageManagerService: void setApplicationCategoryHint(java.lang.String,int,java.lang.String)>
<com.android.externalstorage.ExternalStorageProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>
<com.android.server.biometrics.EnrollClient: boolean onRemoved(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.settingslib.net.NetworkCycleDataLoader.Builder: com.android.settingslib.net.NetworkCycleDataLoader.Builder setCycles(java.util.ArrayList)>
<android.net.wifi.hotspot2.pps.HomeSp: int describeContents()>
<com.android.server.stats.StatsCompanionService: void cancelPullingAlarm()>
<com.android.keyguard.KeyguardClockSwitch: void setBigClockContainer(android.view.ViewGroup)>
<com.android.systemui.statusbar.notification.collection.inflation.NotificationRowBinderImpl: void onNotificationRankingUpdated(com.android.systemui.statusbar.notification.collection.NotificationEntry,java.lang.Integer,com.android.systemui.statusbar.NotificationUiAdjustment,com.android.systemui.statusbar.NotificationUiAdjustment,com.android.systemui.statusbar.notification.row.NotificationRowContentBinder.InflationCallback)>
<com.android.server.pm.RestrictionsSet: boolean remove(int)>
<com.android.server.voiceinteraction.DatabaseHelper: void dump(java.io.PrintWriter)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: java.lang.String getName()>
<com.android.systemui.keyguard.KeyguardSliceProvider: void onConfigChanged(android.service.notification.ZenModeConfig)>
<com.android.server.accessibility.MagnificationController: float getOffsetX(int)>
<com.android.server.pm.PackageManagerService: void registerDexModule(java.lang.String,java.lang.String,boolean,android.content.pm.IDexModuleRegisterCallback)>
<com.android.systemui.statusbar.phone.StatusBar: void startActivityDismissingKeyguard(android.content.Intent,boolean,boolean)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: void setAppWidgetManager(android.appwidget.AppWidgetManagerInternal)>
<com.android.systemui.qs.external.QSTileServiceWrapper: android.os.IBinder asBinder()>
<com.android.server.audio.AudioService: int getLastAudibleStreamVolume(int)>
<com.android.systemui.pip.phone.PipMenuActivityController.Listener: void onPipExpand()>
<com.android.systemui.assist.ui.PerimeterPathGuide: void strokeSegment(android.graphics.Path,float,float)>
<com.android.systemui.qs.QSPanel: void setExpanded(boolean)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService main(android.content.Context,com.android.server.pm.Installer,boolean,boolean)>
<com.android.server.search.SearchManagerService.Lifecycle: void onUnlockUser(int)>
<com.android.server.accounts.AccountManagerService: void addSharedAccountsFromParentUser(int,int,java.lang.String)>
<android.net.wifi.aware.WifiAwareSession: int getClientId()>
<com.android.systemui.qs.QSPanel: void onMeasure(int,int)>
<com.android.keyguard.KeyguardPinBasedInputView: void resetState()>
<com.android.systemui.qs.external.QSTileServiceWrapper: boolean onStartListening()>
<com.android.server.biometrics.EnrollClient: boolean onAuthenticated(android.hardware.biometrics.BiometricAuthenticator.Identifier,boolean,java.util.ArrayList)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void updateBackground()>
<com.android.systemui.bubbles.BubbleViewInfoTask: com.android.systemui.bubbles.BubbleViewInfoTask.BubbleViewInfo doInBackground(java.lang.Void[])>
<com.android.server.autofill.ui.CustomScrollView: void onMeasure(int,int)>
<com.android.systemui.qs.tiles.CellularTile: com.android.systemui.plugins.qs.DetailAdapter getDetailAdapter()>
<com.android.systemui.qs.QSPanel: void setFooterPageIndicator(com.android.systemui.qs.PageIndicator)>
<android.net.wifi.aware.ConfigRequest.Builder: android.net.wifi.aware.ConfigRequest.Builder setSupport6gBand(boolean)>
<com.android.systemui.pip.PipAnimationController.PipTransitionAnimator: void onAnimationUpdate(android.animation.ValueAnimator)>
<com.android.systemui.recents.OverviewProxyRecentsImpl: void onStart(android.content.Context)>
<com.android.systemui.wm.DisplayLayout: void rotateBounds(android.graphics.Rect,android.graphics.Rect,int)>
<com.android.systemui.statusbar.dagger.StatusBarDependenciesModule: com.android.systemui.statusbar.NotificationListener provideNotificationListener(android.content.Context,android.app.NotificationManager,android.os.Handler)>
<com.android.keyguard.NumPadKey: void userActivity()>
<com.android.systemui.qs.QSAnimator: void setOnKeyguard(boolean)>
<com.android.server.policy.PhoneWindowManager: void finishedWakingUp(int)>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void setKeyguardUserSwitcherShowing(boolean,boolean)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void onDozingChanged(boolean)>
<com.android.server.policy.PhoneWindowManager: boolean isScreenOn()>
<com.android.settingslib.media.InfoMediaDevice: java.lang.String getSummary()>
<com.android.systemui.car.bluetooth.ConnectedDeviceSignalController: void stopListening()>
<javax.obex.ServerSession: void close()>
<com.android.systemui.qs.PagedTileLayout.TilePage: boolean isFull()>
<com.android.systemui.plugins.FalsingManager: void onAffordanceSwipingAborted()>
<com.android.server.appbinding.finders.CarrierMessagingClientServiceFinder: java.lang.Class getServiceClass()>
<com.android.systemui.globalactions.GlobalActionsFlatLayout: void addToListView(android.view.View,boolean)>
<android.widget.TextViewPrecomputedTextPerfTest: void testOnDraw_RandomText()>
<android.net.wifi.WifiEnterpriseConfig: void setClientKeyEntryWithCertificateChain(java.security.PrivateKey,java.security.cert.X509Certificate[])>
<com.android.server.policy.WindowManagerPolicy: void setDefaultDisplay(com.android.server.policy.WindowManagerPolicy.DisplayContentInfo)>
<com.android.server.NativeDaemonEvent: java.lang.String[] filterMessageList(com.android.server.NativeDaemonEvent[],int)>
<com.android.settingslib.bluetooth.HidDeviceProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean onRequestSendAccessibilityEventInternal(android.view.View,android.view.accessibility.AccessibilityEvent)>
<com.android.settingslib.bluetooth.LocalBluetoothProfileManager: com.android.settingslib.bluetooth.MapClientProfile getMapClientProfile()>
<com.android.systemui.statusbar.phone.NotificationGroupManager.OnGroupChangeListener: void onGroupCreated(com.android.systemui.statusbar.phone.NotificationGroupManager.NotificationGroup,java.lang.String)>
<com.android.systemui.qs.tiles.ScreenRecordTile: android.content.Intent getLongClickIntent()>
<com.android.server.input.InputManagerService: void addPortAssociation(java.lang.String,int)>
<com.android.systemui.classifier.AccelerationClassifier: void <init>(com.android.systemui.classifier.ClassifierData)>
<com.android.systemui.wm.DisplayLayout: void <init>(com.android.systemui.wm.DisplayLayout)>
<com.android.systemui.assist.AssistHandleViewController: void setAssistHintBlocked(boolean)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void show(android.os.Bundle)>
<com.android.systemui.bubbles.BubbleTaskView: void surfaceDestroyed(android.view.SurfaceHolder)>
<com.android.settingslib.bluetooth.LocalBluetoothManager: android.content.Context getContext()>
<com.android.settingslib.media.InfoMediaManager: void startScan()>
<com.android.server.locksettings.SyntheticPasswordManager: void destroyTokenBasedSyntheticPassword(long,int)>
<com.android.settingslib.inputmethod.InputMethodSettingValuesWrapper: java.util.List getInputMethodList()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,boolean)>
<android.media.Controller2Link: void onCancelCommand(int)>
<com.android.systemui.volume.VolumeToolTipView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.pacprocessor.LibpacInterface: boolean startPacSupport()>
<com.android.server.biometrics.AuthService.Injector: android.hardware.fingerprint.IFingerprintService getFingerprintService()>
<com.android.systemui.plugins.ActivityStarter: void startPendingIntentDismissingKeyguard(android.app.PendingIntent,java.lang.Runnable,android.view.View)>
<com.android.systemui.media.dialog.MediaOutputBaseDialog: void onCreate(android.os.Bundle)>
<com.android.server.statusbar.StatusBarManagerInternal: void cancelPreloadRecentApps()>
<com.android.systemui.dagger.DependencyProvider: android.app.INotificationManager provideINotificationManager()>
<com.android.keyguard.KeyguardViewController: void hide(long,long)>
<com.android.server.usb.UsbAlsaDevice: void start()>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: void clearAnimationCallbacks()>
<com.android.server.pm.PackageManagerService: java.lang.String getNameForUid(int)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setExtraWidthForClipping(float)>
<com.android.systemui.power.EnhancedEstimatesImpl: long getLowWarningThreshold()>
<com.android.systemui.statusbar.KeyguardIndicationController: void hideTransientIndication()>
<com.android.gallery3d.exif.ExifInterface: void resetTagDefinitions()>
<com.android.server.statusbar.StatusBarManagerInternal: void onRecentsAnimationStateChanged(boolean)>
<com.android.systemui.statusbar.StatusBarWifiView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void onMeasure(int,int)>
<com.android.settingslib.applications.PermissionsSummaryHelper: void getPermissionSummary(android.content.Context,java.lang.String,com.android.settingslib.applications.PermissionsSummaryHelper.PermissionsResultCallback)>
<com.android.systemui.qs.tiles.WifiTile: com.android.systemui.plugins.qs.QSTile.SignalState newTileState()>
<com.android.packageinstaller.wear.WearPackageArgs: java.lang.String getCompressionAlg(android.os.Bundle)>
<com.android.systemui.globalactions.GlobalActionsPopupMenu: void <init>(android.content.Context,boolean)>
<android.net.wifi.aware.WifiAwareSession: void <init>(android.net.wifi.aware.WifiAwareManager,android.os.Binder,int)>
<com.android.server.usb.descriptors.UsbEndpointDescriptor: byte getRefresh()>
<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate getClientCertificate()>
<android.net.wifi.p2p.WifiP2pConfig: java.lang.String toString()>
<com.android.systemui.biometrics.AuthBiometricFaceView: int getStateForAfterError()>
<android.net.wifi.rtt.ResponderLocation: int getDatum()>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.policy.RotationLockController provideRotationLockController(com.android.systemui.statusbar.policy.RotationLockControllerImpl)>
<com.android.systemui.statusbar.CommandQueue: void showAuthenticationDialog(android.os.Bundle,android.hardware.biometrics.IBiometricServiceReceiverInternal,int,boolean,int,java.lang.String,long,int)>
<javax.microedition.khronos.opengles.GL11: boolean glIsBuffer(int)>
<com.android.systemui.shared.recents.utilities.Utilities: float clamp(float,float,float)>
<com.android.systemui.keyguard.KeyguardViewMediator: void verifyUnlock(com.android.internal.policy.IKeyguardExitCallback)>
<com.android.server.textclassifier.IconsContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.settingslib.graph.BatteryMeterDrawableBase: float getRadiusRatio()>
<com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter.Builder: com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter.Builder setNotificationPresenter(com.android.systemui.statusbar.NotificationPresenter)>
<com.android.server.audio.AudioService: int setHdmiSystemAudioSupported(boolean)>
<android.net.wifi.hotspot2.pps.HomeSp: java.lang.String getFriendlyName()>
<com.android.settingslib.accounts.AuthenticatorHelper: int getLabelIdForType(java.lang.String)>
<com.android.systemui.statusbar.policy.KeyButtonView: void draw(android.graphics.Canvas)>
<com.android.systemui.tuner.ShortcutPicker: boolean onPreferenceTreeClick(androidx.preference.Preference)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setUserExpanded(boolean,boolean)>
<android.database.TableHelper: java.lang.String insertSql()>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getPersistentApplications(int)>
<com.android.systemui.car.keyguard.CarKeyguardViewMediator: void registerListeners()>
<com.android.server.utils.ManagedApplicationService: void connect()>
<com.android.server.people.data.Event: int hashCode()>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean handleRequestArcTermination(com.android.server.hdmi.HdmiCecMessage)>
<com.android.systemui.car.navigationbar.CarNavigationButton: android.graphics.drawable.Drawable getAppIcon()>
<com.android.systemui.statusbar.phone.NotificationGroupManager: boolean isChildInGroupWithSummary(android.service.notification.StatusBarNotification)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setOnHeightChangedListener(com.android.systemui.statusbar.notification.row.ExpandableView.OnHeightChangedListener)>
<com.android.server.inputmethod.InputMethodManagerInternal: void setInteractive(boolean)>
<com.android.proxyhandler.ProxyServer: void stopServer()>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>
<com.android.server.pm.PackageManagerService.IntentFilterVerifier: boolean addOneIntentFilterVerification(int,int,int,android.content.IntentFilter,java.lang.String)>
<com.android.systemui.statusbar.policy.KeyguardUserDetailItemView: int getFontSizeDimen()>
<com.android.settingslib.net.DataUsageController: void setNetworkController(com.android.settingslib.net.DataUsageController.NetworkNameProvider)>
<android.net.wifi.rtt.ResponderConfig: android.net.wifi.rtt.ResponderConfig fromWifiAwarePeerHandleWithDefaults(android.net.wifi.aware.PeerHandle)>
<com.android.server.BatteryService.HealthServiceWrapper.Callback: void onRegistration(android.hardware.health.V2_0.IHealth,android.hardware.health.V2_0.IHealth,java.lang.String)>
<com.android.settingslib.utils.IconCache: void updateIcon(android.graphics.drawable.Icon,android.graphics.drawable.Drawable)>
<com.android.gallery3d.glrenderer.GLCanvas: void deleteBuffer(int)>
<com.android.systemui.ActivityStarterDelegate: void <init>(java.util.Optional)>
<com.android.server.NetworkScoreService.DispatchingContentObserver: void onChange(boolean,android.net.Uri)>
<com.android.systemui.qs.QSContainerImplController: void setListening(boolean)>
<com.android.server.NetworkScoreService.DispatchingContentObserver: void onChange(boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: float getCurrentOverScrolledPixels(boolean)>
<javax.microedition.khronos.opengles.GL10: void glTranslatef(float,float,float)>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void <init>(android.content.Context,com.android.systemui.statusbar.CommandQueue)>
<com.android.systemui.statusbar.policy.AccessibilityController: void removeStateChangedCallback(com.android.systemui.statusbar.policy.AccessibilityController.AccessibilityStateChangedCallback)>
<com.google.android.startop.iorap.JobScheduledEvent: com.google.android.startop.iorap.JobScheduledEvent createIdleMaintenance(int,android.app.job.JobParameters)>
<com.android.systemui.bubbles.BubbleManageEducationView: void setManageViewPosition(int,int)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.server.signedconfig.SignedConfigService: void registerUpdateReceiver(android.content.Context)>
<com.android.server.timezonedetector.ReferenceWithHistory: java.lang.Object get()>
<com.android.systemui.ActivityStarterDelegate: void postStartActivityDismissingKeyguard(android.content.Intent,int)>
<com.android.server.pm.PackageSettingBase: com.android.server.pm.PackageSettingBase updateFrom(com.android.server.pm.PackageSettingBase)>
<javax.microedition.khronos.opengles.GL10: void glMultiTexCoord4f(int,float,float,float,float)>
<com.android.server.display.BrightnessMappingStrategy: boolean hasUserDataPoints()>
<android.media.Session2Command: android.os.Bundle getCustomExtras()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: android.view.View getExpandButton()>
<com.android.settingslib.suggestions.SuggestionControllerMixinCompat: void dismissSuggestion(android.service.settings.suggestions.Suggestion)>
<com.android.server.pm.PackageManagerService.PendingPackageBroadcasts: android.util.ArrayMap packagesForUserId(int)>
<com.android.server.locksettings.LockSettingsStrongAuth: void <init>(android.content.Context)>
<com.android.systemui.statusbar.policy.BatteryController: boolean isReverseSupported()>
<com.android.systemui.qs.tiles.CastTile: com.android.systemui.plugins.qs.QSTile.BooleanState newTileState()>
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder setPmk(byte[])>
<com.android.gallery3d.common.Utils: void debug(java.lang.String,java.lang.Object[])>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void setLocationPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.PackagesProvider)>
<android.media.DataSourceCallback: int readAt(long,byte[],int,int)>
<com.android.systemui.shared.system.TaskStackChangeListener: void onActivityLaunchOnSecondaryDisplayFailed(android.app.ActivityManager.RunningTaskInfo)>
<com.android.systemui.statusbar.policy.BatteryControllerImpl: void removeCallback(com.android.systemui.statusbar.policy.BatteryController.BatteryStateChangeCallback)>
<com.android.server.utils.quota.Category: java.lang.String toString()>
<com.android.server.LockGuard: java.lang.Object installLock(java.lang.Object,int)>
<com.android.systemui.shared.tracing.FrameProtoTracer.ProtoTraceParams: byte[] getProtoBytes(java.lang.Object)>
<com.android.systemui.statusbar.policy.DateView: void <init>(android.content.Context,android.util.AttributeSet)>
<javax.microedition.khronos.opengles.GL11Ext: void glLoadPaletteFromModelViewMatrixOES()>
<com.android.server.stats.StatsCompanion.Lifecycle: void onBootPhase(int)>
<android.net.wifi.WifiNetworkSpecifier: boolean equals(java.lang.Object)>
<com.android.server.input.InputManagerService: void disableInputDevice(int)>
<com.android.server.people.data.ConversationInfo: boolean isShortcutLongLived()>
<com.android.server.IntentResolver: int unregister_intent_filter(java.lang.Object,java.util.Iterator,android.util.ArrayMap,java.lang.String)>
<com.android.systemui.wm.DisplayImeController.PerDisplay.DisplayWindowInsetsControllerImpl: void insetsChanged(android.view.InsetsState)>
<com.android.commands.uiautomator.DumpCommand: void run(java.lang.String[])>
<com.android.systemui.statusbar.AlertingNotificationManager: boolean hasNotifications()>
<javax.obex.ObexHelper: int getMaxTxPacketSize(javax.obex.ObexTransport)>
<com.android.server.accessibility.AccessibilityManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.media.MediaSessionService: void onStart()>
<com.android.systemui.tuner.TunerServiceImpl: void clearAll()>
<com.android.systemui.statusbar.phone.StatusBarRemoteInputCallback: boolean shouldHandleRemoteInput(android.view.View,android.app.PendingIntent)>
<com.android.uiautomator.core.UiCollection: com.android.uiautomator.core.UiObject getChildByText(com.android.uiautomator.core.UiSelector,java.lang.String)>
<com.android.systemui.media.MediaBrowserFactory: android.media.browse.MediaBrowser create(android.content.ComponentName,android.media.browse.MediaBrowser.ConnectionCallback,android.os.Bundle)>
<com.android.dynsystem.DynamicSystemInstallationService: void onProgressUpdate(com.android.dynsystem.InstallationAsyncTask.Progress)>
<com.android.settingslib.bluetooth.CachedBluetoothDeviceManager: java.util.Collection getCachedDevicesCopy()>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void resetViewStates()>
<com.android.systemui.statusbar.phone.AutoHideController: void setNavigationBar(com.android.systemui.statusbar.AutoHideUiElement)>
<com.android.settingslib.wifi.AccessPoint: java.lang.String getSsidStr()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: long getLastAudiblyAlertedMs()>
<android.media.MediaController2.ControllerCallback: void onPlaybackActiveChanged(android.media.MediaController2,boolean)>
<com.android.systemui.pip.phone.PipTouchGesture: void onDown(com.android.systemui.pip.phone.PipTouchState)>
<com.android.systemui.plugins.PluginEnablerImpl: boolean isEnabled(android.content.ComponentName)>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean mustStayOnScreen()>
<com.google.android.startop.iorap.AppIntentEvent: java.lang.String toString()>
<com.android.server.pm.dex.SystemServerDexLoadReporter: void configureSystemServerDexReporter(android.content.pm.IPackageManager)>
<com.android.systemui.statusbar.policy.BrightnessMirrorController: void hideMirror()>
<com.android.systemui.statusbar.FlingAnimationUtils: void apply(android.view.ViewPropertyAnimator,float,float,float,float)>
<com.android.server.textclassifier.TextClassificationManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.wm.DisplayController.OnDisplaysChangedListener: void onDisplayRemoved(int)>
<com.android.server.display.AmbientBrightnessStatsTracker: void dump(java.io.PrintWriter)>
<com.android.server.ExtconUEventObserver: void startObserving(com.android.server.ExtconUEventObserver.ExtconInfo)>
<com.android.packageinstaller.DeleteStagedFileOnResult: void onCreate(android.os.Bundle)>
<com.android.server.SystemService: void onUserStopping(com.android.server.SystemService.TargetUser)>
<com.android.server.pm.PackageKeySetData: long getProperSigningKeySet()>
<com.android.server.appbinding.AppBindingService.Lifecycle: void onStartUser(int)>
<com.android.server.slice.SliceClientPermissions.SliceAuthority: java.lang.String toString()>
<com.android.server.statusbar.StatusBarManagerService: void onBubbleNotificationSuppressionChanged(java.lang.String,boolean)>
<com.android.systemui.qs.QSPanel: void onTilesChanged()>
<javax.microedition.khronos.opengles.GL10: void glClientActiveTexture(int)>
<com.android.server.usb.descriptors.UsbDescriptorParser: void <init>(java.lang.String,byte[])>
<com.android.systemui.statusbar.policy.DateView: void onAttachedToWindow()>
<com.android.settingslib.graph.BatteryMeterDrawableBase: boolean getPowerSave()>
<com.android.server.pm.ModuleInfoProvider: void <init>(android.content.res.XmlResourceParser,android.content.res.Resources,com.android.server.pm.ApexManager)>
<com.android.systemui.MultiListLayout: void setAdapter(com.android.systemui.MultiListLayout.MultiListAdapter)>
<com.android.server.audio.AudioService: int getCurrentAudioFocus()>
<com.android.settingslib.wifi.AccessPoint: int compareTo(com.android.settingslib.wifi.AccessPoint)>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void disableAnimationsDuringHide(long)>
<com.android.systemui.statusbar.phone.PanelViewController: void onTrackingStarted()>
<com.android.uiautomator.core.Configurator: long getWaitForIdleTimeout()>
<com.android.keyguard.KeyguardSecurityView: void showMessage(java.lang.CharSequence,android.content.res.ColorStateList)>
<com.android.server.BinderCallsStatsService.Internal: android.util.ArrayMap getExportedExceptionStats()>
<com.android.server.VibratorService: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
<com.android.systemui.plugins.ActivityStarter: void startPendingIntentDismissingKeyguard(android.app.PendingIntent,java.lang.Runnable)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isProduct()>
<com.android.systemui.statusbar.notification.collection.NotifInflaterImpl: void rebindViews(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.collection.inflation.NotifInflater.InflationCallback)>
<com.android.systemui.globalactions.MinHeightScrollView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.policy.SmartReplyView.SmartActions: void <init>(java.util.List,boolean)>
<com.android.systemui.classifier.Point: boolean equals(com.android.systemui.classifier.Point)>
<com.android.systemui.tuner.RadioListPreference.RadioFragment: void onCreatePreferences(android.os.Bundle,java.lang.String)>
<com.android.server.Watchdog: void processStarted(java.lang.String,int)>
<com.android.systemui.statusbar.phone.PanelViewController: void setHeadsUpManager(com.android.systemui.statusbar.phone.HeadsUpManagerPhone)>
<com.android.server.DeviceIdleController: java.lang.String[] getSystemPowerWhitelistInternal()>
<com.android.systemui.classifier.brightline.FalsingDataProvider: void <init>(android.util.DisplayMetrics,com.android.systemui.statusbar.policy.BatteryController)>
<com.android.systemui.SwipeHelper: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setHeights(int,int,int)>
<com.android.server.appbinding.finders.CarrierMessagingClientServiceFinder: java.lang.String getAppDescription()>
<com.android.systemui.assist.ui.InvocationLightsView: void onInvocationProgress(float)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: boolean shouldAllowLockscreenRemoteInput()>
<com.android.server.accessibility.AccessibilityManagerService: void registerSystemAction(android.app.RemoteAction,int)>
<com.android.systemui.statusbar.policy.UserInfoControllerImpl: void removeCallback(com.android.systemui.statusbar.policy.UserInfoController.OnUserInfoChangedListener)>
<com.android.systemui.statusbar.phone.BiometricUnlockController: boolean unlockedByWakeAndUnlock()>
<com.android.settingslib.widget.ActionButtonsPreference: void <init>(android.content.Context)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setIsAppInteractionRequired(boolean)>
<com.android.egg.neko.NekoTile: void onStartListening()>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean isGoneForLayoutLw()>
<com.google.android.startop.iorap.SystemServiceUserEvent: boolean equals(java.lang.Object)>
<javax.microedition.khronos.opengles.GL10: void glDepthRangex(int,int)>
<com.android.server.VibratorService: boolean unregisterVibratorStateListener(android.os.IVibratorStateListener)>
<com.android.server.stats.StatsCompanion.PendingIntentRef: void sendSubscriberBroadcast(long,long,long,long,java.lang.String[],android.os.StatsDimensionsValueParcel)>
<com.android.server.updates.ConfigUpdateInstallReceiver: boolean verifyVersion(int,int)>
<com.android.systemui.qs.tiles.DataUsageDetailView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.plugins.qs.QS: void setShowCollapsedOnKeyguard(boolean)>
<android.view.ViewPerfTest: void testTwelveKeyInflate()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: int getPositionInLinearLayout(android.view.View)>
<com.android.networkstack.tethering.TetheringDependencies: android.net.NetworkRequest getDefaultNetworkRequest()>
<com.android.server.biometrics.BiometricUserState: void parseBiometricsLocked(org.xmlpull.v1.XmlPullParser)>
<com.android.server.display.DisplayModeDirector.DesiredDisplayModeSpecs: int hashCode()>
<com.android.systemui.statusbar.AlertingNotificationManager: void onAlertEntryAdded(com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry)>
<com.android.systemui.bubbles.BubbleController: boolean isBubbleNotificationSuppressedFromShade(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.settingslib.development.AbstractLogpersistPreferenceController: void setLogpersistOff(boolean)>
<com.android.server.wallpaper.WallpaperManagerService: android.app.WallpaperInfo getWallpaperInfo(int)>
<com.android.server.audio.AudioService: void silenceRingerModeInternal(java.lang.String)>
<com.android.systemui.plugins.qs.QSTile: android.metrics.LogMaker populate(android.metrics.LogMaker)>
<com.android.systemui.statusbar.phone.StatusBar: boolean interceptTouchEvent(android.view.MotionEvent)>
<com.android.systemui.qs.touch.SwipeDetector: void <init>(float,com.android.systemui.qs.touch.SwipeDetector.Listener,com.android.systemui.qs.touch.SwipeDetector.Direction)>
<com.android.server.ConnectivityService: boolean updateLockdownVpn()>
<com.android.server.usb.descriptors.Usb20ACHeader: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void addVerticalTranslationListener(java.lang.Runnable)>
<com.android.settingslib.volume.Util: java.lang.String playbackInfoToString(android.media.session.MediaController.PlaybackInfo)>
<com.android.server.usb.descriptors.report.TextReportCanvas: void closeHeader(int)>
<android.perftests.utils.BenchmarkState: void sendFullStatusReport(android.app.Instrumentation,java.lang.String)>
<com.android.systemui.statusbar.StatusBarMobileView: void onDarkChanged(android.graphics.Rect,float,int)>
<com.android.server.IntentResolver: boolean isFilterVerified(java.lang.Object)>
<android.widget.TextViewPrecomputedTextPerfTest: void testOnMeasure_RandomText_Selectable()>
<com.android.systemui.statusbar.policy.HeadsUpManager: void unpinAll(boolean)>
<com.android.systemui.qs.tiles.AirplaneModeTile: java.lang.CharSequence getTileLabel()>
<com.android.systemui.statusbar.policy.NextAlarmControllerImpl: void removeCallback(com.android.systemui.statusbar.policy.NextAlarmController.NextAlarmChangeCallback)>
<com.android.server.adb.AdbDebuggingManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>
<com.android.systemui.statusbar.policy.AccessPointControllerImpl: void dump(java.io.PrintWriter)>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: java.util.List getReceivers()>
<com.android.systemui.statusbar.GestureRecorder.Gesture.TagRecord: java.lang.String toJson()>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: void setColorFilter(android.graphics.ColorFilter)>
<com.android.systemui.statusbar.phone.StatusBar: void startKeyguard()>
<javax.microedition.khronos.opengles.GL11: void glGetLightfv(int,int,float[],int)>
<com.android.server.usb.descriptors.UsbEndpointDescriptor: byte getSyncAddress()>
<com.android.powermodel.AppActivity: com.google.common.collect.ImmutableSet getComponents()>
<com.android.systemui.media.ResumeMediaBrowser: void <init>(android.content.Context,com.android.systemui.media.ResumeMediaBrowser.Callback,android.content.ComponentName,com.android.systemui.media.MediaBrowserFactory)>
<android.net.util.TetheringUtils.ForwardedStats: void <init>(long,long)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setTrackedHeadsUp(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvfv(int,int,java.nio.FloatBuffer)>
<com.android.systemui.statusbar.policy.MobileSignalController: void notifyListeners(com.android.systemui.statusbar.policy.NetworkController.SignalCallback)>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void onUserInfoChanged(java.lang.String,android.graphics.drawable.Drawable,java.lang.String)>
<com.android.systemui.qs.QSFooterImpl: void setListening(boolean)>
<com.android.server.pm.PackageVerificationResponse: void <init>(int,int)>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameteriv(int,int,java.nio.IntBuffer)>
<com.android.settingslib.development.DeveloperOptionsPreferenceController: void onDeveloperOptionsEnabled()>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: void unregisterPointerEventListener(android.view.WindowManagerPolicyConstants.PointerEventListener,int)>
<com.android.settingslib.applications.ApplicationsState: com.android.settingslib.applications.ApplicationsState getInstance(android.app.Application)>
<com.android.server.webkit.SystemInterface: java.util.List getPackageInfoForProviderAllUsers(android.content.Context,android.webkit.WebViewProviderInfo)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void addTrackingHeadsUpListener(java.util.function.Consumer)>
<com.android.systemui.qs.SecureSetting: void <init>(android.content.Context,android.os.Handler,java.lang.String)>
<com.android.shell.BugreportStorageProvider: java.lang.String getDocIdForFile(java.io.File)>
<com.android.keyguard.KeyguardPatternView: boolean needsInput()>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean isTransformingIntoShelf()>
<com.android.systemui.util.time.SystemClockImpl: long uptimeMillis()>
<com.android.systemui.qs.tiles.AirplaneModeTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.BooleanState,java.lang.Object)>
<com.android.systemui.qs.QSFragment: void onDestroy()>
<com.android.systemui.ForegroundServicesUserState: boolean removeImportantNotification(java.lang.String,java.lang.String)>
<com.android.server.appop.AppOpsService: java.util.List getUidOps(int,int[])>
<com.android.server.om.OverlayManagerServiceImpl.OverlayChangeListener: void onOverlaysChanged(java.lang.String,int)>
<javax.obex.ServerRequestHandler: long getConnectionId()>
<com.android.systemui.statusbar.policy.LocationControllerImpl: void <init>(android.content.Context,android.os.Looper,android.os.Looper,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.BootCompleteCache)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void handleUserSwitch(int)>
<com.android.systemui.volume.Interaction: void register(android.view.View,com.android.systemui.volume.Interaction.Callback)>
<com.android.server.pm.UserManagerService: void setUserAdmin(int)>
<com.android.systemui.statusbar.phone.PanelViewController: float getOpeningHeight()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: android.view.View getHeadsUpChild()>
<android.net.wifi.WifiConfiguration: void setSecurityParams(int)>
<com.android.settingslib.RestrictedLockUtils.EnforcedAdmin: com.android.settingslib.RestrictedLockUtils.EnforcedAdmin combine(com.android.settingslib.RestrictedLockUtils.EnforcedAdmin,com.android.settingslib.RestrictedLockUtils.EnforcedAdmin)>
<com.android.server.audio.MediaFocusControl: void unregisterAudioFocusClient(java.lang.String)>
<com.android.statementservice.retriever.Relation: com.android.statementservice.retriever.Relation create(java.lang.String,java.lang.String)>
<com.android.systemui.doze.DozeLog: void traceTimeTickScheduled(long,long)>
<com.android.server.accessibility.MagnificationController: void unregister(int)>
<com.android.media.remotedisplay.RemoteDisplay: void setVolumeMax(int)>
<com.android.systemui.qs.QSPanel: com.android.systemui.plugins.qs.QSTileView createTileView(com.android.systemui.plugins.qs.QSTile,boolean)>
<com.android.systemui.qs.QSScrollLayout: boolean shouldIntercept(android.view.MotionEvent)>
<com.android.systemui.statusbar.phone.StatusBar: boolean isFullScreenUserSwitcherState()>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: int getIntrinsicHeight()>
<com.android.settingslib.deviceinfo.AbstractConnectivityPreferenceController: java.lang.String[] getConnectivityIntents()>
<android.net.ip.IpClientCallbacks: void onQuit()>
<com.android.server.soundtrigger_middleware.SoundTriggerHw2Enforcer: int loadSoundModel(android.hardware.soundtrigger.V2_1.ISoundTriggerHw.SoundModel,com.android.server.soundtrigger_middleware.ISoundTriggerHw2.Callback,int)>
<com.android.server.usb.descriptors.UsbASFormat: int[] getSampleRates()>
<android.os.TracePerfTest: void testAsyncBeginEnd()>
<com.android.systemui.statusbar.notification.stack.StackStateAnimator: void setHeadsUpAppearHeightBottom(int)>
<com.android.systemui.classifier.FalsingManagerFake: boolean shouldEnforceBouncer()>
<com.android.server.display.BrightnessMappingStrategy: float inferAutoBrightnessAdjustment(float,float,float)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.OnMenuEventListener: void onMenuShown(android.view.View)>
<com.android.systemui.qs.PageIndicator: void setLocation(float)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void onFullyHiddenChanged(boolean)>
<com.android.statementservice.retriever.AbstractStatementRetriever.Result: java.util.List getStatements()>
<com.android.server.AttributeCache.Entry: void <init>(android.content.Context,android.content.res.TypedArray)>
<com.android.systemui.bubbles.BubbleOverflow: void <init>(android.content.Context)>
<com.android.server.TelephonyRegistry: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationTemplateViewWrapper: void setContentHeight(int,int)>
<com.android.settingslib.widget.UpdatableListPreferenceDialogFragment: void onSaveInstanceState(android.os.Bundle)>
<com.android.server.accessibility.MagnificationController.ControllerContext: android.content.Context getContext()>
<com.android.localtransport.LocalTransport: boolean hasRestoreDataForPackage(java.lang.String)>
<com.android.backupconfirm.BackupRestoreConfirmation: void onCreate(android.os.Bundle)>
<com.android.server.pm.OtaDexoptService: void dexoptNextPackage()>
<com.android.settingslib.drawer.DashboardCategory: void <init>(java.lang.String)>
<com.android.statementservice.retriever.AbstractStatementRetriever: com.android.statementservice.retriever.AbstractStatementRetriever createDirectRetriever(android.content.Context)>
<com.android.server.recoverysystem.RecoverySystemService: boolean clearBcb()>
<android.net.wifi.hotspot2.pps.Credential: java.security.cert.X509Certificate[] getClientCertificateChain()>
<com.android.server.slice.SliceManagerService.Lifecycle: void <init>(android.content.Context)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void hideAuthenticationDialog()>
<com.android.server.twilight.TwilightService: void onStart()>
<com.android.server.pm.Installer: void destroyAppProfiles(java.lang.String)>
<com.android.systemui.statusbar.phone.StatusBar: void showScreenPinningRequest(int)>
<android.net.wifi.hotspot2.PasspointConfiguration: android.net.wifi.hotspot2.pps.UpdateParameter getSubscriptionUpdate()>
<com.android.settingslib.RestrictedLockUtils: com.android.settingslib.RestrictedLockUtils.EnforcedAdmin getProfileOrDeviceOwner(android.content.Context,java.lang.String,android.os.UserHandle)>
<com.android.settingslib.bluetooth.A2dpProfile: void setHighQualityAudioEnabled(android.bluetooth.BluetoothDevice,boolean)>
<com.android.systemui.qs.QSPanel: void setBrightnessListening(boolean)>
<com.android.systemui.assist.AssistHandleBehaviorController.BehaviorController: void onAssistHandlesRequested()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBlendEquationSeparate(int,int)>
<com.android.systemui.statusbar.notification.NotificationActivityStarter: void startHistoryIntent(boolean)>
<com.android.systemui.pip.PipSnapAlgorithm: void <init>(android.content.Context)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isDeviceInteractive()>
<com.android.vpndialogs.ManageDialog: void onDestroy()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void doLongClickCallback(int,int)>
<com.android.systemui.statusbar.policy.UserSwitcherController.BaseUserAdapter: android.graphics.drawable.Drawable getIconDrawable(android.content.Context,com.android.systemui.statusbar.policy.UserSwitcherController.UserRecord)>
<com.android.systemui.qs.tiles.BluetoothTile: int getMetricsCategory()>
<com.android.server.biometrics.LoggableMonitor: long getFirstAcquireTimeMs()>
<com.android.systemui.statusbar.policy.UserSwitcherController: java.util.ArrayList getUsers()>
<android.net.wifi.IWifiManager: void registerTrafficStateCallback(android.os.IBinder,android.net.wifi.ITrafficStateCallback,int)>
<com.android.systemui.util.sensors.ProximitySensor: void pause()>
<com.android.server.pm.PackageManagerService: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>
<android.media.Session2Link: boolean unlinkToDeath(android.os.IBinder.DeathRecipient,int)>
<com.android.egg.neko.Cat: int chooseP(java.util.Random,int[],int)>
<com.android.server.pm.PackageManagerService: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>
<com.android.server.updates.ConfigUpdateInstallReceiver: void install(java.io.InputStream,int)>
<com.android.printservice.recommendation.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setPermittedCrossProfileNotificationListeners(android.content.ComponentName,java.util.List)>
<com.android.systemui.DejankUtils: void removeCallbacks(java.lang.Runnable)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeUtil: java.util.HashMap parseInputMethodsAndSubtypesString(java.lang.String)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationTemplateViewWrapper: int getHeaderTranslation(boolean)>
<com.android.systemui.car.statusbar.DozeServiceHost: void setAnimateWakeup(boolean)>
<javax.microedition.khronos.opengles.GL11: void glTexParameteri(int,int,int)>
<com.android.server.AppStateTracker.Listener: void updateAllJobs()>
<com.android.systemui.statusbar.StatusBarWifiView: boolean isIconVisible()>
<com.android.systemui.statusbar.policy.AccessPointControllerImpl: boolean canConfigWifi()>
<com.android.systemui.globalactions.GlobalActionsPopupMenu: void setOnItemLongClickListener(android.widget.AdapterView.OnItemLongClickListener)>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy.WifiIconState: void copyTo(com.android.systemui.statusbar.phone.StatusBarSignalPolicy.WifiIconState)>
<com.android.packageinstaller.wear.WearPackageArgs: int getCompanionSdkVersion(android.os.Bundle)>
<com.android.server.audio.AudioService: boolean isInCommunication()>
<com.android.systemui.statusbar.phone.StatusBarRemoteInputCallback: void disable(int,int,int,boolean)>
<com.android.server.pm.PackageInstallerSession: void addFile(int,java.lang.String,long,byte[],byte[])>
<com.android.systemui.wm.DisplayLayout: int getNavigationBarFrameHeight(android.content.res.Resources,boolean)>
<com.android.server.PendingIntentUtils: android.os.Bundle createDontSendToRestrictedAppsBundle(android.os.Bundle)>
<com.android.systemui.qs.customize.QSCustomizer: void restoreInstanceState(android.os.Bundle)>
<com.android.server.biometrics.Utils: boolean isBiometricRequested(android.os.Bundle)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserIcon(android.content.ComponentName,android.graphics.Bitmap)>
<com.android.systemui.keyguard.KeyguardService: void <init>(com.android.systemui.keyguard.KeyguardViewMediator,com.android.systemui.keyguard.KeyguardLifecyclesDispatcher)>
<com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback: void requestShowFillUi(android.view.autofill.AutofillId,int,int,android.view.autofill.IAutofillWindowPresenter)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService.PackageFreezer freezePackage(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void onDensityOrFontScaleChanged(android.content.Context)>
<com.android.systemui.statusbar.notification.collection.ShadeListBuilder: void setOnRenderListListener(com.android.systemui.statusbar.notification.collection.ShadeListBuilder.OnRenderListListener)>
<com.android.packageinstaller.TemporaryFileManager: java.io.File getStagedFile(android.content.Context)>
<com.android.server.camera.CameraStatsJobService: void schedule(android.content.Context)>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindDivider(com.android.systemui.stackdivider.Divider)>
<com.android.printservice.recommendation.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence)>
<com.android.systemui.qs.QSFooterImpl: void onClick(android.view.View)>
<com.android.commands.svc.UsbCommand: java.lang.String longHelp()>
<com.android.server.accounts.AccountManagerService: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
<com.android.printservice.recommendation.plugin.hp.HPRecommendationPlugin: boolean matchesCriteria(java.lang.String,android.net.nsd.NsdServiceInfo)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceGrantRevokeRuntimePermissionPermissions(java.lang.String)>
<com.android.systemui.qs.SignalTileView: int getIconMeasureMode()>
<com.android.printspooler.ui.FusedPrintersProvider: boolean areHistoricalPrintersLoaded()>
<android.net.wifi.WifiSsid: java.lang.String toString()>
<com.android.settingslib.core.lifecycle.ObservableFragment: void onResume()>
<com.android.settingslib.media.BluetoothMediaDevice: android.graphics.drawable.Drawable getIcon()>
<android.net.wifi.p2p.WifiP2pGroup: void <init>(java.lang.String)>
<android.net.wifi.hotspot2.pps.Credential: android.net.wifi.hotspot2.pps.Credential.CertificateCredential getCertCredential()>
<com.android.systemui.statusbar.phone.NavigationBarView: com.android.systemui.statusbar.policy.KeyButtonDrawable getHomeDrawable()>
<android.net.wifi.WifiInfo.Builder: android.net.wifi.WifiInfo.Builder setBssid(java.lang.String)>
<com.android.systemui.car.navigationbar.CarNavigationButton: boolean hasSelectionState()>
<com.android.systemui.car.navigationbar.CarNavigationBarController: android.view.ViewGroup getTopWindow()>
<com.android.systemui.statusbar.StatusBarIconView: void setIconAppearAmount(float)>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindRecents(com.android.systemui.recents.Recents)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setRemoved()>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.policy.LocationController provideLocationController(com.android.systemui.statusbar.policy.LocationControllerImpl)>
<com.android.systemui.qs.tiles.UserDetailItemView: com.android.systemui.qs.tiles.UserDetailItemView convertOrInflate(android.content.Context,android.view.View,android.view.ViewGroup)>
<com.android.systemui.pip.phone.PipMenuActivity: boolean onKeyUp(int,android.view.KeyEvent)>
<com.android.server.pm.ShortcutService: boolean setDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: int getNumUniqueChannels()>
<com.android.systemui.statusbar.phone.DozeServiceHost: void setAnimateWakeup(boolean)>
<com.android.keyguard.KeyguardSimPukView: int getPromptReasonStringRes(int)>
<com.android.server.people.data.DataManager: void <init>(android.content.Context)>
<com.android.server.pm.ShortcutService: android.content.Intent createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int)>
<com.android.settingslib.utils.AsyncLoader: void onStopLoading()>
<com.android.gallery3d.exif.ExifTag: long forceGetValueAsLong(long)>
<com.google.android.startop.iorap.JobScheduledEvent: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.notification.row.ExpandableView: int getCollapsedHeight()>
<com.android.settingslib.wifi.AccessPoint: java.lang.String getKey(java.lang.String)>
<com.android.server.locksettings.LockSettingsService: boolean tryUnlockWithCachedUnifiedChallenge(int)>
<com.android.systemui.stackdivider.DividerView.DividerCallbacks: void onDraggingStart()>
<com.android.systemui.bubbles.BubbleController: void onConfigChanged(android.content.res.Configuration)>
<com.android.systemui.statusbar.RemoteInputController: void lockScrollTo(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.NativeDaemonEvent: com.android.server.NativeDaemonEvent parseRawEvent(java.lang.String,java.io.FileDescriptor[])>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGeniv(int,int,int[],int)>
<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>
<com.android.server.Watchdog: void resumeWatchingCurrentThread(java.lang.String)>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder: com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder withWindowCrop(android.graphics.Rect)>
<com.android.server.usb.descriptors.Usb20ASFormatI: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<android.util.ArraySetPerfTest: void testValueAt_OutOfBounds_EdgeCase()>
<android.net.wifi.aware.WifiAwareSession: android.net.NetworkSpecifier createNetworkSpecifierPmk(int,byte[],byte[])>
<android.media.MediaSession2.SessionCallback: android.media.Session2CommandGroup onConnect(android.media.MediaSession2,android.media.MediaSession2.ControllerInfo)>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: boolean needsRedaction(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.role.persistence.RolesPersistenceImpl: com.android.role.persistence.RolesState readForUser(android.os.UserHandle)>
<com.android.server.locksettings.recoverablekeystore.WrappedKey: int getRecoveryStatus()>
<com.android.systemui.statusbar.policy.RemoteInputView.RemoteEditText: void onFocusChanged(boolean,int,android.graphics.Rect)>
<com.android.systemui.recents.RecentsImplementation: void onBootCompleted()>
<android.os.UserManagerInternal.UserRestrictionsListener: void onUserRestrictionsChanged(int,android.os.Bundle,android.os.Bundle)>
<com.android.server.integrity.parser.LimitInputStream: int read(byte[])>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List retrieveNetworkLogs(android.content.ComponentName,java.lang.String,long)>
<com.android.server.appbinding.AppBindingService.Lifecycle: void <init>(android.content.Context)>
<com.android.keyguard.KeyguardPasswordView: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.StackScrollerDecorView: android.view.View findSecondaryView()>
<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)>
<com.android.systemui.biometrics.AuthContainerView.Builder: com.android.systemui.biometrics.AuthContainerView.Builder setOpPackageName(java.lang.String)>
<com.android.commands.svc.Svc.Command: void run(java.lang.String[])>
<com.android.systemui.qs.carrier.QSCarrier: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.settingslib.accessibility.AccessibilityUtils: void setAccessibilityServiceState(android.content.Context,android.content.ComponentName,boolean,int)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setAlpha(float)>
<com.android.systemui.doze.DozeTriggers: void <init>(android.content.Context,com.android.systemui.doze.DozeMachine,com.android.systemui.doze.DozeHost,android.app.AlarmManager,android.hardware.display.AmbientDisplayConfiguration,com.android.systemui.statusbar.phone.DozeParameters,com.android.systemui.util.sensors.AsyncSensorManager,com.android.systemui.util.wakelock.WakeLock,boolean,com.android.systemui.dock.DockManager,com.android.systemui.util.sensors.ProximitySensor,com.android.systemui.util.sensors.ProximitySensor.ProximityCheck,com.android.systemui.doze.DozeLog,com.android.systemui.broadcast.BroadcastDispatcher)>
<javax.microedition.khronos.opengles.GL10: void glClearStencil(int)>
<android.media.MediaSession2Service: android.os.IBinder onBind(android.content.Intent)>
<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerSession readFromXml(org.xmlpull.v1.XmlPullParser,com.android.server.pm.PackageInstallerService.InternalCallback,android.content.Context,com.android.server.pm.PackageManagerService,android.os.Looper,com.android.server.pm.StagingManager,java.io.File,com.android.server.pm.PackageSessionProvider)>
<com.android.server.stats.StatsCompanionService: void setAlarmForSubscriberTriggering(long)>
<com.android.systemui.pip.PipAnimationController.PipTransitionAnimator: void onAnimationCancel(android.animation.Animator)>
<com.android.systemui.statusbar.policy.RotationLockControllerImpl: void <init>(android.content.Context)>
<com.android.commands.telecom.Telecom: void onRun()>
<com.android.systemui.statusbar.phone.RotationContextButton: void setVisibility(int)>
<com.android.networkstack.tethering.TetheringConfiguration: void dump(java.io.PrintWriter)>
<com.android.server.tv.UinputBridge: android.os.IBinder getToken()>
<com.android.systemui.ScreenDecorations.DisplayCutoutView: void onDetachedFromWindow()>
<com.android.systemui.globalactions.GlobalActionsColumnLayout: void onUpdateList()>
<com.android.systemui.statusbar.StatusBarIconView: void setVisibleState(int,boolean)>
<com.android.systemui.statusbar.phone.NavigationBarView: void notifyActiveTouchRegions()>
<com.android.settingslib.widget.settingsspinner.SettingsSpinner: void <init>(android.content.Context)>
<com.android.systemui.pip.phone.PipManager: void expandPip()>
<com.android.systemui.statusbar.notification.row.NotificationGuts.GutsContent: boolean shouldBeSaved()>
<com.android.systemui.egg.MLand: boolean isGamePad(android.view.InputDevice)>
<com.android.settingslib.bluetooth.CachedBluetoothDeviceManager: java.lang.String getSubDeviceSummary(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.gallery3d.glrenderer.UploadedTexture: void updateContent(com.android.gallery3d.glrenderer.GLCanvas)>
<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: boolean logStartedIntentWithProfile(android.content.Intent,int,boolean)>
<android.media.MediaController2.Builder: void <init>(android.content.Context,android.media.Session2Token)>
<com.android.server.DeviceIdleController: boolean restoreSystemPowerWhitelistAppInternal(java.lang.String)>
<com.android.server.accessibility.gestures.TouchState: void setState(int)>
<javax.microedition.khronos.opengles.GL10: void glGetIntegerv(int,java.nio.IntBuffer)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: boolean isHigherPriorityInternal(android.media.tv.tunerresourcemanager.ResourceClientProfile,android.media.tv.tunerresourcemanager.ResourceClientProfile)>
<com.android.systemui.statusbar.AlertingNotificationManager: boolean shouldExtendLifetime(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardShowing()>
<com.android.systemui.statusbar.NotificationListener: void <init>(android.content.Context,android.app.NotificationManager,android.os.Handler)>
<com.android.systemui.plugins.DozeServicePlugin: void onDreamingStopped()>
<com.android.systemui.car.navigationbar.ButtonSelectionStateController: void addAllButtonsWithSelectionState(android.view.View)>
<com.android.egg.neko.NekoDialog.Holder: void <init>(android.view.View)>
<com.android.systemui.shared.system.PinnedStackListenerForwarder.PinnedStackListener: void onImeVisibilityChanged(boolean,int)>
<com.android.systemui.plugins.NavigationEdgeBackPlugin: void setInsets(int,int)>
<com.android.settingslib.fuelgauge.BatteryStatus: boolean isPluggedInWired()>
<android.net.wifi.IDppCallback: void onSuccessConfigReceived(int)>
<com.android.systemui.keyboard.KeyboardUI: void start()>
<com.android.systemui.car.CarDeviceProvisionedControllerImpl: boolean isCurrentUserSetupInProgress()>
<com.android.systemui.pip.PipSnapAlgorithm: android.util.Size getSizeForAspectRatio(float,float,int,int)>
<com.android.systemui.biometrics.AuthController: void onBiometricError(int,int,int)>
<com.android.systemui.keyguard.KeyguardViewMediator: void setDozing(boolean)>
<com.android.systemui.qs.AutoSizingList: void onMeasure(int,int)>
<com.android.keyguard.KeyguardPINView: boolean hasOverlappingRendering()>
<com.android.server.utils.UserTokenWatcher: void dump(java.io.PrintWriter)>
<com.android.systemui.screenshot.GlobalScreenshot: void <init>(android.content.Context,android.content.res.Resources,com.android.systemui.screenshot.ScreenshotSmartActions,com.android.systemui.screenshot.ScreenshotNotificationsController,com.android.internal.logging.UiEventLogger)>
<com.android.systemui.qs.QuickStatusBarHeader: void onConfigChanged(android.service.notification.ZenModeConfig)>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: boolean shouldShowLockscreenNotifications()>
<com.android.systemui.qs.tiles.WifiTile.WifiSignalCallback: void setWifiIndicators(boolean,com.android.systemui.statusbar.policy.NetworkController.IconState,com.android.systemui.statusbar.policy.NetworkController.IconState,boolean,boolean,java.lang.String,boolean,java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCaCertApproved(java.lang.String,int)>
<com.android.server.restrictions.RestrictionsManagerService: void <init>(android.content.Context)>
<com.android.server.accessibility.AccessibilityManagerService: void onTouchInteractionStart()>
<com.android.systemui.plugins.VolumeDialogController: void getCaptionsComponentState(boolean)>
<com.android.systemui.classifier.FalsingManagerImpl: boolean isFalseTouch(int)>
<com.android.statementservice.retriever.Utils: boolean hasCommonString(java.util.List,java.util.List)>
<com.android.systemui.statusbar.policy.SecurityController: boolean hasCACertInCurrentUser()>
<com.android.gallery3d.exif.ExifTag: boolean hasValue()>
<com.android.systemui.statusbar.phone.StatusIconContainer: void addIgnoredSlot(java.lang.String)>
<android.net.wifi.aware.WifiAwareSession: android.net.NetworkSpecifier createNetworkSpecifierOpen(int,byte[])>
<com.android.systemui.plugins.DarkIconDispatcher: int getTint(android.graphics.Rect,android.view.View,int)>
<com.android.systemui.statusbar.phone.NotificationPanelView: boolean hasOverlappingRendering()>
<com.android.gallery3d.glrenderer.GLCanvas: void initializeTextureSize(com.android.gallery3d.glrenderer.BasicTexture,int,int)>
<com.android.server.pm.PackageManagerService: void resetApplicationPreferences(int)>
<com.android.server.testing.shadows.ShadowAppBackupUtils: boolean appIsEligibleForBackup(android.content.pm.ApplicationInfo,int)>
<com.android.systemui.statusbar.phone.LockscreenWallpaper.WallpaperDrawable: int getIntrinsicWidth()>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: boolean hasOverlappingRendering()>
<com.android.server.biometrics.EnrollClient: boolean onEnumerationResult(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.settingslib.core.instrumentation.EventLogWriter: void visible(android.content.Context,int,int,int)>
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getInterface()>
<com.android.settingslib.Utils: int getBatteryLevel(android.content.Intent)>
<com.android.systemui.qs.external.TileLifecycleManager: void onUnlockComplete()>
<com.android.settingslib.fuelgauge.BatteryStatus: java.lang.String toString()>
<com.android.systemui.shared.system.WindowManagerWrapper: void removePinnedStackListener(com.android.systemui.shared.system.PinnedStackListenerForwarder.PinnedStackListener)>
<com.android.server.biometrics.BiometricServiceBase: void cancelAuthenticationInternal(android.os.IBinder,java.lang.String)>
<com.android.systemui.pip.phone.PipTouchState: void setDisallowDraggingOffscreen()>
<com.android.systemui.pip.phone.PipTouchHandler: void showPictureInPictureMenu()>
<com.android.systemui.statusbar.phone.NavigationBarView: com.android.systemui.statusbar.phone.ButtonDispatcher getBackButton()>
<com.android.systemui.statusbar.NotificationViewHierarchyManager: void onDynamicPrivacyChanged()>
<com.android.settingslib.bluetooth.A2dpProfile: int getNameResource(android.bluetooth.BluetoothDevice)>
<com.android.systemui.statusbar.NotificationRemoteInputManager.SmartReplyHistoryExtender: boolean shouldExtendLifetime(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.dagger.SystemUIRootComponent: com.android.systemui.fragments.FragmentService.FragmentCreator createFragmentCreator()>
<com.android.gallery3d.glrenderer.GLCanvas: void getBounds(android.graphics.Rect,int,int,int,int)>
<com.android.settingslib.core.lifecycle.ObservableActivity: void onPause()>
<com.android.server.ConnectivityService: boolean requestRouteToHostAddress(int,byte[])>
<com.android.systemui.plugins.GlobalActionsPanelPlugin.Callbacks: void dismissGlobalActionsMenu()>
<android.graphics.perftests.OutlinePerfTest: void testSetEmpty()>
<android.text.BoringLayoutCreateDrawPerfTest: void timeCreate()>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.lang.String generateKey(java.lang.String)>
<com.android.server.timezonedetector.TimeZoneDetectorCallbackImpl: java.lang.String getDeviceTimeZone()>
<com.android.settingslib.media.ConnectionRecordManager: void setConnectionRecord(android.content.Context,java.lang.String,int)>
<com.android.systemui.statusbar.notification.DynamicPrivacyController: void onUnlockedChanged()>
<com.android.systemui.statusbar.notification.row.NotifInflationErrorManager: void clearInflationError(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<android.net.wifi.rtt.ResponderLocation: int describeContents()>
<com.android.server.biometrics.BiometricServiceBase.DaemonWrapper: int authenticate(long,int)>
<com.android.server.timezone.RulesManagerService: int requestInstall(android.os.ParcelFileDescriptor,byte[],android.app.timezone.ICallback)>
<com.android.location.provider.ActivityRecognitionEvent: java.lang.String getActivity()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setPanelVisible(boolean)>
<com.android.systemui.bubbles.animation.AnimatableScaleMatrix: void setScale(float,float,float,float)>
<com.android.systemui.shared.system.TaskDescriptionCompat: int getPrimaryColor()>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isGoingToSleep()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage.Entry: void destroy()>
<com.android.systemui.statusbar.policy.UserSwitcherController: void <init>(android.content.Context,com.android.systemui.statusbar.policy.KeyguardStateController,android.os.Handler,com.android.systemui.plugins.ActivityStarter,com.android.systemui.broadcast.BroadcastDispatcher,com.android.internal.logging.UiEventLogger)>
<com.android.systemui.statusbar.phone.NotificationGroupAlertTransferHelper: void setHeadsUpManager(com.android.systemui.statusbar.policy.HeadsUpManager)>
<com.android.settingslib.media.MediaManager: void dispatchDeviceAdded(com.android.settingslib.media.MediaDevice)>
<com.android.server.PersistentDataBlockService: void <init>(android.content.Context)>
<com.android.systemui.qs.tiles.RotationLockTile: java.lang.CharSequence getTileLabel()>
<com.android.server.webkit.WebViewUpdateService: void prepareWebViewInSystemServer()>
<com.android.uiautomator.core.UiObject: boolean exists()>
<javax.obex.ObexHelper: byte[] computeAuthenticationChallenge(byte[],java.lang.String,boolean,boolean)>
<com.android.settingslib.wifi.WifiStatusTracker: void refreshLocale()>
<com.android.settingslib.fuelgauge.PowerWhitelistBackend: void removeApp(java.lang.String)>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: void onUserSwitched(int)>
<android.net.wifi.p2p.WifiP2pGroupList: java.lang.String getOwnerAddr(int)>
<android.net.TetheredClient.AddressInfo: boolean equals(java.lang.Object)>
<com.android.settingslib.animation.AppearAnimationUtils: long calculateDelay(int,int)>
<com.android.server.biometrics.BiometricServiceBase.AuthenticationClientImpl: int statsClient()>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<com.android.server.biometrics.Constants: int actionBiometricAuth()>
<com.android.systemui.statusbar.notification.collection.NotifPipeline: void addNotificationLifetimeExtender(com.android.systemui.statusbar.notification.collection.notifcollection.NotifLifetimeExtender)>
<com.android.systemui.statusbar.policy.HeadsUpUtil: boolean isClickedHeadsUpNotification(android.view.View)>
<com.android.photos.BitmapRegionTileSource.ResourceBitmapSource: void <init>(android.content.res.Resources,int,int)>
<com.android.server.pm.parsing.pkg.PackageImpl: java.lang.String getNativeLibraryDir()>
<com.android.server.pm.PackageManagerService: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>
<com.android.settingslib.wifi.WifiEntryPreference: void onSignInResult(int)>
<com.android.keyguard.clock.BubbleClockController: java.lang.String getTitle()>
<com.android.server.ConnectivityService: android.net.ProxyInfo getGlobalProxy()>
<com.android.server.biometrics.ClientMonitor: int getCookie()>
<com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey: int getGenerationId()>
<com.android.systemui.statusbar.policy.FlashlightController: boolean isEnabled()>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: com.android.systemui.statusbar.notification.row.ExpandableNotificationRow getContainingNotification()>
<com.android.server.slice.SliceProviderPermissions: java.lang.String getFileName(com.android.server.slice.SlicePermissionManager.PkgUser)>
<com.android.server.timezone.ConfigHelper: java.lang.String getUpdateAppPackageName()>
<android.net.dhcp.DhcpServingParamsParcelExt: android.net.dhcp.DhcpServingParamsParcelExt setMetered(boolean)>
<com.android.server.media.BluetoothRouteProvider.BluetoothEventReceiver: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)>
<com.android.server.biometrics.BiometricServiceBase: java.lang.String getTag()>
<com.android.settingslib.core.lifecycle.ObservablePreferenceFragment: com.android.settingslib.core.lifecycle.Lifecycle getSettingsLifecycle()>
<com.android.systemui.statusbar.phone.NotificationIconContainer.IconState: void <init>(android.view.View)>
<com.android.systemui.statusbar.phone.NotificationGroupAlertTransferHelper: void onHeadsUpStateChanged(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.settingslib.media.LocalMediaManager: com.android.settingslib.media.MediaDevice getMediaDeviceById(java.lang.String)>
<com.android.server.policy.WindowManagerPolicy: void systemReady()>
<com.android.systemui.statusbar.ScrimView: void setDrawable(android.graphics.drawable.Drawable)>
<com.android.server.pm.PackageInstallerSession: void setClientProgress(float)>
<com.android.uiautomator.core.UiObject: boolean clickAndWaitForNewWindow()>
<com.android.server.pm.PackageInstallerSession: boolean isPrepared()>
<com.android.systemui.qs.QuickQSPanel: com.android.systemui.qs.QSEvent tileVisibleEvent()>
<com.android.server.timezonedetector.ReferenceWithHistory: void dump(com.android.internal.util.IndentingPrintWriter)>
<com.android.systemui.statusbar.policy.BatteryControllerImpl: void dispatchDemoCommand(java.lang.String,android.os.Bundle)>
<com.android.server.appop.AppOpsService: void setCameraAudioRestriction(int)>
<com.android.systemui.pip.phone.PipMotionHelper: android.graphics.Rect getFloatingBoundsOnScreen()>
<com.android.systemui.statusbar.notification.NotificationClicker: void register(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,android.service.notification.StatusBarNotification)>
<com.android.server.policy.PhoneWindowManager: void showGlobalActions()>
<com.android.systemui.statusbar.phone.StatusBar: void requestNotificationUpdate(java.lang.String)>
<com.android.server.pm.permission.PermissionManagerService: int getPermissionFlags(java.lang.String,java.lang.String,int)>
<com.android.systemui.statusbar.policy.KeyButtonView: void setDelayTouchFeedback(boolean)>
<com.android.settingslib.bluetooth.BluetoothUtils.ErrorListener: void onShowError(android.content.Context,java.lang.String,int)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void onSystemReady()>
<com.android.server.hdmi.HdmiCecMessage: int getDestination()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isLogoutEnabled()>
<android.net.wifi.RttManager.ParcelableRttParams: void <init>(android.net.wifi.RttManager.RttParams[])>
<com.android.server.protolog.ProtoLogImpl: java.lang.String getStatus()>
<com.android.settingslib.wifi.WifiStatusTracker: void fetchInitialState()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: int getMaxHeight()>
<com.android.server.slice.SliceManagerService: android.app.slice.SliceSpec[] getPinnedSpecs(android.net.Uri,java.lang.String)>
<com.android.server.TelephonyRegistry: void notifyCallState(int,int,int,java.lang.String)>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper: void launchAffordance(boolean,boolean)>
<android.net.wifi.WifiManager: boolean isMulticastEnabled()>
<com.android.systemui.pip.phone.PipTouchHandler: void onActivityPinned()>
<com.android.systemui.statusbar.KeyguardIndicationController.BaseKeyguardCallback: void onTrustAgentErrorMessage(java.lang.CharSequence)>
<com.android.server.policy.WindowManagerPolicy: void enableKeyguard(boolean)>
<com.android.systemui.statusbar.notification.stack.MediaHeaderView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.textclassifier.TextClassificationManagerPerfTest: void setUpClass()>
<com.android.systemui.qs.QSSecurityFooter.VpnSpan: void onClick(android.view.View)>
<com.android.systemui.statusbar.notification.collection.coordinator.HideNotifsForOtherUsersCoordinator: void attach(com.android.systemui.statusbar.notification.collection.NotifPipeline)>
<android.util.StatsLog: void write(android.util.StatsEvent)>
<com.android.systemui.shared.system.ActivityCompat: int getDisplayId()>
<com.android.systemui.plugins.qs.QSIconView: void <init>(android.content.Context)>
<android.net.wifi.hotspot2.pps.Credential: int getUniqueId()>
<com.android.server.soundtrigger_middleware.ISoundTriggerHw2: void setModelParameter(int,int,int)>
<com.android.companiondevicemanager.DeviceChooserActivity: void onDeviceConfirmed(com.android.companiondevicemanager.DeviceDiscoveryService.DeviceFilterPair)>
<com.android.systemui.settings.ToggleSlider: void setChecked(boolean)>
<com.android.systemui.globalactions.GlobalActionsGridLayout: void removeAllItems()>
<com.android.server.NsdService.DaemonConnection: boolean execute(java.lang.Object[])>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isLockTaskPermitted(java.lang.String)>
<android.net.wifi.WifiConfiguration: boolean isPasspoint()>
<com.android.systemui.SwipeHelper.Callback: boolean canChildBeDismissedInDirection(android.view.View,boolean)>
<com.android.server.pm.PackageManagerService: byte[] getInstantAppCookie(java.lang.String,int)>
<com.android.systemui.ScreenDecorations: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.keyguard.KeyguardPatternView: void onAttachedToWindow()>
<com.android.systemui.car.hvac.HvacController: void addTemperatureViewToController(android.view.View)>
<com.android.systemui.qs.tiles.BluetoothTile.BluetoothDetailAdapter: void setItemsVisible(boolean)>
<com.android.server.pm.PackageManagerService: int getApplicationEnabledSetting(java.lang.String,int)>
<com.android.systemui.qs.tileimpl.QSFactoryImpl: void <init>(dagger.Lazy,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider,javax.inject.Provider)>
<android.net.wifi.aware.TlvBufferUtils.TlvIterable: void setByteOrder(java.nio.ByteOrder)>
<com.android.systemui.classifier.DurationCountClassifier: java.lang.String getTag()>
<com.android.settingslib.deviceinfo.AbstractImsStatusPreferenceController: java.lang.String getPreferenceKey()>
<com.android.server.stats.StatsCompanionService.AnomalyAlarmListener: void onAlarm()>
<com.android.systemui.car.navigationbar.NavigationBarViewFactory: com.android.systemui.car.navigationbar.CarNavigationBarView getLeftBar(boolean)>
<com.android.encryptedlocaltransport.EncryptedLocalTransportService: void onDestroy()>
<com.android.systemui.bubbles.BubbleController: void onUiModeChanged()>
<com.android.systemui.shared.system.TaskStackChangeListener: void onTaskStackChangedBackground()>
<com.android.server.locksettings.SyntheticPasswordManager: byte[] createSPBlob(java.lang.String,byte[],byte[],long)>
<com.android.systemui.car.statusbar.DozeServiceHost: void stopPulsing()>
<com.android.systemui.screenrecord.ScreenMediaRecorder: void <init>(android.content.Context,int,com.android.systemui.screenrecord.ScreenRecordingAudioSource,android.media.MediaRecorder.OnInfoListener)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>
<com.android.packageinstaller.wear.PackageInstallerImpl: void <init>(android.content.Context)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setOnReinflationListener(java.lang.Runnable)>
<javax.microedition.khronos.opengles.GL10: void glFogfv(int,java.nio.FloatBuffer)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: java.lang.String getNetworkSelectionDisableReasonString()>
<com.android.server.accessibility.MotionEventInjector: void onDestroy()>
<com.android.systemui.shared.system.ActivityManagerWrapper: void startActivityFromRecentsAsync(com.android.systemui.shared.recents.model.Task.TaskKey,android.app.ActivityOptions,int,int,java.util.function.Consumer,android.os.Handler)>
<android.content.pm.PackageManagerInternal: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int,int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: int getClearAllHeightWithPadding()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onScreenOnFromTouch()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onTouchEvent(android.view.MotionEvent,int,int)>
<android.net.wifi.rtt.ResponderLocation: java.lang.String getCivicLocationCountryCode()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void resetTranslation()>
<com.android.server.testing.shadows.ShadowSlog: int wtfStack(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.ScrimView: void onDraw(android.graphics.Canvas)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: void startScanning(boolean)>
<com.android.settingslib.core.AbstractPreferenceController: boolean isAvailable()>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: boolean isOutlineShowing()>
<com.android.gallery3d.exif.ExifInterface: void readExif(java.io.InputStream)>
<com.android.providers.settings.SettingsHelper: void <init>(android.content.Context)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setTouchAndAnimationDisabled(boolean)>
<com.android.systemui.qs.tiles.CastTile: void handleSecondaryClick()>
<com.android.server.policy.GlobalActionsProvider: boolean isGlobalActionsDisabled()>
<com.android.settingslib.notification.EnableZenModeDialog: boolean isAlarm(android.service.notification.Condition)>
<com.android.systemui.statusbar.StatusBarIconView: void setVisibleState(int,boolean,java.lang.Runnable)>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean isAboveShelf()>
<com.android.settingslib.applications.StorageStatsSource.AppStorageStats: long getCacheBytes()>
<com.android.settingslib.bluetooth.BluetoothEventManager.Handler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)>
<com.android.systemui.statusbar.notification.row.ExpandableView: int getMinClipTopAmount()>
<android.net.wifi.WifiManager: java.lang.String[] getFactoryMacAddresses()>
<javax.microedition.khronos.opengles.GL10Ext: int glQueryMatrixxOES(java.nio.IntBuffer,java.nio.IntBuffer)>
<android.net.wifi.hotspot2.OsuProvider: java.lang.String getNetworkAccessIdentifier()>
<com.android.server.slice.SliceProviderPermissions: void onPersistableDirty(com.android.server.slice.DirtyTracker.Persistable)>
<com.android.systemui.qs.tiles.BluetoothTile: com.android.systemui.plugins.qs.DetailAdapter getDetailAdapter()>
<com.android.server.pm.UserManagerService: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>
<com.android.powermodel.ParseException: void <init>(int,java.lang.String)>
<javax.microedition.khronos.opengles.GL10: void glStencilOp(int,int,int)>
<com.android.printservice.recommendation.util.PrinterHashMap: android.net.nsd.NsdServiceInfo removePrinter(android.net.nsd.NsdServiceInfo)>
<com.android.systemui.pip.phone.PipTouchHandler: void onPinnedStackAnimationEnded(int)>
<com.android.server.usb.UsbPortManager: void removeSimulatedPort(java.lang.String,com.android.internal.util.IndentingPrintWriter)>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifCollectionListener: void onEntryRemoved(com.android.systemui.statusbar.notification.collection.NotificationEntry,int)>
<com.android.settingslib.applications.ApplicationsState.Callbacks: void onRebuildComplete(java.util.ArrayList)>
<com.android.systemui.statusbar.notification.TransformState: void transformViewFullyTo(com.android.systemui.statusbar.notification.TransformState,float)>
<com.android.systemui.egg.MLand: void setSplash(android.view.View)>
<com.android.systemui.shared.system.BackgroundExecutor: java.util.concurrent.Future submit(java.lang.Runnable)>
<com.android.server.display.DisplayModeDirector.Injector: com.android.server.utils.DeviceConfigInterface getDeviceConfig()>
<com.android.settingslib.bluetooth.PbapServerProfile: boolean isEnabled(android.bluetooth.BluetoothDevice)>
<android.net.TetheringManager.TetheringRequest.Builder: android.net.TetheringManager.TetheringRequest.Builder setStaticIpv4Addresses(android.net.LinkAddress,android.net.LinkAddress)>
<com.android.gallery3d.exif.Rational: java.lang.String toString()>
<com.android.server.autofill.ui.SaveUi.OnSaveListener: void onCancel(android.content.IntentSender)>
<com.android.server.updates.ApnDbInstallReceiver: void postInstall(android.content.Context,android.content.Intent)>
<com.android.server.locksettings.LockSettingsStrongAuth: void refreshStrongAuthTimeout(int)>
<com.android.systemui.qs.customize.CustomizeTileView: void setShowAppLabel(boolean)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void setupShelf(com.android.systemui.statusbar.NotificationShelf)>
<com.android.systemui.tuner.LockscreenFragment: void onCreatePreferences(android.os.Bundle,java.lang.String)>
<android.net.wifi.hotspot2.IProvisioningCallback: void onProvisioningFailure(int)>
<com.android.server.NativeDaemonEvent: int getCode()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setExpandedChild(android.view.View)>
<com.android.server.infra.AbstractMasterSystemService: java.util.List getSupportedUsers()>
<com.android.systemui.plugins.NotificationListenerController.NotificationProvider: void updateRanking()>
<com.android.settingslib.applications.ApplicationsState.Callbacks: void onLauncherInfoChanged()>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalBeaconRx()>
<android.net.wifi.p2p.WifiP2pGroup: int getNetworkId()>
<com.android.systemui.qs.external.CustomTile: void onTileChanged(android.content.ComponentName)>
<com.android.server.pm.ShortcutService: android.content.pm.ParceledListSlice getShareTargets(java.lang.String,android.content.IntentFilter,int)>
<com.android.systemui.globalactions.GlobalActionsComponent: void <init>(android.content.Context,com.android.systemui.statusbar.CommandQueue,com.android.systemui.statusbar.policy.ExtensionController,javax.inject.Provider,com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager)>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: java.lang.String toString()>
<com.android.systemui.statusbar.policy.KeyguardStateController: boolean isLaunchTransitionFadingAway()>
<com.android.server.wallpaper.WallpaperManagerService: void setInAmbientMode(boolean,long)>
<com.android.gallery3d.common.Utils: void closeSilently(android.os.ParcelFileDescriptor)>
<com.android.server.display.DisplayManagerService: void onStart()>
<com.android.systemui.recents.RecentsImplementation: void onStart(android.content.Context)>
<com.android.systemui.statusbar.phone.ShadeController: void postOnShadeExpanded(java.lang.Runnable)>
<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int)>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void setMobileIcons(java.lang.String,java.util.List)>
<com.android.settingslib.CustomDialogPreference: android.app.Dialog getDialog()>
<android.os.BinderCallsStatsPerfTest: void timeCallSessionTrackingDisabled()>
<com.android.systemui.statusbar.NotificationRemoteInputManager: boolean shouldKeepForSmartReplyHistory(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<android.net.wifi.WifiManager.LocalOnlyHotspotReservation: android.net.wifi.WifiConfiguration getWifiConfiguration()>
<com.android.server.IpSecService: void <init>(android.content.Context,android.os.INetworkManagementService,com.android.server.IpSecService.IpSecServiceConfiguration)>
<com.android.server.soundtrigger.SoundTriggerService.Operation.ExecuteOp: void run(int,android.media.soundtrigger.ISoundTriggerDetectionService)>
<com.android.server.usb.descriptors.UsbMSMidiOutputJack: void <init>(int,byte,byte,int)>
<com.android.server.accessibility.KeyEventDispatcher: void setOnKeyEventResult(com.android.server.accessibility.KeyEventDispatcher.KeyEventFilter,boolean,int)>
<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo getServiceDeviceInfo(java.lang.String,java.lang.String)>
<com.android.server.biometrics.iris.IrisAuthenticator: void resetLockout(byte[])>
<com.android.systemui.statusbar.SmartReplyController: void smartSuggestionsAdded(com.android.systemui.statusbar.notification.collection.NotificationEntry,int,int,boolean,boolean)>
<com.android.systemui.qs.tiles.BluetoothTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.BooleanState,java.lang.Object)>
<com.android.keyguard.KeyguardAbsKeyInputView: void verifyPasswordAndUnlock()>
<com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey: android.security.keystore.AndroidKeyStoreSecretKey getKey()>
<com.android.systemui.statusbar.phone.StatusBar: boolean isInLaunchTransition()>
<com.android.printspooler.ui.PrintProgressFragment: com.android.printspooler.ui.PrintProgressFragment newInstance()>
<com.android.systemui.statusbar.StatusBarIconView: android.graphics.drawable.Drawable getIcon(android.content.Context,com.android.internal.statusbar.StatusBarIcon)>
<com.android.location.provider.LocationProviderBase: void onSetRequest(com.android.location.provider.ProviderRequestUnbundled,android.os.WorkSource)>
<com.android.settingslib.CustomEditTextPreferenceCompat: android.widget.EditText getEditText()>
<com.android.settingslib.suggestions.SuggestionControllerMixin: void onLoadFinished(android.content.Loader,java.util.List)>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: boolean addAll(int,java.util.Collection)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void cleanUpViewStateForEntry(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: void onActivated(com.android.systemui.statusbar.notification.row.ActivatableNotificationView)>
<com.android.systemui.statusbar.BackDropView: void onVisibilityChanged(android.view.View,int)>
<com.android.server.NetworkManagementService: void disableIpv6(java.lang.String)>
<android.graphics.perftests.TypefaceCreatePerfTest: void testCreate_fromAsset()>
<com.android.systemui.pip.phone.PipMenuActivityController: void pokeMenu()>
<com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>
<com.android.systemui.statusbar.policy.RemoteInputView: void onNotificationUpdateOrReset()>
<com.android.server.MasterClearReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setShelf(com.android.systemui.statusbar.NotificationShelf)>
<com.android.settingslib.bluetooth.MapProfile: boolean setEnabled(android.bluetooth.BluetoothDevice,boolean)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: int getExtraMeasureHeight()>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onTaskDescriptionChanged(android.app.ActivityManager.RunningTaskInfo)>
<com.android.uiautomator.core.UiObject: boolean longClickBottomRight()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean isGoingToNotificationShade()>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: void <init>(android.os.Handler,android.view.IDisplayWindowInsetsController)>
<android.widget.TextViewSetTextLocalePerfTest: java.util.Collection locales()>
<com.android.systemui.keyguard.KeyguardSliceProvider: com.android.systemui.keyguard.KeyguardSliceProvider getAttachedInstance()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void onFinishInflate()>
<com.android.systemui.statusbar.policy.ZenModeController.Callback: void onManualRuleChanged(android.service.notification.ZenModeConfig.ZenRule)>
<android.media.filterfw.samples.CameraEffectsRecordingSample: void onCreate(android.os.Bundle)>
<com.android.server.accounts.AccountManagerService: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>
<com.android.gallery3d.exif.ExifTag: boolean setValue(com.android.gallery3d.exif.Rational)>
<com.android.systemui.statusbar.phone.ShadeControllerImpl: boolean closeShadeIfOpen()>
<com.android.systemui.statusbar.notification.row.HybridNotificationView: void transformTo(com.android.systemui.statusbar.TransformableView,float)>
<com.android.gallery3d.exif.ExifInterface: void closeSilently(java.io.Closeable)>
<com.android.server.pm.PackageManagerService.ScanPartition: java.lang.String toString()>
<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>
<com.android.settingslib.core.lifecycle.Lifecycle: void onCreate(android.os.Bundle)>
<com.android.server.uri.GrantUri: java.lang.String toString()>
<com.android.systemui.power.PowerUI.WarningsUI: void showLowBatteryWarning(boolean)>
<com.android.systemui.statusbar.StatusBarWifiView: void setSlot(java.lang.String)>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: void <init>(int,int,android.net.wifi.p2p.WifiP2pDevice,byte[])>
<com.android.systemui.statusbar.phone.ShadeControllerImpl: void <init>(com.android.systemui.statusbar.CommandQueue,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.phone.NotificationShadeWindowController,com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager,android.view.WindowManager,dagger.Lazy,dagger.Lazy,dagger.Lazy)>
<com.android.server.pm.permission.PermissionManagerService.Injector: void <init>(android.content.Context)>
<com.android.printservice.recommendation.RecommendationServiceImpl: void onConnected()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onNotificationDismissed()>
<com.android.server.SystemService: boolean isUserSupported(com.android.server.SystemService.TargetUser)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void onBeginDrag(com.android.systemui.statusbar.notification.row.ExpandableView)>
<com.android.systemui.statusbar.phone.SettingsButton: boolean isTunerClick()>
<com.android.systemui.statusbar.phone.StatusIconContainer: boolean isRestrictingIcons()>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onLogoutEnabledChanged()>
<com.android.systemui.statusbar.phone.LockscreenLockIconController: void onBouncerPreHideAnimation()>
<javax.microedition.khronos.opengles.GL11: void glTexParameteriv(int,int,int[],int)>
<com.android.server.NetworkScorerAppManager: boolean setActiveScorer(java.lang.String)>
<com.android.systemui.qs.tiles.BluetoothTile: java.lang.String composeChangeAnnouncement()>
<com.android.server.timezone.RulesManagerService: int requestUninstall(byte[],android.app.timezone.ICallback)>
<com.android.server.pm.RestrictionsSet: android.os.Bundle valueAt(int)>
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String toString()>
<com.android.server.infra.ServiceNameResolver: boolean isTemporary(int)>
<com.android.systemui.bubbles.BubbleExpandedView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.settingslib.wifi.AccessPoint: java.lang.String getSettingsSummary(boolean)>
<com.android.systemui.shared.recents.model.Task.TaskKey: java.lang.String toString()>
<com.android.server.audio.MediaFocusControl: void unmutePlayersForCall()>
<com.android.server.biometrics.BiometricServiceBase.BiometricServiceListener: android.hardware.biometrics.IBiometricServiceReceiverInternal getWrapperReceiver()>
<com.android.systemui.tuner.TunerPreferenceFragment: void onDisplayPreferenceDialog(androidx.preference.Preference)>
<com.android.server.accessibility.AccessibilitySecurityPolicy.AccessibilityUserManager: int getCurrentUserIdLocked()>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: int getVersion()>
<com.android.systemui.statusbar.StatusBarMobileView: void <init>(android.content.Context)>
<com.android.systemui.biometrics.AuthBiometricFaceView: void updateState(int)>
<com.android.settingslib.wifi.WifiEntryPreference: void onUpdated()>
<com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.NotifFilter: void <init>(java.lang.String)>
<com.android.settingslib.drawable.UserIconDrawable: void setPadding(float)>
<com.android.systemui.tracing.ProtoTracer: boolean isEnabled()>
<android.net.wifi.IWifiScanner: android.os.Messenger getMessenger()>
<android.net.wifi.rtt.ResponderLocation: double getHeightAboveFloorMeters()>
<com.android.systemui.shared.tracing.FrameProtoTracer: void doFrame(long)>
<javax.obex.ServerSession: void sendResponse(int,byte[])>
<com.android.location.provider.LocationRequestUnbundled: boolean isLocationSettingsIgnored()>
<com.android.systemui.statusbar.phone.StatusBarTouchableRegionManager: void setup(com.android.systemui.statusbar.phone.StatusBar,android.view.View)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: void setNetworkSelectionBSSID(java.lang.String)>
<com.android.keyguard.KeyguardPasswordView: int getPasswordTextViewId()>
<android.net.wifi.WifiScanner: java.util.List getSingleScanResults()>
<com.android.keyguard.KeyguardSecurityModel: com.android.keyguard.KeyguardSecurityModel.SecurityMode getSecurityMode(int)>
<com.android.systemui.util.concurrency.ConcurrencyModule: android.os.Looper provideMainLooper()>
<com.android.server.PackageWatchdog: void onPackageFailure(java.util.List,int)>
<com.android.server.accounts.AccountManagerService: boolean removeSharedAccountAsUser(android.accounts.Account,int)>
<com.android.systemui.plugins.qs.QSTile.Callback: void onStateChanged(com.android.systemui.plugins.qs.QSTile.State)>
<com.android.server.slice.SlicePermissionManager: void revokeSliceAccess(java.lang.String,int,java.lang.String,int,android.net.Uri)>
<com.android.server.usb.descriptors.report.UsbStrings: java.lang.String getACControlInterfaceName(byte)>
<com.android.server.testing.shadows.ShadowEventLog: java.util.Set getEntries()>
<com.android.server.hdmi.HdmiControlService: java.util.List getIntList(java.lang.String)>
<com.android.systemui.qs.tiles.BatterySaverTile: void onPowerSaveChanged(boolean)>
<com.android.systemui.statusbar.policy.InflatedSmartReplies: com.android.systemui.statusbar.policy.InflatedSmartReplies.SmartRepliesAndActions getSmartRepliesAndActions()>
<android.os.ParcelPerfTest: void timeWriteException()>
<com.android.server.integrity.parser.LimitInputStream: void <init>(java.io.InputStream,int)>
<com.android.printspooler.util.ApprovedPrintServices: void unregisterChangeListener(android.content.SharedPreferences.OnSharedPreferenceChangeListener)>
<com.android.server.biometrics.BiometricServiceBase.ServiceListener: void onAuthenticationSucceededInternal(boolean,byte[],boolean)>
<com.android.server.integrity.serializer.RuleSerializer: byte[] serialize(java.util.List,java.util.Optional)>
<com.android.systemui.tuner.TunerService: java.lang.String getValue(java.lang.String)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void handleSecondaryClick()>
<com.android.systemui.shared.system.TaskStackChangeListeners: void addListener(android.app.IActivityManager,com.android.systemui.shared.system.TaskStackChangeListener)>
<com.android.server.usb.descriptors.report.TextReportCanvas: void closeListItem()>
<com.android.systemui.util.leak.LeakDetector: com.android.systemui.util.leak.LeakDetector create()>
<com.android.networkstack.tethering.BpfCoordinator: void tetherOffloadRuleAdd(android.net.ip.IpServer,com.android.networkstack.tethering.BpfCoordinator.Ipv6ForwardingRule)>
<com.android.systemui.pip.PipUiEventLogger: void setTaskInfo(android.app.TaskInfo)>
<com.android.systemui.statusbar.RemoteInputController: void remoteInputSent(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.settingslib.development.AbstractEnableAdbPreferenceController: void enablePreference(boolean)>
<com.android.server.SystemService: void onStart()>
<com.android.server.locksettings.LockSettingsService: void removeCachedUnifiedChallenge(int)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeEnablerManager: void init(androidx.preference.PreferenceFragment,java.lang.String,androidx.preference.PreferenceScreen)>
<javax.obex.ObexTransport: java.io.InputStream openInputStream()>
<com.android.server.locksettings.SyntheticPasswordCrypto: byte[] decrypt(byte[],byte[],byte[])>
<android.perftests.utils.TraceMarkParser: void forAllSlices(java.util.function.BiConsumer)>
<com.android.uiautomator.core.UiCollection: com.android.uiautomator.core.UiObject getChildByDescription(com.android.uiautomator.core.UiSelector,java.lang.String)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBlendEquation(int)>
<com.android.systemui.shared.system.PinnedStackListenerForwarder.PinnedStackListener: void onActionsChanged(android.content.pm.ParceledListSlice)>
<com.android.systemui.statusbar.phone.dagger.StatusBarPhoneModule: com.android.systemui.statusbar.phone.StatusBar provideStatusBar(android.content.Context,com.android.systemui.statusbar.notification.init.NotificationsController,com.android.systemui.statusbar.phone.LightBarController,com.android.systemui.statusbar.phone.AutoHideController,com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.statusbar.phone.StatusBarIconController,com.android.systemui.statusbar.PulseExpansionHandler,com.android.systemui.statusbar.notification.NotificationWakeUpCoordinator,com.android.systemui.statusbar.phone.KeyguardBypassController,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.statusbar.phone.HeadsUpManagerPhone,com.android.systemui.statusbar.notification.DynamicPrivacyController,com.android.systemui.statusbar.notification.interruption.BypassHeadsUpNotifier,com.android.systemui.plugins.FalsingManager,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.statusbar.policy.RemoteInputQuickSettingsDisabler,com.android.systemui.statusbar.notification.row.NotificationGutsManager,com.android.systemui.statusbar.notification.logging.NotificationLogger,com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProvider,com.android.systemui.statusbar.NotificationViewHierarchyManager,com.android.systemui.keyguard.KeyguardViewMediator,android.util.DisplayMetrics,com.android.internal.logging.MetricsLogger,java.util.concurrent.Executor,com.android.systemui.statusbar.NotificationMediaManager,com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.statusbar.NotificationRemoteInputManager,com.android.systemui.statusbar.policy.UserSwitcherController,com.android.systemui.statusbar.policy.NetworkController,com.android.systemui.statusbar.policy.BatteryController,com.android.systemui.colorextraction.SysuiColorExtractor,com.android.systemui.keyguard.ScreenLifecycle,com.android.systemui.keyguard.WakefulnessLifecycle,com.android.systemui.statusbar.SysuiStatusBarStateController,com.android.systemui.statusbar.VibratorHelper,com.android.systemui.bubbles.BubbleController,com.android.systemui.statusbar.phone.NotificationGroupManager,com.android.systemui.statusbar.notification.VisualStabilityManager,com.android.systemui.statusbar.policy.DeviceProvisionedController,com.android.systemui.statusbar.NavigationBarController,dagger.Lazy,com.android.systemui.statusbar.policy.ConfigurationController,com.android.systemui.statusbar.phone.NotificationShadeWindowController,com.android.systemui.statusbar.phone.LockscreenLockIconController,com.android.systemui.statusbar.phone.DozeParameters,com.android.systemui.statusbar.phone.ScrimController,com.android.systemui.statusbar.phone.KeyguardLiftController,dagger.Lazy,dagger.Lazy,com.android.systemui.statusbar.phone.DozeServiceHost,android.os.PowerManager,com.android.systemui.recents.ScreenPinningRequest,com.android.systemui.statusbar.phone.DozeScrimController,com.android.systemui.volume.VolumeComponent,com.android.systemui.statusbar.CommandQueue,java.util.Optional,javax.inject.Provider,com.android.systemui.shared.plugins.PluginManager,java.util.Optional,com.android.systemui.statusbar.phone.LightsOutNotifController,com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter.Builder,com.android.systemui.statusbar.phone.ShadeController,com.android.systemui.statusbar.SuperStatusBarViewFactory,com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager,com.android.keyguard.ViewMediatorCallback,com.android.systemui.InitController,com.android.systemui.plugins.DarkIconDispatcher,android.os.Handler,com.android.systemui.plugins.PluginDependencyProvider,com.android.systemui.statusbar.phone.KeyguardDismissUtil,com.android.systemui.statusbar.policy.ExtensionController,com.android.systemui.statusbar.policy.UserInfoControllerImpl,com.android.systemui.statusbar.phone.PhoneStatusBarPolicy,com.android.systemui.statusbar.KeyguardIndicationController,dagger.Lazy,com.android.systemui.keyguard.DismissCallbackRegistry,com.android.systemui.statusbar.phone.StatusBarTouchableRegionManager)>
<com.android.systemui.pip.PipUI: void start()>
<com.android.systemui.keyguard.dagger.KeyguardModule: com.android.systemui.keyguard.KeyguardViewMediator newKeyguardViewMediator(android.content.Context,com.android.systemui.plugins.FalsingManager,com.android.internal.widget.LockPatternUtils,com.android.systemui.broadcast.BroadcastDispatcher,dagger.Lazy,com.android.systemui.keyguard.DismissCallbackRegistry,com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.dump.DumpManager,android.os.PowerManager,android.app.trust.TrustManager,java.util.concurrent.Executor,com.android.systemui.util.DeviceConfigProxy,com.android.systemui.statusbar.phone.NavigationModeController)>
<com.android.keyguard.KeyguardSecurityCallback: void dismiss(boolean,int,boolean)>
<com.android.server.audio.SoundEffectsHelper.OnEffectsLoadCompleteHandler: void run(boolean)>
<com.android.systemui.qs.tiles.FlashlightTile: void onFlashlightChanged(boolean)>
<com.android.server.biometrics.face.FaceUserState: int getNameTemplateResource()>
<com.android.server.NetworkManagementService: void setUidMeteredNetworkBlacklist(int,boolean)>
<com.android.printspooler.model.RemotePrintDocument: void writeContent(android.content.ContentResolver,android.net.Uri)>
<com.android.server.ConnectivityService: void sendConnectedBroadcast(android.net.NetworkInfo)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setCredentialSharedWithUser(boolean)>
<com.android.systemui.doze.DozeLog: void tracePulseDropped(java.lang.String)>
<com.android.server.slice.SlicePermissionManager.PkgUser: boolean equals(java.lang.Object)>
<com.android.systemui.shared.tracing.FrameProtoTracer: void add(com.android.systemui.shared.tracing.ProtoTraceable)>
<com.android.systemui.volume.VolumeDialogImpl: void initSettingsH()>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean hasDrawnLw()>
<com.android.settingslib.bluetooth.A2dpProfile: java.lang.String getHighQualityAudioOptionLabel(android.bluetooth.BluetoothDevice)>
<android.net.TetheredClient: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.phone.DozeParameters: boolean getPulseOnSigMotion()>
<com.android.systemui.statusbar.CommandQueue: void suppressAmbientDisplay(boolean)>
<com.android.server.locksettings.LockSettingsService: int[] getRecoverySecretTypes()>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setDarkIntensity(float)>
<com.android.settingslib.widget.CandidateInfo: java.lang.CharSequence loadLabel()>
<com.android.server.pm.permission.PermissionsState: boolean hasRuntimePermission(java.lang.String,int)>
<com.android.server.NetworkScoreService: void <init>(android.content.Context)>
<android.net.wifi.WifiManager: int getWifiState()>
<com.android.systemui.statusbar.notification.row.NotificationGuts: void onFinishInflate()>
<com.android.gallery3d.glrenderer.UploadedTexture: void setIsUploading(boolean)>
<com.android.settingslib.bluetooth.LocalBluetoothProfileManager: com.android.settingslib.bluetooth.PbapClientProfile getPbapClientProfile()>
<com.android.systemui.tuner.TunerServiceImpl: java.lang.String getValue(java.lang.String)>
<com.android.systemui.classifier.FalsingManagerProxy: void setShowingAod(boolean)>
<android.text.TextPerfUtils: java.lang.CharSequence nextRandomParagraph(int,boolean)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: int getState()>
<com.android.server.pm.pkg.PackageStateUnserialized: com.android.server.pm.pkg.PackageStateUnserialized setUsesLibraryInfos(java.util.List)>
<com.android.systemui.statusbar.phone.FloatingRotationButton: boolean show()>
<android.net.TetheringManager.TetheringInterfaceRegexps: java.util.List getTetherableBluetoothRegexs()>
<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>
<android.app.ResourcesPerfTest: void getColor()>
<com.android.packageinstaller.UninstallFinish: void onReceive(android.content.Context,android.content.Intent)>
<android.widget.TextViewPrecomputedTextPerfTest: void testNewLayout_RandomText()>
<com.android.shell.HeapDumpProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<com.android.server.biometrics.EnrollClient: int start()>
<com.android.systemui.car.CarServiceProvider: void <init>(android.content.Context)>
<com.android.settingslib.wifi.AccessPoint: boolean isPasspointConfigurationR1()>
<com.android.systemui.qs.tiles.CastTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.statusbar.policy.CastController,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.statusbar.policy.NetworkController,com.android.systemui.plugins.ActivityStarter)>
<com.android.systemui.statusbar.phone.StatusBar: boolean onSpacePressed()>
<com.android.systemui.car.statusbar.DozeServiceHost: void addCallback(com.android.systemui.doze.DozeHost.Callback)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.MenuItem getSnoozeMenuItem(android.content.Context)>
<com.android.systemui.qs.tiles.ScreenRecordTile: com.android.systemui.plugins.qs.QSTile.BooleanState newTileState()>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setIsHiddenSsid(boolean)>
<com.android.powermodel.component.CpuProfile.Builder: void setCoreCount(int[])>
<com.android.uiautomator.core.InstrumentationUiAutomatorBridge: android.view.Display getDefaultDisplay()>
<android.net.util.PrefixUtils: void addNonForwardablePrefixes(java.util.Set)>
<com.android.systemui.shared.system.TonalCompat: void <init>(android.content.Context)>
<com.android.systemui.util.sensors.AsyncSensorManager: void onPluginConnected(com.android.systemui.plugins.SensorManagerPlugin,android.content.Context)>
<android.net.wifi.p2p.WifiP2pManager: void removeLocalService(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.keyguard.KeyguardUpdateMonitor: com.android.keyguard.KeyguardUpdateMonitor.StrongAuthTracker getStrongAuthTracker()>
<android.app.usage.UsageStatsManagerInternal: java.util.List queryUsageStatsForUser(int,int,long,long,boolean)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationBigTextTemplateViewWrapper: void <init>(android.content.Context,android.view.View,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.pip.PipAnimationController.PipAnimationCallback: void onPipAnimationEnd(android.view.SurfaceControl.Transaction,com.android.systemui.pip.PipAnimationController.PipTransitionAnimator)>
<com.android.server.ConnectivityService: void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo,int)>
<com.android.systemui.wm.DisplayChangeController: void removeRotationListener(com.android.systemui.wm.DisplayChangeController.OnDisplayChangingListener)>
<android.net.TetheringManager.TetheringEventCallback: void onTetherableInterfaceRegexpsChanged(android.net.TetheringManager.TetheringInterfaceRegexps)>
<com.android.server.pm.RestrictionsSet: boolean isEmpty()>
<com.android.keyguard.KeyguardStatusView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindPipUI(com.android.systemui.pip.PipUI)>
<com.android.photos.SimpleBitmapRegionDecoderWrapper: android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory.Options)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: int getDisableReasonByString(java.lang.String)>
<com.android.systemui.statusbar.AutoHideUiElement: boolean shouldHideOnTouch()>
<com.android.systemui.statusbar.phone.NotificationIconContainer: com.android.systemui.statusbar.phone.NotificationIconContainer.IconState getIconState(com.android.systemui.statusbar.StatusBarIconView)>
<com.android.systemui.media.ResumeMediaBrowser.Callback: void onConnected()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl.SubscriptionDefaults: int getActiveDataSubId()>
<com.android.server.display.AmbientBrightnessStatsTracker: void start()>
<com.android.server.hdmi.HdmiCecStandbyModeHandler.CecMessageHandler: boolean handle(com.android.server.hdmi.HdmiCecMessage)>
<com.android.systemui.classifier.FalsingManagerImpl: void onQsDown()>
<com.android.settingslib.CustomDialogPreferenceCompat: android.app.Dialog getDialog()>
<com.android.systemui.statusbar.policy.SensorPrivacyControllerImpl: boolean isSensorPrivacyEnabled()>
<android.os.UserManagerInternal: void setBaseUserRestrictionsByDpmsForMigration(int,android.os.Bundle)>
<com.android.systemui.doze.DozeBrightnessHostForwarder: void <init>(com.android.systemui.doze.DozeMachine.Service,com.android.systemui.doze.DozeHost)>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: long clearCallingIdentity()>
<com.android.settingslib.deviceinfo.StorageMeasurement: void forceMeasure()>
<com.android.server.wallpaper.WallpaperManagerService: void setDimensionHints(int,int,java.lang.String,int)>
<com.android.carrierdefaultapp.ProvisionObserver: boolean onStartJob(android.app.job.JobParameters)>
<com.android.server.GestureLauncherService: boolean interceptPowerKeyDown(android.view.KeyEvent,boolean,android.util.MutableBoolean)>
<com.android.server.audio.PlaybackActivityMonitor: void playerEvent(int,int,int)>
<com.android.systemui.statusbar.phone.PanelView.OnConfigurationChangedListener: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.settingslib.core.lifecycle.events.OnAttach: void onAttach()>
<com.android.systemui.statusbar.phone.NotificationGroupManager: boolean isOnlyChildInGroup(android.service.notification.StatusBarNotification)>
<com.android.settingslib.RestrictedLockUtils.EnforcedAdmin: boolean equals(java.lang.Object)>
<com.android.keyguard.KeyguardAbsKeyInputView: boolean onKeyDown(int,android.view.KeyEvent)>
<com.google.android.startop.iorap.EventSequenceValidator: void onActivityLaunched(byte[],int)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onDreamingStopped()>
<com.android.server.biometrics.ClientMonitor: boolean onRemoved(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.server.appop.AppOpsService: void setUidMode(int,int,int)>
<com.android.settingslib.location.SettingsInjector: void reloadStatusMessages()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onScreenOff()>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void updateAodNotificationIcons()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: int getHeadsUpHeight(boolean)>
<com.android.server.pm.permission.PermissionsState: void copyFrom(com.android.server.pm.permission.PermissionsState)>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean isLastInSection()>
<com.android.server.accessibility.gestures.TouchExplorer: void setMultiFingerGesturesEnabled(boolean)>
<com.android.server.autofill.Helper: java.lang.String paramsToString(android.view.WindowManager.LayoutParams)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onClockVisibilityChanged()>
<com.android.server.people.data.DataMaintenanceService: boolean onStartJob(android.app.job.JobParameters)>
<com.android.systemui.qs.touch.SwipeDetector: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void dump(java.lang.String,java.io.PrintWriter)>
<android.net.wifi.hotspot2.pps.HomeSp: void setIconUrl(java.lang.String)>
<com.android.server.usb.descriptors.Usb10ACInputTerminal: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.systemui.statusbar.policy.KeyguardStateController.Callback: void onKeyguardShowingChanged()>
<com.android.systemui.colorextraction.SysuiColorExtractor: void extractWallpaperColors()>
<com.android.server.stats.StatsCompanion.PendingIntentRef: void <init>(android.app.PendingIntent,android.content.Context)>
<com.android.printspooler.ui.PrintActivity: void onPause()>
<com.android.gallery3d.exif.ExifTag: boolean hasDefinedCount()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: java.util.List getProfiles()>
<com.android.systemui.statusbar.notification.ImageTransformState: com.android.systemui.statusbar.notification.ImageTransformState obtain()>
<com.android.systemui.pip.tv.PipManager: boolean isPipShown()>
<com.android.settingslib.bluetooth.LocalBluetoothProfile: int getConnectionPolicy(android.bluetooth.BluetoothDevice)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector instance(int)>
<com.android.externalstorage.TestDocumentsProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>
<com.android.server.accessibility.gestures.TouchState: java.lang.String getStateSymbolicName(int)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void removeIcon(java.lang.String)>
<com.android.systemui.util.sensors.ProximitySensor: void registerInternal()>
<com.android.server.pm.PackageInstallerSession: int getInstallerUid()>
<com.android.providers.settings.SettingsBackupAgent: void onFullBackup(android.app.backup.FullBackupDataOutput)>
<com.android.server.biometrics.face.FaceUtils: java.lang.CharSequence getUniqueName(android.content.Context,int)>
<com.android.server.accessibility.MagnificationController: boolean isMagnifying(int)>
<com.android.keyguard.KeyguardSimPinView: void showUsabilityHint()>
<com.android.server.slice.SliceClientPermissions: boolean hasFullAccess()>
<android.os.PackageManagerPerfTest: void testGetApplicationInfo()>
<com.android.systemui.stackdivider.MinimizedDockShadow: void onDraw(android.graphics.Canvas)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: boolean setState(int)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void show(android.os.Bundle)>
<com.android.server.input.InputManagerService: void enableInputDevice(int)>
<android.net.wifi.WifiManager: boolean isVerboseLoggingEnabled()>
<com.android.server.ConnectivityService: void sendLegacyNetworkBroadcast(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkInfo.DetailedState,int)>
<com.android.server.policy.keyguard.KeyguardStateMonitor: void onHasLockscreenWallpaperChanged(boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getWifiMacAddress(android.content.ComponentName)>
<com.android.commands.sm.Sm: void runPartition()>
<com.android.server.biometrics.RemovalClient: boolean onEnumerationResult(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onUserUnlocked()>
<com.android.server.policy.RestartAction: void <init>(android.content.Context,com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs)>
<com.android.systemui.statusbar.phone.StatusBarIconController.DarkIconManager: com.android.systemui.statusbar.phone.DemoStatusIcons createDemoStatusIcons()>
<com.android.systemui.statusbar.phone.SystemUIDialog: void onStart()>
<com.android.systemui.statusbar.policy.ExtensionControllerImpl.Item: int sortOrder()>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: java.util.Map getLnbResources()>
<com.android.server.VibratorService: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
<android.net.TetheringManager: java.lang.String[] getTetherableIfaces()>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getPlmn()>
<com.android.systemui.tracing.ProtoTracer: void <init>(android.content.Context,com.android.systemui.dump.DumpManager)>
<com.android.systemui.statusbar.phone.LockscreenLockIconController: void onScrimVisibilityChanged(java.lang.Integer)>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: boolean isStub()>
<com.android.systemui.statusbar.phone.ManagedProfileControllerImpl: void addCallback(com.android.systemui.statusbar.phone.HeadsUpTouchHelper.Callback)>
<com.android.systemui.statusbar.phone.StatusIconContainer: void onFinishInflate()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void resetViewGroupFade()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationMessagingTemplateViewWrapper: void setRemoteInputVisible(boolean)>
<com.android.server.IntentResolver: boolean allowFilterResult(java.lang.Object,java.util.List)>
<com.android.server.biometrics.EnrollClient: int statsAction()>
<com.android.gallery3d.exif.ExifTag: com.android.gallery3d.exif.Rational getRational(int)>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: android.view.WindowInsets dispatchWindowInsetsAnimationProgress(android.view.WindowInsets,java.util.List)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void removeNotification(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.util.time.SystemClockImpl: long currentThreadTimeMillis()>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: void onNotificationRemoved(java.lang.String,android.service.notification.StatusBarNotification)>
<com.android.server.soundtrigger.SoundTriggerInternal: int setParameter(int,int,int)>
<com.android.systemui.globalactions.GlobalActionsFlatLayout: com.android.systemui.HardwareBgDrawable getBackgroundDrawable(int)>
<com.android.systemui.car.volume.CarVolumeItem: void setSupplementalIconListener(android.view.View.OnClickListener)>
<com.android.server.soundtrigger_middleware.ISoundTriggerHw2: int loadPhraseSoundModel(android.hardware.soundtrigger.V2_1.ISoundTriggerHw.PhraseSoundModel,com.android.server.soundtrigger_middleware.SoundTriggerHw2Compat.Callback,int)>
<com.android.systemui.car.navigationbar.SystemBarConfigs: int getHunZOrder()>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: void onParentTranslationUpdate(float)>
<com.android.server.biometrics.BiometricServiceBase: void enumerateInternal(com.android.server.biometrics.EnumerateClient)>
<com.android.server.pm.PackageManagerService: void setHomeActivity(android.content.ComponentName,int)>
<com.android.systemui.plugin.testoverlayplugin.SampleOverlayPlugin: void setup(android.view.View,android.view.View)>
<android.app.OverlayManagerPerfTest: void classTearDown()>
<com.android.server.biometrics.Utils: int getPublicBiometricStrength(android.os.Bundle)>
<com.android.server.pm.permission.PermissionManagerService: void resetRuntimePermissions()>
<com.android.server.TelephonyRegistry: void notifyOutgoingEmergencySms(int,int,android.telephony.emergency.EmergencyNumber)>
<com.android.systemui.power.PowerNotificationWarnings: void showLowBatteryWarning(boolean)>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: void onUiModeChanged()>
<com.android.systemui.statusbar.policy.OnHeadsUpChangedListener: void onHeadsUpPinned(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.keyguard.clock.ClockOptionsProvider: boolean onCreate()>
<javax.microedition.khronos.opengles.GL10: void glOrthox(int,int,int,int,int,int)>
<com.android.server.accessibility.AccessibilityManagerService: int getAccessibilityWindowId(android.os.IBinder)>
<com.android.systemui.car.window.OverlayPanelViewController: boolean shouldAllowClosingScroll()>
<com.android.systemui.qs.QSSecurityFooter: java.lang.CharSequence getFooterText(boolean,boolean,boolean,boolean,boolean,java.lang.String,java.lang.String,java.lang.CharSequence,java.lang.CharSequence,boolean)>
<com.android.packageinstaller.wear.WearPackageUtil: java.io.File getFileFromFd(android.content.Context,android.os.ParcelFileDescriptor,java.lang.String,java.lang.String)>
<android.net.wifi.p2p.WifiP2pGroupList: void writeToParcel(android.os.Parcel,int)>
<com.android.server.pm.UserManagerService: android.os.Bundle getApplicationRestrictionsForUser(java.lang.String,int)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: void onTouchMove(float)>
<com.android.systemui.volume.ConfigurableTexts: void update()>
<com.android.systemui.util.leak.GarbageMonitor.Service: void <init>(android.content.Context,com.android.systemui.util.leak.GarbageMonitor)>
<android.net.wifi.hotspot2.omadm.XMLNode: int hashCode()>
<javax.microedition.khronos.opengles.GL10: void glAlphaFuncx(int,int)>
<com.android.systemui.statusbar.phone.ScrimController: void setWakeLockScreenSensorActive(boolean)>
<com.android.systemui.statusbar.notification.row.NotificationGutsManager: void setShouldManageLifetime(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.server.usb.descriptors.Usb20ACOutputTerminal: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<android.content.pm.PackageManagerInternal: android.os.Bundle getSuspendedPackageLauncherExtras(java.lang.String,int)>
<com.android.keyguard.KeyguardSecurityContainer.SecurityCallback: void onCancelClicked()>
<com.android.systemui.shared.plugins.PluginEnabler: boolean isEnabled(android.content.ComponentName)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setSecondaryCpuAbi(java.lang.String)>
<com.android.settingslib.RestrictedPreference: int getSecondTargetResId()>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: int getScanMode()>
<android.multiuser.UserLifecycleTests: void managedProfileCreate()>
<com.android.systemui.statusbar.phone.NotificationListenerWithPlugins: boolean onPluginNotificationPosted(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap)>
<android.net.wifi.RttManager: android.net.wifi.RttManager.Capabilities getCapabilities()>
<com.android.server.SystemService: void onCleanupUser(android.content.pm.UserInfo)>
<com.android.systemui.statusbar.policy.ZenModeController: long getNextAlarm()>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout: boolean arePropertiesAnimatingOnView(android.view.View,androidx.dynamicanimation.animation.DynamicAnimation.ViewProperty[])>
<com.android.settingslib.drawer.SwitchController.MetaData: void <init>(java.lang.String)>
<com.android.systemui.car.window.OverlayPanelViewController: boolean isAnimating()>
<com.android.systemui.bubbles.BubbleTaskView: android.graphics.Point getPositionInWindow()>
<com.android.systemui.plugins.qs.QSTile.SignalState: java.lang.StringBuilder toStringBuilder()>
<javax.microedition.khronos.opengles.GL10: void glDepthRangef(float,float)>
<com.android.server.pm.ShortcutNonPersistentUser: int getUserId()>
<com.android.systemui.volume.VolumeDialogComponent: com.android.systemui.plugins.VolumeDialog createDefault()>
<com.android.settingslib.net.ChartDataLoader: android.os.Bundle buildArgs(android.net.NetworkTemplate,com.android.settingslib.AppItem,int)>
<com.android.powermodel.ActivityReport: java.util.List findApp(java.lang.String)>
<android.net.wifi.WifiManager: int getWifiApState()>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean getGivenInsetsPendingLw()>
<com.android.server.pm.permission.PermissionsState: boolean hasRequestedPermission(java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void startChildAnimation(com.android.systemui.statusbar.notification.stack.AnimationProperties)>
<com.android.server.BinderCallsStatsService.LifeCycle: void <init>(android.content.Context)>
<com.android.printservice.recommendation.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>
<com.android.systemui.statusbar.notification.collection.coordinator.Coordinator: com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.NotifSection getSection()>
<com.android.settingslib.wifi.AccessPoint: boolean isOsuProvider()>
<com.android.server.storage.StorageSessionController: boolean isEmulatedOrPublic(android.os.storage.VolumeInfo)>
<com.android.keyguard.KeyguardSecurityViewFlipper: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.pm.PackageSetting: void updateFrom(com.android.server.pm.PackageSetting)>
<com.android.systemui.util.sensors.AsyncSensorManager: void registerDynamicSensorCallbackImpl(android.hardware.SensorManager.DynamicSensorCallback,android.os.Handler)>
<com.android.systemui.bubbles.BubbleOverflowActivity: void <init>(com.android.systemui.bubbles.BubbleController)>
<com.android.systemui.statusbar.notification.row.NotificationGutsManager: com.android.systemui.statusbar.notification.row.ExpandableNotificationRow.LongPressListener getNotificationLongClicker()>
<com.android.gallery3d.glrenderer.RawTexture: void setIsFlippedVertically(boolean)>
<com.android.systemui.statusbar.policy.UserSwitcherController: void showExitGuestDialog(int,int)>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: void getPrintJobInfos(android.print.IPrintSpoolerCallbacks,android.content.ComponentName,int,int,int)>
<com.android.keyguard.KeyguardSimPinView: boolean startDisappearAnimation(java.lang.Runnable)>
<com.android.server.audio.AudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
<com.android.systemui.statusbar.KeyguardIndicationController: void onStateChanged(int)>
<com.android.server.ConnectivityService: void systemReady()>
<com.android.systemui.ScreenDecorations.DisplayCutoutView: void onMeasure(int,int)>
<com.android.systemui.pip.phone.PipMenuActivityController: void dump(java.io.PrintWriter,java.lang.String)>
<com.android.systemui.ActivityStarterDelegate: void postQSRunnableDismissingKeyguard(java.lang.Runnable)>
<com.android.server.hdmi.HdmiCecFeatureAction.ActionTimer: void clearTimerMessage()>
<com.google.android.startop.iorap.AppLaunchEvent: int describeContents()>
<com.android.server.SystemServiceManager: void preSystemReady()>
<com.android.systemui.dagger.SystemUIRootComponent: void inject(com.android.systemui.SystemUIAppComponentFactory)>
<com.android.systemui.bubbles.animation.AnimatableScaleMatrix: void setScaleY(float)>
<com.android.keyguard.KeyguardPINView: int getPasswordTextViewId()>
<com.android.server.policy.PhoneWindowManager: void notifyCameraLensCoverSwitchChanged(long,boolean)>
<com.android.server.pm.PackageManagerService: void clearCrossProfileIntentFilters(int,java.lang.String)>
<android.net.wifi.WifiNetworkConnectionStatistics: void <init>(android.net.wifi.WifiNetworkConnectionStatistics)>
<com.android.settingslib.drawer.ProviderTile: android.content.pm.ComponentInfo getComponentInfo(android.content.Context)>
<android.net.wifi.aware.SubscribeDiscoverySession: void <init>(android.net.wifi.aware.WifiAwareManager,int,int)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView: void setInteractionEventHandler(com.android.systemui.statusbar.phone.NotificationShadeWindowView.InteractionEventHandler)>
<com.android.settingslib.RestrictedLockImageSpan: void <init>(android.content.Context)>
<com.android.server.firewall.Filter: boolean matches(com.android.server.firewall.IntentFirewall,android.content.ComponentName,android.content.Intent,int,int,java.lang.String,int)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: int getBackgroundColorForExpansionState()>
<com.android.gallery3d.exif.ExifInterface: byte[] getThumbnailBytes()>
<com.android.systemui.qs.QSPanel.QSTileLayout: void setExpansion(float)>
<android.net.wifi.p2p.WifiP2pGroup: boolean isGroupOwner()>
<com.android.server.security.VerityUtils: java.lang.String getFsveritySignatureFilePath(java.lang.String)>
<com.android.server.biometrics.face.FaceService.AuthenticationEvent: java.lang.String toString(android.content.Context)>
<com.android.systemui.qs.QuickStatusBarHeader: void setExpanded(boolean)>
<com.android.systemui.classifier.PointerCountClassifier: void onTouchEvent(android.view.MotionEvent)>
<com.android.server.pm.PreferredComponent: boolean isSuperset(java.util.List,boolean)>
<com.android.systemui.statusbar.phone.ScrimController: void setScrimBehindValues(float)>
<com.android.printspooler.model.CustomPrinterIconCache: void clear()>
<com.android.systemui.shared.system.ActivityManagerWrapper: java.lang.String getBadgedActivityLabel(android.content.pm.ActivityInfo,int)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl addUsesLibrary(int,java.lang.String)>
<android.net.wifi.SoftApConfiguration.Builder: android.net.wifi.SoftApConfiguration.Builder setBlockedClientList(java.util.List)>
<com.android.server.biometrics.fingerprint.FingerprintUtils: void removeBiometricForUser(android.content.Context,int,int)>
<com.android.media.tv.remoteprovider.TvRemoteProvider: android.os.IBinder getBinder()>
<com.android.systemui.car.window.OverlayViewController: boolean isInflated()>
<com.android.systemui.pip.tv.PipControlsViewController.Listener: void onClosed()>
<com.android.settingslib.wifi.WifiEntryPreference: void onBindViewHolder(androidx.preference.PreferenceViewHolder)>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: void moveDisplayToTop(int)>
<com.android.settingslib.core.lifecycle.ObservableFragment: void onSaveInstanceState(android.os.Bundle)>
<com.android.server.pm.PackageInstallerSession: void addChildSessionId(int)>
<com.android.server.compat.CompatChange: void <init>(com.android.server.compat.config.Change)>
<com.android.server.biometrics.Utils: int getPublicBiometricStrength(int)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: void onTouchEnd()>
<com.android.server.camera.CameraServiceProxy: boolean handleMessage(android.os.Message)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getManageSpaceActivityName()>
<com.android.settingslib.wifi.WifiTracker: void <init>(android.content.Context,com.android.settingslib.wifi.WifiTracker.WifiListener,boolean,boolean)>
<com.android.systemui.qs.AlphaControlledSignalTileView.AlphaControlledSlashDrawable: void setFinalTintList(android.content.res.ColorStateList)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl addUsesOptionalLibrary(int,java.lang.String)>
<com.android.systemui.qs.tiles.NfcTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isOnKeyguard()>
<com.android.systemui.plugins.VolumeDialogController: void getState()>
<com.android.systemui.qs.PageIndicator: void onLayout(boolean,int,int,int,int)>
<android.net.wifi.WifiInfo: java.lang.String getRequestingPackageName()>
<com.android.systemui.qs.SecureSetting: java.lang.String getKey()>
<com.android.server.os.DeviceIdentifiersPolicyService: void <init>(android.content.Context)>
<com.android.settingslib.applications.StorageStatsSource.AppStorageStatsImpl: long getTotalBytes()>
<com.android.server.om.DumpState: boolean isVerbose()>
<com.android.server.textclassifier.TextClassificationManagerService: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks.Request,android.service.textclassifier.ITextClassifierCallback)>
<com.android.server.locksettings.recoverablekeystore.KeyStoreProxyImpl: void <init>(java.security.KeyStore)>
<android.net.wifi.p2p.WifiP2pManager: void stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.systemui.statusbar.notification.ImageGradientColorizer: android.graphics.Bitmap colorize(android.graphics.drawable.Drawable,int,boolean)>
<android.net.ITetheringEventCallback: void onTetherStatesChanged(android.net.TetherStatesParcel)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean shouldSuppressPeek()>
<com.android.systemui.qs.QSSecurityFooter: void configSubtitleVisibility(boolean,boolean,boolean,boolean,android.view.View)>
<com.android.systemui.statusbar.phone.StatusBar: void dispatchDemoCommand(java.lang.String,android.os.Bundle)>
<com.android.systemui.car.statusbar.DummyNotificationShadeWindowController: void setNotificationShadeFocusable(boolean)>
<android.net.util.BaseNetdUnsolicitedEventListener: void onInterfaceDnsServerInfo(java.lang.String,long,java.lang.String[])>
<com.android.systemui.car.notification.NotificationPanelViewController: void hideInternal()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glStencilOp(int,int,int)>
<com.android.settingslib.suggestions.SuggestionControllerMixinCompat: androidx.loader.content.Loader onCreateLoader(int,android.os.Bundle)>
<android.net.wifi.aware.IdentityChangedListener: void onIdentityChanged(byte[])>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void setVisibility(int)>
<com.android.server.pm.CrossProfileAppsServiceImpl: boolean canUserAttemptToConfigureInteractAcrossProfiles(java.lang.String)>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onSingleTaskDisplayDrawn(int)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: int getDisableReasonCounter(int)>
<com.android.packageinstaller.PackageInstalledReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.inputmethod.InputMethodManagerService: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>
<com.android.systemui.statusbar.notification.stack.AmbientState: float getMaxHeadsUpTranslation()>
<com.android.systemui.CarSystemUIFactory: com.android.systemui.dagger.SystemUIRootComponent buildSystemUIRootComponent(android.content.Context)>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper.Callback: com.android.systemui.statusbar.KeyguardAffordanceView getRightIcon()>
<com.android.settingslib.widget.FooterPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setLastInSection(boolean)>
<com.android.systemui.statusbar.NotificationShelf: void onStateChanged(int)>
<com.android.systemui.statusbar.notification.stack.HeadsUpAppearInterpolator: float getFractionUntilOvershoot()>
<com.android.systemui.qs.external.TileServiceManager: void clearPendingBind()>
<com.android.systemui.stackdivider.DividerView: void calculateBoundsForPosition(int,int,android.graphics.Rect)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void appearAodIcons()>
<com.android.systemui.classifier.AnglesVarianceEvaluator: float evaluate(float,int)>
<com.android.egg.neko.NekoService: void registerJob(android.content.Context,long)>
<com.android.server.audio.RecordingActivityMonitor: int trackRecorder(android.os.IBinder)>
<android.app.backup.ForwardingBackupAgent: void onCreate()>
<com.android.systemui.statusbar.phone.LockscreenWallpaper: void run()>
<android.net.wifi.WifiConfiguration: void setHttpProxy(android.net.ProxyInfo)>
<com.android.server.inputmethod.MultiClientInputMethodManagerService.Lifecycle: void onBootPhase(int)>
<com.android.dynsystem.DynamicSystemInstallationService: void onDestroy()>
<com.android.powermodel.component.ModemBatteryStatsReader: java.util.List createActivities(com.android.powermodel.RawBatteryStats)>
<com.android.server.accessibility.gestures.TouchState: int getState()>
<com.android.keyguard.KeyguardAbsKeyInputView: boolean needsInput()>
<com.android.packageinstaller.InstallStaging: void onCreate(android.os.Bundle)>
<com.android.simappdialog.InstallCarrierAppActivity: void onCreate(android.os.Bundle)>
<com.android.settingslib.volume.Util: java.lang.String playbackInfoTypeToString(int)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setAppearFraction(float)>
<com.android.server.autofill.ui.PendingUi: boolean matches(android.os.IBinder)>
<com.android.server.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
<com.android.server.vr.SettingsObserver.SettingChangeListener: void onSettingChanged()>
<com.android.server.NetworkManagementService: void setIpForwardingEnabled(boolean)>
<com.android.server.PackageWatchdog: void unregisterHealthObserver(com.android.server.PackageWatchdog.PackageHealthObserver)>
<com.android.systemui.statusbar.phone.ShadeControllerImpl: void animateCollapsePanels()>
<com.android.server.firewall.IntentFirewall.AMSInterface: java.lang.Object getAMSLock()>
<com.android.systemui.qs.AutoAddTracker: void initialize()>
<com.android.keyguard.KeyguardSliceView.Row: void onFinishInflate()>
<com.android.settingslib.applications.StorageStatsSource: long getCacheQuotaBytes(java.lang.String,int)>
<com.android.systemui.tuner.TunerService: void setValue(java.lang.String,int)>
<com.android.systemui.BatteryMeterView: void onBatteryLevelChanged(int,boolean,boolean)>
<android.net.wifi.aware.IWifiAwareManager: void updatePublish(int,int,android.net.wifi.aware.PublishConfig)>
<com.android.systemui.statusbar.policy.KeyguardStateController: void notifyKeyguardDoneFading()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: java.util.List getAttachedChildren()>
<com.android.systemui.statusbar.policy.DeviceProvisionedControllerImpl: boolean isUserSetup(int)>
<com.android.settingslib.graph.BatteryMeterDrawableBase: void setAlpha(int)>
<com.android.systemui.statusbar.notification.stack.AnimationFilter: com.android.systemui.statusbar.notification.stack.AnimationFilter animateTopInset()>
<com.android.server.usb.UsbService: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
<android.os.SomeService: void onDestroy()>
<com.android.keyguard.KeyguardUpdateMonitor: void setKeyguardGoingAway(boolean)>
<com.android.server.incident.IncidentCompanionService: int getAndValidateUser(android.content.Context)>
<com.android.settingslib.wifi.AccessPoint: boolean isConnectable()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void notifyLockTaskModeChanged(boolean,java.lang.String,int)>
<com.android.settingslib.drawer.DashboardCategory: void removeTile(int)>
<com.android.systemui.statusbar.policy.AccessPointControllerImpl: void removeAccessPointCallback(com.android.systemui.statusbar.policy.NetworkController.AccessPointController.AccessPointCallback)>
<com.android.systemui.shared.system.ChoreographerCompat: void postInputFrame(android.view.Choreographer,java.lang.Runnable)>
<com.android.server.pm.UserManagerService: android.content.pm.UserInfo findCurrentGuestUser()>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: int getSystemBarsBehavior()>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton3Visible(boolean)>
<com.android.server.vr.EnabledComponentsObserver: android.util.ArraySet getEnabled(int)>
<com.android.server.testing.shadows.ShadowSlog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>
<com.android.systemui.statusbar.NotificationUiAdjustment: boolean areDifferent(java.util.List,java.util.List)>
<com.android.systemui.plugins.VolumeDialogController: void setStreamVolume(int,int)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: void transformFrom(com.android.systemui.statusbar.TransformableView,float)>
<com.android.server.accessibility.gestures.TouchExplorer: boolean onDoubleTap(android.view.MotionEvent,android.view.MotionEvent,int)>
<com.android.systemui.screenrecord.RecordingService: android.content.Intent getStartIntent(android.content.Context,int,int,boolean)>
<com.android.systemui.statusbar.phone.NavigationBarView: void onMeasure(int,int)>
<com.android.networkstack.tethering.OffloadHardwareInterface.ControlCallback: void onStarted()>
<com.android.keyguard.KeyguardHostView: boolean shouldEnableMenuKey()>
<com.android.systemui.statusbar.phone.StatusBarIconController.DarkIconManager: void onSetIcon(int,com.android.internal.statusbar.StatusBarIcon)>
<com.android.uiautomator.core.UiScrollable: com.android.uiautomator.core.UiScrollable setAsHorizontalList()>
<android.net.wifi.WifiScanner.HotlistSettings: int describeContents()>
<com.android.systemui.statusbar.CastDrawable: void onBoundsChange(android.graphics.Rect)>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onActivityLaunchOnSecondaryDisplayRerouted(android.app.ActivityManager.RunningTaskInfo,int)>
<com.android.systemui.statusbar.phone.StatusBar: void onConfigChanged(android.content.res.Configuration)>
<com.android.packageinstaller.InstallStaging.ErrorDialog: void onCancel(android.content.DialogInterface)>
<com.android.server.ConnectivityService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setOdm(boolean)>
<com.android.server.pm.RestrictionsSet: java.util.List getEnforcingUsers(java.lang.String,int)>
<com.android.server.RuntimeService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.egg.MLand: void setScoreFieldHolder(android.view.ViewGroup)>
<com.android.systemui.plugins.ActivityStarter: void startActivity(android.content.Intent,boolean,boolean)>
<com.android.server.twilight.TwilightState: long sunsetTimeMillis()>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: void dispatchDemoCommand(java.lang.String,android.os.Bundle)>
<com.android.systemui.dagger.ContextComponentResolver: android.app.Activity resolveActivity(java.lang.String)>
<android.net.ITetheringConnector: void registerTetheringEventCallback(android.net.ITetheringEventCallback,java.lang.String)>
<com.android.systemui.shared.system.BackgroundExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setOrganizationName(android.content.ComponentName,java.lang.CharSequence)>
<com.android.systemui.car.notification.NotificationPanelViewController: boolean shouldAllowClosingScroll()>
<com.android.server.integrity.model.ByteTrackedOutputStream: void write(int)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void canConfigureInteractAcrossProfiles_returnsTrue()>
<com.android.uiautomator.core.UiObject: android.view.accessibility.AccessibilityNodeInfo findAccessibilityNodeInfo(long)>
<com.android.systemui.assist.AssistOrbView: void onFinishInflate()>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeUtil: void loadInputMethodSubtypeList(androidx.preference.PreferenceFragment,android.content.ContentResolver,java.util.List,java.util.Map)>
<com.android.gallery3d.exif.ExifTag: java.lang.String getString()>
<com.android.systemui.statusbar.notification.row.NotificationGuts: void setClosedListener(com.android.systemui.statusbar.notification.row.NotificationGuts.OnGutsClosedListener)>
<com.android.server.pm.dex.ArtManagerService: void snapshotRuntimeProfile(int,java.lang.String,java.lang.String,android.content.pm.dex.ISnapshotRuntimeProfileCallback,java.lang.String)>
<com.android.server.NativeDaemonEvent: boolean isClassUnsolicited()>
<com.android.systemui.qs.tileimpl.QSTileImpl: void handleClick()>
<com.android.server.ZramWriteback: boolean onStartJob(android.app.job.JobParameters)>
<com.android.systemui.fragments.FragmentService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.os.StatsDimensionsValue: int describeContents()>
<com.android.systemui.bubbles.BubbleStackView: void setSelectedBubble(com.android.systemui.bubbles.BubbleViewProvider)>
<com.android.server.appop.AppOpsService: void clearHistory()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenfv(int,int,float[],int)>
<com.android.systemui.shared.recents.view.AppTransitionAnimationSpecCompat: void <init>(int,android.graphics.Bitmap,android.graphics.Rect)>
<android.net.wifi.WifiManager: void allowAutojoinGlobal(boolean)>
<com.android.server.voiceinteraction.DatabaseHelper: android.hardware.soundtrigger.SoundTrigger.KeyphraseSoundModel getKeyphraseSoundModel(int,int,java.lang.String)>
<com.android.systemui.qs.tiles.CellularTile: void handleClick()>
<com.android.server.slice.SlicePermissionManager: void removePkg(java.lang.String,int)>
<com.android.systemui.statusbar.notification.stack.NotificationRoundnessManager: void onHeadsUpStateChanged(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.settingslib.graph.BatteryMeterDrawableBase: int getBatteryLevel()>
<android.graphics.perftests.CanvasPerfTest: void testBasicViewGroupDraw()>
<com.android.server.timezone.PackageTracker: void dump(java.io.PrintWriter)>
<com.android.egg.neko.Food: java.lang.String getName(android.content.Context)>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getCaPath()>
<com.android.systemui.tuner.StatusBarSwitch: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void updateBackgroundColors()>
<android.net.wifi.SynchronousExecutor: void execute(java.lang.Runnable)>
<com.android.systemui.dagger.DependencyProvider: com.android.systemui.shared.plugins.PluginManager providePluginManager(android.content.Context)>
<android.net.wifi.WifiManager: boolean isP2pSupported()>
<com.android.systemui.qs.customize.TileQueryHelper.TileStateListener: void onTilesChanged(java.util.List)>
<com.android.server.pm.PackageManagerService: java.lang.String getIncidentReportApproverPackageName()>
<com.android.photos.views.TiledImageView: void dispatchDraw(android.graphics.Canvas)>
<com.android.systemui.biometrics.AuthDialog: void onSaveState(android.os.Bundle)>
<com.android.settingslib.DeviceInfoUtils: java.lang.String getFormattedPhoneNumbers(android.content.Context,java.util.List)>
<com.android.settingslib.suggestions.SuggestionController.ServiceConnectionListener: void onServiceDisconnected()>
<com.android.server.autofill.ui.InlineFillUi.InlineSuggestionUiCallback: void autofill(android.service.autofill.Dataset,int)>
<com.android.systemui.plugins.qs.QSTile: com.android.internal.logging.InstanceId getInstanceId()>
<com.android.server.accessibility.AccessibilityManagerService: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>
<com.android.server.trust.TrustManagerService: void onStart()>
<com.android.packageinstaller.UninstallerActivity: void onCreate(android.os.Bundle)>
<com.android.server.pm.dex.DexoptOptions: boolean isDowngrade()>
<com.android.server.timedetector.TimeDetectorStrategyImpl: void suggestTelephonyTime(android.app.timedetector.TelephonyTimeSuggestion)>
<com.android.systemui.biometrics.AuthCredentialPatternView: void onAttachedToWindow()>
<com.android.systemui.statusbar.StatusBarWifiView: void applyWifiState(com.android.systemui.statusbar.phone.StatusBarSignalPolicy.WifiIconState)>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindVolumeUI(com.android.systemui.car.volume.VolumeUI)>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.qs.QSHost provideQsHost(com.android.systemui.qs.QSTileHost)>
<com.android.settingslib.bluetooth.MapProfile: boolean isAutoConnectable()>
<com.android.systemui.biometrics.AuthContainerView.Builder: com.android.systemui.biometrics.AuthContainerView.Builder setSysUiSessionId(int)>
<com.android.role.persistence.RolesState: int hashCode()>
<android.content.pm.PackageManagerInternal: boolean isDataRestoreSafe(android.content.pm.Signature,java.lang.String)>
<com.android.systemui.qs.tileimpl.QSTileImpl.DrawableIconWithRes: java.lang.String toString()>
<android.net.wifi.hotspot2.pps.HomeSp: void setMatchAllOis(long[])>
<com.android.server.midi.MidiService: void registerListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
<com.android.systemui.statusbar.phone.ShadeController: void addPostCollapseAction(java.lang.Runnable)>
<com.android.server.pm.Installer: boolean prepareAppProfile(java.lang.String,int,int,java.lang.String,java.lang.String,java.lang.String)>
<com.android.systemui.screenshot.ActionProxyReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.biometrics.BiometricServiceBase: boolean isRestricted()>
<com.android.systemui.statusbar.policy.HeadsUpManager: boolean isTrackingHeadsUp()>
<com.android.server.pm.PackageSettingBase: void copyFrom(com.android.server.pm.PackageSettingBase)>
<android.net.wifi.hotspot2.pps.Policy.RoamingPartner: boolean getFqdnExactMatch()>
<com.android.server.pm.parsing.PackageInfoUtils.CachedApplicationInfoGenerator: android.content.pm.ApplicationInfo generate(com.android.server.pm.parsing.pkg.AndroidPackage,int,android.content.pm.PackageUserState,int,com.android.server.pm.PackageSetting)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareImpl: android.media.soundtrigger_middleware.SoundTriggerModuleDescriptor[] listModules()>
<com.android.server.usb.UsbDeviceManager: void systemReady()>
<com.android.keyguard.KeyguardPinBasedInputView: com.android.internal.widget.LockscreenCredential getEnteredCredential()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void forceUpdateUserSetupComplete()>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean handleUserControlPressed(com.android.server.hdmi.HdmiCecMessage)>
<com.android.systemui.assist.ui.EdgeLight: float getEnd()>
<android.net.wifi.WifiNetworkSuggestion: java.lang.String getPassphrase()>
<com.android.server.midi.MidiService: void setDeviceStatus(android.media.midi.IMidiDeviceServer,android.media.midi.MidiDeviceStatus)>
<com.android.systemui.shared.system.WallpaperEngineCompat: void scalePreview(android.graphics.Rect)>
<com.android.systemui.tv.TvSystemUIRootComponent.Builder: com.android.systemui.tv.TvSystemUIRootComponent.Builder context(android.content.Context)>
<com.android.systemui.plugins.GlobalActions: void showShutdownUi(boolean,java.lang.String)>
<com.android.systemui.statusbar.phone.LightBarTransitionsController: void onDozeAmountChanged(float,float)>
<com.android.systemui.statusbar.notification.stack.AmbientState: float getPulseHeight()>
<com.android.systemui.bubbles.BubbleStackView: void onThemeChanged()>
<com.android.settingslib.utils.ThreadUtils: android.os.Handler getUiThreadHandler()>
<android.os.IStatsCompanionService: boolean checkPermission(java.lang.String,int,int)>
<com.android.systemui.statusbar.phone.StatusBarIconHolder: void setVisible(boolean)>
<com.android.server.statusbar.StatusBarManagerService: void onNotificationSettingsViewed(java.lang.String)>
<com.android.server.pm.PackageDexOptimizer: int dexOptSecondaryDexPath(android.content.pm.ApplicationInfo,java.lang.String,com.android.server.pm.dex.PackageDexUsage.DexUseInfo,com.android.server.pm.dex.DexoptOptions)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setRealPackage(java.lang.String)>
<android.net.wifi.RttManager.ParcelableRttParams: int describeContents()>
<com.android.settingslib.bluetooth.HeadsetProfile: int getConnectionPolicy(android.bluetooth.BluetoothDevice)>
<com.android.settingslib.accessibility.AccessibilityUtils: java.util.Set getEnabledServicesFromSettings(android.content.Context,int)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean handleReportArcTermination(com.android.server.hdmi.HdmiCecMessage)>
<com.android.systemui.statusbar.policy.KeyButtonView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.car.statusbar.DozeServiceHost: void prepareForGentleSleep(java.lang.Runnable)>
<com.android.server.adb.AdbService: int getAdbWirelessPort()>
<com.android.settingslib.graph.BatteryMeterDrawableBase: int getCriticalLevel()>
<android.net.wifi.WifiManager: void getWifiActivityEnergyInfoAsync(java.util.concurrent.Executor,android.net.wifi.WifiManager.OnWifiActivityEnergyInfoListener)>
<com.android.settingslib.drawable.UserIconDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void reInflateViews()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: android.graphics.Point getRevealAnimationOrigin()>
<com.android.systemui.statusbar.NotificationShelf: void onDetachedFromWindow()>
<com.android.server.people.prediction.AppTargetPredictor: void onAppTargetEvent(android.app.prediction.AppTargetEvent)>
<com.android.systemui.qs.QSTileHost: void destroy()>
<com.android.egg.neko.Cat: java.lang.String getShortcutId()>
<com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpWindowToFile(android.view.accessibility.AccessibilityNodeInfo,java.io.File,int,int,int)>
<com.android.server.print.RemotePrintService.PrintServiceCallbacks: void onPrintersAdded(java.util.List)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: void applyRoundness()>
<com.android.systemui.screenrecord.ScreenMediaRecorder: com.android.systemui.screenrecord.ScreenMediaRecorder.SavedRecording save()>
<com.android.gallery3d.glrenderer.GLCanvas: void clearBuffer()>
<com.android.settingslib.media.MediaManager.MediaDeviceCallback: void onDeviceListAdded(java.util.List)>
<android.net.wifi.WifiManager: boolean isApMacRandomizationSupported()>
<com.android.server.RescueParty: boolean isAttemptingFactoryReset()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: android.util.ArraySet getUniqueChannels()>
<com.android.server.appprediction.AppPredictionManagerService: void onServicePackageUpdatedLocked(int)>
<com.android.server.pm.PackageManagerService.PendingPackageBroadcasts: void clear()>
<com.android.gallery3d.glrenderer.RawTexture: void yield()>
<com.android.settingslib.TetherUtil: boolean isTetherAvailable(android.content.Context)>
<com.android.server.input.InputManagerService: boolean isInputDeviceEnabled(int)>
<com.android.packageinstaller.wear.WearPackageInstallerService: int onStartCommand(android.content.Intent,int,int)>
<com.android.server.timezonedetector.TimeZoneDetectorService: void suggestTelephonyTimeZone(android.app.timezonedetector.TelephonyTimeZoneSuggestion)>
<android.multiuser.UserLifecycleTests: void managedProfileStopped()>
<com.android.server.pm.PackageSetting: boolean isMatch(int)>
<com.android.systemui.qs.QuickTileLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.gallery3d.exif.Rational: boolean equals(java.lang.Object)>
<android.app.PendingIntentPerfTest: void cancel()>
<com.android.systemui.screenshot.ScreenshotNotificationsController: void reset()>
<com.android.server.pm.permission.PermissionManagerService.Injector: int getCallingPid()>
<android.net.wifi.WifiInfo: void setSuccessfulRxPacketsPerSecond(double)>
<com.android.systemui.qs.QSDetailItems: void onDetachedFromWindow()>
<com.android.printspooler.ui.PageAdapter.ContentCallbacks: void onRequestContentUpdate()>
<com.android.server.storage.AppFuseBridge.MountScope: android.os.ParcelFileDescriptor openFile(int,int,int)>
<com.android.wallpapercropper.WallpaperCropActivity.BitmapCropTask: void setOnBitmapCropped(com.android.wallpapercropper.WallpaperCropActivity.OnBitmapCroppedHandler)>
<com.android.systemui.SwipeHelper.Callback: boolean isAntiFalsingNeeded()>
<com.android.systemui.qs.tileimpl.QSTileImpl: boolean isShowingDetail()>
<android.media.Session2CommandGroup.Builder: android.media.Session2CommandGroup.Builder addCommand(android.media.Session2Command)>
<com.android.systemui.statusbar.phone.LockscreenLockIconController: void onShowingLaunchAffordanceChanged(java.lang.Boolean)>
<com.android.server.pm.ShortcutService.Lifecycle: void onBootPhase(int)>
<com.google.android.startop.iorap.DexOptEvent: int describeContents()>
<com.android.keyguard.KeyguardSecurityView: void onStartingToHide()>
<com.android.systemui.qs.QSFragment: void hideImmediately()>
<com.android.server.AnyMotionDetector.Vector3: float angleBetween(com.android.server.AnyMotionDetector.Vector3)>
<com.android.server.appprediction.AppPredictionManagerService: int getMaximumTemporaryServiceDurationMs()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setHeadsUpAppearanceController(com.android.systemui.statusbar.phone.HeadsUpAppearanceController)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void deleteRecycledResources()>
<com.android.systemui.statusbar.policy.NetworkController.SignalCallback: void setNoSims(boolean,boolean)>
<com.android.systemui.car.navigationbar.CarNavigationButton: android.view.View.OnLongClickListener getButtonLongClickListener(android.content.Intent)>
<com.android.systemui.biometrics.AuthBiometricFingerprintView: int getDelayAfterAuthenticatedDurationMs()>
<com.android.server.soundtrigger_middleware.ISoundTriggerHw2: android.hardware.soundtrigger.V2_3.ModelParameterRange queryParameter(int,int)>
<com.android.server.usb.descriptors.UsbACMixerUnit: byte getUnitID()>
<com.android.settingslib.display.DisplayDensityUtils: int getDefaultDensity()>
<com.android.settingslib.graph.BatteryMeterDrawableBase: void setColors(int,int)>
<com.android.server.pm.PackageManagerService: java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo,java.lang.String,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout.OnEmptySpaceClickListener: void onEmptySpaceClicked(float,float)>
<com.android.server.broadcastradio.hal1.TunerCallback.RunnableThrowingRemoteException: void run()>
<com.android.systemui.wm.DisplayController: void <init>(android.content.Context,android.os.Handler,android.view.IWindowManager)>
<com.android.systemui.statusbar.policy.CallbackHandler: void setListening(com.android.systemui.statusbar.policy.NetworkController.SignalCallback,boolean)>
<com.android.settingslib.inputmethod.InputMethodPreference: boolean onPreferenceClick(androidx.preference.Preference)>
<com.android.server.input.InputManagerService: void cancelVibrate(int,android.os.IBinder)>
<com.android.keyguard.PasswordTextView: void <init>(android.content.Context)>
<com.android.server.vr.EnabledComponentsObserver: android.util.ArraySet getInstalled(int)>
<com.android.server.usb.descriptors.UsbInterfaceDescriptor: com.android.server.usb.descriptors.UsbEndpointDescriptor getEndpointDescriptor(int)>
<com.android.server.accounts.AccountManagerService: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
<com.android.server.firewall.IntentFirewall.AMSInterface: int checkComponentPermission(java.lang.String,int,int,int,boolean)>
<com.android.systemui.tuner.TunerService.Tunable: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.server.policy.keyguard.KeyguardStateMonitor: boolean isTrusted()>
<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>
<com.android.keyguard.KeyguardSimPukView: boolean confirmPin()>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: void setDisableTime(long)>
<com.android.carrierdefaultapp.CarrierActionUtils: void applyCarrierAction(int,android.content.Intent,android.content.Context)>
<com.android.systemui.pip.PipTaskOrganizer.PipTransitionCallback: void onPipTransitionCanceled(android.content.ComponentName,int)>
<android.net.wifi.IWifiManager: void deauthenticateNetwork(long,boolean)>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo: boolean post(java.lang.Runnable)>
<com.android.systemui.tuner.CustomListPreference.CustomListPreferenceDialogFragment: com.android.systemui.tuner.CustomListPreference getCustomizablePreference()>
<com.android.gallery3d.exif.ExifInterface: com.android.gallery3d.exif.Rational getTagRationalValue(int)>
<com.android.server.INativeDaemonConnectorCallbacks: boolean onEvent(int,java.lang.String,java.lang.String[])>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: com.android.systemui.statusbar.phone.NotificationPanelViewController.OnLayoutChangeListener createLayoutChangeListener()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getNetworkSecurityConfigRes()>
<com.android.commands.hid.Hid: void main(java.lang.String[])>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onLeftAffordanceOn()>
<com.android.server.storage.DeviceStorageMonitorInternal: long getMemoryLowThreshold()>
<com.android.server.hdmi.HdmiControlService: void initPortInfo()>
<android.os.ParcelPerfTest: void timeObtainRecycle()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void hide(long,long)>
<com.android.server.FgThread: java.util.concurrent.Executor getExecutor()>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void onViewRemoved(android.view.View)>
<com.android.systemui.SwipeHelper: boolean swipedFarEnough()>
<com.android.server.integrity.model.IntegrityCheckResult: com.android.server.integrity.model.IntegrityCheckResult deny(java.util.List)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setFactoryTest(boolean)>
<com.android.systemui.qs.external.TileServices: void setMemoryPressure(boolean)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void notifyKeyguardAuthenticated(boolean)>
<com.android.networkstack.tethering.UpstreamNetworkMonitor: void startObserveAllNetworks()>
<com.android.keyguard.KeyguardPasswordView: void onResume(int)>
<com.android.systemui.statusbar.policy.DeadZone: void onDraw(android.graphics.Canvas)>
<com.android.printspooler.widget.PreviewPageFrame: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.slice.SlicePermissionManager: void grantSliceAccess(java.lang.String,int,java.lang.String,int,android.net.Uri)>
<com.android.systemui.classifier.EndPointRatioClassifier: float getFalseTouchEvaluation(int,com.android.systemui.classifier.Stroke)>
<com.android.systemui.settings.BrightnessController: boolean removeStateChangedCallback(com.android.systemui.settings.BrightnessController.BrightnessStateChangeCallback)>
<com.android.server.wallpaper.WallpaperManagerService: int getWallpaperIdForUser(int,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getGlobalPrivateDnsHost(android.content.ComponentName)>
<com.android.settingslib.applications.AppUtils: java.lang.CharSequence getApplicationLabel(android.content.pm.PackageManager,java.lang.String)>
<javax.microedition.khronos.opengles.GL11: void glGetFloatv(int,float[],int)>
<com.android.systemui.SwipeHelper: void setMinSwipeProgress(float)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setAmbientIndicationBottomPadding(int)>
<com.android.server.tv.tunerresourcemanager.ClientProfile: int getNiceValue()>
<android.net.wifi.hotspot2.pps.Credential: int describeContents()>
<com.android.server.accounts.AccountManagerService.Lifecycle: void <init>(android.content.Context)>
<com.android.systemui.SwipeHelper: android.animation.Animator getViewTranslationAnimator(android.view.View,float,android.animation.ValueAnimator.AnimatorUpdateListener)>
<com.android.server.pm.UserRestrictionsUtils: void applyUserRestrictions(android.content.Context,int,android.os.Bundle,android.os.Bundle)>
<com.android.systemui.statusbar.notification.NotificationUtils: int interpolateColors(int,int,float)>
<com.android.systemui.qs.PagedTileLayout: void restoreInstanceState(android.os.Bundle)>
<com.android.settingslib.core.lifecycle.ObservablePreferenceFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
<com.android.systemui.statusbar.AlphaOptimizedButton: void <init>(android.content.Context)>
<com.android.systemui.qs.tiles.AirplaneModeTile: void handleClick()>
<com.android.systemui.bubbles.BubbleController: void onStatusBarVisibilityChanged(boolean)>
<com.android.media.remotedisplay.RemoteDisplay: void setVolume(int)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexfOES(float,float,float,float,float)>
<android.net.wifi.rtt.CivicLocation: void <init>(byte[],java.lang.String)>
<android.app.ResourcesPerfTest: void getIntegerArray()>
<com.android.systemui.qs.external.TileServiceManager: void setBindAllowed(boolean)>
<com.android.systemui.stackdivider.ForcedResizableInfoActivity: void setTaskDescription(android.app.ActivityManager.TaskDescription)>
<com.android.server.display.WifiDisplayController.Listener: void onScanFinished()>
<com.android.uiautomator.testrunner.UiAutomatorTestRunner: void run(java.util.List,android.os.Bundle,boolean,boolean)>
<android.processor.view.inspector.InspectableClassModel.IntFlagEntry: void <init>(int,int,java.lang.String)>
<com.android.systemui.shared.system.InputConsumerController.RegistrationListener: void onRegistrationChanged(boolean)>
<com.android.server.pm.Installer: void rmdex(java.lang.String,java.lang.String)>
<android.media.Session2CommandGroup: boolean hasCommand(android.media.Session2Command)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceController: void onAmbientBrightnessChanged(float)>
<com.android.systemui.statusbar.notification.row.StackScrollerDecorView: boolean isVisible()>
<com.android.server.signedconfig.InvalidConfigException: void <init>(java.lang.String,java.lang.Exception)>
<com.android.server.input.InputManagerService: void tryPointerSpeed(int)>
<com.android.server.tv.tunerresourcemanager.ClientProfile: void reclaimAllResources()>
<com.android.systemui.statusbar.CommandQueue: void preloadRecentApps()>
<android.perftests.utils.BenchmarkState: void resumeTiming()>
<com.android.systemui.screenrecord.ScreenRecordDialog: void onCreate(android.os.Bundle)>
<com.android.systemui.usb.UsbPermissionActivity: void onCheckedChanged(android.widget.CompoundButton,boolean)>
<com.android.systemui.statusbar.phone.StatusBar: com.android.systemui.statusbar.phone.BarTransitions getStatusBarTransitions()>
<com.android.server.webkit.SystemImpl: boolean isFallbackLogicEnabled()>
<com.android.server.audio.AudioService: void onSystemReady()>
<com.android.uiautomator.core.UiDevice: boolean pressDPadDown()>
<com.android.server.pm.UserManagerService: boolean isRestricted()>
<android.os.IStatsManagerService: long[] setActiveConfigsChangedOperation(android.app.PendingIntent,java.lang.String)>
<com.android.systemui.doze.DozeDockHandler: void transitionTo(com.android.systemui.doze.DozeMachine.State,com.android.systemui.doze.DozeMachine.State)>
<com.android.systemui.qs.tiles.LocationTile: java.lang.CharSequence getTileLabel()>
<com.android.systemui.qs.external.CustomTile: void handleDestroy()>
<com.android.systemui.statusbar.phone.BiometricUnlockController: void onBiometricAcquired(android.hardware.biometrics.BiometricSourceType)>
<com.android.settingslib.schedulesprovider.ScheduleInfo: int describeContents()>
<com.android.localtransport.LocalTransport: android.app.backup.RestoreSet[] getAvailableRestoreSets()>
<com.android.systemui.plugins.VolumeDialog.Callback: void onZenPrioritySettingsClicked()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void onDisplayRemoved(int)>
<com.android.keyguard.EmergencyCarrierArea: void setCarrierTextVisible(boolean)>
<com.android.server.testing.shadows.ShadowPerformUnifiedRestoreTask: void execute()>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: boolean userAllowsPrivateNotificationsInPublic(int)>
<com.android.server.pm.OtaDexoptService: void <init>(android.content.Context,com.android.server.pm.PackageManagerService)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void onServiceConnected()>
<com.android.systemui.car.volume.CarVolumeItem.CarVolumeItemViewHolder: void <init>(android.view.View)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: java.util.List getSmartReplies()>
<android.net.wifi.WifiManager: java.util.Map getMatchingScanResults(java.util.List,java.util.List)>
<com.android.server.display.AmbientBrightnessStatsTracker: void add(int,float)>
<com.android.server.NetworkManagementService: void allowProtect(int)>
<com.android.systemui.qs.tiles.BluetoothTile: boolean isAvailable()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onOverlayChanged()>
<com.android.server.soundtrigger_middleware.SoundTriggerHw2Enforcer: android.hardware.soundtrigger.V2_3.ModelParameterRange queryParameter(int,int)>
<com.android.systemui.shared.system.QuickStepContract: boolean isAssistantGestureDisabled(int)>
<com.android.server.pm.PackageInstallerService: void uninstallExistingPackage(android.content.pm.VersionedPackage,java.lang.String,android.content.IntentSender,int)>
<com.android.systemui.shared.system.ActivityCompat: boolean encodeViewHierarchy(java.io.ByteArrayOutputStream)>
<com.android.settingslib.drawer.Tile: android.os.Bundle getMetaData()>
<com.android.keyguard.clock.DefaultClockController: void setTextColor(int)>
<com.android.systemui.SystemUI: void <init>(android.content.Context)>
<com.android.keyguard.KeyguardPatternView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.app.backup.BackupUtilsTest: void testIsFileSpecifiedInPathList_whenFileAndPathListHasIt()>
<com.android.systemui.qs.external.CustomTile: void handleSetListening(boolean)>
<android.net.wifi.WifiEnterpriseConfig: boolean isAppInstalledCaCert()>
<android.net.wifi.WifiScanner.ScanData: android.net.wifi.ScanResult[] getResults()>
<com.android.server.pm.Installer: void moveCompleteApp(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,int,java.lang.String)>
<android.net.wifi.IWifiManager: void connect(android.net.wifi.WifiConfiguration,int,android.os.IBinder,android.net.wifi.IActionListener,int)>
<com.android.settingslib.RestrictedLockUtilsInternal: void setMenuItemAsDisabledByAdmin(android.content.Context,android.view.MenuItem,com.android.settingslib.RestrictedLockUtils.EnforcedAdmin)>
<javax.obex.ClientOperation: void streamClosed(boolean)>
<com.android.permission.persistence.RuntimePermissionsPersistence: com.android.permission.persistence.RuntimePermissionsPersistence createInstance()>
<com.android.systemui.statusbar.notification.NotificationIconDozeHelper: void setImageDark(android.widget.ImageView,boolean,boolean,long,boolean)>
<com.android.systemui.statusbar.policy.UserSwitcherController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.usb.UsbService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.role.persistence.RolesPersistenceImpl: void deleteForUser(android.os.UserHandle)>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean isGroupExpanded()>
<com.android.server.pm.ShortcutService: void applyRestore(byte[],int)>
<com.android.systemui.tuner.TunerActivity.SubSettingsFragment: void onCreatePreferences(android.os.Bundle,java.lang.String)>
<com.android.server.WallpaperUpdateReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.statusbar.phone.NavigationBarView: boolean isVertical()>
<android.net.wifi.aware.DiscoverySessionCallback: void onSubscribeStarted(android.net.wifi.aware.SubscribeDiscoverySession)>
<com.android.server.audio.AudioService: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void generateChildOrderChangedEvent()>
<com.android.preload.check.Util: void assertTrue(boolean,java.lang.String)>
<com.android.systemui.SystemUIAppComponentFactory: android.app.Application instantiateApplicationCompat(java.lang.ClassLoader,java.lang.String)>
<com.android.photos.SimpleBitmapRegionDecoderWrapper: com.android.photos.SimpleBitmapRegionDecoderWrapper newInstance(java.io.InputStream,boolean)>
<com.android.server.policy.SoftRestrictedPermissionPolicy: boolean mayAllowExtraAppOp()>
<com.android.server.pm.Installer: void onStart()>
<com.android.systemui.car.navigationbar.CarNavigationButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.perftests.utils.TestPackageInstaller.InstalledPackage: java.lang.String getPackageName()>
<com.android.systemui.recents.OverviewProxyService: void notifyAssistantVisibilityChanged(float)>
<com.android.systemui.ForegroundServiceController: void <init>(com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.systemui.appops.AppOpsController,android.os.Handler)>
<com.android.systemui.plugins.qs.QS: void setListening(boolean)>
<android.net.wifi.p2p.IWifiP2pManager: android.os.Messenger getP2pStateMachineMessenger()>
<com.android.systemui.statusbar.StatusBarIconView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.carrierdefaultapp.CaptivePortalLoginActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.volume.SystemUIInterpolators.Callback: void onAnimatingChanged(boolean)>
<com.android.server.usb.UsbAlsaManager: void logDevices(java.lang.String)>
<com.android.printspooler.ui.SelectPrinterActivity: void updateEmptyView(com.android.printspooler.ui.SelectPrinterActivity.DestinationAdapter)>
<com.android.systemui.statusbar.phone.StatusBar: void setPanelExpanded(boolean)>
<com.android.systemui.qs.tiles.DataSaverTile: void handleClick()>
<com.android.systemui.qs.TileLayout: boolean updateMaxRows(int,int)>
<com.android.server.audio.AudioService: void unloadSoundEffects()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isMediaRow()>
<com.android.server.soundtrigger.SoundTriggerLogger.Event: java.lang.String toString()>
<com.example.android.networkusage.SettingsActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.globalactions.GlobalActionsDialog: java.lang.String[] getDefaultActions()>
<android.net.wifi.aware.TlvBufferUtils.TlvConstructor: android.net.wifi.aware.TlvBufferUtils.TlvConstructor putByteArray(int,byte[])>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifLifetimeExtender: boolean shouldExtendLifetime(com.android.systemui.statusbar.notification.collection.NotificationEntry,int)>
<com.android.settingslib.media.LocalMediaManager: java.util.List getSelectedMediaDevice()>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService.ResourcesReclaimListenerRecord: void <init>(android.media.tv.tunerresourcemanager.IResourcesReclaimListener,int)>
<com.android.server.utils.TimingsTraceAndSlog: com.android.server.utils.TimingsTraceAndSlog newAsyncLog()>
<android.net.TetheringManager.TetheringRequest: android.net.LinkAddress getLocalIpv4Address()>
<android.net.wifi.rtt.CivicLocation: android.util.SparseArray toSparseArray()>
<javax.microedition.khronos.opengles.GL10: void glNormal3x(int,int,int)>
<com.android.server.hdmi.HdmiCecController.NativeWrapper: int nativeAddLogicalAddress(int)>
<com.android.server.accessibility.AccessibilityManagerService: void sendAccessibilityEventForCurrentUserLocked(android.view.accessibility.AccessibilityEvent)>
<com.android.server.testing.shadows.ShadowKeyValueBackupJob: int getCallingUid()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void onLayout()>
<com.android.server.pm.Installer: void assertFsverityRootHashMatches(java.lang.String,byte[])>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: boolean areNotificationsHiddenInShade()>
<com.android.keyguard.EmergencyButton: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.qs.QSPanel: void addViewsAboveTiles()>
<com.android.systemui.qs.QSSecurityFooter: java.lang.CharSequence getVpnMessage(boolean,boolean,java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: int getSpaceForMenu()>
<com.android.server.storage.StorageSessionController: void onVolumeMount(android.os.ParcelFileDescriptor,android.os.storage.VolumeInfo)>
<android.view.autofill.LoginTest: void testFocus_serviceDoesNotAutofill()>
<com.android.packageinstaller.wear.WearPackageInstallerService: void onCreate()>
<com.android.server.usb.descriptors.report.TextReportCanvas: void <init>(com.android.server.usb.descriptors.UsbDescriptorParser,java.lang.StringBuilder)>
<com.android.systemui.pip.phone.PipTouchHandler: void adjustBoundsForRotation(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>
<com.android.printspooler.model.RemotePrintDocument.RemoteAdapterDeathObserver: void onDied()>
<com.android.systemui.tuner.TunerFragment: void onCreatePreferences(android.os.Bundle,java.lang.String)>
<com.android.systemui.statusbar.notification.stack.AnimationProperties: com.android.systemui.statusbar.notification.stack.AnimationFilter getAnimationFilter()>
<com.android.systemui.statusbar.policy.CastControllerImpl: void addCallback(android.media.MediaRouter.Callback)>
<android.database.TableHelper.CursorReader: void read()>
<com.android.settingslib.applications.ServiceListing.Builder: com.android.settingslib.applications.ServiceListing.Builder setSetting(java.lang.String)>
<com.android.server.policy.WindowManagerPolicy.WindowState: int getDisplayId()>
<com.android.server.utils.quota.CountQuotaTracker: void dump(android.util.proto.ProtoOutputStream,long)>
<com.android.server.media.MediaSession2Record: java.lang.String toString()>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: void setTrackingHeadsUp(boolean)>
<com.android.systemui.statusbar.phone.RotationContextButton: boolean acceptRotationProposal()>
<android.graphics.perftests.PaintHasGlyphPerfTest: void <init>(java.lang.String,java.lang.String)>
<com.android.server.pm.parsing.pkg.PackageImpl: int getUid()>
<com.android.server.audio.AudioService: java.util.List getActivePlaybackConfigurations()>
<com.android.systemui.qs.tileimpl.QSTileImpl: void destroy()>
<com.android.systemui.statusbar.phone.NavigationBarView: void updateSlippery()>
<com.android.systemui.qs.GlobalSetting: void <init>(android.content.Context,android.os.Handler,java.lang.String)>
<com.android.systemui.statusbar.RemoteInputController.Delegate: void lockScrollTo(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.display.utils.AmbientFilter: void dump(java.io.PrintWriter)>
<com.android.server.utils.UserTokenWatcher: boolean isAcquired(int)>
<com.android.server.pm.UserManagerService.LifeCycle: void onUnlockUser(int)>
<com.android.systemui.statusbar.policy.CallbackHandler: void setWifiIndicators(boolean,com.android.systemui.statusbar.policy.NetworkController.IconState,com.android.systemui.statusbar.policy.NetworkController.IconState,boolean,boolean,java.lang.String,boolean,java.lang.String)>
<com.android.systemui.qs.QSFragment: void setListening(boolean)>
<android.perftests.utils.LayoutUtils: void requestLayoutForAllNodes(java.util.List)>
<android.net.wifi.WifiNetworkSpecifier: void writeToParcel(android.os.Parcel,int)>
<com.android.server.usb.UsbService: android.hardware.usb.UsbAccessory getCurrentAccessory()>
<com.android.settingslib.RestrictedPreferenceHelper: void checkRestrictionAndSetDisabled(java.lang.String,int)>
<com.android.server.uri.UriPermissionOwner: void <init>(com.android.server.uri.UriGrantsManagerInternal,java.lang.Object)>
<com.android.systemui.analytics.DataCollector: void onAffordanceSwipingStarted(boolean)>
<com.android.systemui.volume.VolumeDialogControllerImpl: void setCaptionsEnabled(boolean)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.net.wifi.hotspot2.pps.Policy.RoamingPartner: void setCountries(java.lang.String)>
<com.android.server.pm.dex.DexoptOptions: int getFlags()>
<com.android.server.display.WifiDisplayController.Listener: void onDisplayConnected(android.hardware.display.WifiDisplay,android.view.Surface,int,int,int)>
<com.android.gallery3d.exif.ExifTag: boolean isValidIfd(int)>
<com.android.systemui.statusbar.notification.row.PartialConversationInfo: boolean willBeRemoved()>
<android.media.MediaParser: java.lang.String getParserName()>
<com.android.settingslib.wifi.TestAccessPointBuilder: com.android.settingslib.wifi.TestAccessPointBuilder setSsid(java.lang.String)>
<com.android.settingslib.drawer.SwitchController: void notifyTitleChanged(android.content.Context)>
<com.android.server.pm.PackageManagerService.Injector: com.android.server.storage.DeviceStorageMonitorInternal getDeviceStorageMonitorInternal()>
<com.android.systemui.statusbar.phone.PanelViewController: boolean shouldGestureIgnoreXTouchSlop(float,float)>
<com.android.server.media.MediaSessionRecord: boolean sendMediaButton(java.lang.String,int,int,boolean,android.view.KeyEvent,int,android.os.ResultReceiver)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>
<com.android.server.ConnectivityService: java.lang.String[] getTetherableWifiRegexs()>
<com.android.vpndialogs.ConfirmDialog: android.graphics.drawable.Drawable getDrawable(java.lang.String)>
<com.android.systemui.statusbar.notification.DynamicPrivacyController: boolean isInLockedDownShade()>
<com.android.server.soundtrigger_middleware.SoundTriggerHw2Enforcer: int getModelParameter(int,int)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void initView()>
<com.android.systemui.assist.AssistHandleViewController: void setBottomOffset(int)>
<com.android.gallery3d.common.BitmapUtils: byte[] compressToBytes(android.graphics.Bitmap,int)>
<com.android.server.soundtrigger_middleware.SoundTriggerHw2Enforcer: void stopAllRecognitions()>
<com.android.gallery3d.glrenderer.GLCanvas: void fillRect(float,float,float,float,int)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationMessagingTemplateViewWrapper: int getMinLayoutHeight()>
<com.android.photos.views.TiledImageRenderer: void setPosition(int,int,float)>
<com.android.server.pm.UserTypeDetails.Builder: com.android.server.pm.UserTypeDetails.Builder setBadgeColors(int[])>
<com.android.systemui.statusbar.notification.collection.NotifInflaterImpl: void abortInflation(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.notification.stack.ExpandableViewState: int getFinalActualHeight(com.android.systemui.statusbar.notification.row.ExpandableView)>
<com.android.networkstack.tethering.TetheringConfiguration: boolean isUsb(java.lang.String)>
<com.android.server.compat.PlatformCompat: void reportChangeByUid(long,int)>
<com.android.server.locksettings.RebootEscrowManager.Callbacks: void onRebootEscrowRestored(byte,byte[],int)>
<com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry: boolean isSticky()>
<com.android.settingslib.notification.ConversationIconFactory.ConversationIconDrawable: int getOpacity()>
<com.android.systemui.qs.QSFooter: void setKeyguardShowing(boolean)>
<com.android.systemui.qs.external.CustomTile: void onDialogShown()>
<com.android.settingslib.wifi.AccessPoint: java.lang.String getPasspointFqdn()>
<com.android.systemui.car.notification.NotificationPanelViewController: int getInsetTypesToFit()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: void updateTransformedTypes()>
<com.android.settingslib.bluetooth.LocalBluetoothProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)>
<android.net.wifi.aware.TlvBufferUtils: boolean isValid(byte[],int,int)>
<com.android.systemui.car.window.OverlayViewController: boolean shouldFocusWindow()>
<com.android.server.display.color.ColorDisplayService: void onStartUser(int)>
<com.android.server.pm.PackageManagerService: void flushPackageRestrictionsAsUser(int)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: void resolveHeaderViews()>
<com.android.systemui.statusbar.phone.BiometricUnlockController: boolean isWakeAndUnlock()>
<com.android.systemui.wm.SystemWindows.SysUiWindowManager: void <init>(int,android.content.Context,android.view.SurfaceControl,com.android.systemui.wm.SystemWindows.ContainerWindow)>
<com.google.android.startop.iorap.IorapForwardingService.RemoteRunnable: void run(com.google.android.startop.iorap.IIorap)>
<android.os.BinderCallsStatsPerfTest: void timeCallSession()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageCaCerts(android.content.ComponentName,java.lang.String)>
<com.android.server.pm.PackageManagerService: void performFstrimIfNeeded()>
<android.app.ResourcesPerfTest: void getLayoutAndTraverseInvalidateCaches()>
<com.android.systemui.statusbar.policy.SecurityController: boolean hasProfileOwner()>
<com.android.server.usb.descriptors.Usb10ASFormatI: int[] getBitDepths()>
<com.android.systemui.qs.QSPanel: void setListening(boolean)>
<com.android.server.autofill.ViewState.Listener: void onFillReady(android.service.autofill.FillResponse,android.view.autofill.AutofillId,android.view.autofill.AutofillValue)>
<com.android.systemui.util.time.SystemClock: long elapsedRealtimeNanos()>
<com.android.systemui.bubbles.BubbleDismissView: void <init>(android.content.Context)>
<com.android.server.adb.AdbDebuggingManager: void allowWirelessDebugging(boolean,java.lang.String)>
<com.android.server.stats.StatsManagerService: void registerPullAtomCallback(int,long,long,int[],android.os.IPullAtomCallback)>
<com.android.systemui.statusbar.notification.row.HybridNotificationView: android.widget.TextView getTitleView()>
<com.android.gallery3d.exif.ExifTag: boolean setValue(java.lang.Object)>
<com.android.systemui.statusbar.phone.StatusBar: void onTrackingStarted()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean interceptMediaKey(android.view.KeyEvent)>
<com.android.server.DynamicSystemService: boolean createPartition(java.lang.String,long,boolean)>
<com.android.systemui.fragments.FragmentHostManager: void removeAndDestroy(android.view.View)>
<com.android.server.policy.PhoneWindowManager: void onSystemUiStarted()>
<com.android.server.usb.descriptors.UsbACMidiEndpoint: void <init>(int,byte,int)>
<com.android.printspooler.model.PrintSpoolerService: boolean hasActivePrintJobsForServiceLocked(android.content.ComponentName)>
<android.text.PrecomputedTextPerfTest: void testCreate_Styled_NoHyphenation_WidthOnly()>
<com.android.settingslib.wifi.AccessPoint: boolean isPskSaeTransitionMode()>
<com.android.printservice.recommendation.util.Preconditions: int checkArgumentNonnegative(int,java.lang.String)>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: int getCallingUid()>
<com.android.server.statusbar.StatusBarManagerService: void removeIcon(java.lang.String)>
<com.android.systemui.statusbar.policy.KeyguardStateController: boolean isUnlocked()>
<android.net.wifi.IWifiManager: void acquireMulticastLock(android.os.IBinder,java.lang.String)>
<com.android.server.usb.descriptors.ByteStream: void <init>(byte[])>
<com.android.server.ConnectivityService: java.lang.String getAlwaysOnVpnPackage(int)>
<android.net.wifi.RttManager: void enableResponder(android.net.wifi.RttManager.ResponderCallback)>
<com.android.systemui.pip.PipAnimationController.PipTransitionAnimator: void onAnimationRepeat(android.animation.Animator)>
<com.android.server.display.BrightnessMappingStrategy: void dump(java.io.PrintWriter)>
<com.android.systemui.plugins.qs.QSTile.BooleanState: boolean copyTo(com.android.systemui.plugins.qs.QSTile.State)>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy.MobileIconState: void copyTo(com.android.systemui.statusbar.phone.StatusBarSignalPolicy.MobileIconState)>
<com.android.systemui.volume.VolumeComponent: void register()>
<com.android.systemui.keyguard.KeyguardSliceProvider: void addZenModeLocked(androidx.slice.builders.ListBuilder)>
<com.android.future.usb.UsbManager: boolean hasPermission(com.android.future.usb.UsbAccessory)>
<com.android.systemui.car.userswitcher.UserIconProvider: androidx.core.graphics.drawable.RoundedBitmapDrawable getRoundedUserIcon(android.content.pm.UserInfo,android.content.Context)>
<com.android.systemui.statusbar.notification.FakeShadowView: void setFakeShadowTranslationZ(float,float,int,int)>
<javax.microedition.khronos.opengles.GL10: void glShadeModel(int)>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy.WifiIconState: int hashCode()>
<com.android.server.NetworkManagementService: void enableNat(java.lang.String,java.lang.String)>
<android.net.wifi.p2p.WifiP2pProvDiscEvent: java.lang.String toString()>
<com.android.systemui.util.InjectionInflationController.ViewInstanceCreator: com.android.systemui.qs.QSPanel createQSPanel()>
<com.android.server.integrity.parser.RandomAccessObject: int read(byte[],int,int)>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: boolean isKeyguardFadingAway()>
<com.android.server.pm.Installer: void installApkVerity(java.lang.String,java.io.FileDescriptor,int)>
<com.android.systemui.statusbar.phone.ObservableScrollView: boolean dispatchTouchEvent(android.view.MotionEvent)>
<com.android.server.pm.UserRestrictionsUtils: void dumpRestrictions(java.io.PrintWriter,java.lang.String,android.os.Bundle)>
<com.android.server.DeviceIdleController: void onBootPhase(int)>
<com.android.systemui.statusbar.phone.DarkIconDispatcherImpl: void applyDarkIntensity(float)>
<javax.obex.ClientOperation: int getMaxPacketSize()>
<com.android.server.audio.AudioService: void <init>(android.content.Context)>
<com.android.photos.BitmapRegionTileSource.BitmapSource: com.android.photos.SimpleBitmapRegionDecoder getBitmapRegionDecoder()>
<com.android.server.pm.UserManagerService: boolean isProfile(int)>
<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)>
<com.android.systemui.qs.QuickTileLayout: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: int calculateVisibleType()>
<com.android.systemui.qs.tiles.NightDisplayTile: android.content.Intent getLongClickIntent()>
<com.android.systemui.statusbar.phone.NavigationBarEdgePanel: void setLayoutParams(android.view.WindowManager.LayoutParams)>
<com.android.server.policy.PhoneWindowManager: boolean canDismissBootAnimation()>
<com.android.server.security.KeyChainSystemService: void <init>(android.content.Context)>
<com.android.server.policy.WindowManagerPolicy: void init(android.content.Context,android.view.IWindowManager,com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs)>
<com.android.systemui.util.AutoMarqueeTextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setGroupManager(com.android.systemui.statusbar.phone.NotificationGroupManager)>
<com.android.server.pm.UserManagerService: int getUserBadgeDarkColorResId(int)>
<com.android.server.voiceinteraction.VoiceInteractionManagerService: void onUserStarting(com.android.server.SystemService.TargetUser)>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void onAttachedToWindow()>
<com.android.uiautomator.core.Configurator: com.android.uiautomator.core.Configurator setKeyInjectionDelay(long)>
<com.android.server.pm.KeySetManagerService: com.android.server.pm.KeySetHandle getSigningKeySetByPackageNameLPr(java.lang.String)>
<com.android.settingslib.applications.ServiceListing.Builder: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setState(int[])>
<com.android.systemui.statusbar.policy.KeyguardStateController: boolean isBypassFadingAnimation()>
<com.android.systemui.ForegroundServiceController: android.util.ArraySet getAppOps(int,java.lang.String)>
<com.android.systemui.statusbar.notification.row.FooterView: android.view.View findContentView()>
<android.net.TetheredClient: int describeContents()>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifCollectionListener: void onEntryBind(com.android.systemui.statusbar.notification.collection.NotificationEntry,android.service.notification.StatusBarNotification)>
<com.android.packageinstaller.InstallInstalling: void onCreate(android.os.Bundle)>
<com.android.server.policy.PermissionPolicyInternal: boolean isInitialized(int)>
<com.android.systemui.bubbles.BubbleStackView: void <init>(android.content.Context,com.android.systemui.bubbles.BubbleData,com.android.systemui.bubbles.BubbleStackView.SurfaceSynchronizer,com.android.systemui.util.FloatingContentCoordinator,com.android.systemui.model.SysUiState,java.lang.Runnable,java.util.function.Consumer,java.lang.Runnable)>
<android.net.wifi.WifiClient: void <init>(android.net.MacAddress)>
<com.android.server.policy.LogDecelerateInterpolator: float getInterpolation(float)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void showIconCentered(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.settingslib.suggestions.SuggestionControllerMixin: void onStart()>
<com.android.systemui.plugins.VolumeDialogController: void notifyVisible(boolean)>
<com.android.server.usb.descriptors.Usb10ACOutputTerminal: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.server.RescueParty.RescuePartyObserver: boolean mayObservePackage(java.lang.String)>
<com.android.keyguard.KeyguardUpdateMonitor: void removeCallback(com.android.keyguard.KeyguardUpdateMonitorCallback)>
<android.app.backup.BackupUtilsTest: void setUp()>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: void dragBubbleOut(android.view.View,float,float)>
<android.net.wifi.INetworkRequestMatchCallback: void onMatch(java.util.List)>
<com.android.systemui.pip.tv.PipControlButtonView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.utils.UserTokenWatcher: void acquire(android.os.IBinder,java.lang.String,int)>
<com.android.settingslib.bluetooth.HearingAidProfile: boolean isProfileReady()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setAutoTimeZoneEnabled(android.content.ComponentName,boolean)>
<com.android.photos.BitmapRegionTileSource: int getTileSize()>
<com.android.server.ConnectivityService: void startLegacyVpn(com.android.internal.net.VpnProfile)>
<android.net.wifi.p2p.WifiP2pGroup: boolean removeClient(android.net.wifi.p2p.WifiP2pDevice)>
<com.android.systemui.statusbar.phone.SystemUIDialog: void setPositiveButton(int,com.android.systemui.statusbar.phone.NotificationPanelViewController.OnClickListener)>
<com.android.systemui.statusbar.phone.NavigationBarView: void updatePanelSystemUiStateFlags()>
<com.android.location.provider.ProviderPropertiesUnbundled: com.android.internal.location.ProviderProperties getProviderProperties()>
<com.android.server.AppStateTracker.Listener: void updateJobsForUid(int,boolean)>
<android.net.wifi.WifiManager: void startLocalOnlyHotspot(android.net.wifi.WifiManager.LocalOnlyHotspotCallback,android.os.Handler)>
<com.android.soundpicker.CheckedListItem: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void startKeyguardExitAnimation(long,long)>
<com.android.keyguard.KeyguardSecurityContainer.SecurityCallback: boolean dismiss(boolean,int,boolean)>
<com.android.lock_checker.LockHook: void preLock(java.lang.Object)>
<com.android.settingslib.graph.BatteryMeterDrawableBase: void draw(android.graphics.Canvas)>
<com.android.keyguard.clock.ClockLayout: void <init>(android.content.Context)>
<com.android.systemui.statusbar.policy.MobileSignalController: void setConfiguration(com.android.systemui.statusbar.policy.NetworkControllerImpl.Config)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector descriptionStartsWith(java.lang.String)>
<com.android.systemui.shared.system.RemoteAnimationAdapterCompat: void <init>(com.android.systemui.shared.system.RemoteAnimationRunnerCompat,long,long)>
<android.net.wifi.WifiManager: java.util.List getAllMatchingWifiConfigs(java.util.List)>
<com.android.systemui.screenshot.ActionProxyReceiver: void <init>(java.util.Optional,com.android.systemui.shared.system.ActivityManagerWrapper,com.android.systemui.screenshot.ScreenshotSmartActions)>
<com.android.systemui.pip.phone.PipMediaController: void <init>(android.content.Context,android.app.IActivityManager,com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getInstallLocation()>
<com.android.systemui.pip.PipTaskOrganizer: void applyFinishBoundsResize(android.window.WindowContainerTransaction,int)>
<com.android.systemui.qs.tiles.DndTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.BooleanState,java.lang.Object)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.RectF,android.graphics.RectF)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeEnablerManager: boolean onPreferenceChange(androidx.preference.Preference,java.lang.Object)>
<com.android.systemui.shared.plugins.PluginManager: java.lang.String[] getWhitelistedPlugins()>
<javax.microedition.khronos.opengles.GL10: void glLoadMatrixx(java.nio.IntBuffer)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceProvisioningConfigApplied()>
<com.android.server.pm.PackageDexOptimizer.ForcedUpdatePackageDexOptimizer: int adjustDexoptNeeded(int)>
<com.android.carrierdefaultapp.ProvisionObserver: boolean isDeferredForProvision(android.content.Context,android.content.Intent)>
<com.android.systemui.statusbar.notification.row.NotificationBlockingHelperManager: boolean isNonblockable(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setCurrentView(android.view.View)>
<com.android.systemui.statusbar.phone.StatusBar: void cancelPreloadRecentApps()>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean handleActiveSource(com.android.server.hdmi.HdmiCecMessage)>
<com.android.systemui.qs.carrier.QSCarrierGroupController: void setListening(boolean)>
<com.android.server.autofill.RemoteFillService.FillServiceCallbacks: void onSaveRequestSuccess(java.lang.String,android.content.IntentSender)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: void connectProfile(com.android.settingslib.bluetooth.LocalBluetoothProfile)>
<com.android.systemui.ForegroundServiceLifetimeExtender: boolean shouldExtendLifetime(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.doze.DozeService: void onDreamingStopped()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: void setIsChildInGroup(boolean)>
<com.android.systemui.statusbar.notification.NotificationEntryListener: void onPreEntryUpdated(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.settings.BrightnessDialog: void onStop()>
<com.android.server.NsdService.DaemonConnection: void stop()>
<com.android.systemui.classifier.SpeedClassifier: float getFalseTouchEvaluation(int,com.android.systemui.classifier.Stroke)>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: void addUserChangedListener(com.android.systemui.statusbar.NotificationLockscreenUserManager.UserChangedListener)>
<com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage: java.lang.String getGrantAlias(int,int,java.lang.String)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onTimeChanged()>
<com.android.server.integrity.model.BitOutputStream: void setNext()>
<android.database.CursorWindowPerfTest: void teardown()>
<com.android.systemui.statusbar.notification.collection.inflation.NotificationRowBinderImpl: void inflateViews(com.android.systemui.statusbar.notification.collection.NotificationEntry,java.lang.Runnable,com.android.systemui.statusbar.notification.row.NotificationRowContentBinder.InflationCallback)>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isDozingAndNotPulsing(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.stackdivider.ForcedResizableInfoActivity: boolean onKeyDown(int,android.view.KeyEvent)>
<com.android.systemui.volume.SafetyWarningDialog: boolean onKeyDown(int,android.view.KeyEvent)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setGroupExpansionChanging(boolean)>
<com.android.gallery3d.common.BitmapUtils: android.graphics.Bitmap createVideoThumbnail(java.lang.String)>
<com.android.systemui.ForegroundServicesDialog: void onClick(android.content.DialogInterface,int)>
<android.net.ConnectivityModuleConnector: android.net.ConnectivityModuleConnector getInstance()>
<com.android.server.usb.descriptors.UsbASFormat: int[] getBitDepths()>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.policy.UserInfoController provideUserInfoContrller(com.android.systemui.statusbar.policy.UserInfoControllerImpl)>
<com.android.server.biometrics.BiometricServiceBase.AuthenticationClientImpl: int handleFailedAttempt()>
<android.net.wifi.p2p.WifiP2pConfig: void <init>(java.lang.String)>
<com.android.systemui.shared.system.QuickStepContract: boolean isBackGestureDisabled(int)>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: java.lang.String getOverlayCategory()>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: int indexOf(java.lang.Object)>
<android.media.Controller2Link: boolean equals(java.lang.Object)>
<com.android.server.usb.descriptors.UsbVCInterface: void <init>(int,byte,byte)>
<com.android.settingslib.wifi.AccessPointPreference: void <init>(com.android.settingslib.wifi.AccessPoint,android.content.Context,com.android.settingslib.wifi.AccessPointPreference.UserBadgeCache,boolean)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void startKeyguardExitAnimation(long,long)>
<com.android.systemui.statusbar.FlingAnimationUtils: void <init>(android.util.DisplayMetrics,float,float,float,float)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isAboveShelf()>
<com.android.server.usb.descriptors.UsbConfigDescriptor: int getAttribs()>
<com.android.lock_checker.LockHook.LockChecker: void dump(java.io.PrintWriter)>
<com.android.server.print.PrintManagerService: void <init>(android.content.Context)>
<android.net.wifi.WifiManager.LocalOnlyHotspotObserver: void onStopped()>
<com.android.systemui.statusbar.phone.DozeServiceHost: void setDozeScreenBrightness(int)>
<com.android.systemui.statusbar.StatusBarWifiView: void getDrawingRect(android.graphics.Rect)>
<com.android.systemui.dagger.DependencyProvider: com.android.systemui.broadcast.BroadcastDispatcher providesBroadcastDispatcher(android.content.Context,android.os.Looper,java.util.concurrent.Executor,com.android.systemui.dump.DumpManager,com.android.systemui.broadcast.logging.BroadcastDispatcherLogger)>
<com.android.systemui.statusbar.phone.PanelViewController: boolean onMiddleClicked()>
<com.android.systemui.statusbar.notification.row.FooterView: void showHistory(boolean)>
<com.android.systemui.statusbar.phone.StatusBar: void clearNotificationEffects()>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo: int getActualHeight()>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcherScrim: void setColorFilter(android.graphics.ColorFilter)>
<com.android.server.tv.UinputBridge: com.android.server.tv.UinputBridge openGamepad(android.os.IBinder,java.lang.String)>
<android.os.StatsFrameworkInitializer: android.os.StatsServiceManager getStatsServiceManager()>
<com.android.server.pm.UserTypeFactory: android.util.ArrayMap getUserTypes()>
<com.android.server.pm.PackageAbiHelper: com.android.server.pm.PackageAbiHelper.NativeLibraryPaths getNativeLibraryPaths(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.io.File)>
<com.android.server.display.color.ColorDisplayService: void onSwitchUser(int)>
<com.google.android.startop.iorap.PackageEvent: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.screenshot.ScreenshotSelectorView: void draw(android.graphics.Canvas)>
<com.android.server.appop.AppOpsService: java.util.List extractAsyncOps(java.lang.String)>
<android.util.StatsEvent.Builder: android.util.StatsEvent.Builder usePooledBuffer()>
<javax.microedition.khronos.opengles.GL11: void glBufferSubData(int,int,int,java.nio.Buffer)>
<com.android.systemui.wm.DisplayController.OnDisplaysChangedListener: void onFixedRotationFinished(int)>
<com.android.systemui.statusbar.StatusBarMobileView: void setStaticDrawableColor(int)>
<com.android.server.pm.parsing.pkg.PackageImpl: android.content.pm.parsing.ParsingPackage forTesting(java.lang.String,java.lang.String)>
<com.android.systemui.classifier.Stroke: float getTotalLength()>
<com.android.systemui.statusbar.policy.UserSwitcherController: void removeUserId(int)>
<com.android.settingslib.core.instrumentation.EventLogWriter: void hidden(android.content.Context,int,int)>
<com.android.settingslib.net.NetworkCycleDataLoader: void onStartLoading()>
<com.android.systemui.qs.QSFragment: void animateHeaderSlidingOut()>
<com.android.server.appprediction.RemoteAppPredictionService: void handleOnConnectedStateChanged(boolean)>
<com.android.printservice.recommendation.plugin.hp.MDnsUtils: java.lang.String getVendor(android.net.nsd.NsdServiceInfo)>
<com.android.settingslib.location.InjectedSetting.Builder: com.android.settingslib.location.InjectedSetting build()>
<com.android.systemui.statusbar.policy.KeyguardStateController: void notifyKeyguardFadingAway(long,long,boolean)>
<android.net.NetworkStackClient: void init()>
<com.android.wallpapercropper.WallpaperCropActivity.BitmapCropTask: void <init>(android.content.Context,java.lang.String,android.graphics.RectF,int,int,int,boolean,boolean,java.lang.Runnable)>
<com.android.localtransport.LocalTransport: void cancelFullBackup()>
<com.android.systemui.qs.tiles.DndTile: boolean isAvailable()>
<com.android.systemui.statusbar.AlertingNotificationManager: boolean canRemoveImmediately(java.lang.String)>
<com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl: com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl.QualifiedTelephonyTimeZoneSuggestion findBestTelephonySuggestionForTests()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: android.service.notification.NotificationListenerService.Ranking getRanking()>
<com.android.systemui.plugins.ClockPlugin: void onTimeZoneChanged(java.util.TimeZone)>
<com.android.systemui.qs.customize.QSCustomizer: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: int getPinnedHeadsUpHeight()>
<com.android.server.pm.dex.DexManager: com.android.server.pm.dex.DexManager.RegisterDexModuleResult registerDexModule(android.content.pm.ApplicationInfo,java.lang.String,boolean,int)>
<com.android.systemui.classifier.FalsingManagerFake: void onScreenOff()>
<com.android.systemui.statusbar.notification.row.ExpandableView: com.android.systemui.statusbar.StatusBarIconView getShelfIcon()>
<com.android.systemui.statusbar.phone.NotificationsQuickSettingsContainer: void onFinishInflate()>
<com.android.server.infra.SecureSettingsServiceNameResolver: void <init>(android.content.Context,java.lang.String)>
<com.android.systemui.qs.NonInterceptingScrollView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.net.wifi.WifiConfiguration: android.net.MacAddress getRandomizedMacAddress()>
<com.android.server.accessibility.SystemActionPerformer: void unregisterSystemAction(int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: com.android.systemui.statusbar.phone.KeyguardBottomAreaView getKeyguardBottomAreaView()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setExpandedInflatedSmartReplies(com.android.systemui.statusbar.policy.InflatedSmartReplies)>
<com.android.shell.BugreportProgressService: int onStartCommand(android.content.Intent,int,int)>
<com.android.systemui.statusbar.phone.ObservableScrollView: boolean overScrollBy(int,int,int,int,int,int,int,int,boolean)>
<com.android.systemui.statusbar.phone.ReverseLinearLayout: void addView(android.view.View,android.view.ViewGroup.LayoutParams)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void onFinishedGoingToSleep()>
<com.android.systemui.statusbar.phone.LockscreenWallpaper.WallpaperDrawable: com.android.systemui.statusbar.phone.LockscreenWallpaper.WallpaperDrawable.ConstantState getConstantState()>
<com.android.server.pm.permission.PermissionSettings: void writePermissions(org.xmlpull.v1.XmlSerializer)>
<com.android.systemui.statusbar.phone.HeadsUpTouchHelper: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.packageinstaller.television.UninstallAppProgressFragment: void onClick(android.view.View)>
<com.android.systemui.SwipeHelper: void invalidateGlobalRegion(android.view.View,android.graphics.RectF)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean isNavBarVisible()>
<com.android.server.appop.AppOpsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.pm.SettingBase: void copyFrom(com.android.server.pm.SettingBase)>
<com.android.systemui.shared.system.TaskStackChangeListener: void onActivityRequestedOrientationChanged(int,int)>
<com.android.settingslib.net.NetworkStatsSummaryLoader.Builder: com.android.settingslib.net.NetworkStatsSummaryLoader build()>
<com.android.server.timedetector.TimeDetectorStrategyImpl: android.app.timedetector.NetworkTimeSuggestion getLatestNetworkSuggestion()>
<com.android.settingslib.core.lifecycle.ObservableActivity: void onStart()>
<android.os.IStatsManagerService: void unregisterPullAtomCallback(int)>
<com.android.gallery3d.exif.ExifInterface: int setTagDefinition(short,int,short,short,int[])>
<com.android.server.biometrics.Utils: boolean isCredentialRequested(int)>
<com.android.systemui.statusbar.notification.DynamicPrivacyController: void onKeyguardFadingAwayChanged()>
<com.android.server.biometrics.ClientMonitor: boolean onAcquired(int,int)>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalRxSuccess()>
<com.android.systemui.plugins.qs.QSTileView: android.view.View getIconWithBackground()>
<com.android.settingslib.bluetooth.LocalBluetoothProfile: int getNameResource(android.bluetooth.BluetoothDevice)>
<com.android.packageinstaller.InstallFailed: void onCreate(android.os.Bundle)>
<com.android.settingslib.Utils: boolean isStorageManagerEnabled(android.content.Context)>
<com.android.systemui.tuner.TunerService: void showResetRequest(android.content.Context,java.lang.Runnable)>
<android.content.pm.PackageManagerInternal: java.lang.String getInstantAppPackageName(int)>
<com.android.settingslib.bluetooth.PbapServerProfile: int getNameResource(android.bluetooth.BluetoothDevice)>
<com.android.systemui.qs.QSFooter: int getHeight()>
<com.android.systemui.tuner.TunerZenModePanel: void init(com.android.systemui.statusbar.policy.ZenModeController)>
<com.android.settingslib.deviceinfo.AbstractIpAddressPreferenceController: java.lang.String getPreferenceKey()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: float getOverExpansionAmount()>
<com.android.systemui.globalactions.GlobalActionsItem: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.policy.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int)>
<com.android.systemui.statusbar.policy.SensorPrivacyControllerImpl: void removeCallback(android.hardware.SensorPrivacyManager.OnSensorPrivacyChangedListener)>
<com.android.systemui.qs.QSAnimator: void onViewAttachedToWindow(android.view.View)>
<com.android.systemui.statusbar.phone.StatusBar: com.android.systemui.statusbar.phone.KeyguardBottomAreaView getKeyguardBottomAreaView()>
<com.android.server.biometrics.ClientMonitor: android.content.Context getContext()>
<com.android.systemui.shared.system.SystemGestureExclusionListenerCompat: void unregister()>
<com.android.keyguard.KeyguardHostView: void showPrimarySecurityScreen()>
<com.android.systemui.qs.AlphaControlledSignalTileView: void <init>(android.content.Context)>
<com.android.settingslib.drawable.UserIconDrawable: com.android.settingslib.drawable.UserIconDrawable setIcon(android.graphics.Bitmap)>
<android.net.wifi.hotspot2.pps.UpdateParameter: void setCaCertificate(java.security.cert.X509Certificate)>
<com.android.systemui.statusbar.AlertingNotificationManager: void addAlertEntry(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.input.InputManagerService: void vibrate(int,long[],int,android.os.IBinder)>
<android.os.UserManagerInternal: void setUserManaged(int,boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getOrganizationColorForUser(int)>
<com.android.server.audio.AudioService: int getRingerModeInternal()>
<android.net.wifi.aware.WifiAwareAgentNetworkSpecifier: java.lang.String toString()>
<com.android.systemui.plugins.VolumeDialogController.Callbacks: void onAccessibilityModeChanged(java.lang.Boolean)>
<com.android.server.security.VerityUtils.SetupResult: boolean isFailed()>
<com.android.server.timedetector.TimeDetectorStrategy.Callback: void releaseWakeLock()>
<com.android.server.slice.SliceProviderPermissions: com.android.server.slice.SliceProviderPermissions.SliceAuthority getOrCreateAuthority(java.lang.String)>
<com.android.systemui.car.hvac.TemperatureTextView: void setTemp(float)>
<com.android.systemui.globalactions.GlobalActionsDialog.Action: int getMessageResId()>
<com.android.settingslib.bluetooth.HidDeviceProfile: int getProfileId()>
<com.android.systemui.statusbar.phone.StatusBar: void onRecentsAnimationStateChanged(boolean)>
<javax.microedition.khronos.opengles.GL11: void glDeleteBuffers(int,int[],int)>
<com.android.server.policy.IconUtilities: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.NotificationEntryListener: void onEntryInflated(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.settingslib.wifi.AccessPointPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.MultiListLayout: android.view.ViewGroup getSeparatedView()>
<com.android.systemui.statusbar.phone.DemoStatusIcons: void <init>(android.widget.LinearLayout,int)>
<com.android.systemui.qs.tileimpl.SlashImageView: void setAnimationEnabled(boolean)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: boolean isPulsing()>
<com.android.systemui.util.sensors.ProximitySensor: void resume()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: boolean glIsFramebufferOES(int)>
<com.android.server.people.PeopleService: void onUserStopping(com.android.server.SystemService.TargetUser)>
<com.android.settingslib.drawer.SwitchController: void notifyCheckedChanged(android.content.Context)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLength(android.content.ComponentName,int,boolean)>
<android.net.wifi.WifiManager: android.net.wifi.WifiManager.WifiLock createWifiLock(java.lang.String)>
<com.android.systemui.statusbar.notification.row.AppOpsInfo: boolean willBeRemoved()>
<com.android.settingslib.schedulesprovider.ScheduleInfo: android.app.PendingIntent getPendingIntent()>
<com.android.systemui.analytics.SensorLoggerSession: void end(long,int)>
<com.android.systemui.qs.QuickStatusBarHeader: void onRtlPropertiesChanged(int)>
<com.android.server.statusbar.StatusBarManagerInternal: void toggleSplitScreen()>
<com.android.server.usb.descriptors.UsbASFormat: byte getFormatType()>
<android.database.TableHelper: java.lang.Object[] createItem(int)>
<com.android.systemui.pip.PipTaskOrganizer.PipTransitionCallback: void onPipTransitionStarted(android.content.ComponentName,int)>
<javax.microedition.khronos.egl.EGL10: boolean eglCopyBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,java.lang.Object)>
<com.android.server.UiThread: android.os.Handler getHandler()>
<android.net.wifi.WifiEnterpriseConfig: void setCaCertificate(java.security.cert.X509Certificate)>
<com.android.systemui.shared.recents.view.RecentsTransition: android.app.ActivityOptions createAspectScaleAnimation(android.content.Context,android.os.Handler,boolean,com.android.systemui.shared.recents.view.AppTransitionAnimationSpecsFuture,java.lang.Runnable)>
<com.android.systemui.statusbar.phone.StatusBar: void animateExpandNotificationsPanel()>
<com.android.systemui.util.wakelock.WakeLock: com.android.systemui.util.wakelock.WakeLock createPartial(android.content.Context,java.lang.String)>
<com.android.systemui.qs.tiles.HotspotTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.BooleanState,java.lang.Object)>
<com.android.systemui.shared.system.QuickStepContract: boolean isLegacyMode(int)>
<com.android.server.biometrics.BiometricServiceBase: int getLockoutMode()>
<com.android.systemui.statusbar.phone.ScrimController: void doOnTheNextFrame(java.lang.Runnable)>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper.Callback: float getMaxTranslationDistance()>
<com.android.server.audio.AudioService.VolumeController: void setController(android.media.IVolumeController)>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void <init>(com.android.systemui.statusbar.policy.AccessibilityManagerWrapper,com.android.systemui.statusbar.policy.DeviceProvisionedController,com.android.internal.logging.MetricsLogger,com.android.systemui.assist.AssistManager,com.android.systemui.recents.OverviewProxyService,com.android.systemui.statusbar.phone.NavigationModeController,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.model.SysUiState,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.statusbar.CommandQueue,com.android.systemui.stackdivider.Divider,java.util.Optional,dagger.Lazy,com.android.systemui.statusbar.phone.ShadeController,com.android.systemui.statusbar.NotificationRemoteInputManager,com.android.systemui.accessibility.SystemActions,android.os.Handler,com.android.internal.logging.UiEventLogger)>
<com.android.systemui.statusbar.phone.ScrimController.Callback: void onStart()>
<com.android.server.appop.AppOpsService: void resetAllModes(int,java.lang.String)>
<android.processor.view.inspector.InspectableClassModel.Property: java.util.List getIntFlagEntries()>
<com.android.settingslib.widget.settingsspinner.SettingsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int,int,int)>
<com.android.systemui.statusbar.policy.ZenModeController.Callback: void onConfigChanged(android.service.notification.ZenModeConfig)>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: int describeContents()>
<com.android.settingslib.RestrictedSwitchPreference: void onAttachedToHierarchy(androidx.preference.PreferenceManager)>
<com.android.systemui.statusbar.policy.ExtensionController.Extension: android.content.Context getContext()>
<com.android.systemui.doze.DozeFalsingManagerAdapter: void <init>(com.android.systemui.plugins.FalsingManager)>
<com.android.systemui.util.concurrency.ConcurrencyModule: java.util.concurrent.Executor provideUiBackgroundExecutor()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setPulsing(boolean)>
<com.android.server.usb.descriptors.Usb20ASFormatIII: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<android.net.wifi.p2p.WifiP2pGroupList: int describeContents()>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean isTransparent()>
<com.android.systemui.wm.DisplayController: void addDisplayChangingController(com.android.systemui.wm.DisplayChangeController.OnDisplayChangingListener)>
<android.net.wifi.WifiScanner: void stopTrackingBssids(android.net.wifi.WifiScanner.BssidListener)>
<com.android.systemui.statusbar.notification.stack.AmbientState: int getIntrinsicPadding()>
<javax.obex.ServerOperation: void noBodyHeader()>
<com.android.settingslib.media.MediaManager: void dispatchDataChanged()>
<com.android.uiautomator.core.UiDevice: boolean pressBack()>
<com.android.gallery3d.exif.ExifTag: boolean setTimeValue(long)>
<android.view.autofill.AbstractAutofillPerfTestCase: void setService()>
<com.android.settingslib.drawable.UserIconDrawable: void setFrameColor(int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean isQsDetailShowing()>
<com.android.networkstack.tethering.UpstreamNetworkState: java.lang.String toString()>
<android.net.ITetheringEventCallback: void onConfigurationChanged(android.net.TetheringConfigurationParcel)>
<com.android.systemui.qs.tileimpl.QSTileImpl: com.android.systemui.qs.QSHost getHost()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetRenderbufferParameterivOES(int,int,int[],int)>
<android.database.TableHelper: java.lang.String readSql()>
<com.android.keyguard.KeyguardUpdateMonitor.StrongAuthTracker: boolean hasUserAuthenticatedSinceBoot()>
<com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper: boolean swipedFarEnough(float,float)>
<android.net.wifi.WifiNetworkSuggestion: boolean isUserInteractionRequired()>
<com.android.keyguard.AlphaOptimizedLinearLayout: void <init>(android.content.Context)>
<com.android.systemui.bubbles.BubbleOverflow: void setContentVisibility(boolean)>
<com.android.systemui.bubbles.BubbleViewProvider: android.graphics.Bitmap getBadgedImage()>
<com.android.server.timezonedetector.ReferenceWithHistory: java.lang.String toString()>
<com.android.systemui.classifier.EndPointLengthEvaluator: float evaluate(float)>
<com.android.server.infra.AbstractPerUserSystemService: boolean isDisabledByUserRestrictionsLocked()>
<com.android.server.SystemService: void dumpSupportedUsers(java.io.PrintWriter,java.lang.String)>
<com.android.settingslib.development.SystemPropPoker: void unblockPokes()>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void setUseOpenWifiAppPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.PackagesProvider)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setClipToActualHeight(boolean)>
<com.android.printspooler.ui.SelectPrinterActivity: void onPause()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: boolean getAbleToShare()>
<com.android.server.pm.PackageManagerService: boolean isPackageDeviceAdminOnAnyUser(java.lang.String)>
<com.android.egg.neko.Cat: long getSeed()>
<com.android.server.display.BrightnessTracker: void notifyBrightnessChanged(float,boolean,float,boolean,boolean)>
<com.android.systemui.qs.QSAnimator: void setHost(com.android.systemui.qs.QSTileHost)>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void removeNotificationEntryListener(com.android.systemui.statusbar.notification.NotificationEntryListener)>
<android.app.OverlayManagerPerfTest: void getStringOneLargeOverlay()>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.MenuItem getAppOpsMenuItem(android.content.Context)>
<com.android.systemui.pip.PipUiEventLogger: void log(com.android.systemui.pip.PipUiEventLogger.PipUiEventEnum)>
<com.android.systemui.qs.QSDetailClipper: void animateCircularClip(int,int,boolean,android.animation.Animator.AnimatorListener)>
<com.android.server.locksettings.PasswordSlotManager: void saveSlotMap(java.io.OutputStream)>
<com.android.server.audio.AudioService: android.media.IRingtonePlayer getRingtonePlayer()>
<com.android.server.pm.PackageInstallerSession: void removeFile(int,java.lang.String)>
<android.net.wifi.p2p.WifiP2pDeviceList: boolean clear()>
<com.android.systemui.pip.tv.PipMenuActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.power.EnhancedEstimatesImpl: com.android.settingslib.fuelgauge.Estimate getEstimate()>
<android.net.wifi.WifiManager.WifiConnectedNetworkScorer: void onStart(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onDynamicPrivacyChanged()>
<javax.obex.ObexPacket: javax.obex.ObexPacket read(java.io.InputStream)>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void setActualLayoutWidth(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: com.android.systemui.statusbar.notification.stack.ExpandableViewState createExpandableViewState()>
<com.android.server.timezone.PackageManagerHelper: boolean usesPermission(java.lang.String,java.lang.String)>
<com.android.server.people.prediction.AppTargetPredictor: void onSortAppTargets(java.util.List,java.util.function.Consumer)>
<android.text.StaticLayoutPerfTest: void testDraw_PrecomputedText_Styled_WithoutCache()>
<com.android.systemui.statusbar.phone.NavigationBarFragment: com.android.systemui.statusbar.phone.NavigationBarTransitions getBarTransitions()>
<com.android.server.biometrics.iris.IrisAuthenticator: void cancelAuthenticationFromService(android.os.IBinder,java.lang.String,int,int,int,boolean)>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isHideSensitive()>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy.MobileIconState: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder: com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder onDismissRunnable(java.lang.Runnable)>
<com.android.systemui.qs.QSTileHost: void collapsePanels()>
<com.android.server.accessibility.SystemActionPerformer: void <init>(android.content.Context,com.android.server.wm.WindowManagerInternal)>
<com.android.server.display.BrightnessMappingStrategy: long getShortTermModelTimeout()>
<com.android.systemui.statusbar.phone.PanelViewController: void fling(float,boolean,boolean)>
<android.net.ip.IpServer.Dependencies: void makeDhcpServer(java.lang.String,android.net.dhcp.DhcpServingParamsParcel,android.net.dhcp.DhcpServerCallbacks)>
<android.net.wifi.WifiManager.ScoreUpdateObserver: void triggerUpdateOfWifiUsabilityStats(int)>
<com.android.server.infra.AbstractMasterSystemService: void dumpLocked(java.lang.String,java.io.PrintWriter)>
<com.android.systemui.keyguard.KeyguardViewMediator: boolean isSecure()>
<com.android.systemui.statusbar.phone.ScrimController: void onScreenTurnedOff()>
<com.android.systemui.bubbles.BubbleController: void setExpandListener(com.android.systemui.bubbles.BubbleController.BubbleExpandListener)>
<com.android.systemui.pip.phone.PipMenuActivityController: void hideMenuWithoutResize()>
<com.android.settingslib.bluetooth.LocalBluetoothManager: com.android.settingslib.bluetooth.LocalBluetoothManager getInstance(android.content.Context,com.android.settingslib.bluetooth.LocalBluetoothManager.BluetoothManagerCallback)>
<com.android.uiautomator.core.UiObject: java.lang.String getContentDescription()>
<android.text.TextViewSetTextMeasurePerfTest: void <init>(java.lang.String,int,android.text.NonEditableTextGenerator.TextType,boolean)>
<android.media.Controller2Link: void writeToParcel(android.os.Parcel,int)>
<com.android.printservice.recommendation.util.Preconditions: long checkArgumentInRange(long,long,long,java.lang.String)>
<android.app.StatsManager: boolean setDataFetchOperation(long,android.app.PendingIntent)>
<com.android.systemui.statusbar.notification.MessagingImageTransformState: void resetTransformedView()>
<com.android.server.trust.TrustManagerService: void unlockUserWithToken(long,byte[],int)>
<com.android.systemui.assist.ui.DefaultUiController: void hide()>
<com.android.systemui.statusbar.notification.row.ExpandableView: int getActualHeight()>
<com.android.uiautomator.core.UiScrollable: com.android.uiautomator.core.UiScrollable setSwipeDeadZonePercentage(double)>
<android.net.wifi.p2p.WifiP2pManager: void requestDeviceInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DeviceInfoListener)>
<com.android.server.SystemServiceManager: void startBootPhase(com.android.server.utils.TimingsTraceAndSlog,int)>
<com.android.uiautomator.core.UiDevice: int getDisplayRotation()>
<com.android.server.locksettings.SyntheticPasswordManager: boolean hasSidForUser(int)>
<com.android.server.appop.AppOpsService: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>
<android.net.wifi.WifiScanner: void startTrackingWifiChange(android.net.wifi.WifiScanner.WifiChangeListener)>
<com.android.server.people.data.DataManager: java.util.List queryAppMovingToForegroundEvents(int,long,long)>
<com.google.android.startop.iorap.RequestId: com.google.android.startop.iorap.RequestId nextValueForSequence()>
<com.android.systemui.statusbar.phone.PanelViewController: float getPeekHeight()>
<com.android.printspooler.model.PrintSpoolerService: void updatePrintJobUserConfigurableOptionsNoPersistence(android.print.PrintJobInfo)>
<javax.microedition.khronos.opengles.GL11: void glGetTexEnvxv(int,int,java.nio.IntBuffer)>
<com.android.systemui.PluginInflateContainer: void onPluginConnected(com.android.systemui.plugins.ViewProvider,android.content.Context)>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifCollectionListener: void onRankingApplied()>
<android.net.wifi.ScanResult: java.util.List getInformationElements()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setTranslationY(float)>
<android.net.wifi.SoftApInfo: java.lang.String toString()>
<com.android.server.slice.SlicePermissionManager: boolean hasPermission(java.lang.String,int,android.net.Uri)>
<com.android.settingslib.bluetooth.CachedBluetoothDeviceManager: java.lang.String getName(android.bluetooth.BluetoothDevice)>
<com.android.server.trust.TrustAgentWrapper: long getScheduledRestartUptimeMillis()>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: android.app.AppOpsManager getAppOpsManager()>
<com.android.systemui.statusbar.notification.collection.NotifPipeline: void setComparators(java.util.List)>
<com.android.systemui.statusbar.phone.ShadeControllerImpl: void animateCollapsePanels(int,boolean,boolean,float)>
<com.android.systemui.pip.PipBoundsHandler: int getDisplayRotation()>
<com.android.commands.dpm.Dpm: void onShowUsage(java.io.PrintStream)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: int getOriginalIconColor()>
<com.android.systemui.car.keyguard.CarKeyguardViewController: boolean shouldShowNavigationBarInsets()>
<com.android.systemui.egg.MLand: void removePlayer()>
<com.android.server.testing.shadows.ShadowPerformUnifiedRestoreTask: void __constructor__(com.android.server.backup.UserBackupManagerService,com.android.server.backup.transport.TransportClient,android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor,long,android.content.pm.PackageInfo,int,boolean,java.lang.String[],com.android.server.backup.internal.OnTaskFinishedListener)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: boolean setBottomRoundness(float,boolean)>
<com.android.systemui.statusbar.policy.ZenModeController: void setZen(int,android.net.Uri,java.lang.String)>
<com.android.packageinstaller.wear.InstallTask: void execute()>
<com.android.systemui.statusbar.phone.StatusIconContainer: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.textservices.TextServicesManagerService.Lifecycle: void onStopUser(int)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: java.lang.String getConnectionSummary(boolean)>
<com.android.systemui.statusbar.ScreenRecordDrawable: void draw(android.graphics.Canvas)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setLongPressListener(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow.LongPressListener)>
<com.android.systemui.volume.VolumeDialogImpl: void initRingerH()>
<com.android.systemui.qs.tiles.NightDisplayTile: void handleSetListening(boolean)>
<com.android.settingslib.volume.MediaSessions: void postUpdateSessions()>
<com.android.server.autofill.AutofillManagerService: com.android.server.autofill.AutofillManagerServiceImpl newServiceLocked(int,boolean)>
<com.android.server.devicepolicy.CertificateMonitor: java.lang.String installCaCert(android.os.UserHandle,byte[])>
<android.net.wifi.hotspot2.PasspointConfiguration: android.net.wifi.hotspot2.pps.HomeSp getHomeSp()>
<com.android.systemui.statusbar.phone.DozeScrimController: void setDozing(boolean)>
<android.net.wifi.aware.WifiAwareAgentNetworkSpecifier: boolean satisfiesAwareNetworkSpecifier(android.net.wifi.aware.WifiAwareNetworkSpecifier)>
<com.android.server.AppStateTracker.Listener: void unblockAlarmsForUid(int)>
<com.android.settingslib.wifi.LongPressWifiEntryPreference: void onBindViewHolder(androidx.preference.PreferenceViewHolder)>
<com.android.systemui.statusbar.notification.collection.coordinator.NotifCoordinators: void attach(com.android.systemui.statusbar.notification.collection.NotifPipeline)>
<com.android.settingslib.graph.SignalDrawable: void onBoundsChange(android.graphics.Rect)>
<com.android.systemui.statusbar.phone.SettingsButton: void startAccelSpin()>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean checkSupportAndSetSystemAudioMode(boolean)>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger.EditorLogger: android.content.SharedPreferences.Editor putStringSet(java.lang.String,java.util.Set)>
<com.android.systemui.usb.UsbPermissionActivity: void onCreate(android.os.Bundle)>
<android.net.TetheringManager.TetheringEventCallback: void onTetherableInterfacesChanged(java.util.List)>
<com.android.systemui.stackdivider.Divider: boolean isDividerVisible()>
<com.android.systemui.egg.MLand: void <init>(android.content.Context,android.util.AttributeSet)>
<com.google.android.startop.iorap.ActivityHintEvent: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.stackdivider.DividerView: void stopDragging(int,com.android.internal.policy.DividerSnapAlgorithm.SnapTarget,long,android.view.animation.Interpolator)>
<com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.InstrumentationInfo generateInstrumentationInfo(android.content.pm.parsing.component.ParsedInstrumentation,com.android.server.pm.parsing.pkg.AndroidPackage,int,int,com.android.server.pm.PackageSetting)>
<com.android.systemui.statusbar.phone.LockscreenWallpaper: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.media.MediaController2.Builder: android.media.MediaController2 build()>
<com.android.systemui.shared.system.TaskStackChangeListener: void onActivityUnpinned()>
<com.android.systemui.keyguard.KeyguardViewMediator: void setSwitchingUser(boolean)>
<com.android.server.policy.BurnInProtectionHelper: void <init>(android.content.Context,int,int,int,int,int)>
<com.android.server.biometrics.ClientMonitor: long getHalDeviceId()>
<com.android.server.NetworkScoreService.ScoringServiceConnection: void bind(android.content.Context)>
<com.android.systemui.statusbar.phone.NavigationBarEdgePanel: void <init>(android.content.Context)>
<com.android.systemui.car.bluetooth.CarBatteryController: boolean isPowerSave()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setStatusBarDisabled(android.content.ComponentName,boolean)>
<com.android.systemui.shared.system.RemoteAnimationTargetCompat: void release()>
<com.android.soundpicker.CheckedListItem: void toggle()>
<com.android.server.media.MediaSessionRecord: java.lang.String toString()>
<com.android.systemui.statusbar.notification.row.NotificationContentInflater.AsyncInflationTask: void onPostExecute(com.android.systemui.statusbar.notification.row.NotificationContentInflater.InflationProgress)>
<com.android.photos.BitmapRegionTileSource: int getRotation()>
<com.android.systemui.BatteryMeterView: void onDetachedFromWindow()>
<com.android.systemui.keyguard.KeyguardViewMediator: boolean isInputRestricted()>
<com.android.systemui.assist.AssistOrbView: void onDraw(android.graphics.Canvas)>
<com.google.android.startop.iorap.IorapForwardingService: void <init>(android.content.Context)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: void addUserChangedListener(com.android.systemui.statusbar.NotificationLockscreenUserManager.UserChangedListener)>
<com.android.settingslib.location.SettingsInjector: void <init>(android.content.Context)>
<com.android.systemui.power.PowerUI.WarningsUI: void showInvalidChargerWarning()>
<com.android.systemui.biometrics.AuthController: void onBiometricHelp(java.lang.String)>
<com.android.keyguard.KeyguardSecurityContainer: int getLayoutIdFor(com.android.keyguard.KeyguardSecurityModel.SecurityMode)>
<com.android.server.pm.permission.PermissionManagerService: boolean removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int,int)>
<com.android.server.pm.ShortcutService: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void setClipBottomAmount(int)>
<com.android.systemui.qs.tiles.CellularTile: android.content.Intent getLongClickIntent()>
<com.android.systemui.globalactions.GlobalActionsFlatLayout: void removeAllListViews()>
<com.android.settingslib.bluetooth.HeadsetProfile: boolean isEnabled(android.bluetooth.BluetoothDevice)>
<com.android.server.NetworkManagementService: boolean isNetworkRestricted(int)>
<com.android.systemui.plugins.qs.QSTile.SlashState: java.lang.String toString()>
<android.net.wifi.hotspot2.pps.UpdateParameter: java.lang.String toString()>
<com.android.settingslib.fuelgauge.PowerWhitelistBackend: void addApp(java.lang.String)>
<javax.obex.PrivateOutputStream: byte[] readBytes(int)>
<com.android.systemui.ForegroundServiceLifetimeExtender: void setShouldManageLifetime(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.systemui.classifier.FalsingManagerImpl: void onTouchEvent(android.view.MotionEvent,int,int)>
<com.android.server.ConnectivityService: boolean isCallerCurrentAlwaysOnVpnApp()>
<com.android.systemui.classifier.AnglesClassifier: void onTouchEvent(android.view.MotionEvent)>
<com.android.server.tv.tunerresourcemanager.CasResource: void setOwner(int)>
<com.android.packageinstaller.wear.WearPackageIconProvider: android.net.Uri getUriForPackage(java.lang.String)>
<android.net.dhcp.DhcpServingParamsParcelExt: android.net.dhcp.DhcpServingParamsParcelExt setSingleClientAddr(java.net.Inet4Address)>
<com.android.settingslib.drawable.UserIconDrawable: void draw(android.graphics.Canvas)>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindInstantAppNotifier(com.android.systemui.statusbar.notification.InstantAppNotifier)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: int getBackgroundColor(android.view.View)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: boolean isDimmable()>
<android.net.wifi.ScanResult.RadioChainInfo: java.lang.String toString()>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void canUserAttemptToConfigureInteractAcrossProfiles_profileOwnerOutsideProfileGroup_returnsTrue()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setHeadsUpAppearanceController(com.android.systemui.statusbar.phone.HeadsUpAppearanceController)>
<com.android.powermodel.component.ModemAppActivity: com.android.powermodel.component.ModemAppPower applyProfile(com.android.powermodel.ActivityReport,com.android.powermodel.PowerProfile)>
<com.android.systemui.qs.QSDetailItems.Callback: void onDetailItemClick(com.android.systemui.qs.QSDetailItems.Item)>
<com.android.systemui.glwallpaper.GLWallpaperRenderer: void onDrawFrame()>
<android.net.wifi.WifiManager.LocalOnlyHotspotObserver: void onRegistered(android.net.wifi.WifiManager.LocalOnlyHotspotSubscription)>
<com.android.keyguard.clock.ClockOptionsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<com.android.server.accessibility.AbstractAccessibilityServiceConnection.SystemSupport: int getCurrentUserIdLocked()>
<android.net.wifi.WifiManager: boolean reconnect()>
<com.android.settingslib.wifi.WifiEntryPreference: void refresh()>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.server.autofill.ui.InlineFillUi: void disableFilterMatching()>
<com.android.networkstack.tethering.OffloadHardwareInterface: int getDefaultTetherOffloadDisabled()>
<com.android.systemui.globalactions.GlobalActionsLayout: boolean shouldReverseListItems()>
<com.android.settingslib.applications.ApplicationsState.Callbacks: void onLoadEntriesCompleted()>
<android.net.wifi.hotspot2.pps.HomeSp: void setHomeNetworkIds(java.util.Map)>
<com.android.systemui.car.volume.VolumeUI: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.qs.QSDetail: boolean isShowingDetail()>
<com.android.systemui.util.Utils.DisableStateTracker: void onViewDetachedFromWindow(android.view.View)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.appop.AppOpsService: boolean shouldCollectNotes(int)>
<com.android.server.media.MediaRoute2ProviderWatcher.Callback: void onAddProviderService(com.android.server.media.MediaRoute2ProviderServiceProxy)>
<javax.microedition.khronos.opengles.GL11: void glTexParameterfv(int,int,float[],int)>
<com.android.systemui.SysUIToast: android.widget.Toast makeText(android.content.Context,int,int)>
<android.net.wifi.rtt.ResponderLocation: android.util.SparseArray toCivicLocationSparseArray()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean flingExpands(float,float,float,float)>
<android.wm.RecentsAnimationPerfTest: void setUp()>
<android.os.UserManagerInternal: android.content.pm.UserInfo[] getUserInfos()>
<android.net.wifi.aware.IWifiAwareManager: void requestMacAddresses(int,java.util.List,android.net.wifi.aware.IWifiAwareMacAddressProvider)>
<com.android.server.testing.shadows.ShadowSlog: int e(java.lang.String,java.lang.String)>
<com.android.server.pm.PackageManagerService: void removePermission(java.lang.String)>
<com.android.server.utils.quota.CountQuotaTracker: long getWindowSizeMs(com.android.server.utils.quota.Category)>
<com.android.settingslib.bluetooth.PanProfile: int getConnectionPolicy(android.bluetooth.BluetoothDevice)>
<com.android.statementservice.DirectStatementService: void onDestroy()>
<com.android.keyguard.KeyguardSecurityViewFlipper: void setLockPatternUtils(com.android.internal.widget.LockPatternUtils)>
<com.android.server.pm.parsing.pkg.PackageImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,android.content.res.TypedArray,boolean)>
<android.wm.RecentsAnimationPerfTest: void tearDownClass()>
<android.content.pm.PackageManagerInternal: void setVisibilityLogging(java.lang.String,boolean)>
<com.android.settingslib.wifi.WifiEntryPreference: com.android.wifitrackerlib.WifiEntry getWifiEntry()>
<com.android.systemui.qs.PseudoGridView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.display.DisplayModeDirector.DesiredDisplayModeSpecs: java.lang.String toString()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean startViewCalendarEventInManagedProfile(java.lang.String,long,long,long,boolean,int)>
<com.android.systemui.statusbar.phone.LightBarTransitionsController: void onStateChanged(int)>
<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService.UserAccounts getUserAccounts(int)>
<com.android.gallery3d.common.Utils: void swap(int[],int,int)>
<com.android.uiautomator.core.UiObject: void clearTextField()>
<com.android.systemui.statusbar.KeyboardShortcutKeysLayout.LayoutParams: void <init>(int,int,android.view.ViewGroup.LayoutParams)>
<com.android.uiautomator.core.Configurator: long getWaitForSelectorTimeout()>
<com.android.server.audio.AudioEventLogger: void dump(java.io.PrintWriter)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareLogging: java.lang.String toString()>
<android.net.wifi.IWifiManager: void disableEphemeralNetwork(java.lang.String,java.lang.String)>
<com.android.systemui.qs.SignalTileView: void setIcon(com.android.systemui.plugins.qs.QSTile.State,boolean)>
<com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter.Builder: void <init>(android.content.Context,com.android.systemui.statusbar.CommandQueue,android.os.Handler,android.os.Handler,java.util.concurrent.Executor,com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.systemui.statusbar.notification.collection.NotifPipeline,com.android.systemui.statusbar.notification.collection.NotifCollection,com.android.systemui.statusbar.phone.HeadsUpManagerPhone,com.android.systemui.plugins.ActivityStarter,com.android.systemui.statusbar.NotificationClickNotifier,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager,android.app.KeyguardManager,android.service.dreams.IDreamManager,com.android.systemui.bubbles.BubbleController,dagger.Lazy,com.android.systemui.statusbar.NotificationRemoteInputManager,com.android.systemui.statusbar.phone.NotificationGroupManager,com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.statusbar.phone.ShadeController,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProvider,com.android.internal.widget.LockPatternUtils,com.android.systemui.statusbar.phone.StatusBarRemoteInputCallback,com.android.systemui.ActivityIntentHelper,com.android.systemui.statusbar.FeatureFlags,com.android.internal.logging.MetricsLogger,com.android.systemui.statusbar.phon.StatusBarNotificationActivityStarterLogger)>
<com.android.settingslib.bluetooth.PbapClientProfile: int getOrdinal()>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus.Builder: android.net.wifi.WifiConfiguration.NetworkSelectionStatus.Builder setNetworkSelectionStatus(int)>
<javax.microedition.khronos.opengles.GL10: void glCopyTexImage2D(int,int,int,int,int,int,int,int)>
<com.android.startop.colorchanging.MainActivity: void goIndigo(android.view.View)>
<com.android.systemui.plugins.VolumeDialogController.Callbacks: void onDismissRequested(int)>
<android.net.wifi.WifiInfo: void setSupplicantState(android.net.wifi.SupplicantState)>
<com.android.settingslib.CustomDialogPreferenceCompat: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.statusbar.policy.UserSwitcherController: void switchTo(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onFinishInflate()>
<com.android.server.storage.StorageSessionController: void notifyVolumeStateChanged(android.os.storage.VolumeInfo)>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isFullyHidden()>
<android.widget.EditTextLongTextPerfTest: java.util.Collection cases()>
<com.android.settingslib.bluetooth.CachedBluetoothDeviceManager: void updateHearingAidsDevices()>
<com.android.server.pm.OtaDexoptService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<com.android.server.NetworkScorerAppManager: void updateState()>
<com.android.systemui.statusbar.notification.stack.AmbientState: float getAppearFraction()>
<android.net.wifi.aware.WifiAwareAgentNetworkSpecifier: android.net.NetworkSpecifier redact()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getFullBackupContent()>
<com.android.server.NetworkManagementService: void removeInterfaceQuota(java.lang.String)>
<android.net.wifi.aware.WifiAwareSession: void finalize()>
<com.android.server.usb.UsbService: void setUsbDeviceConnectionHandler(android.content.ComponentName)>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.policy.GlobalActionsProvider: void showGlobalActions()>
<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getProfileParent(int)>
<com.android.systemui.qs.tiles.UiModeNightTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.statusbar.policy.ConfigurationController,com.android.systemui.statusbar.policy.BatteryController,com.android.systemui.statusbar.policy.LocationController)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvx(int,int,int)>
<android.net.wifi.WifiInfo: java.lang.String sanitizeSsid(java.lang.String)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setIntrinsicPadding(int)>
<com.android.systemui.BatteryMeterView: void setPercentShowMode(int)>
<com.android.server.audio.SystemServerAdapter: boolean isPrivileged()>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setExpandAnimationParams(com.android.systemui.statusbar.notification.ActivityLaunchAnimator.ExpandAnimationParameters)>
<com.android.server.trust.TrustManagerService: void onSwitchUser(int)>
<com.android.server.hdmi.HdmiControlService: void checkLogicalAddressConflictAndReallocate(int)>
<com.android.server.statusbar.StatusBarManagerService: void onBiometricError(int,int,int)>
<com.android.server.usb.descriptors.UsbACHeaderInterface: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.server.timezone.PackageTrackerIntentHelper: void sendTriggerUpdateCheck(com.android.server.timezone.CheckToken)>
<com.android.powermodel.ActivityReport.Builder: void addActivity(com.android.powermodel.Component,java.util.Collection)>
<com.android.mediadrm.signer.MediaDrmSigner.Certificate: byte[] getContent()>
<com.android.systemui.statusbar.phone.BiometricUnlockController: boolean hasScreenTurnedOnSinceAuthenticating()>
<com.android.systemui.statusbar.phone.RegionSamplingHelper: void onViewDetachedFromWindow(android.view.View)>
<com.android.server.pm.parsing.PackageParser2.Callback: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>
<com.android.systemui.settings.CurrentUserTracker: void onUserSwitched(int)>
<com.android.systemui.statusbar.notification.DynamicChildBindController: void updateContentViews(java.util.Map)>
<android.net.wifi.WifiManager: void disable(int,android.net.wifi.WifiManager.ActionListener)>
<com.android.server.usb.descriptors.Usb10ASGeneral: int getFormatTag()>
<com.android.gallery3d.exif.ExifInterface: void writeExif(android.graphics.Bitmap,java.io.OutputStream)>
<com.android.systemui.charging.WirelessChargingAnimation: com.android.systemui.charging.WirelessChargingAnimation makeWirelessChargingAnimation(android.content.Context,android.os.Looper,int,int,com.android.systemui.charging.WirelessChargingAnimation.Callback,boolean)>
<com.android.systemui.car.userswitcher.UserSwitcherContainer: boolean dispatchKeyEvent(android.view.KeyEvent)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void retainHardAndSoftRestrictedPermissions(java.util.List)>
<com.android.systemui.globalactions.GlobalActionsGridLayout: boolean shouldReverseListItems()>
<com.android.settingslib.media.MediaManager.MediaDeviceCallback: void onDeviceAdded(com.android.settingslib.media.MediaDevice)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_noPermissions_throwsSecurityException()>
<com.android.systemui.statusbar.policy.HeadsUpManager: void onAlertEntryAdded(com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry)>
<com.android.systemui.util.AutoMarqueeTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.os.PssPerfTest: void testPss()>
<com.android.server.display.color.ColorDisplayService.ColorTransformController: void applyAppSaturation(float[],float[])>
<com.android.server.stats.pull.netstats.NetworkStatsExt: void <init>(android.net.NetworkStats,int[],boolean,boolean,boolean,int,com.android.server.stats.pull.netstats.SubInfo)>
<com.android.server.usb.descriptors.tree.UsbDescriptorsConfigNode: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.systemui.biometrics.AuthBiometricFaceView.IconController: void onAnimationEnd(android.graphics.drawable.Drawable)>
<javax.microedition.khronos.opengles.GL11: void glDeleteBuffers(int,java.nio.IntBuffer)>
<com.android.systemui.statusbar.policy.FlashlightControllerImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.qs.QSContainerImpl: void setExpansion(float)>
<com.android.server.pm.ShortcutService: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>
<com.android.systemui.qs.tiles.ColorInversionTile: com.android.systemui.plugins.qs.QSTile.BooleanState newTileState()>
<com.android.systemui.util.wakelock.DelayedWakeLock.Builder: com.android.systemui.util.wakelock.DelayedWakeLock.Builder setHandler(android.os.Handler)>
<com.android.server.accessibility.KeyboardInterceptor: boolean handleMessage(android.os.Message)>
<com.android.systemui.plugins.PluginListener: void onPluginConnected(com.android.systemui.plugins.Plugin,android.content.Context)>
<javax.obex.ObexHelper: java.lang.String convertToUnicode(byte[],boolean)>
<com.android.systemui.statusbar.NotificationRemoteInputManager.Callback: boolean handleRemoteViewClick(android.view.View,android.app.PendingIntent,com.android.systemui.statusbar.NotificationRemoteInputManager.ClickHandler)>
<com.android.server.pm.PackageSetting: boolean isVendor()>
<com.android.server.media.MediaRoute2Provider.Callback: void onSessionCreated(com.android.server.media.MediaRoute2Provider,long,android.media.RoutingSessionInfo)>
<com.android.server.usb.descriptors.UsbDescriptor: void setStatus(int)>
<com.android.systemui.keyguard.KeyguardSliceProvider: void addMediaLocked(androidx.slice.builders.ListBuilder)>
<android.net.wifi.WifiManager: boolean isScanThrottleEnabled()>
<com.android.settingslib.widget.BarChartPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.shared.recents.view.RecentsTransition: android.os.IRemoteCallback wrapStartedListener(android.os.Handler,java.lang.Runnable)>
<com.android.systemui.biometrics.AuthDialog: java.lang.String getOpPackageName()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setForceDozeBrightness(boolean)>
<com.android.server.stats.StatsManagerService: void <init>(android.content.Context)>
<com.android.server.MmsServiceBroker: void systemRunning()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: boolean isMenuSnapped()>
<com.android.systemui.statusbar.policy.KeyButtonRipple: void draw(android.graphics.Canvas)>
<com.android.keyguard.KeyguardViewController: void show(android.os.Bundle)>
<com.android.systemui.tracing.ProtoTracer: void update()>
<com.android.systemui.doze.DozeMachine.Service: void requestWakeUp()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void onCameraLaunchGestureDetected(int)>
<com.android.proxyhandler.ProxyService: android.os.IBinder onBind(android.content.Intent)>
<com.android.systemui.recents.RecentsImplementation: void cancelPreloadRecentApps()>
<com.android.systemui.qs.tiles.WifiTile.WifiDetailAdapter: void onAccessPointsChanged(java.util.List)>
<com.android.server.usb.descriptors.Usb20ACOutputTerminal: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<android.net.NetworkStackClient: void dump(java.io.PrintWriter)>
<android.net.wifi.SoftApCapability: void setMaxSupportedClients(int)>
<com.android.systemui.statusbar.phone.NavigationBarView: void showPinningEnterExitToast(boolean)>
<com.android.server.biometrics.BiometricServiceBase: java.lang.String getLockoutBroadcastPermission()>
<com.android.server.display.whitebalance.DisplayWhiteBalanceSettings: void dump(java.io.PrintWriter)>
<com.android.systemui.statusbar.notification.row.NotificationRowContentBinder: void cancelBind(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.camera.CameraStatsJobService: boolean onStartJob(android.app.job.JobParameters)>
<com.android.systemui.assist.AssistManager: int toLoggingSubType(int,int)>
<com.android.egg.neko.Cat.CatParts: void <init>(android.content.Context)>
<com.android.systemui.car.window.OverlayViewGlobalStateController: void setWindowNeedsInput(boolean)>
<com.android.externalstorage.ExternalStorageProvider: int enforceReadPermissionInner(android.net.Uri,java.lang.String,java.lang.String,android.os.IBinder)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: int getEmptyShadeViewHeight()>
<com.android.systemui.statusbar.notification.stack.NotificationSection: android.graphics.Rect getBounds()>
<android.widget.EditTextCursorMovementPerfTest: void <init>(java.lang.String,java.lang.String,int)>
<com.android.systemui.statusbar.phone.DozeParameters: boolean getVibrateOnPickup()>
<com.android.server.pm.UserManagerService: android.os.Bundle getApplicationRestrictions(java.lang.String)>
<com.android.systemui.glwallpaper.GLWallpaperRenderer: void onSurfaceCreated()>
<com.android.uiautomator.core.UiDevice: void setCompressedLayoutHeirarchy(boolean)>
<com.android.systemui.stackdivider.Divider: void onDockedFirstAnimationFrame()>
<com.android.server.pm.permission.PermissionManagerService: boolean setDefaultBrowser(java.lang.String,int)>
<com.android.systemui.qs.QSDetailItems: void setItems(com.android.systemui.qs.QSDetailItems.Item[])>
<com.android.systemui.statusbar.phone.SystemUIDialog: void setShowForAllUsers(boolean)>
<com.android.systemui.qs.touch.SwipeDetector: boolean isDraggingOrSettling()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void blockExpansionForCurrentTouch()>
<android.net.wifi.ScanResult: void writeToParcel(android.os.Parcel,int)>
<com.android.server.autofill.ui.PendingUi: void <init>(android.os.IBinder,int,android.view.autofill.IAutoFillManagerClient)>
<com.android.server.utils.TimingsTraceAndSlog: void <init>(java.lang.String,long)>
<com.android.server.pm.dex.DexoptUtils: java.lang.String[] getClassLoaderContexts(com.android.server.pm.parsing.pkg.AndroidPackage,java.util.List,boolean[])>
<com.android.systemui.qs.QSFooterImpl: void setQSPanel(com.android.systemui.qs.QSPanel)>
<com.android.systemui.statusbar.phone.ReverseLinearLayout.ReverseRelativeLayout: void updateGravity(boolean)>
<android.net.ip.IpClientManager: boolean setTcpBufferSizes(java.lang.String)>
<com.android.systemui.util.io.Files: java.io.BufferedWriter newBufferedWriter(java.nio.file.Path,java.nio.file.OpenOption[])>
<com.android.server.usb.descriptors.UsbEndpointDescriptor: int getDirection()>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.util.RingerModeTracker provideRingerModeTracker(com.android.systemui.util.RingerModeTrackerImpl)>
<android.net.wifi.WifiManager.LocalOnlyHotspotCallback: void onStarted(android.net.wifi.WifiManager.LocalOnlyHotspotReservation)>
<android.util.StatsEvent.Builder: android.util.StatsEvent.Builder writeKeyValuePairs(android.util.SparseIntArray,android.util.SparseLongArray,android.util.SparseArray,android.util.SparseArray)>
<com.android.systemui.tuner.LockscreenFragment.LockButtonFactory: com.android.systemui.plugins.IntentButtonProvider.IntentButton create(java.util.Map)>
<com.android.gallery3d.common.Utils: int compare(long,long)>
<com.android.systemui.statusbar.phone.DoubleTapHelper: boolean onTouchEvent(android.view.MotionEvent,int)>
<com.android.systemui.statusbar.phone.StatusBar: int getStatusBarHeight()>
<android.net.NetworkMonitorManager: boolean notifyDnsResponse(int)>
<com.android.systemui.shared.system.ActivityManagerWrapper: com.android.systemui.shared.system.ActivityManagerWrapper getInstance()>
<com.android.server.pm.ProtectedPackages: boolean isPackageStateProtected(int,java.lang.String)>
<com.android.systemui.shared.system.WindowManagerWrapper: int getNavBarPosition(int)>
<javax.obex.ServerRequestHandler: int onGet(javax.obex.Operation)>
<android.perftests.utils.PerfTestActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.plugins.qs.QS: void setExpandClickListener(android.view.View.OnClickListener)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void cancelLongPress()>
<android.net.wifi.hotspot2.OsuProvider: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.KeyguardAffordanceView: void setPreviewView(android.view.View)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getSecondaryCpuAbi()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean isDozing()>
<com.android.server.emergency.EmergencyAffordanceService: void onStart()>
<com.android.settingslib.wifi.AccessPoint: int getSecurity()>
<com.android.keyguard.KeyguardPasswordView: void resetPasswordText(boolean,boolean)>
<com.android.systemui.statusbar.policy.FlashlightController.FlashlightListener: void onFlashlightAvailabilityChanged(boolean)>
<com.android.keyguard.EmergencyCarrierArea: void onFinishInflate()>
<com.android.server.timezonedetector.TimeZoneDetectorService: void <init>(android.content.Context,android.os.Handler,com.android.server.timezonedetector.TimeZoneDetectorStrategy)>
<com.android.future.usb.UsbManager: void requestPermission(com.android.future.usb.UsbAccessory,android.app.PendingIntent)>
<com.android.server.pm.PackageManagerService: int checkSignatures(java.lang.String,java.lang.String)>
<com.android.server.pm.parsing.pkg.AndroidPackage: int[] getSplitFlags()>
<com.android.systemui.statusbar.dagger.StatusBarDependenciesModule: com.android.systemui.statusbar.NotificationRemoteInputManager provideNotificationRemoteInputManager(android.content.Context,com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.statusbar.SmartReplyController,com.android.systemui.statusbar.notification.NotificationEntryManager,dagger.Lazy,com.android.systemui.plugins.statusbar.StatusBarStateController,android.os.Handler,com.android.systemui.statusbar.policy.RemoteInputUriController,com.android.systemui.statusbar.NotificationClickNotifier,com.android.systemui.statusbar.ActionClickLogger)>
<com.android.server.pm.permission.PermissionsState: boolean hasInstallPermission(java.lang.String)>
<com.android.settingslib.applications.AppUtils: boolean isSystemModule(android.content.Context,java.lang.String)>
<com.android.systemui.bubbles.BubbleController: boolean handleDismissalInterception(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.ScalingDrawableWrapper: void <init>(android.graphics.drawable.Drawable,float)>
<com.android.systemui.qs.tiles.HotspotTile: int getMetricsCategory()>
<android.processor.view.inspector.InspectableClassModel: com.squareup.javapoet.ClassName getClassName()>
<com.android.settingslib.graph.BatteryMeterDrawableBase: void postInvalidate()>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getWapiCertSuite()>
<com.android.systemui.statusbar.notification.TransformState: boolean transformViewTo(com.android.systemui.statusbar.notification.TransformState,float)>
<com.android.systemui.statusbar.policy.SmartReplyConstants: long getOnClickInitDelay()>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void onAttachedToWindow()>
<com.android.systemui.shared.system.RotationWatcher: void onRotationChanged(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPersonalAppsSuspended(android.content.ComponentName,boolean)>
<com.android.systemui.qs.carrier.QSCarrierGroupController.Builder: com.android.systemui.qs.carrier.QSCarrierGroupController build()>
<com.android.networkstack.tethering.TetheringService: com.android.networkstack.tethering.TetheringDependencies makeTetheringDependencies()>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void onFinishInflate()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean fullyExpandedClearAllVisible()>
<com.android.providers.settings.SettingsProvider: int getTypeFromKey(int)>
<com.android.systemui.shared.system.TaskStackChangeListener: void onSingleTaskDisplayDrawn(int)>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void setExternalIcon(java.lang.String)>
<com.android.server.hdmi.DeviceDiscoveryAction.DeviceDiscoveryCallback: void onDeviceDiscoveryDone(java.util.List)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String,android.os.Bundle)>
<com.android.systemui.shared.system.QuickStepContract: boolean supportsRoundedCornersOnWindows(android.content.res.Resources)>
<com.android.server.broadcastradio.hal2.BroadcastRadioService: boolean hasAnyModules()>
<com.android.server.display.color.DisplayTransformManager: boolean isDeviceColorManaged()>
<com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>
<com.android.server.audio.AudioService: int removePreferredDeviceForStrategy(int)>
<com.android.systemui.shared.system.WindowManagerWrapper: void setPipVisibility(boolean)>
<com.android.gallery3d.common.Utils: float clamp(float,float,float)>
<com.android.systemui.tuner.TunerSwitch: void onAttached()>
<android.app.ResourcesPerfTest: void getString()>
<com.android.systemui.bubbles.BubbleTaskView: void release()>
<android.app.StatsManager.StatsPullAtomCallback: int onPullAtom(int,java.util.List)>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setTint(int)>
<com.android.systemui.car.voicerecognition.ConnectedDeviceVoiceRecognitionNotifier: void start()>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsAnimationController.ChildAnimationConfigurator: void configureAnimationForChildAtIndex(int,com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator)>
<com.android.server.testing.shadows.ShadowBinder: android.os.UserHandle getCallingUserHandle()>
<com.android.gallery3d.common.Utils: void fail(java.lang.String,java.lang.Object[])>
<com.android.server.usb.UsbService: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: android.view.View getMenuView()>
<com.android.server.display.DisplayModeDirector.RefreshRateRange: boolean equals(java.lang.Object)>
<com.android.networkstack.tethering.BpfCoordinator: void <init>(com.android.networkstack.tethering.BpfCoordinator.Dependencies)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: int getOpacity()>
<com.android.server.stats.pull.netstats.SubInfo: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,boolean)>
<com.android.uiautomator.testrunner.UiAutomatorInstrumentationTestRunner: void onStart()>
<com.android.systemui.biometrics.AuthContainerView.Builder: com.android.systemui.biometrics.AuthContainerView.Builder setUserId(int)>
<com.android.systemui.statusbar.policy.UserSwitcherController: boolean isSimpleUserSwitcher()>
<com.android.gallery3d.glrenderer.GLCanvas: int uploadBuffer(java.nio.FloatBuffer)>
<com.android.server.uri.UriPermissionOwner: void addReadPermission(com.android.server.uri.UriPermission)>
<android.perftests.utils.ShellHelper: java.lang.String runShellCommandRaw(java.lang.String)>
<android.net.wifi.rtt.CivicLocation: boolean isValid()>
<android.net.wifi.hotspot2.pps.UpdateParameter: int hashCode()>
<com.android.systemui.statusbar.phone.UserAvatarView: void setDrawableWithBadge(android.graphics.drawable.Drawable,int)>
<com.android.server.pm.permission.BasePermission: android.content.pm.PermissionInfo generatePermissionInfo(java.lang.String,int)>
<com.android.uiautomator.core.UiObject: com.android.uiautomator.core.UiSelector getSelector()>
<com.android.server.firewall.SenderPackageFilter: boolean matches(com.android.server.firewall.IntentFirewall,android.content.ComponentName,android.content.Intent,int,int,java.lang.String,int)>
<com.android.systemui.qs.QuickQSPanel: void setTiles(java.util.Collection)>
<android.content.pm.PackageManagerInternal: int getPackageTargetSdkVersion(java.lang.String)>
<com.android.systemui.shared.plugins.PluginInstanceManager: void destroy()>
<com.android.packageinstaller.PackageInstallerActivity.AnonymousSourceDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.server.media.MediaRouterService: void selectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>
<android.net.wifi.p2p.WifiP2pWfdInfo: void setMaxThroughput(int)>
<com.android.server.pm.parsing.PackageCacher: com.android.server.pm.parsing.pkg.ParsedPackage fromCacheEntryStatic(byte[])>
<com.android.systemui.stackdivider.DividerHandleView: void setTouching(boolean,boolean)>
<com.android.settingslib.deviceinfo.AbstractSimStatusImeiInfoPreferenceController: boolean isAvailable()>
<android.net.wifi.p2p.WifiP2pDevice: boolean wpsPbcSupported()>
<com.android.systemui.statusbar.notification.stack.SwipeableView: com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin createMenu()>
<com.android.server.accessibility.MagnificationController: int getIdOfLastServiceToMagnify(int)>
<com.android.location.provider.ActivityRecognitionProvider: void <init>(android.hardware.location.IActivityRecognitionHardware)>
<com.android.systemui.net.NetworkOverLimitActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.statusbar.ScreenRecordDrawable: void applyTheme(android.content.res.Resources.Theme)>
<com.android.preload.check.Util: void assertInitialized(java.lang.String,java.lang.ClassLoader)>
<android.perftests.utils.SettingsHelper: void set(java.lang.String,java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.phone.LightBarTransitionsController: void appTransitionCancelled(int)>
<com.android.server.usb.UsbDeviceManager: void setScreenUnlockedFunctions(long)>
<com.android.systemui.statusbar.notification.collection.coordinator.DeviceProvisionedCoordinator: void <init>(com.android.systemui.statusbar.policy.DeviceProvisionedController,android.content.pm.IPackageManager)>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void onStateChanged(int)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isSupportsSmallScreens()>
<com.android.server.TelephonyRegistry: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)>
<com.android.server.pm.PackageManagerService: void grantRuntimePermission(java.lang.String,java.lang.String,int)>
<com.android.server.pm.PackageManagerServiceUtils: boolean checkISA(java.lang.String)>
<com.android.systemui.qs.QSHost: void addCallback(com.android.systemui.qs.QSHost.Callback)>
<com.android.server.timedetector.TimeDetectorService: void handleAutoTimeDetectionChanged()>
<com.android.server.IntentResolver: void removeFilterInternal(java.lang.Object)>
<com.android.server.pm.PackageManagerService.PendingPackageBroadcasts: void remove(int,java.lang.String)>
<com.android.systemui.analytics.DataCollector: boolean isEnabledFull()>
<com.android.systemui.statusbar.ScreenRecordDrawable: void setAlpha(int)>
<com.android.server.tv.tunerresourcemanager.CasResource.Builder: com.android.server.tv.tunerresourcemanager.CasResource.Builder maxSessionNum(int)>
<com.android.systemui.statusbar.notification.row.NotificationGutsManager: void setUpWithPresenter(com.android.systemui.statusbar.NotificationPresenter,com.android.systemui.statusbar.notification.stack.NotificationListContainer,com.android.systemui.statusbar.notification.row.NotificationInfo.CheckSaveListener,com.android.systemui.statusbar.notification.row.NotificationGutsManager.OnSettingsClickListener)>
<com.android.systemui.qs.tiles.ColorInversionTile: java.lang.String composeChangeAnnouncement()>
<com.android.server.biometrics.iris.IrisService: long getHalDeviceId()>
<com.android.server.accessibility.AccessibilityManagerService: void onClientChangeLocked(boolean)>
<com.android.systemui.car.bluetooth.CarBatteryController: void startListening()>
<android.net.wifi.WifiEnterpriseConfig: void setIdentity(java.lang.String)>
<com.android.systemui.qs.external.CustomTile: boolean isAvailable()>
<com.android.server.biometrics.face.FaceAuthenticator: boolean hasEnrolledTemplates(int,java.lang.String)>
<com.android.systemui.volume.VolumeDialogImpl: void dismissH(int)>
<com.android.systemui.util.sensors.ProximitySensor: void setTag(java.lang.String)>
<android.net.wifi.p2p.WifiP2pConfig: void <init>(android.net.wifi.p2p.WifiP2pConfig)>
<android.os.UserManagerInternal: boolean isUserUnlocked(int)>
<android.net.wifi.hotspot2.pps.UpdateParameter: void setTrustRootCertUrl(java.lang.String)>
<android.net.wifi.SoftApCapability: java.lang.String toString()>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onScreenTurningOff()>
<com.android.systemui.statusbar.notification.collection.NotifPipeline: void addNotificationDismissInterceptor(com.android.systemui.statusbar.notification.collection.notifcollection.NotifDismissInterceptor)>
<com.android.server.usb.descriptors.UsbConfigDescriptor: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>
<com.android.server.updates.ConfigUpdateInstallReceiver: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.android.systemui.plugins.NavigationEdgeBackPlugin: void setLayoutParams(android.view.WindowManager.LayoutParams)>
<com.android.server.policy.PhoneWindowManager: void adjustConfigurationLw(android.content.res.Configuration,int,int)>
<com.android.printspooler.widget.PrintOptionsLayout: void setColumnCount(int)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setHideSensitive(boolean,boolean,long,long)>
<com.android.wallpapercropper.WallpaperCropActivity.BitmapCropTask: android.graphics.Bitmap getCroppedBitmap()>
<com.android.role.persistence.RolesPersistence: void writeForUser(com.android.role.persistence.RolesState,android.os.UserHandle)>
<javax.obex.ServerRequestHandler: void setConnectionId(long)>
<com.android.server.stats.StatsCompanionService.PullingAlarmListener: void onAlarm()>
<com.android.providers.settings.SettingsBackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long)>
<com.android.systemui.qs.customize.TileAdapter.Holder: void <init>(android.view.View)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setMasterVolumeMuted(android.content.ComponentName,boolean)>
<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.MotionEventInjector getMotionEventInjectorForDisplayLocked(int)>
<com.android.systemui.statusbar.phone.StatusBar: int getWakefulnessState()>
<com.android.systemui.DessertCaseView: void place(android.view.View,android.graphics.Point,boolean)>
<com.android.settingslib.dream.DreamBackend: boolean isEnabled()>
<android.net.wifi.rtt.ResponderConfig: int describeContents()>
<android.net.ITetheringEventCallback: void onCallbackStopped(int)>
<com.android.server.vr.VrManagerInternal: void onScreenStateChanged(boolean)>
<com.android.server.pm.Installer: void getUserSize(java.lang.String,int,int,int[],android.content.pm.PackageStats)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getAllCrossProfilePackages()>
<com.android.server.wallpaper.WallpaperManagerService: void <init>(android.content.Context)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getTheme()>
<com.android.settingslib.dream.DreamBackend: java.util.List getDreamInfos()>
<android.content.pm.PackageManagerInternal: android.util.ArraySet getEnabledComponents(java.lang.String,int)>
<com.android.systemui.statusbar.notification.collection.notifcollection.CommonNotifCollection: void addCollectionListener(com.android.systemui.statusbar.notification.collection.notifcollection.NotifCollectionListener)>
<com.android.photos.BitmapRegionTileSource.UriBitmapSource: android.graphics.Bitmap loadPreviewBitmap(android.graphics.BitmapFactory.Options)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus.DisableReasonInfo: void <init>(java.lang.String,int,int)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator alpha(float,java.lang.Runnable[])>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedKiosk()>
<com.android.systemui.statusbar.phone.DarkIconDispatcherImpl: void <init>(android.content.Context,com.android.systemui.statusbar.CommandQueue)>
<com.android.settingslib.wifi.AccessPoint: void clearConfig()>
<com.android.systemui.wm.DisplayChangeController: void addRotationListener(com.android.systemui.wm.DisplayChangeController.OnDisplayChangingListener)>
<com.android.keyguard.SecurityMessageDisplay: void setMessage(java.lang.CharSequence)>
<com.android.systemui.bubbles.BubbleController: void addNotifCallback(com.android.systemui.bubbles.BubbleController.NotifCallback)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setRecoveryServicePublicKey(int,int,java.security.PublicKey)>
<com.android.systemui.statusbar.notification.row.FooterView: android.view.View findSecondaryView()>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryContentProviders(java.lang.String,int,int,java.lang.String)>
<com.android.settingslib.wifi.AccessPoint: java.lang.String getKey(android.content.Context,android.net.wifi.ScanResult)>
<com.android.systemui.statusbar.DragDownHelper.DragDownCallback: boolean isFalsingCheckNeeded()>
<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog createSystemPlog(java.lang.String)>
<com.android.systemui.bubbles.animation.StackAnimationController: float flingStackThenSpringToEdge(float,float,float)>
<android.widget.EditTextLongTextPerfTest: void testEditText()>
<com.android.server.policy.WindowManagerPolicy.DisplayContentInfo: com.android.server.wm.DisplayRotation getDisplayRotation()>
<com.android.server.biometrics.BiometricServiceBase: void handleEnrollResult(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.server.integrity.AppIntegrityManagerService: void onStart()>
<com.android.systemui.shared.plugins.PluginEnabler: int getDisableReason(android.content.ComponentName)>
<com.android.settingslib.development.DeveloperOptionsPreferenceController: void displayPreference(androidx.preference.PreferenceScreen)>
<com.android.statementservice.retriever.Relation: java.lang.String getDetail()>
<com.android.systemui.statusbar.policy.HotspotControllerImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.shared.recents.model.Task.TaskKey: void setWindowingMode(int)>
<com.android.settingslib.drawable.CircleFramedDrawable: int getIntrinsicHeight()>
<com.android.systemui.statusbar.notification.row.RowContentBindParams: java.lang.String toString()>
<com.android.settingslib.applications.instantapps.InstantAppDataProvider: boolean isInstantApp(android.content.pm.ApplicationInfo)>
<com.android.systemui.plugins.GlobalActions: void showGlobalActions(com.android.systemui.plugins.GlobalActions.GlobalActionsManager)>
<android.net.wifi.WifiInfo: java.lang.String getSSID()>
<com.android.systemui.statusbar.notification.NotificationEntryManager: java.util.List getVisibleNotifications()>
<com.android.preload.check.PreloadCheck: void testBlackList()>
<com.android.server.NetworkManagementService: void removeInterfaceFromLocalNetwork(java.lang.String)>
<com.android.systemui.statusbar.NotificationMediaManager: void clearCurrentMediaNotification()>
<javax.obex.PrivateInputStream: void close()>
<com.android.server.display.BrightnessIdleJob: boolean onStopJob(android.app.job.JobParameters)>
<com.android.server.ConnectivityService.Dependencies: com.android.server.connectivity.ProxyTracker makeProxyTracker(android.content.Context,android.os.Handler)>
<javax.microedition.khronos.opengles.GL10: void glTexCoordPointer(int,int,int,java.nio.Buffer)>
<com.android.server.appprediction.AppPredictionPerUserService: void onConnectedStateChanged(boolean)>
<com.android.systemui.statusbar.policy.MobileSignalController: com.android.systemui.statusbar.policy.MobileSignalController.MobileState cleanState()>
<android.text.PrecomputedTextMemoryUsageTest: void testMemoryUsage_Emoji()>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void hideSystemIconArea(boolean)>
<com.android.soundpicker.CheckedListItem: void setChecked(boolean)>
<com.android.systemui.shared.recents.view.RecentsTransition: android.graphics.Bitmap createHardwareBitmap(int,int,java.util.function.Consumer)>
<com.android.commands.dpm.Dpm: void main(java.lang.String[])>
<com.android.systemui.stackdivider.DividerHandleView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.policy.BurnInProtectionHelper: void startBurnInProtection()>
<com.android.systemui.SystemUIFactory: com.android.systemui.dagger.SystemUIRootComponent getRootComponent()>
<com.android.systemui.usb.UsbAccessoryUriActivity: void onClick(android.content.DialogInterface,int)>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcherScrim: int getOpacity()>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isOnKeyguard()>
<com.android.server.testing.shadows.ShadowSlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setWallpaperSupportsAmbientMode(boolean)>
<com.android.printservice.recommendation.RecommendationServiceImpl: void onDisconnected()>
<com.android.systemui.car.userswitcher.UserSwitchTransitionViewController: int getInsetTypesToFit()>
<com.android.systemui.bubbles.BubbleTaskView: void <init>(android.content.Context)>
<com.android.systemui.screenrecord.RecordingController: void cancelCountdown()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void removeUserFromAllTables(int)>
<com.android.systemui.Dependency: java.lang.Object get(com.android.systemui.Dependency.DependencyKey)>
<com.android.systemui.statusbar.notification.MessagingLayoutTransformState: void transformViewFrom(com.android.systemui.statusbar.notification.TransformState,float)>
<com.android.server.pm.ShortcutService: int getMaxShortcutCountPerActivity(java.lang.String,int)>
<com.android.server.appop.AppOpsService: void removeUser(int)>
<android.widget.EditTextBackspacePerfTest: java.util.Collection cases()>
<com.android.printservice.recommendation.RemotePrintServicePlugin.OnChangedListener: void onChanged()>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: java.lang.String getConnectChoice()>
<com.android.systemui.statusbar.notification.VisualStabilityManager.Callback: void onChangeAllowed()>
<com.android.systemui.statusbar.policy.RemoteInputUriController: void grantInlineReplyUriPermission(android.service.notification.StatusBarNotification,android.net.Uri)>
<com.android.server.audio.MediaFocusControl: void mutePlayersForCall(int[])>
<com.android.server.integrity.model.BitInputStream: boolean hasNext()>
<com.android.systemui.statusbar.phone.NavigationBarInflaterView: android.view.View inflateButton(java.lang.String,android.view.ViewGroup,boolean,boolean)>
<com.android.server.pm.PackageManagerService: void verifyIntentFilter(int,int,java.util.List)>
<com.android.systemui.egg.MLand: void L(java.lang.String,java.lang.Object[])>
<com.android.server.policy.PhoneWindowManager: void setAllowLockscreenWhenOn(int,boolean)>
<android.net.ip.IpClientManager: boolean stop()>
<com.android.systemui.statusbar.NotificationListener.NotificationSettingsListener: void onStatusBarIconsBehaviorChanged(boolean)>
<com.android.server.pm.PackageInstallerService: void onPrivateVolumeMounted(java.lang.String)>
<com.android.systemui.statusbar.phone.PanelViewController: void instantCollapse()>
<com.android.server.policy.role.LegacyRoleResolutionPolicy: void <init>(android.content.Context)>
<com.android.server.inputmethod.InputMethodManagerService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<com.android.keyguard.NumPadKey: void onMeasure(int,int)>
<com.android.systemui.volume.Events.Callback: void writeEvent(long,int,java.lang.Object[])>
<com.android.server.biometrics.face.FaceUserState: java.lang.String getBiometricFile()>
<com.android.statementservice.retriever.AbstractStatementRetriever: com.android.statementservice.retriever.AbstractStatementRetriever.Result retrieveStatements(com.android.statementservice.retriever.AbstractAsset)>
<android.text.NonEditableTextGenerator: android.text.NonEditableTextGenerator setTextType(android.text.NonEditableTextGenerator.TextType)>
<android.net.wifi.aware.WifiAwareManager: void subscribe(int,android.os.Looper,android.net.wifi.aware.SubscribeConfig,android.net.wifi.aware.DiscoverySessionCallback)>
<com.android.server.pm.PackageManagerService.PendingPackageBroadcasts: java.util.ArrayList get(int,java.lang.String)>
<com.android.server.policy.PhoneWindowManager: void dismissKeyguardLw(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void onUiModeChanged()>
<android.os.UserManagerInternal: int[] getUserIds()>
<com.android.server.signedconfig.SignedConfig: com.android.server.signedconfig.SignedConfig parse(java.lang.String,java.util.Set,java.util.Map)>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: int getEapType()>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.settingslib.drawable.UserIconDrawable: int getSizeForList(android.content.Context)>
<com.android.systemui.classifier.FalsingManagerFake: void onTouchEvent(android.view.MotionEvent,int,int)>
<com.android.server.display.DisplayModeDirector.BrightnessObserver: void onLowPowerModeEnabledLocked(boolean)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean areChildrenExpanded()>
<com.android.settingslib.suggestions.SuggestionControllerMixinCompat.SuggestionControllerHost: void onSuggestionReady(java.util.List)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onScreenTurningOn(com.android.server.policy.keyguard.KeyguardServiceDelegate.DrawnListener)>
<com.android.startop.colorchanging.MainActivity: void goBlack(android.view.View)>
<com.android.permission.persistence.RuntimePermissionsPersistence: void writeForUser(com.android.permission.persistence.RuntimePermissionsState,android.os.UserHandle)>
<com.android.server.locksettings.recoverablekeystore.WrappedKey: void <init>(byte[],byte[],byte[],int,int)>
<com.android.systemui.MultiListLayout.MultiListAdapter: int countListItems()>
<android.net.wifi.WifiEnterpriseConfig: void setRealm(java.lang.String)>
<com.android.systemui.accessibility.MirrorWindowControl: void setWindowDelegate(com.android.systemui.accessibility.MirrorWindowControl.MirrorWindowDelegate)>
<com.android.systemui.shared.recents.model.Task: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.phone.StatusBarIconList: void setIcon(int,com.android.systemui.statusbar.phone.StatusBarIconHolder)>
<com.android.systemui.car.userswitcher.UserSwitchTransitionViewController: void <init>(android.content.Context,android.os.Handler,android.content.res.Resources,android.os.UserManager,android.view.IWindowManager,com.android.systemui.car.window.OverlayViewGlobalStateController)>
<com.android.server.biometrics.AuthenticationClient: boolean getRequireConfirmation()>
<com.android.systemui.screenrecord.RecordingController.RecordingStateChangeCallback: void onRecordingEnd()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getTargetSandboxVersion()>
<com.android.server.timedetector.TimeDetectorStrategyImpl: void dump(java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void initAodIcons()>
<android.os.LooperStatsPerfTest: void timeCollectionDisabled()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setDozeAmount(float)>
<com.android.systemui.biometrics.AuthContainerView.Builder: void <init>(android.content.Context)>
<com.android.server.usb.UsbPortManager: void systemReady()>
<android.net.wifi.rtt.ResponderLocation: double getLongitudeUncertainty()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean isInContentBounds(float,float)>
<android.net.wifi.WifiEnterpriseConfig: void setDomainSuffixMatch(java.lang.String)>
<android.net.wifi.hotspot2.pps.Credential: boolean validate()>
<com.android.server.usb.UsbService.Lifecycle: void onUserSwitching(com.android.server.SystemService.TargetUser,com.android.server.SystemService.TargetUser)>
<com.android.systemui.qs.tiles.LocationTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.BooleanState,java.lang.Object)>
<com.android.settingslib.drawable.UserIconDrawable: com.android.settingslib.drawable.UserIconDrawable bake()>
<com.android.server.devicepolicy.DevicePolicyManagerService.Lifecycle: void onUnlockUser(int)>
<com.android.systemui.plugins.FalsingManager: void onNotificationDismissed()>
<android.os.CpuUsageTrackingPerfTest: void timeReadStatFileDirectly()>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: byte getPacketSize()>
<com.android.systemui.qs.tiles.BatterySaverTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.BooleanState,java.lang.Object)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: java.util.List getSupportedProfiles()>
<android.net.wifi.IWifiManager: long getSupportedFeatures()>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: android.util.SparseArray getCurrentProfiles()>
<com.android.server.autofill.ui.AutoFillUI: void showError(java.lang.CharSequence,com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback)>
<android.os.StatsFrameworkInitializer: void registerServiceWrappers()>
<com.android.server.PersistentDataBlockService: void onStart()>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: android.view.View getIndicationArea()>
<android.net.wifi.WifiManager: void updateWifiUsabilityScore(int,int,int)>
<com.android.server.pm.PackageManagerService: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.ParsedPackage setVersionCode(int)>
<com.android.systemui.statusbar.phone.DoubleTapHelper: boolean isWithinDoubleTapSlop(android.view.MotionEvent)>
<android.view.autofill.LoginTest: void testChange_autofillBothFields()>
<android.net.wifi.WifiNetworkConnectionStatistics: java.lang.String toString()>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setPersistent(boolean)>
<com.android.gallery3d.common.Utils: float interpolateScale(float,float,float)>
<com.android.server.locksettings.LockSettingsService: boolean getBoolean(java.lang.String,boolean,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getManagedUserId(int)>
<com.android.wallpaperbackup.WallpaperBackupAgent: void onRestoreFinished()>
<com.android.systemui.statusbar.notification.row.NotificationGuts.GutsContent: int getActualHeight()>
<com.android.server.vr.SettingsObserver: com.android.server.vr.SettingsObserver build(android.content.Context,android.os.Handler,java.lang.String)>
<com.android.systemui.doze.DozeBrightnessHostForwarder: void setDozeScreenBrightness(int)>
<com.android.systemui.bubbles.BubbleViewProvider: int getDisplayId()>
<com.android.settingslib.bluetooth.LocalBluetoothManager: com.android.settingslib.bluetooth.BluetoothEventManager getEventManager()>
<com.android.systemui.assist.AssistOrbView: void reset()>
<javax.obex.ClientOperation: java.io.InputStream openInputStream()>
<com.android.server.pm.PolicyComparator: int compare(com.android.server.pm.Policy,com.android.server.pm.Policy)>
<com.android.systemui.classifier.Stroke: int getCount()>
<com.android.settingslib.net.NetworkCycleData: long getEndTime()>
<com.android.server.locksettings.LockSettingsStrongAuth: void <init>(android.content.Context,com.android.server.locksettings.LockSettingsStrongAuth.Injector)>
<com.android.systemui.statusbar.AlphaOptimizedView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.accessibility.FingerprintGestureDispatcher: boolean isFingerprintGestureDetectionAvailable()>
<com.android.location.provider.LocationProviderBase: android.os.IBinder getBinder()>
<com.android.commands.requestsync.RequestSync: void main(java.lang.String[])>
<com.android.systemui.qs.tiles.CastTile: void handleUserSwitch(int)>
<com.android.server.autofill.AutofillManagerService: int getVisibleDatasetsMaxCount()>
<com.android.server.statusbar.StatusBarManagerInternal: void onSystemBarAppearanceChanged(int,int,com.android.internal.view.AppearanceRegion[],boolean)>
<com.android.systemui.accessibility.MirrorWindowControl: void showControl(android.os.IBinder)>
<com.android.server.devicepolicy.DevicePolicyManagerService: long getLastNetworkLogRetrievalTime()>
<android.processor.view.inspector.InspectableClassModel.IntEnumEntry: int getValue()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void reportPasswordChanged(int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean shouldExpandWhenNotFlinging()>
<com.android.server.textclassifier.TextClassificationManagerService: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector packageNameMatches(java.lang.String)>
<com.android.systemui.statusbar.phone.StatusBarIconController.TintedIconManager: void <init>(android.view.ViewGroup,com.android.systemui.statusbar.CommandQueue)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void onDozingChanged(boolean)>
<com.android.systemui.statusbar.NotificationListener: void addNotificationHandler(com.android.systemui.statusbar.NotificationListener.NotificationHandler)>
<com.android.printspooler.model.RemotePrintDocument: void start()>
<com.android.server.appwidget.AppWidgetService: void onStart()>
<com.android.settingslib.widget.FooterPreference: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean setFlagBubble(boolean)>
<com.android.photos.views.TiledImageView: void onPause()>
<com.android.server.autofill.AutofillManagerService: int getPartitionMaxCount()>
<com.android.networkstack.tethering.TetheringDependencies: boolean isTetheringDenied()>
<com.android.systemui.statusbar.notification.dagger.NotificationsModule: com.android.systemui.statusbar.notification.VisualStabilityManager provideVisualStabilityManager(com.android.systemui.statusbar.notification.NotificationEntryManager,android.os.Handler)>
<com.android.server.biometrics.ClientMonitor: void finalize()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: boolean hasMobileDataFeature()>
<android.content.pm.PackageManagerInternal: void forEachPackageSetting(java.util.function.Consumer)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getClassLoaderName()>
<com.android.server.AlarmManagerInternal: boolean isIdling()>
<android.net.wifi.aware.WifiAwareManager: void updateSubscribe(int,int,android.net.wifi.aware.SubscribeConfig)>
<com.android.server.statusbar.StatusBarManagerInternal: void onProposedRotationChanged(int,boolean)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: boolean fromShadeLocked()>
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>
<com.android.settingslib.bluetooth.BluetoothUtils: android.util.Pair getBtClassDrawableWithDescription(android.content.Context,com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.systemui.RegionInterceptingFrameLayout.RegionInterceptableView: boolean shouldInterceptTouch()>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int findAudioReceiverAddress()>
<com.android.systemui.statusbar.notification.collection.inflation.NotificationRowBinderImpl.BindRowCallback: void onBindRow(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.statusbar.notification.row.NotificationGutsManager: void closeAndSaveGuts(boolean,boolean,boolean,int,int,boolean)>
<com.android.settingslib.widget.BarChartPreference: void onBindViewHolder(androidx.preference.PreferenceViewHolder)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl markNotActivitiesAsNotExportedIfSingleUser()>
<com.android.keyguard.KeyguardUpdateMonitor: void handleStartedGoingToSleep(int)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean shouldDismissOnMenuPressed()>
<com.android.server.DeviceIdleController: java.lang.String[] getFullPowerWhitelistExceptIdleInternal()>
<com.android.server.audio.SystemServerAdapter: void sendMicrophoneMuteChangedIntent()>
<com.android.printspooler.widget.EmbeddedContentContainer: void onSizeChanged(int,int,int,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUninstallInQueue(java.lang.String)>
<com.android.systemui.statusbar.NotificationShelf: com.android.systemui.statusbar.notification.stack.ExpandableViewState createExpandableViewState()>
<android.net.wifi.ILocalOnlyHotspotCallback: void onHotspotStarted(android.net.wifi.SoftApConfiguration)>
<com.android.systemui.shared.plugins.VersionInfo: void checkVersion(com.android.systemui.shared.plugins.VersionInfo)>
<com.android.server.accessibility.AccessibilityManagerService: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>
<com.android.systemui.statusbar.notification.FakeShadowView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.classifier.PointerCountClassifier: void <init>(com.android.systemui.classifier.ClassifierData)>
<com.android.systemui.util.time.DateFormatUtil: void <init>(android.content.Context)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String)>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getClientCertificateAlias()>
<com.android.server.integrity.parser.RandomAccessInputStream: int read(byte[])>
<com.android.systemui.statusbar.notification.row.NotificationContentView: android.view.View[] getAllViews()>
<com.android.settingslib.net.ChartDataLoader: void <init>(android.content.Context,android.net.INetworkStatsSession,android.os.Bundle)>
<com.android.systemui.util.Utils: boolean isGesturalModeOnDefaultDisplay(android.content.Context,int)>
<com.android.systemui.recents.RecentsOnboarding: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.statusbar.phone.DozeScrimController: boolean isPulsing()>
<com.android.printspooler.ui.PrintActivity.PrintServiceApprovalDialog: void onStop()>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper.Callback: void onSwipingStarted(boolean)>
<com.android.server.pm.parsing.pkg.PackageImpl: boolean isStub()>
<com.android.systemui.statusbar.phone.DozeScrimController: void onStateChanged(int)>
<com.android.settingslib.applications.AppUtils: boolean isBrowserApp(android.content.Context,java.lang.String,int)>
<com.android.settingslib.Utils: int getWifiIconResource(boolean,int)>
<com.android.photos.views.TiledImageView: void onResume()>
<com.android.server.wallpaper.IWallpaperManagerService: void onBootPhase(int)>
<com.android.systemui.qs.QuickStatusBarHeader: void setExpansion(boolean,float,float)>
<com.android.systemui.assist.IAssistHandleService: void requestAssistHandles()>
<com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl.QualifiedTelephonyTimeZoneSuggestion: int hashCode()>
<android.wm.RecentsAnimationPerfTest: java.util.Collection getParameters()>
<com.android.server.TelephonyRegistry: void notifyRadioPowerStateChanged(int,int,int)>
<com.android.systemui.classifier.AnglesPercentageEvaluator: float evaluate(float,int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setUserLocked(boolean)>
<com.android.keyguard.KeyguardPasswordView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.slice.SlicePermissionManager: boolean hasFullAccess(java.lang.String,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetIntegerv(int,java.nio.IntBuffer)>
<com.google.android.startop.iorap.IorapForwardingService: com.android.server.wm.ActivityMetricsLaunchObserverRegistry provideLaunchObserverRegistry()>
<android.os.UserManagerInternal: boolean removeUserEvenWhenDisallowed(int)>
<com.android.systemui.globalactions.GlobalActionsDialog: void onUiModeChanged()>
<com.android.systemui.plugins.DozeServicePlugin: void setDozeRequester(com.android.systemui.plugins.DozeServicePlugin.RequestDoze)>
<com.android.systemui.statusbar.phone.StatusBarIconHolder: com.android.systemui.statusbar.phone.StatusBarIconHolder fromIcon(com.android.internal.statusbar.StatusBarIcon)>
<com.android.server.contentcapture.ContentCaptureMetricsLogger: void writeSessionFlush(int,android.content.ComponentName,android.content.ComponentName,android.service.contentcapture.FlushMetrics,android.content.ContentCaptureOptions,int)>
<com.android.systemui.statusbar.phone.StatusBarIconController: void setSignalIcon(java.lang.String,com.android.systemui.statusbar.phone.StatusBarSignalPolicy.WifiIconState)>
<com.android.systemui.car.window.OverlayPanelViewController: void setViewClipBounds(int)>
<com.android.systemui.volume.Events: void writeEvent(int,java.lang.Object[])>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton3Enabled(boolean)>
<com.android.systemui.bubbles.BubbleData: void removeBubblesWithInvalidShortcuts(java.lang.String,java.util.List,int)>
<com.android.server.IpSecService.RefcountedResource: void userRelease()>
<android.net.wifi.p2p.WifiP2pProvDiscEvent: void <init>(java.lang.String)>
<com.android.server.DeviceIdleController: int[] getAppIdTempWhitelistInternal()>
<com.android.server.display.utils.History: void <init>(int,java.time.Clock)>
<android.media.MediaSession2Service: void addSession(android.media.MediaSession2)>
<android.net.util.VersionedBroadcastListener: void stopListening()>
<com.android.server.SystemServiceManager: java.io.File ensureSystemDir()>
<com.android.printspooler.ui.PageAdapter: void close(java.lang.Runnable)>
<com.android.systemui.biometrics.AuthCredentialView: void onFinishInflate()>
<android.net.wifi.WifiScanner.ParcelableScanData: void <init>(android.net.wifi.WifiScanner.ScanData[])>
<com.android.systemui.car.window.OverlayPanelViewController.CloseGestureListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<com.android.systemui.volume.SystemUIInterpolators.LogAccelerateInterpolator: float getInterpolation(float)>
<com.android.systemui.dagger.DependencyProvider: android.view.Choreographer providesChoreographer()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void clearNotificationEffects()>
<com.android.systemui.qs.QSFragment: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.settingslib.bluetooth.HearingAidProfile: boolean accessProfileEnabled()>
<com.android.systemui.classifier.FalsingManagerImpl: void onCameraOn()>
<com.android.server.pm.ShortcutService: void cleanupBitmapsForPackage(int,java.lang.String)>
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder setNetworkName(java.lang.String)>
<com.android.systemui.statusbar.notification.stack.NotificationRoundnessManager: void setOnRoundingChangedCallback(java.lang.Runnable)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService.ResourcesReclaimListenerRecord: void binderDied()>
<android.net.wifi.WifiManager: void registerSoftApCallback(java.util.concurrent.Executor,android.net.wifi.WifiManager.SoftApCallback)>
<com.android.systemui.statusbar.phone.KeyguardBouncer: void inflateView()>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean)>
<javax.microedition.khronos.opengles.GL10: void glTranslatex(int,int,int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void onLayout(boolean,int,int,int,int)>
<com.android.systemui.statusbar.phone.HeadsUpAppearanceController: void onStateChanged()>
<com.android.systemui.qs.external.TileServices: boolean isSecure()>
<com.android.systemui.statusbar.SysuiStatusBarStateController: void setFullscreenState(boolean,boolean)>
<com.android.systemui.util.DeviceConfigProxy: boolean getBoolean(java.lang.String,java.lang.String,boolean)>
<com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProvider: void addSuppressor(com.android.systemui.statusbar.notification.interruption.NotificationInterruptSuppressor)>
<com.android.systemui.plugins.NavigationEdgeBackPlugin: void setDisplaySize(android.graphics.Point)>
<com.android.settingslib.media.BluetoothMediaDevice: boolean isConnected()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setOverScrollAmount(float,boolean,boolean,boolean)>
<com.android.systemui.tuner.PluginFragment: void onCreate(android.os.Bundle)>
<com.google.android.startop.iorap.RequestId: java.lang.String toString()>
<com.android.systemui.statusbar.notification.collection.coordinator.RankingCoordinator: void attach(com.android.systemui.statusbar.notification.collection.NotifPipeline)>
<android.net.wifi.p2p.WifiP2pDevice: void <init>(java.lang.String)>
<com.android.systemui.bubbles.BubbleOverflowActivity: void onCreate(android.os.Bundle)>
<com.android.localtransport.LocalTransport: int finishBackup()>
<com.android.server.policy.PhoneWindowManager: void registerDisplayFoldListener(android.view.IDisplayFoldListener)>
<com.android.systemui.statusbar.phone.StatusBar: android.view.View getAmbientIndicationContainer()>
<com.android.settingslib.drawer.Tile: void setMetaData(android.os.Bundle)>
<android.net.ITetheringConnector: void isTetheringSupported(java.lang.String,android.net.IIntResultListener)>
<com.android.soundpicker.CheckedListItem: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.ExpandableView: int getPinnedHeadsUpHeight()>
<com.android.systemui.power.PowerNotificationWarnings: void <init>(android.content.Context,com.android.systemui.plugins.ActivityStarter)>
<android.processor.view.inspector.InspectableClassModel.IntFlagEntry: int getTarget()>
<com.android.systemui.statusbar.phone.NotificationListenerWithPlugins: void registerAsSystemService(android.content.Context,android.content.ComponentName,int)>
<com.android.settingslib.applications.ServiceListing: void setEnabled(android.content.ComponentName,boolean)>
<com.android.systemui.accessibility.WindowMagnification: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: boolean logClickedPreference(androidx.preference.Preference,int)>
<com.android.systemui.stackdivider.Divider: void setMinimized(boolean)>
<com.android.systemui.plugins.qs.QSTile: void setListening(java.lang.Object,boolean)>
<com.android.proxyhandler.ProxyService: void onCreate()>
<com.android.settingslib.accounts.AuthenticatorHelper: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setClipBottomAmount(int)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setLegacy(boolean)>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>
<com.android.systemui.egg.MLand: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.settingslib.location.InjectedSetting.Builder: com.android.settingslib.location.InjectedSetting.Builder setIconId(int)>
<com.android.server.pm.SharedUserSetting: void dumpDebug(android.util.proto.ProtoOutputStream,long)>
<com.android.server.policy.PhoneWindowManager: android.graphics.Rect getFoldedArea()>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setTranslation(float)>
<com.android.future.usb.UsbManager: android.os.ParcelFileDescriptor openAccessory(com.android.future.usb.UsbAccessory)>
<com.android.server.statusbar.StatusBarManagerService: void stopTracing()>
<com.android.systemui.screenshot.ScreenshotActionChip: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.settingslib.net.DataUsageController: com.android.settingslib.net.DataUsageController.DataUsageInfo getWifiDataUsageInfo()>
<com.android.server.pm.AppsFilter: void onUsersChanged()>
<com.android.server.slice.SliceManagerService.Lifecycle: void onBootPhase(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getLockTaskFeatures(android.content.ComponentName)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getOrganizationNameForUser(int)>
<com.android.systemui.qs.tiles.RotationLockTile: int getMetricsCategory()>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo: void onLayout(boolean,int,int,int,int)>
<com.android.server.integrity.parser.LimitInputStream: int read(byte[],int,int)>
<com.android.gallery3d.util.IntArray: int[] getInternalArray()>
<android.net.wifi.p2p.WifiP2pManager: void addServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.mediadrm.signer.MediaDrmSigner: com.android.mediadrm.signer.MediaDrmSigner.CertificateRequest getCertificateRequest(android.media.MediaDrm,int,java.lang.String)>
<com.android.server.statusbar.StatusBarManagerInternal: void setNotificationDelegate(com.android.server.notification.NotificationDelegate)>
<android.net.wifi.rtt.RangingResult: java.lang.String toString()>
<com.android.systemui.statusbar.phone.ReverseLinearLayout.Reversable: void reverse(boolean)>
<com.google.android.startop.iorap.AppIntentEvent: boolean equals(java.lang.Object)>
<com.android.systemui.biometrics.AuthBiometricView: int getStateForAfterError()>
<android.net.wifi.WifiNetworkAgentSpecifier: int describeContents()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isExtractNativeLibs()>
<com.android.server.pm.ApexManager: java.util.List getActiveApexInfos()>
<com.android.systemui.assist.AssistManager: boolean canVoiceAssistBeLaunchedFromKeyguard()>
<android.database.SQLiteDatabasePerfTest: void setUp()>
<com.android.systemui.qs.QSFragment: void setHasNotifications(boolean)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onSetBackground(android.graphics.Bitmap)>
<com.android.systemui.SwipeHelper: android.animation.ObjectAnimator createTranslationAnimation(android.view.View,float)>
<com.android.server.pm.PackageManagerService.ScanPartition: void <init>(java.io.File,com.android.server.pm.PackageManagerService.ScanPartition,int)>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: android.net.wifi.p2p.nsd.WifiP2pServiceRequest newInstance(int)>
<com.android.systemui.doze.DozeScreenBrightness: void <init>(android.content.Context,com.android.systemui.doze.DozeMachine.Service,android.hardware.SensorManager,android.hardware.Sensor,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.doze.DozeHost,android.os.Handler,int,int[],int[],boolean)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void handleSystemKey(int)>
<com.android.systemui.statusbar.notification.ImageTransformState: void initFrom(android.view.View,com.android.systemui.statusbar.notification.TransformState.TransformInfo)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowViewController: void setExpandAnimationRunning(boolean)>
<com.android.server.pm.PackageManagerService: boolean addPermissionAsync(android.content.pm.PermissionInfo)>
<android.net.wifi.WifiManager: boolean startSoftAp(android.net.wifi.WifiConfiguration)>
<com.android.keyguard.KeyguardSimPinView: void onFinishInflate()>
<com.android.systemui.statusbar.ViewTransformationHelper.CustomTransformation: boolean transformFrom(com.android.systemui.statusbar.notification.TransformState,com.android.systemui.statusbar.TransformableView,float)>
<com.android.systemui.qs.PagedTileLayout: void onFinishInflate()>
<com.android.server.NetworkScoreService.Lifecycle: void onBootPhase(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void removeAllChildren()>
<com.android.server.usb.descriptors.ByteStream: void resetReadCount()>
<com.android.settingslib.bluetooth.A2dpProfile: boolean setActiveDevice(android.bluetooth.BluetoothDevice)>
<com.android.gallery3d.glrenderer.GLPaint: void setLineWidth(float)>
<com.android.keyguard.KeyguardAbsKeyInputView: void handleAttemptLockout(long)>
<android.content.pm.PackageManagerInternal: boolean isPackageStateProtected(java.lang.String,int)>
<com.android.systemui.car.window.OverlayViewController: void setAllowRotaryFocus(boolean)>
<com.android.server.midi.MidiService.Lifecycle: void onUnlockUser(int)>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: boolean equals(java.lang.Object)>
<android.media.MediaParser.SeekMap: boolean isSeekable()>
<com.android.uiautomator.core.UiDevice: void clearLastTraversedText()>
<com.android.settingslib.core.AbstractPreferenceController: void updateState(androidx.preference.Preference)>
<com.android.server.autofill.RemoteAugmentedAutofillService.RemoteAugmentedAutofillServiceCallbacks: void logAugmentedAutofillAuthenticationSelected(int,java.lang.String,android.os.Bundle)>
<android.net.wifi.WifiScanner.PnoSettings.PnoNetwork: void <init>(java.lang.String)>
<com.android.server.accessibility.AccessibilityWindowManager.RemoteAccessibilityConnection: void binderDied()>
<javax.microedition.khronos.egl.EGL10: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator.ExpandAnimationParameters: int getTopChange()>
<com.android.server.pm.PackageManagerServiceUtils: java.lang.String deriveAbiOverride(java.lang.String,com.android.server.pm.PackageSetting)>
<com.android.systemui.qs.TouchAnimator.Listener: void onAnimationAtStart()>
<android.net.wifi.WifiUsabilityStatsEntry: int getRxLinkSpeedMbps()>
<com.android.server.pm.Policy.PolicyBuilder: com.android.server.pm.Policy.PolicyBuilder addSignature(java.lang.String)>
<com.android.systemui.dagger.ContextComponentResolver: com.android.systemui.SystemUI resolveSystemUI(java.lang.String)>
<com.android.systemui.statusbar.FlingAnimationUtils.Builder: com.android.systemui.statusbar.FlingAnimationUtils build()>
<com.android.server.adb.AdbDebuggingManager: void enablePairingByPairingCode()>
<com.android.systemui.qs.QuickStatusBarHeaderController: void setListening(boolean)>
<com.android.systemui.tuner.CustomListPreference.CustomListPreferenceDialogFragment: void onPrepareDialogBuilder(android.app.AlertDialog.Builder)>
<com.android.systemui.statusbar.SysuiStatusBarStateController: void addCallback(com.android.systemui.plugins.statusbar.StatusBarStateController.StateListener,int)>
<com.android.server.coverage.CoverageService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: android.view.View getContainerChildAt(int)>
<com.android.systemui.statusbar.phone.ObservableScrollView: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.qs.QSFragment: void setHeaderClickable(boolean)>
<com.android.server.SystemService: void <init>(android.content.Context)>
<com.android.systemui.shared.plugins.PluginManagerImpl: void removePluginListener(com.android.systemui.plugins.PluginListener)>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: boolean hasCACertInWorkProfile()>
<com.android.server.biometrics.Utils: void combineAuthenticatorBundles(android.os.Bundle)>
<com.android.server.PackageWatchdog: void dump(com.android.internal.util.IndentingPrintWriter)>
<com.android.server.pm.UserManagerService: boolean someUserHasSeedAccount(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean isFullWidth()>
<com.android.server.policy.WindowManagerPolicy: boolean okToAnimate()>
<com.android.server.TelephonyRegistry: void notifySignalStrengthForPhoneId(int,int,android.telephony.SignalStrength)>
<android.net.NetworkMonitorManager: boolean launchCaptivePortalApp()>
<com.android.server.policy.WindowOrientationListener: int getProposedRotation()>
<com.android.settingslib.applications.DefaultAppInfo: void <init>(android.content.Context,android.content.pm.PackageManager,int,android.content.ComponentName)>
<com.android.systemui.qs.tileimpl.QSTileBaseView: void init(com.android.systemui.plugins.qs.QSTile)>
<com.android.systemui.statusbar.phone.NotificationIconContainer: float getActualPaddingStart()>
<com.android.systemui.egg.MLand: float frand(float,float)>
<com.android.preload.check.Util: void assertNotInitialized(java.lang.String,java.lang.ClassLoader)>
<com.android.systemui.keyguard.Lifecycle: void dispatch(java.util.function.Consumer)>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton2OnClickListener(android.view.View.OnClickListener)>
<android.app.OverlayManagerPerfTest: void getStringTenOverlays()>
<com.android.server.pm.PackageManagerService: boolean isPackageStateProtected(java.lang.String,int)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: void setDistanceToTopRoundness(float)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: int getUserSentiment()>
<com.android.server.policy.WindowManagerPolicy: void setCurrentUserLw(int)>
<com.android.systemui.statusbar.phone.PanelViewController: float getCurrentExpandVelocity()>
<android.net.dhcp.DhcpServingParamsParcelExt: android.net.dhcp.DhcpServingParamsParcelExt setDnsServers(java.net.Inet4Address[])>
<com.android.server.input.InputManagerService.WindowManagerCallbacks: int getPointerDisplayId()>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setOverScrollAmount(float,boolean)>
<com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.PackageInfo generate(com.android.server.pm.parsing.pkg.AndroidPackage,android.apex.ApexInfo,int,com.android.server.pm.PackageSetting)>
<com.android.systemui.qs.tiles.DndTile: boolean isVisible(android.content.SharedPreferences)>
<com.android.server.audio.AudioSystemAdapter: int muteMicrophone(boolean)>
<com.android.systemui.SwipeHelper: void onMoveUpdate(android.view.View,android.view.MotionEvent,float,float)>
<com.android.systemui.statusbar.phone.NotificationPanelView.RtlChangeListener: void onRtlPropertielsChanged(int)>
<com.android.server.policy.WindowManagerPolicy.RotationSource: void setCurrentRotation(int)>
<com.android.server.NetworkManagementService: void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUnattendedManagedKiosk()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setRemoteInputController(com.android.systemui.statusbar.RemoteInputController)>
<com.android.settingslib.bluetooth.BluetoothEventManager: void unregisterCallback(com.android.settingslib.bluetooth.BluetoothCallback)>
<javax.microedition.khronos.opengles.GL10: void glLineWidthx(int)>
<com.android.server.rollback.RollbackManagerService: void <init>(android.content.Context)>
<com.android.settingslib.drawable.UserIconDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<com.android.server.people.PeopleServiceInternal: byte[] getBackupPayload(int)>
<com.android.server.audio.AudioService: void startBluetoothScoVirtualCall(android.os.IBinder)>
<android.net.wifi.hotspot2.omadm.XMLNode: java.lang.String getTag()>
<com.android.powermodel.RawBatteryStats: com.android.powermodel.RawBatteryStats.Record getSingle(java.lang.Class)>
<javax.obex.ServerRequestHandler: int onConnect(javax.obex.HeaderSet,javax.obex.HeaderSet)>
<com.android.server.tv.tunerresourcemanager.ClientProfile: void setNiceValue(int)>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager getInstance(android.content.Context,android.security.KeyStore)>
<com.android.systemui.analytics.DataCollector: com.android.systemui.analytics.DataCollector getInstance(android.content.Context)>
<com.android.server.pm.Installer: boolean destroyAppDataSnapshot(java.lang.String,int,long,int,int)>
<com.android.systemui.car.bluetooth.CarBatteryController: void addBatteryViewHandler(com.android.systemui.car.bluetooth.CarBatteryController.BatteryViewHandler)>
<com.android.server.AppStateTracker: boolean isUidActive(int)>
<com.android.server.display.BrightnessMappingStrategy: float[] getFloatArray(android.content.res.TypedArray)>
<com.android.keyguard.KeyguardPinBasedInputView: void resetPasswordText(boolean,boolean)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void onSystemBarAppearanceChanged(int,int,com.android.internal.view.AppearanceRegion[],boolean)>
<com.android.systemui.doze.DozePauser: void <init>(android.os.Handler,com.android.systemui.doze.DozeMachine,android.app.AlarmManager,com.android.systemui.doze.AlwaysOnDisplayPolicy)>
<com.android.server.adb.AdbDebuggingManager: void <init>(android.content.Context,java.lang.String,java.io.File)>
<com.android.server.timezone.TimeZoneUpdateIdler: void schedule(android.content.Context,long)>
<android.os.UserManagerInternal: void removeUserRestrictionsListener(android.os.UserManagerInternal.UserRestrictionsListener)>
<com.android.settingslib.CustomDialogPreferenceCompat: void <init>(android.content.Context)>
<com.android.server.accounts.AccountManagerService: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: void setRemoteInputActive(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.systemui.car.navigationbar.CarNavigationBar: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean)>
<android.net.wifi.p2p.WifiP2pGroupList: int getNetworkId(java.lang.String)>
<com.android.powermodel.ActivityReport: com.google.common.collect.ImmutableList getAllApps()>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: boolean hasLockscreenWallpaper()>
<android.app.usage.UsageStatsManagerInternal.AppUsageLimitData: long getUsageRemaining()>
<com.android.server.pm.parsing.pkg.PackageImpl: java.lang.String toAppInfoToString()>
<com.android.server.slice.SliceProviderPermissions: java.util.Collection getAuthorities()>
<com.android.systemui.classifier.FalsingManagerImpl: void onNotificationStopDismissing()>
<com.android.systemui.BatteryMeterView: void onBatteryUnknownStateChanged(boolean)>
<com.android.systemui.qs.tileimpl.QSTileImpl: android.content.Intent getLongClickIntent()>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: void removeCallback(com.android.systemui.statusbar.policy.SecurityController.SecurityControllerCallback)>
<com.android.nfc_extras.EeListenModeException: void <init>(java.lang.String)>
<com.android.systemui.tracing.ProtoTracer: void stop()>
<com.android.server.webkit.SystemImpl: java.util.List getPackageInfoForProviderAllUsers(android.content.Context,android.webkit.WebViewProviderInfo)>
<com.android.systemui.car.userswitcher.UserSwitchTransitionViewMediator: void <init>(com.android.systemui.car.CarServiceProvider,com.android.systemui.car.CarDeviceProvisionedController,com.android.systemui.car.userswitcher.UserSwitchTransitionViewController)>
<com.android.systemui.GuestResumeSessionReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.ConnectivityService: java.lang.String getCaptivePortalServerUrl()>
<com.android.systemui.pip.PipTaskOrganizer: void scheduleAnimateResizePip(android.graphics.Rect,int,java.util.function.Consumer)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void removeListener()>
<android.perftests.SystemPerfTest: void testNanoTimePerf()>
<com.android.settingslib.core.lifecycle.ObservablePreferenceFragment: void onSaveInstanceState(android.os.Bundle)>
<com.android.server.pm.PackageInstallerService: void unregisterCallback(android.content.pm.IPackageInstallerCallback)>
<com.android.systemui.statusbar.phone.PanelBar: void onFinishInflate()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isIsolatedSplitLoading()>
<com.android.systemui.qs.carrier.QSCarrier: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.statusbar.NavigationBarController: void onDisplayReady(int)>
<com.android.server.testing.shadows.ShadowSlog: int i(java.lang.String,java.lang.String,java.lang.Throwable)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGenxv(int,int,java.nio.IntBuffer)>
<com.android.systemui.qs.QSPanel: void setTiles(java.util.Collection,boolean)>
<com.android.server.trust.TrustAgentWrapper: boolean isConnected()>
<com.android.server.signedconfig.SignedConfig: com.android.server.signedconfig.SignedConfig.PerSdkConfig getMatchingConfig(int)>
<com.android.systemui.statusbar.policy.KeyButtonRipple: boolean isStateful()>
<android.net.wifi.WifiScanner.ParcelableScanData: android.net.wifi.WifiScanner.ScanData[] getResults()>
<com.android.powermodel.PowerReport: com.android.powermodel.AppPower findApp(com.android.powermodel.SpecialApp)>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifLifetimeExtender.OnEndLifetimeExtensionCallback: void onEndLifetimeExtension(com.android.systemui.statusbar.notification.collection.notifcollection.NotifLifetimeExtender,com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.networkstack.tethering.BpfCoordinator.Ipv6ForwardingRule: void <init>(int,int,java.net.Inet6Address,android.net.MacAddress,android.net.MacAddress)>
<com.android.settingslib.media.ConnectionRecordManager: void fetchLastSelectedDevice(android.content.Context)>
<com.android.server.autofill.AutofillManagerServiceShellCommand: void onHelp()>
<com.android.keyguard.clock.AnalogClockController: android.graphics.Bitmap getPreview(int,int)>
<com.android.server.soundtrigger_middleware.ISoundTriggerHw2: java.lang.String interfaceDescriptor()>
<com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder: com.android.systemui.statusbar.policy.ExtensionController.ExtensionBuilder withDefault(java.util.function.Supplier)>
<com.android.systemui.util.concurrency.ExecutorImpl: java.lang.Runnable executeDelayed(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
<com.android.systemui.statusbar.policy.RotationLockController.RotationLockControllerCallback: void onRotationLockStateChanged(boolean,boolean)>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean handleRoutingInformation(com.android.server.hdmi.HdmiCecMessage)>
<com.android.systemui.util.InjectionInflationController: android.view.LayoutInflater injectable(android.view.LayoutInflater)>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void onDraw(android.graphics.Canvas)>
<com.android.systemui.media.ResumeMediaBrowser.Callback: void onError()>
<com.android.systemui.statusbar.policy.FlashlightController: boolean hasFlashlight()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void updateSectionBoundaries(java.lang.String)>
<com.android.systemui.qs.tileimpl.SlashImageView: void <init>(android.content.Context)>
<com.android.systemui.car.window.SystemUIOverlayWindowController: boolean isWindowFocusable()>
<com.android.server.pm.InstructionSets: java.lang.String[] getAppDexInstructionSets(java.lang.String,java.lang.String)>
<android.widget.EditTextCursorMovementPerfTest: java.util.Collection cases()>
<com.android.server.audio.AudioService: void startBluetoothSco(android.os.IBinder,int)>
<com.android.systemui.shared.recents.model.Task.TaskCallbacks: void onTaskDataUnloaded()>
<com.android.systemui.classifier.SpeedAnglesClassifier: float getFalseTouchEvaluation(int,com.android.systemui.classifier.Stroke)>
<android.net.wifi.p2p.WifiP2pDeviceList: android.net.wifi.p2p.WifiP2pDevice remove(java.lang.String)>
<com.android.server.pm.PackageManagerServiceUtils: java.io.File[] getCompressedFiles(java.lang.String)>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalTxBad()>
<android.net.wifi.WifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)>
<com.android.printspooler.ui.PrinterRegistry: void <init>(android.app.Activity,java.lang.Runnable,int,int)>
<android.net.wifi.WifiManager: void deauthenticateNetwork(long,boolean)>
<android.net.wifi.WifiManager: void <init>(android.content.Context,android.net.wifi.IWifiManager,android.os.Looper)>
<com.android.printspooler.ui.PageAdapter.PreviewArea: void setPadding(int,int,int,int)>
<com.android.server.appprediction.AppPredictionPerUserService: void onFailureOrTimeout(boolean)>
<android.net.wifi.ScanResult: void setWifiStandard(int)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: void destroy()>
<com.android.systemui.statusbar.policy.RemoteInputView: void setRemoteInput(android.app.RemoteInput[],android.app.RemoteInput,com.android.systemui.statusbar.notification.collection.NotificationEntry.EditedSuggestionInfo)>
<com.android.systemui.screenrecord.RecordingService: void onInfo(android.media.MediaRecorder,int,int)>
<com.android.server.biometrics.face.FaceUserState: void addBiometric(android.hardware.biometrics.BiometricAuthenticator.Identifier)>
<com.android.settingslib.animation.AppearAnimationUtils: void <init>(android.content.Context,long,float,float,android.view.animation.Interpolator)>
<com.android.server.tv.tunerresourcemanager.CasResource: boolean isFullyUsed()>
<android.net.wifi.WifiManager: void watchLocalOnlyHotspot(android.net.wifi.WifiManager.LocalOnlyHotspotObserver,android.os.Handler)>
<com.android.systemui.statusbar.phone.EdgeBackGestureHandler: void onDisplayRemoved(int)>
<com.android.systemui.settings.CurrentUserObservable: androidx.lifecycle.LiveData getCurrentUser()>
<android.perftests.SystemPerfTest: void testJniArrayCriticalAccess()>
<com.android.server.pm.AppsFilter.StateProvider.CurrentStateCallback: void currentState(android.util.ArrayMap,android.content.pm.UserInfo[])>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setCoreApp(boolean)>
<com.android.server.PinnerService: void onStart()>
<com.android.server.storage.StorageUserConnection: void close()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void setShowingAod(boolean)>
<com.android.settingslib.deviceinfo.StorageMeasurement: void measure()>
<com.android.powermodel.component.ModemProfile.Builder: void setScanningMa(float)>
<android.net.wifi.WifiScanner.ScanData: int getBucketsScanned()>
<com.android.settingslib.notification.EnableZenModeDialog: void bindGenericCountdown()>
<com.android.server.people.data.ConversationInfo: boolean isBubbled()>
<com.android.server.AppStateTracker.Listener: void onUidForeground(int,boolean)>
<android.net.wifi.p2p.WifiP2pManager.Channel: void close()>
<com.android.server.pm.UserManagerService: int getProfileParentId(int)>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void initRecoveryServiceWithSigFile(java.lang.String,byte[],byte[])>
<com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback: void cancelSave()>
<android.app.PendingIntentPerfTest: void create()>
<com.android.gallery3d.glrenderer.UploadedTexture: void invalidateContent()>
<com.android.systemui.statusbar.policy.MobileSignalController: void handleBroadcast(android.content.Intent)>
<com.android.server.tv.tunerresourcemanager.ClientProfile: void releaseLnb(int)>
<com.android.companiondevicemanager.DeviceDiscoveryService: android.os.IBinder onBind(android.content.Intent)>
<com.android.gallery3d.glrenderer.UploadedTexture: void resetUploadLimit()>
<com.android.server.audio.AudioService: java.util.List getActiveRecordingConfigurations()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: com.android.systemui.statusbar.notification.TransformState getCurrentState(int)>
<com.android.systemui.pip.PipSnapAlgorithm: void getMovementBounds(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,int)>
<com.android.server.appwidget.AppWidgetService: void onSwitchUser(int)>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper.Callback: void onIconClicked(boolean)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)>
<com.android.uiautomator.core.UiScrollable: boolean scrollTextIntoView(java.lang.String)>
<com.android.systemui.qs.QuickQSPanel: com.android.systemui.qs.QSPanel.QSTileLayout createHorizontalTileLayout()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isRestoreAnyVersion()>
<com.android.server.statusbar.StatusBarManagerService: void clearNotificationEffects()>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setDimmed(boolean)>
<com.android.printspooler.ui.SelectPrinterActivity: void onLoadFinished(android.content.Loader,java.util.List)>
<com.android.systemui.pip.phone.PipMenuActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.statusbar.notification.InstantAppNotifier: void onKeyguardShowingChanged()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: void disconnect(com.android.settingslib.bluetooth.LocalBluetoothProfile)>
<com.android.systemui.globalactions.GlobalActionsGridLayout: void removeAllListViews()>
<com.android.systemui.statusbar.phone.StatusBar: void startActivityDismissingKeyguard(android.content.Intent,boolean,boolean,int)>
<com.android.settingslib.wifi.WifiTracker.WifiListener: void onWifiStateChanged(int)>
<com.android.systemui.statusbar.phone.StatusBar: android.view.ViewGroup getBouncerContainer()>
<com.android.systemui.car.navigationbar.CarNavigationBarView: void showKeyguardButtons()>
<com.android.systemui.statusbar.phone.NotificationGroupManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.notification.row.NotificationContentInflater.AsyncInflationTask: void abort()>
<com.android.server.stats.StatsCompanionService: void setPullingAlarm(long)>
<com.android.keyguard.KeyguardPINView: void onFinishInflate()>
<com.android.keyguard.clock.DefaultClockController: void setDarkAmount(float)>
<com.android.systemui.qs.customize.TileAdapter: androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup getSizeLookup()>
<com.android.server.utils.quota.UptcMap.UptcDataConsumer: void accept(int,java.lang.String,java.lang.String,java.lang.Object)>
<com.android.systemui.shared.recents.model.Task.TaskKey: java.lang.String getPackageName()>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String toString()>
<com.android.systemui.analytics.DataCollector: void onNotificatonStartDraggingDown()>
<com.android.systemui.assist.AssistManager: android.content.ComponentName getAssistInfoForUser(int)>
<com.android.server.hdmi.HdmiCecController.NativeWrapper: void setCallback(com.android.server.hdmi.HdmiCecController.HdmiCecCallback)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setExpandable(boolean)>
<com.android.systemui.media.MediaControlPanel: void setListening(boolean)>
<com.android.printspooler.model.RemotePrintDocument: void clearUpdateError()>
<com.android.systemui.statusbar.ViewTransformationHelper.CustomTransformation: boolean initTransformation(com.android.systemui.statusbar.notification.TransformState,com.android.systemui.statusbar.notification.TransformState)>
<com.android.keyguard.KeyguardPasswordView: void onFinishInflate()>
<com.android.settingslib.widget.BarChartPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getSeInfoUser()>
<com.android.systemui.qs.QSTileHost: void removeCallback(android.os.Handler.Callback)>
<com.android.server.pm.IntentFilterVerificationState: boolean isVerificationComplete()>
<com.android.server.locksettings.recoverablekeystore.SecureBox: java.security.KeyPair genKeyPair()>
<com.android.server.om.OverlayReferenceMapper: java.util.Map getActorPkgToPkgs()>
<android.os.IStatsCompanionService: void setAnomalyAlarm(long)>
<com.android.systemui.statusbar.notification.collection.ListEntry: com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.NotifSection getNotifSection()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: void setName(java.lang.String)>
<com.android.systemui.qs.PagedTileLayout: int getColumnCount()>
<com.android.uiautomator.core.UiDevice: void setOrientationRight()>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: float getIncreasedPaddingAmount()>
<com.android.server.policy.GlobalActionsProvider: void setGlobalActionsListener(com.android.server.policy.GlobalActionsProvider.GlobalActionsListener)>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy: void <init>(android.content.Context,com.android.systemui.statusbar.phone.StatusBarIconController)>
<android.media.BufferingParams: int getInitialMarkMs()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void bindRow(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.statusbar.policy.UserSwitcherController.BaseUserAdapter: int getCount()>
<com.android.systemui.statusbar.notification.stack.AnimationProperties: com.android.systemui.statusbar.notification.stack.AnimationProperties setDelay(long)>
<com.android.server.usb.UsbDeviceManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory,com.android.server.usb.UsbUserPermissionManager,int)>
<com.android.systemui.car.navigationbar.CarNavigationBar: void start()>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setSeInfoUser(java.lang.String)>
<com.android.settingslib.location.SettingsInjector: void logPreferenceClick(android.content.Intent)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: boolean isShowing()>
<android.net.wifi.p2p.WifiP2pDevice: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean shouldGestureWaitForTouchSlop()>
<com.android.systemui.statusbar.phone.LightBarTransitionsController.DarkIntensityApplier: void applyDarkIntensity(float)>
<android.net.wifi.WifiScanner.WifiChangeListener: void onChanging(android.net.wifi.ScanResult[])>
<com.android.systemui.statusbar.notification.NotificationClicker.Builder: com.android.systemui.statusbar.notification.NotificationClicker build(java.util.Optional,com.android.systemui.statusbar.notification.NotificationActivityStarter)>
<com.android.printservice.recommendation.util.DiscoveryListenerMultiplexer: boolean removeListener(android.net.nsd.NsdManager,android.net.nsd.NsdManager.DiscoveryListener)>
<com.android.settingslib.deviceinfo.AbstractUptimePreferenceController: java.lang.String getPreferenceKey()>
<com.android.photos.views.TiledImageRenderer: void setModel(com.android.photos.views.TiledImageRenderer.TileSource,int)>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.settingslib.widget.AppEntitiesHeaderController: void apply()>
<android.net.ip.IpClientCallbacks: void setFallbackMulticastFilter(boolean)>
<com.android.wallpapercropper.WallpaperCropActivity: android.graphics.Point getDefaultWallpaperSize(android.content.res.Resources,android.view.Display)>
<android.multiuser.UserLifecycleTests: void createUser()>
<com.android.server.biometrics.BiometricServiceBase: void initConfiguredStrengthInternal(int)>
<android.net.wifi.WifiManager: int getMaxNumberOfNetworkSuggestionsPerApp()>
<com.android.server.pm.AbstractStatsBase: void read(java.lang.Object)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: android.net.Uri reportRejectedTouch()>
<com.android.server.pm.UserManagerService: long getUserUnlockRealtime()>
<com.android.server.soundtrigger.SoundTriggerDbHelper: android.hardware.soundtrigger.SoundTrigger.GenericSoundModel getGenericSoundModel(java.util.UUID)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isLastMessageFromReply()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setSecondaryLockscreenEnabled(android.content.ComponentName,boolean)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: boolean shouldUseDefaultMenuItems()>
<android.net.NetworkStackClient.Dependencies: void checkCallerUid()>
<com.android.server.slice.SliceClientPermissions.SliceAuthority: void writeTo(org.xmlpull.v1.XmlSerializer)>
<com.android.systemui.qs.tiles.CellularTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.statusbar.policy.NetworkController,com.android.systemui.plugins.ActivityStarter)>
<com.android.server.usb.descriptors.UsbVCProcessingUnit: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<javax.obex.PasswordAuthentication: void <init>(byte[],byte[])>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void dump(java.lang.String,java.io.PrintWriter)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setSnapshotVersion(int,int,long)>
<com.android.systemui.statusbar.phone.StatusBar: boolean isKeyguardSecure()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setDimmed(boolean,boolean)>
<com.android.server.pm.PackageManagerService.ScanPartition: void <init>(android.content.pm.PackagePartitions.SystemPartition)>
<android.net.wifi.p2p.WifiP2pWfdInfo: void setContentProtectionSupported(boolean)>
<android.net.wifi.WifiManager: void setMacRandomizationSettingPasspointEnabled(java.lang.String,boolean)>
<com.android.server.testing.shadows.ShadowSlog: int v(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.text.StaticLayoutPerfTest: void testCreate_RandomText_NoStyled_Greedy_NoHyphenation()>
<com.android.server.pm.permission.PermissionManagerService: java.util.List getAutoRevokeExemptionGrantedPackages(int)>
<com.android.server.statusbar.StatusBarManagerInternal: void showPictureInPictureMenu()>
<com.android.keyguard.KeyguardSliceView: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.pm.PackageInstallerSession: void markUpdated()>
<com.android.systemui.statusbar.notification.NotificationDozeHelper: void updateGrayscale(android.widget.ImageView,boolean)>
<com.android.server.people.data.DataManager: void initialize()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: void removeCallback(com.android.systemui.statusbar.policy.NetworkController.SignalCallback)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void setSwitchingUser(boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean keepInParent()>
<android.net.wifi.WifiManager: void setDeviceMobilityState(int)>
<com.android.systemui.bubbles.BubbleData: boolean hasBubbles()>
<com.android.systemui.ScreenDecorations.DisplayCutoutView: android.graphics.Region getInterceptRegion()>
<com.android.systemui.statusbar.phone.PanelViewController: boolean isPanelVisibleBecauseOfHeadsUp()>
<android.provider.settings.validators.Validator: boolean validate(java.lang.String)>
<com.android.systemui.SwipeHelper.Callback: void onChildDismissed(android.view.View)>
<com.android.server.pm.AppsFilter: void onSystemReady()>
<com.android.server.locksettings.recoverablekeystore.certificate.SigXml: com.android.server.locksettings.recoverablekeystore.certificate.SigXml parse(byte[])>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void updateState(com.android.systemui.statusbar.notification.stack.ExpandableViewState,com.android.systemui.statusbar.notification.stack.AmbientState)>
<com.android.systemui.statusbar.policy.AccessPointControllerImpl: void onWifiStateChanged(int)>
<com.android.systemui.statusbar.AlphaOptimizedView: void <init>(android.content.Context)>
<android.net.wifi.IWifiManager: void allowAutojoinPasspoint(java.lang.String,boolean)>
<android.util.StatsEvent.Builder: android.util.StatsEvent.Builder writeBoolean(boolean)>
<com.android.settingslib.applications.ApplicationsState: void requestSize(java.lang.String,int)>
<com.android.settingslib.CustomEditTextPreferenceCompat.CustomPreferenceDialogFragment: com.android.settingslib.CustomEditTextPreferenceCompat.CustomPreferenceDialogFragment newInstance(java.lang.String)>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isPulsing(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.bluetoothmidiservice.PacketEncoder.PacketReceiver: void writePacket(byte[],int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setSbn(android.service.notification.StatusBarNotification)>
<com.android.systemui.statusbar.phone.ScrimController: void transitionTo(com.android.systemui.statusbar.phone.ScrimState)>
<com.android.server.pm.permission.PermissionsState.PermissionState: void <init>(java.lang.String)>
<com.android.server.audio.AudioService: int getStreamMinVolume(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: int getVisibleNotificationCount()>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getOverrideApns(android.content.ComponentName)>
<com.android.gallery3d.exif.ExifInterface: boolean isThumbnailCompressed()>
<com.android.server.ExtconUEventObserver.ExtconInfo: java.lang.String getName()>
<com.android.systemui.statusbar.notification.AboveShelfObserver: void <init>(android.view.ViewGroup)>
<com.android.systemui.pip.phone.PipManager: void onPipTransitionStarted(android.content.ComponentName,int)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareService.Lifecycle: void <init>(android.content.Context)>
<com.android.systemui.shared.system.TransactionCompat: void apply()>
<com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException: void <init>(java.lang.String)>
<com.android.server.autofill.ui.AutoFillUI: void hideAll(com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback)>
<com.android.systemui.qs.QSPanel: com.android.systemui.qs.QSEvent closePanelEvent()>
<com.android.systemui.shared.system.WallpaperManagerCompat: void <init>(android.content.Context)>
<com.android.systemui.statusbar.policy.HeadsUpManager: void onAlertEntryRemoved(com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry)>
<com.android.location.provider.ActivityChangedEvent: void <init>(java.util.List)>
<com.android.systemui.util.InjectionInflationController: void <init>(com.android.systemui.dagger.SystemUIRootComponent)>
<com.android.server.search.Searchables: void updateSearchableList()>
<android.net.wifi.WifiInfo: void setProviderFriendlyName(java.lang.String)>
<android.media.MediaSession2: android.media.Session2Token getToken()>
<com.android.systemui.classifier.FalsingManagerImpl: void onSuccessfulUnlock()>
<com.android.systemui.statusbar.phone.LockscreenLockIconController: void setTransientBiometricsError(boolean)>
<com.android.settingslib.drawer.Tile: int describeContents()>
<com.android.systemui.volume.VolumeDialogControllerImpl: android.media.AudioManager getAudioManager()>
<com.android.server.media.MediaSessionRecord: java.lang.String getPackageName()>
<com.android.server.usb.descriptors.UsbVCHeaderInterface: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.systemui.qs.tiles.BatterySaverTile: void handleUserSwitch(int)>
<android.os.ParcelArrayPerfTest: void tearDown()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getIconRes()>
<com.android.printservice.recommendation.plugin.mdnsFilter.VendorConfig.TagReader: java.lang.Object readTag(org.xmlpull.v1.XmlPullParser,java.lang.String)>
<com.android.systemui.stackdivider.Divider: void start()>
<com.android.location.provider.LocationProviderBase: void <init>(java.lang.String,com.android.location.provider.ProviderPropertiesUnbundled)>
<com.android.systemui.shared.system.WindowCallbacksCompat: void onRequestDraw(boolean)>
<com.android.gallery3d.glrenderer.BitmapTexture: android.graphics.Bitmap onGetBitmap()>
<com.android.systemui.car.userswitcher.UserGridRecyclerView.UserAdapter: void onClick(android.content.DialogInterface,int)>
<com.android.uiautomator.core.UiDevice: boolean swipe(android.graphics.Point[],int)>
<android.net.wifi.aware.IWifiAwareDiscoverySessionCallback: void onMatchWithDistance(int,byte[],byte[],int)>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void onDestroy()>
<com.android.settingslib.bluetooth.PbapClientProfile: boolean isProfileReady()>
<com.android.server.NetworkManagementService: boolean setDataSaverModeEnabled(boolean)>
<com.android.server.pm.UserManagerService: int getUserBadgeNoBackgroundResId(int)>
<android.net.wifi.rtt.CivicLocation: android.location.Address toAddress()>
<com.android.systemui.qs.tiles.UserDetailItemView: void bind(java.lang.String,android.graphics.drawable.Drawable,int)>
<android.net.TetheringManager.TetheringRequest.Builder: void <init>(int)>
<com.android.server.usb.UsbService: void setCurrentFunctions(long)>
<com.android.server.storage.AppCollector: java.util.List getPackageStats(long)>
<com.android.systemui.qs.PseudoGridView: void onMeasure(int,int)>
<com.android.systemui.keyguard.DismissCallbackWrapper: void notifyDismissError()>
<android.net.wifi.aware.WifiAwareAgentNetworkSpecifier: void <init>(android.net.wifi.aware.WifiAwareNetworkSpecifier[])>
<com.android.systemui.biometrics.AuthBiometricView: void onHelp(java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.timezonedetector.ArrayMapWithHistory: java.lang.Object valueAt(int)>
<com.android.systemui.statusbar.CrossFadeHelper: void fadeOut(android.view.View,float,boolean)>
<com.android.server.statusbar.StatusBarManagerService: com.android.internal.statusbar.RegisterStatusBarResult registerStatusBar(com.android.internal.statusbar.IStatusBar)>
<com.android.gallery3d.glrenderer.UploadedTexture: boolean isContentValid()>
<com.android.settingslib.applications.ApplicationsState.AppFilter: void init(android.content.Context)>
<com.android.server.NetworkManagementService: void addLegacyRouteForNetId(int,android.net.RouteInfo,int)>
<com.android.systemui.statusbar.ScrimView: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.stack.SectionHeaderView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.phone.NotificationListenerWithPlugins: void onPluginConnected()>
<com.android.systemui.qs.QSPanel: android.view.View getDivider()>
<com.android.server.vr.EnabledComponentsObserver: android.util.ArraySet loadComponentNames(android.content.pm.PackageManager,int,java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.notification.collection.coordinator.NotifCoordinators: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.phone.StatusBar: boolean isExpandedVisible()>
<com.android.server.pm.parsing.library.PackageBackwardCompatibility: com.android.server.pm.parsing.library.PackageSharedLibraryUpdater getInstance()>
<com.android.systemui.pip.phone.PipAccessibilityInteractionConnection: void performAccessibilityAction(long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: boolean isLockscreenPublicMode(int)>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void onRecordingEnd()>
<javax.microedition.khronos.opengles.GL11: void glGetLightfv(int,int,java.nio.FloatBuffer)>
<com.android.server.policy.WindowManagerPolicy.WindowState: android.graphics.Rect getVisibleFrameLw()>
<com.android.printspooler.ui.AddPrinterActivity: void onDestroy()>
<com.android.settingslib.core.lifecycle.ObservablePreferenceFragment: void onAttach(android.content.Context)>
<com.android.server.biometrics.face.FaceUserState: java.util.ArrayList getCopy(java.util.ArrayList)>
<com.android.server.timezone.PackageTracker: void triggerUpdateIfNeeded(boolean)>
<com.android.server.NetworkScorerAppManager.SettingsFacade: java.lang.String getString(android.content.Context,java.lang.String)>
<com.android.server.accessibility.MagnificationController: void onDisplayRemoved(int)>
<com.android.systemui.statusbar.notification.row.FooterView: void onFinishInflate()>
<com.android.settingslib.media.LocalMediaManager: java.util.List getSelectableMediaDevice()>
<com.android.server.policy.keyguard.KeyguardStateMonitor: void setCurrentUser(int)>
<com.android.keyguard.KeyguardSliceView: void onChanged(androidx.slice.Slice)>
<com.android.server.usb.descriptors.UsbVCHeaderInterface: int getTotalLength()>
<com.android.server.pm.DumpState: boolean getTitlePrinted()>
<android.net.wifi.WifiManager: boolean setEnableAutoJoinWhenAssociated(boolean)>
<com.android.systemui.statusbar.phone.StatusBar: boolean isBouncerShowingScrimmed()>
<com.android.systemui.statusbar.notification.row.RowContentBindParams: void setUseIncreasedCollapsedHeight(boolean)>
<com.android.systemui.tuner.TunerService: void setValue(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void updateChildrenHeaderAppearance()>
<android.net.wifi.hotspot2.PasspointConfiguration: android.net.wifi.hotspot2.pps.Policy getPolicy()>
<com.android.systemui.statusbar.notification.TransformState: void recycle()>
<com.android.systemui.egg.MLand: int pick(int[])>
<com.android.server.people.data.PackageData: boolean isDefaultDialer()>
<com.android.server.pm.UserTypeDetails: boolean isEnabled()>
<com.android.server.pm.UserManagerService: boolean canAddMoreProfilesToUser(java.lang.String,int,boolean)>
<com.android.server.biometrics.BiometricServiceBase: void handleRemoved(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRowController: void init()>
<com.android.systemui.plugins.OverlayPlugin: boolean holdStatusBarOpen()>
<com.android.systemui.car.userswitcher.UserGridRecyclerView.UserAdapter: void updateUsers(java.util.List)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean canShowHeadsUp()>
<com.android.server.IpSecService: void <init>(android.content.Context,android.os.INetworkManagementService,com.android.server.IpSecService.IpSecServiceConfiguration,com.android.server.IpSecService.UidFdTagger)>
<com.android.systemui.car.userswitcher.UserGridRecyclerView.UserAdapter: void clearUsers()>
<com.android.server.ConnectivityService: void factoryReset()>
<android.media.filterfw.samples.CameraEffectsRecordingSample: boolean onKeyDown(int,android.view.KeyEvent)>
<com.android.systemui.statusbar.notification.TextViewTransformState: boolean sameAs(com.android.systemui.statusbar.notification.TransformState)>
<com.android.systemui.MultiListLayout: void setRotationListener(com.android.systemui.MultiListLayout.RotationListener)>
<com.android.systemui.shared.plugins.PluginManager: void removePluginListener(com.android.systemui.plugins.PluginListener)>
<javax.obex.PrivateOutputStream: boolean isClosed()>
<com.android.systemui.plugins.qs.QSTile: void refreshState()>
<com.android.systemui.globalactions.GlobalActionsColumnLayout: void updateSnap()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: int getMinHeight(boolean)>
<com.android.systemui.statusbar.notification.stack.AnimationFilter: com.android.systemui.statusbar.notification.stack.AnimationFilter animateAlpha()>
<com.android.server.display.utils.History: void <init>(int)>
<com.android.server.role.RoleUserState: java.util.List getHeldRoles(java.lang.String)>
<com.android.settingslib.media.MediaDevice: void setState(int)>
<com.android.server.ConnectivityService: void setAirplaneMode(boolean)>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean canAddInternalSystemWindow()>
<com.android.systemui.statusbar.policy.KeyguardStateController: boolean isMethodSecure()>
<com.android.systemui.statusbar.phone.MultiUserSwitch: com.android.systemui.plugins.qs.DetailAdapter getUserDetailAdapter()>
<android.provider.settings.validators.DiscreteValueValidator: boolean validate(java.lang.String)>
<com.android.server.adb.AdbDebuggingManager: void setAdbEnabled(boolean,byte)>
<com.android.settingslib.location.InjectedSetting: android.content.Intent getServiceIntent()>
<com.android.systemui.bubbles.BubbleTaskView: void finalize()>
<com.android.server.webkit.SystemInterface: void setMultiProcessSetting(android.content.Context,int)>
<com.android.systemui.plugins.qs.QSTile: void longClick()>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onScreenTurnedOn()>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void setSignalIcon(java.lang.String,com.android.systemui.statusbar.phone.StatusBarSignalPolicy.WifiIconState)>
<com.android.server.autofill.AutofillManagerServiceShellCommand: void <init>(com.android.server.autofill.AutofillManagerService)>
<com.android.systemui.statusbar.phone.NotificationGroupManager: com.android.systemui.statusbar.notification.collection.NotificationEntry getLogicalGroupSummary(android.service.notification.StatusBarNotification)>
<android.content.pm.PackageManagerInternal: int getApplicationEnabledState(java.lang.String,int)>
<com.android.systemui.plugins.FalsingManager: void onUnlockHintStarted()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onLayout(boolean,int,int,int,int)>
<com.android.server.SystemUpdateManagerService: void updateSystemUpdateInfo(android.os.PersistableBundle)>
<com.android.systemui.statusbar.policy.HotspotController: boolean isHotspotSupported()>
<com.android.server.appop.AppOpsService: int noteOperation(int,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>
<com.android.printspooler.ui.PrintProgressFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.android.media.remotedisplay.RemoteDisplay: java.lang.String getDescription()>
<com.android.server.usb.descriptors.Usb20ACHeader: byte getControls()>
<com.android.server.pm.PackageManagerService: boolean setBlockUninstallForUser(java.lang.String,boolean,int)>
<com.android.server.pm.ShortcutService.Lifecycle: void onStart()>
<com.android.keyguard.KeyguardSecurityContainer.SecurityCallback: void onSecurityModeChanged(com.android.keyguard.KeyguardSecurityModel.SecurityMode,boolean)>
<com.android.server.pm.ShortcutBitmapSaver: void saveBitmapLocked(android.content.pm.ShortcutInfo,int,android.graphics.Bitmap.CompressFormat,int)>
<com.android.server.pm.PackageDexOptimizer.ForcedUpdatePackageDexOptimizer: int adjustDexoptFlags(int)>
<com.android.systemui.bubbles.BubbleStackView: void onComputeInternalInsets(android.view.ViewTreeObserver.InternalInsetsInfo)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onFinishedWakingUp()>
<com.android.settingslib.wifi.AccessPoint: boolean isSaved()>
<android.media.MediaController2.Builder: android.media.MediaController2.Builder setControllerCallback(java.util.concurrent.Executor,android.media.MediaController2.ControllerCallback)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: boolean isMenuSnappedOnLeft()>
<android.net.wifi.WifiManager.TrafficStateCallback: void onStateChanged(int)>
<com.android.systemui.car.hvac.HvacController: void removeAllComponents()>
<com.android.systemui.statusbar.notification.logging.NotificationPanelLogger: int toNotificationSection(int)>
<com.android.systemui.analytics.DataCollector: void onStartExpandingFromPulse()>
<com.android.settingslib.applications.ApplicationsState.CompoundFilter: void init(android.content.Context)>
<android.util.StatsEvent.Builder: android.util.StatsEvent.Builder addIntAnnotation(byte,int)>
<com.android.server.tv.tunerresourcemanager.FrontendResource: java.util.Set getExclusiveGroupMemberFeIds()>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.util.List getAllCodePathsExcludingResourceOnly(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.systemui.globalactions.GlobalActionsDialog.EmergencyAction: boolean showBeforeProvisioning()>
<com.android.server.pm.permission.BasePermission: boolean isAppOp()>
<com.android.systemui.settings.BrightnessController: void onChanged(com.android.systemui.settings.ToggleSlider,boolean,boolean,int,boolean)>
<com.android.settingslib.display.BrightnessUtils: int convertLinearToGammaFloat(float,float,float)>
<com.android.systemui.statusbar.policy.HeadsUpManager.HeadsUpEntry: long calculatePostTime()>
<com.android.settingslib.deviceinfo.AbstractWifiMacAddressPreferenceController: boolean isAvailable()>
<com.android.systemui.car.keyguard.CarKeyguardViewController: int getFocusAreaViewId()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void onNotificationUpdated(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.settingslib.widget.RadioButtonPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.media.MediaSessionRecordImpl: int getSessionPolicies()>
<android.net.wifi.WifiScanner: void startDisconnectedPnoScan(android.net.wifi.WifiScanner.ScanSettings,android.net.wifi.WifiScanner.PnoSettings,java.util.concurrent.Executor,android.net.wifi.WifiScanner.PnoScanListener)>
<com.android.systemui.car.navigationbar.CarNavigationButton: void setAppIcon(android.graphics.drawable.Drawable)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserOrProfilePermission(int,int,boolean,boolean,java.lang.String)>
<com.android.systemui.statusbar.dagger.StatusBarDependenciesModule: com.android.systemui.statusbar.SmartReplyController provideSmartReplyController(com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.internal.statusbar.IStatusBarService,com.android.systemui.statusbar.NotificationClickNotifier)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: void setMenuItems(java.util.ArrayList)>
<com.android.systemui.tuner.TunerService: boolean isTunerEnabled(android.content.Context)>
<com.android.systemui.statusbar.phone.NavigationBarView: void updateNavButtonIcons()>
<com.android.systemui.pip.tv.PipManager: void onPipTransitionCanceled(android.content.ComponentName,int)>
<com.android.systemui.pip.PipTaskOrganizer: void exitPip(int)>
<com.android.server.accessibility.AbstractAccessibilityServiceConnection.SystemSupport: void persistComponentNamesToSettingLocked(java.lang.String,java.util.Set,int)>
<com.android.server.vr.VrStateListener: void onVrStateChanged(boolean)>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int getVersion()>
<com.android.server.HardwarePropertiesManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.notification.row.ExpandableView: com.android.systemui.statusbar.notification.stack.ExpandableViewState resetViewState()>
<com.android.systemui.statusbar.notification.row.NotificationGutsManager: void setExposedGuts(com.android.systemui.statusbar.notification.row.NotificationGuts)>
<com.android.server.testing.shadows.ShadowKeyValueBackupTask: com.android.server.testing.shadows.ShadowKeyValueBackupTask getLastCreated()>
<com.android.settingslib.core.lifecycle.ObservablePreferenceFragment: void onPrepareOptionsMenu(android.view.Menu)>
<com.android.systemui.qs.tiles.FlashlightTile: boolean isAvailable()>
<com.android.systemui.classifier.FalsingManagerFake: void onTrackingStopped()>
<com.android.systemui.media.ResumeMediaBrowser: android.app.PendingIntent getAppIntent()>
<android.os.ParcelArrayPerfTest: void timeWriteLongArray()>
<android.net.wifi.p2p.WifiP2pManager: void getNfcHandoverSelect(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.HandoverMessageListener)>
<com.android.systemui.power.EnhancedEstimatesImpl: boolean isHybridNotificationEnabled()>
<com.android.keyguard.KeyguardViewController: boolean isGoingToNotificationShade()>
<com.android.systemui.egg.MLand: int getGameHeight()>
<android.content.pm.PackageManagerInternal: boolean isPackageDataProtected(int,java.lang.String)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void showPictureInPictureMenu()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationTemplateViewWrapper: boolean disallowSingleClick(float,float)>
<com.android.server.input.InputManagerService.WindowManagerCallbacks: void notifyInputChannelBroken(android.os.IBinder)>
<android.util.ArraySetPerfTest: void testRemoveIf_Small_Base()>
<android.net.wifi.WpsInfo: java.lang.String toString()>
<com.android.systemui.car.userswitcher.FullscreenUserSwitcherViewMediator: void registerListeners()>
<com.android.systemui.statusbar.phone.NotificationGroupManager: boolean isGroupExpanded(android.service.notification.StatusBarNotification)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glCopyTexImage2D(int,int,int,int,int,int,int,int)>
<com.android.systemui.qs.tileimpl.QSTileImpl.DrawableIcon: java.lang.String toString()>
<com.android.uiautomator.core.Tracer: void setOutputFilename(java.lang.String)>
<com.android.server.statusbar.StatusBarManagerService: void expandNotificationsPanel()>
<com.android.server.pm.InstantAppResolver: android.content.Intent sanitizeIntent(android.content.Intent)>
<com.android.systemui.plugins.qs.DetailAdapter: com.android.internal.logging.UiEventLogger.UiEventEnum openDetailEvent()>
<android.view.autofill.LoginTest: void testChange_serviceDoesNotAutofill()>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: boolean isDeviceInVrMode()>
<com.android.server.policy.PhoneWindowManager: boolean hasNavigationBar()>
<com.android.server.usb.descriptors.UsbHIDDescriptor: int getDescriptorLen()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBlendFuncSeparate(int,int,int,int)>
<android.net.wifi.RttManager.RttCapabilities: java.lang.String toString()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setAlpha(float)>
<com.android.systemui.volume.ZenModePanel: void init(com.android.systemui.statusbar.policy.ZenModeController)>
<android.net.util.NetdService: android.net.INetd getInstance()>
<com.android.printspooler.model.RemotePrintDocument: boolean isDestroyed()>
<com.android.systemui.stackdivider.DividerView: void injectDependencies(com.android.systemui.stackdivider.DividerWindowManager,com.android.systemui.stackdivider.DividerState,com.android.systemui.stackdivider.DividerView.DividerCallbacks,com.android.systemui.stackdivider.SplitScreenTaskOrganizer,com.android.systemui.stackdivider.SplitDisplayLayout,com.android.systemui.stackdivider.DividerImeController,com.android.systemui.stackdivider.WindowManagerProxy)>
<com.android.uiautomator.core.UiAutomatorBridge: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()>
<com.android.server.storage.AppFuseBridge: android.os.ParcelFileDescriptor openFile(int,int,int)>
<com.android.server.integrity.parser.RuleIndexRange: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void applyExpandAnimationParams(com.android.systemui.statusbar.notification.ActivityLaunchAnimator.ExpandAnimationParameters)>
<com.android.systemui.ActivityIntentHelper: void <init>(android.content.Context)>
<com.android.settingslib.bluetooth.LocalBluetoothProfile: boolean setEnabled(android.bluetooth.BluetoothDevice,boolean)>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void handleRoutingChangeAndInformation(int,com.android.server.hdmi.HdmiCecMessage)>
<com.android.systemui.media.dialog.MediaOutputBaseAdapter: void <init>(com.android.systemui.media.dialog.MediaOutputController)>
<com.android.systemui.tuner.ShortcutPicker: void onActivityCreated(android.os.Bundle)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setAnimationsEnabled(boolean)>
<com.android.keyguard.KeyguardSecurityView: void showPromptReason(int)>
<com.android.server.media.MediaSessionRecord: boolean isSystemPriority()>
<com.android.server.accessibility.EventStreamTransformation: void clearEvents(int)>
<com.android.server.locksettings.SyntheticPasswordManager: com.android.server.locksettings.SyntheticPasswordManager.AuthenticationToken newSyntheticPasswordAndSid(android.service.gatekeeper.IGateKeeperService,byte[],com.android.internal.widget.LockscreenCredential,int)>
<com.android.systemui.statusbar.SmartReplyController: void setCallback(com.android.systemui.statusbar.SmartReplyController.Callback)>
<com.android.systemui.statusbar.ViewTransformationHelper: android.util.ArraySet getAllTransformingViews()>
<com.android.gallery3d.exif.ExifTag: short getTagId()>
<android.multiuser.UserLifecycleTests: void managedProfileUnlock_stopped()>
<android.net.wifi.IWifiManager: java.util.List getPasspointConfigurations(java.lang.String)>
<com.android.gallery3d.exif.ExifTag: boolean setValue(int)>
<com.android.server.timedetector.TimeDetectorStrategy: long getTimeAt(android.os.TimestampedValue,long)>
<com.android.systemui.appops.AppOpItem: boolean isSilenced()>
<com.android.server.policy.WindowManagerPolicy: void startedWakingUp(int)>
<com.android.gallery3d.exif.ExifInterface: android.graphics.Bitmap getThumbnailBitmap()>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void finishBarAnimations()>
<com.android.server.DropBoxManagerService: void add(android.os.DropBoxManager.Entry)>
<android.app.StatsManager: void clearPullAtomCallback(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean isPulseExpanding()>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setClipBottomAmount(int)>
<com.android.systemui.wm.DisplayLayout: void <init>(android.view.DisplayInfo,android.content.res.Resources,boolean,boolean)>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>
<android.net.ip.IpClientManager: boolean removeKeepalivePacketFilter(int)>
<com.android.settingslib.widget.ActionButtonsPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.perftests.utils.StateManager: void set(java.lang.Object)>
<com.android.settingslib.bluetooth.PanProfile: boolean isAutoConnectable()>
<com.android.printservice.recommendation.plugin.hp.ServiceListener: java.util.ArrayList getPrinters()>
<com.android.systemui.statusbar.KeyboardShortcuts: void show(android.content.Context,int)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setRequestTopUi(boolean,java.lang.String)>
<com.android.server.pm.PackageManagerService: void setInstallerPackageName(java.lang.String,java.lang.String)>
<com.android.commands.uiautomator.DumpCommand: java.lang.String shortHelp()>
<com.android.systemui.statusbar.HeadsUpStatusBarView: void onDarkChanged(android.graphics.Rect,float,int)>
<com.android.server.DropBoxManagerService: com.android.internal.os.IDropBoxManagerService getServiceStub()>
<com.android.systemui.dagger.SystemUIRootComponent: com.android.systemui.BootCompleteCacheImpl provideBootCacheImpl()>
<com.android.server.soundtrigger.SoundTriggerInternal: android.hardware.soundtrigger.SoundTrigger.ModuleProperties getModuleProperties()>
<com.android.systemui.car.window.OverlayPanelViewController: boolean isTracking()>
<android.net.wifi.WifiManager: boolean initializeMulticastFiltering()>
<com.android.printspooler.ui.PrinterRegistry: void setOnPrintersChangeListener(com.android.printspooler.ui.PrinterRegistry.OnPrintersChangeListener)>
<com.android.server.pm.Installer: long createAppData(java.lang.String,java.lang.String,int,int,int,java.lang.String,int)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void showTransient(int,int[])>
<com.android.server.hdmi.HdmiCecMessage: java.lang.String toString()>
<com.android.server.ConnectivityService: void unregisterNetworkProvider(android.os.Messenger)>
<com.android.systemui.statusbar.phone.NotificationGroupManager: void onEntryRemoved(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<android.app.usage.UsageStatsManagerInternal: void prepareShutdown()>
<com.android.systemui.plugin.testoverlayplugin.SampleOverlayPlugin: void onCreate(android.content.Context,android.content.Context)>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder: com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder withAlpha(float)>
<com.android.systemui.recents.RecentsImplementation: void toggleRecentApps()>
<com.android.systemui.qs.QuickQSPanel: void onAttachedToWindow()>
<com.android.settingslib.datetime.ZoneGetter: java.lang.CharSequence getGmtOffsetText(android.icu.text.TimeZoneFormat,java.util.Locale,java.util.TimeZone,java.util.Date)>
<com.android.server.inputmethod.InputMethodManagerService.Lifecycle: void onStart()>
<com.android.gallery3d.glrenderer.GLES20Canvas: void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,float[],int,int,int,int)>
<com.android.server.biometrics.BiometricService.Injector: android.app.IActivityManager getActivityManagerService()>
<com.android.server.accessibility.MotionEventInjector: boolean handleMessage(android.os.Message)>
<com.android.keyguard.KeyguardViewController: boolean bouncerIsOrWillBeShowing()>
<com.android.server.ServiceWatcher: void onBindingDied(android.content.ComponentName)>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void onOverlayChanged()>
<android.net.wifi.aware.WifiAwareManager: void sendMessage(int,int,android.net.wifi.aware.PeerHandle,byte[],int,int)>
<com.android.systemui.statusbar.phone.PanelViewController: android.view.ViewGroup getView()>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void setOverrideTintColor(int,float)>
<com.android.settingslib.media.LocalMediaManager: void unregisterCallback(com.android.settingslib.media.LocalMediaManager.DeviceCallback)>
<com.android.server.policy.PhoneWindowManager: void setKeyguardCandidateLw(com.android.server.policy.WindowManagerPolicy.WindowState)>
<com.android.gallery3d.exif.ExifTag: void getBytes(byte[],int,int)>
<com.android.systemui.media.NotificationPlayer: void play(android.content.Context,android.net.Uri,boolean,int)>
<com.android.systemui.statusbar.phone.NotificationGroupManager: void onHeadsUpStateChanged(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.printservice.recommendation.plugin.hp.ServiceRecommendationPlugin: java.lang.CharSequence getPackageName()>
<com.android.systemui.dagger.DependencyProvider: com.android.systemui.statusbar.policy.ConfigurationController provideConfigurationController(android.content.Context)>
<com.android.systemui.statusbar.NotificationPresenter: void onUpdateRowStates()>
<com.android.server.role.RoleManagerService: void <init>(android.content.Context,com.android.server.role.RoleManagerService.RoleHoldersResolver)>
<com.android.uiautomator.core.UiObject: java.lang.String getPackageName()>
<com.android.systemui.statusbar.policy.SmartReplyView.SmartReplies: void <init>(java.util.List,android.app.RemoteInput,android.app.PendingIntent,boolean)>
<com.android.systemui.plugins.DarkIconDispatcher: void removeDarkReceiver(com.android.systemui.plugins.DarkIconDispatcher.DarkReceiver)>
<com.android.server.usb.descriptors.Usb20ACHeader: byte getCategory()>
<com.android.systemui.classifier.Classifier: void onSensorChanged(android.hardware.SensorEvent)>
<com.android.packageinstaller.EventResultPersister.EventResultObserver: void onResult(int,int,java.lang.String)>
<com.android.keyguard.KeyguardSliceView: void onClick(android.view.View)>
<com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry: int compareTo(com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry)>
<android.net.wifi.aware.WifiAwareManager: android.net.NetworkSpecifier createNetworkSpecifier(int,int,byte[],byte[],java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileCallerIdDisabledForUser(int)>
<com.android.server.policy.WindowOrientationListener: void setCurrentRotation(int)>
<com.android.systemui.assist.ui.InvocationLightsView: void setColors(int,int,int,int)>
<android.net.wifi.aware.TlvBufferUtils.TlvElement: int getInt()>
<com.android.gallery3d.exif.ExifTag: short getDataType()>
<com.android.server.biometrics.AuthenticationClient: boolean onRemoved(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.systemui.statusbar.phone.StatusBar: void onPhoneHintStarted()>
<com.android.systemui.qs.QSSecurityFooter.VpnSpan: boolean equals(java.lang.Object)>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder: com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams build()>
<com.android.server.biometrics.BiometricServiceBase: void handleEnumerate(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void collapse(boolean,float)>
<com.android.server.locksettings.LockSettingsService: android.security.keystore.recovery.KeyChainSnapshot getKeyChainSnapshot()>
<com.android.server.timezonedetector.ReferenceWithHistory: int getHistoryCount()>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void setCurrentUser(int)>
<com.android.systemui.qs.PagedTileLayout: void setPageIndicator(com.android.systemui.qs.PageIndicator)>
<com.android.systemui.shared.plugins.PluginInstanceManager: boolean dependsOn(com.android.systemui.plugins.Plugin,java.lang.Class)>
<javax.obex.PrivateOutputStream: void write(byte[],int,int)>
<com.android.systemui.MultiListLayout: void removeAllSeparatedViews()>
<com.android.systemui.statusbar.notification.row.NotificationGuts.GutsContent: boolean willBeRemoved()>
<com.android.systemui.volume.VolumeDialogImpl: void showCaptionsTooltip()>
<com.android.server.broadcastradio.hal1.BroadcastRadioService: android.hardware.radio.ITuner openTuner(int,android.hardware.radio.RadioManager.BandConfig,boolean,android.hardware.radio.ITunerCallback)>
<com.android.statementservice.DirectStatementService: int onStartCommand(android.content.Intent,int,int)>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getOriginalPackages()>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void setSnapshotCreatedPendingIntent(android.app.PendingIntent)>
<com.android.systemui.pip.PipTaskOrganizer: void onFixedRotationStarted(int,int)>
<com.android.server.utils.ManagedApplicationService: android.content.ComponentName getComponent()>
<com.android.uiautomator.core.UiObject: boolean isCheckable()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean shouldGestureIgnoreXTouchSlop(float,float)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView.InteractionEventHandler: void didIntercept(android.view.MotionEvent)>
<com.android.server.pm.PackageManagerService: int[] getPackageGids(java.lang.String,int,int)>
<com.android.systemui.statusbar.phone.dagger.StatusBarComponent: com.android.systemui.statusbar.phone.NotificationShadeWindowViewController getNotificationShadeWindowViewController()>
<com.android.server.statusbar.StatusBarManagerService: void hideAuthenticationDialog()>
<com.android.systemui.shared.recents.model.Task: android.content.ComponentName getTopComponent()>
<android.net.wifi.IWifiManager: void releaseMulticastLock(java.lang.String)>
<com.android.systemui.util.leak.WeakIdentityHashMap: int size()>
<com.android.server.pm.parsing.pkg.PackageImpl: java.lang.String getManifestPackageName()>
<com.google.android.startop.iorap.ActivityInfo: int describeContents()>
<com.android.systemui.MultiListLayout: void setOutsideTouchListener(android.view.View.OnClickListener)>
<android.content.pm.PackageManagerInternal: boolean filterAppAccess(java.lang.String,int,int)>
<com.android.server.pm.PackageInstallerSession: boolean isStagedAndInTerminalState()>
<com.android.server.lights.LogicalLight: void setBrightness(float)>
<com.android.server.testing.shadows.ShadowSlog: int w(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isRowHeadsUp()>
<com.android.server.usb.descriptors.report.ReportCanvas: void closeHeader(int)>
<android.media.MediaParser: boolean supportsParameter(java.lang.String)>
<com.android.systemui.classifier.FalsingManagerProxy: boolean isUnlockingDisabled()>
<com.android.systemui.keyguard.KeyguardViewMediator: void onStartedWakingUp()>
<com.android.systemui.globalactions.GlobalActionsComponent: void reboot(boolean)>
<com.android.systemui.statusbar.phone.NavigationBarView.OnVerticalChangedListener: void onVerticalChanged(boolean)>
<android.net.wifi.aware.WifiAwareManager: void requestMacAddresses(int,java.util.List,android.net.wifi.aware.IWifiAwareMacAddressProvider)>
<com.android.settingslib.utils.ThreadUtils: boolean isMainThread()>
<com.android.server.soundtrigger_middleware.RecoverableException: java.lang.String toString()>
<android.net.wifi.aware.DiscoverySession: android.net.NetworkSpecifier createNetworkSpecifierPmk(android.net.wifi.aware.PeerHandle,byte[])>
<com.android.systemui.plugins.qs.QSTile.Callback: void onShowDetail(boolean)>
<com.android.statementservice.retriever.AbstractStatementRetriever.Result: long getExpireMillis()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void updateNavigationBarVisibility(boolean)>
<android.net.wifi.p2p.WifiP2pConfig: int getGroupOwnerBand()>
<com.android.systemui.glwallpaper.GLWallpaperRenderer: android.util.Size reportSurfaceSize()>
<com.android.systemui.statusbar.ViewTransformationHelper.CustomTransformation: android.view.animation.Interpolator getCustomInterpolator(int,boolean)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isUnlockingWithBiometricsPossible(int)>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: void notifyKeyguardDoneFading()>
<com.android.server.audio.AudioService: void adjustStreamVolume(int,int,int,java.lang.String)>
<android.media.MediaParser.OutputConsumer: void onSeekMapFound(android.media.MediaParser.SeekMap)>
<com.android.server.accessibility.AccessibilityWindowManager: int getWindowOwnerUserId(android.os.IBinder)>
<com.android.server.autofill.ui.CustomScrollView: void <init>(android.content.Context)>
<com.android.settingslib.bluetooth.HidDeviceProfile: boolean isProfileReady()>
<com.android.uiautomator.core.UiObject: boolean swipeLeft(int)>
<com.android.settingslib.drawer.Tile: java.lang.CharSequence getComponentLabel(android.content.Context)>
<com.android.systemui.statusbar.phone.ObservableScrollView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.settingslib.RestrictedLockUtilsInternal: com.android.settingslib.RestrictedLockUtils.EnforcedAdmin checkIfPasswordQualityIsSet(android.content.Context,int)>
<com.android.settingslib.utils.PowerUtil: java.lang.String getBatteryTipStringFormatted(android.content.Context,long)>
<com.android.systemui.analytics.DataCollector: void onUnlockHintStarted()>
<com.android.systemui.doze.DozeService: void onRequestHideDoze()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumLength(android.content.ComponentName,int,boolean)>
<com.android.systemui.doze.DozeMachine: void wakeUp()>
<com.android.systemui.assist.AssistHandleCallbacks: void showAndGoDelayed(long,boolean)>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void setPreferredAddress(int)>
<com.android.server.trust.TrustManagerService: void resetAgent(android.content.ComponentName,int)>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getSecondaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>
<com.android.server.camera.CameraServiceProxy: void <init>(android.content.Context)>
<com.android.media.remotedisplay.RemoteDisplayProvider: void addDisplay(com.android.media.remotedisplay.RemoteDisplay)>
<com.android.systemui.shared.system.ActivityManagerWrapper: void unregisterTaskStackListener(com.android.systemui.shared.system.TaskStackChangeListener)>
<com.android.keyguard.KeyguardUpdateMonitor: void handleFinishedGoingToSleep(int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean canViewBeDismissed()>
<com.android.systemui.statusbar.phone.ShadeController: void animateCollapsePanels(int,boolean,boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: void updateOutline()>
<com.android.systemui.statusbar.StatusBarIconView: void setIsInShelf(boolean)>
<com.android.settingslib.suggestions.SuggestionControllerMixin: void onLoaderReset(android.content.Loader)>
<com.android.server.textclassifier.TextClassificationManagerService: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>
<com.android.systemui.statusbar.notification.collection.NotifPipeline: int getShadeListCount()>
<com.android.systemui.statusbar.AnimatedImageView: void onVisibilityChanged(android.view.View,int)>
<com.android.systemui.statusbar.policy.WifiSignalController: void notifyListeners(com.android.systemui.statusbar.policy.NetworkController.SignalCallback)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setEmptyShadeView(com.android.systemui.statusbar.EmptyShadeView)>
<android.os.BinderCallsStatsPerfTest: void timeCallSession_1000_buckets_cpuNotRecorded()>
<com.android.systemui.doze.DozeService: void onPluginDisconnected(com.android.systemui.plugins.DozeServicePlugin)>
<com.android.systemui.statusbar.notification.dagger.NotificationsModule: com.android.systemui.statusbar.notification.init.NotificationsController provideNotificationsController(android.content.Context,dagger.Lazy,dagger.Lazy)>
<javax.obex.ObexPacket: javax.obex.ObexPacket read(int,java.io.InputStream)>
<com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder: com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder expandableNotificationRow(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.shared.system.WindowCallbacksCompat: void onWindowDragResizeEnd()>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setStub(boolean)>
<com.android.server.accessibility.KeyboardInterceptor: void <init>(com.android.server.accessibility.AccessibilityManagerService,com.android.server.policy.WindowManagerPolicy,android.os.Handler)>
<com.android.systemui.volume.VolumeDialogControllerImpl: void userActivity()>
<android.net.wifi.hotspot2.pps.Policy.RoamingPartner: void setFqdn(java.lang.String)>
<com.android.systemui.settings.CurrentUserTracker: void startTracking()>
<com.android.systemui.statusbar.phone.DozeParameters: void dump(java.io.PrintWriter)>
<com.android.server.TelephonyRegistry: void notifySimActivationStateChangedForPhoneId(int,int,int,int)>
<com.android.systemui.assist.DeviceConfigHelper: boolean getBoolean(java.lang.String,boolean)>
<com.android.server.DropBoxManagerService: void <init>(android.content.Context)>
<com.android.server.usb.descriptors.UsbVCInputTerminal: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<android.text.PrecomputedTextPerfTest: void testCreate_Styled_Hyphenation()>
<com.android.server.biometrics.Constants: java.lang.String tagEnrollStartError()>
<android.net.wifi.WifiManager: void startLocalOnlyHotspot(android.net.wifi.SoftApConfiguration,java.util.concurrent.Executor,android.net.wifi.WifiManager.LocalOnlyHotspotCallback)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode.Callback,int)>
<com.android.systemui.shared.system.WindowManagerWrapper: com.android.systemui.shared.system.WindowManagerWrapper getInstance()>
<com.android.server.signedconfig.SignatureVerifier: void <init>(com.android.server.signedconfig.SignedConfigEvent)>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindGlobalActionsComponent(com.android.systemui.globalactions.GlobalActionsComponent)>
<com.android.systemui.ForegroundServiceLifetimeExtender: void <init>(com.android.systemui.statusbar.NotificationInteractionTracker,com.android.systemui.util.time.SystemClock)>
<com.android.systemui.car.statusbar.DozeServiceHost: void dozeTimeTick()>
<com.android.keyguard.NumPadKey: boolean hasOverlappingRendering()>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifCollectionListener: void onEntryInit(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.phone.NotificationIconContainer: int getPartialOverflowExtraPadding()>
<com.android.systemui.shared.system.PinnedStackListenerForwarder: void onImeVisibilityChanged(boolean,int)>
<javax.obex.ServerSession: void <init>(javax.obex.ObexTransport,javax.obex.ServerRequestHandler,javax.obex.Authenticator)>
<com.android.systemui.statusbar.phone.ObservableScrollView: void setListener(com.android.systemui.statusbar.phone.ObservableScrollView.Listener)>
<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller.SessionInfo generateInfoForCaller(boolean,int)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onTrustAgentErrorMessage(java.lang.CharSequence)>
<com.android.systemui.shared.system.ActivityManagerWrapper: java.util.concurrent.Future closeSystemWindows(java.lang.String)>
<com.android.server.locksettings.SyntheticPasswordManager: long sidFromPasswordHandle(byte[])>
<com.android.systemui.pip.PipBoundsHandler: void applySnapFraction(android.graphics.Rect,float)>
<com.android.systemui.statusbar.phone.StatusBarIconList: void dump(java.io.PrintWriter)>
<com.android.server.accounts.IAccountAuthenticatorCache: void invalidateCache(int)>
<com.android.systemui.plugins.PluginEnablerImpl: void <init>(android.content.Context)>
<com.android.systemui.statusbar.policy.LocationController: boolean isLocationActive()>
<com.android.systemui.pip.tv.PipMenuActivity: void onBackPressed()>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: void setClipBottomAmount(int)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: void addCallback(com.android.systemui.plugins.statusbar.StatusBarStateController.StateListener)>
<com.android.systemui.qs.tiles.WorkModeTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.BooleanState,java.lang.Object)>
<com.android.systemui.qs.tiles.HotspotTile: void handleDestroy()>
<com.android.systemui.pip.phone.PipTouchState: void removeDoubleTapTimeoutCallback()>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean hasLockscreenWallpaper()>
<com.android.systemui.util.time.SystemClock: long currentTimeMillis()>
<com.android.settingslib.suggestions.SuggestionControllerMixin.SuggestionControllerHost: android.app.LoaderManager getLoaderManager()>
<com.android.powermodel.ParseException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.android.systemui.plugins.Plugin: int getVersion()>
<com.android.systemui.recents.RecentsModule: com.android.systemui.recents.RecentsImplementation provideRecentsImpl(android.content.Context,com.android.systemui.dagger.ContextComponentHelper)>
<android.media.MediaSession2: void setPlaybackActive(boolean)>
<com.android.systemui.qs.external.PackageManagerAdapter: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexParameterf(int,int,float)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage: void put(int,android.security.keystore.recovery.KeyChainSnapshot)>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger.EditorLogger: android.content.SharedPreferences.Editor putBoolean(java.lang.String,boolean)>
<android.content.pm.PackageManagerInternal: void onDefaultSmsAppChanged(java.lang.String,int)>
<android.multiuser.BenchmarkRunner: void pauseTiming()>
<javax.microedition.khronos.opengles.GL10Ext: int glQueryMatrixxOES(int[],int,int[],int)>
<com.android.systemui.plugins.FalsingManager: void onLeftAffordanceHintStarted()>
<com.android.systemui.egg.MLand: void hideSplash()>
<com.android.settingslib.applications.AppUtils: boolean hasPreferredActivities(android.content.pm.PackageManager,java.lang.String)>
<com.android.systemui.statusbar.policy.NetworkController: boolean hasVoiceCallingFeature()>
<com.android.settingslib.deviceinfo.AbstractBluetoothAddressPreferenceController: java.lang.String[] getConnectivityIntents()>
<android.util.StatsLog: boolean logEvent(int)>
<com.android.systemui.recents.Recents: void <init>(android.content.Context,com.android.systemui.recents.RecentsImplementation,com.android.systemui.statusbar.CommandQueue)>
<com.android.systemui.qs.tileimpl.QSTileImpl.DrawableIconWithRes: boolean equals(java.lang.Object)>
<com.android.commands.locksettings.LockSettingsCmd: void onRun()>
<com.android.server.appop.AppOpsService: int checkOperation(int,int,java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void onClick(android.view.View)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setHeadsUpIsVisible()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: com.android.systemui.statusbar.notification.row.NotificationContentView[] getLayouts()>
<com.android.server.pm.Installer: void invalidateMounts()>
<com.android.systemui.statusbar.NotificationShelf: void updateState(com.android.systemui.statusbar.notification.stack.AmbientState)>
<com.android.settingslib.Utils: int getThemeAttr(android.content.Context,int,int)>
<android.net.wifi.IWifiManager: java.lang.String getCurrentNetworkWpsNfcConfigurationToken()>
<com.android.systemui.qs.touch.SwipeDetector: float computeVelocity(float,long)>
<com.android.systemui.car.CarDeviceProvisionedControllerImpl: void startListening(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName,int,boolean)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeEnablerManagerCompat: void <init>(androidx.preference.PreferenceFragmentCompat)>
<com.android.systemui.qs.tiles.WorkModeTile: void onManagedProfileChanged()>
<android.net.wifi.rtt.CivicLocation: boolean equals(java.lang.Object)>
<com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl.QualifiedTelephonyTimeZoneSuggestion: void <init>(android.app.timezonedetector.TelephonyTimeZoneSuggestion,int)>
<com.android.systemui.statusbar.phone.StatusBar: void appTransitionCancelled(int)>
<com.android.systemui.statusbar.phone.StatusBar: void registerBroadcastReceiver()>
<com.android.systemui.statusbar.notification.row.FooterViewButton: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.settingslib.applications.PermissionsSummaryHelper.PermissionsResultCallback: void onAppWithPermissionsCountsResult(int,int)>
<com.android.server.biometrics.BiometricServiceBase: void handleAuthenticated(boolean,android.hardware.biometrics.BiometricAuthenticator.Identifier,java.util.ArrayList)>
<com.android.systemui.pip.phone.PipResizeGestureHandler: void dump(java.io.PrintWriter,java.lang.String)>
<com.android.systemui.car.navigationbar.SystemBarConfigs: boolean getHideForKeyboardBySide(int)>
<com.android.server.storage.DiskStatsLoggingService: boolean onStartJob(android.app.job.JobParameters)>
<com.android.systemui.car.window.OverlayPanelViewController: boolean isPanelExpanded()>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: void snapBubbleBack(android.view.View,float,float)>
<com.android.server.usb.descriptors.Usb10ASGeneral: byte getDelay()>
<android.net.wifi.rtt.WifiRttManager: void startRanging(android.net.wifi.rtt.RangingRequest,java.util.concurrent.Executor,android.net.wifi.rtt.RangingResultCallback)>
<com.android.server.accounts.AccountManagerService: int getAccountVisibility(android.accounts.Account,java.lang.String)>
<android.net.wifi.hotspot2.pps.Policy: void setExcludedSsidList(java.lang.String[])>
<com.android.systemui.shared.system.InputConsumerController: void registerInputConsumer()>
<com.android.statementservice.retriever.JsonParser: java.util.List parseArray(android.util.JsonReader)>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isAppearing()>
<com.android.systemui.statusbar.phone.StatusBar: void createAndAddWindows(com.android.internal.statusbar.RegisterStatusBarResult)>
<com.android.systemui.stackdivider.DividerView.DividerCallbacks: void onDraggingEnd()>
<com.android.keyguard.KeyguardPatternView: void setKeyguardCallback(com.android.keyguard.KeyguardSecurityCallback)>
<com.android.systemui.qs.tiles.BluetoothTile.BluetoothDetailAdapter: boolean getToggleEnabled()>
<com.android.systemui.util.concurrency.ConcurrencyModule: java.util.concurrent.Executor provideMainExecutor(android.content.Context)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSplitCodePaths(java.lang.String[])>
<com.android.server.policy.keyguard.KeyguardStateMonitor: boolean isShowing()>
<com.android.systemui.qs.QSSecurityFooter: void setHostEnvironment(com.android.systemui.qs.QSTileHost)>
<com.android.server.testing.shadows.ShadowPerformUnifiedRestoreTask: java.lang.String[] getFilterSet()>
<com.android.systemui.statusbar.notification.stack.AnimationProperties: boolean wasAdded(android.view.View)>
<android.content.pm.PackageManagerInternal: android.util.SparseArray getAppsWithSharedUserIds()>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void onUnlockedChanged()>
<com.android.photos.BitmapRegionTileSource: int getImageWidth()>
<com.android.server.pm.CrossProfileAppsServiceImpl: void clearInteractAcrossProfilesAppOps()>
<com.android.server.oemlock.OemLockService: void <init>(android.content.Context)>
<com.android.systemui.stackdivider.MinimizedDockShadow: boolean hasOverlappingRendering()>
<com.android.systemui.recents.ScreenPinningRequest: android.widget.FrameLayout.LayoutParams getRequestLayoutParams(int)>
<com.android.server.integrity.parser.LimitInputStream: int available()>
<com.android.server.pm.permission.BasePermission: boolean isPermissionDefinitionChanged()>
<com.android.settingslib.bluetooth.HidProfile: boolean isAutoConnectable()>
<com.android.location.provider.LocationProviderBase: void onEnable()>
<com.android.server.media.MediaSession2Record: void setSessionPolicies(int)>
<com.android.keyguard.KeyguardSecurityContainer: com.android.keyguard.KeyguardSecurityView getSecurityView(com.android.keyguard.KeyguardSecurityModel.SecurityMode)>
<com.android.systemui.statusbar.ViewTransformationHelper: void addTransformedView(int,android.view.View)>
<android.net.wifi.p2p.WifiP2pManager: void requestNetworkInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.NetworkInfoListener)>
<com.android.networkstack.tethering.PrivateAddressCoordinator: void releaseDownstream(android.net.ip.IpServer)>
<com.android.commands.svc.Svc.Command: void <init>(java.lang.String)>
<com.android.settingslib.RestrictedLockUtilsInternal: com.android.settingslib.RestrictedLockUtils.EnforcedAdmin checkIfRemoteContactSearchDisallowed(android.content.Context,int)>
<com.android.settingslib.RestrictedPreference: boolean shouldHideSecondTarget()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setPinned(boolean)>
<com.android.carrierdefaultapp.CaptivePortalLoginActivity: java.lang.String getAlias(android.content.Context)>
<com.android.systemui.tracing.ProtoTracer: int getProtoSize(com.google.protobuf.nano.MessageNano)>
<com.android.systemui.classifier.FalsingManagerProxy: void onNotificatonStopDraggingDown()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowViewController: void setupExpandedStatusBar()>
<com.android.server.audio.MediaFocusControl: int getFocusRampTimeMs(int,android.media.AudioAttributes)>
<com.android.settingslib.net.NetworkCycleChartDataLoader: com.android.settingslib.net.NetworkCycleChartDataLoader.Builder builder(android.content.Context)>
<com.android.systemui.AutoReinflateContainer: void inflateLayout()>
<com.android.settingslib.deviceinfo.AbstractImsStatusPreferenceController: void updateConnectivity()>
<com.android.systemui.statusbar.policy.HotspotController.Callback: void onHotspotAvailabilityChanged(boolean)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: android.view.ViewRootImpl getViewRootImpl()>
<com.android.systemui.statusbar.phone.StatusBar: void setQsExpanded(boolean)>
<com.android.systemui.statusbar.notification.row.FooterView: void setManageButtonClickListener(android.view.View.OnClickListener)>
<com.android.server.textservices.TextServicesManagerService: void <init>(android.content.Context)>
<com.android.server.accessibility.gestures.TouchState: void startTouchInteracting()>
<com.android.systemui.statusbar.KeyguardIndicationController: void setLockIconController(com.android.systemui.statusbar.phone.LockscreenLockIconController)>
<com.android.externalstorage.ExternalStorageProvider: boolean shouldBlockFromTree(java.lang.String)>
<com.android.systemui.statusbar.notification.collection.listbuilder.PipelineState: void requireState(int)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean onBackPressed(boolean)>
<com.android.settingslib.RestrictedSwitchPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.commands.svc.UsbCommand: java.lang.String shortHelp()>
<com.android.server.ConnectivityService: boolean isActiveNetworkMetered()>
<android.net.wifi.hotspot2.OsuProvider: android.net.wifi.WifiSsid getOsuSsid()>
<android.net.wifi.WifiConfiguration: boolean isLinked(android.net.wifi.WifiConfiguration)>
<com.android.systemui.statusbar.phone.ContextualButton: void updateIcon()>
<com.android.keyguard.KeyguardClockSwitch: void onDetachedFromWindow()>
<android.net.wifi.SoftApInfo: int getFrequency()>
<com.android.systemui.statusbar.notification.NotificationEntryListener: void onEntryRemoved(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.internal.statusbar.NotificationVisibility,boolean,int)>
<com.android.systemui.bubbles.BubbleViewProvider: android.view.View getIconView()>
<com.android.server.devicepolicy.DevicePolicyManagerService: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>
<com.android.server.stats.StatsManagerService: void removeActiveConfigsChangedOperation(java.lang.String)>
<com.android.server.usb.descriptors.Usb20ASFormatII: int getmaxBitRate()>
<com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter.Builder: com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter build()>
<com.android.server.locksettings.VersionedPasswordMetrics: byte[] serialize()>
<com.android.server.locksettings.recoverablekeystore.BadPlatformKeyException: void <init>(java.lang.String)>
<com.android.systemui.util.leak.DumpTruck: android.content.Intent createShareIntent()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationCustomViewWrapper: boolean shouldClipToRounding(boolean,boolean)>
<com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm.SectionProvider: boolean beginsSection(android.view.View,android.view.View)>
<com.android.server.integrity.serializer.RuleSerializeException: void <init>(java.lang.String)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void setRemoteInputVisible(boolean)>
<com.android.systemui.qs.QSPanel: void onDetachedFromWindow()>
<com.android.server.statusbar.StatusBarManagerInternal: void showChargingAnimation(int)>
<android.net.wifi.rtt.ResponderLocation: boolean getDependentStationIndication()>
<com.android.server.inputmethod.InputMethodManagerService: void showInputMethodPickerFromSystem(com.android.internal.view.IInputMethodClient,int,int)>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void addNotificationLifetimeExtenders(java.util.List)>
<com.android.settingslib.wifi.AccessPoint: android.net.NetworkInfo.DetailedState getDetailedState()>
<com.android.server.audio.AudioDeviceInventory: void setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int,int,boolean,int,int)>
<com.android.networkstack.tethering.PrivateAddressCoordinator: android.net.LinkAddress requestDownstreamAddress(android.net.ip.IpServer)>
<com.android.keyguard.KeyguardViewController: android.view.ViewRootImpl getViewRootImpl()>
<com.android.systemui.statusbar.HeadsUpStatusBarView: android.graphics.Rect getIconDrawingRect()>
<android.net.wifi.ScanResult: boolean is80211mcResponder()>
<com.android.systemui.plugins.qs.QSTileView: void onStateChanged(com.android.systemui.plugins.qs.QSTile.State)>
<com.android.settingslib.bluetooth.A2dpProfile: int getConnectionPolicy(android.bluetooth.BluetoothDevice)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordHistoryLength(android.content.ComponentName,int,boolean)>
<com.android.server.broadcastradio.hal2.BroadcastRadioService: android.hardware.radio.ITuner openSession(int,android.hardware.radio.RadioManager.BandConfig,boolean,android.hardware.radio.ITunerCallback)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getBanner()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: void updateNoSims()>
<com.android.systemui.statusbar.KeyguardIndicationController: com.android.keyguard.KeyguardUpdateMonitorCallback getKeyguardCallback()>
<com.android.systemui.statusbar.notification.row.ExpandableView: android.view.View getShelfTransformationTarget()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean packageHasActiveAdmins(java.lang.String,int)>
<com.android.systemui.statusbar.phone.StatusBar: void showWirelessChargingAnimation(int)>
<com.android.systemui.qs.TouchAnimator.Builder: com.android.systemui.qs.TouchAnimator build()>
<com.android.settingslib.bluetooth.LocalBluetoothProfileManager.ServiceListener: void onServiceDisconnected()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: int getMinHeight()>
<com.android.systemui.qs.QSScrollLayout: void dispatchDraw(android.graphics.Canvas)>
<com.android.systemui.statusbar.phone.StatusBar: void setNotificationSnoozed(android.service.notification.StatusBarNotification,int)>
<com.android.systemui.statusbar.notification.collection.GroupEntry: com.android.systemui.statusbar.notification.collection.NotificationEntry getSummary()>
<com.android.server.pm.RestrictionsSet: boolean updateRestrictions(int,android.os.Bundle)>
<android.perftests.utils.PerfManualStatusReporter: android.perftests.utils.ManualBenchmarkState getBenchmarkState()>
<com.android.server.media.projection.MediaProjectionManagerService: void onSwitchUser(int)>
<com.android.server.pm.PackageManagerServiceUtils: long getLastModifiedTime(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.systemui.statusbar.phone.KeyguardEnvironmentImpl: boolean isNotificationForCurrentProfiles(android.service.notification.StatusBarNotification)>
<android.net.wifi.WifiManager: void registerScanResultsCallback(java.util.concurrent.Executor,android.net.wifi.WifiManager.ScanResultsCallback)>
<com.android.printspooler.ui.PrintActivity: void onUpdateCanceled()>
<com.android.systemui.recents.OverviewProxyService.OverviewProxyListener: void onOverviewShown(boolean)>
<com.android.systemui.statusbar.RemoteInputController: void addRemoteInput(com.android.systemui.statusbar.notification.collection.NotificationEntry,java.lang.Object)>
<com.android.permission.persistence.RuntimePermissionsState.PermissionState: java.lang.String getName()>
<com.android.server.DeviceIdleController: void onStart()>
<com.android.systemui.doze.DozeService: void <init>(com.android.systemui.doze.DozeFactory,com.android.systemui.shared.plugins.PluginManager)>
<android.net.wifi.rtt.ResponderConfig: java.lang.String toString()>
<com.android.settingslib.drawer.SwitchController: boolean isChecked()>
<com.android.systemui.qs.PagedTileLayout: boolean updateResources()>
<com.android.systemui.qs.tileimpl.QSTileImpl.DrawableIcon: android.graphics.drawable.Drawable getDrawable(android.content.Context)>
<com.android.settingslib.CustomDialogPreferenceCompat: void onClick(android.content.DialogInterface,int)>
<android.os.IStatsCompanionService: void setAlarmForSubscriberTriggering(long)>
<com.android.systemui.statusbar.phone.KeyguardBouncer: boolean isAnimatingAway()>
<com.android.systemui.statusbar.policy.HeadsUpManager: void dumpInternal(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.StatusIconDisplayable: boolean isIconBlocked()>
<com.android.systemui.shared.tracing.FrameProtoTracer.ProtoTraceParams: int getProtoSize(java.lang.Object)>
<com.android.photos.BitmapRegionTileSource: android.graphics.Bitmap getTile(int,int,int,android.graphics.Bitmap)>
<com.android.systemui.car.navigationbar.ButtonSelectionStateController: void <init>(android.content.Context)>
<android.net.wifi.hotspot2.pps.HomeSp: void setMatchAnyOis(long[])>
<android.net.TetheringManager.TetheringRequest: java.lang.String toString()>
<com.android.systemui.doze.DozeHost: void extendPulse(int)>
<com.android.settingslib.development.AbstractLogdSizePreferenceController: void writeLogdSizeOption(java.lang.Object)>
<android.net.wifi.BatchedScanResult: void <init>(android.net.wifi.BatchedScanResult)>
<com.android.server.display.BrightnessTracker: void setBrightnessConfiguration(android.hardware.display.BrightnessConfiguration)>
<com.android.server.protolog.ProtoLogImpl: void passToLogcat(java.lang.String,com.android.server.protolog.ProtoLogImpl.LogLevel,java.lang.String)>
<com.android.wallpapercropper.WallpaperCropActivity.BitmapCropTask: void setCropBounds(android.graphics.RectF)>
<android.net.TetheringManager: java.lang.String[] getTetheredDhcpRanges()>
<com.android.settingslib.bluetooth.PbapClientProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)>
<com.android.systemui.statusbar.notification.row.BindRequester.BindRequestListener: void onBindRequest(com.android.systemui.statusbar.notification.collection.NotificationEntry,androidx.core.os.CancellationSignal,com.android.systemui.statusbar.notification.row.NotifBindPipeline.BindCallback)>
<com.android.server.usb.descriptors.UsbMSMidiInputJack: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.settingslib.core.lifecycle.ObservablePreferenceFragment: void onCreate(android.os.Bundle)>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void setUpWithPresenter(com.android.systemui.statusbar.NotificationPresenter)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void dumpStatisticsAndClear()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: void setRecentlyAudiblyAlerted(boolean)>
<com.android.systemui.statusbar.notification.NotificationListController: void <init>(com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.systemui.statusbar.notification.stack.NotificationListContainer,com.android.systemui.statusbar.policy.DeviceProvisionedController)>
<com.android.server.pm.PackageManagerService: boolean isPackageSignedByKeySetExactly(java.lang.String,android.content.pm.KeySet)>
<com.android.server.accessibility.FingerprintGestureDispatcher: void <init>(android.hardware.fingerprint.IFingerprintService,android.content.res.Resources,java.lang.Object)>
<com.android.systemui.pip.PipTaskOrganizer: void scheduleFinishResizePip(android.graphics.Rect)>
<com.android.settingslib.bluetooth.BluetoothDeviceFilter: com.android.settingslib.bluetooth.BluetoothDeviceFilter.Filter getFilter(int)>
<com.android.systemui.SystemUIService: void <init>(android.os.Handler,com.android.systemui.dump.DumpHandler,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.dump.LogBufferFreezer,com.android.systemui.statusbar.policy.BatteryStateNotifier)>
<com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl: void <init>(com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl.Callback)>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void setNotificationActivityStarter(com.android.systemui.statusbar.notification.NotificationActivityStarter)>
<com.android.systemui.shared.system.WindowCallbacksCompat: void reportDrawFinish()>
<com.android.systemui.recents.ScreenPinningRequest: void <init>(android.content.Context,java.util.Optional)>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void setWindowState(int,int,int)>
<com.android.server.webkit.SystemImpl: void setMultiProcessSetting(android.content.Context,int)>
<com.android.systemui.tuner.RadioListPreference: android.app.Dialog onDialogCreated(android.app.DialogFragment,android.app.Dialog)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void cancelDrag()>
<com.android.settingslib.bluetooth.HidProfile: int getOrdinal()>
<com.android.server.slice.SliceManagerService: java.lang.Object getLock()>
<javax.microedition.khronos.opengles.GL10: void glLightxv(int,int,int[],int)>
<com.android.systemui.wm.DisplayLayout: boolean isLandscape()>
<com.android.systemui.statusbar.phone.ScrimController: void setScrimBehindDrawable(android.graphics.drawable.Drawable)>
<com.android.pacprocessor.PacService: android.os.IBinder onBind(android.content.Intent)>
<javax.microedition.khronos.opengles.GL11: void glVertexPointer(int,int,int,int)>
<com.android.settingslib.location.RecentLocationApps: void <init>(android.content.Context)>
<com.android.server.display.AmbientBrightnessStatsTracker: void <init>(android.os.UserManager,com.android.server.display.AmbientBrightnessStatsTracker.Injector)>
<javax.obex.ClientOperation: java.lang.String getEncoding()>
<com.android.server.accessibility.AccessibilitySecurityPolicy: void enforceCallingPermission(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotifRemoteViewCacheImpl: void removeCachedView(com.android.systemui.statusbar.notification.collection.NotificationEntry,int)>
<com.android.systemui.statusbar.phone.NavigationBarView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationCustomViewWrapper: void <init>(android.content.Context,android.view.View,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.server.pm.PackageManagerService: void shutdown()>
<com.android.systemui.statusbar.phone.LockscreenWallpaper.WallpaperDrawable: void onBoundsChange(android.graphics.Rect)>
<com.android.server.accessibility.MotionEventInjector: void injectEvents(java.util.List,android.accessibilityservice.IAccessibilityServiceClient,int,int)>
<com.android.server.statusbar.StatusBarManagerService: boolean isTracing()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isBubble()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationCustomViewWrapper: void setVisible(boolean)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void removeCallback(android.os.Handler.Callback)>
<com.android.systemui.statusbar.phone.KeyguardBouncer: void startPreHideAnimation(java.lang.Runnable)>
<com.android.server.locksettings.LockSettingsService: byte[] getHashFactor(com.android.internal.widget.LockscreenCredential,int)>
<com.android.systemui.statusbar.notification.stack.AnimationProperties: com.android.systemui.statusbar.notification.stack.AnimationProperties setCustomInterpolator(android.util.Property,android.view.animation.Interpolator)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareValidation: android.os.IBinder asBinder()>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: com.android.systemui.statusbar.policy.KeyButtonDrawable create(android.content.Context,int,boolean)>
<android.net.wifi.RttManager.RttListener: void onAborted()>
<com.android.server.appbinding.finders.AppServiceFinder: java.lang.String validateService(android.content.pm.ServiceInfo)>
<com.android.systemui.statusbar.CommandQueue: void addQsTile(android.content.ComponentName)>
<com.android.settingslib.bluetooth.CachedBluetoothDeviceManager: com.android.settingslib.bluetooth.CachedBluetoothDevice addDevice(android.bluetooth.BluetoothDevice)>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: void <init>(int,int,android.net.wifi.p2p.WifiP2pDevice,byte[])>
<com.android.server.uri.UriGrantsManagerService: void releasePersistableUriPermission(android.net.Uri,int,java.lang.String,int)>
<android.os.ParcelPerfTest: void timeGetDataPosition()>
<com.android.systemui.qs.external.QSTileServiceWrapper: boolean onClick(android.os.IBinder)>
<com.android.server.pm.PackageManagerService.Injector: void bootstrap(com.android.server.pm.PackageManagerService)>
<android.os.UserManagerInternal: void onEphemeralUserStop(int)>
<com.android.printservice.recommendation.plugin.hp.MDnsUtils: java.lang.String getString(byte[])>
<com.android.systemui.car.navigationbar.CarNavigationBarController: android.view.ViewGroup getRightWindow()>
<android.net.wifi.hotspot2.pps.HomeSp: java.util.Map getHomeNetworkIds()>
<com.android.systemui.car.bluetooth.CarBatteryController: void dispatchDemoCommand(java.lang.String,android.os.Bundle)>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: long getLongVersionCode(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void setDozing(boolean,boolean)>
<com.android.keyguard.NumPadKey: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.autofill.Helper.ViewNodeFilter: boolean matches(android.app.assist.AssistStructure.ViewNode)>
<com.android.systemui.volume.ConfigurableTexts: int add(android.widget.TextView)>
<com.android.server.pm.UserManagerService.LifeCycle: void <init>(android.content.Context)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setDozing(boolean)>
<com.android.systemui.screenrecord.RecordingService: android.app.Notification createSaveNotification(com.android.systemui.screenrecord.ScreenMediaRecorder.SavedRecording)>
<com.android.server.pm.PackageKeySetData: void addDefinedKeySet(long,java.lang.String)>
<com.android.settingslib.applications.ApplicationsState.Callbacks: void onRunningStateChanged(boolean)>
<com.android.systemui.statusbar.notification.row.NotifBindPipeline: void setStage(com.android.systemui.statusbar.notification.row.BindStage)>
<com.android.server.slice.SliceClientPermissions.SliceAuthority: com.android.server.slice.SlicePermissionManager.PkgUser getPkg()>
<com.android.server.accounts.AccountManagerService: void onAccountAccessed(java.lang.String)>
<com.android.keyguard.CarrierTextController: java.util.List getSubscriptionInfo()>
<com.android.gallery3d.glrenderer.GLES20IdImpl: int generateTexture()>
<com.android.server.pm.SELinuxMMAC: java.lang.String getSeInfo(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.SharedUserSetting,com.android.server.compat.PlatformCompat)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setCommonCriteriaModeEnabled(android.content.ComponentName,boolean)>
<com.android.systemui.statusbar.phone.PanelViewController: boolean isInContentBounds(float,float)>
<android.net.wifi.rtt.RangingResult: long getRangingTimestampMillis()>
<com.android.systemui.screenrecord.RecordingController.RecordingStateChangeCallback: void onCountdown(long)>
<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse verifyTiedProfileChallenge(com.android.internal.widget.LockscreenCredential,long,int)>
<com.android.systemui.statusbar.notification.row.NotifRemoteViewCache: void putCachedView(com.android.systemui.statusbar.notification.collection.NotificationEntry,int,android.widget.RemoteViews)>
<com.android.systemui.statusbar.notification.row.RowContentBindParams: void setUseLowPriority(boolean)>
<com.android.server.protolog.ProtoLogImpl: boolean isEnabled(com.android.server.protolog.common.IProtoLogGroup)>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setSsid(java.lang.String)>
<com.android.systemui.qs.QSPanel: void <init>(android.content.Context,android.util.AttributeSet,com.android.systemui.dump.DumpManager,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.qs.logging.QSLogger,com.android.systemui.media.MediaHost,com.android.internal.logging.UiEventLogger)>
<com.android.systemui.statusbar.notification.stack.NotificationSection: int getBucket()>
<android.content.pm.PackageManagerInternal: void uninstallApex(java.lang.String,long,int,android.content.IntentSender,int)>
<com.android.systemui.qs.QSFragment: com.android.systemui.qs.customize.QSCustomizer getCustomizer()>
<com.android.systemui.volume.VolumeDialogImpl: void show(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setUsesIncreasedHeadsUpHeight(boolean)>
<com.android.server.media.MediaRouterService: void setDiscoveryRequestWithRouter2(android.media.IMediaRouter2,android.media.RouteDiscoveryPreference)>
<com.android.systemui.keyguard.KeyguardViewMediator: boolean isShowingAndNotOccluded()>
<com.android.server.policy.WindowManagerPolicy.InputConsumer: void dismiss()>
<com.android.systemui.statusbar.phone.MultiUserSwitch: void setKeyguardMode(boolean)>
<javax.obex.ObexSession: boolean handleAuthChall(javax.obex.HeaderSet)>
<com.android.server.biometrics.BiometricService.Injector: boolean isDebugEnabled(android.content.Context,int)>
<com.android.printspooler.model.PrintSpoolerService: void writePrintJobData(android.os.ParcelFileDescriptor,android.print.PrintJobId)>
<com.android.systemui.bubbles.BubbleStackView: void setStackStartPosition(com.android.systemui.bubbles.BubbleStackView.RelativeStackPosition)>
<com.android.systemui.shared.system.TransactionCompat: void setEarlyWakeup(android.view.SurfaceControl.Transaction)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean shouldUseDismissingAnimation()>
<com.android.settingslib.net.SummaryForAllUidLoader: android.os.Bundle buildArgs(android.net.NetworkTemplate,long,long)>
<android.net.wifi.hotspot2.pps.HomeSp: long[] getRoamingConsortiumOis()>
<com.android.systemui.statusbar.phone.StatusBar: void addQsTile(android.content.ComponentName)>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setTtlSec(int)>
<android.net.wifi.WifiManager: boolean isAdditionalStaSupported()>
<com.android.systemui.qs.external.TileLifecycleManager: android.content.ComponentName getComponent()>
<com.android.systemui.globalactions.GlobalActionsGridLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.NotificationViewHierarchyManager: void updateNotificationViews()>
<com.android.printspooler.model.PrintSpoolerService: void setProgress(android.print.PrintJobId,float)>
<com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl.QualifiedTelephonyTimeZoneSuggestion: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setNotificationActivityStarter(com.android.systemui.statusbar.notification.NotificationActivityStarter)>
<com.android.systemui.statusbar.phone.StatusBar: void setNotificationSnoozed(android.service.notification.StatusBarNotification,com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper.SnoozeOption)>
<com.android.systemui.biometrics.AuthContainerView: void onStartedGoingToSleep()>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: void onConfigurationChanged()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean isLaunchTransitionFinished()>
<com.android.keyguard.KeyguardSecurityContainer: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.pm.PackageManagerService: void querySyncProviders(java.util.List,java.util.List)>
<com.android.systemui.statusbar.notification.DynamicChildBindController: void <init>(com.android.systemui.statusbar.notification.row.RowContentBindStage)>
<com.android.server.pm.UserManagerService: java.util.List getProfiles(int,boolean)>
<com.android.systemui.car.keyguard.CarKeyguardViewMediator: void <init>(com.android.systemui.car.keyguard.CarKeyguardViewController,com.android.systemui.car.userswitcher.FullScreenUserSwitcherViewController)>
<com.android.systemui.DejankUtils: java.lang.Object whitelistIpcs(java.util.function.Supplier)>
<com.android.systemui.qs.tiles.WorkModeTile: com.android.systemui.plugins.qs.QSTile.BooleanState newTileState()>
<com.android.server.biometrics.ClientMonitor: void <init>(android.content.Context,com.android.server.biometrics.Constants,com.android.server.biometrics.BiometricServiceBase.DaemonWrapper,long,android.os.IBinder,com.android.server.biometrics.BiometricServiceBase.ServiceListener,int,int,boolean,java.lang.String,int)>
<com.android.systemui.util.leak.GarbageMonitor.MemoryTile: long getRss()>
<com.android.bluetoothmidiservice.MidiBtleTimeTracker: int getWindowMillis()>
<com.android.systemui.bubbles.BadgedImageView: java.lang.String getKey()>
<com.android.server.infra.FrameworkResourcesServiceNameResolver: boolean isTemporary(int)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void dismiss(boolean)>
<com.android.systemui.statusbar.notification.row.BindStage.StageCallback: void onStageFinished(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.classifier.ProximityClassifier: void <init>(com.android.systemui.classifier.ClassifierData)>
<com.android.server.biometrics.BiometricService.Injector: android.app.trust.ITrustManager getTrustManager()>
<android.net.wifi.aware.SubscribeConfig: int hashCode()>
<com.android.systemui.statusbar.phone.NavigationBarView: com.android.systemui.statusbar.phone.ButtonDispatcher getHomeHandle()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setFactoryResetProtectionPolicy(android.content.ComponentName,android.app.admin.FactoryResetProtectionPolicy)>
<android.content.pm.PackageManagerInternal: boolean compileLayouts(java.lang.String)>
<com.android.settingslib.RestrictedLockUtils.EnforcedAdmin: void <init>(android.content.ComponentName,java.lang.String,android.os.UserHandle)>
<com.android.settingslib.bluetooth.HearingAidProfile: boolean setActiveDevice(android.bluetooth.BluetoothDevice)>
<com.android.server.pm.parsing.pkg.PackageImpl: boolean isPrivileged()>
<com.android.server.usb.descriptors.UsbDescriptor: void shortReport(com.android.server.usb.descriptors.report.ReportCanvas)>
<android.net.wifi.hotspot2.pps.UpdateParameter: void <init>(android.net.wifi.hotspot2.pps.UpdateParameter)>
<com.android.systemui.volume.VolumeDialogImpl: android.view.ViewGroup getDialogView()>
<android.net.wifi.WifiEnterpriseConfig: void writeToParcel(android.os.Parcel,int)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: boolean isConnectedHearingAidDevice()>
<android.net.wifi.p2p.WifiP2pManager.HandoverMessageListener: void onHandoverMessageAvailable(java.lang.String)>
<javax.microedition.khronos.opengles.GL11: void glGetTexEnviv(int,int,java.nio.IntBuffer)>
<com.android.statementservice.retriever.JsonParser: org.json.JSONObject parse(android.util.JsonReader)>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: boolean shouldHideNotifications(int)>
<com.android.server.appop.AppOpsService: void offsetHistory(long)>
<com.android.settingslib.notification.ZenDurationDialog: android.view.View getContentView()>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier.Builder setWpa2Passphrase(java.lang.String)>
<com.android.systemui.statusbar.phone.StatusBarWindowView: android.util.Pair paddingNeededForCutoutAndRoundedCorner(android.view.DisplayCutout,android.util.Pair,int)>
<com.android.systemui.statusbar.notification.row.NotificationRowContentBinder: void bindContent(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,int,com.android.systemui.statusbar.notification.row.NotificationRowContentBinder.BindParams,boolean,com.android.systemui.statusbar.notification.row.NotificationRowContentBinder.InflationCallback)>
<com.android.commands.sm.Sm: void runListVolumes()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUninstallBlocked(android.content.ComponentName,java.lang.String)>
<com.android.settingslib.RestrictedSwitchPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.net.wifi.hotspot2.PasspointConfiguration: java.util.Map getTrustRootCertList()>
<android.content.pm.PackageManagerInternal: void removeDistractingPackageRestrictions(java.lang.String,int)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean handleSetOsdName(com.android.server.hdmi.HdmiCecMessage)>
<com.android.systemui.statusbar.HeadsUpStatusBarView: com.android.systemui.statusbar.notification.collection.NotificationEntry getShowingEntry()>
<com.android.server.input.InputManagerService: void monitor()>
<android.net.wifi.rtt.WifiRttManager: void <init>(android.content.Context,android.net.wifi.rtt.IWifiRttManager)>
<com.android.settingslib.bluetooth.PbapClientProfile: java.lang.String toString()>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getAttributions()>
<com.android.server.policy.keyguard.KeyguardStateMonitor: void onShowingStateChanged(boolean)>
<com.android.systemui.statusbar.notification.TransformState: void setTransformationStartY(float)>
<android.util.ArraySetPerfTest: void testRemoveIf_Large_Base()>
<android.os.LooperStatsPerfTest: void timeHundredPercentSampling()>
<com.android.settingslib.media.MediaDevice: int getCurrentVolume()>
<com.android.server.pm.CrossProfileAppsServiceImpl.Injector: void restoreCallingIdentity(long)>
<com.android.server.locksettings.SyntheticPasswordManager: android.hardware.weaver.V1_0.IWeaver getWeaverService()>
<com.android.server.timezone.RulesManagerService: void start()>
<com.android.systemui.globalactions.GlobalActionsItem: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.tuner.ShortcutParser: void <init>(android.content.Context,android.content.ComponentName)>
<com.android.server.infra.ServiceNameResolver: void resetTemporaryService(int)>
<com.android.server.BinderCallsStatsService.Internal: void reset()>
<com.android.systemui.statusbar.phone.NavigationBarInflaterView: void dump(java.io.PrintWriter)>
<com.android.systemui.statusbar.phone.AutoTileManager: int getCurrentUserId()>
<com.android.server.os.BugreportManagerService: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.stack.NotificationSection: boolean setLastVisibleChild(com.android.systemui.statusbar.notification.row.ExpandableView)>
<android.net.wifi.WifiConfiguration: boolean needsPreSharedKey()>
<com.android.systemui.statusbar.notification.VisualStabilityManager: void onReorderingFinished()>
<com.android.server.soundtrigger.SoundTriggerLogger: void <init>(int,java.lang.String)>
<com.android.gallery3d.exif.ExifInterface: com.android.gallery3d.exif.Rational[] getTagRationalValues(int,int)>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledApplications(int,int)>
<com.android.server.display.BrightnessTracker: android.content.pm.ParceledListSlice getAmbientBrightnessStats(int)>
<com.android.systemui.statusbar.NotificationListener: void registerAsSystemService()>
<com.android.systemui.statusbar.notification.row.HybridNotificationView: void transformFrom(com.android.systemui.statusbar.TransformableView)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: java.lang.String toString()>
<com.android.systemui.qs.tiles.CellularTile: int getMetricsCategory()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: int getPeekHeight()>
<com.android.systemui.qs.QSPanel.QSTileLayout: void removeTile(com.android.systemui.qs.QSPanel.TileRecord)>
<com.android.server.accounts.AccountManagerService: void clearPassword(android.accounts.Account)>
<com.android.settingslib.drawer.Tile: int getId()>
<com.android.server.protolog.common.LogDataType: int logDataTypesToBitMask(java.util.List)>
<com.android.server.pm.IntentFilterVerificationState: java.lang.String getHostsString()>
<android.media.MediaSession2.Builder: android.media.MediaSession2.Builder setExtras(android.os.Bundle)>
<com.android.systemui.statusbar.phone.NavigationBarView: void onDetachedFromWindow()>
<com.android.systemui.ForegroundServicesDialog: void onResume()>
<com.android.systemui.pip.phone.PipTouchState: void <init>(android.view.ViewConfiguration,android.os.Handler,java.lang.Runnable,java.lang.Runnable)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isPulseSuppressed()>
<com.android.server.slice.SliceProviderPermissions.SliceAuthority: boolean equals(java.lang.Object)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void reportKeyguardSecured(int)>
<com.android.systemui.pip.phone.PipAppOpsListener.Callback: void dismissPip()>
<com.android.systemui.tuner.TunerService: java.lang.String getValue(java.lang.String,java.lang.String)>
<com.android.settingslib.bluetooth.BluetoothCallback: void onAudioModeChanged()>
<com.android.systemui.pip.PipAnimationController.PipAnimationCallback: void onPipAnimationCancel(com.android.systemui.pip.PipAnimationController.PipTransitionAnimator)>
<com.android.systemui.statusbar.policy.ZenModeController: boolean isVolumeRestricted()>
<com.android.systemui.statusbar.policy.HeadsUpManager: boolean isSnoozed(java.lang.String)>
<com.android.server.pm.parsing.pkg.PackageImpl: boolean isNativeLibraryRootRequiresIsa()>
<com.android.systemui.qs.tileimpl.QSTileImpl: void fireToggleStateChanged(boolean)>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int[])>
<com.android.server.audio.AudioService: int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
<android.net.wifi.hotspot2.pps.Policy: boolean equals(java.lang.Object)>
<android.net.wifi.hotspot2.pps.Credential: android.net.wifi.hotspot2.pps.Credential.UserCredential getUserCredential()>
<com.android.server.adb.AdbDebuggingManager: void unpairDevice(java.lang.String)>
<com.android.systemui.plugins.ClockPlugin: void onTimeTick()>
<com.android.systemui.classifier.FalsingManagerFake: void onNotificationActive()>
<com.android.systemui.statusbar.notification.stack.AmbientState: float getCurrentScrollVelocity()>
<android.net.wifi.hotspot2.pps.Policy: java.lang.String toString()>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: java.lang.String getProductString(com.android.server.usb.descriptors.UsbDescriptorParser)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry.EditedSuggestionInfo: void <init>(java.lang.CharSequence,int)>
<android.net.wifi.WifiInfo: void setFQDN(java.lang.String)>
<com.android.server.biometrics.BiometricServiceBase.AuthenticationClientImpl: void onStop()>
<com.android.server.Watchdog: void init(android.content.Context,com.android.server.am.ActivityManagerService)>
<com.android.keyguard.KeyguardUpdateMonitor.StrongAuthTracker: boolean isUnlockingWithBiometricAllowed(boolean)>
<com.android.server.slice.SliceFullAccessList: void grantFullAccess(java.lang.String,int)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: boolean isReportingEnabled()>
<com.android.server.midi.MidiService: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
<com.android.server.usb.descriptors.Usb10ASFormatII: int getMaxBitRate()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isExpandable()>
<android.net.wifi.p2p.WifiP2pConfig: java.lang.String getPassphrase()>
<com.android.server.accessibility.gestures.TouchExplorer: void setGestureDetectionPassthroughRegion(android.graphics.Region)>
<com.android.server.locksettings.LockSettingsService: void <init>(com.android.server.locksettings.LockSettingsService.Injector)>
<com.android.server.locksettings.VersionedPasswordMetrics: void <init>(com.android.internal.widget.LockscreenCredential)>
<com.android.uiautomator.core.UiScrollable: com.android.uiautomator.core.UiObject getChildByText(com.android.uiautomator.core.UiSelector,java.lang.String,boolean)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout: boolean arePropertiesAnimating(androidx.dynamicanimation.animation.DynamicAnimation.ViewProperty[])>
<com.android.server.media.MediaRouterService: void unregisterClient(android.media.IMediaRouterClient)>
<com.android.systemui.dagger.DependencyProvider: android.hardware.display.AmbientDisplayConfiguration provideAmbientDisplayConfiguration(android.content.Context)>
<com.android.server.AnyMotionDetector: void stop()>
<android.net.wifi.SoftApInfo: int hashCode()>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: android.view.NotificationHeaderView getVisibleHeader()>
<com.android.server.pm.permission.BasePermission: void enforceDeclaredUsedAndRuntimeOrDevelopment(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>
<com.android.server.policy.WindowManagerPolicy: java.lang.String userRotationModeToString(int)>
<com.android.server.appop.AudioRestrictionManager: int checkAudioOperation(int,int,int,java.lang.String)>
<com.android.server.NetworkManagementService: boolean isTetheringStarted()>
<com.android.server.media.BluetoothRouteProvider.BluetoothRoutesUpdatedListener: void onBluetoothRoutesUpdated(java.util.List)>
<com.android.systemui.classifier.FalsingManagerFake: boolean isReportingEnabled()>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void setActualHeight(int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: com.android.systemui.statusbar.notification.row.ExpandableNotificationRow getHeadsUpAnimationView()>
<com.android.systemui.power.EnhancedEstimates: long getLowWarningThreshold()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void invalidateKeysForUser(int)>
<com.android.systemui.keyguard.WorkLockActivity: void unregisterBroadcastReceiver()>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper getSwipeActionHelper()>
<com.android.systemui.statusbar.phone.StatusBar: void onTrackingStopped(boolean)>
<com.android.systemui.qs.QuickStatusBarHeader: void onAttachedToWindow()>
<com.android.settingslib.CustomDialogPreference: void onBindDialogView(android.view.View)>
<com.android.server.usb.descriptors.UsbDescriptorParser: com.android.server.usb.descriptors.UsbDeviceDescriptor getDeviceDescriptor()>
<android.net.wifi.WifiManager.WifiLock: void setReferenceCounted(boolean)>
<com.android.systemui.qs.SlashDrawable: void setTintMode(android.graphics.PorterDuff.Mode)>
<com.android.systemui.car.window.OverlayPanelViewController.CloseGestureListener: boolean onSingleTapUp(android.view.MotionEvent)>
<android.net.TetheringManager: void <init>(android.content.Context,java.util.function.Supplier)>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: boolean handleCloseControls(boolean,boolean)>
<com.android.server.NetworkScoreService: java.util.List getAllValidScorers()>
<android.net.wifi.WifiConfiguration: boolean isOpenNetwork()>
<com.android.proxyhandler.ProxyServer: boolean isBound()>
<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>
<com.android.server.media.MediaRouterService: java.util.List getActiveSessions(android.media.IMediaRouter2Manager)>
<android.net.wifi.aware.WifiAwareNetworkSpecifier: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.tuner.ClockPreference: void onDetached()>
<com.android.settingslib.media.MediaManager: void dispatchConnectedDeviceChanged(java.lang.String)>
<com.android.server.PackageWatchdog.PackageHealthObserver: java.lang.String getName()>
<com.android.systemui.pip.PipBoundsHandler: float getSnapFraction(android.graphics.Rect)>
<com.android.systemui.statusbar.KeyboardShortcuts: void dismiss()>
<com.android.systemui.shared.system.PinnedStackListenerForwarder.PinnedStackListener: void onAspectRatioChanged(float)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void removeAllPermissions(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>
<com.android.systemui.statusbar.GestureRecorder.Gesture.MotionEventRecord: java.lang.String toJson()>
<com.android.systemui.statusbar.phone.ContextualButton: boolean hide()>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.notification.row.PartialConversationInfo: boolean needsFalsingProtection()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void setDismissRtl(boolean)>
<com.android.systemui.volume.VolumeDialogImpl: void rescheduleTimeoutH()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView.InteractionEventHandler: boolean handleTouchEvent(android.view.MotionEvent)>
<com.android.systemui.statusbar.NotificationRemoteInputManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.midi.MidiService.Lifecycle: void <init>(android.content.Context)>
<com.android.systemui.SystemUI: void overrideNotificationAppName(android.content.Context,android.app.Notification.Builder,boolean)>
<com.android.systemui.media.MediaControlPanel: void <init>(android.content.Context,java.util.concurrent.Executor,com.android.systemui.plugins.ActivityStarter,com.android.systemui.medi.MediaViewController,com.android.systemui.medi.SeekBarViewModel,dagger.Lazy,com.android.systemui.statusbar.phone.KeyguardDismissUtil,com.android.systemui.media.dialog.MediaOutputDialogFactory)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onScreenTurnedOff()>
<com.android.systemui.doze.DozeWallpaperState: void <init>(android.app.IWallpaperManager,com.android.systemui.statusbar.phone.BiometricUnlockController,com.android.systemui.statusbar.phone.DozeParameters)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: void setOutlineRect(float,float,float,float)>
<com.android.systemui.statusbar.phone.RotationButton: void setOnHoverListener(android.view.View.OnHoverListener)>
<com.android.systemui.wifi.WifiDebuggingSecondaryUserActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.car.userswitcher.UserSwitcherContainer: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.statusbar.notification.TransformState: boolean sameAs(com.android.systemui.statusbar.notification.TransformState)>
<com.android.server.clipboard.HostClipboardMonitor.HostClipboardCallback: void onHostClipboardUpdated(java.lang.String)>
<com.android.systemui.statusbar.policy.RemoteInputView: void onVisibilityChanged(android.view.View,int)>
<com.android.settingslib.accounts.AuthenticatorHelper: android.accounts.AuthenticatorDescription getAccountTypeDescription(java.lang.String)>
<android.text.PaintMeasureDrawPerfTest: void timeDraw()>
<com.android.server.pm.IntentFilterVerificationState: void setState(int)>
<javax.obex.SessionNotifier: javax.obex.ObexSession acceptAndOpen(javax.obex.ServerRequestHandler)>
<com.android.keyguard.KeyguardPinBasedInputView: java.lang.CharSequence getTitle()>
<com.android.settingslib.applications.ApplicationsState: com.android.settingslib.applications.ApplicationsState.Session newSession(com.android.settingslib.applications.ApplicationsState.Callbacks,androidx.lifecycle.Lifecycle)>
<com.android.systemui.statusbar.RemoteInputController.Callback: void onRemoteInputActive(boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getGlobalPrivateDnsMode(android.content.ComponentName)>
<com.android.systemui.shared.system.RecentsAnimationControllerCompat: void finish(boolean,boolean)>
<com.android.systemui.car.notification.NotificationPanelViewMediator: void <init>(com.android.systemui.car.navigationbar.CarNavigationBarController,com.android.systemui.car.notification.NotificationPanelViewController,com.android.systemui.car.notification.PowerManagerHelper,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.car.CarDeviceProvisionedController,com.android.systemui.statusbar.policy.ConfigurationController)>
<com.android.server.tv.UinputBridge: void sendKeyDown(android.os.IBinder,int)>
<com.android.server.PruneInstantAppsJobService: boolean onStopJob(android.app.job.JobParameters)>
<com.android.server.infra.AbstractPerUserSystemService: boolean updateLocked(boolean)>
<com.android.systemui.statusbar.phone.NavigationBarView: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.statusbar.policy.HeadsUpManager: void setExpanded(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: android.view.View getHostView()>
<com.android.server.audio.AudioSystemAdapter: boolean isMicrophoneMuted()>
<com.android.permission.persistence.RuntimePermissionsState: java.util.Map getSharedUserPermissions()>
<com.android.systemui.bubbles.BubbleStackView: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.settingslib.applications.ServiceListing: void setListening(boolean)>
<com.android.server.policy.IconUtilities: android.graphics.Bitmap createIconBitmap(android.graphics.drawable.Drawable)>
<com.android.systemui.analytics.DataCollector: void onNotificationDoubleTap()>
<com.android.systemui.doze.DozeMachine.Service: void setDozeScreenBrightness(int)>
<com.android.wallpapercropper.CropView: android.graphics.Point getSourceDimensions()>
<com.android.server.AlarmManagerInternal: void registerInFlightListener(com.android.server.AlarmManagerInternal.InFlightListener)>
<com.android.systemui.shared.tracing.FrameProtoTracer: void remove(com.android.systemui.shared.tracing.ProtoTraceable)>
<com.android.server.hdmi.ArcInitiationActionFromAvr: void sendInitiateArc()>
<com.android.server.textclassifier.FixedSizeQueue: void <init>(int,com.android.server.textclassifier.FixedSizeQueue.OnEntryEvictedListener)>
<com.android.settingslib.RestrictedSwitchPreference: void setEnabled(boolean)>
<android.perftests.utils.BenchmarkState: boolean keepRunning()>
<android.app.StatsManager.PullAtomMetadata.Builder: android.app.StatsManager.PullAtomMetadata.Builder setCoolDownMillis(long)>
<com.android.systemui.statusbar.notification.stack.NotificationListItem: boolean applyChildOrder(java.util.List,com.android.systemui.statusbar.notification.VisualStabilityManager,com.android.systemui.statusbar.notification.VisualStabilityManager.Callback)>
<com.android.systemui.statusbar.phone.DozeServiceHost: void setAodDimmingScrim(float)>
<com.android.media.remotedisplay.RemoteDisplay: int getVolumeMax()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: int getLayoutMinHeight()>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: int getCandidateScore()>
<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermission(java.lang.String)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.permission.persistence.RuntimePermissionsState: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy.WifiIconState: boolean equals(java.lang.Object)>
<com.android.server.pm.PackageManagerService: java.lang.String[] getAppOpPermissionPackages(java.lang.String)>
<com.android.systemui.plugins.qs.QSTile: void destroy()>
<com.android.systemui.qs.QuickQSPanel: void <init>(android.content.Context,android.util.AttributeSet,com.android.systemui.dump.DumpManager,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.qs.logging.QSLogger,com.android.systemui.media.MediaHost,com.android.internal.logging.UiEventLogger)>
<android.net.wifi.aware.WifiAwareNetworkInfo: boolean equals(java.lang.Object)>
<com.android.server.pm.PackageManagerService: void setHarmfulAppWarning(java.lang.String,java.lang.CharSequence,int)>
<com.android.systemui.wm.SystemWindows: void <init>(android.content.Context,com.android.systemui.wm.DisplayController,android.view.IWindowManager)>
<com.android.systemui.statusbar.notification.collection.NotifInflaterImpl: void <init>(com.android.internal.statusbar.IStatusBarService,com.android.systemui.statusbar.notification.collection.NotifCollection,com.android.systemui.statusbar.notification.row.NotifInflationErrorManager,com.android.systemui.statusbar.notification.collection.NotifPipeline)>
<com.android.systemui.statusbar.notification.collection.listbuilder.OnBeforeTransformGroupsListener: void onBeforeTransformGroups(java.util.List)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isBlockingHelperShowingAndTranslationFinished()>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifLifetimeExtender: void setCallback(com.android.systemui.statusbar.notification.collection.notifcollection.NotifLifetimeExtender.OnEndLifetimeExtensionCallback)>
<com.android.server.compat.PlatformCompatNative: void <init>(com.android.server.compat.PlatformCompat)>
<com.android.server.biometrics.BiometricServiceBase.AuthenticationClientImpl: void onStart()>
<com.android.server.ConnectivityService: boolean requestBandwidthUpdate(android.net.Network)>
<com.android.systemui.volume.VolumeDialogImpl: void tryToRemoveCaptionsTooltip()>
<android.net.wifi.IScanResultsListener: void onScanResultsAvailable()>
<com.android.systemui.plugins.PluginInitializerImpl: void onPluginManagerInit()>
<com.android.systemui.statusbar.phone.NavigationHandle: void setDarkIntensity(float)>
<com.android.systemui.tv.TvSystemUIRootComponent.Builder: com.android.systemui.tv.TvSystemUIRootComponent build()>
<com.android.server.pm.Installer: void getAppSize(java.lang.String,java.lang.String[],int,int,int,long[],java.lang.String[],android.content.pm.PackageStats)>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void abortTask()>
<com.android.systemui.statusbar.policy.NetworkController: void addCallback(com.android.systemui.statusbar.policy.NetworkController.SignalCallback)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getPermission()>
<com.android.systemui.dagger.SystemUIRootComponent: com.android.systemui.statusbar.policy.ConfigurationController getConfigurationController()>
<com.android.server.storage.StorageSessionController: void onUnlockUser(int)>
<com.android.systemui.statusbar.CrossFadeHelper: void fadeOut(android.view.View)>
<com.android.settingslib.users.AppRestrictionsHelper: java.util.List getVisibleApps()>
<com.android.server.pm.ApexManager.ApexManagerImpl: long snapshotCeData(int,int,java.lang.String)>
<com.android.systemui.statusbar.phone.DozeParameters: long getWallpaperAodDuration()>
<com.android.networkstack.tethering.OffloadHardwareInterface.ControlCallback: void onStoppedLimitReached()>
<com.android.server.pm.AppsFilter: void removePackage(com.android.server.pm.PackageSetting)>
<com.android.uiautomator.core.UiAutomatorBridge: void setOnAccessibilityEventListener(android.app.UiAutomation.OnAccessibilityEventListener)>
<com.android.settingslib.wifi.AccessPointPreference.UserBadgeCache: void <init>(android.content.pm.PackageManager)>
<com.android.systemui.statusbar.notification.TransformState: int getViewWidth()>
<com.android.keyguard.clock.ClockLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setOnEmptySpaceClickListener(com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout.OnEmptySpaceClickListener)>
<com.android.systemui.statusbar.policy.SmartReplyView: android.view.ViewGroup.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams)>
<com.android.server.compat.PlatformCompat: boolean clearOverride(long,java.lang.String)>
<android.content.pm.PackageManagerInternal: int getDistractingPackageRestrictions(java.lang.String,int)>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalPnoScanTimeMillis()>
<com.android.uiautomator.core.UiScrollable: boolean scrollBackward(int)>
<com.android.server.biometrics.face.FaceUtils: void addBiometricForUser(android.content.Context,int,android.hardware.biometrics.BiometricAuthenticator.Identifier)>
<com.android.printservice.recommendation.plugin.google.CloudPrintPlugin: void stop()>
<com.android.systemui.statusbar.policy.BrightnessMirrorController: void onUiModeChanged()>
<com.android.wallpapercropper.WallpaperCropActivity: void setWallpaper(java.lang.String,boolean)>
<com.android.systemui.qs.QSTileHost: com.android.systemui.qs.logging.QSLogger getQSLogger()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: boolean removeKey(int,java.lang.String)>
<com.android.server.IntentResolver: java.util.Iterator filterIterator()>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: boolean userAllowsPrivateNotificationsInPublic(int)>
<android.net.wifi.hotspot2.pps.Policy.RoamingPartner: java.lang.String getFqdn()>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: void <init>(android.net.wifi.hotspot2.pps.Credential.SimCredential)>
<android.app.ResourcesPerfTest: void setUp()>
<com.android.server.appbinding.finders.AppServiceFinder: java.lang.String getAppDescription()>
<com.android.systemui.volume.ConfigurableTexts: void remove(android.widget.TextView)>
<com.android.systemui.qs.tiles.BluetoothTile: void handleClick()>
<com.android.server.infra.SecureSettingsServiceNameResolver: void dumpShort(java.io.PrintWriter,int)>
<com.android.server.accessibility.gestures.TouchState: void startTouchExploring()>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void onUserSetupChanged()>
<com.android.server.usb.descriptors.UsbDescriptorParser: java.util.ArrayList getDescriptors(byte)>
<com.android.role.persistence.RolesPersistenceImpl: void writeForUser(com.android.role.persistence.RolesState,android.os.UserHandle)>
<com.android.systemui.statusbar.StatusBarIconView: float getIconAppearAmount()>
<com.android.server.accessibility.gestures.TouchState: long getLastInjectedDownEventTime()>
<com.android.systemui.plugins.ClockPlugin: void setColorPalette(boolean,int[])>
<android.media.MediaSession2Service: void onCreate()>
<android.net.wifi.WifiNetworkSuggestion: java.lang.String toString()>
<com.android.systemui.statusbar.policy.DeviceProvisionedControllerImpl: boolean isDeviceProvisioned()>
<com.android.server.media.MediaRoute2ProviderWatcher.Callback: void onRemoveProviderService(com.android.server.media.MediaRoute2ProviderServiceProxy)>
<com.android.systemui.pip.tv.PipManager: void resumePipResizing(int)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: android.view.View getNotificationInnerAreaView()>
<com.android.systemui.classifier.FalsingLog: void v(java.lang.String,java.lang.String)>
<com.android.keyguard.KeyguardPasswordView: int getPromptReasonStringRes(int)>
<com.android.server.locksettings.recoverablekeystore.WrappedKey: java.util.Map unwrapKeys(com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey,java.util.Map)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: boolean isDozing()>
<com.android.settingslib.graph.SignalDrawable: int getIntrinsicWidth()>
<com.android.bluetoothmidiservice.MidiBtleTimeTracker: void setWindowMillis(int)>
<com.android.systemui.qs.dagger.QSModule: com.android.systemui.statusbar.phone.AutoTileManager provideAutoTileManager(android.content.Context,com.android.systemui.qs.AutoAddTracker.Builder,com.android.systemui.qs.QSTileHost,android.os.Handler,com.android.systemui.statusbar.policy.HotspotController,com.android.systemui.statusbar.policy.DataSaverController,com.android.systemui.statusbar.phone.ManagedProfileController,android.hardware.display.NightDisplayListener,com.android.systemui.statusbar.policy.CastController)>
<android.net.wifi.SoftApConfiguration.Builder: android.net.wifi.SoftApConfiguration.Builder setChannel(int,int)>
<com.android.server.pm.UserManagerService: void setUserName(int,java.lang.String)>
<javax.microedition.khronos.opengles.GL10: int glGetError()>
<com.android.systemui.statusbar.notification.row.NotificationRowContentBinder.InflationCallback: void handleInflationException(com.android.systemui.statusbar.notification.collection.NotificationEntry,java.lang.Exception)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: android.view.ViewGroup getNotificationShadeView()>
<com.android.networkstack.tethering.OffloadController: void dump(com.android.internal.util.IndentingPrintWriter)>
<com.android.settingslib.location.RecentLocationApps: java.util.List getAppListSorted(boolean)>
<com.android.systemui.globalactions.GlobalActionsGridLayout: boolean shouldReverseSublists()>
<com.android.server.inputmethod.InputMethodManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.server.pm.PackageSettingBase: android.content.pm.Signature[] getSignatures()>
<com.android.settingslib.suggestions.SuggestionControllerMixinCompat: void onServiceDisconnected()>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getDomainSuffixMatch()>
<com.android.systemui.volume.VolumeDialogControllerImpl: void addCallback(com.android.settingslib.volume.MediaSessions.Callbacks,android.os.Handler)>
<javax.obex.ClientOperation: boolean continueOperation(boolean,boolean)>
<com.android.settingslib.applications.DefaultAppInfo: java.lang.CharSequence loadLabel()>
<com.android.keyguard.KeyguardSecurityViewFlipper: void <init>(android.content.Context)>
<com.android.systemui.classifier.FalsingManagerImpl: void cleanup()>
<com.android.printspooler.ui.PrinterRegistry: boolean areHistoricalPrintersLoaded()>
<com.android.settingslib.RestrictedLockUtilsInternal: void setTextViewAsDisabledByAdmin(android.content.Context,android.widget.TextView,boolean)>
<com.android.gallery3d.glrenderer.GLCanvas: float getAlpha()>
<com.android.server.attention.AttentionManagerService: void onStart()>
<com.android.server.appbinding.AppBindingService.Lifecycle: void onBootPhase(int)>
<com.android.server.infra.ServiceNameResolver: boolean isDefaultServiceEnabled(int)>
<com.android.server.contentcapture.ContentCaptureManagerService: void onServicePackageUpdatingLocked(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void onNotificationRankingUpdated()>
<com.android.server.pm.PackageManagerService: void setSystemAppHiddenUntilInstalled(java.lang.String,boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineViewController: void init()>
<com.android.server.media.MediaSession2Record: java.lang.String getPackageName()>
<com.android.server.policy.LogDecelerateInterpolator: void <init>(int,int)>
<android.net.ip.IpServer.Dependencies: android.net.ip.RouterAdvertisementDaemon getRouterAdvertisementDaemon(android.net.util.InterfaceParams)>
<com.android.systemui.dagger.DefaultServiceBinder: android.app.Service bindSystemUIAuxiliaryDumpService(com.android.systemui.dump.SystemUIAuxiliaryDumpService)>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void setBar(com.android.systemui.statusbar.phone.StatusBar)>
<com.android.systemui.plugins.statusbar.DozeParameters: boolean shouldControlScreenOff()>
<com.android.server.appprediction.RemoteAppPredictionService: void <init>(android.content.Context,java.lang.String,android.content.ComponentName,int,com.android.server.appprediction.RemoteAppPredictionService.RemoteAppPredictionServiceCallbacks,boolean,boolean)>
<com.android.keyguard.KeyguardSecurityViewFlipper.LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setRemoved()>
<com.android.systemui.biometrics.AuthPanelController: void setContainerDimensions(int,int)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onShortPowerPressedGoHome()>
<com.android.systemui.car.volume.CarVolumeItemAdapter: void <init>(android.content.Context,java.util.List)>
<com.android.settingslib.widget.CandidateInfo: android.graphics.drawable.Drawable loadIcon()>
<com.android.systemui.statusbar.notification.stack.SectionHeaderView: android.view.View findSecondaryView()>
<com.android.settingslib.graph.BatteryMeterDrawableBase: void setShowPercent(boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableViewController: void <init>(com.android.systemui.statusbar.notification.row.ExpandableView)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void onBouncerPreHideAnimation()>
<com.android.systemui.shared.recents.model.Task: void removeCallback(com.android.systemui.shared.recents.model.Task.TaskCallbacks)>
<com.android.systemui.statusbar.notification.row.StackScrollerDecorView: boolean isTransparent()>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void drawableHotspotChanged(float,float)>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: java.lang.String getRestrictedAccountType()>
<com.android.systemui.qs.tiles.WorkModeTile: java.lang.CharSequence getTileLabel()>
<com.android.systemui.volume.CaptionsToggleImageButton: int[] onCreateDrawableState(int)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.ParsedPackage setVersionCodeMajor(int)>
<com.android.systemui.shared.system.TaskStackChangeListener: void onTaskSnapshotChanged(int,com.android.systemui.shared.recents.model.ThumbnailData)>
<com.android.server.accessibility.AccessibilityWindowManager: void notifyOutsideTouch(int,int)>
<com.android.systemui.shared.system.TaskStackChangeListener: void onTaskRemoved(int)>
<com.android.systemui.statusbar.CastDrawable: boolean setVisible(boolean,boolean)>
<com.android.settingslib.bluetooth.BluetoothUtils: android.graphics.drawable.Drawable getBluetoothDrawable(android.content.Context,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: int getIntrinsicContentHeight()>
<com.android.systemui.biometrics.AuthController: void showAuthenticationDialog(android.os.Bundle,android.hardware.biometrics.IBiometricServiceReceiverInternal,int,boolean,int,java.lang.String,long,int)>
<android.net.wifi.SoftApConfiguration.Builder: android.net.wifi.SoftApConfiguration.Builder setAllowedClientList(java.util.List)>
<com.android.systemui.statusbar.policy.KeyguardStateController: boolean isKeyguardGoingAway()>
<com.android.gallery3d.glrenderer.Texture: int getHeight()>
<com.android.keyguard.KeyguardUpdateMonitor: void setStrongAuthTracker(com.android.keyguard.KeyguardUpdateMonitor.StrongAuthTracker)>
<com.android.systemui.statusbar.CommandQueue: void hideAuthenticationDialog()>
<com.android.systemui.RegionInterceptingFrameLayout: void onAttachedToWindow()>
<com.android.server.rollback.RollbackPackageHealthObserver: void onBootCompletedAsync()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.util.List getRecoveryAgents(int)>
<com.android.settingslib.wifi.WifiTracker: void onStart()>
<android.net.wifi.hotspot2.PasspointConfiguration: void setMeteredOverride(int)>
<com.google.android.startop.iorap.PackageEvent: boolean equals(java.lang.Object)>
<com.android.server.policy.SoftRestrictedPermissionPolicy: int getExtraAppOpCode()>
<com.android.systemui.car.navigationbar.CarNavigationButton: boolean isDefaultAppIconForRoleEnabled()>
<android.widget.EditTextBackspacePerfTest: void <init>(java.lang.String,java.lang.String,int)>
<com.android.systemui.qs.tiles.DndTile: boolean isCombinedIcon(android.content.SharedPreferences)>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[][] getUsesStaticLibrariesCertDigests()>
<com.android.printspooler.widget.PrintOptionsLayout: void onLayout(boolean,int,int,int,int)>
<com.android.systemui.pip.PipBoundsHandler: boolean hasSaveReentryBounds()>
<com.android.systemui.statusbar.CommandQueue: void onSystemBarAppearanceChanged(int,int,com.android.internal.view.AppearanceRegion[],boolean)>
<com.android.systemui.statusbar.policy.AccessibilityManagerWrapper: boolean isEnabled()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void toggleRecentApps()>
<com.android.systemui.dagger.DependencyProvider: com.android.systemui.statusbar.phone.AutoHideController provideAutoHideController(android.content.Context,android.os.Handler,android.view.IWindowManager)>
<android.net.ip.IpServer.Dependencies: int getIfindex(java.lang.String)>
<com.android.systemui.car.notification.NotificationPanelViewMediator: com.android.systemui.car.navigationbar.CarNavigationBarController getCarNavigationBarController()>
<com.android.systemui.recents.OverviewProxyService.OverviewProxyListener: void onConnectionChanged(boolean)>
<com.android.uiautomator.core.UiObject: boolean isEnabled()>
<com.android.systemui.car.notification.NotificationPanelViewController: void onFinishInflate()>
<com.android.systemui.qs.QSPanel: void setTiles(java.util.Collection)>
<com.android.keyguard.KeyguardClockSwitch: int getCurrentTextColor()>
<com.android.printspooler.ui.PageAdapter: android.print.PageRange[] getRequestedPages()>
<android.media.Session2Link: void connect(android.media.Controller2Link,int,android.os.Bundle)>
<com.android.settingslib.wifi.WifiEntryPreference: void <init>(android.content.Context,com.android.wifitrackerlib.WifiEntry)>
<com.android.settingslib.bluetooth.HearingAidProfile: int getProfileId()>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: void setAppName(java.lang.String)>
<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
<com.android.fakeoemfeatures.FakeView: void onDraw(android.graphics.Canvas)>
<com.android.systemui.statusbar.notification.row.RowContentBindParams: void requireContentViews(int)>
<com.android.systemui.qs.tiles.LocationTile: java.lang.String composeChangeAnnouncement()>
<com.android.systemui.qs.tiles.CellularTile: com.android.systemui.plugins.qs.QSIconView createTileView(android.content.Context)>
<com.android.systemui.statusbar.KeyguardIndicationController.BaseKeyguardCallback: void onBiometricRunningStateChanged(boolean,android.hardware.biometrics.BiometricSourceType)>
<com.android.server.appop.AppOpsService: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
<com.android.systemui.media.ResumeMediaBrowser: void disconnect()>
<com.android.server.pm.permission.PermissionManagerService.Injector: long clearCallingIdentity()>
<com.android.systemui.globalactions.GlobalActionsColumnLayout: float getGridItemSize()>
<com.android.systemui.settings.ToggleSliderView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.DessertCase: void onPause()>
<com.android.server.locksettings.LockSettingsService: boolean checkVoldPassword(int)>
<com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry: long calculatePostTime()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setActualHeightAnimating(boolean)>
<android.net.wifi.WifiSsid: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: android.app.Notification.BubbleMetadata getBubbleMetadata()>
<com.android.server.testing.shadows.FrameworkShadowLooper: boolean isCurrentThread()>
<com.android.permission.persistence.RuntimePermissionsState.PermissionState: void <init>(java.lang.String,boolean,int)>
<com.android.networkstack.tethering.TetheringConfiguration: android.net.TetheringConfigurationParcel toStableParcelable()>
<com.android.systemui.shared.system.TransactionCompat: com.android.systemui.shared.system.TransactionCompat setEarlyWakeup()>
<com.android.systemui.BatteryMeterView: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.qs.QSTileHost: void openPanels()>
<com.android.settingslib.bluetooth.PbapServerProfile: boolean isProfileReady()>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameterxv(int,int,int[],int)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView.OnDimmedListener: void onSetDimmed(boolean)>
<com.android.server.biometrics.face.FaceAuthenticator: void cancelAuthenticationFromService(android.os.IBinder,java.lang.String,int,int,int,boolean)>
<android.net.wifi.WifiManager: void clearWifiConnectedNetworkScorer()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean isLaunchTransitionRunning()>
<com.android.location.provider.LocationProviderBase: long onGetStatusUpdateTime()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: int getUniqueId()>
<com.android.settingslib.wifi.TestAccessPointBuilder: com.android.settingslib.wifi.TestAccessPointBuilder setWifiInfo(android.net.wifi.WifiInfo)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setPrivileged(boolean)>
<com.android.server.inputmethod.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>
<com.android.keyguard.clock.AnalogClockController: android.view.View getBigClockView()>
<android.perftests.utils.ManualBenchmarkState: boolean isWarmingUp()>
<com.android.systemui.pip.phone.PipTouchHandler: void setTouchEnabled(boolean)>
<com.android.systemui.settings.ToggleSliderView: void <init>(android.content.Context)>
<com.android.systemui.stackdivider.WindowManagerProxy: void setResizing(boolean)>
<com.android.server.webkit.SystemImpl: android.content.pm.PackageInfo getPackageInfoForProvider(android.webkit.WebViewProviderInfo)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean scrollTo(android.view.View)>
<android.multiuser.UserLifecycleTests: void lockedBootCompleted()>
<com.android.server.pm.PackageManagerService: java.lang.String getSetupWizardPackageName()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordExpirationTimeout(android.content.ComponentName,long,boolean)>
<com.android.server.people.PeopleServiceInternal: void restore(int,byte[])>
<com.android.settingslib.net.NetworkCycleDataForUid.Builder: com.android.settingslib.net.NetworkCycleDataForUid getObject()>
<android.net.wifi.WifiInfo: android.net.wifi.WifiSsid getWifiSsid()>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: boolean drawChild(android.graphics.Canvas,android.view.View,long)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void setChildrenExpanded(boolean)>
<com.android.settingslib.search.Indexable.SearchIndexProvider: java.util.List getNonIndexableKeys(android.content.Context)>
<com.android.systemui.statusbar.policy.ZenModeController: boolean isZenAvailable()>
<com.android.systemui.statusbar.notification.collection.inflation.NotificationRowBinder: void inflateViews(com.android.systemui.statusbar.notification.collection.NotificationEntry,java.lang.Runnable,com.android.systemui.statusbar.notification.row.NotificationRowContentBinder.InflationCallback)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeEnablerManager: void save(android.content.Context,androidx.preference.PreferenceFragment)>
<com.android.systemui.qs.tileimpl.QSTileImpl.ResourceIcon: android.graphics.drawable.Drawable getInvisibleDrawable(android.content.Context)>
<com.android.systemui.statusbar.phone.PanelViewController: float getExpandedFraction()>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: boolean hasOverlappingRendering()>
<com.android.systemui.volume.ZenModePanel: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.statusbar.phone.MultiUserSwitch: void setClickable(boolean)>
<com.android.settingslib.widget.AnimatedImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<com.android.server.tv.TvInputHardwareManager.Listener: void onStateChanged(java.lang.String,int)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setWpa3Passphrase(java.lang.String)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void fillRect(float,float,float,float,int)>
<com.android.settingslib.drawable.CircleFramedDrawable: void setColorFilter(android.graphics.ColorFilter)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void setFirstInSection(boolean)>
<com.android.systemui.statusbar.phone.StatusBarWindowController: int getStatusBarHeight()>
<com.android.server.locksettings.recoverablekeystore.KeySyncTask: void run()>
<com.android.settingslib.core.lifecycle.ObservableDialogFragment: com.android.settingslib.core.lifecycle.Lifecycle getSettingsLifecycle()>
<com.android.keyguard.KeyguardUpdateMonitor: void dispatchKeyguardGoingAway(boolean)>
<com.android.systemui.statusbar.policy.BluetoothController: java.lang.String getConnectedDeviceName()>
<com.android.keyguard.clock.BubbleClockController: void onTimeTick()>
<com.android.systemui.statusbar.notification.collection.coordinator.PreparationCoordinator: void attach(com.android.systemui.statusbar.notification.collection.NotifPipeline)>
<com.android.systemui.util.leak.GarbageMonitor.ProcessMemInfo: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.qs.external.CustomTile: void onDialogHidden()>
<com.android.server.uri.UriGrantsManagerInternal: void revokeUriPermissionFromOwner(android.os.IBinder,android.net.Uri,int,int)>
<com.android.systemui.pip.PipTaskOrganizer: boolean isDeferringEnterPipAnimation()>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: boolean requestLnbInternal(android.media.tv.tunerresourcemanager.TunerLnbRequest,int[])>
<com.android.systemui.keyguard.KeyguardSliceProvider: boolean onCreateSliceProvider()>
<com.android.systemui.classifier.FalsingManagerProxy: void onExpansionFromPulseStopped()>
<com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper: boolean isDismissGesture(android.view.MotionEvent)>
<com.android.systemui.statusbar.notification.TransformState: void disappear(float,com.android.systemui.statusbar.TransformableView)>
<com.android.systemui.statusbar.notification.NotificationDozeHelper: void setDozing(java.util.function.Consumer,boolean,boolean,long,android.view.View)>
<com.android.systemui.qs.QSFragment: void setContainer(android.view.ViewGroup)>
<com.android.server.statusbar.StatusBarManagerService: void hideCurrentInputMethodForBubbles()>
<com.android.settingslib.fuelgauge.BatterySaverUtils: void suppressAutoBatterySaver(android.content.Context)>
<com.android.systemui.plugin.testoverlayplugin.CustomView: void onDetachedFromWindow()>
<com.android.systemui.ForegroundServicesDialog: void onNewIntent(android.content.Intent)>
<com.android.systemui.globalactions.GlobalActionsGridLayout: void updateSeparatedItemSize()>
<com.android.server.usb.descriptors.report.ReportCanvas: void openParagraph(boolean)>
<com.android.systemui.statusbar.policy.HeadsUpManager.HeadsUpEntry: void reset()>
<android.perftests.utils.TraceMarkParser: void <init>(java.lang.String[])>
<com.android.systemui.statusbar.phone.NotificationGroupManager: java.util.ArrayList getChildren(android.service.notification.StatusBarNotification)>
<com.android.systemui.biometrics.AuthBiometricFingerprintView: void updateState(int)>
<android.net.wifi.WifiManager: void factoryReset()>
<com.android.systemui.util.NotificationChannels: void start()>
<com.android.server.policy.PhoneWindowManager: void onDefaultDisplayFocusChangedLw(com.android.server.policy.WindowManagerPolicy.WindowState)>
<android.net.wifi.hotspot2.PasspointConfiguration: void setSubscriptionUpdate(android.net.wifi.hotspot2.pps.UpdateParameter)>
<com.android.server.slice.SliceProviderPermissions.SliceAuthority: java.lang.String toString()>
<com.android.server.pm.PackageInstallerSession: android.os.ParcelFileDescriptor openWrite(java.lang.String,long,long)>
<com.android.systemui.util.leak.GarbageMonitor.ProcessMemInfo: void <init>(long,java.lang.String,long)>
<com.android.server.pm.InstructionSets: java.lang.String[] getDexCodeInstructionSets(java.lang.String[])>
<com.android.systemui.qs.QSHost: void unmarkTileAsAutoAdded(java.lang.String)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: int getContrastedColor(android.content.Context,boolean,int)>
<android.net.wifi.WifiScanner.ParcelableScanResults: void <init>(android.net.wifi.ScanResult[])>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isVendor()>
<com.android.systemui.MultiListLayout.MultiListAdapter: void onClickItem(int)>
<com.android.printservice.recommendation.plugin.google.CloudPrintPlugin: void start(com.android.printservice.recommendation.PrintServicePlugin.PrinterDiscoveryCallback)>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.phone.StatusBarIconController provideStatusBarIconController(com.android.systemui.statusbar.phone.StatusBarIconControllerImpl)>
<com.android.systemui.pip.PipTaskOrganizer: void onMovementBoundsChanged(android.graphics.Rect,boolean,boolean,boolean,android.window.WindowContainerTransaction)>
<com.android.server.timedetector.TimeDetectorStrategy: void handleAutoTimeDetectionChanged()>
<android.perftests.utils.TraceMarkParser.TraceMarkSlice: long getDurationInMicroseconds()>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean handleReportPowerStatus(com.android.server.hdmi.HdmiCecMessage)>
<com.android.keyguard.KeyguardStatusView: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.security.VerityUtils: void setUpFsverity(java.lang.String,java.lang.String)>
<com.android.systemui.car.window.OverlayPanelViewController.SystemBarCloseGestureListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<com.android.server.accessibility.gestures.TouchState: void startDelegating()>
<com.android.server.accounts.AccountManagerService: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setLastVisibleBackgroundChild(com.android.systemui.statusbar.notification.row.ExpandableView)>
<com.android.systemui.statusbar.phone.PanelBar: boolean shouldPanelBeVisible()>
<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],int[],android.util.SparseArray)>
<com.android.systemui.statusbar.phone.ExpandableIndicator: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.settingslib.fuelgauge.BatteryStatus: int getChargingSpeed(android.content.Context)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: com.android.systemui.plugins.statusbar.NotificationSwipeActionHelper getSwipeActionHelper()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: int getHeaderTranslation(boolean)>
<com.android.commands.uiautomator.RunTestCommand: void run(java.lang.String[])>
<android.net.wifi.p2p.WifiP2pInfo: void <init>(android.net.wifi.p2p.WifiP2pInfo)>
<android.media.Controller2Link: void notifyPlaybackActiveChanged(int,boolean)>
<com.android.systemui.qs.SlashDrawable: void setRotation(float)>
<com.android.systemui.statusbar.notification.NotificationFilter: void <init>(com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.media.MediaFeatureFlag)>
<com.android.server.media.MediaRouterService: void requestCreateSessionWithManager(android.media.IMediaRouter2Manager,int,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void <init>(android.content.Context,com.android.server.policy.keyguard.KeyguardStateMonitor.StateCallback)>
<com.android.server.pm.PackageManagerServiceUtils: boolean isDowngradePermitted(int,boolean)>
<android.net.wifi.WifiInfo: int getMaxSupportedRxLinkSpeedMbps()>
<com.android.systemui.tuner.LockscreenFragment.LockButtonFactory: java.lang.String[] keys()>
<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int,int)>
<com.android.server.display.DisplayModeDirector: void start(android.hardware.SensorManager)>
<com.android.server.TelephonyRegistry: void notifyOemHookRawEventForSubscriber(int,int,byte[])>
<android.net.wifi.ISoftApCallback: void onCapabilityChanged(android.net.wifi.SoftApCapability)>
<com.android.systemui.shared.system.ViewRootImplCompat: void registerRtFrameCallback(java.util.function.LongConsumer)>
<com.android.systemui.statusbar.phone.UserAvatarView: void setAvatarPadding(float)>
<com.android.server.pm.UserTypeDetails.Builder: com.android.server.pm.UserTypeDetails.Builder setEnabled(boolean)>
<com.android.systemui.statusbar.notification.stack.ViewState: float getFinalTranslationZ(android.view.View)>
<com.android.settingslib.bluetooth.HeadsetProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)>
<com.android.systemui.plugins.DozeServicePlugin.RequestDoze: void onRequestShowDoze()>
<com.android.server.usb.descriptors.UsbACFeatureUnit: int[] getControls()>
<com.android.server.security.VerityUtils.SetupResult: boolean isOk()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetRenderbufferParameterivOES(int,int,java.nio.IntBuffer)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setEmptyDragAmount(float)>
<android.net.wifi.p2p.WifiP2pGroup: void setInterface(java.lang.String)>
<com.android.systemui.classifier.SpeedAnglesClassifier: void onTouchEvent(android.view.MotionEvent)>
<com.android.server.policy.WindowManagerPolicy: void showGlobalActions()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean areGutsExposed()>
<com.android.systemui.qs.tiles.DndTile: void handleDestroy()>
<com.android.systemui.plugins.GlobalActionsPanelPlugin.PanelViewController: android.view.View getPanelContent()>
<com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback: void cancelSession()>
<com.android.systemui.statusbar.phone.NavigationBarTransitions: void onNavigationModeChanged(int)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: void onTouchStart()>
<javax.obex.Authenticator: byte[] onAuthenticationResponse(byte[])>
<com.android.systemui.egg.MLand: int getGameWidth()>
<com.android.gallery3d.exif.ExifInterface: void clearExif()>
<com.android.systemui.statusbar.policy.SignalController: void resetLastState()>
<com.android.server.usb.UsbDeviceManager: void onUnlockUser(int)>
<android.os.UserManagerInternal: android.content.pm.UserInfo getUserInfo(int)>
<com.android.systemui.plugins.qs.QSIconView: void setIcon(com.android.systemui.plugins.qs.QSTile.State,boolean)>
<com.android.server.people.PeopleService: void onStart()>
<com.android.systemui.statusbar.FlingAnimationUtils: void <init>(android.util.DisplayMetrics,float)>
<com.android.settingslib.deviceinfo.AbstractSerialNumberPreferenceController: java.lang.String getPreferenceKey()>
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig build()>
<com.android.server.accessibility.AccessibilityWindowManager: boolean isTrackingWindowsLocked()>
<com.android.server.devicepolicy.PersonalAppsSuspensionHelper: void <init>(android.content.Context)>
<com.android.settingslib.bluetooth.MapProfile: int getNameResource(android.bluetooth.BluetoothDevice)>
<com.android.systemui.statusbar.phone.StatusBar: boolean isDeviceInteractive()>
<com.android.server.audio.AudioEventLogger.Event: com.android.server.audio.AudioEventLogger.Event printLog(int,java.lang.String)>
<com.android.server.pm.PackageInstallerService: void abandonSession(int)>
<com.android.systemui.qs.QSPanel: void setPageListener(com.android.systemui.qs.PagedTileLayout.PageListener)>
<android.net.wifi.WifiManager: android.net.wifi.SoftApConfiguration getSoftApConfiguration()>
<com.android.systemui.classifier.FalsingManagerFake: void setIsReportingEnabled(boolean)>
<com.android.systemui.statusbar.SysuiStatusBarStateController: boolean setState(int)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: void onDensityOrFontScaleChanged()>
<com.android.wallpapercropper.WallpaperCropActivity: int getRotationFromExif(android.content.res.Resources,int)>
<com.android.server.appprediction.AppPredictionManagerService: void onServicePackageRestartedLocked(int)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: int getHeadsUpHeightWithoutHeader()>
<com.android.server.om.PackageManagerHelper: boolean signaturesMatching(java.lang.String,java.lang.String,int)>
<com.android.systemui.pip.phone.PipMenuActivityController: void setAppActions(android.content.pm.ParceledListSlice)>
<javax.microedition.khronos.opengles.GL10: void glMultiTexCoord4x(int,int,int,int,int)>
<com.android.printspooler.util.ApprovedPrintServices: void pruneApprovedServices(java.util.List)>
<com.android.gallery3d.exif.ExifTag: boolean setValue(com.android.gallery3d.exif.Rational[])>
<com.android.server.pm.UserTypeDetails: int getBadgePlain()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setProfileName(android.content.ComponentName,java.lang.String)>
<com.android.systemui.plugins.qs.QSTile.BooleanState: com.android.systemui.plugins.qs.QSTile.State copy()>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSystem(boolean)>
<com.android.systemui.statusbar.MediaTransferManager: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm.StackScrollAlgorithmState: int getIndexOfExpandingNotification()>
<com.android.powermodel.ParseException: void <init>(java.lang.String)>
<com.android.systemui.volume.VolumeToolTipView: void onFinishInflate()>
<com.android.systemui.classifier.FalsingLog: void e(java.lang.String,java.lang.String)>
<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void sendSetSystemAudioMode(boolean,int)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void <init>(com.android.systemui.qs.QSHost)>
<com.android.systemui.appops.AppOpItem: java.lang.String getPackageName()>
<android.net.wifi.hotspot2.pps.Policy: int hashCode()>
<com.android.keyguard.PasswordTextView: void onDraw(android.graphics.Canvas)>
<com.android.egg.neko.PrefState: void <init>(android.content.Context)>
<com.android.systemui.colorextraction.SysuiColorExtractor: void <init>(android.content.Context,com.android.systemui.statusbar.policy.ConfigurationController)>
<com.android.server.pm.dex.DexoptOptions: boolean isDexoptOnlySecondaryDex()>
<com.android.systemui.classifier.FalsingManagerImpl: void onNotificationActive()>
<com.android.server.tv.tunerresourcemanager.CasResource.Builder: com.android.server.tv.tunerresourcemanager.CasResource build()>
<com.android.systemui.statusbar.phone.StatusBar: android.view.ViewGroup getNotificationScrollLayout()>
<com.android.systemui.statusbar.phone.LockscreenWallpaper.WallpaperDrawable: int getIntrinsicHeight()>
<com.android.systemui.qs.tiles.CastTile: java.lang.CharSequence getTileLabel()>
<android.perftests.utils.Stats: void <init>(java.util.List)>
<com.android.server.NsdService.NsdSettings: com.android.server.NsdService.NsdSettings makeDefault(android.content.Context)>
<com.android.soundpicker.CheckedListItem: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.settingslib.wifi.TestAccessPointBuilder: com.android.settingslib.wifi.TestAccessPointBuilder setNetworkId(int)>
<com.android.settingslib.applications.ServiceListing.Builder: com.android.settingslib.applications.ServiceListing.Builder setPermission(java.lang.String)>
<com.android.systemui.statusbar.policy.ZenModeController.Callback: void onZenChanged(int)>
<android.net.wifi.aware.IWifiAwareDiscoverySessionCallback: void onMessageSendFail(int,int)>
<com.android.providers.settings.SettingsProvider: java.lang.String getType(android.net.Uri)>
<com.android.systemui.statusbar.notification.row.StackScrollerDecorView: void performAddAnimation(long,long,boolean)>
<android.os.IIdmap2: java.lang.String getIdmapPath(java.lang.String,int)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onCameraOn()>
<com.android.nfc_extras.EeExternalFieldException: void <init>(java.lang.String)>
<com.android.networkstack.tethering.OffloadHardwareInterface.ForwardedStats: void add(com.android.networkstack.tethering.OffloadHardwareInterface.ForwardedStats)>
<com.android.settingslib.bluetooth.A2dpProfile: int getOrdinal()>
<com.android.server.appprediction.AppPredictionManagerServiceShellCommand: void <init>(com.android.server.appprediction.AppPredictionManagerService)>
<com.android.server.webkit.SystemImpl: boolean isMultiProcessDefaultEnabled()>
<com.android.systemui.doze.DozeScreenBrightness: void onScreenState(int)>
<com.android.server.twilight.TwilightState: boolean equals(com.android.server.twilight.TwilightState)>
<com.android.systemui.globalactions.GlobalActionsItem: void <init>(android.content.Context)>
<com.android.printspooler.model.PageContentRepository: void finalize()>
<com.android.systemui.biometrics.AuthBiometricFaceView: void onFinishInflate()>
<com.android.systemui.statusbar.notification.MediaNotificationProcessor: androidx.palette.graphics.Palette.Builder generateArtworkPaletteBuilder(android.graphics.Bitmap)>
<com.android.server.accessibility.AccessibilityWindowManager: void onTouchInteractionEnd()>
<com.android.systemui.qs.tileimpl.SlashImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<com.android.server.display.DisplayDeviceConfig: com.android.server.display.DisplayDeviceConfig create(long)>
<com.android.server.pm.PackageManagerService: void logAppProcessStartIfNeeded(java.lang.String,int,java.lang.String,java.lang.String,int)>
<com.android.systemui.qs.tiles.UiModeNightTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.BooleanState,java.lang.Object)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glDeleteRenderbuffersOES(int,int[],int)>
<com.android.systemui.statusbar.phone.NavigationBarEdgePanel: void setDisplaySize(android.graphics.Point)>
<com.android.server.pm.Installer: android.os.storage.CrateMetadata[] getUserCrates(java.lang.String,int)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isDirectBootAware()>
<com.android.server.pm.ShortcutService.Lifecycle: void onStopUser(int)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout: void cancelAllAnimations()>
<com.android.printspooler.ui.FusedPrintersProvider: void setTrackedPrinter(android.print.PrinterId)>
<com.android.systemui.bubbles.BubbleLogger: void log(com.android.systemui.bubbles.Bubble,com.android.internal.logging.UiEventLogger.UiEventEnum)>
<com.android.systemui.pip.phone.PipMotionHelper: void dismissPip()>
<com.android.systemui.statusbar.phone.StatusBar: com.android.systemui.plugins.qs.QS createDefaultQSFragment()>
<com.android.systemui.keyguard.KeyguardViewMediator: void keyguardDone()>
<android.os.UserManagerInternal: void setUserIcon(int,android.graphics.Bitmap)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: int getId()>
<com.android.shell.BugreportProgressService: android.os.IBinder onBind(android.content.Intent)>
<com.android.server.pm.permission.BasePermission: boolean isImmutablyRestricted()>
<com.android.gallery3d.exif.ExifInterface: com.android.gallery3d.exif.Rational getTagRationalValue(int,int)>
<com.android.systemui.bubbles.BubbleStackView: void updateContentDescription()>
<com.android.systemui.shared.recents.view.AppTransitionAnimationSpecsFuture: void <init>(android.os.Handler)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void handleSetListening(boolean)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView: void onDraw(android.graphics.Canvas)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.NotifPromoter getNotifPromoter()>
<com.android.server.IpSecService.RefcountedResource: void binderDied()>
<android.net.wifi.hotspot2.pps.Policy: java.util.List getPreferredRoamingPartnerList()>
<com.android.server.pm.dex.DexManager: boolean isPackageSelectedToRunOob(java.lang.String)>
<android.util.StatsEvent.Builder: android.util.StatsEvent.Builder writeFloat(float)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage.Entry: void <init>(java.lang.String,byte[],byte[],byte[])>
<javax.obex.Authenticator: javax.obex.PasswordAuthentication onAuthenticationChallenge(java.lang.String,boolean,boolean)>
<com.android.systemui.Prefs: java.util.Set getStringSet(android.content.Context,java.lang.String,java.util.Set)>
<com.android.server.SystemService: void onUserStopped(com.android.server.SystemService.TargetUser)>
<com.android.photos.BitmapRegionTileSource.ResourceBitmapSource: com.android.photos.SimpleBitmapRegionDecoder loadBitmapRegionDecoder()>
<com.android.systemui.biometrics.AuthContainerView: void animateToCredentialUI()>
<com.android.printspooler.ui.PrintActivity.PrintServiceApprovalDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.server.NetworkScoreService: boolean isCallerActiveScorer(int)>
<android.text.PrecomputedTextPerfTest: void testCreate_NoStyled_NoHyphenation_WidthOnly()>
<com.android.systemui.statusbar.notification.row.ExpandableView: float getTranslation()>
<com.android.settingslib.notification.ConversationIconFactory: android.graphics.drawable.Drawable getAppBadge(java.lang.String,int)>
<com.android.settingslib.bluetooth.LocalBluetoothManager: boolean isForegroundActivity()>
<android.widget.TextViewPrecomputedTextPerfTest: void testOnDraw_PrecomputedText()>
<android.net.TetheredClient.AddressInfo: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.phone.StatusBar: void maybeEscalateHeadsUp()>
<com.android.systemui.statusbar.phone.NotificationGroupManager: void onEntryUpdated(com.android.systemui.statusbar.notification.collection.NotificationEntry,android.service.notification.StatusBarNotification)>
<com.android.keyguard.clock.BubbleClockController: void onDestroyView()>
<com.android.localtransport.LocalTransport: android.content.Intent dataManagementIntent()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void dismissInattentiveSleepWarning(boolean)>
<com.android.settingslib.CustomDialogPreference: boolean isDialogOpen()>
<com.android.keyguard.KeyguardUpdateMonitor: boolean shouldListenForFace()>
<com.android.server.usb.descriptors.Usb10ASFormatI: int[] getSampleRates()>
<com.android.settingslib.bluetooth.A2dpProfile: java.util.List getConnectedDevices()>
<com.android.statementservice.retriever.WebContent: java.lang.Long getExpireTimeMillis()>
<com.android.settingslib.bluetooth.HearingAidProfile: boolean isEnabled(android.bluetooth.BluetoothDevice)>
<com.android.systemui.statusbar.notification.AboveShelfObserver: void setListener(com.android.systemui.statusbar.notification.AboveShelfObserver.HasViewAboveShelfChangedListener)>
<javax.obex.Operation: void close()>
<com.android.settingslib.media.BluetoothMediaDevice: com.android.settingslib.bluetooth.CachedBluetoothDevice getCachedDevice()>
<com.android.systemui.statusbar.phone.StatusBar: void start()>
<com.android.systemui.qs.tiles.CellularTile: java.lang.CharSequence getTileLabel()>
<com.google.android.startop.iorap.AppLaunchEvent.ReportFullyDrawn: java.lang.String toStringBody()>
<com.android.keyguard.AlphaOptimizedRelativeLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.audio.AudioService.VolumeController: boolean suppressAdjustment(int,int,boolean)>
<com.android.server.TelephonyRegistry: void notifyCarrierNetworkChange(boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setServiceSpecificInfo(byte[])>
<com.android.systemui.car.notification.NotificationPanelViewController: void animateCollapsePanels(int,boolean)>
<com.android.systemui.doze.DozeLog: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.notification.ProgressTransformState: com.android.systemui.statusbar.notification.ProgressTransformState obtain()>
<com.android.server.hdmi.HdmiControlService: void onBootPhase(int)>
<android.text.StaticLayoutGetOffsetForHorizontalPerfTest: void testGetOffsetForHorizontal_BiDi()>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void grantDefaultPermissionsToEnabledTelephonyDataServices(java.lang.String[],int)>
<com.android.server.audio.AudioService: void stopBluetoothSco(android.os.IBinder)>
<com.android.nfc_extras.NfcExecutionEnvironment: void close()>
<com.android.server.integrity.model.IntegrityCheckResult: boolean isCausedByAppCertRule()>
<com.android.systemui.dagger.DependencyProvider: android.hardware.display.NightDisplayListener provideNightDisplayListener(android.content.Context,android.os.Handler)>
<com.android.systemui.statusbar.phone.NavigationBarFrame: void setDeadZone(com.android.systemui.statusbar.policy.DeadZone)>
<com.android.systemui.statusbar.notification.row.HybridGroupManager: void <init>(android.content.Context)>
<com.android.server.pm.permission.PermissionManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage: void remove(int)>
<android.net.wifi.IDppCallback: void onProgress(int)>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean inMultiWindowMode()>
<com.android.server.display.color.ColorDisplayService.DisplayWhiteBalanceListener: void onDisplayWhiteBalanceStatusChanged(boolean)>
<com.android.server.policy.PhoneWindowManager: void setTopFocusedDisplay(int)>
<com.android.egg.neko.NekoLockedActivity: void onDismiss(android.content.DialogInterface)>
<com.android.systemui.statusbar.StatusBarState: java.lang.String toShortString(int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void addOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)>
<com.android.server.autofill.ui.FillUi.Callback: void dispatchUnhandledKey(android.view.KeyEvent)>
<com.android.keyguard.KeyguardClockSwitch: void setTextColor(int)>
<android.util.ArraySetPerfTest: void testRemoveIf_Large_RemoveNothing()>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isSwitchingUser()>
<com.android.server.pm.permission.BasePermission: void setPermissionDefinitionChanged(boolean)>
<android.content.pm.PackageManagerInternal: boolean filterAppAccess(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>
<com.android.systemui.statusbar.policy.KeyButtonView: void onConfigurationChanged(android.content.res.Configuration)>
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getAffiliationIds(android.content.ComponentName)>
<com.android.networkstack.tethering.TetheringConfiguration: boolean isWifiP2pLegacyTetheringMode()>
<com.android.server.uri.GrantUri: java.lang.String toSafeString()>
<com.android.encryptedlocaltransport.EncryptedLocalTransportService: android.os.IBinder onBind(android.content.Intent)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceSettings: boolean isEnabled()>
<com.android.server.policy.PowerAction: boolean showBeforeProvisioning()>
<android.media.MediaSession2.Builder: android.media.MediaSession2 build()>
<com.android.systemui.tuner.TunerZenModePanel: boolean isEditing()>
<com.android.systemui.plugins.FalsingManager: boolean isUnlockingDisabled()>
<com.android.systemui.shared.system.TaskStackChangeListener: void onTaskProfileLocked(int,int)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: void onSetIconHolder(int,com.android.systemui.statusbar.phone.StatusBarIconHolder)>
<com.android.systemui.qs.external.CustomTile: java.lang.String toSpec(android.content.ComponentName)>
<com.android.server.appop.AppOpsService: void stopWatchingStarted(com.android.internal.app.IAppOpsStartedCallback)>
<com.android.systemui.shared.plugins.PluginInstanceManager: void onPackageChange(java.lang.String)>
<com.android.vpndialogs.AlwaysOnDisconnectedDialog: void onCreate(android.os.Bundle)>
<com.android.server.slice.PinnedSliceState: android.net.Uri getUri()>
<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>
<com.android.settingslib.net.ChartDataLoader: android.os.Bundle buildArgs(android.net.NetworkTemplate,com.android.settingslib.AppItem)>
<com.android.server.policy.PhoneWindowManager: void onKeyguardOccludedChangedLw(boolean)>
<com.android.settingslib.net.ChartDataLoader: void onStopLoading()>
<com.android.encryptedlocaltransport.EncryptedLocalTransport: int performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int)>
<android.net.wifi.aware.ConfigRequest.Builder: android.net.wifi.aware.ConfigRequest build()>
<android.os.BatteryStatsInternal: void noteJobsDeferred(int,int,long)>
<android.net.wifi.aware.WifiAwareManager: void updatePublish(int,int,android.net.wifi.aware.PublishConfig)>
<com.android.gallery3d.exif.ExifInterface: void removeCompressedThumbnail()>
<android.perftests.utils.TraceMarkParser: void reset()>
<com.android.systemui.statusbar.policy.BatteryControllerImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.FontSizeUtils: void updateFontSize(android.widget.TextView,int)>
<com.android.statementservice.retriever.Utils: java.lang.String joinStrings(java.lang.String,java.util.List)>
<com.android.settingslib.core.instrumentation.VisibilityLoggerMixin: void setSourceMetricsCategory(android.app.Activity)>
<com.android.systemui.car.window.OverlayPanelViewController: com.android.systemui.statusbar.FlingAnimationUtils getFlingAnimationUtils()>
<com.android.server.soundtrigger.SoundTriggerService.LocalSoundTriggerService: android.hardware.soundtrigger.SoundTrigger.ModelParamRange queryParameter(int,int)>
<com.android.server.DropBoxManagerService: android.os.DropBoxManager.Entry getNextEntry(java.lang.String,long,java.lang.String)>
<com.android.statementservice.retriever.Relation: java.lang.String toString()>
<android.media.Session2Token: boolean equals(java.lang.Object)>
<com.android.systemui.analytics.DataCollector: void onFalsingSessionStarted()>
<com.android.server.accessibility.AccessibilityWindowManager: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
<com.android.systemui.statusbar.notification.NotificationDozeHelper: void updateGrayscale(android.widget.ImageView,float)>
<com.android.settingslib.drawable.UserIconDrawable: void setColorFilter(android.graphics.ColorFilter)>
<com.android.systemui.statusbar.phone.NavigationBarInflaterView: java.lang.String extractButton(java.lang.String)>
<com.android.uiautomator.testrunner.TestCaseCollector: void addTestClass(java.lang.String)>
<com.android.networkstack.tethering.UpstreamNetworkMonitor: android.net.NetworkCapabilities networkCapabilitiesForType(int)>
<com.android.systemui.car.window.OverlayPanelViewController: android.view.View.OnTouchListener getDragOpenTouchListener()>
<com.android.systemui.statusbar.policy.UserInfoControllerImpl: void <init>(android.content.Context)>
<com.android.systemui.classifier.ClassifierData: java.util.ArrayList getEndingStrokes()>
<com.android.systemui.SwipeHelper: long getMaxEscapeAnimDuration()>
<com.android.systemui.doze.DozeLog: void traceSensor(int)>
<com.android.keyguard.KeyguardUpdateMonitor: void clearBiometricRecognized()>
<com.android.systemui.qs.QSTileRevealController: void updateRevealedTiles(java.util.Collection)>
<android.widget.EditTextBackspacePerfTest: void testBackspace()>
<com.android.vpndialogs.ConfirmDialog: void onClick(android.content.DialogInterface,int)>
<com.android.systemui.statusbar.notification.collection.coordinator.Coordinator: void attach(com.android.systemui.statusbar.notification.collection.NotifPipeline)>
<com.android.systemui.statusbar.RemoteInputController: void addCallback(com.android.systemui.statusbar.RemoteInputController.Callback)>
<com.android.dynsystem.VerificationActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.assist.AssistManager: void hideAssist()>
<com.android.systemui.shared.plugins.PluginManager: void addPluginListener(java.lang.String,com.android.systemui.plugins.PluginListener,java.lang.Class,boolean)>
<com.android.server.pm.dex.PackageDexUsage.DexUseInfo: boolean isVariableClassLoaderContext()>
<com.android.systemui.dump.SystemUIAuxiliaryDumpService: void <init>(com.android.systemui.dum.DumpHandler)>
<android.net.wifi.WifiManager: void setVerboseLoggingEnabled(boolean)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void showInattentiveSleepWarning()>
<com.android.systemui.statusbar.phone.ScrimController: void onTrackingStarted()>
<com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm: float updateChild(int,com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm.StackScrollAlgorithmState,com.android.systemui.statusbar.notification.stack.AmbientState,float,boolean)>
<com.android.systemui.statusbar.notification.logging.NotificationLogger: void onStateChanged(int)>
<android.provider.settings.validators.ComponentNameListValidator: boolean isEntryValid(java.lang.String)>
<com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] decryptRecoveryClaimResponse(byte[],byte[],byte[])>
<com.android.server.wallpaper.WallpaperManagerService: void setDisplayPadding(android.graphics.Rect,java.lang.String,int)>
<com.android.systemui.util.leak.WeakIdentityHashMap: boolean isEmpty()>
<com.android.server.media.MediaSessionService: void onStartUser(int)>
<android.net.wifi.WifiInfo: double getRetriedTxPacketsPerSecond()>
<com.android.server.locksettings.LockSettingsStrongAuth: void setIsNonStrongBiometricAllowed(boolean,int)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setOnPulseHeightChangedListener(java.lang.Runnable)>
<android.net.util.BaseNetdUnsolicitedEventListener: void onInterfaceAddressRemoved(java.lang.String,java.lang.String,int,int)>
<com.android.server.tv.UinputBridge: void close(android.os.IBinder)>
<javax.microedition.khronos.opengles.GL11: void glNormalPointer(int,int,int)>
<com.android.server.GestureLauncherService: void onBootPhase(int)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setUid(int)>
<com.android.server.UpdateLockService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.soundpicker.CheckedListItem: boolean isChecked()>
<android.net.ConnectivityModuleConnector: void init(android.content.Context)>
<com.android.statementservice.retriever.AbstractAssetMatcher: boolean matches(com.android.statementservice.retriever.AbstractAsset)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector resourceIdMatches(java.lang.String)>
<com.android.server.audio.AudioSystemAdapter: int setParameters(java.lang.String)>
<com.android.keyguard.PasswordTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.os.UserManagerInternal: boolean isProfileAccessible(int,int,java.lang.String,boolean)>
<com.android.server.audio.AudioService: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>
<com.android.perftests.blob.BlobStorePerfTests: void setUp()>
<com.android.systemui.plugins.statusbar.StatusBarStateController: int getState()>
<com.android.server.storage.FileCollector: com.android.server.storage.FileCollector.MeasurementResult getMeasurementResult(android.content.Context)>
<com.android.systemui.statusbar.policy.SmartReplyView: void addPreInflatedButtons(java.util.List)>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: com.android.systemui.statusbar.policy.NetworkController.AccessPointController getAccessPointController()>
<com.android.systemui.pip.phone.PipAccessibilityInteractionConnection: void findAccessibilityNodeInfosByText(long,java.lang.String,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec)>
<com.android.server.biometrics.AuthenticationClient: void resetFailedAttempts()>
<com.android.settingslib.core.lifecycle.ObservableDialogFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
<android.net.TetheringManager.TetheringRequest.Builder: android.net.TetheringManager.TetheringRequest.Builder setShouldShowEntitlementUi(boolean)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: void jumpToCurrentState()>
<com.android.server.policy.WindowManagerPolicy: void setSafeMode(boolean)>
<com.android.server.accessibility.SystemActionPerformer: void <init>(android.content.Context,com.android.server.wm.WindowManagerInternal,java.util.function.Supplier)>
<com.android.providers.settings.WriteFallbackSettingsFilesJobService: boolean onStopJob(android.app.job.JobParameters)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: boolean isAnyManagedProfilePublicMode()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean requestBugreport(android.content.ComponentName)>
<com.android.server.timezone.TimeZoneUpdateIdler: boolean onStartJob(android.app.job.JobParameters)>
<com.android.server.storage.CacheQuotaStrategy: void onResult(android.os.Bundle)>
<com.android.server.pm.permission.PermissionManagerService: void updatePermissionFlags(java.lang.String,java.lang.String,int,int,boolean,int)>
<com.android.systemui.globalactions.GlobalActionsDialog.EmergencyAction: boolean showDuringKeyguard()>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage clearProtectedBroadcasts()>
<android.app.StatsManager: byte[] getMetadata()>
<com.android.server.locksettings.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>
<com.android.systemui.wm.SystemWindows: void addRoot(int,int)>
<com.android.systemui.statusbar.phone.PanelBar: void onPanelFullyOpened()>
<com.android.server.policy.PermissionPolicyService: void <init>(android.content.Context)>
<com.android.server.pm.Policy.PolicyBuilder: com.android.server.pm.Policy.PolicyBuilder addInnerPackageMapOrThrow(java.lang.String,java.lang.String)>
<com.android.server.accounts.AccountManagerService: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void removeKey(java.lang.String)>
<com.android.shell.BugreportStorageProvider: java.io.File getFileForDocId(java.lang.String,boolean)>
<com.android.settingslib.dream.DreamBackend: void setWhenToDream(int)>
<com.android.server.stats.StatsManagerService: void removeDataFetchOperation(long,java.lang.String)>
<com.android.server.SystemServiceManager: com.android.server.SystemService startServiceFromJar(java.lang.String,java.lang.String)>
<com.android.server.pm.permission.PermissionsState: int[] computeGids(int)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void transformFrom(com.android.systemui.statusbar.TransformableView,float)>
<com.android.server.infra.AbstractMasterSystemService: void visitServicesLocked(com.android.server.infra.AbstractMasterSystemService.Visitor)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void resetExposedMenuView(boolean,boolean)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void launchCamera(java.lang.String)>
<com.android.pacprocessor.PacWebView: com.android.pacprocessor.PacWebView getInstance()>
<com.android.systemui.util.leak.GarbageMonitor: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.globalactions.GlobalActionsLayout: com.android.systemui.HardwareBgDrawable getBackgroundDrawable(int)>
<android.media.BufferingParams.Builder: android.media.BufferingParams.Builder setInitialMarkMs(int)>
<com.android.systemui.media.dialog.MediaOutputMetricLogger: void logOutputSuccess(java.lang.String,java.util.List)>
<com.android.systemui.statusbar.phone.LightBarTransitionsController: float getCurrentDarkIntensity()>
<com.android.systemui.media.MediaControlPanel: void closeGuts(boolean)>
<android.net.wifi.p2p.WifiP2pManager: void setDeviceName(android.net.wifi.p2p.WifiP2pManager.Channel,java.lang.String,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getMeteredDataDisabledPackages(android.content.ComponentName)>
<com.android.location.fused.FusedLocationService: android.os.IBinder onBind(android.content.Intent)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.server.AnyMotionDetector.Vector3: void <init>(long,float,float,float)>
<com.google.android.startop.iorap.AppLaunchEvent.IntentStarted: boolean equals(java.lang.Object)>
<com.android.statsd.shelltools.localdrive.LocalDrive: void main(java.lang.String[])>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void <init>(com.android.systemui.statusbar.phone.StatusBarIconController,com.android.systemui.statusbar.CommandQueue,com.android.systemui.broadcast.BroadcastDispatcher,java.util.concurrent.Executor,android.content.res.Resources,com.android.systemui.statusbar.policy.CastController,com.android.systemui.statusbar.policy.HotspotController,com.android.systemui.statusbar.policy.BluetoothController,com.android.systemui.statusbar.policy.NextAlarmController,com.android.systemui.statusbar.policy.UserInfoController,com.android.systemui.statusbar.policy.RotationLockController,com.android.systemui.statusbar.policy.DataSaverController,com.android.systemui.statusbar.policy.ZenModeController,com.android.systemui.statusbar.policy.DeviceProvisionedController,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.statusbar.policy.LocationController,com.android.systemui.statusbar.policy.SensorPrivacyController,android.app.IActivityManager,android.app.AlarmManager,android.os.UserManager,com.android.systemui.screenrecord.RecordingController,android.telecom.TelecomManager,int,android.content.SharedPreferences,com.android.systemui.util.time.DateFormatUtil,com.android.systemui.util.RingerModeTracker,com.android.systemui.privacy.PrivacyItemController)>
<com.android.egg.neko.Cat: void logRemove(android.content.Context)>
<com.android.server.policy.WindowManagerPolicy: void setRecentsVisibilityLw(boolean)>
<com.android.systemui.statusbar.BackDropView: void setOnVisibilityChangedRunnable(java.lang.Runnable)>
<com.android.egg.neko.NekoLand: void onPrefsChanged()>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void setRecoverySecretTypes(int[])>
<com.android.systemui.assist.PhoneStateMonitor: int getPhoneState()>
<android.net.wifi.hotspot2.OsuProvider: java.lang.String toString()>
<com.android.location.provider.ProviderRequestUnbundled: boolean isLocationSettingsIgnored()>
<com.android.systemui.statusbar.phone.NavigationBarFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: int getIntrinsicWidth()>
<com.android.server.autofill.AutofillManagerService: void onStart()>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void onRecordingStart()>
<com.android.server.biometrics.fingerprint.FingerprintService: int statsModality()>
<com.android.systemui.chooser.ChooserActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.charging.WirelessChargingLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.accounts.AccountManagerService: void setPassword(android.accounts.Account,java.lang.String)>
<com.android.server.slice.SliceClientPermissions: com.android.server.slice.SliceClientPermissions createFrom(org.xmlpull.v1.XmlPullParser,com.android.server.slice.DirtyTracker)>
<com.android.systemui.shared.system.RemoteAnimationDefinitionCompat: void addRemoteAnimation(int,int,com.android.systemui.shared.system.RemoteAnimationAdapterCompat)>
<com.android.printservice.recommendation.plugin.xerox.XeroxPrintServiceRecommendationPlugin: void stop()>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setSsid(java.lang.String)>
<com.android.systemui.statusbar.StatusBarIconView: android.graphics.drawable.Icon getSourceIcon()>
<com.android.systemui.analytics.DataCollector: void onAccuracyChanged(android.hardware.Sensor,int)>
<com.android.gallery3d.glrenderer.UploadedTexture: android.graphics.Bitmap onGetBitmap()>
<com.android.server.CachedDeviceStateService: void onStart()>
<com.android.server.pm.PackageManagerServiceUtils: int copyPackage(java.lang.String,java.io.File)>
<com.android.server.slice.SliceShellCommand: void onHelp()>
<com.android.systemui.statusbar.FlingAnimationUtils: void applyDismissing(android.view.ViewPropertyAnimator,float,float,float,float)>
<com.android.systemui.statusbar.policy.ExtensionController.PluginConverter: java.lang.Object getInterfaceFromPlugin(java.lang.Object)>
<com.android.server.biometrics.EnrollClient: boolean onEnrollResult(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.server.textclassifier.TextClassificationManagerService.Lifecycle: void onStopUser(int)>
<android.net.wifi.WifiNetworkSuggestion: android.net.wifi.WifiConfiguration getWifiConfiguration()>
<com.android.server.accounts.AccountManagerService: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
<com.android.dynsystem.DynamicSystemInstallationService: void onResult(int,java.lang.Throwable)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion build()>
<javax.microedition.khronos.egl.EGL10: int eglGetError()>
<com.android.systemui.statusbar.notification.interruption.NotificationInterruptSuppressor: boolean suppressInterruptions(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.printspooler.model.RemotePrintDocument: boolean hasLaidOutPages()>
<javax.obex.HeaderSet: java.lang.Object getHeader(int)>
<javax.obex.ServerOperation: long getLength()>
<com.android.keyguard.clock.ClockManager: void addOnClockChangedListener(com.android.keyguard.clock.ClockManager.ClockChangedListener)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void setHeaderVisibleAmount(float)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>
<android.net.wifi.WifiSsid: int hashCode()>
<com.android.systemui.statusbar.policy.MobileSignalController: void unregisterListener()>
<com.android.systemui.statusbar.phone.NavigationBarEdgePanel: void onMotionEvent(android.view.MotionEvent)>
<com.android.server.accessibility.EventStreamTransformation: void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<com.android.systemui.util.concurrency.ConcurrencyModule: android.os.Handler provideHandler()>
<com.android.systemui.statusbar.phone.HeadsUpAppearanceController: void destroy()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void appTransitionFinished(int)>
<android.multiuser.BenchmarkResultsReporter: void <init>(android.multiuser.BenchmarkRunner)>
<com.android.keyguard.clock.ImageClock: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.packageinstaller.InstallStaging: void onSaveInstanceState(android.os.Bundle)>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: boolean hasActiveNotifications()>
<com.google.android.startop.iorap.IorapForwardingService: void onBootPhase(int)>
<com.android.systemui.shared.system.WindowCallbacksCompat: void detach()>
<com.android.server.pm.PackageDexOptimizer: int adjustDexoptNeeded(int)>
<com.android.server.pm.UserManagerService: long getUserStartRealtime()>
<com.android.server.hdmi.DetectTvSystemAudioModeSupportAction: void sendSetSystemAudioMode()>
<javax.microedition.khronos.opengles.GL11: void glGetFixedv(int,int[],int)>
<com.android.systemui.Dumpable: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.pm.BackgroundDexOptService: boolean runIdleOptimizationsNow(com.android.server.pm.PackageManagerService,android.content.Context,java.util.List)>
<com.android.settingslib.users.AppRestrictionsHelper: void setPackageSelected(java.lang.String,boolean)>
<android.net.wifi.WifiInfo: java.lang.String removeDoubleQuotes(java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>
<com.android.systemui.statusbar.phone.PanelViewController: void onExpandingFinished()>
<com.android.server.integrity.IntegrityFileManager: void writeRules(java.lang.String,java.lang.String,java.util.List)>
<com.android.server.audio.MediaFocusControl: boolean getMultiAudioFocusEnabled()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>
<com.android.settingslib.bluetooth.LocalBluetoothProfileManager: com.android.settingslib.bluetooth.PbapServerProfile getPbapProfile()>
<com.android.systemui.statusbar.policy.Clock: void setVisibility(int)>
<com.android.server.policy.WindowManagerPolicy: void onSystemUiStarted()>
<com.android.systemui.recents.OverviewProxyRecentsImpl: void showRecentApps(boolean)>
<com.android.systemui.globalactions.GlobalActionsDialog: androidx.lifecycle.Lifecycle getLifecycle()>
<android.net.wifi.WifiClient: java.lang.String toString()>
<com.android.systemui.doze.DozeLog: void tracePulseTouchDisabledByProx(boolean)>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcher.Adapter: void <init>(android.content.Context,com.android.systemui.statusbar.policy.UserSwitcherController,com.android.systemui.statusbar.policy.KeyguardUserSwitcher)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage addUsesOptionalLibrary(int,java.lang.String)>
<com.android.server.soundtrigger_middleware.ISoundTriggerHw2: int getModelParameter(int,int)>
<com.android.systemui.qs.tileimpl.QSTileImpl: android.metrics.LogMaker populate(android.metrics.LogMaker)>
<com.android.systemui.tuner.LockscreenFragment: void onDestroy()>
<com.android.server.accessibility.AbstractAccessibilityServiceConnection.SystemSupport: void onClientChangeLocked(boolean)>
<com.android.settingslib.widget.UpdatableListPreferenceDialogFragment: void onListPreferenceUpdated(androidx.preference.ListPreference)>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getCaCertificateAlias()>
<com.android.server.DeviceIdleController: java.lang.String[] getSystemPowerWhitelistExceptIdleInternal()>
<com.android.systemui.qs.QSContainerImpl: boolean performClick()>
<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>
<com.android.keyguard.clock.DefaultClockController: void setColorPalette(boolean,int[])>
<com.android.systemui.statusbar.notification.NotificationFilter: boolean shouldFilterOut(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<android.content.pm.PackageManagerInternal: void addIsolatedUid(int,int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void onAffordanceLaunchEnded()>
<com.android.systemui.qs.AutoAddTracker: void setTileRemoved(java.lang.String)>
<com.android.networkstack.tethering.UpstreamNetworkMonitor: void <init>(android.content.Context,com.android.internal.util.StateMachine,android.net.util.SharedLog,int)>
<com.android.egg.neko.Cat: void logRename(android.content.Context)>
<com.android.systemui.statusbar.ScrimView: boolean canReceivePointerEvents()>
<com.android.systemui.statusbar.notification.stack.ExpandableViewState: void applyToView(android.view.View)>
<android.app.ResourcesThemePerfTest: void setToDifferentAssetManager()>
<android.media.MediaSession2Service.MediaNotification: void <init>(int,android.app.Notification)>
<com.android.systemui.statusbar.phone.StatusBarIconList.Slot: com.android.systemui.statusbar.phone.StatusBarIconHolder getHolderForTag(int)>
<com.android.systemui.statusbar.phone.BarTransitions: int getMode()>
<com.android.server.stats.pull.netstats.NetworkStatsExt: boolean hasSameSlicing(com.android.server.stats.pull.netstats.NetworkStatsExt)>
<android.net.util.PrefixUtils: java.util.Set localPrefixesFrom(android.net.LinkProperties)>
<com.android.dynsystem.DynamicSystemInstallationService: int onStartCommand(android.content.Intent,int,int)>
<com.android.keyguard.KeyguardSimPinView: void onPause()>
<com.android.settingslib.widget.UpdatableListPreferenceDialogFragment: int getMetricsCategory()>
<javax.obex.ServerOperation: void sendHeaders(javax.obex.HeaderSet)>
<com.android.server.utils.ManagedApplicationService: void disconnect()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setKeyguardNeedsInput(boolean)>
<com.android.systemui.keyguard.KeyguardViewMediator: void startKeyguardExitAnimation(long,long)>
<com.android.settingslib.applications.ApplicationsState.AppFilter: boolean filterApp(com.android.settingslib.applications.ApplicationsState.AppEntry)>
<com.android.settingslib.media.MediaDevice: java.lang.String getSummary()>
<com.android.systemui.statusbar.policy.KeyguardStateController: void notifyKeyguardGoingAway(boolean)>
<com.android.media.remotedisplay.RemoteDisplayProvider: int getDiscoveryMode()>
<com.android.localtransport.LocalTransport: void <init>(android.content.Context,com.android.localtransport.LocalTransportParameters)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: boolean isUnlockingDisabled()>
<com.android.server.CountryDetectorService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.recents.ScreenPinningRequest: void onClick(android.view.View)>
<com.android.systemui.classifier.FalsingManagerProxy: void onTrackingStarted(boolean)>
<com.android.systemui.charging.WirelessChargingLayout: void <init>(android.content.Context,int,int,boolean)>
<com.android.systemui.bubbles.BubbleOverflow: boolean showDot()>
<com.android.server.biometrics.BiometricServiceBase.DaemonWrapper: int remove(int,int)>
<com.android.server.appop.AppOpsService: android.app.AppOpsManagerInternal.CheckOpsDelegate getAppOpsServiceDelegate()>
<com.android.wallpapercropper.WallpaperCropActivity: void onDestroy()>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedAccessibilityServicesForUser(int)>
<com.android.keyguard.CarrierText: void onAttachedToWindow()>
<com.google.android.startop.iorap.SystemServiceEvent: void <init>(int)>
<android.net.wifi.rtt.ResponderLocation: boolean getRegisteredLocationAgreementIndication()>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: void updateLockscreenNotificationSetting()>
<com.android.systemui.statusbar.phone.PanelViewController: void notifyExpandingFinished()>
<com.android.server.pm.ProtectedPackages: void <init>(android.content.Context)>
<com.android.settingslib.drawer.Tile: java.lang.String getCategory()>
<com.android.keyguard.clock.DefaultClockController: android.graphics.Bitmap getPreview(int,int)>
<android.net.wifi.WifiSsid: android.net.wifi.WifiSsid createFromHex(java.lang.String)>
<com.android.settingslib.applications.AppUtils: boolean hasUsbDefaults(android.hardware.usb.IUsbManager,java.lang.String)>
<com.android.keyguard.ViewMediatorCallback: void keyguardDonePending(boolean,int)>
<com.google.android.startop.iorap.JobScheduledEvent: boolean equals(java.lang.Object)>
<com.android.systemui.biometrics.AuthBiometricView: void setUserId(int)>
<com.android.systemui.qs.QSPanel: void closeDetail()>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: void onActivated()>
<com.android.systemui.qs.QSPanel: void handleShowDetail(com.android.systemui.qs.QSPanel.Record,boolean)>
<com.android.systemui.tuner.RadioListPreference: void onDialogClosed(boolean)>
<com.android.printspooler.util.MediaSizeUtils.MediaSizeComparator: int compare(android.print.PrintAttributes.MediaSize,android.print.PrintAttributes.MediaSize)>
<com.android.server.compat.PlatformCompat: com.android.internal.compat.IOverrideValidator getOverrideValidator()>
<com.android.systemui.volume.ZenModePanel: void setHidden(boolean)>
<android.net.wifi.WifiScanner.ScanData: void <init>(int,int,int,int,java.util.List)>
<com.android.systemui.statusbar.phone.DemoStatusIcons: void setColor(int)>
<javax.microedition.khronos.opengles.GL10: void glPolygonOffset(float,float)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setDimmed(boolean,boolean)>
<com.android.systemui.car.window.SystemUIOverlayWindowController: boolean isWindowVisible()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenx(int,int,int)>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageCache: void setImageResolver(com.android.systemui.statusbar.notification.row.NotificationInlineImageResolver)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onUserSwitchComplete(int)>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger: android.content.SharedPreferences.Editor edit()>
<com.android.systemui.statusbar.NotificationShelf: void setMaxShelfEnd(float)>
<com.android.server.locksettings.SyntheticPasswordCrypto: byte[] decryptBlob(java.lang.String,byte[],byte[])>
<com.android.server.DeviceIdleController: java.lang.String[] getFullPowerWhitelistInternal()>
<com.android.keyguard.KeyguardPasswordView: boolean onRequestFocusInDescendants(int,android.graphics.Rect)>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: void postInsetsAnimationCallback(java.lang.Runnable)>
<com.android.server.pm.DumpState: boolean onTitlePrinted()>
<com.android.systemui.statusbar.StatusBarMobileView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: void onRemoveIcon(int)>
<android.net.wifi.WifiManager.SoftApCallback: void onStateChanged(int,int)>
<com.android.server.pm.PackageInstallerSession: void <init>(com.android.server.pm.PackageInstallerService.InternalCallback,android.content.Context,com.android.server.pm.PackageManagerService,com.android.server.pm.PackageSessionProvider,android.os.Looper,com.android.server.pm.StagingManager,int,int,int,com.android.server.pm.InstallSource,android.content.pm.PackageInstaller.SessionParams,long,java.io.File,java.lang.String,android.content.pm.InstallationFile[],boolean,boolean,boolean,boolean,int[],int,boolean,boolean,boolean,int,java.lang.String)>
<com.android.preload.check.Util: void assertInitializedState(java.lang.String,boolean,java.lang.ClassLoader)>
<com.android.printspooler.ui.PrinterRegistry.OnPrintersChangeListener: void onPrintersChanged(java.util.List)>
<com.android.systemui.statusbar.phone.PanelViewController: boolean isCollapsing()>
<com.android.systemui.volume.VolumeDialogControllerImpl: void setStreamMute(int,boolean)>
<com.android.server.policy.WindowManagerPolicy: int getMaxWallpaperLayer()>
<com.android.settingslib.bluetooth.PbapServerProfile: int getProfileId()>
<com.android.server.pm.ShortcutDumpFiles: void dumpAll(java.io.PrintWriter)>
<com.android.systemui.fragments.FragmentHostManager: com.android.systemui.fragments.FragmentHostManager get(android.view.View)>
<com.android.printspooler.model.PrintSpoolerService: java.io.File generateFileForPrintJob(android.content.Context,android.print.PrintJobId)>
<com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.NotifSection: void <init>(java.lang.String)>
<com.android.systemui.pip.phone.PipTouchState: void reset()>
<com.android.server.policy.keyguard.KeyguardStateMonitor: void dump(java.lang.String,java.io.PrintWriter)>
<com.android.systemui.statusbar.policy.AccessibilityController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.statusbar.StatusBarManagerService: void onPanelRevealed(boolean,int)>
<android.net.wifi.aware.Characteristics: int getMaxMatchFilterLength()>
<com.android.systemui.car.volume.CarVolumeItemAdapter: com.android.systemui.car.volume.CarVolumeItem.CarVolumeItemViewHolder onCreateViewHolder(android.view.ViewGroup,int)>
<com.android.server.accessibility.ActionReplacingCallback: void <init>(android.view.accessibility.IAccessibilityInteractionConnectionCallback,android.view.accessibility.IAccessibilityInteractionConnection,int,int,long)>
<com.android.server.biometrics.Utils: boolean isValidAuthenticatorConfig(android.os.Bundle)>
<com.android.server.wallpaper.WallpaperManagerService: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>
<com.android.systemui.SwipeHelper: boolean swipedFastEnough()>
<com.android.systemui.stackdivider.Divider: void growRecents()>
<com.android.keyguard.KeyguardSimPinView: void onResume(int)>
<com.android.server.VibratorService: void onVibrationFinished()>
<com.android.systemui.SystemUISecondaryUserService: android.os.IBinder onBind(android.content.Intent)>
<com.android.systemui.statusbar.phone.NotificationGroupManager: void <init>(com.android.systemui.plugins.statusbar.StatusBarStateController,dagger.Lazy)>
<com.android.systemui.keyguard.DismissCallbackRegistry: void addCallback(com.android.internal.policy.IKeyguardDismissCallback)>
<com.android.keyguard.KeyguardPasswordView: int getWrongPasswordStringId()>
<com.android.packageinstaller.InstallFailed.OutOfSpaceDialog: void onAttach(android.content.Context)>
<com.android.systemui.qs.QSDetail.Callback: void onScanStateChanged(boolean)>
<com.android.server.pm.ShortcutService: java.io.File getDumpPath()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getForceEphemeralUsers(android.content.ComponentName)>
<com.android.server.biometrics.fingerprint.FingerprintService: void checkUseBiometricPermission()>
<com.android.systemui.statusbar.policy.RemoteInputView: void onAttachedToWindow()>
<android.net.wifi.WifiSsid: java.lang.String getHexString()>
<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean isCallerInteractingAcrossUsers(int)>
<com.android.keyguard.EmergencyButton: void <init>(android.content.Context)>
<com.android.settingslib.fuelgauge.BatteryStatus: boolean isBatteryLow()>
<com.android.systemui.wm.DisplayLayout: android.graphics.Rect nonDecorInsets()>
<com.android.systemui.volume.VolumeComponent: void dismissNow()>
<com.android.server.biometrics.BiometricService.SettingObserver: boolean getFaceEnabledOnKeyguard()>
<com.android.systemui.statusbar.notification.stack.ViewState: float getFinalTranslationX(android.view.View)>
<com.android.systemui.statusbar.HeadsUpStatusBarView: void setOnDrawingRectChangedListener(java.lang.Runnable)>
<com.android.systemui.qs.SecureSetting: void setUserId(int)>
<com.android.server.NativeDaemonConnectorException: void <init>(java.lang.String)>
<com.android.systemui.dagger.SystemUIRootComponent: com.android.systemui.util.InjectionInflationController.ViewCreator createViewCreator()>
<com.android.systemui.statusbar.notification.stack.StackStateAnimator: void setShelf(com.android.systemui.statusbar.NotificationShelf)>
<android.view.autofill.MyAutofillCallback: void onAutofillEvent(android.view.View,int)>
<com.android.systemui.qs.QSFragment: void setOverscrolling(boolean)>
<com.android.settingslib.drawable.CircleFramedDrawable: void <init>(android.graphics.Bitmap,int)>
<com.android.systemui.DessertCaseView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.settingslib.core.AbstractPreferenceController: boolean handlePreferenceTreeClick(androidx.preference.Preference)>
<com.android.systemui.bubbles.animation.StackAnimationController: android.graphics.PointF getStackPositionAlongNearestHorizontalEdge()>
<com.android.keyguard.KeyguardAbsKeyInputView: void setLockPatternUtils(com.android.internal.widget.LockPatternUtils)>
<android.net.TetheredClient.AddressInfo: long getExpirationTime()>
<com.android.systemui.statusbar.AnimatedImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: float getDozeAmount()>
<com.android.systemui.qs.AlphaControlledSignalTileView.AlphaControlledSlashImageView: void ensureSlashDrawable()>
<com.android.systemui.volume.VolumeUI: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.media.dialog.MediaOutputBaseAdapter: com.android.systemui.media.dialog.MediaOutputBaseAdapter.MediaDeviceBaseViewHolder onCreateViewHolder(android.view.ViewGroup,int)>
<com.android.keyguard.KeyguardUpdateMonitor: void dispatchFinishedGoingToSleep(int)>
<com.android.systemui.ActivityStarterDelegate: void startActivity(android.content.Intent,boolean,com.android.systemui.plugins.ActivityStarter.Callback)>
<com.android.keyguard.CarrierTextController.Builder: com.android.keyguard.CarrierTextController.Builder setShowMissingSim(boolean)>
<com.android.settingslib.net.DataUsageController: long getHistoricalUsageLevel(android.net.NetworkTemplate)>
<com.android.systemui.statusbar.EmptyShadeView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getRequiresSmallestWidthDp()>
<android.net.wifi.p2p.WifiP2pDeviceList: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.shared.system.InputChannelCompat.InputEventDispatcher: void <init>(android.view.InputChannel,android.os.Looper)>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindsSizeCompatModeActivityController(com.android.systemui.SizeCompatModeActivityController)>
<javax.microedition.khronos.opengles.GL10: void glActiveTexture(int)>
<com.android.server.policy.WindowManagerPolicy: void adjustConfigurationLw(android.content.res.Configuration,int,int)>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)>
<com.android.systemui.statusbar.phone.ReverseLinearLayout.ReverseRelativeLayout: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void onBelowSpeedBumpChanged()>
<android.net.wifi.WifiInfo: boolean is5GHz()>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifDismissInterceptor: void setCallback(com.android.systemui.statusbar.notification.collection.notifcollection.NotifDismissInterceptor.OnEndDismissInterception)>
<com.android.server.testing.shadows.ShadowCloseGuard: void setUp()>
<com.android.systemui.wm.DisplayImeController.ImePositionProcessor: void onImePositionChanged(int,int,android.view.SurfaceControl.Transaction)>
<com.android.systemui.car.bluetooth.CarBatteryController: boolean isPluggedIn()>
<com.android.systemui.statusbar.phone.LightBarController: void setScrimState(com.android.systemui.statusbar.phone.ScrimState,float,com.android.internal.colorextraction.ColorExtractor.GradientColors)>
<android.net.wifi.IWifiManager: boolean releaseWifiLock(android.os.IBinder)>
<com.android.role.persistence.RolesState: java.lang.String getPackagesHash()>
<com.android.systemui.statusbar.notification.row.AppOpsInfo: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.NotificationHeaderUtil.ViewComparator: boolean compare(android.view.View,android.view.View,java.lang.Object,java.lang.Object)>
<com.android.server.pm.permission.PermissionManagerServiceInternal.DefaultHomeProvider: void setDefaultHomeAsync(java.lang.String,int,java.util.function.Consumer)>
<com.android.server.pm.parsing.pkg.PackageImpl: int describeContents()>
<com.android.settingslib.graph.BatteryMeterDrawableBase: int getIntrinsicHeight()>
<com.android.server.pm.dex.SystemServerDexLoadReporter: void report(java.util.Map)>
<com.android.gallery3d.exif.ExifInterface: int getDefinedTagCount(int)>
<com.android.server.pm.parsing.PackageParser2: com.android.server.pm.parsing.pkg.ParsedPackage parsePackage(java.io.File,int,boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setHeadsUp(boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void closeRemoteInput()>
<com.android.systemui.statusbar.GestureRecorder: void add(android.view.MotionEvent)>
<com.android.systemui.qs.QSAnimator: void onAnimationStarted()>
<com.android.settingslib.wifi.TestAccessPointBuilder: com.android.settingslib.wifi.TestAccessPointBuilder setProviderFriendlyName(java.lang.String)>
<com.android.systemui.statusbar.GestureRecorder: void tag(java.lang.String,java.lang.String)>
<com.android.server.role.RoleUserState: android.util.ArraySet getRoleHolders(java.lang.String)>
<com.android.server.webkit.SystemImpl: void notifyZygote(boolean)>
<android.net.wifi.aware.WifiAwareManager: void attach(android.os.Handler,android.net.wifi.aware.ConfigRequest,android.net.wifi.aware.AttachCallback,android.net.wifi.aware.IdentityChangedListener)>
<com.android.systemui.biometrics.AuthCredentialPatternView: void onErrorTimeoutFinish()>
<com.android.server.NetworkManagementService: boolean isNetworkActive()>
<com.android.server.biometrics.BiometricServiceBase.DaemonWrapper: void resetLockout(byte[])>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setServiceName(java.lang.String)>
<com.android.packageinstaller.wear.WearPackageArgs: android.net.Uri getAssetUri(android.os.Bundle)>
<com.android.systemui.Dependency.LazyDependencyCreator: java.lang.Object createDependency()>
<com.android.printservice.recommendation.util.MDNSFilteredDiscovery: void stop()>
<com.android.systemui.statusbar.phone.NotificationsQuickSettingsContainer: boolean drawChild(android.graphics.Canvas,android.view.View,long)>
<com.android.systemui.car.userswitcher.UserSwitcherContainer: void <init>(android.content.Context)>
<com.android.providers.settings.SettingsHelper: java.lang.String getRealValueForSystemSetting(java.lang.String)>
<com.android.server.BinderCallsStatsService.LifeCycle: void onBootPhase(int)>
<com.android.keyguard.KeyguardUpdateMonitor: com.android.keyguard.KeyguardUpdateMonitor.DisplayClientState getCachedDisplayClientState()>
<com.google.android.startop.iorap.EventSequenceValidator: void onIntentFailed()>
<com.android.systemui.bubbles.BubbleLoggerImpl: void logOverflowRemove(com.android.systemui.bubbles.Bubble,int)>
<com.android.server.display.utils.RollingBuffer: java.lang.String toString()>
<com.android.settingslib.drawable.UserIconDrawable: void setTintList(android.content.res.ColorStateList)>
<com.android.server.ConnectivityService: void releaseNetworkRequest(android.net.NetworkRequest)>
<android.net.TetheredClient.AddressInfo: void <init>(android.net.LinkAddress,java.lang.String)>
<com.android.systemui.recents.TriangleShape: void <init>(android.graphics.Path,float,float)>
<com.android.server.display.utils.History: java.lang.String toString()>
<com.android.systemui.doze.DozeSuspendScreenStatePreventingAdapter: void setDozeScreenState(int)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: int[] getRecoverySecretTypes(int,int)>
<com.android.statsd.shelltools.testdrive.TestDrive.Dumper: void dump(com.android.os.StatsLog.StatsLogReport)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
<com.android.settingslib.media.LocalMediaManager: void adjustSessionVolume(int)>
<android.net.wifi.WifiScanner.ScanData: int getBandScanned()>
<com.android.systemui.classifier.FalsingManagerFake: void onNotificationStartDismissing()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.phone.PanelViewController: boolean isUnlockHintRunning()>
<android.net.wifi.WifiEnterpriseConfig: void <init>(android.net.wifi.WifiEnterpriseConfig)>
<com.android.server.integrity.model.BitOutputStream: void <init>(java.io.OutputStream)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void updateAllPermissions(java.lang.String,boolean)>
<com.android.settingslib.volume.MediaSessions.Callbacks: void onRemoteUpdate(android.media.session.MediaSession.Token,java.lang.String,android.media.session.MediaController.PlaybackInfo)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.WrappedKey getKey(int,java.lang.String)>
<com.android.server.testing.shadows.ShadowSlog: int wtf(java.lang.String,java.lang.Throwable)>
<com.android.systemui.SizeCompatModeActivityController: void start()>
<com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException: void <init>(java.lang.String,java.lang.Exception)>
<javax.obex.Operation: java.io.InputStream openInputStream()>
<android.net.wifi.p2p.WifiP2pManager: void createGroup(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.egg.paint.PaintActivity: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.settings.CurrentUserTracker: int getCurrentUserId()>
<android.net.wifi.ParcelUtil: java.security.cert.X509Certificate readCertificate(android.os.Parcel)>
<com.android.settingslib.wifi.AccessPoint: void saveWifiState(android.os.Bundle)>
<com.android.server.om.OverlayableInfoCallback: java.util.Map getNamedActors()>
<com.android.keyguard.EmergencyCarrierArea: void <init>(android.content.Context)>
<com.android.systemui.car.statusbar.DozeServiceHost: void removeCallback(com.android.systemui.doze.DozeHost.Callback)>
<android.media.MediaSession2Service: void onDestroy()>
<com.android.server.audio.AudioService: boolean shouldVibrate(int)>
<android.app.backup.ForwardingBackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,java.io.File,int,long,long)>
<com.android.settingslib.bluetooth.LocalBluetoothProfile: boolean accessProfileEnabled()>
<com.android.systemui.util.sensors.AsyncSensorManager: boolean initDataInjectionImpl(boolean)>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext eglGetCurrentContext()>
<com.android.systemui.qs.QSTileHost: void removeTile(android.content.ComponentName)>
<com.android.systemui.car.window.OverlayViewController: boolean refreshRotaryFocusIfNeeded()>
<com.android.systemui.statusbar.policy.UserInfoController.OnUserInfoChangedListener: void onUserInfoChanged(java.lang.String,android.graphics.drawable.Drawable,java.lang.String)>
<com.android.settingslib.bluetooth.A2dpProfile: int getDrawableResource(android.bluetooth.BluetoothClass)>
<android.graphics.perftests.RenderNodePerfTest: void testStartEndDeepHierarchy()>
<com.android.systemui.RegionInterceptingFrameLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.ForegroundServiceController: android.util.ArraySet getStandardLayoutKeys(int,java.lang.String)>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: boolean validate()>
<com.android.gallery3d.glrenderer.BitmapTexture: android.graphics.Bitmap getBitmap()>
<com.android.systemui.statusbar.ViewTransformationHelper: void addTransformedView(android.view.View)>
<android.media.MediaController2: boolean isPlaybackActive()>
<com.android.server.people.data.ConversationInfo: boolean isNotificationSilenced()>
<com.android.systemui.tuner.ShortcutParser.Shortcut: java.lang.String toString()>
<com.android.systemui.statusbar.notification.logging.NotificationLogger: void onDozingChanged(boolean)>
<com.android.systemui.globalactions.GlobalActionsDialog.Action: android.graphics.drawable.Drawable getIcon(android.content.Context)>
<com.android.settingslib.drawer.Tile: void setCategory(java.lang.String)>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator.Callback: void onLaunchAnimationCancelled()>
<android.multiuser.UserLifecycleTests: void managedProfileUnlock_usingWhitelist()>
<com.android.server.pm.Installer: void setAppQuota(java.lang.String,int,int,long)>
<com.android.systemui.statusbar.phone.HeadsUpAppearanceController: void setAppearFraction(float,float)>
<com.android.systemui.shared.system.TaskStackChangeListener: void onActivityRestartAttempt(android.app.ActivityManager.RunningTaskInfo,boolean,boolean,boolean)>
<com.android.systemui.classifier.HumanInteractionClassifier: com.android.systemui.classifier.HumanInteractionClassifier getInstance(android.content.Context)>
<com.android.server.policy.PhoneWindowManager: void lockNow(android.os.Bundle)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setOem(boolean)>
<com.android.systemui.qs.external.TileServices: android.service.quicksettings.Tile getTile(android.os.IBinder)>
<com.android.server.usb.descriptors.Usb20ACMixerUnit: void <init>(int,byte,byte,int)>
<com.android.systemui.plugins.PluginListener: void onPluginDisconnected(com.android.systemui.plugins.Plugin)>
<com.android.settingslib.applications.AppUtils: boolean isHiddenSystemModule(android.content.Context,java.lang.String)>
<com.android.systemui.statusbar.phone.PanelViewController: boolean canPanelBeCollapsed()>
<com.android.server.accessibility.AccessibilityWindowManager: android.view.accessibility.AccessibilityWindowInfo getPictureInPictureWindowLocked()>
<com.android.server.accessibility.MagnificationController: float getPersistedScale()>
<com.android.server.textclassifier.IconsContentProvider: java.lang.String getType(android.net.Uri)>
<com.android.settingslib.bluetooth.MapProfile: boolean accessProfileEnabled()>
<com.android.systemui.statusbar.phone.NavigationBarView: void onDraw(android.graphics.Canvas)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setLayoutHeight(int)>
<com.android.server.vr.VrManagerService: void onSwitchUser(int)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setOnClickListener(android.view.View.OnClickListener)>
<com.android.systemui.shortcut.ShortcutKeyDispatcher: void <init>(android.content.Context,com.android.systemui.stackdivider.Divider,com.android.systemui.recents.Recents)>
<com.android.systemui.statusbar.phone.StatusBar: void setTopAppHidesStatusBar(boolean)>
<com.android.printservice.recommendation.util.MDNSFilteredDiscovery: void onStopDiscoveryFailed(java.lang.String,int)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexfvOES(float[],int)>
<com.android.server.statusbar.StatusBarManagerService: void onClearAllNotifications(int)>
<android.net.wifi.rtt.RangingRequest: int describeContents()>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: int getContainerChildCount()>
<com.android.server.devicepolicy.CertificateMonitor: void uninstallCaCerts(android.os.UserHandle,java.lang.String[])>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: void switchKeyboardLayout(int,int)>
<com.android.server.usb.descriptors.Usb20ACInputTerminal: void <init>(int,byte,byte,int)>
<com.android.server.timedetector.TimeDetectorStrategy.Callback: long systemClockMillis()>
<com.android.systemui.statusbar.notification.ImageTransformState: boolean sameAs(com.android.systemui.statusbar.notification.TransformState)>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitNames()>
<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasOutput()>
<com.android.server.infra.AbstractMasterSystemService: void onServiceEnabledLocked(com.android.server.infra.AbstractPerUserSystemService,int)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setVendor(boolean)>
<android.media.Session2Token: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.aware.WifiAwareManager: android.net.NetworkSpecifier createNetworkSpecifier(int,int,int,android.net.wifi.aware.PeerHandle,byte[],java.lang.String)>
<com.android.server.people.data.DataManager: void onUserStopping(int)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: boolean shouldSubtleWindowAnimationsForUnlock()>
<com.android.systemui.statusbar.policy.FlashlightControllerImpl: void setFlashlight(boolean)>
<com.android.systemui.HardwareBgDrawable: int getOpacity()>
<android.net.wifi.IScanResultsCallback: void onScanResultsAvailable()>
<com.android.networkstack.tethering.TetheringConfiguration: void <init>(android.content.Context,android.net.util.SharedLog,int)>
<com.android.server.om.OverlayManagerService: void <init>(android.content.Context)>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton2Visible(boolean)>
<com.android.packageinstaller.wear.InstallTask: void <init>(android.content.Context,java.lang.String,android.os.ParcelFileDescriptor,com.android.packageinstaller.wear.PackageInstallerImpl.InstallListener,android.content.pm.PackageInstaller.Session,android.content.IntentSender)>
<com.android.systemui.media.dialog.MediaOutputGroupAdapter: void <init>(com.android.systemui.media.dialog.MediaOutputController)>
<com.android.systemui.plugins.DarkIconDispatcher: void applyDark(com.android.systemui.plugins.DarkIconDispatcher.DarkReceiver)>
<com.android.server.IntentResolver: java.util.Set filterSet()>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: void registerPointerEventListener(android.view.WindowManagerPolicyConstants.PointerEventListener,int)>
<lockedregioncodeinjection.LockTarget: java.lang.String getPreOwner()>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean handleSetMenuLanguage(com.android.server.hdmi.HdmiCecMessage)>
<com.android.server.policy.PhoneWindowManager: void setDismissImeOnBackKeyPressed(boolean)>
<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isVisibleToInstantApps()>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void systemAudioControlOnPowerOn(int,boolean)>
<com.android.printspooler.util.PageRangeUtils: boolean contains(android.print.PageRange[],int)>
<com.android.settingslib.volume.MediaSessions: java.lang.String getControllerName(android.media.session.MediaController)>
<com.android.systemui.statusbar.NotificationShelf: void setCollapsedIcons(com.android.systemui.statusbar.phone.NotificationIconContainer)>
<com.android.server.GestureLauncherService: boolean isGestureLauncherEnabled(android.content.res.Resources)>
<com.android.server.pm.Policy: java.util.Set getSignatures()>
<com.android.systemui.car.volume.VolumeUI: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton1OnClickListener(android.view.View.OnClickListener)>
<com.android.server.usb.UsbDeviceManager: void onKeyguardStateChanged(boolean)>
<com.android.server.biometrics.face.FaceService: java.lang.String getTag()>
<com.android.systemui.car.navigationbar.ButtonRoleHolderController: void <init>(android.content.Context,android.content.pm.PackageManager,android.app.role.RoleManager,com.android.systemui.car.CarDeviceProvisionedController)>
<android.net.util.BaseNetdUnsolicitedEventListener: void onQuotaLimitReached(java.lang.String,java.lang.String)>
<com.android.server.usb.descriptors.Usb10ACInputTerminal: byte getChannelNames()>
<com.android.systemui.util.sensors.AsyncSensorManager: void unregisterDynamicSensorCallbackImpl(android.hardware.SensorManager.DynamicSensorCallback)>
<com.android.systemui.car.statusbar.DozeServiceHost: void setDozeScreenBrightness(int)>
<com.android.systemui.statusbar.phone.BiometricUnlockController: void startWakeAndUnlock(int)>
<com.android.server.NetworkManagementService: void shutdown()>
<com.android.systemui.qs.QSPanel: com.android.systemui.qs.QSEvent tileVisibleEvent()>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: void notifyKeyguardState(boolean,boolean)>
<com.android.systemui.statusbar.GestureRecorder: java.lang.String toJsonLocked()>
<com.android.server.pm.parsing.library.PackageSharedLibraryUpdater: void updatePackage(com.android.server.pm.parsing.pkg.ParsedPackage,boolean)>
<com.android.systemui.util.DeviceConfigProxy: void resetToDefaults(int,java.lang.String)>
<com.android.systemui.shared.system.TaskStackChangeListener: void onTaskStackChanged()>
<com.android.settingslib.drawer.ProviderTile: java.lang.String getDescription()>
<com.android.systemui.car.navigationbar.AssitantButton: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void setClipBottomAmount(int)>
<com.android.server.usb.descriptors.UsbConfigDescriptor: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.systemui.statusbar.phone.PanelBar: void go(int)>
<com.android.systemui.pip.tv.PipManager.Listener: void onPipEntered(java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationGuts: void setGutsContent(com.android.systemui.statusbar.notification.row.NotificationGuts.GutsContent)>
<com.android.server.audio.AudioService: void onAccessibilityServicesStateChanged(android.view.accessibility.AccessibilityManager)>
<com.android.server.pm.UserManagerService: boolean isSettingRestrictedForUser(java.lang.String,int,java.lang.String,int)>
<com.android.settingslib.development.AbstractLogpersistPreferenceController: void onCreate(android.os.Bundle)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceController.Callbacks: void updateWhiteBalance()>
<com.android.server.contentcapture.ContentCaptureManagerInternal: void notifyActivityEvent(int,android.content.ComponentName,int)>
<com.android.systemui.car.bluetooth.ConnectedDeviceSignalController: void startListening()>
<com.android.systemui.HardwareBgDrawable: void setAlpha(int)>
<com.android.settingslib.drawer.DashboardCategory: void addTile(com.android.settingslib.drawer.Tile)>
<com.android.systemui.car.statusbar.UnusedStatusBarModule: com.android.systemui.car.statusbar.UnusedStatusBar provideStatusBar(android.content.Context,com.android.systemui.statusbar.notification.init.NotificationsController,com.android.systemui.statusbar.phone.LightBarController,com.android.systemui.statusbar.phone.AutoHideController,com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.statusbar.phone.StatusBarIconController,com.android.systemui.statusbar.PulseExpansionHandler,com.android.systemui.statusbar.notification.NotificationWakeUpCoordinator,com.android.systemui.statusbar.phone.KeyguardBypassController,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.statusbar.phone.HeadsUpManagerPhone,com.android.systemui.statusbar.notification.DynamicPrivacyController,com.android.systemui.statusbar.notification.interruption.BypassHeadsUpNotifier,com.android.systemui.plugins.FalsingManager,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.statusbar.policy.RemoteInputQuickSettingsDisabler,com.android.systemui.statusbar.notification.row.NotificationGutsManager,com.android.systemui.statusbar.notification.logging.NotificationLogger,com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProvider,com.android.systemui.statusbar.NotificationViewHierarchyManager,com.android.systemui.keyguard.KeyguardViewMediator,android.util.DisplayMetrics,com.android.internal.logging.MetricsLogger,java.util.concurrent.Executor,com.android.systemui.statusbar.NotificationMediaManager,com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.statusbar.NotificationRemoteInputManager,com.android.systemui.statusbar.policy.UserSwitcherController,com.android.systemui.statusbar.policy.NetworkController,com.android.systemui.statusbar.policy.BatteryController,com.android.systemui.colorextraction.SysuiColorExtractor,com.android.systemui.keyguard.ScreenLifecycle,com.android.systemui.keyguard.WakefulnessLifecycle,com.android.systemui.statusbar.SysuiStatusBarStateController,com.android.systemui.statusbar.VibratorHelper,com.android.systemui.bubbles.BubbleController,com.android.systemui.statusbar.phone.NotificationGroupManager,com.android.systemui.statusbar.notification.VisualStabilityManager,com.android.systemui.statusbar.policy.DeviceProvisionedController,com.android.systemui.statusbar.NavigationBarController,dagger.Lazy,com.android.systemui.statusbar.policy.ConfigurationController,com.android.systemui.statusbar.phone.NotificationShadeWindowController,com.android.systemui.statusbar.phone.LockscreenLockIconController,com.android.systemui.statusbar.phone.DozeParameters,com.android.systemui.statusbar.phone.ScrimController,com.android.systemui.statusbar.phone.KeyguardLiftController,dagger.Lazy,dagger.Lazy,com.android.systemui.statusbar.phone.DozeServiceHost,android.os.PowerManager,com.android.systemui.recents.ScreenPinningRequest,com.android.systemui.statusbar.phone.DozeScrimController,com.android.systemui.volume.VolumeComponent,com.android.systemui.statusbar.CommandQueue,java.util.Optional,javax.inject.Provider,com.android.systemui.shared.plugins.PluginManager,java.util.Optional,com.android.systemui.statusbar.phone.LightsOutNotifController,com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter.Builder,com.android.systemui.statusbar.phone.ShadeController,com.android.systemui.statusbar.SuperStatusBarViewFactory,com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager,com.android.keyguard.ViewMediatorCallback,com.android.systemui.InitController,com.android.systemui.plugins.DarkIconDispatcher,android.os.Handler,com.android.systemui.plugins.PluginDependencyProvider,com.android.systemui.statusbar.phone.KeyguardDismissUtil,com.android.systemui.statusbar.policy.ExtensionController,com.android.systemui.statusbar.policy.UserInfoControllerImpl,com.android.systemui.statusbar.phone.PhoneStatusBarPolicy,com.android.systemui.statusbar.KeyguardIndicationController,dagger.Lazy,com.android.systemui.keyguard.DismissCallbackRegistry,com.android.systemui.statusbar.phone.StatusBarTouchableRegionManager)>
<android.net.wifi.hotspot2.pps.UpdateParameter: void setUpdateIntervalInMinutes(long)>
<com.android.server.pm.permission.PermissionsState: int getPermissionFlags(java.lang.String,int)>
<android.net.wifi.IWifiManager: void stopDppSession()>
<com.android.server.biometrics.iris.IrisService: com.android.server.biometrics.BiometricUtils getBiometricUtils()>
<com.android.systemui.statusbar.phone.StatusBar: void updateKeyguardMaxNotifications()>
<com.android.server.pm.PackageManagerService: boolean isOnlyCoreApps()>
<com.android.settingslib.bluetooth.A2dpProfile: boolean supportsHighQualityAudio(android.bluetooth.BluetoothDevice)>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: android.os.Handler getHandler()>
<com.android.systemui.classifier.FalsingManagerProxy: void onLeftAffordanceOn()>
<android.net.wifi.IWifiManager: void stopLocalOnlyHotspot()>
<android.net.wifi.WifiScanner.BssidListener: void onFound(android.net.wifi.ScanResult[])>
<com.android.systemui.statusbar.notification.stack.AmbientState: int getAnchorViewY()>
<com.android.settingslib.widget.BarView: void <init>(android.content.Context)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getDelegatePackages(android.content.ComponentName,java.lang.String)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean hideStatusBarIconsWhenExpanded()>
<com.android.systemui.SwipeHelper: void prepareSnapBackAnimation(android.view.View,android.animation.Animator)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: boolean isUserLocked()>
<com.android.server.pm.UserManagerService: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>
<com.android.gallery3d.common.Utils: void assertTrue(boolean)>
<android.perftests.utils.SettingsStateKeeperRule: void <init>(android.content.Context,java.lang.String)>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: android.service.notification.ZenModeConfig.ZenRule getManualRule()>
<android.net.wifi.aware.WifiAwareNetworkInfo: void <init>(java.net.Inet6Address,int,int)>
<com.android.systemui.statusbar.phone.PanelViewController: void collapseWithDuration(int)>
<com.android.server.rollback.AppDataRollbackHelper: boolean restoreAppData(int,android.content.rollback.PackageRollbackInfo,int,int,java.lang.String)>
<com.android.server.policy.PermissionPolicyService: void onBootPhase(int)>
<com.android.systemui.bubbles.animation.StackAnimationController: boolean isStackOnLeftSide()>
<com.android.server.pm.PackageKeySetData: void removeAllUpgradeKeySets()>
<com.android.server.pm.UserRestrictionsUtils: boolean canDeviceOwnerChange(java.lang.String)>
<com.android.server.NetworkManagementService: void startTetheringWithConfiguration(boolean,java.lang.String[])>
<com.android.systemui.classifier.FalsingManagerProxy: void onBouncerHidden()>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsAnimationController.MultiAnimationStarter: void startAll(java.lang.Runnable[])>
<com.android.systemui.bubbles.BubbleTaskView: void onLocationChanged()>
<com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder: com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent build()>
<com.android.server.BatteryService.HealthServiceWrapper.IHealthSupplier: android.hardware.health.V2_0.IHealth get(java.lang.String)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void canUserAttemptToConfigureInteractAcrossProfiles_packageNotInstalledInProfile_returnsTrue()>
<com.android.uiautomator.core.UiObject: boolean performMultiPointerGesture(android.view.MotionEvent.PointerCoords[][])>
<com.android.systemui.statusbar.phone.StatusBar: void notifyHeadsUpGoingToSleep()>
<com.android.statsd.shelltools.Utils: void logAppBreadcrumb(int,int,java.util.logging.Logger,java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void performAddAnimation(long,long,boolean)>
<com.android.systemui.statusbar.phone.BiometricUnlockController: void onBiometricAuthenticated(int,android.hardware.biometrics.BiometricSourceType,boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void addListItem(com.android.systemui.statusbar.notification.stack.NotificationListItem)>
<com.android.systemui.plugins.VolumeDialogController: boolean hasVibrator()>
<com.android.systemui.plugins.qs.QSTile.Icon: android.graphics.drawable.Drawable getDrawable(android.content.Context)>
<com.android.systemui.recents.OverviewProxyService: void cleanupAfterDeath()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void setEapType(int)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canTakeScreenshotLocked(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>
<com.android.server.accessibility.SystemActionPerformer: void <init>(android.content.Context,com.android.server.wm.WindowManagerInternal,java.util.function.Supplier,com.android.server.accessibility.SystemActionPerformer.SystemActionsChangedListener)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void addStateMonitorCallback(com.android.internal.policy.IKeyguardStateCallback)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void draw(android.graphics.Canvas)>
<com.android.commands.bmgr.BmgrTest: void testRun_whenUserSpecified_callsBackupManagerAsSpecifiedUser()>
<com.android.settingslib.bluetooth.A2dpProfile: boolean isHighQualityAudioEnabled(android.bluetooth.BluetoothDevice)>
<com.android.server.autofill.ui.InlineFillUi.InlineUiEventCallback: void notifyInlineUiShown(android.view.autofill.AutofillId)>
<com.android.server.accessibility.KeyboardInterceptor: void <init>(com.android.server.accessibility.AccessibilityManagerService,com.android.server.policy.WindowManagerPolicy)>
<com.android.systemui.qs.tileimpl.QSTileBaseView: void <init>(android.content.Context,com.android.systemui.plugins.qs.QSIconView)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void startUnlockHintAnimation()>
<android.multiuser.UserLifecycleTests: void startAndUnlockUser()>
<com.android.settingslib.utils.AsyncLoader: void onReset()>
<com.android.server.contentcapture.ContentCaptureManagerService: void onStart()>
<com.android.systemui.qs.QSTileHost: void addTile(android.content.ComponentName)>
<android.net.wifi.IWifiManager: boolean setSoftApConfiguration(android.net.wifi.SoftApConfiguration,java.lang.String)>
<com.android.settingslib.CustomEditTextPreference.CustomPreferenceDialogFragment: void onDialogClosed(boolean)>
<javax.microedition.khronos.opengles.GL10: void glTexEnvfv(int,int,float[],int)>
<com.android.printspooler.ui.SelectPrinterActivity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getCrossProfileCalendarPackages(android.content.ComponentName)>
<android.net.wifi.aware.AttachCallback: void onAttachFailed()>
<com.android.systemui.shared.system.KeyguardManagerCompat: boolean isDeviceLocked(int)>
<com.android.settingslib.applications.ApplicationsState.Callbacks: void onAllSizesComputed()>
<com.android.server.pm.PackageManagerService: void addCrossProfileIntentFilter(android.content.IntentFilter,java.lang.String,int,int,int)>
<com.android.settingslib.CustomEditTextPreference: void <init>(android.content.Context)>
<com.android.server.contentcapture.ContentCaptureMetricsLogger: void writeServiceEvent(int,android.content.ComponentName,android.content.ComponentName)>
<com.android.server.biometrics.LoggableMonitor: int statsClient()>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onSizeCompatModeActivityChanged(int,android.os.IBinder)>
<com.android.systemui.statusbar.policy.UserSwitcherController.BaseUserAdapter: void refresh()>
<com.android.server.usb.descriptors.UsbHIDDescriptor: byte getDescriptorType()>
<com.android.server.adb.AdbService: void unpairDevice(java.lang.String)>
<android.net.wifi.aware.IWifiAwareManager: void sendMessage(int,int,int,byte[],int,int)>
<com.android.settingslib.suggestions.SuggestionControllerMixinCompat: void launchSuggestion(android.service.settings.suggestions.Suggestion)>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isKeyguardVisible()>
<com.android.server.twilight.TwilightState: java.time.LocalDateTime sunrise()>
<com.android.server.pm.UserManagerService: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
<android.os.PackageManagerPerfTest: void setup()>
<android.perftests.utils.OneTimeSettingsListener: void <init>(android.content.Context,java.lang.String,java.lang.String,int)>
<com.android.settingslib.media.InfoMediaDevice: java.lang.String getId()>
<com.android.server.timedetector.TimeDetectorStrategy: void suggestTelephonyTime(android.app.timedetector.TelephonyTimeSuggestion)>
<com.android.systemui.media.dialog.MediaOutputBaseDialog: void onStop()>
<com.android.systemui.statusbar.notification.MediaNotificationProcessor: void <init>(android.content.Context,android.content.Context)>
<com.android.server.usb.descriptors.Usb20ASGeneral: void <init>(int,byte,byte,int)>
<com.android.server.pm.PackageManagerService: android.content.pm.KeySet getSigningKeySet(java.lang.String)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void setNotificationExpanded()>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl removeUsesLibrary(java.lang.String)>
<com.android.settingslib.media.PhoneMediaDevice: java.lang.String getId()>
<com.android.settingslib.media.LocalMediaManager: java.lang.CharSequence getSessionName()>
<com.android.systemui.util.time.SystemClockImpl: long elapsedRealtimeNanos()>
<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.pm.ParceledListSlice getCurrentRules()>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void updateNotificationRanking(android.service.notification.NotificationListenerService.RankingMap)>
<com.android.systemui.shared.tracing.FrameProtoTracer: void start()>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: boolean isForeground(int)>
<com.android.systemui.statusbar.phone.KeyguardBouncer: void showPromptReason(int)>
<com.android.keyguard.KeyguardSecurityViewFlipper.LayoutParams: void <init>(android.view.ViewGroup.LayoutParams)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getCompatibleWidthLimitDp()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: int describeContents()>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: void onUserSwitched(int)>
<com.android.server.slice.SliceManagerService: android.content.Context getContext()>
<com.android.systemui.statusbar.notification.row.FooterView: boolean isOnEmptySpace(float,float)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void onBiometricHelp(java.lang.String)>
<android.net.wifi.WifiManager.WifiConnectedNetworkScorer: void onSetScoreUpdateObserver(android.net.wifi.WifiManager.ScoreUpdateObserver)>
<com.android.systemui.globalactions.GlobalActionsLayout: int getCurrentRotation()>
<com.android.systemui.qs.tiles.HotspotTile: void handleClick()>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setLongClickable(boolean)>
<com.android.systemui.car.CarDeviceProvisionedControllerImpl: void stopListening()>
<com.android.systemui.shared.system.TaskStackChangeListener: void onSizeCompatModeActivityChanged(int,android.os.IBinder)>
<com.android.settingslib.CustomEditTextPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.audio.AudioService: void unregisterStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
<android.net.util.BaseNetdUnsolicitedEventListener: java.lang.String getInterfaceHash()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void launchPendingWakeupAction()>
<com.android.server.pm.parsing.pkg.AndroidPackage: android.os.Bundle getMetaData()>
<com.android.systemui.plugin.testoverlayplugin.SampleOverlayPlugin: void onDestroy()>
<com.android.systemui.stackdivider.DividerHandleView: void onDraw(android.graphics.Canvas)>
<com.android.systemui.car.statusbar.DozeServiceHost: void setAnimateScreenOff(boolean)>
<android.net.wifi.aware.ParcelablePeerHandle: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageResolver: android.graphics.drawable.Drawable loadImage(android.net.Uri)>
<com.android.keyguard.KeyguardClockSwitch: void setFormat12Hour(java.lang.CharSequence)>
<javax.microedition.khronos.opengles.GL11: void glPointParameterx(int,int)>
<com.android.settingslib.development.SystemPropPoker: void poke()>
<android.net.wifi.rtt.ResponderLocation: android.location.Location toLocation()>
<com.android.networkstack.tethering.OffloadHardwareInterface: boolean initOffloadConfig()>
<com.android.systemui.pip.tv.PipControlButtonView: void setImageResource(int)>
<com.android.keyguard.KeyguardPasswordView: void onStartingToHide()>
<com.android.gallery3d.common.Utils: int nextPowerOf2(int)>
<com.android.server.hdmi.SelectRequestBuffer: void clear()>
<android.net.wifi.p2p.nsd.WifiP2pServiceInfo: java.util.List getSupplicantQueryList()>
<com.android.systemui.plugins.PluginEnablerImpl: void <init>(android.content.Context,android.content.pm.PackageManager)>
<com.android.server.SensorNotificationService: void onStatusChanged(java.lang.String,int,android.os.Bundle)>
<android.net.util.InterfaceSet: void <init>(java.lang.String[])>
<com.android.systemui.globalactions.GlobalActionsColumnLayout: void onMeasure(int,int)>
<com.android.systemui.statusbar.notification.VisibilityLocationProvider: boolean isInVisibleLocation(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onExpansionFromPulseStopped()>
<com.android.server.wallpaper.WallpaperManagerService: java.lang.String getName()>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setPackageName(java.lang.String)>
<com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter.Builder: com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter.Builder setStatusBar(com.android.systemui.statusbar.phone.StatusBar)>
<com.android.systemui.statusbar.phone.RotationContextButton: void onNavigationModeChanged(int)>
<com.android.systemui.statusbar.policy.BatteryController.BatteryStateChangeCallback: void onReverseChanged(boolean,int,java.lang.String)>
<com.android.server.DynamicSystemService: boolean isInUse()>
<com.android.server.DropBoxManagerService: boolean isTagEnabled(java.lang.String)>
<com.android.systemui.statusbar.StatusBarIconView: void onSizeChanged(int,int,int,int)>
<com.android.fakeoemfeatures.FakeBackgroundService: void onCreate()>
<android.net.wifi.IWifiManager: void updateInterfaceIpState(java.lang.String,int)>
<com.android.systemui.statusbar.KeyguardAffordanceView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.statusbar.StatusBarIconView: void setDozing(boolean,boolean,long)>
<android.net.wifi.SoftApConfiguration.Builder: android.net.wifi.SoftApConfiguration.Builder setMaxNumberOfClients(int)>
<com.android.systemui.statusbar.notification.AnimatableProperty: int getAnimatorTag()>
<com.android.systemui.statusbar.phone.NotificationGroupManager.OnGroupChangeListener: void onGroupCreatedFromChildren(com.android.systemui.statusbar.phone.NotificationGroupManager.NotificationGroup)>
<com.android.systemui.qs.QSDetailItems: void setTagSuffix(java.lang.String)>
<com.android.server.infra.AbstractMasterSystemService: void clearCacheLocked()>
<com.android.systemui.bubbles.BubbleExpandedView: void updateView(int[])>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: boolean childNeedsClipping(android.view.View)>
<com.android.server.pm.PackageDexOptimizer: void <init>(com.android.server.pm.PackageDexOptimizer)>
<android.net.wifi.WifiConfiguration: boolean hasNoInternetAccess()>
<com.android.keyguard.KeyguardUpdateMonitor: void dispatchScreenTurnedOn()>
<android.media.Session2Command: java.lang.String getCustomAction()>
<com.android.networkstack.tethering.TetheringConfiguration: boolean checkDunRequired(android.content.Context)>
<com.android.server.slice.DirtyTracker.Persistable: void writeTo(org.xmlpull.v1.XmlSerializer)>
<com.android.systemui.log.dagger.LogModule: com.android.systemui.log.LogBuffer provideNotifInteractionLogBuffer(com.android.systemui.log.LogcatEchoTracker,com.android.systemui.dump.DumpManager)>
<com.android.server.people.data.PackageData: com.android.server.people.data.EventHistory getEventHistory(java.lang.String)>
<com.android.systemui.statusbar.phone.StatusBar: void onBatteryLevelChanged(int,boolean,boolean)>
<com.android.keyguard.clock.ClockOptionsProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void onTouchEnd()>
<com.android.systemui.pip.phone.PipMenuActivity: void onNewIntent(android.content.Intent)>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: void onUpdateRowStates()>
<com.android.systemui.statusbar.phone.ShadeControllerImpl: void instantExpandNotificationsPanel()>
<com.android.settingslib.net.DataUsageController: void <init>(android.content.Context)>
<com.android.systemui.statusbar.KeyguardAffordanceView: boolean performClick()>
<com.android.server.integrity.model.BitOutputStream: void setNext(int,int)>
<javax.microedition.khronos.opengles.GL10: void glMaterialfv(int,int,float[],int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean childNeedsClipping(android.view.View)>
<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: java.util.Map keepOnlyWhitelistedInsecureKeys(java.util.Map)>
<com.android.media.tv.remoteprovider.TvRemoteProvider: void sendPointerSync(android.os.IBinder)>
<com.android.systemui.statusbar.notification.collection.coordinator.RankingCoordinator: void <init>(com.android.systemui.plugins.statusbar.StatusBarStateController)>
<com.android.server.locksettings.LockSettingsService: void unregisterStrongAuthTracker(android.app.trust.IStrongAuthTracker)>
<com.android.settingslib.widget.BarChartInfo.Builder: com.android.settingslib.widget.BarChartInfo build()>
<com.android.server.appop.AppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>
<com.android.systemui.statusbar.AlertingNotificationManager: void releaseAllImmediately()>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: java.lang.Object getWindowManagerLock()>
<android.media.MediaSession2.ControllerInfo: int hashCode()>
<com.android.systemui.qs.tiles.ColorInversionTile: void handleDestroy()>
<com.android.systemui.qs.customize.TileAdapter: void onTilesChanged(java.util.List)>
<android.app.usage.UsageStatsManagerInternal: android.app.usage.UsageEvents queryEventsForUser(int,long,long,int)>
<android.content.pm.PackageManagerInternal: boolean isInstantAppInstallerComponent(android.content.ComponentName)>
<com.android.server.NativeDaemonEvent: java.lang.String[] unescapeArgs(java.lang.String)>
<com.android.server.input.InputManagerService: int getScanCodeState(int,int,int)>
<android.content.pm.PackageManagerInternal: java.util.List getOverlayPackages(int)>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void onConfigChanged(android.service.notification.ZenModeConfig)>
<android.net.wifi.IWifiManager: android.net.DhcpInfo getDhcpInfo()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationMediaTemplateViewWrapper: void updateTransformedTypes()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.broadcastradio.BroadcastRadioService: void onStart()>
<com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry: void setEntry(com.android.systemui.statusbar.notification.collection.NotificationEntry,java.lang.Runnable)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void updateBackgroundTint()>
<com.android.systemui.classifier.FalsingManagerProxy: void onTrackingStopped()>
<com.android.server.pm.CrossProfileAppsService: void onStart()>
<android.os.LooperStatsPerfTest: void timeOnePercentSampling()>
<com.android.gallery3d.exif.ExifInterface: int getAllowedIfdFlagsFromInfo(int)>
<com.android.server.biometrics.fingerprint.FingerprintUserState: void doWriteState()>
<com.android.server.pm.parsing.pkg.PackageImpl: long getLongVersionCode()>
<com.android.server.locksettings.LockSettingsService: void setBoolean(java.lang.String,boolean,int)>
<com.android.server.audio.AudioService: void setSpeakerphoneOn(android.os.IBinder,boolean)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getDescriptionRes()>
<com.android.systemui.statusbar.notification.row.NotificationGuts.OnGutsClosedListener: void onGutsClosed(com.android.systemui.statusbar.notification.row.NotificationGuts)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareImpl: void setCaptureState(boolean)>
<com.android.server.accounts.IAccountAuthenticatorCache: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int)>
<com.android.systemui.statusbar.FlingAnimationUtils.Builder: void <init>(android.util.DisplayMetrics)>
<com.android.server.firewall.IntentFirewall: java.io.File getRulesDir()>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onFinishedGoingToSleep(int)>
<com.android.server.pm.ShortcutService: void onApplicationActive(java.lang.String,int)>
<com.android.systemui.classifier.PointerCountClassifier: java.lang.String getTag()>
<com.android.systemui.pip.PipUI: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int stopUser(android.content.ComponentName,android.os.UserHandle)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfilePackages(android.content.ComponentName,java.util.List)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: com.android.systemui.statusbar.StatusBarMobileView addMobileIcon(int,java.lang.String,com.android.systemui.statusbar.phone.StatusBarSignalPolicy.MobileIconState)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setBucket(int)>
<com.android.systemui.statusbar.policy.Clock: void useWallpaperTextColor(boolean)>
<com.android.systemui.util.leak.WeakIdentityHashMap: java.util.Set entrySet()>
<com.android.server.pm.pkg.PackageStateUnserialized: long getLatestPackageUseTimeInMills()>
<com.android.server.pm.PackageSetting: void setInstallPermissionsFixed(boolean)>
<com.android.settingslib.NetworkPolicyEditor: boolean hasLimitedPolicy(android.net.NetworkTemplate)>
<com.android.systemui.qs.SlashDrawable: void onBoundsChange(android.graphics.Rect)>
<com.android.server.media.MediaRouterService: void registerRouter2(android.media.IMediaRouter2,java.lang.String)>
<javax.obex.ObexHelper: int findTag(byte,byte[])>
<com.android.systemui.shared.system.QuickStepContract: boolean isSwipeUpMode(int)>
<com.android.keyguard.CarrierTextController: void updateCarrierText()>
<com.android.systemui.SystemUIFactory: java.lang.String[] getSystemUIServiceComponentsPerUser(android.content.res.Resources)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.photos.views.TiledImageRenderer: int getViewHeight()>
<com.android.systemui.volume.VolumeDialogControllerImpl: void setEnableDialogs(boolean,boolean)>
<com.android.settingslib.inputmethod.InputMethodPreference: boolean onPreferenceChange(androidx.preference.Preference,java.lang.Object)>
<com.android.systemui.plugins.FalsingManager: void onBouncerHidden()>
<com.android.systemui.car.window.OverlayViewGlobalStateController: boolean isWindowFocusable()>
<com.android.settingslib.media.LocalMediaManager: java.util.List getDeselectableMediaDevice()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setExpandedHeight(float)>
<com.android.settingslib.widget.BarChartPreference: void updateLoadingState(boolean)>
<android.net.wifi.WifiInfo: void reset()>
<com.android.systemui.statusbar.policy.BrightnessMirrorController: android.view.View getMirror()>
<com.android.powermodel.component.ModemProfile: float getSleepMa()>
<com.android.systemui.statusbar.NotificationMediaManager: void findAndUpdateMediaNotifications()>
<com.android.server.usb.descriptors.report.ReportCanvas: void writeParagraph(java.lang.String,boolean)>
<com.android.systemui.shared.system.ActivityManagerWrapper: android.app.ActivityManager.RunningTaskInfo getRunningTask(boolean)>
<android.net.wifi.WifiInfo: void setMaxSupportedRxLinkSpeedMbps(int)>
<com.android.server.accessibility.gestures.TouchState: void clear()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void onTrackingStarted()>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setIsMetered(boolean)>
<com.android.systemui.shortcut.ShortcutKeyDispatcher: void onShortcutKeyPressed(long)>
<com.android.server.recoverysystem.RecoverySystemService: void onPreparedForReboot(boolean)>
<com.android.settingslib.core.lifecycle.ObservableDialogFragment: void onStart()>
<com.android.settingslib.development.AbstractEnableAdbPreferenceController: java.lang.String getPreferenceKey()>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: void notifyInsetsChanged()>
<com.android.settingslib.location.InjectedSetting.Builder: com.android.settingslib.location.InjectedSetting.Builder setPackageName(java.lang.String)>
<com.android.systemui.car.navigationbar.NavigationBarViewFactory: android.view.ViewGroup getBottomWindow()>
<android.net.wifi.rtt.RangingResultCallback: void onRangingResults(java.util.List)>
<android.os.BinderCallsStatsPerfTest: void timeCallSessionOnePercentSampling()>
<com.android.systemui.statusbar.policy.BluetoothController: int getBluetoothState()>
<com.android.server.pm.ApexManager.ApexManagerImpl: java.util.List getActiveApexInfos()>
<com.android.settingslib.net.DataUsageController: boolean isMobileDataEnabled()>
<com.android.settingslib.media.MediaManager.MediaDeviceCallback: void onDeviceListRemoved(java.util.List)>
<com.android.server.accessibility.gestures.TouchState: void startDragging()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationBigTextTemplateViewWrapper: void updateTransformedTypes()>
<com.android.nfc_extras.EeNfcDisabledException: void <init>(java.lang.String)>
<com.android.systemui.shared.recents.model.Task: void copyFrom(com.android.systemui.shared.recents.model.Task)>
<com.android.server.contentcapture.ContentCaptureManagerService: int getMaximumTemporaryServiceDurationMs()>
<android.net.wifi.hotspot2.omadm.XMLNode: java.util.List getChildren()>
<android.net.wifi.WifiManager: boolean isWifiApEnabled()>
<com.android.systemui.qs.customize.TileAdapter.Holder: void stopDrag()>
<com.android.statementservice.retriever.Statement: java.lang.String toString()>
<com.android.settingslib.core.lifecycle.Lifecycle: boolean onOptionsItemSelected(android.view.MenuItem)>
<com.android.localtransport.LocalTransport: long getBackupQuota(java.lang.String,boolean)>
<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog logPoint(java.lang.String,float,float)>
<com.android.systemui.volume.VolumeToolTipView: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.collection.notifcollection.CommonNotifCollection: java.util.Collection getAllNotifs()>
<com.android.server.protolog.common.LogDataType: java.util.List parseFormatString(java.lang.String)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareService: android.media.soundtrigger_middleware.ISoundTriggerModule attach(int,android.media.soundtrigger_middleware.ISoundTriggerCallback)>
<com.android.systemui.statusbar.phone.BarTransitions.BarBackgroundDrawable: void setColorFilter(android.graphics.ColorFilter)>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger: void <init>(android.content.Context,java.lang.String,com.android.settingslib.core.instrumentation.MetricsFeatureProvider)>
<android.net.wifi.p2p.WifiP2pManager: void setServiceResponseListener(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ServiceResponseListener)>
<com.android.systemui.statusbar.phone.FloatingRotationButton: void setCanShowRotationButton(boolean)>
<com.android.systemui.statusbar.policy.CallbackHandler: void setEthernetIndicators(com.android.systemui.statusbar.policy.NetworkController.IconState)>
<com.android.systemui.qs.tiles.WifiTile: int getMetricsCategory()>
<com.android.systemui.statusbar.notification.DynamicPrivacyController: void setStatusBarKeyguardViewManager(com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager)>
<com.android.systemui.statusbar.phone.MultiUserSwitch: boolean isMultiUserEnabled()>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector enabled(boolean)>
<com.android.settingslib.suggestions.SuggestionLoader: java.util.List loadInBackground()>
<com.android.systemui.statusbar.policy.HeadsUpManager: void onDensityOrFontScaleChanged()>
<com.android.server.pm.permission.PermissionManagerServiceInternal.SyncAdapterPackagesProvider: java.lang.String[] getPackages(java.lang.String,int)>
<com.android.systemui.biometrics.AuthBiometricView: void setRequireConfirmation(boolean)>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.policy.BluetoothController provideBluetoothController(com.android.systemui.statusbar.policy.BluetoothControllerImpl)>
<com.android.server.locksettings.SyntheticPasswordManager: boolean hasEscrowData(int)>
<com.android.keyguard.clock.AnalogClockController: void onDestroyView()>
<android.app.backup.BackupUtilsTest: void testIsFileSpecifiedInPathList_whenFileAndPathListEmpty()>
<com.android.systemui.car.navigationbar.SystemBarConfigs: java.util.List getSystemBarSidesByZOrder()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void removeTrackingHeadsUpListener(java.util.function.Consumer)>
<com.android.keyguard.KeyguardUpdateMonitor: void dispatchDreamingStarted()>
<com.android.server.people.data.EventIndex: int hashCode()>
<com.android.systemui.volume.SegmentedButtons: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.plugins.qs.QSTile: void secondaryClick()>
<com.android.systemui.statusbar.StatusBarMobileView: java.lang.String getSlot()>
<com.android.server.locksettings.LockSettingsService: int getCredentialType(int)>
<com.android.server.media.MediaRouterService: void setSessionVolumeWithRouter2(android.media.IMediaRouter2,java.lang.String,int)>
<com.android.systemui.power.PowerNotificationWarnings: void dismissLowBatteryWarning()>
<com.android.systemui.qs.tiles.WifiTile: java.lang.String composeChangeAnnouncement()>
<com.android.systemui.statusbar.phone.LockscreenWallpaper: void setCurrentUser(int)>
<com.android.server.IoThread: android.os.Handler getHandler()>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifDismissInterceptor: java.lang.String getName()>
<android.app.usage.UsageStatsManagerInternal: boolean isAppIdle(java.lang.String,int,int)>
<android.content.pm.PackageManagerInternal: void clearBlockUninstallForUser(int)>
<com.android.settingslib.Utils: android.graphics.ColorMatrix getAlphaInvariantColorMatrixForColor(int)>
<com.android.server.pm.UserManagerService: boolean isPreCreated(int)>
<com.android.networkstack.tethering.TetheringConfiguration: boolean isBpfOffloadEnabled()>
<com.android.systemui.statusbar.CrossFadeHelper: void fadeIn(android.view.View,long,int)>
<com.android.server.search.SearchManagerService: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>
<com.android.server.SensorNotificationService: void onBootPhase(int)>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void setIcon(int,com.android.systemui.statusbar.phone.StatusBarIconHolder)>
<com.android.server.biometrics.iris.IrisService: java.lang.String getTag()>
<com.android.systemui.classifier.SpeedClassifier: void <init>(com.android.systemui.classifier.ClassifierData)>
<com.android.systemui.volume.VolumeDialogControllerImpl: void destroy()>
<com.android.systemui.statusbar.policy.DataSaverControllerImpl: void removeCallback(android.net.NetworkPolicyManager.Listener)>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getDeclaredSharedLibraries(java.lang.String,int,int)>
<com.android.keyguard.clock.AnalogClockController: void <init>(android.content.res.Resources,android.view.LayoutInflater,com.android.systemui.colorextraction.SysuiColorExtractor)>
<com.android.server.utils.PriorityDump: void dump(com.android.server.utils.PriorityDump.PriorityDumper,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.bubbles.BubbleData.TimeSource: long currentTimeMillis()>
<com.android.systemui.qs.tiles.BluetoothTile.BluetoothDetailAdapter: void setToggleState(boolean)>
<com.android.systemui.assist.ui.PerimeterPathGuide: float getRegionWidth(com.android.systemui.assist.ui.PerimeterPathGuide.Region)>
<com.android.server.display.DisplayModeDirector: void <init>(android.content.Context,android.os.Handler,com.android.server.display.DisplayModeDirector.Injector)>
<com.android.server.timedetector.TimeDetectorService.Lifecycle: void <init>(android.content.Context)>
<com.android.systemui.statusbar.phone.NavigationBarTransitions: boolean isLightsOut(int)>
<com.android.systemui.statusbar.policy.ZenModeController: int getZen()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper wrap(android.content.Context,android.view.View,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.shared.system.SystemGestureExclusionListenerCompat: void <init>(int)>
<com.android.systemui.statusbar.policy.BatteryControllerImpl: void init()>
<com.android.settingslib.fuelgauge.PowerWhitelistBackend: void refreshList()>
<com.android.photos.views.BlockingGLTextureView: void onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int)>
<com.android.server.policy.WindowManagerPolicy: void setPipVisibilityLw(boolean)>
<com.android.server.storage.StorageUserConnection: com.android.server.storage.StorageUserConnection.Session removeSession(java.lang.String)>
<com.android.server.timedetector.TimeDetectorStrategy: void initialize(com.android.server.timedetector.TimeDetectorStrategy.Callback)>
<com.android.server.vr.SettingsObserver.SettingChangeListener: void onSettingRestored(java.lang.String,java.lang.String,int)>
<com.android.server.PersistentDataBlockManagerInternal: int getAllowedUid()>
<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageList getPackageList(android.content.pm.PackageManagerInternal.PackageListObserver)>
<android.graphics.perftests.PathPerfTest: void testAddReset()>
<com.android.systemui.qs.QuickStatusBarHeader: void disable(int,int,boolean)>
<android.net.ITetheringConnector: void startTethering(android.net.TetheringRequestParcel,java.lang.String,android.net.IIntResultListener)>
<com.android.server.testing.shadows.ShadowBackupDataInput: void skipEntityData()>
<com.android.server.biometrics.face.FaceConstants: java.lang.String tagAuthStartError()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setPublicLayout(com.android.systemui.statusbar.notification.row.NotificationContentView)>
<com.android.server.testing.shadows.ShadowBackupDataOutput: int writeEntityData(byte[],int)>
<com.android.systemui.statusbar.phone.StatusBar: void startActivity(android.content.Intent,boolean,android.os.Handler.Callback)>
<com.android.systemui.tuner.TunerZenModePanel: void onClick(android.view.View)>
<com.android.keyguard.KeyguardSecurityContainer: boolean needsInput()>
<com.android.server.pm.InstantAppResolver: void doInstantAppResolutionPhaseTwo(android.content.Context,com.android.server.pm.InstantAppResolverConnection,android.content.pm.InstantAppRequest,android.content.pm.ActivityInfo,android.os.Handler)>
<com.android.server.people.data.EventIndex: boolean equals(java.lang.Object)>
<com.android.settingslib.SliceBroadcastRelay: void registerReceiver(android.content.Context,android.net.Uri,java.lang.Class,android.content.IntentFilter)>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder: com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder withMatrix(android.graphics.Matrix)>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageResolver: int getMaxImageWidth()>
<com.android.role.persistence.RolesPersistence: com.android.role.persistence.RolesPersistence createInstance()>
<com.android.systemui.statusbar.FlingAnimationUtils.Builder: com.android.systemui.statusbar.FlingAnimationUtils.Builder setMaxLengthSeconds(float)>
<android.media.DataSourceCallback: long getSize()>
<com.android.server.audio.AudioService: int getFocusRampTimeMs(int,android.media.AudioAttributes)>
<com.android.settingslib.deviceinfo.StorageManagerVolumeProvider: long getPrimaryStorageSize()>
<android.net.wifi.hotspot2.pps.HomeSp: java.lang.String getIconUrl()>
<com.android.systemui.statusbar.phone.StatusBarIconHolder: com.android.systemui.statusbar.phone.StatusBarSignalPolicy.MobileIconState getMobileState()>
<com.android.settingslib.core.lifecycle.Lifecycle: void onAttach(android.content.Context)>
<com.android.role.persistence.RolesState: int getVersion()>
<com.android.server.usb.UsbAlsaDevice: boolean hasInput()>
<com.android.uiautomator.core.UiAutomatorBridge: void waitForIdle()>
<com.android.settingslib.CustomEditTextPreferenceCompat: void onPrepareDialogBuilder(androidx.appcompat.app.AlertDialog.Builder,android.content.DialogInterface.OnClickListener)>
<com.android.systemui.ImageWallpaper: void onCreate()>
<com.android.settingslib.bluetooth.HidProfile: boolean setEnabled(android.bluetooth.BluetoothDevice,boolean)>
<com.android.systemui.bubbles.BubbleOverflowAdapter: void onBindViewHolder(com.android.systemui.bubbles.BubbleOverflowAdapter.ViewHolder,int)>
<android.net.wifi.p2p.WifiP2pManager.UpnpServiceResponseListener: void onUpnpServiceAvailable(java.util.List,android.net.wifi.p2p.WifiP2pDevice)>
<com.android.settingslib.widget.AdaptiveIcon: void setBackgroundColor(android.content.Context,com.android.settingslib.drawer.Tile)>
<com.android.keyguard.KeyguardHostView: java.lang.CharSequence getAccessibilityTitleForCurrentMode()>
<com.android.systemui.car.navigationbar.CarNavigationBarView: void setStatusBarWindowTouchListener(android.view.View.OnTouchListener)>
<com.android.systemui.statusbar.notification.VisualStabilityManager: void setVisibilityLocationProvider(com.android.systemui.statusbar.notification.VisibilityLocationProvider)>
<android.app.ResourcesPerfTest: void getValueManyConfigurations()>
<com.android.systemui.statusbar.notification.collection.coordinator.DeviceProvisionedCoordinator: void attach(com.android.systemui.statusbar.notification.collection.NotifPipeline)>
<com.android.server.usb.descriptors.UsbMSMidiHeader: void <init>(int,byte,byte,int)>
<android.net.wifi.p2p.WifiP2pDeviceList: boolean isGroupOwner(java.lang.String)>
<com.android.server.adb.AdbDebuggingManager: void clearDebuggingKeys()>
<com.android.server.inputmethod.InputMethodManagerService.Lifecycle: void onUnlockUser(int)>
<com.android.systemui.qs.QSHost: com.android.systemui.qs.logging.QSLogger getQSLogger()>
<com.android.systemui.qs.tiles.LocationTile: com.android.systemui.plugins.qs.QSTile.BooleanState newTileState()>
<com.android.server.policy.WindowOrientationListener: void enable(boolean)>
<com.android.systemui.car.navigationbar.CarNavigationButton: void setUnseen(boolean)>
<android.net.wifi.SoftApInfo: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.notification.stack.NotificationRoundnessManager: void updateRoundedChildren(com.android.systemui.statusbar.notification.stack.NotificationSection[])>
<com.android.systemui.shared.recents.model.Task.TaskKey: android.content.ComponentName getComponent()>
<com.android.systemui.car.window.OverlayViewController: android.view.View getLayout()>
<android.app.usage.UsageStatsManagerInternal: void reportExemptedSyncStart(java.lang.String,int)>
<com.android.systemui.biometrics.AuthBiometricView: void onError(java.lang.String)>
<com.android.server.accounts.AccountManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.perftests.utils.TraceMarkParser.TraceMarkLine: java.lang.String toString()>
<com.android.keyguard.clock.DefaultClockController: android.graphics.Bitmap getThumbnail()>
<com.android.systemui.util.wakelock.WakeLock: com.android.systemui.util.wakelock.WakeLock wrap(android.os.PowerManager.WakeLock,long)>
<com.android.systemui.car.volume.CarVolumeDialogImpl: void destroy()>
<android.net.wifi.aware.WifiAwareManager: void publish(int,android.os.Looper,android.net.wifi.aware.PublishConfig,android.net.wifi.aware.DiscoverySessionCallback)>
<com.android.commands.uiautomator.Launcher: void main(java.lang.String[])>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)>
<com.android.server.policy.WindowManagerPolicy.DisplayContentInfo: android.view.Display getDisplay()>
<com.android.server.usb.UsbAlsaDevice: boolean equals(java.lang.Object)>
<com.android.server.pm.PackageManagerService: void deleteCompilerPackageStats(java.lang.String)>
<com.android.systemui.shared.system.DevicePolicyManagerWrapper: boolean isLockTaskPermitted(java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isOverrideApnEnabled(android.content.ComponentName)>
<com.android.server.biometrics.EnumerateClient: int statsAction()>
<android.net.wifi.p2p.WifiP2pManager.ChannelListener: void onChannelDisconnected()>
<com.android.gallery3d.exif.ExifInterface: void deleteTag(int,int)>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.Map getKeySetMapping()>
<com.android.systemui.bubbles.animation.OneTimeEndListener: void onAnimationEnd(androidx.dynamicanimation.animation.DynamicAnimation,boolean,float,float)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setAffiliationIds(android.content.ComponentName,java.util.List)>
<com.android.uiautomator.core.UiCollection: com.android.uiautomator.core.UiObject getChildByInstance(com.android.uiautomator.core.UiSelector,int)>
<com.android.systemui.statusbar.policy.AccessPointControllerImpl: int getIcon(com.android.settingslib.wifi.AccessPoint)>
<android.net.wifi.WifiNetworkSpecifier: int describeContents()>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getKeepUninstalledPackages(android.content.ComponentName,java.lang.String)>
<com.android.systemui.statusbar.notification.stack.SwipeableView: void resetTranslation()>
<com.android.settingslib.DeviceInfoUtils: java.lang.String getFormattedPhoneNumber(android.content.Context,android.telephony.SubscriptionInfo)>
<com.android.systemui.pip.tv.PipMenuActivity: void onDestroy()>
<com.android.systemui.statusbar.notification.row.AppOpsInfo: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int getDnsType()>
<com.android.systemui.statusbar.phone.StatusBarIconController: void removeIconGroup(com.android.systemui.statusbar.phone.StatusBarIconController.IconManager)>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: void setImsi(java.lang.String)>
<com.android.server.policy.PhoneWindowManager: boolean isKeyguardTrustedLw()>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: void addCallback(com.android.systemui.plugins.statusbar.StatusBarStateController.StateListener,int)>
<com.android.systemui.car.bluetooth.CarBatteryController: void removeCallback(com.android.systemui.statusbar.policy.BatteryController.BatteryStateChangeCallback)>
<com.android.systemui.qs.QSDetail: void updateResources()>
<com.android.systemui.statusbar.policy.RemoteInputView: void onFinishInflate()>
<com.android.systemui.statusbar.AlertingNotificationManager: void updateNotification(java.lang.String,boolean)>
<com.android.server.display.utils.RollingBuffer: void add(long,float)>
<com.android.server.policy.PhoneWindowManager: boolean isKeyguardShowing()>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void canConfigureInteractAcrossProfiles_packageNotWhitelisted_returnsFalse()>
<com.android.server.pm.IntentFilterVerificationState: java.lang.String getPackageName()>
<com.android.settingslib.applications.ApplicationsState.AppEntry: void <init>(android.content.Context,android.content.pm.ApplicationInfo,long)>
<com.android.packageinstaller.PackageUtil: android.content.pm.PackageInfo getPackageInfo(android.content.Context,java.io.File,int)>
<com.android.keyguard.KeyguardSecurityViewFlipper.LayoutParams: void encodeProperties(android.view.ViewHierarchyEncoder)>
<com.android.systemui.util.DeviceConfigProxy: void enforceReadPermission(android.content.Context,java.lang.String)>
<com.android.server.slice.PinnedSliceState: void pin(java.lang.String,android.app.slice.SliceSpec[],android.os.IBinder)>
<com.android.server.timezone.PackageTracker: boolean start()>
<com.android.systemui.qs.tileimpl.QSTileImpl: void checkIfRestrictionEnforcedByAdminOnly(com.android.systemui.plugins.qs.QSTile.State,java.lang.String)>
<com.android.server.pm.Installer: void tryMountDataMirror(java.lang.String)>
<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String getCurrentRuleSetVersion()>
<com.android.systemui.stackdivider.DividerView: void onFinishInflate()>
<com.android.server.SensorNotificationService: void onAccuracyChanged(android.hardware.Sensor,int)>
<com.android.systemui.shared.system.TaskStackChangeListener: void onRecentTaskListUpdated()>
<com.android.settingslib.applications.InterestingConfigChanges: void <init>(int)>
<com.android.keyguard.KeyguardSecurityContainer: void verifyUnlock()>
<com.android.server.pm.PackageManagerServiceUtils: void sortPackagesByUsageDate(java.util.List,com.android.server.pm.PackageManagerService)>
<com.android.systemui.statusbar.notification.row.NotificationGuts: void drawableHotspotChanged(float,float)>
<com.android.server.vr.SettingsObserver: void addListener(com.android.server.vr.SettingsObserver.SettingChangeListener)>
<com.android.server.accessibility.AccessibilityWindowManager: int getFocusedWindowId(int)>
<com.android.server.policy.PhoneWindowManager: int getUiMode()>
<com.android.powermodel.component.ModemProfile.Builder: void setRxMa(float)>
<com.android.server.infra.AbstractMasterSystemService: int getMaximumTemporaryServiceDurationMs()>
<com.android.systemui.car.bluetooth.CarBatteryController: void setPowerSaveMode(boolean)>
<com.android.permission.persistence.RuntimePermissionsState: java.util.Map getPackagePermissions()>
<com.android.server.pm.PackageInstallerSession: void transfer(java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)>
<com.android.server.usb.descriptors.UsbVCInterface: com.android.server.usb.descriptors.UsbDescriptor allocDescriptor(com.android.server.usb.descriptors.UsbDescriptorParser,com.android.server.usb.descriptors.ByteStream,int,byte)>
<com.android.server.accessibility.MagnificationController: boolean reset(int,boolean)>
<com.android.systemui.SystemUIAppComponentFactory.ContextInitializer: void setContextAvailableCallback(com.android.systemui.SystemUIAppComponentFactory.ContextAvailableCallback)>
<com.android.keyguard.EmergencyCarrierArea: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.gallery3d.common.BitmapUtils: byte[] compressToBytes(android.graphics.Bitmap)>
<com.android.server.stats.pull.IonMemoryUtil.IonAllocations: boolean equals(java.lang.Object)>
<com.android.networkstack.tethering.TetheringConfiguration: int getOffloadPollInterval()>
<com.android.systemui.statusbar.notification.InflationException: void <init>(java.lang.String)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: java.lang.String getDefaultHome(int)>
<com.android.server.pm.PackageManagerService: int getUidForSharedUser(java.lang.String)>
<com.android.server.audio.AudioService: void onTouchExplorationStateChanged(boolean)>
<com.android.server.timedetector.TimeDetectorStrategy: void suggestManualTime(android.app.timedetector.ManualTimeSuggestion)>
<android.net.wifi.ScanResult: void <init>(android.net.wifi.WifiSsid,java.lang.String,long,int,byte[],java.lang.String,int,int,long)>
<android.text.StaticLayoutPerfTest: void testCreate_PrecomputedText_NoStyled_Greedy_Hyphenation()>
<android.net.TetheringManager: boolean isTetheringSupported(java.lang.String)>
<com.android.settingslib.dream.DreamBackend: boolean isActivatedOnDock()>
<com.android.settingslib.applications.StorageStatsSource: com.android.settingslib.applications.StorageStatsSource.ExternalStorageStats getExternalStorageStats(java.lang.String,android.os.UserHandle)>
<com.android.server.usb.descriptors.UsbHIDDescriptor: byte getNumDescriptors()>
<com.android.systemui.qs.QSDetail: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.qs.tileimpl.QSTileBaseView: void setClickable(boolean)>
<com.android.systemui.statusbar.phone.StatusBar: void showPinningEnterExitToast(boolean)>
<com.android.systemui.statusbar.policy.RemoteInputView.RemoteEditText: void onCommitCompletion(android.view.inputmethod.CompletionInfo)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void updateBackgroundForGroupState()>
<com.android.server.tv.UinputBridge: void clear(android.os.IBinder)>
<com.android.systemui.util.AutoMarqueeTextView: void <init>(android.content.Context)>
<com.android.systemui.analytics.DataCollector: void setQsExpanded(boolean)>
<com.android.systemui.SystemUI: void onBootCompleted()>
<com.android.systemui.statusbar.policy.UserSwitcherController.BaseUserAdapter: android.graphics.ColorFilter getDisabledUserAvatarColorFilter()>
<com.android.gallery3d.exif.ExifInterface: byte[] getTagByteValues(int,int)>
<com.android.systemui.statusbar.SysuiStatusBarStateController: void setPulsing(boolean)>
<com.android.server.pm.PreferredComponent: void <init>(com.android.server.pm.PreferredComponent.Callbacks,int,android.content.ComponentName[],android.content.ComponentName,boolean)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: void setSeenInLastQualifiedNetworkSelection(boolean)>
<android.os.ParcelArrayPerfTest: void timeCreateByteArray()>
<com.android.server.pm.PackageManagerService: boolean isFirstBoot()>
<javax.microedition.khronos.opengles.GL10: void glGenTextures(int,java.nio.IntBuffer)>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean hasAppShownWindows()>
<com.android.server.CountryDetectorService: void <init>(android.content.Context)>
<javax.microedition.khronos.opengles.GL10: void glDeleteTextures(int,int[],int)>
<com.android.keyguard.KeyguardDisplayManager: void show()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void startWaitingForOpenPanelGesture()>
<com.android.shell.BugreportStorageProvider: android.net.Uri buildNotificationUri(java.lang.String)>
<android.net.wifi.aware.WifiAwareSession: android.net.NetworkSpecifier createNetworkSpecifierPassphrase(int,byte[],java.lang.String)>
<com.android.keyguard.KeyguardAbsKeyInputView: void doHapticKeyClick()>
<com.android.packageinstaller.PackageInstallerApplication: void onCreate()>
<com.android.server.display.BrightnessTracker: void <init>(android.content.Context,com.android.server.display.BrightnessTracker.Injector)>
<com.android.server.testing.shadows.ShadowAppBackupUtils: void reset()>
<android.net.wifi.WifiEnterpriseConfig: void copyFromExternal(android.net.wifi.WifiEnterpriseConfig,java.lang.String)>
<com.android.systemui.statusbar.notification.stack.NotificationRoundnessManager: void onHeadsupAnimatingAwayChanged(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,boolean)>
<com.android.systemui.statusbar.notification.TransformState: void transformViewVerticalFrom(com.android.systemui.statusbar.notification.TransformState,float)>
<com.android.systemui.statusbar.phone.ContextualButton: void setListener(com.android.systemui.statusbar.phone.ContextualButton.ContextButtonListener)>
<com.android.systemui.pip.tv.PipManager.MediaListener: void onMediaControllerChanged()>
<android.net.wifi.WifiManager: void startEasyConnectAsEnrolleeInitiator(java.lang.String,java.util.concurrent.Executor,android.net.wifi.EasyConnectStatusCallback)>
<com.android.systemui.shared.system.ActivityManagerWrapper: java.util.List getRecentTasks(int,int)>
<com.android.systemui.qs.QSContainerImpl: void onFinishInflate()>
<com.android.server.testing.shadows.ShadowBackupDataInput: void __constructor__(java.io.FileDescriptor)>
<com.android.printspooler.util.MediaSizeUtils: android.print.PrintAttributes.MediaSize getDefault(android.content.Context)>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.egg.neko.Cat: android.graphics.drawable.Icon createNotificationLargeIcon(android.content.Context)>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: boolean isNetworkLoggingEnabled()>
<android.net.wifi.WifiConfiguration: int describeContents()>
<com.android.server.biometrics.face.FaceAuthenticator: void resetLockout(byte[])>
<com.android.server.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>
<com.android.systemui.doze.DozeLog: void tracePulseFinish()>
<com.android.settingslib.wifi.TestAccessPointBuilder: com.android.settingslib.wifi.TestAccessPointBuilder setFqdn(java.lang.String)>
<com.android.server.ThreadPriorityBooster: void setBoostToPriority(int)>
<com.android.settingslib.wifi.WifiTracker: void onDestroy()>
<com.android.printservice.recommendation.PrintServicePlugin.PrinterDiscoveryCallback: void onChanged(java.util.List)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isResetPasswordTokenActive(android.content.ComponentName)>
<com.android.server.locksettings.LockSettingsService.SynchronizedStrongAuthTracker: int getStrongAuthForUser(int)>
<com.android.systemui.car.window.OverlayPanelViewController.CloseGestureListener: void close()>
<com.android.systemui.dock.DockManager: void addListener(com.android.systemui.dock.DockManager.DockEventListener)>
<android.net.wifi.WifiEnterpriseConfig: void setPhase2Method(int)>
<android.net.wifi.SoftApInfo: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.policy.RemoteInputQuickSettingsDisabler: void setRemoteInputActive(boolean)>
<com.android.settingslib.core.AbstractPreferenceController: java.lang.String getPreferenceKey()>
<com.android.server.pm.permission.BasePermission: boolean isPrivileged()>
<com.android.server.stats.pull.ProcfsMemoryUtil: java.lang.String readCmdlineFromProcfs(int)>
<com.android.systemui.classifier.DurationCountClassifier: float getFalseTouchEvaluation(int,com.android.systemui.classifier.Stroke)>
<com.android.server.storage.AppFuseBridge: android.os.ParcelFileDescriptor addBridge(com.android.server.storage.AppFuseBridge.MountScope)>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void setOnLockScreen(boolean)>
<com.android.server.accessibility.FingerprintGestureDispatcher.FingerprintGestureClient: boolean isCapturingFingerprintGestures()>
<com.android.keyguard.KeyguardUpdateMonitor: void onLockIconPressed()>
<com.android.settingslib.bluetooth.MapClientProfile: boolean accessProfileEnabled()>
<android.os.IStatsManagerService: void removeActiveConfigsChangedOperation(java.lang.String)>
<com.android.server.adb.AdbService: void denyDebugging()>
<com.android.systemui.statusbar.policy.KeyButtonView: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.analytics.SensorLoggerSession: void addSensorEvent(android.hardware.SensorEvent,long)>
<com.android.packageinstaller.wear.WearPackageArgs: int getStartId(android.os.Bundle)>
<com.android.server.usb.descriptors.tree.UsbDescriptorsDeviceNode: void <init>(com.android.server.usb.descriptors.UsbDeviceDescriptor)>
<com.google.android.startop.iorap.IorapForwardingService.IorapdJobServiceProxy: boolean onStopJob(android.app.job.JobParameters)>
<com.android.server.locksettings.recoverablekeystore.serialization.KeyChainSnapshotDeserializer: android.security.keystore.recovery.KeyChainSnapshot deserialize(java.io.InputStream)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void onVisibilityChanged(android.view.View,int)>
<com.android.server.accessibility.MagnificationController: boolean setCenter(int,float,float,boolean,int)>
<com.android.server.usb.descriptors.Usb20ACInputTerminal: int getControls()>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage removePermission(int)>
<com.android.systemui.statusbar.notification.stack.AnimationFilter: boolean shouldAnimateProperty(android.util.Property)>
<com.android.commands.am.Am: void onRun()>
<com.android.settingslib.core.lifecycle.events.OnResume: void onResume()>
<com.android.systemui.pip.phone.PipMenuActivityController: void hideMenu(java.lang.Runnable,java.lang.Runnable)>
<com.android.systemui.statusbar.notification.row.NotificationGuts: int getIntrinsicHeight()>
<com.android.systemui.pip.PipAnimationController.PipTransitionAnimator: void onAnimationStart(android.animation.Animator)>
<com.android.systemui.statusbar.phone.StatusBar: boolean isFalsingThresholdNeeded()>
<com.android.systemui.statusbar.phone.AutoTileManager: void <init>(android.content.Context,com.android.systemui.qs.AutoAddTracker.Builder,com.android.systemui.qs.QSTileHost,android.os.Handler,com.android.systemui.statusbar.policy.HotspotController,com.android.systemui.statusbar.policy.DataSaverController,com.android.systemui.statusbar.phone.ManagedProfileController,android.hardware.display.NightDisplayListener,com.android.systemui.statusbar.policy.CastController)>
<com.android.printspooler.model.RemotePrintDocument: void cancel(boolean)>
<com.android.server.role.RoleManagerInternal: android.util.ArrayMap getRolesAndHolders(int)>
<com.android.systemui.power.PowerUI: void start()>
<com.android.settingslib.suggestions.SuggestionControllerMixinCompat: void onServiceConnected()>
<android.media.MediaParser: java.util.List getParserNames(android.media.MediaFormat)>
<com.android.server.policy.WindowManagerPolicy: void setDismissImeOnBackKeyPressed(boolean)>
<com.android.server.policy.WindowManagerPolicy: void systemBooted()>
<com.android.server.compat.PlatformCompat: void setOverridesForTest(com.android.internal.compat.CompatibilityChangeConfig,java.lang.String)>
<com.android.systemui.statusbar.notification.ImageTransformState: void reset()>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onActivityRequestedOrientationChanged(int,int)>
<android.net.wifi.WifiUsabilityStatsEntry: int getCellularDataNetworkType()>
<com.android.systemui.util.leak.GarbageMonitor.MemoryTile: void update()>
<com.android.server.slice.SliceProviderPermissions.SliceAuthority: void addPkg(com.android.server.slice.SlicePermissionManager.PkgUser)>
<com.android.systemui.qs.QuickQSPanel: boolean shouldShowDetail()>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void revokeDefaultPermissionsFromLuiApps(java.lang.String[],int)>
<com.android.server.autofill.ui.CustomScrollView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.os.StatsDimensionsValue: float getFloatValue()>
<android.net.wifi.WifiScanner.ScanData: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.car.hvac.HvacController: void connectToCarService()>
<com.android.settingslib.widget.settingsspinner.SettingsSpinner: void <init>(android.content.Context,int)>
<com.android.systemui.statusbar.policy.MobileSignalController: void setCarrierNetworkChangeMode(boolean)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void onServiceDisconnected()>
<com.android.networkstack.tethering.TetheringInterfaceUtils: android.net.util.InterfaceSet getTetheringInterfaces(com.android.networkstack.tethering.UpstreamNetworkState)>
<com.android.systemui.recents.OverviewProxyService.OverviewProxyListener: void onQuickSwitchToNewTask(int)>
<com.android.server.NsdService.DaemonConnectionSupplier: com.android.server.NsdService.DaemonConnection get(com.android.server.NsdService.NativeCallbackReceiver)>
<com.android.gallery3d.exif.ExifTag: int getOffset()>
<com.android.server.pm.ShortcutBitmapSaver: boolean waitForAllSavesLocked()>
<com.android.systemui.statusbar.phone.ScrimController: void setHasBackdrop(boolean)>
<com.android.settingslib.graph.SignalDrawable: void setAlpha(int)>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void dump(com.android.internal.util.IndentingPrintWriter)>
<com.android.systemui.pip.tv.PipNotification: void <init>(android.content.Context,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.pip.tv.PipManager)>
<com.android.uiautomator.core.UiAutomatorBridge: android.view.Display getDefaultDisplay()>
<com.android.systemui.util.leak.GarbageMonitor: void startTrackingProcess(long,java.lang.String,long)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setVertical(boolean)>
<android.net.NetworkStackClient: void makeNetworkMonitor(android.net.Network,java.lang.String,android.net.INetworkMonitorCallbacks)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: boolean shouldLog()>
<android.media.MediaSession2Service: void removeSession(android.media.MediaSession2)>
<com.android.settingslib.applications.AppUtils: java.lang.CharSequence getLaunchByDefaultSummary(com.android.settingslib.applications.ApplicationsState.AppEntry,android.hardware.usb.IUsbManager,android.content.pm.PackageManager,android.content.Context)>
<com.android.systemui.statusbar.phone.NavigationBarView: com.android.systemui.statusbar.phone.ButtonDispatcher getRecentsButton()>
<com.android.systemui.classifier.Point: float getAngle(com.android.systemui.classifier.Point,com.android.systemui.classifier.Point)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean shouldClipToActualHeight()>
<com.android.server.locksettings.SyntheticPasswordCrypto: byte[] createBlob(java.lang.String,byte[],byte[],long)>
<com.android.systemui.shared.system.SurfaceViewRequestReceiver: void onReceive(android.content.Context,android.os.Bundle,android.view.View,android.util.Size)>
<com.android.systemui.plugins.PluginUtils: void setId(android.content.Context,android.view.View,java.lang.String)>
<com.android.systemui.qs.TouchAnimator.Listener: void onAnimationAtEnd()>
<com.android.keyguard.KeyguardSimPinView: void <init>(android.content.Context)>
<com.android.server.timedetector.TimeDetectorStrategyImpl: android.app.timedetector.TelephonyTimeSuggestion findBestTelephonySuggestionForTests()>
<com.android.server.integrity.parser.BinaryFileOperations: int getIntValue(com.android.server.integrity.model.BitInputStream)>
<com.android.server.updates.EmergencyNumberDbInstallReceiver: void postInstall(android.content.Context,android.content.Intent)>
<com.android.systemui.classifier.FalsingManagerProxy: void onUnlockHintStarted()>
<com.android.systemui.qs.QSFragment: void setExpandClickListener(android.view.View.OnClickListener)>
<com.android.settingslib.net.NetworkCycleData.Builder: com.android.settingslib.net.NetworkCycleData build()>
<com.android.server.pm.PackageInstallerSession: boolean isSealed()>
<com.android.server.adb.AdbDebuggingManager.AdbConnectionPortListener: void onPortReceived(int)>
<com.android.settingslib.RestrictedLockUtilsInternal: com.android.settingslib.RestrictedLockUtils.EnforcedAdmin checkIfKeyguardFeaturesDisabled(android.content.Context,int,int)>
<com.android.systemui.statusbar.policy.RemoteInputView: void setPendingIntent(android.app.PendingIntent)>
<com.android.systemui.qs.tileimpl.QSTileBaseView: void <init>(android.content.Context,com.android.systemui.plugins.qs.QSIconView,boolean)>
<com.android.server.uri.UriGrantsManagerService.Lifecycle: void onStart()>
<com.android.systemui.usb.UsbDebuggingSecondaryUserActivity: void onCreate(android.os.Bundle)>
<android.net.wifi.hotspot2.omadm.XMLParser: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>
<com.android.server.appprediction.AppPredictionPerUserService: void unregisterPredictionUpdatesLocked(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
<com.android.server.AnyMotionDetector.Vector3: com.android.server.AnyMotionDetector.Vector3 cross(com.android.server.AnyMotionDetector.Vector3)>
<com.android.server.timezone.PermissionHelper: boolean checkDumpPermission(java.lang.String,java.io.PrintWriter)>
<com.android.systemui.statusbar.phone.KeyguardIndicationTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.qs.QSTileHost: void addCallback(android.os.Handler.Callback)>
<com.android.systemui.wm.DisplayImeController: void onDisplayRemoved(int)>
<com.android.server.pm.UserManagerService: void addUserRestrictionsListener(android.os.IUserRestrictionsListener)>
<android.net.TetheringManager: java.lang.String[] getTetherableBluetoothRegexs()>
<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlagsForAllPermissions(int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGenFramebuffersOES(int,int[],int)>
<com.android.server.biometrics.RemovalClient: int statsAction()>
<com.android.systemui.statusbar.StatusBarIconView: void onDraw(android.graphics.Canvas)>
<com.android.systemui.assist.ui.DisplayUtils: int getCornerRadiusBottom(android.content.Context)>
<com.android.server.inputmethod.InputMethodManagerService: boolean handleMessage(android.os.Message)>
<android.net.wifi.WifiEnterpriseConfig: boolean isInsecure()>
<com.android.systemui.qs.tiles.UserTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.State,java.lang.Object)>
<android.multiuser.BenchmarkResults: java.util.ArrayList getAllDurations()>
<com.android.systemui.car.volume.CarVolumeItem: void setPrimaryIcon(android.graphics.drawable.Drawable)>
<com.android.server.infra.AbstractPerUserSystemService: android.content.pm.ServiceInfo newServiceInfoLocked(android.content.ComponentName)>
<android.app.ResourcesPerfTest: void getColorStateList()>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: boolean enable()>
<com.android.gallery3d.exif.ExifInterface: int getActualTagCount(int,int)>
<com.android.server.testing.shadows.ShadowFullBackup: int backupToTar(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.backup.FullBackupDataOutput)>
<com.android.server.pm.UserTypeDetails.Builder: com.android.server.pm.UserTypeDetails.Builder setName(java.lang.String)>
<com.android.systemui.statusbar.policy.RemoteInputView: void dispatchStartTemporaryDetach()>
<com.android.systemui.statusbar.phone.PanelViewController: void addExpansionListener(com.android.systemui.statusbar.phone.PanelExpansionListener)>
<javax.obex.ClientSession: void ensureOpen()>
<com.android.systemui.biometrics.AuthDialogCallback: void onSystemEvent(int)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setTranslation(int,int,int)>
<com.android.systemui.statusbar.NotificationShelf: void updateAppearance()>
<com.android.server.hdmi.HdmiCecController.AllocateAddressCallback: void onAllocated(int,int)>
<com.android.settingslib.core.lifecycle.ObservableDialogFragment: boolean onOptionsItemSelected(android.view.MenuItem)>
<com.android.systemui.volume.VolumeDialogComponent: void register()>
<com.android.systemui.car.CarDeviceProvisionedListener: void onUserSetupInProgressChanged()>
<com.android.server.accessibility.SystemActionPerformer: java.util.List getSystemActions()>
<com.android.commands.svc.PowerCommand: void run(java.lang.String[])>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void doKeyguardTimeout(android.os.Bundle)>
<com.android.systemui.shared.system.TransactionCompat: void setRelativeLayer(android.view.SurfaceControl.Transaction,android.view.SurfaceControl,android.view.SurfaceControl,int)>
<com.android.systemui.pip.tv.PipControlsView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void getDrawingRect(android.graphics.Rect)>
<com.android.systemui.globalactions.GlobalActionsGridLayout: float getAnimationOffsetX()>
<com.android.server.slice.SliceClientPermissions: com.android.server.slice.SliceClientPermissions.SliceAuthority getOrCreateAuthority(com.android.server.slice.SlicePermissionManager.PkgUser,com.android.server.slice.SlicePermissionManager.PkgUser)>
<com.android.systemui.ResizingSpace: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.media.MediaRouterService: android.media.RoutingSessionInfo getSystemSessionInfo()>
<com.android.wallpapercropper.CropView: boolean onScaleBegin(android.view.ScaleGestureDetector)>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void showClock(boolean)>
<com.android.systemui.keyguard.KeyguardViewMediator: void addStateMonitorCallback(com.android.internal.policy.IKeyguardStateCallback)>
<com.android.server.pm.permission.PermissionManagerService: android.content.pm.ParceledListSlice getAllPermissionGroups(int)>
<com.android.systemui.statusbar.notification.stack.AnimationFilter: com.android.systemui.statusbar.notification.stack.AnimationFilter animateHeight()>
<com.android.systemui.qs.tiles.FlashlightTile: void handleLongClick()>
<android.os.BatteryStatsInternal: java.lang.String[] getMobileIfaces()>
<com.android.systemui.statusbar.policy.SecurityController: java.lang.String getPrimaryVpnName()>
<com.android.settingslib.applications.DefaultAppInfo: android.graphics.drawable.Drawable loadIcon()>
<com.android.shell.BugreportProgressService: void onDestroy()>
<com.android.systemui.screenshot.ScreenshotActionChip: void <init>(android.content.Context)>
<android.net.wifi.RttManager: void <init>(android.content.Context,android.net.wifi.rtt.WifiRttManager)>
<com.android.server.accounts.AccountManagerService: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareImpl: void <init>(com.android.server.soundtrigger_middleware.HalFactory[],com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareImpl.AudioSessionProvider)>
<com.android.location.provider.LocationRequestUnbundled: java.lang.String toString()>
<android.net.wifi.p2p.WifiP2pWfdInfo: void setSessionAvailable(boolean)>
<com.android.uiautomator.core.UiScrollable: int getMaxSearchSwipes()>
<android.net.wifi.IWifiManager: void unregisterSuggestionConnectionStatusListener(int,java.lang.String)>
<com.android.networkstack.tethering.IPv6TetheringCoordinator: void updateUpstreamNetworkState(com.android.networkstack.tethering.UpstreamNetworkState)>
<javax.microedition.khronos.opengles.GL11: void glTexEnvi(int,int,int)>
<com.android.server.accounts.IAccountAuthenticatorCache: java.util.Collection getAllServices(int)>
<com.android.systemui.statusbar.policy.RotationLockController: void setRotationLockedAtAngle(boolean,int)>
<com.android.server.statusbar.StatusBarManagerService: void togglePanel()>
<com.android.settingslib.notification.ZenDurationDialog: void setupDialog(androidx.appcompat.app.AlertDialog.Builder)>
<com.android.systemui.qs.tileimpl.QSTileView: void <init>(android.content.Context,com.android.systemui.plugins.qs.QSIconView,boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isExpandAnimationRunning()>
<com.android.printspooler.ui.FusedPrintersProvider: boolean isFavoritePrinter(android.print.PrinterId)>
<com.android.systemui.qs.tileimpl.QSIconViewImpl: void setIcon(android.widget.ImageView,com.android.systemui.plugins.qs.QSTile.State,boolean)>
<com.android.systemui.classifier.FalsingManagerFake: void setIsClassiferEnabled(boolean)>
<com.android.systemui.classifier.FalsingManagerImpl: void onUnlockHintStarted()>
<com.android.server.tv.tunerresourcemanager.ClientProfile: void setGroupId(int)>
<android.text.TextViewSetTextMeasurePerfTest: java.util.Collection cases()>
<com.android.systemui.analytics.SensorLoggerSession: void setType(int)>
<com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback: void requestHideFillUi(android.view.autofill.AutofillId)>
<com.android.systemui.tuner.LockscreenFragment.Adapter: void addItem(com.android.systemui.tuner.LockscreenFragment.Item,com.android.systemui.tuner.LockscreenFragment.Item)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean onTouchEvent(android.view.MotionEvent)>
<com.google.android.startop.iorap.IorapForwardingService: com.google.android.startop.iorap.IIorap provideIorapRemote()>
<com.android.server.NetworkScoreService: boolean clearScores()>
<com.android.printservice.recommendation.util.PrinterHashMap: boolean isEmpty()>
<android.app.usage.UsageStatsManagerInternal: void onAdminDataAvailable()>
<com.android.server.broadcastradio.hal1.BroadcastRadioService: java.util.List loadModules()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setUserLocked(boolean)>
<com.android.systemui.statusbar.phone.StatusBar: boolean isOccluded()>
<android.net.wifi.p2p.WifiP2pInfo: java.lang.String toString()>
<android.net.wifi.WifiInfo: void <init>(android.net.wifi.WifiInfo)>
<com.android.keyguard.KeyguardSimPukView: void showUsabilityHint()>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService.ResourcesReclaimListenerRecord: android.media.tv.tunerresourcemanager.IResourcesReclaimListener getListener()>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: boolean isLockscreenPublicMode(int)>
<com.android.server.statusbar.StatusBarManagerInternal: void hideToast(java.lang.String,android.os.IBinder)>
<com.android.systemui.statusbar.notification.row.ExpandableView: int getOutlineTranslation()>
<com.android.keyguard.CarrierTextController: void postToCallback(com.android.keyguard.CarrierTextController.CarrierTextCallbackInfo)>
<com.android.systemui.statusbar.CommandQueue: void showTransient(int,int[])>
<com.android.systemui.car.statusbar.DozeServiceHost: boolean isProvisioned()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: float getBottomMostNotificationBottom()>
<com.android.keyguard.AdminSecondaryLockScreenController: void <init>(android.content.Context,android.view.ViewGroup,com.android.keyguard.KeyguardUpdateMonitor,com.android.keyguard.KeyguardSecurityCallback,android.os.Handler)>
<com.android.server.infra.AbstractMasterSystemService: boolean getAllowInstantService()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: boolean shouldEnforceBouncer()>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setNativeLibraryRootRequiresIsa(boolean)>
<com.android.systemui.volume.VolumeDialogControllerImpl: void getCaptionsComponentState(boolean)>
<android.net.wifi.aware.TlvBufferUtils.TlvConstructor: android.net.wifi.aware.TlvBufferUtils.TlvConstructor setByteOrder(java.nio.ByteOrder)>
<com.android.printservice.recommendation.plugin.hp.ServiceListener: void serviceResolved(android.net.nsd.NsdServiceInfo)>
<com.android.settingslib.notification.ConversationIconFactory: android.graphics.drawable.Drawable getConversationDrawable(android.content.pm.ShortcutInfo,java.lang.String,int,boolean)>
<javax.microedition.khronos.opengles.GL10: void glLoadIdentity()>
<com.android.server.pm.PackageManagerService: void dumpProfiles(java.lang.String)>
<com.android.systemui.bubbles.BubbleViewProvider: boolean showDot()>
<com.android.keyguard.KeyguardSimPukView: void <init>(android.content.Context)>
<com.android.systemui.qs.tiles.ScreenRecordTile: java.lang.CharSequence getTileLabel()>
<android.net.wifi.rtt.RangingRequest: java.lang.String toString()>
<com.android.settingslib.suggestions.SuggestionControllerMixinCompat: void onLoaderReset(androidx.loader.content.Loader)>
<com.android.systemui.car.sideloaded.SideLoadedAppListener: void onTaskStackChanged()>
<com.android.systemui.qs.tiles.UserDetailItemView: boolean hasOverlappingRendering()>
<com.android.systemui.statusbar.NotificationRemoteInputManager.Callback: void onLockedRemoteInput(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,android.view.View)>
<com.android.systemui.statusbar.policy.HeadsUpManager: int compare(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.phone.RegionSamplingHelper: void <init>(android.view.View,com.android.systemui.statusbar.phone.RegionSamplingHelper.SamplingCallback)>
<com.android.server.audio.AudioService: void setRttEnabled(boolean)>
<com.android.settingslib.drawer.SwitchesProvider: java.util.List createSwitchControllers()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean getIsNonblockable()>
<com.android.server.textclassifier.FixedSizeQueue: boolean add(java.lang.Object)>
<com.android.systemui.globalactions.ListGridLayout: void addItem(android.view.View)>
<com.android.server.integrity.parser.LimitInputStream: int read()>
<android.os.IStatsCompanionService: void cancelAlarmForSubscriberTriggering()>
<com.android.server.pm.permission.BasePermission: boolean isPreInstalled()>
<com.android.server.accounts.AccountManagerService: void <init>(com.android.server.accounts.AccountManagerService.Injector)>
<com.android.systemui.globalactions.GlobalActionsFlatLayout: float getAnimationOffsetY()>
<com.android.server.input.InputManagerService: int getSwitchState(int,int,int)>
<android.net.wifi.WifiManager: boolean disconnect()>
<com.android.systemui.statusbar.AlphaOptimizedButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.qs.QSPanel: int getGridHeight()>
<com.android.systemui.DessertCaseView: void onSizeChanged(int,int,int,int)>
<com.android.server.adb.AdbService.Lifecycle: void <init>(android.content.Context)>
<com.android.settingslib.AppItem: int compareTo(com.android.settingslib.AppItem)>
<com.android.keyguard.clock.AnalogClockController: java.lang.String getTitle()>
<com.android.keyguard.KeyguardSecurityContainer: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger.EditorLogger: boolean commit()>
<com.android.systemui.car.window.OverlayPanelViewController: void onOpenScrollStart()>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: boolean isCoreApp()>
<com.android.systemui.qs.customize.TileAdapter: void <init>(android.content.Context,com.android.internal.logging.UiEventLogger)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glRenderbufferStorageOES(int,int,int,int)>
<com.android.systemui.qs.tiles.DataSaverTile: int getMetricsCategory()>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean isChildInGroup()>
<com.android.systemui.statusbar.StatusBarWifiView: void setVisibleState(int,boolean)>
<com.android.uiautomator.core.UiObjectNotFoundException: void <init>(java.lang.String)>
<com.android.uiautomator.core.UiObject: com.android.uiautomator.core.UiObject getChild(com.android.uiautomator.core.UiSelector)>
<com.android.systemui.classifier.ProximityEvaluator: float evaluate(float,int)>
<com.android.server.biometrics.AuthService.Injector: android.app.AppOpsManager getAppOps(android.content.Context)>
<com.android.systemui.statusbar.policy.SensorPrivacyControllerImpl: void onSensorPrivacyChanged(boolean)>
<com.android.systemui.classifier.ClassifierData: com.android.systemui.classifier.Stroke getStroke(int)>
<com.android.systemui.SystemUIApplication: void setContextAvailableCallback(com.android.systemui.SystemUIAppComponentFactory.ContextAvailableCallback)>
<com.android.gallery3d.glrenderer.GLId: void glDeleteFramebuffers(javax.microedition.khronos.opengles.GL11ExtensionPack,int,int[],int)>
<com.android.systemui.qs.tileimpl.QSIconViewImpl: void setTint(android.widget.ImageView,int)>
<com.android.systemui.statusbar.policy.BatteryControllerImpl: boolean isWirelessCharging()>
<com.android.systemui.statusbar.StatusBarMobileView: boolean isIconVisible()>
<com.android.systemui.util.InjectionInflationController.ViewAttributeProvider: android.content.Context provideContext()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isAllowAudioPlaybackCapture()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void dismissKeyboardShortcutsMenu()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>
<com.android.server.SystemServiceManager: long getRuntimeStartUptime()>
<com.android.systemui.car.statusbar.DozeServiceHost: boolean isDozeSuppressed()>
<android.net.wifi.p2p.WifiP2pWfdInfo: boolean isSessionAvailable()>
<com.android.systemui.statusbar.policy.KeyguardStateController: void notifyKeyguardState(boolean,boolean)>
<com.android.systemui.bubbles.animation.StackAnimationController: void onUnstuckFromTarget()>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: boolean addAll(java.util.Collection)>
<com.android.systemui.qs.QSTileHost: com.android.internal.logging.InstanceId getNewInstanceId()>
<com.android.commands.am.Am: void onShowUsage(java.io.PrintStream)>
<com.android.server.integrity.parser.RandomAccessInputStream: void <init>(com.android.server.integrity.parser.RandomAccessObject)>
<com.android.server.testing.shadows.ShadowEnvironment: java.io.File getDataDirectory()>
<com.android.systemui.statusbar.notification.TextViewTransformState: int getViewWidth()>
<com.android.printspooler.ui.PageAdapter: void onViewRecycled(android.support.v7.widget.RecyclerView.ViewHolder)>
<com.android.permission.persistence.RuntimePermissionsPersistenceImpl: void writeForUser(com.android.permission.persistence.RuntimePermissionsState,android.os.UserHandle)>
<com.android.server.slice.SlicePermissionManager.PkgUser: int getUserId()>
<com.android.settingslib.widget.FooterPreference.Builder: void <init>(android.content.Context)>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void setIconVisibility(java.lang.String,boolean)>
<com.android.systemui.statusbar.NotificationRemoteInputManager: void addLifetimeExtenders()>
<com.android.server.accessibility.gestures.TouchExplorer: void setServiceHandlesDoubleTap(boolean)>
<com.android.systemui.qs.PagedTileLayout: void setPageListener(com.android.systemui.qs.PagedTileLayout.PageListener)>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])>
<com.android.settingslib.wifi.AccessPointPreference: int getWidgetLayoutResourceId()>
<com.android.server.timezone.PackageTrackerIntentHelper: void initialize(java.lang.String,java.lang.String,com.android.server.timezone.PackageTracker)>
<com.android.keyguard.KeyguardSecurityContainer: void onPause()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: com.android.systemui.statusbar.policy.RemoteInputView getExpandedRemoteInput()>
<com.android.media.remotedisplay.RemoteDisplayProvider: void <init>(android.content.Context)>
<com.android.systemui.statusbar.policy.HeadsUpManager: void updatePinnedMode()>
<android.net.wifi.p2p.WifiP2pWfdInfo: int getMaxThroughput()>
<android.net.wifi.WifiNetworkSuggestion: boolean isCredentialSharedWithUser()>
<com.android.server.pm.PackageManagerService: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>
<android.net.wifi.aware.DiscoverySession: void sendMessage(android.net.wifi.aware.PeerHandle,int,byte[])>
<com.android.keyguard.KeyguardPINView: void resetState()>
<android.net.wifi.aware.IWifiAwareEventCallback: void onIdentityChanged(byte[])>
<com.android.server.IpSecService: void removeTransportModeTransforms(android.os.ParcelFileDescriptor)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void <init>(com.android.server.hdmi.HdmiControlService)>
<com.android.systemui.doze.DozeSensors: void dump(java.io.PrintWriter)>
<com.android.systemui.util.sensors.ProximitySensor: void setDelay(int)>
<android.net.wifi.hotspot2.PasspointConfiguration: void setAaaServerTrustedNames(java.lang.String[])>
<com.android.uiautomator.core.UiObjectNotFoundException: void <init>(java.lang.Throwable)>
<android.media.Session2Token: java.lang.String toString()>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean hasPulsingNotifications()>
<android.net.ITetheringEventCallback: void onOffloadStatusChanged(int)>
<com.android.settingslib.net.SummaryForAllUidLoader: void onStartLoading()>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout: boolean isActiveController(com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsAnimationController)>
<com.android.systemui.qs.PseudoGridView.ViewGroupAdapterBridge: void onInvalidated()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onNotificatonStopDraggingDown()>
<android.net.wifi.aware.SubscribeConfig.Builder: android.net.wifi.aware.SubscribeConfig.Builder setMinDistanceMm(int)>
<com.android.server.soundtrigger.SoundTriggerDbHelper: boolean updateGenericSoundModel(android.hardware.soundtrigger.SoundTrigger.GenericSoundModel)>
<com.android.server.statusbar.StatusBarManagerInternal: void hideRecentApps(boolean,boolean)>
<com.android.printspooler.model.PrintSpoolerProvider: void onServiceDisconnected(android.content.ComponentName)>
<com.android.systemui.BatteryMeterView: boolean hasOverlappingRendering()>
<com.android.server.usb.descriptors.Usb20ASFormatIII: byte getBitResolution()>
<com.android.systemui.qs.tiles.NfcTile: void handleSetListening(boolean)>
<com.android.packageinstaller.wear.PackageInstallerImpl.InstallListener: void installSucceeded()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: com.android.systemui.statusbar.notification.collection.NotificationEntry getRepresentativeEntry()>
<com.android.server.ConnectivityService: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
<com.android.systemui.qs.external.TileServiceManager: void setLastUpdate(long)>
<com.android.server.pm.ShortcutDumpFiles: boolean save(java.lang.String,byte[])>
<com.android.settingslib.widget.CandidateInfo: java.lang.String getKey()>
<com.android.location.provider.GeocodeProvider: java.lang.String onGetFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>
<com.android.server.biometrics.fingerprint.FingerprintService: void onStart()>
<com.android.systemui.statusbar.policy.KeyButtonRipple: void jumpToCurrentState()>
<android.app.OverlayManagerPerfTest: void setEnabledDisable()>
<com.android.systemui.statusbar.notification.stack.NotificationListItem: void removeAllChildren()>
<com.android.systemui.Dependency: java.lang.Object createDependency(java.lang.Object)>
<com.android.server.display.DisplayModeDirector.RefreshRateRange: int hashCode()>
<com.android.systemui.plugins.statusbar.StatusBarStateController.StateListener: void onStateChanged(int)>
<com.android.server.timedetector.TimeDetectorStrategyImpl: android.app.timedetector.TelephonyTimeSuggestion getLatestTelephonySuggestion(int)>
<com.android.settingslib.widget.AnimatedImageView: void setAnimating(boolean)>
<com.android.localtransport.LocalTransport: void finishRestore()>
<com.android.server.biometrics.face.FaceService: int getLockoutMode()>
<android.content.pm.PackageManagerInternal: int getPackageUidInternal(java.lang.String,int,int)>
<com.android.systemui.statusbar.NotificationPresenter: void onUserSwitched(int)>
<com.android.keyguard.KeyguardHostView: com.android.keyguard.KeyguardSecurityModel.SecurityMode getCurrentSecurityMode()>
<com.android.gallery3d.glrenderer.GLCanvas: void multiplyMatrix(float[],int)>
<com.android.settingslib.media.MediaDevice: int getMaxVolume()>
<com.android.systemui.statusbar.notification.TransformState: int[] getLaidOutLocationOnScreen()>
<com.android.server.policy.BurnInProtectionHelper: void onAnimationRepeat(android.animation.Animator)>
<com.android.systemui.statusbar.phone.LightBarTransitionsController: void saveState(android.os.Bundle)>
<com.android.systemui.statusbar.CommandQueue: void clickQsTile(android.content.ComponentName)>
<android.net.NetworkMonitorManager: boolean notifyLinkPropertiesChanged(android.net.LinkProperties)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setNativeLibraryRootRequiresIsa(boolean)>
<com.android.settingslib.applications.ServiceListing: void reload()>
<com.android.server.statusbar.StatusBarManagerInternal: void dismissKeyboardShortcutsMenu()>
<com.android.server.NetworkScorerAppManager.SettingsFacade: int getSecureInt(android.content.Context,java.lang.String,int)>
<com.android.systemui.pip.PipSurfaceTransactionHelper: void <init>(android.content.Context,com.android.systemui.statusbar.policy.ConfigurationController)>
<com.android.systemui.util.leak.TrackedObjects: void track(java.lang.Object)>
<android.widget.TextViewPrecomputedTextPerfTest: void setUp()>
<com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey: int getGenerationId()>
<com.android.systemui.pip.tv.PipMenuActivity: void onPause()>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: boolean isBluetoothConnecting()>
<com.android.server.ServiceWatcher: java.lang.String toString()>
<com.android.systemui.plugins.qs.QSTile: void userSwitch(int)>
<com.android.server.biometrics.BiometricServiceBase: void removeInternal(com.android.server.biometrics.RemovalClient)>
<com.android.settingslib.drawer.ActivityTile: java.lang.CharSequence getComponentLabel(android.content.Context)>
<android.net.TetheredClient: int hashCode()>
<com.android.systemui.statusbar.phone.SystemUIDialog: void <init>(android.content.Context)>
<com.android.server.people.data.DataManager: void reportShareTargetEvent(android.app.prediction.AppTargetEvent,android.content.IntentFilter)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void refreshState()>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: boolean removeAll(java.util.Collection)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationTemplateViewWrapper: void setHeaderVisibleAmount(float)>
<com.android.server.soundtrigger.SoundTriggerService: void onBootPhase(int)>
<com.android.server.locksettings.LockSettingsService: void closeSession(java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void notifyHeightChanged(boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getOrganizationName(android.content.ComponentName)>
<com.android.systemui.statusbar.phone.ManagedProfileController: void setWorkModeEnabled(boolean)>
<android.net.wifi.WifiInfo: boolean isPasspointAp()>
<com.android.uiautomator.testrunner.TestCaseCollector.TestCaseFilter: boolean accept(java.lang.reflect.Method)>
<com.android.systemui.statusbar.notification.stack.AnimationProperties: com.android.systemui.statusbar.notification.stack.AnimationProperties resetCustomInterpolators()>
<com.android.printspooler.util.ApprovedPrintServices: void registerChangeListenerLocked(android.content.SharedPreferences.OnSharedPreferenceChangeListener)>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator.Callback: void onExpandAnimationTimedOut()>
<com.android.server.AppStateTracker: boolean isUidTempPowerSaveWhitelisted(int)>
<com.android.settingslib.notification.ConversationIconFactory.ConversationIconDrawable: void setAlpha(int)>
<com.android.server.contentcapture.ContentCaptureManagerService: void dumpLocked(java.lang.String,java.io.PrintWriter)>
<com.android.systemui.car.statusbar.UnusedStatusBar: void <init>(android.content.Context,com.android.systemui.statusbar.notification.init.NotificationsController,com.android.systemui.statusbar.phone.LightBarController,com.android.systemui.statusbar.phone.AutoHideController,com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.statusbar.phone.StatusBarIconController,com.android.systemui.statusbar.PulseExpansionHandler,com.android.systemui.statusbar.notification.NotificationWakeUpCoordinator,com.android.systemui.statusbar.phone.KeyguardBypassController,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.statusbar.phone.HeadsUpManagerPhone,com.android.systemui.statusbar.notification.DynamicPrivacyController,com.android.systemui.statusbar.notification.interruption.BypassHeadsUpNotifier,com.android.systemui.plugins.FalsingManager,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.statusbar.policy.RemoteInputQuickSettingsDisabler,com.android.systemui.statusbar.notification.row.NotificationGutsManager,com.android.systemui.statusbar.notification.logging.NotificationLogger,com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProvider,com.android.systemui.statusbar.NotificationViewHierarchyManager,com.android.systemui.keyguard.KeyguardViewMediator,android.util.DisplayMetrics,com.android.internal.logging.MetricsLogger,java.util.concurrent.Executor,com.android.systemui.statusbar.NotificationMediaManager,com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.statusbar.NotificationRemoteInputManager,com.android.systemui.statusbar.policy.UserSwitcherController,com.android.systemui.statusbar.policy.NetworkController,com.android.systemui.statusbar.policy.BatteryController,com.android.systemui.colorextraction.SysuiColorExtractor,com.android.systemui.keyguard.ScreenLifecycle,com.android.systemui.keyguard.WakefulnessLifecycle,com.android.systemui.statusbar.SysuiStatusBarStateController,com.android.systemui.statusbar.VibratorHelper,com.android.systemui.bubbles.BubbleController,com.android.systemui.statusbar.phone.NotificationGroupManager,com.android.systemui.statusbar.notification.VisualStabilityManager,com.android.systemui.statusbar.policy.DeviceProvisionedController,com.android.systemui.statusbar.NavigationBarController,dagger.Lazy,com.android.systemui.statusbar.policy.ConfigurationController,com.android.systemui.statusbar.phone.NotificationShadeWindowController,com.android.systemui.statusbar.phone.LockscreenLockIconController,com.android.systemui.statusbar.phone.DozeParameters,com.android.systemui.statusbar.phone.ScrimController,com.android.systemui.statusbar.phone.KeyguardLiftController,dagger.Lazy,dagger.Lazy,com.android.systemui.statusbar.phone.DozeServiceHost,android.os.PowerManager,com.android.systemui.recents.ScreenPinningRequest,com.android.systemui.statusbar.phone.DozeScrimController,com.android.systemui.volume.VolumeComponent,com.android.systemui.statusbar.CommandQueue,java.util.Optional,javax.inject.Provider,com.android.systemui.shared.plugins.PluginManager,java.util.Optional,com.android.systemui.statusbar.phone.LightsOutNotifController,com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter.Builder,com.android.systemui.statusbar.phone.ShadeController,com.android.systemui.statusbar.SuperStatusBarViewFactory,com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager,com.android.keyguard.ViewMediatorCallback,com.android.systemui.InitController,com.android.systemui.plugins.DarkIconDispatcher,android.os.Handler,com.android.systemui.plugins.PluginDependencyProvider,com.android.systemui.statusbar.phone.KeyguardDismissUtil,com.android.systemui.statusbar.policy.ExtensionController,com.android.systemui.statusbar.policy.UserInfoControllerImpl,com.android.systemui.statusbar.phone.PhoneStatusBarPolicy,com.android.systemui.statusbar.KeyguardIndicationController,com.android.systemui.keyguard.DismissCallbackRegistry,dagger.Lazy,com.android.systemui.statusbar.phone.StatusBarTouchableRegionManager)>
<com.android.server.policy.PhoneWindowManager: void startedGoingToSleep(int)>
<com.android.server.policy.PhoneWindowManager: void startKeyguardExitAnimation(long,long)>
<com.android.systemui.pip.phone.PipTouchState: boolean startedDragging()>
<com.android.settingslib.widget.AdaptiveIcon: void <init>(android.content.Context,android.graphics.drawable.Drawable)>
<com.android.systemui.statusbar.KeyguardAffordanceView: void finishAnimation(float,java.lang.Runnable)>
<com.android.systemui.qs.QSFooterImpl: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.voiceinteraction.VoiceInteractionSessionConnection.Callback: void onSessionHidden(com.android.server.voiceinteraction.VoiceInteractionSessionConnection)>
<com.android.server.display.BrightnessMappingStrategy: com.android.server.display.BrightnessMappingStrategy create(android.content.res.Resources)>
<com.android.keyguard.KeyguardUpdateMonitor: void dispatchDreamingStopped()>
<com.android.server.display.utils.RollingBuffer: boolean isEmpty()>
<com.android.systemui.stackdivider.DividerView.DividerCallbacks: void growRecents()>
<com.android.settingslib.deviceinfo.StorageVolumeProvider: android.os.storage.VolumeInfo findEmulatedForPrivate(android.os.storage.VolumeInfo)>
<com.android.server.audio.AudioService: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String)>
<com.android.server.pm.permission.PermissionSettings: void readPermissionTrees(org.xmlpull.v1.XmlPullParser)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: long performRemoveAnimation(long,long,float,boolean,float,java.lang.Runnable,android.animation.AnimatorListenerAdapter)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<javax.microedition.khronos.opengles.GL10: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<com.android.settingslib.search.Indexable.SearchIndexProvider: java.util.List getDynamicRawDataToIndex(android.content.Context,boolean)>
<com.android.systemui.statusbar.AlphaOptimizedFrameLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.net.wifi.p2p.WifiP2pManager.P2pStateListener: void onP2pStateAvailable(int)>
<com.android.systemui.pip.PipBoundsHandler: void onDisplayInfoChanged(android.view.DisplayInfo)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage clearAdoptPermissions()>
<com.android.server.display.DisplayInfoProxy: void set(android.view.DisplayInfo)>
<com.android.server.policy.keyguard.KeyguardStateMonitor: void onTrustedChanged(boolean)>
<com.android.server.statusbar.StatusBarManagerInternal: void appTransitionCancelled(int)>
<com.android.networkstack.tethering.TetheringConfiguration: boolean hasMobileHotspotProvisionApp()>
<com.android.media.remotedisplay.RemoteDisplay: java.lang.String getId()>
<android.os.LooperStatsPerfTest: void tearDown()>
<com.android.settingslib.suggestions.SuggestionControllerMixin: android.content.Loader onCreateLoader(int,android.os.Bundle)>
<com.android.systemui.volume.CaptionsToggleImageButton: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.statusbar.phone.EdgeBackGestureHandler: void onNavBarDetached()>
<com.android.systemui.statusbar.AlertingNotificationManager.Clock: long currentTimeMillis()>
<com.android.server.usb.descriptors.report.TextReportCanvas: void openListItem()>
<com.android.server.audio.AudioService: boolean isBluetoothScoOn()>
<com.android.settingslib.bluetooth.HidProfile: boolean isEnabled(android.bluetooth.BluetoothDevice)>
<com.android.server.accessibility.gestures.TouchExplorer: void onDestroy()>
<com.android.systemui.statusbar.phone.MultiUserSwitch: void setKeyguardUserSwitcher(com.android.systemui.statusbar.policy.KeyguardUserSwitcher)>
<com.android.server.locksettings.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)>
<com.android.server.usb.UsbService: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)>
<com.google.errorprone.matchers.FieldMatchers: com.google.inject.matcher.Matcher staticField(java.lang.String,java.lang.String)>
<com.android.server.biometrics.BiometricServiceBase: boolean hasPermission(java.lang.String)>
<android.widget.TextViewAutoSizeLayoutPerfTest: java.util.Collection layouts()>
<com.android.systemui.media.ResumeMediaBrowserFactory: com.android.systemui.media.ResumeMediaBrowser create(com.android.systemui.media.ResumeMediaBrowser.Callback,android.content.ComponentName)>
<com.android.server.uri.GrantUri: void <init>(int,android.net.Uri,int)>
<com.android.settingslib.CustomDialogPreference.CustomPreferenceDialogFragment: void onBindDialogView(android.view.View)>
<com.android.settingslib.location.InjectedSetting.Builder: com.android.settingslib.location.InjectedSetting.Builder setClassName(java.lang.String)>
<com.android.server.audio.AudioService: void recorderEvent(int,int)>
<com.android.server.pm.permission.BasePermission: boolean isCompanion()>
<com.android.systemui.screenshot.ScrollCaptureController.StatusListener: void onScrollCaptureStatus(boolean)>
<com.android.settingslib.DeviceInfoUtils: java.lang.String getFeedbackReporterPackage(android.content.Context)>
<com.android.systemui.tuner.DemoModeFragment: void onPause()>
<com.android.systemui.plugins.NotificationListenerController: android.service.notification.NotificationListenerService.RankingMap getCurrentRanking(android.service.notification.NotificationListenerService.RankingMap)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void canConfigureInteractAcrossProfiles_packageNotInstalledInProfile_returnsFalse()>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: boolean hasEverConnected()>
<android.text.StaticLayoutGetOffsetForHorizontalPerfTest: void setUp()>
<com.android.systemui.qs.tiles.HotspotTile.CallbackInfo: java.lang.String toString()>
<com.android.settingslib.Utils: boolean isInService(android.telephony.ServiceState)>
<com.android.systemui.stackdivider.Divider: android.window.WindowContainerToken getSecondaryRoot()>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isDozingAndNotPulsing(com.android.systemui.statusbar.notification.row.ExpandableView)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void click()>
<com.android.systemui.plugins.ActivityStarter: void dismissKeyguardThenExecute(com.android.systemui.plugins.ActivityStarter.OnDismissAction,java.lang.Runnable,boolean)>
<com.android.server.biometrics.EnumerateClient: void <init>(android.content.Context,com.android.server.biometrics.Constants,com.android.server.biometrics.BiometricServiceBase.DaemonWrapper,long,android.os.IBinder,com.android.server.biometrics.BiometricServiceBase.ServiceListener,int,int,boolean,java.lang.String)>
<android.net.wifi.WifiManager.WpsCallback: void onFailed(int)>
<com.android.systemui.pip.phone.PipMediaController: void onActivityPinned()>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean areChildrenExpanded()>
<com.android.settingslib.suggestions.SuggestionControllerMixin: void onServiceDisconnected()>
<com.android.server.security.VerityUtils.SetupResult: com.android.server.security.VerityUtils.SetupResult failed()>
<com.android.gallery3d.exif.ExifInterface: int[] getTagIntValues(int)>
<com.android.systemui.util.wakelock.SettableWakeLock: boolean isAcquired()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void freeContentViewWhenSafe(int)>
<com.android.server.recoverysystem.RecoverySystemShellCommand: void <init>(com.android.server.recoverysystem.RecoverySystemService)>
<com.android.systemui.statusbar.phone.PanelBar: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.settingslib.wifi.WifiTracker: boolean isWifiEnabled()>
<com.android.settingslib.accounts.AuthenticatorHelper: java.lang.String[] getEnabledAccountTypes()>
<android.text.TextPerfUtils: void resetRandom(long)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareService: android.media.soundtrigger_middleware.SoundTriggerModuleDescriptor[] listModules()>
<com.android.systemui.classifier.FalsingManagerImpl: void onNotificationStartDismissing()>
<com.android.server.biometrics.iris.IrisService: int getLockoutMode()>
<com.android.systemui.statusbar.policy.ZenModeController.Callback: void onNextAlarmChanged()>
<com.android.printservice.recommendation.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>
<android.net.wifi.AnqpInformationElement: void <init>(int,int,byte[])>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper.Callback: float getAffordanceFalsingFactor()>
<com.android.systemui.statusbar.policy.SmartReplyView: void setBackgroundTintColor(int)>
<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean canGoToStandby()>
<com.android.systemui.qs.tiles.UserDetailView.Adapter: void <init>(android.content.Context,com.android.systemui.statusbar.policy.UserSwitcherController,com.android.internal.logging.UiEventLogger)>
<com.android.networkstack.tethering.EntitlementManager: void <init>(android.content.Context,android.os.Handler,android.net.util.SharedLog,java.lang.Runnable)>
<com.android.printspooler.model.PrintSpoolerService: boolean hasActivePrintJobsLocked()>
<com.android.server.pm.CrossProfileAppsServiceImpl: java.util.List getTargetUserProfiles(java.lang.String)>
<com.android.keyguard.EmergencyButton: void onDetachedFromWindow()>
<com.android.server.usb.descriptors.Usb20ASFormatI: byte getBitResolution()>
<com.android.systemui.qs.tiles.NfcTile: java.lang.CharSequence getTileLabel()>
<com.android.systemui.qs.QSFragment: boolean isCustomizing()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isGroupExpanded()>
<com.android.systemui.statusbar.NotificationShelf: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void notifyHeightChanged(boolean)>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.plugins.statusbar.StatusBarStateController provideStatusBarStateController(com.android.systemui.statusbar.StatusBarStateControllerImpl)>
<com.android.settingslib.bluetooth.HearingAidProfile: java.util.List getConnectableDevices()>
<com.android.systemui.statusbar.ScreenRecordDrawable: android.graphics.drawable.Drawable mutate()>
<com.android.systemui.statusbar.StatusBarIconView: boolean isInShelf()>
<com.android.systemui.classifier.FalsingManagerProxy: void onBouncerShown()>
<com.android.server.DeviceIdleController: int[] getAppIdWhitelistExceptIdleInternal()>
<com.android.systemui.statusbar.notification.stack.ViewState: java.lang.Object getChildTag(android.view.View,int)>
<com.android.settingslib.accessibility.AccessibilityUtils: java.lang.String getShortcutTargetServiceComponentNameString(android.content.Context,int)>
<com.android.externalstorage.TestDocumentsProvider: android.database.Cursor queryRecentDocuments(java.lang.String,java.lang.String[])>
<com.android.server.hdmi.HdmiCecController.NativeWrapper: int nativeGetPhysicalAddress()>
<android.text.StaticLayoutPerfTest: void testDraw_FixedText_NoStyled()>
<com.android.systemui.biometrics.AuthCredentialView: void onAttachedToWindow()>
<com.android.systemui.biometrics.AuthDialog: void dismissFromSystemServer()>
<com.android.systemui.statusbar.phone.KeyguardBouncer: boolean isScrimmed()>
<com.android.settingslib.display.DisplayDensityConfiguration: void clearForcedDisplayDensity(int)>
<com.android.systemui.util.LifecycleFragment: void onResume()>
<android.app.usage.UsageStatsManagerInternal.AppUsageLimitData: long getTotalUsageLimit()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.phone.StatusBar: void setKeyguardFadingAway(long,long,long,boolean)>
<com.android.systemui.statusbar.phone.EdgeBackGestureHandler: void <init>(android.content.Context,com.android.systemui.recents.OverviewProxyService,com.android.systemui.model.SysUiState,com.android.systemui.shared.plugins.PluginManager,java.lang.Runnable)>
<com.android.systemui.doze.DozeHost.Callback: void onDozeSuppressedChanged(boolean)>
<com.android.keyguard.KeyguardSimPukView: void <init>(android.content.Context,android.util.AttributeSet)>
<javax.microedition.khronos.opengles.GL11Ext: void glMatrixIndexPointerOES(int,int,int,java.nio.Buffer)>
<com.android.gallery3d.exif.ExifInterface: int[] getTagDefinitionsForTagId(short)>
<com.android.media.tv.remoteprovider.TvRemoteProvider: void sendGamepadKeyUp(android.os.IBinder,int)>
<com.android.server.protolog.common.IProtoLogGroup: boolean isLogToLogcat()>
<com.google.android.startop.iorap.EventSequenceValidator: void onReportFullyDrawn(byte[],long)>
<com.android.systemui.qs.tiles.AirplaneModeTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.plugins.ActivityStarter,com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.server.pm.BackgroundDexOptService: boolean onStartJob(android.app.job.JobParameters)>
<com.android.server.NsdService: android.os.Messenger getMessenger()>
<com.android.printspooler.util.PageRangeUtils: boolean isAllPages(android.print.PageRange)>
<com.android.systemui.wm.DisplayImeController.PerDisplay: void hideInsets(int,boolean)>
<com.android.server.accessibility.AccessibilityManagerService: long getRecommendedTimeoutMillis()>
<android.app.ResourcesPerfTest: void getValue()>
<com.android.server.appbinding.finders.AppServiceFinder: boolean isEnabled(com.android.server.appbinding.AppBindingConstants)>
<com.android.systemui.plugins.FalsingManager: void dump(java.io.PrintWriter)>
<com.android.printservice.recommendation.plugin.hp.ServiceRecommendationPlugin: int getName()>
<android.widget.TextViewPrecomputedTextPerfTest: void testNewLayout_PrecomputedText()>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: boolean requestDemuxInternal(android.media.tv.tunerresourcemanager.TunerDemuxRequest,int[])>
<com.android.systemui.statusbar.phone.dagger.StatusBarComponent: com.android.systemui.statusbar.phone.StatusBarWindowController getStatusBarWindowController()>
<com.android.systemui.statusbar.policy.BluetoothController: boolean isBluetoothAudioProfileOnly()>
<javax.obex.ClientSession: void <init>(javax.obex.ObexTransport,boolean)>
<android.net.wifi.p2p.WifiP2pWfdInfo: void <init>(int,int,int)>
<com.android.systemui.shared.recents.utilities.AppTrace: void count(java.lang.String,int)>
<com.android.server.biometrics.fingerprint.FingerprintConstants: java.lang.String tagRemoveStartError()>
<com.android.systemui.qs.customize.QSCustomizer: void showImmediately()>
<com.android.photos.BitmapRegionTileSource.FilePathBitmapSource: boolean readExif(com.android.gallery3d.exif.ExifInterface)>
<com.android.systemui.recents.RecentsImplementation: void preloadRecentApps()>
<com.android.server.biometrics.BiometricServiceBase.ServiceListener: void onError(long,int,int,int)>
<com.android.server.media.projection.MediaProjectionManagerService: void monitor()>
<android.media.MediaController2.Builder: android.media.MediaController2.Builder setConnectionHints(android.os.Bundle)>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void removeIconGroup(com.android.systemui.statusbar.phone.StatusBarIconController.IconManager)>
<com.android.keyguard.KeyguardSecurityContainer: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.statusbar.phone.NavigationBarView: void onNavigationModeChanged(int)>
<com.android.systemui.car.hvac.TemperatureView: int getAreaId()>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void onFinishInflate()>
<com.android.packageinstaller.DeviceUtils: boolean isAuto(android.content.Context)>
<com.android.server.biometrics.BiometricService: void onStart()>
<com.android.server.display.DisplayModeDirector.BrightnessObserver: void dumpLocked(java.io.PrintWriter)>
<com.android.systemui.wm.DisplaySystemBarsController: void onDisplayAdded(int)>
<android.net.wifi.IWifiManager: void updateWifiUsabilityScore(int,int,int)>
<com.android.settingslib.graph.BatteryMeterDrawableBase: int batteryColorForLevel(int)>
<android.net.wifi.IDppCallback: void onFailure(int,java.lang.String,java.lang.String,int[])>
<com.android.systemui.pip.phone.PipTouchState: android.graphics.PointF getDownTouchPosition()>
<com.android.settingslib.bluetooth.PanProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)>
<com.android.server.biometrics.iris.IrisAuthenticator: void prepareForAuthentication(boolean,android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiverInternal,java.lang.String,int,int,int,int)>
<com.android.settingslib.deviceinfo.AbstractUptimePreferenceController: void displayPreference(androidx.preference.PreferenceScreen)>
<com.android.server.telecom.InternalServiceRepository: void <init>(com.android.server.DeviceIdleInternal)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: boolean isTowardsMenu(float)>
<android.net.wifi.WifiManager: boolean reassociate()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setRecoverySecretTypes(int,int,int[])>
<com.android.systemui.statusbar.phone.StatusBar: void showKeyguardImpl()>
<com.android.server.usb.descriptors.UsbDescriptorParser: byte[] getRawDescriptors()>
<com.android.systemui.statusbar.phone.LockscreenGestureLogger: void write(int,int,int)>
<com.android.systemui.Prefs: void putStringSet(android.content.Context,java.lang.String,java.util.Set)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void disconnect(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.server.biometrics.ClientMonitor: boolean onEnrollResult(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.server.biometrics.iris.IrisAuthenticator: void startPreparedClient(int)>
<com.android.settingslib.drawer.DashboardCategory: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: boolean shouldHeadsUpBecomePinned(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getSecondaryNativeLibraryDir()>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void onNotificationUpdated()>
<com.android.systemui.statusbar.EmptyShadeView: void onFinishInflate()>
<com.android.keyguard.KeyguardSecurityViewFlipper: com.android.keyguard.KeyguardSecurityViewFlipper.LayoutParams generateLayoutParams(android.util.AttributeSet)>
<com.android.systemui.statusbar.BackDropView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.pip.tv.dagger.PipModule: android.app.Activity providePipMenuActivity(com.android.systemui.pip.tv.PipMenuActivity)>
<com.android.systemui.BatteryMeterView: void onDarkChanged(android.graphics.Rect,float,int)>
<com.android.systemui.pip.phone.PipTouchState: android.graphics.PointF getLastTouchPosition()>
<com.android.server.accessibility.AccessibilityManagerService: void <init>(android.content.Context)>
<com.android.server.policy.PhoneWindowManager: long interceptKeyBeforeDispatching(android.os.IBinder,android.view.KeyEvent,int)>
<com.android.systemui.statusbar.NavigationBarController: void finishBarAnimations(int)>
<com.android.systemui.accessibility.WindowMagnificationController: boolean onTouch(android.view.View,android.view.MotionEvent)>
<android.net.wifi.aware.IWifiAwareManager: void disconnect(int,android.os.IBinder)>
<android.perftests.utils.PerfTestActivity: android.content.Intent createLaunchIntent(android.content.Context)>
<com.android.server.inputmethod.InputMethodManagerService: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.settingslib.net.DataUsageController: com.android.settingslib.net.DataUsageController.DataUsageInfo getDataUsageInfo()>
<com.android.settingslib.core.lifecycle.ObservableFragment: void onAttach(android.content.Context)>
<com.android.printspooler.widget.PrintContentView: void closeOptions()>
<com.android.printspooler.model.RemotePrintDocument: void <init>(android.content.Context,android.print.IPrintDocumentAdapter,com.android.printspooler.model.MutexFileProvider,com.android.printspooler.model.RemotePrintDocument.RemoteAdapterDeathObserver,com.android.printspooler.model.RemotePrintDocument.UpdateResultCallbacks)>
<com.android.systemui.ScreenDecorations: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.systemui.classifier.AccelerationClassifier: void onTouchEvent(android.view.MotionEvent)>
<com.android.server.pm.permission.PermissionsState: java.util.List getRuntimePermissionStates(int)>
<com.android.networkstack.tethering.UpstreamNetworkMonitor: boolean mobileNetworkRequested()>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void onCancelClicked()>
<com.android.systemui.statusbar.notification.collection.ListEntry: com.android.systemui.statusbar.notification.collection.GroupEntry getPreviousParent()>
<com.android.systemui.plugins.qs.QSTileView: android.view.View updateAccessibilityOrder(android.view.View)>
<com.android.systemui.doze.DozeScreenState: void <init>(com.android.systemui.doze.DozeMachine.Service,android.os.Handler,com.android.systemui.doze.DozeHost,com.android.systemui.statusbar.phone.DozeParameters,com.android.systemui.util.wakelock.WakeLock)>
<com.android.server.pm.UserManagerService: int getUserBadgeColorResId(int)>
<com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] decrypt(java.security.PrivateKey,byte[],byte[],byte[])>
<android.processor.view.inspector.InspectableClassModel.Property: android.processor.view.inspector.InspectableClassModel.Accessor getAccessor()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void setQsExpanded(boolean)>
<com.android.server.autofill.RemoteInlineSuggestionRenderService: void getInlineSuggestionsRendererInfo(android.os.RemoteCallback)>
<android.net.wifi.IWifiManager: boolean isScanAlwaysAvailable()>
<com.android.systemui.statusbar.KeyguardAffordanceView: boolean isAnimatingAlpha()>
<com.android.server.pm.PackageManagerService: boolean isAutoRevokeWhitelisted(java.lang.String)>
<com.android.server.usb.UsbDeviceManager: android.os.ParcelFileDescriptor getControlFd(long)>
<com.android.server.timezone.PermissionHelper: void enforceCallerHasPermission(java.lang.String)>
<com.android.server.usb.descriptors.UsbACHeaderInterface: int getTotalLength()>
<com.android.server.biometrics.ClientMonitor: boolean onAuthenticated(android.hardware.biometrics.BiometricAuthenticator.Identifier,boolean,java.util.ArrayList)>
<com.android.systemui.qs.QSTileHost: android.content.Context getUserContext()>
<android.net.wifi.rtt.RangingResult: int getDistanceMm()>
<com.android.server.pm.parsing.PackageParser2.Callback: android.content.pm.parsing.ParsingPackage startParsingPackage(java.lang.String,java.lang.String,java.lang.String,android.content.res.TypedArray,boolean)>
<com.android.systemui.qs.TileLayout: int getOffsetTop(com.android.systemui.qs.QSPanel.TileRecord)>
<com.android.server.NetworkManagementService: void setFirewallEnabled(boolean)>
<com.android.server.NetworkManagementService: void removeIdleTimer(java.lang.String)>
<com.android.printspooler.model.PrintSpoolerService: void onCustomPrinterIconLoaded(android.print.PrinterId,android.graphics.drawable.Icon)>
<com.android.systemui.car.window.OverlayViewController: void showInternal()>
<com.android.printspooler.util.MediaSizeUtils.MediaSizeComparator: void <init>(android.content.Context)>
<com.android.server.rollback.RollbackPackageHealthObserver: void startObservingHealth(java.util.List,long)>
<com.android.systemui.SwipeHelper.Callback: int getConstrainSwipeStartPosition()>
<android.net.wifi.hotspot2.PasspointConfiguration: long getSubscriptionCreationTimeInMillis()>
<lockedregioncodeinjection.LockTarget: java.lang.String getTargetDesc()>
<com.android.printspooler.ui.PrintActivity: void onOptionsClosed()>
<android.media.MediaSession2: java.util.List getConnectedControllers()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setIsLowPriority(boolean)>
<com.android.systemui.qs.tileimpl.QSTileView: void createLabel()>
<com.android.keyguard.KeyguardHostView: void cleanUp()>
<com.android.systemui.SwipeHelper: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.printspooler.ui.PageAdapter.ContentCallbacks: void onMalformedPdfFile()>
<com.android.server.hdmi.HdmiCecController.NativeWrapper: int nativeSendCecCommand(int,int,byte[])>
<android.net.wifi.INetworkRequestUserSelectionCallback: void select(android.net.wifi.WifiConfiguration)>
<com.android.settingslib.wifi.AccessPoint: java.util.Set getScanResults()>
<com.android.systemui.statusbar.notification.ActionListTransformState: void recycle()>
<com.android.systemui.statusbar.notification.MessagingLayoutTransformState: com.android.systemui.statusbar.notification.MessagingLayoutTransformState obtain()>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: void updateConsolidatedNotificationPolicy()>
<com.android.commands.sm.Sm: void runListDisks()>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean pointInView(float,float,float)>
<com.android.server.accounts.AccountManagerService: boolean renameSharedAccountAsUser(android.accounts.Account,java.lang.String,int)>
<com.android.systemui.car.hvac.TemperatureTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: void setDarkIntensity(float)>
<com.android.systemui.qs.QuickQSPanel: java.lang.String getDumpableTag()>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void setDefaultBrowser(java.lang.String,boolean,boolean,int)>
<com.android.server.devicepolicy.DeviceStateCacheImpl: boolean isDeviceProvisioned()>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: boolean pointInView(float,float,float)>
<com.android.systemui.statusbar.policy.InflatedSmartReplies: com.android.systemui.statusbar.policy.InflatedSmartReplies inflate(android.content.Context,android.content.Context,com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.policy.SmartReplyConstants,com.android.systemui.statusbar.SmartReplyController,com.android.systemui.statusbar.policy.HeadsUpManager,com.android.systemui.statusbar.policy.InflatedSmartReplies.SmartRepliesAndActions)>
<com.android.server.biometrics.BiometricServiceBase: void doTemplateCleanupForUser(int)>
<com.android.systemui.statusbar.phone.NotificationsQuickSettingsContainer: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.car.notification.NotificationVisibilityLogger: void stop()>
<com.android.systemui.qs.QSDualTileLabel: void setTextColor(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean switchUser(android.content.ComponentName,android.os.UserHandle)>
<com.android.location.provider.ActivityRecognitionEvent: java.lang.String toString()>
<com.android.server.pm.PackageManagerService: java.lang.String getContentCaptureServicePackageName()>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: int getMaxNotificationsWhileLocked(boolean)>
<com.android.keyguard.KeyguardSecurityView: com.android.keyguard.KeyguardSecurityCallback getCallback()>
<com.android.server.pm.OtaDexoptService: com.android.server.pm.OtaDexoptService main(android.content.Context,com.android.server.pm.PackageManagerService)>
<com.android.systemui.tuner.TunerServiceImpl: void setValue(java.lang.String,java.lang.String)>
<android.net.wifi.IWifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()>
<com.android.server.DropBoxManagerService: void onBootPhase(int)>
<com.android.systemui.globalactions.GlobalActionsDialog.LongPressAction: boolean onLongPress()>
<com.android.server.pm.dex.DexManager: com.android.server.pm.dex.PackageDexUsage.PackageUseInfo getPackageUseInfoOrDefault(java.lang.String)>
<com.android.server.pm.PackageManagerService: android.graphics.Bitmap getInstantAppIcon(java.lang.String,int)>
<com.android.location.provider.ActivityRecognitionProviderWatcher: android.os.IBinder getBinder()>
<com.android.systemui.statusbar.AutoHideUiElement: void hide()>
<com.android.systemui.util.leak.RotationUtils: int getRotation(android.content.Context)>
<com.android.systemui.globalactions.GlobalActionsDialog.EmergencyAction: android.view.View create(android.content.Context,android.view.View,android.view.ViewGroup,android.view.LayoutInflater)>
<com.android.systemui.biometrics.AuthDialog: void onError(java.lang.String)>
<com.android.systemui.volume.VolumeUI: void start()>
<android.net.wifi.SoftApConfiguration: boolean isAutoShutdownEnabled()>
<com.android.systemui.statusbar.phone.StatusBarIconController.TintedIconManager: void setTint(int)>
<com.android.systemui.car.window.OverlayViewGlobalStateController: void setWindowFocusable(boolean)>
<com.android.systemui.usb.StorageNotification: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean isAddOrRemoveAnimationPending()>
<javax.microedition.khronos.opengles.GL10: void glEnableClientState(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int glCheckFramebufferStatusOES(int)>
<com.android.settingslib.drawer.SwitchController.MetaData: com.android.settingslib.drawer.SwitchController.MetaData setSummary(int)>
<com.android.printspooler.widget.ClickInterceptSpinner: boolean performClick()>
<android.net.wifi.WifiConfiguration: void <init>(android.net.wifi.WifiConfiguration)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getMinSdkVersion()>
<com.android.server.slice.SlicePermissionManager.PkgUser: java.lang.String toString()>
<com.android.printspooler.ui.PrintActivity: boolean onKeyUp(int,android.view.KeyEvent)>
<android.app.OverlayManagerPerfTest: void getStringOneSmallOverlay()>
<com.android.systemui.car.window.OverlayPanelViewController.OpenGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<com.android.systemui.dagger.SystemUIRootComponent: com.android.systemui.dagger.ContextComponentHelper getContextComponentHelper()>
<com.android.systemui.volume.VolumeDialogControllerImpl: void setRingerMode(int,boolean)>
<com.android.keyguard.clock.DefaultClockController: void onDestroyView()>
<com.android.server.protolog.common.ProtoLog: void w(com.android.server.protolog.common.IProtoLogGroup,java.lang.String,java.lang.Object[])>
<com.android.systemui.assist.ui.PathSpecCornerPathRenderer: android.graphics.Path getCornerPath(com.android.systemui.assist.ui.CircularCornerPathRenderer.Corner)>
<com.android.server.pm.ShortcutDumpFiles: void <init>(com.android.server.pm.ShortcutService)>
<com.android.systemui.statusbar.phone.EdgeBackGestureHandler: void setInsets(int,int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: com.android.systemui.statusbar.notification.icon.IconPack getIcons()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSecurityLoggingEnabled(android.content.ComponentName)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void closeRemoteInput()>
<com.android.settingslib.bluetooth.MapClientProfile: int getProfileId()>
<com.android.systemui.qs.QSPanel: com.android.systemui.qs.QSTileHost getHost()>
<com.android.server.policy.WindowManagerPolicy: void dismissKeyguardLw(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
<com.android.server.uri.UriGrantsManagerService: void clearGrantedUriPermissions(java.lang.String,int)>
<android.os.StatsDimensionsValue: java.lang.String toString()>
<android.net.wifi.WifiManager: boolean isTdlsSupported()>
<com.android.server.NetworkScorerAppManager.SettingsFacade: int getInt(android.content.Context,java.lang.String,int)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void toggleKeyboardShortcutsMenu(int)>
<com.android.server.integrity.parser.RandomAccessInputStream: int read(byte[],int,int)>
<com.android.systemui.statusbar.phone.StatusBar: void appTransitionFinished(int)>
<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: long systemClockMillis()>
<com.android.server.accessibility.MotionEventInjector: void onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)>
<com.android.systemui.shared.system.TaskStackChangeListener: void onActivityLaunchOnSecondaryDisplayRerouted(android.app.ActivityManager.RunningTaskInfo)>
<com.android.server.appprediction.RemoteAppPredictionService.RemoteAppPredictionServiceCallbacks: void onConnectedStateChanged(boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void getBoundsOnScreen(android.graphics.Rect,boolean)>
<com.android.systemui.qs.customize.TileQueryHelper: boolean isFinished()>
<android.os.ParcelPerfTest: void timeReadExceptionWithStackTraceParceling()>
<com.android.packageinstaller.InstallSuccess: void onResume()>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector className(java.lang.Class)>
<com.android.systemui.glwallpaper.EglHelper: boolean init(android.view.SurfaceHolder,boolean)>
<com.android.settingslib.NetworkPolicyEditor: void setPolicyLimitBytes(android.net.NetworkTemplate,long)>
<com.android.systemui.settings.ToggleSlider: void setValue(int)>
<com.android.server.pm.SettingBase: com.android.server.pm.permission.PermissionsState getPermissionsState()>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: boolean isDimmed()>
<com.android.server.locksettings.SyntheticPasswordManager: void destroyPasswordBasedSyntheticPassword(long,int)>
<com.android.packageinstaller.television.ErrorFragment: androidx.leanback.widget.GuidanceStylist.Guidance onCreateGuidance(android.os.Bundle)>
<com.android.systemui.statusbar.NotificationShelf: boolean shouldHideBackground()>
<com.android.server.usb.descriptors.UsbInterfaceAssoc: byte getFirstInterface()>
<com.android.server.trust.TrustManagerService: void onBootPhase(int)>
<com.android.server.usb.descriptors.ByteStream: int unpackUsbTriple()>
<com.android.systemui.qs.tiles.WifiTile.WifiDetailAdapter: void onDetailItemDisconnect(com.android.systemui.qs.QSDetailItems.Item)>
<com.android.systemui.stackdivider.MinimizedDockShadow: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.globalactions.MinHeightScrollView: void onMeasure(int,int)>
<com.android.settingslib.CustomDialogPreferenceCompat.CustomPreferenceDialogFragment: com.android.settingslib.CustomDialogPreferenceCompat.CustomPreferenceDialogFragment newInstance(java.lang.String)>
<com.android.server.DropBoxManagerService: void onStart()>
<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager.PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager.StatsPullAtomCallback)>
<android.net.wifi.p2p.WifiP2pWfdInfo: void writeToParcel(android.os.Parcel,int)>
<com.android.server.display.WifiDisplayController.Listener: void onDisplayConnectionFailed()>
<com.android.server.usb.descriptors.Usb20ASGeneral: byte getChannelNames()>
<com.android.server.hdmi.HdmiControlService: void onStandby(int)>
<android.net.wifi.WifiEnterpriseConfig: boolean isAuthenticationSimBased()>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: void onChangeAllowed()>
<com.android.printspooler.ui.PrintActivity.PrintServiceApprovalDialog: void onStart()>
<com.android.server.policy.WindowManagerPolicy: void registerDisplayFoldListener(android.view.IDisplayFoldListener)>
<android.net.wifi.hotspot2.PasspointConfiguration: boolean validateForR2()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAlwaysOnVpnLockdownEnabled(android.content.ComponentName)>
<com.android.settingslib.widget.ActionBarShadowController: com.android.settingslib.widget.ActionBarShadowController attachToView(android.app.Activity,androidx.lifecycle.Lifecycle,android.view.View)>
<com.android.systemui.bubbles.BubbleController: void onOverlayChanged()>
<com.android.systemui.statusbar.NotificationShelf: void onAttachedToWindow()>
<com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.NotifPromoter: void <init>(java.lang.String)>
<com.android.gallery3d.glrenderer.GLCanvas: com.android.gallery3d.glrenderer.GLId getGLId()>
<com.android.server.storage.StorageSessionController: void <init>(android.content.Context,boolean)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: boolean isLeftVoiceAssist()>
<com.android.systemui.qs.tileimpl.QSIconViewImpl: int exactly(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setApplicationRestrictionsManagingPackage(android.content.ComponentName,java.lang.String)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl capPermissionPriorities()>
<com.android.server.accounts.AccountManagerService: android.os.IBinder onBind(android.content.Intent)>
<com.android.systemui.recents.OverviewProxyService: void notifySplitScreenBoundsChanged(android.graphics.Rect,android.graphics.Rect)>
<com.android.server.accessibility.EventStreamTransformation: void onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)>
<com.android.gallery3d.common.Utils: boolean equals(java.lang.Object,java.lang.Object)>
<android.net.wifi.WifiNetworkSuggestion: int getPriority()>
<com.android.server.om.OverlayableInfoCallback: boolean signaturesMatching(java.lang.String,java.lang.String,int)>
<com.android.settingslib.CustomDialogPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.settingslib.RestrictedSwitchPreference: boolean isDisabledByAdmin()>
<com.android.keyguard.KeyguardSecurityContainer: boolean shouldDelayChildPressedState()>
<com.google.android.startop.iorap.AppLaunchEvent.IntentFailed: boolean equals(java.lang.Object)>
<com.android.server.usb.descriptors.Usb20ASGeneral: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.server.pm.UserManagerService: boolean exists(int)>
<com.android.settingslib.drawable.CircleFramedDrawable: com.android.settingslib.drawable.CircleFramedDrawable getInstance(android.content.Context,android.graphics.Bitmap)>
<com.android.systemui.statusbar.phone.StatusBar: void onExpandAnimationTimedOut()>
<com.android.systemui.qs.QSDetail: void setupDetailHeader(com.android.systemui.plugins.qs.DetailAdapter)>
<android.net.wifi.WifiManager: void addOnWifiUsabilityStatsListener(java.util.concurrent.Executor,android.net.wifi.WifiManager.OnWifiUsabilityStatsListener)>
<com.android.server.storage.AppFuseBridge.MountScope: void <init>(int,int)>
<com.android.server.pm.UserTypeDetails: int getDarkThemeBadgeColor(int)>
<com.android.systemui.bubbles.BubbleOverflow: java.lang.String getKey()>
<com.android.server.pm.PackageSetting: boolean isProduct()>
<com.android.server.pm.PackageManagerService: int checkUidPermission(java.lang.String,int)>
<com.android.systemui.statusbar.policy.RemoteInputView: void onTextChanged(java.lang.CharSequence,int,int,int)>
<com.android.systemui.statusbar.policy.CastControllerImpl: void <init>(android.content.Context)>
<javax.obex.PrivateOutputStream: void write(int)>
<com.android.server.pm.parsing.PackageInfoUtils: int appInfoFlags(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setHideSensitive(boolean,boolean,long,long)>
<com.android.systemui.car.hvac.HvacController: void <init>(com.android.systemui.car.CarServiceProvider)>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void onResume()>
<com.android.printspooler.renderer.IPdfRenderer: void closeDocument()>
<android.net.wifi.WifiManager: int getMaxNumberOfNetworkSuggestionsPerApp(boolean)>
<android.text.TextViewSetTextMeasurePerfTest: void timeDraw()>
<android.net.wifi.aware.IWifiAwareDiscoverySessionCallback: void onMessageReceived(int,byte[])>
<com.android.server.timedetector.TimeDetectorStrategy: void suggestNetworkTime(android.app.timedetector.NetworkTimeSuggestion)>
<com.android.systemui.bubbles.BubbleViewProvider: com.android.systemui.bubbles.BubbleExpandedView getExpandedView()>
<com.android.server.pm.ShortcutService: boolean isRequestPinItemSupported(int,int)>
<com.android.server.biometrics.BiometricService: void <init>(android.content.Context)>
<com.android.commands.sm.Sm: void main(java.lang.String[])>
<com.android.server.audio.MediaFocusControl: int getCurrentAudioFocus()>
<com.android.server.media.MediaRouterService: void requestCreateSessionWithRouter2(android.media.IMediaRouter2,int,long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info,android.os.Bundle)>
<com.android.server.biometrics.face.FaceService: void checkUseBiometricPermission()>
<com.android.systemui.statusbar.phone.KeyguardBouncer: void show(boolean)>
<android.os.SomeService: android.os.IBinder onBind(android.content.Intent)>
<com.android.settingslib.RestrictedPreference: void checkRestrictionAndSetDisabled(java.lang.String)>
<com.android.server.integrity.serializer.RuleBinarySerializer: void serialize(java.util.List,java.util.Optional,java.io.OutputStream,java.io.OutputStream)>
<com.android.systemui.settings.BrightnessController: void onInit(com.android.systemui.settings.ToggleSlider)>
<com.android.server.textclassifier.TextClassificationManagerService: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection.Request,android.service.textclassifier.ITextClassifierCallback)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setRestrictUpdateHash(byte[])>
<com.android.server.infra.FrameworkResourcesServiceNameResolver: java.lang.String getServiceName(int)>
<com.android.systemui.shared.system.ActivityManagerWrapper: void startActivityFromRecentsAsync(com.android.systemui.shared.recents.model.Task.TaskKey,android.app.ActivityOptions,java.util.function.Consumer,android.os.Handler)>
<com.android.systemui.car.navigationbar.CarNavigationBarView: void hideKeyguardButtons()>
<com.android.server.trust.TrustAgentWrapper: boolean isBound()>
<com.android.systemui.MultiListLayout: void removeAllListViews()>
<com.android.systemui.analytics.DataCollector: android.net.Uri reportRejectedTouch()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean hasFinishedInitialization()>
<com.android.systemui.car.window.OverlayPanelViewController: android.view.View.OnTouchListener getDragCloseTouchListener()>
<com.android.systemui.pip.PipAnimationController.PipTransitionAnimator: void onAnimationEnd(android.animation.Animator)>
<android.net.wifi.hotspot2.PasspointConfiguration: java.lang.String getUniqueId()>
<com.android.systemui.statusbar.policy.Clock: void onDetachedFromWindow()>
<com.android.server.pm.PackageManagerService.PendingPackageBroadcasts: int userIdCount()>
<com.android.systemui.statusbar.notification.stack.AmbientState: int getExpandAnimationTopChange()>
<com.android.systemui.statusbar.notification.stack.AmbientState: com.android.systemui.statusbar.notification.row.ExpandableNotificationRow getExpandingNotification()>
<com.android.commands.svc.SystemServerCommand: void run(java.lang.String[])>
<com.android.settingslib.wifi.AccessPoint: java.lang.String getSummary()>
<com.android.systemui.keyguard.ScreenLifecycle: void dispatchScreenTurnedOff()>
<android.net.wifi.IWifiManager: java.util.List getWifiConfigForMatchedNetworkSuggestionsSharedWithUser(java.util.List)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setStatusBar(com.android.systemui.statusbar.phone.StatusBar)>
<android.net.wifi.rtt.WifiRttManager: boolean isAvailable()>
<com.android.server.pm.permission.PermissionManagerService: android.util.ArrayMap getBackgroundPermissions()>
<com.android.server.ConnectivityService: int getMultipathPreference(android.net.Network)>
<android.net.wifi.aware.WifiAwareAgentNetworkSpecifier: boolean equals(java.lang.Object)>
<com.android.systemui.pip.phone.PipAppOpsListener: void onActivityUnpinned()>
<android.media.MediaSession2.Builder: android.media.MediaSession2.Builder setSessionActivity(android.app.PendingIntent)>
<com.android.systemui.tuner.PluginFragment: void onDestroy()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean isFooterViewNotGone()>
<com.android.server.slice.SlicePermissionManager: void readRestore(org.xmlpull.v1.XmlPullParser)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void onSnapClosed()>
<com.android.systemui.statusbar.policy.SecurityController: java.lang.CharSequence getWorkProfileOrganizationName()>
<com.android.systemui.car.hvac.AnimatedTemperatureView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.stackdivider.DividerView: int getCurrentPosition()>
<com.android.server.VibratorService: void cancelVibrate(android.os.IBinder)>
<com.android.printspooler.renderer.PdfManipulationService: android.os.IBinder onBind(android.content.Intent)>
<com.android.server.security.VerityUtils: boolean isFsveritySignatureFile(java.io.File)>
<android.processor.view.inspector.InspectablePropertyProcessor: void <init>(java.lang.String,javax.annotation.processing.ProcessingEnvironment)>
<com.android.systemui.statusbar.ViewTransformationHelper.CustomTransformation: boolean transformTo(com.android.systemui.statusbar.notification.TransformState,com.android.systemui.statusbar.TransformableView,float)>
<com.android.systemui.statusbar.notification.row.RowContentBindStage: void executeStage(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,com.android.systemui.statusbar.notification.row.BindStage.StageCallback)>
<com.android.server.pm.PackageManagerService.Injector: com.android.server.pm.Settings getSettings()>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: boolean setBluetoothEnabled(boolean)>
<com.android.systemui.tuner.TunerServiceImpl: void destroy()>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: void setZen(int,android.net.Uri,java.lang.String)>
<com.android.server.NetworkManagementService: boolean getIpForwardingEnabled()>
<com.google.android.startop.iorap.EventSequenceValidator: void onIntentStarted(android.content.Intent,long)>
<android.view.autofill.AbstractAutofillPerfTestCase: void disableService()>
<com.android.systemui.statusbar.NotificationViewHierarchyManager: void <init>(android.content.Context,android.os.Handler,com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.statusbar.phone.NotificationGroupManager,com.android.systemui.statusbar.notification.VisualStabilityManager,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.systemui.statusbar.phone.KeyguardBypassController,com.android.systemui.bubbles.BubbleController,com.android.systemui.statusbar.notification.DynamicPrivacyController,com.android.systemui.statusbar.notification.stack.ForegroundServiceSectionController,com.android.systemui.statusbar.notification.DynamicChildBindController,com.android.systemui.statusbar.notification.collection.inflation.LowPriorityInflationHelper)>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void drawableHotspotChanged(float,float)>
<android.net.wifi.SoftApInfo: int getBandwidth()>
<com.android.server.locksettings.LockSettingsService: void removeKey(java.lang.String)>
<com.android.server.media.MediaRouterService: void setRouteVolumeWithManager(android.media.IMediaRouter2Manager,int,android.media.MediaRoute2Info,int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setOnExpansionChangedListener(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow.OnExpansionChangedListener)>
<com.android.systemui.settings.BrightnessDialog: boolean onKeyDown(int,android.view.KeyEvent)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void grantPermissions()>
<com.android.systemui.qs.external.CustomTile: void updateState(android.service.quicksettings.Tile)>
<com.android.systemui.tuner.CustomListPreference.CustomListPreferenceDialogFragment: void onActivityCreated(android.os.Bundle)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void dismiss(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
<android.media.MediaParser: android.media.MediaParser createByName(java.lang.String,android.media.MediaParser.OutputConsumer)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: boolean isBelowSpeedBump()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void showScreenPinningRequest(int)>
<com.android.systemui.statusbar.NotificationShelf: boolean hasNoContentHeight()>
<com.android.networkstack.tethering.EntitlementManager: void notifyUpstream(boolean)>
<com.android.settingslib.bluetooth.A2dpProfile: boolean isEnabled(android.bluetooth.BluetoothDevice)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isTestOnly()>
<com.android.printspooler.model.PrintSpoolerService: void clearCustomPrinterIconCache()>
<com.android.systemui.statusbar.phone.BiometricUnlockController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void attach(com.android.systemui.statusbar.NotificationListener)>
<com.android.server.accessibility.AccessibilityManagerService.Lifecycle: void onBootPhase(int)>
<com.android.systemui.statusbar.notification.stack.NotificationListItem: boolean isSummaryWithChildren()>
<com.android.server.NativeDaemonEvent: java.lang.String getRawEvent()>
<com.android.systemui.tuner.RadioListPreference: void onDialogStateRestored(android.app.DialogFragment,android.app.Dialog,android.os.Bundle)>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: void notifyPreparingToCollapse()>
<com.android.systemui.shared.system.ActivityManagerWrapper: void cancelWindowTransition(int)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void onContentUpdated(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.shell.HeapDumpActivity: void onDestroy()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: android.view.View getShelfTransformationTarget()>
<com.android.settingslib.TwoTargetPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.NotificationHeaderUtil: void restoreNotificationHeader(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.statusbar.notification.row.AppOpsInfo: boolean handleCloseControls(boolean,boolean)>
<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate[] getCaCertificates()>
<com.android.systemui.car.notification.NotificationPanelViewController: void onAnimateCollapsePanel()>
<com.android.settingslib.widget.FooterPreference: void setSummary(int)>
<com.android.systemui.accessibility.WindowMagnification: void <init>(android.content.Context,android.os.Handler)>
<com.android.server.ConnectivityService: int checkMobileProvisioning(int)>
<com.android.server.biometrics.fingerprint.FingerprintService: boolean hasReachedEnrollmentLimit(int)>
<com.android.keyguard.KeyguardStatusView: void dozeTimeTick()>
<com.android.systemui.statusbar.notification.collection.notifcollection.NotifDismissInterceptor: void cancelDismissInterception(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.pm.PackageManagerService: java.lang.String getSystemTextClassifierPackageName()>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void onFinishInflate()>
<com.android.systemui.power.PowerUI.WarningsUI: void updateSnapshot(com.android.systemui.powe.BatteryStateSnapshot)>
<com.android.server.pm.CrossProfileAppsServiceImpl: boolean canInteractAcrossProfiles(java.lang.String)>
<com.android.server.pm.parsing.library.PackageBackwardCompatibility.RemoveUnnecessaryAndroidTestBaseLibrary: void updatePackage(com.android.server.pm.parsing.pkg.ParsedPackage,boolean)>
<com.android.uiautomator.core.UiObject: boolean isScrollable()>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: boolean shouldShowOnKeyguard(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.accessibility.AccessibilityManagerService: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>
<com.android.server.policy.WindowManagerPolicy: void notifyLidSwitchChanged(long,boolean)>
<com.android.systemui.pip.phone.PipAccessibilityInteractionConnection: void clearAccessibilityFocus()>
<com.android.dynsystem.InstallationAsyncTask.ProgressListener: void onResult(int,java.lang.Throwable)>
<com.android.server.trust.TrustArchive: void logAgentDied(int,android.content.ComponentName)>
<com.android.systemui.statusbar.phone.NavigationBarInflaterView: java.lang.String extractImage(java.lang.String)>
<com.android.systemui.biometrics.AuthBiometricFingerprintView: void handleResetAfterHelp()>
<android.net.wifi.WifiNetworkAgentSpecifier: int hashCode()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onSuccessfulUnlock()>
<com.android.server.ServiceWatcher.BlockingBinderRunner: java.lang.Object run(android.os.IBinder)>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: void setProgress(android.print.PrintJobId,float)>
<com.android.server.om.OverlayReferenceMapper: boolean isValidActor(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.policy.WifiSignalController: void <init>(android.content.Context,boolean,com.android.systemui.statusbar.policy.CallbackHandler,com.android.systemui.statusbar.policy.NetworkControllerImpl,android.net.wifi.WifiManager,android.net.ConnectivityManager,android.net.NetworkScoreManager)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getBluetoothContactSharingDisabled(android.content.ComponentName)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void cancelAnimation()>
<com.android.server.biometrics.BiometricServiceBase.DaemonWrapper: int enumerate()>
<com.android.settingslib.graph.BatteryMeterDrawableBase: void setBounds(int,int,int,int)>
<com.android.server.accounts.AccountManagerService: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
<com.android.systemui.util.concurrency.RepeatableExecutor: java.lang.Runnable executeRepeatedly(java.lang.Runnable,long,long)>
<com.android.systemui.globalactions.GlobalActionsDialog: void onDismiss(android.content.DialogInterface)>
<com.android.systemui.statusbar.policy.UserInfoControllerImpl: void reloadUserInfo()>
<com.android.systemui.statusbar.policy.SignalController: void dump(java.io.PrintWriter)>
<com.android.systemui.pip.BasePipManager: void setPinnedStackAnimationListener(com.android.systemui.shared.recents.IPinnedStackAnimationListener)>
<com.android.settingslib.accessibility.AccessibilityButtonHelper: boolean isRequested(android.content.Context)>
<com.android.systemui.statusbar.policy.KeyButtonRipple: void abortDelayedRipple()>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageResolver: void updateMaxImageSizes()>
<com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback: void fill(int,int,android.service.autofill.Dataset)>
<com.android.statementservice.retriever.Relation: int hashCode()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setIcons(com.android.systemui.statusbar.notification.icon.IconPack)>
<com.android.systemui.shared.system.ActivityManagerWrapper: boolean isScreenPinningEnabled()>
<com.android.server.biometrics.BiometricService.Injector: com.android.server.biometrics.BiometricStrengthController getBiometricStrengthController(com.android.server.biometrics.BiometricService)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: void setSubDevice(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.settingslib.wifi.AccessPoint: android.net.wifi.WifiInfo getInfo()>
<com.android.server.PackageWatchdog: void startObservingHealth(com.android.server.PackageWatchdog.PackageHealthObserver,java.util.List,long)>
<com.android.server.tv.tunerresourcemanager.ClientProfile: void useFrontend(int)>
<android.view.ViewShowHidePerfTest: android.content.Context getContext()>
<javax.microedition.khronos.opengles.GL10: void glMultMatrixx(int[],int)>
<com.android.server.biometrics.BiometricServiceBase: void startCurrentClient(int)>
<com.android.settingslib.bluetooth.PbapServerProfile: java.lang.String toString()>
<com.android.systemui.settings.ToggleSeekBar: void <init>(android.content.Context)>
<com.android.keyguard.SecurityMessageDisplay: void formatMessage(int,java.lang.Object[])>
<com.android.server.accessibility.AccessibilityManagerService: void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)>
<com.android.systemui.keyguard.KeyguardSliceProvider: void onStateChanged(int)>
<com.google.android.startop.iorap.AppLaunchEvent: void writeToParcel(android.os.Parcel,int)>
<com.android.server.accessibility.AccessibilityWindowManager: boolean computePartialInteractiveRegionForWindowLocked(int,android.graphics.Region)>
<com.android.server.midi.MidiService.Lifecycle: void onStart()>
<com.android.server.pm.permission.BasePermission: boolean isInstant()>
<com.android.server.trust.TrustAgentWrapper: void onDeviceUnlocked()>
<com.android.egg.neko.Food: long getInterval(android.content.Context)>
<com.android.server.usb.descriptors.UsbVCHeaderInterface: void <init>(int,byte,byte,int)>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean showingPulsing()>
<com.android.systemui.qs.carrier.QSCarrierGroupController.Builder: com.android.systemui.qs.carrier.QSCarrierGroupController.Builder setQSCarrierGroup(com.android.systemui.qs.carrier.QSCarrierGroup)>
<com.android.uiautomator.core.UiDevice: void registerWatcher(java.lang.String,com.android.uiautomator.core.UiWatcher)>
<com.android.settingslib.net.NetworkStatsSummaryLoader.Builder: void <init>(android.content.Context)>
<com.android.settingslib.animation.AppearAnimationUtils.RowTranslationScaler: float getRowTranslationScale(int,int)>
<com.android.keyguard.KeyguardPatternView: void reset()>
<com.android.systemui.statusbar.phone.StatusBar: void onPanelLaidOut()>
<com.android.systemui.media.dialog.MediaOutputController.Callback: void onMediaStoppedOrPaused()>
<com.android.systemui.analytics.DataCollector: void onNotificatonStartDismissing()>
<com.android.server.pm.ShortcutService: void resetThrottling()>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: boolean isTrusted()>
<com.android.systemui.pip.tv.PipControlButtonView: void <init>(android.content.Context)>
<com.android.systemui.bubbles.BubbleExpandedView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: int[] getSplitRevisionCodes()>
<com.android.settingslib.Utils: java.lang.String formatPercentage(int)>
<com.android.systemui.wifi.WifiDebuggingSecondaryUserActivity: void onStop()>
<android.net.TetheringManager.StartTetheringCallback: void onTetheringFailed(int)>
<com.android.systemui.glwallpaper.ImageWallpaperRenderer: void <init>(android.content.Context)>
<com.android.systemui.analytics.DataCollector: void onBouncerShown()>
<com.android.commands.hid.Event: byte[] getDescriptor()>
<com.android.systemui.wifi.WifiDebuggingActivity: void onStart()>
<com.android.systemui.recents.RecentsOnboarding: void onDisconnectedFromLauncher()>
<com.android.systemui.pip.tv.PipControlButtonView: void setOnFocusChangeListener(android.view.View.OnFocusChangeListener)>
<com.android.systemui.statusbar.phone.KeyguardDismissUtil: void executeWhenUnlocked(com.android.systemui.plugins.ActivityStarter.OnDismissAction,boolean)>
<com.android.server.appprediction.AppPredictionPerUserService: void onServiceDied(com.android.server.appprediction.RemoteAppPredictionService)>
<com.android.server.statusbar.StatusBarManagerService: void addTile(android.content.ComponentName)>
<com.android.server.biometrics.ClientMonitor: com.android.server.biometrics.BiometricServiceBase.ServiceListener getListener()>
<com.android.systemui.statusbar.notification.row.RowContentBindParams: void setUseIncreasedHeadsUpHeight(boolean)>
<com.android.systemui.plugins.statusbar.StatusBarStateController: void removeCallback(com.android.systemui.plugins.statusbar.StatusBarStateController.StateListener)>
<android.net.wifi.aware.IWifiAwareDiscoverySessionCallback: void onMatch(int,byte[],byte[])>
<com.android.server.usb.descriptors.UsbDescriptor: int getLength()>
<com.android.systemui.statusbar.notification.stack.AmbientState: float getExpandingVelocity()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void clearChildFocus(android.view.View)>
<com.android.server.pm.permission.BasePermission: void setPermission(android.content.pm.parsing.component.ParsedPermission)>
<com.android.server.ExtconStateObserver: void onUEvent(com.android.server.ExtconUEventObserver.ExtconInfo,android.os.UEventObserver.UEvent)>
<com.android.settingslib.wifi.AccessPoint: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.phone.ShadeController: void animateCollapsePanels(int,boolean)>
<com.android.systemui.statusbar.CommandQueue: void startAssist(android.os.Bundle)>
<com.android.server.tv.tunerresourcemanager.UseCasePriorityHints: void parse()>
<com.android.systemui.bubbles.BubbleTaskView: android.graphics.Region getTapExcludeRegion()>
<com.android.server.PreloadsFileCacheExpirationJobService: boolean onStartJob(android.app.job.JobParameters)>
<com.android.server.usb.descriptors.UsbACTerminal: byte getTerminalID()>
<com.android.systemui.plugins.FalsingManager: boolean isReportingEnabled()>
<com.android.systemui.dock.DockManagerImpl: void removeListener(com.android.systemui.dock.DockManager.DockEventListener)>
<android.net.IpMemoryStore: void runWhenServiceReady(java.util.function.Consumer)>
<com.android.systemui.car.window.OverlayViewController: void onFinishInflate()>
<com.android.packageinstaller.UninstallUninstalling: void onCreate(android.os.Bundle)>
<com.android.systemui.statusbar.phone.ContextualButton: android.content.Context getContext()>
<com.android.settingslib.utils.AsyncLoaderCompat: void onReset()>
<com.android.keyguard.KeyguardSecurityContainer.SecurityCallback: void finish(boolean,int)>
<com.android.systemui.qs.TileLayout: int getNumVisibleTiles()>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean isPinned()>
<com.android.systemui.qs.tiles.BatterySaverTile: int getMetricsCategory()>
<com.android.systemui.tuner.LockscreenFragment.Adapter: com.android.systemui.tuner.LockscreenFragment.Holder onCreateViewHolder(android.view.ViewGroup,int)>
<com.android.systemui.statusbar.phone.StatusBarWindowController: void setForceStatusBarVisible(boolean)>
<com.android.systemui.statusbar.phone.NavigationBarEdgePanel: void onDestroy()>
<com.android.systemui.car.statusbar.DozeServiceHost: void startDozing()>
<com.android.server.people.data.EventIndex: java.util.List getActiveTimeSlots()>
<android.view.ViewShowHidePerfTest: java.lang.Iterable params()>
<com.android.server.pm.parsing.pkg.AndroidPackage: int getBaseRevisionCode()>
<com.android.server.usb.UsbAlsaJackDetector: void run()>
<javax.microedition.khronos.opengles.GL10: void glTexParameterx(int,int,int)>
<com.android.server.pm.PackageInstallerService: java.io.File allocateStageDirLegacy(java.lang.String,boolean)>
<com.android.systemui.statusbar.notification.stack.MediaHeaderView: long performRemoveAnimation(long,long,float,boolean,float,java.lang.Runnable,android.animation.AnimatorListenerAdapter)>
<com.android.keyguard.KeyguardHostView: void onPause()>
<com.android.keyguard.KeyguardSliceView.Row: void onVisibilityAggregated(boolean)>
<com.android.server.pm.RestrictionsSet: int size()>
<android.os.ParcelPerfTest: void timeWriteExceptionWithStackTraceParceling()>
<com.android.photos.BitmapRegionTileSource.BitmapSource: com.android.photos.BitmapRegionTileSource.BitmapSource.State getLoadingState()>
<com.android.server.storage.StorageSessionController: android.content.ComponentName getExternalStorageServiceComponentName()>
<com.android.gallery3d.glrenderer.GLCanvas: void multiplyAlpha(float)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setShelf(com.android.systemui.statusbar.NotificationShelf)>
<com.android.systemui.SwipeHelper: void snapChild(android.view.View,float,float)>
<com.android.server.usb.descriptors.Usb10ASFormatII: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<android.net.wifi.p2p.WifiP2pConfig: java.lang.String getNetworkName()>
<com.android.systemui.bubbles.BubbleData: boolean hasAnyBubbleWithKey(java.lang.String)>
<com.android.settingslib.RestrictedPreference: void useAdminDisabledSummary(boolean)>
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>
<com.android.server.input.InputManagerService: int[] getInputDeviceIds()>
<com.android.systemui.pip.phone.PipMenuActivityController: void showMenuWithDelay(int,android.graphics.Rect,boolean,boolean,boolean)>
<com.android.settingslib.location.SettingsInjector.Setting: void <init>(com.android.settingslib.location.InjectedSetting,androidx.preference.Preference)>
<com.android.settingslib.widget.LayoutPreference: void setAllowDividerBelow(boolean)>
<com.android.systemui.stackdivider.DividerView: void onComputeInternalInsets(android.view.ViewTreeObserver.InternalInsetsInfo)>
<com.android.systemui.statusbar.phone.NotificationGroupAlertTransferHelper: void bind(com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.systemui.statusbar.phone.NotificationGroupManager)>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.volume.VolumeComponent provideVolumeComponent(com.android.systemui.volume.VolumeDialogComponent)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: void connect()>
<com.android.carrierdefaultapp.CaptivePortalLoginActivity: void onDestroy()>
<com.android.systemui.qs.carrier.QSCarrier: void <init>(android.content.Context,android.util.AttributeSet)>
<com.google.android.startop.iorap.IorapForwardingService: android.os.IBinder.DeathRecipient provideDeathRecipient()>
<com.android.bluetoothmidiservice.MidiBtleTimeTracker: long convertTimestampToNanotime(int,long)>
<com.android.systemui.tuner.PluginFragment: void onCreatePreferences(android.os.Bundle,java.lang.String)>
<com.android.systemui.biometrics.AuthCredentialView: void onDetachedFromWindow()>
<com.android.systemui.plugins.qs.QS: void setHeaderListening(boolean)>
<android.net.ITetheringEventCallback: void onTetherClientsChanged(java.util.List)>
<com.android.systemui.statusbar.StatusBarWifiView: void onDarkChanged(android.graphics.Rect,float,int)>
<com.android.server.soundtrigger_middleware.RecoverableException: void <init>(int,java.lang.String)>
<com.android.settingslib.volume.Util: java.lang.String mediaMetadataToString(android.media.MediaMetadata)>
<com.android.printspooler.model.PageContentRepository.OnPageContentAvailableCallback: void onPageContentAvailable(android.graphics.drawable.BitmapDrawable)>
<com.android.systemui.statusbar.NotificationShelf: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>
<com.android.server.trust.TrustAgentWrapper: void destroy()>
<com.android.systemui.bubbles.animation.StackAnimationController: void moveFirstBubbleWithStackFollowing(float,float)>
<com.android.systemui.statusbar.policy.NetworkController: boolean isRadioOn()>
<com.android.server.usb.descriptors.Usb20ACHeader: void <init>(int,byte,byte,int,int)>
<com.android.systemui.statusbar.notification.collection.inflation.NotifInflater: void abortInflation(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.doze.DozeHost: boolean isPulsingBlocked()>
<com.android.server.pm.UserTypeDetails.Builder: com.android.server.pm.UserTypeDetails.Builder setLabel(int)>
<com.android.systemui.statusbar.StatusBarStateControllerImpl: int getState()>
<com.android.systemui.pip.PipBoundsHandler: void onMovementBoundsChanged(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayInfo)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexiOES(int,int,int,int,int)>
<com.android.server.display.color.ColorDisplayService: void onStart()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isHeadsUpAnimatingAway()>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void grantDefaultPermissionsToEnabledCarrierApps(java.lang.String[],int)>
<com.android.systemui.qs.QSDetail: void setExpanded(boolean)>
<com.android.server.tv.UinputBridge: void finalize()>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: boolean canAnimate()>
<javax.obex.PrivateInputStream: int available()>
<javax.microedition.khronos.opengles.GL10: void glTexEnvx(int,int,int)>
<com.android.server.pm.PackageManagerService: boolean setSystemAppInstallState(java.lang.String,boolean,int)>
<com.android.uiautomator.core.UiDevice: void initialize(com.android.uiautomator.core.UiAutomatorBridge)>
<com.android.settingslib.license.LicenseHtmlLoader: void onDiscardResult(java.io.File)>
<com.android.systemui.shared.system.PinnedStackListenerForwarder.PinnedStackListener: void onMovementBoundsChanged(boolean)>
<com.android.settingslib.accessibility.AccessibilityUtils: java.lang.CharSequence getTextForLocale(android.content.Context,java.util.Locale,int)>
<android.media.MediaParser.ExtractorFactory: com.google.android.exoplayer2.extractor.Extractor createInstance()>
<com.android.server.accessibility.AccessibilityManagerService: boolean performActionOnAccessibilityFocusedItem(android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction)>
<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGeniv(int,int,java.nio.IntBuffer)>
<com.android.server.pm.UserRestrictionsUtils: android.os.Bundle nonNull(android.os.Bundle)>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.ActivityStarterDelegate: void startActivity(android.content.Intent,boolean)>
<com.android.systemui.biometrics.AuthController.BiometricTaskStackListener: void onTaskStackChanged()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean mustStayOnScreen()>
<android.database.SQLiteDatabaseIoPerfTest: void setUp()>
<com.android.systemui.pip.tv.PipMenuActivity: void finish()>
<com.android.systemui.qs.external.TileLifecycleManager: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.statusbar.ViewTransformationHelper: void transformTo(com.android.systemui.statusbar.TransformableView,java.lang.Runnable)>
<com.android.server.ConnectivityService: void startTcpKeepalive(android.net.Network,java.io.FileDescriptor,int,android.net.ISocketKeepaliveCallback)>
<com.android.systemui.SlicePermissionActivity: void onClick(android.content.DialogInterface,int)>
<com.android.server.pm.PackageInstallerService: void installExistingPackage(java.lang.String,int,int,android.content.IntentSender,int,java.util.List)>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: void <init>(android.content.Context,android.os.Looper,com.android.systemui.statusbar.policy.DeviceProvisionedController,com.android.systemui.broadcast.BroadcastDispatcher,android.net.ConnectivityManager,android.telephony.TelephonyManager,android.net.wifi.WifiManager,android.net.NetworkScoreManager)>
<com.android.server.locksettings.SyntheticPasswordManager: boolean existsHandle(long,int)>
<com.android.systemui.car.window.SystemUIOverlayWindowController: void setWindowNeedsInput(boolean)>
<com.android.uiautomator.core.InstrumentationUiAutomatorBridge: int getRotation()>
<com.android.server.UpdateLockService: void acquireUpdateLock(android.os.IBinder,java.lang.String)>
<com.android.powermodel.component.GpsProfile.Builder: void setSignalMa(float[])>
<com.android.server.input.InputManagerService: void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void setSyncAdapterPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.SyncAdapterPackagesProvider)>
<com.android.server.ConnectivityService.Dependencies: boolean hasService(java.lang.String)>
<android.provider.settings.validators.DiscreteValueValidator: void <init>(java.lang.String[])>
<com.android.server.pm.AppsFilter.FeatureConfig: void enableLogging(int,boolean)>
<com.android.systemui.statusbar.NotificationRemoteInputManager: void onPanelCollapsed()>
<com.android.systemui.statusbar.phone.KeyguardBouncer: int getTop()>
<com.android.systemui.qs.tiles.NfcTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.BooleanState,java.lang.Object)>
<com.android.server.pm.pkg.PackageStateUnserialized: com.android.server.pm.pkg.PackageStateUnserialized setLastPackageUsageTimeInMills(long[])>
<com.android.systemui.globalactions.GlobalActionsLayout: int getCurrentLayoutDirection()>
<com.android.systemui.util.leak.GarbageMonitor.Service: void start()>
<com.android.systemui.tuner.CustomListPreference: void onDialogClosed(boolean)>
<com.android.systemui.assist.AssistManager: void requestAssistHandles()>
<com.android.systemui.car.window.OverlayPanelViewController: void maybeCompleteAnimation(android.view.MotionEvent)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setBubbleMetadata(android.app.Notification.BubbleMetadata)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void togglePanel()>
<android.net.wifi.WifiUsabilityStatsEntry: int getProbeElapsedTimeSinceLastUpdateMillis()>
<com.android.systemui.qs.QSSecurityFooter: void refreshState()>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getQueriesIntents()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setLegacy(boolean)>
<com.android.systemui.statusbar.phone.NotificationPanelView: void dispatchDraw(android.graphics.Canvas)>
<android.net.wifi.aware.PublishConfig: int describeContents()>
<com.android.server.usb.descriptors.UsbDescriptor: void postParse(com.android.server.usb.descriptors.ByteStream)>
<com.android.systemui.statusbar.policy.HeadsUpManager.HeadsUpEntry: int getRecommendedHeadsUpTimeoutMs(int)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: void cancelPendingWakeupAction()>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setDistanceToTopRoundness(float)>
<com.android.server.devicepolicy.DeviceAdminServiceController: void dump(com.android.internal.util.IndentingPrintWriter)>
<com.android.server.audio.AudioService: void setBluetoothHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice,int,boolean,int)>
<com.android.systemui.statusbar.phone.LockscreenWallpaper: void setSelectedUser(android.os.UserHandle)>
<android.net.wifi.WifiManager: void addSuggestionConnectionStatusListener(java.util.concurrent.Executor,android.net.wifi.WifiManager.SuggestionConnectionStatusListener)>
<com.android.systemui.qs.tileimpl.QSTileImpl: com.android.systemui.plugins.qs.DetailAdapter getDetailAdapter()>
<com.android.systemui.settings.ToggleSlider: void setOnChangedListener(com.android.systemui.settings.ToggleSlider.Listener)>
<com.android.server.locksettings.recoverablekeystore.KeySyncUtils: java.util.Map encryptKeysWithRecoveryKey(javax.crypto.SecretKey,java.util.Map)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName,java.lang.String,int)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean canControlMagnification(com.android.server.accessibility.AbstractAccessibilityServiceConnection)>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageResolver.ImageCache: void purge()>
<com.android.server.accessibility.MagnificationController.ControllerContext: long getAnimationDuration()>
<android.net.wifi.WifiClient: int hashCode()>
<android.net.wifi.WifiManager: boolean isWifiStandardSupported(int)>
<com.android.systemui.util.concurrency.ConcurrencyModule: com.android.systemui.util.concurrency.DelayableExecutor provideMainDelayableExecutor(android.os.Looper)>
<android.net.wifi.aware.WifiAwareNetworkInfo: int getPort()>
<com.android.server.policy.keyguard.KeyguardStateMonitor: void onInputRestrictedStateChanged(boolean)>
<com.android.systemui.qs.TouchAnimator.Builder: com.android.systemui.qs.TouchAnimator.Builder setEndDelay(float)>
<com.android.server.policy.PhoneWindowManager: void setSafeMode(boolean)>
<com.android.systemui.analytics.DataCollector: void onScreenTurningOn()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.CharSequence getNonLocalizedLabel()>
<android.net.wifi.IWifiManager: boolean isWifiStandardSupported(int)>
<com.android.settingslib.drawable.UserIconDrawable: boolean isStateful()>
<android.net.wifi.p2p.WifiP2pManager: void initiatorReportNfcHandover(android.net.wifi.p2p.WifiP2pManager.Channel,java.lang.String,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.systemui.glwallpaper.ImageWallpaperRenderer: void onDrawFrame()>
<com.android.systemui.plugins.NavigationEdgeBackPlugin: void setIsLeftPanel(boolean)>
<com.android.systemui.statusbar.notification.collection.ShadeListBuilder: void <init>(com.android.systemui.util.time.SystemClock,com.android.systemui.statusbar.notification.collection.listbuilder.ShadeListBuilderLogger,com.android.systemui.dump.DumpManager,com.android.systemui.statusbar.NotificationInteractionTracker)>
<com.android.server.media.MediaSessionRecordImpl: boolean checkPlaybackActiveState(boolean)>
<com.android.server.hdmi.SelectRequestBuffer.SelectRequest: void process()>
<com.android.server.attention.AttentionManagerService: void <init>(android.content.Context)>
<com.android.networkstack.tethering.BpfCoordinator.Ipv6ForwardingRule: com.android.networkstack.tethering.BpfCoordinator.Ipv6ForwardingRule onNewUpstream(int)>
<com.android.settingslib.notification.ZenDurationDialog: void updateZenDuration(int)>
<com.android.server.biometrics.AuthenticationClient: boolean isBiometricPrompt()>
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setChronometerRunning(boolean)>
<com.android.systemui.statusbar.notification.row.NotificationInfo: boolean isAnimating()>
<com.android.systemui.tuner.ShortcutPicker: void onDestroy()>
<com.android.systemui.statusbar.NotificationMediaManager: void setUpWithPresenter(com.android.systemui.statusbar.NotificationPresenter)>
<com.android.server.uri.UriGrantsManagerService.Lifecycle: void onBootPhase(int)>
<com.android.server.biometrics.fingerprint.FingerprintConstants: int actionBiometricAuth()>
<com.android.systemui.statusbar.notification.collection.GroupEntry: java.util.List getChildren()>
<com.android.systemui.statusbar.phone.HeadsUpAppearanceController: void onHeadsUpPinned(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.pm.permission.PermissionManagerService: boolean isAutoRevokeWhitelisted(java.lang.String,int)>
<com.android.systemui.bubbles.BubbleStackView: void onDetachedFromWindow()>
<android.net.wifi.p2p.WifiP2pGroup: void addClient(android.net.wifi.p2p.WifiP2pDevice)>
<com.android.systemui.statusbar.policy.AccessPointControllerImpl: void onAccessPointsChanged()>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getEndUserSessionMessage(android.content.ComponentName)>
<com.android.systemui.bubbles.BubbleStackView: void updateBubbleOrder(java.util.List)>
<com.android.systemui.dagger.DependencyProvider: com.android.keyguard.ViewMediatorCallback providesViewMediatorCallback(com.android.systemui.keyguard.KeyguardViewMediator)>
<com.android.systemui.globalactions.GlobalActionsColumnLayout: float getAnimationOffsetY()>
<com.android.systemui.statusbar.policy.UserSwitcherController: void logoutCurrentUser()>
<com.android.systemui.classifier.FalsingManagerFake: void onCameraOn()>
<com.android.server.biometrics.Utils: int biometricConstantsToBiometricManager(int)>
<android.net.wifi.WifiScanner: void startBackgroundScan(android.net.wifi.WifiScanner.ScanSettings,android.net.wifi.WifiScanner.ScanListener,android.os.WorkSource)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void onAttachedToWindow()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void setVisible(boolean)>
<com.android.systemui.statusbar.phone.StatusBar: void onColorsChanged(com.android.internal.colorextraction.ColorExtractor,int)>
<com.android.settingslib.utils.AsyncLoaderCompat: void onStopLoading()>
<com.android.systemui.statusbar.notification.row.NotificationGuts: void setClipTopAmount(int)>
<com.android.systemui.stackdivider.DividerView: void setMinimizedDockStack(boolean,long,boolean)>
<com.android.systemui.fragments.FragmentService: void <init>(com.android.systemui.dagger.SystemUIRootComponent,com.android.systemui.statusbar.policy.ConfigurationController)>
<android.net.wifi.WifiManager: boolean isWifiEnabled()>
<com.android.systemui.car.navigationbar.CarNavigationBarController: void hideBars()>
<android.util.ArraySetPerfTest: void testRemoveIf_Small_RemoveHalf()>
<com.android.server.biometrics.ClientMonitor: boolean onError(long,int,int)>
<com.android.systemui.tuner.CustomListPreference: android.app.Dialog onDialogCreated(android.app.DialogFragment,android.app.Dialog)>
<android.database.SQLiteDatabasePerfTest: void testUpdate()>
<com.android.server.pm.Installer: boolean destroyCeSnapshotsNotSpecified(int,int[])>
<com.android.server.soundtrigger.SoundTriggerService.LocalSoundTriggerService: int setParameter(int,int,int)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onSystemReady()>
<com.android.systemui.globalactions.GlobalActionsDialog.MyAdapter: void onClickItem(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setTrackingHeadsUp(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: void onAlertEntryRemoved(com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry)>
<com.android.server.audio.AudioService: void registerStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
<com.android.server.slice.SliceManagerService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: int getTopPadding()>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void appTransitionStarting(int,long,long,boolean)>
<com.android.systemui.statusbar.notification.AboveShelfObserver.HasViewAboveShelfChangedListener: void onHasViewsAboveShelfChanged(boolean)>
<com.android.settingslib.schedulesprovider.ScheduleInfo: void <init>(com.android.settingslib.schedulesprovider.ScheduleInfo.Builder)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: void setScanMode(int)>
<com.android.systemui.biometrics.AuthController: void onDeviceCredentialPressed()>
<com.android.server.policy.PhoneWindowManager: void enableScreenAfterBoot()>
<com.android.systemui.globalactions.GlobalActionsComponent: void handleShowShutdownUi(boolean,java.lang.String)>
<com.android.systemui.DessertCaseView.RescalingContainer: void setDarkness(float)>
<com.android.server.pm.PackageManagerService: void notifyPackagesReplacedReceived(java.lang.String[])>
<com.android.server.infra.AbstractPerUserSystemService: android.content.pm.ServiceInfo getServiceInfo()>
<com.android.server.people.data.AppUsageStatsData: int getChosenCount()>
<android.net.wifi.WifiManager.OnWifiUsabilityStatsListener: void onWifiUsabilityStats(int,boolean,android.net.wifi.WifiUsabilityStatsEntry)>
<com.android.server.devicepolicy.DevicePolicyConstants: void dump(com.android.internal.util.IndentingPrintWriter)>
<android.text.CanvasDrawTextTest: void setUp()>
<com.android.server.IpSecService: void releaseSecurityParameterIndex(int)>
<com.android.systemui.biometrics.AuthBiometricView: void onDialogAnimatedIn()>
<com.android.systemui.qs.tiles.CastTile: java.lang.String composeChangeAnnouncement()>
<com.android.settingslib.display.DisplayDensityUtils: void setForcedDisplayDensity(int,int)>
<com.android.proxyhandler.ProxyServer: void setCallback(com.android.net.IProxyPortListener)>
<com.android.systemui.statusbar.SysuiStatusBarStateController: boolean isKeyguardRequested()>
<com.android.pacprocessor.PacNative: boolean setCurrentProxyScript(java.lang.String)>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.util.Map recoverKeyChainSnapshot(java.lang.String,byte[],java.util.List)>
<com.android.commands.svc.Svc.Command: java.lang.String shortHelp()>
<com.android.wallpapercropper.CropView.TouchCallback: void onTouchDown()>
<com.android.systemui.statusbar.phone.NotificationListenerWithPlugins: void onPluginDisconnected(com.android.systemui.plugins.NotificationListenerController)>
<com.android.keyguard.KeyguardSliceView: void <init>(android.content.Context,android.util.AttributeSet,com.android.systemui.plugins.ActivityStarter,com.android.systemui.statusbar.policy.ConfigurationController,com.android.systemui.tuner.TunerService,android.content.res.Resources)>
<android.perftests.SystemPerfTest: void testJniArrayGetLength()>
<com.android.uiautomator.core.UiDevice: int getDisplayWidth()>
<android.net.wifi.p2p.WifiP2pDeviceList: android.net.wifi.p2p.WifiP2pDevice get(java.lang.String)>
<com.android.systemui.statusbar.policy.MobileSignalController: int getQsCurrentIconId()>
<com.android.server.appprediction.AppPredictionPerUserService: void notifyLaunchLocationShownLocked(android.app.prediction.AppPredictionSessionId,java.lang.String,android.content.pm.ParceledListSlice)>
<com.android.systemui.statusbar.notification.row.ExpandableView: com.android.systemui.statusbar.notification.stack.ExpandableViewState createExpandableViewState()>
<com.android.systemui.tracing.ProtoTracer: void start()>
<com.android.server.policy.PhoneWindowManager: boolean isKeyguardOccluded()>
<com.android.keyguard.KeyguardSecurityView: void setLockPatternUtils(com.android.internal.widget.LockPatternUtils)>
<android.net.wifi.rtt.WifiRttManager: void startRanging(android.os.WorkSource,android.net.wifi.rtt.RangingRequest,java.util.concurrent.Executor,android.net.wifi.rtt.RangingResultCallback)>
<com.android.systemui.statusbar.phone.RotationButton: void setCanShowRotationButton(boolean)>
<com.android.printservice.recommendation.plugin.hp.ServiceRecommendationPlugin: void <init>(android.content.Context,int,com.android.printservice.recommendation.plugin.hp.VendorInfo,java.lang.String[])>
<com.android.systemui.assist.ui.DefaultUiController: void logInvocationProgressMetrics(int,float,boolean)>
<com.android.keyguard.CarrierText: void onDetachedFromWindow()>
<com.android.server.display.utils.History: void add(float)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.CompilerStats.PackageStats getCompilerPackageStats(java.lang.String)>
<android.net.wifi.hotspot2.OsuProvider: android.net.Uri getServerUri()>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onBiometricAuthFailed(android.hardware.biometrics.BiometricSourceType)>
<com.android.server.integrity.parser.RuleIndexRange: int getStartIndex()>
<com.google.android.startop.iorap.RequestId: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindsStatusBar(com.android.systemui.car.statusbar.UnusedStatusBar)>
<com.android.server.pm.OtaDexoptService: void prepare()>
<com.android.server.testing.shadows.ShadowBackupDataOutput: long getQuota()>
<com.android.systemui.qs.TileLayout: int exactly(int)>
<android.content.pm.PackageManagerInternal: void pruneInstantApps()>
<com.android.server.pm.PackageManagerService: void sendDeviceCustomizationReadyBroadcast()>
<com.android.uiautomator.core.UiObject: boolean pinchOut(int,int)>
<com.android.systemui.keyguard.KeyguardSliceProvider: void onDestroy()>
<com.android.server.locksettings.LockSettingsService: void reportSuccessfulBiometricUnlock(boolean,int)>
<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void rotate(float,float,float,float)>
<com.android.server.audio.AudioService: int dispatchFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>
<android.net.wifi.WifiInfo: int getRssi()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: android.view.View getContractedChild()>
<com.android.systemui.statusbar.policy.SecurityController: java.lang.String getProfileOwnerName()>
<com.android.server.webkit.SystemImpl: void updateUserSetting(android.content.Context,java.lang.String)>
<com.android.server.locksettings.SyntheticPasswordManager: long createPasswordBasedSyntheticPassword(android.service.gatekeeper.IGateKeeperService,com.android.internal.widget.LockscreenCredential,com.android.server.locksettings.SyntheticPasswordManager.AuthenticationToken,int)>
<com.android.powermodel.PowerProfile: com.android.powermodel.PowerProfile parse(java.io.InputStream)>
<android.content.pm.PackageManagerInternal: void removeNonSystemPackageSuspensions(java.lang.String,int)>
<com.android.bluetoothmidiservice.BluetoothPacketEncoder: void writeComplete()>
<com.android.systemui.globalactions.GlobalActionsDialog.MyAdapter: boolean isEnabled(int)>
<com.android.server.pm.ShortcutNonPersistentUser: void setShortcutHostPackage(java.lang.String,java.lang.String)>
<android.net.wifi.IWifiManager: boolean is5GHzBandSupported()>
<com.android.systemui.bubbles.BubbleStackView: void setTemporarilyInvisible(boolean)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: void setDiscoverableTimeout(int)>
<com.android.server.pm.permission.PermissionManagerService: void startOneTimePermissionSession(java.lang.String,int,long,int,int)>
<com.android.systemui.ForegroundServiceController: boolean isSystemAlertNotification(android.service.notification.StatusBarNotification)>
<com.android.server.recoverysystem.RecoverySystemService.UncryptSocket: boolean connectService()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: boolean getShouldCreateSnapshot(int,int)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void canUserAttemptToConfigureInteractAcrossProfiles_platformSignedAppWithAutomaticPermission_returnsFalse()>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder: com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder withCornerRadius(float)>
<com.android.settingslib.wifi.WifiTracker: void dump(java.io.PrintWriter)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector resourceId(java.lang.String)>
<android.net.util.BaseNetdUnsolicitedEventListener: void onInterfaceChanged(java.lang.String,boolean)>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy: void setEthernetIndicators(com.android.systemui.statusbar.policy.NetworkController.IconState)>
<android.processor.view.inspector.InspectionCompanionGenerator: void <init>(javax.annotation.processing.Filer,java.lang.Class)>
<javax.microedition.khronos.opengles.GL10: void glLoadMatrixx(int[],int)>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean isAlive()>
<com.android.systemui.bubbles.BubbleController.NotifCallback: void invalidateNotifications(java.lang.String)>
<com.android.systemui.car.navigationbar.CarNavigationBarView: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.systemui.bubbles.BubbleStackView: float getNormalizedYPosition()>
<com.android.systemui.keyguard.KeyguardSliceProvider: boolean isDndOn()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: boolean canBeDismissed()>
<com.android.systemui.pip.PipBoundsHandler: boolean setShelfHeight(boolean,int)>
<com.android.server.pm.dex.PackageDexUsage: void writeInternal(java.lang.Void)>
<android.net.wifi.WifiInfo: int getFrequency()>
<com.android.server.biometrics.BiometricServiceBase: java.lang.String getLockoutResetIntent()>
<com.android.server.IntentResolver: boolean filterEquals(android.content.IntentFilter,android.content.IntentFilter)>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: java.lang.String getOverlayTargetName()>
<com.android.perftests.blob.BlobStorePerfTests: java.util.Collection getParameters()>
<android.net.ITetheringConnector: void requestLatestTetheringEntitlementResult(int,android.os.ResultReceiver,boolean,java.lang.String)>
<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>
<com.android.server.biometrics.BiometricServiceBase: void checkUseBiometricPermission()>
<com.android.systemui.statusbar.NavigationBarController: com.android.systemui.statusbar.phone.NavigationBarFragment getDefaultNavigationBarFragment()>
<javax.obex.Operation: java.lang.String getType()>
<com.android.server.pm.CrossProfileAppsServiceImpl: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)>
<com.android.systemui.classifier.StrokeClassifier: float getFalseTouchEvaluation(int,com.android.systemui.classifier.Stroke)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: boolean shouldDisableWindowAnimationsForUnlock()>
<com.android.server.pm.PackageInstallerService: void registerCallback(android.content.pm.IPackageInstallerCallback,int)>
<com.android.systemui.statusbar.notification.PropertyAnimator: void startAnimation(android.view.View,com.android.systemui.statusbar.notification.AnimatableProperty,float,com.android.systemui.statusbar.notification.stack.AnimationProperties)>
<com.android.systemui.util.leak.GarbageMonitor.MemoryTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.util.leak.GarbageMonitor,com.android.systemui.plugins.ActivityStarter)>
<com.android.server.media.MediaSessionRecordImpl: void setSessionPolicies(int)>
<com.android.systemui.statusbar.phone.AutoHideController: void setStatusBar(com.android.systemui.statusbar.AutoHideUiElement)>
<com.android.settingslib.accounts.AuthenticatorHelper: java.lang.String getPackageForType(java.lang.String)>
<com.android.systemui.statusbar.policy.CallbackController: java.lang.Object observe(androidx.lifecycle.Lifecycle,java.lang.Object)>
<com.android.server.accessibility.MagnificationController: float getCenterY(int)>
<com.android.server.infra.AbstractPerUserSystemService: java.lang.String getComponentNameLocked()>
<android.text.StaticLayoutPerfTest: void testCreate_PrecomputedText_NoStyled_Greedy_NoHyphenation()>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator: boolean isAnimationRunning()>
<com.android.settingslib.bluetooth.LocalBluetoothProfileManager: com.android.settingslib.bluetooth.MapProfile getMapProfile()>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageResolver.ImageCache: boolean hasEntry(android.net.Uri)>
<android.net.wifi.WifiManager.NetworkRequestMatchCallback: void onUserSelectionCallbackRegistration(android.net.wifi.WifiManager.NetworkRequestUserSelectionCallback)>
<com.android.systemui.egg.MLandActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setInitializationTime(long)>
<com.android.server.PackageWatchdog.PackageHealthObserver: boolean isPersistent()>
<com.android.server.textservices.TextServicesManagerService: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers(int)>
<com.android.systemui.statusbar.notification.stack.AmbientState: com.android.systemui.statusbar.notification.row.ExpandableView getLastVisibleBackgroundChild()>
<com.android.systemui.statusbar.notification.stack.NotificationSection: android.graphics.Rect getCurrentBounds()>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: boolean isVpnBranded()>
<com.android.commands.svc.Svc: void main(java.lang.String[])>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void setAffordanceHelper(com.android.systemui.statusbar.phone.KeyguardAffordanceHelper)>
<javax.microedition.khronos.opengles.GL11: void glColor4ub(byte,byte,byte,byte)>
<javax.obex.PrivateOutputStream: void <init>(javax.obex.BaseStream,int)>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void showTransient(int,int[])>
<com.android.gallery3d.exif.ExifInterface: boolean setCompressedThumbnail(byte[])>
<android.net.wifi.RttManager: void stopRanging(android.net.wifi.RttManager.RttListener)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.hdmi.HdmiCecController.NativeWrapper: java.lang.String nativeInit()>
<com.android.systemui.globalactions.GlobalActionsImpl: void disable(int,int,int,boolean)>
<javax.obex.ServerOperation: int getResponseCode()>
<com.android.providers.settings.SettingsProvider: void dumpInternal(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.printspooler.model.PageContentRepository: void destroy(java.lang.Runnable)>
<com.android.printspooler.ui.FusedPrintersProvider: void onProviderDisabled(java.lang.String)>
<com.android.photos.BitmapRegionTileSource.UriBitmapSource: boolean readExif(com.android.gallery3d.exif.ExifInterface)>
<com.android.settingslib.widget.LinkTextView: void <init>(android.content.Context)>
<com.android.systemui.wm.DisplayLayout: int getNavigationBarPosition(android.content.res.Resources)>
<com.android.server.locksettings.LockSettingsService: java.lang.String getKey(java.lang.String)>
<com.android.server.pm.PackageManagerService: void deleteExistingPackageAsUser(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int)>
<com.android.systemui.statusbar.notification.interruption.HeadsUpController: boolean alertAgain(com.android.systemui.statusbar.notification.collection.NotificationEntry,android.app.Notification)>
<com.android.settingslib.bluetooth.HidDeviceProfile: void finalize()>
<com.google.android.startop.iorap.TaskResult: boolean equals(java.lang.Object)>
<com.android.keyguard.KeyguardPatternView: void showUsabilityHint()>
<com.android.server.usb.UsbService: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setRecoveryServiceCertSerial(int,int,java.lang.String,long)>
<android.net.wifi.WifiManager: java.lang.String getCurrentNetworkWpsNfcConfigurationToken()>
<com.android.uiautomator.core.UiDevice: boolean pressDPadRight()>
<com.android.server.hdmi.HdmiCecController.NativeWrapper: void nativeClearLogicalAddress()>
<android.net.wifi.p2p.WifiP2pManager.PeerListListener: void onPeersAvailable(android.net.wifi.p2p.WifiP2pDeviceList)>
<com.android.server.ServiceWatcher: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.usb.descriptors.UsbDescriptorParser: void parseDescriptors(byte[])>
<com.android.systemui.statusbar.phone.DarkIconDispatcherImpl: void setIconsDarkArea(android.graphics.Rect)>
<com.android.systemui.car.CarDeviceProvisionedControllerImpl: boolean isUserSetupInProgress(int)>
<com.android.systemui.statusbar.policy.KeyguardStateController: long calculateGoingToFullShadeDelay()>
<com.android.systemui.statusbar.notification.row.ExpandableView: void updateClipping()>
<com.android.server.usb.descriptors.UsbDeviceDescriptor: java.lang.String getSerialString(com.android.server.usb.descriptors.UsbDescriptorParser)>
<com.android.server.infra.AbstractPerUserSystemService: int getUserId()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.phone.StatusIconContainer: void onDraw(android.graphics.Canvas)>
<com.android.systemui.qs.tileimpl.QSTileImpl: com.android.systemui.plugins.qs.QSIconView createTileView(android.content.Context)>
<android.media.BufferingParams.Builder: void <init>(android.media.BufferingParams)>
<com.android.systemui.screenrecord.RecordingService: android.os.IBinder onBind(android.content.Intent)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void onExpandingFinished()>
<com.android.server.pm.PackageManagerService.Injector: android.app.AppOpsManager getAppOpsManager()>
<com.android.server.biometrics.face.FaceService: java.lang.String getLockoutResetIntent()>
<com.android.server.usb.descriptors.UsbACFeatureUnit: byte getUnitID()>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setBelowSpeedBump(boolean)>
<com.android.providers.settings.SettingsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.net.wifi.IWifiManager: void startSubscriptionProvisioning(android.net.wifi.hotspot2.OsuProvider,android.net.wifi.hotspot2.IProvisioningCallback)>
<com.android.settingslib.core.ConfirmationDialogController: java.lang.String getPreferenceKey()>
<javax.microedition.khronos.opengles.GL11: void glClipPlanef(int,java.nio.FloatBuffer)>
<com.android.systemui.statusbar.DragDownHelper.DragDownCallback: boolean isDragDownAnywhereEnabled()>
<com.android.settingslib.net.NetworkCycleDataLoader.Builder: com.android.settingslib.net.NetworkCycleDataLoader build()>
<com.android.server.tv.tunerresourcemanager.FrontendResource.Builder: com.android.server.tv.tunerresourcemanager.FrontendResource.Builder exclusiveGroupId(int)>
<com.android.server.pm.UserTypeDetails: int getBadgeNoBackground()>
<com.android.server.accessibility.gestures.TouchExplorer: void <init>(android.content.Context,com.android.server.accessibility.AccessibilityManagerService)>
<com.android.settingslib.suggestions.SuggestionLoader: void onDiscardResult(java.util.List)>
<com.android.server.ConnectivityService: android.os.IBinder startOrGetTestNetworkService()>
<com.android.server.pm.permission.PermissionManagerService.Injector: int checkPermission(java.lang.String,int,int)>
<com.android.server.textclassifier.TextClassificationManagerService.Lifecycle: void onStart()>
<com.android.server.locksettings.LockSettingsStrongAuth: void scheduleNonStrongBiometricIdleTimeout(int)>
<com.android.server.pm.pkg.PackageStateUnserialized: com.android.server.pm.pkg.PackageStateUnserialized setOverrideSeInfo(java.lang.String)>
<com.android.systemui.statusbar.NotificationShelf: void <init>(android.content.Context,android.util.AttributeSet,com.android.systemui.statusbar.phone.KeyguardBypassController)>
<com.android.systemui.dock.DockManager.AlignmentStateListener: void onAlignmentStateChanged(int)>
<com.android.systemui.volume.VolumeDialogImpl: void dump(java.io.PrintWriter)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void dismiss(boolean)>
<com.android.server.accessibility.AccessibilityUserState.ServiceInfoChangeListener: void onServiceInfoChangedLocked(com.android.server.accessibility.AccessibilityUserState)>
<com.android.systemui.qs.tiles.WifiTile.WifiDetailAdapter: void onDetailItemClick(com.android.systemui.qs.QSDetailItems.Item)>
<com.android.systemui.util.wakelock.DelayedWakeLock.Builder: void <init>(android.content.Context)>
<com.android.systemui.qs.tileimpl.QSTileImpl.AnimationIcon: java.lang.String toString()>
<com.android.systemui.statusbar.phone.PanelViewController: void startUnlockHintAnimation()>
<com.android.keyguard.KeyguardSliceView.Row: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.shortcut.ShortcutKeyDispatcher: void registerShortcutKey(long)>
<com.android.settingslib.graph.SignalDrawable: void <init>(android.content.Context)>
<com.android.systemui.keyguard.KeyguardService: android.os.IBinder onBind(android.content.Intent)>
<android.net.wifi.IWifiManager: void factoryReset(java.lang.String)>
<com.android.server.pm.dex.DynamicCodeLogger: void logDynamicCodeLoading(java.lang.String)>
<com.android.server.integrity.AppIntegrityManagerService: void <init>(android.content.Context)>
<com.android.systemui.qs.QSDetail: void onFinishInflate()>
<com.android.server.soundtrigger.SoundTriggerService.LocalSoundTriggerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_setsAppOpWithUsersAndWithoutFull()>
<com.android.systemui.statusbar.VibratorHelper: void <init>(android.content.Context)>
<com.android.systemui.wm.DisplayImeController.PerDisplay: void showInsets(int,boolean)>
<com.android.server.pm.PackageManagerService: android.content.ComponentName getHomeActivities(java.util.List)>
<com.android.server.VibratorService: int[] areEffectsSupported(int[])>
<com.android.systemui.shared.tracing.FrameProtoTracer.ProtoTraceParams: java.lang.Object updateBufferProto(java.lang.Object,java.util.ArrayList)>
<com.android.server.accessibility.AccessibilityManagerService: void setGestureDetectionPassthroughRegion(int,android.graphics.Region)>
<com.android.gallery3d.exif.ExifInterface: boolean addGpsTags(double,double)>
<com.android.systemui.qs.tiles.WifiTile: android.content.Intent getLongClickIntent()>
<com.android.settingslib.schedulesprovider.SchedulesProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<com.android.systemui.statusbar.policy.DeviceProvisionedController: boolean isUserSetup(int)>
<com.android.systemui.recents.OverviewProxyService: void notifyQuickStepStarted()>
<com.android.systemui.shared.system.TaskInfoCompat: android.content.ComponentName getTopActivity(android.app.TaskInfo)>
<android.app.backup.BackupUtilsTest: void testIsFileSpecifiedInPathList_whenDirectoryAndPathListHasParent()>
<com.android.systemui.classifier.FalsingLog: void wtf(java.lang.String,java.lang.String,java.lang.Throwable)>
<com.android.settingslib.media.InfoMediaDevice: android.graphics.drawable.Drawable getIcon()>
<com.android.server.utils.TimingsTraceAndSlog: java.lang.String toString()>
<com.android.systemui.statusbar.NotificationMediaManager: void setBiometricUnlockController(com.android.systemui.statusbar.phone.BiometricUnlockController)>
<com.android.systemui.qs.tiles.CastTile: void handleLongClick()>
<com.android.server.twilight.TwilightService: boolean handleMessage(android.os.Message)>
<android.wm.WindowAddRemovePerfTest: void tearDownClass()>
<com.android.systemui.statusbar.phone.KeyguardBouncer: void hide(boolean)>
<com.android.server.biometrics.face.FaceConstants: int actionBiometricEnroll()>
<com.android.server.ConnectivityService: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network,java.lang.String)>
<com.android.systemui.qs.tiles.BatterySaverTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.statusbar.policy.BatteryController)>
<com.android.systemui.statusbar.policy.UserSwitcherController.UserRecord: int resolveId()>
<com.android.server.PackageWatchdog.PackageHealthObserver: boolean mayObservePackage(java.lang.String)>
<com.android.settingslib.drawer.Tile: int getOrder()>
<android.net.wifi.aware.WifiAwareNetworkInfo: int describeContents()>
<com.android.systemui.qs.tiles.ColorInversionTile: void <init>(com.android.systemui.qs.QSHost)>
<com.android.server.protolog.ProtoLogImpl: void wtf(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>
<com.android.server.pm.Installer: void freeCache(java.lang.String,long,long,int)>
<com.android.location.provider.ProviderRequestUnbundled: void <init>(com.android.internal.location.ProviderRequest)>
<com.android.settingslib.media.MediaDevice: int getDeviceType()>
<android.net.wifi.rtt.CivicLocation: int describeContents()>
<com.android.networkstack.tethering.OffloadController: void setUpstreamLinkProperties(android.net.LinkProperties)>
<com.android.settingslib.inputmethod.InputMethodPreference.OnSavePreferenceListener: void onSaveInputMethodPreference(com.android.settingslib.inputmethod.InputMethodPreference)>
<com.android.settingslib.bluetooth.HearingAidProfile: int getConnectionPolicy(android.bluetooth.BluetoothDevice)>
<android.content.pm.PackageManagerInternal: void unsuspendForSuspendingPackage(java.lang.String,int)>
<com.android.server.audio.AudioService: void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
<com.android.systemui.statusbar.StatusBarIconView: boolean equalIcons(android.graphics.drawable.Icon,android.graphics.drawable.Icon)>
<com.android.systemui.MultiListLayout: void rotate(int,int)>
<com.android.printservice.recommendation.plugin.hp.ServiceListener.Observer: void dataSetChanged()>
<android.net.wifi.WifiNetworkSpecifier: int hashCode()>
<com.android.systemui.tracing.ProtoTracer: byte[] getProtoBytes(com.google.protobuf.nano.MessageNano)>
<android.net.wifi.WifiConfiguration: void setRandomizedMacAddress(android.net.MacAddress)>
<android.app.PendingIntentPerfTest: void createWithCancelFlag()>
<com.android.server.autofill.RemoteAugmentedAutofillService.RemoteAugmentedAutofillServiceCallbacks: void resetLastResponse()>
<com.android.server.usb.descriptors.Usb20ASFormatIIEx: byte getHeaderLength()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isStaticSharedLibrary()>
<android.app.backup.BackupUtilsTest: void testIsFileSpecifiedInPathList_whenFileAndPathListContainsFirstNotRelatedFileAndSecondSameFile()>
<com.android.server.tv.tunerresourcemanager.FrontendResource: java.lang.String toString()>
<com.android.keyguard.KeyguardPinBasedInputView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.shared.system.RemoteAnimationRunnerCompat: void onAnimationStart(com.android.systemui.shared.system.RemoteAnimationTargetCompat[],com.android.systemui.shared.system.RemoteAnimationTargetCompat[],java.lang.Runnable)>
<com.android.systemui.charging.WirelessChargingAnimation: void show(long)>
<com.android.systemui.qs.QSTileHost: void warn(java.lang.String,java.lang.Throwable)>
<com.android.systemui.statusbar.policy.HotspotControllerImpl: boolean isHotspotSupported()>
<com.android.systemui.statusbar.policy.PreviewInflater: android.view.View inflatePreview(android.content.Intent)>
<com.android.systemui.qs.TouchAnimator.Listener: void onAnimationStarted()>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getAdoptPermissions()>
<com.android.systemui.statusbar.policy.RemoteInputView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: android.view.View getContentView()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: com.android.systemui.statusbar.notification.TransformState getCurrentState(int)>
<com.android.server.textservices.TextServicesManagerService.Lifecycle: void onUnlockUser(int)>
<com.android.systemui.pip.phone.PipTouchState: android.graphics.PointF getVelocity()>
<android.net.wifi.IWifiManager: boolean reassociate(java.lang.String)>
<com.android.systemui.statusbar.phone.DozeServiceHost: void initialize(com.android.systemui.statusbar.phone.StatusBar,com.android.systemui.statusbar.phone.NotificationIconAreaController,com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager,com.android.systemui.statusbar.phone.NotificationShadeWindowViewController,com.android.systemui.statusbar.phone.NotificationPanelViewController,android.view.View)>
<com.android.settingslib.drawer.SwitchController.MetaData: com.android.settingslib.drawer.SwitchController.MetaData setIconBackgoundHint(int)>
<com.android.systemui.statusbar.RemoteInputController: void processForRemoteInput(android.app.Notification,android.content.Context)>
<com.android.systemui.statusbar.policy.SplitClockView: void onAttachedToWindow()>
<com.android.systemui.statusbar.phone.StatusBarIconList.Slot: void addHolder(com.android.systemui.statusbar.phone.StatusBarIconHolder)>
<com.android.future.usb.UsbAccessory: java.lang.String getModel()>
<com.android.settingslib.utils.AsyncLoaderCompat: void onStartLoading()>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: int getBackgroundColorWithoutTint()>
<com.android.systemui.statusbar.phone.ScrimController: void setPanelExpansion(float)>
<com.android.server.people.prediction.AppTargetPredictor: void onRequestPredictionUpdate()>
<com.android.server.pm.Installer: void dexopt(java.lang.String,int,java.lang.String,java.lang.String,int,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.String,java.lang.String,java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setManagedProfileMaximumTimeOff(android.content.ComponentName,long)>
<com.android.systemui.statusbar.policy.EthernetSignalController: void updateConnectivity(java.util.BitSet,java.util.BitSet)>
<com.android.systemui.statusbar.AlphaOptimizedView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.CornerHandleView: void updateDarkness(float)>
<com.android.systemui.shared.system.ActivityCompat: void unregisterRemoteAnimations()>
<com.android.systemui.qs.QuickQSPanel: int getNumQuickTiles()>
<com.android.systemui.qs.TileLayout: void onLayout(boolean,int,int,int,int)>
<com.android.server.people.data.DataManager: int mimeTypeToShareEventType(java.lang.String)>
<com.android.systemui.util.wakelock.WakeLock: java.lang.Runnable wrapImpl(com.android.systemui.util.wakelock.WakeLock,java.lang.Runnable)>
<com.android.keyguard.KeyguardPinBasedInputView: void setPasswordEntryInputEnabled(boolean)>
<com.android.server.vr.VrManagerInternal: void setVrMode(boolean,android.content.ComponentName,int,int,android.content.ComponentName)>
<com.android.server.SystemServiceManager: long getRuntimeStartElapsedTime()>
<com.android.powermodel.RawBatteryStats: java.util.List getMultiple(java.lang.Class)>
<com.android.systemui.classifier.FalsingManagerFake: boolean isUnlockingDisabled()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: int computeMaxKeyguardNotifications(int)>
<android.net.wifi.WifiManager: void startEasyConnectAsConfiguratorInitiator(java.lang.String,int,int,java.util.concurrent.Executor,android.net.wifi.EasyConnectStatusCallback)>
<com.android.server.audio.PlaybackActivityMonitor: void playerDeath(int)>
<com.android.systemui.screenrecord.ScreenInternalAudioRecorder: void start()>
<com.android.systemui.SwipeHelper: void onTranslationUpdate(android.view.View,float,boolean)>
<com.android.server.audio.BtHelper: java.lang.String scoAudioStateToString(int)>
<com.android.server.policy.WindowManagerPolicy.WindowState: int getSystemUiVisibility()>
<javax.obex.ServerRequestHandler: int onSetPath(javax.obex.HeaderSet,javax.obex.HeaderSet,boolean,boolean)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void handleLongClick()>
<com.android.settingslib.bluetooth.PbapClientProfile: java.util.List getConnectedDevices()>
<android.net.wifi.IWifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration,java.lang.String)>
<com.android.settingslib.RestrictedLockImageSpan: void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint)>
<com.android.settingslib.bluetooth.HidDeviceProfile: int getOrdinal()>
<com.android.printspooler.util.ApprovedPrintServices: void addApprovedService(android.content.ComponentName)>
<com.google.android.startop.iorap.SystemServiceEvent: java.lang.String toString()>
<android.net.wifi.WifiConfiguration: void setIpAssignment(android.net.IpConfiguration.IpAssignment)>
<com.android.systemui.statusbar.notification.row.FooterViewButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.settingslib.wifi.WifiEntryPreference: void onConnectResult(int)>
<com.android.photos.views.BlockingGLTextureView: void <init>(android.content.Context)>
<com.android.systemui.statusbar.phone.ScrimController: void scheduleUpdate()>
<android.net.wifi.hotspot2.PasspointConfiguration: java.util.Map getServiceFriendlyNames()>
<com.android.systemui.analytics.DataCollector: boolean isEnabled()>
<com.android.systemui.statusbar.NotificationShelf: void onLayout(boolean,int,int,int,int)>
<com.android.settingslib.animation.AppearAnimationUtils: void createAnimation(android.view.View,long,long,float,boolean,android.view.animation.Interpolator,java.lang.Runnable)>
<com.android.systemui.ForegroundServiceLifetimeExtender: void setCallback(com.android.systemui.statusbar.NotificationLifetimeExtender.NotificationSafeToRemoveCallback)>
<android.widget.TextViewSetTextLocalePerfTest: void testSetTextLocale()>
<com.android.systemui.statusbar.notification.collection.inflation.LowPriorityInflationHelper: boolean shouldUseLowPriorityView(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.storage.StorageSessionController: void onUserStopping(int)>
<com.android.server.tv.tunerresourcemanager.TunerResourceBasic: boolean isInUse()>
<com.android.uiautomator.core.UiObject: boolean pinchIn(int,int)>
<com.android.settingslib.media.MediaManager: com.android.settingslib.media.MediaDevice findMediaDevice(java.lang.String)>
<com.android.systemui.statusbar.policy.KeyguardUserSwitcherScrim: int getAlpha()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setQsCustomizerShowing(boolean)>
<com.android.systemui.keyguard.WorkLockActivity: void onWindowFocusChanged(boolean)>
<com.android.systemui.bubbles.animation.StackAnimationController: android.graphics.PointF getStartPosition()>
<android.os.StatsDimensionsValue: int getValueType()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setRowController(com.android.systemui.statusbar.notification.row.ExpandableNotificationRowController)>
<com.android.systemui.statusbar.policy.RemoteInputUriController: void <init>(com.android.internal.statusbar.IStatusBarService)>
<com.android.server.pm.PackageDexOptimizer.ForcedUpdatePackageDexOptimizer: void <init>(com.android.server.pm.Installer,java.lang.Object,android.content.Context,java.lang.String)>
<com.android.gallery3d.exif.ExifInterface: long[] getTagLongValues(int)>
<android.content.pm.PackageManagerInternal: boolean isEnabledAndMatches(android.content.pm.parsing.component.ParsedMainComponent,int,int)>
<com.android.settingslib.bluetooth.MapClientProfile: java.lang.String toString()>
<com.android.systemui.globalactions.GlobalActionsGridLayout: float getAnimationOffsetY()>
<com.android.systemui.statusbar.notification.stack.NotificationSection: boolean areBoundsAnimating()>
<com.android.server.recoverysystem.RecoverySystemService: boolean clearLskf()>
<com.android.systemui.statusbar.phone.DozeScrimController: void extendPulse()>
<com.android.systemui.car.window.OverlayPanelViewController: void toggle()>
<android.os.UserManagerInternal: void setForceEphemeralUsers(boolean)>
<android.net.wifi.hotspot2.OsuProvider: void <init>(android.net.wifi.WifiSsid,java.util.Map,java.lang.String,android.net.Uri,java.lang.String,java.util.List)>
<com.android.server.audio.AudioService.VolumeController: void postVolumeChanged(int,int)>
<com.android.server.SystemServer: void main(java.lang.String[])>
<com.android.systemui.statusbar.notification.stack.StackStateAnimator: void <init>(com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout)>
<com.android.systemui.shared.system.AssistDataReceiver: void onHandleAssistScreenshot(android.graphics.Bitmap)>
<com.android.systemui.recents.Recents: void preloadRecentApps()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setOnExpandedVisibleListener(java.lang.Runnable)>
<com.android.server.print.RemotePrintSpooler.PrintSpoolerCallbacks: void onPrintJobQueued(android.print.PrintJobInfo)>
<com.android.systemui.qs.SecureSetting: void setListening(boolean)>
<com.android.server.pm.Installer: long snapshotAppData(java.lang.String,int,int,int)>
<com.android.settingslib.CustomEditTextPreference.CustomPreferenceDialogFragment: com.android.settingslib.CustomEditTextPreference.CustomPreferenceDialogFragment newInstance(java.lang.String)>
<com.android.systemui.pip.BasePipManager: void dump(java.io.PrintWriter)>
<com.android.server.infra.FrameworkResourcesServiceNameResolver: void setTemporaryService(int,java.lang.String,int)>
<com.android.keyguard.KeyguardSimPukView: boolean shouldLockout(long)>
<com.android.localtransport.LocalTransport: int checkFullBackupSize(long)>
<com.android.server.autofill.ui.InlineFillUi: android.view.autofill.AutofillId getAutofillId()>
<android.perftests.utils.OneTimeSettingsListener: void assertCalled()>
<com.android.systemui.util.Utils.DisableStateTracker: void onViewAttachedToWindow(android.view.View)>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean willBeGone()>
<com.android.systemui.statusbar.phone.PanelView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.net.ip.IpServer.Dependencies: android.net.util.InterfaceParams getInterfaceParams(java.lang.String)>
<com.android.gallery3d.exif.ExifInterface: boolean addGpsDateTimeStampTag(long)>
<com.android.server.accessibility.MagnificationController: float getCenterX(int)>
<com.android.uiautomator.core.UiDevice: void sleep()>
<android.os.StrictModeTest: void timeVmViolation()>
<com.android.systemui.tuner.CustomListPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.localtransport.LocalTransportService: void onDestroy()>
<com.android.systemui.statusbar.phone.StatusBar: void executeActionDismissingKeyguard(java.lang.Runnable,boolean)>
<com.android.systemui.util.time.SystemClock: long elapsedRealtime()>
<com.android.systemui.keyguard.KeyguardViewMediator: void onBootCompleted()>
<com.android.settingslib.RestrictedLockUtilsInternal: android.graphics.drawable.Drawable getRestrictedPadlock(android.content.Context)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage: void destroy()>
<com.android.server.pm.PackageManagerService: int checkPermission(java.lang.String,java.lang.String,int)>
<com.android.server.usb.UsbPortManager: void resetSimulation(com.android.internal.util.IndentingPrintWriter)>
<com.android.settingslib.utils.applications.AppUtils: java.lang.String getAppContentDescription(android.content.Context,java.lang.String,int)>
<com.android.systemui.statusbar.phone.NotificationGroupManager: boolean isGroupChild(android.service.notification.StatusBarNotification)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setStub(boolean)>
<com.android.keyguard.KeyguardSecurityContainer: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.android.settingslib.core.lifecycle.ObservablePreferenceFragment: void onStop()>
<com.android.settingslib.dream.DreamBackend: void setActiveDream(android.content.ComponentName)>
<com.android.server.pm.UserTypeDetails.Builder: com.android.server.pm.UserTypeDetails.Builder setDefaultUserInfoPropertyFlags(int)>
<com.android.packageinstaller.UninstallUninstalling.UninstallUninstallingFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.systemui.statusbar.policy.KeyButtonView: void setVertical(boolean)>
<com.android.settingslib.fuelgauge.BatteryStatus: void <init>(int,int,int,int,int,boolean)>
<javax.obex.ObexTransport: java.io.DataOutputStream openDataOutputStream()>
<com.android.systemui.bubbles.BubbleController: int getExpandedDisplayId(android.content.Context)>
<com.android.server.AlarmManagerInternal.InFlightListener: void broadcastAlarmPending(int)>
<com.android.systemui.statusbar.KeyguardAffordanceView: void instantFinishAnimation()>
<com.android.printspooler.widget.PrintContentView: void focusableViewAvailable(android.view.View)>
<android.app.ResourcesPerfTest: void getFrameworkValue()>
<com.android.gallery3d.exif.ExifInterface: java.lang.String getUserComment()>
<com.android.dynsystem.SparseInputStream: void <init>(java.io.BufferedInputStream)>
<com.android.systemui.statusbar.NotificationRemoteInputManager.RemoteInputExtender: void setCallback(com.android.systemui.statusbar.NotificationLifetimeExtender.NotificationSafeToRemoveCallback)>
<com.android.systemui.pip.tv.dagger.TvPipComponent: com.android.systemui.pip.tv.PipControlsViewController getPipControlsViewController()>
<android.util.StatsLog: boolean logBinaryPushStateChanged(java.lang.String,long,int,int,long[])>
<com.android.server.pm.StagingManager.Lifecycle: void onBootPhase(int)>
<android.net.wifi.hotspot2.PasspointConfiguration: void setSubscriptionType(java.lang.String)>
<com.android.server.locksettings.VersionedPasswordMetrics: com.android.server.locksettings.VersionedPasswordMetrics deserialize(byte[])>
<com.android.systemui.tuner.LockscreenFragment.Adapter: int getItemCount()>
<com.android.localtransport.LocalTransport: com.android.localtransport.LocalTransportParameters getParameters()>
<android.media.MediaSession2.ControllerInfo: android.media.session.MediaSessionManager.RemoteUserInfo getRemoteUserInfo()>
<com.android.systemui.qs.external.PackageManagerAdapter: void <init>(android.content.Context)>
<com.android.settingslib.development.AbstractLogdSizePreferenceController: void displayPreference(androidx.preference.PreferenceScreen)>
<com.android.systemui.qs.customize.TileAdapter: void saveSpecs(com.android.systemui.qs.QSTileHost)>
<com.android.systemui.qs.SecureSetting: int getCurrentUser()>
<android.app.StatsManager: long[] setActiveConfigsChangedOperation(android.app.PendingIntent)>
<com.android.systemui.statusbar.AutoHideUiElement: boolean isVisible()>
<com.android.settingslib.applications.ApplicationsState: com.android.settingslib.applications.ApplicationsState.AppEntry getEntry(java.lang.String,int)>
<com.android.systemui.power.EnhancedEstimates: boolean isHybridNotificationEnabled()>
<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>
<com.android.keyguard.KeyguardSecurityView: void reset()>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: android.os.IBinder getWindowToken()>
<com.android.server.pm.RestrictionsSet: void <init>(int,android.os.Bundle)>
<com.android.settingslib.bluetooth.HeadsetProfile: boolean setActiveDevice(android.bluetooth.BluetoothDevice)>
<com.android.systemui.statusbar.phone.NavigationBarView: void onStatusBarPanelStateChanged()>
<com.android.keyguard.EmergencyButton: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.pm.UserRestrictionsUtils: java.util.Set getDefaultEnabledForManagedProfiles()>
<com.android.systemui.statusbar.policy.BluetoothController: boolean canConfigBluetooth()>
<com.android.systemui.car.bluetooth.CarBatteryController.BatteryViewHandler: void showBatteryView()>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: android.os.IBinder asBinder()>
<com.android.keyguard.KeyguardViewController: void onFinishedGoingToSleep()>
<com.android.systemui.statusbar.notification.ActivityLaunchAnimator.ExpandAnimationParameters: float getProgress(long,long)>
<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>
<com.android.printspooler.widget.PrintContentView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.wm.RelayoutPerfTest: void testRelayout()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: boolean isMobileDataNetworkInService()>
<com.android.systemui.assist.AssistHandleCallbacks: void hide()>
<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setIsChildInGroup(boolean)>
<com.android.server.usb.descriptors.UsbBinaryParser: void parseDescriptors(android.hardware.usb.UsbDeviceConnection,byte[],java.lang.StringBuilder)>
<com.android.server.autofill.ui.AutoFillUI: void hideFillUi(com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback)>
<com.android.settingslib.dream.DreamBackend: void setEnabled(boolean)>
<android.text.BoringLayoutIsBoringPerfTest: void timeIsBoring()>
<android.net.dhcp.DhcpServerCallbacks: java.lang.String getInterfaceHash()>
<android.app.ResourcesPerfTest: void getStringArray()>
<com.android.commands.am.Instrument: void run()>
<com.android.systemui.statusbar.phone.NotificationGroupManager: com.android.systemui.statusbar.notification.collection.NotificationEntry getGroupSummary(android.service.notification.StatusBarNotification)>
<com.android.server.input.InputManagerService: android.view.InputMonitor monitorGestureInput(java.lang.String,int)>
<com.android.keyguard.KeyguardMessageArea: void setMessage(java.lang.CharSequence)>
<com.android.server.pm.PackageManagerService: void notifyPackageRemoved(java.lang.String,int)>
<com.android.server.policy.PhoneWindowManager: void notifyLidSwitchChanged(long,boolean)>
<android.os.IStatsManagerService: byte[] getMetadata(java.lang.String)>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton2Text(int)>
<com.android.settingslib.media.MediaDevice: boolean isCarKitDevice()>
<com.android.systemui.globalactions.GlobalActionsDialog.MyOverflowAdapter: long getItemId(int)>
<com.android.systemui.statusbar.notification.row.AppOpsInfo: int getActualHeight()>
<com.android.server.accessibility.gestures.TouchState: android.view.MotionEvent getLastInjectedHoverEventForClick()>
<com.android.systemui.settings.BrightnessController.BrightnessStateChangeCallback: void onBrightnessLevelChanged()>
<com.android.systemui.car.volume.CarVolumeItem: int getGroupId()>
<com.android.systemui.qs.tileimpl.QSTileImpl.ResourceIcon: com.android.systemui.plugins.qs.QSTile.Icon get(int)>
<com.android.uiautomator.core.UiAutomationShellWrapper: android.app.UiAutomation getUiAutomation()>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void setChangingViewPositions(boolean)>
<android.net.wifi.aware.TlvBufferUtils.TlvElement: java.lang.String getString()>
<com.android.systemui.qs.tiles.ColorInversionTile: void handleClick()>
<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardOccluded()>
<android.net.wifi.hotspot2.PasspointConfiguration: void setSubscriptionExpirationTimeInMillis(long)>
<com.android.server.pm.permission.PermissionManagerServiceInternal.PermissionCallback: void onInstallPermissionRevoked()>
<com.android.systemui.bubbles.BubbleFlyoutView: void <init>(android.content.Context)>
<android.net.wifi.WifiInfo.Builder: android.net.wifi.WifiInfo.Builder setRssi(int)>
<com.android.media.tv.remoteprovider.TvRemoteProvider: void sendKeyUp(android.os.IBinder,int)>
<com.android.systemui.statusbar.policy.FlashlightControllerImpl: void removeCallback(com.android.systemui.statusbar.policy.FlashlightController.FlashlightListener)>
<com.android.systemui.plugins.VolumeDialog.Callback: void onZenSettingsClicked()>
<com.android.server.usb.descriptors.UsbDescriptor: java.lang.String getUsbDescriptorString(android.hardware.usb.UsbDeviceConnection,byte)>
<com.android.server.textclassifier.IconsContentProvider: boolean sameIcon(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.net.TetheringManager: java.lang.String[] getTetheredIfaces()>
<android.net.wifi.WifiScanner: void startConnectedPnoScan(android.net.wifi.WifiScanner.ScanSettings,android.net.wifi.WifiScanner.PnoSettings,java.util.concurrent.Executor,android.net.wifi.WifiScanner.PnoScanListener)>
<com.android.settingslib.media.MediaManager: void dispatchOnRequestFailed(int)>
<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: java.security.cert.X509Certificate getRootCertificate(java.lang.String)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isClearable()>
<com.android.systemui.statusbar.notification.collection.ListEntry: int getSection()>
<com.android.settingslib.CustomDialogPreferenceCompat.CustomPreferenceDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<javax.microedition.khronos.opengles.GL10: void glDrawElements(int,int,int,java.nio.Buffer)>
<com.android.printservice.recommendation.util.PrinterHashMap: java.util.ArrayList getPrinterAddresses()>
<com.android.printspooler.model.RemotePrintDocument: void finish()>
<android.net.wifi.rtt.ResponderLocation: boolean getRetentionExpiresIndication()>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest newInstance(java.lang.String,java.lang.String)>
<com.android.server.pm.PackageDexOptimizer: int dexoptSystemServerPath(java.lang.String,com.android.server.pm.dex.PackageDexUsage.DexUseInfo,com.android.server.pm.dex.DexoptOptions)>
<com.android.systemui.statusbar.phone.StatusBarIconList.Slot: void clear()>
<com.android.server.NetworkManagementInternal: boolean isNetworkRestrictedForUid(int)>
<com.android.systemui.recents.RecentsOnboarding: void onConnectedToLauncher()>
<com.android.systemui.statusbar.phone.dagger.StatusBarComponent.Builder: com.android.systemui.statusbar.phone.dagger.StatusBarComponent build()>
<com.android.systemui.qs.QSPanel: void clickTile(android.content.ComponentName)>
<android.os.ParcelPerfTest: void timeWriteInt()>
<com.android.systemui.pip.phone.PipManager: void setPinnedStackAnimationListener(com.android.systemui.shared.recents.IPinnedStackAnimationListener)>
<com.android.server.audio.AudioService: int getMinVolumeIndexForAttributes(android.media.AudioAttributes)>
<com.android.server.media.MediaSession2Record: boolean isActive()>
<com.android.systemui.globalactions.GlobalActionsDialog: boolean shouldShowAction(com.android.systemui.globalactions.GlobalActionsDialog.Action)>
<com.android.systemui.volume.SegmentedButtons: void addButton(int,int,java.lang.Object)>
<com.android.systemui.statusbar.notification.collection.GroupEntry: void setSummary(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.appbinding.finders.CarrierMessagingClientServiceFinder: void startMonitoring()>
<com.android.systemui.statusbar.NotificationMediaManager: void updateMediaMetaData(boolean,boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: com.android.systemui.statusbar.notification.row.NotificationContentView getShowingLayout()>
<com.android.systemui.statusbar.policy.BluetoothController: void connect(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setUnlockHintRunning(boolean)>
<com.android.systemui.qs.QSSecurityFooter: android.view.View getView()>
<com.android.server.biometrics.fingerprint.FingerprintService: java.lang.String getLockoutResetIntent()>
<com.android.egg.neko.NekoLand: void onDestroy()>
<com.android.systemui.statusbar.policy.RemoteInputQuickSettingsDisabler: int adjustDisableFlags(int)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage: com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage newInstance()>
<com.android.systemui.classifier.FalsingManagerImpl: void onScreenTurningOn()>
<com.android.keyguard.KeyguardUpdateMonitor: java.util.List getFilteredSubscriptionInfo(boolean)>
<android.net.NetworkMonitorManager: boolean notifyNetworkDisconnected()>
<com.android.server.SystemService: java.lang.Object getLocalService(java.lang.Class)>
<com.android.photos.views.TiledImageView: void positionFromMatrix(android.graphics.Matrix)>
<com.android.server.pm.UserRestrictionsUtils: boolean isSettingRestrictedForUser(android.content.Context,java.lang.String,int,java.lang.String,int)>
<android.net.wifi.p2p.WifiP2pManager: void requestOngoingPeerConfig(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.OngoingPeerInfoListener)>
<android.net.wifi.WifiManager.ScoreUpdateObserver: void notifyScoreUpdate(int,int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void launchCamera(boolean,int)>
<com.android.gallery3d.glrenderer.BasicTexture: void setBorder(boolean)>
<com.google.android.startop.iorap.AppLaunchEvent.ActivityLaunchCancelled: java.lang.String toStringBody()>
<com.android.settingslib.accounts.AuthenticatorHelper: java.lang.CharSequence getLabelForType(android.content.Context,java.lang.String)>
<com.android.server.pm.dex.ViewCompiler: boolean compileLayouts(com.android.server.pm.parsing.pkg.AndroidPackage)>
<android.media.MediaController2: java.lang.Object sendSessionCommand(android.media.Session2Command,android.os.Bundle)>
<com.android.systemui.qs.external.QSTileServiceWrapper: boolean onTileAdded()>
<com.android.systemui.shared.plugins.PluginPrefs: void <init>(android.content.Context)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: boolean canApplyTheme()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow.OnExpansionChangedListener: void onExpansionChanged(boolean)>
<com.android.systemui.statusbar.notification.logging.NotificationLogger: void onPanelExpandedChanged(boolean)>
<com.android.systemui.bubbles.BubbleViewProvider: void setContentVisibility(boolean)>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void setScrimController(com.android.systemui.statusbar.phone.ScrimController)>
<android.net.wifi.aware.WifiAwareNetworkInfo: java.net.Inet6Address getPeerIpv6Addr()>
<com.android.server.policy.PhoneWindowManager: boolean isKeyguardDrawnLw()>
<com.android.systemui.shared.system.QuickStepContract: int getQuickScrubTouchSlopPx()>
<com.android.server.policy.PhoneWindowManager: android.view.animation.Animation createHiddenByKeyguardExit(boolean,boolean,boolean)>
<android.net.wifi.WifiScanner.ActionListener: void onSuccess()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glFramebufferRenderbufferOES(int,int,int,int)>
<android.net.wifi.BatchedScanResult: int describeContents()>
<com.android.server.accessibility.AccessibilityManagerService: java.util.ArrayList getValidDisplayList()>
<android.net.wifi.IWifiManager: void registerSoftApCallback(android.os.IBinder,android.net.wifi.ISoftApCallback,int)>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void lockScreenSecretChanged(int,byte[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetFloatv(int,java.nio.FloatBuffer)>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onActivityDismissingDockedStack()>
<com.android.server.media.MediaResourceMonitorService: void <init>(android.content.Context)>
<com.android.externalstorage.ExternalStorageProvider: java.io.File getFileForDocId(java.lang.String,boolean)>
<com.android.server.pm.RestrictionsSet: android.os.Bundle mergeAll()>
<com.android.server.media.MediaSessionRecord: android.media.session.MediaSession.Token getSessionToken()>
<com.android.settingslib.RestrictedLockUtils.EnforcedAdmin: void <init>(android.content.ComponentName,android.os.UserHandle)>
<com.android.gallery3d.exif.Rational: double toDouble()>
<com.android.systemui.qs.tileimpl.QSTileBaseView: boolean animationsEnabled()>
<com.android.server.utils.DeviceConfigInterface: java.lang.String getProperty(java.lang.String,java.lang.String)>
<android.net.wifi.IWifiManager: void addOnWifiUsabilityStatsListener(android.os.IBinder,android.net.wifi.IOnWifiUsabilityStatsListener,int)>
<android.net.wifi.p2p.WifiP2pManager: void setWifiP2pChannels(android.net.wifi.p2p.WifiP2pManager.Channel,int,int,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.systemui.statusbar.phone.NavigationBarTransitions: void <init>(com.android.systemui.statusbar.phone.NavigationBarView,com.android.systemui.statusbar.CommandQueue)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)>
<com.android.systemui.statusbar.notification.interruption.HeadsUpViewBinder: void setPresenter(com.android.systemui.statusbar.NotificationPresenter)>
<com.android.server.timezone.ConfigHelper: int getCheckTimeAllowedMillis()>
<com.android.server.MountServiceIdler: void scheduleIdlePass(android.content.Context)>
<android.database.SQLiteDatabaseIoPerfTest: void testDatabaseModifications()>
<com.android.server.biometrics.Utils: boolean isAtLeastStrength(int,int)>
<com.android.systemui.pip.phone.PipTouchGesture: boolean onMove(com.android.systemui.pip.phone.PipTouchState)>
<com.android.server.pm.UserManagerService: void evictCredentialEncryptionKey(int)>
<com.android.systemui.keyboard.KeyboardUI: void <init>(android.content.Context)>
<com.android.server.accessibility.FingerprintGestureDispatcher: void updateClientList(java.util.List)>
<com.android.systemui.statusbar.phone.PhoneStatusBarTransitions: android.animation.ObjectAnimator animateTransitionTo(android.view.View,float)>
<com.android.server.inputmethod.InputMethodManagerService: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)>
<com.android.systemui.plugins.qs.QSTileView: com.android.systemui.plugins.qs.QSIconView getIcon()>
<android.net.wifi.p2p.WifiP2pManager: void requestPeers(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.PeerListListener)>
<com.android.server.biometrics.Constants: java.lang.String tagAuthToken()>
<com.android.location.provider.ActivityRecognitionProvider: void registerSink(com.android.location.provider.ActivityRecognitionProvider.Sink)>
<com.android.systemui.qs.SecureSetting: void setValue(int)>
<com.android.server.contentcapture.ContentCaptureManagerService: boolean isUserSupported(com.android.server.SystemService.TargetUser)>
<android.net.wifi.aware.TlvBufferUtils: boolean isValidEndian(byte[],int,int,java.nio.ByteOrder)>
<com.android.server.pm.UserManagerService: android.os.PersistableBundle getSeedAccountOptions()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setLayerType(int,android.graphics.Paint)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>
<android.net.wifi.WifiManager: void unregisterTrafficStateCallback(android.net.wifi.WifiManager.TrafficStateCallback)>
<com.android.server.pm.PackageManagerServiceUtils: void dumpCriticalInfo(android.util.proto.ProtoOutputStream)>
<com.android.server.locksettings.LockSettingsService: void scheduleNonStrongBiometricIdleTimeout(int)>
<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isCrossProfile()>
<com.android.networkstack.tethering.OffloadHardwareInterface.ControlCallback: void onNatTimeoutUpdate(int,java.lang.String,int,java.lang.String,int)>
<com.android.server.pm.PackageInstallerSession: void abandon()>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String getDnsQueryName()>
<com.android.server.pm.UserTypeDetails.Builder: com.android.server.pm.UserTypeDetails.Builder setDarkThemeBadgeColors(int[])>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void removeContainerView(android.view.View)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: int getCollapsedHeight()>
<com.android.server.pm.PackageManagerService: boolean compileLayouts(java.lang.String)>
<com.android.systemui.statusbar.phone.ScrimController: void onExpandingFinished()>
<com.android.server.biometrics.BiometricUserState: java.util.ArrayList getCopy(java.util.ArrayList)>
<com.android.systemui.shared.system.ActivityOptionsCompat: android.app.ActivityOptions makeRemoteAnimation(com.android.systemui.shared.system.RemoteAnimationAdapterCompat)>
<com.android.systemui.biometrics.AuthContainerView: boolean isAllowDeviceCredentials()>
<com.android.server.audio.AudioService: boolean hasRegisteredDynamicPolicy()>
<com.android.networkstack.tethering.EntitlementManager: void requestLatestTetheringEntitlementResult(int,android.os.ResultReceiver,boolean)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator withStiffness(float)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void clearInteractAcrossProfilesAppOps()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean shouldSuppressStatusBar()>
<com.android.server.usb.descriptors.Usb20ASGeneral: byte getFormatType()>
<com.android.photos.views.TiledImageRenderer: void <init>(android.view.View)>
<com.android.systemui.statusbar.NotificationMediaManager: boolean isPlayingState(int)>
<com.android.server.usb.descriptors.tree.UsbDescriptorsTreeNode: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<android.net.wifi.aware.ConfigRequest: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.policy.KeyButtonDrawable: void setRotation(float)>
<com.android.egg.paint.PaintActivity: void onTrimMemory(int)>
<com.android.settingslib.suggestions.SuggestionController: void dismissSuggestions(android.service.settings.suggestions.Suggestion)>
<com.android.systemui.analytics.DataCollector: void onLeftAffordanceOn()>
<com.android.server.tv.tunerresourcemanager.ClientProfile: int getUseCase()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setAutoTimeEnabled(android.content.ComponentName,boolean)>
<com.android.server.biometrics.RemovalClient: boolean onAuthenticated(android.hardware.biometrics.BiometricAuthenticator.Identifier,boolean,java.util.ArrayList)>
<com.android.settingslib.bluetooth.MapProfile: java.util.List getConnectedDevices()>
<com.android.systemui.qs.QSTileHost: com.android.systemui.plugins.qs.QSTileView createTileView(com.android.systemui.plugins.qs.QSTile,boolean)>
<com.android.systemui.statusbar.phone.EdgeBackGestureHandler: void dump(java.io.PrintWriter)>
<com.android.server.adb.AdbDebuggingManager: void denyDebugging()>
<android.perftests.utils.ManualBenchmarkState: void addExtraResult(java.lang.String,long)>
<android.net.wifi.WifiScanner: void stopBackgroundScan(android.net.wifi.WifiScanner.ScanListener)>
<javax.microedition.khronos.opengles.GL11: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glTexParameterxv(int,int,java.nio.IntBuffer)>
<com.android.server.audio.AudioEventLogger.StringEvent: java.lang.String eventToString()>
<com.android.systemui.shared.system.ActivityOptionsCompat: android.app.ActivityOptions makeFreeformOptions()>
<com.android.server.storage.StorageSessionController.ExternalStorageServiceException: void <init>(java.lang.String)>
<com.android.systemui.car.notification.NotificationPanelViewController: boolean shouldShowStatusBarInsets()>
<com.android.server.hdmi.HdmiCecFeatureAction.ActionTimer: void sendTimerMessage(int,long)>
<com.android.systemui.qs.customize.QSCustomizer: void setQs(com.android.systemui.plugins.qs.QS)>
<com.android.settingslib.Utils: android.graphics.drawable.Drawable getBadgedIcon(android.content.Context,android.graphics.drawable.Drawable,android.os.UserHandle)>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: java.lang.String getDeviceOwnerName()>
<com.android.systemui.BatteryMeterView: void useWallpaperTextColor(boolean)>
<com.android.uiautomator.core.UiDevice: void dumpWindowHierarchy(java.lang.String)>
<com.android.systemui.ForegroundServiceLifetimeExtender: boolean shouldExtendLifetimeForPendingNotification(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.settingslib.location.RecentLocationAccesses: java.util.List getAppList()>
<com.android.systemui.plugins.VolumeDialogController: void removeCallback(com.android.systemui.plugins.VolumeDialogController.Callbacks)>
<com.android.systemui.qs.tiles.DndTile: void handleClick()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.String getActiveRootOfTrust(int,int)>
<com.android.systemui.statusbar.policy.KeyguardStateControllerImpl: void notifyKeyguardFadingAway(long,long,boolean)>
<com.android.server.integrity.parser.RuleMetadataParser: com.android.server.integrity.model.RuleMetadata parse(java.io.InputStream)>
<com.android.server.statusbar.StatusBarManagerService: void onGlobalActionsShown()>
<com.android.server.biometrics.Constants: java.lang.String logTag()>
<com.android.systemui.qs.TileLayout: boolean setMaxColumns(int)>
<com.android.server.usb.UsbService: boolean isFunctionEnabled(java.lang.String)>
<android.net.wifi.AnqpInformationElement: int getElementId()>
<android.content.pm.PackageManagerInternal: void notifyPackageUse(java.lang.String,int)>
<com.android.systemui.car.navigationbar.CarNavigationBar: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.display.VirtualDisplayAdapter: void <init>(com.android.server.display.DisplayManagerService.SyncRoot,android.content.Context,android.os.Handler,com.android.server.display.RampAnimator.Listener)>
<javax.obex.PrivateInputStream: void <init>(javax.obex.BaseStream)>
<com.android.server.pm.IntentFilterVerificationState: int getState()>
<com.android.systemui.qs.QSDetailClipper: void cancelAnimator()>
<com.android.server.display.utils.AmbientFilterFactory: com.android.server.display.utils.AmbientFilter createAmbientFilter(java.lang.String,int,float)>
<com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] packVaultParams(java.security.PublicKey,long,int,byte[])>
<com.android.server.appbinding.finders.AppServiceFinder: void <init>(android.content.Context,java.util.function.BiConsumer,android.os.Handler)>
<com.android.server.accounts.IAccountAuthenticatorCache: boolean getBindInstantServiceAllowed(int)>
<com.android.printservice.recommendation.util.Preconditions: int checkArgumentNonnegative(int)>
<com.android.systemui.shared.system.ActivityManagerWrapper: boolean supportsFreeformMultiWindow(android.content.Context)>
<com.android.server.timedetector.TimeDetectorStrategy.Callback: long elapsedRealtimeMillis()>
<com.android.systemui.shared.recents.view.RecentsTransition: android.graphics.Bitmap drawViewIntoHardwareBitmap(int,int,android.view.View,float,int)>
<com.android.systemui.settings.ToggleSliderView: void setChecked(boolean)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceFactory: com.android.server.display.whitebalance.DisplayWhiteBalanceController create(android.os.Handler,android.hardware.SensorManager,android.content.res.Resources)>
<com.android.networkstack.tethering.OffloadController: void setLocalPrefixes(java.util.Set)>
<com.android.server.usb.UsbService: void resetUsbGadget()>
<com.android.server.storage.DeviceStorageMonitorService: void onStart()>
<com.android.systemui.car.userswitcher.UserSwitchTransitionViewMediator: void setupOverlayContentViewControllers()>
<com.android.systemui.pip.PipBoundsHandler: void onResetReentryBounds(android.content.ComponentName)>
<android.net.wifi.WifiInfo: void setWifiStandard(int)>
<com.android.systemui.qs.QSDetailClipper: void showBackground()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: java.lang.String toString()>
<com.android.uiautomator.core.UiCollection: void <init>(com.android.uiautomator.core.UiSelector)>
<com.android.systemui.statusbar.ViewTransformationHelper: void transformFrom(com.android.systemui.statusbar.TransformableView)>
<com.android.systemui.qs.PagedTileLayout.TilePage: void <init>(android.content.Context,android.util.AttributeSet)>
<android.os.UserManagerInternal: void setUserState(int,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onWindowFocusChanged(boolean)>
<android.os.SomeService: void onCreate()>
<com.android.systemui.statusbar.notification.row.ExpandableView: int getClipBottomAmount()>
<android.net.wifi.SoftApCapability: int hashCode()>
<com.android.systemui.pip.phone.PipTouchState: void setAllowTouches(boolean)>
<com.android.server.policy.PhoneWindowManager: void hideBootMessages()>
<com.android.systemui.util.wakelock.DelayedWakeLock: void acquire(java.lang.String)>
<com.android.systemui.usb.UsbContaminantActivity: void onWindowAttributesChanged(android.view.WindowManager.LayoutParams)>
<com.android.server.security.KeyChainSystemService: void onStart()>
<com.android.server.pm.permission.PermissionsState: java.util.List getInstallPermissionStates()>
<com.android.systemui.statusbar.notification.stack.NotificationListItem: boolean isBlockingHelperShowing()>
<com.android.systemui.statusbar.phone.PanelViewController: void notifyBarPanelExpansionChanged()>
<android.text.StaticLayoutPerfTest: void testDraw_PrecomputedText_NoStyled_WithoutCache()>
<com.android.server.pm.PackageManagerServiceUtils: int decompressFile(java.io.File,java.io.File)>
<com.android.systemui.model.SysUiState: int getFlags()>
<com.android.gallery3d.common.Utils: float interpolateAngle(float,float,float)>
<com.android.server.usb.UsbService: void getDeviceList(android.os.Bundle)>
<com.android.systemui.statusbar.notification.dagger.NotificationsModule: com.android.systemui.statusbar.notification.logging.NotificationPanelLogger provideNotificationPanelLogger()>
<com.android.future.usb.UsbAccessory: java.lang.String getSerial()>
<com.android.systemui.classifier.ProximityClassifier: java.lang.String getTag()>
<com.android.server.biometrics.AuthenticationClient: boolean onError(long,int,int)>
<com.android.server.input.InputManagerService: void setWindowManagerCallbacks(com.android.server.input.InputManagerService.WindowManagerCallbacks)>
<com.android.systemui.keyguard.KeyguardSliceProvider: void onZenChanged(int)>
<com.google.android.startop.iorap.DexOptEvent: boolean equals(java.lang.Object)>
<com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException: void <init>(java.lang.String)>
<com.android.systemui.volume.VolumeDialogControllerImpl.MediaSessionsCallbacks: void onRemoteRemoved(android.media.session.MediaSession.Token)>
<android.text.PaintMeasureDrawPerfTest: java.util.Collection cases()>
<android.content.pm.PackageManagerInternal: android.content.pm.SuspendDialogInfo getSuspendedDialogInfo(java.lang.String,java.lang.String,int)>
<com.android.server.usb.descriptors.UsbASFormat: void <init>(int,byte,byte,byte,int)>
<android.database.CursorWindowPerfTest: void setup()>
<com.android.server.TelephonyRegistry: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<javax.obex.HeaderSet: boolean getEmptyNameHeader()>
<com.google.android.startop.iorap.AppLaunchEvent: java.lang.String toString()>
<com.android.systemui.statusbar.phone.NotificationGroupAlertTransferHelper: boolean isAlertTransferPending(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.signedconfig.SignedConfigEvent: void send()>
<com.android.printspooler.model.MutexFileProvider: void releaseFile()>
<com.android.server.statusbar.StatusBarManagerService: void onDisplayRemoved(int)>
<com.android.server.inputmethod.InputMethodManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.bubbles.animation.StackAnimationController: android.graphics.RectF getAllowableStackPositionRegion()>
<com.android.server.usb.descriptors.UsbACMixerUnit: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: void setMenuClickListener(com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.OnMenuEventListener)>
<com.android.systemui.statusbar.phone.StatusBar: void onPowerSaveChanged(boolean)>
<android.net.wifi.IWifiManager: int getWifiApEnabledState()>
<com.android.powermodel.component.ModemProfile.Builder: void setSleepMa(float)>
<com.android.server.pm.permission.PermissionManagerService.Injector: void disablePackageNamePermissionCache()>
<com.android.printservice.recommendation.plugin.samsung.SamsungRecommendationPlugin: int getName()>
<com.android.systemui.tuner.SelectablePreference: void setIcon(android.graphics.drawable.Drawable)>
<com.android.server.pm.dex.DexoptOptions: boolean isDexoptInstallWithDexMetadata()>
<com.android.server.people.data.Event: int getDurationSeconds()>
<com.android.server.TelephonyRegistry: void notifyPreciseCallState(int,int,int,int,int)>
<com.android.systemui.volume.ConfigurableTexts: void <init>(android.content.Context)>
<com.android.systemui.plugins.VolumeDialogController.Callbacks: void onConfigurationChanged()>
<com.android.systemui.statusbar.phone.StatusIconContainer: void onLayout(boolean,int,int,int,int)>
<com.android.systemui.screenrecord.ScreenRecordingAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.server.pm.PackageManagerService: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>
<com.android.systemui.statusbar.policy.RemoteInputView: boolean isSending()>
<com.android.server.testing.shadows.ShadowPerformUnifiedRestoreTask: boolean isFullSystemRestore()>
<com.android.gallery3d.exif.ExifTag: java.lang.String getValueAsString()>
<com.android.server.biometrics.face.FaceUtils: com.android.server.biometrics.face.FaceUtils getInstance()>
<com.android.systemui.plugins.NotificationListenerController: boolean onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void startFinishDozeAnimation()>
<com.android.systemui.statusbar.policy.RemoteInputView: void focusAnimated()>
<com.android.server.biometrics.BiometricUtils: java.util.List getBiometricsForUser(android.content.Context,int)>
<com.android.gallery3d.exif.ExifTag: boolean setValue(byte[],int,int)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationMessagingTemplateViewWrapper: void updateTransformedTypes()>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void addNotificationLifetimeExtender(com.android.systemui.statusbar.NotificationLifetimeExtender)>
<com.android.systemui.qs.tileimpl.QSIconViewImpl: android.view.View getIconView()>
<android.net.wifi.WifiManager.LocalOnlyHotspotObserver: void onStarted(android.net.wifi.SoftApConfiguration)>
<android.os.IIdmap2: boolean removeIdmap(java.lang.String,int)>
<com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm: float updateChildZValue(int,float,com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm.StackScrollAlgorithmState,com.android.systemui.statusbar.notification.stack.AmbientState,boolean)>
<com.android.systemui.globalactions.GlobalActionsFlatLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.pm.Installer: boolean dumpProfiles(int,java.lang.String,java.lang.String,java.lang.String)>
<android.net.wifi.hotspot2.PasspointConfiguration: void setUsageLimitDataLimit(long)>
<com.android.systemui.statusbar.policy.RemoteInputView: java.lang.CharSequence getText()>
<com.android.systemui.statusbar.policy.BluetoothController: boolean isBluetoothSupported()>
<com.android.systemui.qs.tileimpl.QSTileImpl.AnimationIcon: android.graphics.drawable.Drawable getDrawable(android.content.Context)>
<com.android.systemui.qs.tiles.DndTile: com.android.systemui.plugins.qs.QSTile.BooleanState newTileState()>
<com.android.systemui.shared.system.TaskStackChangeListener: void onActivityDismissingDockedStack()>
<com.android.server.slice.SliceFullAccessList: boolean hasFullAccess(java.lang.String,int)>
<android.content.pm.PackageManagerInternal: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int,int)>
<com.android.systemui.car.CarDeviceProvisionedController: boolean isCurrentUserFullySetup()>
<com.android.keyguard.KeyguardSecurityContainer: void showMessage(java.lang.CharSequence,android.content.res.ColorStateList)>
<com.android.keyguard.KeyguardSecurityContainer: boolean startDisappearAnimation(java.lang.Runnable)>
<com.android.systemui.dagger.DependencyProvider: com.android.systemui.shared.system.ActivityManagerWrapper provideActivityManagerWrapper()>
<com.android.server.autofill.ui.FillUi.Callback: void cancelSession()>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: java.util.List getInstrumentations()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)>
<com.android.systemui.statusbar.notification.collection.NotifPipeline: void addCollectionListener(com.android.systemui.statusbar.notification.collection.notifcollection.NotifCollectionListener)>
<com.android.settingslib.bluetooth.HidDeviceProfile: java.lang.String toString()>
<android.perftests.utils.Stats: int getSize()>
<android.content.pm.PackageManagerInternal: java.lang.String getSuspendingPackage(java.lang.String,int)>
<com.android.systemui.biometrics.AuthBiometricView: void <init>(android.content.Context)>
<com.android.server.autofill.Helper: void printlnRedactedText(java.io.PrintWriter,java.lang.CharSequence)>
<com.android.systemui.statusbar.phone.NavigationBarTransitions: void destroy()>
<com.android.systemui.RegionInterceptingFrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.settingslib.widget.AdaptiveOutlineDrawable: int getIntrinsicWidth()>
<com.android.systemui.plugins.PluginFragment: void onCreate(android.content.Context,android.content.Context)>
<android.net.wifi.hotspot2.pps.Policy.RoamingPartner: void setPriority(int)>
<com.android.server.pm.pkg.PackageStateUnserialized: boolean isUpdatedSystemApp()>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton1Enabled(boolean)>
<com.android.wallpaperbackup.WallpaperBackupAgent: java.io.File getWallpaperDir()>
<android.net.wifi.aware.WifiAwareNetworkSpecifier: int hashCode()>
<com.android.server.usb.descriptors.report.TextReportCanvas: void writeParagraph(java.lang.String,boolean)>
<com.android.server.ConnectivityService: void startNattKeepaliveWithFd(android.net.Network,java.io.FileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)>
<com.android.keyguard.KeyguardSecurityContainer: com.android.keyguard.KeyguardSecurityModel.SecurityMode getSecurityMode()>
<com.android.systemui.statusbar.notification.collection.init.NotifPipelineInitializer: void <init>(com.android.systemui.statusbar.notification.collection.NotifPipeline,com.android.systemui.statusbar.notification.collection.coalescer.GroupCoalescer,com.android.systemui.statusbar.notification.collection.NotifCollection,com.android.systemui.statusbar.notification.collection.ShadeListBuilder,com.android.systemui.statusbar.notification.collection.coordinator.NotifCoordinators,com.android.systemui.statusbar.notification.collection.NotifInflaterImpl,com.android.systemui.dump.DumpManager,com.android.systemui.statusbar.FeatureFlags,com.android.systemui.statusbar.notification.collection.NotifViewManager)>
<com.android.systemui.statusbar.policy.SmartReplyView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.dagger.SystemUIBinder: com.android.systemui.SystemUI bindLatencyTester(com.android.systemui.LatencyTester)>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageCache: void purge()>
<com.android.server.usb.UsbDeviceManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>
<com.android.systemui.statusbar.notification.row.NotificationGuts: boolean isExposed()>
<com.android.systemui.globalactions.ListGridLayout: void setExpectedCount(int)>
<com.android.systemui.bubbles.BubbleData: boolean hasOverflowBubbleWithKey(java.lang.String)>
<com.android.systemui.ExpandHelper: void setGravity(int)>
<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isShowing()>
<com.android.systemui.statusbar.notification.row.NotificationGuts.GutsContent: void setGutsParent(com.android.systemui.statusbar.notification.row.NotificationGuts)>
<com.android.server.usb.descriptors.ByteStream: void advance(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean shouldHideBackground()>
<com.android.systemui.qs.tiles.LocationTile: android.content.Intent getLongClickIntent()>
<com.android.systemui.statusbar.notification.MessagingImageTransformState: com.android.systemui.statusbar.notification.MessagingImageTransformState obtain()>
<com.android.printspooler.widget.ClickInterceptSpinner: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.row.NotificationInfo: int getActualHeight()>
<com.android.settingslib.suggestions.SuggestionLoaderCompat: void onDiscardResult(java.util.List)>
<com.android.systemui.pip.phone.PipMenuActivity: void setTaskDescription(android.app.ActivityManager.TaskDescription)>
<com.android.systemui.qs.QSContainerImpl: void onMeasure(int,int)>
<com.android.systemui.classifier.FalsingManagerProxy: void onSuccessfulUnlock()>
<com.android.server.uri.UriPermissionOwner: android.os.Binder getExternalToken()>
<com.android.systemui.shared.system.PinnedStackListenerForwarder: void onActivityHidden(android.content.ComponentName)>
<com.android.server.usb.UsbPortManager: void setPortRoles(java.lang.String,int,int,com.android.internal.util.IndentingPrintWriter)>
<com.android.egg.neko.NekoService: boolean onStartJob(android.app.job.JobParameters)>
<com.android.systemui.statusbar.phone.NotificationListenerWithPlugins: void unregisterAsSystemService()>
<com.android.settingslib.drawer.Tile: java.lang.CharSequence getTitle(android.content.Context)>
<com.android.server.autofill.ui.AutoFillUI: void showFillUi(android.view.autofill.AutofillId,android.service.autofill.FillResponse,java.lang.String,java.lang.String,android.content.ComponentName,java.lang.CharSequence,android.graphics.drawable.Drawable,com.android.server.autofill.ui.AutoFillUI.AutoFillUiCallback,int,boolean)>
<com.android.systemui.CarSystemUIModule: com.android.systemui.plugins.qs.QSFactory bindQSFactory(com.android.systemui.qs.tileimpl.QSFactoryImpl)>
<com.android.systemui.statusbar.phone.NotificationIconContainer: boolean hasOverflow()>
<com.android.settingslib.drawer.Tile: java.lang.String getDescription()>
<com.android.systemui.statusbar.notification.TransformState: void setTransformationStartX(float)>
<com.android.server.pm.permission.PermissionManagerService: void grantDefaultPermissionsToActiveLuiApp(java.lang.String,int)>
<com.android.settingslib.bluetooth.BluetoothCallback: void onScanningStateChanged(boolean)>
<com.android.role.persistence.RolesPersistence: com.android.role.persistence.RolesState readForUser(android.os.UserHandle)>
<android.app.usage.UsageStatsManagerInternal: void onActiveAdminAdded(java.lang.String,int)>
<com.android.systemui.recents.OverviewProxyService: void notifyQuickScrubStarted()>
<com.android.systemui.qs.QSDualTileLabel: void setTypeface(android.graphics.Typeface)>
<com.android.settingslib.volume.MediaSessions.Callbacks: void onRemoteVolumeChanged(android.media.session.MediaSession.Token,int)>
<com.android.systemui.settings.BrightnessController: void addStateChangedCallback(com.android.systemui.settings.BrightnessController.BrightnessStateChangeCallback)>
<com.android.gallery3d.common.Utils: java.lang.Object checkNotNull(java.lang.Object)>
<com.android.systemui.assist.AssistOrbContainer: void <init>(android.content.Context,android.util.AttributeSet,int)>
<javax.microedition.khronos.opengles.GL11Ext: void glMatrixIndexPointerOES(int,int,int,int)>
<com.android.settingslib.bluetooth.PbapClientProfile: boolean pbapClientExists()>
<com.android.server.appop.AppOpsService: void updateUidProcState(int,int,int)>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void setRecoveryStatus(java.lang.String,int)>
<com.android.systemui.statusbar.phone.SettingsButton: boolean isAnimating()>
<com.android.server.usb.UsbAlsaDevice: int getDeviceNum()>
<com.android.lock_checker.LockHook: void postLock(java.lang.Object)>
<com.android.systemui.statusbar.phone.StatusBar: boolean isWakeUpComingFromTouch()>
<com.android.systemui.statusbar.phone.StatusBar: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isMasterVolumeMuted(android.content.ComponentName)>
<com.android.server.pm.PreferredComponent: boolean sameSet(android.content.ComponentName[])>
<com.android.server.usb.descriptors.UsbInterfaceDescriptor: int getUsbSubclass()>
<com.android.server.pm.pkg.PackageStateUnserialized: java.util.List getUsesLibraryInfos()>
<com.android.keyguard.KeyguardSecurityView: boolean startDisappearAnimation(java.lang.Runnable)>
<com.android.server.tv.TvInputManagerService: void onStart()>
<android.graphics.perftests.TypefaceCreatePerfTest: void testCreate_fromFile()>
<android.os.KernelCpuThreadReaderPerfTest: void timeReadCurrentProcessCpuUsage()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onExpansionStarted()>
<com.android.gallery3d.exif.ExifInterface: java.util.List getTagsForIfdId(int)>
<com.android.statementservice.DirectStatementService: android.os.IBinder onBind(android.content.Intent)>
<android.net.TetheringManager.TetheringInterfaceRegexps: int hashCode()>
<com.android.systemui.shared.system.WindowManagerWrapper: android.view.SurfaceControl mirrorDisplay(int)>
<com.android.server.locksettings.recoverablekeystore.KeyStoreProxyImpl: java.security.KeyStore getAndLoadAndroidKeyStore()>
<javax.microedition.khronos.opengles.GL10: void glMaterialfv(int,int,java.nio.FloatBuffer)>
<com.android.systemui.biometrics.AuthBiometricFaceView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.settingslib.bluetooth.PanProfile: boolean isProfileReady()>
<com.android.systemui.statusbar.phone.StatusBar: void postStartActivityDismissingKeyguard(android.content.Intent,int)>
<com.android.server.biometrics.face.FaceConstants: java.lang.String tagEnrollStartError()>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordComplexity(boolean)>
<com.android.server.media.MediaSessionRecordImpl: boolean sendMediaButton(java.lang.String,int,int,boolean,android.view.KeyEvent,int,android.os.ResultReceiver)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: void onParentHeightUpdate()>
<com.android.systemui.statusbar.notification.stack.StackStateAnimator: void animateOverScrollToAmount(float,boolean,boolean)>
<com.android.systemui.statusbar.GestureRecorder: void tag(long,java.lang.String)>
<com.android.systemui.statusbar.phone.StatusBarIconController: void setIconVisibility(java.lang.String,boolean)>
<com.android.server.pm.pkg.PackageStateUnserialized: long getLatestForegroundPackageUseTimeInMills()>
<com.android.keyguard.CarrierTextController.CarrierTextCallback: void startedGoingToSleep()>
<com.android.systemui.ExpandHelper.Callback: com.android.systemui.statusbar.notification.row.ExpandableView getChildAtRawPosition(float,float)>
<com.android.server.NetworkManagementService: void startTethering(java.lang.String[])>
<com.android.server.infra.AbstractMasterSystemService: void enforceCallingPermissionForManagement()>
<com.android.systemui.qs.tiles.NfcTile: com.android.systemui.plugins.qs.QSTile.BooleanState newTileState()>
<com.android.systemui.statusbar.phone.HeadsUpTouchHelper: boolean isTrackingHeadsUp()>
<com.android.systemui.statusbar.policy.HotspotController.Callback: void onHotspotChanged(boolean,int)>
<com.android.systemui.settings.CurrentUserTracker: void <init>(com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.proxyhandler.SocketConnect: void connect(java.net.Socket,java.net.Socket)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>
<com.android.server.slice.PinnedSliceState: java.lang.String getPkg()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: android.view.View getShelfTransformationTarget()>
<android.net.wifi.aware.TlvBufferUtils.TlvIterable: java.util.Iterator iterator()>
<com.android.settingslib.applications.StorageStatsSource: com.android.settingslib.applications.StorageStatsSource.AppStorageStats getStatsForPackage(java.lang.String,java.lang.String,android.os.UserHandle)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: float getTranslationWhenRemoved()>
<com.android.systemui.shared.plugins.PluginEnabler: void setDisabled(android.content.ComponentName,int)>
<com.android.server.pm.Policy: java.lang.String getMatchedSeInfo(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.systemui.plugins.qs.QSTile: void removeCallbacks()>
<com.android.server.appbinding.finders.CarrierMessagingClientServiceFinder: java.lang.String validateService(android.content.pm.ServiceInfo)>
<com.android.printspooler.ui.PrintActivity: void onLoadFinished(android.content.Loader,java.util.List)>
<android.net.wifi.WifiManager.LocalOnlyHotspotReservation: void <init>(android.net.wifi.SoftApConfiguration)>
<com.android.server.trust.TrustAgentWrapper: java.lang.CharSequence getMessage()>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.policy.SecurityController provideSecurityController(com.android.systemui.statusbar.policy.SecurityControllerImpl)>
<android.content.pm.PackageManagerInternal: void setIntegrityVerificationResult(int,int)>
<com.android.settingslib.CustomEditTextPreference: void onDialogClosed(boolean)>
<com.android.server.usb.descriptors.UsbConfigDescriptor: byte getNumInterfaces()>
<com.android.bluetoothmidiservice.BluetoothPacketDecoder: void <init>(int)>
<com.android.systemui.doze.DozeMachine: void setParts(com.android.systemui.doze.DozeMachine.Part[])>
<com.android.systemui.qs.TouchAnimator.Builder: com.android.systemui.qs.TouchAnimator.Builder setListener(com.android.systemui.qs.TouchAnimator.Listener)>
<com.android.systemui.classifier.FalsingManagerProxy: void setQsExpanded(boolean)>
<com.android.gallery3d.common.Utils: java.lang.String[] copyOf(java.lang.String[],int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: float getOpeningHeight()>
<com.android.settingslib.HelpUtils: void addIntentParameters(android.content.Context,android.content.Intent,java.lang.String,boolean)>
<com.android.systemui.statusbar.phone.NavigationHandle: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.net.ip.IpClientManager: boolean setL2KeyAndGroupHint(java.lang.String,java.lang.String)>
<javax.microedition.khronos.egl.EGL10: boolean eglReleaseThread()>
<com.android.systemui.globalactions.GlobalActionsColumnLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.egg.MLand: void onDraw(android.graphics.Canvas)>
<com.android.gallery3d.exif.ExifInterface: byte[] getTagByteValues(int)>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: java.util.List getProviders()>
<android.net.wifi.hotspot2.PasspointConfiguration: boolean isAutojoinEnabled()>
<com.android.bluetoothmidiservice.PacketDecoder: void decodePacket(byte[],android.media.midi.MidiReceiver)>
<android.net.wifi.aware.PublishDiscoverySession: void updatePublish(android.net.wifi.aware.PublishConfig)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareImpl.AudioSessionProvider: void releaseSession(int)>
<com.android.gallery3d.exif.ExifInterface: void setExif(java.util.Collection)>
<com.android.settingslib.widget.AdaptiveOutlineDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap,int)>
<com.android.settingslib.accessibility.AccessibilityUtils: java.util.Set getEnabledServicesFromSettings(android.content.Context)>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.util.Map getRecoveryStatus()>
<com.android.systemui.statusbar.policy.HeadsUpManager: com.android.systemui.statusbar.policy.HeadsUpManager.HeadsUpEntry getHeadsUpEntry(java.lang.String)>
<com.android.systemui.statusbar.phone.MultiUserSwitch: void onFinishInflate()>
<android.net.wifi.IWifiManager: void restoreSupplicantBackupData(byte[],byte[])>
<com.android.systemui.statusbar.notification.MessagingLayoutTransformState: boolean transformViewTo(com.android.systemui.statusbar.notification.TransformState,float)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void createMenu(android.view.ViewGroup,android.service.notification.StatusBarNotification)>
<com.android.systemui.pip.phone.PipTouchState: boolean isDoubleTap()>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setOnTouchListener(android.view.View.OnTouchListener)>
<com.android.server.pm.Installer: void setWarnIfHeld(java.lang.Object)>
<com.android.server.policy.PhoneWindowManager: void setSwitchingUser(boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationSection: boolean didBoundsChange()>
<com.android.server.display.color.ColorDisplayService.ColorDisplayServiceInternal: boolean setDisplayWhiteBalanceColorTemperature(int)>
<com.android.server.DeviceIdleController: boolean getPowerSaveWhitelistExceptIdleInternal(java.lang.String)>
<com.android.systemui.statusbar.FlingAnimationUtils: void <init>(android.util.DisplayMetrics,float,float)>
<com.android.systemui.biometrics.AuthCredentialPasswordView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.pm.UserTypeDetails: int getIconBadge()>
<com.android.settingslib.searchprovider.SettingsXmlIndexProvider: android.database.Cursor queryRawData(java.lang.String[])>
<com.android.server.biometrics.EnumerateClient: int stop(boolean)>
<com.android.server.vr.VrManagerService: void onKeyguardStateChanged(boolean)>
<com.android.server.AppStateTracker: boolean isRunAnyInBackgroundAppOpsAllowed(int,java.lang.String)>
<com.android.server.timezonedetector.ArrayMapWithHistory: int size()>
<android.net.wifi.WifiManager.LocalOnlyHotspotSubscription: void close()>
<com.android.systemui.qs.AutoSizingList: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.shared.system.InputConsumerController: com.android.systemui.shared.system.InputConsumerController getPipInputConsumer()>
<android.net.wifi.hotspot2.pps.UpdateParameter: void setBase64EncodedPassword(java.lang.String)>
<com.android.keyguard.KeyguardUpdateMonitor: void setKeyguardOccluded(boolean)>
<com.android.systemui.plugins.FalsingManager: void onAffordanceSwipingStarted(boolean)>
<com.android.settingslib.graph.SignalDrawable: int getState(int,int,boolean)>
<com.android.systemui.statusbar.phone.BackGestureTfClassifierProvider: java.util.Map loadVocab(android.content.res.AssetManager)>
<com.android.server.audio.PlaybackActivityMonitor: void playerAttributes(int,android.media.AudioAttributes,int)>
<com.android.systemui.statusbar.notification.dagger.NotificationsModule: com.android.systemui.statusbar.notification.NotificationEntryManager provideNotificationEntryManager(com.android.systemui.statusbar.notification.NotificationEntryManagerLogger,com.android.systemui.statusbar.phone.NotificationGroupManager,com.android.systemui.statusbar.notification.collection.NotificationRankingManager,com.android.systemui.statusbar.notification.NotificationEntryManager.KeyguardEnvironment,com.android.systemui.statusbar.FeatureFlags,dagger.Lazy,dagger.Lazy,com.android.systemui.util.leak.LeakDetector,dagger.Lazy,com.android.systemui.statusbar.notification.ForegroundServiceDismissalFeatureController)>
<com.android.systemui.statusbar.notification.stack.NotificationSection: void resetCurrentBounds()>
<com.android.server.biometrics.AuthService: void <init>(android.content.Context)>
<com.android.systemui.BatteryMeterView: void onAttachedToWindow()>
<android.net.util.VersionedBroadcastListener: void startListening()>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger: float getFloat(java.lang.String,float)>
<com.android.settingslib.bluetooth.MapClientProfile: boolean isEnabled(android.bluetooth.BluetoothDevice)>
<com.android.server.pm.PackageManagerServiceUtils: java.util.List getPackagesForDexopt(java.util.Collection,com.android.server.pm.PackageManagerService,boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setPrivateLayout(com.android.systemui.statusbar.notification.row.NotificationContentView)>
<com.android.systemui.statusbar.notification.row.NotificationInfo.OnAppSettingsClickListener: void onClick(android.view.View,android.content.Intent)>
<com.android.systemui.statusbar.phone.BarTransitions.BarBackgroundDrawable: void setTint(int)>
<com.android.systemui.statusbar.phone.NavigationBarTransitions: void setAutoDim(boolean)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: boolean canRemoveImmediately(java.lang.String)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: void animateValueForChild(androidx.dynamicanimation.animation.DynamicAnimation.ViewProperty,android.view.View,float,float,long,float,float,java.lang.Runnable[])>
<com.android.server.uri.UriGrantsManagerService: void takePersistableUriPermission(android.net.Uri,int,java.lang.String,int)>
<android.app.usage.UsageStatsManagerInternal: void reportSyncScheduled(java.lang.String,int,boolean)>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean isUnlockWithWallpaper()>
<com.android.systemui.statusbar.notification.stack.ViewState: void startAnimator(android.animation.Animator,android.animation.AnimatorListenerAdapter)>
<com.android.server.biometrics.fingerprint.FingerprintService: java.lang.String getTag()>
<javax.obex.ObexTransport: void listen()>
<com.android.systemui.statusbar.notification.TextViewTransformState: boolean transformScale(com.android.systemui.statusbar.notification.TransformState)>
<com.android.systemui.statusbar.phone.dagger.StatusBarComponent.Builder: com.android.systemui.statusbar.phone.dagger.StatusBarComponent.Builder statusBarWindowView(com.android.systemui.statusbar.phone.NotificationShadeWindowView)>
<com.android.soundpicker.RingtonePickerActivity: void run()>
<com.android.settingslib.location.SettingsInjector.Setting: void maybeLogElapsedTime()>
<android.net.wifi.WifiNetworkSuggestion: boolean isUntrusted()>
<com.android.systemui.statusbar.notification.row.NotifRemoteViewCacheImpl: void putCachedView(com.android.systemui.statusbar.notification.collection.NotificationEntry,int,android.widget.RemoteViews)>
<com.android.server.appbinding.finders.CarrierMessagingClientServiceFinder: android.service.carrier.ICarrierMessagingClientService asInterface(android.os.IBinder)>
<com.android.settingslib.drawable.UserIconDrawable: void setBadgeMargin(float)>
<android.net.wifi.hotspot2.OsuProvider: int describeContents()>
<com.android.systemui.wm.DisplaySystemBarsController: void onDisplayRemoved(int)>
<com.android.server.ConnectivityService: void releasePendingNetworkRequest(android.app.PendingIntent)>
<com.android.systemui.doze.DozeService: void setDozeScreenState(int)>
<com.android.uiautomator.core.UiDevice: boolean pressDelete()>
<com.android.server.policy.BurnInProtectionHelper: void cancelBurnInProtection()>
<com.android.server.display.utils.AmbientFilter: float getEstimate(long)>
<com.android.systemui.statusbar.notification.row.NotificationGuts: int getActualHeight()>
<com.android.systemui.qs.tiles.CellularTile: boolean isAvailable()>
<com.android.systemui.qs.tiles.UserTile: void onUserInfoChanged(java.lang.String,android.graphics.drawable.Drawable,java.lang.String)>
<com.android.server.audio.AudioService: void setVolumeController(android.media.IVolumeController)>
<com.android.server.pm.ApexManager.ApexManagerImpl: boolean destroyCeSnapshotsNotSpecified(int,int[])>
<android.net.wifi.WifiManager: void disableEphemeralNetwork(java.lang.String)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setPlatformKeyGenerationId(int,int)>
<com.android.server.testharness.TestHarnessModeService: void onStart()>
<com.android.systemui.statusbar.policy.ConfigurationController.ConfigurationListener: void onDensityOrFontScaleChanged()>
<com.android.server.usb.descriptors.UsbEndpointDescriptor: int getInterval()>
<com.android.server.biometrics.fingerprint.FingerprintService: void serviceDied(long)>
<com.android.media.remotedisplay.RemoteDisplayProvider: void updateDisplay(com.android.media.remotedisplay.RemoteDisplay)>
<com.android.server.appprediction.AppPredictionPerUserService: void notifyAppTargetEventLocked(android.app.prediction.AppPredictionSessionId,android.app.prediction.AppTargetEvent)>
<android.net.ip.IpClientManager: boolean setHttpProxy(android.net.ProxyInfo)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean resetPassword(java.lang.String,int)>
<com.android.preload.check.NotInitialized: void main(java.lang.String[])>
<android.net.wifi.WifiConfiguration: void setNetworkSelectionStatus(android.net.wifi.WifiConfiguration.NetworkSelectionStatus)>
<com.android.systemui.statusbar.phone.StatusBar: void notifyBiometricAuthModeChanged()>
<com.android.systemui.tuner.RadioListPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void uninstallPackageWithActiveAdmins(java.lang.String)>
<javax.obex.ServerSession: javax.obex.ObexTransport getTransport()>
<com.android.systemui.analytics.DataCollector: void onNotificatonStopDraggingDown()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onBouncerShown()>
<com.android.wallpapercropper.WallpaperCropActivity: int getRotationFromExif(android.content.Context,android.net.Uri)>
<com.android.server.accounts.AccountManagerService: java.lang.String readCachedTokenInternal(com.android.server.accounts.AccountManagerService.UserAccounts,android.accounts.Account,java.lang.String,java.lang.String,byte[])>
<javax.obex.ServerOperation: boolean sendReply(int)>
<com.android.systemui.statusbar.notification.row.NotificationGuts: void onHeightChanged()>
<com.android.systemui.shared.system.InputChannelCompat: boolean mergeMotionEvent(android.view.MotionEvent,android.view.MotionEvent)>
<android.app.backup.ForwardingBackupAgent: void onQuotaExceeded(long,long)>
<com.android.settingslib.applications.ApplicationsState: java.lang.String normalize(java.lang.String)>
<com.android.server.locksettings.LockSettingsService: void tieProfileLockToParent(int,com.android.internal.widget.LockscreenCredential)>
<android.content.pm.PackageManagerInternal.ExternalSourcesPolicy: int getPackageTrustedToInstallApps(java.lang.String,int)>
<android.net.util.BaseNetdUnsolicitedEventListener: void onStrictCleartextDetected(int,java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setAboveShelfChangedListener(com.android.systemui.statusbar.notification.AboveShelfChangedListener)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: void registerCallback(com.android.settingslib.bluetooth.CachedBluetoothDevice.Callback)>
<android.net.wifi.EasyConnectStatusCallback: void onEnrolleeSuccess(int)>
<com.android.systemui.classifier.FalsingManagerImpl: void onScreenOnFromTouch()>
<com.android.settingslib.RestrictedLockUtilsInternal: com.android.settingslib.RestrictedLockUtils.EnforcedAdmin checkIfMeteredDataRestricted(android.content.Context,java.lang.String,int)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: boolean needsInversion(int,android.view.View)>
<com.android.systemui.statusbar.policy.FlashlightController: boolean isAvailable()>
<com.android.settingslib.bluetooth.HearingAidProfile: java.lang.String toString()>
<com.android.systemui.shared.system.ActivityManagerWrapper: java.lang.String getBadgedApplicationLabel(android.content.pm.ApplicationInfo,int)>
<com.android.server.biometrics.ClientMonitor: void vibrateSuccess()>
<com.android.systemui.qs.tiles.UiModeNightTile: android.content.Intent getLongClickIntent()>
<com.android.systemui.statusbar.phone.StatusBar: com.android.systemui.statusbar.GestureRecorder getGestureRecorder()>
<com.android.systemui.statusbar.phone.PanelViewController: boolean fullyExpandedClearAllVisible()>
<com.android.server.restrictions.RestrictionsManagerService: void onStart()>
<com.android.server.NetworkManagementService: android.net.InterfaceConfiguration fromStableParcel(android.net.InterfaceConfigurationParcel)>
<com.android.server.pm.RestrictionsSet: com.android.server.pm.RestrictionsSet readRestrictions(org.xmlpull.v1.XmlPullParser,java.lang.String)>
<com.android.server.policy.WindowManagerPolicy: void startedGoingToSleep(int)>
<com.android.systemui.classifier.FalsingManagerProxy: void onStartExpandingFromPulse()>
<com.android.server.display.DisplayManagerService: void onBootPhase(int)>
<com.android.uiautomator.testrunner.IAutomationSupport: void sendStatus(int,android.os.Bundle)>
<com.android.systemui.statusbar.phone.NavigationBarTransitions.DarkIntensityListener: void onDarkIntensity(float)>
<com.android.systemui.screenshot.ScreenshotSelectorView: void updateSelection(int,int)>
<com.android.systemui.globalactions.GlobalActionsDialog.PowerOptionsAction: void onPress()>
<com.android.systemui.statusbar.phone.KeyguardBouncer: void prepare()>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: int getHeight()>
<com.android.systemui.statusbar.phone.BarTransitions: void setAutoDim(boolean)>
<com.android.systemui.ScreenDecorations.DisplayCutoutView: boolean shouldInterceptTouch()>
<com.android.uiautomator.core.UiObject: boolean swipeUp(int)>
<com.android.settingslib.CustomDialogPreferenceCompat: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry: void removeAsSoonAsPossible()>
<com.android.server.locksettings.SyntheticPasswordManager: byte[] fromByteArrayList(java.util.ArrayList)>
<com.android.systemui.shared.system.SurfaceControlCompat: boolean isValid()>
<com.android.keyguard.KeyguardViewController: void startPreHideAnimation(java.lang.Runnable)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: boolean isDimmable()>
<com.android.server.appop.AppOpsService: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>
<com.android.server.pm.parsing.pkg.PackageImpl: java.lang.String getSeInfoUser()>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: float getWidthForDisplayingBubbles()>
<com.android.server.SystemService: void onStartUser(int)>
<com.google.android.startop.iorap.RequestId: boolean equals(java.lang.Object)>
<com.android.systemui.pip.phone.PipTouchState: void scheduleDoubleTapTimeoutCallback()>
<com.android.systemui.util.AlarmTimeout: boolean schedule(long,int)>
<com.android.settingslib.bluetooth.MapProfile: int getDrawableResource(android.bluetooth.BluetoothClass)>
<com.android.systemui.car.userswitcher.UserGridRecyclerView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.protolog.ProtoLogImpl: void startProtoLog(java.io.PrintWriter)>
<com.android.printspooler.ui.PrintActivity: boolean canOpenOptions()>
<com.android.systemui.bubbles.dagger.BubbleModule: com.android.systemui.bubbles.BubbleController newBubbleController(android.content.Context,com.android.systemui.statusbar.phone.NotificationShadeWindowController,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.phone.ShadeController,com.android.systemui.bubbles.BubbleData,com.android.systemui.statusbar.policy.ConfigurationController,com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProvider,com.android.systemui.statusbar.policy.ZenModeController,com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.statusbar.phone.NotificationGroupManager,com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.systemui.statusbar.notification.collection.NotifPipeline,com.android.systemui.statusbar.FeatureFlags,com.android.systemui.dump.DumpManager,com.android.systemui.util.FloatingContentCoordinator,com.android.systemui.bubbles.BubbleDataRepository,com.android.systemui.model.SysUiState,android.app.INotificationManager,com.android.internal.statusbar.IStatusBarService,android.view.WindowManager,android.content.pm.LauncherApps)>
<com.android.systemui.statusbar.policy.DeviceProvisionedControllerImpl: void addCallback(com.android.systemui.statusbar.policy.DeviceProvisionedController.DeviceProvisionedListener)>
<com.android.systemui.AutoReinflateContainer.InflateListener: void onInflated(android.view.View)>
<com.android.systemui.shared.recents.model.Task: void <init>(com.android.systemui.shared.recents.model.Task.TaskKey,int,int,boolean,boolean,android.app.ActivityManager.TaskDescription,android.content.ComponentName)>
<com.android.systemui.statusbar.phone.LightBarTransitionsController: void appTransitionPending(int,boolean)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setNativeLibraryRootDir(java.lang.String)>
<android.content.pm.PackageManagerInternal: int getUidTargetSdkVersion(int)>
<com.android.systemui.SwipeHelper.Callback: boolean updateSwipeProgress(android.view.View,boolean,float)>
<com.android.systemui.classifier.FalsingManagerFake: void onNotificationStopDismissing()>
<com.android.settingslib.widget.AdaptiveOutlineDrawable: void draw(android.graphics.Canvas)>
<android.content.pm.PackageManagerInternal: void forEachInstalledPackage(java.util.function.Consumer,int)>
<com.android.server.wallpaper.WallpaperManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setHorizontalPanelTranslation(float)>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: boolean isProfileOwnerOfOrganizationOwnedDevice()>
<com.android.systemui.statusbar.phone.NavigationBarView: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.testing.shadows.ShadowApplicationPackageManager: void addInstalledPackage(java.lang.String,android.content.pm.PackageInfo)>
<com.android.packageinstaller.TemporaryFileManager: java.io.File getUninstallStateFile(android.content.Context)>
<com.android.systemui.plugins.FalsingManager: void cleanup()>
<com.android.server.slice.SliceManagerService: byte[] getBackupPayload(int)>
<com.android.settingslib.bluetooth.HidDeviceProfile: int getDrawableResource(android.bluetooth.BluetoothClass)>
<com.android.systemui.statusbar.policy.BluetoothController.Callback: void onBluetoothStateChange(boolean)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void performAddAnimation(long,long,boolean)>
<android.net.wifi.IWifiManager: void registerScanResultsCallback(android.net.wifi.IScanResultsCallback)>
<com.android.settingslib.bluetooth.PbapServerProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)>
<com.android.systemui.util.leak.TrackedObjects: void <init>(com.android.systemui.util.leak.TrackedCollections)>
<android.graphics.perftests.RenderNodePerfTest: void testStartEnd()>
<com.android.systemui.statusbar.notification.TextViewTransformState: void recycle()>
<com.android.printspooler.model.PrintSpoolerService.PrintSpooler: void pruneApprovedPrintServices(java.util.List)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
<com.android.server.slice.SliceClientPermissions.SliceAuthority: java.lang.String getAuthority()>
<android.net.wifi.rtt.ResponderLocation: java.lang.String getMapImageMimeType()>
<com.android.systemui.pip.PipUI: void <init>(android.content.Context,com.android.systemui.statusbar.CommandQueue,com.android.systemui.pip.BasePipManager)>
<com.android.systemui.SwipeHelper.Callback: void onChildSnappedBack(android.view.View,float)>
<com.android.server.people.prediction.AppTargetPredictor: void onLaunchLocationShown(java.lang.String,java.util.List)>
<com.android.systemui.shared.system.PinnedStackListenerForwarder: void onListenerRegistered(android.view.IPinnedStackController)>
<android.net.wifi.hotspot2.PasspointConfiguration: boolean equals(java.lang.Object)>
<com.android.systemui.shared.recents.model.Task.TaskKey: int hashCode()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void dismissViewAnimated(android.view.View,java.lang.Runnable,int,long)>
<android.processor.view.inspector.PlatformInspectableProcessor: boolean process(java.util.Set,javax.annotation.processing.RoundEnvironment)>
<com.android.systemui.screenrecord.RecordingController: void startCountdown(long,long,android.app.PendingIntent,android.app.PendingIntent)>
<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: void invalidatePlatformKey(int,int)>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void setActualPaddingEnd(float)>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onBackPressedOnTaskRoot(android.app.ActivityManager.RunningTaskInfo)>
<com.android.systemui.shared.system.TaskInfoCompat: int getUserId(android.app.TaskInfo)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isSystemExt()>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getRestrictionsProvider(int)>
<com.android.systemui.statusbar.notification.row.NotifRemoteViewCacheImpl: void clearCache(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.phone.ReverseLinearLayout: void setAlternativeOrder(boolean)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBindRenderbufferOES(int,int)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.State,java.lang.Object)>
<com.android.systemui.biometrics.AuthController: com.android.systemui.biometrics.AuthDialog buildDialog(android.os.Bundle,boolean,int,int,java.lang.String,boolean,long,int)>
<android.net.wifi.WifiScanner.ScanData: void <init>(int,int,int,int,android.net.wifi.ScanResult[])>
<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate getCaCertificate()>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest newInstance(java.lang.String)>
<com.android.server.policy.BurnInProtectionHelper: void onDisplayChanged(int)>
<com.android.server.policy.PermissionPolicyService: void onStart()>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: java.util.List getConfigPreferences()>
<com.android.systemui.power.PowerUI.WarningsUI: void userSwitched()>
<com.android.systemui.ExpandHelper: void setEventSource(android.view.View)>
<com.android.systemui.statusbar.phone.ManagedProfileController: boolean isWorkModeEnabled()>
<android.net.wifi.WifiManager: void stopEasyConnectSession()>
<android.net.TetheredClient: java.lang.String toString()>
<com.android.systemui.plugins.FalsingManager: void onNotificatonStartDraggingDown()>
<com.android.systemui.biometrics.AuthBiometricFingerprintView: int getStateForAfterError()>
<com.android.commands.svc.NfcCommand: void run(java.lang.String[])>
<com.android.systemui.glwallpaper.EglHelper: void destroyEglSurface()>
<com.android.server.media.MediaSession2Record: boolean isPlaybackTypeLocal()>
<com.android.server.infra.AbstractMasterSystemService: void onCleanupUser(int)>
<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.ApplicationInfo toAppInfoWithoutStateWithoutFlags()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void uninstallCaCerts(android.content.ComponentName,java.lang.String,java.lang.String[])>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void updateResources()>
<com.android.gallery3d.glrenderer.GLES20Canvas: void multiplyAlpha(float)>
<com.android.systemui.dagger.SystemUIRootComponent: com.android.systemui.Dependency.DependencyInjector createDependency()>
<com.android.settingslib.animation.DisappearAnimationUtils: void <init>(android.content.Context)>
<com.android.systemui.assist.AssistOrbContainer: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: boolean applyChildOrder(java.util.List,com.android.systemui.statusbar.notification.VisualStabilityManager,com.android.systemui.statusbar.notification.VisualStabilityManager.Callback)>
<com.android.server.infra.AbstractPerUserSystemService: com.android.server.infra.AbstractMasterSystemService getMaster()>
<com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.NotifComparator: void <init>(java.lang.String)>
<com.android.server.pm.CrossProfileAppsServiceImpl: boolean canConfigureInteractAcrossProfiles(java.lang.String)>
<com.android.systemui.settings.ToggleSliderView: void setMirror(com.android.systemui.settings.ToggleSliderView)>
<android.net.wifi.rtt.IWifiRttManager: boolean isAvailable()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: float getTranslation()>
<com.android.server.media.MediaSessionRecord: boolean checkPlaybackActiveState(boolean)>
<com.android.gallery3d.glrenderer.Texture: void draw(com.android.gallery3d.glrenderer.GLCanvas,int,int)>
<com.android.systemui.bubbles.BubbleOverflow: android.view.View getIconView()>
<com.android.gallery3d.exif.ExifInterface: com.android.gallery3d.exif.ExifTag setTag(com.android.gallery3d.exif.ExifTag)>
<android.media.MediaSession2.Builder: void <init>(android.content.Context)>
<com.android.server.autofill.ui.InlineFillUi.InlineSuggestionUiCallback: void startIntentSender(android.content.IntentSender,android.content.Intent)>
<com.android.systemui.shared.system.WindowManagerWrapper: void addPinnedStackListener(com.android.systemui.shared.system.PinnedStackListenerForwarder.PinnedStackListener)>
<com.android.systemui.bubbles.BubbleOverflow: int getDisplayId()>
<com.android.server.locksettings.SyntheticPasswordManager: void removeUser(int)>
<com.android.gallery3d.glrenderer.BasicTexture: int getHeight()>
<com.android.server.slice.SliceProviderPermissions.SliceAuthority: java.lang.String getAuthority()>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean isVisibleLw()>
<com.android.systemui.shared.tracing.FrameProtoTracer: void update()>
<com.android.systemui.statusbar.notification.row.NotifBindPipelineInitializer: void initialize()>
<com.android.server.accessibility.FingerprintGestureDispatcher.FingerprintGestureClient: void onFingerprintGestureDetectionActiveChanged(boolean)>
<com.android.systemui.statusbar.StatusBarIconView: void onLayout(boolean,int,int,int,int)>
<com.android.server.pm.PackageManagerService.Injector: java.lang.Object getLock()>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse.Status: java.lang.String toString(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void updateDecorViews(boolean)>
<com.android.systemui.statusbar.policy.NetworkController.SignalCallback: void setEthernetIndicators(com.android.systemui.statusbar.policy.NetworkController.IconState)>
<com.android.settingslib.media.LocalMediaManager.DeviceCallback: void onDeviceAttributesChanged()>
<android.multiuser.UserLifecycleTests: void stopUser()>
<com.android.server.pm.permission.PermissionsState: boolean equals(java.lang.Object)>
<com.android.systemui.qs.QuickQSPanel: void drawTile(com.android.systemui.qs.QSPanel.TileRecord,com.android.systemui.plugins.qs.QSTile.State)>
<com.android.keyguard.KeyguardSecurityView: void onPause()>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onKeyguardVisibilityChangedRaw(boolean)>
<com.android.systemui.assist.ui.EdgeLight: int getColor()>
<android.net.wifi.p2p.WifiP2pDeviceList: java.util.Collection getDeviceList()>
<com.android.systemui.pip.phone.PipAccessibilityInteractionConnection: void focusSearch(long,int,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec)>
<com.android.egg.paint.PaintActivity: void onCreate(android.os.Bundle)>
<com.android.server.CertBlacklister: void <init>(android.content.Context)>
<com.android.settingslib.applications.StorageStatsSource: void <init>(android.content.Context)>
<com.android.server.storage.CacheQuotaStrategy: void <init>(android.content.Context,android.app.usage.UsageStatsManagerInternal,com.android.server.pm.Installer,android.util.ArrayMap)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: com.android.server.tv.tunerresourcemanager.FrontendResource getFrontendResource(int)>
<android.net.wifi.WifiManager.SoftApCallback: void onInfoChanged(android.net.wifi.SoftApInfo)>
<android.net.wifi.hotspot2.pps.Policy: long getMinHomeUplinkBandwidth()>
<com.android.server.ConnectivityService: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig)>
<com.android.server.voiceinteraction.DatabaseHelper: void <init>(android.content.Context)>
<android.net.wifi.IWifiManager: void startDppAsConfiguratorInitiator(android.os.IBinder,java.lang.String,int,int,android.net.wifi.IDppCallback)>
<com.android.systemui.pip.tv.dagger.TvPipComponent.Builder: com.android.systemui.pip.tv.dagger.TvPipComponent build()>
<com.android.systemui.globalactions.GlobalActionsDialog.MyOverflowAdapter: com.android.systemui.globalactions.GlobalActionsDialog.Action getItem(int)>
<com.android.server.stats.StatsCompanionService.ShutdownEventReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.policy.WindowManagerPolicy: boolean canDismissBootAnimation()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: java.lang.String getKey()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void applyExpandAnimationParams(com.android.systemui.statusbar.notification.ActivityLaunchAnimator.ExpandAnimationParameters)>
<com.android.systemui.shared.system.BackgroundExecutor: com.android.systemui.shared.system.BackgroundExecutor get()>
<com.android.server.pm.PackageKeySetData: long[] getUpgradeKeySets()>
<com.android.systemui.statusbar.policy.BatteryController: boolean isPowerSave()>
<com.android.server.locksettings.LockSettingsService.Lifecycle: void onUnlockUser(int)>
<com.android.keyguard.KeyguardAbsKeyInputView: void onResume(int)>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: android.view.MotionEvent set(int,android.view.MotionEvent)>
<com.android.server.audio.AudioService: void unregisterPlaybackCallback(android.media.IPlaybackConfigDispatcher)>
<com.android.systemui.plugins.qs.QS: void hideImmediately()>
<com.android.server.pm.permission.PermissionManagerServiceInternal.PermissionCallback: void onPermissionRevoked(int,int,java.lang.String)>
<com.android.systemui.statusbar.policy.BatteryController: void setReverseState(boolean)>
<com.android.server.statusbar.StatusBarManagerService: void onBiometricHelp(java.lang.String)>
<com.android.keyguard.KeyguardPatternView: void onPause()>
<com.android.server.usb.descriptors.UsbACSelectorUnit: byte getNameIndex()>
<com.android.server.autofill.ui.AutoFillUI: void onPendingSaveUi(int,android.os.IBinder)>
<com.android.server.NetworkManagementService: void clearInterfaceAddresses(java.lang.String)>
<com.android.server.statusbar.StatusBarManagerService: void showPinningEscapeToast()>
<com.android.systemui.keyguard.KeyguardSliceProvider: void notifyChange()>
<com.android.printspooler.widget.PageContentView: com.android.printspooler.model.PageContentRepository.PageContentProvider getPageContentProvider()>
<com.android.systemui.tuner.SelectablePreference: void <init>(android.content.Context)>
<com.android.server.pm.ApexManager: boolean destroyDeSnapshots(int)>
<android.net.wifi.SoftApCapability: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: java.util.Iterator iterator()>
<com.android.keyguard.KeyguardHostView: com.android.keyguard.KeyguardSecurityContainer getSecurityContainer()>
<android.net.wifi.p2p.WifiP2pGroupList: int getNetworkId(java.lang.String,java.lang.String)>
<android.net.wifi.IWifiManager: java.lang.String[] getFactoryMacAddresses()>
<com.android.server.usb.descriptors.Usb20ACInputTerminal: byte getNumChannels()>
<com.android.systemui.statusbar.KeyboardShortcutKeysLayout: void onMeasure(int,int)>
<com.android.systemui.shared.tracing.FrameProtoTracer.ProtoTraceParams: java.lang.Object getEncapsulatingTraceProto()>
<com.android.systemui.tuner.ClipboardView: void onPrimaryClipChanged()>
<com.android.server.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
<com.android.systemui.bubbles.BubbleTaskView: void onTaskBackgroundColorChanged(android.window.TaskEmbedder,int)>
<com.android.systemui.shared.system.TaskInfoCompat: android.app.ActivityManager.TaskDescription getTaskDescription(android.app.TaskInfo)>
<com.android.systemui.car.navigationbar.CarNavigationBarController: void removeAll()>
<javax.microedition.khronos.opengles.GL10: void glMultMatrixx(java.nio.IntBuffer)>
<com.android.uiautomator.core.UiScrollable: boolean flingToEnd(int)>
<com.android.systemui.util.sensors.ThresholdSensor: void resume()>
<com.android.server.audio.AudioService.VolumeController: java.lang.String toString()>
<com.android.systemui.statusbar.KeyguardAffordanceView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.net.wifi.IWifiManager: java.util.Map getMatchingPasspointConfigsForOsuProviders(java.util.List)>
<com.android.server.stats.pull.StatsPullAtomService: void onStart()>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: android.content.pm.SharedLibraryInfo createSharedLibraryForStatic(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.server.signedconfig.SignedConfigService: void <init>(android.content.Context)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceController: void updateAmbientColorTemperature()>
<com.android.systemui.util.concurrency.ConcurrencyModule: java.util.concurrent.Executor provideBackgroundExecutor(android.os.Looper)>
<com.android.location.provider.ProviderRequestUnbundled: java.lang.String toString()>
<com.android.gallery3d.exif.ExifInterface: short getTypeFromInfo(int)>
<android.net.wifi.hotspot2.pps.Credential: void setUserCredential(android.net.wifi.hotspot2.pps.Credential.UserCredential)>
<com.android.systemui.qs.external.QSTileServiceWrapper: boolean onStopListening()>
<com.android.server.accounts.AccountManagerService: java.util.Map getAccountsAndVisibilityForPackage(java.lang.String,java.lang.String)>
<com.android.server.audio.AudioService: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>
<android.net.wifi.RttManager.ResponderConfig: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: com.android.systemui.statusbar.KeyguardAffordanceView getLeftView()>
<android.os.CpuUsageTrackingPerfTest: void timeSystemThread()>
<com.android.networkstack.tethering.TetheringService: android.os.IBinder onBind(android.content.Intent)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] setPackagesSuspended(android.content.ComponentName,java.lang.String,java.lang.String[],boolean)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector textMatches(java.lang.String)>
<com.android.systemui.stackdivider.DividerWindowManager: void <init>(com.android.systemui.wm.SystemWindows)>
<com.android.photos.views.TiledImageRenderer: void freeTextures()>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: java.lang.String getSupplicantQuery()>
<com.android.server.AnyMotionDetector.Vector3: com.android.server.AnyMotionDetector.Vector3 normalized()>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: void notifyGroupChildRemoved(com.android.systemui.statusbar.notification.row.ExpandableView,android.view.ViewGroup)>
<com.android.systemui.statusbar.phone.UserAvatarView: void setFramePadding(float)>
<com.android.systemui.bubbles.BubbleStackView: boolean isExpansionAnimating()>
<com.android.systemui.statusbar.StatusBarIconView: void setDecorColor(int)>
<com.android.shell.HeapDumpProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<com.android.systemui.statusbar.GestureRecorder.Gesture: java.lang.String toJson()>
<android.processor.view.inspector.InspectableClassModel.Property: int getAttributeId()>
<com.android.server.biometrics.fingerprint.FingerprintUserState: void <init>(android.content.Context,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.PersistableBundle getTransferOwnershipBundle()>
<com.android.server.locksettings.LockSettingsService: int getStrongAuthForUser(int)>
<com.android.systemui.statusbar.notification.row.PartialConversationInfo: void setGutsParent(com.android.systemui.statusbar.notification.row.NotificationGuts)>
<com.android.server.biometrics.iris.IrisService: void onStart()>
<com.android.server.storage.DeviceStorageMonitorInternal: boolean isMemoryLow()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void hideToast(java.lang.String,android.os.IBinder)>
<android.net.TetheredClient: int getTetheringType()>
<android.net.wifi.IWifiManager: android.content.pm.ParceledListSlice getConfiguredNetworks(java.lang.String,java.lang.String)>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: java.util.ListIterator listIterator(int)>
<com.android.keyguard.clock.BubbleClockController: void setColorPalette(boolean,int[])>
<com.android.settingslib.Utils: int getColorErrorDefaultColor(android.content.Context)>
<com.google.android.startop.iorap.AppLaunchEvent.BaseWithActivityRecordData: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setScrimsVisibility(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: com.android.systemui.statusbar.policy.InflatedSmartReplies.SmartRepliesAndActions getExistingSmartRepliesAndActions()>
<com.android.settingslib.drawer.Tile: android.graphics.drawable.Icon getIcon(android.content.Context)>
<com.android.server.display.DisplayAdapter.Listener: void onTraversalRequested()>
<com.android.statsd.shelltools.testdrive.TestDrive: void main(java.lang.String[])>
<com.android.uiautomator.core.UiAutomatorBridge: boolean performGlobalAction(int)>
<com.android.systemui.classifier.SpeedVarianceEvaluator: float evaluate(float)>
<com.android.systemui.qs.QSPanel: void onAttachedToWindow()>
<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: boolean isAutoTimeDetectionEnabled()>
<com.android.systemui.statusbar.KeyguardAffordanceView: void setCircleRadius(float)>
<com.android.server.recoverysystem.RecoverySystemShellCommand: void onHelp()>
<com.android.systemui.ForegroundServicesUserState: void setRunningServices(java.lang.String[],long)>
<com.android.server.NativeDaemonEvent: boolean isClassClientError()>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void reset(boolean)>
<com.android.printspooler.model.PageContentRepository: com.android.printspooler.model.PageContentRepository.PageContentProvider acquirePageContentProvider(int,android.view.View)>
<com.android.systemui.statusbar.phone.EdgeBackGestureHandler: void onNavBarTransientStateChanged(boolean)>
<com.android.server.integrity.parser.RuleParser: java.util.List parse(com.android.server.integrity.parser.RandomAccessObject,java.util.List)>
<com.android.systemui.statusbar.NotificationMediaManager: void setup(com.android.systemui.statusbar.BackDropView,android.widget.ImageView,android.widget.ImageView,com.android.systemui.statusbar.phone.ScrimController,com.android.systemui.statusbar.phone.LockscreenWallpaper)>
<android.net.wifi.ParcelUtil: java.security.PrivateKey readPrivateKey(android.os.Parcel)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void clearDeviceOwner(java.lang.String)>
<com.android.server.hdmi.HdmiControlService.DevicePollingCallback: void onPollingFinished(java.util.List)>
<com.android.uiautomator.core.UiScrollable: boolean scrollBackward()>
<com.android.mediadrm.signer.MediaDrmSigner.CertificateRequest: byte[] getData()>
<com.android.systemui.car.notification.NotificationPanelViewController: void onCollapseAnimationEnd()>
<com.android.systemui.qs.tiles.BluetoothTile: com.android.systemui.plugins.qs.QSTile.BooleanState newTileState()>
<com.android.printspooler.ui.PrintActivity.PrintServiceApprovalDialog: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: boolean setTopRoundness(float,boolean)>
<com.android.systemui.statusbar.KeyguardIndicationController.BaseKeyguardCallback: void onUserSwitchComplete(int)>
<com.android.server.biometrics.iris.IrisService: java.lang.String getLockoutResetIntent()>
<com.android.server.pm.ShortcutService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<com.android.systemui.statusbar.phone.StatusBar: boolean hideStatusBarIconsWhenExpanded()>
<android.content.pm.PackageManagerInternal: boolean isPackagePersistent(java.lang.String)>
<com.android.server.VibratorService: boolean isVibrating()>
<com.android.systemui.shared.plugins.PluginEnabler: void setEnabled(android.content.ComponentName)>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone: boolean shouldExtendLifetime(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.doze.DozeAuthRemover: void transitionTo(com.android.systemui.doze.DozeMachine.State,com.android.systemui.doze.DozeMachine.State)>
<com.android.packageinstaller.PackageInstallerActivity: void onPause()>
<com.android.systemui.bubbles.BubbleStackView: void setExpanded(boolean)>
<com.android.server.pm.Installer: android.os.storage.CrateMetadata[] getAppCrates(java.lang.String,java.lang.String[],int)>
<com.android.systemui.recents.Recents: void start()>
<android.database.SQLiteDatabasePerfTest: void testSelectMultipleRows()>
<com.android.server.biometrics.BiometricUserState: void <init>(android.content.Context,int)>
<com.android.server.locksettings.LockSettingsService: java.util.Map getRecoveryStatus()>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void setHeadsUpManager(com.android.systemui.statusbar.phone.HeadsUpManagerPhone)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void secondaryClick()>
<com.android.networkstack.tethering.EntitlementManager: void maybeRunProvisioning()>
<com.android.systemui.bubbles.animation.StackAnimationController: com.android.systemui.bubbles.BubbleStackView.RelativeStackPosition getRelativeStackPosition()>
<com.android.server.audio.AudioService: int getMaxVolumeIndexForAttributes(android.media.AudioAttributes)>
<android.net.TcpKeepalivePacketData: int hashCode()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPermissionPolicy(android.content.ComponentName,java.lang.String,int)>
<com.android.server.soundtrigger.SoundTriggerHelper: void onServiceDied()>
<android.net.TcpKeepalivePacketData: java.lang.String toString()>
<com.android.systemui.statusbar.tv.micdisclosure.AudioRecordingDisclosureBar: void <init>(android.content.Context)>
<com.android.systemui.egg.MLand: boolean onKeyDown(int,android.view.KeyEvent)>
<android.net.wifi.WifiManager.LocalOnlyHotspotReservation: void finalize()>
<com.android.server.role.RoleManagerService: void onStartUser(int)>
<com.android.server.pm.dex.DexoptOptions: boolean isCheckForProfileUpdates()>
<javax.microedition.khronos.opengles.GL11: void glPointParameterfv(int,java.nio.FloatBuffer)>
<com.android.settingslib.volume.MediaSessions: void destroy()>
<com.android.future.usb.UsbAccessory: java.lang.String getUri()>
<com.android.server.infra.AbstractMasterSystemService: void onSettingsChanged(int,java.lang.String)>
<android.database.CursorWindowPerfTest: void load10Ints()>
<com.android.settingslib.net.NetworkCycleDataForUid: long getBackgroudUsage()>
<com.android.server.SensorNotificationService: void onLocationChanged(android.location.Location)>
<com.android.systemui.globalactions.GlobalActionsImpl: void showShutdownUi(boolean,java.lang.String)>
<com.android.systemui.statusbar.phone.DozeParameters: void setControlScreenOffAnimation(boolean)>
<android.perftests.utils.SettingsHelper: void delete(java.lang.String,java.lang.String)>
<com.android.systemui.assist.AssistManager: com.android.systemui.assist.AssistHandleBehaviorController getHandleBehaviorController()>
<com.android.server.DynamicSystemService: boolean startInstallation(java.lang.String)>
<android.net.NetworkMonitorManager: boolean start()>
<com.android.server.media.MediaRouterService: void releaseSessionWithRouter2(android.media.IMediaRouter2,java.lang.String)>
<com.android.server.locksettings.SyntheticPasswordManager: long createTokenBasedSyntheticPassword(byte[],int,com.android.internal.widget.LockPatternUtils.EscrowTokenStateChangeCallback)>
<com.android.server.pm.KeySetManagerService: boolean shouldCheckUpgradeKeySetLocked(com.android.server.pm.PackageSettingBase,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean isScrolledToBottom()>
<com.android.systemui.statusbar.AlphaOptimizedImageView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.pm.parsing.library.AndroidTestBaseUpdater: void updatePackage(com.android.server.pm.parsing.pkg.ParsedPackage,boolean)>
<android.net.wifi.ScanResult.InformationElement: int getIdExt()>
<com.android.settingslib.widget.FooterPreference: java.lang.CharSequence getSummary()>
<com.android.printspooler.util.PageRangeUtils: android.print.PageRange[] parsePageRanges(java.lang.CharSequence,int)>
<com.android.server.pm.PackageManagerServiceUtils: android.content.pm.PackageInfoLite getMinimalPackageInfo(android.content.Context,java.lang.String,int,java.lang.String)>
<com.android.settingslib.bluetooth.BluetoothUtils: int getConnectionStateSummary(int)>
<com.android.systemui.statusbar.phone.StatusBarIconController.TintedIconManager: void onIconAdded(int,java.lang.String,boolean,com.android.systemui.statusbar.phone.StatusBarIconHolder)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void setSyncAdapterPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.SyncAdapterPackagesProvider)>
<com.android.server.AppStateTracker: boolean areJobsRestricted(int,java.lang.String,boolean)>
<com.android.systemui.shared.plugins.PluginInstanceManager: java.lang.String toString()>
<com.android.systemui.car.notification.NotificationPanelViewController: void onPanelExpanded(boolean)>
<android.util.ArraySetPerfTest: void testRemoveIf_Small_RemoveAll()>
<com.android.settingslib.core.lifecycle.ObservableFragment: void onStart()>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: int getCurrentBackgroundTint()>
<com.android.server.infra.AbstractPerUserSystemService: void <init>(com.android.server.infra.AbstractMasterSystemService,java.lang.Object,int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isHeadsUp()>
<com.android.server.pm.UserManagerService: boolean hasUserRestriction(java.lang.String,int)>
<com.android.systemui.qs.QSDetail: boolean isClosingDetail()>
<com.android.systemui.statusbar.phone.StatusBar: void startPendingIntentDismissingKeyguard(android.app.PendingIntent,java.lang.Runnable)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: android.content.pm.ResolveInfo resolveCameraIntent()>
<com.android.systemui.statusbar.policy.ConfigurationController: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.hdmi.SelectRequestBuffer.SelectRequest: void <init>(com.android.server.hdmi.HdmiControlService,int,android.hardware.hdmi.IHdmiControlCallback)>
<android.net.wifi.WifiManager: void setTdlsEnabled(java.net.InetAddress,boolean)>
<com.android.systemui.shared.tracing.FrameProtoTracer: void stop()>
<com.android.systemui.statusbar.policy.HotspotControllerImpl: boolean isHotspotTransient()>
<com.android.systemui.statusbar.phone.StatusBar: void resetUserExpandedStates()>
<com.android.systemui.statusbar.notification.TransformState: void transformViewFullyFrom(com.android.systemui.statusbar.notification.TransformState,com.android.systemui.statusbar.ViewTransformationHelper.CustomTransformation,float)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.NativeDaemonEvent: int getCmdNumber()>
<com.android.server.accessibility.AccessibilityManagerService: void disassociateEmbeddedHierarchy(android.os.IBinder)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: float getCurrentBottomRoundness()>
<com.android.systemui.dagger.ContextComponentHelper: com.android.systemui.recents.RecentsImplementation resolveRecents(java.lang.String)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator scaleY(float,java.lang.Runnable[])>
<com.android.settingslib.media.LocalMediaManager: void stopScan()>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage capPermissionPriorities()>
<com.android.systemui.util.Utils: boolean useMediaResumption(android.content.Context)>
<com.android.systemui.SwipeHelper: void setTranslation(android.view.View,float)>
<com.android.settingslib.development.DeveloperOptionsPreferenceController: void <init>(android.content.Context)>
<com.android.packageinstaller.television.UninstallAppProgress: boolean dispatchKeyEvent(android.view.KeyEvent)>
<com.android.systemui.qs.PagedTileLayout: void startTileReveal(java.util.Set,java.lang.Runnable)>
<com.android.printspooler.ui.PrintActivity: void onDestroy()>
<com.android.server.timedetector.TimeDetectorStrategy.Callback: void setSystemClock(long)>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void hideOperatorName(boolean)>
<com.android.systemui.qs.PagedTileLayout: void onMeasure(int,int)>
<com.android.systemui.pip.phone.PipMotionHelper: void <init>(android.content.Context,com.android.systemui.pip.PipTaskOrganizer,com.android.systemui.pip.phone.PipMenuActivityController,com.android.systemui.pip.PipSnapAlgorithm,com.android.systemui.util.FloatingContentCoordinator)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void showToast(int,java.lang.String,android.os.IBinder,java.lang.CharSequence,android.os.IBinder,int,android.app.ITransientNotificationCallback)>
<com.android.server.testing.shadows.ShadowUserManager: void addProfileIds(int[])>
<com.android.systemui.statusbar.GestureRecorder: void tag(java.lang.String)>
<android.net.wifi.WifiUsabilityStatsEntry: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.qs.QSTileHost: com.android.systemui.statusbar.phone.StatusBarIconController getIconController()>
<com.android.systemui.statusbar.notification.ProgressTransformState: void recycle()>
<com.android.server.audio.AudioService: boolean isBluetoothA2dpOn()>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void setWhitelistedRestrictedPermissions(java.lang.String,java.util.List,int,int)>
<com.android.gallery3d.glrenderer.GLPaint: float getLineWidth()>
<com.android.commands.svc.BluetoothCommand: java.lang.String longHelp()>
<com.android.server.IntentResolver: boolean isFilterStopped(java.lang.Object,int)>
<com.android.settingslib.applications.ServiceListing.Builder: com.android.settingslib.applications.ServiceListing.Builder setNoun(java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean checkDeviceIdentifierAccess(java.lang.String,int,int)>
<com.android.systemui.biometrics.AuthBiometricFingerprintView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.locksettings.LockSettingsStrongAuth.StrongAuthTimeoutAlarmListener: void onAlarm()>
<com.android.systemui.classifier.FalsingManagerFake: void onScreenTurningOn()>
<android.database.SQLiteDatabasePerfTest: void tearDown()>
<com.android.systemui.statusbar.notification.stack.NotificationSection: com.android.systemui.statusbar.notification.row.ExpandableView getFirstVisibleChild()>
<com.android.systemui.statusbar.policy.UserSwitcherController.UserRecord: com.android.systemui.statusbar.policy.UserSwitcherController.UserRecord copyWithIsCurrent(boolean)>
<com.android.systemui.statusbar.policy.UserSwitcherController: java.lang.String getCurrentUserName(android.content.Context)>
<com.android.systemui.statusbar.notification.CustomInterpolatorTransformation: void <init>(int)>
<com.android.systemui.statusbar.phone.PanelViewController: com.android.systemui.statusbar.phone.PanelViewController.TouchHandler createTouchHandler()>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>
<com.android.server.testing.shadows.ShadowKeyValueBackupTask: void execute()>
<com.android.systemui.statusbar.NavigationBarController: void disableAnimationsDuringHide(int,long)>
<com.android.systemui.Dependency.DependencyKey: void <init>(java.lang.String)>
<com.android.systemui.util.time.SystemClockImpl: long elapsedRealtime()>
<com.android.server.adb.AdbService: java.util.Map getPairedDevices()>
<com.android.server.ConnectivityService: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>
<com.android.systemui.shared.system.ThreadedRendererCompat: void setContextPriority(int)>
<android.net.dhcp.DhcpServingParamsParcelExt: android.net.dhcp.DhcpServingParamsParcelExt setExcludedAddrs(java.net.Inet4Address[])>
<com.android.networkstack.tethering.IPv6TetheringCoordinator: void removeActiveDownstream(android.net.ip.IpServer)>
<com.android.server.inputmethod.InputMethodManagerInternal.InputMethodListListener: void onInputMethodListUpdated(java.util.List,int)>
<com.android.systemui.statusbar.policy.WifiSignalController: com.android.systemui.statusbar.policy.WifiSignalController.WifiState cleanState()>
<com.android.settingslib.wifi.AccessPoint: boolean matches(android.net.wifi.WifiConfiguration)>
<android.net.wifi.WifiManager: boolean removeNetwork(int)>
<com.android.server.DynamicSystemService: android.gsi.GsiProgress getInstallationProgress()>
<com.android.uiautomator.core.UiAutomatorBridge: void waitForIdle(long)>
<com.android.systemui.plugins.qs.QSTileView: void init(com.android.systemui.plugins.qs.QSTile)>
<com.android.systemui.statusbar.CommandQueue: void disable(int,int,int,boolean)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setAutoHeadsUp(boolean)>
<javax.microedition.khronos.opengles.GL10: void glFrustumf(float,float,float,float,float,float)>
<com.android.server.pm.PreferredIntentResolver: boolean isPackageForFilter(java.lang.String,com.android.server.pm.PreferredActivity)>
<com.android.settingslib.volume.MediaSessions.Callbacks: void onRemoteRemoved(android.media.session.MediaSession.Token)>
<com.android.server.usb.UsbPortManager: void disconnectSimulatedPort(java.lang.String,com.android.internal.util.IndentingPrintWriter)>
<com.android.server.soundtrigger.SoundTriggerDbHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>
<android.media.MediaSession2: void close()>
<com.android.systemui.BatteryMeterView: void updatePercentView()>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void calculateIconTranslations()>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void showNotificationIconArea(boolean)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onNotificationActive()>
<com.android.server.media.MediaSessionService: void onCleanupUser(int)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void <init>(android.content.Context,android.os.Looper,android.os.Looper,com.android.settingslib.bluetooth.LocalBluetoothManager)>
<com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder: com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder notificationEntry(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.server.locksettings.LockSettingsStrongAuth.StrongAuthTimeoutAlarmListener: void <init>(long,int)>
<android.net.TetheringManager.TetheringEventCallback: void onUpstreamChanged(android.net.Network)>
<com.android.systemui.shared.system.TaskDescriptionCompat: android.graphics.Bitmap getIcon(android.app.ActivityManager.TaskDescription,int)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: void setExtraWidthForClipping(float)>
<com.android.powermodel.RawBatteryStats.Warning: java.lang.String getMessage()>
<com.android.keyguard.KeyguardStatusView: void <init>(android.content.Context)>
<com.android.systemui.ActivityStarterDelegate: void startActivity(android.content.Intent,boolean,boolean)>
<com.android.systemui.settings.ToggleSeekBar: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.pm.UserRestrictionsUtils: android.os.Bundle clone(android.os.Bundle)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCameraDisabled(android.content.ComponentName,int,boolean)>
<com.android.systemui.statusbar.notification.row.BindStage: java.lang.Object newStageParams()>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void canUserAttemptToConfigureInteractAcrossProfiles_returnsTrue()>
<com.android.systemui.car.notification.CarHeadsUpNotificationSystemContainer: void displayNotification(android.view.View)>
<javax.microedition.khronos.opengles.GL10: void glScalex(int,int,int)>
<android.net.wifi.aware.TlvBufferUtils.TlvConstructor: android.net.wifi.aware.TlvBufferUtils.TlvConstructor putString(int,java.lang.String)>
<com.android.systemui.statusbar.notification.collection.NotifCollection: void dismissNotification(com.android.systemui.statusbar.notification.collection.NotificationEntry,com.android.systemui.statusbar.notification.collection.notifcollection.DismissedByUserStats)>
<com.android.server.inputmethod.InputMethodManagerService.Lifecycle: void <init>(android.content.Context)>
<com.android.settingslib.bluetooth.LocalBluetoothAdapter: void stopScanning()>
<android.net.wifi.aware.ConfigRequest: java.lang.String toString()>
<android.net.wifi.WifiScanner.OperationResult: void <init>(int,java.lang.String)>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void removeNotificationRemoveInterceptor(com.android.systemui.statusbar.NotificationRemoveInterceptor)>
<com.android.systemui.plugins.VolumeDialogController.State: com.android.systemui.plugins.VolumeDialogController.State copy()>
<android.net.wifi.WifiEnterpriseConfig: void loadFromSupplicant(android.net.wifi.WifiEnterpriseConfig.SupplicantLoader)>
<android.net.util.KeepalivePacketDataUtil: android.net.NattKeepalivePacketDataParcelable toStableParcelable(android.net.NattKeepalivePacketData)>
<com.android.systemui.statusbar.policy.CastControllerImpl: void startCasting(com.android.systemui.statusbar.policy.CastController.CastDevice)>
<com.android.keyguard.KeyguardAbsKeyInputView: com.android.internal.widget.LockscreenCredential getEnteredCredential()>
<android.multiuser.BenchmarkRunner: void resumeTiming()>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger.EditorLogger: android.content.SharedPreferences.Editor putInt(java.lang.String,int)>
<com.android.systemui.statusbar.DragDownHelper.DragDownCallback: void onDragDownReset()>
<com.android.server.audio.PlayerFocusEnforcer: boolean duckPlayers(com.android.server.audio.FocusRequester,com.android.server.audio.FocusRequester,boolean)>
<android.media.Session2CommandGroup.Builder: android.media.Session2CommandGroup.Builder removeCommand(android.media.Session2Command)>
<com.android.server.midi.MidiService: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>
<com.android.systemui.qs.QSHost: void forceCollapsePanels()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: com.android.systemui.statusbar.notification.row.NotificationContentView getPublicLayout()>
<com.android.settingslib.bluetooth.PbapServerProfile: int getConnectionPolicy(android.bluetooth.BluetoothDevice)>
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String,java.lang.String)>
<com.android.aapt.namespace.libtwo.TextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.systemui.stackdivider.DividerView: void <init>(android.content.Context)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void showTransientIndication(int)>
<com.android.server.biometrics.AuthService.Injector: android.hardware.face.IFaceService getFaceService()>
<com.android.systemui.statusbar.notification.stack.AmbientState: com.android.systemui.statusbar.notification.row.ExpandableNotificationRow getTrackedHeadsUpRow()>
<com.android.gallery3d.glrenderer.GLCanvas: void translate(float,float)>
<com.android.systemui.qs.customize.QSCustomizer: void <init>(android.content.Context,android.util.AttributeSet,com.android.systemui.statusbar.phone.LightBarController,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.keyguard.ScreenLifecycle,com.android.systemui.qs.customize.TileQueryHelper,com.android.internal.logging.UiEventLogger)>
<com.android.server.people.data.DataManager: java.util.List getShareShortcuts(android.content.IntentFilter,int)>
<android.multiuser.UserLifecycleTests: void switchUser()>
<com.android.systemui.qs.QSHost: void removeCallback(com.android.systemui.qs.QSHost.Callback)>
<com.android.printspooler.ui.FusedPrintersProvider: void onForceLoad()>
<com.android.packageinstaller.PackageUtil: android.view.View initSnippetForInstalledApp(android.content.Context,android.content.pm.ApplicationInfo,android.view.View)>
<com.android.systemui.media.MediaControlPanel: boolean isPlaying(android.media.session.MediaController)>
<com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.ApplicationInfo generateApplicationInfo(com.android.server.pm.parsing.pkg.AndroidPackage,int,android.content.pm.PackageUserState,int,com.android.server.pm.PackageSetting)>
<com.google.android.startop.iorap.CheckHelpers: void checkTypeInRange(int,int)>
<com.android.systemui.statusbar.ScrimView: void setChangeRunnable(java.lang.Runnable)>
<com.android.egg.neko.Cat: android.graphics.drawable.Icon recompressIcon(android.graphics.drawable.Icon)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setAppearing(boolean)>
<com.android.systemui.statusbar.notification.NotificationEntryManager: com.android.systemui.statusbar.notification.collection.NotificationEntry getPendingOrActiveNotif(java.lang.String)>
<com.android.systemui.statusbar.CastDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: android.animation.Animator getTranslateViewAnimator(float,android.animation.ValueAnimator.AnimatorUpdateListener)>
<com.android.server.usb.descriptors.UsbACFeatureUnit: byte getUnitName()>
<com.android.systemui.shared.system.TaskStackChangeListener: void onTaskMovedToFront(android.app.ActivityManager.RunningTaskInfo)>
<com.android.commands.uiautomator.RunTestCommand: java.lang.String detailedOptions()>
<com.android.systemui.tuner.StatusBarSwitch: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: void updateCompatSysUiVisibility(int,boolean,boolean)>
<com.android.server.stats.StatsManagerService: void unregisterPullAtomCallback(int)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem.TvSystemAudioModeSupportedCallback: void onResult(boolean)>
<android.net.wifi.WifiScanner.ScanListener: void onResults(android.net.wifi.WifiScanner.ScanData[])>
<com.android.server.pm.PackageManagerService: void grantImplicitAccess(int,java.lang.String)>
<com.android.systemui.statusbar.TransformableView: void transformTo(com.android.systemui.statusbar.TransformableView,java.lang.Runnable)>
<com.android.systemui.media.dialog.MediaOutputDialog: void onCreate(android.os.Bundle)>
<com.android.settingslib.volume.MediaSessions: void dump(java.io.PrintWriter)>
<com.android.systemui.charging.WirelessChargingAnimation.Callback: void onAnimationStarting()>
<com.android.settingslib.bluetooth.HeadsetProfile: boolean isAudioOn()>
<com.android.systemui.power.PowerNotificationWarnings: void dismissHighTemperatureWarning()>
<com.android.gallery3d.exif.ExifInterface: boolean rewriteExif(java.nio.ByteBuffer,java.util.Collection)>
<com.android.systemui.plugins.qs.QSTileView: void <init>(android.content.Context)>
<com.android.server.locksettings.recoverablekeystore.storage.CleanupManager: com.android.server.locksettings.recoverablekeystore.storage.CleanupManager getInstance(android.content.Context,com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage,com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb,com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isOdm()>
<com.android.server.policy.WakeGestureListener: void dump(java.io.PrintWriter,java.lang.String)>
<com.android.uiautomator.core.UiDevice: boolean click(int,int)>
<com.android.server.pm.IntentFilterVerificationState: void addFilter(android.content.pm.parsing.component.ParsedIntentInfo)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void onStandby(boolean,int)>
<android.text.StaticLayoutCreateDrawPerfTest: void timeDraw()>
<com.android.server.pm.ShortcutNonPersistentUser: void <init>(com.android.server.pm.ShortcutService,int)>
<com.android.server.pm.UserManagerService: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
<com.android.server.accessibility.gestures.GestureUtils: boolean isTimedOut(android.view.MotionEvent,android.view.MotionEvent,int)>
<com.android.systemui.BatteryMeterView: void setIgnoreTunerUpdates(boolean)>
<com.android.gallery3d.exif.ExifInterface: void writeExif(java.io.InputStream,java.lang.String)>
<android.processor.view.inspector.InspectableClassModel.Property: void setIntEnumEntries(java.util.List)>
<com.android.settingslib.searchprovider.SettingsXmlIndexProvider.SearchIndexableIntentResource: void <init>(int,java.lang.String,java.lang.String)>
<com.android.server.ConnectivityService: void setAcceptUnvalidated(android.net.Network,boolean,boolean)>
<com.android.systemui.statusbar.phone.StatusBarWindowView: android.util.Pair statusBarCornerCutoutMargins(android.view.DisplayCutout,android.view.Display,int,int)>
<com.android.settingslib.media.PhoneMediaDevice: android.graphics.drawable.Drawable getIconWithoutBackground()>
<com.android.systemui.statusbar.NotificationPresenter: void updateNotificationViews(java.lang.String)>
<com.android.systemui.statusbar.policy.BrightnessMirrorController: void updateResources()>
<com.android.server.pm.UserManagerService: boolean isUserRunning(int)>
<android.net.wifi.IWifiManager: java.util.List getNetworkSuggestions(java.lang.String)>
<com.android.keyguard.KeyguardDisplayManager: void hide()>
<com.android.server.audio.AudioService: void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void removeContainerView(android.view.View)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: boolean requestFrontendInternal(android.media.tv.tunerresourcemanager.TunerFrontendRequest,int[])>
<com.android.server.soundtrigger.SoundTriggerHelper: void onSoundModelUpdate(android.hardware.soundtrigger.SoundTrigger.SoundModelEvent)>
<android.wm.WindowAddRemovePerfTest: void setUpClass()>
<com.android.systemui.statusbar.notification.DynamicPrivacyController.Listener: void onDynamicPrivacyChanged()>
<com.android.systemui.util.AutoMarqueeTextView: void onDetachedFromWindow()>
<com.android.systemui.statusbar.DragDownHelper: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.systemui.car.navigationbar.CarNavigationBarController: void hideAllKeyguardButtons(boolean)>
<android.net.wifi.aware.AttachCallback: void onAttached(android.net.wifi.aware.WifiAwareSession)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: java.util.ArrayList getViews()>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onPhoneStateChanged(int)>
<com.android.server.biometrics.face.FaceUtils: java.util.List getBiometricsForUser(android.content.Context,int)>
<android.os.StatsDimensionsValue: boolean isValueType(int)>
<com.android.systemui.egg.MLand: boolean onTrackballEvent(android.view.MotionEvent)>
<com.android.systemui.car.sideloaded.SideLoadedAppDetector: void <init>(android.content.res.Resources,android.content.pm.PackageManager,com.android.systemui.car.CarDeviceProvisionedController)>
<com.android.systemui.classifier.FalsingManagerImpl: boolean isUnlockingDisabled()>
<com.android.settingslib.drawer.SwitchController: boolean onCheckedChanged(boolean)>
<com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.PackageImpl setBaseCodePath(java.lang.String)>
<com.android.server.pm.ProtectedPackages: void setDeviceAndProfileOwnerPackages(int,java.lang.String,android.util.SparseArray)>
<android.net.wifi.hotspot2.pps.HomeSp: java.lang.String[] getOtherHomePartners()>
<com.android.systemui.shared.recents.view.AppTransitionAnimationSpecCompat: android.view.AppTransitionAnimationSpec toAppTransitionAnimationSpec()>
<com.android.server.search.SearchManagerService: java.util.List getGlobalSearchActivities()>
<com.android.systemui.shared.system.LatencyTrackerCompat: void logToggleRecents(int)>
<android.net.wifi.SoftApConfiguration: int getChannel()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: int setRecoveryStatus(int,java.lang.String,int)>
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String)>
<com.android.systemui.statusbar.policy.UserSwitcherController: boolean useFullscreenUserSwitcher()>
<com.android.systemui.car.CarServiceProvider.CarServiceOnConnectedListener: void onConnected(android.car.Car)>
<com.android.server.hdmi.HdmiCecController.NativeWrapper: void nativeSetLanguage(java.lang.String)>
<com.android.dynsystem.BootCompletedReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: java.lang.Boolean isSystemNotification()>
<com.android.proxyhandler.ProxyService: void onDestroy()>
<android.net.wifi.WifiEnterpriseConfig: void setSubjectMatch(java.lang.String)>
<com.android.systemui.statusbar.phone.StatusBar: void createUserSwitcher()>
<android.processor.view.inspector.InspectableClassModel.Property: android.processor.view.inspector.InspectableClassModel.Property.Type getType()>
<com.android.systemui.shared.system.TransactionCompat: com.android.systemui.shared.system.TransactionCompat hide(com.android.systemui.shared.system.SurfaceControlCompat)>
<com.android.systemui.statusbar.SysuiStatusBarStateController: boolean fromShadeLocked()>
<com.android.systemui.assist.ui.InvocationLightsView: com.android.systemui.assist.ui.CornerPathRenderer createCornerPathRenderer(android.content.Context)>
<android.net.wifi.rtt.RangingResult: int getNumSuccessfulMeasurements()>
<com.android.settingslib.dream.DreamBackend: void launchSettings(android.content.Context,com.android.settingslib.dream.DreamBackend.DreamInfo)>
<com.android.systemui.doze.DozeHost.Callback: void onNotificationAlerted(java.lang.Runnable)>
<com.android.server.display.DisplayModeDirector: void <init>(android.content.Context,android.os.Handler)>
<com.android.systemui.DejankUtils: void stopDetectingBlockingIpcs(java.lang.String)>
<com.android.systemui.classifier.DirectionClassifier: void <init>(com.android.systemui.classifier.ClassifierData)>
<com.android.settingslib.animation.AppearAnimationUtils: float getStartTranslation()>
<com.android.server.input.InputManagerService: void <init>(android.content.Context)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: int getVisibility()>
<com.android.systemui.statusbar.policy.DateView: void onDetachedFromWindow()>
<com.android.server.AppStateTracker: boolean areAlarmsRestricted(int,java.lang.String,boolean)>
<com.android.systemui.qs.tiles.FlashlightTile: void handleClick()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void showAssistDisclosure()>
<com.android.server.input.InputManagerService.WindowManagerCallbacks: void onPointerDownOutsideFocus(android.os.IBinder)>
<android.multiuser.UserLifecycleTests: void startUser()>
<com.android.server.pm.permission.PermissionSettings: boolean isPermissionRuntime(java.lang.String)>
<com.android.server.NetworkManagementService: boolean isBandwidthControlEnabled()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeKeyPair(android.content.ComponentName,java.lang.String,java.lang.String)>
<com.android.server.biometrics.iris.IrisService: boolean hasReachedEnrollmentLimit(int)>
<com.android.systemui.egg.MLand: void startPlaying()>
<com.android.settingslib.RestrictedLockUtilsInternal.LockSettingCheck: boolean isEnforcing(android.app.admin.DevicePolicyManager,android.content.ComponentName,int)>
<com.android.server.slice.SliceManagerService.Lifecycle: void onStart()>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: boolean isExpanded()>
<android.net.wifi.WifiManager: void addOrUpdatePasspointConfiguration(android.net.wifi.hotspot2.PasspointConfiguration)>
<com.android.systemui.statusbar.phone.DozeServiceHost: boolean isBlockingDoze()>
<com.android.systemui.volume.VolumeDialogComponent: void dispatchDemoCommand(java.lang.String,android.os.Bundle)>
<com.android.server.slice.SliceManagerService: com.android.server.slice.PinnedSliceState createPinnedSlice(android.net.Uri,java.lang.String)>
<com.android.systemui.statusbar.notification.row.RowContentBindParams: boolean needsReinflation()>
<com.android.gallery3d.glrenderer.GLCanvas: void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.RectF,android.graphics.RectF)>
<com.android.systemui.statusbar.phone.DozeParameters: boolean doubleTapReportsTouchCoordinates()>
<com.android.systemui.shared.system.TaskStackChangeListeners: void onTaskCreated(int,android.content.ComponentName)>
<com.android.wallpapercropper.CropView.TouchCallback: void onTouchUp()>
<com.android.server.updates.SmartSelectionInstallReceiver: boolean verifyVersion(int,int)>
<com.android.keyguard.EmergencyButton: void takeEmergencyCallAction()>
<com.android.server.systemcaptions.SystemCaptionsManagerService: void <init>(android.content.Context)>
<com.android.photos.BitmapRegionTileSource.BitmapSource: void <init>(int)>
<com.android.systemui.statusbar.notification.stack.AmbientState: int getSpeedBumpIndex()>
<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>
<android.app.ResourcesThemePerfTest: void obtainStyledAttributesForViewFromMaterial()>
<com.android.settingslib.net.NetworkStatsSummaryLoader.Builder: com.android.settingslib.net.NetworkStatsSummaryLoader.Builder setNetworkTemplate(android.net.NetworkTemplate)>
<android.app.backup.BackupUtilsTest: void testIsFileSpecifiedInPathList_whenFileAndPathListHasItsDirectory()>
<com.android.systemui.qs.QSPanel: void addSecurityFooter()>
<android.net.wifi.WifiSsid: android.net.wifi.WifiSsid createFromByteArray(byte[])>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalHotspot2ScanTimeMillis()>
<com.android.systemui.qs.QSPanel: void showDetail(boolean,com.android.systemui.qs.QSPanel.Record)>
<com.android.server.audio.AudioService: void setRingtonePlayer(android.media.IRingtonePlayer)>
<com.android.systemui.statusbar.phone.StatusBarIconList: com.android.systemui.statusbar.phone.StatusBarIconHolder getIcon(int,int)>
<com.android.systemui.settings.ToggleSliderView: void setMirrorController(com.android.systemui.statusbar.policy.BrightnessMirrorController)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onSimStateChanged(int,int,int)>
<com.android.systemui.pip.PipUI: void setShelfHeight(boolean,int)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: java.util.Collection getDevices()>
<android.net.wifi.hotspot2.pps.Credential.UserCredential: void setAbleToShare(boolean)>
<com.android.server.pm.ApexManager: boolean destroyCeSnapshotsNotSpecified(int,int[])>
<com.android.systemui.car.CarDeviceProvisionedController: boolean isUserSetupInProgress(int)>
<com.android.photos.DumbBitmapRegionDecoder: com.android.photos.DumbBitmapRegionDecoder newInstance(java.io.InputStream)>
<com.android.systemui.pip.PipTaskOrganizer: void onTaskInfoChanged(android.app.ActivityManager.RunningTaskInfo)>
<com.android.uiautomator.core.UiObject: android.graphics.Rect getVisibleBounds()>
<javax.microedition.khronos.opengles.GL11Ext: void glWeightPointerOES(int,int,int,int)>
<com.android.systemui.statusbar.phone.StatusBarIconController.IconManager: void exitDemoMode()>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: boolean canBeDismissed()>
<com.android.systemui.shared.plugins.PluginManagerImpl: void handleWtfs()>
<com.android.systemui.tuner.CustomListPreference.CustomListPreferenceDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.server.pm.ShortcutService: void validateShortcutForPinRequest(android.content.pm.ShortcutInfo)>
<android.net.wifi.hotspot2.pps.Policy.RoamingPartner: int hashCode()>
<com.android.server.pm.PackageSender: void notifyPackageAdded(java.lang.String,int)>
<com.android.server.usb.UsbDeviceManager: long getCurrentFunctions()>
<com.android.systemui.util.Utils.DisableStateTracker: void disable(int,int,int,boolean)>
<com.android.inputdevices.InputDeviceReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.egg.neko.NekoLand: void onRequestPermissionsResult(int,java.lang.String[],int[])>
<com.android.server.accessibility.AccessibilityManagerService: boolean getAccessibilityFocusClickPointInScreen(android.graphics.Point)>
<com.android.systemui.statusbar.phone.NotificationIconAreaController: void setAnimationsEnabled(boolean)>
<com.android.server.pm.PackageManagerService: java.lang.String getSharedSystemSharedLibraryPackageName()>
<android.net.wifi.WifiManager: void registerTrafficStateCallback(java.util.concurrent.Executor,android.net.wifi.WifiManager.TrafficStateCallback)>
<com.android.systemui.volume.Events.Callback: void writeState(long,com.android.systemui.plugins.VolumeDialogController.State)>
<android.net.wifi.SoftApConfiguration.Builder: android.net.wifi.SoftApConfiguration.Builder setBand(int)>
<com.android.systemui.statusbar.notification.stack.NotificationListContainer: android.view.View getContainerChildAt(int)>
<com.android.server.webkit.SystemImpl: int onWebViewProviderChanged(android.content.pm.PackageInfo)>
<com.android.server.usb.UsbService: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>
<com.android.settingslib.wifi.WifiTracker: boolean isConnected()>
<com.android.server.pm.permission.BasePermission: boolean isSetup()>
<com.android.server.integrity.model.RuleMetadata: java.lang.String getRuleProvider()>
<com.android.egg.neko.PrefState: void removeCat(com.android.egg.neko.Cat)>
<com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage: void recoverySnapshotAvailable(int)>
<com.android.server.IntentResolver: boolean isPackageForFilter(java.lang.String,java.lang.Object)>
<com.android.systemui.statusbar.phone.ShadeController: void animateCollapsePanels()>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void setOnActivatedListener(com.android.systemui.statusbar.notification.row.ActivatableNotificationView.OnActivatedListener)>
<com.android.server.biometrics.BiometricServiceBase: long getAuthenticatorId(int)>
<com.android.systemui.qs.tiles.NightDisplayTile: int getMetricsCategory()>
<com.android.systemui.statusbar.notification.row.StackScrollerDecorView: boolean hasOverlappingRendering()>
<android.content.pm.PackageManagerInternal: java.util.List getTargetPackageNames(int)>
<android.os.StatsFrameworkInitializer: void setStatsServiceManager(android.os.StatsServiceManager)>
<android.net.dhcp.DhcpServingParamsParcelExt: android.net.dhcp.DhcpServingParamsParcelExt setExcludedAddrs(java.util.Set)>
<android.net.wifi.IWifiManager: void unregisterScanResultsCallback(android.net.wifi.IScanResultsCallback)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean,int)>
<com.android.systemui.statusbar.phone.PhoneStatusBarView: void onDetachedFromWindow()>
<com.android.server.pm.UserTypeDetails.Builder: com.android.server.pm.UserTypeDetails.Builder setBaseType(int)>
<com.android.systemui.statusbar.policy.CastController.Callback: void onCastDevicesChanged()>
<com.android.systemui.statusbar.notification.row.NotificationSnooze.NotificationSnoozeOption: android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction getAccessibilityAction()>
<com.android.systemui.car.statusbar.DozeServiceHost: void onSlpiTap(float,float)>
<com.android.systemui.doze.DozeHost: void stopDozing()>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>
<com.android.systemui.statusbar.notification.row.ExpandableView: void onHeightReset()>
<com.android.systemui.statusbar.notification.row.ExpandableView: android.view.ViewGroup getTransientContainer()>
<com.android.systemui.ActivityStarterDelegate: void startPendingIntentDismissingKeyguard(android.app.PendingIntent,java.lang.Runnable)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void setKeepInParent(boolean)>
<com.android.systemui.statusbar.policy.HeadsUpManager: int getContentFlag()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean hasUserChangedExpansion()>
<com.android.systemui.qs.tiles.BatterySaverTile: java.lang.CharSequence getTileLabel()>
<com.android.server.display.DisplayModeDirector.DesiredDisplayModeSpecsListener: void onDesiredDisplayModeSpecsChanged()>
<com.android.server.uri.GrantUri: int hashCode()>
<com.android.systemui.qs.customize.QSCustomizer: void hide()>
<com.android.systemui.statusbar.notification.row.HybridNotificationView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.classifier.FalsingManagerFake: void setIsUnlockingDisabled(boolean)>
<com.android.systemui.car.userswitcher.UserSwitchTransitionViewMediator: void registerListeners()>
<com.android.server.locksettings.LockSettingsService: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>
<android.net.ITetheringConnector: void stopAllTethering(java.lang.String,android.net.IIntResultListener)>
<com.android.systemui.statusbar.phone.HeadsUpAppearanceController: void updateHeader(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.settingslib.deviceinfo.AbstractIpAddressPreferenceController: void displayPreference(androidx.preference.PreferenceScreen)>
<com.android.systemui.statusbar.policy.Clock: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.systemui.usb.UsbResolverActivity: void onCreate(android.os.Bundle)>
<com.android.server.role.RoleUserState: boolean removeRoleHolder(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView.OnActivatedListener: void onActivated(com.android.systemui.statusbar.notification.row.ActivatableNotificationView)>
<com.android.systemui.recents.OverviewProxyService: void notifyBackAction(boolean,int,int,boolean,boolean)>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: java.util.List getFeatureGroups()>
<android.app.ResourcesManagerPerfTest: void getResourcesCached()>
<com.android.systemui.car.navigationbar.NavigationBarViewFactory: android.view.ViewGroup getLeftWindow()>
<com.android.systemui.statusbar.phone.PanelViewController: void setBar(com.android.systemui.statusbar.phone.PanelBar)>
<com.android.server.biometrics.face.FaceConstants: int acquireVendorCode()>
<com.android.server.ConnectivityService.Dependencies: com.android.server.connectivity.IpConnectivityMetrics.Logger getMetricsLogger()>
<android.app.ResourcesThemePerfTest: void applyStyle()>
<com.android.server.policy.PhoneWindowManager: int interceptMotionBeforeQueueingNonInteractive(int,long,int)>
<com.android.uiautomator.testrunner.UiAutomatorTestRunner: void prepareTestCase(junit.framework.TestCase)>
<com.android.server.utils.UserTokenWatcher.Callback: void acquired(int)>
<com.android.server.usb.descriptors.UsbMSMidiHeader: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.commands.bmgr.BmgrTest: void testRun_whenUserNotSpecified_callsBackupManagerAsSystemUser()>
<com.android.systemui.statusbar.policy.BrightnessMirrorController: void onOverlayChanged()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: int getNumberSubscriptions()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isBaseHardwareAccelerated()>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void setAffordanceAlpha(float)>
<com.android.server.audio.AudioService: java.util.ArrayList getDevicesForAttributes(android.media.AudioAttributes)>
<com.android.commands.uiautomator.Launcher.Command: void run(java.lang.String[])>
<com.android.systemui.doze.DozeHost: void addCallback(com.android.systemui.doze.DozeHost.Callback)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.MenuItem: android.view.View getMenuView()>
<com.android.systemui.plugins.PluginInitializerImpl: java.lang.String[] getWhitelistedPlugins(android.content.Context)>
<com.android.systemui.DessertCaseView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean isClearAllVisible()>
<com.android.systemui.statusbar.phone.UserAvatarView: void setAvatar(android.graphics.Bitmap)>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void addNotification(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap)>
<com.android.systemui.statusbar.phone.NotificationPanelView: void setDozing(boolean)>
<com.android.settingslib.widget.settingsspinner.SettingsSpinnerAdapter: void <init>(android.content.Context)>
<android.processor.view.inspector.PlatformInspectableProcessor: javax.lang.model.SourceVersion getSupportedSourceVersion()>
<android.net.wifi.WifiInfo: void setNetworkId(int)>
<com.android.networkstack.tethering.BpfCoordinator.Ipv6ForwardingRule: int hashCode()>
<com.android.systemui.plugins.VolumeDialogController.StreamState: com.android.systemui.plugins.VolumeDialogController.StreamState copy()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeOverrideApn(android.content.ComponentName,int)>
<com.android.systemui.statusbar.KeyguardIndicationController: void onDozeAmountChanged(float,float)>
<com.android.networkstack.tethering.PrivateAddressCoordinator: void updateUpstreamPrefix(android.net.Network,android.net.LinkProperties)>
<com.android.systemui.biometrics.AuthContainerView: void dismissWithoutCallback(boolean)>
<com.android.server.locksettings.SyntheticPasswordManager: com.android.internal.widget.VerifyCredentialResponse verifyChallenge(android.service.gatekeeper.IGateKeeperService,com.android.server.locksettings.SyntheticPasswordManager.AuthenticationToken,long,int)>
<com.android.systemui.statusbar.phone.DozeParameters: int getPulseDuration()>
<com.android.server.audio.AudioService: boolean isAudioServerRunning()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvf(int,int,float)>
<com.android.systemui.statusbar.phone.PanelViewController: void onHeightUpdated(float)>
<com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter.Builder: com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter.Builder setActivityLaunchAnimator(com.android.systemui.statusbar.notification.ActivityLaunchAnimator)>
<com.android.systemui.classifier.FalsingManagerProxy: void setNotificationExpanded()>
<com.android.egg.neko.NekoTile: void onPrefsChanged()>
<com.android.server.accessibility.gestures.TouchState: void startGestureDetecting()>
<com.android.systemui.qs.QSPanel: com.android.systemui.qs.QSSecurityFooter getSecurityFooter()>
<com.android.systemui.statusbar.EmptyShadeView.EmptyShadeViewState: void applyToView(android.view.View)>
<com.android.server.Watchdog.HandlerChecker: void pauseLocked(java.lang.String)>
<com.android.systemui.recents.TriangleShape: com.android.systemui.recents.TriangleShape create(float,float,boolean)>
<com.android.server.input.InputManagerService: int getKeyCodeState(int,int,int)>
<com.android.keyguard.clock.DefaultClockController: void <init>(android.content.res.Resources,android.view.LayoutInflater,com.android.systemui.colorextraction.SysuiColorExtractor)>
<com.android.systemui.doze.DozeSensors: void setTouchscreenSensorsListening(boolean)>
<com.android.systemui.classifier.HumanInteractionClassifier: void onSensorChanged(android.hardware.SensorEvent)>
<com.android.server.accessibility.AccessibilityManagerService.AccessibilityDisplayListener: void onDisplayRemoved(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void notifyGroupChildAdded(com.android.systemui.statusbar.notification.row.ExpandableView)>
<com.android.server.NetworkManagementService: void setUidMeteredNetworkWhitelist(int,boolean)>
<com.android.server.usb.descriptors.Usb10ACHeader: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List setMeteredDataDisabledPackages(android.content.ComponentName,java.util.List)>
<com.android.settingslib.net.NetworkCycleDataForUid.Builder: com.android.settingslib.net.NetworkCycleDataForUid build()>
<com.android.server.testing.shadows.ShadowAppBackupUtils: boolean appIsRunningAndEligibleForBackupWithTransport(com.android.server.backup.transport.TransportClient,java.lang.String,android.content.pm.PackageManager,int)>
<com.android.statementservice.retriever.AndroidPackageInfoFetcher: void <init>(android.content.Context)>
<com.android.systemui.qs.carrier.QSCarrier: void setCarrierText(java.lang.CharSequence)>
<android.content.pm.PackageManagerInternal: boolean hasInstantApplicationMetadata(java.lang.String,int)>
<com.android.systemui.glwallpaper.GLWallpaperRenderer: void onSurfaceChanged(int,int)>
<com.android.systemui.statusbar.StatusBarIconView: java.lang.String contentDescForNotification(android.content.Context,android.app.Notification)>
<com.android.settingslib.deviceinfo.PrivateStorageInfo: com.android.settingslib.deviceinfo.PrivateStorageInfo getPrivateStorageInfo(com.android.settingslib.deviceinfo.StorageVolumeProvider)>
<com.android.systemui.statusbar.phone.StatusBarWindowCallback: void onStateChanged(boolean,boolean,boolean)>
<com.android.systemui.statusbar.phone.StatusBarIconList: int getViewIndex(int,int)>
<com.android.systemui.qs.QSHost: void collapsePanels()>
<com.android.server.usb.descriptors.UsbInterfaceAssoc: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.systemui.bubbles.animation.StackAnimationController: void cancelStackPositionAnimations()>
<android.net.wifi.p2p.WifiP2pConfig.Builder: android.net.wifi.p2p.WifiP2pConfig.Builder setDeviceAddress(android.net.MacAddress)>
<com.android.systemui.statusbar.phone.UserAvatarView: void setDrawable(android.graphics.drawable.Drawable)>
<com.android.systemui.statusbar.notification.stack.AmbientState: void reload(android.content.Context)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void onMeasure(int,int)>
<com.android.keyguard.clock.ImageClock: void setClockColors(int,int)>
<com.android.systemui.qs.tiles.WifiTile.WifiDetailAdapter: android.content.Intent getSettingsIntent()>
<com.android.systemui.appops.AppOpsController: java.util.List getActiveAppOpsForUser(int)>
<com.android.server.pm.permission.PermissionManagerService: void grantRuntimePermission(java.lang.String,java.lang.String,int)>
<com.android.settingslib.net.NetworkCycleData.Builder: com.android.settingslib.net.NetworkCycleData.Builder setEndTime(long)>
<com.android.server.DeviceIdleController: void resetPowerSaveWhitelistExceptIdleInternal()>
<com.android.server.biometrics.BiometricServiceBase: void loadAuthenticatorIds()>
<com.android.systemui.statusbar.phone.StatusBar: void animateKeyguardUnoccluding()>
<com.android.server.pm.parsing.pkg.PackageImpl: boolean isCoreApp()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: void connect(boolean)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isTopLevelChild()>
<com.android.server.devicepolicy.DevicePolicyManagerService: long getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)>
<com.android.systemui.statusbar.phone.PanelViewController: void setOverExpansion(float,boolean)>
<javax.obex.PasswordAuthentication: byte[] getPassword()>
<com.android.systemui.qs.QuickQSPanel: com.android.systemui.qs.QSEvent openPanelEvent()>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void startAnimationToState(com.android.systemui.statusbar.notification.stack.AnimationProperties)>
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean isVoiceInteraction()>
<com.android.server.stats.pull.netstats.NetworkStatsExt: void <init>(android.net.NetworkStats,int[],boolean)>
<com.android.server.NetworkScoreService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: boolean checkClientExists(int)>
<com.android.server.locksettings.SyntheticPasswordManager: void destroySPBlobKey(java.lang.String)>
<com.android.systemui.statusbar.NotificationRemoteInputManager.Callback: boolean shouldHandleRemoteInput(android.view.View,android.app.PendingIntent)>
<com.android.server.media.MediaRouterService: void setRouteVolumeWithRouter2(android.media.IMediaRouter2,android.media.MediaRoute2Info,int)>
<com.android.systemui.plugins.qs.QSFactory: com.android.systemui.plugins.qs.QSTile createTile(java.lang.String)>
<android.net.dhcp.DhcpServerCallbacks: int getInterfaceVersion()>
<com.android.systemui.Dependency: boolean autoRegisterModulesForDump()>
<com.android.location.provider.ActivityRecognitionProvider: boolean isActivitySupported(java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationRowContentBinder.InflationCallback: void onAsyncInflationFinished(com.android.systemui.statusbar.notification.collection.NotificationEntry)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void bindCameraPrewarmService()>
<android.net.wifi.p2p.WifiP2pManager: void stopListening(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.systemui.stackdivider.DividerView: void onLayout(boolean,int,int,int,int)>
<com.android.server.pm.parsing.library.OrgApacheHttpLegacyUpdater: void updatePackage(com.android.server.pm.parsing.pkg.ParsedPackage,boolean)>
<com.android.systemui.qs.external.TileServiceManager: void setBindRequested(boolean)>
<com.android.commands.svc.BluetoothCommand: void run(java.lang.String[])>
<com.android.egg.neko.PrefState: void setListener(com.android.egg.neko.PrefState.PrefsListener)>
<com.android.systemui.car.sideloaded.SideLoadedAppListener: void onTaskCreated(int,android.content.ComponentName)>
<com.android.systemui.qs.QSTileHost: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.ForegroundServicesUserState: boolean removeStandardLayoutNotification(java.lang.String,java.lang.String)>
<javax.obex.ClientOperation: int getResponseCode()>
<com.android.server.RescueParty.RescuePartyObserver: com.android.server.RescueParty.RescuePartyObserver getInstance(android.content.Context)>
<com.android.server.infra.AbstractMasterSystemService: void assertCalledByPackageOwner(java.lang.String)>
<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>
<com.android.systemui.statusbar.phone.ReverseLinearLayout.ReverseRelativeLayout: void reverse(boolean)>
<com.android.server.audio.AudioService: void playerHasOpPlayAudio(int,boolean)>
<android.net.wifi.WifiEnterpriseConfig: void setPassword(java.lang.String)>
<com.android.systemui.plugins.qs.DetailAdapter: android.view.View createDetailView(android.content.Context,android.view.View,android.view.ViewGroup)>
<com.android.settingslib.applications.ApplicationsState: void removePackage(java.lang.String,int)>
<com.android.server.display.color.DisplayTransformManager: boolean needsLinearColorMatrix()>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setAlpha(float,boolean,long,boolean)>
<com.android.settingslib.bluetooth.MapProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)>
<com.android.keyguard.KeyguardPasswordView: boolean startDisappearAnimation(java.lang.Runnable)>
<com.android.systemui.qs.tiles.AirplaneModeTile: com.android.systemui.plugins.qs.QSTile.BooleanState newTileState()>
<com.android.wallpaperbackup.WallpaperBackupAgent: void onQuotaExceeded(long,long)>
<com.android.settingslib.TwoTargetPreference: int getSecondTargetResId()>
<com.android.server.audio.AudioService: boolean hasHapticChannels(android.net.Uri)>
<com.android.server.locksettings.LockSettingsService: java.lang.String generateKey(java.lang.String)>
<android.net.wifi.RttManager: void startRanging(android.net.wifi.RttManager.RttParams[],android.net.wifi.RttManager.RttListener)>
<com.android.nfc_extras.EeAlreadyOpenException: void <init>(java.lang.String)>
<com.android.systemui.statusbar.phone.NavigationBarView: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>
<com.android.systemui.statusbar.phone.StatusBarIconControllerImpl: void setIcon(java.lang.String,com.android.internal.statusbar.StatusBarIcon)>
<android.net.wifi.aware.PeerHandle: int hashCode()>
<com.android.settingslib.core.lifecycle.ObservablePreferenceFragment: void onDestroy()>
<com.android.systemui.wm.DisplayController.OnDisplaysChangedListener: void onDisplayAdded(int)>
<com.android.systemui.statusbar.phone.SettingsButton: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.TelephonyRegistry: void notifyDataActivity(int)>
<com.android.systemui.classifier.Stroke: float getEndPointLength()>
<com.android.systemui.pip.PipBoundsHandler: void setMinEdgeSize(int)>
<com.android.statementservice.retriever.Statement: com.android.statementservice.retriever.Relation getRelation()>
<android.net.ip.IpClientManager: void <init>(android.net.ip.IIpClient)>
<com.android.server.SystemService: void onStopUser(android.content.pm.UserInfo)>
<com.android.gallery3d.exif.Rational: void <init>(long,long)>
<com.android.settingslib.bluetooth.CachedBluetoothDeviceManager: void onDeviceNameUpdated(android.bluetooth.BluetoothDevice)>
<com.android.server.input.InputManagerService: void switchKeyboardLayout(int,int)>
<com.android.server.biometrics.AuthenticationClient: void <init>(android.content.Context,com.android.server.biometrics.Constants,com.android.server.biometrics.BiometricServiceBase.DaemonWrapper,long,android.os.IBinder,com.android.server.biometrics.BiometricServiceBase.ServiceListener,int,int,long,boolean,java.lang.String,int,boolean)>
<com.android.settingslib.utils.PowerUtil: long convertUsToMs(long)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void setTopAppHidesStatusBar(boolean)>
<com.android.keyguard.KeyguardSecurityContainer: void onStartingToHide()>
<com.android.settingslib.deviceinfo.AbstractImsStatusPreferenceController: void displayPreference(androidx.preference.PreferenceScreen)>
<android.net.NetworkMonitorManager: void <init>(android.net.INetworkMonitor,java.lang.String)>
<com.android.systemui.settings.ToggleSlider: void setMax(int)>
<com.android.server.NetworkManagementService: void removeRoute(int,android.net.RouteInfo)>
<com.android.server.integrity.parser.RuleBinaryParser: java.util.List parse(com.android.server.integrity.parser.RandomAccessObject,java.util.List)>
<com.android.keyguard.KeyguardPatternView: void setLockPatternUtils(com.android.internal.widget.LockPatternUtils)>
<com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.biometrics.fingerprint.FingerprintService: int getLockoutMode()>
<android.net.wifi.WifiManager: void forget(int,android.net.wifi.WifiManager.ActionListener)>
<android.net.wifi.aware.PublishConfig: java.lang.String toString()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void notifyGroupChildRemoved(android.view.View,android.view.ViewGroup)>
<com.android.systemui.globalactions.ListGridLayout: int getRowCount()>
<com.android.systemui.statusbar.notification.row.NotificationConversationInfo: void onFinishedClosing()>
<com.android.systemui.statusbar.phone.PanelViewController: void setExpandedHeight(float)>
<com.android.systemui.pip.tv.PipManager: void removeListener(com.android.systemui.pip.tv.PipManager.Listener)>
<com.android.systemui.statusbar.policy.ScrollAdapter: boolean isScrolledToBottom()>
<com.android.systemui.statusbar.GestureRecorder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.OverlayManagerPerfTest: void tearDown()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void notifyStateChangedCallbacks()>
<com.android.systemui.statusbar.notification.row.ExpandableView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.net.ip.IpClientUtil.WaitForProvisioningCallbacks: void onProvisioningSuccess(android.net.LinkProperties)>
<com.android.powermodel.RawBatteryStats: com.android.powermodel.RawBatteryStats.Record getSingle(java.lang.Class,int)>
<com.android.uiautomator.core.UiObject: boolean clickBottomRight()>
<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.TestCaseCollector getTestCaseCollector(java.lang.ClassLoader)>
<com.android.server.appprediction.AppPredictionPerUserService: void <init>(com.android.server.appprediction.AppPredictionManagerService,java.lang.Object,int)>
<com.android.server.media.MediaSession2Record: boolean sendMediaButton(java.lang.String,int,int,boolean,android.view.KeyEvent,int,android.os.ResultReceiver)>
<com.android.server.people.data.ConversationInfo: boolean isPersonBot()>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeUtil: void removeUnnecessaryNonPersistentPreference(androidx.preference.Preference)>
<com.android.systemui.keyguard.KeyguardSliceProvider: void inject()>
<com.android.systemui.globalactions.GlobalActionsColumnLayout: float getAnimationDistance()>
<javax.obex.Operation: long getLength()>
<com.android.keyguard.KeyguardSimPukView: void onDetachedFromWindow()>
<com.android.systemui.power.PowerUI: void maybeShowBatteryWarningV2(boolean,int)>
<com.android.server.policy.WindowManagerPolicy: void setSwitchingUser(boolean)>
<com.android.printservice.recommendation.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>
<android.net.wifi.hotspot2.PasspointConfiguration: java.lang.String toString()>
<com.android.server.twilight.TwilightState: long sunriseTimeMillis()>
<com.android.systemui.statusbar.policy.RemoteInputView: boolean updatePendingIntentFromActions(android.app.Notification.Action[])>
<com.android.server.LockGuard: java.lang.Object installLock(java.lang.Object,java.lang.String)>
<com.android.server.BatteryService.HealthServiceWrapper.IServiceManagerSupplier: android.hidl.manager.V1_0.IServiceManager get()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: int getEmptyBottomMargin()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isSignedWithPlatformKey()>
<com.android.systemui.media.ResumeMediaBrowser: android.media.session.MediaController createMediaController(android.media.session.MediaSession.Token)>
<com.android.systemui.qs.PagedTileLayout: void computeScroll()>
<com.android.systemui.qs.PagedTileLayout: void fakeDragBy(float)>
<android.os.UserManagerInternal: java.util.List getUsers(boolean,boolean,boolean)>
<com.android.systemui.plugins.NavigationEdgeBackPlugin: void onMotionEvent(android.view.MotionEvent)>
<com.android.systemui.doze.DozeLog: void tracePulseDropped(boolean,com.android.systemui.doze.DozeMachine.State,boolean)>
<com.android.systemui.statusbar.phone.PanelViewController: void onClosingFinished()>
<android.os.LooperStatsPerfTest: void setUp()>
<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting getSharedUser()>
<com.android.systemui.statusbar.notification.row.ExpandableView: void setTransformingInShelf(boolean)>
<com.android.server.locksettings.recoverablekeystore.KeyStoreProxyImpl: boolean containsAlias(java.lang.String)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: void onSnapOpen()>
<com.android.settingslib.CustomDialogPreferenceCompat: void onBindDialogView(android.view.View)>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindPipUI(com.android.systemui.pip.PipUI)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void cancelPreloadRecentApps()>
<com.android.settingslib.bluetooth.HidDeviceProfile: boolean accessProfileEnabled()>
<com.android.gallery3d.exif.ExifTag: boolean setValue(int[])>
<com.android.systemui.statusbar.RemoteInputController.Delegate: void requestDisallowLongPressAndDismiss()>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int hashCode()>
<android.net.wifi.WifiManager: byte[] retrieveBackupData()>
<com.android.server.input.InputManagerService: boolean injectInputEvent(android.view.InputEvent,int)>
<android.net.wifi.RttManager.ResponderCallback: void onResponderEnabled(android.net.wifi.RttManager.ResponderConfig)>
<com.android.systemui.qs.QSPanel: java.lang.String getDumpableTag()>
<android.media.Session2Link: int hashCode()>
<com.android.settingslib.drawable.CircleFramedDrawable: int getIntrinsicWidth()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: void setContentHeight(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>
<com.android.systemui.pip.PipAnimationController: boolean isInPipDirection(int)>
<com.android.systemui.pip.PipBoundsHandler: void onDisplayRotationChangedNotInPip(int)>
<android.net.dhcp.DhcpServingParamsParcelExt: android.net.dhcp.DhcpServingParamsParcelExt setLinkMtu(int)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeUtil: boolean isValidNonAuxAsciiCapableIme(android.view.inputmethod.InputMethodInfo)>
<com.android.systemui.LatencyTester: void start()>
<com.android.server.trust.TrustManagerService: void onUnlockUser(int)>
<com.android.systemui.statusbar.notification.collection.GroupEntry: com.android.systemui.statusbar.notification.collection.NotificationEntry getRepresentativeEntry()>
<com.android.server.soundtrigger_middleware.ISoundTriggerHw2: boolean unlinkToDeath(android.os.IHwBinder.DeathRecipient)>
<com.android.systemui.pip.phone.PipMenuActivityController: void onActivityPinned()>
<com.android.systemui.pip.tv.PipMenuActivity: void onNewIntent(android.content.Intent)>
<com.android.server.biometrics.face.FaceUtils: void renameBiometricForUser(android.content.Context,int,int,java.lang.CharSequence)>
<com.android.systemui.statusbar.notification.DynamicPrivacyController: boolean isDynamicallyUnlocked()>
<com.android.server.tv.tunerresourcemanager.FrontendResource: void addExclusiveGroupMemberFeId(int)>
<com.android.server.Watchdog: void addMonitor(com.android.server.Watchdog.Monitor)>
<com.android.printspooler.model.PrintSpoolerProvider: void <init>(android.content.Context,java.lang.Runnable)>
<com.android.powermodel.component.ModemRemainderActivity: com.android.powermodel.component.ModemRemainderPower applyProfile(com.android.powermodel.ActivityReport,com.android.powermodel.PowerProfile)>
<com.android.systemui.plugins.qs.DetailAdapter: boolean hasHeader()>
<com.android.keyguard.KeyguardSecurityViewFlipper: boolean needsInput()>
<com.android.keyguard.EmergencyButton: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.shared.system.DockedStackListenerCompat: void onDockedStackExistsChanged(boolean)>
<android.os.PackageManagerPerfTest: void testCheckPermissionDoesntExist()>
<com.android.systemui.egg.MLandActivity: void startButtonPressed(android.view.View)>
<com.android.settingslib.bluetooth.BluetoothUtils: boolean getBooleanMetaData(android.bluetooth.BluetoothDevice,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setProfileEnabled(android.content.ComponentName)>
<com.android.settingslib.notification.ZenDurationDialog: com.android.settingslib.notification.ZenDurationDialog.ConditionTag getConditionTagAt(int)>
<com.android.server.TelephonyRegistry: void <init>(android.content.Context,com.android.server.TelephonyRegistry.ConfigurationProvider)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: void onStart(boolean)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setRemoteInputController(com.android.systemui.statusbar.RemoteInputController)>
<com.android.settingslib.bluetooth.HearingAidProfile: int getDrawableResource(android.bluetooth.BluetoothClass)>
<com.android.systemui.statusbar.notification.TransformState: void setClippingDeactivated(android.view.View,boolean)>
<android.perftests.utils.Stats: double getMean()>
<com.android.systemui.biometrics.AuthContainerView: void dismissFromSystemServer()>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void grantDefaultPermissionsToActiveLuiApp(java.lang.String,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdmins(int)>
<com.android.server.audio.MediaFocusControl: void setDuckingInExtPolicyAvailable(boolean)>
<com.android.systemui.car.window.OverlayPanelViewController: void setOverlayDirection(int)>
<com.android.systemui.power.PowerUI.WarningsUI: void updateLowBatteryWarning()>
<com.android.server.people.data.Event: boolean equals(java.lang.Object)>
<com.android.settingslib.widget.BarViewInfo: java.lang.CharSequence getContentDescription()>
<android.net.wifi.IWifiManager: void startDppAsEnrolleeInitiator(android.os.IBinder,java.lang.String,android.net.wifi.IDppCallback)>
<com.android.settingslib.applications.DefaultAppInfo: void <init>(android.content.Context,android.content.pm.PackageManager,int,android.content.pm.PackageItemInfo)>
<com.android.server.slice.SliceClientPermissions: void revokeUri(android.net.Uri,com.android.server.slice.SlicePermissionManager.PkgUser)>
<android.media.Session2Token: void <init>(android.content.Context,android.content.ComponentName)>
<com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage: boolean hasListener(int)>
<com.android.systemui.statusbar.notification.MessagingImageTransformState: boolean sameAs(com.android.systemui.statusbar.notification.TransformState)>
<com.android.statementservice.retriever.AbstractAsset: com.android.statementservice.retriever.AbstractAsset create(java.lang.String)>
<com.android.systemui.qs.DataUsageGraph: void onDraw(android.graphics.Canvas)>
<com.android.systemui.shared.system.ActivityManagerWrapper: boolean startActivityFromRecents(int,android.app.ActivityOptions)>
<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setDirectBootAware(boolean)>
<com.android.server.utils.TimingsTraceAndSlog: void logDuration(java.lang.String,long)>
<com.android.systemui.stackdivider.Divider: void onAppTransitionFinished()>
<com.android.systemui.classifier.Point: void <init>(float,float,long)>
<com.android.server.pm.PackageSetting: int getAppId()>
<com.android.systemui.ForegroundServiceController: boolean isDisclosureNotification(android.service.notification.StatusBarNotification)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void clickTile(android.content.ComponentName)>
<com.android.server.pm.PackageManagerService.Injector: com.android.server.pm.AppsFilter getAppsFilter()>
<com.android.systemui.bubbles.BubbleStackView: int getBubbleCount()>
<com.android.settingslib.Utils: int getColorAttrDefaultColor(android.content.Context,int)>
<com.android.systemui.statusbar.policy.RotationLockControllerImpl: void addCallback(com.android.systemui.statusbar.policy.RotationLockController.RotationLockControllerCallback)>
<com.android.networkstack.tethering.BpfCoordinator.Dependencies: android.net.util.SharedLog getSharedLog()>
<com.android.location.provider.ActivityRecognitionProvider: java.lang.String[] getSupportedActivities()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setMaximumTimeToLock(android.content.ComponentName,long,boolean)>
<com.android.server.pm.DynamicCodeLoggingService: boolean onStopJob(android.app.job.JobParameters)>
<com.android.systemui.fragments.FragmentHostManager.FragmentListener: void onFragmentViewDestroyed(java.lang.String,android.app.Fragment)>
<android.media.MediaSession2.ControllerInfo: java.lang.String toString()>
<com.android.server.usb.descriptors.UsbHIDDescriptor: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean handleSystemAudioModeRequest(com.android.server.hdmi.HdmiCecMessage)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void generateHeadsUpAnimation(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<android.net.wifi.WifiEnterpriseConfig: void setWapiCertSuite(java.lang.String)>
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addWifiAwarePeer(android.net.wifi.aware.PeerHandle)>
<com.android.server.biometrics.BiometricServiceBase.ServiceListener: void onEnumerated(android.hardware.biometrics.BiometricAuthenticator.Identifier,int)>
<com.android.systemui.statusbar.phone.HeadsUpAppearanceController: void onDarkChanged(android.graphics.Rect,float,int)>
<com.android.systemui.statusbar.phone.StatusBar: void postStartActivityDismissingKeyguard(android.app.PendingIntent)>
<com.android.systemui.statusbar.StatusBarIconView: void setOnVisibilityChangedListener(com.android.systemui.statusbar.StatusBarIconView.OnVisibilityChangedListener)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: android.net.wifi.ScanResult getCandidate()>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder: com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder withBackgroundBlur(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean mustStayOnScreen()>
<com.android.systemui.statusbar.notification.row.dagger.NotificationRowComponent.Builder: com.android.systemui.statusbar.notification.row.dagger.NotificationRowComponent.Builder activatableNotificationView(com.android.systemui.statusbar.notification.row.ActivatableNotificationView)>
<com.android.localtransport.LocalTransport: int abortFullRestore()>
<com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] calculateThmKfHash(byte[])>
<com.android.server.timezonedetector.ArrayMapWithHistory: java.lang.Object keyAt(int)>
<com.android.keyguard.KeyguardSecurityCallback: void userActivity()>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getDeviceOwnerOrganizationName()>
<com.android.server.twilight.TwilightService: void onProviderEnabled(java.lang.String)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void onScreenTurningOn()>
<android.media.Session2Link: void sendSessionCommand(android.media.Controller2Link,int,android.media.Session2Command,android.os.Bundle,android.os.ResultReceiver)>
<com.android.systemui.statusbar.phone.NavigationBarTransitions: void init()>
<com.android.server.NativeDaemonEvent: boolean isClassOk()>
<com.android.server.ConnectivityService: android.net.NetworkRequest getDefaultRequest()>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy.MobileIconState: java.lang.String toString()>
<android.net.wifi.ISoftApCallback: void onInfoChanged(android.net.wifi.SoftApInfo)>
<com.android.server.vr.VrManagerService: void onStart()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void setUntruncatedChildCount(int)>
<android.net.wifi.util.HexEncoding: byte[] decode(java.lang.String,boolean)>
<com.android.photos.views.TiledImageRenderer: void notifyModelInvalidated()>
<com.android.server.biometrics.BiometricService.SettingObserver: void onChange(boolean,android.net.Uri,int)>
<com.android.networkstack.tethering.Tethering: void <init>(com.android.networkstack.tethering.TetheringDependencies)>
<com.android.server.SensorPrivacyService: void <init>(android.content.Context)>
<com.android.media.remotedisplay.RemoteDisplayProvider: void onSetVolume(com.android.media.remotedisplay.RemoteDisplay,int)>
<com.android.server.uri.UriGrantsManagerService: android.content.pm.ParceledListSlice getUriPermissions(java.lang.String,boolean,boolean)>
<com.android.systemui.tuner.DemoModeFragment: boolean onPreferenceChange(androidx.preference.Preference,java.lang.Object)>
<com.android.systemui.statusbar.phone.DozeServiceHost: void cancelGentleSleep()>
<com.android.egg.neko.Cat: void tint(int,android.graphics.drawable.Drawable[])>
<com.android.systemui.statusbar.notification.row.StackScrollerDecorView: boolean isContentVisible()>
<com.android.server.usb.descriptors.report.UsbStrings: java.lang.String getTerminalName(int)>
<com.android.systemui.car.window.SystemUIOverlayWindowController: void <init>(android.content.Context,android.view.WindowManager,com.android.systemui.statusbar.policy.ConfigurationController)>
<com.android.systemui.shared.system.ContextCompat: int getUserId()>
<android.net.wifi.aware.Characteristics: int describeContents()>
<com.android.server.webkit.SystemInterface: boolean isMultiProcessDefaultEnabled()>
<com.android.server.tv.TvRemoteService: void onStart()>
<com.android.systemui.statusbar.policy.AccessibilityManagerWrapper: void <init>(android.content.Context)>
<com.android.server.NetworkManagementService: void setFirewallChainEnabled(int,boolean)>
<com.android.systemui.statusbar.phone.PanelViewController: void loadDimens()>
<com.android.server.pm.PackageManagerService: boolean canForwardTo(android.content.Intent,java.lang.String,int,int)>
<com.android.systemui.power.PowerUI.WarningsUI: boolean isInvalidChargerWarningShowing()>
<com.android.systemui.statusbar.notification.row.PartialConversationInfo: void onFinishedClosing()>
<com.android.server.appbinding.finders.AppServiceFinder: void dump(java.lang.String,java.io.PrintWriter)>
<com.android.server.statusbar.StatusBarManagerService: void onNotificationError(java.lang.String,java.lang.String,int,int,int,java.lang.String,int)>
<com.android.photos.SimpleBitmapRegionDecoderWrapper: com.android.photos.SimpleBitmapRegionDecoderWrapper newInstance(java.lang.String,boolean)>
<com.android.printspooler.widget.PrintContentView.OptionsStateChangeListener: void onOptionsOpened()>
<com.android.printservice.recommendation.plugin.hp.VendorInfo: void <init>(android.content.res.Resources,int)>
<com.android.settingslib.media.MediaDevice: java.lang.String getClientPackageName()>
<com.android.settingslib.media.MediaManager: void dispatchDeviceRemoved(com.android.settingslib.media.MediaDevice)>
<com.android.settingslib.applications.ApplicationsState.AppEntry: java.lang.String getVersion(android.content.Context)>
<com.android.server.security.VerityUtils: byte[] generateApkVerityRootHash(java.lang.String)>
<com.android.systemui.statusbar.phone.ScrimController: void <init>(com.android.systemui.statusbar.phone.LightBarController,com.android.systemui.statusbar.phone.DozeParameters,android.app.AlarmManager,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.util.wakelock.DelayedWakeLock.Builder,android.os.Handler,com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.colorextraction.SysuiColorExtractor,com.android.systemui.dock.DockManager,com.android.systemui.statusbar.BlurUtils)>
<com.android.systemui.shared.system.ActivityOptionsCompat: android.app.ActivityOptions makeSplitScreenOptions(boolean)>
<com.android.shell.HeapDumpProvider: java.lang.String getType(android.net.Uri)>
<com.android.systemui.statusbar.notification.FakeShadowView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.contentsuggestions.ContentSuggestionsPerUserService: android.content.pm.ServiceInfo newServiceInfoLocked(android.content.ComponentName)>
<android.net.wifi.p2p.WifiP2pManager.NetworkInfoListener: void onNetworkInfoAvailable(android.net.NetworkInfo)>
<com.android.systemui.statusbar.phone.NavigationModeController: int addListener(com.android.systemui.statusbar.phone.NavigationModeController.ModeChangedListener)>
<com.android.systemui.statusbar.policy.InflatedSmartReplies: java.util.List getSmartSuggestionButtons()>
<com.android.uiautomator.core.UiDevice: void resetWatcherTriggers()>
<com.android.server.utils.ManagedApplicationService.BinderChecker: boolean checkType(android.os.IInterface)>
<com.android.systemui.DessertCaseView: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: int getMaxContentHeight()>
<com.android.systemui.statusbar.phone.PanelViewController: void requestPanelHeightUpdate()>
<com.android.systemui.statusbar.phone.LightBarController: void setDirectReplying(boolean)>
<android.net.wifi.hotspot2.pps.HomeSp: void setOtherHomePartners(java.lang.String[])>
<com.android.server.contentcapture.ContentCaptureManagerInternal: boolean sendActivityAssistData(int,android.os.IBinder,android.os.Bundle)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isBackupServiceEnabled(android.content.ComponentName)>
<com.android.settingslib.drawer.ActivityTile: android.content.pm.ComponentInfo getComponentInfo(android.content.Context)>
<com.android.systemui.shared.recents.utilities.Utilities: void postAtFrontOfQueueAsynchronously(android.os.Handler,java.lang.Runnable)>
<com.android.keyguard.KeyguardSecurityContainer: void startAppearAnimation()>
<com.android.server.usb.UsbService: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
<com.android.server.pm.parsing.pkg.PkgAppInfo: int getTargetSdkVersion()>
<com.android.gallery3d.common.BitmapUtils: int computeSampleSizeLarger(int,int,int)>
<com.android.settingslib.drawable.CircleFramedDrawable: void setAlpha(int)>
<com.android.systemui.media.dialog.MediaOutputController.Callback: void dismissDialog()>
<com.android.systemui.bubbles.BubbleOverflowAdapter.ViewHolder: void <init>(android.widget.LinearLayout)>
<com.android.systemui.statusbar.tv.TvStatusBar: void animateExpandNotificationsPanel()>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindToastUI(com.android.systemui.toast.ToastUI)>
<com.android.systemui.statusbar.policy.NetworkController.SignalCallback: void setIsAirplaneMode(com.android.systemui.statusbar.policy.NetworkController.IconState)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void grantDefaultPermissionsToDefaultSimCallManager(java.lang.String,int)>
<com.android.server.pm.Installer: void destroyProfileSnapshot(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean onMiddleClicked()>
<com.android.systemui.analytics.DataCollector: void onBouncerHidden()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: void removeEmergencyListener(com.android.systemui.statusbar.policy.NetworkController.EmergencyListener)>
<com.android.systemui.statusbar.notification.NotificationEntryManager: java.util.Collection getAllNotifs()>
<com.android.gallery3d.exif.ExifTag: com.android.gallery3d.exif.Rational[] getValueAsRationals()>
<com.android.localtransport.LocalTransport: java.lang.CharSequence dataManagementIntentLabel()>
<com.android.systemui.globalactions.GlobalActionsImpl: void destroy()>
<com.android.printspooler.ui.SelectPrinterActivity: void onSaveInstanceState(android.os.Bundle)>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void onDensityOrFontScaleChanged()>
<android.media.Controller2Link: void onDisconnected(int)>
<com.android.systemui.ResizingSpace: void draw(android.graphics.Canvas)>
<com.android.settingslib.widget.RadioButtonPreference: void <init>(android.content.Context)>
<com.android.server.policy.WindowManagerPolicy.WindowState: int getWindowingMode()>
<com.android.systemui.doze.DozeLog: void traceFling(boolean,boolean,boolean,boolean)>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void toggleSplitScreen()>
<com.android.server.pm.PackageManagerService.PendingPackageBroadcasts: void put(int,java.lang.String,java.util.ArrayList)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean isExpanded()>
<com.android.networkstack.tethering.OffloadController: void removeDownstreamInterface(java.lang.String)>
<com.android.server.statusbar.StatusBarManagerInternal: void showRecentApps(boolean)>
<com.android.companiondevicemanager.DeviceDiscoveryService: boolean onUnbind(android.content.Intent)>
<com.android.server.TelephonyRegistry: void notifyCallForwardingChangedForSubscriber(int,boolean)>
<com.android.systemui.qs.QSPanel: void openDetails(java.lang.String)>
<com.android.systemui.plugins.FalsingManager: void onCameraOn()>
<android.view.autofill.AbstractAutofillPerfTestCase: void <init>(int)>
<com.android.systemui.HardwareBgDrawable: void setRotatedBackground(boolean)>
<com.android.systemui.car.notification.NotificationPanelViewController: void onScroll(int)>
<android.net.wifi.WifiManager: java.util.Map getMatchingOsuProviders(java.util.List)>
<com.android.server.pm.permission.PermissionManagerService: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>
<com.android.systemui.SysUIToast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<com.android.systemui.statusbar.phone.CollapsedStatusBarFragment: void onSaveInstanceState(android.os.Bundle)>
<com.android.gallery3d.glrenderer.Texture: void draw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: boolean isLaunchingAffordanceWithPreview()>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setQsCustomizerShowing(boolean)>
<com.android.server.tv.TvInputHal.Callback: void onDeviceAvailable(android.media.tv.TvInputHardwareInfo,android.media.tv.TvStreamConfig[])>
<com.android.server.appprediction.AppPredictionManagerService: void enforceCallingPermissionForManagement()>
<com.android.gallery3d.exif.ExifInterface: short getOrientationValueForRotation(int)>
<com.android.systemui.pip.BasePipManager: void showPictureInPictureMenu()>
<com.android.systemui.statusbar.notification.row.NotificationContentView: android.view.View getExpandedChild()>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: void setSrcDevice(android.net.wifi.p2p.WifiP2pDevice)>
<com.android.server.firewall.FilterFactory: com.android.server.firewall.Filter newFilter(org.xmlpull.v1.XmlPullParser)>
<com.android.keyguard.KeyguardSliceView: void setContentChangeListener(java.lang.Runnable)>
<com.android.uiautomator.core.ShellUiAutomatorBridge: int getRotation()>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindInstantAppNotifier(com.android.systemui.statusbar.notification.InstantAppNotifier)>
<com.android.server.pm.DumpState: void setTitlePrinted(boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: float getTopPaddingOverflow()>
<com.android.server.locksettings.LockSettingsService.Lifecycle: void onStart()>
<com.android.server.IntentResolver: void filterResults(java.util.List)>
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setPublishType(int)>
<com.android.localtransport.LocalTransportService: android.os.IBinder onBind(android.content.Intent)>
<javax.microedition.khronos.opengles.GL10: void glVertexPointer(int,int,int,java.nio.Buffer)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: void enforceCallingOrSelfPermission(java.lang.String)>
<com.android.future.usb.UsbManager: com.android.future.usb.UsbAccessory getAccessory(android.content.Intent)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void setDialerAppPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal.PackagesProvider)>
<com.android.server.VibratorService: boolean[] arePrimitivesSupported(int[])>
<com.android.server.pm.PackageManagerService: boolean canRequestPackageInstalls(java.lang.String,int)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean showingPulsing()>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvxv(int,int,int[],int)>
<com.android.systemui.statusbar.StatusBarIconView: int getVisibleState()>
<com.android.systemui.power.PowerNotificationWarnings: void showUsbHighTemperatureAlarm()>
<com.android.systemui.statusbar.notification.icon.IconPack: com.android.systemui.statusbar.StatusBarIconView getAodIcon()>
<com.android.systemui.qs.customize.TileAdapter: void onAttachedToRecyclerView(androidx.recyclerview.widget.RecyclerView)>
<com.android.systemui.qs.QSPanel: boolean displayMediaMarginsOnMedia()>
<com.android.systemui.qs.tileimpl.QSTileBaseView: com.android.systemui.plugins.qs.QSIconView getIcon()>
<com.android.server.biometrics.BiometricService.Injector: com.android.internal.statusbar.IStatusBarService getStatusBarService()>
<com.android.systemui.pip.phone.PipMenuActivityController: void setDismissFraction(float)>
<com.android.server.people.data.AbstractProtoDiskReadWriter.ProtoStreamReader: java.lang.Object read(android.util.proto.ProtoInputStream)>
<com.android.server.biometrics.BiometricServiceBase.AuthenticationClientImpl: boolean isFingerprint()>
<com.android.keyguard.KeyguardMessageArea: void formatMessage(int,java.lang.Object[])>
<com.android.systemui.classifier.LengthCountClassifier: java.lang.String getTag()>
<com.android.keyguard.SecurityMessageDisplay: void setMessage(int)>
<com.android.printspooler.model.PageContentRepository: void open(android.os.ParcelFileDescriptor,com.android.printspooler.model.OpenDocumentCallback)>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: java.lang.String getProfileOwnerName()>
<com.android.systemui.statusbar.notification.row.dagger.ActivatableNotificationViewModule: com.android.systemui.statusbar.notification.row.ExpandableOutlineView bindExpandableOutlineView(com.android.systemui.statusbar.notification.row.ActivatableNotificationView)>
<com.android.settingslib.bluetooth.BluetoothUtils: android.graphics.drawable.Drawable buildAdvancedDrawable(android.content.Context,android.graphics.drawable.Drawable)>
<android.app.ResourcesPerfTest: void getText()>
<com.android.systemui.shared.system.RecentsAnimationControllerCompat: void hideCurrentInputMethod()>
<com.android.systemui.HardwareBgDrawable: void <init>(boolean,boolean,android.content.Context)>
<com.android.systemui.statusbar.notification.VisualStabilityManager: void onHeadsUpStateChanged(com.android.systemui.statusbar.notification.collection.NotificationEntry,boolean)>
<com.android.systemui.statusbar.policy.LocationControllerImpl: void addCallback(com.android.systemui.statusbar.policy.LocationController.LocationChangeCallback)>
<com.android.systemui.plugins.ActivityStarter: void postStartActivityDismissingKeyguard(android.app.PendingIntent)>
<com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException: void <init>(java.lang.Exception)>
<com.android.keyguard.clock.BubbleClockController: int getPreferredY(int)>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeUtilCompat: java.lang.String getSubtypeLocaleNameAsSentence(android.view.inputmethod.InputMethodSubtype,android.content.Context,android.view.inputmethod.InputMethodInfo)>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setCustomBackground(int)>
<javax.obex.ClientOperation: int getHeaderLength()>
<com.android.server.hdmi.HdmiCecMessageValidator: void <init>(com.android.server.hdmi.HdmiControlService)>
<com.android.server.display.DisplayModeDirector.BrightnessObserver: void onDisplayChanged(int)>
<com.android.server.pm.PackageManagerService: void restoreDefaultApps(byte[],int)>
<com.android.systemui.keyguard.KeyguardViewMediator: void <init>(android.content.Context,com.android.systemui.plugins.FalsingManager,com.android.internal.widget.LockPatternUtils,com.android.systemui.broadcast.BroadcastDispatcher,dagger.Lazy,com.android.systemui.keyguard.DismissCallbackRegistry,com.android.keyguard.KeyguardUpdateMonitor,com.android.systemui.dump.DumpManager,java.util.concurrent.Executor,android.os.PowerManager,android.app.trust.TrustManager,com.android.systemui.util.DeviceConfigProxy,com.android.systemui.statusbar.phone.NavigationModeController)>
<android.net.wifi.aware.IWifiAwareEventCallback: void onConnectSuccess(int)>
<com.android.systemui.statusbar.phone.StatusBarNotificationPresenter: void onActivationReset(com.android.systemui.statusbar.notification.row.ActivatableNotificationView)>
<com.android.systemui.qs.tiles.UserDetailItemView: void drawableStateChanged()>
<com.android.statsd.shelltools.Utils.LocalToolsFormatter: java.lang.String format(java.util.logging.LogRecord)>
<com.android.systemui.statusbar.policy.ZenModeController: boolean isCountdownConditionSupported()>
<android.content.pm.PackageManagerInternal: java.lang.String[] getKnownPackageNames(int,int)>
<com.android.systemui.biometrics.AuthCredentialPasswordView: void onAttachedToWindow()>
<com.android.systemui.statusbar.notification.row.NotificationBlockingHelperManager: void <init>(android.content.Context,com.android.systemui.statusbar.notification.row.NotificationGutsManager,com.android.systemui.statusbar.notification.NotificationEntryManager,com.android.internal.logging.MetricsLogger)>
<com.android.systemui.plugins.FragmentBase: android.view.View getView()>
<com.android.settingslib.bluetooth.HearingAidProfile: int getNameResource(android.bluetooth.BluetoothDevice)>
<com.android.systemui.statusbar.phone.ManagedProfileController.Callback: void onManagedProfileRemoved()>
<com.android.systemui.statusbar.notification.NotificationEntryListener: void onNotificationRankingUpdated(android.service.notification.NotificationListenerService.RankingMap)>
<android.net.wifi.aware.WifiAwareSession: void close()>
<com.android.settingslib.utils.ThreadUtils: java.util.concurrent.Future postOnBackgroundThread(java.util.concurrent.Callable)>
<com.android.server.pm.PackageSettingBase: boolean isUpdateAvailable()>
<com.android.settingslib.media.ConnectionRecordManager: int fetchConnectionRecord(android.content.Context,java.lang.String)>
<com.android.systemui.qs.tileimpl.QSTileView: int getDetailY()>
<com.android.keyguard.KeyguardAbsKeyInputView: void reset()>
<com.android.server.pm.parsing.pkg.AndroidPackageUtils: boolean canHaveOatDir(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>
<com.android.systemui.statusbar.policy.RemoteInputView: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<com.android.server.media.MediaSessionRecord: void adjustVolume(java.lang.String,java.lang.String,int,int,boolean,int,int,boolean)>
<com.android.server.audio.AudioService: void setDeviceVolumeBehavior(android.media.AudioDeviceAttributes,int,java.lang.String)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setPanelExpanded(boolean)>
<com.android.server.SystemServiceManager: void cleanupUser(int)>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: long getLongVersionCode()>
<com.android.settingslib.bluetooth.A2dpProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)>
<com.android.server.slice.SliceClientPermissions.SliceAuthority: java.util.Collection getPaths()>
<com.android.systemui.SystemUIAppComponentFactory.ContextAvailableCallback: void onContextAvailable(android.content.Context)>
<com.android.systemui.bubbles.BubbleStackView: void setExpandListener(com.android.systemui.bubbles.BubbleController.BubbleExpandListener)>
<com.android.server.accessibility.gestures.TouchExplorer: void setTwoFingerPassthroughEnabled(boolean)>
<com.android.server.pm.PackageManagerService: void reconcileSecondaryDexFiles(java.lang.String)>
<com.android.systemui.bubbles.BubbleViewInfoTask: void onPostExecute(com.android.systemui.bubbles.BubbleViewInfoTask.BubbleViewInfo)>
<com.android.systemui.tuner.TunablePadding: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.server.usb.descriptors.UsbEndpointDescriptor: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.systemui.DessertCaseView: void onDraw(android.graphics.Canvas)>
<com.android.systemui.statusbar.notification.row.ExpandableView: int getMinHeight()>
<android.os.IStatsCompanionService: void cancelAnomalyAlarm()>
<com.android.proxyhandler.ProxyServer: void run()>
<com.android.server.appprediction.AppPredictionPerUserService: boolean resolveService(android.app.prediction.AppPredictionSessionId,boolean,boolean,com.android.internal.infra.AbstractRemoteService.AsyncRequest)>
<com.android.systemui.util.sensors.AsyncSensorManager: void unregisterPluginListener(com.android.systemui.plugins.SensorManagerPlugin.Sensor,com.android.systemui.plugins.SensorManagerPlugin.SensorEventListener)>
<com.android.media.remotedisplay.RemoteDisplayProvider: android.os.IBinder getBinder()>
<com.android.printspooler.ui.PageAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView.ViewHolder,int)>
<com.android.settingslib.bluetooth.HidDeviceProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)>
<com.android.systemui.statusbar.StatusBarMobileView: void setSlot(java.lang.String)>
<android.net.wifi.IWifiManager: boolean is6GHzBandSupported()>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: void onKeyguardShowingAndNotOccludedChanged()>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isUnlockingWithBiometricAllowed(boolean)>
<com.android.systemui.statusbar.notification.TransformState: float getTransformationStartY()>
<com.android.systemui.assist.ui.PerimeterPathGuide: void setRotation(int)>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: java.lang.CharSequence getDeviceOwnerOrganizationName()>
<com.android.systemui.wm.DisplayController: android.content.Context getDisplayContext(int)>
<com.android.systemui.statusbar.notification.row.NotificationGutsManager: void setNotificationActivityStarter(com.android.systemui.statusbar.notification.NotificationActivityStarter)>
<com.android.systemui.statusbar.notification.TransformState: android.view.View getTransformedView()>
<android.net.wifi.WifiConfiguration: void setStaticIpConfiguration(android.net.StaticIpConfiguration)>
<com.android.server.usb.descriptors.Usb10ACOutputTerminal: byte getTerminal()>
<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getDisabledSystemPackage(java.lang.String)>
<com.android.settingslib.core.lifecycle.Lifecycle: void onSaveInstanceState(android.os.Bundle)>
<com.android.server.policy.WindowManagerPolicy: void screenTurnedOff()>
<com.android.settingslib.core.lifecycle.ObservableActivity: void onCreate(android.os.Bundle,android.os.PersistableBundle)>
<com.android.server.pm.permission.BasePermission: boolean isVendorPrivileged()>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: void setNetworkSelectionDisableReason(int)>
<com.android.server.pm.PackageManagerService: java.lang.String getPermissionControllerPackageName()>
<com.android.systemui.wm.DisplayController: android.view.Display getDisplay(int)>
<android.text.NonEditableTextGenerator.RandomCharSequenceGenerator: android.text.NonEditableTextGenerator.RandomCharSequenceGenerator setSequenceLength(int)>
<com.android.settingslib.media.ConnectionRecordManager: com.android.settingslib.media.ConnectionRecordManager getInstance()>
<com.android.keyguard.KeyguardAbsKeyInputView: void onEmergencyButtonClickedWhenInCall()>
<com.android.systemui.bubbles.BubbleExpandedView: void onDetachedFromWindow()>
<android.net.util.DhcpResultsCompatUtil: android.net.DhcpResults fromStableParcelable(android.net.DhcpResultsParcelable)>
<com.android.media.remotedisplay.RemoteDisplay: int getVolumeHandling()>
<com.android.systemui.statusbar.SmartReplyController.Callback: void onSmartReplySent(com.android.systemui.statusbar.notification.collection.NotificationEntry,java.lang.CharSequence)>
<com.android.server.testing.shadows.ShadowSlog: int wtf(java.lang.String,java.lang.String)>
<android.net.wifi.WifiInfo: int getRxLinkSpeedMbps()>
<android.content.pm.PackageManagerInternal: android.util.ArrayMap getProcessesForUid(int)>
<com.android.settingslib.notification.ConversationIconFactory.ConversationIconDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: void <init>(android.net.wifi.hotspot2.pps.Credential.CertificateCredential)>
<com.android.systemui.statusbar.policy.KeyButtonView: void <init>(android.content.Context,android.util.AttributeSet,int,android.hardware.input.InputManager,com.android.internal.logging.UiEventLogger)>
<com.android.server.trust.TrustAgentWrapper: void <init>(android.content.Context,com.android.server.trust.TrustManagerService,android.content.Intent,android.os.UserHandle)>
<com.android.systemui.statusbar.SuperStatusBarViewFactory: com.android.systemui.statusbar.phone.NotificationPanelView getNotificationPanelView()>
<com.android.systemui.statusbar.phone.NavigationModeController: void removeListener(com.android.systemui.statusbar.phone.NavigationModeController.ModeChangedListener)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: void addChildNotification(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow,int)>
<com.android.systemui.statusbar.notification.row.NotificationBackgroundView: void setBackgroundTop(int)>
<com.android.server.slice.SliceProviderPermissions.SliceAuthority: void removePkg(com.android.server.slice.SlicePermissionManager.PkgUser)>
<com.android.server.integrity.IntegrityFileManager: java.util.List readRules(android.content.integrity.AppInstallMetadata)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: void setAccessibilityWindowManager(com.android.server.accessibility.AccessibilityWindowManager)>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.UUID getStorageUuid()>
<com.android.settingslib.applications.StorageStatsSource.AppStorageStatsImpl: long getCacheBytes()>
<android.net.wifi.SoftApConfiguration.Builder: android.net.wifi.SoftApConfiguration.Builder setPassphrase(java.lang.String,int)>
<com.android.server.stats.StatsManagerService: void setDataFetchOperation(long,android.app.PendingIntent,java.lang.String)>
<android.media.MediaParser.InputReader: long getLength()>
<com.android.systemui.plugins.qs.QSTile: void setDetailListening(boolean)>
<com.android.gallery3d.exif.ExifTag: java.lang.String toString()>
<android.net.wifi.aware.WifiAwareNetworkInfo: int hashCode()>
<com.android.settingslib.volume.Util: boolean isVoiceCapable(android.content.Context)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setActiveRootOfTrust(int,int,java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService.Lifecycle: void onStartUser(int)>
<com.android.systemui.qs.PagedTileLayout: boolean setMaxColumns(int)>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: void onClick(android.view.View)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedInputMethods(android.content.ComponentName)>
<com.android.networkstack.tethering.TetheringNotificationUpdater: void onDownstreamChanged(int)>
<android.net.ip.IpServer: android.net.LinkProperties linkProperties()>
<com.android.server.input.InputManagerService.WindowManagerCallbacks: int interceptMotionBeforeQueueingNonInteractive(int,long,int)>
<com.android.server.timezonedetector.TimeZoneDetectorStrategyImpl: void handleAutoTimeZoneDetectionChanged()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowViewController: void cancelExpandHelper()>
<com.android.systemui.qs.TouchAnimator: void setPosition(float)>
<com.android.systemui.pip.PipTaskOrganizer: void scheduleOffsetPip(android.graphics.Rect,int,int,java.util.function.Consumer)>
<com.android.systemui.util.leak.GarbageMonitor.MemoryTile: void handleClick()>
<com.android.systemui.qs.QSPanel: void updateResources()>
<android.net.wifi.hotspot2.pps.Credential: long getCreationTimeInMillis()>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: boolean isLeavebehind()>
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getKeyId(android.net.wifi.WifiEnterpriseConfig)>
<com.android.systemui.statusbar.notification.DynamicPrivacyController: void addListener(com.android.systemui.statusbar.notification.DynamicPrivacyController.Listener)>
<com.android.server.utils.quota.CountQuotaTracker: void <init>(android.content.Context,com.android.server.utils.quota.Categorizer)>
<com.android.server.autofill.RemoteFillService.FillServiceCallbacks: void onFillRequestTimeout(int)>
<com.android.server.soundtrigger_middleware.ISoundTriggerHw2.Callback: void recognitionCallback(android.hardware.soundtrigger.V2_1.ISoundTriggerHwCallback.RecognitionEvent,int)>
<com.android.systemui.pip.phone.PipMenuActivity: void onDestroy()>
<com.android.systemui.qs.tiles.BluetoothTile.BluetoothDetailAdapter: android.content.Intent getSettingsIntent()>
<com.android.server.statusbar.StatusBarManagerService: void onPanelHidden()>
<com.android.printspooler.model.PageContentRepository: void stopPreload()>
<com.android.systemui.egg.MLand: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.settingslib.deviceinfo.StorageMeasurement: void <init>(android.content.Context,android.os.storage.VolumeInfo,android.os.storage.VolumeInfo)>
<android.media.MediaSession2Service.MediaNotification: android.app.Notification getNotification()>
<com.android.server.usb.descriptors.Usb10ASGeneral: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.systemui.settings.ToggleSlider.Listener: void onChanged(com.android.systemui.settings.ToggleSlider,boolean,boolean,int,boolean)>
<com.android.server.IoThread: com.android.server.IoThread get()>
<com.android.systemui.charging.WirelessChargingAnimation: void <init>(android.content.Context,android.os.Looper,int,int,com.android.systemui.charging.WirelessChargingAnimation.Callback,boolean)>
<com.android.systemui.statusbar.phone.DarkIconDispatcherImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.classifier.ClassifierData: void cleanUp(android.view.MotionEvent)>
<com.android.server.usb.descriptors.report.Reporting: void shortReport(com.android.server.usb.descriptors.report.ReportCanvas)>
<javax.microedition.khronos.egl.EGL10: boolean eglWaitGL()>
<com.android.networkstack.tethering.TetheringDependencies: com.android.networkstack.tethering.UpstreamNetworkMonitor getUpstreamNetworkMonitor(android.content.Context,com.android.internal.util.StateMachine,android.net.util.SharedLog,int)>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: int hashCode()>
<com.android.systemui.statusbar.phone.StatusBar: void onUnlockHintStarted()>
<com.android.systemui.util.concurrency.ConcurrencyModule: android.os.Looper provideLongRunningLooper()>
<com.android.keyguard.KeyguardClockSwitch: void onTimeZoneChanged(java.util.TimeZone)>
<com.android.systemui.keyguard.WorkLockActivity: void onActivityResult(int,int,android.content.Intent)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_setsAppOpOnOtherProfile()>
<com.android.server.firewall.SenderPackageFilter: void <init>(java.lang.String)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage.Entry: byte[] getVaultParams()>
<com.android.systemui.tuner.TunerFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
<com.android.media.tv.remoteprovider.TvRemoteProvider: void sendGamepadAxisValue(android.os.IBinder,int,float)>
<com.android.keyguard.KeyguardUpdateMonitor: void dispatchScreenTurnedOff()>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setPreferredAddress(int)>
<javax.microedition.khronos.opengles.GL11: void glDrawElements(int,int,int,int)>
<com.android.gallery3d.glrenderer.UploadedTexture: int getWidth()>
<com.android.smspush.WapPushManager: com.android.smspush.WapPushManager.WapPushManDBHelper getDatabase(android.content.Context)>
<com.android.systemui.tv.TvSystemUIBinder: com.android.systemui.dagger.SystemUIRootComponent bindSystemUIRootComponent(com.android.systemui.tv.TvSystemUIRootComponent)>
<com.android.systemui.statusbar.phone.StatusBarWindowView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.settingslib.media.LocalMediaManager: boolean releaseSession()>
<com.android.server.om.OverlayReferenceMapper.Provider: java.util.Map getTargetToOverlayables(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.server.DeviceIdleController: boolean removePowerSaveWhitelistAppInternal(java.lang.String)>
<com.android.systemui.statusbar.notification.NotificationEntryManager: java.lang.Iterable getPendingNotificationsIterator()>
<com.android.printservice.recommendation.plugin.mdnsFilter.VendorConfig: com.android.printservice.recommendation.plugin.mdnsFilter.VendorConfig getConfig(android.content.Context,java.lang.String)>
<com.android.keyguard.CarrierTextController.CarrierTextCallback: void updateCarrierInfo(com.android.keyguard.CarrierTextController.CarrierTextCallbackInfo)>
<android.net.wifi.hotspot2.pps.Policy: void setRequiredProtoPortMap(java.util.Map)>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isUnlockHintRunning()>
<com.android.systemui.statusbar.policy.BluetoothController: boolean isBluetoothConnected()>
<com.android.server.media.MediaSessionService: void monitor()>
<com.android.server.usb.UsbService: void <init>(android.content.Context)>
<com.android.aapt.namespace.libtwo.TextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: com.android.systemui.statusbar.NotificationShelf getNotificationShelf()>
<com.android.settingslib.RestrictedPreference: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.collection.NotifPipeline: void <init>(com.android.systemui.statusbar.notification.collection.NotifCollection,com.android.systemui.statusbar.notification.collection.ShadeListBuilder)>
<android.net.wifi.p2p.WifiP2pDevice: java.lang.String toString()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>
<com.android.systemui.statusbar.policy.DeviceProvisionedController.DeviceProvisionedListener: void onUserSwitched()>
<com.android.server.utils.DeviceConfigInterface: java.lang.String getString(java.lang.String,java.lang.String,java.lang.String)>
<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.MagnificationController getMagnificationController()>
<com.android.server.display.DisplayModeDirector: void dump(java.io.PrintWriter)>
<com.android.server.BinderCallsStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.settingslib.wifi.AccessPointPreference: void updateIcon(int,android.content.Context)>
<com.android.settingslib.RestrictedPreference: boolean isDisabledByAdmin()>
<com.android.server.policy.keyguard.KeyguardServiceDelegate.DrawnListener: void onDrawn()>
<com.android.systemui.HardwareBgDrawable: int getCutPoint()>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: void setEapType(int)>
<com.android.systemui.statusbar.phone.NavigationBarView: int getBackDrawableRes()>
<com.android.systemui.qs.tileimpl.QSTileImpl: void userSwitch(int)>
<com.android.printspooler.model.PrintSpoolerService: boolean setPrintJobState(android.print.PrintJobId,int,java.lang.String)>
<com.android.systemui.statusbar.phone.PanelView: void setOnTouchListener(com.android.systemui.statusbar.phone.PanelViewController.TouchHandler)>
<com.android.systemui.assist.AssistManager: void logStartAssistLegacy(int,int)>
<com.android.systemui.ForegroundServiceController: boolean isDisclosureNeededForUser(int)>
<com.android.systemui.stackdivider.MinimizedDockShadow: void onLayout(boolean,int,int,int,int)>
<com.android.server.autofill.ui.AutoFillUI: void <init>(android.content.Context)>
<com.android.systemui.accessibility.WindowMagnificationController: void move(int,int)>
<com.android.systemui.util.Utils.DisableStateTracker: void <init>(int,int,com.android.systemui.statusbar.CommandQueue)>
<com.android.systemui.car.bluetooth.CarBatteryController.BatteryViewHandler: void hideBatteryView()>
<com.android.systemui.qs.tileimpl.QSTileImpl: java.lang.String composeChangeAnnouncement()>
<com.android.systemui.statusbar.phone.NotificationListenerWithPlugins: android.service.notification.StatusBarNotification[] getActiveNotifications()>
<com.android.systemui.statusbar.phone.RegionSamplingHelper.SamplingCallback: boolean isSamplingEnabled()>
<com.android.settingslib.core.AbstractPreferenceController: void <init>(android.content.Context)>
<com.android.systemui.assist.AssistOrbView: void <init>(android.content.Context)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: void disconnect()>
<com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm: int getPaddingAfterChild(com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm.StackScrollAlgorithmState,com.android.systemui.statusbar.notification.row.ExpandableView)>
<com.android.systemui.statusbar.NotificationShelf: android.view.View getContentView()>
<android.net.wifi.rtt.RangingRequest: void enforceValidity(boolean)>
<com.android.server.pm.permission.PermissionManagerService.Injector: int getCallingUid()>
<com.android.systemui.bubbles.BubbleStackView: void onAttachedToWindow()>
<com.android.server.pm.Installer: byte[] hashSecondaryDexFile(java.lang.String,java.lang.String,int,java.lang.String,int)>
<com.android.systemui.statusbar.phone.DoubleTapHelper.SlideBackListener: boolean onSlideBack()>
<com.android.systemui.statusbar.notification.row.FooterView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.os.IStatsManagerService: byte[] getData(long,java.lang.String)>
<com.android.systemui.qs.external.TileServiceManager: boolean isActiveTile()>
<com.android.settingslib.development.AbstractEnableAdbPreferenceController: boolean isAvailable()>
<com.android.server.pm.permission.BasePermission: boolean isNormal()>
<com.android.systemui.Prefs: boolean getBoolean(android.content.Context,java.lang.String,boolean)>
<com.android.server.pm.PreferredComponent: android.content.ComponentName[] discardObsoleteComponents(java.util.List)>
<com.android.systemui.qs.QSTileHost: android.content.Context getContext()>
<com.android.settingslib.drawable.CircleFramedDrawable: void draw(android.graphics.Canvas)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: boolean hasPermission(java.lang.String)>
<com.android.server.pm.Installer: void migrateAppData(java.lang.String,java.lang.String,int,int)>
<com.android.settingslib.core.instrumentation.SharedPreferencesLogger: void logValue(java.lang.String,java.lang.Object)>
<com.android.systemui.statusbar.phone.StatusBarIconHolder: void setMobileState(com.android.systemui.statusbar.phone.StatusBarSignalPolicy.MobileIconState)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setCertInstallerPackage(android.content.ComponentName,java.lang.String)>
<com.android.keyguard.clock.ClockLayout: void onLayout(boolean,int,int,int,int)>
<com.android.server.pm.dex.PackageDexUsage.DexUseInfo: boolean isUnsupportedClassLoaderContext()>
<com.android.powermodel.ActivityReport.Builder: com.android.powermodel.ActivityReport build()>
<com.android.systemui.recents.Recents: void toggleRecentApps()>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: boolean isVpnEnabled()>
<android.app.backup.ForwardingBackupAgent: void onRestoreFinished()>
<android.net.wifi.WifiManager: void cancelLocalOnlyHotspotRequest()>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int)>
<com.android.gallery3d.exif.ExifInterface: boolean isTagCountDefined(int)>
<android.net.wifi.WifiInfo: void setSSID(android.net.wifi.WifiSsid)>
<com.android.systemui.pip.BasePipManager: void hidePipMenu(java.lang.Runnable,java.lang.Runnable)>
<com.android.systemui.statusbar.tv.micdisclosure.AudioActivityObserver.OnAudioActivityStateChangeListener: void onAudioActivityStateChange(boolean,java.lang.String)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setOnHoverListener(android.view.View.OnHoverListener)>
<com.android.systemui.volume.VolumeDialogComponent: void onUserActivity()>
<com.android.systemui.qs.QSDetail: void setFullyExpanded(boolean)>
<com.android.server.DisplayThread: android.os.Handler getHandler()>
<com.android.gallery3d.glrenderer.UploadedTexture: int getHeight()>
<com.android.server.integrity.parser.RandomAccessInputStream: int available()>
<com.android.server.AnyMotionDetector: void checkForAnyMotion()>
<com.android.settingslib.widget.BarChartInfo.Builder: com.android.settingslib.widget.BarChartInfo.Builder setTitle(int)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: void incrementDisableReasonCounter(int)>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: void <init>(android.content.Context,android.os.Handler,com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: boolean shouldHideNotifications(int)>
<com.android.systemui.stackdivider.ForcedResizableInfoActivity: void onStart()>
<com.android.systemui.wm.DisplayLayout: void rotateTo(android.content.res.Resources,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getLockTaskPackages(android.content.ComponentName)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvfv(int,int,float[],int)>
<com.android.photos.BitmapRegionTileSource.BitmapSource: int getRotation()>
<com.android.server.pm.PolicyComparator: boolean foundDuplicate()>
<com.android.server.stats.pull.netstats.SubInfo: boolean equals(java.lang.Object)>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.pip.phone.PipResizeGestureHandler: boolean willStartResizeGesture(android.view.MotionEvent)>
<javax.microedition.khronos.opengles.GL10: void glPointSizex(int)>
<com.android.systemui.statusbar.phone.ShadeControllerImpl: void animateCollapsePanels(int,boolean)>
<com.android.statementservice.retriever.Statement: int hashCode()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void cleanup()>
<com.android.systemui.CornerHandleView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.net.wifi.p2p.WifiP2pDeviceList: void <init>(java.util.ArrayList)>
<com.android.server.audio.AudioService: void adjustStreamVolume(int,int,int,java.lang.String,java.lang.String,int,boolean,int)>
<com.android.systemui.qs.external.TileServices: void onStartActivity(android.os.IBinder)>
<com.android.server.statusbar.StatusBarManagerService: void dismissInattentiveSleepWarning(boolean)>
<android.net.wifi.p2p.IWifiP2pManager: void close(android.os.IBinder)>
<com.android.systemui.statusbar.notification.row.NotificationContentView: com.android.systemui.statusbar.policy.InflatedSmartReplies.SmartRepliesAndActions getCurrentSmartRepliesAndActions()>
<com.android.systemui.volume.ZenModePanel.Callback: void onExpanded(boolean)>
<com.android.server.pm.PackageManagerService: boolean setInstantAppCookie(java.lang.String,byte[],int)>
<android.content.pm.PackageManagerInternal: java.util.List queryIntentServices(android.content.Intent,int,int,int)>
<com.android.systemui.tuner.TunerActivity: void onBackPressed()>
<com.android.server.integrity.parser.RuleIndexingController: void <init>(java.io.InputStream)>
<com.android.settingslib.notification.EnableZenModeDialog: android.app.Dialog createDialog()>
<com.android.settingslib.utils.ThreadUtils: java.util.concurrent.Future postOnBackgroundThread(java.lang.Runnable)>
<com.android.server.biometrics.Utils: boolean isForeground(int,int)>
<com.android.server.people.data.DataManager: android.content.pm.ShortcutInfo getShortcut(java.lang.String,int,java.lang.String)>
<com.android.systemui.screenshot.DeleteScreenshotReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.autofill.AutofillManagerService: boolean isUserSupported(com.android.server.SystemService.TargetUser)>
<com.android.settingslib.bluetooth.PbapClientProfile: boolean accessProfileEnabled()>
<com.android.systemui.dagger.SystemUIRootComponent: void inject(com.android.systemui.keyguard.KeyguardSliceProvider)>
<com.android.systemui.statusbar.policy.CastController: void setDiscovering(boolean)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setExpandingNotification(com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.systemui.statusbar.RemoteInputController: void <init>(com.android.systemui.statusbar.RemoteInputController.Delegate,com.android.systemui.statusbar.policy.RemoteInputUriController)>
<com.android.systemui.car.notification.CarHeadsUpNotificationSystemContainer: void removeNotification(android.view.View)>
<com.android.systemui.shared.plugins.PluginManagerImpl: void addPluginListener(com.android.systemui.plugins.PluginListener,java.lang.Class)>
<com.android.systemui.statusbar.CommandQueue: void onBiometricHelp(java.lang.String)>
<com.android.server.accounts.AccountManagerService: void unregisterAccountListener(java.lang.String[],java.lang.String)>
<com.android.systemui.statusbar.phone.ScrimController.Callback: void onFinished()>
<com.android.server.slice.SliceManagerService: void revokeSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>
<com.android.printservice.recommendation.plugin.hp.ServiceRecommendationPlugin: boolean matchesCriteria(java.lang.String,android.net.nsd.NsdServiceInfo)>
<android.net.wifi.WifiNetworkSuggestion: boolean equals(java.lang.Object)>
<android.net.wifi.p2p.WifiP2pManager.ServiceResponseListener: void onServiceAvailable(int,byte[],android.net.wifi.p2p.WifiP2pDevice)>
<com.android.server.IntentResolver: android.content.IntentFilter getIntentFilter(java.lang.Object)>
<com.android.settingslib.CustomEditTextPreference.CustomPreferenceDialogFragment: void onBindDialogView(android.view.View)>
<com.android.settingslib.applications.ApplicationsState.CompoundFilter: void <init>(com.android.settingslib.applications.ApplicationsState.AppFilter,com.android.settingslib.applications.ApplicationsState.AppFilter)>
<android.net.wifi.hotspot2.pps.Credential: int hashCode()>
<com.android.systemui.statusbar.CommandQueue: void showGlobalActionsMenu()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void clearProfileOwner(android.content.ComponentName)>
<com.android.powermodel.RawBatteryStats: java.util.List getWarnings()>
<android.os.PackageManagerPerfTest: void testCheckPermissionDoesntExistWithFiltering()>
<com.android.server.biometrics.iris.IrisService: void <init>(android.content.Context)>
<com.android.server.usb.descriptors.Usb10ASGeneral: byte getTerminalLink()>
<com.android.systemui.statusbar.policy.ZenModeController.Callback: void onEffectsSupressorChanged()>
<com.android.systemui.qs.tiles.NightDisplayTile: boolean isAvailable()>
<com.android.systemui.statusbar.KeyboardShortcutKeysLayout: void <init>(android.content.Context)>
<com.android.systemui.statusbar.phone.ButtonDispatcher: void setAlpha(float,boolean,long)>
<com.android.server.people.data.DataManager: void onUserUnlocked(int)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: int getMaxPanelHeight()>
<com.android.systemui.statusbar.policy.ZenModeController: android.app.NotificationManager.Policy getConsolidatedPolicy()>
<com.android.server.pm.parsing.pkg.PkgPackageInfo: boolean isRequiredForAllUsers()>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void onAclConnectionStateChanged(com.android.settingslib.bluetooth.CachedBluetoothDevice,int)>
<com.android.systemui.statusbar.phone.DozeScrimController: boolean isDozing()>
<com.android.server.pm.UserTypeDetails.Builder: com.android.server.pm.UserTypeDetails.Builder setBadgeLabels(int[])>
<com.android.systemui.util.AutoMarqueeTextView: void onVisibilityAggregated(boolean)>
<com.android.server.policy.WindowManagerPolicy.WindowManagerFuncs: void onUserSwitched()>
<com.android.proxyhandler.ProxyServer: int getPort()>
<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiDevice getInstance()>
<com.android.systemui.bubbles.BubbleStackView: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)>
<com.android.systemui.qs.QSFooterImpl: void onDetachedFromWindow()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String)>
<com.android.systemui.statusbar.phone.DozeParameters: boolean getVibrateOnSigMotion()>
<com.android.systemui.statusbar.phone.StatusBar: void onHintFinished()>
<android.net.wifi.INetworkRequestMatchCallback: void onUserSelectionConnectSuccess(android.net.wifi.WifiConfiguration)>
<com.android.systemui.pip.phone.PipAccessibilityInteractionConnection: android.view.accessibility.AccessibilityNodeInfo obtainRootAccessibilityNodeInfo(android.content.Context)>
<com.android.wallpapercropper.CropView: void onSizeChanged(int,int,int,int)>
<com.android.systemui.biometrics.AuthBiometricView: boolean supportsSmallDialog()>
<com.android.systemui.statusbar.policy.LocationControllerImpl: void onReceive(android.content.Context,android.content.Intent)>
<com.android.packageinstaller.television.UninstallAlertFragment: int onProvideTheme()>
<com.android.server.pm.AbstractStatsBase: boolean maybeWriteAsync(java.lang.Object)>
<com.android.systemui.statusbar.notification.stack.AmbientState: boolean isPulseExpanding()>
<com.android.server.NsdService.NsdSettings: void registerContentObserver(android.net.Uri,android.database.ContentObserver)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator property(androidx.dynamicanimation.animation.DynamicAnimation.ViewProperty,float,java.lang.Runnable[])>
<android.net.wifi.aware.SubscribeConfig: int describeContents()>
<com.android.server.devicepolicy.DevicePolicyManagerService: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>
<com.android.systemui.statusbar.phone.StatusBarRemoteInputCallback: void <init>(android.content.Context,com.android.systemui.statusbar.phone.NotificationGroupManager,com.android.systemui.statusbar.NotificationLockscreenUserManager,com.android.systemui.statusbar.policy.KeyguardStateController,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager,com.android.systemui.plugins.ActivityStarter,com.android.systemui.statusbar.phone.ShadeController,com.android.systemui.statusbar.CommandQueue,com.android.systemui.statusbar.ActionClickLogger)>
<com.android.systemui.RegionInterceptingFrameLayout: void onDetachedFromWindow()>
<com.android.settingslib.applications.StorageStatsSource.AppStorageStats: long getCodeBytes()>
<com.android.server.biometrics.fingerprint.FingerprintUserState: java.util.ArrayList getCopy(java.util.ArrayList)>
<com.android.settingslib.core.lifecycle.ObservablePreferenceFragment: void onStart()>
<com.android.keyguard.CarrierText: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: boolean isUserTouching()>
<com.android.systemui.statusbar.AlphaOptimizedFrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.networkstack.tethering.EntitlementManager: void reevaluateSimCardProvisioning(com.android.networkstack.tethering.TetheringConfiguration)>
<com.android.systemui.statusbar.phone.MultiUserSwitch: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.net.wifi.util.HexEncoding: java.lang.String encodeToString(byte,boolean)>
<android.net.wifi.p2p.WifiP2pManager: void <init>(android.net.wifi.p2p.IWifiP2pManager)>
<com.android.systemui.qs.QSFragment: int getDesiredHeight()>
<com.android.server.locksettings.SyntheticPasswordManager: com.android.server.locksettings.SyntheticPasswordManager.AuthenticationResult unwrapTokenBasedSyntheticPassword(android.service.gatekeeper.IGateKeeperService,long,byte[],int)>
<com.android.systemui.statusbar.notification.stack.NotificationChildrenContainer: void setIsLowPriority(boolean)>
<com.android.server.soundtrigger.SoundTriggerInternal: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.slice.SliceClientPermissions: com.android.server.slice.SliceClientPermissions.SliceAuthority getAuthority(com.android.server.slice.SlicePermissionManager.PkgUser)>
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setServiceName(java.lang.String)>
<com.android.systemui.screenrecord.ScreenInternalAudioRecorder.Config: java.lang.String toString()>
<android.content.pm.PackageManagerInternal: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int,int)>
<com.android.server.accounts.AccountManagerService: java.lang.String getPreviousName(android.accounts.Account)>
<com.android.server.policy.PermissionPolicyInternal.OnInitializedCallback: void onInitialized(int)>
<android.net.wifi.hotspot2.PasspointConfiguration: long getSubscriptionExpirationTimeMillis()>
<com.android.systemui.statusbar.StatusBarWifiView: java.lang.String toString()>
<com.android.server.policy.WindowManagerPolicy: void registerShortcutKey(long,com.android.internal.policy.IShortcutService)>
<com.android.server.testing.shadows.ShadowAppBackupUtils: boolean appGetsFullBackup(android.content.pm.PackageInfo)>
<com.android.systemui.classifier.SpeedAnglesClassifier: java.lang.String getTag()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setScreenCaptureDisabled(android.content.ComponentName,boolean,boolean)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setDozeScreenBrightness(int)>
<com.android.systemui.wm.DisplaySystemBarsInsetsControllerHost: int dipToPx(int)>
<javax.microedition.khronos.opengles.GL11: void glGetMaterialfv(int,int,java.nio.FloatBuffer)>
<com.android.server.updates.LangIdInstallReceiver: boolean verifyVersion(int,int)>
<com.android.systemui.classifier.FalsingManagerImpl: boolean isClassifierEnabled()>
<com.android.systemui.statusbar.phone.StatusBarIconController: android.util.ArraySet getIconBlacklist(android.content.Context,java.lang.String)>
<com.android.server.pm.PackageManagerService: java.lang.String getDefaultTextClassifierPackageName()>
<com.android.systemui.statusbar.phone.PanelBar: void panelScrimMinFractionChanged(float)>
<android.net.wifi.WifiManager.NetworkRequestMatchCallback: void onUserSelectionConnectFailure(android.net.wifi.WifiConfiguration)>
<com.android.keyguard.clock.DefaultClockController: java.lang.String getName()>
<com.android.systemui.pip.tv.PipMenuActivity: void onResume()>
<com.android.settingslib.graph.SignalDrawable: int getCarrierChangeState(int)>
<android.net.wifi.IWifiManager: void notifyUserOfApBandConversion(java.lang.String)>
<com.android.systemui.util.DeviceConfigProxy: int getInt(java.lang.String,java.lang.String,int)>
<android.net.wifi.aware.IWifiAwareManager: void terminateSession(int,int)>
<com.android.settingslib.drawer.SwitchesProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>
<com.android.server.pm.UserManagerService: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
<com.android.systemui.statusbar.phone.ScrimController: boolean onPreDraw()>
<com.android.settingslib.bluetooth.CachedBluetoothDeviceManager: com.android.settingslib.bluetooth.CachedBluetoothDevice findDevice(android.bluetooth.BluetoothDevice)>
<com.android.server.policy.PhoneWindowManager: boolean isKeyguardSecure(int)>
<android.net.wifi.hotspot2.ProvisioningCallback: void onProvisioningFailure(int)>
<com.android.settingslib.Utils: int getWifiIconResource(int)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: boolean shouldSnapBack()>
<com.android.systemui.statusbar.notification.row.NotificationGuts: void <init>(android.content.Context)>
<com.android.server.biometrics.iris.IrisAuthenticator: void <init>(android.hardware.iris.IIrisService)>
<android.view.ViewShowHidePerfTest: void <init>(android.view.ViewShowHidePerfTest.SubTreeFactory,int)>
<com.android.systemui.plugins.qs.QSIconView: void disableAnimation()>
<com.android.server.pm.permission.PermissionManagerServiceInternal.PermissionCallback: void onPermissionRemoved()>
<com.android.settingslib.bluetooth.HeadsetProfile: int getDrawableResource(android.bluetooth.BluetoothClass)>
<com.android.server.CachedDeviceStateService: void <init>(android.content.Context)>
<com.android.systemui.qs.AutoAddTracker.Builder: com.android.systemui.qs.AutoAddTracker.Builder setUserId(int)>
<com.android.server.slice.SliceManagerService: int checkAccess(java.lang.String,android.net.Uri,int,int)>
<android.net.wifi.WifiScanner.ParcelableScanResults: android.net.wifi.ScanResult[] getResults()>
<com.android.systemui.car.userswitcher.UserGridRecyclerView: void onFinishInflate()>
<android.app.StatsManager: void setFetchReportsOperation(android.app.PendingIntent,long)>
<com.android.server.audio.AudioSystemAdapter: int setPreferredDeviceForStrategy(int,android.media.AudioDeviceAttributes)>
<com.android.systemui.media.NotificationPlayer: boolean onError(android.media.MediaPlayer,int,int)>
<com.android.settingslib.drawer.ProviderTile: java.lang.CharSequence getComponentLabel(android.content.Context)>
<com.android.keyguard.KeyguardUpdateMonitor: android.content.Intent getSecondaryLockscreenRequirement(int)>
<com.android.systemui.stackdivider.DividerView: boolean startDragging(boolean,boolean)>
<com.android.networkstack.tethering.TetheringConfiguration: boolean isBluetooth(java.lang.String)>
<com.android.systemui.MultiListLayout.MultiListAdapter: boolean onLongClickItem(int)>
<com.android.packageinstaller.DeleteStagedFileOnResult: void onActivityResult(int,int,android.content.Intent)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: void setJustDiscovered(boolean)>
<com.android.systemui.statusbar.notification.row.NotificationGuts: boolean hasOverlappingRendering()>
<com.android.server.pm.PackageList: java.util.List getPackageNames()>
<com.android.systemui.qs.tiles.WifiTile: java.lang.CharSequence getTileLabel()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationHeaderViewWrapper: void updateExpandability(boolean,android.view.View.OnClickListener)>
<android.net.wifi.hotspot2.omadm.XMLNode: boolean equals(java.lang.Object)>
<com.android.localtransport.LocalTransport: int getNextFullRestoreDataChunk(android.os.ParcelFileDescriptor)>
<com.android.server.input.InputManagerService.KeyboardLayoutVisitor: void visitKeyboardLayout(android.content.res.Resources,int,android.hardware.input.KeyboardLayout)>
<com.android.systemui.qs.tileimpl.QSTileImpl: boolean shouldAnnouncementBeDelayed()>
<android.net.wifi.aware.WifiAwareNetworkInfo: java.lang.String toString()>
<com.android.systemui.statusbar.notification.stack.NotificationSection: boolean isTargetBottom(int)>
<com.android.server.tv.UinputBridge: void sendPointerSync(android.os.IBinder)>
<com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter: boolean isCollapsingToShowActivityOverLockscreen()>
<com.android.systemui.qs.AutoAddTracker: void setTileAdded(java.lang.String)>
<com.android.server.display.utils.Plog: com.android.server.display.utils.Plog start(java.lang.String)>
<com.android.server.pm.parsing.pkg.PackageImpl: java.lang.String getNativeLibraryRootDir()>
<com.android.server.pm.dex.DexoptOptions: boolean isDexoptIdleBackgroundJob()>
<com.android.systemui.colorextraction.SysuiColorExtractor: void <init>(android.content.Context,com.android.internal.colorextraction.types.ExtractionType,com.android.systemui.statusbar.policy.ConfigurationController,android.app.WallpaperManager,boolean)>
<com.android.systemui.statusbar.policy.ConfigurationController.ConfigurationListener: void onUiModeChanged()>
<com.android.systemui.statusbar.phone.BackGestureTfClassifierProvider: boolean isActive()>
<com.android.settingslib.CustomDialogPreferenceCompat.CustomPreferenceDialogFragment: void onBindDialogView(android.view.View)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: long getCreationTime()>
<com.android.systemui.appops.AppOpsController.Callback: void onActiveStateChanged(int,int,java.lang.String,boolean)>
<android.net.ITetheringConnector: void stopTethering(int,java.lang.String,android.net.IIntResultListener)>
<android.net.TetheringManager.OnTetheringEntitlementResultListener: void onTetheringEntitlementResult(int)>
<com.android.systemui.egg.MLand: float lerp(float,float,float)>
<com.android.server.biometrics.BiometricService.SettingObserver: boolean getFaceAlwaysRequireConfirmation(int)>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean areGutsExposed()>
<com.android.systemui.statusbar.policy.NetworkController: void setWifiEnabled(boolean)>
<com.android.systemui.tuner.TunerZenModePanel: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.biometrics.BiometricServiceBase: void notifyClientActiveCallbacks(boolean)>
<com.android.systemui.statusbar.policy.SecurityControllerImpl: java.lang.String getWorkProfileVpnName()>
<com.android.wallpapercropper.WallpaperCropActivity: java.lang.String getFileExtension(java.lang.String)>
<com.android.server.twilight.TwilightState: void <init>(long,long)>
<com.android.powermodel.RawBatteryStats: java.util.Set getApps()>
<com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager: boolean bouncerIsOrWillBeShowing()>
<com.android.server.webkit.SystemInterface: void ensureZygoteStarted()>
<com.android.server.Watchdog: void addThread(android.os.Handler)>
<com.android.server.accessibility.AccessibilityManagerService.Lifecycle: void <init>(android.content.Context)>
<com.android.server.adb.AdbService: void bootCompleted()>
<com.android.server.pm.PackageManagerService: void restoreIntentFilterVerification(byte[],int)>
<com.android.gallery3d.exif.ExifInterface: int[] getTagIntValues(int,int)>
<com.android.systemui.media.MediaControlPanel: void bind(com.android.systemui.medi.MediaData,java.lang.String)>
<com.android.server.input.InputManagerService: void unregisterInputChannel(android.view.InputChannel)>
<com.android.systemui.assist.AssistManager: long getAssistHandleShowAndGoRemainingDurationMs()>
<android.processor.view.inspector.InspectableClassModel.Property: void setIntFlagEntries(java.util.List)>
<com.android.server.pm.UserManagerService: java.util.List getUsers(boolean,boolean,boolean)>
<android.net.wifi.WifiNetworkSpecifier.Builder: android.net.wifi.WifiNetworkSpecifier build()>
<com.android.server.adb.AdbDebuggingManager: void allowDebugging(boolean,java.lang.String)>
<com.android.server.trust.TrustArchive: void logAgentStopped(int,android.content.ComponentName)>
<com.android.systemui.qs.QSFooterImpl: void setExpansion(float)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: void onStart()>
<com.android.server.Watchdog.HandlerChecker: void scheduleCheckLocked()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView: boolean dispatchTouchEvent(android.view.MotionEvent)>
<com.android.systemui.classifier.FalsingManagerProxy: boolean isReportingEnabled()>
<com.android.systemui.car.bluetooth.CarBatteryController: void stopListening()>
<com.android.systemui.charging.WirelessChargingLayout: void <init>(android.content.Context)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout: void reorderView(android.view.View,int)>
<com.android.settingslib.net.SummaryForAllUidLoader: void onStopLoading()>
<javax.obex.ObexHelper: byte[] convertToByteArray(long)>
<com.android.systemui.statusbar.policy.BluetoothController.Callback: void onBluetoothDevicesChanged()>
<com.android.server.voiceinteraction.VoiceInteractionSessionConnection.Callback: void onSessionShown(com.android.server.voiceinteraction.VoiceInteractionSessionConnection)>
<com.android.systemui.plugins.FalsingManager: void onBouncerShown()>
<com.android.systemui.egg.MLand: float getLastTimeStep()>
<com.android.permission.persistence.RuntimePermissionsPersistence: void deleteForUser(android.os.UserHandle)>
<com.android.settingslib.deviceinfo.StorageMeasurement: void setReceiver(com.android.settingslib.deviceinfo.StorageMeasurement.MeasurementReceiver)>
<android.net.wifi.IWifiManager: byte[] retrieveSoftApBackupData()>
<com.android.server.usb.descriptors.UsbACSelectorUnit: byte[] getSourceIDs()>
<com.android.settingslib.bluetooth.BluetoothUtils: void setErrorListener(com.android.settingslib.bluetooth.BluetoothUtils.ErrorListener)>
<com.android.systemui.statusbar.phone.StatusBar: void onCameraLaunchGestureDetected(int)>
<com.android.settingslib.dream.DreamBackend: boolean isActivatedOnSleep()>
<com.android.server.policy.PhoneWindowManager: void dumpDebug(android.util.proto.ProtoOutputStream,long)>
<com.android.systemui.qs.tiles.UserTile: com.android.systemui.plugins.qs.DetailAdapter getDetailAdapter()>
<com.android.systemui.statusbar.phone.HeadsUpManagerPhone.HeadsUpEntryPhone: int compareTo(com.android.systemui.statusbar.AlertingNotificationManager.AlertEntry)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void onDismiss()>
<com.android.packageinstaller.PackageInstallerActivity: void onSaveInstanceState(android.os.Bundle)>
<com.android.systemui.qs.tiles.WorkModeTile: boolean isAvailable()>
<com.android.settingslib.drawer.SwitchesProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>
<com.android.systemui.statusbar.StatusBarIconView: boolean isIconVisible()>
<com.android.systemui.globalactions.GlobalActionsDialog: void <init>(android.content.Context,com.android.systemui.plugins.GlobalActions.GlobalActionsManager,android.media.AudioManager,android.service.dreams.IDreamManager,android.app.admin.DevicePolicyManager,com.android.internal.widget.LockPatternUtils,com.android.systemui.broadcast.BroadcastDispatcher,android.net.ConnectivityManager,android.telephony.TelephonyManager,android.content.ContentResolver,android.os.Vibrator,android.content.res.Resources,com.android.systemui.statusbar.policy.ConfigurationController,com.android.systemui.plugins.ActivityStarter,com.android.systemui.statusbar.policy.KeyguardStateController,android.os.UserManager,android.app.trust.TrustManager,android.app.IActivityManager,android.telecom.TelecomManager,com.android.internal.logging.MetricsLogger,com.android.systemui.statusbar.NotificationShadeDepthController,com.android.systemui.colorextraction.SysuiColorExtractor,com.android.internal.statusbar.IStatusBarService,com.android.systemui.statusbar.phone.NotificationShadeWindowController,android.view.IWindowManager,java.util.concurrent.Executor,com.android.internal.logging.UiEventLogger,com.android.systemui.util.RingerModeTracker,com.android.systemui.model.SysUiState,android.os.Handler,com.android.systemui.controls.dagger.ControlsComponent,com.android.systemui.settings.CurrentUserContextTracker)>
<android.view.ViewShowHidePerfTest: void testVisibleToInvisible()>
<com.android.server.hdmi.HdmiCecController.NativeWrapper: android.hardware.hdmi.HdmiPortInfo[] nativeGetPortInfos()>
<com.android.systemui.qs.tiles.HotspotTile: java.lang.String composeChangeAnnouncement()>
<com.android.systemui.statusbar.policy.RemoteInputView.RemoteEditText: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.globalactions.GlobalActionsDialog.PowerOptionsAction: boolean showBeforeProvisioning()>
<com.android.server.accessibility.KeyEventDispatcher: boolean handleMessage(android.os.Message)>
<android.media.MediaController2: android.media.Session2Token getConnectedToken()>
<com.android.server.devicepolicy.DevicePolicyManagerService.RestrictionsListener: void onUserRestrictionsChanged(int,android.os.Bundle,android.os.Bundle)>
<com.android.systemui.statusbar.NotificationLockscreenUserManager: boolean shouldHideNotifications(java.lang.String)>
<com.android.settingslib.media.LocalMediaManager.DeviceCallback: void onDeviceListUpdate(java.util.List)>
<com.android.server.accessibility.AccessibilityManagerService.AccessibilityDisplayListener: void onDisplayChanged(int)>
<android.net.wifi.WpsInfo: void writeToParcel(android.os.Parcel,int)>
<com.android.settingslib.wifi.TestAccessPointBuilder: com.android.settingslib.wifi.AccessPoint build()>
<com.android.server.usb.descriptors.UsbDescriptorParser: int getParsingSpec()>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getUsesStaticLibraries()>
<com.android.server.policy.PhoneWindowManager: boolean inKeyguardRestrictedKeyInputMode()>
<com.android.gallery3d.exif.ExifTag: long getValueAsLong(long)>
<com.android.gallery3d.exif.ExifTag: byte[] getStringByte()>
<com.android.server.autofill.ui.FillUi.Callback: void onDestroy()>
<com.android.systemui.statusbar.policy.CastControllerImpl: void setCurrentUserId(int)>
<com.android.packageinstaller.wear.WearPackageIconProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<com.android.keyguard.KeyguardSimPinView: void verifyPasswordAndUnlock()>
<com.android.keyguard.KeyguardSimPinView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.audio.AudioService.Lifecycle: void onStart()>
<android.net.wifi.RttManager.ResponderCallback: void onResponderEnableFailure(int)>
<com.android.keyguard.KeyguardPINView: void <init>(android.content.Context)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator translationY(float,java.lang.Runnable[])>
<com.android.server.usb.UsbService: java.util.List getPorts()>
<com.android.keyguard.KeyguardPinBasedInputView: void onResume(int)>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: void onGestureFinished()>
<com.android.gallery3d.glrenderer.UploadedTexture: boolean isOpaque()>
<com.android.nfc_extras.NfcAdapterExtras: void authenticate(byte[])>
<com.android.systemui.statusbar.phone.NavigationBarView: boolean isOverviewEnabled()>
<com.android.settingslib.net.NetworkStatsSummaryLoader.Builder: com.android.settingslib.net.NetworkStatsSummaryLoader.Builder setStartTime(long)>
<com.android.keyguard.KeyguardSecurityContainer: com.android.keyguard.KeyguardSecurityView getCurrentSecurityView()>
<android.net.wifi.hotspot2.pps.Credential.CertificateCredential: boolean equals(java.lang.Object)>
<javax.obex.ClientOperation: void ensureOpen()>
<android.net.TetheringManager.TetheringRequest.Builder: android.net.TetheringManager.TetheringRequest.Builder setExemptFromEntitlementCheck(boolean)>
<com.android.server.usb.UsbPortManager: android.hardware.usb.UsbPortStatus getPortStatus(java.lang.String)>
<com.android.server.pm.permission.BasePermission: boolean isRetailDemo()>
<android.widget.TextViewPrecomputedTextPerfTest: void testOnDraw_RandomText_Selectable()>
<com.android.server.accessibility.gestures.TouchState: int getInjectedPointersDown()>
<com.android.server.pm.PackageManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.systemui.plugins.PluginDependencyProvider: void allowPluginDependency(java.lang.Class,java.lang.Object)>
<com.android.server.TelephonyRegistry: void notifyCallStateForAllSubs(int,java.lang.String)>
<com.android.systemui.egg.MLand: void <init>(android.content.Context)>
<com.android.settingslib.drawer.ActivityTile: int getId()>
<com.android.server.protolog.common.IProtoLogGroup: boolean isLogToProto()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void showPinningEscapeToast()>
<android.net.wifi.WifiManager: void connect(int,android.net.wifi.WifiManager.ActionListener)>
<android.view.textclassifier.TextClassificationManagerPerfTest: void tearDownClass()>
<com.android.server.textclassifier.IconsUriHelper: com.android.server.textclassifier.IconsUriHelper.ResourceInfo getResourceInfo(android.net.Uri)>
<com.android.gallery3d.exif.ExifInterface: java.lang.Long getTagLongValue(int)>
<com.android.systemui.statusbar.notification.collection.listbuilder.pluggable.Pluggable: void invalidateList()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void hideRecentApps(boolean,boolean)>
<com.android.settingslib.search.SearchIndexableRaw: void <init>(android.content.Context)>
<com.android.server.autofill.Helper: android.app.assist.AssistStructure.ViewNode sanitizeUrlBar(android.app.assist.AssistStructure,java.lang.String[])>
<com.android.systemui.dagger.DefaultBroadcastReceiverBinder: android.content.BroadcastReceiver bindDeleteScreenshotReceiver(com.android.systemui.screenshot.DeleteScreenshotReceiver)>
<com.android.systemui.statusbar.notification.stack.StackStateAnimator: void cancelOverScrollAnimators(boolean)>
<com.android.systemui.DejankUtils: void postAfterTraversal(java.lang.Runnable)>
<com.android.settingslib.wifi.AccessPoint: boolean isPasspointConfig()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: void closeRemoteInput()>
<com.android.server.accessibility.MotionEventInjector: void clearEvents(int)>
<com.android.server.media.MediaRouterService: void systemRunning()>
<com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProviderImpl: void addSuppressor(com.android.systemui.statusbar.notification.interruption.NotificationInterruptSuppressor)>
<com.android.systemui.statusbar.phone.DozeServiceHost: void setAnimateScreenOff(boolean)>
<com.android.server.tv.tunerresourcemanager.FrontendResource: int getType()>
<com.android.systemui.tuner.TunablePadding: com.android.systemui.tuner.TunablePadding addTunablePadding(android.view.View,java.lang.String,int,int)>
<com.android.systemui.statusbar.notification.collection.coalescer.GroupCoalescer: void <init>(com.android.systemui.util.concurrency.DelayableExecutor,com.android.systemui.util.time.SystemClock,com.android.systemui.statusbar.notification.collection.coalesce.GroupCoalescerLogger)>
<com.android.keyguard.AlphaOptimizedLinearLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.android.server.broadcastradio.hal2.RadioModule.AidlCallbackRunnable: void run(android.hardware.radio.ITunerCallback)>
<com.android.systemui.shared.system.RecentsAnimationControllerCompat: void setWillFinishToHome(boolean)>
<com.android.systemui.statusbar.phone.PanelBar: void updateVisibility()>
<com.android.keyguard.CarrierText: void onVisibilityChanged(android.view.View,int)>
<com.android.server.vr.EnabledComponentsObserver: com.android.server.vr.EnabledComponentsObserver build(android.content.Context,android.os.Handler,java.lang.String,android.os.Looper,java.lang.String,java.lang.String,java.lang.Object,java.util.Collection)>
<com.android.server.usb.descriptors.tree.UsbDescriptorsTree: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<com.android.systemui.statusbar.notification.row.FooterView.FooterViewState: void applyToView(android.view.View)>
<com.android.systemui.statusbar.AlphaOptimizedImageView: void <init>(android.content.Context)>
<com.android.systemui.statusbar.notification.stack.ViewState: void onYTranslationAnimationFinished(android.view.View)>
<com.android.server.integrity.parser.BinaryFileOperations: java.lang.String getStringValue(com.android.server.integrity.model.BitInputStream,int,boolean)>
<com.android.server.people.data.EventIndex: java.lang.String toString()>
<com.android.server.pm.parsing.pkg.AndroidPackage: long getStaticSharedLibVersion()>
<com.android.bluetoothmidiservice.BluetoothPacketEncoder: void onSend(byte[],int,int,long)>
<com.android.systemui.statusbar.policy.HotspotControllerImpl: void addCallback(android.os.Handler.Callback)>
<com.android.systemui.shared.system.SyncRtSurfaceTransactionApplierCompat.SurfaceParams.Builder: void <init>(com.android.systemui.shared.system.SurfaceControlCompat)>
<android.net.util.BaseNetdUnsolicitedEventListener: int getInterfaceVersion()>
<android.media.Session2Command: void <init>(int)>
<com.android.systemui.shared.plugins.PluginManager: com.android.systemui.plugins.Plugin getOneShotPlugin(java.lang.String,java.lang.Class)>
<android.net.wifi.rtt.RangingRequest.Builder: android.net.wifi.rtt.RangingRequest.Builder addWifiAwarePeer(android.net.MacAddress)>
<com.android.systemui.statusbar.notification.TransformState: void transformViewVerticalTo(com.android.systemui.statusbar.notification.TransformState,float)>
<com.android.server.infra.AbstractMasterSystemService: void onServiceNameChanged(int,java.lang.String,boolean)>
<com.android.settingslib.widget.LayoutPreference: void <init>(android.content.Context,android.view.View)>
<com.android.systemui.bubbles.animation.StackAnimationController: void animateStackDismissal(float,java.lang.Runnable)>
<com.android.systemui.statusbar.policy.EmergencyCryptkeeperText: void update()>
<javax.microedition.khronos.opengles.GL10: void glLogicOp(int)>
<com.android.systemui.statusbar.StatusBarWifiView: int getVisibleState()>
<com.android.systemui.qs.TouchAnimator.ListenerAdapter: void onAnimationStarted()>
<android.net.wifi.p2p.WifiP2pManager: void requestDiscoveryState(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DiscoveryStateListener)>
<com.android.server.usb.descriptors.tree.UsbDescriptorsDeviceNode: void report(com.android.server.usb.descriptors.report.ReportCanvas)>
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager.Channel initializeInternal(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager.ChannelListener)>
<com.android.systemui.statusbar.policy.NetworkController.AccessPointController.AccessPointCallback: void onSettingsActivityTriggered(android.content.Intent)>
<com.android.systemui.statusbar.phone.StatusBar: void showPinningEscapeToast()>
<com.android.systemui.recents.Recents: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.biometrics.BiometricServiceBase.AuthenticationClientImpl: void <init>(android.content.Context,com.android.server.biometrics.BiometricServiceBase.DaemonWrapper,long,android.os.IBinder,com.android.server.biometrics.BiometricServiceBase.ServiceListener,int,int,long,boolean,java.lang.String,int,boolean)>
<com.android.server.infra.AbstractPerUserSystemService: boolean isVerbose()>
<com.android.server.usb.descriptors.UsbDescriptorParser: float getOutputHeadsetProbability()>
<android.net.wifi.WifiManager.SoftApCallback: void onBlockedClientConnecting(android.net.wifi.WifiClient,int)>
<com.google.android.startop.iorap.TaskResult: void <init>(int)>
<com.android.server.textclassifier.TextClassificationManagerService.Lifecycle: void <init>(android.content.Context)>
<com.android.systemui.util.concurrency.ConcurrencyModule: com.android.systemui.util.concurrency.RepeatableExecutor provideMainRepeatableExecutor(com.android.systemui.util.concurrency.DelayableExecutor)>
<com.android.systemui.qs.QSPanel: void onTuningChanged(java.lang.String,java.lang.String)>
<com.android.systemui.statusbar.policy.DeadZone: void setFlash(float)>
<com.android.keyguard.KeyguardStatusView: void onDensityOrFontScaleChanged()>
<android.net.ip.IpServer.Callback: void dhcpLeasesChanged()>
<com.android.pacprocessor.PacWebView: java.lang.String makeProxyRequest(java.lang.String,java.lang.String)>
<com.android.systemui.util.wakelock.WakeLock: void release(java.lang.String)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void setBackgroundTintColor(int)>
<com.android.settingslib.widget.BarChartPreference: void <init>(android.content.Context)>
<com.android.systemui.plugins.SensorManagerPlugin: void registerListener(com.android.systemui.plugins.SensorManagerPlugin.Sensor,com.android.systemui.plugins.SensorManagerPlugin.SensorEventListener)>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void setInteractAcrossProfilesAppOp_withoutCrossProfileAttribute_manifestReceiversDoNotGetBroadcast()>
<com.android.systemui.statusbar.phone.StatusBarIconController.DarkIconManager: void onRemoveIcon(int)>
<com.android.server.infra.AbstractMasterSystemService: boolean isDisabledLocked(int)>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: boolean isClassifierEnabled()>
<com.android.systemui.ForegroundServicesUserState: boolean isDisclosureNeeded()>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy: void setNoSims(boolean,boolean)>
<com.android.server.accessibility.MagnificationController: float getOffsetY(int)>
<android.net.wifi.WifiScanner.HotlistSettings: void writeToParcel(android.os.Parcel,int)>
<javax.obex.Operation: void abort()>
<com.android.localtransport.LocalTransport: int sendBackupData(int)>
<com.android.systemui.statusbar.phone.PanelViewController: void collapse(boolean,float)>
<com.android.systemui.statusbar.policy.SplitClockView: void onDetachedFromWindow()>
<com.android.server.testharness.TestHarnessModeService: void <init>(android.content.Context)>
<com.android.server.media.MediaRouterService: void releaseSessionWithManager(android.media.IMediaRouter2Manager,int,java.lang.String)>
<com.android.systemui.car.bluetooth.ConnectedDeviceSignalController: void <init>(android.content.Context,android.view.View)>
<com.android.systemui.volume.VolumeDialogImpl: void init(int,com.android.systemui.volume.VolumeDialogImpl.Callback)>
<com.android.server.display.DisplayModeDirector.RefreshRateRange: void <init>(float,float)>
<com.android.systemui.shared.plugins.VersionInfo.InvalidVersionException: void <init>(java.lang.Class,boolean,int,int)>
<com.android.systemui.globalactions.GlobalActionsDialog.Action: java.lang.CharSequence getMessage()>
<com.android.server.pm.dex.DexoptOptions: boolean isBootComplete()>
<com.android.systemui.assist.ui.DefaultUiController: void onGestureCompletion(float)>
<com.android.server.print.RemotePrintSpooler.PrintSpoolerCallbacks: void onPrintJobStateChanged(android.print.PrintJobInfo)>
<com.android.systemui.statusbar.RemoteInputController: void closeRemoteInputs()>
<com.android.server.statusbar.StatusBarManagerService: void onGlobalActionsHidden()>
<com.android.keyguard.clock.BubbleClockController: android.view.View getBigClockView()>
<android.net.wifi.WifiScanner.ScanSettings: int describeContents()>
<com.android.settingslib.widget.LinkTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.bubbles.BubbleData: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.INativeDaemonConnectorCallbacks: void onDaemonConnected()>
<com.android.perftests.blob.AtraceUtils: void performDump(android.perftests.utils.TraceMarkParser,java.util.function.BiConsumer)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: boolean shouldHideBackground()>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int findKeyReceiverAddress()>
<com.android.server.pm.Settings: void onVolumeForgotten(java.lang.String)>
<com.android.keyguard.KeyguardViewController: boolean isShowing()>
<com.android.server.usb.UsbAlsaManager: void systemReady()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>
<com.android.systemui.statusbar.policy.HeadsUpManager: boolean isEntryAutoHeadsUpped(java.lang.String)>
<com.android.settingslib.bluetooth.PanProfile: boolean accessProfileEnabled()>
<com.android.systemui.statusbar.phone.ContextualButtonGroup: void <init>(int)>
<com.android.server.NetworkManagementService: void enableIpv6(java.lang.String)>
<com.android.systemui.dock.DockManagerImpl: boolean isHidden()>
<com.android.systemui.statusbar.phone.EdgeBackGestureHandler: void onDisplayAdded(int)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void <init>(android.content.Context,android.view.View,com.android.systemui.statusbar.notification.row.ExpandableNotificationRow)>
<com.android.printservice.recommendation.util.MDNSUtils: boolean isVendorPrinter(android.net.nsd.NsdServiceInfo,java.util.Set)>
<com.android.systemui.wm.DisplayLayout: int getOrientation()>
<com.android.systemui.doze.DozeDockHandler: void dump(java.io.PrintWriter)>
<android.net.wifi.p2p.WifiP2pGroup: android.net.wifi.p2p.WifiP2pDevice getOwner()>
<com.android.systemui.statusbar.phone.BiometricUnlockController: void onStartedGoingToSleep(int)>
<com.android.gallery3d.glrenderer.UploadedTexture: void <init>(boolean)>
<com.android.server.testing.shadows.ShadowApplicationPackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setPasspointConfig(android.net.wifi.hotspot2.PasspointConfiguration)>
<com.android.settingslib.applications.ApplicationsState.VolumeFilter: boolean filterApp(com.android.settingslib.applications.ApplicationsState.AppEntry)>
<com.android.server.pm.PackageManagerService: void clearPackagePersistentPreferredActivities(java.lang.String,int)>
<com.android.systemui.statusbar.AlphaOptimizedImageView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void onStartedGoingToSleep()>
<com.android.systemui.globalactions.GlobalActionsFlatLayout: float getGridItemSize()>
<com.android.powermodel.AppActivity: com.google.common.collect.ImmutableMap getComponentActivities()>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<com.android.systemui.statusbar.policy.ZenModeControllerImpl: android.service.notification.ZenModeConfig getConfig()>
<android.widget.TextViewPrecomputedTextPerfTest: void testOnDraw_PrecomputedText_Selectable()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean isFooterViewContentVisible()>
<com.android.systemui.statusbar.phone.AutoTileManager: void destroy()>
<com.android.systemui.globalactions.GlobalActionsDialog.EmergencyAction: boolean shouldBeSeparated()>
<com.android.systemui.statusbar.NotificationPresenter: boolean isDeviceInVrMode()>
<android.view.ViewShowHidePerfTest: void testGoneToVisible()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.biometrics.BiometricServiceBase: void notifyLockoutResetMonitors()>
<com.android.settingslib.deviceinfo.AbstractIpAddressPreferenceController: java.lang.String[] getConnectivityIntents()>
<com.android.systemui.recents.ScreenPinningRequest: void onConfigurationChanged()>
<com.android.systemui.statusbar.policy.RotationLockControllerImpl: boolean isRotationLocked()>
<com.android.systemui.statusbar.policy.KeyguardStateController: boolean isTrusted()>
<com.android.systemui.car.volume.CarVolumeDialogImpl: void init(int,android.graphics.drawable.Drawable.Callback)>
<com.android.server.ConnectivityService: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
<com.android.settingslib.Utils: android.graphics.ColorFilter getAlphaInvariantColorFilterForColor(int)>
<com.android.systemui.statusbar.notification.row.ActivatableNotificationView: void setTintColor(int)>
<com.android.systemui.power.PowerUI.WarningsUI: void dismissInvalidChargerWarning()>
<com.android.systemui.statusbar.notification.stack.NotificationListItem: void removeChildNotification(com.android.systemui.statusbar.notification.stack.NotificationListItem)>
<com.android.systemui.util.time.SystemClock: long currentThreadTimeMillis()>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow: void onParentHeightUpdate()>
<com.android.server.usb.descriptors.UsbHIDDescriptor: byte getCountryCode()>
<com.android.server.PersistentDataBlockManagerInternal: void forceOemUnlockEnabled(boolean)>
<android.net.wifi.p2p.WifiP2pDevice: void update(android.net.wifi.p2p.WifiP2pDevice)>
<com.android.settingslib.DeviceInfoUtils: java.lang.String getFormattedKernelVersion(android.content.Context)>
<android.content.pm.PackageManagerInternal: boolean userNeedsBadging(int)>
<android.net.wifi.WifiConfiguration.NetworkSelectionStatus: boolean getSeenInLastQualifiedNetworkSelection()>
<com.android.systemui.car.window.OverlayPanelViewController: void onExpandAnimationEnd()>
<com.android.keyguard.AlphaOptimizedLinearLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.devicepolicy.OverlayPackagesProvider.Injector: java.util.List getInputMethodListAsUser(int)>
<android.net.wifi.SoftApCapability: int getMaxSupportedClients()>
<com.android.powermodel.ComponentActivity: com.android.powermodel.ComponentPower applyProfile(com.android.powermodel.ActivityReport,com.android.powermodel.PowerProfile)>
<com.android.systemui.plugins.qs.QS: void setContainer(android.view.ViewGroup)>
<com.android.server.usb.UsbAlsaDevice: java.lang.String toString()>
<com.android.server.soundtrigger.SoundTriggerLogger: void dump(java.io.PrintWriter)>
<com.android.keyguard.KeyguardSimPukView: void onPause()>
<com.android.settingslib.net.NetworkCycleChartDataLoader.Builder: void <init>(android.content.Context)>
<com.android.server.PackageWatchdog: void onPackagesReady()>
<com.android.systemui.qs.SecureSetting: int getValue()>
<android.net.wifi.hotspot2.pps.Credential.SimCredential: boolean equals(java.lang.Object)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setWpa2Passphrase(java.lang.String)>
<javax.obex.BaseStream: boolean continueOperation(boolean,boolean)>
<android.media.Session2CommandGroup: int describeContents()>
<com.android.systemui.biometrics.AuthPanelController: void updateForContentDimensions(int,int,int)>
<com.android.systemui.shared.plugins.PluginManagerImpl: com.android.systemui.shared.plugins.PluginEnabler getPluginEnabler()>
<com.android.server.accessibility.AutoclickController: void onKeyEvent(android.view.KeyEvent,int)>
<com.android.server.pm.ApexManager.ApexManagerImpl: boolean restoreCeData(int,int,java.lang.String)>
<com.android.systemui.volume.VolumeDialogComponent: void dismissNow()>
<com.android.systemui.statusbar.phone.NotificationShadeWindowView.InteractionEventHandler: boolean shouldInterceptTouchEvent(android.view.MotionEvent)>
<com.android.gallery3d.common.BitmapUtils: android.graphics.Bitmap rotateBitmap(android.graphics.Bitmap,int,boolean)>
<com.google.android.startop.iorap.AppLaunchEvent.IntentFailed: void <init>(long)>
<com.android.systemui.statusbar.notification.row.NotificationGuts: void closeControls(android.view.View,boolean)>
<com.android.settingslib.notification.ConversationIconFactory: android.graphics.drawable.Drawable getConversationDrawable(android.graphics.drawable.Drawable,java.lang.String,int,boolean)>
<com.android.systemui.ForegroundServiceController.UserStateUpdateCallback: void userStateNotFound(int)>
<com.android.server.infra.SecureSettingsServiceNameResolver: void dumpShort(java.io.PrintWriter)>
<com.android.systemui.shared.system.ContextCompat: void <init>(android.content.Context)>
<com.android.settingslib.bluetooth.BluetoothDeviceFilter.Filter: boolean matches(android.bluetooth.BluetoothDevice)>
<com.android.systemui.statusbar.notification.stack.SwipeableView: void setTranslation(float)>
<com.android.printservice.recommendation.util.PrinterHashMap: android.net.nsd.NsdServiceInfo addPrinter(android.net.nsd.NsdServiceInfo)>
<com.android.systemui.car.notification.TopNotificationPanelViewMediator: void <init>(com.android.systemui.car.navigationbar.CarNavigationBarController,com.android.systemui.car.notification.NotificationPanelViewController,com.android.systemui.car.notification.PowerManagerHelper,com.android.systemui.broadcast.BroadcastDispatcher,com.android.systemui.car.CarDeviceProvisionedController,com.android.systemui.statusbar.policy.ConfigurationController)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setChildTransferInProgress(boolean)>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: void <init>(android.content.Context,com.android.systemui.broadcast.BroadcastDispatcher,android.app.admin.DevicePolicyManager,android.os.UserManager,com.android.systemui.statusba.NotificationClickNotifier,android.app.KeyguardManager,com.android.systemui.plugins.statusbar.StatusBarStateController,android.os.Handler,com.android.systemui.statusbar.policy.DeviceProvisionedController,com.android.systemui.statusbar.policy.KeyguardStateController)>
<com.android.hotspot2.osulogin.OsuLoginActivity: void onDestroy()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: boolean isBelowLastNotification(float,float)>
<com.android.server.protolog.ProtoLogImpl: void log(com.android.server.protolog.ProtoLogImpl.LogLevel,com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>
<com.android.server.pm.ApexManager: java.lang.String getActiveApexPackageNameContainingPackage(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.systemui.car.keyguard.CarKeyguardViewController: void onFinishedGoingToSleep()>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator followAnimatedTargetAlongPath(android.graphics.Path,int,android.animation.TimeInterpolator,java.lang.Runnable[])>
<com.android.systemui.statusbar.CommandQueue: void stopTracing()>
<com.android.settingslib.location.SettingsInjector.ServiceSettingClickedListener: boolean onPreferenceClick(androidx.preference.Preference)>
<com.android.gallery3d.exif.ExifInterface: com.android.gallery3d.exif.Rational[] getTagRationalValues(int)>
<com.android.server.tv.UinputBridge: void sendGamepadAxisValue(android.os.IBinder,int,float)>
<com.android.systemui.LatencyTester: void <init>(android.content.Context,com.android.systemui.statusbar.phone.BiometricUnlockController,android.os.PowerManager,com.android.systemui.broadcast.BroadcastDispatcher)>
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onRefreshCarrierInfo()>
<com.android.systemui.statusbar.policy.SmartReplyConstants: int getMinNumSystemGeneratedReplies()>
<com.android.systemui.statusbar.phone.KeyguardBouncer: boolean inTransit()>
<com.android.systemui.statusbar.phone.NearestTouchFrame: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService.PackageFreezer freezePackageForDelete(java.lang.String,int,int,java.lang.String)>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void onDreamingStarted()>
<com.android.server.wallpaper.WallpaperManagerService: void finalize()>
<com.android.systemui.statusbar.phone.UserAvatarView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.ConnectivityService: int nextNetworkProviderId()>
<com.android.systemui.pip.PipSnapAlgorithm: android.util.Size getSizeForAspectRatio(android.util.Size,float,float)>
<com.android.server.locksettings.LockSettingsService: void initRecoveryServiceWithSigFile(java.lang.String,byte[],byte[])>
<com.android.systemui.statusbar.notification.row.RowContentBindStage: com.android.systemui.statusbar.notification.row.RowContentBindParams newStageParams()>
<com.android.systemui.tuner.LockscreenFragment.Adapter: void <init>(android.content.Context,java.util.function.Consumer)>
<com.android.systemui.car.navigationbar.SystemBarConfigs: boolean getEnabledStatusBySide(int)>
<com.android.systemui.qs.PagedTileLayout: void onLayout(boolean,int,int,int,int)>
<com.android.keyguard.KeyguardHostView: void finish(boolean,int)>
<com.android.settingslib.users.AppRestrictionsHelper: void setLeanback(boolean)>
<com.android.server.integrity.parser.RuleParser: java.util.List parse(byte[])>
<com.android.settingslib.applications.ServiceListing: void addCallback(com.android.settingslib.applications.ServiceListing.Callback)>
<com.android.server.locksettings.recoverablekeystore.KeyStoreProxyImpl: void setEntry(java.lang.String,java.security.KeyStore.Entry,java.security.KeyStore.ProtectionParameter)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceController: void dump(java.io.PrintWriter)>
<com.android.systemui.power.EnhancedEstimatesImpl: long getSevereWarningThreshold()>
<com.android.systemui.shared.recents.view.AppTransitionAnimationSpecsFuture: void composeSpecsSynchronous()>
<com.android.server.pm.BackgroundDexOptService: void notifyPackageChanged(java.lang.String)>
<com.android.server.pm.permission.PermissionManagerService: void grantDefaultPermissionsToEnabledCarrierApps(java.lang.String[],int)>
<com.android.server.appop.AppOpsService: void stopWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
<com.android.server.integrity.model.ByteTrackedOutputStream: void write(byte[],int,int)>
<com.android.systemui.statusbar.notification.dagger.NotificationsModule: com.android.systemui.statusbar.notification.collection.notifcollection.CommonNotifCollection provideCommonNotifCollection(com.android.systemui.statusbar.FeatureFlags,dagger.Lazy,com.android.systemui.statusbar.notification.NotificationEntryManager)>
<com.android.systemui.car.navigationbar.CarNavigationBarView: com.android.systemui.car.navigationbar.CarNavigationBarController.NotificationsShadeController getNotificationsPanelController()>
<com.android.server.pm.dex.DexoptOptions: void <init>(java.lang.String,int,java.lang.String,java.lang.String,int)>
<com.android.printspooler.model.PageContentRepository.PageContentProvider: void getPageContent(com.android.printspooler.model.PageContentRepository.RenderSpec,com.android.printspooler.model.PageContentRepository.OnPageContentAvailableCallback)>
<com.android.systemui.util.sensors.ProximitySensor: boolean isRegistered()>
<com.android.systemui.classifier.Stroke: void <init>(long,float)>
<android.net.wifi.WifiManager: void allowAutojoinPasspoint(java.lang.String,boolean)>
<com.android.server.accounts.IAccountAuthenticatorCache: void setBindInstantServiceAllowed(int,boolean)>
<android.os.BinderCallsStatsPerfTest: void timeCallSession_500_buckets_cpuNotRecorded()>
<com.android.gallery3d.glrenderer.BasicTexture: void setAssociatedCanvas(com.android.gallery3d.glrenderer.GLCanvas)>
<android.net.wifi.rtt.ResponderLocation: android.location.Address toCivicLocationAddress()>
<com.android.uiautomator.core.UiObject: boolean waitForExists(long)>
<com.android.server.testharness.TestHarnessModeService: void onBootPhase(int)>
<com.android.systemui.statusbar.CommandQueue: void appTransitionCancelled(int)>
<com.android.systemui.CarSystemUIBinder: com.android.systemui.SystemUI bindCarNavigationBar(com.android.systemui.car.navigationbar.CarNavigationBar)>
<com.android.systemui.statusbar.phone.HeadsUpAppearanceController: boolean shouldBeVisible()>
<android.view.autofill.MyAutofillCallback: void assertNoAsyncErrors()>
<com.android.systemui.wm.DisplayImeController: void <init>(android.view.IWindowManager,com.android.systemui.wm.DisplayController,java.util.concurrent.Executor,com.android.systemui.TransactionPool)>
<com.android.systemui.statusbar.phone.DozeServiceHost: boolean isPowerSaveActive()>
<android.os.BinderCallsStatsPerfTest: void setUp()>
<com.android.server.policy.PhoneWindowManager: boolean isKeyguardLocked()>
<com.android.systemui.dock.DockManager: boolean isHidden()>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyGenerator: com.android.server.locksettings.recoverablekeystore.RecoverableKeyGenerator newInstance(com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb)>
<com.android.server.PersistentDataBlockManagerInternal: void clearTestHarnessModeData()>
<com.android.server.policy.keyguard.KeyguardStateMonitor: void <init>(android.content.Context,com.android.internal.policy.IKeyguardService,com.android.server.policy.keyguard.KeyguardStateMonitor.StateCallback)>
<com.android.settingslib.drawer.DashboardCategory: java.util.List getTiles()>
<com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] encryptRecoveryClaim(java.security.PublicKey,byte[],byte[],byte[],byte[])>
<com.android.server.pm.parsing.pkg.PkgAppInfo: java.lang.String getCompileSdkVersionCodeName()>
<android.processor.view.inspector.InspectableClassModel.Property: java.util.List getIntEnumEntries()>
<com.android.systemui.bubbles.BubbleViewProvider: void logUIEvent(int,int,float,float,int)>
<com.android.systemui.statusbar.StatusBarWifiView: void <init>(android.content.Context)>
<com.android.systemui.qs.tileimpl.QSIconViewImpl: void onMeasure(int,int)>
<com.android.systemui.shared.recents.model.Task: void <init>(com.android.systemui.shared.recents.model.Task.TaskKey)>
<android.net.wifi.WifiScanner: void registerScanListener(android.net.wifi.WifiScanner.ScanListener)>
<com.android.systemui.qs.external.QSTileServiceWrapper: void <init>(android.service.quicksettings.IQSTileService)>
<com.android.printservice.recommendation.util.MDNSFilteredDiscovery: void start(com.android.printservice.recommendation.PrintServicePlugin.PrinterDiscoveryCallback)>
<com.android.systemui.doze.DozeMachine: void dump(java.io.PrintWriter)>
<android.database.SQLiteDatabasePerfTest: void testSelect()>
<com.android.systemui.qs.tiles.WifiTile.CallbackInfo: java.lang.String toString()>
<com.android.systemui.doze.DozeLog: void traceMissedTick(java.lang.String)>
<com.android.server.pm.PackageManagerService: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>
<com.android.systemui.ActivityIntentHelper: android.content.pm.ActivityInfo getTargetActivityInfo(android.content.Intent,int,boolean)>
<android.provider.settings.validators.ComponentNameListValidator: boolean isItemValid(java.lang.String)>
<com.android.gallery3d.glrenderer.RawTexture: void prepare(com.android.gallery3d.glrenderer.GLCanvas)>
<android.app.usage.UsageStatsManagerInternal.AppUsageLimitData: void <init>(long,long)>
<com.android.systemui.statusbar.KeyguardIndicationController.BaseKeyguardCallback: void onBiometricAuthenticated(int,android.hardware.biometrics.BiometricSourceType,boolean)>
<com.android.server.policy.PhoneWindowManager: void keepScreenOnStoppedLw()>
<com.android.systemui.statusbar.phone.QuickswitchOrientedNavHandle: void onDraw(android.graphics.Canvas)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void drawLine(float,float,float,float,com.android.gallery3d.glrenderer.GLPaint)>
<com.android.systemui.statusbar.phone.StatusBar: boolean isBouncerShowing()>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void addNotificationRemoveInterceptor(com.android.systemui.statusbar.NotificationRemoveInterceptor)>
<com.android.systemui.statusbar.phone.StatusBarIconList.Slot: int numberOfIcons()>
<android.net.wifi.ILocalOnlyHotspotCallback: void onHotspotFailed(int)>
<com.android.printspooler.ui.PrinterRegistry: void forgetFavoritePrinter(android.print.PrinterId)>
<com.android.photos.SimpleBitmapRegionDecoder: int getHeight()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long insertKey(int,int,java.lang.String,com.android.server.locksettings.recoverablekeystore.WrappedKey)>
<com.android.systemui.qs.tileimpl.ButtonRelativeLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.pm.UserManagerService: java.lang.String getUserName()>
<com.android.server.biometrics.fingerprint.FingerprintConstants: java.lang.String tagEnumerateStartError()>
<com.android.systemui.AutoReinflateContainer: void onLocaleListChanged()>
<com.android.mediadrm.signer.MediaDrmSigner: byte[] signRSA(android.media.MediaDrm,byte[],java.lang.String,byte[],byte[])>
<com.android.server.TelephonyRegistry: void notifyUserMobileDataStateChangedForPhoneId(int,int,boolean)>
<com.android.server.policy.WindowManagerPolicy.ScreenOnListener: void onScreenOn()>
<com.android.systemui.shared.system.PinnedStackListenerForwarder: void onDisplayInfoChanged(android.view.DisplayInfo)>
<com.android.settingslib.RestrictedLockUtils.EnforcedAdmin: com.android.settingslib.RestrictedLockUtils.EnforcedAdmin createDefaultEnforcedAdminWithRestriction(java.lang.String)>
<com.android.server.autofill.AutofillManagerService: void onServiceRemoved(com.android.server.autofill.AutofillManagerServiceImpl,int)>
<com.android.systemui.statusbar.CommandQueue: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean,boolean)>
<com.android.powermodel.PowerReport: double getTotalPowerMah()>
<com.android.server.pm.PackageManagerService: java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[],int,int)>
<com.android.systemui.statusbar.CommandQueue: void disable(int,int,int)>
<com.android.settingslib.bluetooth.HidProfile: int getHidClassDrawable(android.bluetooth.BluetoothClass)>
<android.content.pm.PackageManagerInternal: long getCeDataInode(java.lang.String,int)>
<com.android.systemui.RegionInterceptingFrameLayout: void <init>(android.content.Context)>
<com.android.systemui.bubbles.animation.ExpandedAnimationController: void expandFromStack(java.lang.Runnable)>
<com.android.settingslib.widget.RadioButtonPreference: void onClick()>
<com.android.location.provider.LocationRequestUnbundled: float getSmallestDisplacement()>
<com.android.systemui.ActivityIntentHelper: boolean wouldLaunchResolverActivity(android.content.pm.ResolveInfo,java.util.List)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector index(int)>
<com.android.carrierdefaultapp.CarrierDefaultBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.systemui.car.navigationbar.CarNavigationBarController: boolean setLeftWindowVisibility(int)>
<android.net.wifi.p2p.WifiP2pGroupList: boolean contains(int)>
<javax.obex.ObexHelper: byte[] computeMd5Hash(byte[])>
<com.android.server.accessibility.SystemActionPerformer: boolean performSystemAction(int)>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageResolver: void preloadImages(android.app.Notification)>
<com.android.systemui.tuner.TunerServiceImpl: void setValue(java.lang.String,int)>
<com.android.server.pm.PackageManagerService: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>
<android.net.wifi.WifiManager.MulticastLock: void setReferenceCounted(boolean)>
<com.android.systemui.doze.DozeScreenBrightness: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.pm.parsing.library.PackageBackwardCompatibility.RemoveUnnecessaryOrgApacheHttpLegacyLibrary: void updatePackage(com.android.server.pm.parsing.pkg.ParsedPackage,boolean)>
<com.android.systemui.pip.PipBoundsHandler: void onAspectRatioChanged(float)>
<com.android.systemui.statusbar.notification.row.NotificationInfo: android.view.View getContentView()>
<com.android.systemui.dagger.DependencyBinder: com.android.systemui.statusbar.policy.CastController provideCastController(com.android.systemui.statusbar.policy.CastControllerImpl)>
<android.net.wifi.rtt.RangingResult: int getRssi()>
<com.android.systemui.statusbar.phone.DemoStatusIcons: void updateMobileState(com.android.systemui.statusbar.phone.StatusBarSignalPolicy.MobileIconState)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void updateExpandedHeight(float)>
<com.android.systemui.egg.MLandActivity: void updateSplashPlayers()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb newInstance(android.content.Context)>
<com.android.systemui.car.navigationbar.CarNavigationBarController: void connectToHvac()>
<com.android.systemui.statusbar.phone.StatusBar: void onStatePreChange(int,int)>
<com.android.keyguard.NumPadKey: void <init>(android.content.Context)>
<com.android.gallery3d.exif.ExifInterface: java.lang.String getTagStringValue(int,int)>
<com.android.systemui.plugins.ClockPlugin: android.graphics.Bitmap getPreview(int,int)>
<com.android.systemui.qs.QSPanel: void onBrightnessMirrorReinflated(android.view.View)>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: void clear()>
<com.android.systemui.biometrics.AuthCredentialView.Callback: void onCredentialMatched(byte[])>
<com.android.role.persistence.RolesPersistence: void deleteForUser(android.os.UserHandle)>
<com.android.server.policy.PowerAction: void onPress()>
<com.android.systemui.util.sensors.AsyncSensorManager: boolean setOperationParameterImpl(android.hardware.SensorAdditionalInfo)>
<com.android.systemui.qs.QSPanel: void updateBrightnessMirror()>
<com.android.server.devicepolicy.DevicePolicyCacheImpl: boolean isScreenCaptureAllowed(int,boolean)>
<com.android.server.UserspaceRebootLogger: void noteUserspaceRebootWasRequested()>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void updateLeftAffordance()>
<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(android.net.Network)>
<com.android.settingslib.development.DeveloperOptionsPreferenceController: void onDeveloperOptionsSwitchDisabled()>
<com.android.systemui.bubbles.BubbleStackView.RelativeStackPosition: void <init>(android.graphics.PointF,android.graphics.RectF)>
<com.android.settingslib.notification.EnableZenModeDialog: android.service.notification.Condition getTimeUntilNextAlarmCondition()>
<com.android.server.testing.shadows.ShadowBackupDataInput: int getDataSize()>
<android.net.wifi.WifiInfo: double getSuccessfulTxPacketsPerSecond()>
<android.net.util.PrefixUtils: java.util.Set getNonForwardablePrefixes()>
<com.android.settingslib.bluetooth.CachedBluetoothDeviceManager: boolean onDeviceDisappeared(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.companiondevicemanager.DeviceChooserActivity: void setTitle(java.lang.CharSequence)>
<com.android.server.audio.AudioService: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void lockScrollTo(android.view.View)>
<com.android.server.usb.descriptors.Usb10ACHeader: void <init>(int,byte,byte,int,int)>
<com.android.server.NetworkManagementService: void removeInterfaceAlert(java.lang.String)>
<com.android.commands.uiautomator.DumpCommand: java.lang.String detailedOptions()>
<com.android.systemui.statusbar.notification.stack.AmbientState: void setSpeedBumpIndex(int)>
<com.android.server.accessibility.AccessibilityManagerService: boolean isAccessibilityButtonShown()>
<com.android.settingslib.wifi.AccessPoint: void startOsuProvisioning(android.net.wifi.WifiManager.ActionListener)>
<com.android.systemui.ExpandHelper.Callback: int getMaxExpandHeight(com.android.systemui.statusbar.notification.row.ExpandableView)>
<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.ApplicationInfo toAppInfoWithoutState()>
<com.android.server.biometrics.fingerprint.FingerprintConstants: java.lang.String tagHalDied()>
<com.android.server.AlarmManagerInternal: void removeAlarmsForUid(int)>
<com.android.server.pm.dex.PackageDexUsage.DexUseInfo: java.lang.String getClassLoaderContext()>
<com.android.startop.colorchanging.MainActivity: void goOrange(android.view.View)>
<com.android.powermodel.component.ModemAppActivity: void <init>(com.android.powermodel.AttributionKey)>
<com.android.systemui.statusbar.notification.collection.NotifPipeline: void addOnBeforeRenderListListener(com.android.systemui.statusbar.notification.collection.listbuilder.OnBeforeRenderListListener)>
<com.android.server.usb.descriptors.report.TextReportCanvas: void write(java.lang.String)>
<com.android.systemui.plugins.qs.DetailAdapter: android.content.Intent getSettingsIntent()>
<com.android.server.policy.PhoneWindowManager: void setCurrentUserLw(int)>
<com.android.systemui.statusbar.notification.logging.NotificationPanelLogger: void logPanelShown(boolean,java.util.List)>
<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: void releaseWakeLock()>
<com.android.systemui.statusbar.phone.StatusBarSignalPolicy.WifiIconState: com.android.systemui.statusbar.phone.StatusBarSignalPolicy.WifiIconState copy()>
<com.android.server.webkit.SystemInterface: long getFactoryPackageVersion(java.lang.String)>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: com.android.systemui.statusbar.policy.DataSaverController getDataSaverController()>
<com.android.server.locksettings.recoverablekeystore.WrappedKey: com.android.server.locksettings.recoverablekeystore.WrappedKey fromSecretKey(com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey,javax.crypto.SecretKey,byte[])>
<com.android.systemui.qs.tiles.UserDetailItemView: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.systemui.statusbar.notification.collection.coordinator.HideLocallyDismissedNotifsCoordinator: void attach(com.android.systemui.statusbar.notification.collection.NotifPipeline)>
<com.android.systemui.statusbar.phone.NotificationShadeWindowController: void setBackdropShowing(boolean)>
<com.android.server.tv.tunerresourcemanager.TunerResourceBasic.Builder: com.android.server.tv.tunerresourcemanager.TunerResourceBasic build()>
<android.net.IpMemoryStore: android.net.networkstack.ModuleNetworkStackClient getModuleNetworkStackClient(android.content.Context)>
<com.android.gallery3d.glrenderer.GLCanvas: boolean unloadTexture(com.android.gallery3d.glrenderer.BasicTexture)>
<com.android.server.usb.UsbService: boolean hasDevicePermission(android.hardware.usb.UsbDevice,java.lang.String)>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin.MenuItem: java.lang.String getContentDescription()>
<com.android.systemui.statusbar.policy.CallbackHandler: void setIsAirplaneMode(com.android.systemui.statusbar.policy.NetworkController.IconState)>
<com.android.systemui.qs.tileimpl.QSTileImpl: void setTileSpec(java.lang.String)>
<com.android.server.pm.permission.PermissionManagerService: void revokeDefaultPermissionsFromDisabledTelephonyDataServices(java.lang.String[],int)>
<android.net.wifi.aware.WifiAwareSession: void publish(android.net.wifi.aware.PublishConfig,android.net.wifi.aware.DiscoverySessionCallback,android.os.Handler)>
<com.android.systemui.power.PowerNotificationWarnings: void updateLowBatteryWarning()>
<com.android.keyguard.clock.ClockOptionsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<com.android.systemui.recents.RecentsOnboarding: void <init>(android.content.Context,com.android.systemui.recents.OverviewProxyService)>
<com.android.keyguard.KeyguardPINView: int getWrongPasswordStringId()>
<com.android.server.policy.WindowManagerPolicy.WindowState: void computeFrameLw()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow: boolean isSoundEffectsEnabled()>
<javax.obex.ObexHelper: int findHeaderEnd(byte[],int,int)>
<com.android.settingslib.bluetooth.HeadsetProfile: boolean isProfileReady()>
<com.android.server.policy.keyguard.KeyguardServiceWrapper: void onBootCompleted()>
<com.android.printspooler.ui.PrintActivity: void onSaveInstanceState(android.os.Bundle)>
<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getLibraryNames()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: float setPulseHeight(float)>
<com.android.systemui.car.statusbar.DozeServiceHost: void onIgnoreTouchWhilePulsing(boolean)>
<com.android.commands.hid.Event: java.lang.String toString()>
<com.android.server.slice.SlicePermissionManager: java.lang.String[] getAllPackagesGranted(java.lang.String)>
<com.android.systemui.doze.DozeLog: void traceProximityResult(boolean,long,int)>
<com.android.systemui.qs.external.TileServices: boolean isLocked()>
<com.android.server.usb.descriptors.UsbVCProcessingUnit: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.systemui.statusbar.notification.VisualStabilityManager: void temporarilyAllowReordering()>
<com.android.systemui.qs.QSFragment: void setHeaderListening(boolean)>
<com.android.systemui.statusbar.NavigationBarController: void transitionTo(int,int,boolean)>
<com.android.server.pm.PackageSetting: java.lang.String toString()>
<com.android.systemui.car.window.OverlayPanelViewController: void onScroll(int)>
<com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProviderImpl: void <init>(android.content.ContentResolver,android.os.PowerManager,android.service.dreams.IDreamManager,android.hardware.display.AmbientDisplayConfiguration,com.android.systemui.statusbar.notification.NotificationFilter,com.android.systemui.statusbar.policy.BatteryController,com.android.systemui.plugins.statusbar.StatusBarStateController,com.android.systemui.statusbar.policy.HeadsUpManager,android.os.Handler)>
<com.android.server.slice.PinnedSliceState: boolean isListening()>
<android.net.NetworkStackClient: void makeIpClient(java.lang.String,android.net.ip.IIpClientCallbacks)>
<android.text.StaticLayoutMultithreadPerfTest: void testCreate_RandomText_Thread_1()>
<com.android.systemui.bubbles.BubbleExpandedView: void onFinishInflate()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void updateClipping()>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: com.android.systemui.statusbar.notification.row.NotificationGuts getGuts()>
<com.android.server.accessibility.AutoclickController: void onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void onDeviceDeleted(com.android.settingslib.bluetooth.CachedBluetoothDevice)>
<com.android.systemui.shared.system.PackageManagerWrapper: android.content.ComponentName getHomeActivities(java.util.List)>
<com.android.server.usb.UsbDeviceManager: void onAwakeStateChanged(boolean)>
<android.net.wifi.WifiInfo: void setLinkSpeed(int)>
<com.android.soundpicker.RingtonePickerActivity: void onCreate(android.os.Bundle)>
<com.android.systemui.keyguard.KeyguardService: void onCreate()>
<com.android.server.soundtrigger_middleware.ISoundTriggerHw2: android.hardware.soundtrigger.V2_3.Properties getProperties()>
<com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.systemui.statusbar.notification.row.NotifInflationErrorManager.NotifInflationErrorListener: void onNotifInflationError(com.android.systemui.statusbar.notification.collection.NotificationEntry,java.lang.Exception)>
<com.android.keyguard.KeyguardSecurityView: void showUsabilityHint()>
<com.android.dynsystem.VerificationActivity: void onActivityResult(int,int,android.content.Intent)>
<com.android.systemui.statusbar.notification.row.HybridNotificationView: void onFinishInflate()>
<com.android.systemui.statusbar.CastDrawable: void applyTheme(android.content.res.Resources.Theme)>
<com.android.systemui.classifier.LengthCountEvaluator: float evaluate(float)>
<com.android.server.usb.UsbAlsaDevice: boolean isInputHeadset()>
<com.android.server.AppStateTracker: void setPowerSaveWhitelistAppIds(int[],int[],int[])>
<com.android.systemui.qs.tiles.RotationLockTile: void handleUpdateState(com.android.systemui.plugins.qs.QSTile.BooleanState,java.lang.Object)>
<com.android.commands.sm.Sm: void runIdleMaint()>
<com.android.server.RescueParty: void onSettingsProviderPublished(android.content.Context)>
<com.android.server.pm.LauncherAppsService: void onStart()>
<com.android.server.pm.PackageManagerService: int[] getPermissionGidsLocked(java.lang.String,int)>
<com.android.systemui.statusbar.policy.RotationLockController: int getRotationLockOrientation()>
<com.android.server.IpSecService.IResource: void invalidate()>
<android.net.wifi.SoftApConfiguration.Builder: android.net.wifi.SoftApConfiguration.Builder setShutdownTimeoutMillis(long)>
<com.android.settingslib.net.DataUsageController: void setSubscriptionId(int)>
<com.android.systemui.statusbar.policy.NextAlarmControllerImpl: void addCallback(com.android.systemui.statusbar.policy.NextAlarmController.NextAlarmChangeCallback)>
<com.android.systemui.shared.system.MetricsLoggerCompat: void visibility(int,boolean)>
<com.android.server.hdmi.HdmiControlService: void setAndBroadcastActiveSource(int,int,int)>
<com.android.settingslib.net.NetworkCycleDataLoader: com.android.settingslib.net.NetworkCycleDataLoader.Builder builder(android.content.Context)>
<com.android.systemui.classifier.brightline.TimeLimitedMotionEventBuffer: int hashCode()>
<com.android.systemui.statusbar.notification.row.NotifInflationErrorManager: void setInflationError(com.android.systemui.statusbar.notification.collection.NotificationEntry,java.lang.Exception)>
<com.android.systemui.statusbar.notification.icon.IconPack: com.android.systemui.statusbar.StatusBarIconView getCenteredIcon()>
<android.net.wifi.WifiEnterpriseConfig: int getEapMethod()>
<com.android.server.usb.descriptors.report.TextReportCanvas: void openList()>
<com.android.keyguard.KeyguardClockSwitch: void setTextSize(int,float)>
<com.android.systemui.statusbar.phone.KeyguardAffordanceHelper.Callback: void onAnimationToSideStarted(boolean,float,float)>
<com.android.systemui.wm.DisplayChangeController.OnDisplayChangingListener: void onRotateDisplay(int,int,int,android.window.WindowContainerTransaction)>
<com.android.settingslib.bluetooth.PbapClientProfile: int getDrawableResource(android.bluetooth.BluetoothClass)>
<com.android.settingslib.wifi.AccessPoint: java.lang.String getSavedNetworkSummary()>
<javax.microedition.khronos.opengles.GL11: void glTexParameteriv(int,int,java.nio.IntBuffer)>
<com.android.server.timezonedetector.TimeZoneDetectorService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.uiautomator.core.Configurator: com.android.uiautomator.core.Configurator getInstance()>
<com.android.systemui.statusbar.notification.stack.ViewState: void initFrom(android.view.View)>
<com.android.systemui.statusbar.phone.UserAvatarView: void setActivated(boolean)>
<com.android.systemui.statusbar.notification.row.NotificationContentInflater.AsyncInflationTask: com.android.systemui.statusbar.notification.row.NotificationContentInflater.InflationProgress doInBackground(java.lang.Void[])>
<com.android.systemui.qs.QSHost: com.android.internal.logging.InstanceId getNewInstanceId()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void onChildAnimationFinished()>
<com.android.gallery3d.glrenderer.UploadedTexture: boolean uploadLimitReached()>
<android.net.wifi.ScanResult: boolean is5GHz(int)>
<com.android.server.textclassifier.TextClassificationManagerService: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
<com.android.systemui.qs.GlobalSetting: void onChange(boolean)>
<com.android.server.biometrics.iris.IrisService: void updateActiveGroup(int,java.lang.String)>
<com.android.settingslib.RestrictedPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.android.systemui.statusbar.notification.row.ExpandableOutlineView: android.graphics.Path getCustomClipPath(android.view.View)>
<com.android.systemui.statusbar.notification.row.NotificationInfo: boolean post(java.lang.Runnable)>
<com.android.server.accounts.AccountManagerService: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes(int)>
<com.android.systemui.statusbar.policy.ScrollAdapter: boolean isScrolledToTop()>
<com.android.systemui.qs.tiles.UserDetailView: void createAndSetAdapter(com.android.systemui.statusbar.policy.UserSwitcherController,com.android.internal.logging.UiEventLogger)>
<com.android.server.pm.AbstractStatsBase: android.util.AtomicFile getFile()>
<com.android.systemui.statusbar.policy.DeviceProvisionedController: boolean isCurrentUserSetup()>
<android.net.wifi.rtt.ResponderConfig: void writeToParcel(android.os.Parcel,int)>
<com.android.server.audio.PlaybackActivityMonitor: void dump(java.io.PrintWriter)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setShouldShowShelfOnly(boolean)>
<com.android.server.usb.descriptors.UsbEndpointDescriptor: int getEndpointAddress()>
<com.android.systemui.util.leak.WeakIdentityHashMap: void put(java.lang.Object,java.lang.Object)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: void setHeaderVisibleAmount(float)>
<com.android.uiautomator.core.UiObject: boolean dragTo(int,int,int)>
<com.android.packageinstaller.wear.WearPackageArgs: boolean checkPerms(android.os.Bundle)>
<com.android.server.pm.permission.BasePermission: boolean isDocumenter()>
<com.android.server.pm.KeySetManagerService: boolean packageIsSignedByLPr(java.lang.String,com.android.server.pm.KeySetHandle)>
<com.android.systemui.qs.tiles.BluetoothTile: void handleSecondaryClick()>
<com.android.systemui.bubbles.animation.StackAnimationController: void setImeHeight(int)>
<javax.microedition.khronos.egl.EGL10: java.lang.String eglQueryString(javax.microedition.khronos.egl.EGLDisplay,int)>
<com.android.providers.settings.SettingsProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<android.graphics.perftests.PaintHasGlyphPerfTest: void testHasGlyph()>
<android.net.wifi.WifiManager: boolean is5GHzBandSupported()>
<com.android.systemui.statusbar.phone.PanelBar: float getExpansionFraction()>
<com.android.server.ExtconUEventObserver.ExtconInfo: java.lang.String getDevicePath()>
<com.android.systemui.plugins.NotificationListenerController: void onListenerConnected(com.android.systemui.plugins.NotificationListenerController.NotificationProvider)>
<android.os.IIdmap2: java.lang.String createIdmap(java.lang.String,java.lang.String,int,boolean,int)>
<com.android.server.textclassifier.FixedSizeQueue.OnEntryEvictedListener: void onEntryEvicted(java.lang.Object)>
<com.android.systemui.statusbar.policy.DeadZone: void <init>(com.android.systemui.statusbar.phone.NavigationBarView)>
<com.android.systemui.statusbar.CommandQueue: void hideToast(java.lang.String,android.os.IBinder)>
<com.android.settingslib.core.lifecycle.Lifecycle: void addObserver(androidx.lifecycle.LifecycleObserver)>
<com.android.systemui.statusbar.notification.row.NotificationInlineImageResolver.ImageCache: void setImageResolver(com.android.systemui.statusbar.notification.row.NotificationInlineImageResolver)>
<com.android.systemui.power.PowerUI.WarningsUI: void dismissLowBatteryWarning()>
<com.android.server.display.VirtualDisplayAdapter: void resizeVirtualDisplayLocked(android.os.IBinder,int,int,int)>
<com.android.settingslib.graph.BatteryMeterDrawableBase: float getAspectRatio()>
<com.android.systemui.statusbar.phone.BarTransitions.BarBackgroundDrawable: void applyModeBackground(int,int,boolean)>
<com.android.systemui.statusbar.policy.ExtensionControllerImpl.Producer: java.lang.Object get()>
<com.android.server.pm.CrossProfileAppsServiceImplRoboTest: void initializeMocks()>
<com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>
<com.android.systemui.statusbar.notification.row.NotificationRowModule: com.android.systemui.statusbar.notification.row.NotifRemoteViewCache provideNotifRemoteViewCache(com.android.systemui.statusbar.notification.row.NotifRemoteViewCacheImpl)>
<com.android.commands.bu.AdbBackupTest: void setUp()>
<com.android.systemui.statusbar.policy.BrightnessMirrorController.BrightnessMirrorListener: void onBrightnessMirrorReinflated(android.view.View)>
<com.android.systemui.qs.QSPanel.QSTileLayout: int getOffsetTop(com.android.systemui.qs.QSPanel.TileRecord)>
<com.android.settingslib.wifi.AccessPoint: boolean isOpenNetwork()>
<com.android.server.pm.Settings.VersionInfo: void forceCurrent()>
<com.android.server.signedconfig.SignedConfig.PerSdkConfig: void <init>(int,int,java.util.Map)>
<com.android.externalstorage.ExternalStorageProvider: android.database.Cursor queryChildDocumentsForManage(java.lang.String,java.lang.String[],java.lang.String)>
<com.android.server.TelephonyRegistry: void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)>
<com.android.systemui.bubbles.animation.StackAnimationController: void setStackPosition(android.graphics.PointF)>
<android.app.usage.UsageStatsManagerInternal: long getTimeSinceLastJobRun(java.lang.String,int)>
<com.android.systemui.qs.QSFooterImpl: void onRtlPropertiesChanged(int)>
<com.android.server.people.data.ConversationInfo: boolean isShortcutCachedForNotification()>
<com.android.keyguard.KeyguardUpdateMonitor: void onFingerprintAuthenticated(int,boolean)>
<com.android.systemui.qs.QSPanel: com.android.systemui.media.MediaHost getMediaHost()>
<com.android.server.timezone.ConfigHelper: java.lang.String getDataAppPackageName()>
<com.android.keyguard.ViewMediatorCallback: void playTrustedSound()>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getCrossProfilePackages(android.content.ComponentName)>
<com.android.systemui.shared.system.BlurUtils: boolean supportsBlursOnWindows()>
<com.android.systemui.globalactions.GlobalActionsDialog: void startPendingIntentDismissingKeyguard(android.app.PendingIntent)>
<com.android.systemui.statusbar.phone.KeyguardBouncer: void showWithDismissAction(com.android.systemui.plugins.ActivityStarter.OnDismissAction,java.lang.Runnable)>
<com.android.systemui.DejankUtils: void startDetectingBlockingIpcs(java.lang.String)>
<com.android.server.vr.VrManagerInternal: void setPersistentVrModeEnabled(boolean)>
<javax.obex.ClientSession: javax.obex.HeaderSet setPath(javax.obex.HeaderSet,boolean,boolean)>
<com.android.systemui.statusbar.phone.StatusBarIconController: void setIconAccessibilityLiveRegion(java.lang.String,int)>
<android.net.wifi.hotspot2.omadm.XMLNode: void addText(java.lang.String)>
<com.android.systemui.volume.VolumeDialogControllerImpl: com.android.settingslib.volume.MediaSessions createMediaSessions(android.content.Context,android.os.Looper,com.android.settingslib.volume.MediaSessions.Callbacks)>
<com.android.server.pm.UserManagerService: boolean isQuietModeEnabled(int)>
<com.android.systemui.qs.customize.QSCustomizer: void show(int,int)>
<com.android.server.people.data.DataManager: java.util.Map queryAppUsageStats(int,long,long,java.util.Set)>
<com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator: com.android.systemui.bubbles.animation.PhysicsAnimationLayout.PhysicsPropertyAnimator withStartDelay(long)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void onThemeChanged()>
<android.net.wifi.p2p.WifiP2pWfdInfo: int describeContents()>
<com.android.settingslib.utils.IconCache: void <init>(android.content.Context)>
<com.android.systemui.ForegroundServicesDialog: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>
<com.android.systemui.qs.tiles.BluetoothTile: com.android.systemui.plugins.qs.DetailAdapter createDetailAdapter()>
<com.android.server.textservices.TextServicesManagerInternal: com.android.server.textservices.TextServicesManagerInternal get()>
<com.android.server.firewall.IntentFirewall: boolean checkService(android.content.ComponentName,android.content.Intent,int,int,java.lang.String,android.content.pm.ApplicationInfo)>
<com.android.systemui.classifier.Stroke: float getDurationSeconds()>
<com.android.systemui.shared.system.SurfaceViewRequestUtils: android.view.SurfaceControl getSurfaceControl(android.os.Bundle)>
<com.android.commands.am.Am: void main(java.lang.String[])>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedAccessibilityServices(android.content.ComponentName)>
<com.android.keyguard.KeyguardUpdateMonitor: void sendKeyguardBouncerChanged(boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String)>
<com.android.systemui.log.dagger.LogModule: com.android.systemui.log.LogcatEchoTracker provideLogcatEchoTracker(android.content.ContentResolver,android.os.Looper)>
<com.android.systemui.globalactions.GlobalActionsDialog.Action: java.lang.CharSequence getLabelForAccessibility(android.content.Context)>
<com.android.server.usb.UsbService: android.hardware.usb.UsbPortStatus getPortStatus(java.lang.String)>
<com.android.permission.persistence.IoUtils: void closeQuietly(java.lang.AutoCloseable)>
<com.android.gallery3d.glrenderer.GLES20Canvas: void endRenderTarget()>
<com.android.server.inputmethod.InputMethodManagerInternal: void removeImeSurface()>
<com.android.server.pm.PackageManagerService: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>
<com.android.server.ConnectivityService: android.net.NetworkState[] getAllNetworkState()>
<com.android.systemui.dagger.ContextComponentHelper: android.app.Activity resolveActivity(java.lang.String)>
<com.android.packageinstaller.television.UninstallAppProgressFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.android.systemui.statusbar.phone.EdgeBackGestureHandler: boolean isHandlingGestures()>
<com.android.server.policy.PhoneWindowManager: void screenTurningOn(com.android.server.policy.WindowManagerPolicy.ScreenOnListener)>
<com.android.systemui.bubbles.BubbleExpandedView: void setPointerPosition(float)>
<com.android.keyguard.clock.AnalogClockController: void onTimeZoneChanged(java.util.TimeZone)>
<android.net.wifi.WifiNetworkSuggestion.Builder: android.net.wifi.WifiNetworkSuggestion.Builder setBssid(android.net.MacAddress)>
<com.android.systemui.statusbar.EmptyShadeView: int getTextResource()>
<com.android.systemui.DessertCaseView.RescalingContainer: float getDarkness()>
<com.android.systemui.statusbar.CommandQueue.Callbacks: void showPinningEnterExitToast(boolean)>
<com.android.systemui.statusbar.phone.NavigationHandle: void abortCurrentGesture()>
<com.android.systemui.plugins.statusbar.NotificationMenuRowPlugin: java.util.ArrayList getMenuItems(android.content.Context)>
<com.android.systemui.TransactionPool: android.view.SurfaceControl.Transaction acquire()>
<com.android.server.usb.descriptors.UsbDescriptor: byte[] getRawData()>
<com.android.gallery3d.exif.ExifTag: int getIfd()>
<com.android.uiautomator.core.UiScrollable: com.android.uiautomator.core.UiScrollable setAsVerticalList()>
<com.android.systemui.statusbar.policy.NetworkController.SignalCallback: void setWifiIndicators(boolean,com.android.systemui.statusbar.policy.NetworkController.IconState,com.android.systemui.statusbar.policy.NetworkController.IconState,boolean,boolean,java.lang.String,boolean,java.lang.String)>
<com.android.systemui.statusbar.policy.SensorPrivacyControllerImpl: void addCallback(android.hardware.SensorPrivacyManager.OnSensorPrivacyChangedListener)>
<com.android.systemui.statusbar.notification.stack.SwipeableView: boolean isRemoved()>
<com.android.systemui.BatteryMeterView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.settingslib.wifi.AccessPoint: boolean isMetered()>
<com.android.server.policy.WindowManagerPolicy.OnKeyguardExitResult: void onKeyguardExitResult(boolean)>
<com.android.systemui.util.concurrency.DelayableExecutor: java.lang.Runnable executeAtTime(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
<com.android.server.audio.AudioService: void setBluetoothA2dpOn(boolean)>
<android.media.Session2Command: void writeToParcel(android.os.Parcel,int)>
<com.android.settingslib.volume.Util: java.lang.String logTag(java.lang.Class)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: int getBluetoothState()>
<com.android.systemui.car.userswitcher.UserGridRecyclerView.UserAdapter: void <init>(android.content.Context,java.util.List)>
<com.android.server.biometrics.BiometricServiceBase: void handleUserSwitching(int)>
<com.android.systemui.statusbar.SysuiStatusBarStateController: void setKeyguardRequested(boolean)>
<com.android.server.appop.AppOpsService: void <init>(java.io.File,android.os.Handler,android.content.Context)>
<com.android.server.pm.permission.PermissionsState.PermissionState: boolean isDefault()>
<com.android.server.policy.WindowManagerPolicy: boolean inKeyguardRestrictedKeyInputMode()>
<com.android.server.usb.descriptors.Usb20ASFormatIIEx: void <init>(int,byte,byte,byte,byte)>
<android.app.backup.ForwardingBackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long)>
<com.android.dynsystem.SparseInputStream: int read()>
<com.android.systemui.bubbles.BubbleLoggerImpl: void logOverflowAdd(com.android.systemui.bubbles.Bubble,int)>
<com.android.settingslib.media.MediaDevice: android.graphics.drawable.Drawable getIconWithoutBackground()>
<com.android.keyguard.KeyguardPasswordView: void onPause()>
<com.android.systemui.statusbar.phone.NavigationBarEdgePanel: void setBackCallback(com.android.systemui.plugins.NavigationEdgeBackPlugin.BackCallback)>
<com.android.keyguard.KeyguardUpdateMonitor: int getSimState(int)>
<android.media.MediaSession2.SessionCallback: void onPostConnect(android.media.MediaSession2,android.media.MediaSession2.ControllerInfo)>
<com.android.networkstack.tethering.OffloadHardwareInterface: boolean setUpstreamParameters(java.lang.String,java.lang.String,java.lang.String,java.util.ArrayList)>
<com.android.server.accessibility.gestures.GestureManifold.Listener: boolean onDoubleTap(android.view.MotionEvent,android.view.MotionEvent,int)>
<com.android.systemui.tuner.TunerActivity: boolean onPreferenceStartFragment(androidx.preference.PreferenceFragment,androidx.preference.Preference)>
<com.android.server.pm.PackageManagerService: byte[] getIntentFilterVerificationBackup(int)>
<android.net.wifi.p2p.IWifiP2pManager: void checkConfigureWifiDisplayPermission()>
<com.android.systemui.keyguard.KeyguardViewMediator: void onFinishedGoingToSleep(int,boolean)>
<com.android.gallery3d.glrenderer.GLCanvas: void dumpStatisticsAndClear()>
<com.android.systemui.statusbar.phone.NavigationBarFragment: boolean isNavBarWindowVisible()>
<com.android.server.pm.ShortcutBitmapSaver: void <init>(com.android.server.pm.ShortcutService)>
<com.android.settingslib.drawer.SwitchController.MetaData: com.android.settingslib.drawer.SwitchController.MetaData setTitle(java.lang.String)>
<com.android.server.GestureLauncherService: boolean isCameraDoubleTapPowerSettingEnabled(android.content.Context,int)>
<com.android.systemui.fragments.FragmentService.FragmentCreator: com.android.systemui.statusbar.phone.NavigationBarFragment createNavigationBarFragment()>
<com.android.server.devicepolicy.DevicePolicyManagerService: void reportKeyguardDismissed(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void setQsContainer(android.view.ViewGroup)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGeni(int,int,int)>
<com.android.systemui.statusbar.AlphaOptimizedTextView: void <init>(android.content.Context)>
<com.android.settingslib.wifi.AccessPoint: void <init>(android.content.Context,android.net.wifi.hotspot2.PasspointConfiguration)>
<com.android.systemui.statusbar.notification.stack.NotificationListItem: com.android.systemui.statusbar.notification.collection.NotificationEntry getEntry()>
<com.android.systemui.statusbar.notification.NotificationEntryManager: void updateNotifications(java.lang.String)>
<com.android.systemui.statusbar.CommandQueue: void dismissInattentiveSleepWarning(boolean)>
<com.android.systemui.qs.tileimpl.QSTileImpl.AnimationIcon: void <init>(int,int)>
<com.android.systemui.statusbar.phone.SystemUIDialog: void setNeutralButton(int,com.android.systemui.statusbar.phone.NotificationPanelViewController.OnClickListener)>
<com.android.systemui.shared.system.ConfigurationCompat: int getWindowConfigurationRotation(android.content.res.Configuration)>
<com.android.systemui.util.SysuiLifecycle: androidx.lifecycle.LifecycleOwner viewAttachLifecycle(android.view.View)>
<com.android.server.PackageWatchdog.PackageHealthObserver: boolean execute(android.content.pm.VersionedPackage,int)>
<com.android.server.DeviceIdleController: boolean isPowerSaveWhitelistExceptIdleAppInternal(java.lang.String)>
<com.android.server.PruneInstantAppsJobService: void schedule(android.content.Context)>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: boolean equals(java.lang.Object)>
<com.android.settingslib.bluetooth.MapProfile: int getOrdinal()>
<com.android.settingslib.widget.BarViewInfo: void setClickListener(android.view.View.OnClickListener)>
<com.android.systemui.statusbar.policy.HeadsUpManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<javax.microedition.khronos.opengles.GL10: void glClearColorx(int,int,int,int)>
<com.android.systemui.pip.PipTaskOrganizer: void scheduleFinishResizePip(android.graphics.Rect,java.util.function.Consumer)>
<android.multiuser.UserLifecycleTests: void managedProfileUnlock()>
<com.android.gallery3d.glrenderer.BasicTexture: void yield()>
<com.android.settingslib.widget.ActionButtonsPreference: com.android.settingslib.widget.ActionButtonsPreference setButton4Icon(int)>
<com.android.settingslib.media.InfoMediaManager: int getSessionVolume()>
<com.android.server.usb.descriptors.UsbInterfaceDescriptor: int getProtocol()>
<com.android.systemui.statusbar.notification.logging.NotificationLogger: void onExpansionChanged(java.lang.String,boolean,boolean)>
<com.android.server.soundtrigger.SoundTriggerService: void onStartUser(int)>
<com.android.systemui.statusbar.policy.HeadsUpManager: void snooze()>
<com.android.server.accessibility.AbstractAccessibilityServiceConnection.SystemSupport: boolean isAccessibilityButtonShown()>
<com.android.settingslib.core.lifecycle.ObservableFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
<com.android.systemui.statusbar.phone.NotificationIconContainer: void showIconIsolated(com.android.systemui.statusbar.StatusBarIconView,boolean)>
<com.android.systemui.pip.tv.PipControlButtonView: void setText(java.lang.CharSequence)>
<com.android.server.IpSecService: void deleteTransform(int)>
<com.android.settingslib.searchprovider.SettingsXmlIndexProvider: boolean onCreate()>
<com.android.server.biometrics.AuthenticationClient: boolean isCryptoOperation()>
<com.android.photos.DumbBitmapRegionDecoder: int getHeight()>
<android.os.BinderCallsStatsPerfTest: void tearDown()>
<com.android.server.pm.dex.PackageDexUsage.PackageUseInfo: boolean isUsedByOtherApps(java.lang.String)>
<android.net.dhcp.DhcpServingParamsParcelExt: android.net.dhcp.DhcpServingParamsParcelExt setDhcpLeaseTimeSecs(long)>
<com.android.server.usb.descriptors.report.HTMLReportCanvas: void write(java.lang.String)>
<com.android.settingslib.location.SettingsInjector.ServiceSettingClickedListener: void <init>(com.android.settingslib.location.InjectedSetting)>
<com.android.settingslib.bluetooth.CachedBluetoothDeviceManager: void clearNonBondedDevices()>
<com.android.systemui.util.NotificationChannels: void <init>(android.content.Context)>
<com.android.systemui.statusbar.policy.SignalController: boolean isDirty()>
<android.net.wifi.p2p.WifiP2pManager: void addLocalService(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager.ActionListener)>
<com.android.server.appbinding.AppBindingService.Lifecycle: void onStopUser(int)>
<com.android.server.accessibility.gestures.GestureUtils: int getActionIndex(android.view.MotionEvent)>
<com.android.server.pm.PreferredComponent: void dump(java.io.PrintWriter,java.lang.String,java.lang.Object)>
<com.android.systemui.classifier.Point: float crossProduct(com.android.systemui.classifier.Point,com.android.systemui.classifier.Point)>
<javax.microedition.khronos.opengles.GL11: void glGetMaterialfv(int,int,float[],int)>
<com.android.systemui.statusbar.RemoteInputController: void requestDisallowLongPressAndDismiss()>
<com.android.systemui.statusbar.notification.stack.AmbientState: java.util.ArrayList getDraggedViews()>
<com.android.systemui.keyguard.WakefulnessLifecycle: void dispatchStartedGoingToSleep()>
<com.google.android.startop.iorap.AppLaunchEvent.ActivityLaunched: void writeToParcelImpl(android.os.Parcel,int)>
<com.android.printservice.recommendation.plugin.samsung.SamsungRecommendationPlugin: void start(com.android.printservice.recommendation.PrintServicePlugin.PrinterDiscoveryCallback)>
<com.android.providers.settings.DeviceConfigService: void <init>(com.android.providers.settings.SettingsProvider)>
<android.net.wifi.aware.PublishConfig.Builder: android.net.wifi.aware.PublishConfig.Builder setRangingEnabled(boolean)>
<com.android.systemui.statusbar.phone.NavigationBarInflaterView: void inflateLayout(java.lang.String)>
<com.android.systemui.keyguard.DismissCallbackRegistry: void <init>(java.util.concurrent.Executor)>
<com.android.systemui.biometrics.AuthController: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.biometrics.face.FaceConstants: java.lang.String logTag()>
<com.android.wallpapercropper.CropView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.statusbar.phone.NotificationGroupManager.OnGroupChangeListener: void onGroupRemoved(com.android.systemui.statusbar.phone.NotificationGroupManager.NotificationGroup,java.lang.String)>
<com.android.printspooler.widget.CustomErrorEditText: void <init>(android.content.Context,android.util.AttributeSet)>
<android.net.wifi.WifiUsabilityStatsEntry: long getTotalRadioTxTimeMillis()>
<com.android.networkstack.tethering.TetheringDependencies: com.android.networkstack.tethering.BpfCoordinator getBpfCoordinator(com.android.networkstack.tethering.BpfCoordinator.Dependencies)>
<com.android.server.pm.permission.PermissionManagerServiceInternal.DefaultHomeProvider: java.lang.String getDefaultHome(int)>
<android.perftests.utils.PerfStatusReporter: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>
<com.android.systemui.statusbar.policy.HotspotController: boolean isHotspotEnabled()>
<com.android.systemui.assist.AssistOrbView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.systemui.shared.recents.model.Task.TaskKey: int describeContents()>
<com.android.keyguard.KeyguardUpdateMonitor: boolean isSimPinSecure(int)>
<com.android.systemui.statusbar.notification.row.NotificationMenuRow.NotificationMenuItem: android.view.View getGutsView()>
<com.android.systemui.car.notification.NotificationPanelViewMediator: void onConfigChanged(android.content.res.Configuration)>
<com.android.keyguard.ViewMediatorCallback: void onCancelClicked()>
<android.view.ViewShowHidePerfTest: void testRecordAfterAdd()>
<com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] thmEncryptRecoveryKey(java.security.PublicKey,byte[],byte[],javax.crypto.SecretKey)>
<com.android.future.usb.UsbManager: com.android.future.usb.UsbManager getInstance(android.content.Context)>
<com.android.systemui.bubbles.BubbleController: void hideCurrentInputMethod()>
<com.android.systemui.statusbar.phone.StatusBarIconController: void setIcon(java.lang.String,com.android.internal.statusbar.StatusBarIcon)>
<com.android.server.media.MediaRoute2Provider.Callback: void onSessionUpdated(com.android.server.media.MediaRoute2Provider,android.media.RoutingSessionInfo)>
<com.android.systemui.egg.MLandActivity: void onPause()>
<com.android.systemui.globalactions.GlobalActionsGridLayout: com.android.systemui.globalactions.ListGridLayout getListView()>
<com.android.server.tv.tunerresourcemanager.ClientProfile: int getGroupId()>
<com.android.server.input.InputManagerService: boolean transferTouchFocus(android.view.InputChannel,android.view.InputChannel)>
<android.view.textclassifier.TextClassificationManagerPerfTest: void testGetTextClassifier_systemTextClassifierDisabled()>
<com.android.systemui.statusbar.phone.NavigationHandle: void setDelayTouchFeedback(boolean)>
<com.android.server.pm.Installer: void onPrivateVolumeRemoved(java.lang.String)>
<com.android.systemui.statusbar.phone.PanelViewController: boolean isTrackingBlocked()>
<com.android.server.statusbar.StatusBarManagerService: void showInattentiveSleepWarning()>
<com.android.server.pm.parsing.pkg.PkgAppInfo: boolean isLargeHeap()>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationViewWrapper: boolean shouldClearBackgroundOnReapply()>
<com.android.gallery3d.common.Utils: java.lang.String maskDebugInfo(java.lang.Object)>
<com.android.systemui.car.window.OverlayPanelViewController.SystemBarCloseGestureListener: boolean onSingleTapUp(android.view.MotionEvent)>
<com.android.systemui.statusbar.GestureRecorder.Gesture.MotionEventRecord: void <init>(long,android.view.MotionEvent)>
<com.android.keyguard.KeyguardSecurityContainer: java.lang.CharSequence getTitle()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: int getFirstItemMinHeight()>
<android.os.UserManagerInternal: boolean hasUserRestriction(java.lang.String,int)>
<com.android.server.audio.AudioService: void setMultiAudioFocusEnabled(boolean)>
<com.android.systemui.statusbar.policy.RemoteInputView.RemoteEditText: boolean requestRectangleOnScreen(android.graphics.Rect)>
<com.android.systemui.qs.external.TileLifecycleManager: void setTileAdded(android.content.Context,android.content.ComponentName,boolean)>
<android.net.wifi.RttManager.ParcelableRttResults: void writeToParcel(android.os.Parcel,int)>
<com.android.server.timezone.ConfigHelper: int getFailedCheckRetryCount()>
<com.android.settingslib.core.lifecycle.events.OnPrepareOptionsMenu: void onPrepareOptionsMenu(android.view.Menu)>
<com.android.systemui.statusbar.phone.NotificationPanelViewController: void fling(float,boolean)>
<com.android.server.IpSecService: void closeUdpEncapsulationSocket(int)>
<lockedregioncodeinjection.LockTarget: java.lang.String getPost()>
<android.net.wifi.rtt.ResponderConfig: boolean isValid(boolean)>
<android.multiuser.BenchmarkResults: android.os.Bundle getStatsToReport()>
<android.net.wifi.aware.WifiAwareNetworkSpecifier: boolean isOutOfBand()>
<android.os.UserManagerInternal: android.os.Bundle getBaseUserRestrictions(int)>
<com.android.systemui.doze.DozeHost: void prepareForGentleSleep(java.lang.Runnable)>
<com.android.systemui.statusbar.notification.row.dagger.NotificationRowComponent: com.android.systemui.statusbar.notification.row.ActivatableNotificationViewController getActivatableNotificationViewController()>
<com.android.server.AttributeCache: com.android.server.AttributeCache instance()>
<com.android.gallery3d.exif.ExifTag: byte getValueAsByte(byte)>
<com.android.server.NativeDaemonEvent: boolean isClassServerError()>
<com.android.server.pm.PackageManagerService.Injector: com.android.server.pm.PackageAbiHelper getAbiHelper()>
<com.android.server.PackageWatchdog.PackageHealthObserver: int onHealthCheckFailed(android.content.pm.VersionedPackage,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setConfiguredNetworksLockdownState(android.content.ComponentName,boolean)>
<android.net.wifi.WifiInfo: void setScore(int)>
<com.android.server.devicepolicy.DevicePolicyConstants: com.android.server.devicepolicy.DevicePolicyConstants loadFromString(java.lang.String)>
<com.android.systemui.biometrics.AuthContainerView: java.lang.String getOpPackageName()>
<com.google.android.startop.iorap.DexOptEvent: void writeToParcel(android.os.Parcel,int)>
<com.android.systemui.statusbar.notification.row.NotificationSnooze: void onAttachedToWindow()>
<com.android.networkstack.tethering.TetheringNotificationUpdater: void onUpstreamCapabilitiesChanged(android.net.NetworkCapabilities)>
<com.android.settingslib.WirelessUtils: boolean isRadioAllowed(android.content.Context,java.lang.String)>
<com.android.systemui.screenshot.ScrollCaptureController: void getStatus(android.os.IBinder,com.android.systemui.screenshot.ScrollCaptureController.StatusListener)>
<com.android.systemui.qs.tiles.WifiTile.WifiDetailAdapter: void setItemsVisible(boolean)>
<com.android.pacprocessor.LibpacInterface: boolean setCurrentProxyScript(java.lang.String)>
<android.net.wifi.IWifiManager: android.net.wifi.SoftApConfiguration getSoftApConfiguration()>
<com.android.systemui.util.leak.LeakDetector: void trackInstance(java.lang.Object)>
<com.android.systemui.shared.system.PinnedStackListenerForwarder: void removeListener(com.android.systemui.shared.system.PinnedStackListenerForwarder.PinnedStackListener)>
<com.android.systemui.statusbar.AlphaOptimizedImageView: boolean hasOverlappingRendering()>
<javax.obex.ClientSession: boolean isSrmSupported()>
<com.android.settingslib.net.NetworkCycleChartData: java.util.List getUsageBuckets()>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasUserSetupCompleted()>
<com.android.server.stats.StatsCompanionService.PeriodicAlarmListener: void onAlarm()>
<lockedregioncodeinjection.LockTarget: java.lang.String getPostMethod()>
<com.android.settingslib.location.RecentLocationAccesses.Access: void <init>(java.lang.String,android.os.UserHandle,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence,long)>
<com.android.settingslib.wifi.AccessPoint: int getRssi()>
<com.android.settingslib.inputmethod.InputMethodAndSubtypeUtilCompat: java.lang.String buildInputMethodsAndSubtypesString(java.util.HashMap)>
<com.android.systemui.statusbar.phone.DarkIconDispatcherImpl: int getTintAnimationDuration()>
<com.android.systemui.assist.AssistOrbContainer: com.android.systemui.assist.AssistOrbView getOrb()>
<com.android.gallery3d.exif.ExifTag: void setHasDefinedCount(boolean)>
<com.android.systemui.doze.DozeLog: void traceScreenOff(int)>
<com.android.gallery3d.exif.ExifTag: boolean setValue(java.lang.String)>
<com.android.systemui.DessertCaseDream: void onAttachedToWindow()>
<android.net.wifi.WifiManager: boolean startScan()>
<com.android.systemui.statusbar.phone.PanelViewController: boolean isEnabled()>
<com.android.server.statusbar.StatusBarManagerService: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)>
<android.net.wifi.IWifiManager: void registerNetworkRequestMatchCallback(android.os.IBinder,android.net.wifi.INetworkRequestMatchCallback,int)>
<com.android.systemui.tuner.PowerNotificationControlsFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.android.systemui.log.dagger.LogModule: com.android.systemui.log.LogBuffer provideNotificationSectionLogBuffer(com.android.systemui.log.LogcatEchoTracker,com.android.systemui.dump.DumpManager)>
<com.android.server.usb.descriptors.UsbACInterface: void <init>(int,byte,byte,int)>
<com.android.server.textservices.TextServicesManagerService: boolean isSpellCheckerEnabled(int)>
<android.media.MediaSession2: java.lang.String getId()>
<android.text.PrecomputedTextMemoryUsageTest: void testMemoryUsage_CJK_Hyphenation()>
<javax.obex.ServerRequestHandler: void onClose()>
<com.android.systemui.qs.tiles.HotspotTile: void <init>(com.android.systemui.qs.QSHost,com.android.systemui.statusbar.policy.HotspotController,com.android.systemui.statusbar.policy.DataSaverController)>
<com.android.systemui.statusbar.notification.collection.coordinator.AppOpsCoordinator: void <init>(com.android.systemui.ForegroundServiceController,com.android.systemui.appops.AppOpsController,com.android.systemui.util.concurrency.DelayableExecutor)>
<com.android.server.voiceinteraction.DatabaseHelper: boolean updateKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger.KeyphraseSoundModel)>
<com.android.systemui.analytics.DataCollector: void onNotificatonStopDismissing()>
<com.android.systemui.egg.MLand: com.android.systemui.egg.MLand.Player getPlayer(int)>
<com.android.keyguard.KeyguardSliceView.Row: void setDarkAmount(float)>
<com.android.systemui.qs.external.QSTileServiceWrapper: boolean onTileRemoved()>
<com.android.systemui.statusbar.policy.LocationControllerImpl: boolean setLocationEnabled(boolean)>
<com.android.server.policy.SoftRestrictedPermissionPolicy: boolean mayDenyExtraAppOpIfGranted()>
<com.android.server.voiceinteraction.DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>
<com.android.systemui.qs.QSFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.android.server.pm.permission.PermissionManagerServiceInternal: void onNewUserCreated(int)>
<com.android.server.statusbar.StatusBarManagerInternal: void appTransitionFinished(int)>
<com.android.systemui.statusbar.CommandQueue: void appTransitionStarting(int,long,long)>
<com.android.systemui.pip.PipBoundsHandler: void onImeVisibilityChanged(boolean,int)>
<com.android.server.accessibility.MagnificationController.ControllerContext: android.animation.ValueAnimator newValueAnimator()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void close()>
<com.android.settingslib.RestrictedSwitchPreference: void checkRestrictionAndSetDisabled(java.lang.String)>
<com.android.soundpicker.RingtoneOverlayService: android.os.IBinder onBind(android.content.Intent)>
<javax.microedition.khronos.opengles.GL11: void glGetClipPlanef(int,java.nio.FloatBuffer)>
<com.android.gallery3d.exif.ExifInterface: short getTrueTagKey(int)>
<com.android.gallery3d.glrenderer.GLId: void glDeleteBuffers(javax.microedition.khronos.opengles.GL11,int,int[],int)>
<com.android.server.pm.PackageList: void <init>(java.util.List,android.content.pm.PackageManagerInternal.PackageListObserver)>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: java.lang.String getConnectedDeviceName()>
<com.android.uiautomator.core.UiDevice: void freezeRotation()>
<android.net.wifi.WifiScanner: void stopTrackingWifiChange(android.net.wifi.WifiScanner.WifiChangeListener)>
<com.android.systemui.qs.tiles.DndTile: int getMetricsCategory()>
<com.android.systemui.statusbar.policy.NetworkController.SignalCallback: void setMobileDataEnabled(boolean)>
<com.android.printspooler.util.PageRangeUtils: android.print.PageRange[] computeWhichPagesInFileToPrint(android.print.PageRange[],android.print.PageRange[],int)>
<com.android.server.utils.quota.QuotaChangeListener: void onQuotaStateChanged(int,java.lang.String,java.lang.String)>
<com.android.settingslib.wifi.WifiTracker.WifiListener: void onConnectedChanged()>
<android.media.MediaParser.SeekableInputReader: void seekToPosition(long)>
<com.android.server.pm.PackageManagerService: boolean setRequiredForSystemUser(java.lang.String,boolean)>
<com.android.systemui.assist.DeviceConfigHelper: void removeOnPropertiesChangedListener(android.provider.DeviceConfig.OnPropertiesChangedListener)>
<com.android.server.twilight.TwilightService: void onAlarm()>
<com.android.systemui.statusbar.policy.BluetoothControllerImpl: void onConnectionStateChanged(com.android.settingslib.bluetooth.CachedBluetoothDevice,int)>
<com.android.server.people.data.ConversationInfo: boolean isImportant()>
<com.android.systemui.glwallpaper.EglHelper: boolean hasEglDisplay()>
<com.android.settingslib.RestrictedLockUtilsInternal: com.android.settingslib.RestrictedLockUtils.EnforcedAdmin checkIfApplicationIsSuspended(android.content.Context,java.lang.String,int)>
<com.android.settingslib.development.DevelopmentSettingsEnabler: boolean isDevelopmentSettingsEnabled(android.content.Context)>
<com.android.systemui.shared.system.QuickStepContract: float getQuickStepTouchSlopPx(android.content.Context)>
<android.net.util.BaseNetdUnsolicitedEventListener: void onInterfaceLinkStateChanged(java.lang.String,boolean)>
<com.android.systemui.accessibility.WindowMagnificationController: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>
<android.app.usage.UsageStatsManagerInternal: int getAppStandbyBucket(java.lang.String,int,long)>
<com.android.systemui.qs.tileimpl.QSTileImpl.DrawableIcon: android.graphics.drawable.Drawable getInvisibleDrawable(android.content.Context)>
<android.media.MediaSession2Service: android.media.MediaSession2Service.MediaNotification onUpdateNotification(android.media.MediaSession2)>
<com.android.systemui.statusbar.phone.NavigationBarView: void updateStates()>
<android.net.wifi.aware.WifiAwareSession: void subscribe(android.net.wifi.aware.SubscribeConfig,android.net.wifi.aware.DiscoverySessionCallback,android.os.Handler)>
<com.android.systemui.util.sensors.AsyncSensorManager: boolean flushImpl(android.hardware.SensorEventListener)>
<com.android.server.role.RoleManagerService: void onStart()>
<com.android.systemui.statusbar.notification.row.ExpandableNotificationRow.ExpansionLogger: void logNotificationExpansion(java.lang.String,boolean,boolean)>
<com.android.server.accessibility.ActionReplacingCallback: void setPerformAccessibilityActionResult(boolean,int)>
<com.android.systemui.statusbar.notification.row.ExpandableView: boolean setTopRoundness(float,boolean)>
